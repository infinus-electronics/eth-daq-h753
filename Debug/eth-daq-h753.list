
eth-daq-h753.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024678  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003918  08024918  08024918  00025918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08028230  08028230  00029230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08028238  08028238  00029238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0802823c  0802823c  0002923c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  20000000  08028240  0002a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002800  20000088  080282c8  0002a088  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002888  080282c8  0002a888  2**0
                  ALLOC
  9 .dtcm_data    00018000  20002e88  080282c8  0002ae88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ethernet_data 000580c0  24000000  24000000  00043000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ram2_data    00030110  30000000  30000000  0009c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ram3_data    00008000  38000000  38000000  000cd000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ARM.attributes 0000002e  00000000  00000000  000d5000  2**0
                  CONTENTS, READONLY
 14 .debug_info   000635f1  00000000  00000000  000d502e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000c047  00000000  00000000  0013861f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000031b0  00000000  00000000  00144668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000027df  00000000  00000000  00147818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004f658  00000000  00000000  00149ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0005cc32  00000000  00000000  0019964f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00191fe6  00000000  00000000  001f6281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00388267  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000d850  00000000  00000000  003882ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000068  00000000  00000000  00395afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000088 	.word	0x20000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08024900 	.word	0x08024900

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000008c 	.word	0x2000008c
 80002dc:	08024900 	.word	0x08024900

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	@ 0x28
 80006a4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006a6:	f001 fe6f 	bl	8002388 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006aa:	4b31      	ldr	r3, [pc, #196]	@ (8000770 <main+0xd0>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d11b      	bne.n	80006ee <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006b6:	f3bf 8f4f 	dsb	sy
}
 80006ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006bc:	f3bf 8f6f 	isb	sy
}
 80006c0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000770 <main+0xd0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006ca:	f3bf 8f4f 	dsb	sy
}
 80006ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d0:	f3bf 8f6f 	isb	sy
}
 80006d4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <main+0xd0>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	4a25      	ldr	r2, [pc, #148]	@ (8000770 <main+0xd0>)
 80006dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006e2:	f3bf 8f4f 	dsb	sy
}
 80006e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006e8:	f3bf 8f6f 	isb	sy
}
 80006ec:	e000      	b.n	80006f0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006ee:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <main+0xd0>)
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d13b      	bne.n	8000774 <main+0xd4>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <main+0xd0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000704:	f3bf 8f4f 	dsb	sy
}
 8000708:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800070a:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <main+0xd0>)
 800070c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000710:	617b      	str	r3, [r7, #20]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	0b5b      	lsrs	r3, r3, #13
 8000716:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800071a:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	08db      	lsrs	r3, r3, #3
 8000720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000724:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	015a      	lsls	r2, r3, #5
 800072a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800072e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000730:	68fa      	ldr	r2, [r7, #12]
 8000732:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000734:	490e      	ldr	r1, [pc, #56]	@ (8000770 <main+0xd0>)
 8000736:	4313      	orrs	r3, r2
 8000738:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	1e5a      	subs	r2, r3, #1
 8000740:	60fa      	str	r2, [r7, #12]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1ef      	bne.n	8000726 <main+0x86>
    } while(sets-- != 0U);
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	1e5a      	subs	r2, r3, #1
 800074a:	613a      	str	r2, [r7, #16]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d1e5      	bne.n	800071c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000750:	f3bf 8f4f 	dsb	sy
}
 8000754:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <main+0xd0>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a05      	ldr	r2, [pc, #20]	@ (8000770 <main+0xd0>)
 800075c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000760:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000762:	f3bf 8f4f 	dsb	sy
}
 8000766:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000768:	f3bf 8f6f 	isb	sy
}
 800076c:	e003      	b.n	8000776 <main+0xd6>
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000774:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000776:	f019 ff7f 	bl	801a678 <HAL_Init>

  /* USER CODE BEGIN Init */
  usZero = 0;
 800077a:	4ba8      	ldr	r3, [pc, #672]	@ (8000a1c <main+0x37c>)
 800077c:	2200      	movs	r2, #0
 800077e:	801a      	strh	r2, [r3, #0]

  memset(usADCDataMock0, 0x41, sizeof(usADCDataMock0));
 8000780:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000784:	2141      	movs	r1, #65	@ 0x41
 8000786:	48a6      	ldr	r0, [pc, #664]	@ (8000a20 <main+0x380>)
 8000788:	f022 fb35 	bl	8022df6 <memset>
  memset(usADCDataMock1, 0x42, sizeof(usADCDataMock1));
 800078c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000790:	2142      	movs	r1, #66	@ 0x42
 8000792:	48a4      	ldr	r0, [pc, #656]	@ (8000a24 <main+0x384>)
 8000794:	f022 fb2f 	bl	8022df6 <memset>
  memset(usAuxADCDataMock0, 0x43, sizeof(usAuxADCDataMock0));
 8000798:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800079c:	2143      	movs	r1, #67	@ 0x43
 800079e:	48a2      	ldr	r0, [pc, #648]	@ (8000a28 <main+0x388>)
 80007a0:	f022 fb29 	bl	8022df6 <memset>
  memset(usAuxADCDataMock1, 0x44, sizeof(usAuxADCDataMock1));
 80007a4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80007a8:	2144      	movs	r1, #68	@ 0x44
 80007aa:	48a0      	ldr	r0, [pc, #640]	@ (8000a2c <main+0x38c>)
 80007ac:	f022 fb23 	bl	8022df6 <memset>
  __ASM volatile ("dsb 0xF":::"memory");
 80007b0:	f3bf 8f4f 	dsb	sy
}
 80007b4:	bf00      	nop
  __DSB();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b6:	f000 fbf3 	bl	8000fa0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007ba:	f000 fc9f 	bl	80010fc <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  vHeapInit();
 80007be:	f001 f905 	bl	80019cc <vHeapInit>
  vStartHighResolutionTimer();
 80007c2:	f022 f937 	bl	8022a34 <vStartHighResolutionTimer>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c6:	f001 f829 	bl	800181c <MX_GPIO_Init>
  MX_DMA_Init();
 80007ca:	f000 ffcf 	bl	800176c <MX_DMA_Init>
  //  MX_ETH_Init();
  MX_USART3_UART_Init();
 80007ce:	f000 ff81 	bl	80016d4 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80007d2:	f000 fd03 	bl	80011dc <MX_SPI1_Init>
  MX_SPI2_Init();
 80007d6:	f000 fd59 	bl	800128c <MX_SPI2_Init>
  MX_SPI3_Init();
 80007da:	f000 fdad 	bl	8001338 <MX_SPI3_Init>
  MX_TIM1_Init();
 80007de:	f000 fe03 	bl	80013e8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80007e2:	f000 fe53 	bl	800148c <MX_TIM3_Init>
  // MX_TIM2_Init();
  MX_I2C4_Init();
 80007e6:	f000 fcb9 	bl	800115c <MX_I2C4_Init>
  MX_TIM4_Init();
 80007ea:	f000 fe9d 	bl	8001528 <MX_TIM4_Init>
  MX_TIM5_Init();
 80007ee:	f000 ff21 	bl	8001634 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  // 7 Segment Setup
  // TIM4 CH1
  DMA1_Stream4->M0AR = &ulSevenSegD1;
 80007f2:	4b8f      	ldr	r3, [pc, #572]	@ (8000a30 <main+0x390>)
 80007f4:	4a8f      	ldr	r2, [pc, #572]	@ (8000a34 <main+0x394>)
 80007f6:	60da      	str	r2, [r3, #12]
  DMA1_Stream4->PAR = &(GPIOD->BSRR); // top 16 bits are reset, bottom 16 bits are set, set has priority if both bits set
 80007f8:	4b8d      	ldr	r3, [pc, #564]	@ (8000a30 <main+0x390>)
 80007fa:	4a8f      	ldr	r2, [pc, #572]	@ (8000a38 <main+0x398>)
 80007fc:	609a      	str	r2, [r3, #8]
  DMA1_Stream4->NDTR = 1;
 80007fe:	4b8c      	ldr	r3, [pc, #560]	@ (8000a30 <main+0x390>)
 8000800:	2201      	movs	r2, #1
 8000802:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000804:	f3bf 8f4f 	dsb	sy
}
 8000808:	bf00      	nop
  __DSB(); // required?
  DMA1_Stream4->CR |= DMA_SxCR_EN;
 800080a:	4b89      	ldr	r3, [pc, #548]	@ (8000a30 <main+0x390>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a88      	ldr	r2, [pc, #544]	@ (8000a30 <main+0x390>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6013      	str	r3, [r2, #0]
  // TIM4 UP
  DMA1_Stream5->M0AR = &ulSevenSegD2;
 8000816:	4b89      	ldr	r3, [pc, #548]	@ (8000a3c <main+0x39c>)
 8000818:	4a89      	ldr	r2, [pc, #548]	@ (8000a40 <main+0x3a0>)
 800081a:	60da      	str	r2, [r3, #12]
  DMA1_Stream5->PAR = &(GPIOD->BSRR);
 800081c:	4b87      	ldr	r3, [pc, #540]	@ (8000a3c <main+0x39c>)
 800081e:	4a86      	ldr	r2, [pc, #536]	@ (8000a38 <main+0x398>)
 8000820:	609a      	str	r2, [r3, #8]
  DMA1_Stream5->NDTR = 1;
 8000822:	4b86      	ldr	r3, [pc, #536]	@ (8000a3c <main+0x39c>)
 8000824:	2201      	movs	r2, #1
 8000826:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000828:	f3bf 8f4f 	dsb	sy
}
 800082c:	bf00      	nop
  __DSB(); // required?
  DMA1_Stream5->CR |= DMA_SxCR_EN;
 800082e:	4b83      	ldr	r3, [pc, #524]	@ (8000a3c <main+0x39c>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a82      	ldr	r2, [pc, #520]	@ (8000a3c <main+0x39c>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6013      	str	r3, [r2, #0]
  //??? initializing the vars in the top just doesn't work???
  ulSevenSegD2 = 0x00FF0000;
 800083a:	4b81      	ldr	r3, [pc, #516]	@ (8000a40 <main+0x3a0>)
 800083c:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8000840:	601a      	str	r2, [r3, #0]
  ulSevenSegD1 = 0x00FF0000;
 8000842:	4b7c      	ldr	r3, [pc, #496]	@ (8000a34 <main+0x394>)
 8000844:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8000848:	601a      	str	r2, [r3, #0]
  // TIM4 drives multiplexing
  TIM4->CR1 |= TIM_CR1_URS;
 800084a:	4b7e      	ldr	r3, [pc, #504]	@ (8000a44 <main+0x3a4>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a7d      	ldr	r2, [pc, #500]	@ (8000a44 <main+0x3a4>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	6013      	str	r3, [r2, #0]
  TIM4->CR1 &= ~TIM_CR1_UDIS;
 8000856:	4b7b      	ldr	r3, [pc, #492]	@ (8000a44 <main+0x3a4>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a7a      	ldr	r2, [pc, #488]	@ (8000a44 <main+0x3a4>)
 800085c:	f023 0302 	bic.w	r3, r3, #2
 8000860:	6013      	str	r3, [r2, #0]
  TIM4->CR2 &= ~TIM_CR2_CCDS;
 8000862:	4b78      	ldr	r3, [pc, #480]	@ (8000a44 <main+0x3a4>)
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	4a77      	ldr	r2, [pc, #476]	@ (8000a44 <main+0x3a4>)
 8000868:	f023 0308 	bic.w	r3, r3, #8
 800086c:	6053      	str	r3, [r2, #4]
  TIM4->DIER |= TIM_DIER_UDE | TIM_DIER_CC1DE;
 800086e:	4b75      	ldr	r3, [pc, #468]	@ (8000a44 <main+0x3a4>)
 8000870:	68db      	ldr	r3, [r3, #12]
 8000872:	4a74      	ldr	r2, [pc, #464]	@ (8000a44 <main+0x3a4>)
 8000874:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000878:	60d3      	str	r3, [r2, #12]
  TIM4->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E;
 800087a:	4b72      	ldr	r3, [pc, #456]	@ (8000a44 <main+0x3a4>)
 800087c:	6a1b      	ldr	r3, [r3, #32]
 800087e:	4a71      	ldr	r2, [pc, #452]	@ (8000a44 <main+0x3a4>)
 8000880:	f043 0311 	orr.w	r3, r3, #17
 8000884:	6213      	str	r3, [r2, #32]
  TIM4->EGR |= TIM_EGR_UG | TIM_EGR_CC1G;
 8000886:	4b6f      	ldr	r3, [pc, #444]	@ (8000a44 <main+0x3a4>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	4a6e      	ldr	r2, [pc, #440]	@ (8000a44 <main+0x3a4>)
 800088c:	f043 0303 	orr.w	r3, r3, #3
 8000890:	6153      	str	r3, [r2, #20]
  TIM4->CR1 |= TIM_CR1_CEN;
 8000892:	4b6c      	ldr	r3, [pc, #432]	@ (8000a44 <main+0x3a4>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a6b      	ldr	r2, [pc, #428]	@ (8000a44 <main+0x3a4>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6013      	str	r3, [r2, #0]

  // DAC Setup
  HAL_GPIO_WritePin(DUT_DAC_RESET_GPIO_Port, DUT_DAC_RESET_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008a4:	4868      	ldr	r0, [pc, #416]	@ (8000a48 <main+0x3a8>)
 80008a6:	f01c f9fd 	bl	801cca4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DUT_DAC_LDAC_GPIO_Port, DUT_DAC_LDAC_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008b0:	4865      	ldr	r0, [pc, #404]	@ (8000a48 <main+0x3a8>)
 80008b2:	f01c f9f7 	bl	801cca4 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80008b6:	2032      	movs	r0, #50	@ 0x32
 80008b8:	f019 ff70 	bl	801a79c <HAL_Delay>
  HAL_GPIO_WritePin(DUT_DAC_RESET_GPIO_Port, DUT_DAC_RESET_Pin, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008c2:	4861      	ldr	r0, [pc, #388]	@ (8000a48 <main+0x3a8>)
 80008c4:	f01c f9ee 	bl	801cca4 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80008c8:	2032      	movs	r0, #50	@ 0x32
 80008ca:	f019 ff67 	bl	801a79c <HAL_Delay>

  I2C4->CR2 = ((0b0001100 << 1) & 0xFFFE) // 7-bit address
 80008ce:	4b5f      	ldr	r3, [pc, #380]	@ (8000a4c <main+0x3ac>)
 80008d0:	4a5f      	ldr	r2, [pc, #380]	@ (8000a50 <main+0x3b0>)
 80008d2:	605a      	str	r2, [r3, #4]
              | (3 << 16)                 // NBYTES = 2
              | (0 << 10)                 // Write direction (0 = write)
              | I2C_CR2_AUTOEND           // Auto generate STOP
              | I2C_CR2_START;            // Generate START
  while ((I2C4->ISR & (I2C_ISR_TXIS | I2C_ISR_NACKF)) == 0)
 80008d4:	bf00      	nop
 80008d6:	4b5d      	ldr	r3, [pc, #372]	@ (8000a4c <main+0x3ac>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	f003 0312 	and.w	r3, r3, #18
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d0f9      	beq.n	80008d6 <main+0x236>
    ;
  //      if (I2C4->ISR & I2C_ISR_NACKF) {
  //          I2C4->ICR |= I2C_ICR_NACKCF;  // Clear NACK flag
  //          return;  // Abort on failure
  //      }
  I2C4->TXDR = 0b00110001; // write 2V = 3276 to DAC A, left justified 12 bit to 16 bit
 80008e2:	4b5a      	ldr	r3, [pc, #360]	@ (8000a4c <main+0x3ac>)
 80008e4:	2231      	movs	r2, #49	@ 0x31
 80008e6:	629a      	str	r2, [r3, #40]	@ 0x28
  while ((I2C4->ISR & (I2C_ISR_TXIS)) == 0)
 80008e8:	bf00      	nop
 80008ea:	4b58      	ldr	r3, [pc, #352]	@ (8000a4c <main+0x3ac>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d0f9      	beq.n	80008ea <main+0x24a>
    ;
  I2C4->TXDR = 0xCC; // MSB
 80008f6:	4b55      	ldr	r3, [pc, #340]	@ (8000a4c <main+0x3ac>)
 80008f8:	22cc      	movs	r2, #204	@ 0xcc
 80008fa:	629a      	str	r2, [r3, #40]	@ 0x28
  while ((I2C4->ISR & (I2C_ISR_TXIS)) == 0)
 80008fc:	bf00      	nop
 80008fe:	4b53      	ldr	r3, [pc, #332]	@ (8000a4c <main+0x3ac>)
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	2b00      	cmp	r3, #0
 8000908:	d0f9      	beq.n	80008fe <main+0x25e>
    ;
  I2C4->TXDR = 0xC0; // LSB
 800090a:	4b50      	ldr	r3, [pc, #320]	@ (8000a4c <main+0x3ac>)
 800090c:	22c0      	movs	r2, #192	@ 0xc0
 800090e:	629a      	str	r2, [r3, #40]	@ 0x28
  while ((I2C4->ISR & (I2C_ISR_TXE)) == 0)
 8000910:	bf00      	nop
 8000912:	4b4e      	ldr	r3, [pc, #312]	@ (8000a4c <main+0x3ac>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	2b00      	cmp	r3, #0
 800091c:	d0f9      	beq.n	8000912 <main+0x272>
    ;
  // Check if NACK occurred
  if (I2C4->ISR & I2C_ISR_NACKF)
 800091e:	4b4b      	ldr	r3, [pc, #300]	@ (8000a4c <main+0x3ac>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	f003 0310 	and.w	r3, r3, #16
 8000926:	2b00      	cmp	r3, #0
 8000928:	d005      	beq.n	8000936 <main+0x296>
  {
    // Handle error (e.g., reset I2C)
    I2C4->ICR |= I2C_ICR_NACKCF; // Clear NACK flag
 800092a:	4b48      	ldr	r3, [pc, #288]	@ (8000a4c <main+0x3ac>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	4a47      	ldr	r2, [pc, #284]	@ (8000a4c <main+0x3ac>)
 8000930:	f043 0310 	orr.w	r3, r3, #16
 8000934:	61d3      	str	r3, [r2, #28]
  }

  I2C4->CR2 = ((0b0001100 << 1) & 0xFFFE) // 7-bit address
 8000936:	4b45      	ldr	r3, [pc, #276]	@ (8000a4c <main+0x3ac>)
 8000938:	4a45      	ldr	r2, [pc, #276]	@ (8000a50 <main+0x3b0>)
 800093a:	605a      	str	r2, [r3, #4]
              | (3 << 16)                 // NBYTES = 2
              | (0 << 10)                 // Write direction (0 = write)
              | I2C_CR2_AUTOEND           // Auto generate STOP
              | I2C_CR2_START;            // Generate START
  while ((I2C4->ISR & (I2C_ISR_TXIS | I2C_ISR_NACKF)) == 0)
 800093c:	bf00      	nop
 800093e:	4b43      	ldr	r3, [pc, #268]	@ (8000a4c <main+0x3ac>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	f003 0312 	and.w	r3, r3, #18
 8000946:	2b00      	cmp	r3, #0
 8000948:	d0f9      	beq.n	800093e <main+0x29e>
    ;
  //      if (I2C4->ISR & I2C_ISR_NACKF) {
  //          I2C4->ICR |= I2C_ICR_NACKCF;  // Clear NACK flag
  //          return;  // Abort on failure
  //      }
  I2C4->TXDR = 0b00111000; // write 0.4V = 656 to DAC B, left justified 12 bit to 16 bit
 800094a:	4b40      	ldr	r3, [pc, #256]	@ (8000a4c <main+0x3ac>)
 800094c:	2238      	movs	r2, #56	@ 0x38
 800094e:	629a      	str	r2, [r3, #40]	@ 0x28
  while ((I2C4->ISR & (I2C_ISR_TXIS)) == 0)
 8000950:	bf00      	nop
 8000952:	4b3e      	ldr	r3, [pc, #248]	@ (8000a4c <main+0x3ac>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	2b00      	cmp	r3, #0
 800095c:	d0f9      	beq.n	8000952 <main+0x2b2>
    ;
  I2C4->TXDR = 0x29; // MSB
 800095e:	4b3b      	ldr	r3, [pc, #236]	@ (8000a4c <main+0x3ac>)
 8000960:	2229      	movs	r2, #41	@ 0x29
 8000962:	629a      	str	r2, [r3, #40]	@ 0x28
  while ((I2C4->ISR & (I2C_ISR_TXIS)) == 0)
 8000964:	bf00      	nop
 8000966:	4b39      	ldr	r3, [pc, #228]	@ (8000a4c <main+0x3ac>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	2b00      	cmp	r3, #0
 8000970:	d0f9      	beq.n	8000966 <main+0x2c6>
    ;
  I2C4->TXDR = 0x00; // LSB
 8000972:	4b36      	ldr	r3, [pc, #216]	@ (8000a4c <main+0x3ac>)
 8000974:	2200      	movs	r2, #0
 8000976:	629a      	str	r2, [r3, #40]	@ 0x28
  while ((I2C4->ISR & (I2C_ISR_TXE)) == 0)
 8000978:	bf00      	nop
 800097a:	4b34      	ldr	r3, [pc, #208]	@ (8000a4c <main+0x3ac>)
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	2b00      	cmp	r3, #0
 8000984:	d0f9      	beq.n	800097a <main+0x2da>
    ;
  // Check if NACK occurred
  if (I2C4->ISR & I2C_ISR_NACKF)
 8000986:	4b31      	ldr	r3, [pc, #196]	@ (8000a4c <main+0x3ac>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	f003 0310 	and.w	r3, r3, #16
 800098e:	2b00      	cmp	r3, #0
 8000990:	d005      	beq.n	800099e <main+0x2fe>
  {
    // Handle error (e.g., reset I2C)
    I2C4->ICR |= I2C_ICR_NACKCF; // Clear NACK flag
 8000992:	4b2e      	ldr	r3, [pc, #184]	@ (8000a4c <main+0x3ac>)
 8000994:	69db      	ldr	r3, [r3, #28]
 8000996:	4a2d      	ldr	r2, [pc, #180]	@ (8000a4c <main+0x3ac>)
 8000998:	f043 0310 	orr.w	r3, r3, #16
 800099c:	61d3      	str	r3, [r2, #28]
  }

  // SPI1 RX Stream
  DMA1_Stream0->M0AR = usADCDataMock0;
 800099e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a54 <main+0x3b4>)
 80009a0:	4a1f      	ldr	r2, [pc, #124]	@ (8000a20 <main+0x380>)
 80009a2:	60da      	str	r2, [r3, #12]
  DMA1_Stream0->M1AR = usADCDataMock1;
 80009a4:	4b2b      	ldr	r3, [pc, #172]	@ (8000a54 <main+0x3b4>)
 80009a6:	4a1f      	ldr	r2, [pc, #124]	@ (8000a24 <main+0x384>)
 80009a8:	611a      	str	r2, [r3, #16]
  DMA1_Stream0->PAR = &(SPI1->RXDR);
 80009aa:	4b2a      	ldr	r3, [pc, #168]	@ (8000a54 <main+0x3b4>)
 80009ac:	4a2a      	ldr	r2, [pc, #168]	@ (8000a58 <main+0x3b8>)
 80009ae:	609a      	str	r2, [r3, #8]
  DMA1_Stream0->CR |= DMA_DOUBLE_BUFFER_M0;
 80009b0:	4b28      	ldr	r3, [pc, #160]	@ (8000a54 <main+0x3b4>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a27      	ldr	r2, [pc, #156]	@ (8000a54 <main+0x3b4>)
 80009b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009ba:	6013      	str	r3, [r2, #0]
  DMA1_Stream0->NDTR = ADC_BUFFER_HALF_SIZE;
 80009bc:	4b25      	ldr	r3, [pc, #148]	@ (8000a54 <main+0x3b4>)
 80009be:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80009c2:	605a      	str	r2, [r3, #4]
  //  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
  DMA1_Stream0->CR |= DMA_SxCR_TCIE;
 80009c4:	4b23      	ldr	r3, [pc, #140]	@ (8000a54 <main+0x3b4>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a22      	ldr	r2, [pc, #136]	@ (8000a54 <main+0x3b4>)
 80009ca:	f043 0310 	orr.w	r3, r3, #16
 80009ce:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80009d0:	f3bf 8f4f 	dsb	sy
}
 80009d4:	bf00      	nop
  __DSB(); // required?
  DMA1_Stream0->CR |= DMA_SxCR_EN;
 80009d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a54 <main+0x3b4>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a1e      	ldr	r2, [pc, #120]	@ (8000a54 <main+0x3b4>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6013      	str	r3, [r2, #0]

  // SPI2 RX Stream
  DMA1_Stream1->M0AR = usAuxADCDataMock0;
 80009e2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a5c <main+0x3bc>)
 80009e4:	4a10      	ldr	r2, [pc, #64]	@ (8000a28 <main+0x388>)
 80009e6:	60da      	str	r2, [r3, #12]
  DMA1_Stream1->M1AR = usAuxADCDataMock1;
 80009e8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a5c <main+0x3bc>)
 80009ea:	4a10      	ldr	r2, [pc, #64]	@ (8000a2c <main+0x38c>)
 80009ec:	611a      	str	r2, [r3, #16]
  DMA1_Stream1->PAR = &(SPI2->RXDR);
 80009ee:	4b1b      	ldr	r3, [pc, #108]	@ (8000a5c <main+0x3bc>)
 80009f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a60 <main+0x3c0>)
 80009f2:	609a      	str	r2, [r3, #8]
  DMA1_Stream1->CR |= DMA_DOUBLE_BUFFER_M0;
 80009f4:	4b19      	ldr	r3, [pc, #100]	@ (8000a5c <main+0x3bc>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a18      	ldr	r2, [pc, #96]	@ (8000a5c <main+0x3bc>)
 80009fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009fe:	6013      	str	r3, [r2, #0]
  DMA1_Stream1->NDTR = AUX_ADC_BUFFER_HALF_SIZE;
 8000a00:	4b16      	ldr	r3, [pc, #88]	@ (8000a5c <main+0x3bc>)
 8000a02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a06:	605a      	str	r2, [r3, #4]
  //  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
  DMA1_Stream1->CR |= DMA_SxCR_TCIE;
 8000a08:	4b14      	ldr	r3, [pc, #80]	@ (8000a5c <main+0x3bc>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a13      	ldr	r2, [pc, #76]	@ (8000a5c <main+0x3bc>)
 8000a0e:	f043 0310 	orr.w	r3, r3, #16
 8000a12:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a14:	f3bf 8f4f 	dsb	sy
 8000a18:	e024      	b.n	8000a64 <main+0x3c4>
 8000a1a:	bf00      	nop
 8000a1c:	30000000 	.word	0x30000000
 8000a20:	30000004 	.word	0x30000004
 8000a24:	30010004 	.word	0x30010004
 8000a28:	30020004 	.word	0x30020004
 8000a2c:	30028004 	.word	0x30028004
 8000a30:	40020070 	.word	0x40020070
 8000a34:	30030108 	.word	0x30030108
 8000a38:	58020c18 	.word	0x58020c18
 8000a3c:	40020088 	.word	0x40020088
 8000a40:	3003010c 	.word	0x3003010c
 8000a44:	40000800 	.word	0x40000800
 8000a48:	58020c00 	.word	0x58020c00
 8000a4c:	58001c00 	.word	0x58001c00
 8000a50:	02032018 	.word	0x02032018
 8000a54:	40020010 	.word	0x40020010
 8000a58:	40013030 	.word	0x40013030
 8000a5c:	40020028 	.word	0x40020028
 8000a60:	40003830 	.word	0x40003830
}
 8000a64:	bf00      	nop
  __DSB(); // required?
  DMA1_Stream1->CR |= DMA_SxCR_EN;
 8000a66:	4ba2      	ldr	r3, [pc, #648]	@ (8000cf0 <main+0x650>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4aa1      	ldr	r2, [pc, #644]	@ (8000cf0 <main+0x650>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6013      	str	r3, [r2, #0]

  // TIM1 UP DMA
  DMA1_Stream2->M0AR = &usZero;
 8000a72:	4ba0      	ldr	r3, [pc, #640]	@ (8000cf4 <main+0x654>)
 8000a74:	4aa0      	ldr	r2, [pc, #640]	@ (8000cf8 <main+0x658>)
 8000a76:	60da      	str	r2, [r3, #12]
  DMA1_Stream2->PAR = &(SPI1->TXDR);
 8000a78:	4b9e      	ldr	r3, [pc, #632]	@ (8000cf4 <main+0x654>)
 8000a7a:	4aa0      	ldr	r2, [pc, #640]	@ (8000cfc <main+0x65c>)
 8000a7c:	609a      	str	r2, [r3, #8]
  DMA1_Stream2->NDTR = 1;
 8000a7e:	4b9d      	ldr	r3, [pc, #628]	@ (8000cf4 <main+0x654>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a84:	f3bf 8f4f 	dsb	sy
}
 8000a88:	bf00      	nop
  __DSB(); // required?
  DMA1_Stream2->CR |= DMA_SxCR_EN;
 8000a8a:	4b9a      	ldr	r3, [pc, #616]	@ (8000cf4 <main+0x654>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a99      	ldr	r2, [pc, #612]	@ (8000cf4 <main+0x654>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6013      	str	r3, [r2, #0]

  // TIM3 UP DMA
  DMA1_Stream3->M0AR = &usZero;
 8000a96:	4b9a      	ldr	r3, [pc, #616]	@ (8000d00 <main+0x660>)
 8000a98:	4a97      	ldr	r2, [pc, #604]	@ (8000cf8 <main+0x658>)
 8000a9a:	60da      	str	r2, [r3, #12]
  DMA1_Stream3->PAR = &(SPI2->TXDR);
 8000a9c:	4b98      	ldr	r3, [pc, #608]	@ (8000d00 <main+0x660>)
 8000a9e:	4a99      	ldr	r2, [pc, #612]	@ (8000d04 <main+0x664>)
 8000aa0:	609a      	str	r2, [r3, #8]
  DMA1_Stream3->NDTR = 1;
 8000aa2:	4b97      	ldr	r3, [pc, #604]	@ (8000d00 <main+0x660>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000aa8:	f3bf 8f4f 	dsb	sy
}
 8000aac:	bf00      	nop
  __DSB(); // required?
  DMA1_Stream3->CR |= DMA_SxCR_EN;
 8000aae:	4b94      	ldr	r3, [pc, #592]	@ (8000d00 <main+0x660>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a93      	ldr	r2, [pc, #588]	@ (8000d00 <main+0x660>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6013      	str	r3, [r2, #0]

  // initialize high speed ADC here
  SPI1->CR2 = 0; // reinitialize tsize
 8000aba:	4b93      	ldr	r3, [pc, #588]	@ (8000d08 <main+0x668>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	605a      	str	r2, [r3, #4]
  SPI1->CR1 |= SPI_CR1_SPE;
 8000ac0:	4b91      	ldr	r3, [pc, #580]	@ (8000d08 <main+0x668>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a90      	ldr	r2, [pc, #576]	@ (8000d08 <main+0x668>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_CSTART;
 8000acc:	4b8e      	ldr	r3, [pc, #568]	@ (8000d08 <main+0x668>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a8d      	ldr	r2, [pc, #564]	@ (8000d08 <main+0x668>)
 8000ad2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ad6:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(HS_ADC_RESET_GPIO_Port, HS_ADC_RESET_Pin, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ade:	488b      	ldr	r0, [pc, #556]	@ (8000d0c <main+0x66c>)
 8000ae0:	f01c f8e0 	bl	801cca4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000ae4:	2064      	movs	r0, #100	@ 0x64
 8000ae6:	f019 fe59 	bl	801a79c <HAL_Delay>
  HAL_GPIO_WritePin(HS_ADC_RESET_GPIO_Port, HS_ADC_RESET_Pin, GPIO_PIN_SET);
 8000aea:	2201      	movs	r2, #1
 8000aec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000af0:	4886      	ldr	r0, [pc, #536]	@ (8000d0c <main+0x66c>)
 8000af2:	f01c f8d7 	bl	801cca4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000af6:	2064      	movs	r0, #100	@ 0x64
 8000af8:	f019 fe50 	bl	801a79c <HAL_Delay>
  uint8_t spi_data[2] = {0b00011011, 0x80 + 0x05}; // low reference, low input, vcm on, refpbuf on, input buf on
 8000afc:	f248 531b 	movw	r3, #34075	@ 0x851b
 8000b00:	813b      	strh	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000b02:	7a7b      	ldrb	r3, [r7, #9]
 8000b04:	021b      	lsls	r3, r3, #8
 8000b06:	7a3a      	ldrb	r2, [r7, #8]
 8000b08:	431a      	orrs	r2, r3
 8000b0a:	4b7f      	ldr	r3, [pc, #508]	@ (8000d08 <main+0x668>)
 8000b0c:	621a      	str	r2, [r3, #32]
  while ((SPI1->SR & SPI_SR_TXC) == 0)
 8000b0e:	bf00      	nop
 8000b10:	4b7d      	ldr	r3, [pc, #500]	@ (8000d08 <main+0x668>)
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d0f9      	beq.n	8000b10 <main+0x470>
  {
  }; // wait for enough space to become available
  spi_data[1]++;
 8000b1c:	7a7b      	ldrb	r3, [r7, #9]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	727b      	strb	r3, [r7, #9]
  spi_data[0] = 0b00010000; // sync control mode
 8000b24:	2310      	movs	r3, #16
 8000b26:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000b28:	7a7b      	ldrb	r3, [r7, #9]
 8000b2a:	021b      	lsls	r3, r3, #8
 8000b2c:	7a3a      	ldrb	r2, [r7, #8]
 8000b2e:	431a      	orrs	r2, r3
 8000b30:	4b75      	ldr	r3, [pc, #468]	@ (8000d08 <main+0x668>)
 8000b32:	621a      	str	r2, [r3, #32]
  while ((SPI1->SR & SPI_SR_TXC) == 0)
 8000b34:	bf00      	nop
 8000b36:	4b74      	ldr	r3, [pc, #464]	@ (8000d08 <main+0x668>)
 8000b38:	695b      	ldr	r3, [r3, #20]
 8000b3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d0f9      	beq.n	8000b36 <main+0x496>
  {
  }; // wait for enough space to become available
  spi_data[1]++;
 8000b42:	7a7b      	ldrb	r3, [r7, #9]
 8000b44:	3301      	adds	r3, #1
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	727b      	strb	r3, [r7, #9]
  spi_data[0] = 0b00001001; // sinc4 osr16
 8000b4a:	2309      	movs	r3, #9
 8000b4c:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000b4e:	7a7b      	ldrb	r3, [r7, #9]
 8000b50:	021b      	lsls	r3, r3, #8
 8000b52:	7a3a      	ldrb	r2, [r7, #8]
 8000b54:	431a      	orrs	r2, r3
 8000b56:	4b6c      	ldr	r3, [pc, #432]	@ (8000d08 <main+0x668>)
 8000b58:	621a      	str	r2, [r3, #32]
  while ((SPI1->SR & SPI_SR_TXC) == 0)
 8000b5a:	bf00      	nop
 8000b5c:	4b6a      	ldr	r3, [pc, #424]	@ (8000d08 <main+0x668>)
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d0f9      	beq.n	8000b5c <main+0x4bc>
  {
  }; // wait for enough space to become available
  spi_data[1]++;
 8000b68:	7a7b      	ldrb	r3, [r7, #9]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	727b      	strb	r3, [r7, #9]
  spi_data[0] = 0b10000000; // external clock
 8000b70:	2380      	movs	r3, #128	@ 0x80
 8000b72:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000b74:	7a7b      	ldrb	r3, [r7, #9]
 8000b76:	021b      	lsls	r3, r3, #8
 8000b78:	7a3a      	ldrb	r2, [r7, #8]
 8000b7a:	431a      	orrs	r2, r3
 8000b7c:	4b62      	ldr	r3, [pc, #392]	@ (8000d08 <main+0x668>)
 8000b7e:	621a      	str	r2, [r3, #32]
  while ((SPI1->SR & SPI_SR_TXC) == 0)
 8000b80:	bf00      	nop
 8000b82:	4b61      	ldr	r3, [pc, #388]	@ (8000d08 <main+0x668>)
 8000b84:	695b      	ldr	r3, [r3, #20]
 8000b86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d0f9      	beq.n	8000b82 <main+0x4e2>
  {
  };                         // wait for enough space to become available
  spi_data[1] = 0x80 + 0x03; // start conversion
 8000b8e:	2383      	movs	r3, #131	@ 0x83
 8000b90:	727b      	strb	r3, [r7, #9]
  spi_data[0] = 0b00000010;
 8000b92:	2302      	movs	r3, #2
 8000b94:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000b96:	7a7b      	ldrb	r3, [r7, #9]
 8000b98:	021b      	lsls	r3, r3, #8
 8000b9a:	7a3a      	ldrb	r2, [r7, #8]
 8000b9c:	431a      	orrs	r2, r3
 8000b9e:	4b5a      	ldr	r3, [pc, #360]	@ (8000d08 <main+0x668>)
 8000ba0:	621a      	str	r2, [r3, #32]
  while ((SPI1->SR & SPI_SR_TXC) == 0)
 8000ba2:	bf00      	nop
 8000ba4:	4b58      	ldr	r3, [pc, #352]	@ (8000d08 <main+0x668>)
 8000ba6:	695b      	ldr	r3, [r3, #20]
 8000ba8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d0f9      	beq.n	8000ba4 <main+0x504>
  {
  }; // wait for enough space to become available
  SPI1->CR1 &= ~SPI_CR1_SPE;
 8000bb0:	4b55      	ldr	r3, [pc, #340]	@ (8000d08 <main+0x668>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a54      	ldr	r2, [pc, #336]	@ (8000d08 <main+0x668>)
 8000bb6:	f023 0301 	bic.w	r3, r3, #1
 8000bba:	6013      	str	r3, [r2, #0]

  // GADC Setup
  SPI2->CR2 = 0;         // reinitialize tsize
 8000bbc:	4b54      	ldr	r3, [pc, #336]	@ (8000d10 <main+0x670>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	605a      	str	r2, [r3, #4]
  SPI2->CFG1 |= 0b11111; // use 32 bit mode for config
 8000bc2:	4b53      	ldr	r3, [pc, #332]	@ (8000d10 <main+0x670>)
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	4a52      	ldr	r2, [pc, #328]	@ (8000d10 <main+0x670>)
 8000bc8:	f043 031f 	orr.w	r3, r3, #31
 8000bcc:	6093      	str	r3, [r2, #8]
  SPI2->CR1 |= SPI_CR1_SPE;
 8000bce:	4b50      	ldr	r3, [pc, #320]	@ (8000d10 <main+0x670>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a4f      	ldr	r2, [pc, #316]	@ (8000d10 <main+0x670>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6013      	str	r3, [r2, #0]
  SPI2->CR1 |= SPI_CR1_CSTART;
 8000bda:	4b4d      	ldr	r3, [pc, #308]	@ (8000d10 <main+0x670>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a4c      	ldr	r2, [pc, #304]	@ (8000d10 <main+0x670>)
 8000be0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000be4:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(GADC_RESET_GPIO_Port, GADC_RESET_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bec:	4849      	ldr	r0, [pc, #292]	@ (8000d14 <main+0x674>)
 8000bee:	f01c f859 	bl	801cca4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000bf2:	2064      	movs	r0, #100	@ 0x64
 8000bf4:	f019 fdd2 	bl	801a79c <HAL_Delay>
  HAL_GPIO_WritePin(GADC_RESET_GPIO_Port, GADC_RESET_Pin, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bfe:	4845      	ldr	r0, [pc, #276]	@ (8000d14 <main+0x674>)
 8000c00:	f01c f850 	bl	801cca4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000c04:	2064      	movs	r0, #100	@ 0x64
 8000c06:	f019 fdc9 	bl	801a79c <HAL_Delay>
  uint16_t ucGADCSPIData[2] = {0b1101000000000100, (1 << 5) | (1 << 4)}; // disable alarms
 8000c0a:	4b43      	ldr	r3, [pc, #268]	@ (8000d18 <main+0x678>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	607b      	str	r3, [r7, #4]
  SPI2->TXDR = ((ucGADCSPIData[0] << 16) | ucGADCSPIData[1]);
 8000c10:	88bb      	ldrh	r3, [r7, #4]
 8000c12:	041b      	lsls	r3, r3, #16
 8000c14:	88fa      	ldrh	r2, [r7, #6]
 8000c16:	431a      	orrs	r2, r3
 8000c18:	4b3d      	ldr	r3, [pc, #244]	@ (8000d10 <main+0x670>)
 8000c1a:	621a      	str	r2, [r3, #32]
  while ((SPI2->SR & SPI_SR_TXC) == 0)
 8000c1c:	bf00      	nop
 8000c1e:	4b3c      	ldr	r3, [pc, #240]	@ (8000d10 <main+0x670>)
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d0f9      	beq.n	8000c1e <main+0x57e>
  {
  };                                     // wait for enough space to become available
  ucGADCSPIData[0] = 0b1101000000010100; // 14h
 8000c2a:	f24d 0314 	movw	r3, #53268	@ 0xd014
 8000c2e:	80bb      	strh	r3, [r7, #4]
  ucGADCSPIData[1] = 0b10;               // range select +-1.5x VREF
 8000c30:	2302      	movs	r3, #2
 8000c32:	80fb      	strh	r3, [r7, #6]
  SPI2->TXDR = ((ucGADCSPIData[0] << 16) | ucGADCSPIData[1]);
 8000c34:	88bb      	ldrh	r3, [r7, #4]
 8000c36:	041b      	lsls	r3, r3, #16
 8000c38:	88fa      	ldrh	r2, [r7, #6]
 8000c3a:	431a      	orrs	r2, r3
 8000c3c:	4b34      	ldr	r3, [pc, #208]	@ (8000d10 <main+0x670>)
 8000c3e:	621a      	str	r2, [r3, #32]
  while ((SPI2->SR & SPI_SR_TXC) == 0)
 8000c40:	bf00      	nop
 8000c42:	4b33      	ldr	r3, [pc, #204]	@ (8000d10 <main+0x670>)
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d0f9      	beq.n	8000c42 <main+0x5a2>
  {
  };
  SPI2->CR1 &= ~SPI_CR1_SPE;
 8000c4e:	4b30      	ldr	r3, [pc, #192]	@ (8000d10 <main+0x670>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a2f      	ldr	r2, [pc, #188]	@ (8000d10 <main+0x670>)
 8000c54:	f023 0301 	bic.w	r3, r3, #1
 8000c58:	6013      	str	r3, [r2, #0]
  SPI2->CFG1 &= ~0b11111;
 8000c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8000d10 <main+0x670>)
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	4a2c      	ldr	r2, [pc, #176]	@ (8000d10 <main+0x670>)
 8000c60:	f023 031f 	bic.w	r3, r3, #31
 8000c64:	6093      	str	r3, [r2, #8]
  SPI2->CFG1 |= 0b1111; // switch back to 16 bit transfers
 8000c66:	4b2a      	ldr	r3, [pc, #168]	@ (8000d10 <main+0x670>)
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	4a29      	ldr	r2, [pc, #164]	@ (8000d10 <main+0x670>)
 8000c6c:	f043 030f 	orr.w	r3, r3, #15
 8000c70:	6093      	str	r3, [r2, #8]

  // TC ADC SETUP
  // interleave temp sensor and internal ADC
  usTCADCConfig[0] = 0b1000101110001010; // FSR 0.256mV, 128SPS, Single Conversion, Start Conversion, Default Inputs
 8000c72:	4b2a      	ldr	r3, [pc, #168]	@ (8000d1c <main+0x67c>)
 8000c74:	f648 328a 	movw	r2, #35722	@ 0x8b8a
 8000c78:	801a      	strh	r2, [r3, #0]
  usTCADCConfig[1] = 0b1000101110011010; // same as above, use internal temp sensor
 8000c7a:	4b28      	ldr	r3, [pc, #160]	@ (8000d1c <main+0x67c>)
 8000c7c:	f648 329a 	movw	r2, #35738	@ 0x8b9a
 8000c80:	805a      	strh	r2, [r3, #2]
  // TIM5 UP
  DMA1_Stream6->M0AR = usTCADCConfig;
 8000c82:	4b27      	ldr	r3, [pc, #156]	@ (8000d20 <main+0x680>)
 8000c84:	4a25      	ldr	r2, [pc, #148]	@ (8000d1c <main+0x67c>)
 8000c86:	60da      	str	r2, [r3, #12]
  DMA1_Stream6->PAR = &(SPI3->TXDR);
 8000c88:	4b25      	ldr	r3, [pc, #148]	@ (8000d20 <main+0x680>)
 8000c8a:	4a26      	ldr	r2, [pc, #152]	@ (8000d24 <main+0x684>)
 8000c8c:	609a      	str	r2, [r3, #8]
  DMA1_Stream6->NDTR = 2;
 8000c8e:	4b24      	ldr	r3, [pc, #144]	@ (8000d20 <main+0x680>)
 8000c90:	2202      	movs	r2, #2
 8000c92:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c94:	f3bf 8f4f 	dsb	sy
}
 8000c98:	bf00      	nop
  __DSB(); // required?
  DMA1_Stream6->CR |= DMA_SxCR_EN;
 8000c9a:	4b21      	ldr	r3, [pc, #132]	@ (8000d20 <main+0x680>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a20      	ldr	r2, [pc, #128]	@ (8000d20 <main+0x680>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6013      	str	r3, [r2, #0]
  // SPI3 RX Stream
  DMA1_Stream7->M0AR = usTCADCData0;
 8000ca6:	4b20      	ldr	r3, [pc, #128]	@ (8000d28 <main+0x688>)
 8000ca8:	4a20      	ldr	r2, [pc, #128]	@ (8000d2c <main+0x68c>)
 8000caa:	60da      	str	r2, [r3, #12]
  DMA1_Stream7->M1AR = usTCADCData1;
 8000cac:	4b1e      	ldr	r3, [pc, #120]	@ (8000d28 <main+0x688>)
 8000cae:	4a20      	ldr	r2, [pc, #128]	@ (8000d30 <main+0x690>)
 8000cb0:	611a      	str	r2, [r3, #16]
  DMA1_Stream7->PAR = &(SPI3->RXDR);
 8000cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d28 <main+0x688>)
 8000cb4:	4a1f      	ldr	r2, [pc, #124]	@ (8000d34 <main+0x694>)
 8000cb6:	609a      	str	r2, [r3, #8]
  DMA1_Stream7->CR |= DMA_DOUBLE_BUFFER_M0;
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d28 <main+0x688>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a1a      	ldr	r2, [pc, #104]	@ (8000d28 <main+0x688>)
 8000cbe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cc2:	6013      	str	r3, [r2, #0]
  DMA1_Stream7->NDTR = TC_ADC_BUFFER_HALF_SIZE;
 8000cc4:	4b18      	ldr	r3, [pc, #96]	@ (8000d28 <main+0x688>)
 8000cc6:	2240      	movs	r2, #64	@ 0x40
 8000cc8:	605a      	str	r2, [r3, #4]
  //  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
  DMA1_Stream7->CR |= DMA_SxCR_TCIE;
 8000cca:	4b17      	ldr	r3, [pc, #92]	@ (8000d28 <main+0x688>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a16      	ldr	r2, [pc, #88]	@ (8000d28 <main+0x688>)
 8000cd0:	f043 0310 	orr.w	r3, r3, #16
 8000cd4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cd6:	f3bf 8f4f 	dsb	sy
}
 8000cda:	bf00      	nop
  __DSB(); // required?
  DMA1_Stream7->CR |= DMA_SxCR_EN;
 8000cdc:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <main+0x688>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a11      	ldr	r2, [pc, #68]	@ (8000d28 <main+0x688>)
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	6013      	str	r3, [r2, #0]
  // SPI3 Config
  SPI3->CR2 = 0; // reinitialize tsize
 8000ce8:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <main+0x698>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	e025      	b.n	8000d3c <main+0x69c>
 8000cf0:	40020028 	.word	0x40020028
 8000cf4:	40020040 	.word	0x40020040
 8000cf8:	30000000 	.word	0x30000000
 8000cfc:	40013020 	.word	0x40013020
 8000d00:	40020058 	.word	0x40020058
 8000d04:	40003820 	.word	0x40003820
 8000d08:	40013000 	.word	0x40013000
 8000d0c:	58020000 	.word	0x58020000
 8000d10:	40003800 	.word	0x40003800
 8000d14:	58020c00 	.word	0x58020c00
 8000d18:	08024954 	.word	0x08024954
 8000d1c:	30030004 	.word	0x30030004
 8000d20:	400200a0 	.word	0x400200a0
 8000d24:	40003c20 	.word	0x40003c20
 8000d28:	400200b8 	.word	0x400200b8
 8000d2c:	30030008 	.word	0x30030008
 8000d30:	30030088 	.word	0x30030088
 8000d34:	40003c30 	.word	0x40003c30
 8000d38:	40003c00 	.word	0x40003c00
  SPI3->CFG1 |= SPI_CFG1_RXDMAEN;
 8000d3c:	4b7b      	ldr	r3, [pc, #492]	@ (8000f2c <main+0x88c>)
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	4a7a      	ldr	r2, [pc, #488]	@ (8000f2c <main+0x88c>)
 8000d42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d46:	6093      	str	r3, [r2, #8]
  SPI3->CR1 |= SPI_CR1_SPE;
 8000d48:	4b78      	ldr	r3, [pc, #480]	@ (8000f2c <main+0x88c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a77      	ldr	r2, [pc, #476]	@ (8000f2c <main+0x88c>)
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	6013      	str	r3, [r2, #0]
  SPI3->CR1 |= SPI_CR1_CSTART;
 8000d54:	4b75      	ldr	r3, [pc, #468]	@ (8000f2c <main+0x88c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a74      	ldr	r2, [pc, #464]	@ (8000f2c <main+0x88c>)
 8000d5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d5e:	6013      	str	r3, [r2, #0]
  // enable TIM5 (SPI3 TX)
  TIM5->CR1 |= TIM_CR1_URS;
 8000d60:	4b73      	ldr	r3, [pc, #460]	@ (8000f30 <main+0x890>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a72      	ldr	r2, [pc, #456]	@ (8000f30 <main+0x890>)
 8000d66:	f043 0304 	orr.w	r3, r3, #4
 8000d6a:	6013      	str	r3, [r2, #0]
  TIM5->CR1 &= ~TIM_CR1_UDIS;
 8000d6c:	4b70      	ldr	r3, [pc, #448]	@ (8000f30 <main+0x890>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a6f      	ldr	r2, [pc, #444]	@ (8000f30 <main+0x890>)
 8000d72:	f023 0302 	bic.w	r3, r3, #2
 8000d76:	6013      	str	r3, [r2, #0]
  TIM5->DIER |= TIM_DMA_UPDATE;
 8000d78:	4b6d      	ldr	r3, [pc, #436]	@ (8000f30 <main+0x890>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	4a6c      	ldr	r2, [pc, #432]	@ (8000f30 <main+0x890>)
 8000d7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d82:	60d3      	str	r3, [r2, #12]
  TIM5->EGR |= TIM_EGR_UG;
 8000d84:	4b6a      	ldr	r3, [pc, #424]	@ (8000f30 <main+0x890>)
 8000d86:	695b      	ldr	r3, [r3, #20]
 8000d88:	4a69      	ldr	r2, [pc, #420]	@ (8000f30 <main+0x890>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	6153      	str	r3, [r2, #20]
  TIM5->CR1 |= TIM_CR1_CEN;
 8000d90:	4b67      	ldr	r3, [pc, #412]	@ (8000f30 <main+0x890>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a66      	ldr	r2, [pc, #408]	@ (8000f30 <main+0x890>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	6013      	str	r3, [r2, #0]

  HAL_GPIO_WritePin(DUT_GATE_SEL_GPIO_Port, DUT_GATE_SEL_Pin, GPIO_PIN_SET);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	2120      	movs	r1, #32
 8000da0:	4864      	ldr	r0, [pc, #400]	@ (8000f34 <main+0x894>)
 8000da2:	f01b ff7f 	bl	801cca4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DUT_HVDC_ENABLE_GPIO_Port, DUT_HVDC_ENABLE_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2104      	movs	r1, #4
 8000daa:	4862      	ldr	r0, [pc, #392]	@ (8000f34 <main+0x894>)
 8000dac:	f01b ff7a 	bl	801cca4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DUT_VICTRL_SEL_GPIO_Port, DUT_VICTRL_SEL_Pin, GPIO_PIN_SET);
 8000db0:	2201      	movs	r2, #1
 8000db2:	2110      	movs	r1, #16
 8000db4:	485f      	ldr	r0, [pc, #380]	@ (8000f34 <main+0x894>)
 8000db6:	f01b ff75 	bl	801cca4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DUT_VGS_IDLE_SEL_GPIO_Port, DUT_VGS_IDLE_SEL_Pin, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2108      	movs	r1, #8
 8000dbe:	485d      	ldr	r0, [pc, #372]	@ (8000f34 <main+0x894>)
 8000dc0:	f01b ff70 	bl	801cca4 <HAL_GPIO_WritePin>

  // Enable SPI1
  //  SPI1->CR1 &=  ~SPI_CR1_SPE;
  SPI1->CR2 = 0; // reinitialize tsize
 8000dc4:	4b5c      	ldr	r3, [pc, #368]	@ (8000f38 <main+0x898>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	605a      	str	r2, [r3, #4]
  SPI1->CFG1 |= SPI_CFG1_RXDMAEN;
 8000dca:	4b5b      	ldr	r3, [pc, #364]	@ (8000f38 <main+0x898>)
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	4a5a      	ldr	r2, [pc, #360]	@ (8000f38 <main+0x898>)
 8000dd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dd4:	6093      	str	r3, [r2, #8]
  SPI1->CR1 |= SPI_CR1_SPE;
 8000dd6:	4b58      	ldr	r3, [pc, #352]	@ (8000f38 <main+0x898>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a57      	ldr	r2, [pc, #348]	@ (8000f38 <main+0x898>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_CSTART;
 8000de2:	4b55      	ldr	r3, [pc, #340]	@ (8000f38 <main+0x898>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a54      	ldr	r2, [pc, #336]	@ (8000f38 <main+0x898>)
 8000de8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dec:	6013      	str	r3, [r2, #0]

  // Enable SPI2
  SPI2->CR2 = 0; // reinitialize tsize
 8000dee:	4b53      	ldr	r3, [pc, #332]	@ (8000f3c <main+0x89c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	605a      	str	r2, [r3, #4]
  SPI2->CFG1 |= SPI_CFG1_RXDMAEN;
 8000df4:	4b51      	ldr	r3, [pc, #324]	@ (8000f3c <main+0x89c>)
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	4a50      	ldr	r2, [pc, #320]	@ (8000f3c <main+0x89c>)
 8000dfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dfe:	6093      	str	r3, [r2, #8]
  SPI2->CR1 |= SPI_CR1_SPE;
 8000e00:	4b4e      	ldr	r3, [pc, #312]	@ (8000f3c <main+0x89c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a4d      	ldr	r2, [pc, #308]	@ (8000f3c <main+0x89c>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	6013      	str	r3, [r2, #0]
  SPI2->CR1 |= SPI_CR1_CSTART;
 8000e0c:	4b4b      	ldr	r3, [pc, #300]	@ (8000f3c <main+0x89c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a4a      	ldr	r2, [pc, #296]	@ (8000f3c <main+0x89c>)
 8000e12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e16:	6013      	str	r3, [r2, #0]

  // Enable TIM1 (SPI1)
  TIM1->CR1 |= TIM_CR1_URS;
 8000e18:	4b49      	ldr	r3, [pc, #292]	@ (8000f40 <main+0x8a0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a48      	ldr	r2, [pc, #288]	@ (8000f40 <main+0x8a0>)
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	6013      	str	r3, [r2, #0]
  TIM1->CR1 &= ~TIM_CR1_UDIS;
 8000e24:	4b46      	ldr	r3, [pc, #280]	@ (8000f40 <main+0x8a0>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a45      	ldr	r2, [pc, #276]	@ (8000f40 <main+0x8a0>)
 8000e2a:	f023 0302 	bic.w	r3, r3, #2
 8000e2e:	6013      	str	r3, [r2, #0]
  TIM1->DIER |= TIM_DMA_UPDATE;
 8000e30:	4b43      	ldr	r3, [pc, #268]	@ (8000f40 <main+0x8a0>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	4a42      	ldr	r2, [pc, #264]	@ (8000f40 <main+0x8a0>)
 8000e36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e3a:	60d3      	str	r3, [r2, #12]
  TIM1->EGR |= TIM_EGR_UG;
 8000e3c:	4b40      	ldr	r3, [pc, #256]	@ (8000f40 <main+0x8a0>)
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	4a3f      	ldr	r2, [pc, #252]	@ (8000f40 <main+0x8a0>)
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	6153      	str	r3, [r2, #20]
  TIM1->CR1 |= TIM_CR1_CEN;
 8000e48:	4b3d      	ldr	r3, [pc, #244]	@ (8000f40 <main+0x8a0>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a3c      	ldr	r2, [pc, #240]	@ (8000f40 <main+0x8a0>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	6013      	str	r3, [r2, #0]

  // Enable TIM3 (SPI2)
  TIM3->CR1 |= TIM_CR1_URS;
 8000e54:	4b3b      	ldr	r3, [pc, #236]	@ (8000f44 <main+0x8a4>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a3a      	ldr	r2, [pc, #232]	@ (8000f44 <main+0x8a4>)
 8000e5a:	f043 0304 	orr.w	r3, r3, #4
 8000e5e:	6013      	str	r3, [r2, #0]
  TIM3->CR1 &= ~TIM_CR1_UDIS;
 8000e60:	4b38      	ldr	r3, [pc, #224]	@ (8000f44 <main+0x8a4>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a37      	ldr	r2, [pc, #220]	@ (8000f44 <main+0x8a4>)
 8000e66:	f023 0302 	bic.w	r3, r3, #2
 8000e6a:	6013      	str	r3, [r2, #0]
  TIM3->DIER |= TIM_DMA_UPDATE;
 8000e6c:	4b35      	ldr	r3, [pc, #212]	@ (8000f44 <main+0x8a4>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	4a34      	ldr	r2, [pc, #208]	@ (8000f44 <main+0x8a4>)
 8000e72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e76:	60d3      	str	r3, [r2, #12]
  TIM3->EGR |= TIM_EGR_UG;
 8000e78:	4b32      	ldr	r3, [pc, #200]	@ (8000f44 <main+0x8a4>)
 8000e7a:	695b      	ldr	r3, [r3, #20]
 8000e7c:	4a31      	ldr	r2, [pc, #196]	@ (8000f44 <main+0x8a4>)
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	6153      	str	r3, [r2, #20]
  TIM3->CR1 |= TIM_CR1_CEN;
 8000e84:	4b2f      	ldr	r3, [pc, #188]	@ (8000f44 <main+0x8a4>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a2e      	ldr	r2, [pc, #184]	@ (8000f44 <main+0x8a4>)
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	6013      	str	r3, [r2, #0]

  /* Initialise the interface descriptor for WinPCap for example. */
  pxSTM32H_FillInterfaceDescriptor(0, &(xInterfaces[0]));
 8000e90:	492d      	ldr	r1, [pc, #180]	@ (8000f48 <main+0x8a8>)
 8000e92:	2000      	movs	r0, #0
 8000e94:	f017 fd24 	bl	80188e0 <pxSTM32H_FillInterfaceDescriptor>

  FreeRTOS_FillEndPoint(&(xInterfaces[0]), &(xEndPoints[0]), ucIPAddress,
 8000e98:	4b2c      	ldr	r3, [pc, #176]	@ (8000f4c <main+0x8ac>)
 8000e9a:	9302      	str	r3, [sp, #8]
 8000e9c:	4b2c      	ldr	r3, [pc, #176]	@ (8000f50 <main+0x8b0>)
 8000e9e:	9301      	str	r3, [sp, #4]
 8000ea0:	4b2c      	ldr	r3, [pc, #176]	@ (8000f54 <main+0x8b4>)
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f58 <main+0x8b8>)
 8000ea6:	4a2d      	ldr	r2, [pc, #180]	@ (8000f5c <main+0x8bc>)
 8000ea8:	492d      	ldr	r1, [pc, #180]	@ (8000f60 <main+0x8c0>)
 8000eaa:	4827      	ldr	r0, [pc, #156]	@ (8000f48 <main+0x8a8>)
 8000eac:	f00c fcd8 	bl	800d860 <FreeRTOS_FillEndPoint>
#endif /* ( ipconfigUSE_DHCP != 0 ) */

  /* Initialise the RTOS's TCP/IP stack.  The tasks that use the network
     are created in the vApplicationIPNetworkEventHook() hook function
     below.  The hook function is called when the network connects. */
  FreeRTOS_IPInit_Multi();
 8000eb0:	f008 fe26 	bl	8009b00 <FreeRTOS_IPInit_Multi>

  xTaskCreate(prvServerWorkTask, "SvrWork", mainTCP_SERVER_STACK_SIZE, NULL, 0, &xServerWorkTaskHandle);
 8000eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8000f64 <main+0x8c4>)
 8000eb6:	9301      	str	r3, [sp, #4]
 8000eb8:	2300      	movs	r3, #0
 8000eba:	9300      	str	r3, [sp, #0]
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000ec2:	4929      	ldr	r1, [pc, #164]	@ (8000f68 <main+0x8c8>)
 8000ec4:	4829      	ldr	r0, [pc, #164]	@ (8000f6c <main+0x8cc>)
 8000ec6:	f003 fb5b 	bl	8004580 <xTaskCreate>
  //      xTaskCreate ( vNotifierTask, "Notif", 200, NULL, 0, &vNotifierTaskHandle);
  xTaskCreate(vADCTCPTask, "HSADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vADCTCPTaskHandle);
 8000eca:	4b29      	ldr	r3, [pc, #164]	@ (8000f70 <main+0x8d0>)
 8000ecc:	9301      	str	r3, [sp, #4]
 8000ece:	2301      	movs	r3, #1
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000ed8:	4926      	ldr	r1, [pc, #152]	@ (8000f74 <main+0x8d4>)
 8000eda:	4827      	ldr	r0, [pc, #156]	@ (8000f78 <main+0x8d8>)
 8000edc:	f003 fb50 	bl	8004580 <xTaskCreate>
  xTaskCreate(vAuxADCTCPTask, "GADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vAuxADCTCPTaskHandle);
 8000ee0:	4b26      	ldr	r3, [pc, #152]	@ (8000f7c <main+0x8dc>)
 8000ee2:	9301      	str	r3, [sp, #4]
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000eee:	4924      	ldr	r1, [pc, #144]	@ (8000f80 <main+0x8e0>)
 8000ef0:	4824      	ldr	r0, [pc, #144]	@ (8000f84 <main+0x8e4>)
 8000ef2:	f003 fb45 	bl	8004580 <xTaskCreate>
  xTaskCreate(vTCADCTCPTask, "TCADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vTCADCTCPTaskHandle);
 8000ef6:	4b24      	ldr	r3, [pc, #144]	@ (8000f88 <main+0x8e8>)
 8000ef8:	9301      	str	r3, [sp, #4]
 8000efa:	2301      	movs	r3, #1
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	2300      	movs	r3, #0
 8000f00:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000f04:	4921      	ldr	r1, [pc, #132]	@ (8000f8c <main+0x8ec>)
 8000f06:	4822      	ldr	r0, [pc, #136]	@ (8000f90 <main+0x8f0>)
 8000f08:	f003 fb3a 	bl	8004580 <xTaskCreate>
  xTaskCreate(vCommandServerTask, "CommandServer", mainTCP_SERVER_STACK_SIZE, NULL, tskIDLE_PRIORITY, &vCommandServerTaskHandle);
 8000f0c:	4b21      	ldr	r3, [pc, #132]	@ (8000f94 <main+0x8f4>)
 8000f0e:	9301      	str	r3, [sp, #4]
 8000f10:	2300      	movs	r3, #0
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2300      	movs	r3, #0
 8000f16:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000f1a:	491f      	ldr	r1, [pc, #124]	@ (8000f98 <main+0x8f8>)
 8000f1c:	481f      	ldr	r0, [pc, #124]	@ (8000f9c <main+0x8fc>)
 8000f1e:	f003 fb2f 	bl	8004580 <xTaskCreate>
  vTaskStartScheduler();
 8000f22:	f003 fd87 	bl	8004a34 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f26:	bf00      	nop
 8000f28:	e7fd      	b.n	8000f26 <main+0x886>
 8000f2a:	bf00      	nop
 8000f2c:	40003c00 	.word	0x40003c00
 8000f30:	40000c00 	.word	0x40000c00
 8000f34:	58021000 	.word	0x58021000
 8000f38:	40013000 	.word	0x40013000
 8000f3c:	40003800 	.word	0x40003800
 8000f40:	40010000 	.word	0x40010000
 8000f44:	40000400 	.word	0x40000400
 8000f48:	20000860 	.word	0x20000860
 8000f4c:	08027ecc 	.word	0x08027ecc
 8000f50:	08027ec8 	.word	0x08027ec8
 8000f54:	08027ec4 	.word	0x08027ec4
 8000f58:	08027ec0 	.word	0x08027ec0
 8000f5c:	08027ebc 	.word	0x08027ebc
 8000f60:	20000888 	.word	0x20000888
 8000f64:	20000d30 	.word	0x20000d30
 8000f68:	08024918 	.word	0x08024918
 8000f6c:	08001bf9 	.word	0x08001bf9
 8000f70:	20000d34 	.word	0x20000d34
 8000f74:	08024920 	.word	0x08024920
 8000f78:	08001c21 	.word	0x08001c21
 8000f7c:	20000d38 	.word	0x20000d38
 8000f80:	0802492c 	.word	0x0802492c
 8000f84:	08001dd9 	.word	0x08001dd9
 8000f88:	20000d3c 	.word	0x20000d3c
 8000f8c:	08024938 	.word	0x08024938
 8000f90:	08001f91 	.word	0x08001f91
 8000f94:	20000d40 	.word	0x20000d40
 8000f98:	08024944 	.word	0x08024944
 8000f9c:	08002149 	.word	0x08002149

08000fa0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b09e      	sub	sp, #120	@ 0x78
 8000fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000faa:	224c      	movs	r2, #76	@ 0x4c
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f021 ff21 	bl	8022df6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	2220      	movs	r2, #32
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f021 ff1a 	bl	8022df6 <memset>

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000fc2:	2002      	movs	r0, #2
 8000fc4:	f01b ffbc 	bl	801cf40 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	4b48      	ldr	r3, [pc, #288]	@ (80010f0 <SystemClock_Config+0x150>)
 8000fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fd0:	4a47      	ldr	r2, [pc, #284]	@ (80010f0 <SystemClock_Config+0x150>)
 8000fd2:	f023 0301 	bic.w	r3, r3, #1
 8000fd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000fd8:	4b45      	ldr	r3, [pc, #276]	@ (80010f0 <SystemClock_Config+0x150>)
 8000fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	4b44      	ldr	r3, [pc, #272]	@ (80010f4 <SystemClock_Config+0x154>)
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	4a43      	ldr	r2, [pc, #268]	@ (80010f4 <SystemClock_Config+0x154>)
 8000fe8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fec:	6193      	str	r3, [r2, #24]
 8000fee:	4b41      	ldr	r3, [pc, #260]	@ (80010f4 <SystemClock_Config+0x154>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000ffa:	bf00      	nop
 8000ffc:	4b3d      	ldr	r3, [pc, #244]	@ (80010f4 <SystemClock_Config+0x154>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001004:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001008:	d1f8      	bne.n	8000ffc <SystemClock_Config+0x5c>
  {
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100a:	4b3b      	ldr	r3, [pc, #236]	@ (80010f8 <SystemClock_Config+0x158>)
 800100c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001010:	4a39      	ldr	r2, [pc, #228]	@ (80010f8 <SystemClock_Config+0x158>)
 8001012:	f043 0302 	orr.w	r3, r3, #2
 8001016:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800101a:	4b37      	ldr	r3, [pc, #220]	@ (80010f8 <SystemClock_Config+0x158>)
 800101c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001020:	f003 0302 	and.w	r3, r3, #2
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001028:	2300      	movs	r3, #0
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	4b31      	ldr	r3, [pc, #196]	@ (80010f4 <SystemClock_Config+0x154>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a30      	ldr	r2, [pc, #192]	@ (80010f4 <SystemClock_Config+0x154>)
 8001032:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b2e      	ldr	r3, [pc, #184]	@ (80010f4 <SystemClock_Config+0x154>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001040:	603b      	str	r3, [r7, #0]
 8001042:	4b2b      	ldr	r3, [pc, #172]	@ (80010f0 <SystemClock_Config+0x150>)
 8001044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001046:	4a2a      	ldr	r2, [pc, #168]	@ (80010f0 <SystemClock_Config+0x150>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800104e:	4b28      	ldr	r3, [pc, #160]	@ (80010f0 <SystemClock_Config+0x150>)
 8001050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	683b      	ldr	r3, [r7, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 800105a:	bf00      	nop
 800105c:	4b25      	ldr	r3, [pc, #148]	@ (80010f4 <SystemClock_Config+0x154>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001064:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001068:	d1f8      	bne.n	800105c <SystemClock_Config+0xbc>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800106a:	2301      	movs	r3, #1
 800106c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800106e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001072:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001074:	2302      	movs	r3, #2
 8001076:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001078:	2302      	movs	r3, #2
 800107a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 800107c:	2302      	movs	r3, #2
 800107e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001080:	2340      	movs	r3, #64	@ 0x40
 8001082:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001084:	2302      	movs	r3, #2
 8001086:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001088:	2302      	movs	r3, #2
 800108a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800108c:	2302      	movs	r3, #2
 800108e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001090:	230c      	movs	r3, #12
 8001092:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001094:	2300      	movs	r3, #0
 8001096:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010a0:	4618      	mov	r0, r3
 80010a2:	f01b ff87 	bl	801cfb4 <HAL_RCC_OscConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80010ac:	f001 f9a2 	bl	80023f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 80010b0:	233f      	movs	r3, #63	@ 0x3f
 80010b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b4:	2303      	movs	r3, #3
 80010b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80010bc:	2308      	movs	r3, #8
 80010be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80010c0:	2340      	movs	r3, #64	@ 0x40
 80010c2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010c4:	2340      	movs	r3, #64	@ 0x40
 80010c6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010ce:	2340      	movs	r3, #64	@ 0x40
 80010d0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	2102      	movs	r1, #2
 80010d8:	4618      	mov	r0, r3
 80010da:	f01c fbc5 	bl	801d868 <HAL_RCC_ClockConfig>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <SystemClock_Config+0x148>
  {
    Error_Handler();
 80010e4:	f001 f986 	bl	80023f4 <Error_Handler>
  }
}
 80010e8:	bf00      	nop
 80010ea:	3778      	adds	r7, #120	@ 0x78
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	58000400 	.word	0x58000400
 80010f4:	58024800 	.word	0x58024800
 80010f8:	58024400 	.word	0x58024400

080010fc <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b0b0      	sub	sp, #192	@ 0xc0
 8001100:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001102:	463b      	mov	r3, r7
 8001104:	22c0      	movs	r2, #192	@ 0xc0
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f021 fe74 	bl	8022df6 <memset>

  /** Initializes the peripherals clock
   */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3 | RCC_PERIPHCLK_SPI2 | RCC_PERIPHCLK_SPI1;
 800110e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001112:	f04f 0300 	mov.w	r3, #0
 8001116:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 8;
 800111a:	2308      	movs	r3, #8
 800111c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 64;
 800111e:	2340      	movs	r3, #64	@ 0x40
 8001120:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001122:	2302      	movs	r3, #2
 8001124:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001126:	2302      	movs	r3, #2
 8001128:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800112a:	2302      	movs	r3, #2
 800112c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 800112e:	2340      	movs	r3, #64	@ 0x40
 8001130:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800113a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800113e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001140:	463b      	mov	r3, r7
 8001142:	4618      	mov	r0, r3
 8001144:	f01c ff1c 	bl	801df80 <HAL_RCCEx_PeriphCLKConfig>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800114e:	f001 f951 	bl	80023f4 <Error_Handler>
  }
}
 8001152:	bf00      	nop
 8001154:	37c0      	adds	r7, #192	@ 0xc0
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <MX_I2C4_Init>:
 * @brief I2C4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C4_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001160:	4b1b      	ldr	r3, [pc, #108]	@ (80011d0 <MX_I2C4_Init+0x74>)
 8001162:	4a1c      	ldr	r2, [pc, #112]	@ (80011d4 <MX_I2C4_Init+0x78>)
 8001164:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10C0ECFF;
 8001166:	4b1a      	ldr	r3, [pc, #104]	@ (80011d0 <MX_I2C4_Init+0x74>)
 8001168:	4a1b      	ldr	r2, [pc, #108]	@ (80011d8 <MX_I2C4_Init+0x7c>)
 800116a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800116c:	4b18      	ldr	r3, [pc, #96]	@ (80011d0 <MX_I2C4_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001172:	4b17      	ldr	r3, [pc, #92]	@ (80011d0 <MX_I2C4_Init+0x74>)
 8001174:	2201      	movs	r2, #1
 8001176:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001178:	4b15      	ldr	r3, [pc, #84]	@ (80011d0 <MX_I2C4_Init+0x74>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800117e:	4b14      	ldr	r3, [pc, #80]	@ (80011d0 <MX_I2C4_Init+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001184:	4b12      	ldr	r3, [pc, #72]	@ (80011d0 <MX_I2C4_Init+0x74>)
 8001186:	2200      	movs	r2, #0
 8001188:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800118a:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <MX_I2C4_Init+0x74>)
 800118c:	2200      	movs	r2, #0
 800118e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001190:	4b0f      	ldr	r3, [pc, #60]	@ (80011d0 <MX_I2C4_Init+0x74>)
 8001192:	2200      	movs	r2, #0
 8001194:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001196:	480e      	ldr	r0, [pc, #56]	@ (80011d0 <MX_I2C4_Init+0x74>)
 8001198:	f01b fd9e 	bl	801ccd8 <HAL_I2C_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80011a2:	f001 f927 	bl	80023f4 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011a6:	2100      	movs	r1, #0
 80011a8:	4809      	ldr	r0, [pc, #36]	@ (80011d0 <MX_I2C4_Init+0x74>)
 80011aa:	f01b fe31 	bl	801ce10 <HAL_I2CEx_ConfigAnalogFilter>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80011b4:	f001 f91e 	bl	80023f4 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80011b8:	2100      	movs	r1, #0
 80011ba:	4805      	ldr	r0, [pc, #20]	@ (80011d0 <MX_I2C4_Init+0x74>)
 80011bc:	f01b fe73 	bl	801cea6 <HAL_I2CEx_ConfigDigitalFilter>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80011c6:	f001 f915 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200000a4 	.word	0x200000a4
 80011d4:	58001c00 	.word	0x58001c00
 80011d8:	10c0ecff 	.word	0x10c0ecff

080011dc <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011e0:	4b28      	ldr	r3, [pc, #160]	@ (8001284 <MX_SPI1_Init+0xa8>)
 80011e2:	4a29      	ldr	r2, [pc, #164]	@ (8001288 <MX_SPI1_Init+0xac>)
 80011e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011e6:	4b27      	ldr	r3, [pc, #156]	@ (8001284 <MX_SPI1_Init+0xa8>)
 80011e8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80011ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ee:	4b25      	ldr	r3, [pc, #148]	@ (8001284 <MX_SPI1_Init+0xa8>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80011f4:	4b23      	ldr	r3, [pc, #140]	@ (8001284 <MX_SPI1_Init+0xa8>)
 80011f6:	220f      	movs	r2, #15
 80011f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011fa:	4b22      	ldr	r3, [pc, #136]	@ (8001284 <MX_SPI1_Init+0xa8>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001200:	4b20      	ldr	r3, [pc, #128]	@ (8001284 <MX_SPI1_Init+0xa8>)
 8001202:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001206:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001208:	4b1e      	ldr	r3, [pc, #120]	@ (8001284 <MX_SPI1_Init+0xa8>)
 800120a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800120e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001210:	4b1c      	ldr	r3, [pc, #112]	@ (8001284 <MX_SPI1_Init+0xa8>)
 8001212:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001216:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001218:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <MX_SPI1_Init+0xa8>)
 800121a:	2200      	movs	r2, #0
 800121c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800121e:	4b19      	ldr	r3, [pc, #100]	@ (8001284 <MX_SPI1_Init+0xa8>)
 8001220:	2200      	movs	r2, #0
 8001222:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001224:	4b17      	ldr	r3, [pc, #92]	@ (8001284 <MX_SPI1_Init+0xa8>)
 8001226:	2200      	movs	r2, #0
 8001228:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800122a:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <MX_SPI1_Init+0xa8>)
 800122c:	2200      	movs	r2, #0
 800122e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001230:	4b14      	ldr	r3, [pc, #80]	@ (8001284 <MX_SPI1_Init+0xa8>)
 8001232:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001236:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001238:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <MX_SPI1_Init+0xa8>)
 800123a:	2200      	movs	r2, #0
 800123c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800123e:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <MX_SPI1_Init+0xa8>)
 8001240:	2200      	movs	r2, #0
 8001242:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001244:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <MX_SPI1_Init+0xa8>)
 8001246:	2200      	movs	r2, #0
 8001248:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800124a:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <MX_SPI1_Init+0xa8>)
 800124c:	2200      	movs	r2, #0
 800124e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_03CYCLE;
 8001250:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <MX_SPI1_Init+0xa8>)
 8001252:	2203      	movs	r2, #3
 8001254:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_03CYCLE;
 8001256:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <MX_SPI1_Init+0xa8>)
 8001258:	2230      	movs	r2, #48	@ 0x30
 800125a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800125c:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <MX_SPI1_Init+0xa8>)
 800125e:	2200      	movs	r2, #0
 8001260:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001262:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <MX_SPI1_Init+0xa8>)
 8001264:	2200      	movs	r2, #0
 8001266:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <MX_SPI1_Init+0xa8>)
 800126a:	2200      	movs	r2, #0
 800126c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800126e:	4805      	ldr	r0, [pc, #20]	@ (8001284 <MX_SPI1_Init+0xa8>)
 8001270:	f01e fcb2 	bl	801fbd8 <HAL_SPI_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800127a:	f001 f8bb 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200000f8 	.word	0x200000f8
 8001288:	40013000 	.word	0x40013000

0800128c <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001290:	4b27      	ldr	r3, [pc, #156]	@ (8001330 <MX_SPI2_Init+0xa4>)
 8001292:	4a28      	ldr	r2, [pc, #160]	@ (8001334 <MX_SPI2_Init+0xa8>)
 8001294:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001296:	4b26      	ldr	r3, [pc, #152]	@ (8001330 <MX_SPI2_Init+0xa4>)
 8001298:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800129c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800129e:	4b24      	ldr	r3, [pc, #144]	@ (8001330 <MX_SPI2_Init+0xa4>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80012a4:	4b22      	ldr	r3, [pc, #136]	@ (8001330 <MX_SPI2_Init+0xa4>)
 80012a6:	220f      	movs	r2, #15
 80012a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012aa:	4b21      	ldr	r3, [pc, #132]	@ (8001330 <MX_SPI2_Init+0xa4>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001330 <MX_SPI2_Init+0xa4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80012b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001330 <MX_SPI2_Init+0xa4>)
 80012b8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80012bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012be:	4b1c      	ldr	r3, [pc, #112]	@ (8001330 <MX_SPI2_Init+0xa4>)
 80012c0:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80012c4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001330 <MX_SPI2_Init+0xa4>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012cc:	4b18      	ldr	r3, [pc, #96]	@ (8001330 <MX_SPI2_Init+0xa4>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d2:	4b17      	ldr	r3, [pc, #92]	@ (8001330 <MX_SPI2_Init+0xa4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80012d8:	4b15      	ldr	r3, [pc, #84]	@ (8001330 <MX_SPI2_Init+0xa4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012de:	4b14      	ldr	r3, [pc, #80]	@ (8001330 <MX_SPI2_Init+0xa4>)
 80012e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012e4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80012e6:	4b12      	ldr	r3, [pc, #72]	@ (8001330 <MX_SPI2_Init+0xa4>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80012ec:	4b10      	ldr	r3, [pc, #64]	@ (8001330 <MX_SPI2_Init+0xa4>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001330 <MX_SPI2_Init+0xa4>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001330 <MX_SPI2_Init+0xa4>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_03CYCLE;
 80012fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001330 <MX_SPI2_Init+0xa4>)
 8001300:	2203      	movs	r2, #3
 8001302:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_03CYCLE;
 8001304:	4b0a      	ldr	r3, [pc, #40]	@ (8001330 <MX_SPI2_Init+0xa4>)
 8001306:	2230      	movs	r2, #48	@ 0x30
 8001308:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800130a:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <MX_SPI2_Init+0xa4>)
 800130c:	2200      	movs	r2, #0
 800130e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001310:	4b07      	ldr	r3, [pc, #28]	@ (8001330 <MX_SPI2_Init+0xa4>)
 8001312:	2200      	movs	r2, #0
 8001314:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001316:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <MX_SPI2_Init+0xa4>)
 8001318:	2200      	movs	r2, #0
 800131a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800131c:	4804      	ldr	r0, [pc, #16]	@ (8001330 <MX_SPI2_Init+0xa4>)
 800131e:	f01e fc5b 	bl	801fbd8 <HAL_SPI_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001328:	f001 f864 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000180 	.word	0x20000180
 8001334:	40003800 	.word	0x40003800

08001338 <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800133c:	4b28      	ldr	r3, [pc, #160]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 800133e:	4a29      	ldr	r2, [pc, #164]	@ (80013e4 <MX_SPI3_Init+0xac>)
 8001340:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001342:	4b27      	ldr	r3, [pc, #156]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 8001344:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001348:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800134a:	4b25      	ldr	r3, [pc, #148]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001350:	4b23      	ldr	r3, [pc, #140]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 8001352:	220f      	movs	r2, #15
 8001354:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001356:	4b22      	ldr	r3, [pc, #136]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800135c:	4b20      	ldr	r3, [pc, #128]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 800135e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001362:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001364:	4b1e      	ldr	r3, [pc, #120]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 8001366:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800136a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800136c:	4b1c      	ldr	r3, [pc, #112]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 800136e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001372:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001374:	4b1a      	ldr	r3, [pc, #104]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 8001376:	2200      	movs	r2, #0
 8001378:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800137a:	4b19      	ldr	r3, [pc, #100]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 800137c:	2200      	movs	r2, #0
 800137e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001380:	4b17      	ldr	r3, [pc, #92]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 8001382:	2200      	movs	r2, #0
 8001384:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001386:	4b16      	ldr	r3, [pc, #88]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 8001388:	2200      	movs	r2, #0
 800138a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800138c:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 800138e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001392:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001394:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 8001396:	2200      	movs	r2, #0
 8001398:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800139a:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 800139c:	2200      	movs	r2, #0
 800139e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_02CYCLE;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 80013ae:	2202      	movs	r2, #2
 80013b0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_02CYCLE;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 80013b4:	2220      	movs	r2, #32
 80013b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80013b8:	4b09      	ldr	r3, [pc, #36]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80013be:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80013c4:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80013ca:	4805      	ldr	r0, [pc, #20]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 80013cc:	f01e fc04 	bl	801fbd8 <HAL_SPI_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 80013d6:	f001 f80d 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000208 	.word	0x20000208
 80013e4:	40003c00 	.word	0x40003c00

080013e8 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ee:	f107 0310 	add.w	r3, r7, #16
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001406:	4b1f      	ldr	r3, [pc, #124]	@ (8001484 <MX_TIM1_Init+0x9c>)
 8001408:	4a1f      	ldr	r2, [pc, #124]	@ (8001488 <MX_TIM1_Init+0xa0>)
 800140a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800140c:	4b1d      	ldr	r3, [pc, #116]	@ (8001484 <MX_TIM1_Init+0x9c>)
 800140e:	2200      	movs	r2, #0
 8001410:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001412:	4b1c      	ldr	r3, [pc, #112]	@ (8001484 <MX_TIM1_Init+0x9c>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8001418:	4b1a      	ldr	r3, [pc, #104]	@ (8001484 <MX_TIM1_Init+0x9c>)
 800141a:	22ff      	movs	r2, #255	@ 0xff
 800141c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141e:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <MX_TIM1_Init+0x9c>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001424:	4b17      	ldr	r3, [pc, #92]	@ (8001484 <MX_TIM1_Init+0x9c>)
 8001426:	2200      	movs	r2, #0
 8001428:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142a:	4b16      	ldr	r3, [pc, #88]	@ (8001484 <MX_TIM1_Init+0x9c>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001430:	4814      	ldr	r0, [pc, #80]	@ (8001484 <MX_TIM1_Init+0x9c>)
 8001432:	f01e ffca 	bl	80203ca <HAL_TIM_Base_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800143c:	f000 ffda 	bl	80023f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001440:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001444:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001446:	f107 0310 	add.w	r3, r7, #16
 800144a:	4619      	mov	r1, r3
 800144c:	480d      	ldr	r0, [pc, #52]	@ (8001484 <MX_TIM1_Init+0x9c>)
 800144e:	f01f fa01 	bl	8020854 <HAL_TIM_ConfigClockSource>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001458:	f000 ffcc 	bl	80023f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800145c:	2320      	movs	r3, #32
 800145e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001460:	2300      	movs	r3, #0
 8001462:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	4619      	mov	r1, r3
 800146c:	4805      	ldr	r0, [pc, #20]	@ (8001484 <MX_TIM1_Init+0x9c>)
 800146e:	f01f ff03 	bl	8021278 <HAL_TIMEx_MasterConfigSynchronization>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001478:	f000 ffbc 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
}
 800147c:	bf00      	nop
 800147e:	3720      	adds	r7, #32
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200003f8 	.word	0x200003f8
 8001488:	40010000 	.word	0x40010000

0800148c <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001492:	f107 0310 	add.w	r3, r7, #16
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001520 <MX_TIM3_Init+0x94>)
 80014ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001524 <MX_TIM3_Init+0x98>)
 80014ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 199;
 80014b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001520 <MX_TIM3_Init+0x94>)
 80014b2:	22c7      	movs	r2, #199	@ 0xc7
 80014b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001520 <MX_TIM3_Init+0x94>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 80014bc:	4b18      	ldr	r3, [pc, #96]	@ (8001520 <MX_TIM3_Init+0x94>)
 80014be:	2209      	movs	r2, #9
 80014c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c2:	4b17      	ldr	r3, [pc, #92]	@ (8001520 <MX_TIM3_Init+0x94>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c8:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <MX_TIM3_Init+0x94>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014ce:	4814      	ldr	r0, [pc, #80]	@ (8001520 <MX_TIM3_Init+0x94>)
 80014d0:	f01e ff7b 	bl	80203ca <HAL_TIM_Base_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80014da:	f000 ff8b 	bl	80023f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014e4:	f107 0310 	add.w	r3, r7, #16
 80014e8:	4619      	mov	r1, r3
 80014ea:	480d      	ldr	r0, [pc, #52]	@ (8001520 <MX_TIM3_Init+0x94>)
 80014ec:	f01f f9b2 	bl	8020854 <HAL_TIM_ConfigClockSource>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80014f6:	f000 ff7d 	bl	80023f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	4619      	mov	r1, r3
 8001506:	4806      	ldr	r0, [pc, #24]	@ (8001520 <MX_TIM3_Init+0x94>)
 8001508:	f01f feb6 	bl	8021278 <HAL_TIMEx_MasterConfigSynchronization>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001512:	f000 ff6f 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 8001516:	bf00      	nop
 8001518:	3720      	adds	r7, #32
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000490 	.word	0x20000490
 8001524:	40000400 	.word	0x40000400

08001528 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08e      	sub	sp, #56	@ 0x38
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153c:	f107 031c 	add.w	r3, r7, #28
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001548:	463b      	mov	r3, r7
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	611a      	str	r2, [r3, #16]
 8001556:	615a      	str	r2, [r3, #20]
 8001558:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800155a:	4b34      	ldr	r3, [pc, #208]	@ (800162c <MX_TIM4_Init+0x104>)
 800155c:	4a34      	ldr	r2, [pc, #208]	@ (8001630 <MX_TIM4_Init+0x108>)
 800155e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 999;
 8001560:	4b32      	ldr	r3, [pc, #200]	@ (800162c <MX_TIM4_Init+0x104>)
 8001562:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001566:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001568:	4b30      	ldr	r3, [pc, #192]	@ (800162c <MX_TIM4_Init+0x104>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 800156e:	4b2f      	ldr	r3, [pc, #188]	@ (800162c <MX_TIM4_Init+0x104>)
 8001570:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001574:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001576:	4b2d      	ldr	r3, [pc, #180]	@ (800162c <MX_TIM4_Init+0x104>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157c:	4b2b      	ldr	r3, [pc, #172]	@ (800162c <MX_TIM4_Init+0x104>)
 800157e:	2200      	movs	r2, #0
 8001580:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001582:	482a      	ldr	r0, [pc, #168]	@ (800162c <MX_TIM4_Init+0x104>)
 8001584:	f01e ff21 	bl	80203ca <HAL_TIM_Base_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 800158e:	f000 ff31 	bl	80023f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001592:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001596:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001598:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800159c:	4619      	mov	r1, r3
 800159e:	4823      	ldr	r0, [pc, #140]	@ (800162c <MX_TIM4_Init+0x104>)
 80015a0:	f01f f958 	bl	8020854 <HAL_TIM_ConfigClockSource>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 80015aa:	f000 ff23 	bl	80023f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80015ae:	481f      	ldr	r0, [pc, #124]	@ (800162c <MX_TIM4_Init+0x104>)
 80015b0:	f01e ffda 	bl	8020568 <HAL_TIM_PWM_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80015ba:	f000 ff1b 	bl	80023f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	4619      	mov	r1, r3
 80015cc:	4817      	ldr	r0, [pc, #92]	@ (800162c <MX_TIM4_Init+0x104>)
 80015ce:	f01f fe53 	bl	8021278 <HAL_TIMEx_MasterConfigSynchronization>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80015d8:	f000 ff0c 	bl	80023f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015dc:	2360      	movs	r3, #96	@ 0x60
 80015de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 999;
 80015e0:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80015e4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ee:	463b      	mov	r3, r7
 80015f0:	2200      	movs	r2, #0
 80015f2:	4619      	mov	r1, r3
 80015f4:	480d      	ldr	r0, [pc, #52]	@ (800162c <MX_TIM4_Init+0x104>)
 80015f6:	f01f f819 	bl	802062c <HAL_TIM_PWM_ConfigChannel>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8001600:	f000 fef8 	bl	80023f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001604:	2370      	movs	r3, #112	@ 0x70
 8001606:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001608:	463b      	mov	r3, r7
 800160a:	2204      	movs	r2, #4
 800160c:	4619      	mov	r1, r3
 800160e:	4807      	ldr	r0, [pc, #28]	@ (800162c <MX_TIM4_Init+0x104>)
 8001610:	f01f f80c 	bl	802062c <HAL_TIM_PWM_ConfigChannel>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM4_Init+0xf6>
  {
    Error_Handler();
 800161a:	f000 feeb 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800161e:	4803      	ldr	r0, [pc, #12]	@ (800162c <MX_TIM4_Init+0x104>)
 8001620:	f001 fb98 	bl	8002d54 <HAL_TIM_MspPostInit>
}
 8001624:	bf00      	nop
 8001626:	3738      	adds	r7, #56	@ 0x38
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200004dc 	.word	0x200004dc
 8001630:	40000800 	.word	0x40000800

08001634 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800163a:	f107 0310 	add.w	r3, r7, #16
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001652:	4b1e      	ldr	r3, [pc, #120]	@ (80016cc <MX_TIM5_Init+0x98>)
 8001654:	4a1e      	ldr	r2, [pc, #120]	@ (80016d0 <MX_TIM5_Init+0x9c>)
 8001656:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 999;
 8001658:	4b1c      	ldr	r3, [pc, #112]	@ (80016cc <MX_TIM5_Init+0x98>)
 800165a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800165e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001660:	4b1a      	ldr	r3, [pc, #104]	@ (80016cc <MX_TIM5_Init+0x98>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 3124;
 8001666:	4b19      	ldr	r3, [pc, #100]	@ (80016cc <MX_TIM5_Init+0x98>)
 8001668:	f640 4234 	movw	r2, #3124	@ 0xc34
 800166c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166e:	4b17      	ldr	r3, [pc, #92]	@ (80016cc <MX_TIM5_Init+0x98>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001674:	4b15      	ldr	r3, [pc, #84]	@ (80016cc <MX_TIM5_Init+0x98>)
 8001676:	2200      	movs	r2, #0
 8001678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800167a:	4814      	ldr	r0, [pc, #80]	@ (80016cc <MX_TIM5_Init+0x98>)
 800167c:	f01e fea5 	bl	80203ca <HAL_TIM_Base_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001686:	f000 feb5 	bl	80023f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800168a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800168e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	4619      	mov	r1, r3
 8001696:	480d      	ldr	r0, [pc, #52]	@ (80016cc <MX_TIM5_Init+0x98>)
 8001698:	f01f f8dc 	bl	8020854 <HAL_TIM_ConfigClockSource>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80016a2:	f000 fea7 	bl	80023f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	4619      	mov	r1, r3
 80016b2:	4806      	ldr	r0, [pc, #24]	@ (80016cc <MX_TIM5_Init+0x98>)
 80016b4:	f01f fde0 	bl	8021278 <HAL_TIMEx_MasterConfigSynchronization>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80016be:	f000 fe99 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
}
 80016c2:	bf00      	nop
 80016c4:	3720      	adds	r7, #32
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000528 	.word	0x20000528
 80016d0:	40000c00 	.word	0x40000c00

080016d4 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016d8:	4b22      	ldr	r3, [pc, #136]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 80016da:	4a23      	ldr	r2, [pc, #140]	@ (8001768 <MX_USART3_UART_Init+0x94>)
 80016dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016de:	4b21      	ldr	r3, [pc, #132]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 80016e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 80016fa:	220c      	movs	r2, #12
 80016fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fe:	4b19      	ldr	r3, [pc, #100]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001704:	4b17      	ldr	r3, [pc, #92]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800170a:	4b16      	ldr	r3, [pc, #88]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 800170c:	2200      	movs	r2, #0
 800170e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001710:	4b14      	ldr	r3, [pc, #80]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 8001712:	2200      	movs	r2, #0
 8001714:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001716:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 8001718:	2200      	movs	r2, #0
 800171a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800171c:	4811      	ldr	r0, [pc, #68]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 800171e:	f01f fe39 	bl	8021394 <HAL_UART_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001728:	f000 fe64 	bl	80023f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800172c:	2100      	movs	r1, #0
 800172e:	480d      	ldr	r0, [pc, #52]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 8001730:	f020 fe41 	bl	80223b6 <HAL_UARTEx_SetTxFifoThreshold>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800173a:	f000 fe5b 	bl	80023f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800173e:	2100      	movs	r1, #0
 8001740:	4808      	ldr	r0, [pc, #32]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 8001742:	f020 fe76 	bl	8022432 <HAL_UARTEx_SetRxFifoThreshold>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800174c:	f000 fe52 	bl	80023f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001750:	4804      	ldr	r0, [pc, #16]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 8001752:	f020 fdf7 	bl	8022344 <HAL_UARTEx_DisableFifoMode>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800175c:	f000 fe4a 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	200007cc 	.word	0x200007cc
 8001768:	40004800 	.word	0x40004800

0800176c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001772:	4b29      	ldr	r3, [pc, #164]	@ (8001818 <MX_DMA_Init+0xac>)
 8001774:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001778:	4a27      	ldr	r2, [pc, #156]	@ (8001818 <MX_DMA_Init+0xac>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001782:	4b25      	ldr	r3, [pc, #148]	@ (8001818 <MX_DMA_Init+0xac>)
 8001784:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8001790:	2200      	movs	r2, #0
 8001792:	2106      	movs	r1, #6
 8001794:	200b      	movs	r0, #11
 8001796:	f019 f920 	bl	801a9da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800179a:	200b      	movs	r0, #11
 800179c:	f019 f937 	bl	801aa0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2106      	movs	r1, #6
 80017a4:	200c      	movs	r0, #12
 80017a6:	f019 f918 	bl	801a9da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80017aa:	200c      	movs	r0, #12
 80017ac:	f019 f92f 	bl	801aa0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 7, 0);
 80017b0:	2200      	movs	r2, #0
 80017b2:	2107      	movs	r1, #7
 80017b4:	200d      	movs	r0, #13
 80017b6:	f019 f910 	bl	801a9da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80017ba:	200d      	movs	r0, #13
 80017bc:	f019 f927 	bl	801aa0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 7, 0);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2107      	movs	r1, #7
 80017c4:	200e      	movs	r0, #14
 80017c6:	f019 f908 	bl	801a9da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80017ca:	200e      	movs	r0, #14
 80017cc:	f019 f91f 	bl	801aa0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 7, 0);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2107      	movs	r1, #7
 80017d4:	200f      	movs	r0, #15
 80017d6:	f019 f900 	bl	801a9da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80017da:	200f      	movs	r0, #15
 80017dc:	f019 f917 	bl	801aa0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 7, 0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2107      	movs	r1, #7
 80017e4:	2010      	movs	r0, #16
 80017e6:	f019 f8f8 	bl	801a9da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80017ea:	2010      	movs	r0, #16
 80017ec:	f019 f90f 	bl	801aa0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 7, 0);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2107      	movs	r1, #7
 80017f4:	2011      	movs	r0, #17
 80017f6:	f019 f8f0 	bl	801a9da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80017fa:	2011      	movs	r0, #17
 80017fc:	f019 f907 	bl	801aa0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 7, 0);
 8001800:	2200      	movs	r2, #0
 8001802:	2107      	movs	r1, #7
 8001804:	202f      	movs	r0, #47	@ 0x2f
 8001806:	f019 f8e8 	bl	801a9da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800180a:	202f      	movs	r0, #47	@ 0x2f
 800180c:	f019 f8ff 	bl	801aa0e <HAL_NVIC_EnableIRQ>
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	58024400 	.word	0x58024400

0800181c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08c      	sub	sp, #48	@ 0x30
 8001820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001822:	f107 031c 	add.w	r3, r7, #28
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
 8001830:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001832:	4b61      	ldr	r3, [pc, #388]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 8001834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001838:	4a5f      	ldr	r2, [pc, #380]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 800183a:	f043 0310 	orr.w	r3, r3, #16
 800183e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001842:	4b5d      	ldr	r3, [pc, #372]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 8001844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001848:	f003 0310 	and.w	r3, r3, #16
 800184c:	61bb      	str	r3, [r7, #24]
 800184e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001850:	4b59      	ldr	r3, [pc, #356]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 8001852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001856:	4a58      	ldr	r2, [pc, #352]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 8001858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800185c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001860:	4b55      	ldr	r3, [pc, #340]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 8001862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800186e:	4b52      	ldr	r3, [pc, #328]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 8001870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001874:	4a50      	ldr	r2, [pc, #320]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 8001876:	f043 0304 	orr.w	r3, r3, #4
 800187a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800187e:	4b4e      	ldr	r3, [pc, #312]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 8001880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800188c:	4b4a      	ldr	r3, [pc, #296]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 800188e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001892:	4a49      	ldr	r2, [pc, #292]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800189c:	4b46      	ldr	r3, [pc, #280]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 800189e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018aa:	4b43      	ldr	r3, [pc, #268]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 80018ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018b0:	4a41      	ldr	r2, [pc, #260]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 80018b2:	f043 0302 	orr.w	r3, r3, #2
 80018b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018ba:	4b3f      	ldr	r3, [pc, #252]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 80018bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018c8:	4b3b      	ldr	r3, [pc, #236]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 80018ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ce:	4a3a      	ldr	r2, [pc, #232]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 80018d0:	f043 0308 	orr.w	r3, r3, #8
 80018d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018d8:	4b37      	ldr	r3, [pc, #220]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 80018da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DUT_HVDC_ENABLE_Pin | DUT_VGS_IDLE_SEL_Pin | DUT_VICTRL_SEL_Pin | DUT_GATE_SEL_Pin, GPIO_PIN_RESET);
 80018e6:	2200      	movs	r2, #0
 80018e8:	213c      	movs	r1, #60	@ 0x3c
 80018ea:	4834      	ldr	r0, [pc, #208]	@ (80019bc <MX_GPIO_Init+0x1a0>)
 80018ec:	f01b f9da 	bl	801cca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GADC_RESET_Pin | DUT_DAC_LDAC_Pin | DUT_DAC_RESET_Pin | GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);
 80018f0:	2200      	movs	r2, #0
 80018f2:	f24c 41ff 	movw	r1, #50431	@ 0xc4ff
 80018f6:	4832      	ldr	r0, [pc, #200]	@ (80019c0 <MX_GPIO_Init+0x1a4>)
 80018f8:	f01b f9d4 	bl	801cca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HS_ADC_START_Pin | HS_ADC_RESET_Pin, GPIO_PIN_RESET);
 80018fc:	2200      	movs	r2, #0
 80018fe:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8001902:	4830      	ldr	r0, [pc, #192]	@ (80019c4 <MX_GPIO_Init+0x1a8>)
 8001904:	f01b f9ce 	bl	801cca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DUT_HVDC_ISOLATE_Pin DUT_VGS_IDLE_SEL_Pin DUT_VICTRL_SEL_Pin DUT_GATE_SEL_Pin */
  GPIO_InitStruct.Pin = DUT_HVDC_ENABLE_Pin | DUT_VGS_IDLE_SEL_Pin | DUT_VICTRL_SEL_Pin | DUT_GATE_SEL_Pin;
 8001908:	233c      	movs	r3, #60	@ 0x3c
 800190a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190c:	2301      	movs	r3, #1
 800190e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001918:	f107 031c 	add.w	r3, r7, #28
 800191c:	4619      	mov	r1, r3
 800191e:	4827      	ldr	r0, [pc, #156]	@ (80019bc <MX_GPIO_Init+0x1a0>)
 8001920:	f01b f810 	bl	801c944 <HAL_GPIO_Init>

  /*Configure GPIO pins : GADC_RESET_Pin DUT_DAC_LDAC_Pin DUT_DAC_RESET_Pin PD0
                           PD1 PD2 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GADC_RESET_Pin | DUT_DAC_LDAC_Pin | DUT_DAC_RESET_Pin | GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 8001924:	f24c 43ff 	movw	r3, #50431	@ 0xc4ff
 8001928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192a:	2301      	movs	r3, #1
 800192c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001932:	2300      	movs	r3, #0
 8001934:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001936:	f107 031c 	add.w	r3, r7, #28
 800193a:	4619      	mov	r1, r3
 800193c:	4820      	ldr	r0, [pc, #128]	@ (80019c0 <MX_GPIO_Init+0x1a4>)
 800193e:	f01b f801 	bl	801c944 <HAL_GPIO_Init>

  /*Configure GPIO pin : GADC_RVS_Pin */
  GPIO_InitStruct.Pin = GADC_RVS_Pin;
 8001942:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001948:	2300      	movs	r3, #0
 800194a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GADC_RVS_GPIO_Port, &GPIO_InitStruct);
 8001950:	f107 031c 	add.w	r3, r7, #28
 8001954:	4619      	mov	r1, r3
 8001956:	481a      	ldr	r0, [pc, #104]	@ (80019c0 <MX_GPIO_Init+0x1a4>)
 8001958:	f01a fff4 	bl	801c944 <HAL_GPIO_Init>

  /*Configure GPIO pins : HS_ADC_START_Pin HS_ADC_RESET_Pin */
  GPIO_InitStruct.Pin = HS_ADC_START_Pin | HS_ADC_RESET_Pin;
 800195c:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001962:	2301      	movs	r3, #1
 8001964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2300      	movs	r3, #0
 800196c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196e:	f107 031c 	add.w	r3, r7, #28
 8001972:	4619      	mov	r1, r3
 8001974:	4813      	ldr	r0, [pc, #76]	@ (80019c4 <MX_GPIO_Init+0x1a8>)
 8001976:	f01a ffe5 	bl	801c944 <HAL_GPIO_Init>

  /*Configure GPIO pin : HS_ADC_DRDY_Pin */
  GPIO_InitStruct.Pin = HS_ADC_DRDY_Pin;
 800197a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800197e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001980:	2300      	movs	r3, #0
 8001982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(HS_ADC_DRDY_GPIO_Port, &GPIO_InitStruct);
 8001988:	f107 031c 	add.w	r3, r7, #28
 800198c:	4619      	mov	r1, r3
 800198e:	480d      	ldr	r0, [pc, #52]	@ (80019c4 <MX_GPIO_Init+0x1a8>)
 8001990:	f01a ffd8 	bl	801c944 <HAL_GPIO_Init>

  /*Configure GPIO pins : EFUSE_FLT_Pin EFUSE_PGOOD_Pin */
  GPIO_InitStruct.Pin = EFUSE_FLT_Pin | EFUSE_PGOOD_Pin;
 8001994:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800199a:	2300      	movs	r3, #0
 800199c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a2:	f107 031c 	add.w	r3, r7, #28
 80019a6:	4619      	mov	r1, r3
 80019a8:	4807      	ldr	r0, [pc, #28]	@ (80019c8 <MX_GPIO_Init+0x1ac>)
 80019aa:	f01a ffcb 	bl	801c944 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80019ae:	bf00      	nop
 80019b0:	3730      	adds	r7, #48	@ 0x30
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	58024400 	.word	0x58024400
 80019bc:	58021000 	.word	0x58021000
 80019c0:	58020c00 	.word	0x58020c00
 80019c4:	58020000 	.word	0x58020000
 80019c8:	58020400 	.word	0x58020400

080019cc <vHeapInit>:
static uint8_t ucRAM_3[32 * 1024] __attribute__((section(".ram3_data")));

#define mainMEM_REGION(REGION) REGION, sizeof(REGION)

static void vHeapInit()
{
 80019cc:	b5b0      	push	{r4, r5, r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af00      	add	r7, sp, #0
  /* Note: the memories must be sorted on their physical address. */
  HeapRegion_t xHeapRegions[] = {
 80019d2:	4b08      	ldr	r3, [pc, #32]	@ (80019f4 <vHeapInit+0x28>)
 80019d4:	463c      	mov	r4, r7
 80019d6:	461d      	mov	r5, r3
 80019d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80019e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      {mainMEM_REGION(ucRAM_1)},
      //		{ mainMEM_REGION( ucRAM_2 ) },
      {mainMEM_REGION(ucRAM_3)},
      {NULL, 0}};

  vPortDefineHeapRegions(xHeapRegions);
 80019e4:	463b      	mov	r3, r7
 80019e6:	4618      	mov	r0, r3
 80019e8:	f005 f974 	bl	8006cd4 <vPortDefineHeapRegions>
}
 80019ec:	bf00      	nop
 80019ee:	3720      	adds	r7, #32
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bdb0      	pop	{r4, r5, r7, pc}
 80019f4:	08024958 	.word	0x08024958

080019f8 <ulGetRunTimeCounterValue>:

// helper functions

uint32_t ulGetRunTimeCounterValue()
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return 0U;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <vAssertCalled>:

void vAssertCalled(const char *pcFile, uint32_t ulLine)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  volatile unsigned long ul = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]

  (void)pcFile;
  (void)ulLine;

  taskENTER_CRITICAL();
 8001a16:	f004 fec3 	bl	80067a0 <vPortEnterCritical>
  {
    /* Set ul to a non-zero value using the debugger to step out of this
    function. */
    while (ul == 0)
 8001a1a:	e000      	b.n	8001a1e <vAssertCalled+0x16>
    {
      __NOP();
 8001a1c:	bf00      	nop
    while (ul == 0)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0fb      	beq.n	8001a1c <vAssertCalled+0x14>
    }
  }
  taskEXIT_CRITICAL();
 8001a24:	f004 fee8 	bl	80067f8 <vPortExitCritical>
}
 8001a28:	bf00      	nop
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  internally by FreeRTOS API functions that create tasks, queues, software
  timers, and semaphores.  The size of the FreeRTOS heap is set by the
  configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

  /* Force an assert. */
  configASSERT((volatile void *)NULL);
 8001a34:	f240 5139 	movw	r1, #1337	@ 0x539
 8001a38:	4802      	ldr	r0, [pc, #8]	@ (8001a44 <vApplicationMallocFailedHook+0x14>)
 8001a3a:	f7ff ffe5 	bl	8001a08 <vAssertCalled>
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	08024978 	.word	0x08024978

08001a48 <ulApplicationGetNextSequenceNumber>:
uint32_t ulApplicationGetNextSequenceNumber(
    uint32_t ulSourceAddress,
    uint16_t usSourcePort,
    uint32_t ulDestinationAddress,
    uint16_t usDestinationPort)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	461a      	mov	r2, r3
 8001a54:	460b      	mov	r3, r1
 8001a56:	817b      	strh	r3, [r7, #10]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	813b      	strh	r3, [r7, #8]
  uint32_t ulReturn;
  (void)ulSourceAddress;
  (void)usSourcePort;
  (void)ulDestinationAddress;
  (void)usDestinationPort;
  xApplicationGetRandomNumber(&ulReturn);
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	4618      	mov	r0, r3
 8001a62:	f000 f89b 	bl	8001b9c <xApplicationGetRandomNumber>

  return ulReturn;
 8001a66:	697b      	ldr	r3, [r7, #20]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <vApplicationIPNetworkEventHook>:

void vApplicationIPNetworkEventHook(eIPCallbackEvent_t eNetworkEvent)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	@ 0x28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
  /* If the network has just come up...*/
  if (eNetworkEvent == eNetworkUp)
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d147      	bne.n	8001b10 <vApplicationIPNetworkEventHook+0xa0>
    uint32_t ulIPAddress, ulNetMask, ulGatewayAddress, ulDNSServerAddress;
    char cBuffer[16];

    /* Create the tasks that use the IP stack if they have not already been
    created. */
    if (xTasksAlreadyCreated == pdFALSE)
 8001a80:	4b25      	ldr	r3, [pc, #148]	@ (8001b18 <vApplicationIPNetworkEventHook+0xa8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d105      	bne.n	8001a94 <vApplicationIPNetworkEventHook+0x24>
    {
      xTasksAlreadyCreated = pdTRUE;
 8001a88:	4b23      	ldr	r3, [pc, #140]	@ (8001b18 <vApplicationIPNetworkEventHook+0xa8>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]
      /* Sockets, and tasks that use the TCP/IP stack can be created here. */
      //
      xDoCreateSockets = pdTRUE;
 8001a8e:	4b23      	ldr	r3, [pc, #140]	@ (8001b1c <vApplicationIPNetworkEventHook+0xac>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	601a      	str	r2, [r3, #0]
    }
    /* Print out the network configuration, which may have come from a DHCP
    server. */
    FreeRTOS_GetAddressConfiguration(&ulIPAddress, &ulNetMask, &ulGatewayAddress, &ulDNSServerAddress);
 8001a94:	f107 0318 	add.w	r3, r7, #24
 8001a98:	f107 021c 	add.w	r2, r7, #28
 8001a9c:	f107 0120 	add.w	r1, r7, #32
 8001aa0:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001aa4:	f008 f8c4 	bl	8009c30 <FreeRTOS_GetAddressConfiguration>
    FreeRTOS_inet_ntoa(ulIPAddress, cBuffer);
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aaa:	f107 0208 	add.w	r2, r7, #8
 8001aae:	4611      	mov	r1, r2
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f00d fec1 	bl	800f838 <FreeRTOS_inet_ntoa>
    FreeRTOS_printf(("IP Address: %s\n", cBuffer));
 8001ab6:	f107 0308 	add.w	r3, r7, #8
 8001aba:	4619      	mov	r1, r3
 8001abc:	4818      	ldr	r0, [pc, #96]	@ (8001b20 <vApplicationIPNetworkEventHook+0xb0>)
 8001abe:	f020 fe71 	bl	80227a4 <lUDPLoggingPrintf>

    FreeRTOS_inet_ntoa(ulNetMask, cBuffer);
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	f107 0208 	add.w	r2, r7, #8
 8001ac8:	4611      	mov	r1, r2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f00d feb4 	bl	800f838 <FreeRTOS_inet_ntoa>
    FreeRTOS_printf(("Subnet Mask: %s\n", cBuffer));
 8001ad0:	f107 0308 	add.w	r3, r7, #8
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4813      	ldr	r0, [pc, #76]	@ (8001b24 <vApplicationIPNetworkEventHook+0xb4>)
 8001ad8:	f020 fe64 	bl	80227a4 <lUDPLoggingPrintf>

    FreeRTOS_inet_ntoa(ulGatewayAddress, cBuffer);
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f107 0208 	add.w	r2, r7, #8
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f00d fea7 	bl	800f838 <FreeRTOS_inet_ntoa>
    FreeRTOS_printf(("Gateway Address: %s\n", cBuffer));
 8001aea:	f107 0308 	add.w	r3, r7, #8
 8001aee:	4619      	mov	r1, r3
 8001af0:	480d      	ldr	r0, [pc, #52]	@ (8001b28 <vApplicationIPNetworkEventHook+0xb8>)
 8001af2:	f020 fe57 	bl	80227a4 <lUDPLoggingPrintf>

    FreeRTOS_inet_ntoa(ulDNSServerAddress, cBuffer);
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	f107 0208 	add.w	r2, r7, #8
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f00d fe9a 	bl	800f838 <FreeRTOS_inet_ntoa>
    FreeRTOS_printf(("DNS Server Address: %s\n", cBuffer));
 8001b04:	f107 0308 	add.w	r3, r7, #8
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4808      	ldr	r0, [pc, #32]	@ (8001b2c <vApplicationIPNetworkEventHook+0xbc>)
 8001b0c:	f020 fe4a 	bl	80227a4 <lUDPLoggingPrintf>
  }
}
 8001b10:	bf00      	nop
 8001b12:	3728      	adds	r7, #40	@ 0x28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000d28 	.word	0x20000d28
 8001b1c:	20000d2c 	.word	0x20000d2c
 8001b20:	0802498c 	.word	0x0802498c
 8001b24:	0802499c 	.word	0x0802499c
 8001b28:	080249b0 	.word	0x080249b0
 8001b2c:	080249c8 	.word	0x080249c8

08001b30 <xApplicationDNSQueryHook>:
/*-----------------------------------------------------------*/

BaseType_t xApplicationDNSQueryHook(const char *pcName)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  BaseType_t xReturn = pdFAIL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]

  /* Determine if a name lookup is for this node.  Two names are given
  to this node: that returned by pcApplicationHostnameHook() and that set
  by mainDEVICE_NICK_NAME. */
  if (strcasecmp(pcName, pcApplicationHostnameHook()) == 0)
 8001b3c:	f000 f810 	bl	8001b60 <pcApplicationHostnameHook>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4619      	mov	r1, r3
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f022 f809 	bl	8023b5c <strcasecmp>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <xApplicationDNSQueryHook+0x24>
  {
    xReturn = pdPASS;
 8001b50:	2301      	movs	r3, #1
 8001b52:	60fb      	str	r3, [r7, #12]
  }
  return xReturn;
 8001b54:	68fb      	ldr	r3, [r7, #12]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <pcApplicationHostnameHook>:
/*-----------------------------------------------------------*/

const char *pcApplicationHostnameHook(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* Assign the name "STM32H7" to this network node.  This function will be
  called during the DHCP: the machine will be registered with an IP address
  plus this name. */
  return "STM32H7";
 8001b64:	4b02      	ldr	r3, [pc, #8]	@ (8001b70 <pcApplicationHostnameHook+0x10>)
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	080249e0 	.word	0x080249e0

08001b74 <vApplicationPingReplyHook>:
/*-----------------------------------------------------------*/

#if (ipconfigSUPPORT_OUTGOING_PINGS == 1)
void vApplicationPingReplyHook(ePingReplyStatus_t eStatus, uint16_t usIdentifier)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	460a      	mov	r2, r1
 8001b7e:	71fb      	strb	r3, [r7, #7]
 8001b80:	4613      	mov	r3, r2
 8001b82:	80bb      	strh	r3, [r7, #4]
  FreeRTOS_printf(("Received ping ID %04X\n", usIdentifier));
 8001b84:	88bb      	ldrh	r3, [r7, #4]
 8001b86:	4619      	mov	r1, r3
 8001b88:	4803      	ldr	r0, [pc, #12]	@ (8001b98 <vApplicationPingReplyHook+0x24>)
 8001b8a:	f020 fe0b 	bl	80227a4 <lUDPLoggingPrintf>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	080249e8 	.word	0x080249e8

08001b9c <xApplicationGetRandomNumber>:
#endif

/*-----------------------------------------------------------*/

BaseType_t xApplicationGetRandomNumber(uint32_t *pulNumber)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  *pulNumber = rand();
 8001ba4:	f021 fe6c 	bl	8023880 <rand>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	461a      	mov	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	601a      	str	r2, [r3, #0]
  return pdTRUE;
 8001bb0:	2301      	movs	r3, #1
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <prvGetRegistersFromStack>:
};

volatile struct xREGISTER_STACK *pxRegisterStack = NULL;

void prvGetRegistersFromStack(uint32_t *pulFaultStackAddress)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* When the debuggger stops here, you can inspect the registeers of the
  application by looking at *pxRegisterStack. */
  pxRegisterStack = (volatile struct xREGISTER_STACK *)(pulFaultStackAddress - ARRAY_SIZE(pxRegisterStack->spare0));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b20      	subs	r3, #32
 8001bc8:	4a01      	ldr	r2, [pc, #4]	@ (8001bd0 <prvGetRegistersFromStack+0x14>)
 8001bca:	6013      	str	r3, [r2, #0]

  /* When the following line is hit, the variables contain the register values. */
  for (;;)
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <prvGetRegistersFromStack+0x10>
 8001bd0:	20000d44 	.word	0x20000d44

08001bd4 <HardFault_Handler>:
    ;
}

void HardFault_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  __asm volatile(
 8001bd8:	f01e 0f04 	tst.w	lr, #4
 8001bdc:	bf0c      	ite	eq
 8001bde:	f3ef 8008 	mrseq	r0, MSP
 8001be2:	f3ef 8009 	mrsne	r0, PSP
 8001be6:	6981      	ldr	r1, [r0, #24]
 8001be8:	f7ff ffe8 	bl	8001bbc <prvGetRegistersFromStack>
      " ite eq                                                    \n"
      " mrseq r0, msp                                             \n"
      " mrsne r0, psp                                             \n"
      " ldr r1, [r0, #24]                                         \n"
      " bl prvGetRegistersFromStack                               \n");
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <prvServerWorkTask>:

static void prvServerWorkTask(void *pvParameters)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  TickType_t uxBlockTimeTicks = ipMS_TO_MIN_TICKS(100U);
#endif /* ( CONTINUOUS_PING != 0 ) */

  for (;;)
  {
    vTaskDelay(10U);
 8001c00:	200a      	movs	r0, #10
 8001c02:	f002 fe9b 	bl	800493c <vTaskDelay>
    if (xDoCreateSockets != pdFALSE)
 8001c06:	4b05      	ldr	r3, [pc, #20]	@ (8001c1c <prvServerWorkTask+0x24>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f8      	beq.n	8001c00 <prvServerWorkTask+0x8>
    {
      xDoCreateSockets = pdFALSE;
 8001c0e:	4b03      	ldr	r3, [pc, #12]	@ (8001c1c <prvServerWorkTask+0x24>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
      /* Start a new task to fetch logging lines and send them out.
      See FreeRTOSConfig.h for the configuration of UDP logging. */
      vUDPLoggingTaskCreate();
 8001c14:	f020 fde2 	bl	80227dc <vUDPLoggingTaskCreate>
    vTaskDelay(10U);
 8001c18:	e7f2      	b.n	8001c00 <prvServerWorkTask+0x8>
 8001c1a:	bf00      	nop
 8001c1c:	20000d2c 	.word	0x20000d2c

08001c20 <vADCTCPTask>:
    vTaskDelay(pdMS_TO_TICKS(30));
  }
}

static void vADCTCPTask(void *pvParameters)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b098      	sub	sp, #96	@ 0x60
 8001c24:	af02      	add	r7, sp, #8
 8001c26:	6078      	str	r0, [r7, #4]
  Socket_t xSocket;
  static const TickType_t xTimeOut = pdMS_TO_TICKS(500);
  struct freertos_sockaddr xRemoteAddress;
  BaseType_t xAlreadyTransmitted, xBytesSent;
  char *pcBufferToTransmit;
  const size_t xTotalLengthToSend = sizeof(usADCDataMock0);
 8001c28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  uint32_t ulCurrBuf;

  /* Remote address setup */
  memset(&xRemoteAddress, 0, sizeof(xRemoteAddress));
 8001c2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c32:	2218      	movs	r2, #24
 8001c34:	2100      	movs	r1, #0
 8001c36:	4618      	mov	r0, r3
 8001c38:	f021 f8dd 	bl	8022df6 <memset>
  xRemoteAddress.sin_port = FreeRTOS_htons(usADCPort);
 8001c3c:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 8001c40:	021b      	lsls	r3, r3, #8
 8001c42:	b21a      	sxth	r2, r3
 8001c44:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	b21b      	sxth	r3, r3
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	b21b      	sxth	r3, r3
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	84fb      	strh	r3, [r7, #38]	@ 0x26
  xRemoteAddress.sin_address.ulIP_IPv4 = FreeRTOS_inet_addr_quick(ucServerIPAddress[0], ucServerIPAddress[1], ucServerIPAddress[2], ucServerIPAddress[3]);
 8001c56:	2303      	movs	r3, #3
 8001c58:	061a      	lsls	r2, r3, #24
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	041b      	lsls	r3, r3, #16
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	23a8      	movs	r3, #168	@ 0xa8
 8001c62:	021b      	lsls	r3, r3, #8
 8001c64:	4313      	orrs	r3, r2
 8001c66:	22c0      	movs	r2, #192	@ 0xc0
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  xRemoteAddress.sin_family = FREERTOS_AF_INET4;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  for (;;)
  {
    /* Create new socket for each transmission */
    xSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 8001c72:	2206      	movs	r2, #6
 8001c74:	2101      	movs	r1, #1
 8001c76:	2002      	movs	r0, #2
 8001c78:	f00c fcd2 	bl	800e620 <FreeRTOS_socket>
 8001c7c:	6478      	str	r0, [r7, #68]	@ 0x44
    WinProperties_t xWinProperties;

    memset(&xWinProperties, '\0', sizeof xWinProperties);
 8001c7e:	f107 0310 	add.w	r3, r7, #16
 8001c82:	2210      	movs	r2, #16
 8001c84:	2100      	movs	r1, #0
 8001c86:	4618      	mov	r0, r3
 8001c88:	f021 f8b5 	bl	8022df6 <memset>

    xWinProperties.lTxBufSize = ipconfigIPERF_TX_BUFSIZE; /* Units of bytes. */
 8001c8c:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001c90:	613b      	str	r3, [r7, #16]
    xWinProperties.lTxWinSize = ipconfigIPERF_TX_WINSIZE; /* Size in units of MSS */
 8001c92:	230c      	movs	r3, #12
 8001c94:	617b      	str	r3, [r7, #20]
    xWinProperties.lRxBufSize = ipconfigIPERF_RX_BUFSIZE; /* Units of bytes. */
 8001c96:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001c9a:	61bb      	str	r3, [r7, #24]
    xWinProperties.lRxWinSize = ipconfigIPERF_RX_WINSIZE; /* Size in units of MSS */
 8001c9c:	230c      	movs	r3, #12
 8001c9e:	61fb      	str	r3, [r7, #28]

    /* Set send and receive time outs. */
    FreeRTOS_setsockopt(xSocket,
 8001ca0:	2304      	movs	r3, #4
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	4b48      	ldr	r3, [pc, #288]	@ (8001dc8 <vADCTCPTask+0x1a8>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2100      	movs	r1, #0
 8001caa:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001cac:	f00d fc72 	bl	800f594 <FreeRTOS_setsockopt>
                        0,
                        FREERTOS_SO_RCVTIMEO,
                        &xTimeOut,
                        sizeof(xTimeOut));

    FreeRTOS_setsockopt(xSocket,
 8001cb0:	2304      	movs	r3, #4
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	4b44      	ldr	r3, [pc, #272]	@ (8001dc8 <vADCTCPTask+0x1a8>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	2100      	movs	r1, #0
 8001cba:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001cbc:	f00d fc6a 	bl	800f594 <FreeRTOS_setsockopt>
                        0,
                        FREERTOS_SO_SNDTIMEO,
                        &xTimeOut,
                        sizeof(xTimeOut));

    FreeRTOS_setsockopt(xSocket, 0, FREERTOS_SO_WIN_PROPERTIES, (void *)&xWinProperties, sizeof(xWinProperties));
 8001cc0:	f107 0310 	add.w	r3, r7, #16
 8001cc4:	2210      	movs	r2, #16
 8001cc6:	9200      	str	r2, [sp, #0]
 8001cc8:	220d      	movs	r2, #13
 8001cca:	2100      	movs	r1, #0
 8001ccc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001cce:	f00d fc61 	bl	800f594 <FreeRTOS_setsockopt>

    configASSERT(xSocket != FREERTOS_INVALID_SOCKET);
 8001cd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd8:	d104      	bne.n	8001ce4 <vADCTCPTask+0xc4>
 8001cda:	f240 615b 	movw	r1, #1627	@ 0x65b
 8001cde:	483b      	ldr	r0, [pc, #236]	@ (8001dcc <vADCTCPTask+0x1ac>)
 8001ce0:	f7ff fe92 	bl	8001a08 <vAssertCalled>
    /* Block indefinitely (without a timeout, so no need to check the function's
 return value) to wait for a notification. NOTE! Real applications
 should not block indefinitely, but instead time out occasionally in order
 to handle error conditions that may prevent the interrupt from sending
 any more notifications. */
    xTaskNotifyWait(0x00,           /* Don't clear any bits on entry. */
 8001ce4:	f107 0320 	add.w	r3, r7, #32
 8001ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cec:	9200      	str	r2, [sp, #0]
 8001cee:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f003 ffab 	bl	8005c50 <xTaskGenericNotifyWait>
                    0xffffffff,     /* Clear all bits on exit. */
                    &ulCurrBuf,     /* Receives the notification value. */
                    portMAX_DELAY); /* Block indefinitely. */
    if ((ulCurrBuf & 1) != 0)
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d002      	beq.n	8001d0a <vADCTCPTask+0xea>
    {
      pcBufferToTransmit = usADCDataMock1;
 8001d04:	4b32      	ldr	r3, [pc, #200]	@ (8001dd0 <vADCTCPTask+0x1b0>)
 8001d06:	653b      	str	r3, [r7, #80]	@ 0x50
 8001d08:	e001      	b.n	8001d0e <vADCTCPTask+0xee>
    }
    else
    {
      pcBufferToTransmit = usADCDataMock0;
 8001d0a:	4b32      	ldr	r3, [pc, #200]	@ (8001dd4 <vADCTCPTask+0x1b4>)
 8001d0c:	653b      	str	r3, [r7, #80]	@ 0x50
    }
    //        HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
    xAlreadyTransmitted = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	657b      	str	r3, [r7, #84]	@ 0x54
    xBytesSent = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	643b      	str	r3, [r7, #64]	@ 0x40
    //        FreeRTOS_printf(("Start Mock Transmission \n"));

    if (FreeRTOS_connect(xSocket, &xRemoteAddress, sizeof(xRemoteAddress)) == 0)
 8001d16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d1a:	2218      	movs	r2, #24
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001d20:	f00d ffd6 	bl	800fcd0 <FreeRTOS_connect>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d139      	bne.n	8001d9e <vADCTCPTask+0x17e>
    {
      while (xAlreadyTransmitted < xTotalLengthToSend)
 8001d2a:	e030      	b.n	8001d8e <vADCTCPTask+0x16e>
      {
        BaseType_t xAvlSpace = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
        BaseType_t xBytesToSend = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
           buffer that is passed into, rather than copied into, the FreeRTOS_send()
           function. */

        /* Obtain the pointer to the current head of sockets TX stream buffer
           using FreeRTOS_get_tx_head */
        pucTCPZeroCopyStrmBuffer = FreeRTOS_get_tx_head(xSocket, &xAvlSpace);
 8001d34:	f107 030c 	add.w	r3, r7, #12
 8001d38:	4619      	mov	r1, r3
 8001d3a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001d3c:	f00e facf 	bl	80102de <FreeRTOS_get_tx_head>
 8001d40:	63f8      	str	r0, [r7, #60]	@ 0x3c
        //                    FreeRTOS_printf(("xSocket Available Space: %d \n", xAvlSpace));

        if (pucTCPZeroCopyStrmBuffer)
 8001d42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d027      	beq.n	8001d98 <vADCTCPTask+0x178>
        {
          /* Check if there is enough space in the stream buffer to place
             the entire data. */
          if ((xTotalLengthToSend - xAlreadyTransmitted) > xAvlSpace)
 8001d48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d902      	bls.n	8001d5a <vADCTCPTask+0x13a>
          {
            xBytesToSend = xAvlSpace;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d58:	e003      	b.n	8001d62 <vADCTCPTask+0x142>
          }
          else
          {
            xBytesToSend = (xTotalLengthToSend - xAlreadyTransmitted);
 8001d5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	64fb      	str	r3, [r7, #76]	@ 0x4c
          }
          memcpy(pucTCPZeroCopyStrmBuffer,
 8001d62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d64:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001d66:	4413      	add	r3, r2
 8001d68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001d6e:	f020 ff35 	bl	8022bdc <memcpy>
          break;
        }

        /* Call the FreeRTOS_send with buffer as NULL indicating to the stack
           that its a zero copy */
        xBytesSent = FreeRTOS_send(/* The socket being sent to. */
 8001d72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d74:	2300      	movs	r3, #0
 8001d76:	2100      	movs	r1, #0
 8001d78:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001d7a:	f00e fbbb 	bl	80104f4 <FreeRTOS_send>
 8001d7e:	6438      	str	r0, [r7, #64]	@ 0x40
                                   /* The remaining length of data to send. */
                                   xBytesToSend,
                                   /* ulFlags. */
                                   0);

        if (xBytesSent >= 0)
 8001d80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	db0a      	blt.n	8001d9c <vADCTCPTask+0x17c>
        {
          /* Data was sent successfully. */
          xAlreadyTransmitted += xBytesSent;
 8001d86:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001d88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d8a:	4413      	add	r3, r2
 8001d8c:	657b      	str	r3, [r7, #84]	@ 0x54
      while (xAlreadyTransmitted < xTotalLengthToSend)
 8001d8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d8ca      	bhi.n	8001d2c <vADCTCPTask+0x10c>
 8001d96:	e002      	b.n	8001d9e <vADCTCPTask+0x17e>
          break;
 8001d98:	bf00      	nop
 8001d9a:	e000      	b.n	8001d9e <vADCTCPTask+0x17e>
        }
        else
        {
          /* Error - break out of the loop for graceful socket close. */
          break;
 8001d9c:	bf00      	nop
        }
      }
    }

    /* Cleanup after each transmission */
    FreeRTOS_shutdown(xSocket, FREERTOS_SHUT_RDWR);
 8001d9e:	2102      	movs	r1, #2
 8001da0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001da2:	f00e fc56 	bl	8010652 <FreeRTOS_shutdown>
    while (FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0)
 8001da6:	e002      	b.n	8001dae <vADCTCPTask+0x18e>
    {
      vTaskDelay(pdMS_TO_TICKS(1));
 8001da8:	2001      	movs	r0, #1
 8001daa:	f002 fdc7 	bl	800493c <vTaskDelay>
    while (FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0)
 8001dae:	2300      	movs	r3, #0
 8001db0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001db2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001db4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001db6:	f00e f9fd 	bl	80101b4 <FreeRTOS_recv>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	daf3      	bge.n	8001da8 <vADCTCPTask+0x188>
    }
    FreeRTOS_closesocket(xSocket);
 8001dc0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001dc2:	f00c fff1 	bl	800eda8 <FreeRTOS_closesocket>
  {
 8001dc6:	e754      	b.n	8001c72 <vADCTCPTask+0x52>
 8001dc8:	08027ed4 	.word	0x08027ed4
 8001dcc:	08024978 	.word	0x08024978
 8001dd0:	30010004 	.word	0x30010004
 8001dd4:	30000004 	.word	0x30000004

08001dd8 <vAuxADCTCPTask>:
    //        FreeRTOS_printf(("End Mock Transmission \n"));
  }
}

static void vAuxADCTCPTask(void *pvParameters)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b098      	sub	sp, #96	@ 0x60
 8001ddc:	af02      	add	r7, sp, #8
 8001dde:	6078      	str	r0, [r7, #4]
  Socket_t xSocket;
  static const TickType_t xTimeOut = pdMS_TO_TICKS(500);
  struct freertos_sockaddr xRemoteAddress;
  BaseType_t xAlreadyTransmitted, xBytesSent;
  char *pcBufferToTransmit;
  const size_t xTotalLengthToSend = sizeof(usAuxADCDataMock0);
 8001de0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001de4:	64bb      	str	r3, [r7, #72]	@ 0x48
  uint32_t ulCurrBuf;

  /* Remote address setup */
  memset(&xRemoteAddress, 0, sizeof(xRemoteAddress));
 8001de6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dea:	2218      	movs	r2, #24
 8001dec:	2100      	movs	r1, #0
 8001dee:	4618      	mov	r0, r3
 8001df0:	f021 f801 	bl	8022df6 <memset>
  xRemoteAddress.sin_port = FreeRTOS_htons(usAuxADCPort);
 8001df4:	f241 53b4 	movw	r3, #5556	@ 0x15b4
 8001df8:	021b      	lsls	r3, r3, #8
 8001dfa:	b21a      	sxth	r2, r3
 8001dfc:	f241 53b4 	movw	r3, #5556	@ 0x15b4
 8001e00:	0a1b      	lsrs	r3, r3, #8
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	b21b      	sxth	r3, r3
 8001e06:	4313      	orrs	r3, r2
 8001e08:	b21b      	sxth	r3, r3
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  xRemoteAddress.sin_address.ulIP_IPv4 = FreeRTOS_inet_addr_quick(ucServerIPAddress[0], ucServerIPAddress[1], ucServerIPAddress[2], ucServerIPAddress[3]);
 8001e0e:	2303      	movs	r3, #3
 8001e10:	061a      	lsls	r2, r3, #24
 8001e12:	2301      	movs	r3, #1
 8001e14:	041b      	lsls	r3, r3, #16
 8001e16:	431a      	orrs	r2, r3
 8001e18:	23a8      	movs	r3, #168	@ 0xa8
 8001e1a:	021b      	lsls	r3, r3, #8
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	22c0      	movs	r2, #192	@ 0xc0
 8001e20:	4313      	orrs	r3, r2
 8001e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  xRemoteAddress.sin_family = FREERTOS_AF_INET4;
 8001e24:	2302      	movs	r3, #2
 8001e26:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  for (;;)
  {
    /* Create new socket for each transmission */
    xSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 8001e2a:	2206      	movs	r2, #6
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	2002      	movs	r0, #2
 8001e30:	f00c fbf6 	bl	800e620 <FreeRTOS_socket>
 8001e34:	6478      	str	r0, [r7, #68]	@ 0x44
    WinProperties_t xWinProperties;

    memset(&xWinProperties, '\0', sizeof xWinProperties);
 8001e36:	f107 0310 	add.w	r3, r7, #16
 8001e3a:	2210      	movs	r2, #16
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f020 ffd9 	bl	8022df6 <memset>

    xWinProperties.lTxBufSize = ipconfigIPERF_TX_BUFSIZE; /* Units of bytes. */
 8001e44:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001e48:	613b      	str	r3, [r7, #16]
    xWinProperties.lTxWinSize = ipconfigIPERF_TX_WINSIZE; /* Size in units of MSS */
 8001e4a:	230c      	movs	r3, #12
 8001e4c:	617b      	str	r3, [r7, #20]
    xWinProperties.lRxBufSize = ipconfigIPERF_RX_BUFSIZE; /* Units of bytes. */
 8001e4e:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001e52:	61bb      	str	r3, [r7, #24]
    xWinProperties.lRxWinSize = ipconfigIPERF_RX_WINSIZE; /* Size in units of MSS */
 8001e54:	230c      	movs	r3, #12
 8001e56:	61fb      	str	r3, [r7, #28]

    /* Set send and receive time outs. */
    FreeRTOS_setsockopt(xSocket,
 8001e58:	2304      	movs	r3, #4
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	4b48      	ldr	r3, [pc, #288]	@ (8001f80 <vAuxADCTCPTask+0x1a8>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2100      	movs	r1, #0
 8001e62:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001e64:	f00d fb96 	bl	800f594 <FreeRTOS_setsockopt>
                        0,
                        FREERTOS_SO_RCVTIMEO,
                        &xTimeOut,
                        sizeof(xTimeOut));

    FreeRTOS_setsockopt(xSocket,
 8001e68:	2304      	movs	r3, #4
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	4b44      	ldr	r3, [pc, #272]	@ (8001f80 <vAuxADCTCPTask+0x1a8>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	2100      	movs	r1, #0
 8001e72:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001e74:	f00d fb8e 	bl	800f594 <FreeRTOS_setsockopt>
                        0,
                        FREERTOS_SO_SNDTIMEO,
                        &xTimeOut,
                        sizeof(xTimeOut));

    FreeRTOS_setsockopt(xSocket, 0, FREERTOS_SO_WIN_PROPERTIES, (void *)&xWinProperties, sizeof(xWinProperties));
 8001e78:	f107 0310 	add.w	r3, r7, #16
 8001e7c:	2210      	movs	r2, #16
 8001e7e:	9200      	str	r2, [sp, #0]
 8001e80:	220d      	movs	r2, #13
 8001e82:	2100      	movs	r1, #0
 8001e84:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001e86:	f00d fb85 	bl	800f594 <FreeRTOS_setsockopt>

    configASSERT(xSocket != FREERTOS_INVALID_SOCKET);
 8001e8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e90:	d104      	bne.n	8001e9c <vAuxADCTCPTask+0xc4>
 8001e92:	f240 61ea 	movw	r1, #1770	@ 0x6ea
 8001e96:	483b      	ldr	r0, [pc, #236]	@ (8001f84 <vAuxADCTCPTask+0x1ac>)
 8001e98:	f7ff fdb6 	bl	8001a08 <vAssertCalled>
    /* Block indefinitely (without a timeout, so no need to check the function's
 return value) to wait for a notification. NOTE! Real applications
 should not block indefinitely, but instead time out occasionally in order
 to handle error conditions that may prevent the interrupt from sending
 any more notifications. */
    xTaskNotifyWait(0x00,           /* Don't clear any bits on entry. */
 8001e9c:	f107 0320 	add.w	r3, r7, #32
 8001ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea4:	9200      	str	r2, [sp, #0]
 8001ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8001eaa:	2100      	movs	r1, #0
 8001eac:	2000      	movs	r0, #0
 8001eae:	f003 fecf 	bl	8005c50 <xTaskGenericNotifyWait>
                    0xffffffff,     /* Clear all bits on exit. */
                    &ulCurrBuf,     /* Receives the notification value. */
                    portMAX_DELAY); /* Block indefinitely. */
    if ((ulCurrBuf & 1) != 0)
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d002      	beq.n	8001ec2 <vAuxADCTCPTask+0xea>
    {
      pcBufferToTransmit = usAuxADCDataMock1;
 8001ebc:	4b32      	ldr	r3, [pc, #200]	@ (8001f88 <vAuxADCTCPTask+0x1b0>)
 8001ebe:	653b      	str	r3, [r7, #80]	@ 0x50
 8001ec0:	e001      	b.n	8001ec6 <vAuxADCTCPTask+0xee>
    }
    else
    {
      pcBufferToTransmit = usAuxADCDataMock0;
 8001ec2:	4b32      	ldr	r3, [pc, #200]	@ (8001f8c <vAuxADCTCPTask+0x1b4>)
 8001ec4:	653b      	str	r3, [r7, #80]	@ 0x50
    }
    //        HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
    xAlreadyTransmitted = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	657b      	str	r3, [r7, #84]	@ 0x54
    xBytesSent = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	643b      	str	r3, [r7, #64]	@ 0x40
    //        FreeRTOS_printf(("Start Mock Transmission \n"));

    if (FreeRTOS_connect(xSocket, &xRemoteAddress, sizeof(xRemoteAddress)) == 0)
 8001ece:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ed2:	2218      	movs	r2, #24
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001ed8:	f00d fefa 	bl	800fcd0 <FreeRTOS_connect>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d139      	bne.n	8001f56 <vAuxADCTCPTask+0x17e>
    {
      while (xAlreadyTransmitted < xTotalLengthToSend)
 8001ee2:	e030      	b.n	8001f46 <vAuxADCTCPTask+0x16e>
      {
        BaseType_t xAvlSpace = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]
        BaseType_t xBytesToSend = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
           buffer that is passed into, rather than copied into, the FreeRTOS_send()
           function. */

        /* Obtain the pointer to the current head of sockets TX stream buffer
           using FreeRTOS_get_tx_head */
        pucTCPZeroCopyStrmBuffer = FreeRTOS_get_tx_head(xSocket, &xAvlSpace);
 8001eec:	f107 030c 	add.w	r3, r7, #12
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001ef4:	f00e f9f3 	bl	80102de <FreeRTOS_get_tx_head>
 8001ef8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        //                    FreeRTOS_printf(("xSocket Available Space: %d \n", xAvlSpace));

        if (pucTCPZeroCopyStrmBuffer)
 8001efa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d027      	beq.n	8001f50 <vAuxADCTCPTask+0x178>
        {
          /* Check if there is enough space in the stream buffer to place
             the entire data. */
          if ((xTotalLengthToSend - xAlreadyTransmitted) > xAvlSpace)
 8001f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d902      	bls.n	8001f12 <vAuxADCTCPTask+0x13a>
          {
            xBytesToSend = xAvlSpace;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f10:	e003      	b.n	8001f1a <vAuxADCTCPTask+0x142>
          }
          else
          {
            xBytesToSend = (xTotalLengthToSend - xAlreadyTransmitted);
 8001f12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
          }
          memcpy(pucTCPZeroCopyStrmBuffer,
 8001f1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f1c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001f1e:	4413      	add	r3, r2
 8001f20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f22:	4619      	mov	r1, r3
 8001f24:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001f26:	f020 fe59 	bl	8022bdc <memcpy>
          break;
        }

        /* Call the FreeRTOS_send with buffer as NULL indicating to the stack
           that its a zero copy */
        xBytesSent = FreeRTOS_send(/* The socket being sent to. */
 8001f2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	2100      	movs	r1, #0
 8001f30:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001f32:	f00e fadf 	bl	80104f4 <FreeRTOS_send>
 8001f36:	6438      	str	r0, [r7, #64]	@ 0x40
                                   /* The remaining length of data to send. */
                                   xBytesToSend,
                                   /* ulFlags. */
                                   0);

        if (xBytesSent >= 0)
 8001f38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	db0a      	blt.n	8001f54 <vAuxADCTCPTask+0x17c>
        {
          /* Data was sent successfully. */
          xAlreadyTransmitted += xBytesSent;
 8001f3e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001f40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f42:	4413      	add	r3, r2
 8001f44:	657b      	str	r3, [r7, #84]	@ 0x54
      while (xAlreadyTransmitted < xTotalLengthToSend)
 8001f46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d8ca      	bhi.n	8001ee4 <vAuxADCTCPTask+0x10c>
 8001f4e:	e002      	b.n	8001f56 <vAuxADCTCPTask+0x17e>
          break;
 8001f50:	bf00      	nop
 8001f52:	e000      	b.n	8001f56 <vAuxADCTCPTask+0x17e>
        }
        else
        {
          /* Error - break out of the loop for graceful socket close. */
          break;
 8001f54:	bf00      	nop
        }
      }
    }

    /* Cleanup after each transmission */
    FreeRTOS_shutdown(xSocket, FREERTOS_SHUT_RDWR);
 8001f56:	2102      	movs	r1, #2
 8001f58:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001f5a:	f00e fb7a 	bl	8010652 <FreeRTOS_shutdown>
    while (FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0)
 8001f5e:	e002      	b.n	8001f66 <vAuxADCTCPTask+0x18e>
    {
      vTaskDelay(pdMS_TO_TICKS(1));
 8001f60:	2001      	movs	r0, #1
 8001f62:	f002 fceb 	bl	800493c <vTaskDelay>
    while (FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0)
 8001f66:	2300      	movs	r3, #0
 8001f68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001f6a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001f6c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001f6e:	f00e f921 	bl	80101b4 <FreeRTOS_recv>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	daf3      	bge.n	8001f60 <vAuxADCTCPTask+0x188>
    }
    FreeRTOS_closesocket(xSocket);
 8001f78:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001f7a:	f00c ff15 	bl	800eda8 <FreeRTOS_closesocket>
  {
 8001f7e:	e754      	b.n	8001e2a <vAuxADCTCPTask+0x52>
 8001f80:	08027ed8 	.word	0x08027ed8
 8001f84:	08024978 	.word	0x08024978
 8001f88:	30028004 	.word	0x30028004
 8001f8c:	30020004 	.word	0x30020004

08001f90 <vTCADCTCPTask>:
    //        FreeRTOS_printf(("End Mock Transmission \n"));
  }
}

static void vTCADCTCPTask(void *pvParameters)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b098      	sub	sp, #96	@ 0x60
 8001f94:	af02      	add	r7, sp, #8
 8001f96:	6078      	str	r0, [r7, #4]
  Socket_t xSocket;
  static const TickType_t xTimeOut = pdMS_TO_TICKS(500);
  struct freertos_sockaddr xRemoteAddress;
  BaseType_t xAlreadyTransmitted, xBytesSent;
  char *pcBufferToTransmit;
  const size_t xTotalLengthToSend = sizeof(usTCADCData0);
 8001f98:	2380      	movs	r3, #128	@ 0x80
 8001f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  uint32_t ulCurrBuf;

  /* Remote address setup */
  memset(&xRemoteAddress, 0, sizeof(xRemoteAddress));
 8001f9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fa0:	2218      	movs	r2, #24
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f020 ff26 	bl	8022df6 <memset>
  xRemoteAddress.sin_port = FreeRTOS_htons(usTCADCPort);
 8001faa:	f241 53b5 	movw	r3, #5557	@ 0x15b5
 8001fae:	021b      	lsls	r3, r3, #8
 8001fb0:	b21a      	sxth	r2, r3
 8001fb2:	f241 53b5 	movw	r3, #5557	@ 0x15b5
 8001fb6:	0a1b      	lsrs	r3, r3, #8
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	b21b      	sxth	r3, r3
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	b21b      	sxth	r3, r3
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	84fb      	strh	r3, [r7, #38]	@ 0x26
  xRemoteAddress.sin_address.ulIP_IPv4 = FreeRTOS_inet_addr_quick(ucServerIPAddress[0], ucServerIPAddress[1], ucServerIPAddress[2], ucServerIPAddress[3]);
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	061a      	lsls	r2, r3, #24
 8001fc8:	2301      	movs	r3, #1
 8001fca:	041b      	lsls	r3, r3, #16
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	23a8      	movs	r3, #168	@ 0xa8
 8001fd0:	021b      	lsls	r3, r3, #8
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	22c0      	movs	r2, #192	@ 0xc0
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  xRemoteAddress.sin_family = FREERTOS_AF_INET4;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  for (;;)
  {
    /* Create new socket for each transmission */
    xSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 8001fe0:	2206      	movs	r2, #6
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	2002      	movs	r0, #2
 8001fe6:	f00c fb1b 	bl	800e620 <FreeRTOS_socket>
 8001fea:	6478      	str	r0, [r7, #68]	@ 0x44
    WinProperties_t xWinProperties;

    memset(&xWinProperties, '\0', sizeof xWinProperties);
 8001fec:	f107 0310 	add.w	r3, r7, #16
 8001ff0:	2210      	movs	r2, #16
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f020 fefe 	bl	8022df6 <memset>

    xWinProperties.lTxBufSize = ipconfigIPERF_TX_BUFSIZE; /* Units of bytes. */
 8001ffa:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001ffe:	613b      	str	r3, [r7, #16]
    xWinProperties.lTxWinSize = ipconfigIPERF_TX_WINSIZE; /* Size in units of MSS */
 8002000:	230c      	movs	r3, #12
 8002002:	617b      	str	r3, [r7, #20]
    xWinProperties.lRxBufSize = ipconfigIPERF_RX_BUFSIZE; /* Units of bytes. */
 8002004:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8002008:	61bb      	str	r3, [r7, #24]
    xWinProperties.lRxWinSize = ipconfigIPERF_RX_WINSIZE; /* Size in units of MSS */
 800200a:	230c      	movs	r3, #12
 800200c:	61fb      	str	r3, [r7, #28]

    /* Set send and receive time outs. */
    FreeRTOS_setsockopt(xSocket,
 800200e:	2304      	movs	r3, #4
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	4b49      	ldr	r3, [pc, #292]	@ (8002138 <vTCADCTCPTask+0x1a8>)
 8002014:	2200      	movs	r2, #0
 8002016:	2100      	movs	r1, #0
 8002018:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800201a:	f00d fabb 	bl	800f594 <FreeRTOS_setsockopt>
                        0,
                        FREERTOS_SO_RCVTIMEO,
                        &xTimeOut,
                        sizeof(xTimeOut));

    FreeRTOS_setsockopt(xSocket,
 800201e:	2304      	movs	r3, #4
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	4b45      	ldr	r3, [pc, #276]	@ (8002138 <vTCADCTCPTask+0x1a8>)
 8002024:	2201      	movs	r2, #1
 8002026:	2100      	movs	r1, #0
 8002028:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800202a:	f00d fab3 	bl	800f594 <FreeRTOS_setsockopt>
                        0,
                        FREERTOS_SO_SNDTIMEO,
                        &xTimeOut,
                        sizeof(xTimeOut));

    FreeRTOS_setsockopt(xSocket, 0, FREERTOS_SO_WIN_PROPERTIES, (void *)&xWinProperties, sizeof(xWinProperties));
 800202e:	f107 0310 	add.w	r3, r7, #16
 8002032:	2210      	movs	r2, #16
 8002034:	9200      	str	r2, [sp, #0]
 8002036:	220d      	movs	r2, #13
 8002038:	2100      	movs	r1, #0
 800203a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800203c:	f00d faaa 	bl	800f594 <FreeRTOS_setsockopt>

    configASSERT(xSocket != FREERTOS_INVALID_SOCKET);
 8002040:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002046:	d104      	bne.n	8002052 <vTCADCTCPTask+0xc2>
 8002048:	f240 7179 	movw	r1, #1913	@ 0x779
 800204c:	483b      	ldr	r0, [pc, #236]	@ (800213c <vTCADCTCPTask+0x1ac>)
 800204e:	f7ff fcdb 	bl	8001a08 <vAssertCalled>
    /* Block indefinitely (without a timeout, so no need to check the function's
 return value) to wait for a notification. NOTE! Real applications
 should not block indefinitely, but instead time out occasionally in order
 to handle error conditions that may prevent the interrupt from sending
 any more notifications. */
    xTaskNotifyWait(0x00,           /* Don't clear any bits on entry. */
 8002052:	f107 0320 	add.w	r3, r7, #32
 8002056:	f04f 32ff 	mov.w	r2, #4294967295
 800205a:	9200      	str	r2, [sp, #0]
 800205c:	f04f 32ff 	mov.w	r2, #4294967295
 8002060:	2100      	movs	r1, #0
 8002062:	2000      	movs	r0, #0
 8002064:	f003 fdf4 	bl	8005c50 <xTaskGenericNotifyWait>
                    0xffffffff,     /* Clear all bits on exit. */
                    &ulCurrBuf,     /* Receives the notification value. */
                    portMAX_DELAY); /* Block indefinitely. */
    if ((ulCurrBuf & 1) != 0)
 8002068:	6a3b      	ldr	r3, [r7, #32]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <vTCADCTCPTask+0xe8>
    {
      pcBufferToTransmit = usTCADCData1;
 8002072:	4b33      	ldr	r3, [pc, #204]	@ (8002140 <vTCADCTCPTask+0x1b0>)
 8002074:	653b      	str	r3, [r7, #80]	@ 0x50
 8002076:	e001      	b.n	800207c <vTCADCTCPTask+0xec>
    }
    else
    {
      pcBufferToTransmit = usTCADCData0;
 8002078:	4b32      	ldr	r3, [pc, #200]	@ (8002144 <vTCADCTCPTask+0x1b4>)
 800207a:	653b      	str	r3, [r7, #80]	@ 0x50
    }
    //        HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
    xAlreadyTransmitted = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	657b      	str	r3, [r7, #84]	@ 0x54
    xBytesSent = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	643b      	str	r3, [r7, #64]	@ 0x40
    //        FreeRTOS_printf(("Start Mock Transmission \n"));

    if (FreeRTOS_connect(xSocket, &xRemoteAddress, sizeof(xRemoteAddress)) == 0)
 8002084:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002088:	2218      	movs	r2, #24
 800208a:	4619      	mov	r1, r3
 800208c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800208e:	f00d fe1f 	bl	800fcd0 <FreeRTOS_connect>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d139      	bne.n	800210c <vTCADCTCPTask+0x17c>
    {
      while (xAlreadyTransmitted < xTotalLengthToSend)
 8002098:	e030      	b.n	80020fc <vTCADCTCPTask+0x16c>
      {
        BaseType_t xAvlSpace = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
        BaseType_t xBytesToSend = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
           buffer that is passed into, rather than copied into, the FreeRTOS_send()
           function. */

        /* Obtain the pointer to the current head of sockets TX stream buffer
           using FreeRTOS_get_tx_head */
        pucTCPZeroCopyStrmBuffer = FreeRTOS_get_tx_head(xSocket, &xAvlSpace);
 80020a2:	f107 030c 	add.w	r3, r7, #12
 80020a6:	4619      	mov	r1, r3
 80020a8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80020aa:	f00e f918 	bl	80102de <FreeRTOS_get_tx_head>
 80020ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        //                    FreeRTOS_printf(("xSocket Available Space: %d \n", xAvlSpace));

        if (pucTCPZeroCopyStrmBuffer)
 80020b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d027      	beq.n	8002106 <vTCADCTCPTask+0x176>
        {
          /* Check if there is enough space in the stream buffer to place
             the entire data. */
          if ((xTotalLengthToSend - xAlreadyTransmitted) > xAvlSpace)
 80020b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4293      	cmp	r3, r2
 80020c0:	d902      	bls.n	80020c8 <vTCADCTCPTask+0x138>
          {
            xBytesToSend = xAvlSpace;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020c6:	e003      	b.n	80020d0 <vTCADCTCPTask+0x140>
          }
          else
          {
            xBytesToSend = (xTotalLengthToSend - xAlreadyTransmitted);
 80020c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
          }
          memcpy(pucTCPZeroCopyStrmBuffer,
 80020d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80020d4:	4413      	add	r3, r2
 80020d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80020d8:	4619      	mov	r1, r3
 80020da:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80020dc:	f020 fd7e 	bl	8022bdc <memcpy>
          break;
        }

        /* Call the FreeRTOS_send with buffer as NULL indicating to the stack
           that its a zero copy */
        xBytesSent = FreeRTOS_send(/* The socket being sent to. */
 80020e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80020e2:	2300      	movs	r3, #0
 80020e4:	2100      	movs	r1, #0
 80020e6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80020e8:	f00e fa04 	bl	80104f4 <FreeRTOS_send>
 80020ec:	6438      	str	r0, [r7, #64]	@ 0x40
                                   /* The remaining length of data to send. */
                                   xBytesToSend,
                                   /* ulFlags. */
                                   0);

        if (xBytesSent >= 0)
 80020ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	db0a      	blt.n	800210a <vTCADCTCPTask+0x17a>
        {
          /* Data was sent successfully. */
          xAlreadyTransmitted += xBytesSent;
 80020f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80020f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020f8:	4413      	add	r3, r2
 80020fa:	657b      	str	r3, [r7, #84]	@ 0x54
      while (xAlreadyTransmitted < xTotalLengthToSend)
 80020fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002100:	429a      	cmp	r2, r3
 8002102:	d8ca      	bhi.n	800209a <vTCADCTCPTask+0x10a>
 8002104:	e002      	b.n	800210c <vTCADCTCPTask+0x17c>
          break;
 8002106:	bf00      	nop
 8002108:	e000      	b.n	800210c <vTCADCTCPTask+0x17c>
        }
        else
        {
          /* Error - break out of the loop for graceful socket close. */
          break;
 800210a:	bf00      	nop
        }
      }
    }

    /* Cleanup after each transmission */
    FreeRTOS_shutdown(xSocket, FREERTOS_SHUT_RDWR);
 800210c:	2102      	movs	r1, #2
 800210e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002110:	f00e fa9f 	bl	8010652 <FreeRTOS_shutdown>
    while (FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0)
 8002114:	e002      	b.n	800211c <vTCADCTCPTask+0x18c>
    {
      vTaskDelay(pdMS_TO_TICKS(1));
 8002116:	2001      	movs	r0, #1
 8002118:	f002 fc10 	bl	800493c <vTaskDelay>
    while (FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0)
 800211c:	2300      	movs	r3, #0
 800211e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002120:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002122:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002124:	f00e f846 	bl	80101b4 <FreeRTOS_recv>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	daf3      	bge.n	8002116 <vTCADCTCPTask+0x186>
    }
    FreeRTOS_closesocket(xSocket);
 800212e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002130:	f00c fe3a 	bl	800eda8 <FreeRTOS_closesocket>
  {
 8002134:	e754      	b.n	8001fe0 <vTCADCTCPTask+0x50>
 8002136:	bf00      	nop
 8002138:	08027edc 	.word	0x08027edc
 800213c:	08024978 	.word	0x08024978
 8002140:	30030088 	.word	0x30030088
 8002144:	30030008 	.word	0x30030008

08002148 <vCommandServerTask>:
    //        FreeRTOS_printf(("End Mock Transmission \n"));
  }
}

void vCommandServerTask(void *pvParameters)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b094      	sub	sp, #80	@ 0x50
 800214c:	af02      	add	r7, sp, #8
 800214e:	6078      	str	r0, [r7, #4]
  struct freertos_sockaddr xClient, xBindAddress;
  Socket_t xListeningSocket, xConnectedSocket;
  socklen_t xSize = sizeof(xClient);
 8002150:	2318      	movs	r3, #24
 8002152:	60bb      	str	r3, [r7, #8]
  static const TickType_t xReceiveTimeOut = pdMS_TO_TICKS(500);
  const BaseType_t xBacklog = 20;
 8002154:	2314      	movs	r3, #20
 8002156:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Attempt to open the socket. */
  xListeningSocket = FreeRTOS_socket(FREERTOS_AF_INET4,    /* Or FREERTOS_AF_INET6 for IPv6. */
 8002158:	2206      	movs	r2, #6
 800215a:	2101      	movs	r1, #1
 800215c:	2002      	movs	r0, #2
 800215e:	f00c fa5f 	bl	800e620 <FreeRTOS_socket>
 8002162:	6438      	str	r0, [r7, #64]	@ 0x40
                                     FREERTOS_SOCK_STREAM, /* SOCK_STREAM for TCP. */
                                     FREERTOS_IPPROTO_TCP);

  /* Check the socket was created. */
  configASSERT(xListeningSocket != FREERTOS_INVALID_SOCKET);
 8002164:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216a:	d104      	bne.n	8002176 <vCommandServerTask+0x2e>
 800216c:	f240 71ea 	movw	r1, #2026	@ 0x7ea
 8002170:	4825      	ldr	r0, [pc, #148]	@ (8002208 <vCommandServerTask+0xc0>)
 8002172:	f7ff fc49 	bl	8001a08 <vAssertCalled>
be used with FreeRTOS_setsockopt() to change the sliding window size from
its default then do it here! (see the FreeRTOS_setsockopt()
documentation. */

  /* Set a time out so accept() will just wait for a connection. */
  FreeRTOS_setsockopt(xListeningSocket,
 8002176:	2304      	movs	r3, #4
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	4b24      	ldr	r3, [pc, #144]	@ (800220c <vCommandServerTask+0xc4>)
 800217c:	2200      	movs	r2, #0
 800217e:	2100      	movs	r1, #0
 8002180:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002182:	f00d fa07 	bl	800f594 <FreeRTOS_setsockopt>
                      FREERTOS_SO_RCVTIMEO,
                      &xReceiveTimeOut,
                      sizeof(xReceiveTimeOut));

  /* Set the listening port to 10000. */
  memset(&xBindAddress, 0, sizeof(xBindAddress));
 8002186:	f107 030c 	add.w	r3, r7, #12
 800218a:	2218      	movs	r2, #24
 800218c:	2100      	movs	r1, #0
 800218e:	4618      	mov	r0, r3
 8002190:	f020 fe31 	bl	8022df6 <memset>
  xBindAddress.sin_port = usCommandPort;
 8002194:	f241 3389 	movw	r3, #5001	@ 0x1389
 8002198:	81fb      	strh	r3, [r7, #14]
  xBindAddress.sin_port = FreeRTOS_htons(xBindAddress.sin_port);
 800219a:	89fb      	ldrh	r3, [r7, #14]
 800219c:	021b      	lsls	r3, r3, #8
 800219e:	b21a      	sxth	r2, r3
 80021a0:	89fb      	ldrh	r3, [r7, #14]
 80021a2:	0a1b      	lsrs	r3, r3, #8
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	b21b      	sxth	r3, r3
 80021a8:	4313      	orrs	r3, r2
 80021aa:	b21b      	sxth	r3, r3
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	81fb      	strh	r3, [r7, #14]
  xBindAddress.sin_family = FREERTOS_AF_INET4; /* FREERTOS_AF_INET6 to be used for IPv6 */
 80021b0:	2302      	movs	r3, #2
 80021b2:	737b      	strb	r3, [r7, #13]

  /* Bind the socket to the port that the client RTOS task will send to. */
  FreeRTOS_bind(xListeningSocket, &xBindAddress, sizeof(xBindAddress));
 80021b4:	f107 030c 	add.w	r3, r7, #12
 80021b8:	2218      	movs	r2, #24
 80021ba:	4619      	mov	r1, r3
 80021bc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80021be:	f00c fc1f 	bl	800ea00 <FreeRTOS_bind>

  /* Set the socket into a listening state so it can accept connections.
The maximum number of simultaneous connections is limited to 20. */
  FreeRTOS_listen(xListeningSocket, xBacklog);
 80021c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80021c4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80021c6:	f00e f9d3 	bl	8010570 <FreeRTOS_listen>

  for (;;)
  {
    /* Wait for incoming connections. */
    xConnectedSocket = FreeRTOS_accept(xListeningSocket, &xClient, &xSize);
 80021ca:	f107 0208 	add.w	r2, r7, #8
 80021ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021d2:	4619      	mov	r1, r3
 80021d4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80021d6:	f00d fe9d 	bl	800ff14 <FreeRTOS_accept>
 80021da:	63f8      	str	r0, [r7, #60]	@ 0x3c
    configASSERT(xConnectedSocket != FREERTOS_INVALID_SOCKET);
 80021dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e2:	d104      	bne.n	80021ee <vCommandServerTask+0xa6>
 80021e4:	f640 010d 	movw	r1, #2061	@ 0x80d
 80021e8:	4807      	ldr	r0, [pc, #28]	@ (8002208 <vCommandServerTask+0xc0>)
 80021ea:	f7ff fc0d 	bl	8001a08 <vAssertCalled>

    /* Spawn a RTOS task to handle the connection. */
    xTaskCreate(prvCommandHandlerTask,
 80021ee:	2300      	movs	r3, #0
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	2300      	movs	r3, #0
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021f8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80021fc:	4904      	ldr	r1, [pc, #16]	@ (8002210 <vCommandServerTask+0xc8>)
 80021fe:	4805      	ldr	r0, [pc, #20]	@ (8002214 <vCommandServerTask+0xcc>)
 8002200:	f002 f9be 	bl	8004580 <xTaskCreate>
    xConnectedSocket = FreeRTOS_accept(xListeningSocket, &xClient, &xSize);
 8002204:	e7e1      	b.n	80021ca <vCommandServerTask+0x82>
 8002206:	bf00      	nop
 8002208:	08024978 	.word	0x08024978
 800220c:	08027ee0 	.word	0x08027ee0
 8002210:	08024a00 	.word	0x08024a00
 8002214:	08002219 	.word	0x08002219

08002218 <prvCommandHandlerTask>:
                NULL);
  }
}

static void prvCommandHandlerTask(void *pvParameters)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  static char cRxedData[CMD_BUFFER_SIZE];
  BaseType_t lBytesReceived;

  /* It is assumed the socket has already been created and connected before
being passed into this RTOS task using the RTOS task's parameter. */
  xSocket = (Socket_t)pvParameters;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	60fb      	str	r3, [r7, #12]

  for (;;)
  {
    /* Receive another block of data into the cRxedData buffer. */
    lBytesReceived = FreeRTOS_recv(xSocket, &cRxedData, CMD_BUFFER_SIZE, 0);
 8002224:	2300      	movs	r3, #0
 8002226:	2280      	movs	r2, #128	@ 0x80
 8002228:	4949      	ldr	r1, [pc, #292]	@ (8002350 <prvCommandHandlerTask+0x138>)
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f00d ffc2 	bl	80101b4 <FreeRTOS_recv>
 8002230:	60b8      	str	r0, [r7, #8]

    if (lBytesReceived > 0)
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	dd6b      	ble.n	8002310 <prvCommandHandlerTask+0xf8>
    {
      /* Data was received, process it here. */
      // prvProcessData( cRxedData, lBytesReceived );
      cRxedData[lBytesReceived] = 0; // ensure null terminated string
 8002238:	4a45      	ldr	r2, [pc, #276]	@ (8002350 <prvCommandHandlerTask+0x138>)
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	4413      	add	r3, r2
 800223e:	2200      	movs	r2, #0
 8002240:	701a      	strb	r2, [r3, #0]
      if (strncmp(cRxedData, "INIT", 4) == 0)
 8002242:	2204      	movs	r2, #4
 8002244:	4943      	ldr	r1, [pc, #268]	@ (8002354 <prvCommandHandlerTask+0x13c>)
 8002246:	4842      	ldr	r0, [pc, #264]	@ (8002350 <prvCommandHandlerTask+0x138>)
 8002248:	f021 fca2 	bl	8023b90 <strncmp>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d116      	bne.n	8002280 <prvCommandHandlerTask+0x68>
      {
        FreeRTOS_printf(("Received Init Command\n"));
 8002252:	4841      	ldr	r0, [pc, #260]	@ (8002358 <prvCommandHandlerTask+0x140>)
 8002254:	f020 faa6 	bl	80227a4 <lUDPLoggingPrintf>
        HAL_GPIO_WritePin(DUT_GATE_SEL_GPIO_Port, DUT_GATE_SEL_Pin, GPIO_PIN_SET);
 8002258:	2201      	movs	r2, #1
 800225a:	2120      	movs	r1, #32
 800225c:	483f      	ldr	r0, [pc, #252]	@ (800235c <prvCommandHandlerTask+0x144>)
 800225e:	f01a fd21 	bl	801cca4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DUT_HVDC_ENABLE_GPIO_Port, DUT_HVDC_ENABLE_Pin, GPIO_PIN_RESET);
 8002262:	2200      	movs	r2, #0
 8002264:	2104      	movs	r1, #4
 8002266:	483d      	ldr	r0, [pc, #244]	@ (800235c <prvCommandHandlerTask+0x144>)
 8002268:	f01a fd1c 	bl	801cca4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DUT_VICTRL_SEL_GPIO_Port, DUT_VICTRL_SEL_Pin, GPIO_PIN_SET);
 800226c:	2201      	movs	r2, #1
 800226e:	2110      	movs	r1, #16
 8002270:	483a      	ldr	r0, [pc, #232]	@ (800235c <prvCommandHandlerTask+0x144>)
 8002272:	f01a fd17 	bl	801cca4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DUT_VGS_IDLE_SEL_GPIO_Port, DUT_VGS_IDLE_SEL_Pin, GPIO_PIN_RESET);
 8002276:	2200      	movs	r2, #0
 8002278:	2108      	movs	r1, #8
 800227a:	4838      	ldr	r0, [pc, #224]	@ (800235c <prvCommandHandlerTask+0x144>)
 800227c:	f01a fd12 	bl	801cca4 <HAL_GPIO_WritePin>
      }
      if (strncmp(cRxedData, "STOP", 4) == 0)
 8002280:	2204      	movs	r2, #4
 8002282:	4937      	ldr	r1, [pc, #220]	@ (8002360 <prvCommandHandlerTask+0x148>)
 8002284:	4832      	ldr	r0, [pc, #200]	@ (8002350 <prvCommandHandlerTask+0x138>)
 8002286:	f021 fc83 	bl	8023b90 <strncmp>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d116      	bne.n	80022be <prvCommandHandlerTask+0xa6>
      {
        FreeRTOS_printf(("Received Stop Command\n"));
 8002290:	4834      	ldr	r0, [pc, #208]	@ (8002364 <prvCommandHandlerTask+0x14c>)
 8002292:	f020 fa87 	bl	80227a4 <lUDPLoggingPrintf>
        HAL_GPIO_WritePin(DUT_GATE_SEL_GPIO_Port, DUT_GATE_SEL_Pin, GPIO_PIN_SET);
 8002296:	2201      	movs	r2, #1
 8002298:	2120      	movs	r1, #32
 800229a:	4830      	ldr	r0, [pc, #192]	@ (800235c <prvCommandHandlerTask+0x144>)
 800229c:	f01a fd02 	bl	801cca4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DUT_HVDC_ENABLE_GPIO_Port, DUT_HVDC_ENABLE_Pin, GPIO_PIN_RESET);
 80022a0:	2200      	movs	r2, #0
 80022a2:	2104      	movs	r1, #4
 80022a4:	482d      	ldr	r0, [pc, #180]	@ (800235c <prvCommandHandlerTask+0x144>)
 80022a6:	f01a fcfd 	bl	801cca4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DUT_VICTRL_SEL_GPIO_Port, DUT_VICTRL_SEL_Pin, GPIO_PIN_SET);
 80022aa:	2201      	movs	r2, #1
 80022ac:	2110      	movs	r1, #16
 80022ae:	482b      	ldr	r0, [pc, #172]	@ (800235c <prvCommandHandlerTask+0x144>)
 80022b0:	f01a fcf8 	bl	801cca4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DUT_VGS_IDLE_SEL_GPIO_Port, DUT_VGS_IDLE_SEL_Pin, GPIO_PIN_RESET);
 80022b4:	2200      	movs	r2, #0
 80022b6:	2108      	movs	r1, #8
 80022b8:	4828      	ldr	r0, [pc, #160]	@ (800235c <prvCommandHandlerTask+0x144>)
 80022ba:	f01a fcf3 	bl	801cca4 <HAL_GPIO_WritePin>
      }
      if (strncmp(cRxedData, "HEAT", 4) == 0)
 80022be:	2204      	movs	r2, #4
 80022c0:	4929      	ldr	r1, [pc, #164]	@ (8002368 <prvCommandHandlerTask+0x150>)
 80022c2:	4823      	ldr	r0, [pc, #140]	@ (8002350 <prvCommandHandlerTask+0x138>)
 80022c4:	f021 fc64 	bl	8023b90 <strncmp>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10b      	bne.n	80022e6 <prvCommandHandlerTask+0xce>
      {
        FreeRTOS_printf(("Received Heat Command\n"));
 80022ce:	4827      	ldr	r0, [pc, #156]	@ (800236c <prvCommandHandlerTask+0x154>)
 80022d0:	f020 fa68 	bl	80227a4 <lUDPLoggingPrintf>
        GPIOE->BSRR = DUT_GATE_SEL_Pin << 16 | DUT_VICTRL_SEL_Pin << 16 | DUT_HVDC_ENABLE_Pin;
 80022d4:	4b21      	ldr	r3, [pc, #132]	@ (800235c <prvCommandHandlerTask+0x144>)
 80022d6:	4a26      	ldr	r2, [pc, #152]	@ (8002370 <prvCommandHandlerTask+0x158>)
 80022d8:	619a      	str	r2, [r3, #24]
        ulSevenSegD1 |= 1 << 5; // turn first digit DP on
 80022da:	4b26      	ldr	r3, [pc, #152]	@ (8002374 <prvCommandHandlerTask+0x15c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f043 0320 	orr.w	r3, r3, #32
 80022e2:	4a24      	ldr	r2, [pc, #144]	@ (8002374 <prvCommandHandlerTask+0x15c>)
 80022e4:	6013      	str	r3, [r2, #0]
      }
      if (strncmp(cRxedData, "COOL", 4) == 0)
 80022e6:	2204      	movs	r2, #4
 80022e8:	4923      	ldr	r1, [pc, #140]	@ (8002378 <prvCommandHandlerTask+0x160>)
 80022ea:	4819      	ldr	r0, [pc, #100]	@ (8002350 <prvCommandHandlerTask+0x138>)
 80022ec:	f021 fc50 	bl	8023b90 <strncmp>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d196      	bne.n	8002224 <prvCommandHandlerTask+0xc>
      {
        FreeRTOS_printf(("Received Cool Command\n"));
 80022f6:	4821      	ldr	r0, [pc, #132]	@ (800237c <prvCommandHandlerTask+0x164>)
 80022f8:	f020 fa54 	bl	80227a4 <lUDPLoggingPrintf>
        GPIOE->BSRR = DUT_GATE_SEL_Pin | DUT_VICTRL_SEL_Pin | DUT_HVDC_ENABLE_Pin << 16;
 80022fc:	4b17      	ldr	r3, [pc, #92]	@ (800235c <prvCommandHandlerTask+0x144>)
 80022fe:	4a20      	ldr	r2, [pc, #128]	@ (8002380 <prvCommandHandlerTask+0x168>)
 8002300:	619a      	str	r2, [r3, #24]
        ulSevenSegD1 &= ~(1 << 5); // turn first digit DP off
 8002302:	4b1c      	ldr	r3, [pc, #112]	@ (8002374 <prvCommandHandlerTask+0x15c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 0320 	bic.w	r3, r3, #32
 800230a:	4a1a      	ldr	r2, [pc, #104]	@ (8002374 <prvCommandHandlerTask+0x15c>)
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e789      	b.n	8002224 <prvCommandHandlerTask+0xc>
      }
    }
    else if (lBytesReceived == 0)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d086      	beq.n	8002224 <prvCommandHandlerTask+0xc>
    }
    else
    {
      /* Error (maybe the connected socket already shut down the socket?).
   Attempt graceful shutdown. */
      FreeRTOS_shutdown(xSocket, FREERTOS_SHUT_RDWR);
 8002316:	2102      	movs	r1, #2
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f00e f99a 	bl	8010652 <FreeRTOS_shutdown>
      break;
 800231e:	bf00      	nop

  /* The RTOS task will get here if an error is received on a read. Ensure the
socket has shut down (indicated by FreeRTOS\_recv() returning a -pdFREERTOS\_ERRNO\_EINVAL
error before closing the socket). */

  while (FreeRTOS_recv(xSocket, &usZero, 1, 0) >= 0)
 8002320:	e002      	b.n	8002328 <prvCommandHandlerTask+0x110>
  {
    /* Wait for shutdown to complete. If a receive block time is used then
       this delay will not be necessary as FreeRTOS\_recv() will place the RTOS task
       into the Blocked state anyway. */
    vTaskDelay(pdTICKS_TO_MS(1));
 8002322:	2001      	movs	r0, #1
 8002324:	f002 fb0a 	bl	800493c <vTaskDelay>
  while (FreeRTOS_recv(xSocket, &usZero, 1, 0) >= 0)
 8002328:	2300      	movs	r3, #0
 800232a:	2201      	movs	r2, #1
 800232c:	4915      	ldr	r1, [pc, #84]	@ (8002384 <prvCommandHandlerTask+0x16c>)
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f00d ff40 	bl	80101b4 <FreeRTOS_recv>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	daf3      	bge.n	8002322 <prvCommandHandlerTask+0x10a>
    /* Note - real applications should implement a timeout here, not just
       loop forever. */
  }

  /* Shutdown is complete and the socket can be safely closed. */
  FreeRTOS_closesocket(xSocket);
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f00c fd34 	bl	800eda8 <FreeRTOS_closesocket>

  /* Must not drop off the end of the RTOS task - delete the RTOS task. */
  vTaskDelete(NULL);
 8002340:	2000      	movs	r0, #0
 8002342:	f002 fa5d 	bl	8004800 <vTaskDelete>
}
 8002346:	bf00      	nop
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000d48 	.word	0x20000d48
 8002354:	08024a10 	.word	0x08024a10
 8002358:	08024a18 	.word	0x08024a18
 800235c:	58021000 	.word	0x58021000
 8002360:	08024a30 	.word	0x08024a30
 8002364:	08024a38 	.word	0x08024a38
 8002368:	08024a50 	.word	0x08024a50
 800236c:	08024a58 	.word	0x08024a58
 8002370:	00300004 	.word	0x00300004
 8002374:	30030108 	.word	0x30030108
 8002378:	08024a70 	.word	0x08024a70
 800237c:	08024a78 	.word	0x08024a78
 8002380:	00040030 	.word	0x00040030
 8002384:	30000000 	.word	0x30000000

08002388 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800238e:	463b      	mov	r3, r7
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800239a:	f018 fb53 	bl	801aa44 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800239e:	2301      	movs	r3, #1
 80023a0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 80023a6:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 80023aa:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80023ac:	2312      	movs	r3, #18
 80023ae:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80023b4:	2301      	movs	r3, #1
 80023b6:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80023b8:	2303      	movs	r3, #3
 80023ba:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80023bc:	2300      	movs	r3, #0
 80023be:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80023c0:	2301      	movs	r3, #1
 80023c2:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80023c4:	2300      	movs	r3, #0
 80023c6:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80023c8:	2300      	movs	r3, #0
 80023ca:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80023cc:	463b      	mov	r3, r7
 80023ce:	4618      	mov	r0, r3
 80023d0:	f018 fb70 	bl	801aab4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80023d4:	2301      	movs	r3, #1
 80023d6:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 80023d8:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80023dc:	607b      	str	r3, [r7, #4]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80023de:	463b      	mov	r3, r7
 80023e0:	4618      	mov	r0, r3
 80023e2:	f018 fb67 	bl	801aab4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80023e6:	2004      	movs	r0, #4
 80023e8:	f018 fb44 	bl	801aa74 <HAL_MPU_Enable>
}
 80023ec:	bf00      	nop
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80023f8:	b672      	cpsid	i
}
 80023fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023fc:	bf00      	nop
 80023fe:	e7fd      	b.n	80023fc <Error_Handler+0x8>

08002400 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002406:	4b0a      	ldr	r3, [pc, #40]	@ (8002430 <HAL_MspInit+0x30>)
 8002408:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800240c:	4a08      	ldr	r2, [pc, #32]	@ (8002430 <HAL_MspInit+0x30>)
 800240e:	f043 0302 	orr.w	r3, r3, #2
 8002412:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002416:	4b06      	ldr	r3, [pc, #24]	@ (8002430 <HAL_MspInit+0x30>)
 8002418:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	607b      	str	r3, [r7, #4]
 8002422:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	58024400 	.word	0x58024400

08002434 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08e      	sub	sp, #56	@ 0x38
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a61      	ldr	r2, [pc, #388]	@ (80025d8 <HAL_ETH_MspInit+0x1a4>)
 8002452:	4293      	cmp	r3, r2
 8002454:	f040 80bb 	bne.w	80025ce <HAL_ETH_MspInit+0x19a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8002458:	4b60      	ldr	r3, [pc, #384]	@ (80025dc <HAL_ETH_MspInit+0x1a8>)
 800245a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800245e:	4a5f      	ldr	r2, [pc, #380]	@ (80025dc <HAL_ETH_MspInit+0x1a8>)
 8002460:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002464:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002468:	4b5c      	ldr	r3, [pc, #368]	@ (80025dc <HAL_ETH_MspInit+0x1a8>)
 800246a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800246e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002472:	623b      	str	r3, [r7, #32]
 8002474:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8002476:	4b59      	ldr	r3, [pc, #356]	@ (80025dc <HAL_ETH_MspInit+0x1a8>)
 8002478:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800247c:	4a57      	ldr	r2, [pc, #348]	@ (80025dc <HAL_ETH_MspInit+0x1a8>)
 800247e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002482:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002486:	4b55      	ldr	r3, [pc, #340]	@ (80025dc <HAL_ETH_MspInit+0x1a8>)
 8002488:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800248c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002490:	61fb      	str	r3, [r7, #28]
 8002492:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002494:	4b51      	ldr	r3, [pc, #324]	@ (80025dc <HAL_ETH_MspInit+0x1a8>)
 8002496:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800249a:	4a50      	ldr	r2, [pc, #320]	@ (80025dc <HAL_ETH_MspInit+0x1a8>)
 800249c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024a0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80024a4:	4b4d      	ldr	r3, [pc, #308]	@ (80025dc <HAL_ETH_MspInit+0x1a8>)
 80024a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80024aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ae:	61bb      	str	r3, [r7, #24]
 80024b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024b2:	4b4a      	ldr	r3, [pc, #296]	@ (80025dc <HAL_ETH_MspInit+0x1a8>)
 80024b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024b8:	4a48      	ldr	r2, [pc, #288]	@ (80025dc <HAL_ETH_MspInit+0x1a8>)
 80024ba:	f043 0304 	orr.w	r3, r3, #4
 80024be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024c2:	4b46      	ldr	r3, [pc, #280]	@ (80025dc <HAL_ETH_MspInit+0x1a8>)
 80024c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	617b      	str	r3, [r7, #20]
 80024ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d0:	4b42      	ldr	r3, [pc, #264]	@ (80025dc <HAL_ETH_MspInit+0x1a8>)
 80024d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024d6:	4a41      	ldr	r2, [pc, #260]	@ (80025dc <HAL_ETH_MspInit+0x1a8>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024e0:	4b3e      	ldr	r3, [pc, #248]	@ (80025dc <HAL_ETH_MspInit+0x1a8>)
 80024e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ee:	4b3b      	ldr	r3, [pc, #236]	@ (80025dc <HAL_ETH_MspInit+0x1a8>)
 80024f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024f4:	4a39      	ldr	r2, [pc, #228]	@ (80025dc <HAL_ETH_MspInit+0x1a8>)
 80024f6:	f043 0302 	orr.w	r3, r3, #2
 80024fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024fe:	4b37      	ldr	r3, [pc, #220]	@ (80025dc <HAL_ETH_MspInit+0x1a8>)
 8002500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800250c:	2302      	movs	r3, #2
 800250e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002510:	2302      	movs	r3, #2
 8002512:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002518:	2303      	movs	r3, #3
 800251a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800251c:	230b      	movs	r3, #11
 800251e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002520:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002524:	4619      	mov	r1, r3
 8002526:	482e      	ldr	r0, [pc, #184]	@ (80025e0 <HAL_ETH_MspInit+0x1ac>)
 8002528:	f01a fa0c 	bl	801c944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800252c:	2306      	movs	r3, #6
 800252e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002530:	2302      	movs	r3, #2
 8002532:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002538:	2303      	movs	r3, #3
 800253a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800253c:	230b      	movs	r3, #11
 800253e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002540:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002544:	4619      	mov	r1, r3
 8002546:	4827      	ldr	r0, [pc, #156]	@ (80025e4 <HAL_ETH_MspInit+0x1b0>)
 8002548:	f01a f9fc 	bl	801c944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800254c:	2380      	movs	r3, #128	@ 0x80
 800254e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002550:	2302      	movs	r3, #2
 8002552:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002558:	2300      	movs	r3, #0
 800255a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800255c:	230b      	movs	r3, #11
 800255e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002560:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002564:	4619      	mov	r1, r3
 8002566:	481f      	ldr	r0, [pc, #124]	@ (80025e4 <HAL_ETH_MspInit+0x1b0>)
 8002568:	f01a f9ec 	bl	801c944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800256c:	2330      	movs	r3, #48	@ 0x30
 800256e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002570:	2302      	movs	r3, #2
 8002572:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002574:	2300      	movs	r3, #0
 8002576:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002578:	2300      	movs	r3, #0
 800257a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800257c:	230b      	movs	r3, #11
 800257e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002580:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002584:	4619      	mov	r1, r3
 8002586:	4816      	ldr	r0, [pc, #88]	@ (80025e0 <HAL_ETH_MspInit+0x1ac>)
 8002588:	f01a f9dc 	bl	801c944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800258c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002590:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002592:	2302      	movs	r3, #2
 8002594:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259a:	2303      	movs	r3, #3
 800259c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800259e:	230b      	movs	r3, #11
 80025a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025a6:	4619      	mov	r1, r3
 80025a8:	480f      	ldr	r0, [pc, #60]	@ (80025e8 <HAL_ETH_MspInit+0x1b4>)
 80025aa:	f01a f9cb 	bl	801c944 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80025ae:	2200      	movs	r2, #0
 80025b0:	2105      	movs	r1, #5
 80025b2:	203d      	movs	r0, #61	@ 0x3d
 80025b4:	f018 fa11 	bl	801a9da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80025b8:	203d      	movs	r0, #61	@ 0x3d
 80025ba:	f018 fa28 	bl	801aa0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 80025be:	2200      	movs	r2, #0
 80025c0:	2105      	movs	r1, #5
 80025c2:	203e      	movs	r0, #62	@ 0x3e
 80025c4:	f018 fa09 	bl	801a9da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 80025c8:	203e      	movs	r0, #62	@ 0x3e
 80025ca:	f018 fa20 	bl	801aa0e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 80025ce:	bf00      	nop
 80025d0:	3738      	adds	r7, #56	@ 0x38
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40028000 	.word	0x40028000
 80025dc:	58024400 	.word	0x58024400
 80025e0:	58020800 	.word	0x58020800
 80025e4:	58020000 	.word	0x58020000
 80025e8:	58020400 	.word	0x58020400

080025ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b0ba      	sub	sp, #232	@ 0xe8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002604:	f107 0310 	add.w	r3, r7, #16
 8002608:	22c0      	movs	r2, #192	@ 0xc0
 800260a:	2100      	movs	r1, #0
 800260c:	4618      	mov	r0, r3
 800260e:	f020 fbf2 	bl	8022df6 <memset>
  if(hi2c->Instance==I2C4)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a27      	ldr	r2, [pc, #156]	@ (80026b4 <HAL_I2C_MspInit+0xc8>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d146      	bne.n	80026aa <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800261c:	f04f 0210 	mov.w	r2, #16
 8002620:	f04f 0300 	mov.w	r3, #0
 8002624:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8002628:	2300      	movs	r3, #0
 800262a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800262e:	f107 0310 	add.w	r3, r7, #16
 8002632:	4618      	mov	r0, r3
 8002634:	f01b fca4 	bl	801df80 <HAL_RCCEx_PeriphCLKConfig>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800263e:	f7ff fed9 	bl	80023f4 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002642:	4b1d      	ldr	r3, [pc, #116]	@ (80026b8 <HAL_I2C_MspInit+0xcc>)
 8002644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002648:	4a1b      	ldr	r2, [pc, #108]	@ (80026b8 <HAL_I2C_MspInit+0xcc>)
 800264a:	f043 0308 	orr.w	r3, r3, #8
 800264e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002652:	4b19      	ldr	r3, [pc, #100]	@ (80026b8 <HAL_I2C_MspInit+0xcc>)
 8002654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002660:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002664:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002668:	2312      	movs	r3, #18
 800266a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002674:	2300      	movs	r3, #0
 8002676:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800267a:	2304      	movs	r3, #4
 800267c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002680:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002684:	4619      	mov	r1, r3
 8002686:	480d      	ldr	r0, [pc, #52]	@ (80026bc <HAL_I2C_MspInit+0xd0>)
 8002688:	f01a f95c 	bl	801c944 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 800268c:	4b0a      	ldr	r3, [pc, #40]	@ (80026b8 <HAL_I2C_MspInit+0xcc>)
 800268e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002692:	4a09      	ldr	r2, [pc, #36]	@ (80026b8 <HAL_I2C_MspInit+0xcc>)
 8002694:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002698:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800269c:	4b06      	ldr	r3, [pc, #24]	@ (80026b8 <HAL_I2C_MspInit+0xcc>)
 800269e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80026a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a6:	60bb      	str	r3, [r7, #8]
 80026a8:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 80026aa:	bf00      	nop
 80026ac:	37e8      	adds	r7, #232	@ 0xe8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	58001c00 	.word	0x58001c00
 80026b8:	58024400 	.word	0x58024400
 80026bc:	58020c00 	.word	0x58020c00

080026c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b090      	sub	sp, #64	@ 0x40
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	60da      	str	r2, [r3, #12]
 80026d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a88      	ldr	r2, [pc, #544]	@ (8002900 <HAL_SPI_MspInit+0x240>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	f040 8083 	bne.w	80027ea <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026e4:	4b87      	ldr	r3, [pc, #540]	@ (8002904 <HAL_SPI_MspInit+0x244>)
 80026e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026ea:	4a86      	ldr	r2, [pc, #536]	@ (8002904 <HAL_SPI_MspInit+0x244>)
 80026ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026f0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80026f4:	4b83      	ldr	r3, [pc, #524]	@ (8002904 <HAL_SPI_MspInit+0x244>)
 80026f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002700:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002702:	4b80      	ldr	r3, [pc, #512]	@ (8002904 <HAL_SPI_MspInit+0x244>)
 8002704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002708:	4a7e      	ldr	r2, [pc, #504]	@ (8002904 <HAL_SPI_MspInit+0x244>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002712:	4b7c      	ldr	r3, [pc, #496]	@ (8002904 <HAL_SPI_MspInit+0x244>)
 8002714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	627b      	str	r3, [r7, #36]	@ 0x24
 800271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002720:	4b78      	ldr	r3, [pc, #480]	@ (8002904 <HAL_SPI_MspInit+0x244>)
 8002722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002726:	4a77      	ldr	r2, [pc, #476]	@ (8002904 <HAL_SPI_MspInit+0x244>)
 8002728:	f043 0302 	orr.w	r3, r3, #2
 800272c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002730:	4b74      	ldr	r3, [pc, #464]	@ (8002904 <HAL_SPI_MspInit+0x244>)
 8002732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	623b      	str	r3, [r7, #32]
 800273c:	6a3b      	ldr	r3, [r7, #32]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800273e:	2370      	movs	r3, #112	@ 0x70
 8002740:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002742:	2302      	movs	r3, #2
 8002744:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	2300      	movs	r3, #0
 8002748:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274a:	2300      	movs	r3, #0
 800274c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800274e:	2305      	movs	r3, #5
 8002750:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002752:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002756:	4619      	mov	r1, r3
 8002758:	486b      	ldr	r0, [pc, #428]	@ (8002908 <HAL_SPI_MspInit+0x248>)
 800275a:	f01a f8f3 	bl	801c944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800275e:	2320      	movs	r3, #32
 8002760:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002762:	2302      	movs	r3, #2
 8002764:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002766:	2300      	movs	r3, #0
 8002768:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276a:	2300      	movs	r3, #0
 800276c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800276e:	2305      	movs	r3, #5
 8002770:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002772:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002776:	4619      	mov	r1, r3
 8002778:	4864      	ldr	r0, [pc, #400]	@ (800290c <HAL_SPI_MspInit+0x24c>)
 800277a:	f01a f8e3 	bl	801c944 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 800277e:	4b64      	ldr	r3, [pc, #400]	@ (8002910 <HAL_SPI_MspInit+0x250>)
 8002780:	4a64      	ldr	r2, [pc, #400]	@ (8002914 <HAL_SPI_MspInit+0x254>)
 8002782:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002784:	4b62      	ldr	r3, [pc, #392]	@ (8002910 <HAL_SPI_MspInit+0x250>)
 8002786:	2225      	movs	r2, #37	@ 0x25
 8002788:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800278a:	4b61      	ldr	r3, [pc, #388]	@ (8002910 <HAL_SPI_MspInit+0x250>)
 800278c:	2200      	movs	r2, #0
 800278e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002790:	4b5f      	ldr	r3, [pc, #380]	@ (8002910 <HAL_SPI_MspInit+0x250>)
 8002792:	2200      	movs	r2, #0
 8002794:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002796:	4b5e      	ldr	r3, [pc, #376]	@ (8002910 <HAL_SPI_MspInit+0x250>)
 8002798:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800279c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800279e:	4b5c      	ldr	r3, [pc, #368]	@ (8002910 <HAL_SPI_MspInit+0x250>)
 80027a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027a4:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027a6:	4b5a      	ldr	r3, [pc, #360]	@ (8002910 <HAL_SPI_MspInit+0x250>)
 80027a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027ac:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80027ae:	4b58      	ldr	r3, [pc, #352]	@ (8002910 <HAL_SPI_MspInit+0x250>)
 80027b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027b4:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027b6:	4b56      	ldr	r3, [pc, #344]	@ (8002910 <HAL_SPI_MspInit+0x250>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027bc:	4b54      	ldr	r3, [pc, #336]	@ (8002910 <HAL_SPI_MspInit+0x250>)
 80027be:	2200      	movs	r2, #0
 80027c0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80027c2:	4853      	ldr	r0, [pc, #332]	@ (8002910 <HAL_SPI_MspInit+0x250>)
 80027c4:	f018 f9b6 	bl	801ab34 <HAL_DMA_Init>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 80027ce:	f7ff fe11 	bl	80023f4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a4e      	ldr	r2, [pc, #312]	@ (8002910 <HAL_SPI_MspInit+0x250>)
 80027d6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80027d8:	4a4d      	ldr	r2, [pc, #308]	@ (8002910 <HAL_SPI_MspInit+0x250>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	2100      	movs	r1, #0
 80027e2:	2023      	movs	r0, #35	@ 0x23
 80027e4:	f018 f8f9 	bl	801a9da <HAL_NVIC_SetPriority>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80027e8:	e126      	b.n	8002a38 <HAL_SPI_MspInit+0x378>
  else if(hspi->Instance==SPI2)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a4a      	ldr	r2, [pc, #296]	@ (8002918 <HAL_SPI_MspInit+0x258>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	f040 8097 	bne.w	8002924 <HAL_SPI_MspInit+0x264>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80027f6:	4b43      	ldr	r3, [pc, #268]	@ (8002904 <HAL_SPI_MspInit+0x244>)
 80027f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027fc:	4a41      	ldr	r2, [pc, #260]	@ (8002904 <HAL_SPI_MspInit+0x244>)
 80027fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002802:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002806:	4b3f      	ldr	r3, [pc, #252]	@ (8002904 <HAL_SPI_MspInit+0x244>)
 8002808:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800280c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002810:	61fb      	str	r3, [r7, #28]
 8002812:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002814:	4b3b      	ldr	r3, [pc, #236]	@ (8002904 <HAL_SPI_MspInit+0x244>)
 8002816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800281a:	4a3a      	ldr	r2, [pc, #232]	@ (8002904 <HAL_SPI_MspInit+0x244>)
 800281c:	f043 0302 	orr.w	r3, r3, #2
 8002820:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002824:	4b37      	ldr	r3, [pc, #220]	@ (8002904 <HAL_SPI_MspInit+0x244>)
 8002826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	61bb      	str	r3, [r7, #24]
 8002830:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002832:	4b34      	ldr	r3, [pc, #208]	@ (8002904 <HAL_SPI_MspInit+0x244>)
 8002834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002838:	4a32      	ldr	r2, [pc, #200]	@ (8002904 <HAL_SPI_MspInit+0x244>)
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002842:	4b30      	ldr	r3, [pc, #192]	@ (8002904 <HAL_SPI_MspInit+0x244>)
 8002844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8002850:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8002854:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002856:	2302      	movs	r3, #2
 8002858:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285a:	2300      	movs	r3, #0
 800285c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285e:	2300      	movs	r3, #0
 8002860:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002862:	2305      	movs	r3, #5
 8002864:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002866:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800286a:	4619      	mov	r1, r3
 800286c:	4827      	ldr	r0, [pc, #156]	@ (800290c <HAL_SPI_MspInit+0x24c>)
 800286e:	f01a f869 	bl	801c944 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002872:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002876:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002878:	2302      	movs	r3, #2
 800287a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002880:	2300      	movs	r3, #0
 8002882:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002884:	2305      	movs	r3, #5
 8002886:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002888:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800288c:	4619      	mov	r1, r3
 800288e:	481e      	ldr	r0, [pc, #120]	@ (8002908 <HAL_SPI_MspInit+0x248>)
 8002890:	f01a f858 	bl	801c944 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8002894:	4b21      	ldr	r3, [pc, #132]	@ (800291c <HAL_SPI_MspInit+0x25c>)
 8002896:	4a22      	ldr	r2, [pc, #136]	@ (8002920 <HAL_SPI_MspInit+0x260>)
 8002898:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800289a:	4b20      	ldr	r3, [pc, #128]	@ (800291c <HAL_SPI_MspInit+0x25c>)
 800289c:	2227      	movs	r2, #39	@ 0x27
 800289e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028a0:	4b1e      	ldr	r3, [pc, #120]	@ (800291c <HAL_SPI_MspInit+0x25c>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028a6:	4b1d      	ldr	r3, [pc, #116]	@ (800291c <HAL_SPI_MspInit+0x25c>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028ac:	4b1b      	ldr	r3, [pc, #108]	@ (800291c <HAL_SPI_MspInit+0x25c>)
 80028ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028b2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028b4:	4b19      	ldr	r3, [pc, #100]	@ (800291c <HAL_SPI_MspInit+0x25c>)
 80028b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028ba:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028bc:	4b17      	ldr	r3, [pc, #92]	@ (800291c <HAL_SPI_MspInit+0x25c>)
 80028be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028c2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80028c4:	4b15      	ldr	r3, [pc, #84]	@ (800291c <HAL_SPI_MspInit+0x25c>)
 80028c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028ca:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028cc:	4b13      	ldr	r3, [pc, #76]	@ (800291c <HAL_SPI_MspInit+0x25c>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028d2:	4b12      	ldr	r3, [pc, #72]	@ (800291c <HAL_SPI_MspInit+0x25c>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80028d8:	4810      	ldr	r0, [pc, #64]	@ (800291c <HAL_SPI_MspInit+0x25c>)
 80028da:	f018 f92b 	bl	801ab34 <HAL_DMA_Init>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_SPI_MspInit+0x228>
      Error_Handler();
 80028e4:	f7ff fd86 	bl	80023f4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a0c      	ldr	r2, [pc, #48]	@ (800291c <HAL_SPI_MspInit+0x25c>)
 80028ec:	67da      	str	r2, [r3, #124]	@ 0x7c
 80028ee:	4a0b      	ldr	r2, [pc, #44]	@ (800291c <HAL_SPI_MspInit+0x25c>)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80028f4:	2200      	movs	r2, #0
 80028f6:	2100      	movs	r1, #0
 80028f8:	2024      	movs	r0, #36	@ 0x24
 80028fa:	f018 f86e 	bl	801a9da <HAL_NVIC_SetPriority>
}
 80028fe:	e09b      	b.n	8002a38 <HAL_SPI_MspInit+0x378>
 8002900:	40013000 	.word	0x40013000
 8002904:	58024400 	.word	0x58024400
 8002908:	58020000 	.word	0x58020000
 800290c:	58020400 	.word	0x58020400
 8002910:	20000290 	.word	0x20000290
 8002914:	40020010 	.word	0x40020010
 8002918:	40003800 	.word	0x40003800
 800291c:	20000308 	.word	0x20000308
 8002920:	40020028 	.word	0x40020028
  else if(hspi->Instance==SPI3)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a45      	ldr	r2, [pc, #276]	@ (8002a40 <HAL_SPI_MspInit+0x380>)
 800292a:	4293      	cmp	r3, r2
 800292c:	f040 8084 	bne.w	8002a38 <HAL_SPI_MspInit+0x378>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002930:	4b44      	ldr	r3, [pc, #272]	@ (8002a44 <HAL_SPI_MspInit+0x384>)
 8002932:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002936:	4a43      	ldr	r2, [pc, #268]	@ (8002a44 <HAL_SPI_MspInit+0x384>)
 8002938:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800293c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002940:	4b40      	ldr	r3, [pc, #256]	@ (8002a44 <HAL_SPI_MspInit+0x384>)
 8002942:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002946:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800294e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a44 <HAL_SPI_MspInit+0x384>)
 8002950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002954:	4a3b      	ldr	r2, [pc, #236]	@ (8002a44 <HAL_SPI_MspInit+0x384>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800295e:	4b39      	ldr	r3, [pc, #228]	@ (8002a44 <HAL_SPI_MspInit+0x384>)
 8002960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800296c:	4b35      	ldr	r3, [pc, #212]	@ (8002a44 <HAL_SPI_MspInit+0x384>)
 800296e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002972:	4a34      	ldr	r2, [pc, #208]	@ (8002a44 <HAL_SPI_MspInit+0x384>)
 8002974:	f043 0304 	orr.w	r3, r3, #4
 8002978:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800297c:	4b31      	ldr	r3, [pc, #196]	@ (8002a44 <HAL_SPI_MspInit+0x384>)
 800297e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	60bb      	str	r3, [r7, #8]
 8002988:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800298a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800298e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002990:	2302      	movs	r3, #2
 8002992:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	2300      	movs	r3, #0
 8002996:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002998:	2300      	movs	r3, #0
 800299a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800299c:	2306      	movs	r3, #6
 800299e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029a4:	4619      	mov	r1, r3
 80029a6:	4828      	ldr	r0, [pc, #160]	@ (8002a48 <HAL_SPI_MspInit+0x388>)
 80029a8:	f019 ffcc 	bl	801c944 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80029ac:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80029b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b2:	2302      	movs	r3, #2
 80029b4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ba:	2300      	movs	r3, #0
 80029bc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80029be:	2306      	movs	r3, #6
 80029c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029c6:	4619      	mov	r1, r3
 80029c8:	4820      	ldr	r0, [pc, #128]	@ (8002a4c <HAL_SPI_MspInit+0x38c>)
 80029ca:	f019 ffbb 	bl	801c944 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream7;
 80029ce:	4b20      	ldr	r3, [pc, #128]	@ (8002a50 <HAL_SPI_MspInit+0x390>)
 80029d0:	4a20      	ldr	r2, [pc, #128]	@ (8002a54 <HAL_SPI_MspInit+0x394>)
 80029d2:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 80029d4:	4b1e      	ldr	r3, [pc, #120]	@ (8002a50 <HAL_SPI_MspInit+0x390>)
 80029d6:	223d      	movs	r2, #61	@ 0x3d
 80029d8:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029da:	4b1d      	ldr	r3, [pc, #116]	@ (8002a50 <HAL_SPI_MspInit+0x390>)
 80029dc:	2200      	movs	r2, #0
 80029de:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a50 <HAL_SPI_MspInit+0x390>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002a50 <HAL_SPI_MspInit+0x390>)
 80029e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029ec:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029ee:	4b18      	ldr	r3, [pc, #96]	@ (8002a50 <HAL_SPI_MspInit+0x390>)
 80029f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80029f4:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029f6:	4b16      	ldr	r3, [pc, #88]	@ (8002a50 <HAL_SPI_MspInit+0x390>)
 80029f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029fc:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 80029fe:	4b14      	ldr	r3, [pc, #80]	@ (8002a50 <HAL_SPI_MspInit+0x390>)
 8002a00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a04:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a06:	4b12      	ldr	r3, [pc, #72]	@ (8002a50 <HAL_SPI_MspInit+0x390>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a0c:	4b10      	ldr	r3, [pc, #64]	@ (8002a50 <HAL_SPI_MspInit+0x390>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8002a12:	480f      	ldr	r0, [pc, #60]	@ (8002a50 <HAL_SPI_MspInit+0x390>)
 8002a14:	f018 f88e 	bl	801ab34 <HAL_DMA_Init>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_SPI_MspInit+0x362>
      Error_Handler();
 8002a1e:	f7ff fce9 	bl	80023f4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a0a      	ldr	r2, [pc, #40]	@ (8002a50 <HAL_SPI_MspInit+0x390>)
 8002a26:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002a28:	4a09      	ldr	r2, [pc, #36]	@ (8002a50 <HAL_SPI_MspInit+0x390>)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2100      	movs	r1, #0
 8002a32:	2033      	movs	r0, #51	@ 0x33
 8002a34:	f017 ffd1 	bl	801a9da <HAL_NVIC_SetPriority>
}
 8002a38:	bf00      	nop
 8002a3a:	3740      	adds	r7, #64	@ 0x40
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40003c00 	.word	0x40003c00
 8002a44:	58024400 	.word	0x58024400
 8002a48:	58020000 	.word	0x58020000
 8002a4c:	58020800 	.word	0x58020800
 8002a50:	20000380 	.word	0x20000380
 8002a54:	400200b8 	.word	0x400200b8

08002a58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a87      	ldr	r2, [pc, #540]	@ (8002c84 <HAL_TIM_Base_MspInit+0x22c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d13e      	bne.n	8002ae8 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a6a:	4b87      	ldr	r3, [pc, #540]	@ (8002c88 <HAL_TIM_Base_MspInit+0x230>)
 8002a6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a70:	4a85      	ldr	r2, [pc, #532]	@ (8002c88 <HAL_TIM_Base_MspInit+0x230>)
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002a7a:	4b83      	ldr	r3, [pc, #524]	@ (8002c88 <HAL_TIM_Base_MspInit+0x230>)
 8002a7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	61fb      	str	r3, [r7, #28]
 8002a86:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Stream2;
 8002a88:	4b80      	ldr	r3, [pc, #512]	@ (8002c8c <HAL_TIM_Base_MspInit+0x234>)
 8002a8a:	4a81      	ldr	r2, [pc, #516]	@ (8002c90 <HAL_TIM_Base_MspInit+0x238>)
 8002a8c:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Request = DMA_REQUEST_TIM1_UP;
 8002a8e:	4b7f      	ldr	r3, [pc, #508]	@ (8002c8c <HAL_TIM_Base_MspInit+0x234>)
 8002a90:	220f      	movs	r2, #15
 8002a92:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a94:	4b7d      	ldr	r3, [pc, #500]	@ (8002c8c <HAL_TIM_Base_MspInit+0x234>)
 8002a96:	2240      	movs	r2, #64	@ 0x40
 8002a98:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a9a:	4b7c      	ldr	r3, [pc, #496]	@ (8002c8c <HAL_TIM_Base_MspInit+0x234>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_DISABLE;
 8002aa0:	4b7a      	ldr	r3, [pc, #488]	@ (8002c8c <HAL_TIM_Base_MspInit+0x234>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002aa6:	4b79      	ldr	r3, [pc, #484]	@ (8002c8c <HAL_TIM_Base_MspInit+0x234>)
 8002aa8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002aac:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002aae:	4b77      	ldr	r3, [pc, #476]	@ (8002c8c <HAL_TIM_Base_MspInit+0x234>)
 8002ab0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ab4:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8002ab6:	4b75      	ldr	r3, [pc, #468]	@ (8002c8c <HAL_TIM_Base_MspInit+0x234>)
 8002ab8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002abc:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8002abe:	4b73      	ldr	r3, [pc, #460]	@ (8002c8c <HAL_TIM_Base_MspInit+0x234>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ac4:	4b71      	ldr	r3, [pc, #452]	@ (8002c8c <HAL_TIM_Base_MspInit+0x234>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8002aca:	4870      	ldr	r0, [pc, #448]	@ (8002c8c <HAL_TIM_Base_MspInit+0x234>)
 8002acc:	f018 f832 	bl	801ab34 <HAL_DMA_Init>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8002ad6:	f7ff fc8d 	bl	80023f4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a6b      	ldr	r2, [pc, #428]	@ (8002c8c <HAL_TIM_Base_MspInit+0x234>)
 8002ade:	621a      	str	r2, [r3, #32]
 8002ae0:	4a6a      	ldr	r2, [pc, #424]	@ (8002c8c <HAL_TIM_Base_MspInit+0x234>)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002ae6:	e129      	b.n	8002d3c <HAL_TIM_Base_MspInit+0x2e4>
  else if(htim_base->Instance==TIM2)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002af0:	d10f      	bne.n	8002b12 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002af2:	4b65      	ldr	r3, [pc, #404]	@ (8002c88 <HAL_TIM_Base_MspInit+0x230>)
 8002af4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002af8:	4a63      	ldr	r2, [pc, #396]	@ (8002c88 <HAL_TIM_Base_MspInit+0x230>)
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002b02:	4b61      	ldr	r3, [pc, #388]	@ (8002c88 <HAL_TIM_Base_MspInit+0x230>)
 8002b04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	61bb      	str	r3, [r7, #24]
 8002b0e:	69bb      	ldr	r3, [r7, #24]
}
 8002b10:	e114      	b.n	8002d3c <HAL_TIM_Base_MspInit+0x2e4>
  else if(htim_base->Instance==TIM3)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a5f      	ldr	r2, [pc, #380]	@ (8002c94 <HAL_TIM_Base_MspInit+0x23c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d13e      	bne.n	8002b9a <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b1c:	4b5a      	ldr	r3, [pc, #360]	@ (8002c88 <HAL_TIM_Base_MspInit+0x230>)
 8002b1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b22:	4a59      	ldr	r2, [pc, #356]	@ (8002c88 <HAL_TIM_Base_MspInit+0x230>)
 8002b24:	f043 0302 	orr.w	r3, r3, #2
 8002b28:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002b2c:	4b56      	ldr	r3, [pc, #344]	@ (8002c88 <HAL_TIM_Base_MspInit+0x230>)
 8002b2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	697b      	ldr	r3, [r7, #20]
    hdma_tim3_up.Instance = DMA1_Stream3;
 8002b3a:	4b57      	ldr	r3, [pc, #348]	@ (8002c98 <HAL_TIM_Base_MspInit+0x240>)
 8002b3c:	4a57      	ldr	r2, [pc, #348]	@ (8002c9c <HAL_TIM_Base_MspInit+0x244>)
 8002b3e:	601a      	str	r2, [r3, #0]
    hdma_tim3_up.Init.Request = DMA_REQUEST_TIM3_UP;
 8002b40:	4b55      	ldr	r3, [pc, #340]	@ (8002c98 <HAL_TIM_Base_MspInit+0x240>)
 8002b42:	221b      	movs	r2, #27
 8002b44:	605a      	str	r2, [r3, #4]
    hdma_tim3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b46:	4b54      	ldr	r3, [pc, #336]	@ (8002c98 <HAL_TIM_Base_MspInit+0x240>)
 8002b48:	2240      	movs	r2, #64	@ 0x40
 8002b4a:	609a      	str	r2, [r3, #8]
    hdma_tim3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b4c:	4b52      	ldr	r3, [pc, #328]	@ (8002c98 <HAL_TIM_Base_MspInit+0x240>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	60da      	str	r2, [r3, #12]
    hdma_tim3_up.Init.MemInc = DMA_MINC_DISABLE;
 8002b52:	4b51      	ldr	r3, [pc, #324]	@ (8002c98 <HAL_TIM_Base_MspInit+0x240>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	611a      	str	r2, [r3, #16]
    hdma_tim3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b58:	4b4f      	ldr	r3, [pc, #316]	@ (8002c98 <HAL_TIM_Base_MspInit+0x240>)
 8002b5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b5e:	615a      	str	r2, [r3, #20]
    hdma_tim3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b60:	4b4d      	ldr	r3, [pc, #308]	@ (8002c98 <HAL_TIM_Base_MspInit+0x240>)
 8002b62:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b66:	619a      	str	r2, [r3, #24]
    hdma_tim3_up.Init.Mode = DMA_CIRCULAR;
 8002b68:	4b4b      	ldr	r3, [pc, #300]	@ (8002c98 <HAL_TIM_Base_MspInit+0x240>)
 8002b6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b6e:	61da      	str	r2, [r3, #28]
    hdma_tim3_up.Init.Priority = DMA_PRIORITY_LOW;
 8002b70:	4b49      	ldr	r3, [pc, #292]	@ (8002c98 <HAL_TIM_Base_MspInit+0x240>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	621a      	str	r2, [r3, #32]
    hdma_tim3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b76:	4b48      	ldr	r3, [pc, #288]	@ (8002c98 <HAL_TIM_Base_MspInit+0x240>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_up) != HAL_OK)
 8002b7c:	4846      	ldr	r0, [pc, #280]	@ (8002c98 <HAL_TIM_Base_MspInit+0x240>)
 8002b7e:	f017 ffd9 	bl	801ab34 <HAL_DMA_Init>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <HAL_TIM_Base_MspInit+0x134>
      Error_Handler();
 8002b88:	f7ff fc34 	bl	80023f4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_up);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a42      	ldr	r2, [pc, #264]	@ (8002c98 <HAL_TIM_Base_MspInit+0x240>)
 8002b90:	621a      	str	r2, [r3, #32]
 8002b92:	4a41      	ldr	r2, [pc, #260]	@ (8002c98 <HAL_TIM_Base_MspInit+0x240>)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002b98:	e0d0      	b.n	8002d3c <HAL_TIM_Base_MspInit+0x2e4>
  else if(htim_base->Instance==TIM4)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a40      	ldr	r2, [pc, #256]	@ (8002ca0 <HAL_TIM_Base_MspInit+0x248>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	f040 8087 	bne.w	8002cb4 <HAL_TIM_Base_MspInit+0x25c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ba6:	4b38      	ldr	r3, [pc, #224]	@ (8002c88 <HAL_TIM_Base_MspInit+0x230>)
 8002ba8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002bac:	4a36      	ldr	r2, [pc, #216]	@ (8002c88 <HAL_TIM_Base_MspInit+0x230>)
 8002bae:	f043 0304 	orr.w	r3, r3, #4
 8002bb2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002bb6:	4b34      	ldr	r3, [pc, #208]	@ (8002c88 <HAL_TIM_Base_MspInit+0x230>)
 8002bb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	693b      	ldr	r3, [r7, #16]
    hdma_tim4_ch1.Instance = DMA1_Stream4;
 8002bc4:	4b37      	ldr	r3, [pc, #220]	@ (8002ca4 <HAL_TIM_Base_MspInit+0x24c>)
 8002bc6:	4a38      	ldr	r2, [pc, #224]	@ (8002ca8 <HAL_TIM_Base_MspInit+0x250>)
 8002bc8:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_TIM4_CH1;
 8002bca:	4b36      	ldr	r3, [pc, #216]	@ (8002ca4 <HAL_TIM_Base_MspInit+0x24c>)
 8002bcc:	221d      	movs	r2, #29
 8002bce:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bd0:	4b34      	ldr	r3, [pc, #208]	@ (8002ca4 <HAL_TIM_Base_MspInit+0x24c>)
 8002bd2:	2240      	movs	r2, #64	@ 0x40
 8002bd4:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bd6:	4b33      	ldr	r3, [pc, #204]	@ (8002ca4 <HAL_TIM_Base_MspInit+0x24c>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_DISABLE;
 8002bdc:	4b31      	ldr	r3, [pc, #196]	@ (8002ca4 <HAL_TIM_Base_MspInit+0x24c>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002be2:	4b30      	ldr	r3, [pc, #192]	@ (8002ca4 <HAL_TIM_Base_MspInit+0x24c>)
 8002be4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002be8:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002bea:	4b2e      	ldr	r3, [pc, #184]	@ (8002ca4 <HAL_TIM_Base_MspInit+0x24c>)
 8002bec:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002bf0:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 8002bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8002ca4 <HAL_TIM_Base_MspInit+0x24c>)
 8002bf4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bf8:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca4 <HAL_TIM_Base_MspInit+0x24c>)
 8002bfc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002c00:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c02:	4b28      	ldr	r3, [pc, #160]	@ (8002ca4 <HAL_TIM_Base_MspInit+0x24c>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8002c08:	4826      	ldr	r0, [pc, #152]	@ (8002ca4 <HAL_TIM_Base_MspInit+0x24c>)
 8002c0a:	f017 ff93 	bl	801ab34 <HAL_DMA_Init>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <HAL_TIM_Base_MspInit+0x1c0>
      Error_Handler();
 8002c14:	f7ff fbee 	bl	80023f4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a22      	ldr	r2, [pc, #136]	@ (8002ca4 <HAL_TIM_Base_MspInit+0x24c>)
 8002c1c:	625a      	str	r2, [r3, #36]	@ 0x24
 8002c1e:	4a21      	ldr	r2, [pc, #132]	@ (8002ca4 <HAL_TIM_Base_MspInit+0x24c>)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim4_up.Instance = DMA1_Stream5;
 8002c24:	4b21      	ldr	r3, [pc, #132]	@ (8002cac <HAL_TIM_Base_MspInit+0x254>)
 8002c26:	4a22      	ldr	r2, [pc, #136]	@ (8002cb0 <HAL_TIM_Base_MspInit+0x258>)
 8002c28:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Request = DMA_REQUEST_TIM4_UP;
 8002c2a:	4b20      	ldr	r3, [pc, #128]	@ (8002cac <HAL_TIM_Base_MspInit+0x254>)
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c30:	4b1e      	ldr	r3, [pc, #120]	@ (8002cac <HAL_TIM_Base_MspInit+0x254>)
 8002c32:	2240      	movs	r2, #64	@ 0x40
 8002c34:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c36:	4b1d      	ldr	r3, [pc, #116]	@ (8002cac <HAL_TIM_Base_MspInit+0x254>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_DISABLE;
 8002c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cac <HAL_TIM_Base_MspInit+0x254>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c42:	4b1a      	ldr	r3, [pc, #104]	@ (8002cac <HAL_TIM_Base_MspInit+0x254>)
 8002c44:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002c48:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002c4a:	4b18      	ldr	r3, [pc, #96]	@ (8002cac <HAL_TIM_Base_MspInit+0x254>)
 8002c4c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c50:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_CIRCULAR;
 8002c52:	4b16      	ldr	r3, [pc, #88]	@ (8002cac <HAL_TIM_Base_MspInit+0x254>)
 8002c54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c58:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 8002c5a:	4b14      	ldr	r3, [pc, #80]	@ (8002cac <HAL_TIM_Base_MspInit+0x254>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	621a      	str	r2, [r3, #32]
    hdma_tim4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c60:	4b12      	ldr	r3, [pc, #72]	@ (8002cac <HAL_TIM_Base_MspInit+0x254>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 8002c66:	4811      	ldr	r0, [pc, #68]	@ (8002cac <HAL_TIM_Base_MspInit+0x254>)
 8002c68:	f017 ff64 	bl	801ab34 <HAL_DMA_Init>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_TIM_Base_MspInit+0x21e>
      Error_Handler();
 8002c72:	f7ff fbbf 	bl	80023f4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a0c      	ldr	r2, [pc, #48]	@ (8002cac <HAL_TIM_Base_MspInit+0x254>)
 8002c7a:	621a      	str	r2, [r3, #32]
 8002c7c:	4a0b      	ldr	r2, [pc, #44]	@ (8002cac <HAL_TIM_Base_MspInit+0x254>)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002c82:	e05b      	b.n	8002d3c <HAL_TIM_Base_MspInit+0x2e4>
 8002c84:	40010000 	.word	0x40010000
 8002c88:	58024400 	.word	0x58024400
 8002c8c:	20000574 	.word	0x20000574
 8002c90:	40020040 	.word	0x40020040
 8002c94:	40000400 	.word	0x40000400
 8002c98:	200005ec 	.word	0x200005ec
 8002c9c:	40020058 	.word	0x40020058
 8002ca0:	40000800 	.word	0x40000800
 8002ca4:	20000664 	.word	0x20000664
 8002ca8:	40020070 	.word	0x40020070
 8002cac:	200006dc 	.word	0x200006dc
 8002cb0:	40020088 	.word	0x40020088
  else if(htim_base->Instance==TIM5)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a22      	ldr	r2, [pc, #136]	@ (8002d44 <HAL_TIM_Base_MspInit+0x2ec>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d13e      	bne.n	8002d3c <HAL_TIM_Base_MspInit+0x2e4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002cbe:	4b22      	ldr	r3, [pc, #136]	@ (8002d48 <HAL_TIM_Base_MspInit+0x2f0>)
 8002cc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002cc4:	4a20      	ldr	r2, [pc, #128]	@ (8002d48 <HAL_TIM_Base_MspInit+0x2f0>)
 8002cc6:	f043 0308 	orr.w	r3, r3, #8
 8002cca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002cce:	4b1e      	ldr	r3, [pc, #120]	@ (8002d48 <HAL_TIM_Base_MspInit+0x2f0>)
 8002cd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	68fb      	ldr	r3, [r7, #12]
    hdma_tim5_up.Instance = DMA1_Stream6;
 8002cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d4c <HAL_TIM_Base_MspInit+0x2f4>)
 8002cde:	4a1c      	ldr	r2, [pc, #112]	@ (8002d50 <HAL_TIM_Base_MspInit+0x2f8>)
 8002ce0:	601a      	str	r2, [r3, #0]
    hdma_tim5_up.Init.Request = DMA_REQUEST_TIM5_UP;
 8002ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d4c <HAL_TIM_Base_MspInit+0x2f4>)
 8002ce4:	223b      	movs	r2, #59	@ 0x3b
 8002ce6:	605a      	str	r2, [r3, #4]
    hdma_tim5_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ce8:	4b18      	ldr	r3, [pc, #96]	@ (8002d4c <HAL_TIM_Base_MspInit+0x2f4>)
 8002cea:	2240      	movs	r2, #64	@ 0x40
 8002cec:	609a      	str	r2, [r3, #8]
    hdma_tim5_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cee:	4b17      	ldr	r3, [pc, #92]	@ (8002d4c <HAL_TIM_Base_MspInit+0x2f4>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	60da      	str	r2, [r3, #12]
    hdma_tim5_up.Init.MemInc = DMA_MINC_ENABLE;
 8002cf4:	4b15      	ldr	r3, [pc, #84]	@ (8002d4c <HAL_TIM_Base_MspInit+0x2f4>)
 8002cf6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cfa:	611a      	str	r2, [r3, #16]
    hdma_tim5_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002cfc:	4b13      	ldr	r3, [pc, #76]	@ (8002d4c <HAL_TIM_Base_MspInit+0x2f4>)
 8002cfe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d02:	615a      	str	r2, [r3, #20]
    hdma_tim5_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d04:	4b11      	ldr	r3, [pc, #68]	@ (8002d4c <HAL_TIM_Base_MspInit+0x2f4>)
 8002d06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d0a:	619a      	str	r2, [r3, #24]
    hdma_tim5_up.Init.Mode = DMA_CIRCULAR;
 8002d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d4c <HAL_TIM_Base_MspInit+0x2f4>)
 8002d0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d12:	61da      	str	r2, [r3, #28]
    hdma_tim5_up.Init.Priority = DMA_PRIORITY_LOW;
 8002d14:	4b0d      	ldr	r3, [pc, #52]	@ (8002d4c <HAL_TIM_Base_MspInit+0x2f4>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	621a      	str	r2, [r3, #32]
    hdma_tim5_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002d4c <HAL_TIM_Base_MspInit+0x2f4>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_up) != HAL_OK)
 8002d20:	480a      	ldr	r0, [pc, #40]	@ (8002d4c <HAL_TIM_Base_MspInit+0x2f4>)
 8002d22:	f017 ff07 	bl	801ab34 <HAL_DMA_Init>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <HAL_TIM_Base_MspInit+0x2d8>
      Error_Handler();
 8002d2c:	f7ff fb62 	bl	80023f4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim5_up);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a06      	ldr	r2, [pc, #24]	@ (8002d4c <HAL_TIM_Base_MspInit+0x2f4>)
 8002d34:	621a      	str	r2, [r3, #32]
 8002d36:	4a05      	ldr	r2, [pc, #20]	@ (8002d4c <HAL_TIM_Base_MspInit+0x2f4>)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002d3c:	bf00      	nop
 8002d3e:	3720      	adds	r7, #32
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40000c00 	.word	0x40000c00
 8002d48:	58024400 	.word	0x58024400
 8002d4c:	20000754 	.word	0x20000754
 8002d50:	400200a0 	.word	0x400200a0

08002d54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d5c:	f107 030c 	add.w	r3, r7, #12
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	605a      	str	r2, [r3, #4]
 8002d66:	609a      	str	r2, [r3, #8]
 8002d68:	60da      	str	r2, [r3, #12]
 8002d6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a12      	ldr	r2, [pc, #72]	@ (8002dbc <HAL_TIM_MspPostInit+0x68>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d11e      	bne.n	8002db4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d76:	4b12      	ldr	r3, [pc, #72]	@ (8002dc0 <HAL_TIM_MspPostInit+0x6c>)
 8002d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d7c:	4a10      	ldr	r2, [pc, #64]	@ (8002dc0 <HAL_TIM_MspPostInit+0x6c>)
 8002d7e:	f043 0302 	orr.w	r3, r3, #2
 8002d82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d86:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc0 <HAL_TIM_MspPostInit+0x6c>)
 8002d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d94:	23c0      	movs	r3, #192	@ 0xc0
 8002d96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da0:	2300      	movs	r3, #0
 8002da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002da4:	2302      	movs	r3, #2
 8002da6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da8:	f107 030c 	add.w	r3, r7, #12
 8002dac:	4619      	mov	r1, r3
 8002dae:	4805      	ldr	r0, [pc, #20]	@ (8002dc4 <HAL_TIM_MspPostInit+0x70>)
 8002db0:	f019 fdc8 	bl	801c944 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002db4:	bf00      	nop
 8002db6:	3720      	adds	r7, #32
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40000800 	.word	0x40000800
 8002dc0:	58024400 	.word	0x58024400
 8002dc4:	58020400 	.word	0x58020400

08002dc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b0ba      	sub	sp, #232	@ 0xe8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	609a      	str	r2, [r3, #8]
 8002ddc:	60da      	str	r2, [r3, #12]
 8002dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002de0:	f107 0310 	add.w	r3, r7, #16
 8002de4:	22c0      	movs	r2, #192	@ 0xc0
 8002de6:	2100      	movs	r1, #0
 8002de8:	4618      	mov	r0, r3
 8002dea:	f020 f804 	bl	8022df6 <memset>
  if(huart->Instance==USART3)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a27      	ldr	r2, [pc, #156]	@ (8002e90 <HAL_UART_MspInit+0xc8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d146      	bne.n	8002e86 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002df8:	f04f 0202 	mov.w	r2, #2
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002e04:	2300      	movs	r3, #0
 8002e06:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e0a:	f107 0310 	add.w	r3, r7, #16
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f01b f8b6 	bl	801df80 <HAL_RCCEx_PeriphCLKConfig>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002e1a:	f7ff faeb 	bl	80023f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8002e94 <HAL_UART_MspInit+0xcc>)
 8002e20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e24:	4a1b      	ldr	r2, [pc, #108]	@ (8002e94 <HAL_UART_MspInit+0xcc>)
 8002e26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e2a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002e2e:	4b19      	ldr	r3, [pc, #100]	@ (8002e94 <HAL_UART_MspInit+0xcc>)
 8002e30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e3c:	4b15      	ldr	r3, [pc, #84]	@ (8002e94 <HAL_UART_MspInit+0xcc>)
 8002e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e42:	4a14      	ldr	r2, [pc, #80]	@ (8002e94 <HAL_UART_MspInit+0xcc>)
 8002e44:	f043 0308 	orr.w	r3, r3, #8
 8002e48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e4c:	4b11      	ldr	r3, [pc, #68]	@ (8002e94 <HAL_UART_MspInit+0xcc>)
 8002e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e5a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002e5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e62:	2302      	movs	r3, #2
 8002e64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e74:	2307      	movs	r3, #7
 8002e76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e7a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4805      	ldr	r0, [pc, #20]	@ (8002e98 <HAL_UART_MspInit+0xd0>)
 8002e82:	f019 fd5f 	bl	801c944 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002e86:	bf00      	nop
 8002e88:	37e8      	adds	r7, #232	@ 0xe8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40004800 	.word	0x40004800
 8002e94:	58024400 	.word	0x58024400
 8002e98:	58020c00 	.word	0x58020c00

08002e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ea0:	bf00      	nop
 8002ea2:	e7fd      	b.n	8002ea0 <NMI_Handler+0x4>

08002ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ea8:	bf00      	nop
 8002eaa:	e7fd      	b.n	8002ea8 <MemManage_Handler+0x4>

08002eac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eb0:	bf00      	nop
 8002eb2:	e7fd      	b.n	8002eb0 <BusFault_Handler+0x4>

08002eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002eb8:	bf00      	nop
 8002eba:	e7fd      	b.n	8002eb8 <UsageFault_Handler+0x4>

08002ebc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ec0:	bf00      	nop
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ece:	f017 fc45 	bl	801a75c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002ed2:	f002 fc09 	bl	80056e8 <xTaskGetSchedulerState>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d101      	bne.n	8002ee0 <SysTick_Handler+0x16>
      {
    	xPortSysTickHandler();
 8002edc:	f003 fce4 	bl	80068a8 <xPortSysTickHandler>
      }
  /* USER CODE END SysTick_IRQn 1 */
}
 8002ee0:	bf00      	nop
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken;
  uint32_t ulCurrBuf = 0;
 8002eea:	2300      	movs	r3, #0
 8002eec:	60fb      	str	r3, [r7, #12]
  //SPI1 Stream
  if (DMA1->LISR & DMA_FLAG_TCIF0_4){
 8002eee:	4b19      	ldr	r3, [pc, #100]	@ (8002f54 <DMA1_Stream0_IRQHandler+0x70>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0320 	and.w	r3, r3, #32
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00c      	beq.n	8002f14 <DMA1_Stream0_IRQHandler+0x30>
      uint32_t status = DMA1_Stream0->CR;
 8002efa:	4b17      	ldr	r3, [pc, #92]	@ (8002f58 <DMA1_Stream0_IRQHandler+0x74>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	60bb      	str	r3, [r7, #8]
        if ((status & DMA_SxCR_CT_Msk)!=0){ //current Transmittable Buffer
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d002      	beq.n	8002f10 <DMA1_Stream0_IRQHandler+0x2c>
  	  ulCurrBuf = 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	e001      	b.n	8002f14 <DMA1_Stream0_IRQHandler+0x30>
        } else {
  	  ulCurrBuf = 1;
 8002f10:	2301      	movs	r3, #1
 8002f12:	60fb      	str	r3, [r7, #12]
        }

    }
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002f14:	4811      	ldr	r0, [pc, #68]	@ (8002f5c <DMA1_Stream0_IRQHandler+0x78>)
 8002f16:	f018 fbaf 	bl	801b678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
  /* xHigherPriorityTaskWoken must be initialised to pdFALSE. If calling
     xTaskNotifyFromISR() unblocks the handling task, and the priority of
     the handling task is higher than the priority of the currently running task,
     then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
  xHigherPriorityTaskWoken = pdFALSE;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	607b      	str	r3, [r7, #4]
  /* Unblock the handling task so the task can perform any processing necessitated
     by the interrupt. xHandlingTask is the task's handle, which was obtained
     when the task was created. The handling task's 0th notification value
     is bitwise ORed with the interrupt status - ensuring bits that are already
     set are not overwritten. */
  xTaskNotifyFromISR( vADCTCPTaskHandle,
 8002f1e:	4b10      	ldr	r3, [pc, #64]	@ (8002f60 <DMA1_Stream0_IRQHandler+0x7c>)
 8002f20:	6818      	ldr	r0, [r3, #0]
 8002f22:	1d3b      	adds	r3, r7, #4
 8002f24:	9301      	str	r3, [sp, #4]
 8002f26:	2300      	movs	r3, #0
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	2100      	movs	r1, #0
 8002f30:	f003 f832 	bl	8005f98 <xTaskGenericNotifyFromISR>
			     &xHigherPriorityTaskWoken );

  /* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
     The macro used to do this is dependent on the port and may be called
     portEND_SWITCHING_ISR. */
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d007      	beq.n	8002f4a <DMA1_Stream0_IRQHandler+0x66>
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f64 <DMA1_Stream0_IRQHandler+0x80>)
 8002f3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	f3bf 8f4f 	dsb	sy
 8002f46:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002f4a:	bf00      	nop
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40020000 	.word	0x40020000
 8002f58:	40020010 	.word	0x40020010
 8002f5c:	20000290 	.word	0x20000290
 8002f60:	20000d34 	.word	0x20000d34
 8002f64:	e000ed04 	.word	0xe000ed04

08002f68 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken;
  uint32_t ulCurrBuf = 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
  //SPI1 Stream
  if (DMA1->LISR & DMA_FLAG_TCIF1_5){
 8002f72:	4b19      	ldr	r3, [pc, #100]	@ (8002fd8 <DMA1_Stream1_IRQHandler+0x70>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00c      	beq.n	8002f98 <DMA1_Stream1_IRQHandler+0x30>
      uint32_t status = DMA1_Stream1->CR;
 8002f7e:	4b17      	ldr	r3, [pc, #92]	@ (8002fdc <DMA1_Stream1_IRQHandler+0x74>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	60bb      	str	r3, [r7, #8]
	if ((status & DMA_SxCR_CT_Msk)!=0){ //current Transmittable Buffer
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <DMA1_Stream1_IRQHandler+0x2c>
	ulCurrBuf = 0;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	e001      	b.n	8002f98 <DMA1_Stream1_IRQHandler+0x30>
	} else {
	ulCurrBuf = 1;
 8002f94:	2301      	movs	r3, #1
 8002f96:	60fb      	str	r3, [r7, #12]
	}

    }
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002f98:	4811      	ldr	r0, [pc, #68]	@ (8002fe0 <DMA1_Stream1_IRQHandler+0x78>)
 8002f9a:	f018 fb6d 	bl	801b678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */
  /* xHigherPriorityTaskWoken must be initialised to pdFALSE. If calling
       xTaskNotifyFromISR() unblocks the handling task, and the priority of
       the handling task is higher than the priority of the currently running task,
       then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
    xHigherPriorityTaskWoken = pdFALSE;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	607b      	str	r3, [r7, #4]
    /* Unblock the handling task so the task can perform any processing necessitated
       by the interrupt. xHandlingTask is the task's handle, which was obtained
       when the task was created. The handling task's 0th notification value
       is bitwise ORed with the interrupt status - ensuring bits that are already
       set are not overwritten. */
    xTaskNotifyFromISR( vAuxADCTCPTaskHandle,
 8002fa2:	4b10      	ldr	r3, [pc, #64]	@ (8002fe4 <DMA1_Stream1_IRQHandler+0x7c>)
 8002fa4:	6818      	ldr	r0, [r3, #0]
 8002fa6:	1d3b      	adds	r3, r7, #4
 8002fa8:	9301      	str	r3, [sp, #4]
 8002faa:	2300      	movs	r3, #0
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	2301      	movs	r3, #1
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	f002 fff0 	bl	8005f98 <xTaskGenericNotifyFromISR>
  			     &xHigherPriorityTaskWoken );

    /* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
       The macro used to do this is dependent on the port and may be called
       portEND_SWITCHING_ISR. */
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d007      	beq.n	8002fce <DMA1_Stream1_IRQHandler+0x66>
 8002fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe8 <DMA1_Stream1_IRQHandler+0x80>)
 8002fc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002fce:	bf00      	nop
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40020000 	.word	0x40020000
 8002fdc:	40020028 	.word	0x40020028
 8002fe0:	20000308 	.word	0x20000308
 8002fe4:	20000d38 	.word	0x20000d38
 8002fe8:	e000ed04 	.word	0xe000ed04

08002fec <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8002ff0:	4802      	ldr	r0, [pc, #8]	@ (8002ffc <DMA1_Stream2_IRQHandler+0x10>)
 8002ff2:	f018 fb41 	bl	801b678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002ff6:	bf00      	nop
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20000574 	.word	0x20000574

08003000 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_up);
 8003004:	4802      	ldr	r0, [pc, #8]	@ (8003010 <DMA1_Stream3_IRQHandler+0x10>)
 8003006:	f018 fb37 	bl	801b678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800300a:	bf00      	nop
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	200005ec 	.word	0x200005ec

08003014 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8003018:	4802      	ldr	r0, [pc, #8]	@ (8003024 <DMA1_Stream4_IRQHandler+0x10>)
 800301a:	f018 fb2d 	bl	801b678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800301e:	bf00      	nop
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	20000664 	.word	0x20000664

08003028 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 800302c:	4802      	ldr	r0, [pc, #8]	@ (8003038 <DMA1_Stream5_IRQHandler+0x10>)
 800302e:	f018 fb23 	bl	801b678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003032:	bf00      	nop
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	200006dc 	.word	0x200006dc

0800303c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_up);
 8003040:	4802      	ldr	r0, [pc, #8]	@ (800304c <DMA1_Stream6_IRQHandler+0x10>)
 8003042:	f018 fb19 	bl	801b678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20000754 	.word	0x20000754

08003050 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003054:	4802      	ldr	r0, [pc, #8]	@ (8003060 <SPI1_IRQHandler+0x10>)
 8003056:	f01c fee3 	bl	801fe20 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	200000f8 	.word	0x200000f8

08003064 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003068:	4802      	ldr	r0, [pc, #8]	@ (8003074 <SPI2_IRQHandler+0x10>)
 800306a:	f01c fed9 	bl	801fe20 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800306e:	bf00      	nop
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	20000180 	.word	0x20000180

08003078 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken;
  uint32_t ulCurrBuf = 0;
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
  //SPI1 Stream
  if (DMA1->HISR & DMA_FLAG_TCIF3_7){
 8003082:	4b19      	ldr	r3, [pc, #100]	@ (80030e8 <DMA1_Stream7_IRQHandler+0x70>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00c      	beq.n	80030a8 <DMA1_Stream7_IRQHandler+0x30>
      uint32_t status = DMA1_Stream7->CR;
 800308e:	4b17      	ldr	r3, [pc, #92]	@ (80030ec <DMA1_Stream7_IRQHandler+0x74>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	60bb      	str	r3, [r7, #8]
      if ((status & DMA_SxCR_CT_Msk)!=0){ //current Transmittable Buffer
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d002      	beq.n	80030a4 <DMA1_Stream7_IRQHandler+0x2c>
      ulCurrBuf = 0;
 800309e:	2300      	movs	r3, #0
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	e001      	b.n	80030a8 <DMA1_Stream7_IRQHandler+0x30>
      } else {
      ulCurrBuf = 1;
 80030a4:	2301      	movs	r3, #1
 80030a6:	60fb      	str	r3, [r7, #12]
      }

    }
  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80030a8:	4811      	ldr	r0, [pc, #68]	@ (80030f0 <DMA1_Stream7_IRQHandler+0x78>)
 80030aa:	f018 fae5 	bl	801b678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */
  /* xHigherPriorityTaskWoken must be initialised to pdFALSE. If calling
     xTaskNotifyFromISR() unblocks the handling task, and the priority of
     the handling task is higher than the priority of the currently running task,
     then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
  xHigherPriorityTaskWoken = pdFALSE;
 80030ae:	2300      	movs	r3, #0
 80030b0:	607b      	str	r3, [r7, #4]
  /* Unblock the handling task so the task can perform any processing necessitated
     by the interrupt. xHandlingTask is the task's handle, which was obtained
     when the task was created. The handling task's 0th notification value
     is bitwise ORed with the interrupt status - ensuring bits that are already
     set are not overwritten. */
  xTaskNotifyFromISR( vTCADCTCPTaskHandle,
 80030b2:	4b10      	ldr	r3, [pc, #64]	@ (80030f4 <DMA1_Stream7_IRQHandler+0x7c>)
 80030b4:	6818      	ldr	r0, [r3, #0]
 80030b6:	1d3b      	adds	r3, r7, #4
 80030b8:	9301      	str	r3, [sp, #4]
 80030ba:	2300      	movs	r3, #0
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	2301      	movs	r3, #1
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	2100      	movs	r1, #0
 80030c4:	f002 ff68 	bl	8005f98 <xTaskGenericNotifyFromISR>
			 &xHigherPriorityTaskWoken );

  /* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
     The macro used to do this is dependent on the port and may be called
     portEND_SWITCHING_ISR. */
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d007      	beq.n	80030de <DMA1_Stream7_IRQHandler+0x66>
 80030ce:	4b0a      	ldr	r3, [pc, #40]	@ (80030f8 <DMA1_Stream7_IRQHandler+0x80>)
 80030d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	f3bf 8f4f 	dsb	sy
 80030da:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80030de:	bf00      	nop
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40020000 	.word	0x40020000
 80030ec:	400200b8 	.word	0x400200b8
 80030f0:	20000380 	.word	0x20000380
 80030f4:	20000d3c 	.word	0x20000d3c
 80030f8:	e000ed04 	.word	0xe000ed04

080030fc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8003100:	4802      	ldr	r0, [pc, #8]	@ (800310c <SPI3_IRQHandler+0x10>)
 8003102:	f01c fe8d 	bl	801fe20 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8003106:	bf00      	nop
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	20000208 	.word	0x20000208

08003110 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  return 1;
 8003114:	2301      	movs	r3, #1
}
 8003116:	4618      	mov	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <_kill>:

int _kill(int pid, int sig)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800312a:	f020 fd9d 	bl	8023c68 <__errno>
 800312e:	4603      	mov	r3, r0
 8003130:	2216      	movs	r2, #22
 8003132:	601a      	str	r2, [r3, #0]
  return -1;
 8003134:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003138:	4618      	mov	r0, r3
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <_exit>:

void _exit (int status)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003148:	f04f 31ff 	mov.w	r1, #4294967295
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7ff ffe7 	bl	8003120 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003152:	bf00      	nop
 8003154:	e7fd      	b.n	8003152 <_exit+0x12>

08003156 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b086      	sub	sp, #24
 800315a:	af00      	add	r7, sp, #0
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003162:	2300      	movs	r3, #0
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	e00a      	b.n	800317e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003168:	f3af 8000 	nop.w
 800316c:	4601      	mov	r1, r0
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	1c5a      	adds	r2, r3, #1
 8003172:	60ba      	str	r2, [r7, #8]
 8003174:	b2ca      	uxtb	r2, r1
 8003176:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	3301      	adds	r3, #1
 800317c:	617b      	str	r3, [r7, #20]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	429a      	cmp	r2, r3
 8003184:	dbf0      	blt.n	8003168 <_read+0x12>
  }

  return len;
 8003186:	687b      	ldr	r3, [r7, #4]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]
 80031a0:	e009      	b.n	80031b6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	60ba      	str	r2, [r7, #8]
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	3301      	adds	r3, #1
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	dbf1      	blt.n	80031a2 <_write+0x12>
  }
  return len;
 80031be:	687b      	ldr	r3, [r7, #4]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3718      	adds	r7, #24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <_close>:

int _close(int file)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031f0:	605a      	str	r2, [r3, #4]
  return 0;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <_isatty>:

int _isatty(int file)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003208:	2301      	movs	r3, #1
}
 800320a:	4618      	mov	r0, r3
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003216:	b480      	push	{r7}
 8003218:	b085      	sub	sp, #20
 800321a:	af00      	add	r7, sp, #0
 800321c:	60f8      	str	r0, [r7, #12]
 800321e:	60b9      	str	r1, [r7, #8]
 8003220:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003238:	4a14      	ldr	r2, [pc, #80]	@ (800328c <_sbrk+0x5c>)
 800323a:	4b15      	ldr	r3, [pc, #84]	@ (8003290 <_sbrk+0x60>)
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003244:	4b13      	ldr	r3, [pc, #76]	@ (8003294 <_sbrk+0x64>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d102      	bne.n	8003252 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800324c:	4b11      	ldr	r3, [pc, #68]	@ (8003294 <_sbrk+0x64>)
 800324e:	4a12      	ldr	r2, [pc, #72]	@ (8003298 <_sbrk+0x68>)
 8003250:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003252:	4b10      	ldr	r3, [pc, #64]	@ (8003294 <_sbrk+0x64>)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4413      	add	r3, r2
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	429a      	cmp	r2, r3
 800325e:	d207      	bcs.n	8003270 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003260:	f020 fd02 	bl	8023c68 <__errno>
 8003264:	4603      	mov	r3, r0
 8003266:	220c      	movs	r2, #12
 8003268:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800326a:	f04f 33ff 	mov.w	r3, #4294967295
 800326e:	e009      	b.n	8003284 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003270:	4b08      	ldr	r3, [pc, #32]	@ (8003294 <_sbrk+0x64>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003276:	4b07      	ldr	r3, [pc, #28]	@ (8003294 <_sbrk+0x64>)
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4413      	add	r3, r2
 800327e:	4a05      	ldr	r2, [pc, #20]	@ (8003294 <_sbrk+0x64>)
 8003280:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003282:	68fb      	ldr	r3, [r7, #12]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	24080000 	.word	0x24080000
 8003290:	00000400 	.word	0x00000400
 8003294:	20000dc8 	.word	0x20000dc8
 8003298:	20002888 	.word	0x20002888

0800329c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80032a2:	4b3f      	ldr	r3, [pc, #252]	@ (80033a0 <SystemInit+0x104>)
 80032a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a8:	4a3d      	ldr	r2, [pc, #244]	@ (80033a0 <SystemInit+0x104>)
 80032aa:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032ae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80032b2:	4b3c      	ldr	r3, [pc, #240]	@ (80033a4 <SystemInit+0x108>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	2b06      	cmp	r3, #6
 80032bc:	d807      	bhi.n	80032ce <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80032be:	4b39      	ldr	r3, [pc, #228]	@ (80033a4 <SystemInit+0x108>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f023 030f 	bic.w	r3, r3, #15
 80032c6:	4a37      	ldr	r2, [pc, #220]	@ (80033a4 <SystemInit+0x108>)
 80032c8:	f043 0307 	orr.w	r3, r3, #7
 80032cc:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80032ce:	4b36      	ldr	r3, [pc, #216]	@ (80033a8 <SystemInit+0x10c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a35      	ldr	r2, [pc, #212]	@ (80033a8 <SystemInit+0x10c>)
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80032da:	4b33      	ldr	r3, [pc, #204]	@ (80033a8 <SystemInit+0x10c>)
 80032dc:	2200      	movs	r2, #0
 80032de:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80032e0:	4b31      	ldr	r3, [pc, #196]	@ (80033a8 <SystemInit+0x10c>)
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	4930      	ldr	r1, [pc, #192]	@ (80033a8 <SystemInit+0x10c>)
 80032e6:	4b31      	ldr	r3, [pc, #196]	@ (80033ac <SystemInit+0x110>)
 80032e8:	4013      	ands	r3, r2
 80032ea:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80032ec:	4b2d      	ldr	r3, [pc, #180]	@ (80033a4 <SystemInit+0x108>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d007      	beq.n	8003308 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80032f8:	4b2a      	ldr	r3, [pc, #168]	@ (80033a4 <SystemInit+0x108>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f023 030f 	bic.w	r3, r3, #15
 8003300:	4a28      	ldr	r2, [pc, #160]	@ (80033a4 <SystemInit+0x108>)
 8003302:	f043 0307 	orr.w	r3, r3, #7
 8003306:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003308:	4b27      	ldr	r3, [pc, #156]	@ (80033a8 <SystemInit+0x10c>)
 800330a:	2200      	movs	r2, #0
 800330c:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800330e:	4b26      	ldr	r3, [pc, #152]	@ (80033a8 <SystemInit+0x10c>)
 8003310:	2200      	movs	r2, #0
 8003312:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003314:	4b24      	ldr	r3, [pc, #144]	@ (80033a8 <SystemInit+0x10c>)
 8003316:	2200      	movs	r2, #0
 8003318:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800331a:	4b23      	ldr	r3, [pc, #140]	@ (80033a8 <SystemInit+0x10c>)
 800331c:	4a24      	ldr	r2, [pc, #144]	@ (80033b0 <SystemInit+0x114>)
 800331e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003320:	4b21      	ldr	r3, [pc, #132]	@ (80033a8 <SystemInit+0x10c>)
 8003322:	4a24      	ldr	r2, [pc, #144]	@ (80033b4 <SystemInit+0x118>)
 8003324:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003326:	4b20      	ldr	r3, [pc, #128]	@ (80033a8 <SystemInit+0x10c>)
 8003328:	4a23      	ldr	r2, [pc, #140]	@ (80033b8 <SystemInit+0x11c>)
 800332a:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800332c:	4b1e      	ldr	r3, [pc, #120]	@ (80033a8 <SystemInit+0x10c>)
 800332e:	2200      	movs	r2, #0
 8003330:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003332:	4b1d      	ldr	r3, [pc, #116]	@ (80033a8 <SystemInit+0x10c>)
 8003334:	4a20      	ldr	r2, [pc, #128]	@ (80033b8 <SystemInit+0x11c>)
 8003336:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003338:	4b1b      	ldr	r3, [pc, #108]	@ (80033a8 <SystemInit+0x10c>)
 800333a:	2200      	movs	r2, #0
 800333c:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800333e:	4b1a      	ldr	r3, [pc, #104]	@ (80033a8 <SystemInit+0x10c>)
 8003340:	4a1d      	ldr	r2, [pc, #116]	@ (80033b8 <SystemInit+0x11c>)
 8003342:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003344:	4b18      	ldr	r3, [pc, #96]	@ (80033a8 <SystemInit+0x10c>)
 8003346:	2200      	movs	r2, #0
 8003348:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800334a:	4b17      	ldr	r3, [pc, #92]	@ (80033a8 <SystemInit+0x10c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a16      	ldr	r2, [pc, #88]	@ (80033a8 <SystemInit+0x10c>)
 8003350:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003354:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003356:	4b14      	ldr	r3, [pc, #80]	@ (80033a8 <SystemInit+0x10c>)
 8003358:	2200      	movs	r2, #0
 800335a:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800335c:	4b17      	ldr	r3, [pc, #92]	@ (80033bc <SystemInit+0x120>)
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	4b17      	ldr	r3, [pc, #92]	@ (80033c0 <SystemInit+0x124>)
 8003362:	4013      	ands	r3, r2
 8003364:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003368:	d202      	bcs.n	8003370 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800336a:	4b16      	ldr	r3, [pc, #88]	@ (80033c4 <SystemInit+0x128>)
 800336c:	2201      	movs	r2, #1
 800336e:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8003370:	4b0d      	ldr	r3, [pc, #52]	@ (80033a8 <SystemInit+0x10c>)
 8003372:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003376:	4a0c      	ldr	r2, [pc, #48]	@ (80033a8 <SystemInit+0x10c>)
 8003378:	f043 4360 	orr.w	r3, r3, #3758096384	@ 0xe0000000
 800337c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8003380:	4b09      	ldr	r3, [pc, #36]	@ (80033a8 <SystemInit+0x10c>)
 8003382:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003386:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8003388:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800338a:	4b0f      	ldr	r3, [pc, #60]	@ (80033c8 <SystemInit+0x12c>)
 800338c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003390:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	e000ed00 	.word	0xe000ed00
 80033a4:	52002000 	.word	0x52002000
 80033a8:	58024400 	.word	0x58024400
 80033ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80033b0:	02020200 	.word	0x02020200
 80033b4:	01ff0000 	.word	0x01ff0000
 80033b8:	01010280 	.word	0x01010280
 80033bc:	5c001000 	.word	0x5c001000
 80033c0:	ffff0000 	.word	0xffff0000
 80033c4:	51008108 	.word	0x51008108
 80033c8:	52004000 	.word	0x52004000

080033cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80033cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003404 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80033d0:	f7ff ff64 	bl	800329c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033d4:	480c      	ldr	r0, [pc, #48]	@ (8003408 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80033d6:	490d      	ldr	r1, [pc, #52]	@ (800340c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80033d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003410 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80033da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033dc:	e002      	b.n	80033e4 <LoopCopyDataInit>

080033de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033e2:	3304      	adds	r3, #4

080033e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033e8:	d3f9      	bcc.n	80033de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003414 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80033ec:	4c0a      	ldr	r4, [pc, #40]	@ (8003418 <LoopFillZerobss+0x22>)
  movs r3, #0
 80033ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033f0:	e001      	b.n	80033f6 <LoopFillZerobss>

080033f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033f4:	3204      	adds	r2, #4

080033f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033f8:	d3fb      	bcc.n	80033f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033fa:	f020 fc3b 	bl	8023c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033fe:	f7fd f94f 	bl	80006a0 <main>
  bx  lr
 8003402:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003404:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800340c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003410:	08028240 	.word	0x08028240
  ldr r2, =_sbss
 8003414:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003418:	20002888 	.word	0x20002888

0800341c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800341c:	e7fe      	b.n	800341c <ADC3_IRQHandler>

0800341e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

        EventGroupHandle_t xEventGroupCreate( void )
        {
 800341e:	b580      	push	{r7, lr}
 8003420:	b082      	sub	sp, #8
 8003422:	af00      	add	r7, sp, #0
            traceENTER_xEventGroupCreate();

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8003424:	201c      	movs	r0, #28
 8003426:	f003 fabd 	bl	80069a4 <pvPortMalloc>
 800342a:	6078      	str	r0, [r7, #4]

            if( pxEventBits != NULL )
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d007      	beq.n	8003442 <xEventGroupCreate+0x24>
            {
                pxEventBits->uxEventBits = 0;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
                vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3304      	adds	r3, #4
 800343c:	4618      	mov	r0, r3
 800343e:	f000 f9c3 	bl	80037c8 <vListInitialise>
                traceEVENT_GROUP_CREATE_FAILED();
            }

            traceRETURN_xEventGroupCreate( pxEventBits );

            return pxEventBits;
 8003442:	687b      	ldr	r3, [r7, #4]
        }
 8003444:	4618      	mov	r0, r3
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <xEventGroupWaitBits>:
    EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                     const EventBits_t uxBitsToWaitFor,
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait )
    {
 800344c:	b580      	push	{r7, lr}
 800344e:	b08c      	sub	sp, #48	@ 0x30
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
 8003458:	603b      	str	r3, [r7, #0]
        EventGroup_t * pxEventBits = xEventGroup;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	627b      	str	r3, [r7, #36]	@ 0x24
        EventBits_t uxReturn, uxControlBits = 0;
 800345e:	2300      	movs	r3, #0
 8003460:	62bb      	str	r3, [r7, #40]	@ 0x28
        BaseType_t xWaitConditionMet, xAlreadyYielded;
        BaseType_t xTimeoutOccurred = pdFALSE;
 8003462:	2300      	movs	r3, #0
 8003464:	623b      	str	r3, [r7, #32]

        traceENTER_xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait );

        /* Check the user is not attempting to wait on the bits used by the kernel
         * itself, and that at least one bit is being requested. */
        configASSERT( xEventGroup );
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d104      	bne.n	8003476 <xEventGroupWaitBits+0x2a>
 800346c:	f240 1147 	movw	r1, #327	@ 0x147
 8003470:	4850      	ldr	r0, [pc, #320]	@ (80035b4 <xEventGroupWaitBits+0x168>)
 8003472:	f7fe fac9 	bl	8001a08 <vAssertCalled>
        configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800347c:	d304      	bcc.n	8003488 <xEventGroupWaitBits+0x3c>
 800347e:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8003482:	484c      	ldr	r0, [pc, #304]	@ (80035b4 <xEventGroupWaitBits+0x168>)
 8003484:	f7fe fac0 	bl	8001a08 <vAssertCalled>
        configASSERT( uxBitsToWaitFor != 0 );
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d104      	bne.n	8003498 <xEventGroupWaitBits+0x4c>
 800348e:	f240 1149 	movw	r1, #329	@ 0x149
 8003492:	4848      	ldr	r0, [pc, #288]	@ (80035b4 <xEventGroupWaitBits+0x168>)
 8003494:	f7fe fab8 	bl	8001a08 <vAssertCalled>
        #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003498:	f002 f926 	bl	80056e8 <xTaskGetSchedulerState>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d102      	bne.n	80034a8 <xEventGroupWaitBits+0x5c>
 80034a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <xEventGroupWaitBits+0x60>
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <xEventGroupWaitBits+0x62>
 80034ac:	2300      	movs	r3, #0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d104      	bne.n	80034bc <xEventGroupWaitBits+0x70>
 80034b2:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 80034b6:	483f      	ldr	r0, [pc, #252]	@ (80035b4 <xEventGroupWaitBits+0x168>)
 80034b8:	f7fe faa6 	bl	8001a08 <vAssertCalled>
        }
        #endif

        vTaskSuspendAll();
 80034bc:	f001 faf6 	bl	8004aac <vTaskSuspendAll>
        {
            const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80034c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	61fb      	str	r3, [r7, #28]

            /* Check to see if the wait condition is already met or not. */
            xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	68b9      	ldr	r1, [r7, #8]
 80034ca:	69f8      	ldr	r0, [r7, #28]
 80034cc:	f000 f95a 	bl	8003784 <prvTestWaitCondition>
 80034d0:	61b8      	str	r0, [r7, #24]

            if( xWaitConditionMet != pdFALSE )
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00e      	beq.n	80034f6 <xEventGroupWaitBits+0xaa>
            {
                /* The wait condition has already been met so there is no need to
                 * block. */
                uxReturn = uxCurrentEventBits;
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	62fb      	str	r3, [r7, #44]	@ 0x2c
                xTicksToWait = ( TickType_t ) 0;
 80034dc:	2300      	movs	r3, #0
 80034de:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Clear the wait bits if requested to do so. */
                if( xClearOnExit != pdFALSE )
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d028      	beq.n	8003538 <xEventGroupWaitBits+0xec>
                {
                    pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80034e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	43db      	mvns	r3, r3
 80034ee:	401a      	ands	r2, r3
 80034f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	e020      	b.n	8003538 <xEventGroupWaitBits+0xec>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( xTicksToWait == ( TickType_t ) 0 )
 80034f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d104      	bne.n	8003506 <xEventGroupWaitBits+0xba>
            {
                /* The wait condition has not been met, but no block time was
                 * specified, so just return the current value. */
                uxReturn = uxCurrentEventBits;
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                xTimeoutOccurred = pdTRUE;
 8003500:	2301      	movs	r3, #1
 8003502:	623b      	str	r3, [r7, #32]
 8003504:	e018      	b.n	8003538 <xEventGroupWaitBits+0xec>
            {
                /* The task is going to block to wait for its required bits to be
                 * set.  uxControlBits are used to remember the specified behaviour of
                 * this call to xEventGroupWaitBits() - for use when the event bits
                 * unblock the task. */
                if( xClearOnExit != pdFALSE )
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <xEventGroupWaitBits+0xc8>
                {
                    uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800350c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800350e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003512:	62bb      	str	r3, [r7, #40]	@ 0x28
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xWaitForAllBits != pdFALSE )
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <xEventGroupWaitBits+0xd6>
                {
                    uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800351a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800351c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003520:	62bb      	str	r3, [r7, #40]	@ 0x28
                }

                /* Store the bits that the calling task is waiting for in the
                 * task's event list item so the kernel knows when a match is
                 * found.  Then enter the blocked state. */
                vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8003522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003524:	1d18      	adds	r0, r3, #4
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800352a:	4313      	orrs	r3, r2
 800352c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800352e:	4619      	mov	r1, r3
 8003530:	f001 fda4 	bl	800507c <vTaskPlaceOnUnorderedEventList>

                /* This is obsolete as it will get set after the task unblocks, but
                 * some compilers mistakenly generate a warning about the variable
                 * being returned without being set if it is not done. */
                uxReturn = 0;
 8003534:	2300      	movs	r3, #0
 8003536:	62fb      	str	r3, [r7, #44]	@ 0x2c

                traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8003538:	f001 fac6 	bl	8004ac8 <xTaskResumeAll>
 800353c:	6178      	str	r0, [r7, #20]

        if( xTicksToWait != ( TickType_t ) 0 )
 800353e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003540:	2b00      	cmp	r3, #0
 8003542:	d031      	beq.n	80035a8 <xEventGroupWaitBits+0x15c>
        {
            if( xAlreadyYielded == pdFALSE )
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d107      	bne.n	800355a <xEventGroupWaitBits+0x10e>
            {
                taskYIELD_WITHIN_API();
 800354a:	4b1b      	ldr	r3, [pc, #108]	@ (80035b8 <xEventGroupWaitBits+0x16c>)
 800354c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	f3bf 8f4f 	dsb	sy
 8003556:	f3bf 8f6f 	isb	sy

            /* The task blocked to wait for its required bits to be set - at this
             * point either the required bits were set or the block time expired.  If
             * the required bits were set they will have been stored in the task's
             * event list item, and they should now be retrieved then cleared. */
            uxReturn = uxTaskResetEventItemValue();
 800355a:	f002 facf 	bl	8005afc <uxTaskResetEventItemValue>
 800355e:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8003560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d11a      	bne.n	80035a0 <xEventGroupWaitBits+0x154>
            {
                taskENTER_CRITICAL();
 800356a:	f003 f919 	bl	80067a0 <vPortEnterCritical>
                {
                    /* The task timed out, just return the current event bit value. */
                    uxReturn = pxEventBits->uxEventBits;
 800356e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* It is possible that the event bits were updated between this
                     * task leaving the Blocked state and running again. */
                    if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	68b9      	ldr	r1, [r7, #8]
 8003578:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800357a:	f000 f903 	bl	8003784 <prvTestWaitCondition>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d009      	beq.n	8003598 <xEventGroupWaitBits+0x14c>
                    {
                        if( xClearOnExit != pdFALSE )
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d006      	beq.n	8003598 <xEventGroupWaitBits+0x14c>
                        {
                            pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800358a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	43db      	mvns	r3, r3
 8003592:	401a      	ands	r2, r3
 8003594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003596:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xTimeoutOccurred = pdTRUE;
 8003598:	2301      	movs	r3, #1
 800359a:	623b      	str	r3, [r7, #32]
                }
                taskEXIT_CRITICAL();
 800359c:	f003 f92c 	bl	80067f8 <vPortExitCritical>
            {
                /* The task unblocked because the bits were set. */
            }

            /* The task blocked so control bits may have been set. */
            uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80035a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035a2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80035a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xTimeoutOccurred;

        traceRETURN_xEventGroupWaitBits( uxReturn );

        return uxReturn;
 80035a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 80035aa:	4618      	mov	r0, r3
 80035ac:	3730      	adds	r7, #48	@ 0x30
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	08024a90 	.word	0x08024a90
 80035b8:	e000ed04 	.word	0xe000ed04

080035bc <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                      const EventBits_t uxBitsToClear )
    {
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
        EventGroup_t * pxEventBits = xEventGroup;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	60fb      	str	r3, [r7, #12]

        traceENTER_xEventGroupClearBits( xEventGroup, uxBitsToClear );

        /* Check the user is not attempting to clear the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d104      	bne.n	80035da <xEventGroupClearBits+0x1e>
 80035d0:	f44f 71f1 	mov.w	r1, #482	@ 0x1e2
 80035d4:	480f      	ldr	r0, [pc, #60]	@ (8003614 <xEventGroupClearBits+0x58>)
 80035d6:	f7fe fa17 	bl	8001a08 <vAssertCalled>
        configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035e0:	d304      	bcc.n	80035ec <xEventGroupClearBits+0x30>
 80035e2:	f240 11e3 	movw	r1, #483	@ 0x1e3
 80035e6:	480b      	ldr	r0, [pc, #44]	@ (8003614 <xEventGroupClearBits+0x58>)
 80035e8:	f7fe fa0e 	bl	8001a08 <vAssertCalled>

        taskENTER_CRITICAL();
 80035ec:	f003 f8d8 	bl	80067a0 <vPortEnterCritical>
        {
            traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

            /* The value returned is the event group value prior to the bits being
             * cleared. */
            uxReturn = pxEventBits->uxEventBits;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60bb      	str	r3, [r7, #8]

            /* Clear the bits. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	43db      	mvns	r3, r3
 80035fe:	401a      	ands	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	601a      	str	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003604:	f003 f8f8 	bl	80067f8 <vPortExitCritical>

        traceRETURN_xEventGroupClearBits( uxReturn );

        return uxReturn;
 8003608:	68bb      	ldr	r3, [r7, #8]
    }
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	08024a90 	.word	0x08024a90

08003618 <xEventGroupSetBits>:
    }
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet )
    {
 8003618:	b580      	push	{r7, lr}
 800361a:	b08c      	sub	sp, #48	@ 0x30
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
        ListItem_t * pxListItem;
        ListItem_t * pxNext;
        ListItem_t const * pxListEnd;
        List_t const * pxList;
        EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8003622:	2300      	movs	r3, #0
 8003624:	62bb      	str	r3, [r7, #40]	@ 0x28
        EventGroup_t * pxEventBits = xEventGroup;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	623b      	str	r3, [r7, #32]
        BaseType_t xMatchFound = pdFALSE;
 800362a:	2300      	movs	r3, #0
 800362c:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xEventGroupSetBits( xEventGroup, uxBitsToSet );

        /* Check the user is not attempting to set the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d104      	bne.n	800363e <xEventGroupSetBits+0x26>
 8003634:	f240 2132 	movw	r1, #562	@ 0x232
 8003638:	4836      	ldr	r0, [pc, #216]	@ (8003714 <xEventGroupSetBits+0xfc>)
 800363a:	f7fe f9e5 	bl	8001a08 <vAssertCalled>
        configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003644:	d304      	bcc.n	8003650 <xEventGroupSetBits+0x38>
 8003646:	f240 2133 	movw	r1, #563	@ 0x233
 800364a:	4832      	ldr	r0, [pc, #200]	@ (8003714 <xEventGroupSetBits+0xfc>)
 800364c:	f7fe f9dc 	bl	8001a08 <vAssertCalled>

        pxList = &( pxEventBits->xTasksWaitingForBits );
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	3304      	adds	r3, #4
 8003654:	61fb      	str	r3, [r7, #28]
        pxListEnd = listGET_END_MARKER( pxList );
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	3308      	adds	r3, #8
 800365a:	61bb      	str	r3, [r7, #24]
        vTaskSuspendAll();
 800365c:	f001 fa26 	bl	8004aac <vTaskSuspendAll>
        {
            traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

            pxListItem = listGET_HEAD_ENTRY( pxList );
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Set the bits. */
            pxEventBits->uxEventBits |= uxBitsToSet;
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	431a      	orrs	r2, r3
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	601a      	str	r2, [r3, #0]

            /* See if the new bit value should unblock any tasks. */
            while( pxListItem != pxListEnd )
 8003672:	e03c      	b.n	80036ee <xEventGroupSetBits+0xd6>
            {
                pxNext = listGET_NEXT( pxListItem );
 8003674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	617b      	str	r3, [r7, #20]
                uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800367a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	613b      	str	r3, [r7, #16]
                xMatchFound = pdFALSE;
 8003680:	2300      	movs	r3, #0
 8003682:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Split the bits waited for from the control bits. */
                uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800368a:	60fb      	str	r3, [r7, #12]
                uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003692:	613b      	str	r3, [r7, #16]

                if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d108      	bne.n	80036b0 <xEventGroupSetBits+0x98>
                {
                    /* Just looking for single bit being set. */
                    if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4013      	ands	r3, r2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00b      	beq.n	80036c2 <xEventGroupSetBits+0xaa>
                    {
                        xMatchFound = pdTRUE;
 80036aa:	2301      	movs	r3, #1
 80036ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80036ae:	e008      	b.n	80036c2 <xEventGroupSetBits+0xaa>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	4013      	ands	r3, r2
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d101      	bne.n	80036c2 <xEventGroupSetBits+0xaa>
                {
                    /* All bits are set. */
                    xMatchFound = pdTRUE;
 80036be:	2301      	movs	r3, #1
 80036c0:	627b      	str	r3, [r7, #36]	@ 0x24
                else
                {
                    /* Need all bits to be set, but not all the bits were set. */
                }

                if( xMatchFound != pdFALSE )
 80036c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d010      	beq.n	80036ea <xEventGroupSetBits+0xd2>
                {
                    /* The bits match.  Should the bits be cleared on exit? */
                    if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <xEventGroupSetBits+0xc2>
                    {
                        uxBitsToClear |= uxBitsWaitedFor;
 80036d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	62bb      	str	r3, [r7, #40]	@ 0x28
                    /* Store the actual event flag value in the task's event list
                     * item before removing the task from the event list.  The
                     * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                     * that is was unblocked due to its required bits matching, rather
                     * than because it timed out. */
                    vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036e2:	4619      	mov	r1, r3
 80036e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80036e6:	f001 fde7 	bl	80052b8 <vTaskRemoveFromUnorderedEventList>
                }

                /* Move onto the next list item.  Note pxListItem->pxNext is not
                 * used here as the list item may have been removed from the event list
                 * and inserted into the ready/pending reading list. */
                pxListItem = pxNext;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while( pxListItem != pxListEnd )
 80036ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d1be      	bne.n	8003674 <xEventGroupSetBits+0x5c>
            }

            /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
             * bit was set in the control word. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036fc:	43db      	mvns	r3, r3
 80036fe:	401a      	ands	r2, r3
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	601a      	str	r2, [r3, #0]
        }
        ( void ) xTaskResumeAll();
 8003704:	f001 f9e0 	bl	8004ac8 <xTaskResumeAll>

        traceRETURN_xEventGroupSetBits( pxEventBits->uxEventBits );

        return pxEventBits->uxEventBits;
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	681b      	ldr	r3, [r3, #0]
    }
 800370c:	4618      	mov	r0, r3
 800370e:	3730      	adds	r7, #48	@ 0x30
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	08024a90 	.word	0x08024a90

08003718 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

    void vEventGroupDelete( EventGroupHandle_t xEventGroup )
    {
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
        EventGroup_t * pxEventBits = xEventGroup;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	60fb      	str	r3, [r7, #12]
        const List_t * pxTasksWaitingForBits;

        traceENTER_vEventGroupDelete( xEventGroup );

        configASSERT( pxEventBits );
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d104      	bne.n	8003734 <vEventGroupDelete+0x1c>
 800372a:	f240 218e 	movw	r1, #654	@ 0x28e
 800372e:	4814      	ldr	r0, [pc, #80]	@ (8003780 <vEventGroupDelete+0x68>)
 8003730:	f7fe f96a 	bl	8001a08 <vAssertCalled>

        pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	3304      	adds	r3, #4
 8003738:	60bb      	str	r3, [r7, #8]

        vTaskSuspendAll();
 800373a:	f001 f9b7 	bl	8004aac <vTaskSuspendAll>
        {
            traceEVENT_GROUP_DELETE( xEventGroup );

            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 800373e:	e011      	b.n	8003764 <vEventGroupDelete+0x4c>
            {
                /* Unblock the task, returning 0 as the event list is being deleted
                 * and cannot therefore have any bits set. */
                configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	3308      	adds	r3, #8
 8003748:	429a      	cmp	r2, r3
 800374a:	d104      	bne.n	8003756 <vEventGroupDelete+0x3e>
 800374c:	f240 219a 	movw	r1, #666	@ 0x29a
 8003750:	480b      	ldr	r0, [pc, #44]	@ (8003780 <vEventGroupDelete+0x68>)
 8003752:	f7fe f959 	bl	8001a08 <vAssertCalled>
                vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800375e:	4618      	mov	r0, r3
 8003760:	f001 fdaa 	bl	80052b8 <vTaskRemoveFromUnorderedEventList>
            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1e9      	bne.n	8003740 <vEventGroupDelete+0x28>
            }
        }
        ( void ) xTaskResumeAll();
 800376c:	f001 f9ac 	bl	8004ac8 <xTaskResumeAll>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
        {
            /* The event group can only have been allocated dynamically - free
             * it again. */
            vPortFree( pxEventBits );
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f003 f9eb 	bl	8006b4c <vPortFree>
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

        traceRETURN_vEventGroupDelete();
    }
 8003776:	bf00      	nop
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	08024a90 	.word	0x08024a90

08003784 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

    static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                            const EventBits_t uxBitsToWaitFor,
                                            const BaseType_t xWaitForAllBits )
    {
 8003784:	b480      	push	{r7}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
        BaseType_t xWaitConditionMet = pdFALSE;
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]

        if( xWaitForAllBits == pdFALSE )
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d107      	bne.n	80037aa <prvTestWaitCondition+0x26>
        {
            /* Task only has to wait for one bit within uxBitsToWaitFor to be
             * set.  Is one already set? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4013      	ands	r3, r2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 80037a4:	2301      	movs	r3, #1
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	e007      	b.n	80037ba <prvTestWaitCondition+0x36>
        }
        else
        {
            /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
             * Are they set already? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4013      	ands	r3, r2
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d101      	bne.n	80037ba <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 80037b6:	2301      	movs	r3, #1
 80037b8:	617b      	str	r3, [r7, #20]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        return xWaitConditionMet;
 80037ba:	697b      	ldr	r3, [r7, #20]
    }
 80037bc:	4618      	mov	r0, r3
 80037be:	371c      	adds	r7, #28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f103 0208 	add.w	r2, r3, #8
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f04f 32ff 	mov.w	r2, #4294967295
 80037e0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f103 0208 	add.w	r2, r3, #8
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f103 0208 	add.w	r2, r3, #8
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003822:	b480      	push	{r7}
 8003824:	b085      	sub	sp, #20
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
 800382a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	1c5a      	adds	r2, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 800385e:	bf00      	nop
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800386a:	b480      	push	{r7}
 800386c:	b085      	sub	sp, #20
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003880:	d103      	bne.n	800388a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	e00c      	b.n	80038a4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3308      	adds	r3, #8
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	e002      	b.n	8003898 <vListInsert+0x2e>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d2f6      	bcs.n	8003892 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	1c5a      	adds	r2, r3, #1
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 80038d0:	bf00      	nop
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6892      	ldr	r2, [r2, #8]
 80038f2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6852      	ldr	r2, [r2, #4]
 80038fc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	429a      	cmp	r2, r3
 8003906:	d103      	bne.n	8003910 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	1e5a      	subs	r2, r3, #1
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800393a:	2301      	movs	r3, #1
 800393c:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	60bb      	str	r3, [r7, #8]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d104      	bne.n	8003952 <xQueueGenericReset+0x22>
 8003948:	f240 1137 	movw	r1, #311	@ 0x137
 800394c:	4839      	ldr	r0, [pc, #228]	@ (8003a34 <xQueueGenericReset+0x104>)
 800394e:	f7fe f85b 	bl	8001a08 <vAssertCalled>

    if( ( pxQueue != NULL ) &&
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d05d      	beq.n	8003a14 <xQueueGenericReset+0xe4>
        ( pxQueue->uxLength >= 1U ) &&
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800395c:	2b00      	cmp	r3, #0
 800395e:	d059      	beq.n	8003a14 <xQueueGenericReset+0xe4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003968:	2100      	movs	r1, #0
 800396a:	fba3 2302 	umull	r2, r3, r3, r2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d000      	beq.n	8003974 <xQueueGenericReset+0x44>
 8003972:	2101      	movs	r1, #1
 8003974:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8003976:	2b00      	cmp	r3, #0
 8003978:	d14c      	bne.n	8003a14 <xQueueGenericReset+0xe4>
    {
        taskENTER_CRITICAL();
 800397a:	f002 ff11 	bl	80067a0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003986:	68b9      	ldr	r1, [r7, #8]
 8003988:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800398a:	fb01 f303 	mul.w	r3, r1, r3
 800398e:	441a      	add	r2, r3
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2200      	movs	r2, #0
 8003998:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039aa:	3b01      	subs	r3, #1
 80039ac:	68b9      	ldr	r1, [r7, #8]
 80039ae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80039b0:	fb01 f303 	mul.w	r3, r1, r3
 80039b4:	441a      	add	r2, r3
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	22ff      	movs	r2, #255	@ 0xff
 80039be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	22ff      	movs	r2, #255	@ 0xff
 80039c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d114      	bne.n	80039fa <xQueueGenericReset+0xca>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d01a      	beq.n	8003a0e <xQueueGenericReset+0xde>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	3310      	adds	r3, #16
 80039dc:	4618      	mov	r0, r3
 80039de:	f001 fb99 	bl	8005114 <xTaskRemoveFromEventList>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d012      	beq.n	8003a0e <xQueueGenericReset+0xde>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80039e8:	4b13      	ldr	r3, [pc, #76]	@ (8003a38 <xQueueGenericReset+0x108>)
 80039ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	f3bf 8f6f 	isb	sy
 80039f8:	e009      	b.n	8003a0e <xQueueGenericReset+0xde>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	3310      	adds	r3, #16
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff fee2 	bl	80037c8 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	3324      	adds	r3, #36	@ 0x24
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff fedd 	bl	80037c8 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8003a0e:	f002 fef3 	bl	80067f8 <vPortExitCritical>
 8003a12:	e001      	b.n	8003a18 <xQueueGenericReset+0xe8>
    }
    else
    {
        xReturn = pdFAIL;
 8003a14:	2300      	movs	r3, #0
 8003a16:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d104      	bne.n	8003a28 <xQueueGenericReset+0xf8>
 8003a1e:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8003a22:	4804      	ldr	r0, [pc, #16]	@ (8003a34 <xQueueGenericReset+0x104>)
 8003a24:	f7fd fff0 	bl	8001a08 <vAssertCalled>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8003a28:	68fb      	ldr	r3, [r7, #12]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	08024abc 	.word	0x08024abc
 8003a38:	e000ed04 	.word	0xe000ed04

08003a3c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08a      	sub	sp, #40	@ 0x28
 8003a40:	af02      	add	r7, sp, #8
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	4613      	mov	r3, r2
 8003a48:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d02e      	beq.n	8003ab2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003a54:	2100      	movs	r1, #0
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d000      	beq.n	8003a64 <xQueueGenericCreate+0x28>
 8003a62:	2101      	movs	r1, #1
 8003a64:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d123      	bne.n	8003ab2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003a72:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8003a76:	d81c      	bhi.n	8003ab2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	fb02 f303 	mul.w	r3, r2, r3
 8003a80:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	3350      	adds	r3, #80	@ 0x50
 8003a86:	4618      	mov	r0, r3
 8003a88:	f002 ff8c 	bl	80069a4 <pvPortMalloc>
 8003a8c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d016      	beq.n	8003ac2 <xQueueGenericCreate+0x86>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	3350      	adds	r3, #80	@ 0x50
 8003a9c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a9e:	79fa      	ldrb	r2, [r7, #7]
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	68b9      	ldr	r1, [r7, #8]
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 f810 	bl	8003ad0 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003ab0:	e007      	b.n	8003ac2 <xQueueGenericCreate+0x86>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d104      	bne.n	8003ac2 <xQueueGenericCreate+0x86>
 8003ab8:	f240 212a 	movw	r1, #554	@ 0x22a
 8003abc:	4803      	ldr	r0, [pc, #12]	@ (8003acc <xQueueGenericCreate+0x90>)
 8003abe:	f7fd ffa3 	bl	8001a08 <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8003ac2:	69fb      	ldr	r3, [r7, #28]
    }
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3720      	adds	r7, #32
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	08024abc 	.word	0x08024abc

08003ad0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d103      	bne.n	8003aec <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	e002      	b.n	8003af2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003afe:	2101      	movs	r1, #1
 8003b00:	69b8      	ldr	r0, [r7, #24]
 8003b02:	f7ff ff15 	bl	8003930 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	78fa      	ldrb	r2, [r7, #3]
 8003b0a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003b0e:	bf00      	nop
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b082      	sub	sp, #8
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00e      	beq.n	8003b42 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003b36:	2300      	movs	r3, #0
 8003b38:	2200      	movs	r2, #0
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f847 	bl	8003bd0 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8003b42:	bf00      	nop
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b086      	sub	sp, #24
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	4603      	mov	r3, r0
 8003b52:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003b54:	2301      	movs	r3, #1
 8003b56:	617b      	str	r3, [r7, #20]
 8003b58:	2300      	movs	r3, #0
 8003b5a:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueCreateMutex( ucQueueType );

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003b5c:	79fb      	ldrb	r3, [r7, #7]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	6939      	ldr	r1, [r7, #16]
 8003b62:	6978      	ldr	r0, [r7, #20]
 8003b64:	f7ff ff6a 	bl	8003a3c <xQueueGenericCreate>
 8003b68:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f7ff ffd3 	bl	8003b16 <prvInitialiseMutex>

        traceRETURN_xQueueCreateMutex( xNewQueue );

        return xNewQueue;
 8003b70:	68fb      	ldr	r3, [r7, #12]
    }
 8003b72:	4618      	mov	r0, r3
 8003b74:	3718      	adds	r7, #24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
	...

08003b7c <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]

        traceENTER_xQueueCreateCountingSemaphore( uxMaxCount, uxInitialCount );

        if( ( uxMaxCount != 0U ) &&
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d010      	beq.n	8003bb2 <xQueueCreateCountingSemaphore+0x36>
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d80c      	bhi.n	8003bb2 <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003b98:	2202      	movs	r2, #2
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff ff4d 	bl	8003a3c <xQueueGenericCreate>
 8003ba2:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00b      	beq.n	8003bc2 <xQueueCreateCountingSemaphore+0x46>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 8003bb0:	e007      	b.n	8003bc2 <xQueueCreateCountingSemaphore+0x46>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d104      	bne.n	8003bc2 <xQueueCreateCountingSemaphore+0x46>
 8003bb8:	f240 319f 	movw	r1, #927	@ 0x39f
 8003bbc:	4803      	ldr	r0, [pc, #12]	@ (8003bcc <xQueueCreateCountingSemaphore+0x50>)
 8003bbe:	f7fd ff23 	bl	8001a08 <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueCreateCountingSemaphore( xHandle );

        return xHandle;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
    }
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	08024abc 	.word	0x08024abc

08003bd0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08a      	sub	sp, #40	@ 0x28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
 8003bdc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003bde:	2300      	movs	r3, #0
 8003be0:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	623b      	str	r3, [r7, #32]

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 8003be6:	6a3b      	ldr	r3, [r7, #32]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d104      	bne.n	8003bf6 <xQueueGenericSend+0x26>
 8003bec:	f240 31b6 	movw	r1, #950	@ 0x3b6
 8003bf0:	4869      	ldr	r0, [pc, #420]	@ (8003d98 <xQueueGenericSend+0x1c8>)
 8003bf2:	f7fd ff09 	bl	8001a08 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d103      	bne.n	8003c04 <xQueueGenericSend+0x34>
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <xQueueGenericSend+0x38>
 8003c04:	2301      	movs	r3, #1
 8003c06:	e000      	b.n	8003c0a <xQueueGenericSend+0x3a>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d104      	bne.n	8003c18 <xQueueGenericSend+0x48>
 8003c0e:	f240 31b7 	movw	r1, #951	@ 0x3b7
 8003c12:	4861      	ldr	r0, [pc, #388]	@ (8003d98 <xQueueGenericSend+0x1c8>)
 8003c14:	f7fd fef8 	bl	8001a08 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d103      	bne.n	8003c26 <xQueueGenericSend+0x56>
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <xQueueGenericSend+0x5a>
 8003c26:	2301      	movs	r3, #1
 8003c28:	e000      	b.n	8003c2c <xQueueGenericSend+0x5c>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d104      	bne.n	8003c3a <xQueueGenericSend+0x6a>
 8003c30:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
 8003c34:	4858      	ldr	r0, [pc, #352]	@ (8003d98 <xQueueGenericSend+0x1c8>)
 8003c36:	f7fd fee7 	bl	8001a08 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c3a:	f001 fd55 	bl	80056e8 <xTaskGetSchedulerState>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d102      	bne.n	8003c4a <xQueueGenericSend+0x7a>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <xQueueGenericSend+0x7e>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e000      	b.n	8003c50 <xQueueGenericSend+0x80>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d104      	bne.n	8003c5e <xQueueGenericSend+0x8e>
 8003c54:	f240 31bb 	movw	r1, #955	@ 0x3bb
 8003c58:	484f      	ldr	r0, [pc, #316]	@ (8003d98 <xQueueGenericSend+0x1c8>)
 8003c5a:	f7fd fed5 	bl	8001a08 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003c5e:	f002 fd9f 	bl	80067a0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d302      	bcc.n	8003c74 <xQueueGenericSend+0xa4>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d129      	bne.n	8003cc8 <xQueueGenericSend+0xf8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	68b9      	ldr	r1, [r7, #8]
 8003c78:	6a38      	ldr	r0, [r7, #32]
 8003c7a:	f000 fabb 	bl	80041f4 <prvCopyDataToQueue>
 8003c7e:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d010      	beq.n	8003caa <xQueueGenericSend+0xda>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	3324      	adds	r3, #36	@ 0x24
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f001 fa41 	bl	8005114 <xTaskRemoveFromEventList>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d013      	beq.n	8003cc0 <xQueueGenericSend+0xf0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003c98:	4b40      	ldr	r3, [pc, #256]	@ (8003d9c <xQueueGenericSend+0x1cc>)
 8003c9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	e00a      	b.n	8003cc0 <xQueueGenericSend+0xf0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d007      	beq.n	8003cc0 <xQueueGenericSend+0xf0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8003cb0:	4b3a      	ldr	r3, [pc, #232]	@ (8003d9c <xQueueGenericSend+0x1cc>)
 8003cb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003cc0:	f002 fd9a 	bl	80067f8 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e063      	b.n	8003d90 <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d103      	bne.n	8003cd6 <xQueueGenericSend+0x106>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003cce:	f002 fd93 	bl	80067f8 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	e05c      	b.n	8003d90 <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d106      	bne.n	8003cea <xQueueGenericSend+0x11a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003cdc:	f107 0314 	add.w	r3, r7, #20
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f001 fbc1 	bl	8005468 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003cea:	f002 fd85 	bl	80067f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003cee:	f000 fedd 	bl	8004aac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003cf2:	f002 fd55 	bl	80067a0 <vPortEnterCritical>
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cfc:	b25b      	sxtb	r3, r3
 8003cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d02:	d103      	bne.n	8003d0c <xQueueGenericSend+0x13c>
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d12:	b25b      	sxtb	r3, r3
 8003d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d18:	d103      	bne.n	8003d22 <xQueueGenericSend+0x152>
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d22:	f002 fd69 	bl	80067f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d26:	1d3a      	adds	r2, r7, #4
 8003d28:	f107 0314 	add.w	r3, r7, #20
 8003d2c:	4611      	mov	r1, r2
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f001 fbb0 	bl	8005494 <xTaskCheckForTimeOut>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d124      	bne.n	8003d84 <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003d3a:	6a38      	ldr	r0, [r7, #32]
 8003d3c:	f000 fb52 	bl	80043e4 <prvIsQueueFull>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d018      	beq.n	8003d78 <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	3310      	adds	r3, #16
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	4611      	mov	r1, r2
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f001 f974 	bl	800503c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003d54:	6a38      	ldr	r0, [r7, #32]
 8003d56:	f000 fadd 	bl	8004314 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003d5a:	f000 feb5 	bl	8004ac8 <xTaskResumeAll>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f47f af7c 	bne.w	8003c5e <xQueueGenericSend+0x8e>
                {
                    taskYIELD_WITHIN_API();
 8003d66:	4b0d      	ldr	r3, [pc, #52]	@ (8003d9c <xQueueGenericSend+0x1cc>)
 8003d68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	e772      	b.n	8003c5e <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003d78:	6a38      	ldr	r0, [r7, #32]
 8003d7a:	f000 facb 	bl	8004314 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003d7e:	f000 fea3 	bl	8004ac8 <xTaskResumeAll>
 8003d82:	e76c      	b.n	8003c5e <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003d84:	6a38      	ldr	r0, [r7, #32]
 8003d86:	f000 fac5 	bl	8004314 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003d8a:	f000 fe9d 	bl	8004ac8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8003d8e:	2300      	movs	r3, #0
        }
    }
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3728      	adds	r7, #40	@ 0x28
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	08024abc 	.word	0x08024abc
 8003d9c:	e000ed04 	.word	0xe000ed04

08003da0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b08a      	sub	sp, #40	@ 0x28
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003dac:	2300      	movs	r3, #0
 8003dae:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	623b      	str	r3, [r7, #32]

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d104      	bne.n	8003dc4 <xQueueReceive+0x24>
 8003dba:	f240 51e9 	movw	r1, #1513	@ 0x5e9
 8003dbe:	485e      	ldr	r0, [pc, #376]	@ (8003f38 <xQueueReceive+0x198>)
 8003dc0:	f7fd fe22 	bl	8001a08 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d103      	bne.n	8003dd2 <xQueueReceive+0x32>
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <xQueueReceive+0x36>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e000      	b.n	8003dd8 <xQueueReceive+0x38>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d104      	bne.n	8003de6 <xQueueReceive+0x46>
 8003ddc:	f240 51ed 	movw	r1, #1517	@ 0x5ed
 8003de0:	4855      	ldr	r0, [pc, #340]	@ (8003f38 <xQueueReceive+0x198>)
 8003de2:	f7fd fe11 	bl	8001a08 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003de6:	f001 fc7f 	bl	80056e8 <xTaskGetSchedulerState>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d102      	bne.n	8003df6 <xQueueReceive+0x56>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <xQueueReceive+0x5a>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <xQueueReceive+0x5c>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d104      	bne.n	8003e0a <xQueueReceive+0x6a>
 8003e00:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 8003e04:	484c      	ldr	r0, [pc, #304]	@ (8003f38 <xQueueReceive+0x198>)
 8003e06:	f7fd fdff 	bl	8001a08 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003e0a:	f002 fcc9 	bl	80067a0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e12:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d01f      	beq.n	8003e5a <xQueueReceive+0xba>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e1a:	68b9      	ldr	r1, [r7, #8]
 8003e1c:	6a38      	ldr	r0, [r7, #32]
 8003e1e:	f000 fa53 	bl	80042c8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	1e5a      	subs	r2, r3, #1
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00f      	beq.n	8003e52 <xQueueReceive+0xb2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	3310      	adds	r3, #16
 8003e36:	4618      	mov	r0, r3
 8003e38:	f001 f96c 	bl	8005114 <xTaskRemoveFromEventList>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d007      	beq.n	8003e52 <xQueueReceive+0xb2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003e42:	4b3e      	ldr	r3, [pc, #248]	@ (8003f3c <xQueueReceive+0x19c>)
 8003e44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003e52:	f002 fcd1 	bl	80067f8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e069      	b.n	8003f2e <xQueueReceive+0x18e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d103      	bne.n	8003e68 <xQueueReceive+0xc8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003e60:	f002 fcca 	bl	80067f8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8003e64:	2300      	movs	r3, #0
 8003e66:	e062      	b.n	8003f2e <xQueueReceive+0x18e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d106      	bne.n	8003e7c <xQueueReceive+0xdc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003e6e:	f107 0314 	add.w	r3, r7, #20
 8003e72:	4618      	mov	r0, r3
 8003e74:	f001 faf8 	bl	8005468 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003e7c:	f002 fcbc 	bl	80067f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003e80:	f000 fe14 	bl	8004aac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003e84:	f002 fc8c 	bl	80067a0 <vPortEnterCritical>
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e8e:	b25b      	sxtb	r3, r3
 8003e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e94:	d103      	bne.n	8003e9e <xQueueReceive+0xfe>
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e9e:	6a3b      	ldr	r3, [r7, #32]
 8003ea0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ea4:	b25b      	sxtb	r3, r3
 8003ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eaa:	d103      	bne.n	8003eb4 <xQueueReceive+0x114>
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003eb4:	f002 fca0 	bl	80067f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003eb8:	1d3a      	adds	r2, r7, #4
 8003eba:	f107 0314 	add.w	r3, r7, #20
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f001 fae7 	bl	8005494 <xTaskCheckForTimeOut>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d123      	bne.n	8003f14 <xQueueReceive+0x174>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ecc:	6a38      	ldr	r0, [r7, #32]
 8003ece:	f000 fa73 	bl	80043b8 <prvIsQueueEmpty>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d017      	beq.n	8003f08 <xQueueReceive+0x168>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	3324      	adds	r3, #36	@ 0x24
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	4611      	mov	r1, r2
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f001 f8ab 	bl	800503c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003ee6:	6a38      	ldr	r0, [r7, #32]
 8003ee8:	f000 fa14 	bl	8004314 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003eec:	f000 fdec 	bl	8004ac8 <xTaskResumeAll>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d189      	bne.n	8003e0a <xQueueReceive+0x6a>
                {
                    taskYIELD_WITHIN_API();
 8003ef6:	4b11      	ldr	r3, [pc, #68]	@ (8003f3c <xQueueReceive+0x19c>)
 8003ef8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	f3bf 8f6f 	isb	sy
 8003f06:	e780      	b.n	8003e0a <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003f08:	6a38      	ldr	r0, [r7, #32]
 8003f0a:	f000 fa03 	bl	8004314 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003f0e:	f000 fddb 	bl	8004ac8 <xTaskResumeAll>
 8003f12:	e77a      	b.n	8003e0a <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003f14:	6a38      	ldr	r0, [r7, #32]
 8003f16:	f000 f9fd 	bl	8004314 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003f1a:	f000 fdd5 	bl	8004ac8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f1e:	6a38      	ldr	r0, [r7, #32]
 8003f20:	f000 fa4a 	bl	80043b8 <prvIsQueueEmpty>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f43f af6f 	beq.w	8003e0a <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8003f2c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3728      	adds	r7, #40	@ 0x28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	08024abc 	.word	0x08024abc
 8003f3c:	e000ed04 	.word	0xe000ed04

08003f40 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08a      	sub	sp, #40	@ 0x28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003f52:	2300      	movs	r3, #0
 8003f54:	623b      	str	r3, [r7, #32]
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d104      	bne.n	8003f66 <xQueueSemaphoreTake+0x26>
 8003f5c:	f240 6182 	movw	r1, #1666	@ 0x682
 8003f60:	486c      	ldr	r0, [pc, #432]	@ (8004114 <xQueueSemaphoreTake+0x1d4>)
 8003f62:	f7fd fd51 	bl	8001a08 <vAssertCalled>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d004      	beq.n	8003f78 <xQueueSemaphoreTake+0x38>
 8003f6e:	f240 6186 	movw	r1, #1670	@ 0x686
 8003f72:	4868      	ldr	r0, [pc, #416]	@ (8004114 <xQueueSemaphoreTake+0x1d4>)
 8003f74:	f7fd fd48 	bl	8001a08 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f78:	f001 fbb6 	bl	80056e8 <xTaskGetSchedulerState>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d102      	bne.n	8003f88 <xQueueSemaphoreTake+0x48>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <xQueueSemaphoreTake+0x4c>
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e000      	b.n	8003f8e <xQueueSemaphoreTake+0x4e>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d104      	bne.n	8003f9c <xQueueSemaphoreTake+0x5c>
 8003f92:	f240 618b 	movw	r1, #1675	@ 0x68b
 8003f96:	485f      	ldr	r0, [pc, #380]	@ (8004114 <xQueueSemaphoreTake+0x1d4>)
 8003f98:	f7fd fd36 	bl	8001a08 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003f9c:	f002 fc00 	bl	80067a0 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa4:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d024      	beq.n	8003ff6 <xQueueSemaphoreTake+0xb6>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	1e5a      	subs	r2, r3, #1
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d104      	bne.n	8003fc6 <xQueueSemaphoreTake+0x86>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003fbc:	f001 fdb6 	bl	8005b2c <pvTaskIncrementMutexHeldCount>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00f      	beq.n	8003fee <xQueueSemaphoreTake+0xae>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	3310      	adds	r3, #16
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f001 f89e 	bl	8005114 <xTaskRemoveFromEventList>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d007      	beq.n	8003fee <xQueueSemaphoreTake+0xae>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003fde:	4b4e      	ldr	r3, [pc, #312]	@ (8004118 <xQueueSemaphoreTake+0x1d8>)
 8003fe0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003fee:	f002 fc03 	bl	80067f8 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e089      	b.n	800410a <xQueueSemaphoreTake+0x1ca>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d103      	bne.n	8004004 <xQueueSemaphoreTake+0xc4>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003ffc:	f002 fbfc 	bl	80067f8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8004000:	2300      	movs	r3, #0
 8004002:	e082      	b.n	800410a <xQueueSemaphoreTake+0x1ca>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004006:	2b00      	cmp	r3, #0
 8004008:	d106      	bne.n	8004018 <xQueueSemaphoreTake+0xd8>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800400a:	f107 030c 	add.w	r3, r7, #12
 800400e:	4618      	mov	r0, r3
 8004010:	f001 fa2a 	bl	8005468 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004014:	2301      	movs	r3, #1
 8004016:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004018:	f002 fbee 	bl	80067f8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800401c:	f000 fd46 	bl	8004aac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004020:	f002 fbbe 	bl	80067a0 <vPortEnterCritical>
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800402a:	b25b      	sxtb	r3, r3
 800402c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004030:	d103      	bne.n	800403a <xQueueSemaphoreTake+0xfa>
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004040:	b25b      	sxtb	r3, r3
 8004042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004046:	d103      	bne.n	8004050 <xQueueSemaphoreTake+0x110>
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004050:	f002 fbd2 	bl	80067f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004054:	463a      	mov	r2, r7
 8004056:	f107 030c 	add.w	r3, r7, #12
 800405a:	4611      	mov	r1, r2
 800405c:	4618      	mov	r0, r3
 800405e:	f001 fa19 	bl	8005494 <xTaskCheckForTimeOut>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d132      	bne.n	80040ce <xQueueSemaphoreTake+0x18e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004068:	69f8      	ldr	r0, [r7, #28]
 800406a:	f000 f9a5 	bl	80043b8 <prvIsQueueEmpty>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d026      	beq.n	80040c2 <xQueueSemaphoreTake+0x182>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d109      	bne.n	8004090 <xQueueSemaphoreTake+0x150>
                    {
                        taskENTER_CRITICAL();
 800407c:	f002 fb90 	bl	80067a0 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	4618      	mov	r0, r3
 8004086:	f001 fb4d 	bl	8005724 <xTaskPriorityInherit>
 800408a:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 800408c:	f002 fbb4 	bl	80067f8 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	3324      	adds	r3, #36	@ 0x24
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	4611      	mov	r1, r2
 8004098:	4618      	mov	r0, r3
 800409a:	f000 ffcf 	bl	800503c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800409e:	69f8      	ldr	r0, [r7, #28]
 80040a0:	f000 f938 	bl	8004314 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80040a4:	f000 fd10 	bl	8004ac8 <xTaskResumeAll>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f47f af76 	bne.w	8003f9c <xQueueSemaphoreTake+0x5c>
                {
                    taskYIELD_WITHIN_API();
 80040b0:	4b19      	ldr	r3, [pc, #100]	@ (8004118 <xQueueSemaphoreTake+0x1d8>)
 80040b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	f3bf 8f6f 	isb	sy
 80040c0:	e76c      	b.n	8003f9c <xQueueSemaphoreTake+0x5c>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80040c2:	69f8      	ldr	r0, [r7, #28]
 80040c4:	f000 f926 	bl	8004314 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80040c8:	f000 fcfe 	bl	8004ac8 <xTaskResumeAll>
 80040cc:	e766      	b.n	8003f9c <xQueueSemaphoreTake+0x5c>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80040ce:	69f8      	ldr	r0, [r7, #28]
 80040d0:	f000 f920 	bl	8004314 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80040d4:	f000 fcf8 	bl	8004ac8 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040d8:	69f8      	ldr	r0, [r7, #28]
 80040da:	f000 f96d 	bl	80043b8 <prvIsQueueEmpty>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f43f af5b 	beq.w	8003f9c <xQueueSemaphoreTake+0x5c>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00d      	beq.n	8004108 <xQueueSemaphoreTake+0x1c8>
                    {
                        taskENTER_CRITICAL();
 80040ec:	f002 fb58 	bl	80067a0 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80040f0:	69f8      	ldr	r0, [r7, #28]
 80040f2:	f000 f867 	bl	80041c4 <prvGetDisinheritPriorityAfterTimeout>
 80040f6:	6178      	str	r0, [r7, #20]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	6979      	ldr	r1, [r7, #20]
 80040fe:	4618      	mov	r0, r3
 8004100:	f001 fc4c 	bl	800599c <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8004104:	f002 fb78 	bl	80067f8 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8004108:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 800410a:	4618      	mov	r0, r3
 800410c:	3728      	adds	r7, #40	@ 0x28
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	08024abc 	.word	0x08024abc
 8004118:	e000ed04 	.word	0xe000ed04

0800411c <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    traceENTER_uxQueueMessagesWaiting( xQueue );

    configASSERT( xQueue );
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d104      	bne.n	8004134 <uxQueueMessagesWaiting+0x18>
 800412a:	f640 019b 	movw	r1, #2203	@ 0x89b
 800412e:	4807      	ldr	r0, [pc, #28]	@ (800414c <uxQueueMessagesWaiting+0x30>)
 8004130:	f7fd fc6a 	bl	8001a08 <vAssertCalled>

    taskENTER_CRITICAL();
 8004134:	f002 fb34 	bl	80067a0 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800413c:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 800413e:	f002 fb5b 	bl	80067f8 <vPortExitCritical>

    traceRETURN_uxQueueMessagesWaiting( uxReturn );

    return uxReturn;
 8004142:	68fb      	ldr	r3, [r7, #12]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	08024abc 	.word	0x08024abc

08004150 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	60fb      	str	r3, [r7, #12]

    traceENTER_uxQueueSpacesAvailable( xQueue );

    configASSERT( pxQueue );
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d104      	bne.n	800416c <uxQueueSpacesAvailable+0x1c>
 8004162:	f44f 610b 	mov.w	r1, #2224	@ 0x8b0
 8004166:	4809      	ldr	r0, [pc, #36]	@ (800418c <uxQueueSpacesAvailable+0x3c>)
 8004168:	f7fd fc4e 	bl	8001a08 <vAssertCalled>

    taskENTER_CRITICAL();
 800416c:	f002 fb18 	bl	80067a0 <vPortEnterCritical>
    {
        uxReturn = ( UBaseType_t ) ( pxQueue->uxLength - pxQueue->uxMessagesWaiting );
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	60bb      	str	r3, [r7, #8]
    }
    taskEXIT_CRITICAL();
 800417c:	f002 fb3c 	bl	80067f8 <vPortExitCritical>

    traceRETURN_uxQueueSpacesAvailable( uxReturn );

    return uxReturn;
 8004180:	68bb      	ldr	r3, [r7, #8]
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	08024abc 	.word	0x08024abc

08004190 <vQueueDelete>:
    return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	60fb      	str	r3, [r7, #12]

    traceENTER_vQueueDelete( xQueue );

    configASSERT( pxQueue );
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d104      	bne.n	80041ac <vQueueDelete+0x1c>
 80041a2:	f640 01d4 	movw	r1, #2260	@ 0x8d4
 80041a6:	4806      	ldr	r0, [pc, #24]	@ (80041c0 <vQueueDelete+0x30>)
 80041a8:	f7fd fc2e 	bl	8001a08 <vAssertCalled>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 f979 	bl	80044a4 <vQueueUnregisterQueue>

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
    {
        /* The queue can only have been allocated dynamically - free it
         * again. */
        vPortFree( pxQueue );
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f002 fcca 	bl	8006b4c <vPortFree>
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

    traceRETURN_vQueueDelete();
}
 80041b8:	bf00      	nop
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	08024abc 	.word	0x08024abc

080041c4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d006      	beq.n	80041e2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f1c3 0307 	rsb	r3, r3, #7
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	e001      	b.n	80041e6 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80041e2:	2300      	movs	r3, #0
 80041e4:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80041e6:	68fb      	ldr	r3, [r7, #12]
    }
 80041e8:	4618      	mov	r0, r3
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004208:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10d      	bne.n	800422e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d14d      	bne.n	80042b6 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	4618      	mov	r0, r3
 8004220:	f001 fb20 	bl	8005864 <xTaskPriorityDisinherit>
 8004224:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	609a      	str	r2, [r3, #8]
 800422c:	e043      	b.n	80042b6 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d119      	bne.n	8004268 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6858      	ldr	r0, [r3, #4]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423c:	461a      	mov	r2, r3
 800423e:	68b9      	ldr	r1, [r7, #8]
 8004240:	f01e fccc 	bl	8022bdc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424c:	441a      	add	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	429a      	cmp	r2, r3
 800425c:	d32b      	bcc.n	80042b6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	605a      	str	r2, [r3, #4]
 8004266:	e026      	b.n	80042b6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	68d8      	ldr	r0, [r3, #12]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004270:	461a      	mov	r2, r3
 8004272:	68b9      	ldr	r1, [r7, #8]
 8004274:	f01e fcb2 	bl	8022bdc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004280:	425b      	negs	r3, r3
 8004282:	441a      	add	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	429a      	cmp	r2, r3
 8004292:	d207      	bcs.n	80042a4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429c:	425b      	negs	r3, r3
 800429e:	441a      	add	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d105      	bne.n	80042b6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80042be:	697b      	ldr	r3, [r7, #20]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3718      	adds	r7, #24
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d018      	beq.n	800430c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e2:	441a      	add	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d303      	bcc.n	80042fc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68d9      	ldr	r1, [r3, #12]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004304:	461a      	mov	r2, r3
 8004306:	6838      	ldr	r0, [r7, #0]
 8004308:	f01e fc68 	bl	8022bdc <memcpy>
    }
}
 800430c:	bf00      	nop
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800431c:	f002 fa40 	bl	80067a0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004326:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004328:	e011      	b.n	800434e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432e:	2b00      	cmp	r3, #0
 8004330:	d012      	beq.n	8004358 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3324      	adds	r3, #36	@ 0x24
 8004336:	4618      	mov	r0, r3
 8004338:	f000 feec 	bl	8005114 <xTaskRemoveFromEventList>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8004342:	f001 f903 	bl	800554c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	3b01      	subs	r3, #1
 800434a:	b2db      	uxtb	r3, r3
 800434c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800434e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004352:	2b00      	cmp	r3, #0
 8004354:	dce9      	bgt.n	800432a <prvUnlockQueue+0x16>
 8004356:	e000      	b.n	800435a <prvUnlockQueue+0x46>
                    break;
 8004358:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	22ff      	movs	r2, #255	@ 0xff
 800435e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8004362:	f002 fa49 	bl	80067f8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004366:	f002 fa1b 	bl	80067a0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004370:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004372:	e011      	b.n	8004398 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d012      	beq.n	80043a2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3310      	adds	r3, #16
 8004380:	4618      	mov	r0, r3
 8004382:	f000 fec7 	bl	8005114 <xTaskRemoveFromEventList>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800438c:	f001 f8de 	bl	800554c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004390:	7bbb      	ldrb	r3, [r7, #14]
 8004392:	3b01      	subs	r3, #1
 8004394:	b2db      	uxtb	r3, r3
 8004396:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004398:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800439c:	2b00      	cmp	r3, #0
 800439e:	dce9      	bgt.n	8004374 <prvUnlockQueue+0x60>
 80043a0:	e000      	b.n	80043a4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80043a2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	22ff      	movs	r2, #255	@ 0xff
 80043a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80043ac:	f002 fa24 	bl	80067f8 <vPortExitCritical>
}
 80043b0:	bf00      	nop
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80043c0:	f002 f9ee 	bl	80067a0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d102      	bne.n	80043d2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80043cc:	2301      	movs	r3, #1
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	e001      	b.n	80043d6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80043d6:	f002 fa0f 	bl	80067f8 <vPortExitCritical>

    return xReturn;
 80043da:	68fb      	ldr	r3, [r7, #12]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80043ec:	f002 f9d8 	bl	80067a0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d102      	bne.n	8004402 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80043fc:	2301      	movs	r3, #1
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	e001      	b.n	8004406 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004402:	2300      	movs	r3, #0
 8004404:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004406:	f002 f9f7 	bl	80067f8 <vPortExitCritical>

    return xReturn;
 800440a:	68fb      	ldr	r3, [r7, #12]
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800441e:	2300      	movs	r3, #0
 8004420:	60bb      	str	r3, [r7, #8]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d104      	bne.n	8004432 <vQueueAddToRegistry+0x1e>
 8004428:	f640 31c9 	movw	r1, #3017	@ 0xbc9
 800442c:	481b      	ldr	r0, [pc, #108]	@ (800449c <vQueueAddToRegistry+0x88>)
 800442e:	f7fd faeb 	bl	8001a08 <vAssertCalled>

        if( pcQueueName != NULL )
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d024      	beq.n	8004482 <vQueueAddToRegistry+0x6e>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004438:	2300      	movs	r3, #0
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	e01e      	b.n	800447c <vQueueAddToRegistry+0x68>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800443e:	4a18      	ldr	r2, [pc, #96]	@ (80044a0 <vQueueAddToRegistry+0x8c>)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	4413      	add	r3, r2
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	429a      	cmp	r2, r3
 800444c:	d105      	bne.n	800445a <vQueueAddToRegistry+0x46>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	4a13      	ldr	r2, [pc, #76]	@ (80044a0 <vQueueAddToRegistry+0x8c>)
 8004454:	4413      	add	r3, r2
 8004456:	60bb      	str	r3, [r7, #8]
                    break;
 8004458:	e013      	b.n	8004482 <vQueueAddToRegistry+0x6e>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10a      	bne.n	8004476 <vQueueAddToRegistry+0x62>
 8004460:	4a0f      	ldr	r2, [pc, #60]	@ (80044a0 <vQueueAddToRegistry+0x8c>)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d104      	bne.n	8004476 <vQueueAddToRegistry+0x62>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	4a0b      	ldr	r2, [pc, #44]	@ (80044a0 <vQueueAddToRegistry+0x8c>)
 8004472:	4413      	add	r3, r2
 8004474:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	3301      	adds	r3, #1
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2b07      	cmp	r3, #7
 8004480:	d9dd      	bls.n	800443e <vQueueAddToRegistry+0x2a>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d005      	beq.n	8004494 <vQueueAddToRegistry+0x80>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 8004494:	bf00      	nop
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	08024abc 	.word	0x08024abc
 80044a0:	20000dcc 	.word	0x20000dcc

080044a4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        traceENTER_vQueueUnregisterQueue( xQueue );

        configASSERT( xQueue );
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d104      	bne.n	80044bc <vQueueUnregisterQueue+0x18>
 80044b2:	f640 411d 	movw	r1, #3101	@ 0xc1d
 80044b6:	4812      	ldr	r0, [pc, #72]	@ (8004500 <vQueueUnregisterQueue+0x5c>)
 80044b8:	f7fd faa6 	bl	8001a08 <vAssertCalled>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	e016      	b.n	80044f0 <vQueueUnregisterQueue+0x4c>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 80044c2:	4a10      	ldr	r2, [pc, #64]	@ (8004504 <vQueueUnregisterQueue+0x60>)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	4413      	add	r3, r2
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d10b      	bne.n	80044ea <vQueueUnregisterQueue+0x46>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 80044d2:	4a0c      	ldr	r2, [pc, #48]	@ (8004504 <vQueueUnregisterQueue+0x60>)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2100      	movs	r1, #0
 80044d8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80044dc:	4a09      	ldr	r2, [pc, #36]	@ (8004504 <vQueueUnregisterQueue+0x60>)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	4413      	add	r3, r2
 80044e4:	2200      	movs	r2, #0
 80044e6:	605a      	str	r2, [r3, #4]
                break;
 80044e8:	e006      	b.n	80044f8 <vQueueUnregisterQueue+0x54>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	3301      	adds	r3, #1
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2b07      	cmp	r3, #7
 80044f4:	d9e5      	bls.n	80044c2 <vQueueUnregisterQueue+0x1e>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        traceRETURN_vQueueUnregisterQueue();
    }
 80044f6:	bf00      	nop
 80044f8:	bf00      	nop
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	08024abc 	.word	0x08024abc
 8004504:	20000dcc 	.word	0x20000dcc

08004508 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8004508:	b580      	push	{r7, lr}
 800450a:	b08a      	sub	sp, #40	@ 0x28
 800450c:	af04      	add	r7, sp, #16
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
 8004514:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4618      	mov	r0, r3
 800451c:	f002 fa42 	bl	80069a4 <pvPortMalloc>
 8004520:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d013      	beq.n	8004550 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8004528:	206c      	movs	r0, #108	@ 0x6c
 800452a:	f002 fa3b 	bl	80069a4 <pvPortMalloc>
 800452e:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d008      	beq.n	8004548 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8004536:	226c      	movs	r2, #108	@ 0x6c
 8004538:	2100      	movs	r1, #0
 800453a:	6978      	ldr	r0, [r7, #20]
 800453c:	f01e fc5b 	bl	8022df6 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	631a      	str	r2, [r3, #48]	@ 0x30
 8004546:	e005      	b.n	8004554 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8004548:	6938      	ldr	r0, [r7, #16]
 800454a:	f002 faff 	bl	8006b4c <vPortFree>
 800454e:	e001      	b.n	8004554 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8004550:	2300      	movs	r3, #0
 8004552:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00d      	beq.n	8004576 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800455a:	2300      	movs	r3, #0
 800455c:	9303      	str	r3, [sp, #12]
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	9302      	str	r3, [sp, #8]
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	9301      	str	r3, [sp, #4]
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	68b9      	ldr	r1, [r7, #8]
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 f829 	bl	80045c8 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8004576:	697b      	ldr	r3, [r7, #20]
    }
 8004578:	4618      	mov	r0, r3
 800457a:	3718      	adds	r7, #24
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004580:	b580      	push	{r7, lr}
 8004582:	b088      	sub	sp, #32
 8004584:	af02      	add	r7, sp, #8
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
 800458c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800458e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004590:	9301      	str	r3, [sp, #4]
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	68b9      	ldr	r1, [r7, #8]
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f7ff ffb3 	bl	8004508 <prvCreateTask>
 80045a2:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d005      	beq.n	80045b6 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80045aa:	6938      	ldr	r0, [r7, #16]
 80045ac:	f000 f890 	bl	80046d0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80045b0:	2301      	movs	r3, #1
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	e002      	b.n	80045bc <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80045b6:	f04f 33ff 	mov.w	r3, #4294967295
 80045ba:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 80045bc:	697b      	ldr	r3, [r7, #20]
    }
 80045be:	4618      	mov	r0, r3
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
	...

080045c8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
 80045d4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 80045d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	461a      	mov	r2, r3
 80045e0:	21a5      	movs	r1, #165	@ 0xa5
 80045e2:	f01e fc08 	bl	8022df6 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80045e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80045f0:	440b      	add	r3, r1
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	f023 0307 	bic.w	r3, r3, #7
 80045fe:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	2b00      	cmp	r3, #0
 8004608:	d004      	beq.n	8004614 <prvInitialiseNewTask+0x4c>
 800460a:	f240 712e 	movw	r1, #1838	@ 0x72e
 800460e:	482f      	ldr	r0, [pc, #188]	@ (80046cc <prvInitialiseNewTask+0x104>)
 8004610:	f7fd f9fa 	bl	8001a08 <vAssertCalled>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d01e      	beq.n	8004658 <prvInitialiseNewTask+0x90>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800461a:	2300      	movs	r3, #0
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	e012      	b.n	8004646 <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	4413      	add	r3, r2
 8004626:	7819      	ldrb	r1, [r3, #0]
 8004628:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	4413      	add	r3, r2
 800462e:	3334      	adds	r3, #52	@ 0x34
 8004630:	460a      	mov	r2, r1
 8004632:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	4413      	add	r3, r2
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d006      	beq.n	800464e <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	3301      	adds	r3, #1
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	2b0f      	cmp	r3, #15
 800464a:	d9e9      	bls.n	8004620 <prvInitialiseNewTask+0x58>
 800464c:	e000      	b.n	8004650 <prvInitialiseNewTask+0x88>
            {
                break;
 800464e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8004650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004652:	2200      	movs	r2, #0
 8004654:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004658:	6a3b      	ldr	r3, [r7, #32]
 800465a:	2b06      	cmp	r3, #6
 800465c:	d904      	bls.n	8004668 <prvInitialiseNewTask+0xa0>
 800465e:	f240 7164 	movw	r1, #1892	@ 0x764
 8004662:	481a      	ldr	r0, [pc, #104]	@ (80046cc <prvInitialiseNewTask+0x104>)
 8004664:	f7fd f9d0 	bl	8001a08 <vAssertCalled>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	2b06      	cmp	r3, #6
 800466c:	d901      	bls.n	8004672 <prvInitialiseNewTask+0xaa>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800466e:	2306      	movs	r3, #6
 8004670:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004674:	6a3a      	ldr	r2, [r7, #32]
 8004676:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8004678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800467a:	6a3a      	ldr	r2, [r7, #32]
 800467c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800467e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004680:	3304      	adds	r3, #4
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff f8c0 	bl	8003808 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800468a:	3318      	adds	r3, #24
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff f8bb 	bl	8003808 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004694:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004696:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	f1c3 0207 	rsb	r2, r3, #7
 800469e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80046a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046a6:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	68f9      	ldr	r1, [r7, #12]
 80046ac:	6938      	ldr	r0, [r7, #16]
 80046ae:	f001 ff43 	bl	8006538 <pxPortInitialiseStack>
 80046b2:	4602      	mov	r2, r0
 80046b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b6:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 80046b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80046be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046c2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80046c4:	bf00      	nop
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	08024ae0 	.word	0x08024ae0

080046d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80046d8:	f002 f862 	bl	80067a0 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80046dc:	4b41      	ldr	r3, [pc, #260]	@ (80047e4 <prvAddNewTaskToReadyList+0x114>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	3301      	adds	r3, #1
 80046e2:	4a40      	ldr	r2, [pc, #256]	@ (80047e4 <prvAddNewTaskToReadyList+0x114>)
 80046e4:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80046e6:	4b40      	ldr	r3, [pc, #256]	@ (80047e8 <prvAddNewTaskToReadyList+0x118>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d109      	bne.n	8004702 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80046ee:	4a3e      	ldr	r2, [pc, #248]	@ (80047e8 <prvAddNewTaskToReadyList+0x118>)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80046f4:	4b3b      	ldr	r3, [pc, #236]	@ (80047e4 <prvAddNewTaskToReadyList+0x114>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d110      	bne.n	800471e <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80046fc:	f000 ff4a 	bl	8005594 <prvInitialiseTaskLists>
 8004700:	e00d      	b.n	800471e <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8004702:	4b3a      	ldr	r3, [pc, #232]	@ (80047ec <prvAddNewTaskToReadyList+0x11c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d109      	bne.n	800471e <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800470a:	4b37      	ldr	r3, [pc, #220]	@ (80047e8 <prvAddNewTaskToReadyList+0x118>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004714:	429a      	cmp	r2, r3
 8004716:	d802      	bhi.n	800471e <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8004718:	4a33      	ldr	r2, [pc, #204]	@ (80047e8 <prvAddNewTaskToReadyList+0x118>)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 800471e:	4b34      	ldr	r3, [pc, #208]	@ (80047f0 <prvAddNewTaskToReadyList+0x120>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	3301      	adds	r3, #1
 8004724:	4a32      	ldr	r2, [pc, #200]	@ (80047f0 <prvAddNewTaskToReadyList+0x120>)
 8004726:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004728:	4b31      	ldr	r3, [pc, #196]	@ (80047f0 <prvAddNewTaskToReadyList+0x120>)
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004734:	2201      	movs	r2, #1
 8004736:	409a      	lsls	r2, r3
 8004738:	4b2e      	ldr	r3, [pc, #184]	@ (80047f4 <prvAddNewTaskToReadyList+0x124>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4313      	orrs	r3, r2
 800473e:	4a2d      	ldr	r2, [pc, #180]	@ (80047f4 <prvAddNewTaskToReadyList+0x124>)
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004746:	492c      	ldr	r1, [pc, #176]	@ (80047f8 <prvAddNewTaskToReadyList+0x128>)
 8004748:	4613      	mov	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	3304      	adds	r3, #4
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	609a      	str	r2, [r3, #8]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	689a      	ldr	r2, [r3, #8]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	60da      	str	r2, [r3, #12]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	3204      	adds	r2, #4
 800476e:	605a      	str	r2, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	1d1a      	adds	r2, r3, #4
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	609a      	str	r2, [r3, #8]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800477c:	4613      	mov	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4a1c      	ldr	r2, [pc, #112]	@ (80047f8 <prvAddNewTaskToReadyList+0x128>)
 8004786:	441a      	add	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	615a      	str	r2, [r3, #20]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004790:	4919      	ldr	r1, [pc, #100]	@ (80047f8 <prvAddNewTaskToReadyList+0x128>)
 8004792:	4613      	mov	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	440b      	add	r3, r1
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80047a2:	1c59      	adds	r1, r3, #1
 80047a4:	4814      	ldr	r0, [pc, #80]	@ (80047f8 <prvAddNewTaskToReadyList+0x128>)
 80047a6:	4613      	mov	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4403      	add	r3, r0
 80047b0:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 80047b2:	f002 f821 	bl	80067f8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80047b6:	4b0d      	ldr	r3, [pc, #52]	@ (80047ec <prvAddNewTaskToReadyList+0x11c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00e      	beq.n	80047dc <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 80047be:	4b0a      	ldr	r3, [pc, #40]	@ (80047e8 <prvAddNewTaskToReadyList+0x118>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d207      	bcs.n	80047dc <prvAddNewTaskToReadyList+0x10c>
 80047cc:	4b0b      	ldr	r3, [pc, #44]	@ (80047fc <prvAddNewTaskToReadyList+0x12c>)
 80047ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80047dc:	bf00      	nop
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	20000f0c 	.word	0x20000f0c
 80047e8:	20000e0c 	.word	0x20000e0c
 80047ec:	20000f18 	.word	0x20000f18
 80047f0:	20000f28 	.word	0x20000f28
 80047f4:	20000f14 	.word	0x20000f14
 80047f8:	20000e10 	.word	0x20000e10
 80047fc:	e000ed04 	.word	0xe000ed04

08004800 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 8004808:	2300      	movs	r3, #0
 800480a:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 800480c:	f001 ffc8 	bl	80067a0 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d102      	bne.n	800481c <vTaskDelete+0x1c>
 8004816:	4b3e      	ldr	r3, [pc, #248]	@ (8004910 <vTaskDelete+0x110>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	e000      	b.n	800481e <vTaskDelete+0x1e>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	3304      	adds	r3, #4
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff f859 	bl	80038dc <uxListRemove>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d115      	bne.n	800485c <vTaskDelete+0x5c>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004834:	4937      	ldr	r1, [pc, #220]	@ (8004914 <vTaskDelete+0x114>)
 8004836:	4613      	mov	r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4413      	add	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	440b      	add	r3, r1
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10a      	bne.n	800485c <vTaskDelete+0x5c>
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800484a:	2201      	movs	r2, #1
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	43da      	mvns	r2, r3
 8004852:	4b31      	ldr	r3, [pc, #196]	@ (8004918 <vTaskDelete+0x118>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4013      	ands	r3, r2
 8004858:	4a2f      	ldr	r2, [pc, #188]	@ (8004918 <vTaskDelete+0x118>)
 800485a:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004860:	2b00      	cmp	r3, #0
 8004862:	d004      	beq.n	800486e <vTaskDelete+0x6e>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	3318      	adds	r3, #24
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff f837 	bl	80038dc <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800486e:	4b2b      	ldr	r3, [pc, #172]	@ (800491c <vTaskDelete+0x11c>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3301      	adds	r3, #1
 8004874:	4a29      	ldr	r2, [pc, #164]	@ (800491c <vTaskDelete+0x11c>)
 8004876:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8004878:	4b25      	ldr	r3, [pc, #148]	@ (8004910 <vTaskDelete+0x110>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	429a      	cmp	r2, r3
 8004880:	d101      	bne.n	8004886 <vTaskDelete+0x86>
 8004882:	2301      	movs	r3, #1
 8004884:	e000      	b.n	8004888 <vTaskDelete+0x88>
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 800488a:	4b25      	ldr	r3, [pc, #148]	@ (8004920 <vTaskDelete+0x120>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d010      	beq.n	80048b4 <vTaskDelete+0xb4>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00d      	beq.n	80048b4 <vTaskDelete+0xb4>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	3304      	adds	r3, #4
 800489c:	4619      	mov	r1, r3
 800489e:	4821      	ldr	r0, [pc, #132]	@ (8004924 <vTaskDelete+0x124>)
 80048a0:	f7fe ffbf 	bl	8003822 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 80048a4:	4b20      	ldr	r3, [pc, #128]	@ (8004928 <vTaskDelete+0x128>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	3301      	adds	r3, #1
 80048aa:	4a1f      	ldr	r2, [pc, #124]	@ (8004928 <vTaskDelete+0x128>)
 80048ac:	6013      	str	r3, [r2, #0]
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 80048ae:	2301      	movs	r3, #1
 80048b0:	617b      	str	r3, [r7, #20]
 80048b2:	e006      	b.n	80048c2 <vTaskDelete+0xc2>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80048b4:	4b1d      	ldr	r3, [pc, #116]	@ (800492c <vTaskDelete+0x12c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	3b01      	subs	r3, #1
 80048ba:	4a1c      	ldr	r2, [pc, #112]	@ (800492c <vTaskDelete+0x12c>)
 80048bc:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 80048be:	f000 fee7 	bl	8005690 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 80048c2:	f001 ff99 	bl	80067f8 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d002      	beq.n	80048d2 <vTaskDelete+0xd2>
        {
            prvDeleteTCB( pxTCB );
 80048cc:	6938      	ldr	r0, [r7, #16]
 80048ce:	f000 fecf 	bl	8005670 <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 80048d2:	4b13      	ldr	r3, [pc, #76]	@ (8004920 <vTaskDelete+0x120>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d015      	beq.n	8004906 <vTaskDelete+0x106>
            {
                if( pxTCB == pxCurrentTCB )
 80048da:	4b0d      	ldr	r3, [pc, #52]	@ (8004910 <vTaskDelete+0x110>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d110      	bne.n	8004906 <vTaskDelete+0x106>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 80048e4:	4b12      	ldr	r3, [pc, #72]	@ (8004930 <vTaskDelete+0x130>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d004      	beq.n	80048f6 <vTaskDelete+0xf6>
 80048ec:	f640 1114 	movw	r1, #2324	@ 0x914
 80048f0:	4810      	ldr	r0, [pc, #64]	@ (8004934 <vTaskDelete+0x134>)
 80048f2:	f7fd f889 	bl	8001a08 <vAssertCalled>
                    taskYIELD_WITHIN_API();
 80048f6:	4b10      	ldr	r3, [pc, #64]	@ (8004938 <vTaskDelete+0x138>)
 80048f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	f3bf 8f6f 	isb	sy
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
 8004906:	bf00      	nop
 8004908:	3718      	adds	r7, #24
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	20000e0c 	.word	0x20000e0c
 8004914:	20000e10 	.word	0x20000e10
 8004918:	20000f14 	.word	0x20000f14
 800491c:	20000f28 	.word	0x20000f28
 8004920:	20000f18 	.word	0x20000f18
 8004924:	20000ee0 	.word	0x20000ee0
 8004928:	20000ef4 	.word	0x20000ef4
 800492c:	20000f0c 	.word	0x20000f0c
 8004930:	20000f34 	.word	0x20000f34
 8004934:	08024ae0 	.word	0x08024ae0
 8004938:	e000ed04 	.word	0xe000ed04

0800493c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8004944:	2300      	movs	r3, #0
 8004946:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d011      	beq.n	8004972 <vTaskDelay+0x36>
        {
            vTaskSuspendAll();
 800494e:	f000 f8ad 	bl	8004aac <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8004952:	4b0f      	ldr	r3, [pc, #60]	@ (8004990 <vTaskDelay+0x54>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d004      	beq.n	8004964 <vTaskDelay+0x28>
 800495a:	f640 118e 	movw	r1, #2446	@ 0x98e
 800495e:	480d      	ldr	r0, [pc, #52]	@ (8004994 <vTaskDelay+0x58>)
 8004960:	f7fd f852 	bl	8001a08 <vAssertCalled>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004964:	2100      	movs	r1, #0
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f001 fd64 	bl	8006434 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800496c:	f000 f8ac 	bl	8004ac8 <xTaskResumeAll>
 8004970:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d107      	bne.n	8004988 <vTaskDelay+0x4c>
        {
            taskYIELD_WITHIN_API();
 8004978:	4b07      	ldr	r3, [pc, #28]	@ (8004998 <vTaskDelay+0x5c>)
 800497a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800497e:	601a      	str	r2, [r3, #0]
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 8004988:	bf00      	nop
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	20000f34 	.word	0x20000f34
 8004994:	08024ae0 	.word	0x08024ae0
 8004998:	e000ed04 	.word	0xe000ed04

0800499c <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b08a      	sub	sp, #40	@ 0x28
 80049a0:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 80049a2:	2301      	movs	r3, #1
 80049a4:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 80049a6:	2300      	movs	r3, #0
 80049a8:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80049aa:	2300      	movs	r3, #0
 80049ac:	617b      	str	r3, [r7, #20]
 80049ae:	e011      	b.n	80049d4 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80049b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004a28 <prvCreateIdleTasks+0x8c>)
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	4413      	add	r3, r2
 80049b6:	7819      	ldrb	r1, [r3, #0]
 80049b8:	463a      	mov	r2, r7
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	4413      	add	r3, r2
 80049be:	460a      	mov	r2, r1
 80049c0:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80049c2:	463a      	mov	r2, r7
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	4413      	add	r3, r2
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d006      	beq.n	80049dc <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	3301      	adds	r3, #1
 80049d2:	617b      	str	r3, [r7, #20]
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	2b0f      	cmp	r3, #15
 80049d8:	ddea      	ble.n	80049b0 <prvCreateIdleTasks+0x14>
 80049da:	e000      	b.n	80049de <prvCreateIdleTasks+0x42>
        {
            break;
 80049dc:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80049de:	2300      	movs	r3, #0
 80049e0:	61bb      	str	r3, [r7, #24]
 80049e2:	e016      	b.n	8004a12 <prvCreateIdleTasks+0x76>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80049e4:	4b11      	ldr	r3, [pc, #68]	@ (8004a2c <prvCreateIdleTasks+0x90>)
 80049e6:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4a10      	ldr	r2, [pc, #64]	@ (8004a30 <prvCreateIdleTasks+0x94>)
 80049ee:	4413      	add	r3, r2
 80049f0:	4639      	mov	r1, r7
 80049f2:	9301      	str	r3, [sp, #4]
 80049f4:	2300      	movs	r3, #0
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	2300      	movs	r3, #0
 80049fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049fe:	6938      	ldr	r0, [r7, #16]
 8004a00:	f7ff fdbe 	bl	8004580 <xTaskCreate>
 8004a04:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d006      	beq.n	8004a1a <prvCreateIdleTasks+0x7e>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	61bb      	str	r3, [r7, #24]
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	dde5      	ble.n	80049e4 <prvCreateIdleTasks+0x48>
 8004a18:	e000      	b.n	8004a1c <prvCreateIdleTasks+0x80>
        {
            break;
 8004a1a:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8004a1c:	69fb      	ldr	r3, [r7, #28]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3720      	adds	r7, #32
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	08024b04 	.word	0x08024b04
 8004a2c:	08005565 	.word	0x08005565
 8004a30:	20000f30 	.word	0x20000f30

08004a34 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8004a3a:	f7ff ffaf 	bl	800499c <prvCreateIdleTasks>
 8004a3e:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d118      	bne.n	8004a78 <vTaskStartScheduler+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8004a46:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004a4a:	b672      	cpsid	i
 8004a4c:	f383 8811 	msr	BASEPRI, r3
 8004a50:	f3bf 8f6f 	isb	sy
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	b662      	cpsie	i
 8004a5a:	603b      	str	r3, [r7, #0]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8004a5c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8004a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8004a98 <vTaskStartScheduler+0x64>)
 8004a60:	f04f 32ff 	mov.w	r2, #4294967295
 8004a64:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004a66:	4b0d      	ldr	r3, [pc, #52]	@ (8004a9c <vTaskStartScheduler+0x68>)
 8004a68:	2201      	movs	r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa0 <vTaskStartScheduler+0x6c>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8004a72:	f001 fde7 	bl	8006644 <xPortStartScheduler>
 8004a76:	e008      	b.n	8004a8a <vTaskStartScheduler+0x56>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7e:	d104      	bne.n	8004a8a <vTaskStartScheduler+0x56>
 8004a80:	f640 61a9 	movw	r1, #3753	@ 0xea9
 8004a84:	4807      	ldr	r0, [pc, #28]	@ (8004aa4 <vTaskStartScheduler+0x70>)
 8004a86:	f7fc ffbf 	bl	8001a08 <vAssertCalled>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004a8a:	4b07      	ldr	r3, [pc, #28]	@ (8004aa8 <vTaskStartScheduler+0x74>)
 8004a8c:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8004a8e:	bf00      	nop
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	20000f2c 	.word	0x20000f2c
 8004a9c:	20000f18 	.word	0x20000f18
 8004aa0:	20000f10 	.word	0x20000f10
 8004aa4:	08024ae0 	.word	0x08024ae0
 8004aa8:	20000008 	.word	0x20000008

08004aac <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8004ab0:	4b04      	ldr	r3, [pc, #16]	@ (8004ac4 <vTaskSuspendAll+0x18>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	4a03      	ldr	r2, [pc, #12]	@ (8004ac4 <vTaskSuspendAll+0x18>)
 8004ab8:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8004aba:	bf00      	nop
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	20000f34 	.word	0x20000f34

08004ac8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b088      	sub	sp, #32
 8004acc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8004ad6:	f001 fe63 	bl	80067a0 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8004ada:	2300      	movs	r3, #0
 8004adc:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8004ade:	4b72      	ldr	r3, [pc, #456]	@ (8004ca8 <xTaskResumeAll+0x1e0>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d104      	bne.n	8004af0 <xTaskResumeAll+0x28>
 8004ae6:	f640 718b 	movw	r1, #3979	@ 0xf8b
 8004aea:	4870      	ldr	r0, [pc, #448]	@ (8004cac <xTaskResumeAll+0x1e4>)
 8004aec:	f7fc ff8c 	bl	8001a08 <vAssertCalled>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8004af0:	4b6d      	ldr	r3, [pc, #436]	@ (8004ca8 <xTaskResumeAll+0x1e0>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3b01      	subs	r3, #1
 8004af6:	4a6c      	ldr	r2, [pc, #432]	@ (8004ca8 <xTaskResumeAll+0x1e0>)
 8004af8:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004afa:	4b6b      	ldr	r3, [pc, #428]	@ (8004ca8 <xTaskResumeAll+0x1e0>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f040 80ca 	bne.w	8004c98 <xTaskResumeAll+0x1d0>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b04:	4b6a      	ldr	r3, [pc, #424]	@ (8004cb0 <xTaskResumeAll+0x1e8>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 80c5 	beq.w	8004c98 <xTaskResumeAll+0x1d0>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b0e:	e08e      	b.n	8004c2e <xTaskResumeAll+0x166>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004b10:	4b68      	ldr	r3, [pc, #416]	@ (8004cb4 <xTaskResumeAll+0x1ec>)
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1c:	60fb      	str	r3, [r7, #12]
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	69fa      	ldr	r2, [r7, #28]
 8004b24:	6a12      	ldr	r2, [r2, #32]
 8004b26:	609a      	str	r2, [r3, #8]
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	69fa      	ldr	r2, [r7, #28]
 8004b2e:	69d2      	ldr	r2, [r2, #28]
 8004b30:	605a      	str	r2, [r3, #4]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	3318      	adds	r3, #24
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d103      	bne.n	8004b46 <xTaskResumeAll+0x7e>
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	6a1a      	ldr	r2, [r3, #32]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	605a      	str	r2, [r3, #4]
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	1e5a      	subs	r2, r3, #1
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	60bb      	str	r3, [r7, #8]
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	69fa      	ldr	r2, [r7, #28]
 8004b62:	68d2      	ldr	r2, [r2, #12]
 8004b64:	609a      	str	r2, [r3, #8]
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	69fa      	ldr	r2, [r7, #28]
 8004b6c:	6892      	ldr	r2, [r2, #8]
 8004b6e:	605a      	str	r2, [r3, #4]
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	3304      	adds	r3, #4
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d103      	bne.n	8004b84 <xTaskResumeAll+0xbc>
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	605a      	str	r2, [r3, #4]
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	2200      	movs	r2, #0
 8004b88:	615a      	str	r2, [r3, #20]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	1e5a      	subs	r2, r3, #1
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b98:	2201      	movs	r2, #1
 8004b9a:	409a      	lsls	r2, r3
 8004b9c:	4b46      	ldr	r3, [pc, #280]	@ (8004cb8 <xTaskResumeAll+0x1f0>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	4a45      	ldr	r2, [pc, #276]	@ (8004cb8 <xTaskResumeAll+0x1f0>)
 8004ba4:	6013      	str	r3, [r2, #0]
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004baa:	4944      	ldr	r1, [pc, #272]	@ (8004cbc <xTaskResumeAll+0x1f4>)
 8004bac:	4613      	mov	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	607b      	str	r3, [r7, #4]
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	609a      	str	r2, [r3, #8]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	60da      	str	r2, [r3, #12]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	69fa      	ldr	r2, [r7, #28]
 8004bd0:	3204      	adds	r2, #4
 8004bd2:	605a      	str	r2, [r3, #4]
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	1d1a      	adds	r2, r3, #4
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	609a      	str	r2, [r3, #8]
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004be0:	4613      	mov	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4413      	add	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4a34      	ldr	r2, [pc, #208]	@ (8004cbc <xTaskResumeAll+0x1f4>)
 8004bea:	441a      	add	r2, r3
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	615a      	str	r2, [r3, #20]
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bf4:	4931      	ldr	r1, [pc, #196]	@ (8004cbc <xTaskResumeAll+0x1f4>)
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	440b      	add	r3, r1
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69fa      	ldr	r2, [r7, #28]
 8004c04:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004c06:	1c59      	adds	r1, r3, #1
 8004c08:	482c      	ldr	r0, [pc, #176]	@ (8004cbc <xTaskResumeAll+0x1f4>)
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4403      	add	r3, r0
 8004c14:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c1a:	4b29      	ldr	r3, [pc, #164]	@ (8004cc0 <xTaskResumeAll+0x1f8>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d904      	bls.n	8004c2e <xTaskResumeAll+0x166>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8004c24:	4a27      	ldr	r2, [pc, #156]	@ (8004cc4 <xTaskResumeAll+0x1fc>)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	2101      	movs	r1, #1
 8004c2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c2e:	4b21      	ldr	r3, [pc, #132]	@ (8004cb4 <xTaskResumeAll+0x1ec>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f47f af6c 	bne.w	8004b10 <xTaskResumeAll+0x48>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <xTaskResumeAll+0x17a>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8004c3e:	f000 fd27 	bl	8005690 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004c42:	4b21      	ldr	r3, [pc, #132]	@ (8004cc8 <xTaskResumeAll+0x200>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d012      	beq.n	8004c74 <xTaskResumeAll+0x1ac>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8004c4e:	f000 f86d 	bl	8004d2c <xTaskIncrementTick>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d004      	beq.n	8004c62 <xTaskResumeAll+0x19a>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8004c58:	4a1a      	ldr	r2, [pc, #104]	@ (8004cc4 <xTaskResumeAll+0x1fc>)
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	3b01      	subs	r3, #1
 8004c66:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1ef      	bne.n	8004c4e <xTaskResumeAll+0x186>

                            xPendedTicks = 0;
 8004c6e:	4b16      	ldr	r3, [pc, #88]	@ (8004cc8 <xTaskResumeAll+0x200>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8004c74:	4a13      	ldr	r2, [pc, #76]	@ (8004cc4 <xTaskResumeAll+0x1fc>)
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00b      	beq.n	8004c98 <xTaskResumeAll+0x1d0>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004c80:	2301      	movs	r3, #1
 8004c82:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8004c84:	4b0e      	ldr	r3, [pc, #56]	@ (8004cc0 <xTaskResumeAll+0x1f8>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4b10      	ldr	r3, [pc, #64]	@ (8004ccc <xTaskResumeAll+0x204>)
 8004c8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004c98:	f001 fdae 	bl	80067f8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8004c9c:	69bb      	ldr	r3, [r7, #24]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3720      	adds	r7, #32
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20000f34 	.word	0x20000f34
 8004cac:	08024ae0 	.word	0x08024ae0
 8004cb0:	20000f0c 	.word	0x20000f0c
 8004cb4:	20000ecc 	.word	0x20000ecc
 8004cb8:	20000f14 	.word	0x20000f14
 8004cbc:	20000e10 	.word	0x20000e10
 8004cc0:	20000e0c 	.word	0x20000e0c
 8004cc4:	20000f20 	.word	0x20000f20
 8004cc8:	20000f1c 	.word	0x20000f1c
 8004ccc:	e000ed04 	.word	0xe000ed04

08004cd0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004cd6:	4b05      	ldr	r3, [pc, #20]	@ (8004cec <xTaskGetTickCount+0x1c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8004cdc:	687b      	ldr	r3, [r7, #4]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	20000f10 	.word	0x20000f10

08004cf0 <pcTaskGetName>:
    return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char * pcTaskGetName( TaskHandle_t xTaskToQuery )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]

    traceENTER_pcTaskGetName( xTaskToQuery );

    /* If null is passed in here then the name of the calling task is being
     * queried. */
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d102      	bne.n	8004d04 <pcTaskGetName+0x14>
 8004cfe:	4b09      	ldr	r3, [pc, #36]	@ (8004d24 <pcTaskGetName+0x34>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	e000      	b.n	8004d06 <pcTaskGetName+0x16>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	60fb      	str	r3, [r7, #12]
    configASSERT( pxTCB );
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d104      	bne.n	8004d18 <pcTaskGetName+0x28>
 8004d0e:	f241 0155 	movw	r1, #4181	@ 0x1055
 8004d12:	4805      	ldr	r0, [pc, #20]	@ (8004d28 <pcTaskGetName+0x38>)
 8004d14:	f7fc fe78 	bl	8001a08 <vAssertCalled>

    traceRETURN_pcTaskGetName( &( pxTCB->pcTaskName[ 0 ] ) );

    return &( pxTCB->pcTaskName[ 0 ] );
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	3334      	adds	r3, #52	@ 0x34
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	20000e0c 	.word	0x20000e0c
 8004d28:	08024ae0 	.word	0x08024ae0

08004d2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b088      	sub	sp, #32
 8004d30:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61fb      	str	r3, [r7, #28]

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004d36:	4b7b      	ldr	r3, [pc, #492]	@ (8004f24 <xTaskIncrementTick+0x1f8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f040 80e8 	bne.w	8004f10 <xTaskIncrementTick+0x1e4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d40:	4b79      	ldr	r3, [pc, #484]	@ (8004f28 <xTaskIncrementTick+0x1fc>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	3301      	adds	r3, #1
 8004d46:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004d48:	4a77      	ldr	r2, [pc, #476]	@ (8004f28 <xTaskIncrementTick+0x1fc>)
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d11a      	bne.n	8004d8a <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 8004d54:	4b75      	ldr	r3, [pc, #468]	@ (8004f2c <xTaskIncrementTick+0x200>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d004      	beq.n	8004d68 <xTaskIncrementTick+0x3c>
 8004d5e:	f241 215f 	movw	r1, #4703	@ 0x125f
 8004d62:	4873      	ldr	r0, [pc, #460]	@ (8004f30 <xTaskIncrementTick+0x204>)
 8004d64:	f7fc fe50 	bl	8001a08 <vAssertCalled>
 8004d68:	4b70      	ldr	r3, [pc, #448]	@ (8004f2c <xTaskIncrementTick+0x200>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	617b      	str	r3, [r7, #20]
 8004d6e:	4b71      	ldr	r3, [pc, #452]	@ (8004f34 <xTaskIncrementTick+0x208>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a6e      	ldr	r2, [pc, #440]	@ (8004f2c <xTaskIncrementTick+0x200>)
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	4a6f      	ldr	r2, [pc, #444]	@ (8004f34 <xTaskIncrementTick+0x208>)
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	6013      	str	r3, [r2, #0]
 8004d7c:	4b6e      	ldr	r3, [pc, #440]	@ (8004f38 <xTaskIncrementTick+0x20c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3301      	adds	r3, #1
 8004d82:	4a6d      	ldr	r2, [pc, #436]	@ (8004f38 <xTaskIncrementTick+0x20c>)
 8004d84:	6013      	str	r3, [r2, #0]
 8004d86:	f000 fc83 	bl	8005690 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004d8a:	4b6c      	ldr	r3, [pc, #432]	@ (8004f3c <xTaskIncrementTick+0x210>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	f0c0 80a8 	bcc.w	8004ee6 <xTaskIncrementTick+0x1ba>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d96:	4b65      	ldr	r3, [pc, #404]	@ (8004f2c <xTaskIncrementTick+0x200>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d104      	bne.n	8004daa <xTaskIncrementTick+0x7e>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8004da0:	4b66      	ldr	r3, [pc, #408]	@ (8004f3c <xTaskIncrementTick+0x210>)
 8004da2:	f04f 32ff 	mov.w	r2, #4294967295
 8004da6:	601a      	str	r2, [r3, #0]
                    break;
 8004da8:	e09d      	b.n	8004ee6 <xTaskIncrementTick+0x1ba>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004daa:	4b60      	ldr	r3, [pc, #384]	@ (8004f2c <xTaskIncrementTick+0x200>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d203      	bcs.n	8004dca <xTaskIncrementTick+0x9e>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004dc2:	4a5e      	ldr	r2, [pc, #376]	@ (8004f3c <xTaskIncrementTick+0x210>)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6013      	str	r3, [r2, #0]
                        break;
 8004dc8:	e08d      	b.n	8004ee6 <xTaskIncrementTick+0x1ba>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	60bb      	str	r3, [r7, #8]
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	68d2      	ldr	r2, [r2, #12]
 8004dd8:	609a      	str	r2, [r3, #8]
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	6892      	ldr	r2, [r2, #8]
 8004de2:	605a      	str	r2, [r3, #4]
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	3304      	adds	r3, #4
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d103      	bne.n	8004df8 <xTaskIncrementTick+0xcc>
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	605a      	str	r2, [r3, #4]
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	615a      	str	r2, [r3, #20]
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	1e5a      	subs	r2, r3, #1
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d01e      	beq.n	8004e4e <xTaskIncrementTick+0x122>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e14:	607b      	str	r3, [r7, #4]
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	6a12      	ldr	r2, [r2, #32]
 8004e1e:	609a      	str	r2, [r3, #8]
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	69d2      	ldr	r2, [r2, #28]
 8004e28:	605a      	str	r2, [r3, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	3318      	adds	r3, #24
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d103      	bne.n	8004e3e <xTaskIncrementTick+0x112>
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	6a1a      	ldr	r2, [r3, #32]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	605a      	str	r2, [r3, #4]
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	2200      	movs	r2, #0
 8004e42:	629a      	str	r2, [r3, #40]	@ 0x28
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	1e5a      	subs	r2, r3, #1
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e52:	2201      	movs	r2, #1
 8004e54:	409a      	lsls	r2, r3
 8004e56:	4b3a      	ldr	r3, [pc, #232]	@ (8004f40 <xTaskIncrementTick+0x214>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	4a38      	ldr	r2, [pc, #224]	@ (8004f40 <xTaskIncrementTick+0x214>)
 8004e5e:	6013      	str	r3, [r2, #0]
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e64:	4937      	ldr	r1, [pc, #220]	@ (8004f44 <xTaskIncrementTick+0x218>)
 8004e66:	4613      	mov	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	440b      	add	r3, r1
 8004e70:	3304      	adds	r3, #4
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	603b      	str	r3, [r7, #0]
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	609a      	str	r2, [r3, #8]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	60da      	str	r2, [r3, #12]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	3204      	adds	r2, #4
 8004e8c:	605a      	str	r2, [r3, #4]
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1d1a      	adds	r2, r3, #4
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	609a      	str	r2, [r3, #8]
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4a28      	ldr	r2, [pc, #160]	@ (8004f44 <xTaskIncrementTick+0x218>)
 8004ea4:	441a      	add	r2, r3
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	615a      	str	r2, [r3, #20]
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eae:	4925      	ldr	r1, [pc, #148]	@ (8004f44 <xTaskIncrementTick+0x218>)
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	440b      	add	r3, r1
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004ec0:	1c59      	adds	r1, r3, #1
 8004ec2:	4820      	ldr	r0, [pc, #128]	@ (8004f44 <xTaskIncrementTick+0x218>)
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4403      	add	r3, r0
 8004ece:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8004f48 <xTaskIncrementTick+0x21c>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eda:	429a      	cmp	r2, r3
 8004edc:	f67f af5b 	bls.w	8004d96 <xTaskIncrementTick+0x6a>
                            {
                                xSwitchRequired = pdTRUE;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ee4:	e757      	b.n	8004d96 <xTaskIncrementTick+0x6a>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8004ee6:	4b18      	ldr	r3, [pc, #96]	@ (8004f48 <xTaskIncrementTick+0x21c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eec:	4915      	ldr	r1, [pc, #84]	@ (8004f44 <xTaskIncrementTick+0x218>)
 8004eee:	4613      	mov	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	440b      	add	r3, r1
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d901      	bls.n	8004f02 <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 8004efe:	2301      	movs	r3, #1
 8004f00:	61fb      	str	r3, [r7, #28]
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8004f02:	4b12      	ldr	r3, [pc, #72]	@ (8004f4c <xTaskIncrementTick+0x220>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d007      	beq.n	8004f1a <xTaskIncrementTick+0x1ee>
                {
                    xSwitchRequired = pdTRUE;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	61fb      	str	r3, [r7, #28]
 8004f0e:	e004      	b.n	8004f1a <xTaskIncrementTick+0x1ee>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8004f10:	4b0f      	ldr	r3, [pc, #60]	@ (8004f50 <xTaskIncrementTick+0x224>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3301      	adds	r3, #1
 8004f16:	4a0e      	ldr	r2, [pc, #56]	@ (8004f50 <xTaskIncrementTick+0x224>)
 8004f18:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8004f1a:	69fb      	ldr	r3, [r7, #28]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3720      	adds	r7, #32
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	20000f34 	.word	0x20000f34
 8004f28:	20000f10 	.word	0x20000f10
 8004f2c:	20000ec4 	.word	0x20000ec4
 8004f30:	08024ae0 	.word	0x08024ae0
 8004f34:	20000ec8 	.word	0x20000ec8
 8004f38:	20000f24 	.word	0x20000f24
 8004f3c:	20000f2c 	.word	0x20000f2c
 8004f40:	20000f14 	.word	0x20000f14
 8004f44:	20000e10 	.word	0x20000e10
 8004f48:	20000e0c 	.word	0x20000e0c
 8004f4c:	20000f20 	.word	0x20000f20
 8004f50:	20000f1c 	.word	0x20000f1c

08004f54 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8004f5a:	4b30      	ldr	r3, [pc, #192]	@ (800501c <vTaskSwitchContext+0xc8>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8004f62:	4b2f      	ldr	r3, [pc, #188]	@ (8005020 <vTaskSwitchContext+0xcc>)
 8004f64:	2201      	movs	r2, #1
 8004f66:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8004f68:	e053      	b.n	8005012 <vTaskSwitchContext+0xbe>
            xYieldPendings[ 0 ] = pdFALSE;
 8004f6a:	4b2d      	ldr	r3, [pc, #180]	@ (8005020 <vTaskSwitchContext+0xcc>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime[ 0 ] = portGET_RUN_TIME_COUNTER_VALUE();
 8004f70:	f7fc fd42 	bl	80019f8 <ulGetRunTimeCounterValue>
 8004f74:	4603      	mov	r3, r0
 8004f76:	4a2b      	ldr	r2, [pc, #172]	@ (8005024 <vTaskSwitchContext+0xd0>)
 8004f78:	6013      	str	r3, [r2, #0]
                if( ulTotalRunTime[ 0 ] > ulTaskSwitchedInTime[ 0 ] )
 8004f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8005024 <vTaskSwitchContext+0xd0>)
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	4b2a      	ldr	r3, [pc, #168]	@ (8005028 <vTaskSwitchContext+0xd4>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d909      	bls.n	8004f9a <vTaskSwitchContext+0x46>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime[ 0 ] - ulTaskSwitchedInTime[ 0 ] );
 8004f86:	4b27      	ldr	r3, [pc, #156]	@ (8005024 <vTaskSwitchContext+0xd0>)
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	4b27      	ldr	r3, [pc, #156]	@ (8005028 <vTaskSwitchContext+0xd4>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	1ad1      	subs	r1, r2, r3
 8004f90:	4b26      	ldr	r3, [pc, #152]	@ (800502c <vTaskSwitchContext+0xd8>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004f96:	440a      	add	r2, r1
 8004f98:	661a      	str	r2, [r3, #96]	@ 0x60
                ulTaskSwitchedInTime[ 0 ] = ulTotalRunTime[ 0 ];
 8004f9a:	4b22      	ldr	r3, [pc, #136]	@ (8005024 <vTaskSwitchContext+0xd0>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a22      	ldr	r2, [pc, #136]	@ (8005028 <vTaskSwitchContext+0xd4>)
 8004fa0:	6013      	str	r3, [r2, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8004fa2:	4b23      	ldr	r3, [pc, #140]	@ (8005030 <vTaskSwitchContext+0xdc>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	607b      	str	r3, [r7, #4]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	fab3 f383 	clz	r3, r3
 8004fae:	70fb      	strb	r3, [r7, #3]
        return ucReturn;
 8004fb0:	78fb      	ldrb	r3, [r7, #3]
 8004fb2:	f1c3 031f 	rsb	r3, r3, #31
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	491e      	ldr	r1, [pc, #120]	@ (8005034 <vTaskSwitchContext+0xe0>)
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	440b      	add	r3, r1
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d104      	bne.n	8004fd6 <vTaskSwitchContext+0x82>
 8004fcc:	f241 31fa 	movw	r1, #5114	@ 0x13fa
 8004fd0:	4819      	ldr	r0, [pc, #100]	@ (8005038 <vTaskSwitchContext+0xe4>)
 8004fd2:	f7fc fd19 	bl	8001a08 <vAssertCalled>
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4a14      	ldr	r2, [pc, #80]	@ (8005034 <vTaskSwitchContext+0xe0>)
 8004fe2:	4413      	add	r3, r2
 8004fe4:	60bb      	str	r3, [r7, #8]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	605a      	str	r2, [r3, #4]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	3308      	adds	r3, #8
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d103      	bne.n	8005004 <vTaskSwitchContext+0xb0>
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	68da      	ldr	r2, [r3, #12]
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	605a      	str	r2, [r3, #4]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	4a08      	ldr	r2, [pc, #32]	@ (800502c <vTaskSwitchContext+0xd8>)
 800500c:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800500e:	4b07      	ldr	r3, [pc, #28]	@ (800502c <vTaskSwitchContext+0xd8>)
 8005010:	681b      	ldr	r3, [r3, #0]
    }
 8005012:	bf00      	nop
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	20000f34 	.word	0x20000f34
 8005020:	20000f20 	.word	0x20000f20
 8005024:	20000f3c 	.word	0x20000f3c
 8005028:	20000f38 	.word	0x20000f38
 800502c:	20000e0c 	.word	0x20000e0c
 8005030:	20000f14 	.word	0x20000f14
 8005034:	20000e10 	.word	0x20000e10
 8005038:	08024ae0 	.word	0x08024ae0

0800503c <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d104      	bne.n	8005056 <vTaskPlaceOnEventList+0x1a>
 800504c:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 8005050:	4808      	ldr	r0, [pc, #32]	@ (8005074 <vTaskPlaceOnEventList+0x38>)
 8005052:	f7fc fcd9 	bl	8001a08 <vAssertCalled>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005056:	4b08      	ldr	r3, [pc, #32]	@ (8005078 <vTaskPlaceOnEventList+0x3c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	3318      	adds	r3, #24
 800505c:	4619      	mov	r1, r3
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7fe fc03 	bl	800386a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005064:	2101      	movs	r1, #1
 8005066:	6838      	ldr	r0, [r7, #0]
 8005068:	f001 f9e4 	bl	8006434 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 800506c:	bf00      	nop
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	08024ae0 	.word	0x08024ae0
 8005078:	20000e0c 	.word	0x20000e0c

0800507c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
    traceENTER_vTaskPlaceOnUnorderedEventList( pxEventList, xItemValue, xTicksToWait );

    configASSERT( pxEventList );
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d104      	bne.n	8005098 <vTaskPlaceOnUnorderedEventList+0x1c>
 800508e:	f241 419e 	movw	r1, #5278	@ 0x149e
 8005092:	481d      	ldr	r0, [pc, #116]	@ (8005108 <vTaskPlaceOnUnorderedEventList+0x8c>)
 8005094:	f7fc fcb8 	bl	8001a08 <vAssertCalled>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8005098:	4b1c      	ldr	r3, [pc, #112]	@ (800510c <vTaskPlaceOnUnorderedEventList+0x90>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d104      	bne.n	80050aa <vTaskPlaceOnUnorderedEventList+0x2e>
 80050a0:	f241 41a2 	movw	r1, #5282	@ 0x14a2
 80050a4:	4818      	ldr	r0, [pc, #96]	@ (8005108 <vTaskPlaceOnUnorderedEventList+0x8c>)
 80050a6:	f7fc fcaf 	bl	8001a08 <vAssertCalled>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80050aa:	4b19      	ldr	r3, [pc, #100]	@ (8005110 <vTaskPlaceOnUnorderedEventList+0x94>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80050b4:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	617b      	str	r3, [r7, #20]
 80050bc:	4b14      	ldr	r3, [pc, #80]	@ (8005110 <vTaskPlaceOnUnorderedEventList+0x94>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	61da      	str	r2, [r3, #28]
 80050c4:	4b12      	ldr	r3, [pc, #72]	@ (8005110 <vTaskPlaceOnUnorderedEventList+0x94>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	6892      	ldr	r2, [r2, #8]
 80050cc:	621a      	str	r2, [r3, #32]
 80050ce:	4b10      	ldr	r3, [pc, #64]	@ (8005110 <vTaskPlaceOnUnorderedEventList+0x94>)
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	3218      	adds	r2, #24
 80050d8:	605a      	str	r2, [r3, #4]
 80050da:	4b0d      	ldr	r3, [pc, #52]	@ (8005110 <vTaskPlaceOnUnorderedEventList+0x94>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f103 0218 	add.w	r2, r3, #24
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	609a      	str	r2, [r3, #8]
 80050e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005110 <vTaskPlaceOnUnorderedEventList+0x94>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	601a      	str	r2, [r3, #0]

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80050f8:	2101      	movs	r1, #1
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f001 f99a 	bl	8006434 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnUnorderedEventList();
}
 8005100:	bf00      	nop
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	08024ae0 	.word	0x08024ae0
 800510c:	20000f34 	.word	0x20000f34
 8005110:	20000e0c 	.word	0x20000e0c

08005114 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b088      	sub	sp, #32
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d104      	bne.n	8005134 <xTaskRemoveFromEventList+0x20>
 800512a:	f241 41f5 	movw	r1, #5365	@ 0x14f5
 800512e:	485b      	ldr	r0, [pc, #364]	@ (800529c <xTaskRemoveFromEventList+0x188>)
 8005130:	f7fc fc6a 	bl	8001a08 <vAssertCalled>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005138:	617b      	str	r3, [r7, #20]
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	6a12      	ldr	r2, [r2, #32]
 8005142:	609a      	str	r2, [r3, #8]
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	69d2      	ldr	r2, [r2, #28]
 800514c:	605a      	str	r2, [r3, #4]
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	3318      	adds	r3, #24
 8005156:	429a      	cmp	r2, r3
 8005158:	d103      	bne.n	8005162 <xTaskRemoveFromEventList+0x4e>
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	6a1a      	ldr	r2, [r3, #32]
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	605a      	str	r2, [r3, #4]
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	2200      	movs	r2, #0
 8005166:	629a      	str	r2, [r3, #40]	@ 0x28
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	1e5a      	subs	r2, r3, #1
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005172:	4b4b      	ldr	r3, [pc, #300]	@ (80052a0 <xTaskRemoveFromEventList+0x18c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d160      	bne.n	800523c <xTaskRemoveFromEventList+0x128>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	68d2      	ldr	r2, [r2, #12]
 8005188:	609a      	str	r2, [r3, #8]
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	6892      	ldr	r2, [r2, #8]
 8005192:	605a      	str	r2, [r3, #4]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	3304      	adds	r3, #4
 800519c:	429a      	cmp	r2, r3
 800519e:	d103      	bne.n	80051a8 <xTaskRemoveFromEventList+0x94>
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	605a      	str	r2, [r3, #4]
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	2200      	movs	r2, #0
 80051ac:	615a      	str	r2, [r3, #20]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	1e5a      	subs	r2, r3, #1
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051bc:	2201      	movs	r2, #1
 80051be:	409a      	lsls	r2, r3
 80051c0:	4b38      	ldr	r3, [pc, #224]	@ (80052a4 <xTaskRemoveFromEventList+0x190>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	4a37      	ldr	r2, [pc, #220]	@ (80052a4 <xTaskRemoveFromEventList+0x190>)
 80051c8:	6013      	str	r3, [r2, #0]
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051ce:	4936      	ldr	r1, [pc, #216]	@ (80052a8 <xTaskRemoveFromEventList+0x194>)
 80051d0:	4613      	mov	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	440b      	add	r3, r1
 80051da:	3304      	adds	r3, #4
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	60bb      	str	r3, [r7, #8]
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	609a      	str	r2, [r3, #8]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	689a      	ldr	r2, [r3, #8]
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	60da      	str	r2, [r3, #12]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	3204      	adds	r2, #4
 80051f6:	605a      	str	r2, [r3, #4]
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	1d1a      	adds	r2, r3, #4
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	609a      	str	r2, [r3, #8]
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005204:	4613      	mov	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4a26      	ldr	r2, [pc, #152]	@ (80052a8 <xTaskRemoveFromEventList+0x194>)
 800520e:	441a      	add	r2, r3
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	615a      	str	r2, [r3, #20]
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005218:	4923      	ldr	r1, [pc, #140]	@ (80052a8 <xTaskRemoveFromEventList+0x194>)
 800521a:	4613      	mov	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4413      	add	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	440b      	add	r3, r1
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	69ba      	ldr	r2, [r7, #24]
 8005228:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800522a:	1c59      	adds	r1, r3, #1
 800522c:	481e      	ldr	r0, [pc, #120]	@ (80052a8 <xTaskRemoveFromEventList+0x194>)
 800522e:	4613      	mov	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4403      	add	r3, r0
 8005238:	6019      	str	r1, [r3, #0]
 800523a:	e01b      	b.n	8005274 <xTaskRemoveFromEventList+0x160>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800523c:	4b1b      	ldr	r3, [pc, #108]	@ (80052ac <xTaskRemoveFromEventList+0x198>)
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	613b      	str	r3, [r7, #16]
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	61da      	str	r2, [r3, #28]
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	689a      	ldr	r2, [r3, #8]
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	621a      	str	r2, [r3, #32]
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	3218      	adds	r2, #24
 8005258:	605a      	str	r2, [r3, #4]
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	f103 0218 	add.w	r2, r3, #24
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	609a      	str	r2, [r3, #8]
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	4a11      	ldr	r2, [pc, #68]	@ (80052ac <xTaskRemoveFromEventList+0x198>)
 8005268:	629a      	str	r2, [r3, #40]	@ 0x28
 800526a:	4b10      	ldr	r3, [pc, #64]	@ (80052ac <xTaskRemoveFromEventList+0x198>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	3301      	adds	r3, #1
 8005270:	4a0e      	ldr	r2, [pc, #56]	@ (80052ac <xTaskRemoveFromEventList+0x198>)
 8005272:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005278:	4b0d      	ldr	r3, [pc, #52]	@ (80052b0 <xTaskRemoveFromEventList+0x19c>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527e:	429a      	cmp	r2, r3
 8005280:	d905      	bls.n	800528e <xTaskRemoveFromEventList+0x17a>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8005282:	2301      	movs	r3, #1
 8005284:	61fb      	str	r3, [r7, #28]

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8005286:	4b0b      	ldr	r3, [pc, #44]	@ (80052b4 <xTaskRemoveFromEventList+0x1a0>)
 8005288:	2201      	movs	r2, #1
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	e001      	b.n	8005292 <xTaskRemoveFromEventList+0x17e>
        }
        else
        {
            xReturn = pdFALSE;
 800528e:	2300      	movs	r3, #0
 8005290:	61fb      	str	r3, [r7, #28]
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8005292:	69fb      	ldr	r3, [r7, #28]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3720      	adds	r7, #32
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	08024ae0 	.word	0x08024ae0
 80052a0:	20000f34 	.word	0x20000f34
 80052a4:	20000f14 	.word	0x20000f14
 80052a8:	20000e10 	.word	0x20000e10
 80052ac:	20000ecc 	.word	0x20000ecc
 80052b0:	20000e0c 	.word	0x20000e0c
 80052b4:	20000f20 	.word	0x20000f20

080052b8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]

    traceENTER_vTaskRemoveFromUnorderedEventList( pxEventListItem, xItemValue );

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 80052c2:	4b52      	ldr	r3, [pc, #328]	@ (800540c <vTaskRemoveFromUnorderedEventList+0x154>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d104      	bne.n	80052d4 <vTaskRemoveFromUnorderedEventList+0x1c>
 80052ca:	f241 5143 	movw	r1, #5443	@ 0x1543
 80052ce:	4850      	ldr	r0, [pc, #320]	@ (8005410 <vTaskRemoveFromUnorderedEventList+0x158>)
 80052d0:	f7fc fb9a 	bl	8001a08 <vAssertCalled>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	601a      	str	r2, [r3, #0]
    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem );
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	617b      	str	r3, [r7, #20]
    configASSERT( pxUnblockedTCB );
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d104      	bne.n	80052f4 <vTaskRemoveFromUnorderedEventList+0x3c>
 80052ea:	f241 514e 	movw	r1, #5454	@ 0x154e
 80052ee:	4848      	ldr	r0, [pc, #288]	@ (8005410 <vTaskRemoveFromUnorderedEventList+0x158>)
 80052f0:	f7fc fb8a 	bl	8001a08 <vAssertCalled>
    listREMOVE_ITEM( pxEventListItem );
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	613b      	str	r3, [r7, #16]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	6892      	ldr	r2, [r2, #8]
 8005302:	609a      	str	r2, [r3, #8]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6852      	ldr	r2, [r2, #4]
 800530c:	605a      	str	r2, [r3, #4]
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	429a      	cmp	r2, r3
 8005316:	d103      	bne.n	8005320 <vTaskRemoveFromUnorderedEventList+0x68>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	605a      	str	r2, [r3, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	611a      	str	r2, [r3, #16]
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	1e5a      	subs	r2, r3, #1
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	601a      	str	r2, [r3, #0]
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	68d2      	ldr	r2, [r2, #12]
 800533e:	609a      	str	r2, [r3, #8]
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	6892      	ldr	r2, [r2, #8]
 8005348:	605a      	str	r2, [r3, #4]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	3304      	adds	r3, #4
 8005352:	429a      	cmp	r2, r3
 8005354:	d103      	bne.n	800535e <vTaskRemoveFromUnorderedEventList+0xa6>
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	68da      	ldr	r2, [r3, #12]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	605a      	str	r2, [r3, #4]
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	2200      	movs	r2, #0
 8005362:	615a      	str	r2, [r3, #20]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	1e5a      	subs	r2, r3, #1
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005372:	2201      	movs	r2, #1
 8005374:	409a      	lsls	r2, r3
 8005376:	4b27      	ldr	r3, [pc, #156]	@ (8005414 <vTaskRemoveFromUnorderedEventList+0x15c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4313      	orrs	r3, r2
 800537c:	4a25      	ldr	r2, [pc, #148]	@ (8005414 <vTaskRemoveFromUnorderedEventList+0x15c>)
 800537e:	6013      	str	r3, [r2, #0]
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005384:	4924      	ldr	r1, [pc, #144]	@ (8005418 <vTaskRemoveFromUnorderedEventList+0x160>)
 8005386:	4613      	mov	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	440b      	add	r3, r1
 8005390:	3304      	adds	r3, #4
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	60bb      	str	r3, [r7, #8]
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	609a      	str	r2, [r3, #8]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	689a      	ldr	r2, [r3, #8]
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	60da      	str	r2, [r3, #12]
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	3204      	adds	r2, #4
 80053ac:	605a      	str	r2, [r3, #4]
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	1d1a      	adds	r2, r3, #4
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	609a      	str	r2, [r3, #8]
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ba:	4613      	mov	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4a15      	ldr	r2, [pc, #84]	@ (8005418 <vTaskRemoveFromUnorderedEventList+0x160>)
 80053c4:	441a      	add	r2, r3
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	615a      	str	r2, [r3, #20]
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ce:	4912      	ldr	r1, [pc, #72]	@ (8005418 <vTaskRemoveFromUnorderedEventList+0x160>)
 80053d0:	4613      	mov	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	440b      	add	r3, r1
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80053e0:	1c59      	adds	r1, r3, #1
 80053e2:	480d      	ldr	r0, [pc, #52]	@ (8005418 <vTaskRemoveFromUnorderedEventList+0x160>)
 80053e4:	4613      	mov	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	4403      	add	r3, r0
 80053ee:	6019      	str	r1, [r3, #0]

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053f4:	4b09      	ldr	r3, [pc, #36]	@ (800541c <vTaskRemoveFromUnorderedEventList+0x164>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d902      	bls.n	8005404 <vTaskRemoveFromUnorderedEventList+0x14c>
        {
            /* The unblocked task has a priority above that of the calling task, so
             * a context switch is required.  This function is called with the
             * scheduler suspended so xYieldPending is set so the context switch
             * occurs immediately that the scheduler is resumed (unsuspended). */
            xYieldPendings[ 0 ] = pdTRUE;
 80053fe:	4b08      	ldr	r3, [pc, #32]	@ (8005420 <vTaskRemoveFromUnorderedEventList+0x168>)
 8005400:	2201      	movs	r2, #1
 8005402:	601a      	str	r2, [r3, #0]
        #endif
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskRemoveFromUnorderedEventList();
}
 8005404:	bf00      	nop
 8005406:	3718      	adds	r7, #24
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	20000f34 	.word	0x20000f34
 8005410:	08024ae0 	.word	0x08024ae0
 8005414:	20000f14 	.word	0x20000f14
 8005418:	20000e10 	.word	0x20000e10
 800541c:	20000e0c 	.word	0x20000e0c
 8005420:	20000f20 	.word	0x20000f20

08005424 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskSetTimeOutState( pxTimeOut );

    configASSERT( pxTimeOut );
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d104      	bne.n	800543c <vTaskSetTimeOutState+0x18>
 8005432:	f241 5186 	movw	r1, #5510	@ 0x1586
 8005436:	4809      	ldr	r0, [pc, #36]	@ (800545c <vTaskSetTimeOutState+0x38>)
 8005438:	f7fc fae6 	bl	8001a08 <vAssertCalled>
    taskENTER_CRITICAL();
 800543c:	f001 f9b0 	bl	80067a0 <vPortEnterCritical>
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005440:	4b07      	ldr	r3, [pc, #28]	@ (8005460 <vTaskSetTimeOutState+0x3c>)
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	601a      	str	r2, [r3, #0]
        pxTimeOut->xTimeOnEntering = xTickCount;
 8005448:	4b06      	ldr	r3, [pc, #24]	@ (8005464 <vTaskSetTimeOutState+0x40>)
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	605a      	str	r2, [r3, #4]
    }
    taskEXIT_CRITICAL();
 8005450:	f001 f9d2 	bl	80067f8 <vPortExitCritical>

    traceRETURN_vTaskSetTimeOutState();
}
 8005454:	bf00      	nop
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	08024ae0 	.word	0x08024ae0
 8005460:	20000f24 	.word	0x20000f24
 8005464:	20000f10 	.word	0x20000f10

08005468 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005470:	4b06      	ldr	r3, [pc, #24]	@ (800548c <vTaskInternalSetTimeOutState+0x24>)
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005478:	4b05      	ldr	r3, [pc, #20]	@ (8005490 <vTaskInternalSetTimeOutState+0x28>)
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	20000f24 	.word	0x20000f24
 8005490:	20000f10 	.word	0x20000f10

08005494 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d104      	bne.n	80054ae <xTaskCheckForTimeOut+0x1a>
 80054a4:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 80054a8:	4825      	ldr	r0, [pc, #148]	@ (8005540 <xTaskCheckForTimeOut+0xac>)
 80054aa:	f7fc faad 	bl	8001a08 <vAssertCalled>
    configASSERT( pxTicksToWait );
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d104      	bne.n	80054be <xTaskCheckForTimeOut+0x2a>
 80054b4:	f241 51a6 	movw	r1, #5542	@ 0x15a6
 80054b8:	4821      	ldr	r0, [pc, #132]	@ (8005540 <xTaskCheckForTimeOut+0xac>)
 80054ba:	f7fc faa5 	bl	8001a08 <vAssertCalled>

    taskENTER_CRITICAL();
 80054be:	f001 f96f 	bl	80067a0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80054c2:	4b20      	ldr	r3, [pc, #128]	@ (8005544 <xTaskCheckForTimeOut+0xb0>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054da:	d102      	bne.n	80054e2 <xTaskCheckForTimeOut+0x4e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80054dc:	2300      	movs	r3, #0
 80054de:	617b      	str	r3, [r7, #20]
 80054e0:	e026      	b.n	8005530 <xTaskCheckForTimeOut+0x9c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	4b18      	ldr	r3, [pc, #96]	@ (8005548 <xTaskCheckForTimeOut+0xb4>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d00a      	beq.n	8005504 <xTaskCheckForTimeOut+0x70>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d305      	bcc.n	8005504 <xTaskCheckForTimeOut+0x70>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80054f8:	2301      	movs	r3, #1
 80054fa:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	2200      	movs	r2, #0
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	e015      	b.n	8005530 <xTaskCheckForTimeOut+0x9c>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	429a      	cmp	r2, r3
 800550c:	d20b      	bcs.n	8005526 <xTaskCheckForTimeOut+0x92>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	1ad2      	subs	r2, r2, r3
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7ff ffa4 	bl	8005468 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005520:	2300      	movs	r3, #0
 8005522:	617b      	str	r3, [r7, #20]
 8005524:	e004      	b.n	8005530 <xTaskCheckForTimeOut+0x9c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	2200      	movs	r2, #0
 800552a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800552c:	2301      	movs	r3, #1
 800552e:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8005530:	f001 f962 	bl	80067f8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8005534:	697b      	ldr	r3, [r7, #20]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3718      	adds	r7, #24
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	08024ae0 	.word	0x08024ae0
 8005544:	20000f10 	.word	0x20000f10
 8005548:	20000f24 	.word	0x20000f24

0800554c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800554c:	b480      	push	{r7}
 800554e:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8005550:	4b03      	ldr	r3, [pc, #12]	@ (8005560 <vTaskMissedYield+0x14>)
 8005552:	2201      	movs	r2, #1
 8005554:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8005556:	bf00      	nop
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	20000f20 	.word	0x20000f20

08005564 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800556c:	f000 f852 	bl	8005614 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8005570:	4b06      	ldr	r3, [pc, #24]	@ (800558c <prvIdleTask+0x28>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d9f9      	bls.n	800556c <prvIdleTask+0x8>
            {
                taskYIELD();
 8005578:	4b05      	ldr	r3, [pc, #20]	@ (8005590 <prvIdleTask+0x2c>)
 800557a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	f3bf 8f4f 	dsb	sy
 8005584:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005588:	e7f0      	b.n	800556c <prvIdleTask+0x8>
 800558a:	bf00      	nop
 800558c:	20000e10 	.word	0x20000e10
 8005590:	e000ed04 	.word	0xe000ed04

08005594 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800559a:	2300      	movs	r3, #0
 800559c:	607b      	str	r3, [r7, #4]
 800559e:	e00c      	b.n	80055ba <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	4613      	mov	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4413      	add	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4a12      	ldr	r2, [pc, #72]	@ (80055f4 <prvInitialiseTaskLists+0x60>)
 80055ac:	4413      	add	r3, r2
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7fe f90a 	bl	80037c8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	3301      	adds	r3, #1
 80055b8:	607b      	str	r3, [r7, #4]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b06      	cmp	r3, #6
 80055be:	d9ef      	bls.n	80055a0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80055c0:	480d      	ldr	r0, [pc, #52]	@ (80055f8 <prvInitialiseTaskLists+0x64>)
 80055c2:	f7fe f901 	bl	80037c8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80055c6:	480d      	ldr	r0, [pc, #52]	@ (80055fc <prvInitialiseTaskLists+0x68>)
 80055c8:	f7fe f8fe 	bl	80037c8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80055cc:	480c      	ldr	r0, [pc, #48]	@ (8005600 <prvInitialiseTaskLists+0x6c>)
 80055ce:	f7fe f8fb 	bl	80037c8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80055d2:	480c      	ldr	r0, [pc, #48]	@ (8005604 <prvInitialiseTaskLists+0x70>)
 80055d4:	f7fe f8f8 	bl	80037c8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80055d8:	480b      	ldr	r0, [pc, #44]	@ (8005608 <prvInitialiseTaskLists+0x74>)
 80055da:	f7fe f8f5 	bl	80037c8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80055de:	4b0b      	ldr	r3, [pc, #44]	@ (800560c <prvInitialiseTaskLists+0x78>)
 80055e0:	4a05      	ldr	r2, [pc, #20]	@ (80055f8 <prvInitialiseTaskLists+0x64>)
 80055e2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80055e4:	4b0a      	ldr	r3, [pc, #40]	@ (8005610 <prvInitialiseTaskLists+0x7c>)
 80055e6:	4a05      	ldr	r2, [pc, #20]	@ (80055fc <prvInitialiseTaskLists+0x68>)
 80055e8:	601a      	str	r2, [r3, #0]
}
 80055ea:	bf00      	nop
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	20000e10 	.word	0x20000e10
 80055f8:	20000e9c 	.word	0x20000e9c
 80055fc:	20000eb0 	.word	0x20000eb0
 8005600:	20000ecc 	.word	0x20000ecc
 8005604:	20000ee0 	.word	0x20000ee0
 8005608:	20000ef8 	.word	0x20000ef8
 800560c:	20000ec4 	.word	0x20000ec4
 8005610:	20000ec8 	.word	0x20000ec8

08005614 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800561a:	e019      	b.n	8005650 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 800561c:	f001 f8c0 	bl	80067a0 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005620:	4b10      	ldr	r3, [pc, #64]	@ (8005664 <prvCheckTasksWaitingTermination+0x50>)
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	3304      	adds	r3, #4
 800562c:	4618      	mov	r0, r3
 800562e:	f7fe f955 	bl	80038dc <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8005632:	4b0d      	ldr	r3, [pc, #52]	@ (8005668 <prvCheckTasksWaitingTermination+0x54>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	3b01      	subs	r3, #1
 8005638:	4a0b      	ldr	r2, [pc, #44]	@ (8005668 <prvCheckTasksWaitingTermination+0x54>)
 800563a:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 800563c:	4b0b      	ldr	r3, [pc, #44]	@ (800566c <prvCheckTasksWaitingTermination+0x58>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	3b01      	subs	r3, #1
 8005642:	4a0a      	ldr	r2, [pc, #40]	@ (800566c <prvCheckTasksWaitingTermination+0x58>)
 8005644:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8005646:	f001 f8d7 	bl	80067f8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f810 	bl	8005670 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005650:	4b06      	ldr	r3, [pc, #24]	@ (800566c <prvCheckTasksWaitingTermination+0x58>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1e1      	bne.n	800561c <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8005658:	bf00      	nop
 800565a:	bf00      	nop
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	20000ee0 	.word	0x20000ee0
 8005668:	20000f0c 	.word	0x20000f0c
 800566c:	20000ef4 	.word	0x20000ef4

08005670 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800567c:	4618      	mov	r0, r3
 800567e:	f001 fa65 	bl	8006b4c <vPortFree>
            vPortFree( pxTCB );
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f001 fa62 	bl	8006b4c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005688:	bf00      	nop
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005690:	b480      	push	{r7}
 8005692:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005694:	4b0a      	ldr	r3, [pc, #40]	@ (80056c0 <prvResetNextTaskUnblockTime+0x30>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d104      	bne.n	80056a8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800569e:	4b09      	ldr	r3, [pc, #36]	@ (80056c4 <prvResetNextTaskUnblockTime+0x34>)
 80056a0:	f04f 32ff 	mov.w	r2, #4294967295
 80056a4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80056a6:	e005      	b.n	80056b4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80056a8:	4b05      	ldr	r3, [pc, #20]	@ (80056c0 <prvResetNextTaskUnblockTime+0x30>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a04      	ldr	r2, [pc, #16]	@ (80056c4 <prvResetNextTaskUnblockTime+0x34>)
 80056b2:	6013      	str	r3, [r2, #0]
}
 80056b4:	bf00      	nop
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	20000ec4 	.word	0x20000ec4
 80056c4:	20000f2c 	.word	0x20000f2c

080056c8 <xTaskGetCurrentTaskHandle>:

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) || ( configNUMBER_OF_CORES > 1 )

    #if ( configNUMBER_OF_CORES == 1 )
        TaskHandle_t xTaskGetCurrentTaskHandle( void )
        {
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
 80056ce:	4b05      	ldr	r3, [pc, #20]	@ (80056e4 <xTaskGetCurrentTaskHandle+0x1c>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	607b      	str	r3, [r7, #4]

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
 80056d4:	687b      	ldr	r3, [r7, #4]
        }
 80056d6:	4618      	mov	r0, r3
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	20000e0c 	.word	0x20000e0c

080056e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 80056ee:	4b0b      	ldr	r3, [pc, #44]	@ (800571c <xTaskGetSchedulerState+0x34>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d102      	bne.n	80056fc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80056f6:	2301      	movs	r3, #1
 80056f8:	607b      	str	r3, [r7, #4]
 80056fa:	e008      	b.n	800570e <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80056fc:	4b08      	ldr	r3, [pc, #32]	@ (8005720 <xTaskGetSchedulerState+0x38>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d102      	bne.n	800570a <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8005704:	2302      	movs	r3, #2
 8005706:	607b      	str	r3, [r7, #4]
 8005708:	e001      	b.n	800570e <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 800570a:	2300      	movs	r3, #0
 800570c:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 800570e:	687b      	ldr	r3, [r7, #4]
    }
 8005710:	4618      	mov	r0, r3
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	20000f18 	.word	0x20000f18
 8005720:	20000f34 	.word	0x20000f34

08005724 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005730:	2300      	movs	r3, #0
 8005732:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	f000 8089 	beq.w	800584e <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005740:	4b45      	ldr	r3, [pc, #276]	@ (8005858 <xTaskPriorityInherit+0x134>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005746:	429a      	cmp	r2, r3
 8005748:	d278      	bcs.n	800583c <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	2b00      	cmp	r3, #0
 8005750:	db06      	blt.n	8005760 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 8005752:	4b41      	ldr	r3, [pc, #260]	@ (8005858 <xTaskPriorityInherit+0x134>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005758:	f1c3 0207 	rsb	r2, r3, #7
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	6959      	ldr	r1, [r3, #20]
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005768:	4613      	mov	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4413      	add	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4a3a      	ldr	r2, [pc, #232]	@ (800585c <xTaskPriorityInherit+0x138>)
 8005772:	4413      	add	r3, r2
 8005774:	4299      	cmp	r1, r3
 8005776:	d159      	bne.n	800582c <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	3304      	adds	r3, #4
 800577c:	4618      	mov	r0, r3
 800577e:	f7fe f8ad 	bl	80038dc <uxListRemove>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10a      	bne.n	800579e <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578c:	2201      	movs	r2, #1
 800578e:	fa02 f303 	lsl.w	r3, r2, r3
 8005792:	43da      	mvns	r2, r3
 8005794:	4b32      	ldr	r3, [pc, #200]	@ (8005860 <xTaskPriorityInherit+0x13c>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4013      	ands	r3, r2
 800579a:	4a31      	ldr	r2, [pc, #196]	@ (8005860 <xTaskPriorityInherit+0x13c>)
 800579c:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800579e:	4b2e      	ldr	r3, [pc, #184]	@ (8005858 <xTaskPriorityInherit+0x134>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ac:	2201      	movs	r2, #1
 80057ae:	409a      	lsls	r2, r3
 80057b0:	4b2b      	ldr	r3, [pc, #172]	@ (8005860 <xTaskPriorityInherit+0x13c>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	4a2a      	ldr	r2, [pc, #168]	@ (8005860 <xTaskPriorityInherit+0x13c>)
 80057b8:	6013      	str	r3, [r2, #0]
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057be:	4927      	ldr	r1, [pc, #156]	@ (800585c <xTaskPriorityInherit+0x138>)
 80057c0:	4613      	mov	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	440b      	add	r3, r1
 80057ca:	3304      	adds	r3, #4
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	60fb      	str	r3, [r7, #12]
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	609a      	str	r2, [r3, #8]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	689a      	ldr	r2, [r3, #8]
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	60da      	str	r2, [r3, #12]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	3204      	adds	r2, #4
 80057e6:	605a      	str	r2, [r3, #4]
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	1d1a      	adds	r2, r3, #4
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	609a      	str	r2, [r3, #8]
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057f4:	4613      	mov	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4a17      	ldr	r2, [pc, #92]	@ (800585c <xTaskPriorityInherit+0x138>)
 80057fe:	441a      	add	r2, r3
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	615a      	str	r2, [r3, #20]
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005808:	4914      	ldr	r1, [pc, #80]	@ (800585c <xTaskPriorityInherit+0x138>)
 800580a:	4613      	mov	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4413      	add	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	440b      	add	r3, r1
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800581a:	1c59      	adds	r1, r3, #1
 800581c:	480f      	ldr	r0, [pc, #60]	@ (800585c <xTaskPriorityInherit+0x138>)
 800581e:	4613      	mov	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4403      	add	r3, r0
 8005828:	6019      	str	r1, [r3, #0]
 800582a:	e004      	b.n	8005836 <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800582c:	4b0a      	ldr	r3, [pc, #40]	@ (8005858 <xTaskPriorityInherit+0x134>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8005836:	2301      	movs	r3, #1
 8005838:	617b      	str	r3, [r7, #20]
 800583a:	e008      	b.n	800584e <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005840:	4b05      	ldr	r3, [pc, #20]	@ (8005858 <xTaskPriorityInherit+0x134>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005846:	429a      	cmp	r2, r3
 8005848:	d201      	bcs.n	800584e <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800584a:	2301      	movs	r3, #1
 800584c:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 800584e:	697b      	ldr	r3, [r7, #20]
    }
 8005850:	4618      	mov	r0, r3
 8005852:	3718      	adds	r7, #24
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	20000e0c 	.word	0x20000e0c
 800585c:	20000e10 	.word	0x20000e10
 8005860:	20000f14 	.word	0x20000f14

08005864 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005870:	2300      	movs	r3, #0
 8005872:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	f000 8082 	beq.w	8005980 <xTaskPriorityDisinherit+0x11c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800587c:	4b43      	ldr	r3, [pc, #268]	@ (800598c <xTaskPriorityDisinherit+0x128>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	429a      	cmp	r2, r3
 8005884:	d004      	beq.n	8005890 <xTaskPriorityDisinherit+0x2c>
 8005886:	f641 2128 	movw	r1, #6696	@ 0x1a28
 800588a:	4841      	ldr	r0, [pc, #260]	@ (8005990 <xTaskPriorityDisinherit+0x12c>)
 800588c:	f7fc f8bc 	bl	8001a08 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005894:	2b00      	cmp	r3, #0
 8005896:	d104      	bne.n	80058a2 <xTaskPriorityDisinherit+0x3e>
 8005898:	f641 2129 	movw	r1, #6697	@ 0x1a29
 800589c:	483c      	ldr	r0, [pc, #240]	@ (8005990 <xTaskPriorityDisinherit+0x12c>)
 800589e:	f7fc f8b3 	bl	8001a08 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058a6:	1e5a      	subs	r2, r3, #1
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d063      	beq.n	8005980 <xTaskPriorityDisinherit+0x11c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d15f      	bne.n	8005980 <xTaskPriorityDisinherit+0x11c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	3304      	adds	r3, #4
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7fe f809 	bl	80038dc <uxListRemove>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10a      	bne.n	80058e6 <xTaskPriorityDisinherit+0x82>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d4:	2201      	movs	r2, #1
 80058d6:	fa02 f303 	lsl.w	r3, r2, r3
 80058da:	43da      	mvns	r2, r3
 80058dc:	4b2d      	ldr	r3, [pc, #180]	@ (8005994 <xTaskPriorityDisinherit+0x130>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4013      	ands	r3, r2
 80058e2:	4a2c      	ldr	r2, [pc, #176]	@ (8005994 <xTaskPriorityDisinherit+0x130>)
 80058e4:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f2:	f1c3 0207 	rsb	r2, r3, #7
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058fe:	2201      	movs	r2, #1
 8005900:	409a      	lsls	r2, r3
 8005902:	4b24      	ldr	r3, [pc, #144]	@ (8005994 <xTaskPriorityDisinherit+0x130>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4313      	orrs	r3, r2
 8005908:	4a22      	ldr	r2, [pc, #136]	@ (8005994 <xTaskPriorityDisinherit+0x130>)
 800590a:	6013      	str	r3, [r2, #0]
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005910:	4921      	ldr	r1, [pc, #132]	@ (8005998 <xTaskPriorityDisinherit+0x134>)
 8005912:	4613      	mov	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	440b      	add	r3, r1
 800591c:	3304      	adds	r3, #4
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	609a      	str	r2, [r3, #8]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	60da      	str	r2, [r3, #12]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	3204      	adds	r2, #4
 8005938:	605a      	str	r2, [r3, #4]
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	1d1a      	adds	r2, r3, #4
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	609a      	str	r2, [r3, #8]
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005946:	4613      	mov	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4a12      	ldr	r2, [pc, #72]	@ (8005998 <xTaskPriorityDisinherit+0x134>)
 8005950:	441a      	add	r2, r3
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	615a      	str	r2, [r3, #20]
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800595a:	490f      	ldr	r1, [pc, #60]	@ (8005998 <xTaskPriorityDisinherit+0x134>)
 800595c:	4613      	mov	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4413      	add	r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	440b      	add	r3, r1
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800596c:	1c59      	adds	r1, r3, #1
 800596e:	480a      	ldr	r0, [pc, #40]	@ (8005998 <xTaskPriorityDisinherit+0x134>)
 8005970:	4613      	mov	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4403      	add	r3, r0
 800597a:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800597c:	2301      	movs	r3, #1
 800597e:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8005980:	697b      	ldr	r3, [r7, #20]
    }
 8005982:	4618      	mov	r0, r3
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	20000e0c 	.word	0x20000e0c
 8005990:	08024ae0 	.word	0x08024ae0
 8005994:	20000f14 	.word	0x20000f14
 8005998:	20000e10 	.word	0x20000e10

0800599c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800599c:	b580      	push	{r7, lr}
 800599e:	b088      	sub	sp, #32
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80059aa:	2301      	movs	r3, #1
 80059ac:	617b      	str	r3, [r7, #20]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 8096 	beq.w	8005ae2 <vTaskPriorityDisinheritAfterTimeout+0x146>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d104      	bne.n	80059c8 <vTaskPriorityDisinheritAfterTimeout+0x2c>
 80059be:	f641 2186 	movw	r1, #6790	@ 0x1a86
 80059c2:	484a      	ldr	r0, [pc, #296]	@ (8005aec <vTaskPriorityDisinheritAfterTimeout+0x150>)
 80059c4:	f7fc f820 	bl	8001a08 <vAssertCalled>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d902      	bls.n	80059d8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	61fb      	str	r3, [r7, #28]
 80059d6:	e002      	b.n	80059de <vTaskPriorityDisinheritAfterTimeout+0x42>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059dc:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e2:	69fa      	ldr	r2, [r7, #28]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d07c      	beq.n	8005ae2 <vTaskPriorityDisinheritAfterTimeout+0x146>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d177      	bne.n	8005ae2 <vTaskPriorityDisinheritAfterTimeout+0x146>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80059f2:	4b3f      	ldr	r3, [pc, #252]	@ (8005af0 <vTaskPriorityDisinheritAfterTimeout+0x154>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d104      	bne.n	8005a06 <vTaskPriorityDisinheritAfterTimeout+0x6a>
 80059fc:	f641 21a1 	movw	r1, #6817	@ 0x1aa1
 8005a00:	483a      	ldr	r0, [pc, #232]	@ (8005aec <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8005a02:	f7fc f801 	bl	8001a08 <vAssertCalled>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a0a:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	69fa      	ldr	r2, [r7, #28]
 8005a10:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	db04      	blt.n	8005a24 <vTaskPriorityDisinheritAfterTimeout+0x88>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	f1c3 0207 	rsb	r2, r3, #7
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	6959      	ldr	r1, [r3, #20]
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4a30      	ldr	r2, [pc, #192]	@ (8005af4 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8005a34:	4413      	add	r3, r2
 8005a36:	4299      	cmp	r1, r3
 8005a38:	d153      	bne.n	8005ae2 <vTaskPriorityDisinheritAfterTimeout+0x146>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7fd ff4c 	bl	80038dc <uxListRemove>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10a      	bne.n	8005a60 <vTaskPriorityDisinheritAfterTimeout+0xc4>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a4e:	2201      	movs	r2, #1
 8005a50:	fa02 f303 	lsl.w	r3, r2, r3
 8005a54:	43da      	mvns	r2, r3
 8005a56:	4b28      	ldr	r3, [pc, #160]	@ (8005af8 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	4a26      	ldr	r2, [pc, #152]	@ (8005af8 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8005a5e:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a64:	2201      	movs	r2, #1
 8005a66:	409a      	lsls	r2, r3
 8005a68:	4b23      	ldr	r3, [pc, #140]	@ (8005af8 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	4a22      	ldr	r2, [pc, #136]	@ (8005af8 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8005a70:	6013      	str	r3, [r2, #0]
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a76:	491f      	ldr	r1, [pc, #124]	@ (8005af4 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8005a78:	4613      	mov	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	440b      	add	r3, r1
 8005a82:	3304      	adds	r3, #4
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	609a      	str	r2, [r3, #8]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	689a      	ldr	r2, [r3, #8]
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	60da      	str	r2, [r3, #12]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	3204      	adds	r2, #4
 8005a9e:	605a      	str	r2, [r3, #4]
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	1d1a      	adds	r2, r3, #4
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	609a      	str	r2, [r3, #8]
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aac:	4613      	mov	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4a0f      	ldr	r2, [pc, #60]	@ (8005af4 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8005ab6:	441a      	add	r2, r3
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	615a      	str	r2, [r3, #20]
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ac0:	490c      	ldr	r1, [pc, #48]	@ (8005af4 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	4413      	add	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	440b      	add	r3, r1
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005ad2:	1c59      	adds	r1, r3, #1
 8005ad4:	4807      	ldr	r0, [pc, #28]	@ (8005af4 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4403      	add	r3, r0
 8005ae0:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 8005ae2:	bf00      	nop
 8005ae4:	3720      	adds	r7, #32
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	08024ae0 	.word	0x08024ae0
 8005af0:	20000e0c 	.word	0x20000e0c
 8005af4:	20000e10 	.word	0x20000e10
 8005af8:	20000f14 	.word	0x20000f14

08005afc <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    traceENTER_uxTaskResetEventItemValue();

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8005b02:	4b09      	ldr	r3, [pc, #36]	@ (8005b28 <uxTaskResetEventItemValue+0x2c>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) );
 8005b0a:	4b07      	ldr	r3, [pc, #28]	@ (8005b28 <uxTaskResetEventItemValue+0x2c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b10:	4b05      	ldr	r3, [pc, #20]	@ (8005b28 <uxTaskResetEventItemValue+0x2c>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f1c2 0207 	rsb	r2, r2, #7
 8005b18:	619a      	str	r2, [r3, #24]

    traceRETURN_uxTaskResetEventItemValue( uxReturn );

    return uxReturn;
 8005b1a:	687b      	ldr	r3, [r7, #4]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	20000e0c 	.word	0x20000e0c

08005b2c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 8005b32:	4b09      	ldr	r3, [pc, #36]	@ (8005b58 <pvTaskIncrementMutexHeldCount+0x2c>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d004      	beq.n	8005b48 <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b42:	1c5a      	adds	r2, r3, #1
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 8005b48:	687b      	ldr	r3, [r7, #4]
    }
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	20000e0c 	.word	0x20000e0c

08005b5c <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b088      	sub	sp, #32
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;
        BaseType_t xAlreadyYielded, xShouldBlock = pdFALSE;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	61fb      	str	r3, [r7, #28]

        traceENTER_ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d004      	beq.n	8005b7c <ulTaskGenericNotifyTake+0x20>
 8005b72:	f641 51c7 	movw	r1, #7623	@ 0x1dc7
 8005b76:	4833      	ldr	r0, [pc, #204]	@ (8005c44 <ulTaskGenericNotifyTake+0xe8>)
 8005b78:	f7fb ff46 	bl	8001a08 <vAssertCalled>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8005b7c:	f7fe ff96 	bl	8004aac <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check if a notification
             * has occurred and set the flag to indicate that we are waiting for
             * a notification. If we do not do so, a notification sent from an ISR
             * will get lost. */
            taskENTER_CRITICAL();
 8005b80:	f000 fe0e 	bl	80067a0 <vPortEnterCritical>
            {
                /* Only block if the notification count is not already non-zero. */
                if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0U )
 8005b84:	4b30      	ldr	r3, [pc, #192]	@ (8005c48 <ulTaskGenericNotifyTake+0xec>)
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	3318      	adds	r3, #24
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4413      	add	r3, r2
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10b      	bne.n	8005bae <ulTaskGenericNotifyTake+0x52>
                {
                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8005b96:	4b2c      	ldr	r3, [pc, #176]	@ (8005c48 <ulTaskGenericNotifyTake+0xec>)
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	3368      	adds	r3, #104	@ 0x68
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d001      	beq.n	8005bae <ulTaskGenericNotifyTake+0x52>
                    {
                        xShouldBlock = pdTRUE;
 8005baa:	2301      	movs	r3, #1
 8005bac:	61fb      	str	r3, [r7, #28]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8005bae:	f000 fe23 	bl	80067f8 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d103      	bne.n	8005bc0 <ulTaskGenericNotifyTake+0x64>
            {
                traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bb8:	2101      	movs	r1, #1
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 fc3a 	bl	8006434 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8005bc0:	f7fe ff82 	bl	8004ac8 <xTaskResumeAll>
 8005bc4:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d10a      	bne.n	8005be2 <ulTaskGenericNotifyTake+0x86>
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d107      	bne.n	8005be2 <ulTaskGenericNotifyTake+0x86>
        {
            taskYIELD_WITHIN_API();
 8005bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8005c4c <ulTaskGenericNotifyTake+0xf0>)
 8005bd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8005be2:	f000 fddd 	bl	80067a0 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8005be6:	4b18      	ldr	r3, [pc, #96]	@ (8005c48 <ulTaskGenericNotifyTake+0xec>)
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	3318      	adds	r3, #24
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0U )
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d014      	beq.n	8005c26 <ulTaskGenericNotifyTake+0xca>
            {
                if( xClearCountOnExit != pdFALSE )
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d008      	beq.n	8005c14 <ulTaskGenericNotifyTake+0xb8>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
 8005c02:	4b11      	ldr	r3, [pc, #68]	@ (8005c48 <ulTaskGenericNotifyTake+0xec>)
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	3318      	adds	r3, #24
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	4413      	add	r3, r2
 8005c0e:	2200      	movs	r2, #0
 8005c10:	605a      	str	r2, [r3, #4]
 8005c12:	e008      	b.n	8005c26 <ulTaskGenericNotifyTake+0xca>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ulReturn - ( uint32_t ) 1;
 8005c14:	4b0c      	ldr	r3, [pc, #48]	@ (8005c48 <ulTaskGenericNotifyTake+0xec>)
 8005c16:	6819      	ldr	r1, [r3, #0]
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	1e5a      	subs	r2, r3, #1
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	3318      	adds	r3, #24
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	440b      	add	r3, r1
 8005c24:	605a      	str	r2, [r3, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8005c26:	4b08      	ldr	r3, [pc, #32]	@ (8005c48 <ulTaskGenericNotifyTake+0xec>)
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	3368      	adds	r3, #104	@ 0x68
 8005c30:	2200      	movs	r2, #0
 8005c32:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005c34:	f000 fde0 	bl	80067f8 <vPortExitCritical>

        traceRETURN_ulTaskGenericNotifyTake( ulReturn );

        return ulReturn;
 8005c38:	697b      	ldr	r3, [r7, #20]
    }
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3720      	adds	r7, #32
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	08024ae0 	.word	0x08024ae0
 8005c48:	20000e0c 	.word	0x20000e0c
 8005c4c:	e000ed04 	.word	0xe000ed04

08005c50 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
 8005c5c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d004      	beq.n	8005c72 <xTaskGenericNotifyWait+0x22>
 8005c68:	f641 612f 	movw	r1, #7727	@ 0x1e2f
 8005c6c:	483e      	ldr	r0, [pc, #248]	@ (8005d68 <xTaskGenericNotifyWait+0x118>)
 8005c6e:	f7fb fecb 	bl	8001a08 <vAssertCalled>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8005c72:	f7fe ff1b 	bl	8004aac <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 8005c76:	f000 fd93 	bl	80067a0 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8005c7a:	4b3c      	ldr	r3, [pc, #240]	@ (8005d6c <xTaskGenericNotifyWait+0x11c>)
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4413      	add	r3, r2
 8005c82:	3368      	adds	r3, #104	@ 0x68
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d01a      	beq.n	8005cc2 <xTaskGenericNotifyWait+0x72>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 8005c8c:	4b37      	ldr	r3, [pc, #220]	@ (8005d6c <xTaskGenericNotifyWait+0x11c>)
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	3318      	adds	r3, #24
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	6859      	ldr	r1, [r3, #4]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	43db      	mvns	r3, r3
 8005c9e:	4019      	ands	r1, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	3318      	adds	r3, #24
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	6059      	str	r1, [r3, #4]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8005caa:	4b30      	ldr	r3, [pc, #192]	@ (8005d6c <xTaskGenericNotifyWait+0x11c>)
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	3368      	adds	r3, #104	@ 0x68
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8005cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <xTaskGenericNotifyWait+0x72>
                    {
                        xShouldBlock = pdTRUE;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8005cc2:	f000 fd99 	bl	80067f8 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d103      	bne.n	8005cd4 <xTaskGenericNotifyWait+0x84>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ccc:	2101      	movs	r1, #1
 8005cce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cd0:	f000 fbb0 	bl	8006434 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8005cd4:	f7fe fef8 	bl	8004ac8 <xTaskResumeAll>
 8005cd8:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d10a      	bne.n	8005cf6 <xTaskGenericNotifyWait+0xa6>
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d107      	bne.n	8005cf6 <xTaskGenericNotifyWait+0xa6>
        {
            taskYIELD_WITHIN_API();
 8005ce6:	4b22      	ldr	r3, [pc, #136]	@ (8005d70 <xTaskGenericNotifyWait+0x120>)
 8005ce8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8005cf6:	f000 fd53 	bl	80067a0 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d008      	beq.n	8005d12 <xTaskGenericNotifyWait+0xc2>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8005d00:	4b1a      	ldr	r3, [pc, #104]	@ (8005d6c <xTaskGenericNotifyWait+0x11c>)
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	3318      	adds	r3, #24
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4413      	add	r3, r2
 8005d0c:	685a      	ldr	r2, [r3, #4]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8005d12:	4b16      	ldr	r3, [pc, #88]	@ (8005d6c <xTaskGenericNotifyWait+0x11c>)
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4413      	add	r3, r2
 8005d1a:	3368      	adds	r3, #104	@ 0x68
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d002      	beq.n	8005d2a <xTaskGenericNotifyWait+0xda>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8005d24:	2300      	movs	r3, #0
 8005d26:	61fb      	str	r3, [r7, #28]
 8005d28:	e010      	b.n	8005d4c <xTaskGenericNotifyWait+0xfc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 8005d2a:	4b10      	ldr	r3, [pc, #64]	@ (8005d6c <xTaskGenericNotifyWait+0x11c>)
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	3318      	adds	r3, #24
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	6859      	ldr	r1, [r3, #4]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	43db      	mvns	r3, r3
 8005d3c:	4019      	ands	r1, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	3318      	adds	r3, #24
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	4413      	add	r3, r2
 8005d46:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8005d4c:	4b07      	ldr	r3, [pc, #28]	@ (8005d6c <xTaskGenericNotifyWait+0x11c>)
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4413      	add	r3, r2
 8005d54:	3368      	adds	r3, #104	@ 0x68
 8005d56:	2200      	movs	r2, #0
 8005d58:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005d5a:	f000 fd4d 	bl	80067f8 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
 8005d5e:	69fb      	ldr	r3, [r7, #28]
    }
 8005d60:	4618      	mov	r0, r3
 8005d62:	3720      	adds	r7, #32
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	08024ae0 	.word	0x08024ae0
 8005d6c:	20000e0c 	.word	0x20000e0c
 8005d70:	e000ed04 	.word	0xe000ed04

08005d74 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b08a      	sub	sp, #40	@ 0x28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
 8005d80:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8005d82:	2301      	movs	r3, #1
 8005d84:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d004      	beq.n	8005d96 <xTaskGenericNotify+0x22>
 8005d8c:	f641 61a4 	movw	r1, #7844	@ 0x1ea4
 8005d90:	487b      	ldr	r0, [pc, #492]	@ (8005f80 <xTaskGenericNotify+0x20c>)
 8005d92:	f7fb fe39 	bl	8001a08 <vAssertCalled>
        configASSERT( xTaskToNotify );
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d104      	bne.n	8005da6 <xTaskGenericNotify+0x32>
 8005d9c:	f641 61a5 	movw	r1, #7845	@ 0x1ea5
 8005da0:	4877      	ldr	r0, [pc, #476]	@ (8005f80 <xTaskGenericNotify+0x20c>)
 8005da2:	f7fb fe31 	bl	8001a08 <vAssertCalled>
        pxTCB = xTaskToNotify;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	623b      	str	r3, [r7, #32]

        taskENTER_CRITICAL();
 8005daa:	f000 fcf9 	bl	80067a0 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8005dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d007      	beq.n	8005dc4 <xTaskGenericNotify+0x50>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005db4:	6a3a      	ldr	r2, [r7, #32]
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	3318      	adds	r3, #24
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc2:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005dc4:	6a3a      	ldr	r2, [r7, #32]
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	4413      	add	r3, r2
 8005dca:	3368      	adds	r3, #104	@ 0x68
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	77fb      	strb	r3, [r7, #31]

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005dd0:	6a3a      	ldr	r2, [r7, #32]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	3368      	adds	r3, #104	@ 0x68
 8005dd8:	2202      	movs	r2, #2
 8005dda:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005ddc:	78fb      	ldrb	r3, [r7, #3]
 8005dde:	2b04      	cmp	r3, #4
 8005de0:	d83f      	bhi.n	8005e62 <xTaskGenericNotify+0xee>
 8005de2:	a201      	add	r2, pc, #4	@ (adr r2, 8005de8 <xTaskGenericNotify+0x74>)
 8005de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de8:	08005e77 	.word	0x08005e77
 8005dec:	08005dfd 	.word	0x08005dfd
 8005df0:	08005e1b 	.word	0x08005e1b
 8005df4:	08005e37 	.word	0x08005e37
 8005df8:	08005e47 	.word	0x08005e47
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005dfc:	6a3a      	ldr	r2, [r7, #32]
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	3318      	adds	r3, #24
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4413      	add	r3, r2
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	431a      	orrs	r2, r3
 8005e0c:	6a39      	ldr	r1, [r7, #32]
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	3318      	adds	r3, #24
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	440b      	add	r3, r1
 8005e16:	605a      	str	r2, [r3, #4]
                    break;
 8005e18:	e030      	b.n	8005e7c <xTaskGenericNotify+0x108>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005e1a:	6a3a      	ldr	r2, [r7, #32]
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	3318      	adds	r3, #24
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	1c5a      	adds	r2, r3, #1
 8005e28:	6a39      	ldr	r1, [r7, #32]
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	3318      	adds	r3, #24
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	440b      	add	r3, r1
 8005e32:	605a      	str	r2, [r3, #4]
                    break;
 8005e34:	e022      	b.n	8005e7c <xTaskGenericNotify+0x108>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005e36:	6a3a      	ldr	r2, [r7, #32]
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	3318      	adds	r3, #24
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	605a      	str	r2, [r3, #4]
                    break;
 8005e44:	e01a      	b.n	8005e7c <xTaskGenericNotify+0x108>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005e46:	7ffb      	ldrb	r3, [r7, #31]
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d007      	beq.n	8005e5c <xTaskGenericNotify+0xe8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005e4c:	6a3a      	ldr	r2, [r7, #32]
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	3318      	adds	r3, #24
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4413      	add	r3, r2
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005e5a:	e00f      	b.n	8005e7c <xTaskGenericNotify+0x108>
                        xReturn = pdFAIL;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 8005e60:	e00c      	b.n	8005e7c <xTaskGenericNotify+0x108>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005e62:	4b48      	ldr	r3, [pc, #288]	@ (8005f84 <xTaskGenericNotify+0x210>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d007      	beq.n	8005e7a <xTaskGenericNotify+0x106>
 8005e6a:	f641 61da 	movw	r1, #7898	@ 0x1eda
 8005e6e:	4844      	ldr	r0, [pc, #272]	@ (8005f80 <xTaskGenericNotify+0x20c>)
 8005e70:	f7fb fdca 	bl	8001a08 <vAssertCalled>

                    break;
 8005e74:	e001      	b.n	8005e7a <xTaskGenericNotify+0x106>
                    break;
 8005e76:	bf00      	nop
 8005e78:	e000      	b.n	8005e7c <xTaskGenericNotify+0x108>
                    break;
 8005e7a:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005e7c:	7ffb      	ldrb	r3, [r7, #31]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d177      	bne.n	8005f72 <xTaskGenericNotify+0x1fe>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005e82:	6a3b      	ldr	r3, [r7, #32]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	61bb      	str	r3, [r7, #24]
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	6a3a      	ldr	r2, [r7, #32]
 8005e8e:	68d2      	ldr	r2, [r2, #12]
 8005e90:	609a      	str	r2, [r3, #8]
 8005e92:	6a3b      	ldr	r3, [r7, #32]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	6a3a      	ldr	r2, [r7, #32]
 8005e98:	6892      	ldr	r2, [r2, #8]
 8005e9a:	605a      	str	r2, [r3, #4]
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	685a      	ldr	r2, [r3, #4]
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	3304      	adds	r3, #4
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d103      	bne.n	8005eb0 <xTaskGenericNotify+0x13c>
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	68da      	ldr	r2, [r3, #12]
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	605a      	str	r2, [r3, #4]
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	615a      	str	r2, [r3, #20]
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	1e5a      	subs	r2, r3, #1
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8005ec0:	6a3b      	ldr	r3, [r7, #32]
 8005ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	409a      	lsls	r2, r3
 8005ec8:	4b2f      	ldr	r3, [pc, #188]	@ (8005f88 <xTaskGenericNotify+0x214>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	4a2e      	ldr	r2, [pc, #184]	@ (8005f88 <xTaskGenericNotify+0x214>)
 8005ed0:	6013      	str	r3, [r2, #0]
 8005ed2:	6a3b      	ldr	r3, [r7, #32]
 8005ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ed6:	492d      	ldr	r1, [pc, #180]	@ (8005f8c <xTaskGenericNotify+0x218>)
 8005ed8:	4613      	mov	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	440b      	add	r3, r1
 8005ee2:	3304      	adds	r3, #4
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	617b      	str	r3, [r7, #20]
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	609a      	str	r2, [r3, #8]
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	689a      	ldr	r2, [r3, #8]
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	60da      	str	r2, [r3, #12]
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	6a3a      	ldr	r2, [r7, #32]
 8005efc:	3204      	adds	r2, #4
 8005efe:	605a      	str	r2, [r3, #4]
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	1d1a      	adds	r2, r3, #4
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	609a      	str	r2, [r3, #8]
 8005f08:	6a3b      	ldr	r3, [r7, #32]
 8005f0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	4413      	add	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4a1d      	ldr	r2, [pc, #116]	@ (8005f8c <xTaskGenericNotify+0x218>)
 8005f16:	441a      	add	r2, r3
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	615a      	str	r2, [r3, #20]
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f20:	491a      	ldr	r1, [pc, #104]	@ (8005f8c <xTaskGenericNotify+0x218>)
 8005f22:	4613      	mov	r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	440b      	add	r3, r1
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6a3a      	ldr	r2, [r7, #32]
 8005f30:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005f32:	1c59      	adds	r1, r3, #1
 8005f34:	4815      	ldr	r0, [pc, #84]	@ (8005f8c <xTaskGenericNotify+0x218>)
 8005f36:	4613      	mov	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4403      	add	r3, r0
 8005f40:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d004      	beq.n	8005f54 <xTaskGenericNotify+0x1e0>
 8005f4a:	f641 61e9 	movw	r1, #7913	@ 0x1ee9
 8005f4e:	480c      	ldr	r0, [pc, #48]	@ (8005f80 <xTaskGenericNotify+0x20c>)
 8005f50:	f7fb fd5a 	bl	8001a08 <vAssertCalled>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 8005f54:	4b0e      	ldr	r3, [pc, #56]	@ (8005f90 <xTaskGenericNotify+0x21c>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d207      	bcs.n	8005f72 <xTaskGenericNotify+0x1fe>
 8005f62:	4b0c      	ldr	r3, [pc, #48]	@ (8005f94 <xTaskGenericNotify+0x220>)
 8005f64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f68:	601a      	str	r2, [r3, #0]
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005f72:	f000 fc41 	bl	80067f8 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
 8005f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3728      	adds	r7, #40	@ 0x28
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	08024ae0 	.word	0x08024ae0
 8005f84:	20000f10 	.word	0x20000f10
 8005f88:	20000f14 	.word	0x20000f14
 8005f8c:	20000e10 	.word	0x20000e10
 8005f90:	20000e0c 	.word	0x20000e0c
 8005f94:	e000ed04 	.word	0xe000ed04

08005f98 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b08e      	sub	sp, #56	@ 0x38
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
 8005fa4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	637b      	str	r3, [r7, #52]	@ 0x34
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_xTaskGenericNotifyFromISR( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d104      	bne.n	8005fba <xTaskGenericNotifyFromISR+0x22>
 8005fb0:	f641 711e 	movw	r1, #7966	@ 0x1f1e
 8005fb4:	4899      	ldr	r0, [pc, #612]	@ (800621c <xTaskGenericNotifyFromISR+0x284>)
 8005fb6:	f7fb fd27 	bl	8001a08 <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d004      	beq.n	8005fca <xTaskGenericNotifyFromISR+0x32>
 8005fc0:	f641 711f 	movw	r1, #7967	@ 0x1f1f
 8005fc4:	4895      	ldr	r0, [pc, #596]	@ (800621c <xTaskGenericNotifyFromISR+0x284>)
 8005fc6:	f7fb fd1f 	bl	8001a08 <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fca:	f000 fcb7 	bl	800693c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8005fd2:	f3ef 8211 	mrs	r2, BASEPRI
 8005fd6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005fda:	b672      	cpsid	i
 8005fdc:	f383 8811 	msr	BASEPRI, r3
 8005fe0:	f3bf 8f6f 	isb	sy
 8005fe4:	f3bf 8f4f 	dsb	sy
 8005fe8:	b662      	cpsie	i
 8005fea:	61ba      	str	r2, [r7, #24]
 8005fec:	617b      	str	r3, [r7, #20]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8005fee:	69bb      	ldr	r3, [r7, #24]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8005ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        {
            if( pulPreviousNotificationValue != NULL )
 8005ff2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d007      	beq.n	8006008 <xTaskGenericNotifyFromISR+0x70>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005ff8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	3318      	adds	r3, #24
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006006:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006008:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	4413      	add	r3, r2
 800600e:	3368      	adds	r3, #104	@ 0x68
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006016:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	4413      	add	r3, r2
 800601c:	3368      	adds	r3, #104	@ 0x68
 800601e:	2202      	movs	r2, #2
 8006020:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006022:	78fb      	ldrb	r3, [r7, #3]
 8006024:	2b04      	cmp	r3, #4
 8006026:	d841      	bhi.n	80060ac <xTaskGenericNotifyFromISR+0x114>
 8006028:	a201      	add	r2, pc, #4	@ (adr r2, 8006030 <xTaskGenericNotifyFromISR+0x98>)
 800602a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602e:	bf00      	nop
 8006030:	080060c1 	.word	0x080060c1
 8006034:	08006045 	.word	0x08006045
 8006038:	08006063 	.word	0x08006063
 800603c:	0800607f 	.word	0x0800607f
 8006040:	0800608f 	.word	0x0800608f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006044:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	3318      	adds	r3, #24
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	685a      	ldr	r2, [r3, #4]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	431a      	orrs	r2, r3
 8006054:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	3318      	adds	r3, #24
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	440b      	add	r3, r1
 800605e:	605a      	str	r2, [r3, #4]
                    break;
 8006060:	e031      	b.n	80060c6 <xTaskGenericNotifyFromISR+0x12e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006062:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	3318      	adds	r3, #24
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	3318      	adds	r3, #24
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	440b      	add	r3, r1
 800607a:	605a      	str	r2, [r3, #4]
                    break;
 800607c:	e023      	b.n	80060c6 <xTaskGenericNotifyFromISR+0x12e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800607e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	3318      	adds	r3, #24
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4413      	add	r3, r2
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	605a      	str	r2, [r3, #4]
                    break;
 800608c:	e01b      	b.n	80060c6 <xTaskGenericNotifyFromISR+0x12e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800608e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006092:	2b02      	cmp	r3, #2
 8006094:	d007      	beq.n	80060a6 <xTaskGenericNotifyFromISR+0x10e>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006096:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	3318      	adds	r3, #24
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80060a4:	e00f      	b.n	80060c6 <xTaskGenericNotifyFromISR+0x12e>
                        xReturn = pdFAIL;
 80060a6:	2300      	movs	r3, #0
 80060a8:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 80060aa:	e00c      	b.n	80060c6 <xTaskGenericNotifyFromISR+0x12e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80060ac:	4b5c      	ldr	r3, [pc, #368]	@ (8006220 <xTaskGenericNotifyFromISR+0x288>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d007      	beq.n	80060c4 <xTaskGenericNotifyFromISR+0x12c>
 80060b4:	f641 7169 	movw	r1, #8041	@ 0x1f69
 80060b8:	4858      	ldr	r0, [pc, #352]	@ (800621c <xTaskGenericNotifyFromISR+0x284>)
 80060ba:	f7fb fca5 	bl	8001a08 <vAssertCalled>
                    break;
 80060be:	e001      	b.n	80060c4 <xTaskGenericNotifyFromISR+0x12c>
                    break;
 80060c0:	bf00      	nop
 80060c2:	e000      	b.n	80060c6 <xTaskGenericNotifyFromISR+0x12e>
                    break;
 80060c4:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80060c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	f040 809a 	bne.w	8006204 <xTaskGenericNotifyFromISR+0x26c>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80060d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d004      	beq.n	80060e2 <xTaskGenericNotifyFromISR+0x14a>
 80060d8:	f641 7174 	movw	r1, #8052	@ 0x1f74
 80060dc:	484f      	ldr	r0, [pc, #316]	@ (800621c <xTaskGenericNotifyFromISR+0x284>)
 80060de:	f7fb fc93 	bl	8001a08 <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80060e2:	4b50      	ldr	r3, [pc, #320]	@ (8006224 <xTaskGenericNotifyFromISR+0x28c>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d160      	bne.n	80061ac <xTaskGenericNotifyFromISR+0x214>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80060ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	623b      	str	r3, [r7, #32]
 80060f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060f6:	68d2      	ldr	r2, [r2, #12]
 80060f8:	609a      	str	r2, [r3, #8]
 80060fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006100:	6892      	ldr	r2, [r2, #8]
 8006102:	605a      	str	r2, [r3, #4]
 8006104:	6a3b      	ldr	r3, [r7, #32]
 8006106:	685a      	ldr	r2, [r3, #4]
 8006108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610a:	3304      	adds	r3, #4
 800610c:	429a      	cmp	r2, r3
 800610e:	d103      	bne.n	8006118 <xTaskGenericNotifyFromISR+0x180>
 8006110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	6a3b      	ldr	r3, [r7, #32]
 8006116:	605a      	str	r2, [r3, #4]
 8006118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611a:	2200      	movs	r2, #0
 800611c:	615a      	str	r2, [r3, #20]
 800611e:	6a3b      	ldr	r3, [r7, #32]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	1e5a      	subs	r2, r3, #1
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8006128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800612c:	2201      	movs	r2, #1
 800612e:	409a      	lsls	r2, r3
 8006130:	4b3d      	ldr	r3, [pc, #244]	@ (8006228 <xTaskGenericNotifyFromISR+0x290>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4313      	orrs	r3, r2
 8006136:	4a3c      	ldr	r2, [pc, #240]	@ (8006228 <xTaskGenericNotifyFromISR+0x290>)
 8006138:	6013      	str	r3, [r2, #0]
 800613a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800613e:	493b      	ldr	r1, [pc, #236]	@ (800622c <xTaskGenericNotifyFromISR+0x294>)
 8006140:	4613      	mov	r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	440b      	add	r3, r1
 800614a:	3304      	adds	r3, #4
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	61fb      	str	r3, [r7, #28]
 8006150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006152:	69fa      	ldr	r2, [r7, #28]
 8006154:	609a      	str	r2, [r3, #8]
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	689a      	ldr	r2, [r3, #8]
 800615a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615c:	60da      	str	r2, [r3, #12]
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006164:	3204      	adds	r2, #4
 8006166:	605a      	str	r2, [r3, #4]
 8006168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616a:	1d1a      	adds	r2, r3, #4
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	609a      	str	r2, [r3, #8]
 8006170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006174:	4613      	mov	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4413      	add	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4a2b      	ldr	r2, [pc, #172]	@ (800622c <xTaskGenericNotifyFromISR+0x294>)
 800617e:	441a      	add	r2, r3
 8006180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006182:	615a      	str	r2, [r3, #20]
 8006184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006188:	4928      	ldr	r1, [pc, #160]	@ (800622c <xTaskGenericNotifyFromISR+0x294>)
 800618a:	4613      	mov	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	440b      	add	r3, r1
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006198:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800619a:	1c59      	adds	r1, r3, #1
 800619c:	4823      	ldr	r0, [pc, #140]	@ (800622c <xTaskGenericNotifyFromISR+0x294>)
 800619e:	4613      	mov	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	4403      	add	r3, r0
 80061a8:	6019      	str	r1, [r3, #0]
 80061aa:	e01b      	b.n	80061e4 <xTaskGenericNotifyFromISR+0x24c>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80061ac:	4b20      	ldr	r3, [pc, #128]	@ (8006230 <xTaskGenericNotifyFromISR+0x298>)
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80061b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061b6:	61da      	str	r2, [r3, #28]
 80061b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ba:	689a      	ldr	r2, [r3, #8]
 80061bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061be:	621a      	str	r2, [r3, #32]
 80061c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061c6:	3218      	adds	r2, #24
 80061c8:	605a      	str	r2, [r3, #4]
 80061ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061cc:	f103 0218 	add.w	r2, r3, #24
 80061d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d2:	609a      	str	r2, [r3, #8]
 80061d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d6:	4a16      	ldr	r2, [pc, #88]	@ (8006230 <xTaskGenericNotifyFromISR+0x298>)
 80061d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80061da:	4b15      	ldr	r3, [pc, #84]	@ (8006230 <xTaskGenericNotifyFromISR+0x298>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	3301      	adds	r3, #1
 80061e0:	4a13      	ldr	r2, [pc, #76]	@ (8006230 <xTaskGenericNotifyFromISR+0x298>)
 80061e2:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061e8:	4b12      	ldr	r3, [pc, #72]	@ (8006234 <xTaskGenericNotifyFromISR+0x29c>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d908      	bls.n	8006204 <xTaskGenericNotifyFromISR+0x26c>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80061f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d002      	beq.n	80061fe <xTaskGenericNotifyFromISR+0x266>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80061f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061fa:	2201      	movs	r2, #1
 80061fc:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter to an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 80061fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006238 <xTaskGenericNotifyFromISR+0x2a0>)
 8006200:	2201      	movs	r2, #1
 8006202:	601a      	str	r2, [r3, #0]
 8006204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006206:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800620e:	bf00      	nop
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );

        return xReturn;
 8006210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8006212:	4618      	mov	r0, r3
 8006214:	3738      	adds	r7, #56	@ 0x38
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	08024ae0 	.word	0x08024ae0
 8006220:	20000f10 	.word	0x20000f10
 8006224:	20000f34 	.word	0x20000f34
 8006228:	20000f14 	.word	0x20000f14
 800622c:	20000e10 	.word	0x20000e10
 8006230:	20000ecc 	.word	0x20000ecc
 8006234:	20000e0c 	.word	0x20000e0c
 8006238:	20000f20 	.word	0x20000f20

0800623c <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 800623c:	b580      	push	{r7, lr}
 800623e:	b08e      	sub	sp, #56	@ 0x38
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_vTaskGenericNotifyGiveFromISR( xTaskToNotify, uxIndexToNotify, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d104      	bne.n	8006258 <vTaskGenericNotifyGiveFromISR+0x1c>
 800624e:	f44f 51fe 	mov.w	r1, #8128	@ 0x1fc0
 8006252:	4871      	ldr	r0, [pc, #452]	@ (8006418 <vTaskGenericNotifyGiveFromISR+0x1dc>)
 8006254:	f7fb fbd8 	bl	8001a08 <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d004      	beq.n	8006268 <vTaskGenericNotifyGiveFromISR+0x2c>
 800625e:	f641 71c1 	movw	r1, #8129	@ 0x1fc1
 8006262:	486d      	ldr	r0, [pc, #436]	@ (8006418 <vTaskGenericNotifyGiveFromISR+0x1dc>)
 8006264:	f7fb fbd0 	bl	8001a08 <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006268:	f000 fb68 	bl	800693c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm volatile
 8006270:	f3ef 8211 	mrs	r2, BASEPRI
 8006274:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8006278:	b672      	cpsid	i
 800627a:	f383 8811 	msr	BASEPRI, r3
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	b662      	cpsie	i
 8006288:	61fa      	str	r2, [r7, #28]
 800628a:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 800628c:	69fb      	ldr	r3, [r7, #28]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 800628e:	633b      	str	r3, [r7, #48]	@ 0x30
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006290:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	4413      	add	r3, r2
 8006296:	3368      	adds	r3, #104	@ 0x68
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800629e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	4413      	add	r3, r2
 80062a4:	3368      	adds	r3, #104	@ 0x68
 80062a6:	2202      	movs	r2, #2
 80062a8:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80062aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	3318      	adds	r3, #24
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	1c5a      	adds	r2, r3, #1
 80062b8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	3318      	adds	r3, #24
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	440b      	add	r3, r1
 80062c2:	605a      	str	r2, [r3, #4]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80062c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	f040 809a 	bne.w	8006402 <vTaskGenericNotifyGiveFromISR+0x1c6>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80062ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d004      	beq.n	80062e0 <vTaskGenericNotifyGiveFromISR+0xa4>
 80062d6:	f641 71ea 	movw	r1, #8170	@ 0x1fea
 80062da:	484f      	ldr	r0, [pc, #316]	@ (8006418 <vTaskGenericNotifyGiveFromISR+0x1dc>)
 80062dc:	f7fb fb94 	bl	8001a08 <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80062e0:	4b4e      	ldr	r3, [pc, #312]	@ (800641c <vTaskGenericNotifyGiveFromISR+0x1e0>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d160      	bne.n	80063aa <vTaskGenericNotifyGiveFromISR+0x16e>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80062e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80062ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062f4:	68d2      	ldr	r2, [r2, #12]
 80062f6:	609a      	str	r2, [r3, #8]
 80062f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062fe:	6892      	ldr	r2, [r2, #8]
 8006300:	605a      	str	r2, [r3, #4]
 8006302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006308:	3304      	adds	r3, #4
 800630a:	429a      	cmp	r2, r3
 800630c:	d103      	bne.n	8006316 <vTaskGenericNotifyGiveFromISR+0xda>
 800630e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006310:	68da      	ldr	r2, [r3, #12]
 8006312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006314:	605a      	str	r2, [r3, #4]
 8006316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006318:	2200      	movs	r2, #0
 800631a:	615a      	str	r2, [r3, #20]
 800631c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	1e5a      	subs	r2, r3, #1
 8006322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006324:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8006326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800632a:	2201      	movs	r2, #1
 800632c:	409a      	lsls	r2, r3
 800632e:	4b3c      	ldr	r3, [pc, #240]	@ (8006420 <vTaskGenericNotifyGiveFromISR+0x1e4>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4313      	orrs	r3, r2
 8006334:	4a3a      	ldr	r2, [pc, #232]	@ (8006420 <vTaskGenericNotifyGiveFromISR+0x1e4>)
 8006336:	6013      	str	r3, [r2, #0]
 8006338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800633a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800633c:	4939      	ldr	r1, [pc, #228]	@ (8006424 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 800633e:	4613      	mov	r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4413      	add	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	440b      	add	r3, r1
 8006348:	3304      	adds	r3, #4
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	623b      	str	r3, [r7, #32]
 800634e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006350:	6a3a      	ldr	r2, [r7, #32]
 8006352:	609a      	str	r2, [r3, #8]
 8006354:	6a3b      	ldr	r3, [r7, #32]
 8006356:	689a      	ldr	r2, [r3, #8]
 8006358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800635a:	60da      	str	r2, [r3, #12]
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006362:	3204      	adds	r2, #4
 8006364:	605a      	str	r2, [r3, #4]
 8006366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006368:	1d1a      	adds	r2, r3, #4
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	609a      	str	r2, [r3, #8]
 800636e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006372:	4613      	mov	r3, r2
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4413      	add	r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4a2a      	ldr	r2, [pc, #168]	@ (8006424 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 800637c:	441a      	add	r2, r3
 800637e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006380:	615a      	str	r2, [r3, #20]
 8006382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006386:	4927      	ldr	r1, [pc, #156]	@ (8006424 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8006388:	4613      	mov	r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	4413      	add	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	440b      	add	r3, r1
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006396:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006398:	1c59      	adds	r1, r3, #1
 800639a:	4822      	ldr	r0, [pc, #136]	@ (8006424 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 800639c:	4613      	mov	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	4403      	add	r3, r0
 80063a6:	6019      	str	r1, [r3, #0]
 80063a8:	e01b      	b.n	80063e2 <vTaskGenericNotifyGiveFromISR+0x1a6>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80063aa:	4b1f      	ldr	r3, [pc, #124]	@ (8006428 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063b4:	61da      	str	r2, [r3, #28]
 80063b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b8:	689a      	ldr	r2, [r3, #8]
 80063ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063bc:	621a      	str	r2, [r3, #32]
 80063be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063c4:	3218      	adds	r2, #24
 80063c6:	605a      	str	r2, [r3, #4]
 80063c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ca:	f103 0218 	add.w	r2, r3, #24
 80063ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d0:	609a      	str	r2, [r3, #8]
 80063d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063d4:	4a14      	ldr	r2, [pc, #80]	@ (8006428 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 80063d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80063d8:	4b13      	ldr	r3, [pc, #76]	@ (8006428 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3301      	adds	r3, #1
 80063de:	4a12      	ldr	r2, [pc, #72]	@ (8006428 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 80063e0:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063e6:	4b11      	ldr	r3, [pc, #68]	@ (800642c <vTaskGenericNotifyGiveFromISR+0x1f0>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d908      	bls.n	8006402 <vTaskGenericNotifyGiveFromISR+0x1c6>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d002      	beq.n	80063fc <vTaskGenericNotifyGiveFromISR+0x1c0>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter in an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 80063fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006430 <vTaskGenericNotifyGiveFromISR+0x1f4>)
 80063fe:	2201      	movs	r2, #1
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006404:	617b      	str	r3, [r7, #20]
    __asm volatile
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f383 8811 	msr	BASEPRI, r3
}
 800640c:	bf00      	nop
            }
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_vTaskGenericNotifyGiveFromISR();
    }
 800640e:	bf00      	nop
 8006410:	3738      	adds	r7, #56	@ 0x38
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	08024ae0 	.word	0x08024ae0
 800641c:	20000f34 	.word	0x20000f34
 8006420:	20000f14 	.word	0x20000f14
 8006424:	20000e10 	.word	0x20000e10
 8006428:	20000ecc 	.word	0x20000ecc
 800642c:	20000e0c 	.word	0x20000e0c
 8006430:	20000f20 	.word	0x20000f20

08006434 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b088      	sub	sp, #32
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800643e:	4b37      	ldr	r3, [pc, #220]	@ (800651c <prvAddCurrentTaskToDelayedList+0xe8>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8006444:	4b36      	ldr	r3, [pc, #216]	@ (8006520 <prvAddCurrentTaskToDelayedList+0xec>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800644a:	4b36      	ldr	r3, [pc, #216]	@ (8006524 <prvAddCurrentTaskToDelayedList+0xf0>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006450:	4b35      	ldr	r3, [pc, #212]	@ (8006528 <prvAddCurrentTaskToDelayedList+0xf4>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3304      	adds	r3, #4
 8006456:	4618      	mov	r0, r3
 8006458:	f7fd fa40 	bl	80038dc <uxListRemove>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10b      	bne.n	800647a <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006462:	4b31      	ldr	r3, [pc, #196]	@ (8006528 <prvAddCurrentTaskToDelayedList+0xf4>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006468:	2201      	movs	r2, #1
 800646a:	fa02 f303 	lsl.w	r3, r2, r3
 800646e:	43da      	mvns	r2, r3
 8006470:	4b2e      	ldr	r3, [pc, #184]	@ (800652c <prvAddCurrentTaskToDelayedList+0xf8>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4013      	ands	r3, r2
 8006476:	4a2d      	ldr	r2, [pc, #180]	@ (800652c <prvAddCurrentTaskToDelayedList+0xf8>)
 8006478:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006480:	d124      	bne.n	80064cc <prvAddCurrentTaskToDelayedList+0x98>
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d021      	beq.n	80064cc <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006488:	4b29      	ldr	r3, [pc, #164]	@ (8006530 <prvAddCurrentTaskToDelayedList+0xfc>)
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	613b      	str	r3, [r7, #16]
 800648e:	4b26      	ldr	r3, [pc, #152]	@ (8006528 <prvAddCurrentTaskToDelayedList+0xf4>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	609a      	str	r2, [r3, #8]
 8006496:	4b24      	ldr	r3, [pc, #144]	@ (8006528 <prvAddCurrentTaskToDelayedList+0xf4>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	693a      	ldr	r2, [r7, #16]
 800649c:	6892      	ldr	r2, [r2, #8]
 800649e:	60da      	str	r2, [r3, #12]
 80064a0:	4b21      	ldr	r3, [pc, #132]	@ (8006528 <prvAddCurrentTaskToDelayedList+0xf4>)
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	3204      	adds	r2, #4
 80064aa:	605a      	str	r2, [r3, #4]
 80064ac:	4b1e      	ldr	r3, [pc, #120]	@ (8006528 <prvAddCurrentTaskToDelayedList+0xf4>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	1d1a      	adds	r2, r3, #4
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	609a      	str	r2, [r3, #8]
 80064b6:	4b1c      	ldr	r3, [pc, #112]	@ (8006528 <prvAddCurrentTaskToDelayedList+0xf4>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a1d      	ldr	r2, [pc, #116]	@ (8006530 <prvAddCurrentTaskToDelayedList+0xfc>)
 80064bc:	615a      	str	r2, [r3, #20]
 80064be:	4b1c      	ldr	r3, [pc, #112]	@ (8006530 <prvAddCurrentTaskToDelayedList+0xfc>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3301      	adds	r3, #1
 80064c4:	4a1a      	ldr	r2, [pc, #104]	@ (8006530 <prvAddCurrentTaskToDelayedList+0xfc>)
 80064c6:	6013      	str	r3, [r2, #0]
 80064c8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80064ca:	e022      	b.n	8006512 <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80064cc:	69fa      	ldr	r2, [r7, #28]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4413      	add	r3, r2
 80064d2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80064d4:	4b14      	ldr	r3, [pc, #80]	@ (8006528 <prvAddCurrentTaskToDelayedList+0xf4>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d207      	bcs.n	80064f4 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80064e4:	4b10      	ldr	r3, [pc, #64]	@ (8006528 <prvAddCurrentTaskToDelayedList+0xf4>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3304      	adds	r3, #4
 80064ea:	4619      	mov	r1, r3
 80064ec:	6978      	ldr	r0, [r7, #20]
 80064ee:	f7fd f9bc 	bl	800386a <vListInsert>
}
 80064f2:	e00e      	b.n	8006512 <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80064f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006528 <prvAddCurrentTaskToDelayedList+0xf4>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	3304      	adds	r3, #4
 80064fa:	4619      	mov	r1, r3
 80064fc:	69b8      	ldr	r0, [r7, #24]
 80064fe:	f7fd f9b4 	bl	800386a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8006502:	4b0c      	ldr	r3, [pc, #48]	@ (8006534 <prvAddCurrentTaskToDelayedList+0x100>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	429a      	cmp	r2, r3
 800650a:	d202      	bcs.n	8006512 <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 800650c:	4a09      	ldr	r2, [pc, #36]	@ (8006534 <prvAddCurrentTaskToDelayedList+0x100>)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6013      	str	r3, [r2, #0]
}
 8006512:	bf00      	nop
 8006514:	3720      	adds	r7, #32
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	20000f10 	.word	0x20000f10
 8006520:	20000ec4 	.word	0x20000ec4
 8006524:	20000ec8 	.word	0x20000ec8
 8006528:	20000e0c 	.word	0x20000e0c
 800652c:	20000f14 	.word	0x20000f14
 8006530:	20000ef8 	.word	0x20000ef8
 8006534:	20000f2c 	.word	0x20000f2c

08006538 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	3b04      	subs	r3, #4
 8006548:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006550:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	3b04      	subs	r3, #4
 8006556:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	f023 0201 	bic.w	r2, r3, #1
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	3b04      	subs	r3, #4
 8006566:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006568:	4a0c      	ldr	r2, [pc, #48]	@ (800659c <pxPortInitialiseStack+0x64>)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	3b14      	subs	r3, #20
 8006572:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	3b04      	subs	r3, #4
 800657e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f06f 0202 	mvn.w	r2, #2
 8006586:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	3b20      	subs	r3, #32
 800658c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800658e:	68fb      	ldr	r3, [r7, #12]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3714      	adds	r7, #20
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr
 800659c:	080065a1 	.word	0x080065a1

080065a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80065a6:	2300      	movs	r3, #0
 80065a8:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80065aa:	4b0f      	ldr	r3, [pc, #60]	@ (80065e8 <prvTaskExitError+0x48>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b2:	d003      	beq.n	80065bc <prvTaskExitError+0x1c>
 80065b4:	21ee      	movs	r1, #238	@ 0xee
 80065b6:	480d      	ldr	r0, [pc, #52]	@ (80065ec <prvTaskExitError+0x4c>)
 80065b8:	f7fb fa26 	bl	8001a08 <vAssertCalled>
    __asm volatile
 80065bc:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80065c0:	b672      	cpsid	i
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	b662      	cpsie	i
 80065d0:	607b      	str	r3, [r7, #4]
}
 80065d2:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80065d4:	bf00      	nop
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d0fc      	beq.n	80065d6 <prvTaskExitError+0x36>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80065dc:	bf00      	nop
 80065de:	bf00      	nop
 80065e0:	3708      	adds	r7, #8
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	2000000c 	.word	0x2000000c
 80065ec:	08024b0c 	.word	0x08024b0c

080065f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80065f0:	4b07      	ldr	r3, [pc, #28]	@ (8006610 <pxCurrentTCBConst2>)
 80065f2:	6819      	ldr	r1, [r3, #0]
 80065f4:	6808      	ldr	r0, [r1, #0]
 80065f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065fa:	f380 8809 	msr	PSP, r0
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f04f 0000 	mov.w	r0, #0
 8006606:	f380 8811 	msr	BASEPRI, r0
 800660a:	4770      	bx	lr
 800660c:	f3af 8000 	nop.w

08006610 <pxCurrentTCBConst2>:
 8006610:	20000e0c 	.word	0x20000e0c
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8006614:	bf00      	nop
 8006616:	bf00      	nop

08006618 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006618:	4808      	ldr	r0, [pc, #32]	@ (800663c <prvPortStartFirstTask+0x24>)
 800661a:	6800      	ldr	r0, [r0, #0]
 800661c:	6800      	ldr	r0, [r0, #0]
 800661e:	f380 8808 	msr	MSP, r0
 8006622:	f04f 0000 	mov.w	r0, #0
 8006626:	f380 8814 	msr	CONTROL, r0
 800662a:	b662      	cpsie	i
 800662c:	b661      	cpsie	f
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	df00      	svc	0
 8006638:	bf00      	nop
 800663a:	0000      	.short	0x0000
 800663c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8006640:	bf00      	nop
 8006642:	bf00      	nop

08006644 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b086      	sub	sp, #24
 8006648:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800664a:	4b4a      	ldr	r3, [pc, #296]	@ (8006774 <xPortStartScheduler+0x130>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	617b      	str	r3, [r7, #20]
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	332c      	adds	r3, #44	@ 0x2c
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a48      	ldr	r2, [pc, #288]	@ (8006778 <xPortStartScheduler+0x134>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d004      	beq.n	8006666 <xPortStartScheduler+0x22>
 800665c:	f240 114b 	movw	r1, #331	@ 0x14b
 8006660:	4846      	ldr	r0, [pc, #280]	@ (800677c <xPortStartScheduler+0x138>)
 8006662:	f7fb f9d1 	bl	8001a08 <vAssertCalled>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	3338      	adds	r3, #56	@ 0x38
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a44      	ldr	r2, [pc, #272]	@ (8006780 <xPortStartScheduler+0x13c>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d004      	beq.n	800667c <xPortStartScheduler+0x38>
 8006672:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8006676:	4841      	ldr	r0, [pc, #260]	@ (800677c <xPortStartScheduler+0x138>)
 8006678:	f7fb f9c6 	bl	8001a08 <vAssertCalled>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800667c:	2300      	movs	r3, #0
 800667e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006680:	4b40      	ldr	r3, [pc, #256]	@ (8006784 <xPortStartScheduler+0x140>)
 8006682:	613b      	str	r3, [r7, #16]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	b2db      	uxtb	r3, r3
 800668a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	22ff      	movs	r2, #255	@ 0xff
 8006690:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	b2db      	uxtb	r3, r3
 8006698:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800669a:	79fb      	ldrb	r3, [r7, #7]
 800669c:	b2db      	uxtb	r3, r3
 800669e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	4b38      	ldr	r3, [pc, #224]	@ (8006788 <xPortStartScheduler+0x144>)
 80066a6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 80066a8:	4b37      	ldr	r3, [pc, #220]	@ (8006788 <xPortStartScheduler+0x144>)
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d104      	bne.n	80066ba <xPortStartScheduler+0x76>
 80066b0:	f240 116f 	movw	r1, #367	@ 0x16f
 80066b4:	4831      	ldr	r0, [pc, #196]	@ (800677c <xPortStartScheduler+0x138>)
 80066b6:	f7fb f9a7 	bl	8001a08 <vAssertCalled>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 80066ba:	79fb      	ldrb	r3, [r7, #7]
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	43db      	mvns	r3, r3
 80066c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00d      	beq.n	80066e4 <xPortStartScheduler+0xa0>
 80066c8:	f240 1173 	movw	r1, #371	@ 0x173
 80066cc:	482b      	ldr	r0, [pc, #172]	@ (800677c <xPortStartScheduler+0x138>)
 80066ce:	f7fb f99b 	bl	8001a08 <vAssertCalled>

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066d2:	e007      	b.n	80066e4 <xPortStartScheduler+0xa0>
        {
            ulImplementedPrioBits++;
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	3301      	adds	r3, #1
 80066d8:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80066da:	79fb      	ldrb	r3, [r7, #7]
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	005b      	lsls	r3, r3, #1
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066e4:	79fb      	ldrb	r3, [r7, #7]
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ec:	2b80      	cmp	r3, #128	@ 0x80
 80066ee:	d0f1      	beq.n	80066d4 <xPortStartScheduler+0x90>
        }

        if( ulImplementedPrioBits == 8 )
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	2b08      	cmp	r3, #8
 80066f4:	d103      	bne.n	80066fe <xPortStartScheduler+0xba>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80066f6:	4b25      	ldr	r3, [pc, #148]	@ (800678c <xPortStartScheduler+0x148>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	601a      	str	r2, [r3, #0]
 80066fc:	e004      	b.n	8006708 <xPortStartScheduler+0xc4>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	f1c3 0307 	rsb	r3, r3, #7
 8006704:	4a21      	ldr	r2, [pc, #132]	@ (800678c <xPortStartScheduler+0x148>)
 8006706:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006708:	4b20      	ldr	r3, [pc, #128]	@ (800678c <xPortStartScheduler+0x148>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	021b      	lsls	r3, r3, #8
 800670e:	4a1f      	ldr	r2, [pc, #124]	@ (800678c <xPortStartScheduler+0x148>)
 8006710:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006712:	4b1e      	ldr	r3, [pc, #120]	@ (800678c <xPortStartScheduler+0x148>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800671a:	4a1c      	ldr	r2, [pc, #112]	@ (800678c <xPortStartScheduler+0x148>)
 800671c:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 800671e:	7bfb      	ldrb	r3, [r7, #15]
 8006720:	b2da      	uxtb	r2, r3
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006726:	4b1a      	ldr	r3, [pc, #104]	@ (8006790 <xPortStartScheduler+0x14c>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a19      	ldr	r2, [pc, #100]	@ (8006790 <xPortStartScheduler+0x14c>)
 800672c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006730:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006732:	4b17      	ldr	r3, [pc, #92]	@ (8006790 <xPortStartScheduler+0x14c>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a16      	ldr	r2, [pc, #88]	@ (8006790 <xPortStartScheduler+0x14c>)
 8006738:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800673c:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 800673e:	4b15      	ldr	r3, [pc, #84]	@ (8006794 <xPortStartScheduler+0x150>)
 8006740:	2200      	movs	r2, #0
 8006742:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006744:	f000 f8d4 	bl	80068f0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006748:	4b13      	ldr	r3, [pc, #76]	@ (8006798 <xPortStartScheduler+0x154>)
 800674a:	2200      	movs	r2, #0
 800674c:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800674e:	f000 f8e9 	bl	8006924 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006752:	4b12      	ldr	r3, [pc, #72]	@ (800679c <xPortStartScheduler+0x158>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a11      	ldr	r2, [pc, #68]	@ (800679c <xPortStartScheduler+0x158>)
 8006758:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800675c:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800675e:	f7ff ff5b 	bl	8006618 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006762:	f7fe fbf7 	bl	8004f54 <vTaskSwitchContext>
    prvTaskExitError();
 8006766:	f7ff ff1b 	bl	80065a0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3718      	adds	r7, #24
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	e000ed08 	.word	0xe000ed08
 8006778:	080065f1 	.word	0x080065f1
 800677c:	08024b0c 	.word	0x08024b0c
 8006780:	08006841 	.word	0x08006841
 8006784:	e000e400 	.word	0xe000e400
 8006788:	20000f40 	.word	0x20000f40
 800678c:	20000f44 	.word	0x20000f44
 8006790:	e000ed20 	.word	0xe000ed20
 8006794:	e000ed1c 	.word	0xe000ed1c
 8006798:	2000000c 	.word	0x2000000c
 800679c:	e000ef34 	.word	0xe000ef34

080067a0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
    __asm volatile
 80067a6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80067aa:	b672      	cpsid	i
 80067ac:	f383 8811 	msr	BASEPRI, r3
 80067b0:	f3bf 8f6f 	isb	sy
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	b662      	cpsie	i
 80067ba:	607b      	str	r3, [r7, #4]
}
 80067bc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80067be:	4b0b      	ldr	r3, [pc, #44]	@ (80067ec <vPortEnterCritical+0x4c>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	3301      	adds	r3, #1
 80067c4:	4a09      	ldr	r2, [pc, #36]	@ (80067ec <vPortEnterCritical+0x4c>)
 80067c6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80067c8:	4b08      	ldr	r3, [pc, #32]	@ (80067ec <vPortEnterCritical+0x4c>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d109      	bne.n	80067e4 <vPortEnterCritical+0x44>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80067d0:	4b07      	ldr	r3, [pc, #28]	@ (80067f0 <vPortEnterCritical+0x50>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d004      	beq.n	80067e4 <vPortEnterCritical+0x44>
 80067da:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 80067de:	4805      	ldr	r0, [pc, #20]	@ (80067f4 <vPortEnterCritical+0x54>)
 80067e0:	f7fb f912 	bl	8001a08 <vAssertCalled>
    }
}
 80067e4:	bf00      	nop
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	2000000c 	.word	0x2000000c
 80067f0:	e000ed04 	.word	0xe000ed04
 80067f4:	08024b0c 	.word	0x08024b0c

080067f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80067fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006838 <vPortExitCritical+0x40>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d104      	bne.n	8006810 <vPortExitCritical+0x18>
 8006806:	f240 11e3 	movw	r1, #483	@ 0x1e3
 800680a:	480c      	ldr	r0, [pc, #48]	@ (800683c <vPortExitCritical+0x44>)
 800680c:	f7fb f8fc 	bl	8001a08 <vAssertCalled>
    uxCriticalNesting--;
 8006810:	4b09      	ldr	r3, [pc, #36]	@ (8006838 <vPortExitCritical+0x40>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	3b01      	subs	r3, #1
 8006816:	4a08      	ldr	r2, [pc, #32]	@ (8006838 <vPortExitCritical+0x40>)
 8006818:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800681a:	4b07      	ldr	r3, [pc, #28]	@ (8006838 <vPortExitCritical+0x40>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d105      	bne.n	800682e <vPortExitCritical+0x36>
 8006822:	2300      	movs	r3, #0
 8006824:	607b      	str	r3, [r7, #4]
    __asm volatile
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f383 8811 	msr	BASEPRI, r3
}
 800682c:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800682e:	bf00      	nop
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	2000000c 	.word	0x2000000c
 800683c:	08024b0c 	.word	0x08024b0c

08006840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006840:	f3ef 8009 	mrs	r0, PSP
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	4b15      	ldr	r3, [pc, #84]	@ (80068a0 <pxCurrentTCBConst>)
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	f01e 0f10 	tst.w	lr, #16
 8006850:	bf08      	it	eq
 8006852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800685a:	6010      	str	r0, [r2, #0]
 800685c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006860:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8006864:	b672      	cpsid	i
 8006866:	f380 8811 	msr	BASEPRI, r0
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	f3bf 8f6f 	isb	sy
 8006872:	b662      	cpsie	i
 8006874:	f7fe fb6e 	bl	8004f54 <vTaskSwitchContext>
 8006878:	f04f 0000 	mov.w	r0, #0
 800687c:	f380 8811 	msr	BASEPRI, r0
 8006880:	bc09      	pop	{r0, r3}
 8006882:	6819      	ldr	r1, [r3, #0]
 8006884:	6808      	ldr	r0, [r1, #0]
 8006886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800688a:	f01e 0f10 	tst.w	lr, #16
 800688e:	bf08      	it	eq
 8006890:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006894:	f380 8809 	msr	PSP, r0
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop

080068a0 <pxCurrentTCBConst>:
 80068a0:	20000e0c 	.word	0x20000e0c
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80068a4:	bf00      	nop
 80068a6:	bf00      	nop

080068a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
    __asm volatile
 80068ae:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80068b2:	b672      	cpsid	i
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	b662      	cpsie	i
 80068c2:	607b      	str	r3, [r7, #4]
}
 80068c4:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80068c6:	f7fe fa31 	bl	8004d2c <xTaskIncrementTick>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d003      	beq.n	80068d8 <xPortSysTickHandler+0x30>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80068d0:	4b06      	ldr	r3, [pc, #24]	@ (80068ec <xPortSysTickHandler+0x44>)
 80068d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068d6:	601a      	str	r2, [r3, #0]
 80068d8:	2300      	movs	r3, #0
 80068da:	603b      	str	r3, [r7, #0]
    __asm volatile
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	f383 8811 	msr	BASEPRI, r3
}
 80068e2:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 80068e4:	bf00      	nop
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	e000ed04 	.word	0xe000ed04

080068f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80068f0:	b480      	push	{r7}
 80068f2:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80068f4:	4b08      	ldr	r3, [pc, #32]	@ (8006918 <vPortSetupTimerInterrupt+0x28>)
 80068f6:	2200      	movs	r2, #0
 80068f8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80068fa:	4b08      	ldr	r3, [pc, #32]	@ (800691c <vPortSetupTimerInterrupt+0x2c>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006900:	4b07      	ldr	r3, [pc, #28]	@ (8006920 <vPortSetupTimerInterrupt+0x30>)
 8006902:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8006906:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006908:	4b03      	ldr	r3, [pc, #12]	@ (8006918 <vPortSetupTimerInterrupt+0x28>)
 800690a:	2203      	movs	r2, #3
 800690c:	601a      	str	r2, [r3, #0]
}
 800690e:	bf00      	nop
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	e000e010 	.word	0xe000e010
 800691c:	e000e018 	.word	0xe000e018
 8006920:	e000e014 	.word	0xe000e014

08006924 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006924:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006934 <vPortEnableVFP+0x10>
 8006928:	6801      	ldr	r1, [r0, #0]
 800692a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800692e:	6001      	str	r1, [r0, #0]
 8006930:	4770      	bx	lr
 8006932:	0000      	.short	0x0000
 8006934:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8006938:	bf00      	nop
 800693a:	bf00      	nop

0800693c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006942:	f3ef 8305 	mrs	r3, IPSR
 8006946:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b0f      	cmp	r3, #15
 800694c:	d90e      	bls.n	800696c <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800694e:	4a10      	ldr	r2, [pc, #64]	@ (8006990 <vPortValidateInterruptPriority+0x54>)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4413      	add	r3, r2
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006958:	4b0e      	ldr	r3, [pc, #56]	@ (8006994 <vPortValidateInterruptPriority+0x58>)
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	78fa      	ldrb	r2, [r7, #3]
 800695e:	429a      	cmp	r2, r3
 8006960:	d204      	bcs.n	800696c <vPortValidateInterruptPriority+0x30>
 8006962:	f44f 715c 	mov.w	r1, #880	@ 0x370
 8006966:	480c      	ldr	r0, [pc, #48]	@ (8006998 <vPortValidateInterruptPriority+0x5c>)
 8006968:	f7fb f84e 	bl	8001a08 <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800696c:	4b0b      	ldr	r3, [pc, #44]	@ (800699c <vPortValidateInterruptPriority+0x60>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006974:	4b0a      	ldr	r3, [pc, #40]	@ (80069a0 <vPortValidateInterruptPriority+0x64>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	429a      	cmp	r2, r3
 800697a:	d904      	bls.n	8006986 <vPortValidateInterruptPriority+0x4a>
 800697c:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8006980:	4805      	ldr	r0, [pc, #20]	@ (8006998 <vPortValidateInterruptPriority+0x5c>)
 8006982:	f7fb f841 	bl	8001a08 <vAssertCalled>
    }
 8006986:	bf00      	nop
 8006988:	3708      	adds	r7, #8
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	e000e3f0 	.word	0xe000e3f0
 8006994:	20000f40 	.word	0x20000f40
 8006998:	08024b0c 	.word	0x08024b0c
 800699c:	e000ed0c 	.word	0xe000ed0c
 80069a0:	20000f44 	.word	0x20000f44

080069a4 <pvPortMalloc>:
#endif /* configENABLE_HEAP_PROTECTOR */

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b088      	sub	sp, #32
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80069ac:	2300      	movs	r3, #0
 80069ae:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    /* The heap must be initialised before the first call to
     * pvPortMalloc(). */
    configASSERT( pxEnd );
 80069b0:	4b60      	ldr	r3, [pc, #384]	@ (8006b34 <pvPortMalloc+0x190>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d103      	bne.n	80069c0 <pvPortMalloc+0x1c>
 80069b8:	21da      	movs	r1, #218	@ 0xda
 80069ba:	485f      	ldr	r0, [pc, #380]	@ (8006b38 <pvPortMalloc+0x194>)
 80069bc:	f7fb f824 	bl	8001a08 <vAssertCalled>

    if( xWantedSize > 0 )
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d022      	beq.n	8006a0c <pvPortMalloc+0x68>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80069c6:	2308      	movs	r3, #8
 80069c8:	43db      	mvns	r3, r3
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d81b      	bhi.n	8006a08 <pvPortMalloc+0x64>
        {
            xWantedSize += xHeapStructSize;
 80069d0:	2208      	movs	r2, #8
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4413      	add	r3, r2
 80069d6:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f003 0307 	and.w	r3, r3, #7
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d014      	beq.n	8006a0c <pvPortMalloc+0x68>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f003 0307 	and.w	r3, r3, #7
 80069e8:	f1c3 0308 	rsb	r3, r3, #8
 80069ec:	613b      	str	r3, [r7, #16]

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	43db      	mvns	r3, r3
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d804      	bhi.n	8006a02 <pvPortMalloc+0x5e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	4413      	add	r3, r2
 80069fe:	607b      	str	r3, [r7, #4]
 8006a00:	e004      	b.n	8006a0c <pvPortMalloc+0x68>
                }
                else
                {
                    xWantedSize = 0;
 8006a02:	2300      	movs	r3, #0
 8006a04:	607b      	str	r3, [r7, #4]
 8006a06:	e001      	b.n	8006a0c <pvPortMalloc+0x68>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8006a0c:	f7fe f84e 	bl	8004aac <vTaskSuspendAll>
    {
        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	db78      	blt.n	8006b08 <pvPortMalloc+0x164>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d075      	beq.n	8006b08 <pvPortMalloc+0x164>
 8006a1c:	4b47      	ldr	r3, [pc, #284]	@ (8006b3c <pvPortMalloc+0x198>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d870      	bhi.n	8006b08 <pvPortMalloc+0x164>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006a26:	4b46      	ldr	r3, [pc, #280]	@ (8006b40 <pvPortMalloc+0x19c>)
 8006a28:	61bb      	str	r3, [r7, #24]
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8006a2a:	4b45      	ldr	r3, [pc, #276]	@ (8006b40 <pvPortMalloc+0x19c>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	61fb      	str	r3, [r7, #28]
                heapVALIDATE_BLOCK_POINTER( pxBlock );

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8006a30:	e004      	b.n	8006a3c <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	61bb      	str	r3, [r7, #24]
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d903      	bls.n	8006a4e <pvPortMalloc+0xaa>
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1f1      	bne.n	8006a32 <pvPortMalloc+0x8e>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006a4e:	4b39      	ldr	r3, [pc, #228]	@ (8006b34 <pvPortMalloc+0x190>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	69fa      	ldr	r2, [r7, #28]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d057      	beq.n	8006b08 <pvPortMalloc+0x164>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2208      	movs	r2, #8
 8006a5e:	4413      	add	r3, r2
 8006a60:	617b      	str	r3, [r7, #20]
                    heapVALIDATE_BLOCK_POINTER( pvReturn );

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d904      	bls.n	8006a7e <pvPortMalloc+0xda>
 8006a74:	f240 1129 	movw	r1, #297	@ 0x129
 8006a78:	482f      	ldr	r0, [pc, #188]	@ (8006b38 <pvPortMalloc+0x194>)
 8006a7a:	f7fa ffc5 	bl	8001a08 <vAssertCalled>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	1ad2      	subs	r2, r2, r3
 8006a86:	2308      	movs	r3, #8
 8006a88:	005b      	lsls	r3, r3, #1
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d91d      	bls.n	8006aca <pvPortMalloc+0x126>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a8e:	69fa      	ldr	r2, [r7, #28]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4413      	add	r3, r2
 8006a94:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f003 0307 	and.w	r3, r3, #7
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d004      	beq.n	8006aaa <pvPortMalloc+0x106>
 8006aa0:	f44f 7199 	mov.w	r1, #306	@ 0x132
 8006aa4:	4824      	ldr	r0, [pc, #144]	@ (8006b38 <pvPortMalloc+0x194>)
 8006aa6:	f7fa ffaf 	bl	8001a08 <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	1ad2      	subs	r2, r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006aca:	4b1c      	ldr	r3, [pc, #112]	@ (8006b3c <pvPortMalloc+0x198>)
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	4a19      	ldr	r2, [pc, #100]	@ (8006b3c <pvPortMalloc+0x198>)
 8006ad6:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ad8:	4b18      	ldr	r3, [pc, #96]	@ (8006b3c <pvPortMalloc+0x198>)
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	4b19      	ldr	r3, [pc, #100]	@ (8006b44 <pvPortMalloc+0x1a0>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d203      	bcs.n	8006aec <pvPortMalloc+0x148>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ae4:	4b15      	ldr	r3, [pc, #84]	@ (8006b3c <pvPortMalloc+0x198>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a16      	ldr	r2, [pc, #88]	@ (8006b44 <pvPortMalloc+0x1a0>)
 8006aea:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	2200      	movs	r2, #0
 8006afc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006afe:	4b12      	ldr	r3, [pc, #72]	@ (8006b48 <pvPortMalloc+0x1a4>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3301      	adds	r3, #1
 8006b04:	4a10      	ldr	r2, [pc, #64]	@ (8006b48 <pvPortMalloc+0x1a4>)
 8006b06:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006b08:	f7fd ffde 	bl	8004ac8 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <pvPortMalloc+0x172>
        {
            vApplicationMallocFailedHook();
 8006b12:	f7fa ff8d 	bl	8001a30 <vApplicationMallocFailedHook>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f003 0307 	and.w	r3, r3, #7
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d004      	beq.n	8006b2a <pvPortMalloc+0x186>
 8006b20:	f240 1173 	movw	r1, #371	@ 0x173
 8006b24:	4804      	ldr	r0, [pc, #16]	@ (8006b38 <pvPortMalloc+0x194>)
 8006b26:	f7fa ff6f 	bl	8001a08 <vAssertCalled>
    return pvReturn;
 8006b2a:	697b      	ldr	r3, [r7, #20]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3720      	adds	r7, #32
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	20000f50 	.word	0x20000f50
 8006b38:	08024b48 	.word	0x08024b48
 8006b3c:	20000f54 	.word	0x20000f54
 8006b40:	20000f48 	.word	0x20000f48
 8006b44:	20000f58 	.word	0x20000f58
 8006b48:	20000f5c 	.word	0x20000f5c

08006b4c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d03d      	beq.n	8006bda <vPortFree+0x8e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006b5e:	2308      	movs	r3, #8
 8006b60:	425b      	negs	r3, r3
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	4413      	add	r3, r2
 8006b66:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	60bb      	str	r3, [r7, #8]

        heapVALIDATE_BLOCK_POINTER( pxLink );
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	db04      	blt.n	8006b7e <vPortFree+0x32>
 8006b74:	f240 1187 	movw	r1, #391	@ 0x187
 8006b78:	481a      	ldr	r0, [pc, #104]	@ (8006be4 <vPortFree+0x98>)
 8006b7a:	f7fa ff45 	bl	8001a08 <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d004      	beq.n	8006b90 <vPortFree+0x44>
 8006b86:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8006b8a:	4816      	ldr	r0, [pc, #88]	@ (8006be4 <vPortFree+0x98>)
 8006b8c:	f7fa ff3c 	bl	8001a08 <vAssertCalled>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	0fdb      	lsrs	r3, r3, #31
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d01c      	beq.n	8006bda <vPortFree+0x8e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d118      	bne.n	8006bda <vPortFree+0x8e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8006bb4:	f7fd ff7a 	bl	8004aac <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8006be8 <vPortFree+0x9c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	4a09      	ldr	r2, [pc, #36]	@ (8006be8 <vPortFree+0x9c>)
 8006bc4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bc6:	68b8      	ldr	r0, [r7, #8]
 8006bc8:	f000 f82a 	bl	8006c20 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006bcc:	4b07      	ldr	r3, [pc, #28]	@ (8006bec <vPortFree+0xa0>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	4a06      	ldr	r2, [pc, #24]	@ (8006bec <vPortFree+0xa0>)
 8006bd4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006bd6:	f7fd ff77 	bl	8004ac8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006bda:	bf00      	nop
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	08024b48 	.word	0x08024b48
 8006be8:	20000f54 	.word	0x20000f54
 8006bec:	20000f60 	.word	0x20000f60

08006bf0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	af00      	add	r7, sp, #0
    return xFreeBytesRemaining;
 8006bf4:	4b03      	ldr	r3, [pc, #12]	@ (8006c04 <xPortGetFreeHeapSize+0x14>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	20000f54 	.word	0x20000f54

08006c08 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 8006c08:	b480      	push	{r7}
 8006c0a:	af00      	add	r7, sp, #0
    return xMinimumEverFreeBytesRemaining;
 8006c0c:	4b03      	ldr	r3, [pc, #12]	@ (8006c1c <xPortGetMinimumEverFreeHeapSize+0x14>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	20000f58 	.word	0x20000f58

08006c20 <prvInsertBlockIntoFreeList>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8006c28:	4b28      	ldr	r3, [pc, #160]	@ (8006ccc <prvInsertBlockIntoFreeList+0xac>)
 8006c2a:	60fb      	str	r3, [r7, #12]
 8006c2c:	e002      	b.n	8006c34 <prvInsertBlockIntoFreeList+0x14>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d8f7      	bhi.n	8006c2e <prvInsertBlockIntoFreeList+0xe>
        heapVALIDATE_BLOCK_POINTER( pxIterator );
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	4413      	add	r3, r2
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d108      	bne.n	8006c62 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	441a      	add	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	68ba      	ldr	r2, [r7, #8]
 8006c6c:	441a      	add	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d118      	bne.n	8006ca8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	4b15      	ldr	r3, [pc, #84]	@ (8006cd0 <prvInsertBlockIntoFreeList+0xb0>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d00d      	beq.n	8006c9e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	441a      	add	r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	e008      	b.n	8006cb0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8006c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8006cd0 <prvInsertBlockIntoFreeList+0xb0>)
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	601a      	str	r2, [r3, #0]
 8006ca6:	e003      	b.n	8006cb0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gap, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d002      	beq.n	8006cbe <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006cbe:	bf00      	nop
 8006cc0:	3714      	adds	r7, #20
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	20000f48 	.word	0x20000f48
 8006cd0:	20000f50 	.word	0x20000f50

08006cd4 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions ) /* PRIVILEGED_FUNCTION */
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b08a      	sub	sp, #40	@ 0x28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxFirstFreeBlockInRegion = NULL;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxPreviousFreeBlock;
    portPOINTER_SIZE_TYPE xAlignedHeap;
    size_t xTotalRegionSize, xTotalHeapSize = 0;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	623b      	str	r3, [r7, #32]
    BaseType_t xDefinedRegions = 0;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	61fb      	str	r3, [r7, #28]
    portPOINTER_SIZE_TYPE xAddress;
    const HeapRegion_t * pxHeapRegion;

    /* Can only call once! */
    configASSERT( pxEnd == NULL );
 8006ce8:	4b4b      	ldr	r3, [pc, #300]	@ (8006e18 <vPortDefineHeapRegions+0x144>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d004      	beq.n	8006cfa <vPortDefineHeapRegions+0x26>
 8006cf0:	f240 2121 	movw	r1, #545	@ 0x221
 8006cf4:	4849      	ldr	r0, [pc, #292]	@ (8006e1c <vPortDefineHeapRegions+0x148>)
 8006cf6:	f7fa fe87 	bl	8001a08 <vAssertCalled>
    {
        vApplicationGetRandomHeapCanary( &( xHeapCanary ) );
    }
    #endif

    pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	00db      	lsls	r3, r3, #3
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	4413      	add	r3, r2
 8006d02:	617b      	str	r3, [r7, #20]

    while( pxHeapRegion->xSizeInBytes > 0 )
 8006d04:	e071      	b.n	8006dea <vPortDefineHeapRegions+0x116>
    {
        xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Ensure the heap region starts on a correctly aligned boundary. */
        xAddress = ( portPOINTER_SIZE_TYPE ) pxHeapRegion->pucStartAddress;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	61bb      	str	r3, [r7, #24]

        if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	f003 0307 	and.w	r3, r3, #7
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00e      	beq.n	8006d3a <vPortDefineHeapRegions+0x66>
        {
            xAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	3307      	adds	r3, #7
 8006d20:	61bb      	str	r3, [r7, #24]
            xAddress &= ~( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK;
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	f023 0307 	bic.w	r3, r3, #7
 8006d28:	61bb      	str	r3, [r7, #24]

            /* Adjust the size for the bytes lost to alignment. */
            xTotalRegionSize -= ( size_t ) ( xAddress - ( portPOINTER_SIZE_TYPE ) pxHeapRegion->pucStartAddress );
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d36:	4413      	add	r3, r2
 8006d38:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        xAlignedHeap = xAddress;
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	60fb      	str	r3, [r7, #12]

        /* Set xStart if it has not already been set. */
        if( xDefinedRegions == 0 )
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d106      	bne.n	8006d52 <vPortDefineHeapRegions+0x7e>
        {
            /* xStart is used to hold a pointer to the first item in the list of
             *  free blocks.  The void cast is used to prevent compiler warnings. */
            xStart.pxNextFreeBlock = ( BlockLink_t * ) heapPROTECT_BLOCK_POINTER( xAlignedHeap );
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4a36      	ldr	r2, [pc, #216]	@ (8006e20 <vPortDefineHeapRegions+0x14c>)
 8006d48:	6013      	str	r3, [r2, #0]
            xStart.xBlockSize = ( size_t ) 0;
 8006d4a:	4b35      	ldr	r3, [pc, #212]	@ (8006e20 <vPortDefineHeapRegions+0x14c>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	605a      	str	r2, [r3, #4]
 8006d50:	e013      	b.n	8006d7a <vPortDefineHeapRegions+0xa6>
        }
        else
        {
            /* Should only get here if one region has already been added to the
             * heap. */
            configASSERT( pxEnd != heapPROTECT_BLOCK_POINTER( NULL ) );
 8006d52:	4b31      	ldr	r3, [pc, #196]	@ (8006e18 <vPortDefineHeapRegions+0x144>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d104      	bne.n	8006d64 <vPortDefineHeapRegions+0x90>
 8006d5a:	f240 2149 	movw	r1, #585	@ 0x249
 8006d5e:	482f      	ldr	r0, [pc, #188]	@ (8006e1c <vPortDefineHeapRegions+0x148>)
 8006d60:	f7fa fe52 	bl	8001a08 <vAssertCalled>

            /* Check blocks are passed in with increasing start addresses. */
            configASSERT( ( size_t ) xAddress > ( size_t ) pxEnd );
 8006d64:	4b2c      	ldr	r3, [pc, #176]	@ (8006e18 <vPortDefineHeapRegions+0x144>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	461a      	mov	r2, r3
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d804      	bhi.n	8006d7a <vPortDefineHeapRegions+0xa6>
 8006d70:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 8006d74:	4829      	ldr	r0, [pc, #164]	@ (8006e1c <vPortDefineHeapRegions+0x148>)
 8006d76:	f7fa fe47 	bl	8001a08 <vAssertCalled>
        }
        #endif /* configENABLE_HEAP_PROTECTOR */

        /* Remember the location of the end marker in the previous region, if
         * any. */
        pxPreviousFreeBlock = pxEnd;
 8006d7a:	4b27      	ldr	r3, [pc, #156]	@ (8006e18 <vPortDefineHeapRegions+0x144>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	60bb      	str	r3, [r7, #8]

        /* pxEnd is used to mark the end of the list of free blocks and is
         * inserted at the end of the region space. */
        xAddress = xAlignedHeap + ( portPOINTER_SIZE_TYPE ) xTotalRegionSize;
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d84:	4413      	add	r3, r2
 8006d86:	61bb      	str	r3, [r7, #24]
        xAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8006d88:	2208      	movs	r2, #8
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	1a9b      	subs	r3, r3, r2
 8006d8e:	61bb      	str	r3, [r7, #24]
        xAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	f023 0307 	bic.w	r3, r3, #7
 8006d96:	61bb      	str	r3, [r7, #24]
        pxEnd = ( BlockLink_t * ) xAddress;
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	4a1f      	ldr	r2, [pc, #124]	@ (8006e18 <vPortDefineHeapRegions+0x144>)
 8006d9c:	6013      	str	r3, [r2, #0]
        pxEnd->xBlockSize = 0;
 8006d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8006e18 <vPortDefineHeapRegions+0x144>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2200      	movs	r2, #0
 8006da4:	605a      	str	r2, [r3, #4]
        pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8006da6:	4b1c      	ldr	r3, [pc, #112]	@ (8006e18 <vPortDefineHeapRegions+0x144>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2200      	movs	r2, #0
 8006dac:	601a      	str	r2, [r3, #0]

        /* To start with there is a single free block in this region that is
         * sized to take up the entire heap region minus the space taken by the
         * free block structure. */
        pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	613b      	str	r3, [r7, #16]
        pxFirstFreeBlockInRegion->xBlockSize = ( size_t ) ( xAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlockInRegion );
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	69ba      	ldr	r2, [r7, #24]
 8006db6:	1ad2      	subs	r2, r2, r3
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	605a      	str	r2, [r3, #4]
        pxFirstFreeBlockInRegion->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8006dbc:	4b16      	ldr	r3, [pc, #88]	@ (8006e18 <vPortDefineHeapRegions+0x144>)
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	601a      	str	r2, [r3, #0]

        /* If this is not the first region that makes up the entire heap space
         * then link the previous region to this region. */
        if( pxPreviousFreeBlock != NULL )
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d002      	beq.n	8006dd0 <vPortDefineHeapRegions+0xfc>
        {
            pxPreviousFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxFirstFreeBlockInRegion );
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	601a      	str	r2, [r3, #0]
        }

        xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	6a3a      	ldr	r2, [r7, #32]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	623b      	str	r3, [r7, #32]
            }
        }
        #endif

        /* Move onto the next HeapRegion_t structure. */
        xDefinedRegions++;
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	61fb      	str	r3, [r7, #28]
        pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	00db      	lsls	r3, r3, #3
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	4413      	add	r3, r2
 8006de8:	617b      	str	r3, [r7, #20]
    while( pxHeapRegion->xSizeInBytes > 0 )
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d189      	bne.n	8006d06 <vPortDefineHeapRegions+0x32>
    }

    xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 8006df2:	4a0c      	ldr	r2, [pc, #48]	@ (8006e24 <vPortDefineHeapRegions+0x150>)
 8006df4:	6a3b      	ldr	r3, [r7, #32]
 8006df6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = xTotalHeapSize;
 8006df8:	4a0b      	ldr	r2, [pc, #44]	@ (8006e28 <vPortDefineHeapRegions+0x154>)
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	6013      	str	r3, [r2, #0]

    /* Check something was actually defined before it is accessed. */
    configASSERT( xTotalHeapSize );
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d104      	bne.n	8006e0e <vPortDefineHeapRegions+0x13a>
 8006e04:	f240 2189 	movw	r1, #649	@ 0x289
 8006e08:	4804      	ldr	r0, [pc, #16]	@ (8006e1c <vPortDefineHeapRegions+0x148>)
 8006e0a:	f7fa fdfd 	bl	8001a08 <vAssertCalled>
}
 8006e0e:	bf00      	nop
 8006e10:	3728      	adds	r7, #40	@ 0x28
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	20000f50 	.word	0x20000f50
 8006e1c:	08024b48 	.word	0x08024b48
 8006e20:	20000f48 	.word	0x20000f48
 8006e24:	20000f58 	.word	0x20000f58
 8006e28:	20000f54 	.word	0x20000f54

08006e2c <eARPProcessPacket>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be processed.
 *
 * @return An enum which says whether to return the frame or to release it.
 */
    eFrameProcessingResult_t eARPProcessPacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b090      	sub	sp, #64	@ 0x40
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ARPPacket_t * pxARPFrame = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e38:	63bb      	str	r3, [r7, #56]	@ 0x38
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        uint32_t ulTargetProtocolAddress, ulSenderProtocolAddress;

        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource;
        void * pvCopyDest;
        NetworkEndPoint_t * pxTargetEndPoint = pxNetworkBuffer->pxEndPoint;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e44:	637b      	str	r3, [r7, #52]	@ 0x34
         * period. */
        static UBaseType_t uxARPClashCounter = 0U;
        /* The time at which the last ARP clash was sent. */
        static TimeOut_t xARPClashTimeOut;

        pxARPHeader = &( pxARPFrame->xARPHeader );
 8006e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e48:	330e      	adds	r3, #14
 8006e4a:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Only Ethernet hardware type is supported.
         * Only IPv4 address can be present in the ARP packet.
         * The hardware length (the MAC address) must be 6 bytes. And,
         * The Protocol address length must be 4 bytes as it is IPv4. */
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 8006e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e4e:	881b      	ldrh	r3, [r3, #0]
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e56:	f040 81bb 	bne.w	80071d0 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5c:	885b      	ldrh	r3, [r3, #2]
 8006e5e:	b29b      	uxth	r3, r3
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 8006e60:	2b08      	cmp	r3, #8
 8006e62:	f040 81b5 	bne.w	80071d0 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 8006e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e68:	791b      	ldrb	r3, [r3, #4]
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 8006e6a:	2b06      	cmp	r3, #6
 8006e6c:	f040 81b0 	bne.w	80071d0 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->ucProtocolAddressLength == ipIP_ADDRESS_LENGTH_BYTES ) )
 8006e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e72:	795b      	ldrb	r3, [r3, #5]
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 8006e74:	2b04      	cmp	r3, #4
 8006e76:	f040 81ab 	bne.w	80071d0 <eARPProcessPacket+0x3a4>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxARPHeader->ucSenderProtocolAddress;
 8006e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7c:	330e      	adds	r3, #14
 8006e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            pvCopyDest = &ulSenderProtocolAddress;
 8006e80:	f107 0320 	add.w	r3, r7, #32
 8006e84:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ulSenderProtocolAddress ) );
 8006e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e8e:	601a      	str	r2, [r3, #0]
            /* The field ulTargetProtocolAddress is well-aligned, a 32-bits copy. */
            ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 8006e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	627b      	str	r3, [r7, #36]	@ 0x24

            if( uxARPClashCounter != 0U )
 8006e96:	4b9c      	ldr	r3, [pc, #624]	@ (8007108 <eARPProcessPacket+0x2dc>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d009      	beq.n	8006eb2 <eARPProcessPacket+0x86>
            {
                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xARPClashTimeOut, &uxARPClashTimeoutPeriod ) == pdTRUE )
 8006e9e:	499b      	ldr	r1, [pc, #620]	@ (800710c <eARPProcessPacket+0x2e0>)
 8006ea0:	489b      	ldr	r0, [pc, #620]	@ (8007110 <eARPProcessPacket+0x2e4>)
 8006ea2:	f7fe faf7 	bl	8005494 <xTaskCheckForTimeOut>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d102      	bne.n	8006eb2 <eARPProcessPacket+0x86>
                {
                    /* We have waited long enough, reset the counter. */
                    uxARPClashCounter = 0;
 8006eac:	4b96      	ldr	r3, [pc, #600]	@ (8007108 <eARPProcessPacket+0x2dc>)
 8006eae:	2200      	movs	r2, #0
 8006eb0:	601a      	str	r2, [r3, #0]
                }
            }

            /* Check whether the lowest bit of the highest byte is 1 to check for
             * multicast address or even a broadcast address (FF:FF:FF:FF:FF:FF). */
            if( ( pxARPHeader->xSenderHardwareAddress.ucBytes[ 0 ] & 0x01U ) == 0x01U )
 8006eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb4:	7a1b      	ldrb	r3, [r3, #8]
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f040 8188 	bne.w	80071d0 <eARPProcessPacket+0x3a4>
                /* Senders address is a multicast OR broadcast address which is not
                 * allowed for an ARP packet. Drop the packet. See RFC 1812 section
                 * 3.3.2. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	061a      	lsls	r2, r3, #24
 8006ec4:	6a3b      	ldr	r3, [r7, #32]
 8006ec6:	021b      	lsls	r3, r3, #8
 8006ec8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006ecc:	431a      	orrs	r2, r3
 8006ece:	6a3b      	ldr	r3, [r7, #32]
 8006ed0:	0a1b      	lsrs	r3, r3, #8
 8006ed2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006ed6:	431a      	orrs	r2, r3
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	0e1b      	lsrs	r3, r3, #24
 8006edc:	4313      	orrs	r3, r2
 8006ede:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8006ee2:	d311      	bcc.n	8006f08 <eARPProcessPacket+0xdc>
                     ( ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) < ipLAST_LOOPBACK_IPv4 ) )
 8006ee4:	6a3b      	ldr	r3, [r7, #32]
 8006ee6:	061a      	lsls	r2, r3, #24
 8006ee8:	6a3b      	ldr	r3, [r7, #32]
 8006eea:	021b      	lsls	r3, r3, #8
 8006eec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006ef0:	431a      	orrs	r2, r3
 8006ef2:	6a3b      	ldr	r3, [r7, #32]
 8006ef4:	0a1b      	lsrs	r3, r3, #8
 8006ef6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006efa:	431a      	orrs	r2, r3
 8006efc:	6a3b      	ldr	r3, [r7, #32]
 8006efe:	0e1b      	lsrs	r3, r3, #24
 8006f00:	4313      	orrs	r3, r2
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f280 8164 	bge.w	80071d0 <eARPProcessPacket+0x3a4>
                /* The local loopback addresses must never appear outside a host. See RFC 1122
                 * section 3.2.1.3. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            /* Check whether there is a clash with another device for this IP address. */
            else if( ( pxTargetEndPoint != NULL ) && ( ulSenderProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) )
 8006f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d021      	beq.n	8006f52 <eARPProcessPacket+0x126>
 8006f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	6a3b      	ldr	r3, [r7, #32]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d11c      	bne.n	8006f52 <eARPProcessPacket+0x126>
            {
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 8006f18:	4b7b      	ldr	r3, [pc, #492]	@ (8007108 <eARPProcessPacket+0x2dc>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f040 8157 	bne.w	80071d0 <eARPProcessPacket+0x3a4>
                {
                    /* Increment the counter. */
                    uxARPClashCounter++;
 8006f22:	4b79      	ldr	r3, [pc, #484]	@ (8007108 <eARPProcessPacket+0x2dc>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	3301      	adds	r3, #1
 8006f28:	4a77      	ldr	r2, [pc, #476]	@ (8007108 <eARPProcessPacket+0x2dc>)
 8006f2a:	6013      	str	r3, [r2, #0]

                    /* Send out a defensive ARP request. */
                    FreeRTOS_OutputARPRequest_Multi( pxTargetEndPoint, pxTargetEndPoint->ipv4_settings.ulIPAddress );
 8006f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4619      	mov	r1, r3
 8006f32:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006f34:	f000 fe32 	bl	8007b9c <FreeRTOS_OutputARPRequest_Multi>

                    /* Since an ARP Request for this IP was just sent, do not send a gratuitous
                     * ARP for arpGRATUITOUS_ARP_PERIOD. */
                    xLastGratuitousARPTime = xTaskGetTickCount();
 8006f38:	f7fd feca 	bl	8004cd0 <xTaskGetTickCount>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	4a75      	ldr	r2, [pc, #468]	@ (8007114 <eARPProcessPacket+0x2e8>)
 8006f40:	6013      	str	r3, [r2, #0]

                    /* Note the time at which this request was sent. */
                    vTaskSetTimeOutState( &xARPClashTimeOut );
 8006f42:	4873      	ldr	r0, [pc, #460]	@ (8007110 <eARPProcessPacket+0x2e4>)
 8006f44:	f7fe fa6e 	bl	8005424 <vTaskSetTimeOutState>

                    /* Reset the time-out period to the given value. */
                    uxARPClashTimeoutPeriod = pdMS_TO_TICKS( arpIP_CLASH_RESET_TIMEOUT_MS );
 8006f48:	4b70      	ldr	r3, [pc, #448]	@ (800710c <eARPProcessPacket+0x2e0>)
 8006f4a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006f4e:	601a      	str	r2, [r3, #0]
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 8006f50:	e13e      	b.n	80071d0 <eARPProcessPacket+0x3a4>
            {
                traceARP_PACKET_RECEIVED();

                /* Some extra logging while still testing. */
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( pxARPHeader->usOperation == ( uint16_t ) ipARP_REPLY )
 8006f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f54:	88db      	ldrh	r3, [r3, #6]
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f5c:	d14a      	bne.n	8006ff4 <eARPProcessPacket+0x1c8>
                    {
                        FreeRTOS_debug_printf( ( "ipARP_REPLY from %xip to %xip end-point %xip\n",
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
 8006f60:	061a      	lsls	r2, r3, #24
 8006f62:	6a3b      	ldr	r3, [r7, #32]
 8006f64:	021b      	lsls	r3, r3, #8
 8006f66:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006f6a:	431a      	orrs	r2, r3
 8006f6c:	6a3b      	ldr	r3, [r7, #32]
 8006f6e:	0a1b      	lsrs	r3, r3, #8
 8006f70:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006f74:	431a      	orrs	r2, r3
 8006f76:	6a3b      	ldr	r3, [r7, #32]
 8006f78:	0e1b      	lsrs	r3, r3, #24
 8006f7a:	ea42 0103 	orr.w	r1, r2, r3
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f80:	061a      	lsls	r2, r3, #24
 8006f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f84:	021b      	lsls	r3, r3, #8
 8006f86:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8e:	0a1b      	lsrs	r3, r3, #8
 8006f90:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006f94:	431a      	orrs	r2, r3
 8006f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f98:	0e1b      	lsrs	r3, r3, #24
 8006f9a:	ea42 0003 	orr.w	r0, r2, r3
 8006f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d003      	beq.n	8006fac <eARPProcessPacket+0x180>
 8006fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	061a      	lsls	r2, r3, #24
 8006faa:	e000      	b.n	8006fae <eARPProcessPacket+0x182>
 8006fac:	2200      	movs	r2, #0
 8006fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d005      	beq.n	8006fc0 <eARPProcessPacket+0x194>
 8006fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	021b      	lsls	r3, r3, #8
 8006fba:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006fbe:	e000      	b.n	8006fc2 <eARPProcessPacket+0x196>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d005      	beq.n	8006fd6 <eARPProcessPacket+0x1aa>
 8006fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	0a1b      	lsrs	r3, r3, #8
 8006fd0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006fd4:	e000      	b.n	8006fd8 <eARPProcessPacket+0x1ac>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	431a      	orrs	r2, r3
 8006fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d003      	beq.n	8006fe8 <eARPProcessPacket+0x1bc>
 8006fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	0e1b      	lsrs	r3, r3, #24
 8006fe6:	e000      	b.n	8006fea <eARPProcessPacket+0x1be>
 8006fe8:	2300      	movs	r3, #0
 8006fea:	4313      	orrs	r3, r2
 8006fec:	4602      	mov	r2, r0
 8006fee:	484a      	ldr	r0, [pc, #296]	@ (8007118 <eARPProcessPacket+0x2ec>)
 8006ff0:	f01b fbd8 	bl	80227a4 <lUDPLoggingPrintf>
                                                 ( unsigned ) FreeRTOS_ntohl( ( pxTargetEndPoint != NULL ) ? pxTargetEndPoint->ipv4_settings.ulIPAddress : 0U ) ) );
                    }
                #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( ( pxARPHeader->usOperation == ( uint16_t ) ipARP_REQUEST ) &&
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff6:	88db      	ldrh	r3, [r3, #6]
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ffe:	d151      	bne.n	80070a4 <eARPProcessPacket+0x278>
                        ( ulSenderProtocolAddress != ulTargetProtocolAddress ) &&
 8007000:	6a3b      	ldr	r3, [r7, #32]
                    if( ( pxARPHeader->usOperation == ( uint16_t ) ipARP_REQUEST ) &&
 8007002:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007004:	429a      	cmp	r2, r3
 8007006:	d04d      	beq.n	80070a4 <eARPProcessPacket+0x278>
                        ( ulSenderProtocolAddress != ulTargetProtocolAddress ) &&
 8007008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800700a:	2b00      	cmp	r3, #0
 800700c:	d04a      	beq.n	80070a4 <eARPProcessPacket+0x278>
                        ( pxTargetEndPoint != NULL ) )
                    {
                        FreeRTOS_debug_printf( ( "ipARP_REQUEST from %xip to %xip end-point %xip\n",
 800700e:	6a3b      	ldr	r3, [r7, #32]
 8007010:	061a      	lsls	r2, r3, #24
 8007012:	6a3b      	ldr	r3, [r7, #32]
 8007014:	021b      	lsls	r3, r3, #8
 8007016:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800701a:	431a      	orrs	r2, r3
 800701c:	6a3b      	ldr	r3, [r7, #32]
 800701e:	0a1b      	lsrs	r3, r3, #8
 8007020:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007024:	431a      	orrs	r2, r3
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	0e1b      	lsrs	r3, r3, #24
 800702a:	ea42 0103 	orr.w	r1, r2, r3
 800702e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007030:	061a      	lsls	r2, r3, #24
 8007032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007034:	021b      	lsls	r3, r3, #8
 8007036:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800703a:	431a      	orrs	r2, r3
 800703c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703e:	0a1b      	lsrs	r3, r3, #8
 8007040:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007044:	431a      	orrs	r2, r3
 8007046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007048:	0e1b      	lsrs	r3, r3, #24
 800704a:	ea42 0003 	orr.w	r0, r2, r3
 800704e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007050:	2b00      	cmp	r3, #0
 8007052:	d003      	beq.n	800705c <eARPProcessPacket+0x230>
 8007054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	061a      	lsls	r2, r3, #24
 800705a:	e000      	b.n	800705e <eARPProcessPacket+0x232>
 800705c:	2200      	movs	r2, #0
 800705e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007060:	2b00      	cmp	r3, #0
 8007062:	d005      	beq.n	8007070 <eARPProcessPacket+0x244>
 8007064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	021b      	lsls	r3, r3, #8
 800706a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800706e:	e000      	b.n	8007072 <eARPProcessPacket+0x246>
 8007070:	2300      	movs	r3, #0
 8007072:	431a      	orrs	r2, r3
 8007074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007076:	2b00      	cmp	r3, #0
 8007078:	d005      	beq.n	8007086 <eARPProcessPacket+0x25a>
 800707a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	0a1b      	lsrs	r3, r3, #8
 8007080:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007084:	e000      	b.n	8007088 <eARPProcessPacket+0x25c>
 8007086:	2300      	movs	r3, #0
 8007088:	431a      	orrs	r2, r3
 800708a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800708c:	2b00      	cmp	r3, #0
 800708e:	d003      	beq.n	8007098 <eARPProcessPacket+0x26c>
 8007090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	0e1b      	lsrs	r3, r3, #24
 8007096:	e000      	b.n	800709a <eARPProcessPacket+0x26e>
 8007098:	2300      	movs	r3, #0
 800709a:	4313      	orrs	r3, r2
 800709c:	4602      	mov	r2, r0
 800709e:	481f      	ldr	r0, [pc, #124]	@ (800711c <eARPProcessPacket+0x2f0>)
 80070a0:	f01b fb80 	bl	80227a4 <lUDPLoggingPrintf>
                /* ulTargetProtocolAddress won't be used unless logging is enabled. */
                ( void ) ulTargetProtocolAddress;

                /* Don't do anything if the local IP address is zero because
                 * that means a DHCP request has not completed. */
                if( ( pxTargetEndPoint != NULL ) && ( pxTargetEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) )
 80070a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f000 8092 	beq.w	80071d0 <eARPProcessPacket+0x3a4>
 80070ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ae:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80070b2:	f003 0310 	and.w	r3, r3, #16
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f000 8089 	beq.w	80071d0 <eARPProcessPacket+0x3a4>
                {
                    switch( pxARPHeader->usOperation )
 80070be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c0:	88db      	ldrh	r3, [r3, #6]
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070c8:	d003      	beq.n	80070d2 <eARPProcessPacket+0x2a6>
 80070ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070ce:	d077      	beq.n	80071c0 <eARPProcessPacket+0x394>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
                            break;

                        default:
                            /* Invalid. */
                            break;
 80070d0:	e07e      	b.n	80071d0 <eARPProcessPacket+0x3a4>
                            if( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress )
 80070d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070d8:	429a      	cmp	r2, r3
 80070da:	d121      	bne.n	8007120 <eARPProcessPacket+0x2f4>
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 80070dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070de:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
                                            pxARPHeader->xSenderHardwareAddress.ucBytes,
 80070e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e4:	3308      	adds	r3, #8
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 80070e6:	2206      	movs	r2, #6
 80070e8:	4619      	mov	r1, r3
 80070ea:	f01c fd0c 	bl	8023b06 <memcmp>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d06c      	beq.n	80071ce <eARPProcessPacket+0x3a2>
                                    vARPProcessPacketRequest( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	461a      	mov	r2, r3
 80070f8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80070fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80070fc:	f000 f872 	bl	80071e4 <vARPProcessPacketRequest>
                                    eReturn = eReturnEthernetFrame;
 8007100:	2302      	movs	r3, #2
 8007102:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                            break;
 8007106:	e062      	b.n	80071ce <eARPProcessPacket+0x3a2>
 8007108:	20000fc8 	.word	0x20000fc8
 800710c:	20000010 	.word	0x20000010
 8007110:	20000fcc 	.word	0x20000fcc
 8007114:	20000fc4 	.word	0x20000fc4
 8007118:	08024b80 	.word	0x08024b80
 800711c:	08024bb0 	.word	0x08024bb0
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 8007120:	6a3b      	ldr	r3, [r7, #32]
 8007122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007124:	429a      	cmp	r2, r3
 8007126:	d152      	bne.n	80071ce <eARPProcessPacket+0x3a2>
                                     ( ( ulSenderProtocolAddress & pxTargetEndPoint->ipv4_settings.ulNetMask ) == ( pxTargetEndPoint->ipv4_settings.ulNetMask & pxTargetEndPoint->ipv4_settings.ulIPAddress ) ) )
 8007128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	6a3b      	ldr	r3, [r7, #32]
 800712e:	405a      	eors	r2, r3
 8007130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	4013      	ands	r3, r2
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 8007136:	2b00      	cmp	r3, #0
 8007138:	d149      	bne.n	80071ce <eARPProcessPacket+0x3a2>
                                const MACAddress_t xGARPTargetAddress = { { 0, 0, 0, 0, 0, 0 } };
 800713a:	4a28      	ldr	r2, [pc, #160]	@ (80071dc <eARPProcessPacket+0x3b0>)
 800713c:	f107 0318 	add.w	r3, r7, #24
 8007140:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007144:	6018      	str	r0, [r3, #0]
 8007146:	3304      	adds	r3, #4
 8007148:	8019      	strh	r1, [r3, #0]
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 800714a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714c:	3312      	adds	r3, #18
 800714e:	2206      	movs	r2, #6
 8007150:	4923      	ldr	r1, [pc, #140]	@ (80071e0 <eARPProcessPacket+0x3b4>)
 8007152:	4618      	mov	r0, r3
 8007154:	f01c fcd7 	bl	8023b06 <memcmp>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00a      	beq.n	8007174 <eARPProcessPacket+0x348>
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 800715e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007160:	3312      	adds	r3, #18
 8007162:	f107 0118 	add.w	r1, r7, #24
 8007166:	2206      	movs	r2, #6
 8007168:	4618      	mov	r0, r3
 800716a:	f01c fccc 	bl	8023b06 <memcmp>
 800716e:	4603      	mov	r3, r0
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 8007170:	2b00      	cmp	r3, #0
 8007172:	d12c      	bne.n	80071ce <eARPProcessPacket+0x3a2>
                                    ( memcmp( pxTargetEndPoint->xMACAddress.ucBytes, pxARPHeader->xSenderHardwareAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) != 0 ) )
 8007174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007176:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
 800717a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800717c:	3308      	adds	r3, #8
 800717e:	2206      	movs	r2, #6
 8007180:	4619      	mov	r1, r3
 8007182:	f01c fcc0 	bl	8023b06 <memcmp>
 8007186:	4603      	mov	r3, r0
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 8007188:	2b00      	cmp	r3, #0
 800718a:	d020      	beq.n	80071ce <eARPProcessPacket+0x3a2>
                                    pxCachedEndPoint = NULL;
 800718c:	2300      	movs	r3, #0
 800718e:	60fb      	str	r3, [r7, #12]
                                    if( eARPGetCacheEntry( &( ulSenderProtocolAddress ), &( xHardwareAddress ), &( pxCachedEndPoint ) ) == eARPCacheHit )
 8007190:	f107 020c 	add.w	r2, r7, #12
 8007194:	f107 0110 	add.w	r1, r7, #16
 8007198:	f107 0320 	add.w	r3, r7, #32
 800719c:	4618      	mov	r0, r3
 800719e:	f000 fb11 	bl	80077c4 <eARPGetCacheEntry>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d112      	bne.n	80071ce <eARPProcessPacket+0x3a2>
                                        if( pxCachedEndPoint == pxTargetEndPoint )
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d10e      	bne.n	80071ce <eARPProcessPacket+0x3a2>
                                            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 80071b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b2:	3308      	adds	r3, #8
 80071b4:	6a39      	ldr	r1, [r7, #32]
 80071b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80071b8:	4618      	mov	r0, r3
 80071ba:	f000 f9ef 	bl	800759c <vARPRefreshCacheEntry>
                            break;
 80071be:	e006      	b.n	80071ce <eARPProcessPacket+0x3a2>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 80071c0:	6a3b      	ldr	r3, [r7, #32]
 80071c2:	461a      	mov	r2, r3
 80071c4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80071c6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80071c8:	f000 f84a 	bl	8007260 <vARPProcessPacketReply>
                            break;
 80071cc:	e000      	b.n	80071d0 <eARPProcessPacket+0x3a4>
                            break;
 80071ce:	bf00      	nop
        else
        {
            iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
        }

        return eReturn;
 80071d0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
    }
 80071d4:	4618      	mov	r0, r3
 80071d6:	3740      	adds	r7, #64	@ 0x40
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	08024be0 	.word	0x08024be0
 80071e0:	08027f2c 	.word	0x08027f2c

080071e4 <vARPProcessPacketRequest>:
 *
 */
    static void vARPProcessPacketRequest( ARPPacket_t * pxARPFrame,
                                          NetworkEndPoint_t * pxTargetEndPoint,
                                          uint32_t ulSenderProtocolAddress )
    {
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b088      	sub	sp, #32
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
        ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	330e      	adds	r3, #14
 80071f4:	61fb      	str	r3, [r7, #28]
        iptraceSENDING_ARP_REPLY( ulSenderProtocolAddress );

        /* The request is for the address of this node.  Add the
         * entry into the ARP cache, or refresh the entry if it
         * already exists. */
        vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	3308      	adds	r3, #8
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	6879      	ldr	r1, [r7, #4]
 80071fe:	4618      	mov	r0, r3
 8007200:	f000 f9cc 	bl	800759c <vARPRefreshCacheEntry>

        /* Generate a reply payload in the same buffer. */
        pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	2200      	movs	r2, #0
 8007208:	719a      	strb	r2, [r3, #6]
 800720a:	2200      	movs	r2, #0
 800720c:	f042 0202 	orr.w	r2, r2, #2
 8007210:	71da      	strb	r2, [r3, #7]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxARPHeader->xSenderHardwareAddress.ucBytes;
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	3308      	adds	r3, #8
 8007216:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xTargetHardwareAddress.ucBytes;
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	3312      	adds	r3, #18
 800721c:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 800721e:	2206      	movs	r2, #6
 8007220:	69b9      	ldr	r1, [r7, #24]
 8007222:	6978      	ldr	r0, [r7, #20]
 8007224:	f01b fcda 	bl	8022bdc <memcpy>
        pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	619a      	str	r2, [r3, #24]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxTargetEndPoint->xMACAddress.ucBytes;
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	33e8      	adds	r3, #232	@ 0xe8
 8007232:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xSenderHardwareAddress.ucBytes;
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	3308      	adds	r3, #8
 8007238:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 800723a:	2206      	movs	r2, #6
 800723c:	69b9      	ldr	r1, [r7, #24]
 800723e:	6978      	ldr	r0, [r7, #20]
 8007240:	f01b fccc 	bl	8022bdc <memcpy>
        pvCopySource = &( pxTargetEndPoint->ipv4_settings.ulIPAddress );
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->ucSenderProtocolAddress;
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	330e      	adds	r3, #14
 800724c:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPHeader->ucSenderProtocolAddress ) );
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	461a      	mov	r2, r3
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	601a      	str	r2, [r3, #0]
    }
 8007258:	bf00      	nop
 800725a:	3720      	adds	r7, #32
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <vARPProcessPacketReply>:
 * @param[in] ulSenderProtocolAddress The IPv4 address involved.
 */
    static void vARPProcessPacketReply( const ARPPacket_t * pxARPFrame,
                                        NetworkEndPoint_t * pxTargetEndPoint,
                                        uint32_t ulSenderProtocolAddress )
    {
 8007260:	b580      	push	{r7, lr}
 8007262:	b08c      	sub	sp, #48	@ 0x30
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]
        const ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	330e      	adds	r3, #14
 8007270:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 8007272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* If the packet is meant for this device or if the entry already exists. */
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800727e:	429a      	cmp	r2, r3
 8007280:	d005      	beq.n	800728e <vARPProcessPacketReply+0x2e>
            ( xIsIPInARPCache( ulSenderProtocolAddress ) == pdTRUE ) )
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f844 	bl	8007310 <xIsIPInARPCache>
 8007288:	4603      	mov	r3, r0
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 800728a:	2b01      	cmp	r3, #1
 800728c:	d106      	bne.n	800729c <vARPProcessPacketReply+0x3c>
        {
            iptracePROCESSING_RECEIVED_ARP_REPLY( ulTargetProtocolAddress );
            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 800728e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007290:	3308      	adds	r3, #8
 8007292:	68ba      	ldr	r2, [r7, #8]
 8007294:	6879      	ldr	r1, [r7, #4]
 8007296:	4618      	mov	r0, r3
 8007298:	f000 f980 	bl	800759c <vARPRefreshCacheEntry>
        }

        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800729c:	4b1b      	ldr	r3, [pc, #108]	@ (800730c <vARPProcessPacketReply+0xac>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d02e      	beq.n	8007302 <vARPProcessPacketReply+0xa2>
            ( uxIPHeaderSizePacket( pxARPWaitingNetworkBuffer ) == ipSIZE_OF_IPv4_HEADER ) )
 80072a4:	4b19      	ldr	r3, [pc, #100]	@ (800730c <vARPProcessPacketReply+0xac>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4618      	mov	r0, r3
 80072aa:	f003 f8a5 	bl	800a3f8 <uxIPHeaderSizePacket>
 80072ae:	4603      	mov	r3, r0
        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 80072b0:	2b14      	cmp	r3, #20
 80072b2:	d126      	bne.n	8007302 <vARPProcessPacketReply+0xa2>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPPacket_t * pxARPWaitingIPPacket = ( ( IPPacket_t * ) pxARPWaitingNetworkBuffer->pucEthernetBuffer );
 80072b4:	4b15      	ldr	r3, [pc, #84]	@ (800730c <vARPProcessPacketReply+0xac>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ba:	627b      	str	r3, [r7, #36]	@ 0x24
            const IPHeader_t * pxARPWaitingIPHeader = &( pxARPWaitingIPPacket->xIPHeader );
 80072bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072be:	330e      	adds	r3, #14
 80072c0:	623b      	str	r3, [r7, #32]

            if( ulSenderProtocolAddress == pxARPWaitingIPHeader->ulSourceIPAddress )
 80072c2:	6a3b      	ldr	r3, [r7, #32]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d11a      	bne.n	8007302 <vARPProcessPacketReply+0xa2>
            {
                IPStackEvent_t xEventMessage;
                const TickType_t xDontBlock = ( TickType_t ) 0;
 80072cc:	2300      	movs	r3, #0
 80072ce:	61fb      	str	r3, [r7, #28]

                xEventMessage.eEventType = eNetworkRxEvent;
 80072d0:	2301      	movs	r3, #1
 80072d2:	753b      	strb	r3, [r7, #20]
                xEventMessage.pvData = ( void * ) pxARPWaitingNetworkBuffer;
 80072d4:	4b0d      	ldr	r3, [pc, #52]	@ (800730c <vARPProcessPacketReply+0xac>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	61bb      	str	r3, [r7, #24]

                if( xSendEventStructToIPTask( &xEventMessage, xDontBlock ) != pdPASS )
 80072da:	f107 0314 	add.w	r3, r7, #20
 80072de:	69f9      	ldr	r1, [r7, #28]
 80072e0:	4618      	mov	r0, r3
 80072e2:	f002 fcd5 	bl	8009c90 <xSendEventStructToIPTask>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d004      	beq.n	80072f6 <vARPProcessPacketReply+0x96>
                {
                    /* Failed to send the message, so release the network buffer. */
                    vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 80072ec:	4b07      	ldr	r3, [pc, #28]	@ (800730c <vARPProcessPacketReply+0xac>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4618      	mov	r0, r3
 80072f2:	f010 fbaf 	bl	8017a54 <vReleaseNetworkBufferAndDescriptor>
                }

                /* Clear the buffer. */
                pxARPWaitingNetworkBuffer = NULL;
 80072f6:	4b05      	ldr	r3, [pc, #20]	@ (800730c <vARPProcessPacketReply+0xac>)
 80072f8:	2200      	movs	r2, #0
 80072fa:	601a      	str	r2, [r3, #0]

                /* Found an ARP resolution, disable ARP resolution timer. */
                vIPSetARPResolutionTimerEnableState( pdFALSE );
 80072fc:	2000      	movs	r0, #0
 80072fe:	f003 fabd 	bl	800a87c <vIPSetARPResolutionTimerEnableState>

                iptrace_DELAYED_ARP_REQUEST_REPLIED();
            }
        }
    }
 8007302:	bf00      	nop
 8007304:	3730      	adds	r7, #48	@ 0x30
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	2000119c 	.word	0x2000119c

08007310 <xIsIPInARPCache>:
 *                    check for.
 *
 * @return When the IP-address is found: pdTRUE, else pdFALSE.
 */
BaseType_t xIsIPInARPCache( uint32_t ulAddressToLookup )
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
    BaseType_t x, xReturn = pdFALSE;
 8007318:	2300      	movs	r3, #0
 800731a:	60bb      	str	r3, [r7, #8]

    /* Loop through each entry in the ARP cache. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800731c:	2300      	movs	r3, #0
 800731e:	60fb      	str	r3, [r7, #12]
 8007320:	e017      	b.n	8007352 <xIsIPInARPCache+0x42>
    {
        /* Does this row in the ARP cache table hold an entry for the IP address
         * being queried? */
        if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 8007322:	4a12      	ldr	r2, [pc, #72]	@ (800736c <xIsIPInARPCache+0x5c>)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	011b      	lsls	r3, r3, #4
 8007328:	4413      	add	r3, r2
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	429a      	cmp	r2, r3
 8007330:	d10c      	bne.n	800734c <xIsIPInARPCache+0x3c>
        {
            xReturn = pdTRUE;
 8007332:	2301      	movs	r3, #1
 8007334:	60bb      	str	r3, [r7, #8]

            /* A matching valid entry was found. */
            if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8007336:	4a0d      	ldr	r2, [pc, #52]	@ (800736c <xIsIPInARPCache+0x5c>)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	011b      	lsls	r3, r3, #4
 800733c:	4413      	add	r3, r2
 800733e:	330b      	adds	r3, #11
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d109      	bne.n	800735a <xIsIPInARPCache+0x4a>
            {
                /* This entry is waiting an ARP reply, so is not valid. */
                xReturn = pdFALSE;
 8007346:	2300      	movs	r3, #0
 8007348:	60bb      	str	r3, [r7, #8]
            }

            break;
 800734a:	e006      	b.n	800735a <xIsIPInARPCache+0x4a>
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	3301      	adds	r3, #1
 8007350:	60fb      	str	r3, [r7, #12]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2b05      	cmp	r3, #5
 8007356:	dde4      	ble.n	8007322 <xIsIPInARPCache+0x12>
 8007358:	e000      	b.n	800735c <xIsIPInARPCache+0x4c>
            break;
 800735a:	bf00      	nop
        }
    }

    return xReturn;
 800735c:	68bb      	ldr	r3, [r7, #8]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3714      	adds	r7, #20
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	20000f64 	.word	0x20000f64

08007370 <xCheckRequiresARPResolution>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be checked.
 *
 * @return pdTRUE if the packet needs ARP resolution, pdFALSE otherwise.
 */
BaseType_t xCheckRequiresARPResolution( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8007370:	b590      	push	{r4, r7, lr}
 8007372:	b0a5      	sub	sp, #148	@ 0x94
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
    BaseType_t xNeedsARPResolution = pdFALSE;
 8007378:	2300      	movs	r3, #0
 800737a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f003 f83a 	bl	800a3f8 <uxIPHeaderSizePacket>
 8007384:	4603      	mov	r3, r0
 8007386:	2b14      	cmp	r3, #20
 8007388:	d002      	beq.n	8007390 <xCheckRequiresARPResolution+0x20>
 800738a:	2b28      	cmp	r3, #40	@ 0x28
 800738c:	d029      	beq.n	80073e2 <xCheckRequiresARPResolution+0x72>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* Shouldn't reach here */
            /* MISRA 16.4 Compliance */
            break;
 800738e:	e0b6      	b.n	80074fe <xCheckRequiresARPResolution+0x18e>
                   const IPPacket_t * pxIPPacket = ( ( const IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007394:	673b      	str	r3, [r7, #112]	@ 0x70
                   const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8007396:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007398:	330e      	adds	r3, #14
 800739a:	66fb      	str	r3, [r7, #108]	@ 0x6c
                   const IPV4Parameters_t * pxIPv4Settings = &( pxNetworkBuffer->pxEndPoint->ipv4_settings );
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073a0:	66bb      	str	r3, [r7, #104]	@ 0x68
                   if( ( pxIPHeader->ulSourceIPAddress & pxIPv4Settings->ulNetMask ) == ( pxIPv4Settings->ulIPAddress & pxIPv4Settings->ulNetMask ) )
 80073a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073a4:	68da      	ldr	r2, [r3, #12]
 80073a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	405a      	eors	r2, r3
 80073ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	4013      	ands	r3, r2
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	f040 80a0 	bne.w	80074f8 <xCheckRequiresARPResolution+0x188>
                       if( xIsIPInARPCache( pxIPHeader->ulSourceIPAddress ) == pdFALSE )
 80073b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	4618      	mov	r0, r3
 80073be:	f7ff ffa7 	bl	8007310 <xIsIPInARPCache>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f040 8097 	bne.w	80074f8 <xCheckRequiresARPResolution+0x188>
                           FreeRTOS_OutputARPRequest_Multi( pxNetworkBuffer->pxEndPoint, pxIPHeader->ulSourceIPAddress );
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	4619      	mov	r1, r3
 80073d4:	4610      	mov	r0, r2
 80073d6:	f000 fbe1 	bl	8007b9c <FreeRTOS_OutputARPRequest_Multi>
                           xNeedsARPResolution = pdTRUE;
 80073da:	2301      	movs	r3, #1
 80073dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                   break;
 80073e0:	e08a      	b.n	80074f8 <xCheckRequiresARPResolution+0x188>
                   IPPacket_IPv6_t * pxIPPacket = ( ( IPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                   IPHeader_IPv6_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 80073ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80073ee:	330e      	adds	r3, #14
 80073f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                   IPv6_Address_t * pxIPAddress = &( pxIPHeader->xSourceAddress );
 80073f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80073f8:	3308      	adds	r3, #8
 80073fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                   uint8_t ucNextHeader = pxIPHeader->ucNextHeader;
 80073fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007402:	799b      	ldrb	r3, [r3, #6]
 8007404:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
                   if( ( ucNextHeader == ipPROTOCOL_TCP ) ||
 8007408:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800740c:	2b06      	cmp	r3, #6
 800740e:	d003      	beq.n	8007418 <xCheckRequiresARPResolution+0xa8>
 8007410:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007414:	2b11      	cmp	r3, #17
 8007416:	d171      	bne.n	80074fc <xCheckRequiresARPResolution+0x18c>
                       IPv6_Type_t eType = xIPv6_GetIPType( ( const IPv6_Address_t * ) pxIPAddress );
 8007418:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800741c:	f006 ff68 	bl	800e2f0 <xIPv6_GetIPType>
 8007420:	4603      	mov	r3, r0
 8007422:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
                       FreeRTOS_debug_printf( ( "xCheckRequiresARPResolution: %pip type %s\n",
 8007426:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800742a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00d      	beq.n	800744e <xCheckRequiresARPResolution+0xde>
 8007432:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8007436:	2b01      	cmp	r3, #1
 8007438:	d007      	beq.n	800744a <xCheckRequiresARPResolution+0xda>
 800743a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800743e:	2b04      	cmp	r3, #4
 8007440:	d101      	bne.n	8007446 <xCheckRequiresARPResolution+0xd6>
 8007442:	4b32      	ldr	r3, [pc, #200]	@ (800750c <xCheckRequiresARPResolution+0x19c>)
 8007444:	e004      	b.n	8007450 <xCheckRequiresARPResolution+0xe0>
 8007446:	4b32      	ldr	r3, [pc, #200]	@ (8007510 <xCheckRequiresARPResolution+0x1a0>)
 8007448:	e002      	b.n	8007450 <xCheckRequiresARPResolution+0xe0>
 800744a:	4b32      	ldr	r3, [pc, #200]	@ (8007514 <xCheckRequiresARPResolution+0x1a4>)
 800744c:	e000      	b.n	8007450 <xCheckRequiresARPResolution+0xe0>
 800744e:	4b32      	ldr	r3, [pc, #200]	@ (8007518 <xCheckRequiresARPResolution+0x1a8>)
 8007450:	461a      	mov	r2, r3
 8007452:	4832      	ldr	r0, [pc, #200]	@ (800751c <xCheckRequiresARPResolution+0x1ac>)
 8007454:	f01b f9a6 	bl	80227a4 <lUDPLoggingPrintf>
                       if( eType == eIPv6_LinkLocal )
 8007458:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800745c:	2b01      	cmp	r3, #1
 800745e:	d14d      	bne.n	80074fc <xCheckRequiresARPResolution+0x18c>
                           ( void ) memset( &( pcName ), 0, sizeof( pcName ) );
 8007460:	f107 030c 	add.w	r3, r7, #12
 8007464:	2250      	movs	r2, #80	@ 0x50
 8007466:	2100      	movs	r1, #0
 8007468:	4618      	mov	r0, r3
 800746a:	f01b fcc4 	bl	8022df6 <memset>
                           eResult = eNDGetCacheEntry( pxIPAddress, &xMACAddress, &pxEndPoint );
 800746e:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8007472:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8007476:	4619      	mov	r1, r3
 8007478:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800747c:	f004 fe0e 	bl	800c09c <eNDGetCacheEntry>
 8007480:	4603      	mov	r3, r0
 8007482:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
                           FreeRTOS_printf( ( "xCheckRequiresARPResolution: eResult %s with EP %s\n", ( eResult == eARPCacheMiss ) ? "Miss" : ( eResult == eARPCacheHit ) ? "Hit" : "Error", pcEndpointName( pxEndPoint, pcName, sizeof pcName ) ) );
 8007486:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800748a:	2b00      	cmp	r3, #0
 800748c:	d007      	beq.n	800749e <xCheckRequiresARPResolution+0x12e>
 800748e:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8007492:	2b01      	cmp	r3, #1
 8007494:	d101      	bne.n	800749a <xCheckRequiresARPResolution+0x12a>
 8007496:	4c22      	ldr	r4, [pc, #136]	@ (8007520 <xCheckRequiresARPResolution+0x1b0>)
 8007498:	e002      	b.n	80074a0 <xCheckRequiresARPResolution+0x130>
 800749a:	4c22      	ldr	r4, [pc, #136]	@ (8007524 <xCheckRequiresARPResolution+0x1b4>)
 800749c:	e000      	b.n	80074a0 <xCheckRequiresARPResolution+0x130>
 800749e:	4c22      	ldr	r4, [pc, #136]	@ (8007528 <xCheckRequiresARPResolution+0x1b8>)
 80074a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074a2:	f107 010c 	add.w	r1, r7, #12
 80074a6:	2250      	movs	r2, #80	@ 0x50
 80074a8:	4618      	mov	r0, r3
 80074aa:	f006 ff79 	bl	800e3a0 <pcEndpointName>
 80074ae:	4603      	mov	r3, r0
 80074b0:	461a      	mov	r2, r3
 80074b2:	4621      	mov	r1, r4
 80074b4:	481d      	ldr	r0, [pc, #116]	@ (800752c <xCheckRequiresARPResolution+0x1bc>)
 80074b6:	f01b f975 	bl	80227a4 <lUDPLoggingPrintf>
                           if( eResult == eARPCacheMiss )
 80074ba:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d11c      	bne.n	80074fc <xCheckRequiresARPResolution+0x18c>
                               uxNeededSize = sizeof( ICMPPacket_IPv6_t );
 80074c2:	2356      	movs	r3, #86	@ 0x56
 80074c4:	67bb      	str	r3, [r7, #120]	@ 0x78
                               pxTempBuffer = pxGetNetworkBufferWithDescriptor( BUFFER_FROM_WHERE_CALL( 199 ) uxNeededSize, 0U );
 80074c6:	2100      	movs	r1, #0
 80074c8:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80074ca:	f010 fa5b 	bl	8017984 <pxGetNetworkBufferWithDescriptor>
 80074ce:	6778      	str	r0, [r7, #116]	@ 0x74
                               if( pxTempBuffer != NULL )
 80074d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00c      	beq.n	80074f0 <xCheckRequiresARPResolution+0x180>
                                   pxTempBuffer->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80074dc:	631a      	str	r2, [r3, #48]	@ 0x30
                                   pxTempBuffer->pxInterface = pxNetworkBuffer->pxInterface;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80074e4:	62da      	str	r2, [r3, #44]	@ 0x2c
                                   vNDSendNeighbourSolicitation( pxTempBuffer, pxIPAddress );
 80074e6:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80074ea:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80074ec:	f005 f842 	bl	800c574 <vNDSendNeighbourSolicitation>
                               xNeedsARPResolution = pdTRUE;
 80074f0:	2301      	movs	r3, #1
 80074f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                   break;
 80074f6:	e001      	b.n	80074fc <xCheckRequiresARPResolution+0x18c>
                   break;
 80074f8:	bf00      	nop
 80074fa:	e000      	b.n	80074fe <xCheckRequiresARPResolution+0x18e>
                   break;
 80074fc:	bf00      	nop
    }

    return xNeedsARPResolution;
 80074fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
}
 8007502:	4618      	mov	r0, r3
 8007504:	3794      	adds	r7, #148	@ 0x94
 8007506:	46bd      	mov	sp, r7
 8007508:	bd90      	pop	{r4, r7, pc}
 800750a:	bf00      	nop
 800750c:	08024be8 	.word	0x08024be8
 8007510:	08024bf4 	.word	0x08024bf4
 8007514:	08024bfc 	.word	0x08024bfc
 8007518:	08024c08 	.word	0x08024c08
 800751c:	08024c10 	.word	0x08024c10
 8007520:	08024c3c 	.word	0x08024c3c
 8007524:	08024c40 	.word	0x08024c40
 8007528:	08024c48 	.word	0x08024c48
 800752c:	08024c50 	.word	0x08024c50

08007530 <vARPRefreshCacheEntryAge>:
 * @param[in] pxMACAddress Pointer to the MAC address whose entry needs to be updated.
 * @param[in] ulIPAddress the IP address whose corresponding entry needs to be updated.
 */
void vARPRefreshCacheEntryAge( const MACAddress_t * pxMACAddress,
                               const uint32_t ulIPAddress )
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
    BaseType_t x;

    if( pxMACAddress != NULL )
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d026      	beq.n	800758e <vARPRefreshCacheEntryAge+0x5e>
    {
        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007540:	2300      	movs	r3, #0
 8007542:	60fb      	str	r3, [r7, #12]
 8007544:	e020      	b.n	8007588 <vARPRefreshCacheEntryAge+0x58>
        {
            /* Does this line in the cache table hold an entry for the IP
             * address being queried? */
            if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 8007546:	4a14      	ldr	r2, [pc, #80]	@ (8007598 <vARPRefreshCacheEntryAge+0x68>)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	011b      	lsls	r3, r3, #4
 800754c:	4413      	add	r3, r2
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	429a      	cmp	r2, r3
 8007554:	d115      	bne.n	8007582 <vARPRefreshCacheEntryAge+0x52>
            {
                /* Does this cache entry have the same MAC address? */
                if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	011b      	lsls	r3, r3, #4
 800755a:	4a0f      	ldr	r2, [pc, #60]	@ (8007598 <vARPRefreshCacheEntryAge+0x68>)
 800755c:	4413      	add	r3, r2
 800755e:	3304      	adds	r3, #4
 8007560:	6879      	ldr	r1, [r7, #4]
 8007562:	2206      	movs	r2, #6
 8007564:	4618      	mov	r0, r3
 8007566:	f01c face 	bl	8023b06 <memcmp>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d108      	bne.n	8007582 <vARPRefreshCacheEntryAge+0x52>
                {
                    /* The IP address and the MAC matched, update this entry age. */
                    xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8007570:	4a09      	ldr	r2, [pc, #36]	@ (8007598 <vARPRefreshCacheEntryAge+0x68>)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	011b      	lsls	r3, r3, #4
 8007576:	4413      	add	r3, r2
 8007578:	330a      	adds	r3, #10
 800757a:	2296      	movs	r2, #150	@ 0x96
 800757c:	701a      	strb	r2, [r3, #0]
                    break;
 800757e:	bf00      	nop
                }
            }
        }
    }
}
 8007580:	e005      	b.n	800758e <vARPRefreshCacheEntryAge+0x5e>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	3301      	adds	r3, #1
 8007586:	60fb      	str	r3, [r7, #12]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2b05      	cmp	r3, #5
 800758c:	dddb      	ble.n	8007546 <vARPRefreshCacheEntryAge+0x16>
}
 800758e:	bf00      	nop
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	20000f64 	.word	0x20000f64

0800759c <vARPRefreshCacheEntry>:
 * @param[in] pxEndPoint The end-point stored in the table.
 */
void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                            const uint32_t ulIPAddress,
                            struct xNetworkEndPoint * pxEndPoint )
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b088      	sub	sp, #32
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
    #endif
    {
        CacheLocation_t xLocation;
        BaseType_t xReady;

        xReady = prvFindCacheEntry( pxMACAddress, ulIPAddress, pxEndPoint, &( xLocation ) );
 80075a8:	f107 0310 	add.w	r3, r7, #16
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	68b9      	ldr	r1, [r7, #8]
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f000 f85b 	bl	800766c <prvFindCacheEntry>
 80075b6:	61f8      	str	r0, [r7, #28]

        if( xReady == pdFALSE )
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d150      	bne.n	8007660 <vARPRefreshCacheEntry+0xc4>
        {
            if( xLocation.xMacEntry >= 0 )
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	db0e      	blt.n	80075e2 <vARPRefreshCacheEntry+0x46>
            {
                xLocation.xUseEntry = xLocation.xMacEntry;
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	61bb      	str	r3, [r7, #24]

                if( xLocation.xIpEntry >= 0 )
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	db0e      	blt.n	80075ec <vARPRefreshCacheEntry+0x50>
                {
                    /* Both the MAC address as well as the IP address were found in
                     * different locations: clear the entry which matches the
                     * IP-address */
                    ( void ) memset( &( xARPCache[ xLocation.xIpEntry ] ), 0, sizeof( ARPCacheRow_t ) );
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	011b      	lsls	r3, r3, #4
 80075d2:	4a25      	ldr	r2, [pc, #148]	@ (8007668 <vARPRefreshCacheEntry+0xcc>)
 80075d4:	4413      	add	r3, r2
 80075d6:	2210      	movs	r2, #16
 80075d8:	2100      	movs	r1, #0
 80075da:	4618      	mov	r0, r3
 80075dc:	f01b fc0b 	bl	8022df6 <memset>
 80075e0:	e004      	b.n	80075ec <vARPRefreshCacheEntry+0x50>
                }
            }
            else if( xLocation.xIpEntry >= 0 )
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	db01      	blt.n	80075ec <vARPRefreshCacheEntry+0x50>
            {
                /* An entry containing the IP-address was found, but it had a different MAC address */
                xLocation.xUseEntry = xLocation.xIpEntry;
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	61bb      	str	r3, [r7, #24]
            {
                /* No matching entry found. */
            }

            /* If the entry was not found, we use the oldest entry and set the IPaddress */
            xARPCache[ xLocation.xUseEntry ].ulIPAddress = ulIPAddress;
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	4a1e      	ldr	r2, [pc, #120]	@ (8007668 <vARPRefreshCacheEntry+0xcc>)
 80075f0:	011b      	lsls	r3, r3, #4
 80075f2:	4413      	add	r3, r2
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	601a      	str	r2, [r3, #0]

            if( pxMACAddress != NULL )
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d01f      	beq.n	800763e <vARPRefreshCacheEntry+0xa2>
            {
                ( void ) memcpy( xARPCache[ xLocation.xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	011b      	lsls	r3, r3, #4
 8007602:	4a19      	ldr	r2, [pc, #100]	@ (8007668 <vARPRefreshCacheEntry+0xcc>)
 8007604:	4413      	add	r3, r2
 8007606:	3304      	adds	r3, #4
 8007608:	68f9      	ldr	r1, [r7, #12]
 800760a:	2206      	movs	r2, #6
 800760c:	4618      	mov	r0, r3
 800760e:	f01b fae5 	bl	8022bdc <memcpy>

                iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, ( *pxMACAddress ) );
                /* And this entry does not need immediate attention */
                xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	4a14      	ldr	r2, [pc, #80]	@ (8007668 <vARPRefreshCacheEntry+0xcc>)
 8007616:	011b      	lsls	r3, r3, #4
 8007618:	4413      	add	r3, r2
 800761a:	330a      	adds	r3, #10
 800761c:	2296      	movs	r2, #150	@ 0x96
 800761e:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	4a11      	ldr	r2, [pc, #68]	@ (8007668 <vARPRefreshCacheEntry+0xcc>)
 8007624:	011b      	lsls	r3, r3, #4
 8007626:	4413      	add	r3, r2
 8007628:	330b      	adds	r3, #11
 800762a:	2201      	movs	r2, #1
 800762c:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].pxEndPoint = pxEndPoint;
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	4a0d      	ldr	r2, [pc, #52]	@ (8007668 <vARPRefreshCacheEntry+0xcc>)
 8007632:	011b      	lsls	r3, r3, #4
 8007634:	4413      	add	r3, r2
 8007636:	330c      	adds	r3, #12
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	601a      	str	r2, [r3, #0]
            {
                /* Nothing will be stored. */
            }
        }
    }
}
 800763c:	e010      	b.n	8007660 <vARPRefreshCacheEntry+0xc4>
            else if( xLocation.xIpEntry < 0 )
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	2b00      	cmp	r3, #0
 8007642:	da0d      	bge.n	8007660 <vARPRefreshCacheEntry+0xc4>
                xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	4a08      	ldr	r2, [pc, #32]	@ (8007668 <vARPRefreshCacheEntry+0xcc>)
 8007648:	011b      	lsls	r3, r3, #4
 800764a:	4413      	add	r3, r2
 800764c:	330a      	adds	r3, #10
 800764e:	2205      	movs	r2, #5
 8007650:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	4a04      	ldr	r2, [pc, #16]	@ (8007668 <vARPRefreshCacheEntry+0xcc>)
 8007656:	011b      	lsls	r3, r3, #4
 8007658:	4413      	add	r3, r2
 800765a:	330b      	adds	r3, #11
 800765c:	2200      	movs	r2, #0
 800765e:	701a      	strb	r2, [r3, #0]
}
 8007660:	bf00      	nop
 8007662:	3720      	adds	r7, #32
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	20000f64 	.word	0x20000f64

0800766c <prvFindCacheEntry>:
 */
static BaseType_t prvFindCacheEntry( const MACAddress_t * pxMACAddress,
                                     const uint32_t ulIPAddress,
                                     struct xNetworkEndPoint * pxEndPoint,
                                     CacheLocation_t * pxLocation )
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b08a      	sub	sp, #40	@ 0x28
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
 8007678:	603b      	str	r3, [r7, #0]
    BaseType_t x = 0;
 800767a:	2300      	movs	r3, #0
 800767c:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t ucMinAgeFound = 0U;
 800767e:	2300      	movs	r3, #0
 8007680:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    BaseType_t xReturn = pdFALSE;
 8007684:	2300      	movs	r3, #0
 8007686:	61fb      	str	r3, [r7, #28]

    #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
        BaseType_t xAddressIsLocal = ( FreeRTOS_FindEndPointOnNetMask( ulIPAddress, 2 ) != NULL ) ? 1 : 0; /* ARP remote address. */
 8007688:	2102      	movs	r1, #2
 800768a:	68b8      	ldr	r0, [r7, #8]
 800768c:	f006 fb24 	bl	800dcd8 <FreeRTOS_FindEndPointOnNetMask>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	bf14      	ite	ne
 8007696:	2301      	movne	r3, #1
 8007698:	2300      	moveq	r3, #0
 800769a:	b2db      	uxtb	r3, r3
 800769c:	617b      	str	r3, [r7, #20]
    #endif

    /* Start with the maximum possible number. */
    ucMinAgeFound--;
 800769e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80076a2:	3b01      	subs	r3, #1
 80076a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    pxLocation->xIpEntry = -1;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	f04f 32ff 	mov.w	r2, #4294967295
 80076ae:	601a      	str	r2, [r3, #0]
    pxLocation->xMacEntry = -1;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	f04f 32ff 	mov.w	r2, #4294967295
 80076b6:	605a      	str	r2, [r3, #4]
    pxLocation->xUseEntry = 0;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	2200      	movs	r2, #0
 80076bc:	609a      	str	r2, [r3, #8]

    /* For each entry in the ARP cache table. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80076be:	2300      	movs	r3, #0
 80076c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80076c2:	e074      	b.n	80077ae <prvFindCacheEntry+0x142>
    {
        BaseType_t xMatchingMAC = pdFALSE;
 80076c4:	2300      	movs	r3, #0
 80076c6:	61bb      	str	r3, [r7, #24]

        if( pxMACAddress != NULL )
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00e      	beq.n	80076ec <prvFindCacheEntry+0x80>
        {
            if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 80076ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d0:	011b      	lsls	r3, r3, #4
 80076d2:	4a3b      	ldr	r2, [pc, #236]	@ (80077c0 <prvFindCacheEntry+0x154>)
 80076d4:	4413      	add	r3, r2
 80076d6:	3304      	adds	r3, #4
 80076d8:	68f9      	ldr	r1, [r7, #12]
 80076da:	2206      	movs	r2, #6
 80076dc:	4618      	mov	r0, r3
 80076de:	f01c fa12 	bl	8023b06 <memcmp>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d101      	bne.n	80076ec <prvFindCacheEntry+0x80>
            {
                xMatchingMAC = pdTRUE;
 80076e8:	2301      	movs	r3, #1
 80076ea:	61bb      	str	r3, [r7, #24]
            }
        }

        /* Does this line in the cache table hold an entry for the IP
         * address being queried? */
        if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 80076ec:	4a34      	ldr	r2, [pc, #208]	@ (80077c0 <prvFindCacheEntry+0x154>)
 80076ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f0:	011b      	lsls	r3, r3, #4
 80076f2:	4413      	add	r3, r2
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d125      	bne.n	8007748 <prvFindCacheEntry+0xdc>
        {
            if( pxMACAddress == NULL )
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d103      	bne.n	800770a <prvFindCacheEntry+0x9e>
            {
                /* In case the parameter pxMACAddress is NULL, an entry will be reserved to
                 * indicate that there is an outstanding ARP request, This entry will have
                 * "ucValid == pdFALSE". */
                pxLocation->xIpEntry = x;
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007706:	601a      	str	r2, [r3, #0]
                break;
 8007708:	e054      	b.n	80077b4 <prvFindCacheEntry+0x148>
            }

            /* See if the MAC-address also matches. */
            if( xMatchingMAC != pdFALSE )
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d017      	beq.n	8007740 <prvFindCacheEntry+0xd4>
            {
                /* This function will be called for each received packet
                 * This is by far the most common path. */
                xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8007710:	4a2b      	ldr	r2, [pc, #172]	@ (80077c0 <prvFindCacheEntry+0x154>)
 8007712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007714:	011b      	lsls	r3, r3, #4
 8007716:	4413      	add	r3, r2
 8007718:	330a      	adds	r3, #10
 800771a:	2296      	movs	r2, #150	@ 0x96
 800771c:	701a      	strb	r2, [r3, #0]
                xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 800771e:	4a28      	ldr	r2, [pc, #160]	@ (80077c0 <prvFindCacheEntry+0x154>)
 8007720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007722:	011b      	lsls	r3, r3, #4
 8007724:	4413      	add	r3, r2
 8007726:	330b      	adds	r3, #11
 8007728:	2201      	movs	r2, #1
 800772a:	701a      	strb	r2, [r3, #0]
                xARPCache[ x ].pxEndPoint = pxEndPoint;
 800772c:	4a24      	ldr	r2, [pc, #144]	@ (80077c0 <prvFindCacheEntry+0x154>)
 800772e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007730:	011b      	lsls	r3, r3, #4
 8007732:	4413      	add	r3, r2
 8007734:	330c      	adds	r3, #12
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	601a      	str	r2, [r3, #0]
                /* Indicate to the caller that the entry is updated. */
                xReturn = pdTRUE;
 800773a:	2301      	movs	r3, #1
 800773c:	61fb      	str	r3, [r7, #28]
                break;
 800773e:	e039      	b.n	80077b4 <prvFindCacheEntry+0x148>
            /* Found an entry containing ulIPAddress, but the MAC address
             * doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
             * for an ARP reply.  Still want to see if there is match with the
             * given MAC address.ucBytes.  If found, either of the two entries
             * must be cleared. */
            pxLocation->xIpEntry = x;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007744:	601a      	str	r2, [r3, #0]
 8007746:	e02f      	b.n	80077a8 <prvFindCacheEntry+0x13c>
        }
        else if( xMatchingMAC != pdFALSE )
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d017      	beq.n	800777e <prvFindCacheEntry+0x112>
            #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
            {
                /* If ARP stores the MAC address of IP addresses outside the
                 * network, than the MAC address of the gateway should not be
                 * overwritten. */
                BaseType_t xOtherIsLocal = ( FreeRTOS_FindEndPointOnNetMask( xARPCache[ x ].ulIPAddress, 3 ) != NULL ) ? 1 : 0; /* ARP remote address. */
 800774e:	4a1c      	ldr	r2, [pc, #112]	@ (80077c0 <prvFindCacheEntry+0x154>)
 8007750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007752:	011b      	lsls	r3, r3, #4
 8007754:	4413      	add	r3, r2
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2103      	movs	r1, #3
 800775a:	4618      	mov	r0, r3
 800775c:	f006 fabc 	bl	800dcd8 <FreeRTOS_FindEndPointOnNetMask>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	bf14      	ite	ne
 8007766:	2301      	movne	r3, #1
 8007768:	2300      	moveq	r3, #0
 800776a:	b2db      	uxtb	r3, r3
 800776c:	613b      	str	r3, [r7, #16]

                if( xAddressIsLocal == xOtherIsLocal )
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	429a      	cmp	r2, r3
 8007774:	d118      	bne.n	80077a8 <prvFindCacheEntry+0x13c>
                {
                    pxLocation->xMacEntry = x;
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800777a:	605a      	str	r2, [r3, #4]
 800777c:	e014      	b.n	80077a8 <prvFindCacheEntry+0x13c>
            #endif /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
        }

        /* _HT_
         * Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
        else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 800777e:	4a10      	ldr	r2, [pc, #64]	@ (80077c0 <prvFindCacheEntry+0x154>)
 8007780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007782:	011b      	lsls	r3, r3, #4
 8007784:	4413      	add	r3, r2
 8007786:	330a      	adds	r3, #10
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800778e:	429a      	cmp	r2, r3
 8007790:	d90a      	bls.n	80077a8 <prvFindCacheEntry+0x13c>
        {
            /* As the table is traversed, remember the table row that
             * contains the oldest entry (the lowest age count, as ages are
             * decremented to zero) so the row can be re-used if this function
             * needs to add an entry that does not already exist. */
            ucMinAgeFound = xARPCache[ x ].ucAge;
 8007792:	4a0b      	ldr	r2, [pc, #44]	@ (80077c0 <prvFindCacheEntry+0x154>)
 8007794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007796:	011b      	lsls	r3, r3, #4
 8007798:	4413      	add	r3, r2
 800779a:	330a      	adds	r3, #10
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            pxLocation->xUseEntry = x;
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077a6:	609a      	str	r2, [r3, #8]
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80077a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077aa:	3301      	adds	r3, #1
 80077ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80077ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b0:	2b05      	cmp	r3, #5
 80077b2:	dd87      	ble.n	80076c4 <prvFindCacheEntry+0x58>
        {
            /* Nothing happens to this cache entry for now. */
        }
    } /* for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ ) */

    return xReturn;
 80077b4:	69fb      	ldr	r3, [r7, #28]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3728      	adds	r7, #40	@ 0x28
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	20000f64 	.word	0x20000f64

080077c4 <eARPGetCacheEntry>:
 *         eCantSendPacket.
 */
    eARPLookupResult_t eARPGetCacheEntry( uint32_t * pulIPAddress,
                                          MACAddress_t * const pxMACAddress,
                                          struct xNetworkEndPoint ** ppxEndPoint )
    {
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b088      	sub	sp, #32
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;
        uint32_t ulAddressToLookup;
        NetworkEndPoint_t * pxEndPoint = NULL;
 80077d0:	2300      	movs	r3, #0
 80077d2:	61bb      	str	r3, [r7, #24]

        configASSERT( pxMACAddress != NULL );
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d104      	bne.n	80077e4 <eARPGetCacheEntry+0x20>
 80077da:	f240 31c9 	movw	r1, #969	@ 0x3c9
 80077de:	483c      	ldr	r0, [pc, #240]	@ (80078d0 <eARPGetCacheEntry+0x10c>)
 80077e0:	f7fa f912 	bl	8001a08 <vAssertCalled>
        configASSERT( pulIPAddress != NULL );
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d104      	bne.n	80077f4 <eARPGetCacheEntry+0x30>
 80077ea:	f240 31ca 	movw	r1, #970	@ 0x3ca
 80077ee:	4838      	ldr	r0, [pc, #224]	@ (80078d0 <eARPGetCacheEntry+0x10c>)
 80077f0:	f7fa f90a 	bl	8001a08 <vAssertCalled>
        configASSERT( ppxEndPoint != NULL );
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d104      	bne.n	8007804 <eARPGetCacheEntry+0x40>
 80077fa:	f240 31cb 	movw	r1, #971	@ 0x3cb
 80077fe:	4834      	ldr	r0, [pc, #208]	@ (80078d0 <eARPGetCacheEntry+0x10c>)
 8007800:	f7fa f902 	bl	8001a08 <vAssertCalled>

        *( ppxEndPoint ) = NULL;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	601a      	str	r2, [r3, #0]
        ulAddressToLookup = *pulIPAddress;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	617b      	str	r3, [r7, #20]
        pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( ulAddressToLookup, 0 );
 8007810:	2100      	movs	r1, #0
 8007812:	6978      	ldr	r0, [r7, #20]
 8007814:	f006 f9d4 	bl	800dbc0 <FreeRTOS_FindEndPointOnIP_IPv4>
 8007818:	61b8      	str	r0, [r7, #24]

        if( xIsIPv4Multicast( ulAddressToLookup ) != 0 )
 800781a:	6978      	ldr	r0, [r7, #20]
 800781c:	f003 fc3c 	bl	800b098 <xIsIPv4Multicast>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d021      	beq.n	800786a <eARPGetCacheEntry+0xa6>
        {
            /* Get the lowest 23 bits of the IP-address. */
            vSetMultiCastIPv4MacAddress( ulAddressToLookup, pxMACAddress );
 8007826:	68b9      	ldr	r1, [r7, #8]
 8007828:	6978      	ldr	r0, [r7, #20]
 800782a:	f003 fd63 	bl	800b2f4 <vSetMultiCastIPv4MacAddress>

            eReturn = eCantSendPacket;
 800782e:	2302      	movs	r3, #2
 8007830:	77fb      	strb	r3, [r7, #31]
            pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8007832:	2000      	movs	r0, #0
 8007834:	f006 f978 	bl	800db28 <FreeRTOS_FirstEndPoint>
 8007838:	61b8      	str	r0, [r7, #24]

            for( ;
 800783a:	e012      	b.n	8007862 <eARPGetCacheEntry+0x9e>
                 pxEndPoint != NULL;
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
            {
                if( pxEndPoint->bits.bIPv6 == 0U ) /*NULL End Point is checked in the for loop, no need for an extra check */
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8007842:	f003 0304 	and.w	r3, r3, #4
 8007846:	b2db      	uxtb	r3, r3
 8007848:	2b00      	cmp	r3, #0
 800784a:	d105      	bne.n	8007858 <eARPGetCacheEntry+0x94>
                {
                    /* For multi-cast, use the first IPv4 end-point. */
                    *( ppxEndPoint ) = pxEndPoint;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	69ba      	ldr	r2, [r7, #24]
 8007850:	601a      	str	r2, [r3, #0]
                    eReturn = eARPCacheHit;
 8007852:	2301      	movs	r3, #1
 8007854:	77fb      	strb	r3, [r7, #31]
                    break;
 8007856:	e035      	b.n	80078c4 <eARPGetCacheEntry+0x100>
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8007858:	69b9      	ldr	r1, [r7, #24]
 800785a:	2000      	movs	r0, #0
 800785c:	f006 f986 	bl	800db6c <FreeRTOS_NextEndPoint>
 8007860:	61b8      	str	r0, [r7, #24]
                 pxEndPoint != NULL;
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1e9      	bne.n	800783c <eARPGetCacheEntry+0x78>
 8007868:	e02c      	b.n	80078c4 <eARPGetCacheEntry+0x100>
                }
            }
        }
        else if( ( FreeRTOS_htonl( ulAddressToLookup ) & 0xffU ) == 0xffU ) /* Is this a broadcast address like x.x.x.255 ? */
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	061a      	lsls	r2, r3, #24
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	021b      	lsls	r3, r3, #8
 8007872:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007876:	431a      	orrs	r2, r3
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	0a1b      	lsrs	r3, r3, #8
 800787c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007880:	431a      	orrs	r2, r3
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	0e1b      	lsrs	r3, r3, #24
 8007886:	4313      	orrs	r3, r2
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2bff      	cmp	r3, #255	@ 0xff
 800788c:	d113      	bne.n	80078b6 <eARPGetCacheEntry+0xf2>
        {
            /* This is a broadcast so it uses the broadcast MAC address. */
            ( void ) memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	4a10      	ldr	r2, [pc, #64]	@ (80078d4 <eARPGetCacheEntry+0x110>)
 8007892:	6811      	ldr	r1, [r2, #0]
 8007894:	6019      	str	r1, [r3, #0]
 8007896:	8892      	ldrh	r2, [r2, #4]
 8007898:	809a      	strh	r2, [r3, #4]
            pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulAddressToLookup, 4 );
 800789a:	2104      	movs	r1, #4
 800789c:	6978      	ldr	r0, [r7, #20]
 800789e:	f006 fa1b 	bl	800dcd8 <FreeRTOS_FindEndPointOnNetMask>
 80078a2:	61b8      	str	r0, [r7, #24]

            if( pxEndPoint != NULL )
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d002      	beq.n	80078b0 <eARPGetCacheEntry+0xec>
            {
                *( ppxEndPoint ) = pxEndPoint;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	69ba      	ldr	r2, [r7, #24]
 80078ae:	601a      	str	r2, [r3, #0]
            }

            eReturn = eARPCacheHit;
 80078b0:	2301      	movs	r3, #1
 80078b2:	77fb      	strb	r3, [r7, #31]
 80078b4:	e006      	b.n	80078c4 <eARPGetCacheEntry+0x100>
        }
        else
        {
            eReturn = eARPGetCacheEntryGateWay( pulIPAddress, pxMACAddress, ppxEndPoint );
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	68b9      	ldr	r1, [r7, #8]
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f000 f80c 	bl	80078d8 <eARPGetCacheEntryGateWay>
 80078c0:	4603      	mov	r3, r0
 80078c2:	77fb      	strb	r3, [r7, #31]
        }

        return eReturn;
 80078c4:	7ffb      	ldrb	r3, [r7, #31]
    }
 80078c6:	4618      	mov	r0, r3
 80078c8:	3720      	adds	r7, #32
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	08024c84 	.word	0x08024c84
 80078d4:	08027f2c 	.word	0x08027f2c

080078d8 <eARPGetCacheEntryGateWay>:
 * @param[out] ppxEndPoint The end-point of the gateway will be copy to the pointee.
 */
    static eARPLookupResult_t eARPGetCacheEntryGateWay( uint32_t * pulIPAddress,
                                                        MACAddress_t * const pxMACAddress,
                                                        struct xNetworkEndPoint ** ppxEndPoint )
    {
 80078d8:	b580      	push	{r7, lr}
 80078da:	b088      	sub	sp, #32
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn = eARPCacheMiss;
 80078e4:	2300      	movs	r3, #0
 80078e6:	77fb      	strb	r3, [r7, #31]
        uint32_t ulAddressToLookup = *( pulIPAddress );
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	61bb      	str	r3, [r7, #24]
        NetworkEndPoint_t * pxEndPoint;
        uint32_t ulOriginal = *pulIPAddress;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	617b      	str	r3, [r7, #20]

        /* It is assumed that devices with the same netmask are on the same
         * LAN and don't need a gateway. */
        pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulAddressToLookup, 4 );
 80078f4:	2104      	movs	r1, #4
 80078f6:	69b8      	ldr	r0, [r7, #24]
 80078f8:	f006 f9ee 	bl	800dcd8 <FreeRTOS_FindEndPointOnNetMask>
 80078fc:	6138      	str	r0, [r7, #16]

        if( pxEndPoint == NULL )
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d11b      	bne.n	800793c <eARPGetCacheEntryGateWay+0x64>
        {
            /* No matching end-point is found, look for a gateway. */
            #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	68b9      	ldr	r1, [r7, #8]
 8007908:	69b8      	ldr	r0, [r7, #24]
 800790a:	f000 f86b 	bl	80079e4 <prvCacheLookup>
 800790e:	4603      	mov	r3, r0
 8007910:	77fb      	strb	r3, [r7, #31]

                if( eReturn == eARPCacheHit )
 8007912:	7ffb      	ldrb	r3, [r7, #31]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d017      	beq.n	8007948 <eARPGetCacheEntryGateWay+0x70>
                else
            #endif
            {
                /* The IP address is off the local network, so look up the
                 * hardware address of the router, if any. */
                *( ppxEndPoint ) = FreeRTOS_FindGateWay( ( BaseType_t ) ipTYPE_IPv4 );
 8007918:	2040      	movs	r0, #64	@ 0x40
 800791a:	f006 fca9 	bl	800e270 <FreeRTOS_FindGateWay>
 800791e:	4602      	mov	r2, r0
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	601a      	str	r2, [r3, #0]

                if( *( ppxEndPoint ) != NULL )
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d004      	beq.n	8007936 <eARPGetCacheEntryGateWay+0x5e>
                {
                    /* 'ipv4_settings' can be accessed safely, because 'ipTYPE_IPv4' was provided. */
                    ulAddressToLookup = ( *ppxEndPoint )->ipv4_settings.ulGatewayAddress;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	61bb      	str	r3, [r7, #24]
 8007934:	e008      	b.n	8007948 <eARPGetCacheEntryGateWay+0x70>
                }
                else
                {
                    ulAddressToLookup = 0U;
 8007936:	2300      	movs	r3, #0
 8007938:	61bb      	str	r3, [r7, #24]
 800793a:	e005      	b.n	8007948 <eARPGetCacheEntryGateWay+0x70>
        }
        else
        {
            /* The IP address is on the local network, so lookup the requested
             * IP address directly. */
            ulAddressToLookup = *pulIPAddress;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	61bb      	str	r3, [r7, #24]
            *ppxEndPoint = pxEndPoint;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	693a      	ldr	r2, [r7, #16]
 8007946:	601a      	str	r2, [r3, #0]
        }

        #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
            if( eReturn == eARPCacheMiss )
 8007948:	7ffb      	ldrb	r3, [r7, #31]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d13f      	bne.n	80079ce <eARPGetCacheEntryGateWay+0xf6>
        #endif
        {
            if( ulAddressToLookup == 0U )
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d102      	bne.n	800795a <eARPGetCacheEntryGateWay+0x82>
            {
                /* The address is not on the local network, and there is not a
                 * router. */
                eReturn = eCantSendPacket;
 8007954:	2302      	movs	r3, #2
 8007956:	77fb      	strb	r3, [r7, #31]
 8007958:	e039      	b.n	80079ce <eARPGetCacheEntryGateWay+0xf6>
            }
            else
            {
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	68b9      	ldr	r1, [r7, #8]
 800795e:	69b8      	ldr	r0, [r7, #24]
 8007960:	f000 f840 	bl	80079e4 <prvCacheLookup>
 8007964:	4603      	mov	r3, r0
 8007966:	77fb      	strb	r3, [r7, #31]

                if( ( eReturn != eARPCacheHit ) || ( ulOriginal != ulAddressToLookup ) )
 8007968:	7ffb      	ldrb	r3, [r7, #31]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d103      	bne.n	8007976 <eARPGetCacheEntryGateWay+0x9e>
 800796e:	697a      	ldr	r2, [r7, #20]
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	429a      	cmp	r2, r3
 8007974:	d028      	beq.n	80079c8 <eARPGetCacheEntryGateWay+0xf0>
                {
                    FreeRTOS_debug_printf( ( "ARP %xip %s using %xip\n",
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	061a      	lsls	r2, r3, #24
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	021b      	lsls	r3, r3, #8
 800797e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007982:	431a      	orrs	r2, r3
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	0a1b      	lsrs	r3, r3, #8
 8007988:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800798c:	431a      	orrs	r2, r3
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	0e1b      	lsrs	r3, r3, #24
 8007992:	ea42 0103 	orr.w	r1, r2, r3
 8007996:	7ffb      	ldrb	r3, [r7, #31]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d101      	bne.n	80079a0 <eARPGetCacheEntryGateWay+0xc8>
 800799c:	480e      	ldr	r0, [pc, #56]	@ (80079d8 <eARPGetCacheEntryGateWay+0x100>)
 800799e:	e000      	b.n	80079a2 <eARPGetCacheEntryGateWay+0xca>
 80079a0:	480e      	ldr	r0, [pc, #56]	@ (80079dc <eARPGetCacheEntryGateWay+0x104>)
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	061a      	lsls	r2, r3, #24
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	021b      	lsls	r3, r3, #8
 80079aa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80079ae:	431a      	orrs	r2, r3
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	0a1b      	lsrs	r3, r3, #8
 80079b4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80079b8:	431a      	orrs	r2, r3
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	0e1b      	lsrs	r3, r3, #24
 80079be:	4313      	orrs	r3, r2
 80079c0:	4602      	mov	r2, r0
 80079c2:	4807      	ldr	r0, [pc, #28]	@ (80079e0 <eARPGetCacheEntryGateWay+0x108>)
 80079c4:	f01a feee 	bl	80227a4 <lUDPLoggingPrintf>
                                             ( eReturn == eARPCacheHit ) ? "hit" : "miss",
                                             ( unsigned ) FreeRTOS_ntohl( ulAddressToLookup ) ) );
                }

                /* It might be that the ARP has to go to the gateway. */
                *pulIPAddress = ulAddressToLookup;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	69ba      	ldr	r2, [r7, #24]
 80079cc:	601a      	str	r2, [r3, #0]
            }
        }

        return eReturn;
 80079ce:	7ffb      	ldrb	r3, [r7, #31]
    }
 80079d0:	4618      	mov	r0, r3
 80079d2:	3720      	adds	r7, #32
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	08024cb0 	.word	0x08024cb0
 80079dc:	08024cb4 	.word	0x08024cb4
 80079e0:	08024cbc 	.word	0x08024cbc

080079e4 <prvCacheLookup>:
 *         and when waiting for a ARP reply: eCantSendPacket.
 */
    static eARPLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup,
                                              MACAddress_t * const pxMACAddress,
                                              NetworkEndPoint_t ** ppxEndPoint )
    {
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b086      	sub	sp, #24
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        eARPLookupResult_t eReturn = eARPCacheMiss;
 80079f0:	2300      	movs	r3, #0
 80079f2:	74fb      	strb	r3, [r7, #19]

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80079f4:	2300      	movs	r3, #0
 80079f6:	617b      	str	r3, [r7, #20]
 80079f8:	e02a      	b.n	8007a50 <prvCacheLookup+0x6c>
        {
            /* Does this row in the ARP cache table hold an entry for the IP address
             * being queried? */
            if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 80079fa:	4a19      	ldr	r2, [pc, #100]	@ (8007a60 <prvCacheLookup+0x7c>)
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	011b      	lsls	r3, r3, #4
 8007a00:	4413      	add	r3, r2
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d11f      	bne.n	8007a4a <prvCacheLookup+0x66>
            {
                /* A matching valid entry was found. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8007a0a:	4a15      	ldr	r2, [pc, #84]	@ (8007a60 <prvCacheLookup+0x7c>)
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	011b      	lsls	r3, r3, #4
 8007a10:	4413      	add	r3, r2
 8007a12:	330b      	adds	r3, #11
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d102      	bne.n	8007a20 <prvCacheLookup+0x3c>
                {
                    /* This entry is waiting an ARP reply, so is not valid. */
                    eReturn = eCantSendPacket;
 8007a1a:	2302      	movs	r3, #2
 8007a1c:	74fb      	strb	r3, [r7, #19]
                    /* ppxEndPoint != NULL was tested in the only caller eARPGetCacheEntry(). */
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
                    eReturn = eARPCacheHit;
                }

                break;
 8007a1e:	e01a      	b.n	8007a56 <prvCacheLookup+0x72>
                    ( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 8007a20:	68b8      	ldr	r0, [r7, #8]
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	011b      	lsls	r3, r3, #4
 8007a26:	4a0e      	ldr	r2, [pc, #56]	@ (8007a60 <prvCacheLookup+0x7c>)
 8007a28:	4413      	add	r3, r2
 8007a2a:	3304      	adds	r3, #4
 8007a2c:	2206      	movs	r2, #6
 8007a2e:	4619      	mov	r1, r3
 8007a30:	f01b f8d4 	bl	8022bdc <memcpy>
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
 8007a34:	4a0a      	ldr	r2, [pc, #40]	@ (8007a60 <prvCacheLookup+0x7c>)
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	011b      	lsls	r3, r3, #4
 8007a3a:	4413      	add	r3, r2
 8007a3c:	330c      	adds	r3, #12
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	601a      	str	r2, [r3, #0]
                    eReturn = eARPCacheHit;
 8007a44:	2301      	movs	r3, #1
 8007a46:	74fb      	strb	r3, [r7, #19]
                break;
 8007a48:	e005      	b.n	8007a56 <prvCacheLookup+0x72>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	617b      	str	r3, [r7, #20]
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	2b05      	cmp	r3, #5
 8007a54:	ddd1      	ble.n	80079fa <prvCacheLookup+0x16>
            }
        }

        return eReturn;
 8007a56:	7cfb      	ldrb	r3, [r7, #19]
    }
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3718      	adds	r7, #24
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	20000f64 	.word	0x20000f64

08007a64 <vARPAgeCache>:
 *        reply - if we are, then an ARP request will be re-sent.
 *        In case an ARP entry has 'Aged' to 0, it will be removed from the ARP
 *        cache.
 */
    void vARPAgeCache( void )
    {
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
        BaseType_t x;
        TickType_t xTimeNow;

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	60fb      	str	r3, [r7, #12]
 8007a6e:	e048      	b.n	8007b02 <vARPAgeCache+0x9e>
        {
            /* If the entry is valid (its age is greater than zero). */
            if( xARPCache[ x ].ucAge > 0U )
 8007a70:	4a47      	ldr	r2, [pc, #284]	@ (8007b90 <vARPAgeCache+0x12c>)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	011b      	lsls	r3, r3, #4
 8007a76:	4413      	add	r3, r2
 8007a78:	330a      	adds	r3, #10
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d03d      	beq.n	8007afc <vARPAgeCache+0x98>
            {
                /* Decrement the age value of the entry in this ARP cache table row.
                 * When the age reaches zero it is no longer considered valid. */
                ( xARPCache[ x ].ucAge )--;
 8007a80:	4a43      	ldr	r2, [pc, #268]	@ (8007b90 <vARPAgeCache+0x12c>)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	011b      	lsls	r3, r3, #4
 8007a86:	4413      	add	r3, r2
 8007a88:	330a      	adds	r3, #10
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	b2d9      	uxtb	r1, r3
 8007a90:	4a3f      	ldr	r2, [pc, #252]	@ (8007b90 <vARPAgeCache+0x12c>)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	011b      	lsls	r3, r3, #4
 8007a96:	4413      	add	r3, r2
 8007a98:	330a      	adds	r3, #10
 8007a9a:	460a      	mov	r2, r1
 8007a9c:	701a      	strb	r2, [r3, #0]

                /* If the entry is not yet valid, then it is waiting an ARP
                 * reply, and the ARP request should be retransmitted. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8007a9e:	4a3c      	ldr	r2, [pc, #240]	@ (8007b90 <vARPAgeCache+0x12c>)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	011b      	lsls	r3, r3, #4
 8007aa4:	4413      	add	r3, r2
 8007aa6:	330b      	adds	r3, #11
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d108      	bne.n	8007ac0 <vARPAgeCache+0x5c>
                {
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8007aae:	4a38      	ldr	r2, [pc, #224]	@ (8007b90 <vARPAgeCache+0x12c>)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	011b      	lsls	r3, r3, #4
 8007ab4:	4413      	add	r3, r2
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f000 f8d7 	bl	8007c6c <FreeRTOS_OutputARPRequest>
 8007abe:	e00f      	b.n	8007ae0 <vARPAgeCache+0x7c>
                }
                else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 8007ac0:	4a33      	ldr	r2, [pc, #204]	@ (8007b90 <vARPAgeCache+0x12c>)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	011b      	lsls	r3, r3, #4
 8007ac6:	4413      	add	r3, r2
 8007ac8:	330a      	adds	r3, #10
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	2b03      	cmp	r3, #3
 8007ace:	d807      	bhi.n	8007ae0 <vARPAgeCache+0x7c>
                {
                    /* This entry will get removed soon.  See if the MAC address is
                     * still valid to prevent this happening. */
                    iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8007ad0:	4a2f      	ldr	r2, [pc, #188]	@ (8007b90 <vARPAgeCache+0x12c>)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	011b      	lsls	r3, r3, #4
 8007ad6:	4413      	add	r3, r2
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4618      	mov	r0, r3
 8007adc:	f000 f8c6 	bl	8007c6c <FreeRTOS_OutputARPRequest>
                else
                {
                    /* The age has just ticked down, with nothing to do. */
                }

                if( xARPCache[ x ].ucAge == 0U )
 8007ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8007b90 <vARPAgeCache+0x12c>)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	011b      	lsls	r3, r3, #4
 8007ae6:	4413      	add	r3, r2
 8007ae8:	330a      	adds	r3, #10
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d105      	bne.n	8007afc <vARPAgeCache+0x98>
                {
                    /* The entry is no longer valid.  Wipe it out. */
                    iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
                    xARPCache[ x ].ulIPAddress = 0U;
 8007af0:	4a27      	ldr	r2, [pc, #156]	@ (8007b90 <vARPAgeCache+0x12c>)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	011b      	lsls	r3, r3, #4
 8007af6:	4413      	add	r3, r2
 8007af8:	2200      	movs	r2, #0
 8007afa:	601a      	str	r2, [r3, #0]
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	3301      	adds	r3, #1
 8007b00:	60fb      	str	r3, [r7, #12]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2b05      	cmp	r3, #5
 8007b06:	ddb3      	ble.n	8007a70 <vARPAgeCache+0xc>
                }
            }
        }

        xTimeNow = xTaskGetTickCount();
 8007b08:	f7fd f8e2 	bl	8004cd0 <xTaskGetTickCount>
 8007b0c:	6078      	str	r0, [r7, #4]

        if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 8007b0e:	4b21      	ldr	r3, [pc, #132]	@ (8007b94 <vARPAgeCache+0x130>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d007      	beq.n	8007b26 <vARPAgeCache+0xc2>
 8007b16:	4b1f      	ldr	r3, [pc, #124]	@ (8007b94 <vARPAgeCache+0x130>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d92f      	bls.n	8007b86 <vARPAgeCache+0x122>
        {
            NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 8007b26:	4b1c      	ldr	r3, [pc, #112]	@ (8007b98 <vARPAgeCache+0x134>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	60bb      	str	r3, [r7, #8]

            while( pxEndPoint != NULL )
 8007b2c:	e025      	b.n	8007b7a <vARPAgeCache+0x116>
            {
                if( ( pxEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) && ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8007b34:	f003 0310 	and.w	r3, r3, #16
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d019      	beq.n	8007b72 <vARPAgeCache+0x10e>
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d015      	beq.n	8007b72 <vARPAgeCache+0x10e>
                {
                    /* Case default is never toggled because IPv6 flag can be TRUE or FALSE */
                    switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8007b4c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d002      	beq.n	8007b5c <vARPAgeCache+0xf8>
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d007      	beq.n	8007b6a <vARPAgeCache+0x106>
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        default: /* LCOV_EXCL_LINE */
                            /* Shouldn't reach here */
                            /* MISRA 16.4 Compliance */
                            break; /* LCOV_EXCL_LINE */
 8007b5a:	e00a      	b.n	8007b72 <vARPAgeCache+0x10e>
                                FreeRTOS_OutputARPRequest_Multi( pxEndPoint, pxEndPoint->ipv4_settings.ulIPAddress );
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4619      	mov	r1, r3
 8007b62:	68b8      	ldr	r0, [r7, #8]
 8007b64:	f000 f81a 	bl	8007b9c <FreeRTOS_OutputARPRequest_Multi>
                                break;
 8007b68:	e003      	b.n	8007b72 <vARPAgeCache+0x10e>
                                FreeRTOS_OutputAdvertiseIPv6( pxEndPoint );
 8007b6a:	68b8      	ldr	r0, [r7, #8]
 8007b6c:	f005 f822 	bl	800cbb4 <FreeRTOS_OutputAdvertiseIPv6>
                                break;
 8007b70:	bf00      	nop
                    }
                }

                pxEndPoint = pxEndPoint->pxNext;
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8007b78:	60bb      	str	r3, [r7, #8]
            while( pxEndPoint != NULL )
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d1d6      	bne.n	8007b2e <vARPAgeCache+0xca>
            }

            xLastGratuitousARPTime = xTimeNow;
 8007b80:	4a04      	ldr	r2, [pc, #16]	@ (8007b94 <vARPAgeCache+0x130>)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6013      	str	r3, [r2, #0]
        }
    }
 8007b86:	bf00      	nop
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	20000f64 	.word	0x20000f64
 8007b94:	20000fc4 	.word	0x20000fc4
 8007b98:	20001528 	.word	0x20001528

08007b9c <FreeRTOS_OutputARPRequest_Multi>:
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest_Multi( NetworkEndPoint_t * pxEndPoint,
                                          uint32_t ulIPAddress )
    {
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8007bac:	f003 0304 	and.w	r3, r3, #4
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d156      	bne.n	8007c64 <FreeRTOS_OutputARPRequest_Multi+0xc8>
            ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d052      	beq.n	8007c64 <FreeRTOS_OutputARPRequest_Multi+0xc8>
        {
            /* This is called from the context of the IP event task, so a block time
             * must not be used. */
            pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0U );
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	202a      	movs	r0, #42	@ 0x2a
 8007bc2:	f00f fedf 	bl	8017984 <pxGetNetworkBufferWithDescriptor>
 8007bc6:	6138      	str	r0, [r7, #16]

            if( pxNetworkBuffer != NULL )
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d04a      	beq.n	8007c64 <FreeRTOS_OutputARPRequest_Multi+0xc8>
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	683a      	ldr	r2, [r7, #0]
 8007bd2:	615a      	str	r2, [r3, #20]
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	631a      	str	r2, [r3, #48]	@ 0x30
                pxNetworkBuffer->pxInterface = pxEndPoint->pxNetworkInterface;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	62da      	str	r2, [r3, #44]	@ 0x2c
                vARPGenerateRequestPacket( pxNetworkBuffer );
 8007be4:	6938      	ldr	r0, [r7, #16]
 8007be6:	f000 f855 	bl	8007c94 <vARPGenerateRequestPacket>

                #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
                {
                    if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bee:	2b3b      	cmp	r3, #59	@ 0x3b
 8007bf0:	d812      	bhi.n	8007c18 <FreeRTOS_OutputARPRequest_Multi+0x7c>
                    {
                        BaseType_t xIndex;

                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bf6:	617b      	str	r3, [r7, #20]
 8007bf8:	e008      	b.n	8007c0c <FreeRTOS_OutputARPRequest_Multi+0x70>
                        {
                            pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	4413      	add	r3, r2
 8007c02:	2200      	movs	r2, #0
 8007c04:	701a      	strb	r2, [r3, #0]
                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	617b      	str	r3, [r7, #20]
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	2b3b      	cmp	r3, #59	@ 0x3b
 8007c10:	ddf3      	ble.n	8007bfa <FreeRTOS_OutputARPRequest_Multi+0x5e>
                        }

                        pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	223c      	movs	r2, #60	@ 0x3c
 8007c16:	629a      	str	r2, [r3, #40]	@ 0x28
                    }
                }
                #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

                if( xIsCallingFromIPTask() != pdFALSE )
 8007c18:	f002 ff7c 	bl	800ab14 <xIsCallingFromIPTask>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00f      	beq.n	8007c42 <FreeRTOS_OutputARPRequest_Multi+0xa6>
                {
                    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

                    /* Only the IP-task is allowed to call this function directly. */
                    if( pxEndPoint->pxNetworkInterface != NULL )
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d01b      	beq.n	8007c64 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                    {
                        ( void ) pxEndPoint->pxNetworkInterface->pfOutput( pxEndPoint->pxNetworkInterface, pxNetworkBuffer, pdTRUE );
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	f8d2 0120 	ldr.w	r0, [r2, #288]	@ 0x120
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	6939      	ldr	r1, [r7, #16]
 8007c3e:	4798      	blx	r3
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
                    }
                }
            }
        }
    }
 8007c40:	e010      	b.n	8007c64 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                    xSendEvent.eEventType = eNetworkTxEvent;
 8007c42:	2302      	movs	r3, #2
 8007c44:	723b      	strb	r3, [r7, #8]
                    xSendEvent.pvData = pxNetworkBuffer;
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	60fb      	str	r3, [r7, #12]
                    if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 8007c4a:	f107 0308 	add.w	r3, r7, #8
 8007c4e:	f04f 31ff 	mov.w	r1, #4294967295
 8007c52:	4618      	mov	r0, r3
 8007c54:	f002 f81c 	bl	8009c90 <xSendEventStructToIPTask>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d102      	bne.n	8007c64 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8007c5e:	6938      	ldr	r0, [r7, #16]
 8007c60:	f00f fef8 	bl	8017a54 <vReleaseNetworkBufferAndDescriptor>
    }
 8007c64:	bf00      	nop
 8007c66:	3718      	adds	r7, #24
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <FreeRTOS_OutputARPRequest>:
 *
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
    {
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
        /* Its assumed that IPv4 endpoints belonging to different physical interface
         * in the system will have a different subnet, but endpoints on same interface
         * may have it. */
        NetworkEndPoint_t * pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulIPAddress, 12 );
 8007c74:	210c      	movs	r1, #12
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f006 f82e 	bl	800dcd8 <FreeRTOS_FindEndPointOnNetMask>
 8007c7c:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d003      	beq.n	8007c8c <FreeRTOS_OutputARPRequest+0x20>
        {
            FreeRTOS_OutputARPRequest_Multi( pxEndPoint, ulIPAddress );
 8007c84:	6879      	ldr	r1, [r7, #4]
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f7ff ff88 	bl	8007b9c <FreeRTOS_OutputARPRequest_Multi>
        }
    }
 8007c8c:	bf00      	nop
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <vARPGenerateRequestPacket>:
 *
 * @param[in,out] pxNetworkBuffer Pointer to the buffer which has to be filled with
 *                             the ARP request packet details.
 */
    void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
        void * pvCopyDest;

        /* Buffer allocation ensures that buffers always have space
         * for an ARP packet. See buffer allocation implementations 1
         * and 2 under portable/BufferManagement. */
        configASSERT( pxNetworkBuffer != NULL );
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d104      	bne.n	8007cac <vARPGenerateRequestPacket+0x18>
 8007ca2:	f240 51b1 	movw	r1, #1457	@ 0x5b1
 8007ca6:	4828      	ldr	r0, [pc, #160]	@ (8007d48 <vARPGenerateRequestPacket+0xb4>)
 8007ca8:	f7f9 feae 	bl	8001a08 <vAssertCalled>
        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) );
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cb0:	2b29      	cmp	r3, #41	@ 0x29
 8007cb2:	d804      	bhi.n	8007cbe <vARPGenerateRequestPacket+0x2a>
 8007cb4:	f240 51b2 	movw	r1, #1458	@ 0x5b2
 8007cb8:	4823      	ldr	r0, [pc, #140]	@ (8007d48 <vARPGenerateRequestPacket+0xb4>)
 8007cba:	f7f9 fea5 	bl	8001a08 <vAssertCalled>
        configASSERT( pxNetworkBuffer->pxEndPoint != NULL );
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d104      	bne.n	8007cd0 <vARPGenerateRequestPacket+0x3c>
 8007cc6:	f240 51b3 	movw	r1, #1459	@ 0x5b3
 8007cca:	481f      	ldr	r0, [pc, #124]	@ (8007d48 <vARPGenerateRequestPacket+0xb4>)
 8007ccc:	f7f9 fe9c 	bl	8001a08 <vAssertCalled>

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxARPPacket = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd4:	617b      	str	r3, [r7, #20]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = xDefaultPartARPPacketHeader;
 8007cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8007d4c <vARPGenerateRequestPacket+0xb8>)
 8007cd8:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket;
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartARPPacketHeader ) );
 8007cde:	2226      	movs	r2, #38	@ 0x26
 8007ce0:	6939      	ldr	r1, [r7, #16]
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f01a ff7a 	bl	8022bdc <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cec:	33e8      	adds	r3, #232	@ 0xe8
 8007cee:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes;
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	3306      	adds	r3, #6
 8007cf4:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8007cf6:	2206      	movs	r2, #6
 8007cf8:	6939      	ldr	r1, [r7, #16]
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f01a ff6e 	bl	8022bdc <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d04:	33e8      	adds	r3, #232	@ 0xe8
 8007d06:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes;
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	3316      	adds	r3, #22
 8007d0c:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8007d0e:	2206      	movs	r2, #6
 8007d10:	6939      	ldr	r1, [r7, #16]
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f01a ff62 	bl	8022bdc <memcpy>

        pvCopySource = &( pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress );
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d1c:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xARPHeader.ucSenderProtocolAddress;
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	331c      	adds	r3, #28
 8007d22:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	461a      	mov	r2, r3
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	601a      	str	r2, [r3, #0]
        pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	695a      	ldr	r2, [r3, #20]
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26

        pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	222a      	movs	r2, #42	@ 0x2a
 8007d3c:	629a      	str	r2, [r3, #40]	@ 0x28

        iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );
    }
 8007d3e:	bf00      	nop
 8007d40:	3718      	adds	r7, #24
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	08024c84 	.word	0x08024c84
 8007d4c:	08027ef4 	.word	0x08027ef4

08007d50 <FreeRTOS_ClearARP>:
 * @brief A call to this function will clear the ARP cache.
 * @param[in] pxEndPoint only clean entries with this end-point, or when NULL,
 *                        clear the entire ARP cache.
 */
void FreeRTOS_ClearARP( const struct xNetworkEndPoint * pxEndPoint )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
    if( pxEndPoint != NULL )
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d01b      	beq.n	8007d96 <FreeRTOS_ClearARP+0x46>
    {
        BaseType_t x;

        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007d5e:	2300      	movs	r3, #0
 8007d60:	60fb      	str	r3, [r7, #12]
 8007d62:	e014      	b.n	8007d8e <FreeRTOS_ClearARP+0x3e>
        {
            if( xARPCache[ x ].pxEndPoint == pxEndPoint )
 8007d64:	4a10      	ldr	r2, [pc, #64]	@ (8007da8 <FreeRTOS_ClearARP+0x58>)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	011b      	lsls	r3, r3, #4
 8007d6a:	4413      	add	r3, r2
 8007d6c:	330c      	adds	r3, #12
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d108      	bne.n	8007d88 <FreeRTOS_ClearARP+0x38>
            {
                ( void ) memset( &( xARPCache[ x ] ), 0, sizeof( ARPCacheRow_t ) );
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	011b      	lsls	r3, r3, #4
 8007d7a:	4a0b      	ldr	r2, [pc, #44]	@ (8007da8 <FreeRTOS_ClearARP+0x58>)
 8007d7c:	4413      	add	r3, r2
 8007d7e:	2210      	movs	r2, #16
 8007d80:	2100      	movs	r1, #0
 8007d82:	4618      	mov	r0, r3
 8007d84:	f01b f837 	bl	8022df6 <memset>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	60fb      	str	r3, [r7, #12]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2b05      	cmp	r3, #5
 8007d92:	dde7      	ble.n	8007d64 <FreeRTOS_ClearARP+0x14>
    }
    else
    {
        ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
    }
}
 8007d94:	e004      	b.n	8007da0 <FreeRTOS_ClearARP+0x50>
        ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
 8007d96:	2260      	movs	r2, #96	@ 0x60
 8007d98:	2100      	movs	r1, #0
 8007d9a:	4803      	ldr	r0, [pc, #12]	@ (8007da8 <FreeRTOS_ClearARP+0x58>)
 8007d9c:	f01b f82b 	bl	8022df6 <memset>
}
 8007da0:	bf00      	nop
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	20000f64 	.word	0x20000f64

08007dac <vDNSInitialise>:
    #if ( ipconfigDNS_USE_CALLBACKS == 1 )

/** @brief Initialise the list of call-back structures.
 */
        void vDNSInitialise( void )
        {
 8007dac:	b580      	push	{r7, lr}
 8007dae:	af00      	add	r7, sp, #0
            vDNSCallbackInitialise();
 8007db0:	f000 fc8a 	bl	80086c8 <vDNSCallbackInitialise>
        }
 8007db4:	bf00      	nop
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <pxNew_AddrInfo>:
 * @return A pointer to the newly allocated struct, or NULL in case malloc failed..
 */
    struct freertos_addrinfo * pxNew_AddrInfo( const char * pcName,
                                               BaseType_t xFamily,
                                               const uint8_t * pucAddress )
    {
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b088      	sub	sp, #32
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	607a      	str	r2, [r7, #4]
        struct freertos_addrinfo * pxAddrInfo = NULL;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	61fb      	str	r3, [r7, #28]
        void * pvBuffer;

        /* 'xFamily' might not be used when IPv6 is disabled. */
        ( void ) xFamily;
        pvBuffer = pvPortMalloc( sizeof( *pxAddrInfo ) );
 8007dc8:	2048      	movs	r0, #72	@ 0x48
 8007dca:	f7fe fdeb 	bl	80069a4 <pvPortMalloc>
 8007dce:	61b8      	str	r0, [r7, #24]

        if( pvBuffer != NULL )
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d057      	beq.n	8007e86 <pxNew_AddrInfo+0xce>
        {
            pxAddrInfo = ( struct freertos_addrinfo * ) pvBuffer;
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	61fb      	str	r3, [r7, #28]

            ( void ) memset( pxAddrInfo, 0, sizeof( *pxAddrInfo ) );
 8007dda:	2248      	movs	r2, #72	@ 0x48
 8007ddc:	2100      	movs	r1, #0
 8007dde:	69f8      	ldr	r0, [r7, #28]
 8007de0:	f01b f809 	bl	8022df6 <memset>
            #if ( ipconfigUSE_DNS_CACHE != 0 )
                pxAddrInfo->ai_canonname = pxAddrInfo->xPrivateStorage.ucName;
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	619a      	str	r2, [r3, #24]
                ( void ) strncpy( pxAddrInfo->xPrivateStorage.ucName, pcName, sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U );
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	3338      	adds	r3, #56	@ 0x38
 8007df2:	220f      	movs	r2, #15
 8007df4:	68f9      	ldr	r1, [r7, #12]
 8007df6:	4618      	mov	r0, r3
 8007df8:	f01b fedc 	bl	8023bb4 <strncpy>
                pxAddrInfo->xPrivateStorage.ucName[ sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U ] = '\0';
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
            #endif /* (ipconfigUSE_DNS_CACHE != 0 ) */

            pxAddrInfo->ai_addr = ( ( struct freertos_sockaddr * ) &( pxAddrInfo->xPrivateStorage.sockaddr ) );
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	f103 0220 	add.w	r2, r3, #32
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	615a      	str	r2, [r3, #20]

            switch( xFamily )
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d003      	beq.n	8007e1c <pxNew_AddrInfo+0x64>
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	2b0a      	cmp	r3, #10
 8007e18:	d01e      	beq.n	8007e58 <pxNew_AddrInfo+0xa0>
 8007e1a:	e02b      	b.n	8007e74 <pxNew_AddrInfo+0xbc>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                       {
                           /* ulChar2u32 reads from big-endian to host-endian. */
                           uint32_t ulIPAddress = ulChar2u32( pucAddress );
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f003 f87d 	bl	800af1c <ulChar2u32>
 8007e22:	6178      	str	r0, [r7, #20]
                           /* Translate to network-endian. */
                           pxAddrInfo->ai_addr->sin_address.ulIP_IPv4 = FreeRTOS_htonl( ulIPAddress );
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	061a      	lsls	r2, r3, #24
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	021b      	lsls	r3, r3, #8
 8007e2c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007e30:	431a      	orrs	r2, r3
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	0a1b      	lsrs	r3, r3, #8
 8007e36:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007e3a:	ea42 0103 	orr.w	r1, r2, r3
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	0e1a      	lsrs	r2, r3, #24
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	695b      	ldr	r3, [r3, #20]
 8007e46:	430a      	orrs	r2, r1
 8007e48:	609a      	str	r2, [r3, #8]
                           pxAddrInfo->ai_family = FREERTOS_AF_INET4;
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	2202      	movs	r2, #2
 8007e4e:	605a      	str	r2, [r3, #4]
                           pxAddrInfo->ai_addrlen = ipSIZE_OF_IPv4_ADDRESS;
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	2204      	movs	r2, #4
 8007e54:	611a      	str	r2, [r3, #16]
                       }
                       break;
 8007e56:	e016      	b.n	8007e86 <pxNew_AddrInfo+0xce>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        pxAddrInfo->ai_family = FREERTOS_AF_INET6;
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	220a      	movs	r2, #10
 8007e5c:	605a      	str	r2, [r3, #4]
                        pxAddrInfo->ai_addrlen = ipSIZE_OF_IPv6_ADDRESS;
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	2210      	movs	r2, #16
 8007e62:	611a      	str	r2, [r3, #16]
                        ( void ) memcpy( pxAddrInfo->xPrivateStorage.sockaddr.sin_address.xIP_IPv6.ucBytes, pucAddress, ipSIZE_OF_IPv6_ADDRESS );
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	3328      	adds	r3, #40	@ 0x28
 8007e68:	2210      	movs	r2, #16
 8007e6a:	6879      	ldr	r1, [r7, #4]
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f01a feb5 	bl	8022bdc <memcpy>
                        break;
 8007e72:	e008      	b.n	8007e86 <pxNew_AddrInfo+0xce>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "pxNew_AddrInfo: Undefined xFamily Type \n" ) );
 8007e74:	4806      	ldr	r0, [pc, #24]	@ (8007e90 <pxNew_AddrInfo+0xd8>)
 8007e76:	f01a fc95 	bl	80227a4 <lUDPLoggingPrintf>

                    vPortFree( pvBuffer );
 8007e7a:	69b8      	ldr	r0, [r7, #24]
 8007e7c:	f7fe fe66 	bl	8006b4c <vPortFree>
                    pxAddrInfo = NULL;
 8007e80:	2300      	movs	r3, #0
 8007e82:	61fb      	str	r3, [r7, #28]

                    break;
 8007e84:	bf00      	nop
            }
        }

        return pxAddrInfo;
 8007e86:	69fb      	ldr	r3, [r7, #28]
    }
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3720      	adds	r7, #32
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	08024d28 	.word	0x08024d28

08007e94 <FreeRTOS_freeaddrinfo>:
/**
 * @brief Free a chain of structs of type 'freertos_addrinfo'.
 * @param[in] pxInfo The first find result.
 */
    void FreeRTOS_freeaddrinfo( struct freertos_addrinfo * pxInfo )
    {
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
        struct freertos_addrinfo * pxNext;
        struct freertos_addrinfo * pxIterator = pxInfo;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	60fb      	str	r3, [r7, #12]

        if( pxInfo != NULL )
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00b      	beq.n	8007ebe <FreeRTOS_freeaddrinfo+0x2a>
        {
            while( pxIterator != NULL )
 8007ea6:	e007      	b.n	8007eb8 <FreeRTOS_freeaddrinfo+0x24>
            {
                pxNext = pxIterator->ai_next;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	69db      	ldr	r3, [r3, #28]
 8007eac:	60bb      	str	r3, [r7, #8]
                vPortFree( pxIterator );
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f7fe fe4c 	bl	8006b4c <vPortFree>
                pxIterator = pxNext;
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	60fb      	str	r3, [r7, #12]
            while( pxIterator != NULL )
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1f4      	bne.n	8007ea8 <FreeRTOS_freeaddrinfo+0x14>
            }
        }
    }
 8007ebe:	bf00      	nop
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <ulDNSHandlePacket>:
 * @param[in] pxNetworkBuffer The network buffer to be parsed.
 * @return Always pdFAIL to indicate that the packet was not consumed and must
 *         be released by the caller.
 */
    uint32_t ulDNSHandlePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b088      	sub	sp, #32
 8007eca:	af02      	add	r7, sp, #8
 8007ecc:	6078      	str	r0, [r7, #4]
        uint8_t * pucPayLoadBuffer;
        size_t uxPayloadSize;
        size_t uxUDPPacketSize = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f002 fa92 	bl	800a3f8 <uxIPHeaderSizePacket>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	3316      	adds	r3, #22
 8007ed8:	617b      	str	r3, [r7, #20]

        /* Only proceed if the payload length indicated in the header
         * appears to be valid. */
        if( pxNetworkBuffer->xDataLength >= uxUDPPacketSize )
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d829      	bhi.n	8007f38 <ulDNSHandlePacket+0x72>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - uxUDPPacketSize;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	1ad3      	subs	r3, r2, r3
 8007eec:	613b      	str	r3, [r7, #16]

            if( uxPayloadSize >= sizeof( DNSMessage_t ) )
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	2b0b      	cmp	r3, #11
 8007ef2:	d921      	bls.n	8007f38 <ulDNSHandlePacket+0x72>
            {
                struct freertos_addrinfo * pxAddressInfo = NULL;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	60bb      	str	r3, [r7, #8]
                pucPayLoadBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPPacketSize ] );
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	4413      	add	r3, r2
 8007f00:	60fb      	str	r3, [r7, #12]
                /* The parameter pdFALSE indicates that the reply was not expected. */
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
                                            uxPayloadSize,
                                            &( pxAddressInfo ),
                                            pdFALSE,
                                            FreeRTOS_ntohs( pxNetworkBuffer->usPort ) );
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8007f06:	021b      	lsls	r3, r3, #8
 8007f08:	b21a      	sxth	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8007f0e:	0a1b      	lsrs	r3, r3, #8
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	b21b      	sxth	r3, r3
 8007f14:	4313      	orrs	r3, r2
 8007f16:	b21b      	sxth	r3, r3
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	f107 0208 	add.w	r2, r7, #8
 8007f1e:	9300      	str	r3, [sp, #0]
 8007f20:	2300      	movs	r3, #0
 8007f22:	6939      	ldr	r1, [r7, #16]
 8007f24:	68f8      	ldr	r0, [r7, #12]
 8007f26:	f000 fcb5 	bl	8008894 <DNS_ParseDNSReply>

                if( pxAddressInfo != NULL )
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d003      	beq.n	8007f38 <ulDNSHandlePacket+0x72>
                {
                    FreeRTOS_freeaddrinfo( pxAddressInfo );
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7ff ffae 	bl	8007e94 <FreeRTOS_freeaddrinfo>
                }
            }
        }

        /* The packet was not consumed. */
        return pdFAIL;
 8007f38:	2300      	movs	r3, #0
    }
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3718      	adds	r7, #24
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <FreeRTOS_dns_update>:
    BaseType_t FreeRTOS_dns_update( const char * pcName,
                                    IPv46_Address_t * pxIP,
                                    uint32_t ulTTL,
                                    BaseType_t xLookUp,
                                    struct freertos_addrinfo ** ppxAddressInfo )
    {
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b086      	sub	sp, #24
 8007f46:	af02      	add	r7, sp, #8
 8007f48:	60f8      	str	r0, [r7, #12]
 8007f4a:	60b9      	str	r1, [r7, #8]
 8007f4c:	607a      	str	r2, [r7, #4]
 8007f4e:	603b      	str	r3, [r7, #0]
        /* _HT_ we can as well remove the parameter 'xLookUp'. */
        ( void ) xLookUp;
        ( void ) FreeRTOS_ProcessDNSCache( pcName,
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	2300      	movs	r3, #0
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	68b9      	ldr	r1, [r7, #8]
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f000 f818 	bl	8007f90 <FreeRTOS_ProcessDNSCache>
                                           pxIP,
                                           ulTTL,
                                           pdFALSE,
                                           ppxAddressInfo );
        return pdTRUE;
 8007f60:	2301      	movs	r3, #1
    }
 8007f62:	4618      	mov	r0, r3
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
	...

08007f6c <FreeRTOS_dnsclear>:
/**
 * @brief perform a dns clear in the local cache
 * @post the global structure \a xDNSCache is modified
 */
    void FreeRTOS_dnsclear( void )
    {
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	af00      	add	r7, sp, #0
        ( void ) memset( xDNSCache, 0x0, sizeof( xDNSCache ) );
 8007f70:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 8007f74:	2100      	movs	r1, #0
 8007f76:	4804      	ldr	r0, [pc, #16]	@ (8007f88 <FreeRTOS_dnsclear+0x1c>)
 8007f78:	f01a ff3d 	bl	8022df6 <memset>
        uxFreeEntry = 0U;
 8007f7c:	4b03      	ldr	r3, [pc, #12]	@ (8007f8c <FreeRTOS_dnsclear+0x20>)
 8007f7e:	2200      	movs	r2, #0
 8007f80:	601a      	str	r2, [r3, #0]
    }
 8007f82:	bf00      	nop
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	20000fd4 	.word	0x20000fd4
 8007f8c:	20001184 	.word	0x20001184

08007f90 <FreeRTOS_ProcessDNSCache>:
    BaseType_t FreeRTOS_ProcessDNSCache( const char * pcName,
                                         IPv46_Address_t * pxIP,
                                         uint32_t ulTTL,
                                         BaseType_t xLookUp,
                                         struct freertos_addrinfo ** ppxAddressInfo )
    {
 8007f90:	b590      	push	{r4, r7, lr}
 8007f92:	b09b      	sub	sp, #108	@ 0x6c
 8007f94:	af02      	add	r7, sp, #8
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
 8007f9c:	603b      	str	r3, [r7, #0]
        UBaseType_t uxIndex;
        BaseType_t xResult;
        /* Get the current time in clock-ticks. */
        TickType_t xCurrentTickCount = xTaskGetTickCount();
 8007f9e:	f7fc fe97 	bl	8004cd0 <xTaskGetTickCount>
 8007fa2:	65b8      	str	r0, [r7, #88]	@ 0x58
        /* In milliseconds. */
        uint32_t ulCurrentTimeSeconds;

        configASSERT( ( pcName != NULL ) );
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d103      	bne.n	8007fb2 <FreeRTOS_ProcessDNSCache+0x22>
 8007faa:	21d8      	movs	r1, #216	@ 0xd8
 8007fac:	4841      	ldr	r0, [pc, #260]	@ (80080b4 <FreeRTOS_ProcessDNSCache+0x124>)
 8007fae:	f7f9 fd2b 	bl	8001a08 <vAssertCalled>

        if( xLookUp != pdFALSE )
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d002      	beq.n	8007fbe <FreeRTOS_ProcessDNSCache+0x2e>
        {
            pxIP->xIPAddress.ulIP_IPv4 = 0U;
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	601a      	str	r2, [r3, #0]
        }

        ulCurrentTimeSeconds = ( uint32_t ) ( ( xCurrentTickCount / portTICK_PERIOD_MS ) / 1000U );
 8007fbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007fc0:	4a3d      	ldr	r2, [pc, #244]	@ (80080b8 <FreeRTOS_ProcessDNSCache+0x128>)
 8007fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fc6:	099b      	lsrs	r3, r3, #6
 8007fc8:	657b      	str	r3, [r7, #84]	@ 0x54
        xResult = prvFindEntryIndex( pcName, pxIP, &uxIndex );
 8007fca:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8007fce:	461a      	mov	r2, r3
 8007fd0:	68b9      	ldr	r1, [r7, #8]
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	f000 f87a 	bl	80080cc <prvFindEntryIndex>
 8007fd8:	6538      	str	r0, [r7, #80]	@ 0x50

        if( xResult == pdTRUE )
 8007fda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d110      	bne.n	8008002 <FreeRTOS_ProcessDNSCache+0x72>
        { /* Element found */
            /* Is this function called for a lookup or to add/update an IP address? */
            if( xLookUp == pdTRUE )
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d106      	bne.n	8007ff4 <FreeRTOS_ProcessDNSCache+0x64>
            {
                /* This statement can only be reached when xResult is true; which
                 * implies that the entry is present and a 'get' operation will result
                 * in success. Therefore, it is safe to ignore the return value of the
                 * below function. */
                ( void ) prvGetCacheIPEntry( uxIndex,
 8007fe6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007fe8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007fea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007fec:	68b9      	ldr	r1, [r7, #8]
 8007fee:	f000 f8b1 	bl	8008154 <prvGetCacheIPEntry>
 8007ff2:	e013      	b.n	800801c <FreeRTOS_ProcessDNSCache+0x8c>
                                             ulCurrentTimeSeconds,
                                             ppxAddressInfo );
            }
            else
            {
                prvUpdateCacheEntry( uxIndex,
 8007ff4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	6879      	ldr	r1, [r7, #4]
 8007ffc:	f000 f94a 	bl	8008294 <prvUpdateCacheEntry>
 8008000:	e00c      	b.n	800801c <FreeRTOS_ProcessDNSCache+0x8c>
                                     ulCurrentTimeSeconds );
            }
        }
        else /* Element not Found xResult = pdFALSE */
        {
            if( xLookUp == pdTRUE )
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d103      	bne.n	8008010 <FreeRTOS_ProcessDNSCache+0x80>
            {
                pxIP->xIPAddress.ulIP_IPv4 = 0U;
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	2200      	movs	r2, #0
 800800c:	601a      	str	r2, [r3, #0]
 800800e:	e005      	b.n	800801c <FreeRTOS_ProcessDNSCache+0x8c>
            }
            else
            {
                prvInsertCacheEntry( pcName,
 8008010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	6879      	ldr	r1, [r7, #4]
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	f000 f994 	bl	8008344 <prvInsertCacheEntry>
                                     ulCurrentTimeSeconds );
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            if( ( xLookUp == pdFALSE ) || ( pxIP->xIPAddress.ulIP_IPv4 != 0U ) )
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d003      	beq.n	800802a <FreeRTOS_ProcessDNSCache+0x9a>
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d03f      	beq.n	80080aa <FreeRTOS_ProcessDNSCache+0x11a>
            {
                char pcAddress[ 40 ];
                IP_Address_t xAddress;
                BaseType_t xFamily = FREERTOS_AF_INET;
 800802a:	2302      	movs	r3, #2
 800802c:	65fb      	str	r3, [r7, #92]	@ 0x5c

                switch( pxIP->xIs_IPv6 )
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00c      	beq.n	8008050 <FreeRTOS_ProcessDNSCache+0xc0>
 8008036:	2b01      	cmp	r3, #1
 8008038:	d10e      	bne.n	8008058 <FreeRTOS_ProcessDNSCache+0xc8>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case pdTRUE:
                            ( void ) memcpy( xAddress.xIP_IPv6.ucBytes, pxIP->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8008040:	6818      	ldr	r0, [r3, #0]
 8008042:	6859      	ldr	r1, [r3, #4]
 8008044:	689a      	ldr	r2, [r3, #8]
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            xFamily = FREERTOS_AF_INET6;
 800804a:	230a      	movs	r3, #10
 800804c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                            break;
 800804e:	e007      	b.n	8008060 <FreeRTOS_ProcessDNSCache+0xd0>
                    #endif /* if ( ipconfigUSE_IPv6 != 0 ) */

                    #if ( ipconfigUSE_IPv4 != 0 )
                        case pdFALSE:
                            xAddress.ulIP_IPv4 = pxIP->xIPAddress.ulIP_IPv4;
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	63fb      	str	r3, [r7, #60]	@ 0x3c
                            break;
 8008056:	e003      	b.n	8008060 <FreeRTOS_ProcessDNSCache+0xd0>
                    #endif /* if ( ipconfigUSE_IPv4 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        FreeRTOS_debug_printf( ( "FreeRTOS_ProcessDNSCache: Undefined IP Type \n" ) );
 8008058:	4818      	ldr	r0, [pc, #96]	@ (80080bc <FreeRTOS_ProcessDNSCache+0x12c>)
 800805a:	f01a fba3 	bl	80227a4 <lUDPLoggingPrintf>
                        break;
 800805e:	bf00      	nop
                }

                ( void ) FreeRTOS_inet_ntop( xFamily,
 8008060:	f107 0214 	add.w	r2, r7, #20
 8008064:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8008068:	2328      	movs	r3, #40	@ 0x28
 800806a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800806c:	f007 fc62 	bl	800f934 <FreeRTOS_inet_ntop>
                                             ( const void * ) xAddress.xIP_IPv6.ucBytes,
                                             pcAddress,
                                             ( socklen_t ) sizeof( pcAddress ) );
                FreeRTOS_debug_printf( ( "FreeRTOS_ProcessDNSCache: %s: '%s' @ %s (TTL %u)\n",
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d001      	beq.n	800807a <FreeRTOS_ProcessDNSCache+0xea>
 8008076:	4912      	ldr	r1, [pc, #72]	@ (80080c0 <FreeRTOS_ProcessDNSCache+0x130>)
 8008078:	e000      	b.n	800807c <FreeRTOS_ProcessDNSCache+0xec>
 800807a:	4912      	ldr	r1, [pc, #72]	@ (80080c4 <FreeRTOS_ProcessDNSCache+0x134>)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	061a      	lsls	r2, r3, #24
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	021b      	lsls	r3, r3, #8
 8008084:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008088:	431a      	orrs	r2, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	0a1b      	lsrs	r3, r3, #8
 800808e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008092:	431a      	orrs	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	0e1b      	lsrs	r3, r3, #24
 8008098:	4313      	orrs	r3, r2
 800809a:	f107 0214 	add.w	r2, r7, #20
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	4613      	mov	r3, r2
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	4808      	ldr	r0, [pc, #32]	@ (80080c8 <FreeRTOS_ProcessDNSCache+0x138>)
 80080a6:	f01a fb7d 	bl	80227a4 <lUDPLoggingPrintf>
                                         pcAddress,
                                         ( unsigned ) FreeRTOS_ntohl( ulTTL ) ) );
            }
        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

        return xResult;
 80080aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
    }
 80080ac:	4618      	mov	r0, r3
 80080ae:	3764      	adds	r7, #100	@ 0x64
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd90      	pop	{r4, r7, pc}
 80080b4:	08024fa4 	.word	0x08024fa4
 80080b8:	10624dd3 	.word	0x10624dd3
 80080bc:	08024fd8 	.word	0x08024fd8
 80080c0:	08025008 	.word	0x08025008
 80080c4:	08025010 	.word	0x08025010
 80080c8:	08025014 	.word	0x08025014

080080cc <prvFindEntryIndex>:
 * @returns res pdTRUE if index in found else pdFALSE
 */
    static BaseType_t prvFindEntryIndex( const char * pcName,
                                         const IPv46_Address_t * pxIP,
                                         UBaseType_t * uxResult )
    {
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b086      	sub	sp, #24
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 80080d8:	2300      	movs	r3, #0
 80080da:	617b      	str	r3, [r7, #20]
        UBaseType_t uxIndex;

        /* For each entry in the DNS cache table. */
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 80080dc:	2300      	movs	r3, #0
 80080de:	613b      	str	r3, [r7, #16]
 80080e0:	e02d      	b.n	800813e <prvFindEntryIndex+0x72>
        {
            if( xDNSCache[ uxIndex ].pcName[ 0 ] == ( char ) 0 )
 80080e2:	4a1b      	ldr	r2, [pc, #108]	@ (8008150 <prvFindEntryIndex+0x84>)
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	216c      	movs	r1, #108	@ 0x6c
 80080e8:	fb01 f303 	mul.w	r3, r1, r3
 80080ec:	4413      	add	r3, r2
 80080ee:	3350      	adds	r3, #80	@ 0x50
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d01f      	beq.n	8008136 <prvFindEntryIndex+0x6a>
            { /* empty slot */
                continue;
            }

            if( strcmp( xDNSCache[ uxIndex ].pcName, pcName ) == 0 )
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	226c      	movs	r2, #108	@ 0x6c
 80080fa:	fb02 f303 	mul.w	r3, r2, r3
 80080fe:	3350      	adds	r3, #80	@ 0x50
 8008100:	4a13      	ldr	r2, [pc, #76]	@ (8008150 <prvFindEntryIndex+0x84>)
 8008102:	4413      	add	r3, r2
 8008104:	68f9      	ldr	r1, [r7, #12]
 8008106:	4618      	mov	r0, r3
 8008108:	f7f8 f8ea 	bl	80002e0 <strcmp>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d112      	bne.n	8008138 <prvFindEntryIndex+0x6c>
            { /* hostname found */
                /* IPv6 is enabled, See if the cache entry has the correct type. */
                if( pxIP->xIs_IPv6 == xDNSCache[ uxIndex ].xAddresses[ 0 ].xIs_IPv6 )
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	691a      	ldr	r2, [r3, #16]
 8008116:	490e      	ldr	r1, [pc, #56]	@ (8008150 <prvFindEntryIndex+0x84>)
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	206c      	movs	r0, #108	@ 0x6c
 800811c:	fb00 f303 	mul.w	r3, r0, r3
 8008120:	440b      	add	r3, r1
 8008122:	3310      	adds	r3, #16
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	429a      	cmp	r2, r3
 8008128:	d106      	bne.n	8008138 <prvFindEntryIndex+0x6c>
                {
                    xReturn = pdTRUE;
 800812a:	2301      	movs	r3, #1
 800812c:	617b      	str	r3, [r7, #20]
                    *uxResult = uxIndex;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	693a      	ldr	r2, [r7, #16]
 8008132:	601a      	str	r2, [r3, #0]
                    break;
 8008134:	e006      	b.n	8008144 <prvFindEntryIndex+0x78>
                continue;
 8008136:	bf00      	nop
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	3301      	adds	r3, #1
 800813c:	613b      	str	r3, [r7, #16]
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	2b03      	cmp	r3, #3
 8008142:	d9ce      	bls.n	80080e2 <prvFindEntryIndex+0x16>
                }
            }
        }

        return xReturn;
 8008144:	697b      	ldr	r3, [r7, #20]
    }
 8008146:	4618      	mov	r0, r3
 8008148:	3718      	adds	r7, #24
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	20000fd4 	.word	0x20000fd4

08008154 <prvGetCacheIPEntry>:

    static BaseType_t prvGetCacheIPEntry( UBaseType_t uxIndex,
                                          IPv46_Address_t * pxIP,
                                          uint32_t ulCurrentTimeSeconds,
                                          struct freertos_addrinfo ** ppxAddressInfo )
    {
 8008154:	b580      	push	{r7, lr}
 8008156:	b088      	sub	sp, #32
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
 8008160:	603b      	str	r3, [r7, #0]
        BaseType_t isRead;
        uint32_t ulIPAddressIndex = 0;
 8008162:	2300      	movs	r3, #0
 8008164:	61bb      	str	r3, [r7, #24]
        uint32_t ulAge = ulCurrentTimeSeconds - xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds;
 8008166:	4a4a      	ldr	r2, [pc, #296]	@ (8008290 <prvGetCacheIPEntry+0x13c>)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	216c      	movs	r1, #108	@ 0x6c
 800816c:	fb01 f303 	mul.w	r3, r1, r3
 8008170:	4413      	add	r3, r2
 8008172:	3364      	adds	r3, #100	@ 0x64
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	617b      	str	r3, [r7, #20]

        /* Confirm that the record is still fresh.
         * The field ulTTL was stored as network-endian. */
        if( ulAge < FreeRTOS_ntohl( xDNSCache[ uxIndex ].ulTTL ) )
 800817c:	4a44      	ldr	r2, [pc, #272]	@ (8008290 <prvGetCacheIPEntry+0x13c>)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	216c      	movs	r1, #108	@ 0x6c
 8008182:	fb01 f303 	mul.w	r3, r1, r3
 8008186:	4413      	add	r3, r2
 8008188:	3360      	adds	r3, #96	@ 0x60
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	061a      	lsls	r2, r3, #24
 800818e:	4940      	ldr	r1, [pc, #256]	@ (8008290 <prvGetCacheIPEntry+0x13c>)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	206c      	movs	r0, #108	@ 0x6c
 8008194:	fb00 f303 	mul.w	r3, r0, r3
 8008198:	440b      	add	r3, r1
 800819a:	3360      	adds	r3, #96	@ 0x60
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	021b      	lsls	r3, r3, #8
 80081a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80081a4:	431a      	orrs	r2, r3
 80081a6:	493a      	ldr	r1, [pc, #232]	@ (8008290 <prvGetCacheIPEntry+0x13c>)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	206c      	movs	r0, #108	@ 0x6c
 80081ac:	fb00 f303 	mul.w	r3, r0, r3
 80081b0:	440b      	add	r3, r1
 80081b2:	3360      	adds	r3, #96	@ 0x60
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	0a1b      	lsrs	r3, r3, #8
 80081b8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80081bc:	431a      	orrs	r2, r3
 80081be:	4934      	ldr	r1, [pc, #208]	@ (8008290 <prvGetCacheIPEntry+0x13c>)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	206c      	movs	r0, #108	@ 0x6c
 80081c4:	fb00 f303 	mul.w	r3, r0, r3
 80081c8:	440b      	add	r3, r1
 80081ca:	3360      	adds	r3, #96	@ 0x60
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	0e1b      	lsrs	r3, r3, #24
 80081d0:	4313      	orrs	r3, r2
 80081d2:	697a      	ldr	r2, [r7, #20]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d24a      	bcs.n	800826e <prvGetCacheIPEntry+0x11a>
                /*  modulo it by the number of IP addresses to keep it in range.     */
                /*  Also perform a final modulo by the max number of IP addresses    */
                /*  per DNS cache entry to prevent out-of-bounds access in the event */
                /*  that ucNumIPAddresses has been corrupted.                        */

                ucIndex = xDNSCache[ uxIndex ].ucCurrentIPAddress % xDNSCache[ uxIndex ].ucNumIPAddresses;
 80081d8:	4a2d      	ldr	r2, [pc, #180]	@ (8008290 <prvGetCacheIPEntry+0x13c>)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	216c      	movs	r1, #108	@ 0x6c
 80081de:	fb01 f303 	mul.w	r3, r1, r3
 80081e2:	4413      	add	r3, r2
 80081e4:	3369      	adds	r3, #105	@ 0x69
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	4929      	ldr	r1, [pc, #164]	@ (8008290 <prvGetCacheIPEntry+0x13c>)
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	206c      	movs	r0, #108	@ 0x6c
 80081ee:	fb00 f202 	mul.w	r2, r0, r2
 80081f2:	440a      	add	r2, r1
 80081f4:	3268      	adds	r2, #104	@ 0x68
 80081f6:	7812      	ldrb	r2, [r2, #0]
 80081f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80081fc:	fb01 f202 	mul.w	r2, r1, r2
 8008200:	1a9b      	subs	r3, r3, r2
 8008202:	74fb      	strb	r3, [r7, #19]
                ucIndex = ucIndex % ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 8008204:	7cfb      	ldrb	r3, [r7, #19]
 8008206:	f003 0303 	and.w	r3, r3, #3
 800820a:	74fb      	strb	r3, [r7, #19]
                ulIPAddressIndex = ucIndex;
 800820c:	7cfb      	ldrb	r3, [r7, #19]
 800820e:	61bb      	str	r3, [r7, #24]

                xDNSCache[ uxIndex ].ucCurrentIPAddress++;
 8008210:	4a1f      	ldr	r2, [pc, #124]	@ (8008290 <prvGetCacheIPEntry+0x13c>)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	216c      	movs	r1, #108	@ 0x6c
 8008216:	fb01 f303 	mul.w	r3, r1, r3
 800821a:	4413      	add	r3, r2
 800821c:	3369      	adds	r3, #105	@ 0x69
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	3301      	adds	r3, #1
 8008222:	b2d8      	uxtb	r0, r3
 8008224:	4a1a      	ldr	r2, [pc, #104]	@ (8008290 <prvGetCacheIPEntry+0x13c>)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	216c      	movs	r1, #108	@ 0x6c
 800822a:	fb01 f303 	mul.w	r3, r1, r3
 800822e:	4413      	add	r3, r2
 8008230:	3369      	adds	r3, #105	@ 0x69
 8008232:	4602      	mov	r2, r0
 8008234:	701a      	strb	r2, [r3, #0]
            #endif /* if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

            ( void ) memcpy( pxIP, &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), sizeof( *pxIP ) );
 8008236:	69ba      	ldr	r2, [r7, #24]
 8008238:	4613      	mov	r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	4413      	add	r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	216c      	movs	r1, #108	@ 0x6c
 8008244:	fb01 f202 	mul.w	r2, r1, r2
 8008248:	4413      	add	r3, r2
 800824a:	4a11      	ldr	r2, [pc, #68]	@ (8008290 <prvGetCacheIPEntry+0x13c>)
 800824c:	4413      	add	r3, r2
 800824e:	2214      	movs	r2, #20
 8008250:	4619      	mov	r1, r3
 8008252:	68b8      	ldr	r0, [r7, #8]
 8008254:	f01a fcc2 	bl	8022bdc <memcpy>
            isRead = pdTRUE;
 8008258:	2301      	movs	r3, #1
 800825a:	61fb      	str	r3, [r7, #28]

            if( ppxAddressInfo != NULL )
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d010      	beq.n	8008284 <prvGetCacheIPEntry+0x130>
            {
                /* Copy all entries from position 'uxIndex' to a linked struct addrinfo. */
                prvReadDNSCache( ( BaseType_t ) uxIndex, ppxAddressInfo );
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6839      	ldr	r1, [r7, #0]
 8008266:	4618      	mov	r0, r3
 8008268:	f000 f8dc 	bl	8008424 <prvReadDNSCache>
 800826c:	e00a      	b.n	8008284 <prvGetCacheIPEntry+0x130>
            }
        }
        else
        {
            /* Age out the old cached record. */
            xDNSCache[ uxIndex ].pcName[ 0 ] = ( char ) 0;
 800826e:	4a08      	ldr	r2, [pc, #32]	@ (8008290 <prvGetCacheIPEntry+0x13c>)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	216c      	movs	r1, #108	@ 0x6c
 8008274:	fb01 f303 	mul.w	r3, r1, r3
 8008278:	4413      	add	r3, r2
 800827a:	3350      	adds	r3, #80	@ 0x50
 800827c:	2200      	movs	r2, #0
 800827e:	701a      	strb	r2, [r3, #0]
            isRead = pdFALSE;
 8008280:	2300      	movs	r3, #0
 8008282:	61fb      	str	r3, [r7, #28]
        }

        return isRead;
 8008284:	69fb      	ldr	r3, [r7, #28]
    }
 8008286:	4618      	mov	r0, r3
 8008288:	3720      	adds	r7, #32
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	20000fd4 	.word	0x20000fd4

08008294 <prvUpdateCacheEntry>:
 */
    static void prvUpdateCacheEntry( UBaseType_t uxIndex,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 8008294:	b580      	push	{r7, lr}
 8008296:	b086      	sub	sp, #24
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
 80082a0:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddressIndex = 0;
 80082a2:	2300      	movs	r3, #0
 80082a4:	617b      	str	r3, [r7, #20]

        #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
            if( xDNSCache[ uxIndex ].ucNumIPAddresses <
 80082a6:	4a26      	ldr	r2, [pc, #152]	@ (8008340 <prvUpdateCacheEntry+0xac>)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	216c      	movs	r1, #108	@ 0x6c
 80082ac:	fb01 f303 	mul.w	r3, r1, r3
 80082b0:	4413      	add	r3, r2
 80082b2:	3368      	adds	r3, #104	@ 0x68
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	2b03      	cmp	r3, #3
 80082b8:	d81b      	bhi.n	80082f2 <prvUpdateCacheEntry+0x5e>
                ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY )
            {
                /* If more answers exist than there are IP address storage
                 * slots they will overwrite entry 0 */
                ulIPAddressIndex = xDNSCache[ uxIndex ].ucNumIPAddresses;
 80082ba:	4a21      	ldr	r2, [pc, #132]	@ (8008340 <prvUpdateCacheEntry+0xac>)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	216c      	movs	r1, #108	@ 0x6c
 80082c0:	fb01 f303 	mul.w	r3, r1, r3
 80082c4:	4413      	add	r3, r2
 80082c6:	3368      	adds	r3, #104	@ 0x68
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	617b      	str	r3, [r7, #20]
                xDNSCache[ uxIndex ].ucNumIPAddresses++;
 80082cc:	4a1c      	ldr	r2, [pc, #112]	@ (8008340 <prvUpdateCacheEntry+0xac>)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	216c      	movs	r1, #108	@ 0x6c
 80082d2:	fb01 f303 	mul.w	r3, r1, r3
 80082d6:	4413      	add	r3, r2
 80082d8:	3368      	adds	r3, #104	@ 0x68
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	3301      	adds	r3, #1
 80082de:	b2d8      	uxtb	r0, r3
 80082e0:	4a17      	ldr	r2, [pc, #92]	@ (8008340 <prvUpdateCacheEntry+0xac>)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	216c      	movs	r1, #108	@ 0x6c
 80082e6:	fb01 f303 	mul.w	r3, r1, r3
 80082ea:	4413      	add	r3, r2
 80082ec:	3368      	adds	r3, #104	@ 0x68
 80082ee:	4602      	mov	r2, r0
 80082f0:	701a      	strb	r2, [r3, #0]
            }
        #endif
        ( void ) memcpy( &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), pxIP, sizeof( *pxIP ) );
 80082f2:	697a      	ldr	r2, [r7, #20]
 80082f4:	4613      	mov	r3, r2
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	4413      	add	r3, r2
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	216c      	movs	r1, #108	@ 0x6c
 8008300:	fb01 f202 	mul.w	r2, r1, r2
 8008304:	4413      	add	r3, r2
 8008306:	4a0e      	ldr	r2, [pc, #56]	@ (8008340 <prvUpdateCacheEntry+0xac>)
 8008308:	4413      	add	r3, r2
 800830a:	2214      	movs	r2, #20
 800830c:	6879      	ldr	r1, [r7, #4]
 800830e:	4618      	mov	r0, r3
 8008310:	f01a fc64 	bl	8022bdc <memcpy>
        xDNSCache[ uxIndex ].ulTTL = ulTTL;
 8008314:	4a0a      	ldr	r2, [pc, #40]	@ (8008340 <prvUpdateCacheEntry+0xac>)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	216c      	movs	r1, #108	@ 0x6c
 800831a:	fb01 f303 	mul.w	r3, r1, r3
 800831e:	4413      	add	r3, r2
 8008320:	3360      	adds	r3, #96	@ 0x60
 8008322:	68ba      	ldr	r2, [r7, #8]
 8008324:	601a      	str	r2, [r3, #0]
        xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 8008326:	4a06      	ldr	r2, [pc, #24]	@ (8008340 <prvUpdateCacheEntry+0xac>)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	216c      	movs	r1, #108	@ 0x6c
 800832c:	fb01 f303 	mul.w	r3, r1, r3
 8008330:	4413      	add	r3, r2
 8008332:	3364      	adds	r3, #100	@ 0x64
 8008334:	683a      	ldr	r2, [r7, #0]
 8008336:	601a      	str	r2, [r3, #0]
    }
 8008338:	bf00      	nop
 800833a:	3718      	adds	r7, #24
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	20000fd4 	.word	0x20000fd4

08008344 <prvInsertCacheEntry>:
 */
    static void prvInsertCacheEntry( const char * pcName,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
 8008350:	603b      	str	r3, [r7, #0]
        /* Add or update the item. */
        if( strlen( pcName ) < ( size_t ) ipconfigDNS_CACHE_NAME_LENGTH )
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f7f7 ffce 	bl	80002f4 <strlen>
 8008358:	4603      	mov	r3, r0
 800835a:	2b0f      	cmp	r3, #15
 800835c:	d859      	bhi.n	8008412 <prvInsertCacheEntry+0xce>
        {
            ( void ) strncpy( xDNSCache[ uxFreeEntry ].pcName, pcName, ipconfigDNS_CACHE_NAME_LENGTH );
 800835e:	4b2f      	ldr	r3, [pc, #188]	@ (800841c <prvInsertCacheEntry+0xd8>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	226c      	movs	r2, #108	@ 0x6c
 8008364:	fb02 f303 	mul.w	r3, r2, r3
 8008368:	3350      	adds	r3, #80	@ 0x50
 800836a:	4a2d      	ldr	r2, [pc, #180]	@ (8008420 <prvInsertCacheEntry+0xdc>)
 800836c:	4413      	add	r3, r2
 800836e:	2210      	movs	r2, #16
 8008370:	68f9      	ldr	r1, [r7, #12]
 8008372:	4618      	mov	r0, r3
 8008374:	f01b fc1e 	bl	8023bb4 <strncpy>
            ( void ) memcpy( &( xDNSCache[ uxFreeEntry ].xAddresses[ 0 ] ), pxIP, sizeof( *pxIP ) );
 8008378:	4b28      	ldr	r3, [pc, #160]	@ (800841c <prvInsertCacheEntry+0xd8>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	226c      	movs	r2, #108	@ 0x6c
 800837e:	fb02 f303 	mul.w	r3, r2, r3
 8008382:	4a27      	ldr	r2, [pc, #156]	@ (8008420 <prvInsertCacheEntry+0xdc>)
 8008384:	4413      	add	r3, r2
 8008386:	2214      	movs	r2, #20
 8008388:	6879      	ldr	r1, [r7, #4]
 800838a:	4618      	mov	r0, r3
 800838c:	f01a fc26 	bl	8022bdc <memcpy>


            xDNSCache[ uxFreeEntry ].ulTTL = ulTTL;
 8008390:	4b22      	ldr	r3, [pc, #136]	@ (800841c <prvInsertCacheEntry+0xd8>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a22      	ldr	r2, [pc, #136]	@ (8008420 <prvInsertCacheEntry+0xdc>)
 8008396:	216c      	movs	r1, #108	@ 0x6c
 8008398:	fb01 f303 	mul.w	r3, r1, r3
 800839c:	4413      	add	r3, r2
 800839e:	3360      	adds	r3, #96	@ 0x60
 80083a0:	68ba      	ldr	r2, [r7, #8]
 80083a2:	601a      	str	r2, [r3, #0]
            xDNSCache[ uxFreeEntry ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 80083a4:	4b1d      	ldr	r3, [pc, #116]	@ (800841c <prvInsertCacheEntry+0xd8>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a1d      	ldr	r2, [pc, #116]	@ (8008420 <prvInsertCacheEntry+0xdc>)
 80083aa:	216c      	movs	r1, #108	@ 0x6c
 80083ac:	fb01 f303 	mul.w	r3, r1, r3
 80083b0:	4413      	add	r3, r2
 80083b2:	3364      	adds	r3, #100	@ 0x64
 80083b4:	683a      	ldr	r2, [r7, #0]
 80083b6:	601a      	str	r2, [r3, #0]
            #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
                xDNSCache[ uxFreeEntry ].ucNumIPAddresses = 1;
 80083b8:	4b18      	ldr	r3, [pc, #96]	@ (800841c <prvInsertCacheEntry+0xd8>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a18      	ldr	r2, [pc, #96]	@ (8008420 <prvInsertCacheEntry+0xdc>)
 80083be:	216c      	movs	r1, #108	@ 0x6c
 80083c0:	fb01 f303 	mul.w	r3, r1, r3
 80083c4:	4413      	add	r3, r2
 80083c6:	3368      	adds	r3, #104	@ 0x68
 80083c8:	2201      	movs	r2, #1
 80083ca:	701a      	strb	r2, [r3, #0]
                xDNSCache[ uxFreeEntry ].ucCurrentIPAddress = 0;
 80083cc:	4b13      	ldr	r3, [pc, #76]	@ (800841c <prvInsertCacheEntry+0xd8>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a13      	ldr	r2, [pc, #76]	@ (8008420 <prvInsertCacheEntry+0xdc>)
 80083d2:	216c      	movs	r1, #108	@ 0x6c
 80083d4:	fb01 f303 	mul.w	r3, r1, r3
 80083d8:	4413      	add	r3, r2
 80083da:	3369      	adds	r3, #105	@ 0x69
 80083dc:	2200      	movs	r2, #0
 80083de:	701a      	strb	r2, [r3, #0]

                /* Initialize all remaining IP addresses in this entry to 0 */
                ( void ) memset( &xDNSCache[ uxFreeEntry ].xAddresses[ 1 ],
 80083e0:	4b0e      	ldr	r3, [pc, #56]	@ (800841c <prvInsertCacheEntry+0xd8>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	226c      	movs	r2, #108	@ 0x6c
 80083e6:	fb02 f303 	mul.w	r3, r2, r3
 80083ea:	3314      	adds	r3, #20
 80083ec:	4a0c      	ldr	r2, [pc, #48]	@ (8008420 <prvInsertCacheEntry+0xdc>)
 80083ee:	4413      	add	r3, r2
 80083f0:	223c      	movs	r2, #60	@ 0x3c
 80083f2:	2100      	movs	r1, #0
 80083f4:	4618      	mov	r0, r3
 80083f6:	f01a fcfe 	bl	8022df6 <memset>
                                 0,
                                 sizeof( xDNSCache[ uxFreeEntry ].xAddresses[ 1 ] ) *
                                 ( ( uint32_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY - 1U ) );
            #endif
            uxFreeEntry++;
 80083fa:	4b08      	ldr	r3, [pc, #32]	@ (800841c <prvInsertCacheEntry+0xd8>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	3301      	adds	r3, #1
 8008400:	4a06      	ldr	r2, [pc, #24]	@ (800841c <prvInsertCacheEntry+0xd8>)
 8008402:	6013      	str	r3, [r2, #0]

            if( uxFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 8008404:	4b05      	ldr	r3, [pc, #20]	@ (800841c <prvInsertCacheEntry+0xd8>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2b04      	cmp	r3, #4
 800840a:	d102      	bne.n	8008412 <prvInsertCacheEntry+0xce>
            {
                uxFreeEntry = 0;
 800840c:	4b03      	ldr	r3, [pc, #12]	@ (800841c <prvInsertCacheEntry+0xd8>)
 800840e:	2200      	movs	r2, #0
 8008410:	601a      	str	r2, [r3, #0]
            }
        }
    }
 8008412:	bf00      	nop
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	20001184 	.word	0x20001184
 8008420:	20000fd4 	.word	0x20000fd4

08008424 <prvReadDNSCache>:
 * @param[in] uxIndex The index from where entries must be copied.
 * @param[out] ppxAddressInfo Target to store the DNS entries.
 */
    static void prvReadDNSCache( BaseType_t uxIndex,
                                 struct freertos_addrinfo ** ppxAddressInfo )
    {
 8008424:	b580      	push	{r7, lr}
 8008426:	b088      	sub	sp, #32
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
        size_t uxIPAddressIndex;
        size_t uxNumIPAddresses = 1U;
 800842e:	2301      	movs	r3, #1
 8008430:	61bb      	str	r3, [r7, #24]
        const IPv46_Address_t * pxAddresses;
        struct freertos_addrinfo * pxNewAddress = NULL;
 8008432:	2300      	movs	r3, #0
 8008434:	617b      	str	r3, [r7, #20]
        struct freertos_addrinfo ** ppxLastAddress = ppxAddressInfo;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	613b      	str	r3, [r7, #16]

        #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
            uxNumIPAddresses = ( size_t ) xDNSCache[ uxIndex ].ucNumIPAddresses;
 800843a:	4a2e      	ldr	r2, [pc, #184]	@ (80084f4 <prvReadDNSCache+0xd0>)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	216c      	movs	r1, #108	@ 0x6c
 8008440:	fb01 f303 	mul.w	r3, r1, r3
 8008444:	4413      	add	r3, r2
 8008446:	3368      	adds	r3, #104	@ 0x68
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	61bb      	str	r3, [r7, #24]

            if( uxNumIPAddresses > ( size_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY )
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	2b04      	cmp	r3, #4
 8008450:	d901      	bls.n	8008456 <prvReadDNSCache+0x32>
            {
                /* Make this a configASSERT()? */
                uxNumIPAddresses = ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 8008452:	2304      	movs	r3, #4
 8008454:	61bb      	str	r3, [r7, #24]
            }
        #endif /* ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 8008456:	2300      	movs	r3, #0
 8008458:	61fb      	str	r3, [r7, #28]
 800845a:	e041      	b.n	80084e0 <prvReadDNSCache+0xbc>
        {
            pxAddresses = &( xDNSCache[ uxIndex ].xAddresses[ uxIPAddressIndex ] );
 800845c:	69fa      	ldr	r2, [r7, #28]
 800845e:	4613      	mov	r3, r2
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4413      	add	r3, r2
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	216c      	movs	r1, #108	@ 0x6c
 800846a:	fb01 f202 	mul.w	r2, r1, r2
 800846e:	4413      	add	r3, r2
 8008470:	4a20      	ldr	r2, [pc, #128]	@ (80084f4 <prvReadDNSCache+0xd0>)
 8008472:	4413      	add	r3, r2
 8008474:	60fb      	str	r3, [r7, #12]

            switch( pxAddresses->xIs_IPv6 ) /* LCOV_EXCL_BR_LINE - xIs_IPv6 is always either pdFALSE or pdTRUE. */
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d002      	beq.n	8008484 <prvReadDNSCache+0x60>
 800847e:	2b01      	cmp	r3, #1
 8008480:	d010      	beq.n	80084a4 <prvReadDNSCache+0x80>
 8008482:	e01d      	b.n	80084c0 <prvReadDNSCache+0x9c>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE:
                       {
                           const uint8_t * ucBytes = ( const uint8_t * ) &( pxAddresses->xIPAddress.ulIP_IPv4 );
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	60bb      	str	r3, [r7, #8]
                           pxNewAddress = pxNew_AddrInfo( xDNSCache[ uxIndex ].pcName, FREERTOS_AF_INET4, ucBytes );
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	226c      	movs	r2, #108	@ 0x6c
 800848c:	fb02 f303 	mul.w	r3, r2, r3
 8008490:	3350      	adds	r3, #80	@ 0x50
 8008492:	4a18      	ldr	r2, [pc, #96]	@ (80084f4 <prvReadDNSCache+0xd0>)
 8008494:	4413      	add	r3, r2
 8008496:	68ba      	ldr	r2, [r7, #8]
 8008498:	2102      	movs	r1, #2
 800849a:	4618      	mov	r0, r3
 800849c:	f7ff fc8c 	bl	8007db8 <pxNew_AddrInfo>
 80084a0:	6178      	str	r0, [r7, #20]
                       }
                       break;
 80084a2:	e011      	b.n	80084c8 <prvReadDNSCache+0xa4>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case pdTRUE:
                        pxNewAddress = pxNew_AddrInfo( xDNSCache[ uxIndex ].pcName, FREERTOS_AF_INET6, pxAddresses->xIPAddress.xIP_IPv6.ucBytes );
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	226c      	movs	r2, #108	@ 0x6c
 80084a8:	fb02 f303 	mul.w	r3, r2, r3
 80084ac:	3350      	adds	r3, #80	@ 0x50
 80084ae:	4a11      	ldr	r2, [pc, #68]	@ (80084f4 <prvReadDNSCache+0xd0>)
 80084b0:	4413      	add	r3, r2
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	210a      	movs	r1, #10
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7ff fc7e 	bl	8007db8 <pxNew_AddrInfo>
 80084bc:	6178      	str	r0, [r7, #20]
                        break;
 80084be:	e003      	b.n	80084c8 <prvReadDNSCache+0xa4>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default: /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "prvReadDNSCache: Undefined IP Type \n" ) );
 80084c0:	480d      	ldr	r0, [pc, #52]	@ (80084f8 <prvReadDNSCache+0xd4>)
 80084c2:	f01a f96f 	bl	80227a4 <lUDPLoggingPrintf>
                    break; /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
 80084c6:	bf00      	nop
            }

            if( pxNewAddress == NULL )
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00d      	beq.n	80084ea <prvReadDNSCache+0xc6>
                /* Malloc must has failed. */
                break;
            }

            /* Set either 'ppxAddressInfo' or 'pxNewAddress->ai_next'. */
            *( ppxLastAddress ) = pxNewAddress;
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	697a      	ldr	r2, [r7, #20]
 80084d2:	601a      	str	r2, [r3, #0]

            ppxLastAddress = &( pxNewAddress->ai_next );
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	331c      	adds	r3, #28
 80084d8:	613b      	str	r3, [r7, #16]
        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	3301      	adds	r3, #1
 80084de:	61fb      	str	r3, [r7, #28]
 80084e0:	69fa      	ldr	r2, [r7, #28]
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d3b9      	bcc.n	800845c <prvReadDNSCache+0x38>
        }
    }
 80084e8:	e000      	b.n	80084ec <prvReadDNSCache+0xc8>
                break;
 80084ea:	bf00      	nop
    }
 80084ec:	bf00      	nop
 80084ee:	3720      	adds	r7, #32
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	20000fd4 	.word	0x20000fd4
 80084f8:	08025048 	.word	0x08025048

080084fc <xDNSDoCallback>:
 *
 * @return Returns pdTRUE if uxIdentifier was recognized.
 */
    BaseType_t xDNSDoCallback( ParseSet_t * pxSet,
                               struct freertos_addrinfo * pxAddress )
    {
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b08a      	sub	sp, #40	@ 0x28
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8008506:	2300      	movs	r3, #0
 8008508:	627b      	str	r3, [r7, #36]	@ 0x24
        const ListItem_t * pxIterator;
        const ListItem_t * xEnd = listGET_END_MARKER( &xCallbackList );
 800850a:	4b28      	ldr	r3, [pc, #160]	@ (80085ac <xDNSDoCallback+0xb0>)
 800850c:	617b      	str	r3, [r7, #20]
        TickType_t uxIdentifier = ( TickType_t ) pxSet->pxDNSMessageHeader->usIdentifier;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	881b      	ldrh	r3, [r3, #0]
 8008514:	b29b      	uxth	r3, r3
 8008516:	613b      	str	r3, [r7, #16]

        /* While iterating through the list, the scheduler is suspended.
         * Remember which function shall be called once the scheduler is
         * running again. */
        FOnDNSEvent pCallbackFunction = NULL;
 8008518:	2300      	movs	r3, #0
 800851a:	61fb      	str	r3, [r7, #28]
        void * pvSearchID = NULL;
 800851c:	2300      	movs	r3, #0
 800851e:	61bb      	str	r3, [r7, #24]

        vTaskSuspendAll();
 8008520:	f7fc fac4 	bl	8004aac <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	623b      	str	r3, [r7, #32]
 800852a:	e029      	b.n	8008580 <xDNSDoCallback+0x84>
                 pxIterator != ( const ListItem_t * ) xEnd;
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
            {
                BaseType_t xMatching;
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800852c:	6a3b      	ldr	r3, [r7, #32]
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	60fb      	str	r3, [r7, #12]
                        xMatching = ( strcasecmp( pxCallback->pcName, pxSet->pcName ) == 0 ) ? pdTRUE : pdFALSE;
                    }
                    else
                #endif /* if ( ipconfigUSE_MDNS == 1 ) */
                {
                    xMatching = ( listGET_LIST_ITEM_VALUE( pxIterator ) == uxIdentifier ) ? pdTRUE : pdFALSE;
 8008532:	6a3b      	ldr	r3, [r7, #32]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	693a      	ldr	r2, [r7, #16]
 8008538:	429a      	cmp	r2, r3
 800853a:	d101      	bne.n	8008540 <xDNSDoCallback+0x44>
 800853c:	2301      	movs	r3, #1
 800853e:	e000      	b.n	8008542 <xDNSDoCallback+0x46>
 8008540:	2300      	movs	r3, #0
 8008542:	60bb      	str	r3, [r7, #8]
                }

                if( xMatching == pdTRUE )
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d117      	bne.n	800857a <xDNSDoCallback+0x7e>
                {
                    pvSearchID = pxCallback->pvSearchID;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	61bb      	str	r3, [r7, #24]
                    pCallbackFunction = pxCallback->pCallbackFunction;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	61fb      	str	r3, [r7, #28]
                    ( void ) uxListRemove( &pxCallback->xListItem );
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	3314      	adds	r3, #20
 800855a:	4618      	mov	r0, r3
 800855c:	f7fb f9be 	bl	80038dc <uxListRemove>
                    vPortFree( pxCallback );
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f7fe faf3 	bl	8006b4c <vPortFree>

                    if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 8008566:	4b12      	ldr	r3, [pc, #72]	@ (80085b0 <xDNSDoCallback+0xb4>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d102      	bne.n	8008574 <xDNSDoCallback+0x78>
                    {
                        /* The list of outstanding requests is empty. No need for periodic polling. */
                        vIPSetDNSTimerEnableState( pdFALSE );
 800856e:	2000      	movs	r0, #0
 8008570:	f002 f9ca 	bl	800a908 <vIPSetDNSTimerEnableState>
                    }

                    xResult = pdTRUE;
 8008574:	2301      	movs	r3, #1
 8008576:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 8008578:	e006      	b.n	8008588 <xDNSDoCallback+0x8c>
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800857a:	6a3b      	ldr	r3, [r7, #32]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	623b      	str	r3, [r7, #32]
                 pxIterator != ( const ListItem_t * ) xEnd;
 8008580:	6a3a      	ldr	r2, [r7, #32]
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	429a      	cmp	r2, r3
 8008586:	d1d1      	bne.n	800852c <xDNSDoCallback+0x30>
                }
            }
        }
        ( void ) xTaskResumeAll();
 8008588:	f7fc fa9e 	bl	8004ac8 <xTaskResumeAll>

        if( pCallbackFunction != NULL )
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d006      	beq.n	80085a0 <xDNSDoCallback+0xa4>
        {
            pCallbackFunction( pxSet->pcName, pvSearchID, pxAddress );
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	683a      	ldr	r2, [r7, #0]
 800859c:	69b9      	ldr	r1, [r7, #24]
 800859e:	4798      	blx	r3
        }

        return xResult;
 80085a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80085a2:	4618      	mov	r0, r3
 80085a4:	3728      	adds	r7, #40	@ 0x28
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	20001190 	.word	0x20001190
 80085b0:	20001188 	.word	0x20001188

080085b4 <vDNSCheckCallBack>:
 * @param[in] pvSearchID The search ID of callback function whose associated
 *                 DNS request is being cancelled. If non-ID specific checking of
 *                 all requests is required, then this field should be kept as NULL.
 */
    void vDNSCheckCallBack( void * pvSearchID )
    {
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b08c      	sub	sp, #48	@ 0x30
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;
        const ListItem_t * xEnd = listGET_END_MARKER( &xCallbackList );
 80085bc:	4b40      	ldr	r3, [pc, #256]	@ (80086c0 <vDNSCheckCallBack+0x10c>)
 80085be:	62bb      	str	r3, [r7, #40]	@ 0x28
         * be called. Store theses item in a temporary list.
         * Only when the scheduler is running, user functions
         * shall be called. */
        List_t xTempList;

        vListInitialise( &xTempList );
 80085c0:	f107 030c 	add.w	r3, r7, #12
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7fb f8ff 	bl	80037c8 <vListInitialise>

        vTaskSuspendAll();
 80085ca:	f7fc fa6f 	bl	8004aac <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 80085ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80085d4:	e02e      	b.n	8008634 <vDNSCheckCallBack+0x80>
                 pxIterator != xEnd; )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80085d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	623b      	str	r3, [r7, #32]
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 80085dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( ( pvSearchID != NULL ) && ( pvSearchID == pxCallback->pvSearchID ) )
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00d      	beq.n	8008604 <vDNSCheckCallBack+0x50>
 80085e8:	6a3b      	ldr	r3, [r7, #32]
 80085ea:	691b      	ldr	r3, [r3, #16]
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d108      	bne.n	8008604 <vDNSCheckCallBack+0x50>
                {
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 80085f2:	6a3b      	ldr	r3, [r7, #32]
 80085f4:	3314      	adds	r3, #20
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7fb f970 	bl	80038dc <uxListRemove>
                    vPortFree( pxCallback );
 80085fc:	6a38      	ldr	r0, [r7, #32]
 80085fe:	f7fe faa5 	bl	8006b4c <vPortFree>
 8008602:	e017      	b.n	8008634 <vDNSCheckCallBack+0x80>
                }
                else if( xTaskCheckForTimeOut( &pxCallback->uxTimeoutState, &( pxCallback->uxRemainingTime ) ) != pdFALSE )
 8008604:	6a3b      	ldr	r3, [r7, #32]
 8008606:	3308      	adds	r3, #8
 8008608:	6a3a      	ldr	r2, [r7, #32]
 800860a:	4611      	mov	r1, r2
 800860c:	4618      	mov	r0, r3
 800860e:	f7fc ff41 	bl	8005494 <xTaskCheckForTimeOut>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00d      	beq.n	8008634 <vDNSCheckCallBack+0x80>
                {
                    /* A time-out occurred in the asynchronous search.
                     * Remove it from xCallbackList. */
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8008618:	6a3b      	ldr	r3, [r7, #32]
 800861a:	3314      	adds	r3, #20
 800861c:	4618      	mov	r0, r3
 800861e:	f7fb f95d 	bl	80038dc <uxListRemove>

                    /* Insert it in a temporary list. The function will be called
                     * once the scheduler is resumed. */
                    vListInsertEnd( &( xTempList ), &pxCallback->xListItem );
 8008622:	6a3b      	ldr	r3, [r7, #32]
 8008624:	f103 0214 	add.w	r2, r3, #20
 8008628:	f107 030c 	add.w	r3, r7, #12
 800862c:	4611      	mov	r1, r2
 800862e:	4618      	mov	r0, r3
 8008630:	f7fb f8f7 	bl	8003822 <vListInsertEnd>
                 pxIterator != xEnd; )
 8008634:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008638:	429a      	cmp	r2, r3
 800863a:	d1cc      	bne.n	80085d6 <vDNSCheckCallBack+0x22>
                {
                    /* This call-back is still waiting for a reply or a time-out. */
                }
            }
        }
        ( void ) xTaskResumeAll();
 800863c:	f7fc fa44 	bl	8004ac8 <xTaskResumeAll>

        if( listLIST_IS_EMPTY( &xTempList ) == pdFALSE )
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d030      	beq.n	80086a8 <vDNSCheckCallBack+0xf4>
        {
            /* There is at least one item in xTempList which must be removed and deleted. */
            xEnd = listGET_END_MARKER( &xTempList );
 8008646:	f107 030c 	add.w	r3, r7, #12
 800864a:	3308      	adds	r3, #8
 800864c:	62bb      	str	r3, [r7, #40]	@ 0x28

            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 800864e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008654:	e024      	b.n	80086a0 <vDNSCheckCallBack+0xec>
                 pxIterator != xEnd;
                 )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8008656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800865c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* A time-out occurred in the asynchronous search.
                 * Call the application hook with the proper information. */
                if( pxCallback->xIsIPv6 != 0 )
 8008662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008666:	2b00      	cmp	r3, #0
 8008668:	d009      	beq.n	800867e <vDNSCheckCallBack+0xca>
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, NULL );
 800866a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008670:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 8008674:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008676:	6911      	ldr	r1, [r2, #16]
 8008678:	2200      	movs	r2, #0
 800867a:	4798      	blx	r3
 800867c:	e008      	b.n	8008690 <vDNSCheckCallBack+0xdc>
                }
                else
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, 0U );
 800867e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008684:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 8008688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800868a:	6911      	ldr	r1, [r2, #16]
 800868c:	2200      	movs	r2, #0
 800868e:	4798      	blx	r3
                }

                /* Remove it from 'xTempList' and free the memory. */
                ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8008690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008692:	3314      	adds	r3, #20
 8008694:	4618      	mov	r0, r3
 8008696:	f7fb f921 	bl	80038dc <uxListRemove>
                vPortFree( pxCallback );
 800869a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800869c:	f7fe fa56 	bl	8006b4c <vPortFree>
                 pxIterator != xEnd;
 80086a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d1d6      	bne.n	8008656 <vDNSCheckCallBack+0xa2>
            }
        }

        if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 80086a8:	4b06      	ldr	r3, [pc, #24]	@ (80086c4 <vDNSCheckCallBack+0x110>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d102      	bne.n	80086b6 <vDNSCheckCallBack+0x102>
        {
            vIPSetDNSTimerEnableState( pdFALSE );
 80086b0:	2000      	movs	r0, #0
 80086b2:	f002 f929 	bl	800a908 <vIPSetDNSTimerEnableState>
        }
    }
 80086b6:	bf00      	nop
 80086b8:	3730      	adds	r7, #48	@ 0x30
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	20001190 	.word	0x20001190
 80086c4:	20001188 	.word	0x20001188

080086c8 <vDNSCallbackInitialise>:
/**
 * @brief initialize the cache
 * @post will modify global list xCallbackList
 */
    void vDNSCallbackInitialise()
    {
 80086c8:	b580      	push	{r7, lr}
 80086ca:	af00      	add	r7, sp, #0
        vListInitialise( &xCallbackList );
 80086cc:	4802      	ldr	r0, [pc, #8]	@ (80086d8 <vDNSCallbackInitialise+0x10>)
 80086ce:	f7fb f87b 	bl	80037c8 <vListInitialise>
    }
 80086d2:	bf00      	nop
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	20001188 	.word	0x20001188

080086dc <DNS_ReadNameField>:
 *
 * @return If a fully formed name was found, then return the number of bytes processed in pucByte.
 */
    size_t DNS_ReadNameField( ParseSet_t * pxSet,
                              size_t uxDestLen )
    {
 80086dc:	b480      	push	{r7}
 80086de:	b089      	sub	sp, #36	@ 0x24
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
        size_t uxNameLen = 0U;
 80086e6:	2300      	movs	r3, #0
 80086e8:	61fb      	str	r3, [r7, #28]
        size_t uxIndex = 0U;
 80086ea:	2300      	movs	r3, #0
 80086ec:	61bb      	str	r3, [r7, #24]
        size_t uxSourceLen = pxSet->uxSourceBytesRemaining;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	695b      	ldr	r3, [r3, #20]
 80086f2:	613b      	str	r3, [r7, #16]
        const uint8_t * pucByte = pxSet->pucByte;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	60fb      	str	r3, [r7, #12]

        /* uxCount gets the values from pucByte and counts down to 0.
         * No need to have a different type than that of pucByte */
        size_t uxCount;

        if( uxSourceLen == ( size_t ) 0U )
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d102      	bne.n	8008706 <DNS_ReadNameField+0x2a>
        {
            /* Return 0 value in case of error. */
            uxIndex = 0U;
 8008700:	2300      	movs	r3, #0
 8008702:	61bb      	str	r3, [r7, #24]
 8008704:	e069      	b.n	80087da <DNS_ReadNameField+0xfe>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	4413      	add	r3, r2
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008712:	2bc0      	cmp	r3, #192	@ 0xc0
 8008714:	d144      	bne.n	80087a0 <DNS_ReadNameField+0xc4>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLen > sizeof( uint16_t ) )
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	2b02      	cmp	r3, #2
 800871a:	d903      	bls.n	8008724 <DNS_ReadNameField+0x48>
            {
                uxIndex += sizeof( uint16_t );
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	3302      	adds	r3, #2
 8008720:	61bb      	str	r3, [r7, #24]
 8008722:	e05a      	b.n	80087da <DNS_ReadNameField+0xfe>
            }
            else
            {
                uxIndex = 0U;
 8008724:	2300      	movs	r3, #0
 8008726:	61bb      	str	r3, [r7, #24]
 8008728:	e057      	b.n	80087da <DNS_ReadNameField+0xfe>
            /* 'uxIndex' points to the full name. Walk over the string. */
            while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
            {
                /* If this is not the first time through the loop, then add a
                 * separator in the output. */
                if( ( uxNameLen > 0U ) )
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d008      	beq.n	8008742 <DNS_ReadNameField+0x66>
                {
                    /*
                     * uxNameLen can never be greater than uxDestLen, since there are checks
                     * outside this condition, so the check is removed.
                     */
                    pxSet->pcName[ uxNameLen ] = '.';
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	4413      	add	r3, r2
 8008736:	3334      	adds	r3, #52	@ 0x34
 8008738:	222e      	movs	r2, #46	@ 0x2e
 800873a:	701a      	strb	r2, [r3, #0]
                    uxNameLen++;
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	3301      	adds	r3, #1
 8008740:	61fb      	str	r3, [r7, #28]
                }

                /* Process the first/next sub-string. */
                uxCount = ( size_t ) pucByte[ uxIndex ];
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	69bb      	ldr	r3, [r7, #24]
 8008746:	4413      	add	r3, r2
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	617b      	str	r3, [r7, #20]

                /* uxIndex should point to the first character now, unless uxCount
                 * is an offset field. */
                uxIndex++;
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	3301      	adds	r3, #1
 8008750:	61bb      	str	r3, [r7, #24]

                if( ( uxIndex + uxCount ) > uxSourceLen )
 8008752:	69ba      	ldr	r2, [r7, #24]
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	4413      	add	r3, r2
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	429a      	cmp	r2, r3
 800875c:	d202      	bcs.n	8008764 <DNS_ReadNameField+0x88>
                {
                    uxIndex = 0U;
 800875e:	2300      	movs	r3, #0
 8008760:	61bb      	str	r3, [r7, #24]
                    break;
 8008762:	e027      	b.n	80087b4 <DNS_ReadNameField+0xd8>
                }

                if( ( uxNameLen + uxCount ) >= uxDestLen )
 8008764:	69fa      	ldr	r2, [r7, #28]
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	4413      	add	r3, r2
 800876a:	683a      	ldr	r2, [r7, #0]
 800876c:	429a      	cmp	r2, r3
 800876e:	d812      	bhi.n	8008796 <DNS_ReadNameField+0xba>
                {
                    uxIndex = 0U;
 8008770:	2300      	movs	r3, #0
 8008772:	61bb      	str	r3, [r7, #24]
                    break;
 8008774:	e01e      	b.n	80087b4 <DNS_ReadNameField+0xd8>
                {
                    /*
                     * uxNameLen can never be greater than uxDestLen, since there are checks
                     * outside this condition, so the check is removed.
                     */
                    pxSet->pcName[ uxNameLen ] = ( char ) pucByte[ uxIndex ];
 8008776:	68fa      	ldr	r2, [r7, #12]
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	4413      	add	r3, r2
 800877c:	7819      	ldrb	r1, [r3, #0]
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	4413      	add	r3, r2
 8008784:	3334      	adds	r3, #52	@ 0x34
 8008786:	460a      	mov	r2, r1
 8008788:	701a      	strb	r2, [r3, #0]
                    uxNameLen++;
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	3301      	adds	r3, #1
 800878e:	61fb      	str	r3, [r7, #28]
                    uxIndex++;
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	3301      	adds	r3, #1
 8008794:	61bb      	str	r3, [r7, #24]
                while( uxCount-- != 0U )
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	1e5a      	subs	r2, r3, #1
 800879a:	617a      	str	r2, [r7, #20]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1ea      	bne.n	8008776 <DNS_ReadNameField+0x9a>
            while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
 80087a0:	69ba      	ldr	r2, [r7, #24]
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d205      	bcs.n	80087b4 <DNS_ReadNameField+0xd8>
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	4413      	add	r3, r2
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d1ba      	bne.n	800872a <DNS_ReadNameField+0x4e>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00f      	beq.n	80087da <DNS_ReadNameField+0xfe>
                 * failing above check. Whenever we exit the loop otherwise, either
                 * pucByte[ uxIndex ] == 0 (which makes the check here unnecessary) or
                 * uxIndex >= uxSourceLen (which makes sure that we do not go in the 'if'
                 * case).
                 */
                if( uxIndex < uxSourceLen )
 80087ba:	69ba      	ldr	r2, [r7, #24]
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d209      	bcs.n	80087d6 <DNS_ReadNameField+0xfa>
                {
                    pxSet->pcName[ uxNameLen ] = '\0';
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	4413      	add	r3, r2
 80087c8:	3334      	adds	r3, #52	@ 0x34
 80087ca:	2200      	movs	r2, #0
 80087cc:	701a      	strb	r2, [r3, #0]
                    uxIndex++;
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	3301      	adds	r3, #1
 80087d2:	61bb      	str	r3, [r7, #24]
 80087d4:	e001      	b.n	80087da <DNS_ReadNameField+0xfe>
                }
                else
                {
                    uxIndex = 0U;
 80087d6:	2300      	movs	r3, #0
 80087d8:	61bb      	str	r3, [r7, #24]
                }
            }
        }

        return uxIndex;
 80087da:	69bb      	ldr	r3, [r7, #24]
    }
 80087dc:	4618      	mov	r0, r3
 80087de:	3724      	adds	r7, #36	@ 0x24
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <DNS_SkipNameField>:
 *
 * @return It returns the number of bytes read, or zero when an error has occurred.
 */
    size_t DNS_SkipNameField( const uint8_t * pucByte,
                              size_t uxLength )
    {
 80087e8:	b480      	push	{r7}
 80087ea:	b087      	sub	sp, #28
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
        size_t uxChunkLength;
        size_t uxSourceLenCpy = uxLength;
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	617b      	str	r3, [r7, #20]
        size_t uxIndex = 0U;
 80087f6:	2300      	movs	r3, #0
 80087f8:	613b      	str	r3, [r7, #16]

        if( uxSourceLenCpy == 0U )
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d102      	bne.n	8008806 <DNS_SkipNameField+0x1e>
        {
            uxIndex = 0U;
 8008800:	2300      	movs	r3, #0
 8008802:	613b      	str	r3, [r7, #16]
 8008804:	e03f      	b.n	8008886 <DNS_SkipNameField+0x9e>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	4413      	add	r3, r2
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008812:	2bc0      	cmp	r3, #192	@ 0xc0
 8008814:	d11f      	bne.n	8008856 <DNS_SkipNameField+0x6e>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLenCpy > sizeof( uint16_t ) )
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	2b02      	cmp	r3, #2
 800881a:	d903      	bls.n	8008824 <DNS_SkipNameField+0x3c>
            {
                uxIndex += sizeof( uint16_t );
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	3302      	adds	r3, #2
 8008820:	613b      	str	r3, [r7, #16]
 8008822:	e030      	b.n	8008886 <DNS_SkipNameField+0x9e>
            }
            else
            {
                uxIndex = 0U;
 8008824:	2300      	movs	r3, #0
 8008826:	613b      	str	r3, [r7, #16]
 8008828:	e02d      	b.n	8008886 <DNS_SkipNameField+0x9e>
            /* pucByte points to the full name. Walk over the string. */
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
            {
                /* Conversion to size_t causes addition to be done
                 * in size_t */
                uxChunkLength = ( ( size_t ) pucByte[ uxIndex ] ) + 1U;
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	4413      	add	r3, r2
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	3301      	adds	r3, #1
 8008834:	60fb      	str	r3, [r7, #12]

                if( uxSourceLenCpy > uxChunkLength )
 8008836:	697a      	ldr	r2, [r7, #20]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	429a      	cmp	r2, r3
 800883c:	d908      	bls.n	8008850 <DNS_SkipNameField+0x68>
                {
                    uxSourceLenCpy -= uxChunkLength;
 800883e:	697a      	ldr	r2, [r7, #20]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	1ad3      	subs	r3, r2, r3
 8008844:	617b      	str	r3, [r7, #20]
                    uxIndex += uxChunkLength;
 8008846:	693a      	ldr	r2, [r7, #16]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	4413      	add	r3, r2
 800884c:	613b      	str	r3, [r7, #16]
 800884e:	e002      	b.n	8008856 <DNS_SkipNameField+0x6e>
                }
                else
                {
                    uxIndex = 0U;
 8008850:	2300      	movs	r3, #0
 8008852:	613b      	str	r3, [r7, #16]
                    break;
 8008854:	e008      	b.n	8008868 <DNS_SkipNameField+0x80>
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	4413      	add	r3, r2
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d002      	beq.n	8008868 <DNS_SkipNameField+0x80>
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d8e0      	bhi.n	800882a <DNS_SkipNameField+0x42>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00b      	beq.n	8008886 <DNS_SkipNameField+0x9e>
            {
                if( pucByte[ uxIndex ] == 0U )
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	4413      	add	r3, r2
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d103      	bne.n	8008882 <DNS_SkipNameField+0x9a>
                {
                    uxIndex++;
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	3301      	adds	r3, #1
 800887e:	613b      	str	r3, [r7, #16]
 8008880:	e001      	b.n	8008886 <DNS_SkipNameField+0x9e>
                }
                else
                {
                    uxIndex = 0U;
 8008882:	2300      	movs	r3, #0
 8008884:	613b      	str	r3, [r7, #16]
                }
            }
        }

        return uxIndex;
 8008886:	693b      	ldr	r3, [r7, #16]
    }
 8008888:	4618      	mov	r0, r3
 800888a:	371c      	adds	r7, #28
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <DNS_ParseDNSReply>:
    uint32_t DNS_ParseDNSReply( uint8_t * pucUDPPayloadBuffer,
                                size_t uxBufferLength,
                                struct freertos_addrinfo ** ppxAddressInfo,
                                BaseType_t xExpected,
                                uint16_t usPort )
    {
 8008894:	b5b0      	push	{r4, r5, r7, lr}
 8008896:	b0f6      	sub	sp, #472	@ 0x1d8
 8008898:	af00      	add	r7, sp, #0
 800889a:	f507 74ec 	add.w	r4, r7, #472	@ 0x1d8
 800889e:	f5a4 74e6 	sub.w	r4, r4, #460	@ 0x1cc
 80088a2:	6020      	str	r0, [r4, #0]
 80088a4:	f507 70ec 	add.w	r0, r7, #472	@ 0x1d8
 80088a8:	f5a0 70e8 	sub.w	r0, r0, #464	@ 0x1d0
 80088ac:	6001      	str	r1, [r0, #0]
 80088ae:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 80088b2:	f5a1 71ea 	sub.w	r1, r1, #468	@ 0x1d4
 80088b6:	600a      	str	r2, [r1, #0]
 80088b8:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 80088bc:	f5a2 72ec 	sub.w	r2, r2, #472	@ 0x1d8
 80088c0:	6013      	str	r3, [r2, #0]
        ParseSet_t xSet;
        uint16_t x;
        BaseType_t xReturn = pdTRUE;
 80088c2:	2301      	movs	r3, #1
 80088c4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
        uint32_t ulIPAddress = 0U;
 80088c8:	2300      	movs	r3, #0
 80088ca:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        BaseType_t xDNSHookReturn;

        ( void ) memset( &( xSet ), 0, sizeof( xSet ) );
 80088ce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80088d2:	224c      	movs	r2, #76	@ 0x4c
 80088d4:	2100      	movs	r1, #0
 80088d6:	4618      	mov	r0, r3
 80088d8:	f01a fa8d 	bl	8022df6 <memset>
        xSet.usPortNumber = usPort;
 80088dc:	f8b7 31e8 	ldrh.w	r3, [r7, #488]	@ 0x1e8
 80088e0:	f8a7 3166 	strh.w	r3, [r7, #358]	@ 0x166
        xSet.ppxLastAddress = &( xSet.pxLastAddress );
 80088e4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80088e8:	3344      	adds	r3, #68	@ 0x44
 80088ea:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
            xSet.xDoStore = xExpected;
 80088ee:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80088f2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
        #endif

        /* Ensure that the buffer is of at least minimal DNS message length. */
        if( uxBufferLength < sizeof( DNSMessage_t ) )
 80088fc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008900:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2b0b      	cmp	r3, #11
 8008908:	d803      	bhi.n	8008912 <DNS_ParseDNSReply+0x7e>
        {
            ( void ) xDNSHookReturn;
            xReturn = pdFALSE;
 800890a:	2300      	movs	r3, #0
 800890c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8008910:	e35a      	b.n	8008fc8 <DNS_ParseDNSReply+0x734>
        }
        else
        {
            xSet.uxBufferLength = uxBufferLength;
 8008912:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008916:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
            xSet.uxSourceBytesRemaining = uxBufferLength;
 8008920:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008924:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
             * for easier access. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            xSet.pxDNSMessageHeader = ( ( DNSMessage_t * )
 800892e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008932:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
                                        pucUDPPayloadBuffer );

            /* Introduce a do {} while (0) to allow the use of breaks. */
            do
            {
                size_t uxBytesRead = 0U;
 800893c:	2300      	movs	r3, #0
 800893e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
                size_t uxResult;
                BaseType_t xIsResponse = pdFALSE;
 8008942:	2300      	movs	r3, #0
 8008944:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

                /* Start at the first byte after the header. */
                xSet.pucUDPPayloadBuffer = pucUDPPayloadBuffer;
 8008948:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800894c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
                /* Skip 12-byte header. */
                xSet.pucByte = &( pucUDPPayloadBuffer[ sizeof( DNSMessage_t ) ] );
 8008956:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800895a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	330c      	adds	r3, #12
 8008962:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                xSet.uxSourceBytesRemaining -= sizeof( DNSMessage_t );
 8008966:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800896a:	3b0c      	subs	r3, #12
 800896c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

                /* The number of questions supplied. */
                xSet.usQuestions = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usQuestions );
 8008970:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008974:	889b      	ldrh	r3, [r3, #4]
 8008976:	b29b      	uxth	r3, r3
 8008978:	021b      	lsls	r3, r3, #8
 800897a:	b21a      	sxth	r2, r3
 800897c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008980:	889b      	ldrh	r3, [r3, #4]
 8008982:	b29b      	uxth	r3, r3
 8008984:	0a1b      	lsrs	r3, r3, #8
 8008986:	b29b      	uxth	r3, r3
 8008988:	b21b      	sxth	r3, r3
 800898a:	4313      	orrs	r3, r2
 800898c:	b21b      	sxth	r3, r3
 800898e:	b29b      	uxth	r3, r3
 8008990:	f8a7 3144 	strh.w	r3, [r7, #324]	@ 0x144
                /* The number of answer records. */
                xSet.usAnswers = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usAnswers );
 8008994:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008998:	88db      	ldrh	r3, [r3, #6]
 800899a:	b29b      	uxth	r3, r3
 800899c:	021b      	lsls	r3, r3, #8
 800899e:	b21a      	sxth	r2, r3
 80089a0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80089a4:	88db      	ldrh	r3, [r3, #6]
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	0a1b      	lsrs	r3, r3, #8
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	b21b      	sxth	r3, r3
 80089ae:	4313      	orrs	r3, r2
 80089b0:	b21b      	sxth	r3, r3
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146

                if( ( xSet.pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 80089b8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80089bc:	885b      	ldrh	r3, [r3, #2]
 80089be:	b29b      	uxth	r3, r3
 80089c0:	f403 6378 	and.w	r3, r3, #3968	@ 0xf80
 80089c4:	2b80      	cmp	r3, #128	@ 0x80
 80089c6:	d11b      	bne.n	8008a00 <DNS_ParseDNSReply+0x16c>
                {
                    xIsResponse = pdTRUE;
 80089c8:	2301      	movs	r3, #1
 80089ca:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

                    if( xSet.usAnswers == 0U )
 80089ce:	f8b7 3146 	ldrh.w	r3, [r7, #326]	@ 0x146
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d103      	bne.n	80089de <DNS_ParseDNSReply+0x14a>
                    {
                        /* This is a response that does not include answers. */
                        xReturn = pdFALSE;
 80089d6:	2300      	movs	r3, #0
 80089d8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 80089dc:	e2f4      	b.n	8008fc8 <DNS_ParseDNSReply+0x734>
                    }

                    if( xSet.usQuestions == 0U )
 80089de:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d114      	bne.n	8008a10 <DNS_ParseDNSReply+0x17c>
                    {
                        #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                        {
                            xSet.pcRequestedName = ( char * ) xSet.pucByte;
 80089e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80089ea:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                        }
                        #endif

                        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                            uxResult = DNS_ReadNameField( &xSet,
 80089ee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80089f2:	2110      	movs	r1, #16
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7ff fe71 	bl	80086dc <DNS_ReadNameField>
 80089fa:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
 80089fe:	e007      	b.n	8008a10 <DNS_ParseDNSReply+0x17c>
                        #endif
                    }
                }
                else
                {
                    if( xSet.usQuestions == 0U )
 8008a00:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d103      	bne.n	8008a10 <DNS_ParseDNSReply+0x17c>
                    {
                        /* This is a query that does not include any question. */
                        xReturn = pdFALSE;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8008a0e:	e2db      	b.n	8008fc8 <DNS_ParseDNSReply+0x734>
                    }
                }

                for( x = 0U; x < xSet.usQuestions; x++ )
 8008a10:	2300      	movs	r3, #0
 8008a12:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
 8008a16:	e064      	b.n	8008ae2 <DNS_ParseDNSReply+0x24e>
                {
                    #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                    {
                        if( x == 0U )
 8008a18:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d103      	bne.n	8008a28 <DNS_ParseDNSReply+0x194>
                        {
                            xSet.pcRequestedName = ( char * ) xSet.pucByte;
 8008a20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a24:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                        }
                    }
                    #endif

                    #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                        if( x == 0U )
 8008a28:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d108      	bne.n	8008a42 <DNS_ParseDNSReply+0x1ae>
                        {
                            uxResult = DNS_ReadNameField( &xSet,
 8008a30:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008a34:	2110      	movs	r1, #16
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7ff fe50 	bl	80086dc <DNS_ReadNameField>
 8008a3c:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
 8008a40:	e009      	b.n	8008a56 <DNS_ParseDNSReply+0x1c2>
                        }
                        else
                    #endif /* ipconfigUSE_DNS_CACHE || ipconfigDNS_USE_CALLBACKS */
                    {
                        /* Skip the variable length pcName field. */
                        uxResult = DNS_SkipNameField( xSet.pucByte,
 8008a42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a46:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8008a4a:	4611      	mov	r1, r2
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7ff fecb 	bl	80087e8 <DNS_SkipNameField>
 8008a52:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
                                                      xSet.uxSourceBytesRemaining );
                    }

                    /* Check for a malformed response. */
                    if( uxResult == 0U )
 8008a56:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d103      	bne.n	8008a66 <DNS_ParseDNSReply+0x1d2>
                    {
                        xReturn = pdFALSE;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8008a64:	e043      	b.n	8008aee <DNS_ParseDNSReply+0x25a>
                    }

                    uxBytesRead += uxResult;
 8008a66:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8008a6a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8008a6e:	4413      	add	r3, r2
 8008a70:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
                    xSet.pucByte = &( xSet.pucByte[ uxResult ] );
 8008a74:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008a78:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8008a7c:	4413      	add	r3, r2
 8008a7e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                    xSet.uxSourceBytesRemaining -= uxResult;
 8008a82:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8008a86:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

                    /* Check the remaining buffer size. */
                    if( xSet.uxSourceBytesRemaining >= sizeof( uint32_t ) )
 8008a90:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8008a94:	2b03      	cmp	r3, #3
 8008a96:	d91b      	bls.n	8008ad0 <DNS_ParseDNSReply+0x23c>
                    {
                        #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                        {
                            /* usChar2u16 returns value in host endianness. */
                            xSet.usType = usChar2u16( xSet.pucByte );
 8008a98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f002 fa58 	bl	800af52 <usChar2u16>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	f8a7 3158 	strh.w	r3, [r7, #344]	@ 0x158
                            xSet.usClass = usChar2u16( &( xSet.pucByte[ 2 ] ) );
 8008aa8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008aac:	3302      	adds	r3, #2
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f002 fa4f 	bl	800af52 <usChar2u16>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	f8a7 3168 	strh.w	r3, [r7, #360]	@ 0x168
                        }
                        #endif /* ipconfigUSE_LLMNR */

                        /* Skip the type and class fields. */
                        xSet.pucByte = &( xSet.pucByte[ sizeof( uint32_t ) ] );
 8008aba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008abe:	3304      	adds	r3, #4
 8008ac0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                        xSet.uxSourceBytesRemaining -= sizeof( uint32_t );
 8008ac4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8008ac8:	3b04      	subs	r3, #4
 8008aca:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8008ace:	e003      	b.n	8008ad8 <DNS_ParseDNSReply+0x244>
                    }
                    else
                    {
                        xReturn = pdFALSE;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8008ad6:	e00a      	b.n	8008aee <DNS_ParseDNSReply+0x25a>
                for( x = 0U; x < xSet.usQuestions; x++ )
 8008ad8:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 8008adc:	3301      	adds	r3, #1
 8008ade:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
 8008ae2:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8008ae6:	f8b7 21d6 	ldrh.w	r2, [r7, #470]	@ 0x1d6
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d394      	bcc.n	8008a18 <DNS_ParseDNSReply+0x184>
                    }
                } /* for( x = 0U; x < xSet.usQuestions; x++ ) */

                if( xReturn == pdFALSE )
 8008aee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f000 8265 	beq.w	8008fc2 <DNS_ParseDNSReply+0x72e>
                {
                    /* No need to proceed. Break out of the do-while loop. */
                    break;
                }

                if( xIsResponse == pdTRUE )
 8008af8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d10d      	bne.n	8008b1c <DNS_ParseDNSReply+0x288>
                {
                    /* Search through the answer records. */
                    ulIPAddress = parseDNSAnswer( &( xSet ), ppxAddressInfo, &uxBytesRead );
 8008b00:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8008b04:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008b08:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8008b0c:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8008b10:	6819      	ldr	r1, [r3, #0]
 8008b12:	f000 fa73 	bl	8008ffc <parseDNSAnswer>
 8008b16:	f8c7 01cc 	str.w	r0, [r7, #460]	@ 0x1cc
 8008b1a:	e255      	b.n	8008fc8 <DNS_ParseDNSReply+0x734>

                    /* No need to check that pcRequestedName != NULL since sQuestions != 0, then
                     * pcRequestedName is assigned with this statement
                     * "pcRequestedName = ( char * ) pucByte;" */
                    /* No need to check that usQuestions != 0, since the check is done before */
                    else if( ( ( xSet.usType == dnsTYPE_A_HOST ) || ( xSet.usType == dnsTYPE_AAAA_HOST ) ) &&
 8008b1c:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d004      	beq.n	8008b2e <DNS_ParseDNSReply+0x29a>
 8008b24:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008b28:	2b1c      	cmp	r3, #28
 8008b2a:	f040 824d 	bne.w	8008fc8 <DNS_ParseDNSReply+0x734>
                             ( xSet.usClass == dnsCLASS_IN ) )
 8008b2e:	f8b7 3168 	ldrh.w	r3, [r7, #360]	@ 0x168
                    else if( ( ( xSet.usType == dnsTYPE_A_HOST ) || ( xSet.usType == dnsTYPE_AAAA_HOST ) ) &&
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	f040 8248 	bne.w	8008fc8 <DNS_ParseDNSReply+0x734>
                    {
                        NetworkBufferDescriptor_t * pxNetworkBuffer;
                        NetworkEndPoint_t * pxEndPoint, xEndPoint;
                        size_t uxUDPOffset;

                        pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 8008b38:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008b3c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8008b40:	6818      	ldr	r0, [r3, #0]
 8008b42:	f001 ff9f 	bl	800aa84 <pxUDPPayloadBuffer_to_NetworkBuffer>
 8008b46:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc

                        /* This test could be replaced with a assert(). */
                        if( pxNetworkBuffer == NULL )
 8008b4a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d103      	bne.n	8008b5a <DNS_ParseDNSReply+0x2c6>
                        {
                            /* _HT_ just while testing. When the program gets here,
                             * pucUDPPayloadBuffer was invalid. */
                            FreeRTOS_printf( ( "DNS_ParseDNSReply: pucUDPPayloadBuffer was invalid\n" ) );
 8008b52:	48c4      	ldr	r0, [pc, #784]	@ (8008e64 <DNS_ParseDNSReply+0x5d0>)
 8008b54:	f019 fe26 	bl	80227a4 <lUDPLoggingPrintf>
                            break;
 8008b58:	e236      	b.n	8008fc8 <DNS_ParseDNSReply+0x734>
                        }

                        uxUDPOffset = ( size_t ) ( pucUDPPayloadBuffer - pxNetworkBuffer->pucEthernetBuffer );
 8008b5a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b60:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8008b64:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8008b68:	6812      	ldr	r2, [r2, #0]
 8008b6a:	1ad3      	subs	r3, r2, r3
 8008b6c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
                        configASSERT( ( uxUDPOffset == ipUDP_PAYLOAD_OFFSET_IPv4 ) || ( uxUDPOffset == ipUDP_PAYLOAD_OFFSET_IPv6 ) );
 8008b70:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8008b74:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b76:	d003      	beq.n	8008b80 <DNS_ParseDNSReply+0x2ec>
 8008b78:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8008b7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b7e:	d101      	bne.n	8008b84 <DNS_ParseDNSReply+0x2f0>
 8008b80:	2301      	movs	r3, #1
 8008b82:	e000      	b.n	8008b86 <DNS_ParseDNSReply+0x2f2>
 8008b84:	2300      	movs	r3, #0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d104      	bne.n	8008b94 <DNS_ParseDNSReply+0x300>
 8008b8a:	f240 11bb 	movw	r1, #443	@ 0x1bb
 8008b8e:	48b6      	ldr	r0, [pc, #728]	@ (8008e68 <DNS_ParseDNSReply+0x5d4>)
 8008b90:	f7f8 ff3a 	bl	8001a08 <vAssertCalled>

                        if( pxNetworkBuffer->pxEndPoint == NULL )
 8008b94:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	f000 8213 	beq.w	8008fc6 <DNS_ParseDNSReply+0x732>
                        {
                            break;
                        }

                        pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8008ba0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ba6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

                        /* Make a copy of the end-point because xApplicationDNSQueryHook() is allowed
                         * to write into it. */
                        ( void ) memcpy( &( xEndPoint ), pxEndPoint, sizeof( xEndPoint ) );
 8008baa:	f107 0314 	add.w	r3, r7, #20
 8008bae:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8008bb2:	f8d7 11a4 	ldr.w	r1, [r7, #420]	@ 0x1a4
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f01a f810 	bl	8022bdc <memcpy>

                        #if ( ipconfigUSE_IPv6 != 0 )
                        {
                            /*logging*/
                            FreeRTOS_printf( ( "prvParseDNS_HandleLLMNRRequest[%s]: type %04X\n", xSet.pcName, xSet.usType ) );
 8008bbc:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008bc6:	3334      	adds	r3, #52	@ 0x34
 8008bc8:	4619      	mov	r1, r3
 8008bca:	48a8      	ldr	r0, [pc, #672]	@ (8008e6c <DNS_ParseDNSReply+0x5d8>)
 8008bcc:	f019 fdea 	bl	80227a4 <lUDPLoggingPrintf>

                            xEndPoint.usDNSType = ( uint8_t ) xSet.usType;
 8008bd0:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008bd4:	b2da      	uxtb	r2, r3
 8008bd6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008bda:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008bde:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        /* If this is not a reply to our DNS request, it might be an mDNS or an LLMNR
                         * request. Ask the application if it uses the name. */
                        #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
                            xDNSHookReturn = xApplicationDNSQueryHook( xSet.pcName );
 8008be2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008be6:	3334      	adds	r3, #52	@ 0x34
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7f8 ffa1 	bl	8001b30 <xApplicationDNSQueryHook>
 8008bee:	f8c7 01c8 	str.w	r0, [r7, #456]	@ 0x1c8
                            xDNSHookReturn = xApplicationDNSQueryHook_Multi( &xEndPoint, xSet.pcName );
                        #endif

                        /* During the early stages of boot or after a DHCP lease expires, our end-point
                         * may have an IP address of 0.0.0.0. Do not respond to name queries with that address. */
                        if( ( xDNSHookReturn != pdFALSE ) && ( xEndPoint.bits.bIPv6 == pdFALSE ) && ( xEndPoint.ipv4_settings.ulIPAddress == 0U ) )
 8008bf2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d014      	beq.n	8008c24 <DNS_ParseDNSReply+0x390>
 8008bfa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008bfe:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008c02:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8008c06:	f003 0304 	and.w	r3, r3, #4
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d109      	bne.n	8008c24 <DNS_ParseDNSReply+0x390>
 8008c10:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008c14:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d102      	bne.n	8008c24 <DNS_ParseDNSReply+0x390>
                        {
                            xDNSHookReturn = pdFALSE;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
                        }

                        if( xDNSHookReturn != pdFALSE )
 8008c24:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	f000 81cd 	beq.w	8008fc8 <DNS_ParseDNSReply+0x734>
                        {
                            int16_t usLength;
                            NetworkBufferDescriptor_t * pxNewBuffer = NULL;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
                            LLMNRAnswer_t * pxAnswer;
                            uint8_t * pucNewBuffer = NULL;
 8008c34:	2300      	movs	r3, #0
 8008c36:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
                            size_t uxExtraLength;

                            if( xBufferAllocFixedSize == pdFALSE )
 8008c3a:	4b8d      	ldr	r3, [pc, #564]	@ (8008e70 <DNS_ParseDNSReply+0x5dc>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d164      	bne.n	8008d0c <DNS_ParseDNSReply+0x478>
                            {
                                size_t uxDataLength = uxBufferLength +
                                                      sizeof( UDPHeader_t ) +
                                                      sizeof( EthernetHeader_t ) +
                                                      uxIPHeaderSizePacket( pxNetworkBuffer );
 8008c42:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8008c46:	f001 fbd7 	bl	800a3f8 <uxIPHeaderSizePacket>
 8008c4a:	4602      	mov	r2, r0
                                                      sizeof( EthernetHeader_t ) +
 8008c4c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008c50:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4413      	add	r3, r2
                                size_t uxDataLength = uxBufferLength +
 8008c58:	3316      	adds	r3, #22
 8008c5a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

                                #if ( ipconfigUSE_IPv6 != 0 )
                                    if( xSet.usType == dnsTYPE_AAAA_HOST )
 8008c5e:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008c62:	2b1c      	cmp	r3, #28
 8008c64:	d103      	bne.n	8008c6e <DNS_ParseDNSReply+0x3da>
                                    {
                                        uxExtraLength = sizeof( LLMNRAnswer_t ) + ipSIZE_OF_IPv6_ADDRESS - sizeof( pxAnswer->ulIPAddress );
 8008c66:	231c      	movs	r3, #28
 8008c68:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8008c6c:	e002      	b.n	8008c74 <DNS_ParseDNSReply+0x3e0>
                                    }
                                    else
                                #endif /* ( ipconfigUSE_IPv6 != 0 ) */
                                #if ( ipconfigUSE_IPv4 != 0 )
                                {
                                    uxExtraLength = sizeof( LLMNRAnswer_t );
 8008c6e:	2310      	movs	r3, #16
 8008c70:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
                                    /* do nothing, coverity happy */
                                }
                                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                                /* Set the size of the outgoing packet. */
                                pxNetworkBuffer->xDataLength = uxDataLength;
 8008c74:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008c78:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8008c7c:	629a      	str	r2, [r3, #40]	@ 0x28
                                pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer,
 8008c7e:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8008c82:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8008c86:	4413      	add	r3, r2
 8008c88:	4619      	mov	r1, r3
 8008c8a:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8008c8e:	f001 fe65 	bl	800a95c <pxDuplicateNetworkBufferWithDescriptor>
 8008c92:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
                                                                                      uxDataLength +
                                                                                      uxExtraLength );

                                if( pxNewBuffer != NULL )
 8008c96:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d032      	beq.n	8008d04 <DNS_ParseDNSReply+0x470>
                                {
                                    BaseType_t xOffset1, xOffset2;

                                    xOffset1 = ( BaseType_t ) ( xSet.pucByte - pucUDPPayloadBuffer );
 8008c9e:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008ca2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008ca6:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	1ad3      	subs	r3, r2, r3
 8008cae:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
                                    xOffset2 = ( BaseType_t ) ( ( ( uint8_t * ) xSet.pcRequestedName ) - pucUDPPayloadBuffer );
 8008cb2:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8008cb6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008cba:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	1ad3      	subs	r3, r2, r3
 8008cc2:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198

                                    pxNetworkBuffer = pxNewBuffer;
 8008cc6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8008cca:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
                                    pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPOffset ] );
 8008cce:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008cd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008cd4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8008cd8:	4413      	add	r3, r2
 8008cda:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0

                                    xSet.pucByte = &( pucNewBuffer[ xOffset1 ] );
 8008cde:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8008ce2:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                                    xSet.pcRequestedName = ( char * ) &( pucNewBuffer[ xOffset2 ] );
 8008cec:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8008cf0:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8008cf4:	4413      	add	r3, r2
 8008cf6:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                                    xSet.pxDNSMessageHeader = ( ( DNSMessage_t * ) pucNewBuffer );
 8008cfa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8008cfe:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8008d02:	e00b      	b.n	8008d1c <DNS_ParseDNSReply+0x488>
                                }
                                else
                                {
                                    /* Just to indicate that the message may not be answered. */
                                    pxNetworkBuffer = NULL;
 8008d04:	2300      	movs	r3, #0
 8008d06:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8008d0a:	e007      	b.n	8008d1c <DNS_ParseDNSReply+0x488>
                                }
                            }
                            else
                            {
                                pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPOffset ] );
 8008d0c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008d10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d12:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8008d16:	4413      	add	r3, r2
 8008d18:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
                            }

                            if( ( pxNetworkBuffer != NULL ) )
 8008d1c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f000 8151 	beq.w	8008fc8 <DNS_ParseDNSReply+0x734>
                            {
                                pxAnswer = ( ( LLMNRAnswer_t * ) xSet.pucByte );
 8008d26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008d2a:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
                                /* We leave 'usIdentifier' and 'usQuestions' untouched */
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_RESPONSE ); /* Set the response flag */
 8008d2e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008d32:	3302      	adds	r3, #2
 8008d34:	2280      	movs	r2, #128	@ 0x80
 8008d36:	701a      	strb	r2, [r3, #0]
 8008d38:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008d3c:	3303      	adds	r3, #3
 8008d3e:	2200      	movs	r2, #0
 8008d40:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );                        /* Provide a single answer */
 8008d42:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008d46:	3306      	adds	r3, #6
 8008d48:	2200      	movs	r2, #0
 8008d4a:	701a      	strb	r2, [r3, #0]
 8008d4c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008d50:	3307      	adds	r3, #7
 8008d52:	2201      	movs	r2, #1
 8008d54:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAuthorityRRs, 0 );                   /* No authority */
 8008d56:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008d5a:	3308      	adds	r3, #8
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	701a      	strb	r2, [r3, #0]
 8008d60:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008d64:	3309      	adds	r3, #9
 8008d66:	2200      	movs	r2, #0
 8008d68:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );                  /* No additional info */
 8008d6a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008d6e:	330a      	adds	r3, #10
 8008d70:	2200      	movs	r2, #0
 8008d72:	701a      	strb	r2, [r3, #0]
 8008d74:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008d78:	330b      	adds	r3, #11
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	701a      	strb	r2, [r3, #0]

                                pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 8008d7e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008d82:	22c0      	movs	r2, #192	@ 0xc0
 8008d84:	701a      	strb	r2, [r3, #0]
                                pxAnswer->ucNameOffset = ( uint8_t ) ( xSet.pcRequestedName - ( char * ) pucNewBuffer );
 8008d86:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8008d8a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8008d8e:	1ad3      	subs	r3, r2, r3
 8008d90:	b2da      	uxtb	r2, r3
 8008d92:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008d96:	705a      	strb	r2, [r3, #1]

                                vSetField16( pxAnswer, LLMNRAnswer_t, usType, xSet.usType );  /* Type A or AAAA: host */
 8008d98:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008d9c:	0a1b      	lsrs	r3, r3, #8
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008da4:	3302      	adds	r3, #2
 8008da6:	b2d2      	uxtb	r2, r2
 8008da8:	701a      	strb	r2, [r3, #0]
 8008daa:	f8b7 2158 	ldrh.w	r2, [r7, #344]	@ 0x158
 8008dae:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008db2:	3303      	adds	r3, #3
 8008db4:	b2d2      	uxtb	r2, r2
 8008db6:	701a      	strb	r2, [r3, #0]
                                vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN ); /* 1: Class IN */
 8008db8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008dbc:	3304      	adds	r3, #4
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	701a      	strb	r2, [r3, #0]
 8008dc2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008dc6:	3305      	adds	r3, #5
 8008dc8:	2201      	movs	r2, #1
 8008dca:	701a      	strb	r2, [r3, #0]
                                vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 8008dcc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008dd0:	3306      	adds	r3, #6
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	701a      	strb	r2, [r3, #0]
 8008dd6:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008dda:	3307      	adds	r3, #7
 8008ddc:	2200      	movs	r2, #0
 8008dde:	701a      	strb	r2, [r3, #0]
 8008de0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008de4:	3308      	adds	r3, #8
 8008de6:	2201      	movs	r2, #1
 8008de8:	701a      	strb	r2, [r3, #0]
 8008dea:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008dee:	3309      	adds	r3, #9
 8008df0:	222c      	movs	r2, #44	@ 0x2c
 8008df2:	701a      	strb	r2, [r3, #0]

                                usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( xSet.pucByte - pucNewBuffer ) );
 8008df4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008df8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8008dfc:	1ad3      	subs	r3, r2, r3
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	3310      	adds	r3, #16
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba

                                #if ( ipconfigUSE_IPv6 != 0 )
                                    if( xSet.usType == dnsTYPE_AAAA_HOST )
 8008e08:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008e0c:	2b1c      	cmp	r3, #28
 8008e0e:	d131      	bne.n	8008e74 <DNS_ParseDNSReply+0x5e0>
                                    {
                                        size_t uxDistance;
                                        vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, ipSIZE_OF_IPv6_ADDRESS );
 8008e10:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008e14:	330a      	adds	r3, #10
 8008e16:	2200      	movs	r2, #0
 8008e18:	701a      	strb	r2, [r3, #0]
 8008e1a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008e1e:	330b      	adds	r3, #11
 8008e20:	2210      	movs	r2, #16
 8008e22:	701a      	strb	r2, [r3, #0]
                                        ( void ) memcpy( &( pxAnswer->ulIPAddress ), xEndPoint.ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8008e24:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008e28:	f103 020c 	add.w	r2, r3, #12
 8008e2c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008e30:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008e34:	4615      	mov	r5, r2
 8008e36:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 8008e3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008e3c:	6028      	str	r0, [r5, #0]
 8008e3e:	6069      	str	r1, [r5, #4]
 8008e40:	60aa      	str	r2, [r5, #8]
 8008e42:	60eb      	str	r3, [r5, #12]
                                        uxDistance = ( size_t ) ( xSet.pucByte - pucNewBuffer );
 8008e44:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008e48:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8008e4c:	1ad3      	subs	r3, r2, r3
 8008e4e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
                                        /* An extra 12 bytes will be sent compared to an A-record. */
                                        usLength = ( int16_t ) ( sizeof( *pxAnswer ) + uxDistance + ipSIZE_OF_IPv6_ADDRESS - sizeof( pxAnswer->ulIPAddress ) );
 8008e52:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	331c      	adds	r3, #28
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba
 8008e60:	e09a      	b.n	8008f98 <DNS_ParseDNSReply+0x704>
 8008e62:	bf00      	nop
 8008e64:	080250f0 	.word	0x080250f0
 8008e68:	08025124 	.word	0x08025124
 8008e6c:	08025158 	.word	0x08025158
 8008e70:	08028018 	.word	0x08028018
                                    }
                                    else
                                #endif /* ( ipconfigUSE_IPv6 != 0 ) */
                                {
                                    size_t uxDistance;
                                    vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, ( uint16_t ) sizeof( pxAnswer->ulIPAddress ) );
 8008e74:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008e78:	330a      	adds	r3, #10
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	701a      	strb	r2, [r3, #0]
 8008e7e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008e82:	330b      	adds	r3, #11
 8008e84:	2204      	movs	r2, #4
 8008e86:	701a      	strb	r2, [r3, #0]
                                    vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( xEndPoint.ipv4_settings.ulIPAddress ) );
 8008e88:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008e8c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	061a      	lsls	r2, r3, #24
 8008e94:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008e98:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	021b      	lsls	r3, r3, #8
 8008ea0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008ea4:	431a      	orrs	r2, r3
 8008ea6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008eaa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	0a1b      	lsrs	r3, r3, #8
 8008eb2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008eb6:	431a      	orrs	r2, r3
 8008eb8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008ebc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	0e1b      	lsrs	r3, r3, #24
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	0e1a      	lsrs	r2, r3, #24
 8008ec8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008ecc:	330c      	adds	r3, #12
 8008ece:	b2d2      	uxtb	r2, r2
 8008ed0:	701a      	strb	r2, [r3, #0]
 8008ed2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008ed6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	061a      	lsls	r2, r3, #24
 8008ede:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008ee2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	021b      	lsls	r3, r3, #8
 8008eea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008eee:	431a      	orrs	r2, r3
 8008ef0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008ef4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	0a1b      	lsrs	r3, r3, #8
 8008efc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008f00:	431a      	orrs	r2, r3
 8008f02:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008f06:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	0e1b      	lsrs	r3, r3, #24
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	0c1a      	lsrs	r2, r3, #16
 8008f12:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008f16:	330d      	adds	r3, #13
 8008f18:	b2d2      	uxtb	r2, r2
 8008f1a:	701a      	strb	r2, [r3, #0]
 8008f1c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008f20:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	061a      	lsls	r2, r3, #24
 8008f28:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008f2c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	021b      	lsls	r3, r3, #8
 8008f34:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008f38:	431a      	orrs	r2, r3
 8008f3a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008f3e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	0a1b      	lsrs	r3, r3, #8
 8008f46:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008f4a:	431a      	orrs	r2, r3
 8008f4c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008f50:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	0e1b      	lsrs	r3, r3, #24
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	0a1a      	lsrs	r2, r3, #8
 8008f5c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008f60:	330e      	adds	r3, #14
 8008f62:	b2d2      	uxtb	r2, r2
 8008f64:	701a      	strb	r2, [r3, #0]
 8008f66:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008f6a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	0e1a      	lsrs	r2, r3, #24
 8008f72:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008f76:	330f      	adds	r3, #15
 8008f78:	b2d2      	uxtb	r2, r2
 8008f7a:	701a      	strb	r2, [r3, #0]
                                    uxDistance = ( size_t ) ( xSet.pucByte - pucNewBuffer );
 8008f7c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008f80:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
                                    usLength = ( int16_t ) ( sizeof( *pxAnswer ) + uxDistance );
 8008f8a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	3310      	adds	r3, #16
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba
                                }

                                prepareReplyDNSMessage( pxNetworkBuffer, usLength );
 8008f98:	f9b7 31ba 	ldrsh.w	r3, [r7, #442]	@ 0x1ba
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8008fa2:	f000 fa21 	bl	80093e8 <prepareReplyDNSMessage>
                                /* This function will fill in the eth addresses and send the packet */
                                vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8008fac:	f001 f924 	bl	800a1f8 <vReturnEthernetFrame>

                                if( pxNewBuffer != NULL )
 8008fb0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d007      	beq.n	8008fc8 <DNS_ParseDNSReply+0x734>
                                {
                                    vReleaseNetworkBufferAndDescriptor( pxNewBuffer );
 8008fb8:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 8008fbc:	f00e fd4a 	bl	8017a54 <vReleaseNetworkBufferAndDescriptor>
 8008fc0:	e002      	b.n	8008fc8 <DNS_ParseDNSReply+0x734>
                    break;
 8008fc2:	bf00      	nop
 8008fc4:	e000      	b.n	8008fc8 <DNS_ParseDNSReply+0x734>
                            break;
 8008fc6:	bf00      	nop
                #endif /* ipconfigUSE_LLMNR == 1 */
                ( void ) uxBytesRead;
            } while( ipFALSE_BOOL );
        }

        if( xReturn == pdFALSE )
 8008fc8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d103      	bne.n	8008fd8 <DNS_ParseDNSReply+0x744>
        {
            /* There was an error while parsing the DNS response. Return error code. */
            ulIPAddress = ( uint32_t ) dnsPARSE_ERROR;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8008fd6:	e009      	b.n	8008fec <DNS_ParseDNSReply+0x758>
        }
        else if( xExpected == pdFALSE )
 8008fd8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008fdc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d102      	bne.n	8008fec <DNS_ParseDNSReply+0x758>
        {
            /* Do not return a valid IP-address in case the reply was not expected. */
            ulIPAddress = 0U;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        else
        {
            /* The IP-address found will be returned. */
        }

        return ulIPAddress;
 8008fec:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
    }
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bdb0      	pop	{r4, r5, r7, pc}
 8008ffa:	bf00      	nop

08008ffc <parseDNSAnswer>:
 * @return pdTRUE when successful, otherwise pdFALSE.
 */
    uint32_t parseDNSAnswer( ParseSet_t * pxSet,
                             struct freertos_addrinfo ** ppxAddressInfo,
                             size_t * uxBytesRead )
    {
 8008ffc:	b590      	push	{r4, r7, lr}
 8008ffe:	b0a7      	sub	sp, #156	@ 0x9c
 8009000:	af02      	add	r7, sp, #8
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	607a      	str	r2, [r7, #4]
        uint16_t x;
        size_t uxResult;
        uint32_t ulReturnIPAddress = 0U;
 8009008:	2300      	movs	r3, #0
 800900a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        const uint16_t usCount = ( uint16_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 800900e:	2304      	movs	r3, #4
 8009010:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
        BaseType_t xReturn = pdTRUE;
 8009014:	2301      	movs	r3, #1
 8009016:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        const DNSAnswerRecord_t * pxDNSAnswerRecord;
        IPv46_Address_t xIP_Address;

        struct freertos_addrinfo * pxNewAddress = NULL;
 800901a:	2300      	movs	r3, #0
 800901c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

        for( x = 0U; x < pxSet->usAnswers; x++ )
 8009020:	2300      	movs	r3, #0
 8009022:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8009026:	e1c1      	b.n	80093ac <parseDNSAnswer+0x3b0>
        {
            BaseType_t xDoAccept = pdFALSE;
 8009028:	2300      	movs	r3, #0
 800902a:	67fb      	str	r3, [r7, #124]	@ 0x7c

            if( pxSet->usNumARecordsStored >= usCount )
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009030:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8009034:	429a      	cmp	r2, r3
 8009036:	f240 81c1 	bls.w	80093bc <parseDNSAnswer+0x3c0>
            {
                /* Only count ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY number of records. */
                break;
            }

            uxResult = DNS_SkipNameField( pxSet->pucByte,
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	68da      	ldr	r2, [r3, #12]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	695b      	ldr	r3, [r3, #20]
 8009042:	4619      	mov	r1, r3
 8009044:	4610      	mov	r0, r2
 8009046:	f7ff fbcf 	bl	80087e8 <DNS_SkipNameField>
 800904a:	6778      	str	r0, [r7, #116]	@ 0x74
                                          pxSet->uxSourceBytesRemaining );

            /* Check for a malformed response. */
            if( uxResult == 0U )
 800904c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800904e:	2b00      	cmp	r3, #0
 8009050:	d103      	bne.n	800905a <parseDNSAnswer+0x5e>
            {
                xReturn = pdFALSE;
 8009052:	2300      	movs	r3, #0
 8009054:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 8009058:	e1b1      	b.n	80093be <parseDNSAnswer+0x3c2>
            }

            if( uxBytesRead != NULL )
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d005      	beq.n	800906c <parseDNSAnswer+0x70>
            {
                *uxBytesRead += uxResult;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009066:	441a      	add	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	601a      	str	r2, [r3, #0]
            }

            pxSet->pucByte = &( pxSet->pucByte[ uxResult ] );
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	68da      	ldr	r2, [r3, #12]
 8009070:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009072:	441a      	add	r2, r3
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	60da      	str	r2, [r3, #12]
            pxSet->uxSourceBytesRemaining -= uxResult;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	695a      	ldr	r2, [r3, #20]
 800907c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800907e:	1ad2      	subs	r2, r2, r3
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	615a      	str	r2, [r3, #20]

            /* Is there enough data for an IPv4 A record answer and, if so,
             * is this an A record? */
            if( pxSet->uxSourceBytesRemaining < sizeof( uint16_t ) )
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	695b      	ldr	r3, [r3, #20]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d803      	bhi.n	8009094 <parseDNSAnswer+0x98>
            {
                xReturn = pdFALSE;
 800908c:	2300      	movs	r3, #0
 800908e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 8009092:	e194      	b.n	80093be <parseDNSAnswer+0x3c2>
            }

            pxSet->usType = usChar2u16( pxSet->pucByte );
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	4618      	mov	r0, r3
 800909a:	f001 ff5a 	bl	800af52 <usChar2u16>
 800909e:	4603      	mov	r3, r0
 80090a0:	461a      	mov	r2, r3
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	831a      	strh	r2, [r3, #24]

            if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	8b1b      	ldrh	r3, [r3, #24]
 80090aa:	2b1c      	cmp	r3, #28
 80090ac:	d10c      	bne.n	80090c8 <parseDNSAnswer+0xcc>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv6_ADDRESS;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2210      	movs	r2, #16
 80090b2:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	695a      	ldr	r2, [r3, #20]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6a1b      	ldr	r3, [r3, #32]
 80090bc:	330a      	adds	r3, #10
 80090be:	429a      	cmp	r2, r3
 80090c0:	d323      	bcc.n	800910a <parseDNSAnswer+0x10e>
                {
                    xDoAccept = pdTRUE;
 80090c2:	2301      	movs	r3, #1
 80090c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80090c6:	e020      	b.n	800910a <parseDNSAnswer+0x10e>
                }
            }
            else if( pxSet->usType == ( uint16_t ) dnsTYPE_A_HOST )
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	8b1b      	ldrh	r3, [r3, #24]
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d11c      	bne.n	800910a <parseDNSAnswer+0x10e>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv4_ADDRESS;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2204      	movs	r2, #4
 80090d4:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	695a      	ldr	r2, [r3, #20]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6a1b      	ldr	r3, [r3, #32]
 80090de:	330a      	adds	r3, #10
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d312      	bcc.n	800910a <parseDNSAnswer+0x10e>
                     * invoke the user callback and also store this invalid address in our cache. */
                    void * pvCopyDest;
                    const void * pvCopySource;
                    uint32_t ulTestAddress;

                    pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	330a      	adds	r3, #10
 80090ea:	673b      	str	r3, [r7, #112]	@ 0x70
                    pvCopyDest = &( ulTestAddress );
 80090ec:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80090f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	6a1b      	ldr	r3, [r3, #32]
 80090f6:	461a      	mov	r2, r3
 80090f8:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80090fa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80090fc:	f019 fd6e 	bl	8022bdc <memcpy>

                    if( ulTestAddress != 0U )
 8009100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009102:	2b00      	cmp	r3, #0
 8009104:	d001      	beq.n	800910a <parseDNSAnswer+0x10e>
                    {
                        xDoAccept = pdTRUE;
 8009106:	2301      	movs	r3, #1
 8009108:	67fb      	str	r3, [r7, #124]	@ 0x7c
            {
                /* Unknown host type, AAAA nor A.
                 * 'xDoAccept' was already initialised as pdFALSE. */
            }

            if( xDoAccept != pdFALSE )
 800910a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800910c:	2b00      	cmp	r3, #0
 800910e:	f000 810d 	beq.w	800932c <parseDNSAnswer+0x330>
                 * fields of the structure. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	66bb      	str	r3, [r7, #104]	@ 0x68

                /* Sanity check the data length of an IPv4 answer. */
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 8009118:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800911a:	891b      	ldrh	r3, [r3, #8]
 800911c:	b29b      	uxth	r3, r3
 800911e:	021b      	lsls	r3, r3, #8
 8009120:	b21a      	sxth	r2, r3
 8009122:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009124:	891b      	ldrh	r3, [r3, #8]
 8009126:	b29b      	uxth	r3, r3
 8009128:	0a1b      	lsrs	r3, r3, #8
 800912a:	b29b      	uxth	r3, r3
 800912c:	b21b      	sxth	r3, r3
 800912e:	4313      	orrs	r3, r2
 8009130:	b21a      	sxth	r2, r3
                    ( uint16_t ) pxSet->uxAddressLength )
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6a1b      	ldr	r3, [r3, #32]
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 8009136:	b21b      	sxth	r3, r3
 8009138:	429a      	cmp	r2, r3
 800913a:	f040 80d0 	bne.w	80092de <parseDNSAnswer+0x2e2>
                {
                    if( pxSet->uxAddressLength == ipSIZE_OF_IPv6_ADDRESS ) /*No check needed for pxSet->usType as uxAddressLength is set based on usType*/
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6a1b      	ldr	r3, [r3, #32]
 8009142:	2b10      	cmp	r3, #16
 8009144:	d11c      	bne.n	8009180 <parseDNSAnswer+0x184>
                    {
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
                                         &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] ),
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	330a      	adds	r3, #10
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
 800914c:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8009150:	6818      	ldr	r0, [r3, #0]
 8009152:	6859      	ldr	r1, [r3, #4]
 8009154:	689a      	ldr	r2, [r3, #8]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                                         ipSIZE_OF_IPv6_ADDRESS );

                        if( ppxAddressInfo != NULL )
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d009      	beq.n	8009174 <parseDNSAnswer+0x178>
                        {
                            pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET6, xIP_Address.xIPAddress.xIP_IPv6.ucBytes );
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	3334      	adds	r3, #52	@ 0x34
 8009164:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8009168:	210a      	movs	r1, #10
 800916a:	4618      	mov	r0, r3
 800916c:	f7fe fe24 	bl	8007db8 <pxNew_AddrInfo>
 8009170:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                        }

                        xIP_Address.xIs_IPv6 = pdTRUE;
 8009174:	2301      	movs	r3, #1
 8009176:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Return non-zero to inform the caller that a valid
                         * IPv6 address was found. */
                        pxSet->ulIPAddress = 1U;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2201      	movs	r2, #1
 800917c:	61da      	str	r2, [r3, #28]
 800917e:	e021      	b.n	80091c4 <parseDNSAnswer+0x1c8>
                        /*
                         * Use helper variables for memcpy() to remain
                         * compliant with MISRA Rule 21.15.  These should be
                         * optimized away.
                         */
                        pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	330a      	adds	r3, #10
 8009186:	663b      	str	r3, [r7, #96]	@ 0x60
                        pvCopyDest = &( pxSet->ulIPAddress );
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	331c      	adds	r3, #28
 800918c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	461a      	mov	r2, r3
 8009194:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009196:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8009198:	f019 fd20 	bl	8022bdc <memcpy>

                        if( ppxAddressInfo != NULL )
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00b      	beq.n	80091ba <parseDNSAnswer+0x1be>
                        {
                            const uint8_t * ucBytes = ( uint8_t * ) &( pxSet->ulIPAddress );
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	331c      	adds	r3, #28
 80091a6:	65bb      	str	r3, [r7, #88]	@ 0x58

                            pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET4, ucBytes );
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	3334      	adds	r3, #52	@ 0x34
 80091ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80091ae:	2102      	movs	r1, #2
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7fe fe01 	bl	8007db8 <pxNew_AddrInfo>
 80091b6:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                        }

                        xIP_Address.xIPAddress.ulIP_IPv4 = pxSet->ulIPAddress;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	69db      	ldr	r3, [r3, #28]
 80091be:	643b      	str	r3, [r7, #64]	@ 0x40
                        xIP_Address.xIs_IPv6 = pdFALSE;
 80091c0:	2300      	movs	r3, #0
 80091c2:	653b      	str	r3, [r7, #80]	@ 0x50
                    }

                    if( pxNewAddress != NULL )
 80091c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d013      	beq.n	80091f4 <parseDNSAnswer+0x1f8>
                    {
                        if( *( ppxAddressInfo ) == NULL )
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d104      	bne.n	80091de <parseDNSAnswer+0x1e2>
                        {
                            /* For the first address found. */
                            *( ppxAddressInfo ) = pxNewAddress;
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80091da:	601a      	str	r2, [r3, #0]
 80091dc:	e004      	b.n	80091e8 <parseDNSAnswer+0x1ec>
                        }
                        else
                        {
                            /* For the next address found. */
                            *( pxSet->ppxLastAddress ) = pxNewAddress;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80091e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80091e6:	601a      	str	r2, [r3, #0]
                        }

                        pxSet->ppxLastAddress = &( pxNewAddress->ai_next );
 80091e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80091ec:	f103 021c 	add.w	r2, r3, #28
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	649a      	str	r2, [r3, #72]	@ 0x48

                    #if ( ipconfigDNS_USE_CALLBACKS == 1 )
                    {
                        BaseType_t xCallbackResult;

                        xCallbackResult = xDNSDoCallback( pxSet, ( ppxAddressInfo != NULL ) ? *( ppxAddressInfo ) : NULL );
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d002      	beq.n	8009200 <parseDNSAnswer+0x204>
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	e000      	b.n	8009202 <parseDNSAnswer+0x206>
 8009200:	2300      	movs	r3, #0
 8009202:	4619      	mov	r1, r3
 8009204:	68f8      	ldr	r0, [r7, #12]
 8009206:	f7ff f979 	bl	80084fc <xDNSDoCallback>
 800920a:	6578      	str	r0, [r7, #84]	@ 0x54

                        /* See if any asynchronous call was made to FreeRTOS_gethostbyname_a() */
                        if( xCallbackResult != pdFALSE )
 800920c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800920e:	2b00      	cmp	r3, #0
 8009210:	d002      	beq.n	8009218 <parseDNSAnswer+0x21c>
                        {
                            /* This device has requested this DNS look-up.
                             * The result may be stored in the DNS cache. */
                            pxSet->xDoStore = pdTRUE;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2201      	movs	r2, #1
 8009216:	631a      	str	r2, [r3, #48]	@ 0x30
                    {
                        char cBuffer[ 40 ];

                        /* The reply will only be stored in the DNS cache when the
                         * request was issued by this device. */
                        if( pxSet->xDoStore != pdFALSE )
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800921c:	2b00      	cmp	r3, #0
 800921e:	d011      	beq.n	8009244 <parseDNSAnswer+0x248>
                        {
                            ( void ) FreeRTOS_dns_update(
                                pxSet->pcName,
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f103 0034 	add.w	r0, r3, #52	@ 0x34
                                &xIP_Address,
                                pxDNSAnswerRecord->ulTTL,
 8009226:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009228:	685a      	ldr	r2, [r3, #4]
                            ( void ) FreeRTOS_dns_update(
 800922a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800922e:	2300      	movs	r3, #0
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	2300      	movs	r3, #0
 8009234:	f7fe fe85 	bl	8007f42 <FreeRTOS_dns_update>
                                pdFALSE,
                                NULL );
                            pxSet->usNumARecordsStored++; /* Track # of A records stored */
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800923c:	3301      	adds	r3, #1
 800923e:	b29a      	uxth	r2, r3
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	849a      	strh	r2, [r3, #36]	@ 0x24
                        }

                        if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	8b1b      	ldrh	r3, [r3, #24]
 8009248:	2b1c      	cmp	r3, #28
 800924a:	d11f      	bne.n	800928c <parseDNSAnswer+0x290>
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6, ( const void * ) xIP_Address.xIPAddress.xIP_IPv6.ucBytes, cBuffer, sizeof( cBuffer ) );
 800924c:	f107 0214 	add.w	r2, r7, #20
 8009250:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8009254:	2328      	movs	r3, #40	@ 0x28
 8009256:	200a      	movs	r0, #10
 8009258:	f006 fb6c 	bl	800f934 <FreeRTOS_inet_ntop>
                            FreeRTOS_printf( ( "DNS[0x%04X]: The answer to '%s' (%s) will%s be stored\n",
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	881b      	ldrh	r3, [r3, #0]
 8009262:	b29b      	uxth	r3, r3
 8009264:	4618      	mov	r0, r3
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009270:	2b00      	cmp	r3, #0
 8009272:	d001      	beq.n	8009278 <parseDNSAnswer+0x27c>
 8009274:	4b58      	ldr	r3, [pc, #352]	@ (80093d8 <parseDNSAnswer+0x3dc>)
 8009276:	e000      	b.n	800927a <parseDNSAnswer+0x27e>
 8009278:	4b58      	ldr	r3, [pc, #352]	@ (80093dc <parseDNSAnswer+0x3e0>)
 800927a:	f107 0114 	add.w	r1, r7, #20
 800927e:	9300      	str	r3, [sp, #0]
 8009280:	460b      	mov	r3, r1
 8009282:	4601      	mov	r1, r0
 8009284:	4856      	ldr	r0, [pc, #344]	@ (80093e0 <parseDNSAnswer+0x3e4>)
 8009286:	f019 fa8d 	bl	80227a4 <lUDPLoggingPrintf>
 800928a:	e01f      	b.n	80092cc <parseDNSAnswer+0x2d0>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                        else
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
                                                         ( const void * ) &( pxSet->ulIPAddress ),
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f103 011c 	add.w	r1, r3, #28
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
 8009292:	f107 0214 	add.w	r2, r7, #20
 8009296:	2328      	movs	r3, #40	@ 0x28
 8009298:	2002      	movs	r0, #2
 800929a:	f006 fb4b 	bl	800f934 <FreeRTOS_inet_ntop>
                                                         cBuffer,
                                                         ( socklen_t ) sizeof( cBuffer ) );
                            /* Show what has happened. */
                            FreeRTOS_printf( ( "DNS[0x%04X]: The answer to '%s' (%s) will%s be stored\n",
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	881b      	ldrh	r3, [r3, #0]
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	4618      	mov	r0, r3
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d001      	beq.n	80092ba <parseDNSAnswer+0x2be>
 80092b6:	4b48      	ldr	r3, [pc, #288]	@ (80093d8 <parseDNSAnswer+0x3dc>)
 80092b8:	e000      	b.n	80092bc <parseDNSAnswer+0x2c0>
 80092ba:	4b48      	ldr	r3, [pc, #288]	@ (80093dc <parseDNSAnswer+0x3e0>)
 80092bc:	f107 0114 	add.w	r1, r7, #20
 80092c0:	9300      	str	r3, [sp, #0]
 80092c2:	460b      	mov	r3, r1
 80092c4:	4601      	mov	r1, r0
 80092c6:	4846      	ldr	r0, [pc, #280]	@ (80093e0 <parseDNSAnswer+0x3e4>)
 80092c8:	f019 fa6c 	bl	80227a4 <lUDPLoggingPrintf>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                    }
                    #endif /* ipconfigUSE_DNS_CACHE */

                    if( ulReturnIPAddress == 0U )
 80092cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d119      	bne.n	8009308 <parseDNSAnswer+0x30c>
                    {
                        /* Here pxSet->ulIPAddress should be not equal tp 0 since pxSet->ulIPAddress is copied from
                         * pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] and os verified to be non zero above. */
                        /* Remember the first IP-address that is found. */
                        ulReturnIPAddress = pxSet->ulIPAddress;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	69db      	ldr	r3, [r3, #28]
 80092d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80092dc:	e014      	b.n	8009308 <parseDNSAnswer+0x30c>
                    }
                }
                else
                {
                    FreeRTOS_printf( ( "DNS sanity check failed: %u != %u\n",
 80092de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80092e0:	891b      	ldrh	r3, [r3, #8]
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	021b      	lsls	r3, r3, #8
 80092e6:	b21a      	sxth	r2, r3
 80092e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80092ea:	891b      	ldrh	r3, [r3, #8]
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	0a1b      	lsrs	r3, r3, #8
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	b21b      	sxth	r3, r3
 80092f4:	4313      	orrs	r3, r2
 80092f6:	b21b      	sxth	r3, r3
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	4619      	mov	r1, r3
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6a1b      	ldr	r3, [r3, #32]
 8009300:	461a      	mov	r2, r3
 8009302:	4838      	ldr	r0, [pc, #224]	@ (80093e4 <parseDNSAnswer+0x3e8>)
 8009304:	f019 fa4e 	bl	80227a4 <lUDPLoggingPrintf>
                                       FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ),
                                       ( unsigned ) pxSet->uxAddressLength ) );
                }

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ] );
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	68da      	ldr	r2, [r3, #12]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6a1b      	ldr	r3, [r3, #32]
 8009310:	330a      	adds	r3, #10
 8009312:	441a      	add	r2, r3
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength );
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	695a      	ldr	r2, [r3, #20]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6a1b      	ldr	r3, [r3, #32]
 8009320:	1ad3      	subs	r3, r2, r3
 8009322:	f1a3 020a 	sub.w	r2, r3, #10
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	615a      	str	r2, [r3, #20]
 800932a:	e03a      	b.n	80093a2 <parseDNSAnswer+0x3a6>
            }
            else if( pxSet->uxSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) )
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	695b      	ldr	r3, [r3, #20]
 8009330:	2b09      	cmp	r3, #9
 8009332:	d936      	bls.n	80093a2 <parseDNSAnswer+0x3a6>
                /* Cast the response to DNSAnswerRecord for easy access to fields of the DNS response. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	66bb      	str	r3, [r7, #104]	@ 0x68

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	f103 020a 	add.w	r2, r3, #10
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= sizeof( DNSAnswerRecord_t );
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	695b      	ldr	r3, [r3, #20]
 800934a:	f1a3 020a 	sub.w	r2, r3, #10
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	615a      	str	r2, [r3, #20]

                /* Determine the length of the answer data from the header. */
                usDataLength = FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength );
 8009352:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009354:	891b      	ldrh	r3, [r3, #8]
 8009356:	b29b      	uxth	r3, r3
 8009358:	021b      	lsls	r3, r3, #8
 800935a:	b21a      	sxth	r2, r3
 800935c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800935e:	891b      	ldrh	r3, [r3, #8]
 8009360:	b29b      	uxth	r3, r3
 8009362:	0a1b      	lsrs	r3, r3, #8
 8009364:	b29b      	uxth	r3, r3
 8009366:	b21b      	sxth	r3, r3
 8009368:	4313      	orrs	r3, r2
 800936a:	b21b      	sxth	r3, r3
 800936c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                /* Jump over the answer. */
                if( pxSet->uxSourceBytesRemaining >= usDataLength )
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	695a      	ldr	r2, [r3, #20]
 8009374:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009378:	429a      	cmp	r2, r3
 800937a:	d30e      	bcc.n	800939a <parseDNSAnswer+0x39e>
                {
                    pxSet->pucByte = &( pxSet->pucByte[ usDataLength ] );
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	68da      	ldr	r2, [r3, #12]
 8009380:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009384:	441a      	add	r2, r3
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	60da      	str	r2, [r3, #12]
                    pxSet->uxSourceBytesRemaining -= usDataLength;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	695a      	ldr	r2, [r3, #20]
 800938e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009392:	1ad2      	subs	r2, r2, r3
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	615a      	str	r2, [r3, #20]
 8009398:	e003      	b.n	80093a2 <parseDNSAnswer+0x3a6>
                }
                else
                {
                    /* Malformed response. */
                    xReturn = pdFALSE;
 800939a:	2300      	movs	r3, #0
 800939c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                    break;
 80093a0:	e00d      	b.n	80093be <parseDNSAnswer+0x3c2>
        for( x = 0U; x < pxSet->usAnswers; x++ )
 80093a2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80093a6:	3301      	adds	r3, #1
 80093a8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	88db      	ldrh	r3, [r3, #6]
 80093b0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80093b4:	429a      	cmp	r2, r3
 80093b6:	f4ff ae37 	bcc.w	8009028 <parseDNSAnswer+0x2c>
 80093ba:	e000      	b.n	80093be <parseDNSAnswer+0x3c2>
                break;
 80093bc:	bf00      	nop
            {
                /* Do nothing */
            }
        }

        return ( xReturn != 0 ) ? ulReturnIPAddress : 0U;
 80093be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d002      	beq.n	80093cc <parseDNSAnswer+0x3d0>
 80093c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80093ca:	e000      	b.n	80093ce <parseDNSAnswer+0x3d2>
 80093cc:	2300      	movs	r3, #0
    }
 80093ce:	4618      	mov	r0, r3
 80093d0:	3794      	adds	r7, #148	@ 0x94
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd90      	pop	{r4, r7, pc}
 80093d6:	bf00      	nop
 80093d8:	08025188 	.word	0x08025188
 80093dc:	0802518c 	.word	0x0802518c
 80093e0:	08025194 	.word	0x08025194
 80093e4:	080251cc 	.word	0x080251cc

080093e8 <prepareReplyDNSMessage>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the DNS message.
 * @param[in] lNetLength The length of the DNS message.
 */
        void prepareReplyDNSMessage( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                     BaseType_t lNetLength )
        {
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b08c      	sub	sp, #48	@ 0x30
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]
            UDPPacket_t * pxUDPPacket;
            IPHeader_t * pxIPHeader;
            UDPHeader_t * pxUDPHeader;
            size_t uxDataLength;
            NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093f6:	62bb      	str	r3, [r7, #40]	@ 0x28
            const size_t uxIPHeaderLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 fffd 	bl	800a3f8 <uxIPHeaderSizePacket>
 80093fe:	6278      	str	r0, [r7, #36]	@ 0x24

            configASSERT( pxEndPoint != NULL );
 8009400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009402:	2b00      	cmp	r3, #0
 8009404:	d104      	bne.n	8009410 <prepareReplyDNSMessage+0x28>
 8009406:	f240 319f 	movw	r1, #927	@ 0x39f
 800940a:	4865      	ldr	r0, [pc, #404]	@ (80095a0 <prepareReplyDNSMessage+0x1b8>)
 800940c:	f7f8 fafc 	bl	8001a08 <vAssertCalled>
            pxUDPPacket = ( ( UDPPacket_t * )
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009414:	623b      	str	r3, [r7, #32]
                            pxNetworkBuffer->pucEthernetBuffer );
            pxIPHeader = &pxUDPPacket->xIPHeader;
 8009416:	6a3b      	ldr	r3, [r7, #32]
 8009418:	330e      	adds	r3, #14
 800941a:	61fb      	str	r3, [r7, #28]

            #if ( ipconfigUSE_IPv6 != 0 )
                if( ( ( uxIPHeaderLength == ipSIZE_OF_IPv6_HEADER ) && ( ( pxIPHeader->ucVersionHeaderLength & 0xf0U ) == 0x60U ) ) )
 800941c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800941e:	2b28      	cmp	r3, #40	@ 0x28
 8009420:	d150      	bne.n	80094c4 <prepareReplyDNSMessage+0xdc>
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800942a:	2b60      	cmp	r3, #96	@ 0x60
 800942c:	d14a      	bne.n	80094c4 <prepareReplyDNSMessage+0xdc>
                {
                    UDPPacket_IPv6_t * xUDPPacket_IPv6;
                    IPHeader_IPv6_t * pxIPHeader_IPv6;

                    xUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009432:	61bb      	str	r3, [r7, #24]
                    pxIPHeader_IPv6 = &( xUDPPacket_IPv6->xIPHeader );
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	330e      	adds	r3, #14
 8009438:	617b      	str	r3, [r7, #20]
                    pxUDPHeader = &xUDPPacket_IPv6->xUDPHeader;
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	3336      	adds	r3, #54	@ 0x36
 800943e:	613b      	str	r3, [r7, #16]

                    pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	b29b      	uxth	r3, r3
 8009444:	3308      	adds	r3, #8
 8009446:	b29b      	uxth	r3, r3
 8009448:	021b      	lsls	r3, r3, #8
 800944a:	b29a      	uxth	r2, r3
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	b29b      	uxth	r3, r3
 8009450:	3308      	adds	r3, #8
 8009452:	0a1b      	lsrs	r3, r3, #8
 8009454:	b29b      	uxth	r3, r3
 8009456:	4313      	orrs	r3, r2
 8009458:	b29a      	uxth	r2, r3
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	809a      	strh	r2, [r3, #4]

                    {
                        ( void ) memcpy( pxIPHeader_IPv6->xDestinationAddress.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	f103 0018 	add.w	r0, r3, #24
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	3308      	adds	r3, #8
 8009468:	2210      	movs	r2, #16
 800946a:	4619      	mov	r1, r3
 800946c:	f019 fbb6 	bl	8022bdc <memcpy>
                        ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	f103 0008 	add.w	r0, r3, #8
 8009476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009478:	3338      	adds	r3, #56	@ 0x38
 800947a:	2210      	movs	r2, #16
 800947c:	4619      	mov	r1, r3
 800947e:	f019 fbad 	bl	8022bdc <memcpy>
                    }

                    xUDPPacket_IPv6->xUDPHeader.usLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	b29b      	uxth	r3, r3
 8009486:	3308      	adds	r3, #8
 8009488:	b29b      	uxth	r3, r3
 800948a:	021b      	lsls	r3, r3, #8
 800948c:	b29a      	uxth	r2, r3
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	b29b      	uxth	r3, r3
 8009492:	3308      	adds	r3, #8
 8009494:	0a1b      	lsrs	r3, r3, #8
 8009496:	b29b      	uxth	r3, r3
 8009498:	4313      	orrs	r3, r2
 800949a:	b29a      	uxth	r2, r3
 800949c:	69bb      	ldr	r3, [r7, #24]
 800949e:	875a      	strh	r2, [r3, #58]	@ 0x3a
                    vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	781a      	ldrb	r2, [r3, #0]
 80094a4:	785b      	ldrb	r3, [r3, #1]
 80094a6:	021b      	lsls	r3, r3, #8
 80094a8:	4313      	orrs	r3, r2
 80094aa:	81fb      	strh	r3, [r7, #14]
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	885b      	ldrh	r3, [r3, #2]
 80094b0:	b29a      	uxth	r2, r3
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	801a      	strh	r2, [r3, #0]
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	89fa      	ldrh	r2, [r7, #14]
 80094ba:	805a      	strh	r2, [r3, #2]
                    uxDataLength = ( size_t ) lNetLength + ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	333e      	adds	r3, #62	@ 0x3e
 80094c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                {
 80094c2:	e066      	b.n	8009592 <prepareReplyDNSMessage+0x1aa>
                }
                else
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
            {
                pxUDPHeader = &pxUDPPacket->xUDPHeader;
 80094c4:	6a3b      	ldr	r3, [r7, #32]
 80094c6:	3322      	adds	r3, #34	@ 0x22
 80094c8:	613b      	str	r3, [r7, #16]
                /* HT: started using defines like 'ipSIZE_OF_xxx' */
                pxIPHeader->usLength = FreeRTOS_htons( ( uint16_t ) lNetLength +
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	b29a      	uxth	r2, r3
 80094ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	4413      	add	r3, r2
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	3308      	adds	r3, #8
 80094d8:	b29b      	uxth	r3, r3
 80094da:	021b      	lsls	r3, r3, #8
 80094dc:	b29a      	uxth	r2, r3
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	4619      	mov	r1, r3
 80094e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e6:	440b      	add	r3, r1
 80094e8:	3308      	adds	r3, #8
 80094ea:	0a1b      	lsrs	r3, r3, #8
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	4313      	orrs	r3, r2
 80094f0:	b29a      	uxth	r2, r3
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	805a      	strh	r2, [r3, #2]
                                                       uxIPHeaderLength +
                                                       ipSIZE_OF_UDP_HEADER );

                /* HT:endian: should not be translated, copying from packet to packet */
                if( pxIPHeader->ulDestinationIPAddress == ipMDNS_IP_ADDRESS )
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	4a2a      	ldr	r2, [pc, #168]	@ (80095a4 <prepareReplyDNSMessage+0x1bc>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d103      	bne.n	8009508 <prepareReplyDNSMessage+0x120>
                {
                    pxIPHeader->ucTimeToLive = ipMDNS_TIME_TO_LIVE;
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	22ff      	movs	r2, #255	@ 0xff
 8009504:	721a      	strb	r2, [r3, #8]
 8009506:	e006      	b.n	8009516 <prepareReplyDNSMessage+0x12e>
                }
                else
                {
                    pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	68da      	ldr	r2, [r3, #12]
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	611a      	str	r2, [r3, #16]
                    pxIPHeader->ucTimeToLive = ipconfigUDP_TIME_TO_LIVE;
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	2280      	movs	r2, #128	@ 0x80
 8009514:	721a      	strb	r2, [r3, #8]
                }

                pxIPHeader->ulSourceIPAddress = pxEndPoint->ipv4_settings.ulIPAddress;
 8009516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	60da      	str	r2, [r3, #12]
                pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 800951e:	4b22      	ldr	r3, [pc, #136]	@ (80095a8 <prepareReplyDNSMessage+0x1c0>)
 8009520:	881b      	ldrh	r3, [r3, #0]
 8009522:	021b      	lsls	r3, r3, #8
 8009524:	b21a      	sxth	r2, r3
 8009526:	4b20      	ldr	r3, [pc, #128]	@ (80095a8 <prepareReplyDNSMessage+0x1c0>)
 8009528:	881b      	ldrh	r3, [r3, #0]
 800952a:	0a1b      	lsrs	r3, r3, #8
 800952c:	b29b      	uxth	r3, r3
 800952e:	b21b      	sxth	r3, r3
 8009530:	4313      	orrs	r3, r2
 8009532:	b21b      	sxth	r3, r3
 8009534:	b29a      	uxth	r2, r3
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	809a      	strh	r2, [r3, #4]
                 * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
                 */
                #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                    pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
                #else
                    pxIPHeader->usFragmentOffset = 0U;
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	2200      	movs	r2, #0
 800953e:	719a      	strb	r2, [r3, #6]
 8009540:	2200      	movs	r2, #0
 8009542:	71da      	strb	r2, [r3, #7]
                #endif
                usPacketIdentifier++;
 8009544:	4b18      	ldr	r3, [pc, #96]	@ (80095a8 <prepareReplyDNSMessage+0x1c0>)
 8009546:	881b      	ldrh	r3, [r3, #0]
 8009548:	3301      	adds	r3, #1
 800954a:	b29a      	uxth	r2, r3
 800954c:	4b16      	ldr	r3, [pc, #88]	@ (80095a8 <prepareReplyDNSMessage+0x1c0>)
 800954e:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = FreeRTOS_htons( ( uint32_t ) lNetLength +
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	b29b      	uxth	r3, r3
 8009554:	3308      	adds	r3, #8
 8009556:	b29b      	uxth	r3, r3
 8009558:	021b      	lsls	r3, r3, #8
 800955a:	b29a      	uxth	r2, r3
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	3308      	adds	r3, #8
 8009560:	0a1b      	lsrs	r3, r3, #8
 8009562:	b29b      	uxth	r3, r3
 8009564:	4313      	orrs	r3, r2
 8009566:	b29a      	uxth	r2, r3
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	809a      	strh	r2, [r3, #4]
                                                        ipSIZE_OF_UDP_HEADER );
                vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	781a      	ldrb	r2, [r3, #0]
 8009570:	785b      	ldrb	r3, [r3, #1]
 8009572:	021b      	lsls	r3, r3, #8
 8009574:	4313      	orrs	r3, r2
 8009576:	81bb      	strh	r3, [r7, #12]
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	885b      	ldrh	r3, [r3, #2]
 800957c:	b29a      	uxth	r2, r3
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	801a      	strh	r2, [r3, #0]
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	89ba      	ldrh	r2, [r7, #12]
 8009586:	805a      	strh	r2, [r3, #2]

                /* Important: tell NIC driver how many bytes must be sent */
                uxDataLength = ( ( size_t ) lNetLength ) + uxIPHeaderLength + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 8009588:	683a      	ldr	r2, [r7, #0]
 800958a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800958c:	4413      	add	r3, r2
 800958e:	3316      	adds	r3, #22
 8009590:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxUDPPacket, uxDataLength, pdTRUE );
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            /* Important: tell NIC driver how many bytes must be sent */
            pxNetworkBuffer->xDataLength = uxDataLength;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009596:	629a      	str	r2, [r3, #40]	@ 0x28
        }
 8009598:	bf00      	nop
 800959a:	3730      	adds	r7, #48	@ 0x30
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	08025124 	.word	0x08025124
 80095a4:	fb0000e0 	.word	0xfb0000e0
 80095a8:	200011a4 	.word	0x200011a4

080095ac <ProcessICMPPacket>:
 *
 * @return eReleaseBuffer when the message buffer should be released, or eReturnEthernetFrame
 *                        when the packet should be returned.
 */
    eFrameProcessingResult_t ProcessICMPPacket( const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 80095b4:	2300      	movs	r3, #0
 80095b6:	73fb      	strb	r3, [r7, #15]

        iptraceICMP_PACKET_RECEIVED();

        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) );
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095bc:	2b29      	cmp	r3, #41	@ 0x29
 80095be:	d803      	bhi.n	80095c8 <ProcessICMPPacket+0x1c>
 80095c0:	2159      	movs	r1, #89	@ 0x59
 80095c2:	4811      	ldr	r0, [pc, #68]	@ (8009608 <ProcessICMPPacket+0x5c>)
 80095c4:	f7f8 fa20 	bl	8001a08 <vAssertCalled>

        if( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) )
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095cc:	2b29      	cmp	r3, #41	@ 0x29
 80095ce:	d915      	bls.n	80095fc <ProcessICMPPacket+0x50>
             * fields of ICMP packet. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            ICMPPacket_t * pxICMPPacket = ( ( ICMPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095d4:	60bb      	str	r3, [r7, #8]

            switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d008      	beq.n	80095f2 <ProcessICMPPacket+0x46>
 80095e0:	2b08      	cmp	r3, #8
 80095e2:	d10a      	bne.n	80095fa <ProcessICMPPacket+0x4e>
            {
                case ipICMP_ECHO_REQUEST:
                    #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )
                    {
                        eReturn = prvProcessICMPEchoRequest( pxICMPPacket, pxNetworkBuffer );
 80095e4:	6879      	ldr	r1, [r7, #4]
 80095e6:	68b8      	ldr	r0, [r7, #8]
 80095e8:	f000 f810 	bl	800960c <prvProcessICMPEchoRequest>
 80095ec:	4603      	mov	r3, r0
 80095ee:	73fb      	strb	r3, [r7, #15]
                    }
                    #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) */
                    break;
 80095f0:	e004      	b.n	80095fc <ProcessICMPPacket+0x50>

                case ipICMP_ECHO_REPLY:
                    #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                    {
                        prvProcessICMPEchoReply( pxICMPPacket );
 80095f2:	68b8      	ldr	r0, [r7, #8]
 80095f4:	f000 f836 	bl	8009664 <prvProcessICMPEchoReply>
                    }
                    #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
                    break;
 80095f8:	e000      	b.n	80095fc <ProcessICMPPacket+0x50>

                default:
                    /* Only ICMP echo packets are handled. */
                    break;
 80095fa:	bf00      	nop
            }
        }

        return eReturn;
 80095fc:	7bfb      	ldrb	r3, [r7, #15]
    }
 80095fe:	4618      	mov	r0, r3
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	080251f0 	.word	0x080251f0

0800960c <prvProcessICMPEchoRequest>:
 * @param pxNetworkBuffer Pointer to the network buffer containing the ICMP packet.
 * @returns Function returns eReturnEthernetFrame.
 */
    static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket,
                                                               const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 800960c:	b480      	push	{r7}
 800960e:	b087      	sub	sp, #28
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
        ICMPHeader_t * pxICMPHeader;
        IPHeader_t * pxIPHeader;
        uint32_t ulIPAddress;

        pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	3322      	adds	r3, #34	@ 0x22
 800961a:	617b      	str	r3, [r7, #20]
        pxIPHeader = &( pxICMPPacket->xIPHeader );
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	330e      	adds	r3, #14
 8009620:	613b      	str	r3, [r7, #16]

        /* The checksum can be checked here - but a ping reply should be
         * returned even if the checksum is incorrect so the other end can
         * tell that the ping was received - even if the ping reply contains
         * invalid data. */
        pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	2200      	movs	r2, #0
 8009626:	701a      	strb	r2, [r3, #0]
        ulIPAddress = pxIPHeader->ulDestinationIPAddress;
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	691b      	ldr	r3, [r3, #16]
 800962c:	60fb      	str	r3, [r7, #12]
        pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	68da      	ldr	r2, [r3, #12]
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	611a      	str	r2, [r3, #16]
        pxIPHeader->ulSourceIPAddress = ulIPAddress;
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	68fa      	ldr	r2, [r7, #12]
 800963a:	60da      	str	r2, [r3, #12]
        /* Update the TTL field. */
        pxIPHeader->ucTimeToLive = ipconfigICMP_TIME_TO_LIVE;
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	2240      	movs	r2, #64	@ 0x40
 8009640:	721a      	strb	r2, [r3, #8]
         * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
         */
        #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
            pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
        #else
            pxIPHeader->usFragmentOffset = 0U;
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	2200      	movs	r2, #0
 8009646:	719a      	strb	r2, [r3, #6]
 8009648:	2200      	movs	r2, #0
 800964a:	71da      	strb	r2, [r3, #7]
            /* Just to prevent compiler warnings about unused parameters. */
            ( void ) pxNetworkBuffer;

            /* Many EMAC peripherals will only calculate the ICMP checksum
             * correctly if the field is nulled beforehand. */
            pxICMPHeader->usChecksum = 0U;
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	2200      	movs	r2, #0
 8009650:	709a      	strb	r2, [r3, #2]
 8009652:	2200      	movs	r2, #0
 8009654:	70da      	strb	r2, [r3, #3]
        }
        #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

        return eReturnEthernetFrame;
 8009656:	2302      	movs	r3, #2
    }
 8009658:	4618      	mov	r0, r3
 800965a:	371c      	adds	r7, #28
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <prvProcessICMPEchoReply>:
 * @brief Process an ICMP echo reply.
 *
 * @param[in] pxICMPPacket The IP packet that contains the ICMP message.
 */
    static void prvProcessICMPEchoReply( ICMPPacket_t * const pxICMPPacket )
    {
 8009664:	b580      	push	{r7, lr}
 8009666:	b086      	sub	sp, #24
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
        ePingReplyStatus_t eStatus = eSuccess;
 800966c:	2300      	movs	r3, #0
 800966e:	75fb      	strb	r3, [r7, #23]
        uint16_t usDataLength, usCount;
        uint8_t * pucByte;

        /* Find the total length of the IP packet. */
        usDataLength = pxICMPPacket->xIPHeader.usLength;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	7c1a      	ldrb	r2, [r3, #16]
 8009674:	7c5b      	ldrb	r3, [r3, #17]
 8009676:	021b      	lsls	r3, r3, #8
 8009678:	4313      	orrs	r3, r2
 800967a:	81fb      	strh	r3, [r7, #14]
        usDataLength = FreeRTOS_ntohs( usDataLength );
 800967c:	89fb      	ldrh	r3, [r7, #14]
 800967e:	021b      	lsls	r3, r3, #8
 8009680:	b21a      	sxth	r2, r3
 8009682:	89fb      	ldrh	r3, [r7, #14]
 8009684:	0a1b      	lsrs	r3, r3, #8
 8009686:	b29b      	uxth	r3, r3
 8009688:	b21b      	sxth	r3, r3
 800968a:	4313      	orrs	r3, r2
 800968c:	b21b      	sxth	r3, r3
 800968e:	81fb      	strh	r3, [r7, #14]

        /* Remove the length of the IP headers to obtain the length of the ICMP
         * message itself. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_IPv4_HEADER );
 8009690:	89fb      	ldrh	r3, [r7, #14]
 8009692:	3b14      	subs	r3, #20
 8009694:	81fb      	strh	r3, [r7, #14]

        /* Remove the length of the ICMP header, to obtain the length of
         * data contained in the ping. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_ICMPv4_HEADER );
 8009696:	89fb      	ldrh	r3, [r7, #14]
 8009698:	3b08      	subs	r3, #8
 800969a:	81fb      	strh	r3, [r7, #14]

        /* Checksum has already been checked before in prvProcessIPPacket */

        /* Find the first byte of the data within the ICMP packet. */
        pucByte = ( uint8_t * ) pxICMPPacket;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	613b      	str	r3, [r7, #16]
        pucByte = &( pucByte[ sizeof( ICMPPacket_t ) ] );
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	332a      	adds	r3, #42	@ 0x2a
 80096a4:	613b      	str	r3, [r7, #16]

        /* Check each byte. */
        for( usCount = 0; usCount < usDataLength; usCount++ )
 80096a6:	2300      	movs	r3, #0
 80096a8:	82bb      	strh	r3, [r7, #20]
 80096aa:	e00c      	b.n	80096c6 <prvProcessICMPEchoReply+0x62>
        {
            if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	2b78      	cmp	r3, #120	@ 0x78
 80096b2:	d002      	beq.n	80096ba <prvProcessICMPEchoReply+0x56>
            {
                eStatus = eInvalidData;
 80096b4:	2302      	movs	r3, #2
 80096b6:	75fb      	strb	r3, [r7, #23]
                break;
 80096b8:	e009      	b.n	80096ce <prvProcessICMPEchoReply+0x6a>
            }

            pucByte++;
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	3301      	adds	r3, #1
 80096be:	613b      	str	r3, [r7, #16]
        for( usCount = 0; usCount < usDataLength; usCount++ )
 80096c0:	8abb      	ldrh	r3, [r7, #20]
 80096c2:	3301      	adds	r3, #1
 80096c4:	82bb      	strh	r3, [r7, #20]
 80096c6:	8aba      	ldrh	r2, [r7, #20]
 80096c8:	89fb      	ldrh	r3, [r7, #14]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d3ee      	bcc.n	80096ac <prvProcessICMPEchoReply+0x48>
        }

        /* Call back into the application to pass it the result. */
        vApplicationPingReplyHook( eStatus, pxICMPPacket->xICMPHeader.usIdentifier );
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80096d2:	b29a      	uxth	r2, r3
 80096d4:	7dfb      	ldrb	r3, [r7, #23]
 80096d6:	4611      	mov	r1, r2
 80096d8:	4618      	mov	r0, r3
 80096da:	f7f8 fa4b 	bl	8001b74 <vApplicationPingReplyHook>
    }
 80096de:	bf00      	nop
 80096e0:	3718      	adds	r7, #24
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
	...

080096e8 <prvIPTask>:

/* MISRA Ref 8.13.1 [Not decorating a pointer to const parameter with const] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-813 */
/* coverity[misra_c_2012_rule_8_13_violation] */
static void prvIPTask( void * pvParameters )
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
    /* Just to prevent compiler warnings about unused parameters. */
    ( void ) pvParameters;

    prvIPTask_Initialise();
 80096f0:	f000 f90e 	bl	8009910 <prvIPTask_Initialise>

    FreeRTOS_debug_printf( ( "prvIPTask started\n" ) );
 80096f4:	4802      	ldr	r0, [pc, #8]	@ (8009700 <prvIPTask+0x18>)
 80096f6:	f019 f855 	bl	80227a4 <lUDPLoggingPrintf>

    /* Loop, processing IP events. */
    while( ipFOREVER() == pdTRUE )
    {
        prvProcessIPEventsAndTimers();
 80096fa:	f000 f803 	bl	8009704 <prvProcessIPEventsAndTimers>
 80096fe:	e7fc      	b.n	80096fa <prvIPTask+0x12>
 8009700:	08025220 	.word	0x08025220

08009704 <prvProcessIPEventsAndTimers>:

/**
 * @brief Process the events sent to the IP task and process the timers.
 */
static void prvProcessIPEventsAndTimers( void )
{
 8009704:	b590      	push	{r4, r7, lr}
 8009706:	b08d      	sub	sp, #52	@ 0x34
 8009708:	af00      	add	r7, sp, #0

    ipconfigWATCHDOG_TIMER();

    /* Check the ARP, DHCP and TCP timers to see if there is any periodic
     * or timeout processing to perform. */
    vCheckNetworkTimers();
 800970a:	f000 ff09 	bl	800a520 <vCheckNetworkTimers>

    /* Calculate the acceptable maximum sleep time. */
    xNextIPSleep = xCalculateSleepTime();
 800970e:	f000 fea7 	bl	800a460 <xCalculateSleepTime>
 8009712:	62f8      	str	r0, [r7, #44]	@ 0x2c

    /* Wait until there is something to do. If the following call exits
     * due to a time out rather than a message being received, set a
     * 'NoEvent' value. */
    if( xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep ) == pdFALSE )
 8009714:	4b7c      	ldr	r3, [pc, #496]	@ (8009908 <prvProcessIPEventsAndTimers+0x204>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f107 0118 	add.w	r1, r7, #24
 800971c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800971e:	4618      	mov	r0, r3
 8009720:	f7fa fb3e 	bl	8003da0 <xQueueReceive>
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d101      	bne.n	800972e <prvProcessIPEventsAndTimers+0x2a>
    {
        xReceivedEvent.eEventType = eNoEvent;
 800972a:	23ff      	movs	r3, #255	@ 0xff
 800972c:	763b      	strb	r3, [r7, #24]
    }

    #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
    {
        if( xReceivedEvent.eEventType != eNoEvent )
 800972e:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8009732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009736:	d00d      	beq.n	8009754 <prvProcessIPEventsAndTimers+0x50>
        {
            UBaseType_t uxCount;

            uxCount = uxQueueSpacesAvailable( xNetworkEventQueue );
 8009738:	4b73      	ldr	r3, [pc, #460]	@ (8009908 <prvProcessIPEventsAndTimers+0x204>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4618      	mov	r0, r3
 800973e:	f7fa fd07 	bl	8004150 <uxQueueSpacesAvailable>
 8009742:	62b8      	str	r0, [r7, #40]	@ 0x28

            if( uxQueueMinimumSpace > uxCount )
 8009744:	4b71      	ldr	r3, [pc, #452]	@ (800990c <prvProcessIPEventsAndTimers+0x208>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800974a:	429a      	cmp	r2, r3
 800974c:	d202      	bcs.n	8009754 <prvProcessIPEventsAndTimers+0x50>
            {
                uxQueueMinimumSpace = uxCount;
 800974e:	4a6f      	ldr	r2, [pc, #444]	@ (800990c <prvProcessIPEventsAndTimers+0x208>)
 8009750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009752:	6013      	str	r3, [r2, #0]
    }
    #endif /* ipconfigCHECK_IP_QUEUE_SPACE */

    iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );

    switch( xReceivedEvent.eEventType )
 8009754:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8009758:	3301      	adds	r3, #1
 800975a:	2b0e      	cmp	r3, #14
 800975c:	f200 80ca 	bhi.w	80098f4 <prvProcessIPEventsAndTimers+0x1f0>
 8009760:	a201      	add	r2, pc, #4	@ (adr r2, 8009768 <prvProcessIPEventsAndTimers+0x64>)
 8009762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009766:	bf00      	nop
 8009768:	080098f5 	.word	0x080098f5
 800976c:	080097a5 	.word	0x080097a5
 8009770:	080097af 	.word	0x080097af
 8009774:	080097b9 	.word	0x080097b9
 8009778:	080097c5 	.word	0x080097c5
 800977c:	0800988f 	.word	0x0800988f
 8009780:	08009899 	.word	0x08009899
 8009784:	080098ad 	.word	0x080098ad
 8009788:	080098b5 	.word	0x080098b5
 800978c:	080098d9 	.word	0x080098d9
 8009790:	080097cf 	.word	0x080097cf
 8009794:	08009885 	.word	0x08009885
 8009798:	080098a3 	.word	0x080098a3
 800979c:	080098f5 	.word	0x080098f5
 80097a0:	080098df 	.word	0x080098df
    {
        case eNetworkDownEvent:
            /* Attempt to establish a connection. */
            prvProcessNetworkDownEvent( ( ( NetworkInterface_t * ) xReceivedEvent.pvData ) );
 80097a4:	69fb      	ldr	r3, [r7, #28]
 80097a6:	4618      	mov	r0, r3
 80097a8:	f001 f9cc 	bl	800ab44 <prvProcessNetworkDownEvent>
            break;
 80097ac:	e0a5      	b.n	80098fa <prvProcessIPEventsAndTimers+0x1f6>
        case eNetworkRxEvent:

            /* The network hardware driver has received a new packet.  A
             * pointer to the received buffer is located in the pvData member
             * of the received event structure. */
            prvHandleEthernetPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 80097ae:	69fb      	ldr	r3, [r7, #28]
 80097b0:	4618      	mov	r0, r3
 80097b2:	f000 f955 	bl	8009a60 <prvHandleEthernetPacket>
            break;
 80097b6:	e0a0      	b.n	80098fa <prvProcessIPEventsAndTimers+0x1f6>

        case eNetworkTxEvent:

            /* Send a network packet. The ownership will  be transferred to
             * the driver, which will release it after delivery. */
            prvForwardTxPacket( ( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData ), pdTRUE );
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	2101      	movs	r1, #1
 80097bc:	4618      	mov	r0, r3
 80097be:	f000 f95d 	bl	8009a7c <prvForwardTxPacket>
            break;
 80097c2:	e09a      	b.n	80098fa <prvProcessIPEventsAndTimers+0x1f6>

        case eARPTimerEvent:
            /* The ARP timer has expired, process the ARP cache. */
            #if ( ipconfigUSE_IPv4 != 0 )
                vARPAgeCache();
 80097c4:	f7fe f94e 	bl	8007a64 <vARPAgeCache>
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            #if ( ipconfigUSE_IPv6 != 0 )
                vNDAgeCache();
 80097c8:	f002 fdb6 	bl	800c338 <vNDAgeCache>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            break;
 80097cc:	e095      	b.n	80098fa <prvProcessIPEventsAndTimers+0x1f6>
            /* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
             * to a port. The port number is communicated in the socket field
             * usLocalPort. vSocketBind() will actually bind the socket and the
             * API will unblock as soon as the eSOCKET_BOUND event is
             * triggered. */
            pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 80097ce:	69fb      	ldr	r3, [r7, #28]
 80097d0:	623b      	str	r3, [r7, #32]
            xAddress.sin_len = ( uint8_t ) sizeof( xAddress );
 80097d2:	2318      	movs	r3, #24
 80097d4:	703b      	strb	r3, [r7, #0]

            switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 80097d6:	6a3b      	ldr	r3, [r7, #32]
 80097d8:	7a1b      	ldrb	r3, [r3, #8]
 80097da:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d002      	beq.n	80097ea <prvProcessIPEventsAndTimers+0xe6>
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d01a      	beq.n	800981e <prvProcessIPEventsAndTimers+0x11a>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 80097e8:	e02c      	b.n	8009844 <prvProcessIPEventsAndTimers+0x140>
                        xAddress.sin_family = FREERTOS_AF_INET;
 80097ea:	2302      	movs	r3, #2
 80097ec:	707b      	strb	r3, [r7, #1]
                        xAddress.sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 80097ee:	6a3b      	ldr	r3, [r7, #32]
 80097f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097f2:	061a      	lsls	r2, r3, #24
 80097f4:	6a3b      	ldr	r3, [r7, #32]
 80097f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097f8:	021b      	lsls	r3, r3, #8
 80097fa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80097fe:	431a      	orrs	r2, r3
 8009800:	6a3b      	ldr	r3, [r7, #32]
 8009802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009804:	0a1b      	lsrs	r3, r3, #8
 8009806:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800980a:	431a      	orrs	r2, r3
 800980c:	6a3b      	ldr	r3, [r7, #32]
 800980e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009810:	0e1b      	lsrs	r3, r3, #24
 8009812:	4313      	orrs	r3, r2
 8009814:	60bb      	str	r3, [r7, #8]
                        pxSocket->xLocalAddress.ulIP_IPv4 = 0;
 8009816:	6a3b      	ldr	r3, [r7, #32]
 8009818:	2200      	movs	r2, #0
 800981a:	629a      	str	r2, [r3, #40]	@ 0x28
                        break;
 800981c:	e012      	b.n	8009844 <prvProcessIPEventsAndTimers+0x140>
                        xAddress.sin_family = FREERTOS_AF_INET6;
 800981e:	230a      	movs	r3, #10
 8009820:	707b      	strb	r3, [r7, #1]
                        ( void ) memcpy( xAddress.sin_address.xIP_IPv6.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( xAddress.sin_address.xIP_IPv6.ucBytes ) );
 8009822:	6a3b      	ldr	r3, [r7, #32]
 8009824:	3328      	adds	r3, #40	@ 0x28
 8009826:	f107 0408 	add.w	r4, r7, #8
 800982a:	6818      	ldr	r0, [r3, #0]
 800982c:	6859      	ldr	r1, [r3, #4]
 800982e:	689a      	ldr	r2, [r3, #8]
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 8009834:	6a3b      	ldr	r3, [r7, #32]
 8009836:	3328      	adds	r3, #40	@ 0x28
 8009838:	2210      	movs	r2, #16
 800983a:	2100      	movs	r1, #0
 800983c:	4618      	mov	r0, r3
 800983e:	f019 fada 	bl	8022df6 <memset>
                        break;
 8009842:	bf00      	nop
            }

            xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 8009844:	6a3b      	ldr	r3, [r7, #32]
 8009846:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8009848:	021b      	lsls	r3, r3, #8
 800984a:	b21a      	sxth	r2, r3
 800984c:	6a3b      	ldr	r3, [r7, #32]
 800984e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8009850:	0a1b      	lsrs	r3, r3, #8
 8009852:	b29b      	uxth	r3, r3
 8009854:	b21b      	sxth	r3, r3
 8009856:	4313      	orrs	r3, r2
 8009858:	b21b      	sxth	r3, r3
 800985a:	b29b      	uxth	r3, r3
 800985c:	807b      	strh	r3, [r7, #2]
            /* 'usLocalPort' will be set again by vSocketBind(). */
            pxSocket->usLocalPort = 0U;
 800985e:	6a3b      	ldr	r3, [r7, #32]
 8009860:	2200      	movs	r2, #0
 8009862:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 8009864:	4639      	mov	r1, r7
 8009866:	2300      	movs	r3, #0
 8009868:	2218      	movs	r2, #24
 800986a:	6a38      	ldr	r0, [r7, #32]
 800986c:	f005 fa32 	bl	800ecd4 <vSocketBind>

            /* Before 'eSocketBindEvent' was sent it was tested that
             * ( xEventGroup != NULL ) so it can be used now to wake up the
             * user. */
            pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_BOUND;
 8009870:	6a3b      	ldr	r3, [r7, #32]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f043 0210 	orr.w	r2, r3, #16
 8009878:	6a3b      	ldr	r3, [r7, #32]
 800987a:	601a      	str	r2, [r3, #0]
            vSocketWakeUpUser( pxSocket );
 800987c:	6a38      	ldr	r0, [r7, #32]
 800987e:	f006 f8d8 	bl	800fa32 <vSocketWakeUpUser>
            break;
 8009882:	e03a      	b.n	80098fa <prvProcessIPEventsAndTimers+0x1f6>

            /* The user API FreeRTOS_closesocket() has sent a message to the
             * IP-task to actually close a socket. This is handled in
             * vSocketClose().  As the socket gets closed, there is no way to
             * report back to the API, so the API won't wait for the result */
            ( void ) vSocketClose( ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData ) );
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	4618      	mov	r0, r3
 8009888:	f005 fad8 	bl	800ee3c <vSocketClose>
            break;
 800988c:	e035      	b.n	80098fa <prvProcessIPEventsAndTimers+0x1f6>
        case eStackTxEvent:

            /* The network stack has generated a packet to send.  A
             * pointer to the generated buffer is located in the pvData
             * member of the received event structure. */
            vProcessGeneratedUDPPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	4618      	mov	r0, r3
 8009892:	f00d facf 	bl	8016e34 <vProcessGeneratedUDPPacket>
            break;
 8009896:	e030      	b.n	80098fa <prvProcessIPEventsAndTimers+0x1f6>

        case eDHCPEvent:
            prvCallDHCP_RA_Handler( ( ( NetworkEndPoint_t * ) xReceivedEvent.pvData ) );
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	4618      	mov	r0, r3
 800989c:	f000 f88c 	bl	80099b8 <prvCallDHCP_RA_Handler>
            break;
 80098a0:	e02b      	b.n	80098fa <prvProcessIPEventsAndTimers+0x1f6>
                    vSocketSelect( pxMessage->pxSocketSet );
                    ( void ) xTaskNotifyGive( pxMessage->xTaskhandle );
                }
            #else
                {
                    vSocketSelect( ( ( SocketSelect_t * ) xReceivedEvent.pvData ) );
 80098a2:	69fb      	ldr	r3, [r7, #28]
 80098a4:	4618      	mov	r0, r3
 80098a6:	f007 fbd1 	bl	801104c <vSocketSelect>
                }
            #endif /* ( ipconfigSELECT_USES_NOTIFY != 0 ) */
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 80098aa:	e026      	b.n	80098fa <prvProcessIPEventsAndTimers+0x1f6>
        case eTCPTimerEvent:
            #if ( ipconfigUSE_TCP == 1 )

                /* Simply mark the TCP timer as expired so it gets processed
                 * the next time prvCheckNetworkTimers() is called. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 80098ac:	2001      	movs	r0, #1
 80098ae:	f000 ffab 	bl	800a808 <vIPSetTCPTimerExpiredState>
            #endif /* ipconfigUSE_TCP */
            break;
 80098b2:	e022      	b.n	80098fa <prvProcessIPEventsAndTimers+0x1f6>

            /* The API FreeRTOS_accept() was called, the IP-task will now
             * check if the listening socket (communicated in pvData) actually
             * received a new connection. */
            #if ( ipconfigUSE_TCP == 1 )
                pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	623b      	str	r3, [r7, #32]

                if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 80098b8:	6a38      	ldr	r0, [r7, #32]
 80098ba:	f008 fd0b 	bl	80122d4 <xTCPCheckNewClient>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d019      	beq.n	80098f8 <prvProcessIPEventsAndTimers+0x1f4>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 80098c4:	6a3b      	ldr	r3, [r7, #32]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f043 0204 	orr.w	r2, r3, #4
 80098cc:	6a3b      	ldr	r3, [r7, #32]
 80098ce:	601a      	str	r2, [r3, #0]
                    vSocketWakeUpUser( pxSocket );
 80098d0:	6a38      	ldr	r0, [r7, #32]
 80098d2:	f006 f8ae 	bl	800fa32 <vSocketWakeUpUser>
                }
            #endif /* ipconfigUSE_TCP */
            break;
 80098d6:	e00f      	b.n	80098f8 <prvProcessIPEventsAndTimers+0x1f4>
        case eTCPNetStat:

            /* FreeRTOS_netstat() was called to have the IP-task print an
             * overview of all sockets and their connections */
            #if ( ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_PRINTF == 1 ) )
                vTCPNetStat();
 80098d8:	f007 faa2 	bl	8010e20 <vTCPNetStat>
            #endif /* ipconfigUSE_TCP */
            break;
 80098dc:	e00d      	b.n	80098fa <prvProcessIPEventsAndTimers+0x1f6>

        case eSocketSetDeleteEvent:
            #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
            {
                SocketSelect_t * pxSocketSet = ( SocketSelect_t * ) ( xReceivedEvent.pvData );
 80098de:	69fb      	ldr	r3, [r7, #28]
 80098e0:	627b      	str	r3, [r7, #36]	@ 0x24

                iptraceMEM_STATS_DELETE( pxSocketSet );
                vEventGroupDelete( pxSocketSet->xSelectGroup );
 80098e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7f9 ff16 	bl	8003718 <vEventGroupDelete>
                vPortFree( ( void * ) pxSocketSet );
 80098ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80098ee:	f7fd f92d 	bl	8006b4c <vPortFree>
            }
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 80098f2:	e002      	b.n	80098fa <prvProcessIPEventsAndTimers+0x1f6>
            /* xQueueReceive() returned because of a normal time-out. */
            break;

        default:
            /* Should not get here. */
            break;
 80098f4:	bf00      	nop
 80098f6:	e000      	b.n	80098fa <prvProcessIPEventsAndTimers+0x1f6>
            break;
 80098f8:	bf00      	nop
    }

    prvIPTask_CheckPendingEvents();
 80098fa:	f000 f833 	bl	8009964 <prvIPTask_CheckPendingEvents>
}
 80098fe:	bf00      	nop
 8009900:	3734      	adds	r7, #52	@ 0x34
 8009902:	46bd      	mov	sp, r7
 8009904:	bd90      	pop	{r4, r7, pc}
 8009906:	bf00      	nop
 8009908:	200011a0 	.word	0x200011a0
 800990c:	20000014 	.word	0x20000014

08009910 <prvIPTask_Initialise>:
/**
 * @brief Helper function for prvIPTask, it does the first initializations
 *        at start-up. No parameters, no return type.
 */
static void prvIPTask_Initialise( void )
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
    /* Generate a dummy message to say that the network connection has gone
     * down.  This will cause this task to initialise the network interface.  After
     * this it is the responsibility of the network interface hardware driver to
     * send this message if a previously connected network is disconnected. */

    vNetworkTimerReload( pdMS_TO_TICKS( ipINITIALISATION_RETRY_DELAY ) );
 8009916:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800991a:	f000 ff2b 	bl	800a774 <vNetworkTimerReload>

    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 800991e:	4b0f      	ldr	r3, [pc, #60]	@ (800995c <prvIPTask_Initialise+0x4c>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	607b      	str	r3, [r7, #4]
 8009924:	e005      	b.n	8009932 <prvIPTask_Initialise+0x22>
    {
        /* Post a 'eNetworkDownEvent' for every interface. */
        FreeRTOS_NetworkDown( pxInterface );
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 f8be 	bl	8009aa8 <FreeRTOS_NetworkDown>
    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009930:	607b      	str	r3, [r7, #4]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d1f6      	bne.n	8009926 <prvIPTask_Initialise+0x16>
    }

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* Initialise the TCP timer. */
        vTCPTimerReload( pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 8009938:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800993c:	f000 fee8 	bl	800a710 <vTCPTimerReload>
    }
    #endif

    /* Mark the timer as inactive since we are not waiting on any ARP resolution as of now. */
    vIPSetARPResolutionTimerEnableState( pdFALSE );
 8009940:	2000      	movs	r0, #0
 8009942:	f000 ff9b 	bl	800a87c <vIPSetARPResolutionTimerEnableState>

    #if ( ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* The following function is declared in FreeRTOS_DNS.c and 'private' to
         * this library */
        vDNSInitialise();
 8009946:	f7fe fa31 	bl	8007dac <vDNSInitialise>
    #endif /* ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) */

    #if ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* Clear the DNS cache once only. */
        FreeRTOS_dnsclear();
 800994a:	f7fe fb0f 	bl	8007f6c <FreeRTOS_dnsclear>
    }
    #endif /* ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) ) */

    /* Initialisation is complete and events can now be processed. */
    xIPTaskInitialised = pdTRUE;
 800994e:	4b04      	ldr	r3, [pc, #16]	@ (8009960 <prvIPTask_Initialise+0x50>)
 8009950:	2201      	movs	r2, #1
 8009952:	601a      	str	r2, [r3, #0]
}
 8009954:	bf00      	nop
 8009956:	3708      	adds	r7, #8
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}
 800995c:	2000152c 	.word	0x2000152c
 8009960:	200011b0 	.word	0x200011b0

08009964 <prvIPTask_CheckPendingEvents>:
/**
 * @brief Check the value of 'xNetworkDownEventPending'. When non-zero, pending
 *        network-down events will be handled.
 */
static void prvIPTask_CheckPendingEvents( void )
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    if( xNetworkDownEventPending != pdFALSE )
 800996a:	4b12      	ldr	r3, [pc, #72]	@ (80099b4 <prvIPTask_CheckPendingEvents+0x50>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d01c      	beq.n	80099ac <prvIPTask_CheckPendingEvents+0x48>
    {
        /* A network down event could not be posted to the network event
         * queue because the queue was full.
         * As this code runs in the IP-task, it can be done directly by
         * calling prvProcessNetworkDownEvent(). */
        xNetworkDownEventPending = pdFALSE;
 8009972:	4b10      	ldr	r3, [pc, #64]	@ (80099b4 <prvIPTask_CheckPendingEvents+0x50>)
 8009974:	2200      	movs	r2, #0
 8009976:	601a      	str	r2, [r3, #0]

        for( pxInterface = FreeRTOS_FirstNetworkInterface();
 8009978:	f004 f836 	bl	800d9e8 <FreeRTOS_FirstNetworkInterface>
 800997c:	6078      	str	r0, [r7, #4]
 800997e:	e012      	b.n	80099a6 <prvIPTask_CheckPendingEvents+0x42>
             pxInterface != NULL;
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
        {
            if( pxInterface->bits.bCallDownEvent != pdFALSE_UNSIGNED )
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	7f1b      	ldrb	r3, [r3, #28]
 8009984:	f003 0302 	and.w	r3, r3, #2
 8009988:	b2db      	uxtb	r3, r3
 800998a:	2b00      	cmp	r3, #0
 800998c:	d007      	beq.n	800999e <prvIPTask_CheckPendingEvents+0x3a>
            {
                prvProcessNetworkDownEvent( pxInterface );
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f001 f8d8 	bl	800ab44 <prvProcessNetworkDownEvent>
                pxInterface->bits.bCallDownEvent = pdFALSE_UNSIGNED;
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	7f13      	ldrb	r3, [r2, #28]
 8009998:	f36f 0341 	bfc	r3, #1, #1
 800999c:	7713      	strb	r3, [r2, #28]
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f004 f82e 	bl	800da00 <FreeRTOS_NextNetworkInterface>
 80099a4:	6078      	str	r0, [r7, #4]
             pxInterface != NULL;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1e9      	bne.n	8009980 <prvIPTask_CheckPendingEvents+0x1c>
            }
        }
    }
}
 80099ac:	bf00      	nop
 80099ae:	3708      	adds	r7, #8
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	200011a8 	.word	0x200011a8

080099b8 <prvCallDHCP_RA_Handler>:
 * @brief Call the state machine of either DHCP, DHCPv6, or RA, whichever is activated.
 *
 * @param[in] pxEndPoint The end-point for which the state-machine will be called.
 */
static void prvCallDHCP_RA_Handler( NetworkEndPoint_t * pxEndPoint )
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
    BaseType_t xIsIPv6 = pdFALSE;
 80099c0:	2300      	movs	r3, #0
 80099c2:	60fb      	str	r3, [r7, #12]

    #if ( ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_DHCPv6 == 1 ) || ( ipconfigUSE_RA == 1 ) )
        if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80099ca:	f003 0304 	and.w	r3, r3, #4
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d001      	beq.n	80099d8 <prvCallDHCP_RA_Handler+0x20>
        {
            xIsIPv6 = pdTRUE;
 80099d4:	2301      	movs	r3, #1
 80099d6:	60fb      	str	r3, [r7, #12]
        }
    }
    #endif /* ipconfigUSE_DHCPv6 */
    #if ( ( ipconfigUSE_RA == 1 ) && ( ipconfigUSE_IPv6 != 0 ) )
    {
        if( ( xIsIPv6 == pdTRUE ) && ( pxEndPoint->bits.bWantRA != pdFALSE_UNSIGNED ) )
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d10b      	bne.n	80099f6 <prvCallDHCP_RA_Handler+0x3e>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80099e4:	f003 0302 	and.w	r3, r3, #2
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d003      	beq.n	80099f6 <prvCallDHCP_RA_Handler+0x3e>
        {
            /* Process RA messages for a given end-point. */
            vRAProcess( pdFALSE, pxEndPoint );
 80099ee:	6879      	ldr	r1, [r7, #4]
 80099f0:	2000      	movs	r0, #0
 80099f2:	f003 fecd 	bl	800d790 <vRAProcess>
    #endif /* ( ( ipconfigUSE_RA == 1 ) && ( ipconfigUSE_IPv6 != 0 ) ) */

    /* Mention pxEndPoint and xIsIPv6 in case they have not been used. */
    ( void ) pxEndPoint;
    ( void ) xIsIPv6;
}
 80099f6:	bf00      	nop
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
	...

08009a00 <FreeRTOS_GetIPTaskHandle>:
 *        gives read-only access to it.
 *
 * @return The handle of the IP-task.
 */
TaskHandle_t FreeRTOS_GetIPTaskHandle( void )
{
 8009a00:	b480      	push	{r7}
 8009a02:	af00      	add	r7, sp, #0
    return xIPTaskHandle;
 8009a04:	4b03      	ldr	r3, [pc, #12]	@ (8009a14 <FreeRTOS_GetIPTaskHandle+0x14>)
 8009a06:	681b      	ldr	r3, [r3, #0]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr
 8009a12:	bf00      	nop
 8009a14:	200011ac 	.word	0x200011ac

08009a18 <vIPNetworkUpCalls>:
 * @brief Perform all the required tasks when the network gets connected.
 *
 * @param pxEndPoint The end-point which goes up.
 */
void vIPNetworkUpCalls( struct xNetworkEndPoint * pxEndPoint )
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
    if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009a26:	f003 0304 	and.w	r3, r3, #4
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d003      	beq.n	8009a38 <vIPNetworkUpCalls+0x20>
    {
        /* IPv6 end-points have a solicited-node address that needs extra housekeeping. */
        #if ( ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) )
            vManageSolicitedNodeAddress( pxEndPoint, pdTRUE );
 8009a30:	2101      	movs	r1, #1
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f002 fa7e 	bl	800bf34 <vManageSolicitedNodeAddress>
        #endif
    }

    pxEndPoint->bits.bEndPointUp = pdTRUE_UNSIGNED;
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 8009a3e:	f043 0310 	orr.w	r3, r3, #16
 8009a42:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0

    #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        {
            vApplicationIPNetworkEventHook( eNetworkUp );
 8009a46:	2000      	movs	r0, #0
 8009a48:	f7f8 f812 	bl	8001a70 <vApplicationIPNetworkEventHook>
    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        /* The following function is declared in FreeRTOS_DNS.c and 'private' to
         * this library */
        extern void vDNSInitialise( void );
        vDNSInitialise();
 8009a4c:	f7fe f9ae 	bl	8007dac <vDNSInitialise>
    }
    #endif /* ipconfigDNS_USE_CALLBACKS != 0 */

    /* Set remaining time to 0 so it will become active immediately. */
    vARPTimerReload( pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 8009a50:	f242 7010 	movw	r0, #10000	@ 0x2710
 8009a54:	f000 fe6a 	bl	800a72c <vARPTimerReload>
}
 8009a58:	bf00      	nop
 8009a5a:	3708      	adds	r7, #8
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <prvHandleEthernetPacket>:
 *
 * @param[in] pxBuffer Linked/un-linked network buffer descriptor(s)
 *                      to be processed.
 */
static void prvHandleEthernetPacket( NetworkBufferDescriptor_t * pxBuffer )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
    #if ( ipconfigUSE_LINKED_RX_MESSAGES == 0 )
    {
        /* When ipconfigUSE_LINKED_RX_MESSAGES is set to 0 then only one
         * buffer will be sent at a time.  This is the default way for +TCP to pass
         * messages from the MAC to the TCP/IP stack. */
        if( pxBuffer != NULL )
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d002      	beq.n	8009a74 <prvHandleEthernetPacket+0x14>
        {
            prvProcessEthernetPacket( pxBuffer );
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 f9c8 	bl	8009e04 <prvProcessEthernetPacket>
            prvProcessEthernetPacket( pxBuffer );
            pxBuffer = pxNextBuffer;
        }
    }
    #endif /* ipconfigUSE_LINKED_RX_MESSAGES */
}
 8009a74:	bf00      	nop
 8009a76:	3708      	adds	r7, #8
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <prvForwardTxPacket>:
 * @param[in] pxNetworkBuffer The message buffer.
 * @param[in] xReleaseAfterSend When true, the network interface will own the buffer and is responsible for it's release.
 */
static void prvForwardTxPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                BaseType_t xReleaseAfterSend )
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

    if( pxNetworkBuffer->pxInterface != NULL )
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d007      	beq.n	8009a9e <prvForwardTxPacket+0x22>
    {
        ( void ) pxNetworkBuffer->pxInterface->pfOutput( pxNetworkBuffer->pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8009a98:	683a      	ldr	r2, [r7, #0]
 8009a9a:	6879      	ldr	r1, [r7, #4]
 8009a9c:	4798      	blx	r3
    }
}
 8009a9e:	bf00      	nop
 8009aa0:	3708      	adds	r7, #8
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
	...

08009aa8 <FreeRTOS_NetworkDown>:
 *         and later on a 'network-down' event, it will be executed.
 *
 * @param[in] pxNetworkInterface The interface that goes down.
 */
void FreeRTOS_NetworkDown( struct xNetworkInterface * pxNetworkInterface )
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
    IPStackEvent_t xNetworkDownEvent;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	617b      	str	r3, [r7, #20]

    pxNetworkInterface->bits.bInterfaceUp = pdFALSE_UNSIGNED;
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	7f13      	ldrb	r3, [r2, #28]
 8009ab8:	f36f 0300 	bfc	r3, #0, #1
 8009abc:	7713      	strb	r3, [r2, #28]
    xNetworkDownEvent.eEventType = eNetworkDownEvent;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	733b      	strb	r3, [r7, #12]
    xNetworkDownEvent.pvData = pxNetworkInterface;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	613b      	str	r3, [r7, #16]

    /* Simply send the network task the appropriate event. */
    if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 8009ac6:	f107 030c 	add.w	r3, r7, #12
 8009aca:	6979      	ldr	r1, [r7, #20]
 8009acc:	4618      	mov	r0, r3
 8009ace:	f000 f8df 	bl	8009c90 <xSendEventStructToIPTask>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d008      	beq.n	8009aea <FreeRTOS_NetworkDown+0x42>
    {
        /* Could not send the message, so it is still pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdTRUE;
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	7f13      	ldrb	r3, [r2, #28]
 8009adc:	f043 0302 	orr.w	r3, r3, #2
 8009ae0:	7713      	strb	r3, [r2, #28]
        xNetworkDownEventPending = pdTRUE;
 8009ae2:	4b06      	ldr	r3, [pc, #24]	@ (8009afc <FreeRTOS_NetworkDown+0x54>)
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	601a      	str	r2, [r3, #0]
        /* Message was sent so it is not pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
    }

    iptraceNETWORK_DOWN();
}
 8009ae8:	e004      	b.n	8009af4 <FreeRTOS_NetworkDown+0x4c>
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	7f13      	ldrb	r3, [r2, #28]
 8009aee:	f36f 0341 	bfc	r3, #1, #1
 8009af2:	7713      	strb	r3, [r2, #28]
}
 8009af4:	bf00      	nop
 8009af6:	3718      	adds	r7, #24
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	200011a8 	.word	0x200011a8

08009b00 <FreeRTOS_IPInit_Multi>:
 * @brief Initialise the FreeRTOS-Plus-TCP network stack and initialise the IP-task.
 *        Before calling this function, at least 1 interface and 1 end-point must
 *        have been set-up.
 */
BaseType_t FreeRTOS_IPInit_Multi( void )
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdFALSE;
 8009b06:	2300      	movs	r3, #0
 8009b08:	607b      	str	r3, [r7, #4]

    /* There must be at least one interface and one end-point. */
    configASSERT( FreeRTOS_FirstNetworkInterface() != NULL );
 8009b0a:	f003 ff6d 	bl	800d9e8 <FreeRTOS_FirstNetworkInterface>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d104      	bne.n	8009b1e <FreeRTOS_IPInit_Multi+0x1e>
 8009b14:	f240 31b5 	movw	r1, #949	@ 0x3b5
 8009b18:	4823      	ldr	r0, [pc, #140]	@ (8009ba8 <FreeRTOS_IPInit_Multi+0xa8>)
 8009b1a:	f7f7 ff75 	bl	8001a08 <vAssertCalled>

    /* Check that the configuration values are correct and that the IP-task has not
     * already been initialized. */
    vPreCheckConfigs();
 8009b1e:	f001 f8cb 	bl	800acb8 <vPreCheckConfigs>
                                                 ucNetworkEventQueueStorageArea,
                                                 &xNetworkEventStaticQueue );
    }
    #else
    {
        xNetworkEventQueue = xQueueCreate( ipconfigEVENT_QUEUE_LENGTH, sizeof( IPStackEvent_t ) );
 8009b22:	2200      	movs	r2, #0
 8009b24:	2108      	movs	r1, #8
 8009b26:	2045      	movs	r0, #69	@ 0x45
 8009b28:	f7f9 ff88 	bl	8003a3c <xQueueGenericCreate>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	4a1f      	ldr	r2, [pc, #124]	@ (8009bac <FreeRTOS_IPInit_Multi+0xac>)
 8009b30:	6013      	str	r3, [r2, #0]
        configASSERT( xNetworkEventQueue != NULL );
 8009b32:	4b1e      	ldr	r3, [pc, #120]	@ (8009bac <FreeRTOS_IPInit_Multi+0xac>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d104      	bne.n	8009b44 <FreeRTOS_IPInit_Multi+0x44>
 8009b3a:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
 8009b3e:	481a      	ldr	r0, [pc, #104]	@ (8009ba8 <FreeRTOS_IPInit_Multi+0xa8>)
 8009b40:	f7f7 ff62 	bl	8001a08 <vAssertCalled>
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    if( xNetworkEventQueue != NULL )
 8009b44:	4b19      	ldr	r3, [pc, #100]	@ (8009bac <FreeRTOS_IPInit_Multi+0xac>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d025      	beq.n	8009b98 <FreeRTOS_IPInit_Multi+0x98>
        #if ( configQUEUE_REGISTRY_SIZE > 0 )
        {
            /* A queue registry is normally used to assist a kernel aware
             * debugger.  If one is in use then it will be helpful for the debugger
             * to show information about the network event queue. */
            vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 8009b4c:	4b17      	ldr	r3, [pc, #92]	@ (8009bac <FreeRTOS_IPInit_Multi+0xac>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4917      	ldr	r1, [pc, #92]	@ (8009bb0 <FreeRTOS_IPInit_Multi+0xb0>)
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7fa fc5e 	bl	8004414 <vQueueAddToRegistry>
        }
        #endif /* configQUEUE_REGISTRY_SIZE */

        if( xNetworkBuffersInitialise() == pdPASS )
 8009b58:	f00d feaa 	bl	80178b0 <xNetworkBuffersInitialise>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d10e      	bne.n	8009b80 <FreeRTOS_IPInit_Multi+0x80>
        {
            /* Prepare the sockets interface. */
            vNetworkSocketsInit();
 8009b62:	f004 fc7f 	bl	800e464 <vNetworkSocketsInit>
                    xReturn = pdTRUE;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvIPTask,
 8009b66:	4b13      	ldr	r3, [pc, #76]	@ (8009bb4 <FreeRTOS_IPInit_Multi+0xb4>)
 8009b68:	9301      	str	r3, [sp, #4]
 8009b6a:	2304      	movs	r3, #4
 8009b6c:	9300      	str	r3, [sp, #0]
 8009b6e:	2300      	movs	r3, #0
 8009b70:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8009b74:	4910      	ldr	r1, [pc, #64]	@ (8009bb8 <FreeRTOS_IPInit_Multi+0xb8>)
 8009b76:	4811      	ldr	r0, [pc, #68]	@ (8009bbc <FreeRTOS_IPInit_Multi+0xbc>)
 8009b78:	f7fa fd02 	bl	8004580 <xTaskCreate>
 8009b7c:	6078      	str	r0, [r7, #4]
 8009b7e:	e00e      	b.n	8009b9e <FreeRTOS_IPInit_Multi+0x9e>
            }
            #endif /* configSUPPORT_STATIC_ALLOCATION */
        }
        else
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: xNetworkBuffersInitialise() failed\n" ) );
 8009b80:	480f      	ldr	r0, [pc, #60]	@ (8009bc0 <FreeRTOS_IPInit_Multi+0xc0>)
 8009b82:	f018 fe0f 	bl	80227a4 <lUDPLoggingPrintf>

            /* Clean up. */
            vQueueDelete( xNetworkEventQueue );
 8009b86:	4b09      	ldr	r3, [pc, #36]	@ (8009bac <FreeRTOS_IPInit_Multi+0xac>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7fa fb00 	bl	8004190 <vQueueDelete>
            xNetworkEventQueue = NULL;
 8009b90:	4b06      	ldr	r3, [pc, #24]	@ (8009bac <FreeRTOS_IPInit_Multi+0xac>)
 8009b92:	2200      	movs	r2, #0
 8009b94:	601a      	str	r2, [r3, #0]
 8009b96:	e002      	b.n	8009b9e <FreeRTOS_IPInit_Multi+0x9e>
        }
    }
    else
    {
        FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: Network event queue could not be created\n" ) );
 8009b98:	480a      	ldr	r0, [pc, #40]	@ (8009bc4 <FreeRTOS_IPInit_Multi+0xc4>)
 8009b9a:	f018 fe03 	bl	80227a4 <lUDPLoggingPrintf>
    }

    return xReturn;
 8009b9e:	687b      	ldr	r3, [r7, #4]
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3708      	adds	r7, #8
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	08025234 	.word	0x08025234
 8009bac:	200011a0 	.word	0x200011a0
 8009bb0:	08025260 	.word	0x08025260
 8009bb4:	200011ac 	.word	0x200011ac
 8009bb8:	08025268 	.word	0x08025268
 8009bbc:	080096e9 	.word	0x080096e9
 8009bc0:	08025270 	.word	0x08025270
 8009bc4:	080252ac 	.word	0x080252ac

08009bc8 <FreeRTOS_GetEndPointConfiguration>:
    void FreeRTOS_GetEndPointConfiguration( uint32_t * pulIPAddress,
                                            uint32_t * pulNetMask,
                                            uint32_t * pulGatewayAddress,
                                            uint32_t * pulDNSServerAddress,
                                            const struct xNetworkEndPoint * pxEndPoint )
    {
 8009bc8:	b480      	push	{r7}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	60b9      	str	r1, [r7, #8]
 8009bd2:	607a      	str	r2, [r7, #4]
 8009bd4:	603b      	str	r3, [r7, #0]
        if( ENDPOINT_IS_IPv4( pxEndPoint ) )
 8009bd6:	69bb      	ldr	r3, [r7, #24]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d023      	beq.n	8009c24 <FreeRTOS_GetEndPointConfiguration+0x5c>
 8009bdc:	69bb      	ldr	r3, [r7, #24]
 8009bde:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009be2:	f003 0304 	and.w	r3, r3, #4
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d11b      	bne.n	8009c24 <FreeRTOS_GetEndPointConfiguration+0x5c>
        {
            /* Return the address configuration to the caller. */

            if( pulIPAddress != NULL )
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d003      	beq.n	8009bfa <FreeRTOS_GetEndPointConfiguration+0x32>
            {
                *pulIPAddress = pxEndPoint->ipv4_settings.ulIPAddress;
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	601a      	str	r2, [r3, #0]
            }

            if( pulNetMask != NULL )
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d003      	beq.n	8009c08 <FreeRTOS_GetEndPointConfiguration+0x40>
            {
                *pulNetMask = pxEndPoint->ipv4_settings.ulNetMask;
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	685a      	ldr	r2, [r3, #4]
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	601a      	str	r2, [r3, #0]
            }

            if( pulGatewayAddress != NULL )
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d003      	beq.n	8009c16 <FreeRTOS_GetEndPointConfiguration+0x4e>
            {
                *pulGatewayAddress = pxEndPoint->ipv4_settings.ulGatewayAddress;
 8009c0e:	69bb      	ldr	r3, [r7, #24]
 8009c10:	689a      	ldr	r2, [r3, #8]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	601a      	str	r2, [r3, #0]
            }

            if( pulDNSServerAddress != NULL )
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d003      	beq.n	8009c24 <FreeRTOS_GetEndPointConfiguration+0x5c>
            {
                *pulDNSServerAddress = pxEndPoint->ipv4_settings.ulDNSServerAddresses[ 0 ]; /*_RB_ Only returning the address of the first DNS server. */
 8009c1c:	69bb      	ldr	r3, [r7, #24]
 8009c1e:	68da      	ldr	r2, [r3, #12]
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	601a      	str	r2, [r3, #0]
            }
        }
    }
 8009c24:	bf00      	nop
 8009c26:	3714      	adds	r7, #20
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <FreeRTOS_GetAddressConfiguration>:
 */
    void FreeRTOS_GetAddressConfiguration( uint32_t * pulIPAddress,
                                           uint32_t * pulNetMask,
                                           uint32_t * pulGatewayAddress,
                                           uint32_t * pulDNSServerAddress )
    {
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b088      	sub	sp, #32
 8009c34:	af02      	add	r7, sp, #8
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	607a      	str	r2, [r7, #4]
 8009c3c:	603b      	str	r3, [r7, #0]
        NetworkEndPoint_t * pxEndPoint;

        /* Get first end point. */
        pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8009c3e:	2000      	movs	r0, #0
 8009c40:	f003 ff72 	bl	800db28 <FreeRTOS_FirstEndPoint>
 8009c44:	6178      	str	r0, [r7, #20]

        if( pxEndPoint != NULL )
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d007      	beq.n	8009c5c <FreeRTOS_GetAddressConfiguration+0x2c>
        {
            FreeRTOS_GetEndPointConfiguration( pulIPAddress, pulNetMask,
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	68b9      	ldr	r1, [r7, #8]
 8009c56:	68f8      	ldr	r0, [r7, #12]
 8009c58:	f7ff ffb6 	bl	8009bc8 <FreeRTOS_GetEndPointConfiguration>
                                               pulGatewayAddress, pulDNSServerAddress, pxEndPoint );
        }
    }
 8009c5c:	bf00      	nop
 8009c5e:	3718      	adds	r7, #24
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <xSendEventToIPTask>:
 * @param[in] eEvent The event to be sent.
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b086      	sub	sp, #24
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	71fb      	strb	r3, [r7, #7]
    IPStackEvent_t xEventMessage;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	617b      	str	r3, [r7, #20]

    xEventMessage.eEventType = eEvent;
 8009c72:	79fb      	ldrb	r3, [r7, #7]
 8009c74:	733b      	strb	r3, [r7, #12]
    xEventMessage.pvData = ( void * ) NULL;
 8009c76:	2300      	movs	r3, #0
 8009c78:	613b      	str	r3, [r7, #16]

    return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 8009c7a:	f107 030c 	add.w	r3, r7, #12
 8009c7e:	6979      	ldr	r1, [r7, #20]
 8009c80:	4618      	mov	r0, r3
 8009c82:	f000 f805 	bl	8009c90 <xSendEventStructToIPTask>
 8009c86:	4603      	mov	r3, r0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3718      	adds	r7, #24
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <xSendEventStructToIPTask>:
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventStructToIPTask( const IPStackEvent_t * pxEvent,
                                     TickType_t uxTimeout )
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b086      	sub	sp, #24
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn, xSendMessage;
    TickType_t uxUseTimeout = uxTimeout;
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	60fb      	str	r3, [r7, #12]

    if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 8009c9e:	f000 fb93 	bl	800a3c8 <xIPIsNetworkTaskReady>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d107      	bne.n	8009cb8 <xSendEventStructToIPTask+0x28>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f993 3000 	ldrsb.w	r3, [r3]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d002      	beq.n	8009cb8 <xSendEventStructToIPTask+0x28>
    {
        /* Only allow eNetworkDownEvent events if the IP task is not ready
         * yet.  Not going to attempt to send the message so the send failed. */
        xReturn = pdFAIL;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	617b      	str	r3, [r7, #20]
 8009cb6:	e035      	b.n	8009d24 <xSendEventStructToIPTask+0x94>
    }
    else
    {
        xSendMessage = pdTRUE;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	613b      	str	r3, [r7, #16]

        #if ( ipconfigUSE_TCP == 1 )
        {
            if( pxEvent->eEventType == eTCPTimerEvent )
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f993 3000 	ldrsb.w	r3, [r3]
 8009cc2:	2b06      	cmp	r3, #6
 8009cc4:	d10c      	bne.n	8009ce0 <xSendEventStructToIPTask+0x50>
            {
                /* TCP timer events are sent to wake the timer task when
                 * xTCPTimer has expired, but there is no point sending them if the
                 * IP task is already awake processing other message. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 8009cc6:	2001      	movs	r0, #1
 8009cc8:	f000 fd9e 	bl	800a808 <vIPSetTCPTimerExpiredState>

                if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 8009ccc:	4b18      	ldr	r3, [pc, #96]	@ (8009d30 <xSendEventStructToIPTask+0xa0>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7fa fa23 	bl	800411c <uxQueueMessagesWaiting>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d001      	beq.n	8009ce0 <xSendEventStructToIPTask+0x50>
                {
                    /* Not actually going to send the message but this is not a
                     * failure as the message didn't need to be sent. */
                    xSendMessage = pdFALSE;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	613b      	str	r3, [r7, #16]
                }
            }
        }
        #endif /* ipconfigUSE_TCP */

        if( xSendMessage != pdFALSE )
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d01c      	beq.n	8009d20 <xSendEventStructToIPTask+0x90>
        {
            /* The IP task cannot block itself while waiting for itself to
             * respond. */
            if( ( xIsCallingFromIPTask() == pdTRUE ) && ( uxUseTimeout > ( TickType_t ) 0U ) )
 8009ce6:	f000 ff15 	bl	800ab14 <xIsCallingFromIPTask>
 8009cea:	4603      	mov	r3, r0
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d104      	bne.n	8009cfa <xSendEventStructToIPTask+0x6a>
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d001      	beq.n	8009cfa <xSendEventStructToIPTask+0x6a>
            {
                uxUseTimeout = ( TickType_t ) 0;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	60fb      	str	r3, [r7, #12]
            }

            xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 8009cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8009d30 <xSendEventStructToIPTask+0xa0>)
 8009cfc:	6818      	ldr	r0, [r3, #0]
 8009cfe:	2300      	movs	r3, #0
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	6879      	ldr	r1, [r7, #4]
 8009d04:	f7f9 ff64 	bl	8003bd0 <xQueueGenericSend>
 8009d08:	6178      	str	r0, [r7, #20]

            if( xReturn == pdFAIL )
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d109      	bne.n	8009d24 <xSendEventStructToIPTask+0x94>
            {
                /* A message should have been sent to the IP task, but wasn't. */
                FreeRTOS_debug_printf( ( "xSendEventStructToIPTask: CAN NOT ADD %d\n", pxEvent->eEventType ) );
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f993 3000 	ldrsb.w	r3, [r3]
 8009d16:	4619      	mov	r1, r3
 8009d18:	4806      	ldr	r0, [pc, #24]	@ (8009d34 <xSendEventStructToIPTask+0xa4>)
 8009d1a:	f018 fd43 	bl	80227a4 <lUDPLoggingPrintf>
 8009d1e:	e001      	b.n	8009d24 <xSendEventStructToIPTask+0x94>
        }
        else
        {
            /* It was not necessary to send the message to process the event so
             * even though the message was not sent the call was successful. */
            xReturn = pdPASS;
 8009d20:	2301      	movs	r3, #1
 8009d22:	617b      	str	r3, [r7, #20]
        }
    }

    return xReturn;
 8009d24:	697b      	ldr	r3, [r7, #20]
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3718      	adds	r7, #24
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	200011a0 	.word	0x200011a0
 8009d34:	080252f0 	.word	0x080252f0

08009d38 <eConsiderFrameForProcessing>:
 * @param[in] pucEthernetBuffer The ethernet packet under consideration.
 *
 * @return Enum saying whether to release or to process the packet.
 */
eFrameProcessingResult_t eConsiderFrameForProcessing( const uint8_t * const pucEthernetBuffer )
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b086      	sub	sp, #24
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 8009d40:	2301      	movs	r3, #1
 8009d42:	75fb      	strb	r3, [r7, #23]
    const EthernetHeader_t * pxEthernetHeader = NULL;
 8009d44:	2300      	movs	r3, #0
 8009d46:	613b      	str	r3, [r7, #16]
    const NetworkEndPoint_t * pxEndPoint = NULL;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	60fb      	str	r3, [r7, #12]

    if( pucEthernetBuffer == NULL )
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d102      	bne.n	8009d58 <eConsiderFrameForProcessing+0x20>
    {
        eReturn = eReleaseBuffer;
 8009d52:	2300      	movs	r3, #0
 8009d54:	75fb      	strb	r3, [r7, #23]
 8009d56:	e032      	b.n	8009dbe <eConsiderFrameForProcessing+0x86>
        /* Map the buffer onto Ethernet Header struct for easy access to fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	613b      	str	r3, [r7, #16]

        /* Examine the destination MAC from the Ethernet header to see if it matches
         * that of an end point managed by FreeRTOS+TCP. */
        pxEndPoint = FreeRTOS_FindEndPointOnMAC( &( pxEthernetHeader->xDestinationAddress ), NULL );
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	2100      	movs	r1, #0
 8009d60:	4618      	mov	r0, r3
 8009d62:	f003 ff81 	bl	800dc68 <FreeRTOS_FindEndPointOnMAC>
 8009d66:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d002      	beq.n	8009d74 <eConsiderFrameForProcessing+0x3c>
        {
            /* The packet was directed to this node - process it. */
            eReturn = eProcessBuffer;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	75fb      	strb	r3, [r7, #23]
 8009d72:	e024      	b.n	8009dbe <eConsiderFrameForProcessing+0x86>
        }
        else if( memcmp( xBroadcastMACAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	2206      	movs	r2, #6
 8009d78:	4619      	mov	r1, r3
 8009d7a:	4820      	ldr	r0, [pc, #128]	@ (8009dfc <eConsiderFrameForProcessing+0xc4>)
 8009d7c:	f019 fec3 	bl	8023b06 <memcmp>
 8009d80:	4603      	mov	r3, r0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d102      	bne.n	8009d8c <eConsiderFrameForProcessing+0x54>
        {
            /* The packet was a broadcast - process it. */
            eReturn = eProcessBuffer;
 8009d86:	2301      	movs	r3, #1
 8009d88:	75fb      	strb	r3, [r7, #23]
 8009d8a:	e018      	b.n	8009dbe <eConsiderFrameForProcessing+0x86>
        }
        else
        #if ( ( ipconfigUSE_LLMNR == 1 ) && ( ipconfigUSE_DNS != 0 ) )
            if( memcmp( xLLMNR_MacAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	2206      	movs	r2, #6
 8009d90:	4619      	mov	r1, r3
 8009d92:	481b      	ldr	r0, [pc, #108]	@ (8009e00 <eConsiderFrameForProcessing+0xc8>)
 8009d94:	f019 feb7 	bl	8023b06 <memcmp>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d102      	bne.n	8009da4 <eConsiderFrameForProcessing+0x6c>
            {
                /* The packet is a request for LLMNR - process it. */
                eReturn = eProcessBuffer;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	75fb      	strb	r3, [r7, #23]
 8009da2:	e00c      	b.n	8009dbe <eConsiderFrameForProcessing+0x86>
                /* The packet is a request for MDNS - process it. */
                eReturn = eProcessBuffer;
            }
            else
        #endif /* ipconfigUSE_MDNS */
        if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv6_0 ) &&
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	2b33      	cmp	r3, #51	@ 0x33
 8009daa:	d106      	bne.n	8009dba <eConsiderFrameForProcessing+0x82>
            ( pxEthernetHeader->xDestinationAddress.ucBytes[ 1 ] == ipMULTICAST_MAC_ADDRESS_IPv6_1 ) )
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	785b      	ldrb	r3, [r3, #1]
        if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv6_0 ) &&
 8009db0:	2b33      	cmp	r3, #51	@ 0x33
 8009db2:	d102      	bne.n	8009dba <eConsiderFrameForProcessing+0x82>
        {
            /* The packet is a request for LLMNR - process it. */
            eReturn = eProcessBuffer;
 8009db4:	2301      	movs	r3, #1
 8009db6:	75fb      	strb	r3, [r7, #23]
 8009db8:	e001      	b.n	8009dbe <eConsiderFrameForProcessing+0x86>
        }
        else
        {
            /* The packet was not a broadcast, or for this node, just release
             * the buffer without taking any other action. */
            eReturn = eReleaseBuffer;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	75fb      	strb	r3, [r7, #23]

    #if ( ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1 )
    {
        uint16_t usFrameType;

        if( eReturn == eProcessBuffer )
 8009dbe:	7dfb      	ldrb	r3, [r7, #23]
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d115      	bne.n	8009df0 <eConsiderFrameForProcessing+0xb8>
        {
            usFrameType = pxEthernetHeader->usFrameType;
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	7b1a      	ldrb	r2, [r3, #12]
 8009dc8:	7b5b      	ldrb	r3, [r3, #13]
 8009dca:	021b      	lsls	r3, r3, #8
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	817b      	strh	r3, [r7, #10]
            usFrameType = FreeRTOS_ntohs( usFrameType );
 8009dd0:	897b      	ldrh	r3, [r7, #10]
 8009dd2:	021b      	lsls	r3, r3, #8
 8009dd4:	b21a      	sxth	r2, r3
 8009dd6:	897b      	ldrh	r3, [r7, #10]
 8009dd8:	0a1b      	lsrs	r3, r3, #8
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	b21b      	sxth	r3, r3
 8009dde:	4313      	orrs	r3, r2
 8009de0:	b21b      	sxth	r3, r3
 8009de2:	817b      	strh	r3, [r7, #10]

            if( usFrameType <= 0x600U )
 8009de4:	897b      	ldrh	r3, [r7, #10]
 8009de6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009dea:	d801      	bhi.n	8009df0 <eConsiderFrameForProcessing+0xb8>
            {
                /* Not an Ethernet II frame. */
                eReturn = eReleaseBuffer;
 8009dec:	2300      	movs	r3, #0
 8009dee:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #endif /* ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1  */

    return eReturn;
 8009df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3718      	adds	r7, #24
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	08027f2c 	.word	0x08027f2c
 8009e00:	08027f1c 	.word	0x08027f1c

08009e04 <prvProcessEthernetPacket>:
 *
 * @param[in,out] pxNetworkBuffer the network buffer containing the ethernet packet. If the
 *                                 buffer is large enough, it may be reused to send a reply.
 */
static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
    const EthernetHeader_t * pxEthernetHeader;
    eFrameProcessingResult_t eReturned = eReleaseBuffer;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	73fb      	strb	r3, [r7, #15]
    {
        /* prvHandleEthernetPacket() already checked for ( pxNetworkBuffer != NULL ) so
         * it is safe to break out of the do{}while() and let the second half of this
         * function handle the releasing of pxNetworkBuffer */

        if( ( pxNetworkBuffer->pxInterface == NULL ) || ( pxNetworkBuffer->pxEndPoint == NULL ) )
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d03d      	beq.n	8009e94 <prvProcessEthernetPacket+0x90>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d039      	beq.n	8009e94 <prvProcessEthernetPacket+0x90>
         * None of the above need to be checked again in code that handles incoming packets. */

        iptraceNETWORK_INTERFACE_INPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

        /* Interpret the Ethernet frame. */
        if( pxNetworkBuffer->xDataLength < sizeof( EthernetHeader_t ) )
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e24:	2b0d      	cmp	r3, #13
 8009e26:	d934      	bls.n	8009e92 <prvProcessEthernetPacket+0x8e>
        {
            break;
        }

        eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
 8009e28:	2301      	movs	r3, #1
 8009e2a:	73fb      	strb	r3, [r7, #15]
        /* Map the buffer onto the Ethernet Header struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e30:	60bb      	str	r3, [r7, #8]
        #if ( ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES == 0 )
            if( eReturned == eProcessBuffer )
        #endif
        {
            /* Interpret the received Ethernet packet. */
            switch( pxEthernetHeader->usFrameType )
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	899b      	ldrh	r3, [r3, #12]
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d015      	beq.n	8009e6c <prvProcessEthernetPacket+0x68>
 8009e40:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009e44:	4293      	cmp	r3, r2
 8009e46:	dc21      	bgt.n	8009e8c <prvProcessEthernetPacket+0x88>
 8009e48:	2b08      	cmp	r3, #8
 8009e4a:	d00f      	beq.n	8009e6c <prvProcessEthernetPacket+0x68>
 8009e4c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8009e50:	d11c      	bne.n	8009e8c <prvProcessEthernetPacket+0x88>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipARP_FRAME_TYPE:

                        /* The Ethernet frame contains an ARP packet. */
                        if( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) )
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e56:	2b29      	cmp	r3, #41	@ 0x29
 8009e58:	d905      	bls.n	8009e66 <prvProcessEthernetPacket+0x62>
                        {
                            /* MISRA Ref 11.3.1 [Misaligned access] */
                            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                            /* coverity[misra_c_2012_rule_11_3_violation] */
                            eReturned = eARPProcessPacket( pxNetworkBuffer );
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f7fc ffe6 	bl	8006e2c <eARPProcessPacket>
 8009e60:	4603      	mov	r3, r0
 8009e62:	73fb      	strb	r3, [r7, #15]
                        }
                        else
                        {
                            eReturned = eReleaseBuffer;
                        }
                        break;
 8009e64:	e016      	b.n	8009e94 <prvProcessEthernetPacket+0x90>
                            eReturned = eReleaseBuffer;
 8009e66:	2300      	movs	r3, #0
 8009e68:	73fb      	strb	r3, [r7, #15]
                        break;
 8009e6a:	e013      	b.n	8009e94 <prvProcessEthernetPacket+0x90>

                case ipIPv4_FRAME_TYPE:
                case ipIPv6_FRAME_TYPE:

                    /* The Ethernet frame contains an IP packet. */
                    if( pxNetworkBuffer->xDataLength >= sizeof( IPPacket_t ) )
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e70:	2b21      	cmp	r3, #33	@ 0x21
 8009e72:	d908      	bls.n	8009e86 <prvProcessEthernetPacket+0x82>
                    {
                        /* MISRA Ref 11.3.1 [Misaligned access] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                        /* coverity[misra_c_2012_rule_11_3_violation] */
                        eReturned = prvProcessIPPacket( ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer );
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e78:	6879      	ldr	r1, [r7, #4]
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f000 f8c6 	bl	800a00c <prvProcessIPPacket>
 8009e80:	4603      	mov	r3, r0
 8009e82:	73fb      	strb	r3, [r7, #15]
                    else
                    {
                        eReturned = eReleaseBuffer;
                    }

                    break;
 8009e84:	e006      	b.n	8009e94 <prvProcessEthernetPacket+0x90>
                        eReturned = eReleaseBuffer;
 8009e86:	2300      	movs	r3, #0
 8009e88:	73fb      	strb	r3, [r7, #15]
                    break;
 8009e8a:	e003      	b.n	8009e94 <prvProcessEthernetPacket+0x90>
                    #if ( ipconfigPROCESS_CUSTOM_ETHERNET_FRAMES != 0 )
                        /* Custom frame handler. */
                        eReturned = eApplicationProcessCustomFrameHook( pxNetworkBuffer );
                    #else
                        /* No other packet types are handled.  Nothing to do. */
                        eReturned = eReleaseBuffer;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	73fb      	strb	r3, [r7, #15]
                    #endif
                    break;
 8009e90:	e000      	b.n	8009e94 <prvProcessEthernetPacket+0x90>
            break;
 8009e92:	bf00      	nop
            } /* switch( pxEthernetHeader->usFrameType ) */
        }
    } while( pdFALSE );

    /* Perform any actions that resulted from processing the Ethernet frame. */
    switch( eReturned )
 8009e94:	7bfb      	ldrb	r3, [r7, #15]
 8009e96:	2b04      	cmp	r3, #4
 8009e98:	d00b      	beq.n	8009eb2 <prvProcessEthernetPacket+0xae>
 8009e9a:	2b04      	cmp	r3, #4
 8009e9c:	dc19      	bgt.n	8009ed2 <prvProcessEthernetPacket+0xce>
 8009e9e:	2b02      	cmp	r3, #2
 8009ea0:	d002      	beq.n	8009ea8 <prvProcessEthernetPacket+0xa4>
 8009ea2:	2b03      	cmp	r3, #3
 8009ea4:	d019      	beq.n	8009eda <prvProcessEthernetPacket+0xd6>
 8009ea6:	e014      	b.n	8009ed2 <prvProcessEthernetPacket+0xce>
        case eReturnEthernetFrame:

            /* The Ethernet frame will have been updated (maybe it was
             * an ARP request or a PING request?) and should be sent back to
             * its source. */
            vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 8009ea8:	2101      	movs	r1, #1
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 f9a4 	bl	800a1f8 <vReturnEthernetFrame>

            /* parameter pdTRUE: the buffer must be released once
             * the frame has been transmitted */
            break;
 8009eb0:	e014      	b.n	8009edc <prvProcessEthernetPacket+0xd8>
             * yet. */
            break;

        case eWaitingARPResolution:

            if( pxARPWaitingNetworkBuffer == NULL )
 8009eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8009ee4 <prvProcessEthernetPacket+0xe0>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d107      	bne.n	8009eca <prvProcessEthernetPacket+0xc6>
            {
                pxARPWaitingNetworkBuffer = pxNetworkBuffer;
 8009eba:	4a0a      	ldr	r2, [pc, #40]	@ (8009ee4 <prvProcessEthernetPacket+0xe0>)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6013      	str	r3, [r2, #0]
                vIPTimerStartARPResolution( ipARP_RESOLUTION_MAX_DELAY );
 8009ec0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8009ec4:	f000 fc06 	bl	800a6d4 <vIPTimerStartARPResolution>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );

                iptraceDELAYED_ARP_BUFFER_FULL();
            }

            break;
 8009ec8:	e008      	b.n	8009edc <prvProcessEthernetPacket+0xd8>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f00d fdc2 	bl	8017a54 <vReleaseNetworkBufferAndDescriptor>
            break;
 8009ed0:	e004      	b.n	8009edc <prvProcessEthernetPacket+0xd8>
        default:

            /* The frame is not being used anywhere, and the
             * NetworkBufferDescriptor_t structure containing the frame should
             * just be released back to the list of free buffers. */
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f00d fdbe 	bl	8017a54 <vReleaseNetworkBufferAndDescriptor>
            break;
 8009ed8:	e000      	b.n	8009edc <prvProcessEthernetPacket+0xd8>
            break;
 8009eda:	bf00      	nop
    }
}
 8009edc:	bf00      	nop
 8009ede:	3710      	adds	r7, #16
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	2000119c 	.word	0x2000119c

08009ee8 <prvProcessUDPPacket>:
 * @return eReleaseBuffer ( please release the buffer ).
 *         eFrameConsumed ( the buffer has now been released ).
 */

static eFrameProcessingResult_t prvProcessUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009ee8:	b5b0      	push	{r4, r5, r7, lr}
 8009eea:	b08c      	sub	sp, #48	@ 0x30
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    BaseType_t xIsWaitingARPResolution = pdFALSE;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	60bb      	str	r3, [r7, #8]
    /* The IP packet contained a UDP frame. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const UDPPacket_t * pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009efe:	627b      	str	r3, [r7, #36]	@ 0x24
    const UDPHeader_t * pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 8009f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f02:	3322      	adds	r3, #34	@ 0x22
 8009f04:	62bb      	str	r3, [r7, #40]	@ 0x28

    size_t uxMinSize = ipSIZE_OF_ETH_HEADER + ( size_t ) uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 fa76 	bl	800a3f8 <uxIPHeaderSizePacket>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	3316      	adds	r3, #22
 8009f10:	623b      	str	r3, [r7, #32]
    size_t uxLength;
    uint16_t usLength;

    #if ( ipconfigUSE_IPv6 != 0 )
        if( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv6_FRAME_TYPE )
 8009f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f14:	899b      	ldrh	r3, [r3, #12]
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d105      	bne.n	8009f2c <prvProcessUDPPacket+0x44>
            const ProtocolHeaders_t * pxProtocolHeaders;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ] ) );
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f24:	3336      	adds	r3, #54	@ 0x36
 8009f26:	61fb      	str	r3, [r7, #28]
            pxUDPHeader = &( pxProtocolHeaders->xUDPHeader );
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    usLength = FreeRTOS_ntohs( pxUDPHeader->usLength );
 8009f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f2e:	889b      	ldrh	r3, [r3, #4]
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	021b      	lsls	r3, r3, #8
 8009f34:	b21a      	sxth	r2, r3
 8009f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f38:	889b      	ldrh	r3, [r3, #4]
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	0a1b      	lsrs	r3, r3, #8
 8009f3e:	b29b      	uxth	r3, r3
 8009f40:	b21b      	sxth	r3, r3
 8009f42:	4313      	orrs	r3, r2
 8009f44:	b21b      	sxth	r3, r3
 8009f46:	837b      	strh	r3, [r7, #26]
    uxLength = ( size_t ) usLength;
 8009f48:	8b7b      	ldrh	r3, [r7, #26]
 8009f4a:	617b      	str	r3, [r7, #20]

    /* Note the header values required prior to the checksum
     * generation as the checksum pseudo header may clobber some of
     * these values. */
    #if ( ipconfigUSE_IPv4 != 0 )
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 8009f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f4e:	899b      	ldrh	r3, [r3, #12]
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	2b08      	cmp	r3, #8
 8009f54:	d11a      	bne.n	8009f8c <prvProcessUDPPacket+0xa4>
            ( usLength > ( FreeRTOS_ntohs( pxUDPPacket->xIPHeader.usLength ) - uxIPHeaderSizePacket( pxNetworkBuffer ) ) ) )
 8009f56:	8b7c      	ldrh	r4, [r7, #26]
 8009f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f5a:	8a1b      	ldrh	r3, [r3, #16]
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	021b      	lsls	r3, r3, #8
 8009f60:	b21a      	sxth	r2, r3
 8009f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f64:	8a1b      	ldrh	r3, [r3, #16]
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	0a1b      	lsrs	r3, r3, #8
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	b21b      	sxth	r3, r3
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	b21b      	sxth	r3, r3
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	461d      	mov	r5, r3
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 fa3e 	bl	800a3f8 <uxIPHeaderSizePacket>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	1aeb      	subs	r3, r5, r3
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 8009f80:	429c      	cmp	r4, r3
 8009f82:	d903      	bls.n	8009f8c <prvProcessUDPPacket+0xa4>
        {
            eReturn = eReleaseBuffer;
 8009f84:	2300      	movs	r3, #0
 8009f86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009f8a:	e038      	b.n	8009ffe <prvProcessUDPPacket+0x116>
        }
        else
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    if( ( pxNetworkBuffer->xDataLength >= uxMinSize ) &&
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f90:	6a3a      	ldr	r2, [r7, #32]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d833      	bhi.n	8009ffe <prvProcessUDPPacket+0x116>
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	2b07      	cmp	r3, #7
 8009f9a:	d930      	bls.n	8009ffe <prvProcessUDPPacket+0x116>
         * size of the UDP header.
         *
         * The size of the UDP packet structure in this implementation
         * includes the size of the Ethernet header, the size of
         * the IP header, and the size of the UDP header. */
        uxPayloadSize_1 = pxNetworkBuffer->xDataLength - uxMinSize;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009fa0:	6a3b      	ldr	r3, [r7, #32]
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	613b      	str	r3, [r7, #16]
        uxPayloadSize_2 = uxLength - ipSIZE_OF_UDP_HEADER;
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	3b08      	subs	r3, #8
 8009faa:	60fb      	str	r3, [r7, #12]

        if( uxPayloadSize_1 > uxPayloadSize_2 )
 8009fac:	693a      	ldr	r2, [r7, #16]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d904      	bls.n	8009fbe <prvProcessUDPPacket+0xd6>
        {
            pxNetworkBuffer->xDataLength = uxPayloadSize_2 + uxMinSize;
 8009fb4:	68fa      	ldr	r2, [r7, #12]
 8009fb6:	6a3b      	ldr	r3, [r7, #32]
 8009fb8:	441a      	add	r2, r3
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        pxNetworkBuffer->usPort = pxUDPHeader->usSourcePort;
 8009fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc0:	881b      	ldrh	r3, [r3, #0]
 8009fc2:	b29a      	uxth	r2, r3
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNetworkBuffer->xIPAddress.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 8009fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fca:	f8d3 201a 	ldr.w	r2, [r3, #26]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	615a      	str	r2, [r3, #20]
         * by the NIC driver. */

        /* Pass the packet payload to the UDP sockets
         * implementation. */
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
                                       pxUDPHeader->usDestinationPort,
 8009fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd4:	885b      	ldrh	r3, [r3, #2]
 8009fd6:	b29b      	uxth	r3, r3
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
 8009fd8:	f107 0208 	add.w	r2, r7, #8
 8009fdc:	4619      	mov	r1, r3
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f00c ff48 	bl	8016e74 <xProcessReceivedUDPPacket>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d103      	bne.n	8009ff2 <prvProcessUDPPacket+0x10a>
                                       &( xIsWaitingARPResolution ) ) == pdPASS )
        {
            eReturn = eFrameConsumed;
 8009fea:	2303      	movs	r3, #3
 8009fec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009ff0:	e005      	b.n	8009ffe <prvProcessUDPPacket+0x116>
        }
        else
        {
            /* Is this packet to be set aside for ARP resolution. */
            if( xIsWaitingARPResolution == pdTRUE )
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d102      	bne.n	8009ffe <prvProcessUDPPacket+0x116>
            {
                eReturn = eWaitingARPResolution;
 8009ff8:	2304      	movs	r3, #4
 8009ffa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    else
    {
        /* Length checks failed, the buffer will be released. */
    }

    return eReturn;
 8009ffe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a002:	4618      	mov	r0, r3
 800a004:	3730      	adds	r7, #48	@ 0x30
 800a006:	46bd      	mov	sp, r7
 800a008:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a00c <prvProcessIPPacket>:
 *
 * @return An enum to show whether the packet should be released/kept/processed etc.
 */
static eFrameProcessingResult_t prvProcessIPPacket( const IPPacket_t * pxIPPacket,
                                                    NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b088      	sub	sp, #32
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eReturn;
    UBaseType_t uxHeaderLength = ipSIZE_OF_IPv4_HEADER;
 800a016:	2314      	movs	r3, #20
 800a018:	61bb      	str	r3, [r7, #24]
    uint8_t ucProtocol = 0U;
 800a01a:	2300      	movs	r3, #0
 800a01c:	75fb      	strb	r3, [r7, #23]

    #if ( ipconfigUSE_IPv6 != 0 )
        const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
 800a01e:	2300      	movs	r3, #0
 800a020:	613b      	str	r3, [r7, #16]
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    #if ( ipconfigUSE_IPv4 != 0 )
        const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	330e      	adds	r3, #14
 800a026:	60fb      	str	r3, [r7, #12]
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    switch( pxIPPacket->xEthernetHeader.usFrameType )
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	899b      	ldrh	r3, [r3, #12]
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	2b08      	cmp	r3, #8
 800a030:	d023      	beq.n	800a07a <prvProcessIPPacket+0x6e>
 800a032:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800a036:	4293      	cmp	r3, r2
 800a038:	d144      	bne.n	800a0c4 <prvProcessIPPacket+0xb8>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case ipIPv6_FRAME_TYPE:

                if( pxNetworkBuffer->xDataLength < sizeof( IPPacket_IPv6_t ) )
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a03e:	2b35      	cmp	r3, #53	@ 0x35
 800a040:	d802      	bhi.n	800a048 <prvProcessIPPacket+0x3c>
                {
                    /* The packet size is less than minimum IPv6 packet. */
                    eReturn = eReleaseBuffer;
 800a042:	2300      	movs	r3, #0
 800a044:	77fb      	strb	r3, [r7, #31]
                    /* The IP-header type is copied to a special reserved location a few bytes before the message
                     * starts. In the case of IPv6, this value is never actually used and the line below can safely be removed
                     * with no ill effects. We only store it to help with debugging. */
                    pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader_IPv6->ucVersionTrafficClass;
                }
                break;
 800a046:	e043      	b.n	800a0d0 <prvProcessIPPacket+0xc4>
                    pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a04c:	330e      	adds	r3, #14
 800a04e:	613b      	str	r3, [r7, #16]
                    uxHeaderLength = ipSIZE_OF_IPv6_HEADER;
 800a050:	2328      	movs	r3, #40	@ 0x28
 800a052:	61bb      	str	r3, [r7, #24]
                    ucProtocol = pxIPHeader_IPv6->ucNextHeader;
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	799b      	ldrb	r3, [r3, #6]
 800a058:	75fb      	strb	r3, [r7, #23]
                    eReturn = prvAllowIPPacketIPv6( ( ( const IPHeader_IPv6_t * ) &( pxIPPacket->xIPHeader ) ), pxNetworkBuffer, uxHeaderLength );
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	330e      	adds	r3, #14
 800a05e:	69ba      	ldr	r2, [r7, #24]
 800a060:	6839      	ldr	r1, [r7, #0]
 800a062:	4618      	mov	r0, r3
 800a064:	f001 fb6c 	bl	800b740 <prvAllowIPPacketIPv6>
 800a068:	4603      	mov	r3, r0
 800a06a:	77fb      	strb	r3, [r7, #31]
                    pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader_IPv6->ucVersionTrafficClass;
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a070:	3b06      	subs	r3, #6
 800a072:	693a      	ldr	r2, [r7, #16]
 800a074:	7812      	ldrb	r2, [r2, #0]
 800a076:	701a      	strb	r2, [r3, #0]
                break;
 800a078:	e02a      	b.n	800a0d0 <prvProcessIPPacket+0xc4>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case ipIPv4_FRAME_TYPE:
               {
                   size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	60bb      	str	r3, [r7, #8]

                   /* Check if the IP headers are acceptable and if it has our destination.
                    * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
                    * length in multiples of 4. */
                   uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800a088:	61bb      	str	r3, [r7, #24]

                   if( ( uxHeaderLength > ( pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ) ) ||
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a08e:	3b0e      	subs	r3, #14
 800a090:	69ba      	ldr	r2, [r7, #24]
 800a092:	429a      	cmp	r2, r3
 800a094:	d802      	bhi.n	800a09c <prvProcessIPPacket+0x90>
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	2b13      	cmp	r3, #19
 800a09a:	d802      	bhi.n	800a0a2 <prvProcessIPPacket+0x96>
                       ( uxHeaderLength < ipSIZE_OF_IPv4_HEADER ) )
                   {
                       eReturn = eReleaseBuffer;
 800a09c:	2300      	movs	r3, #0
 800a09e:	77fb      	strb	r3, [r7, #31]
                            * buffer is being used. */
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
                       }
                   }

                   break;
 800a0a0:	e016      	b.n	800a0d0 <prvProcessIPPacket+0xc4>
                       ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	7ddb      	ldrb	r3, [r3, #23]
 800a0a6:	75fb      	strb	r3, [r7, #23]
                       eReturn = prvAllowIPPacketIPv4( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 800a0a8:	69ba      	ldr	r2, [r7, #24]
 800a0aa:	6839      	ldr	r1, [r7, #0]
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f001 f81b 	bl	800b0e8 <prvAllowIPPacketIPv4>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	77fb      	strb	r3, [r7, #31]
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ba:	3b06      	subs	r3, #6
 800a0bc:	68fa      	ldr	r2, [r7, #12]
 800a0be:	7812      	ldrb	r2, [r2, #0]
 800a0c0:	701a      	strb	r2, [r3, #0]
                   break;
 800a0c2:	e005      	b.n	800a0d0 <prvProcessIPPacket+0xc4>
               }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:
            eReturn = eReleaseBuffer;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	77fb      	strb	r3, [r7, #31]
            FreeRTOS_debug_printf( ( "prvProcessIPPacket: Undefined Frame Type \n" ) );
 800a0c8:	484a      	ldr	r0, [pc, #296]	@ (800a1f4 <prvProcessIPPacket+0x1e8>)
 800a0ca:	f018 fb6b 	bl	80227a4 <lUDPLoggingPrintf>
            /* MISRA 16.4 Compliance */
            break;
 800a0ce:	bf00      	nop

    /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
    /* coverity[misra_c_2012_rule_14_3_violation] */
    /* coverity[cond_const] */
    if( eReturn == eProcessBuffer )
 800a0d0:	7ffb      	ldrb	r3, [r7, #31]
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	f040 8088 	bne.w	800a1e8 <prvProcessIPPacket+0x1dc>
    {
        /* Are there IP-options. */
        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
        switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	899b      	ldrh	r3, [r3, #12]
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	2b08      	cmp	r3, #8
 800a0e0:	d004      	beq.n	800a0ec <prvProcessIPPacket+0xe0>
 800a0e2:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d009      	beq.n	800a0fe <prvProcessIPPacket+0xf2>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 800a0ea:	e020      	b.n	800a12e <prvProcessIPPacket+0x122>
                    if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 800a0ec:	69bb      	ldr	r3, [r7, #24]
 800a0ee:	2b14      	cmp	r3, #20
 800a0f0:	d91a      	bls.n	800a128 <prvProcessIPPacket+0x11c>
                        eReturn = prvCheckIP4HeaderOptions( pxNetworkBuffer );
 800a0f2:	6838      	ldr	r0, [r7, #0]
 800a0f4:	f001 f852 	bl	800b19c <prvCheckIP4HeaderOptions>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	77fb      	strb	r3, [r7, #31]
                    break;
 800a0fc:	e014      	b.n	800a128 <prvProcessIPPacket+0x11c>
                    if( xGetExtensionOrder( ucProtocol, 0U ) > 0 )
 800a0fe:	7dfb      	ldrb	r3, [r7, #23]
 800a100:	2100      	movs	r1, #0
 800a102:	4618      	mov	r0, r3
 800a104:	f001 fb3a 	bl	800b77c <xGetExtensionOrder>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	dd0e      	ble.n	800a12c <prvProcessIPPacket+0x120>
                        eReturn = eHandleIPv6ExtensionHeaders( pxNetworkBuffer, pdTRUE );
 800a10e:	2101      	movs	r1, #1
 800a110:	6838      	ldr	r0, [r7, #0]
 800a112:	f001 fb99 	bl	800b848 <eHandleIPv6ExtensionHeaders>
 800a116:	4603      	mov	r3, r0
 800a118:	77fb      	strb	r3, [r7, #31]
                        if( eReturn != eReleaseBuffer )
 800a11a:	7ffb      	ldrb	r3, [r7, #31]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d005      	beq.n	800a12c <prvProcessIPPacket+0x120>
                            ucProtocol = pxIPHeader_IPv6->ucNextHeader;
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	799b      	ldrb	r3, [r3, #6]
 800a124:	75fb      	strb	r3, [r7, #23]
                    break;
 800a126:	e001      	b.n	800a12c <prvProcessIPPacket+0x120>
                    break;
 800a128:	bf00      	nop
 800a12a:	e000      	b.n	800a12e <prvProcessIPPacket+0x122>
                    break;
 800a12c:	bf00      	nop

        /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
        /* coverity[misra_c_2012_rule_14_3_violation] */
        /* coverity[const] */
        if( eReturn != eReleaseBuffer )
 800a12e:	7ffb      	ldrb	r3, [r7, #31]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d059      	beq.n	800a1e8 <prvProcessIPPacket+0x1dc>
        {
            /* Add the IP and MAC addresses to the ARP table if they are not
             * already there - otherwise refresh the age of the existing
             * entry. */
            if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 800a134:	7dfb      	ldrb	r3, [r7, #23]
 800a136:	2b11      	cmp	r3, #17
 800a138:	d026      	beq.n	800a188 <prvProcessIPPacket+0x17c>
            {
                if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 800a13a:	6838      	ldr	r0, [r7, #0]
 800a13c:	f7fd f918 	bl	8007370 <xCheckRequiresARPResolution>
 800a140:	4603      	mov	r3, r0
 800a142:	2b01      	cmp	r3, #1
 800a144:	d102      	bne.n	800a14c <prvProcessIPPacket+0x140>
                {
                    eReturn = eWaitingARPResolution;
 800a146:	2304      	movs	r3, #4
 800a148:	77fb      	strb	r3, [r7, #31]
 800a14a:	e01d      	b.n	800a188 <prvProcessIPPacket+0x17c>
                     * packet.  For UDP packets, this will be done later in
                     * xProcessReceivedUDPPacket(), as soon as it's know that the message
                     * will be handled.  This will prevent the ARP cache getting
                     * overwritten with the IP address of useless broadcast packets. */
                    /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                    switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	899b      	ldrh	r3, [r3, #12]
 800a150:	b29b      	uxth	r3, r3
 800a152:	2b08      	cmp	r3, #8
 800a154:	d00e      	beq.n	800a174 <prvProcessIPPacket+0x168>
 800a156:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d113      	bne.n	800a186 <prvProcessIPPacket+0x17a>
                    {
                        #if ( ipconfigUSE_IPv6 != 0 )
                            case ipIPv6_FRAME_TYPE:
                                vNDRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), &( pxIPHeader_IPv6->xSourceAddress ), pxNetworkBuffer->pxEndPoint );
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	1d98      	adds	r0, r3, #6
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	f103 0108 	add.w	r1, r3, #8
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a16c:	461a      	mov	r2, r3
 800a16e:	f002 f843 	bl	800c1f8 <vNDRefreshCacheEntry>
                                break;
 800a172:	e009      	b.n	800a188 <prvProcessIPPacket+0x17c>
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        #if ( ipconfigUSE_IPv4 != 0 )
                            case ipIPv4_FRAME_TYPE:
                                /* Refresh the age of this cache entry since a packet was received. */
                                vARPRefreshCacheEntryAge( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	1d9a      	adds	r2, r3, #6
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	4619      	mov	r1, r3
 800a17e:	4610      	mov	r0, r2
 800a180:	f7fd f9d6 	bl	8007530 <vARPRefreshCacheEntryAge>
                                break;
 800a184:	e000      	b.n	800a188 <prvProcessIPPacket+0x17c>
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                        default:   /* LCOV_EXCL_LINE */
                            /* MISRA 16.4 Compliance */
                            break; /* LCOV_EXCL_LINE */
 800a186:	bf00      	nop
                    }
                }
            }

            if( eReturn != eWaitingARPResolution )
 800a188:	7ffb      	ldrb	r3, [r7, #31]
 800a18a:	2b04      	cmp	r3, #4
 800a18c:	d02c      	beq.n	800a1e8 <prvProcessIPPacket+0x1dc>
            {
                switch( ucProtocol )
 800a18e:	7dfb      	ldrb	r3, [r7, #23]
 800a190:	2b3a      	cmp	r3, #58	@ 0x3a
 800a192:	d010      	beq.n	800a1b6 <prvProcessIPPacket+0x1aa>
 800a194:	2b3a      	cmp	r3, #58	@ 0x3a
 800a196:	dc23      	bgt.n	800a1e0 <prvProcessIPPacket+0x1d4>
 800a198:	2b11      	cmp	r3, #17
 800a19a:	d012      	beq.n	800a1c2 <prvProcessIPPacket+0x1b6>
 800a19c:	2b11      	cmp	r3, #17
 800a19e:	dc1f      	bgt.n	800a1e0 <prvProcessIPPacket+0x1d4>
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d002      	beq.n	800a1aa <prvProcessIPPacket+0x19e>
 800a1a4:	2b06      	cmp	r3, #6
 800a1a6:	d012      	beq.n	800a1ce <prvProcessIPPacket+0x1c2>
 800a1a8:	e01a      	b.n	800a1e0 <prvProcessIPPacket+0x1d4>
                             * also be returned, and the source of the ping will know something
                             * went wrong because it will not be able to validate what it
                             * receives. */
                            #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                            {
                                eReturn = ProcessICMPPacket( pxNetworkBuffer );
 800a1aa:	6838      	ldr	r0, [r7, #0]
 800a1ac:	f7ff f9fe 	bl	80095ac <ProcessICMPPacket>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	77fb      	strb	r3, [r7, #31]
                            }
                            #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 ) */
                            break;
 800a1b4:	e018      	b.n	800a1e8 <prvProcessIPPacket+0x1dc>
                    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                    #if ( ipconfigUSE_IPv6 != 0 )
                        case ipPROTOCOL_ICMP_IPv6:
                            eReturn = prvProcessICMPMessage_IPv6( pxNetworkBuffer );
 800a1b6:	6838      	ldr	r0, [r7, #0]
 800a1b8:	f002 fb6e 	bl	800c898 <prvProcessICMPMessage_IPv6>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	77fb      	strb	r3, [r7, #31]
                            break;
 800a1c0:	e012      	b.n	800a1e8 <prvProcessIPPacket+0x1dc>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    case ipPROTOCOL_UDP:
                        /* The IP packet contained a UDP frame. */

                        eReturn = prvProcessUDPPacket( pxNetworkBuffer );
 800a1c2:	6838      	ldr	r0, [r7, #0]
 800a1c4:	f7ff fe90 	bl	8009ee8 <prvProcessUDPPacket>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	77fb      	strb	r3, [r7, #31]
                        break;
 800a1cc:	e00c      	b.n	800a1e8 <prvProcessIPPacket+0x1dc>

                        #if ipconfigUSE_TCP == 1
                            case ipPROTOCOL_TCP:

                                if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 800a1ce:	6838      	ldr	r0, [r7, #0]
 800a1d0:	f007 febe 	bl	8011f50 <xProcessReceivedTCPPacket>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d105      	bne.n	800a1e6 <prvProcessIPPacket+0x1da>
                                {
                                    eReturn = eFrameConsumed;
 800a1da:	2303      	movs	r3, #3
 800a1dc:	77fb      	strb	r3, [r7, #31]
                                }
                                break;
 800a1de:	e002      	b.n	800a1e6 <prvProcessIPPacket+0x1da>
                        #endif /* if ipconfigUSE_TCP == 1 */
                    default:
                        /* Not a supported frame type. */
                        eReturn = eReleaseBuffer;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	77fb      	strb	r3, [r7, #31]
                        break;
 800a1e4:	e000      	b.n	800a1e8 <prvProcessIPPacket+0x1dc>
                                break;
 800a1e6:	bf00      	nop
                }
            }
        }
    }

    return eReturn;
 800a1e8:	7ffb      	ldrb	r3, [r7, #31]
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3720      	adds	r7, #32
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	0802531c 	.word	0x0802531c

0800a1f8 <vReturnEthernetFrame>:
 * @param[in,out] pxNetworkBuffer The network buffer which is to be sent.
 * @param[in] xReleaseAfterSend Whether this network buffer is to be released or not.
 */
void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer,
                           BaseType_t xReleaseAfterSend )
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b08e      	sub	sp, #56	@ 0x38
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNewBuffer;
    #endif

    #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
    {
        if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a206:	2b3b      	cmp	r3, #59	@ 0x3b
 800a208:	d818      	bhi.n	800a23c <vReturnEthernetFrame+0x44>
        {
            BaseType_t xIndex;

            FreeRTOS_printf( ( "vReturnEthernetFrame: length %u\n", ( unsigned ) pxNetworkBuffer->xDataLength ) );
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a20e:	4619      	mov	r1, r3
 800a210:	486a      	ldr	r0, [pc, #424]	@ (800a3bc <vReturnEthernetFrame+0x1c4>)
 800a212:	f018 fac7 	bl	80227a4 <lUDPLoggingPrintf>

            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a21a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a21c:	e008      	b.n	800a230 <vReturnEthernetFrame+0x38>
            {
                pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a224:	4413      	add	r3, r2
 800a226:	2200      	movs	r2, #0
 800a228:	701a      	strb	r2, [r3, #0]
            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800a22a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a22c:	3301      	adds	r3, #1
 800a22e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a232:	2b3b      	cmp	r3, #59	@ 0x3b
 800a234:	ddf3      	ble.n	800a21e <vReturnEthernetFrame+0x26>
            }

            pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	223c      	movs	r2, #60	@ 0x3c
 800a23a:	629a      	str	r2, [r3, #40]	@ 0x28
        }
    }
    #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

    #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        if( xReleaseAfterSend == pdFALSE )
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d111      	bne.n	800a266 <vReturnEthernetFrame+0x6e>
        {
            pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, pxNetworkBuffer->xDataLength );
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a246:	4619      	mov	r1, r3
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 fb87 	bl	800a95c <pxDuplicateNetworkBufferWithDescriptor>
 800a24e:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( pxNewBuffer != NULL )
 800a250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a252:	2b00      	cmp	r3, #0
 800a254:	d005      	beq.n	800a262 <vReturnEthernetFrame+0x6a>
            {
                xReleaseAfterSend = pdTRUE;
 800a256:	2301      	movs	r3, #1
 800a258:	603b      	str	r3, [r7, #0]
                /* Want no rounding up. */
                pxNewBuffer->xDataLength = pxNetworkBuffer->xDataLength;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a25e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a260:	629a      	str	r2, [r3, #40]	@ 0x28
            }

            pxNetworkBuffer = pxNewBuffer;
 800a262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a264:	607b      	str	r3, [r7, #4]
        }

        if( pxNetworkBuffer != NULL )
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	f000 80a3 	beq.w	800a3b4 <vReturnEthernetFrame+0x1bc>
    #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPPacket_t * pxIPPacket = ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a272:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource = NULL;
 800a274:	2300      	movs	r3, #0
 800a276:	633b      	str	r3, [r7, #48]	@ 0x30
        void * pvCopyDest;

        #if ( ipconfigUSE_IPv4 != 0 )
            MACAddress_t xMACAddress;
            eARPLookupResult_t eResult;
            uint32_t ulDestinationIPAddress = 0U;
 800a278:	2300      	movs	r3, #0
 800a27a:	613b      	str	r3, [r7, #16]
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        /* Send! */
        if( pxNetworkBuffer->pxEndPoint == NULL )
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a280:	2b00      	cmp	r3, #0
 800a282:	d12f      	bne.n	800a2e4 <vReturnEthernetFrame+0xec>
        {
            /* _HT_ I wonder if this ad-hoc search of an end-point it necessary. */
            FreeRTOS_printf( ( "vReturnEthernetFrame: No pxEndPoint yet for %x ip?\n", ( unsigned int ) FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulDestinationIPAddress ) ) );
 800a284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a286:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800a28a:	061a      	lsls	r2, r3, #24
 800a28c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a28e:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800a292:	021b      	lsls	r3, r3, #8
 800a294:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a298:	431a      	orrs	r2, r3
 800a29a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a29c:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800a2a0:	0a1b      	lsrs	r3, r3, #8
 800a2a2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a2a6:	431a      	orrs	r2, r3
 800a2a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2aa:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800a2ae:	0e1b      	lsrs	r3, r3, #24
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	4842      	ldr	r0, [pc, #264]	@ (800a3c0 <vReturnEthernetFrame+0x1c8>)
 800a2b6:	f018 fa75 	bl	80227a4 <lUDPLoggingPrintf>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            switch( ( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer ) )->usFrameType )
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2be:	899b      	ldrh	r3, [r3, #12]
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	2b08      	cmp	r3, #8
 800a2c4:	d003      	beq.n	800a2ce <vReturnEthernetFrame+0xd6>
 800a2c6:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800a2ca:	4293      	cmp	r3, r2
                        break;
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 800a2cc:	e00a      	b.n	800a2e4 <vReturnEthernetFrame+0xec>
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPPacket->xIPHeader.ulDestinationIPAddress, 7 );
 800a2ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d0:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800a2d4:	2107      	movs	r1, #7
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f003 fcfe 	bl	800dcd8 <FreeRTOS_FindEndPointOnNetMask>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	631a      	str	r2, [r3, #48]	@ 0x30
                        break;
 800a2e2:	bf00      	nop
            }
        }

        if( pxNetworkBuffer->pxEndPoint != NULL )
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d063      	beq.n	800a3b4 <vReturnEthernetFrame+0x1bc>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface; /*_RB_ Why not use the pxNetworkBuffer->pxNetworkInterface directly? */
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2f0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800a2f4:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Interpret the Ethernet packet being sent. */
            switch( pxIPPacket->xEthernetHeader.usFrameType )
 800a2f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f8:	899b      	ldrh	r3, [r3, #12]
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	2b08      	cmp	r3, #8
 800a2fe:	d11c      	bne.n	800a33a <vReturnEthernetFrame+0x142>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipIPv4_FRAME_TYPE:
                        ulDestinationIPAddress = pxIPPacket->xIPHeader.ulDestinationIPAddress;
 800a300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a302:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800a306:	613b      	str	r3, [r7, #16]

                        /* Try to find a MAC address corresponding to the destination IP
                         * address. */
                        eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &( pxNetworkBuffer->pxEndPoint ) );
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a30e:	f107 0114 	add.w	r1, r7, #20
 800a312:	f107 0310 	add.w	r3, r7, #16
 800a316:	4618      	mov	r0, r3
 800a318:	f7fd fa54 	bl	80077c4 <eARPGetCacheEntry>
 800a31c:	4603      	mov	r3, r0
 800a31e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                        if( eResult == eARPCacheHit )
 800a322:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a326:	2b01      	cmp	r3, #1
 800a328:	d103      	bne.n	800a332 <vReturnEthernetFrame+0x13a>
                        {
                            /* Best case scenario - an address is found, use it. */
                            pvCopySource = &xMACAddress;
 800a32a:	f107 0314 	add.w	r3, r7, #20
 800a32e:	633b      	str	r3, [r7, #48]	@ 0x30
                        else
                        {
                            /* If an address is not found, just swap the source and destination MAC addresses. */
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
                        }
                        break;
 800a330:	e007      	b.n	800a342 <vReturnEthernetFrame+0x14a>
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 800a332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a334:	3306      	adds	r3, #6
 800a336:	633b      	str	r3, [r7, #48]	@ 0x30
                        break;
 800a338:	e003      	b.n	800a342 <vReturnEthernetFrame+0x14a>

                case ipIPv6_FRAME_TYPE:
                case ipARP_FRAME_TYPE:
                default:
                    /* In case of ARP frame, just swap the source and destination MAC addresses. */
                    pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 800a33a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a33c:	3306      	adds	r3, #6
 800a33e:	633b      	str	r3, [r7, #48]	@ 0x30
                    break;
 800a340:	bf00      	nop
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xDestinationAddress );
 800a342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a344:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxIPPacket->xEthernetHeader.xDestinationAddress ) );
 800a346:	2206      	movs	r2, #6
 800a348:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a34a:	69f8      	ldr	r0, [r7, #28]
 800a34c:	f018 fc46 	bl	8022bdc <memcpy>

            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a354:	33e8      	adds	r3, #232	@ 0xe8
 800a356:	633b      	str	r3, [r7, #48]	@ 0x30
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 800a358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a35a:	3306      	adds	r3, #6
 800a35c:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800a35e:	2206      	movs	r2, #6
 800a360:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a362:	69f8      	ldr	r0, [r7, #28]
 800a364:	f018 fc3a 	bl	8022bdc <memcpy>

            /* Send! */
            if( xIsCallingFromIPTask() == pdTRUE )
 800a368:	f000 fbd4 	bl	800ab14 <xIsCallingFromIPTask>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d106      	bne.n	800a380 <vReturnEthernetFrame+0x188>
            {
                iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 800a372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	683a      	ldr	r2, [r7, #0]
 800a378:	6879      	ldr	r1, [r7, #4]
 800a37a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a37c:	4798      	blx	r3
                /* This should never reach or the packet is gone. */
                configASSERT( pdFALSE );
            }
        }
    }
}
 800a37e:	e019      	b.n	800a3b4 <vReturnEthernetFrame+0x1bc>
            else if( xReleaseAfterSend != pdFALSE )
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d011      	beq.n	800a3aa <vReturnEthernetFrame+0x1b2>
                xSendEvent.eEventType = eNetworkTxEvent;
 800a386:	2302      	movs	r3, #2
 800a388:	723b      	strb	r3, [r7, #8]
                xSendEvent.pvData = pxNetworkBuffer;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	60fb      	str	r3, [r7, #12]
                if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800a38e:	f107 0308 	add.w	r3, r7, #8
 800a392:	f04f 31ff 	mov.w	r1, #4294967295
 800a396:	4618      	mov	r0, r3
 800a398:	f7ff fc7a 	bl	8009c90 <xSendEventStructToIPTask>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d108      	bne.n	800a3b4 <vReturnEthernetFrame+0x1bc>
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f00d fb56 	bl	8017a54 <vReleaseNetworkBufferAndDescriptor>
}
 800a3a8:	e004      	b.n	800a3b4 <vReturnEthernetFrame+0x1bc>
                configASSERT( pdFALSE );
 800a3aa:	f640 019f 	movw	r1, #2207	@ 0x89f
 800a3ae:	4805      	ldr	r0, [pc, #20]	@ (800a3c4 <vReturnEthernetFrame+0x1cc>)
 800a3b0:	f7f7 fb2a 	bl	8001a08 <vAssertCalled>
}
 800a3b4:	bf00      	nop
 800a3b6:	3738      	adds	r7, #56	@ 0x38
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}
 800a3bc:	08025348 	.word	0x08025348
 800a3c0:	0802536c 	.word	0x0802536c
 800a3c4:	08025234 	.word	0x08025234

0800a3c8 <xIPIsNetworkTaskReady>:
 * @brief Returns whether the IP task is ready.
 *
 * @return pdTRUE if IP task is ready, else pdFALSE.
 */
BaseType_t xIPIsNetworkTaskReady( void )
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	af00      	add	r7, sp, #0
    return xIPTaskInitialised;
 800a3cc:	4b03      	ldr	r3, [pc, #12]	@ (800a3dc <xIPIsNetworkTaskReady+0x14>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr
 800a3da:	bf00      	nop
 800a3dc:	200011b0 	.word	0x200011b0

0800a3e0 <uxGetMinimumIPQueueSpace>:
 * @brief Get the minimum space in the IP task queue.
 *
 * @return The minimum possible space in the IP task queue.
 */
    UBaseType_t uxGetMinimumIPQueueSpace( void )
    {
 800a3e0:	b480      	push	{r7}
 800a3e2:	af00      	add	r7, sp, #0
        return uxQueueMinimumSpace;
 800a3e4:	4b03      	ldr	r3, [pc, #12]	@ (800a3f4 <uxGetMinimumIPQueueSpace+0x14>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
    }
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	20000014 	.word	0x20000014

0800a3f8 <uxIPHeaderSizePacket>:
 * @brief Get the size of the IP-header, by checking the type of the network buffer.
 * @param[in] pxNetworkBuffer The network buffer.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b085      	sub	sp, #20
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
    size_t uxResult;
    /* Map the buffer onto Ethernet Header struct for easy access to fields. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a404:	60bb      	str	r3, [r7, #8]

    if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	899b      	ldrh	r3, [r3, #12]
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800a410:	4293      	cmp	r3, r2
 800a412:	d102      	bne.n	800a41a <uxIPHeaderSizePacket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 800a414:	2328      	movs	r3, #40	@ 0x28
 800a416:	60fb      	str	r3, [r7, #12]
 800a418:	e001      	b.n	800a41e <uxIPHeaderSizePacket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 800a41a:	2314      	movs	r3, #20
 800a41c:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 800a41e:	68fb      	ldr	r3, [r7, #12]
}
 800a420:	4618      	mov	r0, r3
 800a422:	3714      	adds	r7, #20
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <uxIPHeaderSizeSocket>:
 * @brief Get the size of the IP-header, by checking if the socket bIsIPv6 set.
 * @param[in] pxSocket The socket.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizeSocket( const FreeRTOS_Socket_t * pxSocket )
{
 800a42c:	b480      	push	{r7}
 800a42e:	b085      	sub	sp, #20
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
    size_t uxResult;

    if( ( pxSocket != NULL ) && ( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED ) )
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d009      	beq.n	800a44e <uxIPHeaderSizeSocket+0x22>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	7a1b      	ldrb	r3, [r3, #8]
 800a43e:	f003 0301 	and.w	r3, r3, #1
 800a442:	b2db      	uxtb	r3, r3
 800a444:	2b00      	cmp	r3, #0
 800a446:	d002      	beq.n	800a44e <uxIPHeaderSizeSocket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 800a448:	2328      	movs	r3, #40	@ 0x28
 800a44a:	60fb      	str	r3, [r7, #12]
 800a44c:	e001      	b.n	800a452 <uxIPHeaderSizeSocket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 800a44e:	2314      	movs	r3, #20
 800a450:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 800a452:	68fb      	ldr	r3, [r7, #12]
}
 800a454:	4618      	mov	r0, r3
 800a456:	3714      	adds	r7, #20
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <xCalculateSleepTime>:
 *
 * @return The maximum sleep time or ipconfigMAX_IP_TASK_SLEEP_TIME,
 *         whichever is smaller.
 */
TickType_t xCalculateSleepTime( void )
{
 800a460:	b480      	push	{r7}
 800a462:	b083      	sub	sp, #12
 800a464:	af00      	add	r7, sp, #0
    TickType_t uxMaximumSleepTime;

    /* Start with the maximum sleep time, then check this against the remaining
     * time in any other timers that are active. */
    uxMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 800a466:	f242 7310 	movw	r3, #10000	@ 0x2710
 800a46a:	607b      	str	r3, [r7, #4]

    if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 800a46c:	4b28      	ldr	r3, [pc, #160]	@ (800a510 <xCalculateSleepTime+0xb0>)
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	f003 0301 	and.w	r3, r3, #1
 800a474:	b2db      	uxtb	r3, r3
 800a476:	2b00      	cmp	r3, #0
 800a478:	d007      	beq.n	800a48a <xCalculateSleepTime+0x2a>
    {
        if( xARPTimer.ulRemainingTime < uxMaximumSleepTime )
 800a47a:	4b25      	ldr	r3, [pc, #148]	@ (800a510 <xCalculateSleepTime+0xb0>)
 800a47c:	68db      	ldr	r3, [r3, #12]
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	429a      	cmp	r2, r3
 800a482:	d902      	bls.n	800a48a <xCalculateSleepTime+0x2a>
        {
            uxMaximumSleepTime = xARPTimer.ulRemainingTime;
 800a484:	4b22      	ldr	r3, [pc, #136]	@ (800a510 <xCalculateSleepTime+0xb0>)
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	607b      	str	r3, [r7, #4]
        }
    }

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        const NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800a48a:	4b22      	ldr	r3, [pc, #136]	@ (800a514 <xCalculateSleepTime+0xb4>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	603b      	str	r3, [r7, #0]

        while( pxEndPoint != NULL )
 800a490:	e015      	b.n	800a4be <xCalculateSleepTime+0x5e>
        {
            if( pxEndPoint->xDHCP_RATimer.bActive != pdFALSE_UNSIGNED )
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 800a498:	f003 0301 	and.w	r3, r3, #1
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d009      	beq.n	800a4b6 <xCalculateSleepTime+0x56>
            {
                if( pxEndPoint->xDHCP_RATimer.ulRemainingTime < uxMaximumSleepTime )
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d903      	bls.n	800a4b6 <xCalculateSleepTime+0x56>
                {
                    uxMaximumSleepTime = pxEndPoint->xDHCP_RATimer.ulRemainingTime;
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800a4b4:	607b      	str	r3, [r7, #4]
                }
            }

            pxEndPoint = pxEndPoint->pxNext;
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800a4bc:	603b      	str	r3, [r7, #0]
        while( pxEndPoint != NULL )
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d1e6      	bne.n	800a492 <xCalculateSleepTime+0x32>
    }
    #endif /* ipconfigUSE_DHCP */

    #if ( ipconfigUSE_TCP == 1 )
    {
        if( xTCPTimer.bActive != pdFALSE_UNSIGNED )
 800a4c4:	4b14      	ldr	r3, [pc, #80]	@ (800a518 <xCalculateSleepTime+0xb8>)
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	f003 0301 	and.w	r3, r3, #1
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d007      	beq.n	800a4e2 <xCalculateSleepTime+0x82>
        {
            if( xTCPTimer.ulRemainingTime < uxMaximumSleepTime )
 800a4d2:	4b11      	ldr	r3, [pc, #68]	@ (800a518 <xCalculateSleepTime+0xb8>)
 800a4d4:	68db      	ldr	r3, [r3, #12]
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d902      	bls.n	800a4e2 <xCalculateSleepTime+0x82>
            {
                uxMaximumSleepTime = xTCPTimer.ulRemainingTime;
 800a4dc:	4b0e      	ldr	r3, [pc, #56]	@ (800a518 <xCalculateSleepTime+0xb8>)
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	607b      	str	r3, [r7, #4]
    }
    #endif

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        if( xDNSTimer.bActive != pdFALSE_UNSIGNED )
 800a4e2:	4b0e      	ldr	r3, [pc, #56]	@ (800a51c <xCalculateSleepTime+0xbc>)
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	f003 0301 	and.w	r3, r3, #1
 800a4ea:	b2db      	uxtb	r3, r3
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d007      	beq.n	800a500 <xCalculateSleepTime+0xa0>
        {
            if( xDNSTimer.ulRemainingTime < uxMaximumSleepTime )
 800a4f0:	4b0a      	ldr	r3, [pc, #40]	@ (800a51c <xCalculateSleepTime+0xbc>)
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d902      	bls.n	800a500 <xCalculateSleepTime+0xa0>
            {
                uxMaximumSleepTime = xDNSTimer.ulRemainingTime;
 800a4fa:	4b08      	ldr	r3, [pc, #32]	@ (800a51c <xCalculateSleepTime+0xbc>)
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif

    return uxMaximumSleepTime;
 800a500:	687b      	ldr	r3, [r7, #4]
}
 800a502:	4618      	mov	r0, r3
 800a504:	370c      	adds	r7, #12
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr
 800a50e:	bf00      	nop
 800a510:	200011cc 	.word	0x200011cc
 800a514:	20001528 	.word	0x20001528
 800a518:	200011e0 	.word	0x200011e0
 800a51c:	200011f4 	.word	0x200011f4

0800a520 <vCheckNetworkTimers>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void vCheckNetworkTimers( void )
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b086      	sub	sp, #24
 800a524:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    /* Is it time for ARP processing? */
    if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 800a526:	484f      	ldr	r0, [pc, #316]	@ (800a664 <vCheckNetworkTimers+0x144>)
 800a528:	f000 f932 	bl	800a790 <prvIPTimerCheck>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d002      	beq.n	800a538 <vCheckNetworkTimers+0x18>
    {
        ( void ) xSendEventToIPTask( eARPTimerEvent );
 800a532:	2003      	movs	r0, #3
 800a534:	f7ff fb96 	bl	8009c64 <xSendEventToIPTask>
    }

    /* Is the ARP resolution timer expired? */
    if( prvIPTimerCheck( &xARPResolutionTimer ) != pdFALSE )
 800a538:	484b      	ldr	r0, [pc, #300]	@ (800a668 <vCheckNetworkTimers+0x148>)
 800a53a:	f000 f929 	bl	800a790 <prvIPTimerCheck>
 800a53e:	4603      	mov	r3, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	d00e      	beq.n	800a562 <vCheckNetworkTimers+0x42>
    {
        if( pxARPWaitingNetworkBuffer != NULL )
 800a544:	4b49      	ldr	r3, [pc, #292]	@ (800a66c <vCheckNetworkTimers+0x14c>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d00a      	beq.n	800a562 <vCheckNetworkTimers+0x42>
        {
            /* Disable the ARP resolution timer. */
            vIPSetARPResolutionTimerEnableState( pdFALSE );
 800a54c:	2000      	movs	r0, #0
 800a54e:	f000 f995 	bl	800a87c <vIPSetARPResolutionTimerEnableState>

            /* We have waited long enough for the ARP response. Now, free the network
             * buffer. */
            vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 800a552:	4b46      	ldr	r3, [pc, #280]	@ (800a66c <vCheckNetworkTimers+0x14c>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4618      	mov	r0, r3
 800a558:	f00d fa7c 	bl	8017a54 <vReleaseNetworkBufferAndDescriptor>

            /* Clear the pointer. */
            pxARPWaitingNetworkBuffer = NULL;
 800a55c:	4b43      	ldr	r3, [pc, #268]	@ (800a66c <vCheckNetworkTimers+0x14c>)
 800a55e:	2200      	movs	r2, #0
 800a560:	601a      	str	r2, [r3, #0]
    }

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        /* Is it time for DHCP processing? */
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800a562:	4b43      	ldr	r3, [pc, #268]	@ (800a670 <vCheckNetworkTimers+0x150>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	613b      	str	r3, [r7, #16]

        while( pxEndPoint != NULL )
 800a568:	e01f      	b.n	800a5aa <vCheckNetworkTimers+0x8a>
        {
            if( prvIPTimerCheck( &( pxEndPoint->xDHCP_RATimer ) ) != pdFALSE )
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	33f8      	adds	r3, #248	@ 0xf8
 800a56e:	4618      	mov	r0, r3
 800a570:	f000 f90e 	bl	800a790 <prvIPTimerCheck>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d013      	beq.n	800a5a2 <vCheckNetworkTimers+0x82>
                        ( void ) xSendDHCPEvent( pxEndPoint );
                    }
                #endif /* ( ipconfigUSE_DHCP == 1 ) */

                #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
                    if( END_POINT_USES_RA( pxEndPoint ) )
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a580:	f003 0304 	and.w	r3, r3, #4
 800a584:	b2db      	uxtb	r3, r3
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00b      	beq.n	800a5a2 <vCheckNetworkTimers+0x82>
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a590:	f003 0302 	and.w	r3, r3, #2
 800a594:	b2db      	uxtb	r3, r3
 800a596:	2b00      	cmp	r3, #0
 800a598:	d003      	beq.n	800a5a2 <vCheckNetworkTimers+0x82>
                    {
                        vRAProcess( pdFALSE, pxEndPoint );
 800a59a:	6939      	ldr	r1, [r7, #16]
 800a59c:	2000      	movs	r0, #0
 800a59e:	f003 f8f7 	bl	800d790 <vRAProcess>
                    }
                #endif /* ( ipconfigUSE_RA != 0 ) */
            }

            pxEndPoint = pxEndPoint->pxNext;
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800a5a8:	613b      	str	r3, [r7, #16]
        while( pxEndPoint != NULL )
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d1dc      	bne.n	800a56a <vCheckNetworkTimers+0x4a>
    #endif /* ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA != 0 ) */

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        /* Is it time for DNS processing? */
        if( prvIPTimerCheck( &xDNSTimer ) != pdFALSE )
 800a5b0:	4830      	ldr	r0, [pc, #192]	@ (800a674 <vCheckNetworkTimers+0x154>)
 800a5b2:	f000 f8ed 	bl	800a790 <prvIPTimerCheck>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d002      	beq.n	800a5c2 <vCheckNetworkTimers+0xa2>
        {
            vDNSCheckCallBack( NULL );
 800a5bc:	2000      	movs	r0, #0
 800a5be:	f7fd fff9 	bl	80085b4 <vDNSCheckCallBack>
        TickType_t xNextTime;
        BaseType_t xCheckTCPSockets;

        /* If the IP task has messages waiting to be processed then
         * it will not sleep in any case. */
        if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0U )
 800a5c2:	4b2d      	ldr	r3, [pc, #180]	@ (800a678 <vCheckNetworkTimers+0x158>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f7f9 fda8 	bl	800411c <uxQueueMessagesWaiting>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d102      	bne.n	800a5d8 <vCheckNetworkTimers+0xb8>
        {
            xWillSleep = pdTRUE;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	60fb      	str	r3, [r7, #12]
 800a5d6:	e001      	b.n	800a5dc <vCheckNetworkTimers+0xbc>
        }
        else
        {
            xWillSleep = pdFALSE;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	60fb      	str	r3, [r7, #12]
        }

        /* Sockets need to be checked if the TCP timer has expired. */
        xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 800a5dc:	4827      	ldr	r0, [pc, #156]	@ (800a67c <vCheckNetworkTimers+0x15c>)
 800a5de:	f000 f8d7 	bl	800a790 <prvIPTimerCheck>
 800a5e2:	60b8      	str	r0, [r7, #8]

        /* Sockets will also be checked if there are TCP messages but the
        * message queue is empty (indicated by xWillSleep being true). */
        if( xWillSleep != pdFALSE )
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d001      	beq.n	800a5ee <vCheckNetworkTimers+0xce>
        {
            xCheckTCPSockets = pdTRUE;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	60bb      	str	r3, [r7, #8]
        }

        if( xCheckTCPSockets != pdFALSE )
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d007      	beq.n	800a604 <vCheckNetworkTimers+0xe4>
        {
            /* Attend to the sockets, returning the period after which the
             * check must be repeated. */
            xNextTime = xTCPTimerCheck( xWillSleep );
 800a5f4:	68f8      	ldr	r0, [r7, #12]
 800a5f6:	f006 f85d 	bl	80106b4 <xTCPTimerCheck>
 800a5fa:	6038      	str	r0, [r7, #0]
            prvIPTimerStart( &xTCPTimer, xNextTime );
 800a5fc:	6839      	ldr	r1, [r7, #0]
 800a5fe:	481f      	ldr	r0, [pc, #124]	@ (800a67c <vCheckNetworkTimers+0x15c>)
 800a600:	f000 f844 	bl	800a68c <prvIPTimerStart>
        }
    }

    /* See if any socket was planned to be closed. */
    vSocketCloseNextTime( NULL );
 800a604:	2000      	movs	r0, #0
 800a606:	f006 ff8d 	bl	8011524 <vSocketCloseNextTime>

    /* See if any reusable socket needs to go back to 'eTCP_LISTEN' state. */
    vSocketListenNextTime( NULL );
 800a60a:	2000      	movs	r0, #0
 800a60c:	f006 ffa6 	bl	801155c <vSocketListenNextTime>
    #endif /* ipconfigUSE_TCP == 1 */

    /* Is it time to trigger the repeated NetworkDown events? */
    if( xAllNetworksUp == pdFALSE )
 800a610:	4b1b      	ldr	r3, [pc, #108]	@ (800a680 <vCheckNetworkTimers+0x160>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d120      	bne.n	800a65a <vCheckNetworkTimers+0x13a>
    {
        if( prvIPTimerCheck( &( xNetworkTimer ) ) != pdFALSE )
 800a618:	481a      	ldr	r0, [pc, #104]	@ (800a684 <vCheckNetworkTimers+0x164>)
 800a61a:	f000 f8b9 	bl	800a790 <prvIPTimerCheck>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d01a      	beq.n	800a65a <vCheckNetworkTimers+0x13a>
        {
            BaseType_t xUp = pdTRUE;
 800a624:	2301      	movs	r3, #1
 800a626:	607b      	str	r3, [r7, #4]

            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 800a628:	4b17      	ldr	r3, [pc, #92]	@ (800a688 <vCheckNetworkTimers+0x168>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	617b      	str	r3, [r7, #20]
 800a62e:	e00e      	b.n	800a64e <vCheckNetworkTimers+0x12e>
            {
                if( pxInterface->bits.bInterfaceUp == pdFALSE_UNSIGNED )
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	7f1b      	ldrb	r3, [r3, #28]
 800a634:	f003 0301 	and.w	r3, r3, #1
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d104      	bne.n	800a648 <vCheckNetworkTimers+0x128>
                {
                    xUp = pdFALSE;
 800a63e:	2300      	movs	r3, #0
 800a640:	607b      	str	r3, [r7, #4]
                    FreeRTOS_NetworkDown( pxInterface );
 800a642:	6978      	ldr	r0, [r7, #20]
 800a644:	f7ff fa30 	bl	8009aa8 <FreeRTOS_NetworkDown>
            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a64c:	617b      	str	r3, [r7, #20]
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d1ed      	bne.n	800a630 <vCheckNetworkTimers+0x110>
                }
            }

            vSetAllNetworksUp( xUp );
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 f971 	bl	800a93c <vSetAllNetworksUp>
        }
    }
}
 800a65a:	bf00      	nop
 800a65c:	3718      	adds	r7, #24
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
 800a662:	bf00      	nop
 800a664:	200011cc 	.word	0x200011cc
 800a668:	200011b8 	.word	0x200011b8
 800a66c:	2000119c 	.word	0x2000119c
 800a670:	20001528 	.word	0x20001528
 800a674:	200011f4 	.word	0x200011f4
 800a678:	200011a0 	.word	0x200011a0
 800a67c:	200011e0 	.word	0x200011e0
 800a680:	200011b4 	.word	0x200011b4
 800a684:	20001208 	.word	0x20001208
 800a688:	2000152c 	.word	0x2000152c

0800a68c <prvIPTimerStart>:
 *                     as expired.
 * @param[in] xTime Time to be loaded into the IP timer.
 */
static void prvIPTimerStart( IPTimer_t * pxTimer,
                             TickType_t xTime )
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	6039      	str	r1, [r7, #0]
    vTaskSetTimeOutState( &pxTimer->xTimeOut );
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	3304      	adds	r3, #4
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7fa fec2 	bl	8005424 <vTaskSetTimeOutState>
    pxTimer->ulRemainingTime = xTime;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	683a      	ldr	r2, [r7, #0]
 800a6a4:	60da      	str	r2, [r3, #12]

    if( xTime == ( TickType_t ) 0 )
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d105      	bne.n	800a6b8 <prvIPTimerStart+0x2c>
    {
        pxTimer->bExpired = pdTRUE_UNSIGNED;
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	7813      	ldrb	r3, [r2, #0]
 800a6b0:	f043 0302 	orr.w	r3, r3, #2
 800a6b4:	7013      	strb	r3, [r2, #0]
 800a6b6:	e004      	b.n	800a6c2 <prvIPTimerStart+0x36>
    }
    else
    {
        pxTimer->bExpired = pdFALSE_UNSIGNED;
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	7813      	ldrb	r3, [r2, #0]
 800a6bc:	f36f 0341 	bfc	r3, #1, #1
 800a6c0:	7013      	strb	r3, [r2, #0]
    }

    pxTimer->bActive = pdTRUE_UNSIGNED;
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	7813      	ldrb	r3, [r2, #0]
 800a6c6:	f043 0301 	orr.w	r3, r3, #1
 800a6ca:	7013      	strb	r3, [r2, #0]
}
 800a6cc:	bf00      	nop
 800a6ce:	3708      	adds	r7, #8
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <vIPTimerStartARPResolution>:
 * @brief Start an ARP Resolution timer.
 *
 * @param[in] xTime Time to be loaded into the ARP Resolution timer.
 */
void vIPTimerStartARPResolution( TickType_t xTime )
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
    prvIPTimerStart( &( xARPResolutionTimer ), xTime );
 800a6dc:	6879      	ldr	r1, [r7, #4]
 800a6de:	4803      	ldr	r0, [pc, #12]	@ (800a6ec <vIPTimerStartARPResolution+0x18>)
 800a6e0:	f7ff ffd4 	bl	800a68c <prvIPTimerStart>
}
 800a6e4:	bf00      	nop
 800a6e6:	3708      	adds	r7, #8
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}
 800a6ec:	200011b8 	.word	0x200011b8

0800a6f0 <prvIPTimerReload>:
 * @param[in] pxTimer Pointer to the IP timer.
 * @param[in] xTime Time to be reloaded into the IP timer.
 */
static void prvIPTimerReload( IPTimer_t * pxTimer,
                              TickType_t xTime )
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
    pxTimer->ulReloadTime = xTime;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	683a      	ldr	r2, [r7, #0]
 800a6fe:	611a      	str	r2, [r3, #16]
    prvIPTimerStart( pxTimer, xTime );
 800a700:	6839      	ldr	r1, [r7, #0]
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f7ff ffc2 	bl	800a68c <prvIPTimerStart>
}
 800a708:	bf00      	nop
 800a70a:	3708      	adds	r7, #8
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <vTCPTimerReload>:
 * @brief Sets the reload time of the TCP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the TCP timer.
 */
    void vTCPTimerReload( TickType_t xTime )
    {
 800a710:	b580      	push	{r7, lr}
 800a712:	b082      	sub	sp, #8
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
        prvIPTimerReload( &xTCPTimer, xTime );
 800a718:	6879      	ldr	r1, [r7, #4]
 800a71a:	4803      	ldr	r0, [pc, #12]	@ (800a728 <vTCPTimerReload+0x18>)
 800a71c:	f7ff ffe8 	bl	800a6f0 <prvIPTimerReload>
    }
 800a720:	bf00      	nop
 800a722:	3708      	adds	r7, #8
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}
 800a728:	200011e0 	.word	0x200011e0

0800a72c <vARPTimerReload>:
 * @brief Sets the reload time of the ARP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the ARP timer.
 */
void vARPTimerReload( TickType_t xTime )
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
    prvIPTimerReload( &xARPTimer, xTime );
 800a734:	6879      	ldr	r1, [r7, #4]
 800a736:	4803      	ldr	r0, [pc, #12]	@ (800a744 <vARPTimerReload+0x18>)
 800a738:	f7ff ffda 	bl	800a6f0 <prvIPTimerReload>
}
 800a73c:	bf00      	nop
 800a73e:	3708      	adds	r7, #8
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	200011cc 	.word	0x200011cc

0800a748 <vDHCP_RATimerReload>:
 * @param[in] uxClockTicks The number of clock-ticks after which the timer should expire.
 */

    void vDHCP_RATimerReload( NetworkEndPoint_t * pxEndPoint,
                              TickType_t uxClockTicks )
    {
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
        FreeRTOS_printf( ( "vDHCP_RATimerReload: %lu\n", uxClockTicks ) );
 800a752:	6839      	ldr	r1, [r7, #0]
 800a754:	4806      	ldr	r0, [pc, #24]	@ (800a770 <vDHCP_RATimerReload+0x28>)
 800a756:	f018 f825 	bl	80227a4 <lUDPLoggingPrintf>
        prvIPTimerReload( &( pxEndPoint->xDHCP_RATimer ), uxClockTicks );
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	33f8      	adds	r3, #248	@ 0xf8
 800a75e:	6839      	ldr	r1, [r7, #0]
 800a760:	4618      	mov	r0, r3
 800a762:	f7ff ffc5 	bl	800a6f0 <prvIPTimerReload>
    }
 800a766:	bf00      	nop
 800a768:	3708      	adds	r7, #8
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	080253a0 	.word	0x080253a0

0800a774 <vNetworkTimerReload>:
 * @brief Reload the Network timer.
 *
 * @param[in] xTime Time to be reloaded into the Network timer.
 */
void vNetworkTimerReload( TickType_t xTime )
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
    prvIPTimerReload( &xNetworkTimer, xTime );
 800a77c:	6879      	ldr	r1, [r7, #4]
 800a77e:	4803      	ldr	r0, [pc, #12]	@ (800a78c <vNetworkTimerReload+0x18>)
 800a780:	f7ff ffb6 	bl	800a6f0 <prvIPTimerReload>
}
 800a784:	bf00      	nop
 800a786:	3708      	adds	r7, #8
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	20001208 	.word	0x20001208

0800a790 <prvIPTimerCheck>:
 * @param[in] pxTimer Pointer to the IP timer.
 *
 * @return If the timer is expired then pdTRUE is returned. Else pdFALSE.
 */
static BaseType_t prvIPTimerCheck( IPTimer_t * pxTimer )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( pxTimer->bActive == pdFALSE_UNSIGNED )
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	f003 0301 	and.w	r3, r3, #1
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d102      	bne.n	800a7ac <prvIPTimerCheck+0x1c>
    {
        /* The timer is not enabled. */
        xReturn = pdFALSE;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	60fb      	str	r3, [r7, #12]
 800a7aa:	e028      	b.n	800a7fe <prvIPTimerCheck+0x6e>
    }
    else
    {
        /* The timer might have set the bExpired flag already, if not, check the
         * value of xTimeOut against ulRemainingTime. */
        if( pxTimer->bExpired == pdFALSE_UNSIGNED )
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	f003 0302 	and.w	r3, r3, #2
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d10f      	bne.n	800a7da <prvIPTimerCheck+0x4a>
        {
            if( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE )
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	1d1a      	adds	r2, r3, #4
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	330c      	adds	r3, #12
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	4610      	mov	r0, r2
 800a7c6:	f7fa fe65 	bl	8005494 <xTaskCheckForTimeOut>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d004      	beq.n	800a7da <prvIPTimerCheck+0x4a>
            {
                pxTimer->bExpired = pdTRUE_UNSIGNED;
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	7813      	ldrb	r3, [r2, #0]
 800a7d4:	f043 0302 	orr.w	r3, r3, #2
 800a7d8:	7013      	strb	r3, [r2, #0]
            }
        }

        if( pxTimer->bExpired != pdFALSE_UNSIGNED )
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	f003 0302 	and.w	r3, r3, #2
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d008      	beq.n	800a7fa <prvIPTimerCheck+0x6a>
        {
            prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	691b      	ldr	r3, [r3, #16]
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f7ff ff4c 	bl	800a68c <prvIPTimerStart>
            xReturn = pdTRUE;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	60fb      	str	r3, [r7, #12]
 800a7f8:	e001      	b.n	800a7fe <prvIPTimerCheck+0x6e>
        }
        else
        {
            xReturn = pdFALSE;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
}
 800a800:	4618      	mov	r0, r3
 800a802:	3710      	adds	r7, #16
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <vIPSetTCPTimerExpiredState>:
 * @brief Enable/disable the TCP timer.
 *
 * @param[in] xExpiredState pdTRUE - set as expired; pdFALSE - set as non-expired.
 */
    void vIPSetTCPTimerExpiredState( BaseType_t xExpiredState )
    {
 800a808:	b480      	push	{r7}
 800a80a:	b083      	sub	sp, #12
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
        xTCPTimer.bActive = pdTRUE_UNSIGNED;
 800a810:	4a0c      	ldr	r2, [pc, #48]	@ (800a844 <vIPSetTCPTimerExpiredState+0x3c>)
 800a812:	7813      	ldrb	r3, [r2, #0]
 800a814:	f043 0301 	orr.w	r3, r3, #1
 800a818:	7013      	strb	r3, [r2, #0]

        if( xExpiredState != pdFALSE )
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d005      	beq.n	800a82c <vIPSetTCPTimerExpiredState+0x24>
        {
            xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 800a820:	4a08      	ldr	r2, [pc, #32]	@ (800a844 <vIPSetTCPTimerExpiredState+0x3c>)
 800a822:	7813      	ldrb	r3, [r2, #0]
 800a824:	f043 0302 	orr.w	r3, r3, #2
 800a828:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
        }
    }
 800a82a:	e004      	b.n	800a836 <vIPSetTCPTimerExpiredState+0x2e>
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
 800a82c:	4a05      	ldr	r2, [pc, #20]	@ (800a844 <vIPSetTCPTimerExpiredState+0x3c>)
 800a82e:	7813      	ldrb	r3, [r2, #0]
 800a830:	f36f 0341 	bfc	r3, #1, #1
 800a834:	7013      	strb	r3, [r2, #0]
    }
 800a836:	bf00      	nop
 800a838:	370c      	adds	r7, #12
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr
 800a842:	bf00      	nop
 800a844:	200011e0 	.word	0x200011e0

0800a848 <vIPSetARPTimerEnableState>:
 * @brief Enable/disable the ARP timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
void vIPSetARPTimerEnableState( BaseType_t xEnableState )
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
    if( xEnableState != pdFALSE )
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d005      	beq.n	800a862 <vIPSetARPTimerEnableState+0x1a>
    {
        xARPTimer.bActive = pdTRUE_UNSIGNED;
 800a856:	4a08      	ldr	r2, [pc, #32]	@ (800a878 <vIPSetARPTimerEnableState+0x30>)
 800a858:	7813      	ldrb	r3, [r2, #0]
 800a85a:	f043 0301 	orr.w	r3, r3, #1
 800a85e:	7013      	strb	r3, [r2, #0]
    }
    else
    {
        xARPTimer.bActive = pdFALSE_UNSIGNED;
    }
}
 800a860:	e004      	b.n	800a86c <vIPSetARPTimerEnableState+0x24>
        xARPTimer.bActive = pdFALSE_UNSIGNED;
 800a862:	4a05      	ldr	r2, [pc, #20]	@ (800a878 <vIPSetARPTimerEnableState+0x30>)
 800a864:	7813      	ldrb	r3, [r2, #0]
 800a866:	f36f 0300 	bfc	r3, #0, #1
 800a86a:	7013      	strb	r3, [r2, #0]
}
 800a86c:	bf00      	nop
 800a86e:	370c      	adds	r7, #12
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr
 800a878:	200011cc 	.word	0x200011cc

0800a87c <vIPSetARPResolutionTimerEnableState>:
 * @brief Enable or disable the ARP resolution timer.
 *
 * @param[in] xEnableState pdTRUE if the timer must be enabled, pdFALSE otherwise.
 */
void vIPSetARPResolutionTimerEnableState( BaseType_t xEnableState )
{
 800a87c:	b480      	push	{r7}
 800a87e:	b083      	sub	sp, #12
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
    if( xEnableState != pdFALSE )
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d005      	beq.n	800a896 <vIPSetARPResolutionTimerEnableState+0x1a>
    {
        xARPResolutionTimer.bActive = pdTRUE_UNSIGNED;
 800a88a:	4a08      	ldr	r2, [pc, #32]	@ (800a8ac <vIPSetARPResolutionTimerEnableState+0x30>)
 800a88c:	7813      	ldrb	r3, [r2, #0]
 800a88e:	f043 0301 	orr.w	r3, r3, #1
 800a892:	7013      	strb	r3, [r2, #0]
    }
    else
    {
        xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
    }
}
 800a894:	e004      	b.n	800a8a0 <vIPSetARPResolutionTimerEnableState+0x24>
        xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
 800a896:	4a05      	ldr	r2, [pc, #20]	@ (800a8ac <vIPSetARPResolutionTimerEnableState+0x30>)
 800a898:	7813      	ldrb	r3, [r2, #0]
 800a89a:	f36f 0300 	bfc	r3, #0, #1
 800a89e:	7013      	strb	r3, [r2, #0]
}
 800a8a0:	bf00      	nop
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr
 800a8ac:	200011b8 	.word	0x200011b8

0800a8b0 <vIPSetDHCP_RATimerEnableState>:
 * @param[in] pxEndPoint The end-point that needs to acquire an IP-address.
 * @param[in] xEnableState pdTRUE if the timer must be enabled, pdFALSE otherwise.
 */
    void vIPSetDHCP_RATimerEnableState( NetworkEndPoint_t * pxEndPoint,
                                        BaseType_t xEnableState )
    {
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	6039      	str	r1, [r7, #0]
        FreeRTOS_printf( ( "vIPSetDHCP_RATimerEnableState: %s\n", ( xEnableState != 0 ) ? "On" : "Off" ) );
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d001      	beq.n	800a8c4 <vIPSetDHCP_RATimerEnableState+0x14>
 800a8c0:	4b0e      	ldr	r3, [pc, #56]	@ (800a8fc <vIPSetDHCP_RATimerEnableState+0x4c>)
 800a8c2:	e000      	b.n	800a8c6 <vIPSetDHCP_RATimerEnableState+0x16>
 800a8c4:	4b0e      	ldr	r3, [pc, #56]	@ (800a900 <vIPSetDHCP_RATimerEnableState+0x50>)
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	480e      	ldr	r0, [pc, #56]	@ (800a904 <vIPSetDHCP_RATimerEnableState+0x54>)
 800a8ca:	f017 ff6b 	bl	80227a4 <lUDPLoggingPrintf>

        /* 'xDHCP_RATimer' is shared between DHCP (IPv4) and RA/SLAAC (IPv6). */
        if( xEnableState != 0 )
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d007      	beq.n	800a8e4 <vIPSetDHCP_RATimerEnableState+0x34>
        {
            pxEndPoint->xDHCP_RATimer.bActive = pdTRUE_UNSIGNED;
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	f892 30f8 	ldrb.w	r3, [r2, #248]	@ 0xf8
 800a8da:	f043 0301 	orr.w	r3, r3, #1
 800a8de:	f882 30f8 	strb.w	r3, [r2, #248]	@ 0xf8
        }
        else
        {
            pxEndPoint->xDHCP_RATimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 800a8e2:	e006      	b.n	800a8f2 <vIPSetDHCP_RATimerEnableState+0x42>
            pxEndPoint->xDHCP_RATimer.bActive = pdFALSE_UNSIGNED;
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	f892 30f8 	ldrb.w	r3, [r2, #248]	@ 0xf8
 800a8ea:	f36f 0300 	bfc	r3, #0, #1
 800a8ee:	f882 30f8 	strb.w	r3, [r2, #248]	@ 0xf8
    }
 800a8f2:	bf00      	nop
 800a8f4:	3708      	adds	r7, #8
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	080253bc 	.word	0x080253bc
 800a900:	080253c0 	.word	0x080253c0
 800a904:	080253c4 	.word	0x080253c4

0800a908 <vIPSetDNSTimerEnableState>:
 * @brief Enable/disable the DNS timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
    void vIPSetDNSTimerEnableState( BaseType_t xEnableState )
    {
 800a908:	b480      	push	{r7}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
        if( xEnableState != 0 )
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d005      	beq.n	800a922 <vIPSetDNSTimerEnableState+0x1a>
        {
            xDNSTimer.bActive = pdTRUE_UNSIGNED;
 800a916:	4a08      	ldr	r2, [pc, #32]	@ (800a938 <vIPSetDNSTimerEnableState+0x30>)
 800a918:	7813      	ldrb	r3, [r2, #0]
 800a91a:	f043 0301 	orr.w	r3, r3, #1
 800a91e:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 800a920:	e004      	b.n	800a92c <vIPSetDNSTimerEnableState+0x24>
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
 800a922:	4a05      	ldr	r2, [pc, #20]	@ (800a938 <vIPSetDNSTimerEnableState+0x30>)
 800a924:	7813      	ldrb	r3, [r2, #0]
 800a926:	f36f 0300 	bfc	r3, #0, #1
 800a92a:	7013      	strb	r3, [r2, #0]
    }
 800a92c:	bf00      	nop
 800a92e:	370c      	adds	r7, #12
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr
 800a938:	200011f4 	.word	0x200011f4

0800a93c <vSetAllNetworksUp>:
/**
 * @brief Mark whether all interfaces are up or at least one interface is down.
 *        If all interfaces are up, the 'xNetworkTimer' will not be checked.
 */
void vSetAllNetworksUp( BaseType_t xIsAllNetworksUp )
{
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
    xAllNetworksUp = xIsAllNetworksUp;
 800a944:	4a04      	ldr	r2, [pc, #16]	@ (800a958 <vSetAllNetworksUp+0x1c>)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6013      	str	r3, [r2, #0]
}
 800a94a:	bf00      	nop
 800a94c:	370c      	adds	r7, #12
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr
 800a956:	bf00      	nop
 800a958:	200011b4 	.word	0x200011b4

0800a95c <pxDuplicateNetworkBufferWithDescriptor>:
 *
 * @return If properly duplicated, then the duplicate network buffer or else, NULL.
 */
NetworkBufferDescriptor_t * pxDuplicateNetworkBufferWithDescriptor( const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                                    size_t uxNewLength )
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b084      	sub	sp, #16
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxNewBuffer;
    size_t uxLengthToCopy = uxNewLength;
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	60fb      	str	r3, [r7, #12]

    /* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
     * The transmit routine wants to have ownership of the network buffer
     * descriptor, because it will pass the buffer straight to DMA. */
    pxNewBuffer = pxGetNetworkBufferWithDescriptor( uxNewLength, ( TickType_t ) 0 );
 800a96a:	2100      	movs	r1, #0
 800a96c:	6838      	ldr	r0, [r7, #0]
 800a96e:	f00d f809 	bl	8017984 <pxGetNetworkBufferWithDescriptor>
 800a972:	60b8      	str	r0, [r7, #8]

    if( pxNewBuffer != NULL )
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d03e      	beq.n	800a9f8 <pxDuplicateNetworkBufferWithDescriptor+0x9c>
    {
        configASSERT( pxNewBuffer->pucEthernetBuffer != NULL );
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d104      	bne.n	800a98c <pxDuplicateNetworkBufferWithDescriptor+0x30>
 800a982:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800a986:	481f      	ldr	r0, [pc, #124]	@ (800aa04 <pxDuplicateNetworkBufferWithDescriptor+0xa8>)
 800a988:	f7f7 f83e 	bl	8001a08 <vAssertCalled>

        /* Get the minimum of both values to copy the data. */
        if( uxLengthToCopy > pxNetworkBuffer->xDataLength )
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	429a      	cmp	r2, r3
 800a994:	d902      	bls.n	800a99c <pxDuplicateNetworkBufferWithDescriptor+0x40>
        {
            uxLengthToCopy = pxNetworkBuffer->xDataLength;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a99a:	60fb      	str	r3, [r7, #12]
        }

        /* Set the actual packet size in case a bigger buffer than requested
         * was returned. */
        pxNewBuffer->xDataLength = uxNewLength;
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	683a      	ldr	r2, [r7, #0]
 800a9a0:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Copy the original packet information. */
        pxNewBuffer->xIPAddress.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	695a      	ldr	r2, [r3, #20]
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	615a      	str	r2, [r3, #20]
        pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	86da      	strh	r2, [r3, #54]	@ 0x36
        pxNewBuffer->pxInterface = pxNetworkBuffer->pxInterface;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pxNewBuffer->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	631a      	str	r2, [r3, #48]	@ 0x30
        ( void ) memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, uxLengthToCopy );
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9d2:	68fa      	ldr	r2, [r7, #12]
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	f018 f901 	bl	8022bdc <memcpy>

        #if ( ipconfigUSE_IPv6 != 0 )
            if( uxIPHeaderSizePacket( pxNewBuffer ) == ipSIZE_OF_IPv6_HEADER )
 800a9da:	68b8      	ldr	r0, [r7, #8]
 800a9dc:	f7ff fd0c 	bl	800a3f8 <uxIPHeaderSizePacket>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b28      	cmp	r3, #40	@ 0x28
 800a9e4:	d108      	bne.n	800a9f8 <pxDuplicateNetworkBufferWithDescriptor+0x9c>
            {
                ( void ) memcpy( pxNewBuffer->xIPAddress.xIP_IPv6.ucBytes, pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	f103 0014 	add.w	r0, r3, #20
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	3314      	adds	r3, #20
 800a9f0:	2210      	movs	r2, #16
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	f018 f8f2 	bl	8022bdc <memcpy>
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
    }

    return pxNewBuffer;
 800a9f8:	68bb      	ldr	r3, [r7, #8]
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3710      	adds	r7, #16
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	080253e8 	.word	0x080253e8

0800aa08 <prvPacketBuffer_to_NetworkBuffer>:
 *
 * @return The network buffer descriptor if the alignment is correct. Else a NULL is returned.
 */
static NetworkBufferDescriptor_t * prvPacketBuffer_to_NetworkBuffer( const void * pvBuffer,
                                                                     size_t uxOffset )
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
    uintptr_t uxBuffer;
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d102      	bne.n	800aa1e <prvPacketBuffer_to_NetworkBuffer+0x16>
    {
        pxResult = NULL;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	60fb      	str	r3, [r7, #12]
 800aa1c:	e013      	b.n	800aa46 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        /* Obtain the network buffer from the zero copy pointer. */

        /* MISRA Ref 11.6.2 [Pointer arithmetic and hidden pointer] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-116 */
        /* coverity[misra_c_2012_rule_11_6_violation] */
        uxBuffer = void_ptr_to_uintptr( pvBuffer );
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 f816 	bl	800aa50 <void_ptr_to_uintptr>
 800aa24:	60b8      	str	r0, [r7, #8]

        /* The input here is a pointer to a packet buffer plus some offset.  Subtract
         * this offset, and also the size of the header in the network buffer, usually
         * 8 + 2 bytes. */
        uxBuffer -= ( uxOffset + ipBUFFER_PADDING );
 800aa26:	68ba      	ldr	r2, [r7, #8]
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	1ad3      	subs	r3, r2, r3
 800aa2c:	3b0a      	subs	r3, #10
 800aa2e:	60bb      	str	r3, [r7, #8]

        /* Here a pointer was placed to the network descriptor.  As a
         * pointer is dereferenced, make sure it is well aligned. */
        if( ( uxBuffer & ( ( ( uintptr_t ) sizeof( uxBuffer ) ) - 1U ) ) == ( uintptr_t ) 0U )
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	f003 0303 	and.w	r3, r3, #3
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d103      	bne.n	800aa42 <prvPacketBuffer_to_NetworkBuffer+0x3a>
        {
            /* MISRA Ref 11.4.2 [Validation of pointer alignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            pxResult = *( ( NetworkBufferDescriptor_t ** ) uxBuffer );
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	60fb      	str	r3, [r7, #12]
 800aa40:	e001      	b.n	800aa46 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        }
        else
        {
            pxResult = NULL;
 800aa42:	2300      	movs	r3, #0
 800aa44:	60fb      	str	r3, [r7, #12]
        }
    }

    return pxResult;
 800aa46:	68fb      	ldr	r3, [r7, #12]
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3710      	adds	r7, #16
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <void_ptr_to_uintptr>:
 *        using a union as defined here above.
 * @param[in] pvPointer A void pointer to be converted.
 * @return The value of the void pointer as an unsigned number.
 */
static uintptr_t void_ptr_to_uintptr( const void * pvPointer )
{
 800aa50:	b480      	push	{r7}
 800aa52:	b085      	sub	sp, #20
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
    /* The type 'uintptr_t' has the same size as a pointer.
     * Therefore, it is safe to use a union to convert it. */
    union uIntPtr intPtr;

    intPtr.pvPtr = pvPointer;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	60fb      	str	r3, [r7, #12]
    return intPtr.uxPtr;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3714      	adds	r7, #20
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr

0800aa6a <pxPacketBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer Pointer to the packet buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
    NetworkBufferDescriptor_t * pxPacketBuffer_to_NetworkBuffer( const void * pvBuffer )
    {
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b082      	sub	sp, #8
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
        return prvPacketBuffer_to_NetworkBuffer( pvBuffer, 0U );
 800aa72:	2100      	movs	r1, #0
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f7ff ffc7 	bl	800aa08 <prvPacketBuffer_to_NetworkBuffer>
 800aa7a:	4603      	mov	r3, r0
    }
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3708      	adds	r7, #8
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <pxUDPPayloadBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer Pointer to the UDP payload buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
NetworkBufferDescriptor_t * pxUDPPayloadBuffer_to_NetworkBuffer( const void * pvBuffer )
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b088      	sub	sp, #32
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d102      	bne.n	800aa98 <pxUDPPayloadBuffer_to_NetworkBuffer+0x14>
    {
        pxResult = NULL;
 800aa92:	2300      	movs	r3, #0
 800aa94:	61fb      	str	r3, [r7, #28]
 800aa96:	e033      	b.n	800ab00 <pxUDPPayloadBuffer_to_NetworkBuffer+0x7c>
        const uint8_t * pucIPType;
        uint8_t ucIPType;

        /* When IPv6 is supported, find out the type of the packet.
         * It is stored 48 bytes before the payload buffer as 0x40 or 0x60. */
        uxTypeOffset = void_ptr_to_uintptr( pvBuffer );
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f7ff ffd9 	bl	800aa50 <void_ptr_to_uintptr>
 800aa9e:	6178      	str	r0, [r7, #20]
        uxTypeOffset -= ipUDP_PAYLOAD_IP_TYPE_OFFSET;
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	3b30      	subs	r3, #48	@ 0x30
 800aaa4:	617b      	str	r3, [r7, #20]
        /* MISRA Ref 11.4.3 [Casting pointer to int for verification] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
        /* coverity[misra_c_2012_rule_11_4_violation] */
        pucIPType = ( const uint8_t * ) uxTypeOffset;
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	613b      	str	r3, [r7, #16]

        /* For an IPv4 packet, pucIPType points to 6 bytes before the pucEthernetBuffer,
         * for a IPv6 packet, pucIPType will point to the first byte of the IP-header: 'ucVersionTrafficClass'. */
        ucIPType = pucIPType[ 0 ] & 0xf0U;
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	f023 030f 	bic.w	r3, r3, #15
 800aab2:	73fb      	strb	r3, [r7, #15]

        /* To help the translation from a UDP payload pointer to a networkBuffer,
         * a byte was stored at a certain negative offset (-48 bytes).
         * It must have a value of either 0x4x or 0x6x. */
        configASSERT( ( ucIPType == ipTYPE_IPv4 ) || ( ucIPType == ipTYPE_IPv6 ) );
 800aab4:	7bfb      	ldrb	r3, [r7, #15]
 800aab6:	2b40      	cmp	r3, #64	@ 0x40
 800aab8:	d002      	beq.n	800aac0 <pxUDPPayloadBuffer_to_NetworkBuffer+0x3c>
 800aaba:	7bfb      	ldrb	r3, [r7, #15]
 800aabc:	2b60      	cmp	r3, #96	@ 0x60
 800aabe:	d101      	bne.n	800aac4 <pxUDPPayloadBuffer_to_NetworkBuffer+0x40>
 800aac0:	2301      	movs	r3, #1
 800aac2:	e000      	b.n	800aac6 <pxUDPPayloadBuffer_to_NetworkBuffer+0x42>
 800aac4:	2300      	movs	r3, #0
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d104      	bne.n	800aad4 <pxUDPPayloadBuffer_to_NetworkBuffer+0x50>
 800aaca:	f240 21f1 	movw	r1, #753	@ 0x2f1
 800aace:	480f      	ldr	r0, [pc, #60]	@ (800ab0c <pxUDPPayloadBuffer_to_NetworkBuffer+0x88>)
 800aad0:	f7f6 ff9a 	bl	8001a08 <vAssertCalled>

        switch( ucIPType ) /* LCOV_EXCL_BR_LINE */
 800aad4:	7bfb      	ldrb	r3, [r7, #15]
 800aad6:	2b40      	cmp	r3, #64	@ 0x40
 800aad8:	d004      	beq.n	800aae4 <pxUDPPayloadBuffer_to_NetworkBuffer+0x60>
 800aada:	2b60      	cmp	r3, #96	@ 0x60
 800aadc:	d105      	bne.n	800aaea <pxUDPPayloadBuffer_to_NetworkBuffer+0x66>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                case ipTYPE_IPv6:
                    uxOffset = sizeof( UDPPacket_IPv6_t );
 800aade:	233e      	movs	r3, #62	@ 0x3e
 800aae0:	61bb      	str	r3, [r7, #24]
                    break;
 800aae2:	e008      	b.n	800aaf6 <pxUDPPayloadBuffer_to_NetworkBuffer+0x72>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            #if ( ipconfigUSE_IPv4 != 0 )
                case ipTYPE_IPv4:
                    uxOffset = sizeof( UDPPacket_t );
 800aae4:	232a      	movs	r3, #42	@ 0x2a
 800aae6:	61bb      	str	r3, [r7, #24]
                    break;
 800aae8:	e005      	b.n	800aaf6 <pxUDPPayloadBuffer_to_NetworkBuffer+0x72>
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            default:
                FreeRTOS_debug_printf( ( "pxUDPPayloadBuffer_to_NetworkBuffer: Undefined ucIPType \n" ) );
 800aaea:	4809      	ldr	r0, [pc, #36]	@ (800ab10 <pxUDPPayloadBuffer_to_NetworkBuffer+0x8c>)
 800aaec:	f017 fe5a 	bl	80227a4 <lUDPLoggingPrintf>
                uxOffset = sizeof( UDPPacket_t );
 800aaf0:	232a      	movs	r3, #42	@ 0x2a
 800aaf2:	61bb      	str	r3, [r7, #24]
                break;
 800aaf4:	bf00      	nop
        }

        pxResult = prvPacketBuffer_to_NetworkBuffer( pvBuffer, uxOffset );
 800aaf6:	69b9      	ldr	r1, [r7, #24]
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f7ff ff85 	bl	800aa08 <prvPacketBuffer_to_NetworkBuffer>
 800aafe:	61f8      	str	r0, [r7, #28]
    }

    return pxResult;
 800ab00:	69fb      	ldr	r3, [r7, #28]
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3720      	adds	r7, #32
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	080253e8 	.word	0x080253e8
 800ab10:	080254c0 	.word	0x080254c0

0800ab14 <xIsCallingFromIPTask>:
 *
 * @note Very important: the IP-task is not allowed to call its own API's,
 *        because it would easily get into a dead-lock.
 */
BaseType_t xIsCallingFromIPTask( void )
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    const struct tskTaskControlBlock * const xCurrentHandle = xTaskGetCurrentTaskHandle();
 800ab1a:	f7fa fdd5 	bl	80056c8 <xTaskGetCurrentTaskHandle>
 800ab1e:	60b8      	str	r0, [r7, #8]
    const struct tskTaskControlBlock * const xCurrentIPTaskHandle = FreeRTOS_GetIPTaskHandle();
 800ab20:	f7fe ff6e 	bl	8009a00 <FreeRTOS_GetIPTaskHandle>
 800ab24:	6078      	str	r0, [r7, #4]

    if( xCurrentHandle == xCurrentIPTaskHandle )
 800ab26:	68ba      	ldr	r2, [r7, #8]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d102      	bne.n	800ab34 <xIsCallingFromIPTask+0x20>
    {
        xReturn = pdTRUE;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	60fb      	str	r3, [r7, #12]
 800ab32:	e001      	b.n	800ab38 <xIsCallingFromIPTask+0x24>
    }
    else
    {
        xReturn = pdFALSE;
 800ab34:	2300      	movs	r3, #0
 800ab36:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800ab38:	68fb      	ldr	r3, [r7, #12]
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3710      	adds	r7, #16
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
	...

0800ab44 <prvProcessNetworkDownEvent>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void prvProcessNetworkDownEvent( struct xNetworkInterface * pxInterface )
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
    NetworkEndPoint_t * pxEndPoint;

    configASSERT( pxInterface != NULL );
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d104      	bne.n	800ab5c <prvProcessNetworkDownEvent+0x18>
 800ab52:	f240 3137 	movw	r1, #823	@ 0x337
 800ab56:	4857      	ldr	r0, [pc, #348]	@ (800acb4 <prvProcessNetworkDownEvent+0x170>)
 800ab58:	f7f6 ff56 	bl	8001a08 <vAssertCalled>
    configASSERT( pxInterface->pfInitialise != NULL );
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	689b      	ldr	r3, [r3, #8]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d104      	bne.n	800ab6e <prvProcessNetworkDownEvent+0x2a>
 800ab64:	f44f 714e 	mov.w	r1, #824	@ 0x338
 800ab68:	4852      	ldr	r0, [pc, #328]	@ (800acb4 <prvProcessNetworkDownEvent+0x170>)
 800ab6a:	f7f6 ff4d 	bl	8001a08 <vAssertCalled>
    /* Stop the ARP timer while there is no network. */
    vIPSetARPTimerEnableState( pdFALSE );
 800ab6e:	2000      	movs	r0, #0
 800ab70:	f7ff fe6a 	bl	800a848 <vIPSetARPTimerEnableState>

    /* The first network down event is generated by the IP stack itself to
     * initialise the network hardware, so do not call the network down event
     * the first time through. */

    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f002 ffd7 	bl	800db28 <FreeRTOS_FirstEndPoint>
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	e041      	b.n	800ac02 <prvProcessNetworkDownEvent+0xbe>
         pxEndPoint != NULL;
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
    {
        /* The bit 'bEndPointUp' stays low until vIPNetworkUpCalls() is called. */
        pxEndPoint->bits.bEndPointUp = pdFALSE_UNSIGNED;
 800ab7e:	68fa      	ldr	r2, [r7, #12]
 800ab80:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 800ab84:	f36f 1304 	bfc	r3, #4, #1
 800ab88:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0

        if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ab92:	f003 0304 	and.w	r3, r3, #4
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d003      	beq.n	800aba4 <prvProcessNetworkDownEvent+0x60>
        {
            /* IPv6 end-points have a solicited-node address that needs extra housekeeping. */
            #if ( ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) )
                vManageSolicitedNodeAddress( pxEndPoint, pdFALSE );
 800ab9c:	2100      	movs	r1, #0
 800ab9e:	68f8      	ldr	r0, [r7, #12]
 800aba0:	f001 f9c8 	bl	800bf34 <vManageSolicitedNodeAddress>
            #endif
        }

        #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
        {
            if( pxEndPoint->bits.bCallDownHook != pdFALSE_UNSIGNED )
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800abaa:	f003 0308 	and.w	r3, r3, #8
 800abae:	b2db      	uxtb	r3, r3
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d003      	beq.n	800abbc <prvProcessNetworkDownEvent+0x78>
            {
                #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
                {
                    vApplicationIPNetworkEventHook( eNetworkDown );
 800abb4:	2001      	movs	r0, #1
 800abb6:	f7f6 ff5b 	bl	8001a70 <vApplicationIPNetworkEventHook>
 800abba:	e006      	b.n	800abca <prvProcessNetworkDownEvent+0x86>
                #endif
            }
            else
            {
                /* The next time NetworkEventHook will be called for this end-point. */
                pxEndPoint->bits.bCallDownHook = pdTRUE_UNSIGNED;
 800abbc:	68fa      	ldr	r2, [r7, #12]
 800abbe:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 800abc2:	f043 0308 	orr.w	r3, r3, #8
 800abc6:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0
        #endif /* ipconfigUSE_NETWORK_EVENT_HOOK */

        /* Per the ARP Cache Validation section of https://tools.ietf.org/html/rfc1122
         * treat network down as a "delivery problem" and flush the ARP cache for this
         *  interface. */
        FreeRTOS_ClearARP( pxEndPoint );
 800abca:	68f8      	ldr	r0, [r7, #12]
 800abcc:	f7fd f8c0 	bl	8007d50 <FreeRTOS_ClearARP>
                }
            }
        #endif /* ( ipconfigUSE_DHCP == 1 ) */

        #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
            if( END_POINT_USES_RA( pxEndPoint ) )
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800abd6:	f003 0304 	and.w	r3, r3, #4
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d00b      	beq.n	800abf8 <prvProcessNetworkDownEvent+0xb4>
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800abe6:	f003 0302 	and.w	r3, r3, #2
 800abea:	b2db      	uxtb	r3, r3
 800abec:	2b00      	cmp	r3, #0
 800abee:	d003      	beq.n	800abf8 <prvProcessNetworkDownEvent+0xb4>
            {
                /* Stop the RA/SLAAC process for this end-point. */
                vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
 800abf0:	2100      	movs	r1, #0
 800abf2:	68f8      	ldr	r0, [r7, #12]
 800abf4:	f7ff fe5c 	bl	800a8b0 <vIPSetDHCP_RATimerEnableState>
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800abf8:	68f9      	ldr	r1, [r7, #12]
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f002 ffb6 	bl	800db6c <FreeRTOS_NextEndPoint>
 800ac00:	60f8      	str	r0, [r7, #12]
         pxEndPoint != NULL;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d1ba      	bne.n	800ab7e <prvProcessNetworkDownEvent+0x3a>

    /* The network has been disconnected (or is being initialised for the first
     * time).  Perform whatever hardware processing is necessary to bring it up
     * again, or wait for it to be available again.  This is hardware dependent. */

    if( pxInterface->pfInitialise( pxInterface ) == pdPASS )
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	4798      	blx	r3
 800ac10:	4603      	mov	r3, r0
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d147      	bne.n	800aca6 <prvProcessNetworkDownEvent+0x162>
    {
        pxInterface->bits.bInterfaceUp = pdTRUE_UNSIGNED;
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	7f13      	ldrb	r3, [r2, #28]
 800ac1a:	f043 0301 	orr.w	r3, r3, #1
 800ac1e:	7713      	strb	r3, [r2, #28]
        /* Set remaining time to 0 so it will become active immediately. */

        /* The network is not up until DHCP has completed.
         * Start it now for all associated end-points. */

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f002 ff81 	bl	800db28 <FreeRTOS_FirstEndPoint>
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	e039      	b.n	800ac9e <prvProcessNetworkDownEvent+0x15a>
                }
                else /* Yes this else ought to be here. */
            #endif /* ( ipconfigUSE_DHCP == 1 ) */

            #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
                if( END_POINT_USES_RA( pxEndPoint ) )
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ac30:	f003 0304 	and.w	r3, r3, #4
 800ac34:	b2db      	uxtb	r3, r3
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d00c      	beq.n	800ac54 <prvProcessNetworkDownEvent+0x110>
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ac40:	f003 0302 	and.w	r3, r3, #2
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d004      	beq.n	800ac54 <prvProcessNetworkDownEvent+0x110>
                {
                    /* Reset the RA/SLAAC process for this end-point. */
                    vRAProcess( pdTRUE, pxEndPoint );
 800ac4a:	68f9      	ldr	r1, [r7, #12]
 800ac4c:	2001      	movs	r0, #1
 800ac4e:	f002 fd9f 	bl	800d790 <vRAProcess>
 800ac52:	e01f      	b.n	800ac94 <prvProcessNetworkDownEvent+0x150>
                }
                else
            #endif /* ( (ipconfigUSE_RA != 0) && ( ipconfigUSE_IPv6 != 0 )) */

            {
                switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ac5a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ac5e:	b2db      	uxtb	r3, r3
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d002      	beq.n	800ac6a <prvProcessNetworkDownEvent+0x126>
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d008      	beq.n	800ac7a <prvProcessNetworkDownEvent+0x136>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        break;
 800ac68:	e011      	b.n	800ac8e <prvProcessNetworkDownEvent+0x14a>
                            ( void ) memcpy( &( pxEndPoint->ipv4_settings ), &( pxEndPoint->ipv4_defaults ), sizeof( pxEndPoint->ipv4_settings ) );
 800ac6a:	68f8      	ldr	r0, [r7, #12]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	331c      	adds	r3, #28
 800ac70:	221c      	movs	r2, #28
 800ac72:	4619      	mov	r1, r3
 800ac74:	f017 ffb2 	bl	8022bdc <memcpy>
                            break;
 800ac78:	e009      	b.n	800ac8e <prvProcessNetworkDownEvent+0x14a>
                            ( void ) memcpy( &( pxEndPoint->ipv6_settings ), &( pxEndPoint->ipv6_defaults ), sizeof( pxEndPoint->ipv6_settings ) );
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	3390      	adds	r3, #144	@ 0x90
 800ac84:	2258      	movs	r2, #88	@ 0x58
 800ac86:	4619      	mov	r1, r3
 800ac88:	f017 ffa8 	bl	8022bdc <memcpy>
                            break;
 800ac8c:	bf00      	nop
                }

                /* DHCP or Router Advertisement are not enabled for this end-point.
                 * Perform any necessary 'network up' processing. */
                vIPNetworkUpCalls( pxEndPoint );
 800ac8e:	68f8      	ldr	r0, [r7, #12]
 800ac90:	f7fe fec2 	bl	8009a18 <vIPNetworkUpCalls>
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800ac94:	68f9      	ldr	r1, [r7, #12]
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f002 ff68 	bl	800db6c <FreeRTOS_NextEndPoint>
 800ac9c:	60f8      	str	r0, [r7, #12]
             pxEndPoint != NULL;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d1c2      	bne.n	800ac2a <prvProcessNetworkDownEvent+0xe6>
        vSetAllNetworksUp( pdFALSE );

        /* Nothing else to do. When the 'xNetworkTimer' expires, all interfaces
         * with bits.bInterfaceUp cleared will get a new 'eNetworkDownEvent' */
    }
}
 800aca4:	e002      	b.n	800acac <prvProcessNetworkDownEvent+0x168>
        vSetAllNetworksUp( pdFALSE );
 800aca6:	2000      	movs	r0, #0
 800aca8:	f7ff fe48 	bl	800a93c <vSetAllNetworksUp>
}
 800acac:	bf00      	nop
 800acae:	3710      	adds	r7, #16
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	080253e8 	.word	0x080253e8

0800acb8 <vPreCheckConfigs>:
/**
 * @brief Check the values of configuration options and assert on it. Also verify that the IP-task
 *        has not already been initialized.
 */
void vPreCheckConfigs( void )
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b082      	sub	sp, #8
 800acbc:	af00      	add	r7, sp, #0
    /* This function should only be called once. */
    configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 800acbe:	f7ff fb83 	bl	800a3c8 <xIPIsNetworkTaskReady>
 800acc2:	4603      	mov	r3, r0
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d004      	beq.n	800acd2 <vPreCheckConfigs+0x1a>
 800acc8:	f240 31db 	movw	r1, #987	@ 0x3db
 800accc:	4831      	ldr	r0, [pc, #196]	@ (800ad94 <vPreCheckConfigs+0xdc>)
 800acce:	f7f6 fe9b 	bl	8001a08 <vAssertCalled>
    configASSERT( xNetworkEventQueue == NULL );
 800acd2:	4b31      	ldr	r3, [pc, #196]	@ (800ad98 <vPreCheckConfigs+0xe0>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d004      	beq.n	800ace4 <vPreCheckConfigs+0x2c>
 800acda:	f44f 7177 	mov.w	r1, #988	@ 0x3dc
 800acde:	482d      	ldr	r0, [pc, #180]	@ (800ad94 <vPreCheckConfigs+0xdc>)
 800ace0:	f7f6 fe92 	bl	8001a08 <vAssertCalled>
    configASSERT( FreeRTOS_GetIPTaskHandle() == NULL );
 800ace4:	f7fe fe8c 	bl	8009a00 <FreeRTOS_GetIPTaskHandle>
 800ace8:	4603      	mov	r3, r0
 800acea:	2b00      	cmp	r3, #0
 800acec:	d004      	beq.n	800acf8 <vPreCheckConfigs+0x40>
 800acee:	f240 31dd 	movw	r1, #989	@ 0x3dd
 800acf2:	4828      	ldr	r0, [pc, #160]	@ (800ad94 <vPreCheckConfigs+0xdc>)
 800acf4:	f7f6 fe88 	bl	8001a08 <vAssertCalled>
         * fields in the protocol headers.
         */
        configASSERT( ( ( ( ipSIZE_OF_ETH_HEADER ) + ( ipBUFFER_PADDING ) ) % 4U ) == 0U );

        /* LCOV_EXCL_BR_START */
        uxSize = ipconfigNETWORK_MTU;
 800acf8:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800acfc:	607b      	str	r3, [r7, #4]
        /* Check if MTU is big enough. */
        configASSERT( uxSize >= ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + ipconfigTCP_MSS ) );
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f240 52db 	movw	r2, #1499	@ 0x5db
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d804      	bhi.n	800ad12 <vPreCheckConfigs+0x5a>
 800ad08:	f240 31fb 	movw	r1, #1019	@ 0x3fb
 800ad0c:	4821      	ldr	r0, [pc, #132]	@ (800ad94 <vPreCheckConfigs+0xdc>)
 800ad0e:	f7f6 fe7b 	bl	8001a08 <vAssertCalled>

        uxSize = sizeof( EthernetHeader_t );
 800ad12:	230e      	movs	r3, #14
 800ad14:	607b      	str	r3, [r7, #4]
        /* Check structure packing is correct. */
        configASSERT( uxSize == ipEXPECTED_EthernetHeader_t_SIZE );
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2b0e      	cmp	r3, #14
 800ad1a:	d004      	beq.n	800ad26 <vPreCheckConfigs+0x6e>
 800ad1c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800ad20:	481c      	ldr	r0, [pc, #112]	@ (800ad94 <vPreCheckConfigs+0xdc>)
 800ad22:	f7f6 fe71 	bl	8001a08 <vAssertCalled>

        uxSize = sizeof( ARPHeader_t );
 800ad26:	231c      	movs	r3, #28
 800ad28:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_ARPHeader_t_SIZE );
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2b1c      	cmp	r3, #28
 800ad2e:	d004      	beq.n	800ad3a <vPreCheckConfigs+0x82>
 800ad30:	f240 4102 	movw	r1, #1026	@ 0x402
 800ad34:	4817      	ldr	r0, [pc, #92]	@ (800ad94 <vPreCheckConfigs+0xdc>)
 800ad36:	f7f6 fe67 	bl	8001a08 <vAssertCalled>

        uxSize = sizeof( IPHeader_t );
 800ad3a:	2314      	movs	r3, #20
 800ad3c:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_IPHeader_t_SIZE );
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2b14      	cmp	r3, #20
 800ad42:	d004      	beq.n	800ad4e <vPreCheckConfigs+0x96>
 800ad44:	f240 4105 	movw	r1, #1029	@ 0x405
 800ad48:	4812      	ldr	r0, [pc, #72]	@ (800ad94 <vPreCheckConfigs+0xdc>)
 800ad4a:	f7f6 fe5d 	bl	8001a08 <vAssertCalled>

        uxSize = sizeof( ICMPHeader_t );
 800ad4e:	2308      	movs	r3, #8
 800ad50:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_ICMPHeader_t_SIZE );
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2b08      	cmp	r3, #8
 800ad56:	d004      	beq.n	800ad62 <vPreCheckConfigs+0xaa>
 800ad58:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 800ad5c:	480d      	ldr	r0, [pc, #52]	@ (800ad94 <vPreCheckConfigs+0xdc>)
 800ad5e:	f7f6 fe53 	bl	8001a08 <vAssertCalled>

        uxSize = sizeof( UDPHeader_t );
 800ad62:	2308      	movs	r3, #8
 800ad64:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_UDPHeader_t_SIZE );
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2b08      	cmp	r3, #8
 800ad6a:	d004      	beq.n	800ad76 <vPreCheckConfigs+0xbe>
 800ad6c:	f240 410b 	movw	r1, #1035	@ 0x40b
 800ad70:	4808      	ldr	r0, [pc, #32]	@ (800ad94 <vPreCheckConfigs+0xdc>)
 800ad72:	f7f6 fe49 	bl	8001a08 <vAssertCalled>

        #if ipconfigUSE_TCP == 1
        {
            uxSize = sizeof( TCPHeader_t );
 800ad76:	2324      	movs	r3, #36	@ 0x24
 800ad78:	607b      	str	r3, [r7, #4]
            configASSERT( uxSize == ( ipEXPECTED_TCPHeader_t_SIZE + ipSIZE_TCP_OPTIONS ) );
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2b24      	cmp	r3, #36	@ 0x24
 800ad7e:	d004      	beq.n	800ad8a <vPreCheckConfigs+0xd2>
 800ad80:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800ad84:	4803      	ldr	r0, [pc, #12]	@ (800ad94 <vPreCheckConfigs+0xdc>)
 800ad86:	f7f6 fe3f 	bl	8001a08 <vAssertCalled>
         * It's value MUST be > 0. Otherwise, storing the IPv4 version byte
         * will overwrite the Ethernet header. */
        configASSERT( ipIP_TYPE_OFFSET > 0 );
    }
    #endif /* if ( configASSERT_DEFINED == 1 ) */
}
 800ad8a:	bf00      	nop
 800ad8c:	3708      	adds	r7, #8
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop
 800ad94:	080253e8 	.word	0x080253e8
 800ad98:	200011a0 	.word	0x200011a0

0800ad9c <vPrintResourceStats>:
/**
 * @brief A function that monitors a three resources: the heap, the space in the message
 *        queue of the IP-task, the number of available network buffer descriptors.
 */
    void vPrintResourceStats( void )
    {
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
        /* When setting up and testing a project with FreeRTOS+TCP, it is
         * can be helpful to monitor a few resources: the number of network
         * buffers and the amount of available heap.
         * This function will issue some logging when a minimum value has
         * changed. */
        uxCurrentBufferCount = uxGetMinimumFreeNetworkBuffers();
 800ada2:	f00c fe9d 	bl	8017ae0 <uxGetMinimumFreeNetworkBuffers>
 800ada6:	60f8      	str	r0, [r7, #12]

        if( uxLastMinBufferCount > uxCurrentBufferCount )
 800ada8:	4b24      	ldr	r3, [pc, #144]	@ (800ae3c <vPrintResourceStats+0xa0>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	68fa      	ldr	r2, [r7, #12]
 800adae:	429a      	cmp	r2, r3
 800adb0:	d20a      	bcs.n	800adc8 <vPrintResourceStats+0x2c>
        {
            /* The logging produced below may be helpful
             * while tuning +TCP: see how many buffers are in use. */
            uxLastMinBufferCount = uxCurrentBufferCount;
 800adb2:	4a22      	ldr	r2, [pc, #136]	@ (800ae3c <vPrintResourceStats+0xa0>)
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	6013      	str	r3, [r2, #0]
            FreeRTOS_printf( ( "Network buffers: %lu lowest %lu\n",
 800adb8:	f00c fe9e 	bl	8017af8 <uxGetNumberOfFreeNetworkBuffers>
 800adbc:	4603      	mov	r3, r0
 800adbe:	68fa      	ldr	r2, [r7, #12]
 800adc0:	4619      	mov	r1, r3
 800adc2:	481f      	ldr	r0, [pc, #124]	@ (800ae40 <vPrintResourceStats+0xa4>)
 800adc4:	f017 fcee 	bl	80227a4 <lUDPLoggingPrintf>
                               uxGetNumberOfFreeNetworkBuffers(),
                               uxCurrentBufferCount ) );
        }

        uxMinSize = xPortGetMinimumEverFreeHeapSize();
 800adc8:	f7fb ff1e 	bl	8006c08 <xPortGetMinimumEverFreeHeapSize>
 800adcc:	60b8      	str	r0, [r7, #8]

        if( uxMinLastSize == 0U )
 800adce:	4b1d      	ldr	r3, [pc, #116]	@ (800ae44 <vPrintResourceStats+0xa8>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d103      	bne.n	800adde <vPrintResourceStats+0x42>
        {
            /* Probably the first time this function is called. */
            uxMinLastSize = uxMinSize;
 800add6:	4a1b      	ldr	r2, [pc, #108]	@ (800ae44 <vPrintResourceStats+0xa8>)
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	6013      	str	r3, [r2, #0]
 800addc:	e019      	b.n	800ae12 <vPrintResourceStats+0x76>
        }
        else if( uxMinSize >= ipMONITOR_MAX_HEAP )
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ade4:	d215      	bcs.n	800ae12 <vPrintResourceStats+0x76>
        {
            /* There is more than enough heap space. No need for logging. */
        }
        /* Write logging if there is a 10% decrease since the last time logging was written. */
        else if( ( uxMinLastSize * ipMONITOR_PERCENTAGE_90 ) > ( uxMinSize * ipMONITOR_PERCENTAGE_100 ) )
 800ade6:	4b17      	ldr	r3, [pc, #92]	@ (800ae44 <vPrintResourceStats+0xa8>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	225a      	movs	r2, #90	@ 0x5a
 800adec:	fb03 f202 	mul.w	r2, r3, r2
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	2164      	movs	r1, #100	@ 0x64
 800adf4:	fb01 f303 	mul.w	r3, r1, r3
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d90a      	bls.n	800ae12 <vPrintResourceStats+0x76>
        {
            uxMinLastSize = uxMinSize;
 800adfc:	4a11      	ldr	r2, [pc, #68]	@ (800ae44 <vPrintResourceStats+0xa8>)
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	6013      	str	r3, [r2, #0]
            FreeRTOS_printf( ( "Heap: current %u lowest %u\n", ( unsigned ) xPortGetFreeHeapSize(), ( unsigned ) uxMinSize ) );
 800ae02:	f7fb fef5 	bl	8006bf0 <xPortGetFreeHeapSize>
 800ae06:	4603      	mov	r3, r0
 800ae08:	68ba      	ldr	r2, [r7, #8]
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	480e      	ldr	r0, [pc, #56]	@ (800ae48 <vPrintResourceStats+0xac>)
 800ae0e:	f017 fcc9 	bl	80227a4 <lUDPLoggingPrintf>
            /* Nothing to log. */
        }

        #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
        {
            UBaseType_t uxCurrentCount = 0u;
 800ae12:	2300      	movs	r3, #0
 800ae14:	607b      	str	r3, [r7, #4]

            uxCurrentCount = uxGetMinimumIPQueueSpace();
 800ae16:	f7ff fae3 	bl	800a3e0 <uxGetMinimumIPQueueSpace>
 800ae1a:	6078      	str	r0, [r7, #4]

            if( uxLastMinQueueSpace != uxCurrentCount )
 800ae1c:	4b0b      	ldr	r3, [pc, #44]	@ (800ae4c <vPrintResourceStats+0xb0>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d006      	beq.n	800ae34 <vPrintResourceStats+0x98>
            {
                /* The logging produced below may be helpful
                 * while tuning +TCP: see how many buffers are in use. */
                uxLastMinQueueSpace = uxCurrentCount;
 800ae26:	4a09      	ldr	r2, [pc, #36]	@ (800ae4c <vPrintResourceStats+0xb0>)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6013      	str	r3, [r2, #0]
                FreeRTOS_printf( ( "Queue space: lowest %lu\n", uxCurrentCount ) );
 800ae2c:	6879      	ldr	r1, [r7, #4]
 800ae2e:	4808      	ldr	r0, [pc, #32]	@ (800ae50 <vPrintResourceStats+0xb4>)
 800ae30:	f017 fcb8 	bl	80227a4 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigCHECK_IP_QUEUE_SPACE */
    }
 800ae34:	bf00      	nop
 800ae36:	3710      	adds	r7, #16
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	20000018 	.word	0x20000018
 800ae40:	08025558 	.word	0x08025558
 800ae44:	2000121c 	.word	0x2000121c
 800ae48:	0802557c 	.word	0x0802557c
 800ae4c:	20001220 	.word	0x20001220
 800ae50:	08025598 	.word	0x08025598

0800ae54 <FreeRTOS_max_size_t>:
 * @param[in] b the second value.
 * @return The highest of the two values.
 */
size_t FreeRTOS_max_size_t( size_t a,
                            size_t b )
{
 800ae54:	b480      	push	{r7}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
    return ( a >= b ) ? a : b;
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	4293      	cmp	r3, r2
 800ae64:	bf38      	it	cc
 800ae66:	4613      	movcc	r3, r2
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	370c      	adds	r7, #12
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr

0800ae74 <FreeRTOS_min_int32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
int32_t FreeRTOS_min_int32( int32_t a,
                            int32_t b )
{
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	4293      	cmp	r3, r2
 800ae84:	bfa8      	it	ge
 800ae86:	4613      	movge	r3, r2
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	370c      	adds	r7, #12
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr

0800ae94 <FreeRTOS_min_uint32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
uint32_t FreeRTOS_min_uint32( uint32_t a,
                              uint32_t b )
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	4293      	cmp	r3, r2
 800aea4:	bf28      	it	cs
 800aea6:	4613      	movcs	r3, r2
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	370c      	adds	r7, #12
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr

0800aeb4 <FreeRTOS_min_size_t>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
size_t FreeRTOS_min_size_t( size_t a,
                            size_t b )
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	4293      	cmp	r3, r2
 800aec4:	bf28      	it	cs
 800aec6:	4613      	movcs	r3, r2
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	370c      	adds	r7, #12
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr

0800aed4 <FreeRTOS_round_up>:
 * @param[in] d the second value.
 * @return A multiple of d.
 */
uint32_t FreeRTOS_round_up( uint32_t a,
                            uint32_t d )
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
    uint32_t ulResult = a;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	60fb      	str	r3, [r7, #12]

    configASSERT( d != 0U );
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d104      	bne.n	800aef2 <FreeRTOS_round_up+0x1e>
 800aee8:	f240 61ac 	movw	r1, #1708	@ 0x6ac
 800aeec:	480a      	ldr	r0, [pc, #40]	@ (800af18 <FreeRTOS_round_up+0x44>)
 800aeee:	f7f6 fd8b 	bl	8001a08 <vAssertCalled>

    if( d != 0U )
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d00a      	beq.n	800af0e <FreeRTOS_round_up+0x3a>
    {
        ulResult = d * ( ( a + d - 1U ) / d );
 800aef8:	687a      	ldr	r2, [r7, #4]
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	4413      	add	r3, r2
 800aefe:	1e5a      	subs	r2, r3, #1
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	fbb2 f2f3 	udiv	r2, r2, r3
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	fb02 f303 	mul.w	r3, r2, r3
 800af0c:	60fb      	str	r3, [r7, #12]
    }

    return ulResult;
 800af0e:	68fb      	ldr	r3, [r7, #12]
}
 800af10:	4618      	mov	r0, r3
 800af12:	3710      	adds	r7, #16
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}
 800af18:	080253e8 	.word	0x080253e8

0800af1c <ulChar2u32>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint32_t ulChar2u32( const uint8_t * pucPtr )
{
 800af1c:	b480      	push	{r7}
 800af1e:	b083      	sub	sp, #12
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	061a      	lsls	r2, r3, #24
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	3301      	adds	r3, #1
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	041b      	lsls	r3, r3, #16
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 800af32:	431a      	orrs	r2, r3
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	3302      	adds	r3, #2
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	021b      	lsls	r3, r3, #8
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 800af3c:	4313      	orrs	r3, r2
           ( ( ( uint32_t ) pucPtr[ 3 ] ) );
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	3203      	adds	r2, #3
 800af42:	7812      	ldrb	r2, [r2, #0]
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 800af44:	4313      	orrs	r3, r2
}
 800af46:	4618      	mov	r0, r3
 800af48:	370c      	adds	r7, #12
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr

0800af52 <usChar2u16>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint16_t usChar2u16( const uint8_t * pucPtr )
{
 800af52:	b480      	push	{r7}
 800af54:	b083      	sub	sp, #12
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
    return ( uint16_t )
           ( ( ( ( uint32_t ) pucPtr[ 0 ] ) << 8 ) |
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	021b      	lsls	r3, r3, #8
 800af60:	b29b      	uxth	r3, r3
             ( ( ( uint32_t ) pucPtr[ 1 ] ) ) );
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	3201      	adds	r2, #1
 800af66:	7812      	ldrb	r2, [r2, #0]
    return ( uint16_t )
 800af68:	4313      	orrs	r3, r2
 800af6a:	b29b      	uxth	r3, r3
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	370c      	adds	r7, #12
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr

0800af78 <xCheckIPv4SizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckIPv4SizeFields( const void * const pvEthernetBuffer,
                                            size_t uxBufferLength )
    {
 800af78:	b580      	push	{r7, lr}
 800af7a:	b08a      	sub	sp, #40	@ 0x28
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIPHeaderLength;
        uint8_t ucProtocol;
        uint16_t usLength;
        uint16_t ucVersionHeaderLength;
        size_t uxMinimumLength;
        BaseType_t xResult = pdFAIL;
 800af82:	2300      	movs	r3, #0
 800af84:	623b      	str	r3, [r7, #32]

        /* Map the buffer onto a IP-Packet struct to easily access the
         * fields of the IP packet. */
        const IPPacket_t * const pxIPPacket = ( ( const IPPacket_t * const ) pvEthernetBuffer );
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	61bb      	str	r3, [r7, #24]

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 800af8a:	2300      	movs	r3, #0
 800af8c:	61fb      	str	r3, [r7, #28]

        do
        {
            /* Check for minimum packet size: Ethernet header and an IP-header, 34 bytes */
            if( uxBufferLength < sizeof( IPPacket_t ) )
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	2b21      	cmp	r3, #33	@ 0x21
 800af92:	d802      	bhi.n	800af9a <xCheckIPv4SizeFields+0x22>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 800af94:	2301      	movs	r3, #1
 800af96:	61fb      	str	r3, [r7, #28]
                break;
 800af98:	e06f      	b.n	800b07a <xCheckIPv4SizeFields+0x102>
            }

            ucVersionHeaderLength = pxIPPacket->xIPHeader.ucVersionHeaderLength;
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	7b9b      	ldrb	r3, [r3, #14]
 800af9e:	82fb      	strh	r3, [r7, #22]

            /* Test if the length of the IP-header is between 20 and 60 bytes,
             * and if the IP-version is 4. */
            if( ( ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 800afa0:	8afb      	ldrh	r3, [r7, #22]
 800afa2:	2b44      	cmp	r3, #68	@ 0x44
 800afa4:	d902      	bls.n	800afac <xCheckIPv4SizeFields+0x34>
 800afa6:	8afb      	ldrh	r3, [r7, #22]
 800afa8:	2b4f      	cmp	r3, #79	@ 0x4f
 800afaa:	d902      	bls.n	800afb2 <xCheckIPv4SizeFields+0x3a>
                ( ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 800afac:	2302      	movs	r3, #2
 800afae:	61fb      	str	r3, [r7, #28]
                break;
 800afb0:	e063      	b.n	800b07a <xCheckIPv4SizeFields+0x102>
            }

            ucVersionHeaderLength = ( uint16_t ) ( ( ucVersionHeaderLength & ( uint8_t ) 0x0FU ) << 2U );
 800afb2:	8afb      	ldrh	r3, [r7, #22]
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800afbc:	82fb      	strh	r3, [r7, #22]
            uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
 800afbe:	8afb      	ldrh	r3, [r7, #22]
 800afc0:	613b      	str	r3, [r7, #16]

            /* Check if the complete IP-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + uxIPHeaderLength ) )
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	330e      	adds	r3, #14
 800afc6:	683a      	ldr	r2, [r7, #0]
 800afc8:	429a      	cmp	r2, r3
 800afca:	d202      	bcs.n	800afd2 <xCheckIPv4SizeFields+0x5a>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 800afcc:	2303      	movs	r3, #3
 800afce:	61fb      	str	r3, [r7, #28]
                break;
 800afd0:	e053      	b.n	800b07a <xCheckIPv4SizeFields+0x102>
            }

            /* Check if the complete IP-header plus protocol data have been transferred: */
            usLength = pxIPPacket->xIPHeader.usLength;
 800afd2:	69bb      	ldr	r3, [r7, #24]
 800afd4:	7c1a      	ldrb	r2, [r3, #16]
 800afd6:	7c5b      	ldrb	r3, [r3, #17]
 800afd8:	021b      	lsls	r3, r3, #8
 800afda:	4313      	orrs	r3, r2
 800afdc:	81fb      	strh	r3, [r7, #14]
            usLength = FreeRTOS_ntohs( usLength );
 800afde:	89fb      	ldrh	r3, [r7, #14]
 800afe0:	021b      	lsls	r3, r3, #8
 800afe2:	b21a      	sxth	r2, r3
 800afe4:	89fb      	ldrh	r3, [r7, #14]
 800afe6:	0a1b      	lsrs	r3, r3, #8
 800afe8:	b29b      	uxth	r3, r3
 800afea:	b21b      	sxth	r3, r3
 800afec:	4313      	orrs	r3, r2
 800afee:	b21b      	sxth	r3, r3
 800aff0:	81fb      	strh	r3, [r7, #14]

            if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 800aff2:	89fb      	ldrh	r3, [r7, #14]
 800aff4:	330e      	adds	r3, #14
 800aff6:	683a      	ldr	r2, [r7, #0]
 800aff8:	429a      	cmp	r2, r3
 800affa:	d202      	bcs.n	800b002 <xCheckIPv4SizeFields+0x8a>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 800affc:	2304      	movs	r3, #4
 800affe:	61fb      	str	r3, [r7, #28]
                break;
 800b000:	e03b      	b.n	800b07a <xCheckIPv4SizeFields+0x102>
            }

            /* Identify the next protocol. */
            ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800b002:	69bb      	ldr	r3, [r7, #24]
 800b004:	7ddb      	ldrb	r3, [r3, #23]
 800b006:	737b      	strb	r3, [r7, #13]

            /* Switch on the Layer 3/4 protocol. */
            if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800b008:	7b7b      	ldrb	r3, [r7, #13]
 800b00a:	2b11      	cmp	r3, #17
 800b00c:	d103      	bne.n	800b016 <xCheckIPv4SizeFields+0x9e>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER;
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	3316      	adds	r3, #22
 800b012:	627b      	str	r3, [r7, #36]	@ 0x24
 800b014:	e013      	b.n	800b03e <xCheckIPv4SizeFields+0xc6>
            }
            else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 800b016:	7b7b      	ldrb	r3, [r7, #13]
 800b018:	2b06      	cmp	r3, #6
 800b01a:	d103      	bne.n	800b024 <xCheckIPv4SizeFields+0xac>
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER;
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	3322      	adds	r3, #34	@ 0x22
 800b020:	627b      	str	r3, [r7, #36]	@ 0x24
 800b022:	e00c      	b.n	800b03e <xCheckIPv4SizeFields+0xc6>
            }
            else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 800b024:	7b7b      	ldrb	r3, [r7, #13]
 800b026:	2b01      	cmp	r3, #1
 800b028:	d002      	beq.n	800b030 <xCheckIPv4SizeFields+0xb8>
 800b02a:	7b7b      	ldrb	r3, [r7, #13]
 800b02c:	2b02      	cmp	r3, #2
 800b02e:	d103      	bne.n	800b038 <xCheckIPv4SizeFields+0xc0>
                     ( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMPv4_HEADER;
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	3316      	adds	r3, #22
 800b034:	627b      	str	r3, [r7, #36]	@ 0x24
 800b036:	e002      	b.n	800b03e <xCheckIPv4SizeFields+0xc6>
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 800b038:	2305      	movs	r3, #5
 800b03a:	61fb      	str	r3, [r7, #28]
                break;
 800b03c:	e01d      	b.n	800b07a <xCheckIPv4SizeFields+0x102>
            }

            if( uxBufferLength < uxMinimumLength )
 800b03e:	683a      	ldr	r2, [r7, #0]
 800b040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b042:	429a      	cmp	r2, r3
 800b044:	d202      	bcs.n	800b04c <xCheckIPv4SizeFields+0xd4>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800b046:	2306      	movs	r3, #6
 800b048:	61fb      	str	r3, [r7, #28]
                break;
 800b04a:	e016      	b.n	800b07a <xCheckIPv4SizeFields+0x102>
            }

            uxLength = ( size_t ) usLength;
 800b04c:	89fb      	ldrh	r3, [r7, #14]
 800b04e:	60bb      	str	r3, [r7, #8]
            uxLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally, minus 20. */
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	b29b      	uxth	r3, r3
 800b054:	461a      	mov	r2, r3
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	1a9b      	subs	r3, r3, r2
 800b05a:	60bb      	str	r3, [r7, #8]

            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	2b07      	cmp	r3, #7
 800b060:	d906      	bls.n	800b070 <xCheckIPv4SizeFields+0xf8>
                ( uxLength > ( ( size_t ) ipconfigNETWORK_MTU - ( size_t ) uxIPHeaderLength ) ) )
 800b062:	693a      	ldr	r2, [r7, #16]
 800b064:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800b068:	1a9b      	subs	r3, r3, r2
            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 800b06a:	68ba      	ldr	r2, [r7, #8]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d902      	bls.n	800b076 <xCheckIPv4SizeFields+0xfe>
            {
                /* For incoming packets, the length is out of bound: either
                 * too short or too long. For outgoing packets, there is a
                 * serious problem with the format/length. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 800b070:	2307      	movs	r3, #7
 800b072:	61fb      	str	r3, [r7, #28]
                break;
 800b074:	e001      	b.n	800b07a <xCheckIPv4SizeFields+0x102>
            }

            xResult = pdPASS;
 800b076:	2301      	movs	r3, #1
 800b078:	623b      	str	r3, [r7, #32]
        } while( ipFALSE_BOOL );

        if( xResult != pdPASS )
 800b07a:	6a3b      	ldr	r3, [r7, #32]
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d003      	beq.n	800b088 <xCheckIPv4SizeFields+0x110>
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckIPv4SizeFields: location %ld\n", xLocation ) );
 800b080:	69f9      	ldr	r1, [r7, #28]
 800b082:	4804      	ldr	r0, [pc, #16]	@ (800b094 <xCheckIPv4SizeFields+0x11c>)
 800b084:	f017 fb8e 	bl	80227a4 <lUDPLoggingPrintf>
        }

        return xResult;
 800b088:	6a3b      	ldr	r3, [r7, #32]
    }
 800b08a:	4618      	mov	r0, r3
 800b08c:	3728      	adds	r7, #40	@ 0x28
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	08025664 	.word	0x08025664

0800b098 <xIsIPv4Multicast>:
 * @param[in] ulIPAddress The IP address being checked.
 *
 * @return pdTRUE if the IP address is a multicast address or else, pdFALSE.
 */
BaseType_t xIsIPv4Multicast( uint32_t ulIPAddress )
{
 800b098:	b480      	push	{r7}
 800b09a:	b085      	sub	sp, #20
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	061a      	lsls	r2, r3, #24
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	021b      	lsls	r3, r3, #8
 800b0a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b0ac:	431a      	orrs	r2, r3
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	0a1b      	lsrs	r3, r3, #8
 800b0b2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b0b6:	431a      	orrs	r2, r3
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	0e1b      	lsrs	r3, r3, #24
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	60bb      	str	r3, [r7, #8]

    if( ( ulIP >= ipFIRST_MULTI_CAST_IPv4 ) && ( ulIP < ipLAST_MULTI_CAST_IPv4 ) )
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800b0c6:	d306      	bcc.n	800b0d6 <xIsIPv4Multicast+0x3e>
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	f1b3 4f70 	cmp.w	r3, #4026531840	@ 0xf0000000
 800b0ce:	d202      	bcs.n	800b0d6 <xIsIPv4Multicast+0x3e>
    {
        xReturn = pdTRUE;
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	60fb      	str	r3, [r7, #12]
 800b0d4:	e001      	b.n	800b0da <xIsIPv4Multicast+0x42>
    }
    else
    {
        xReturn = pdFALSE;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800b0da:	68fb      	ldr	r3, [r7, #12]
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3714      	adds	r7, #20
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr

0800b0e8 <prvAllowIPPacketIPv4>:
 * @return Whether the packet should be processed or dropped.
 */
enum eFrameProcessingResult prvAllowIPPacketIPv4( const struct xIP_PACKET * const pxIPPacket,
                                                  const struct xNETWORK_BUFFER * const pxNetworkBuffer,
                                                  UBaseType_t uxHeaderLength )
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b086      	sub	sp, #24
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	60f8      	str	r0, [r7, #12]
 800b0f0:	60b9      	str	r1, [r7, #8]
 800b0f2:	607a      	str	r2, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
    {
        if( eReturn == eProcessBuffer )
 800b0f8:	7dfb      	ldrb	r3, [r7, #23]
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d10c      	bne.n	800b118 <prvAllowIPPacketIPv4+0x30>
        {
            if( xCheckIPv4SizeFields( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength ) != pdPASS )
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b106:	4619      	mov	r1, r3
 800b108:	4610      	mov	r0, r2
 800b10a:	f7ff ff35 	bl	800af78 <xCheckIPv4SizeFields>
 800b10e:	4603      	mov	r3, r0
 800b110:	2b01      	cmp	r3, #1
 800b112:	d001      	beq.n	800b118 <prvAllowIPPacketIPv4+0x30>
            {
                /* Some of the length checks were not successful. */
                eReturn = eReleaseBuffer;
 800b114:	2300      	movs	r3, #0
 800b116:	75fb      	strb	r3, [r7, #23]
        }

        #if ( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 )
        {
            /* Check if this is a UDP packet without a checksum. */
            if( eReturn == eProcessBuffer )
 800b118:	7dfb      	ldrb	r3, [r7, #23]
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	d134      	bne.n	800b188 <prvAllowIPPacketIPv4+0xa0>
                const ProtocolHeaders_t * pxProtocolHeaders;

                /* ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS is defined as 0,
                 * and so UDP packets carrying a protocol checksum of 0, will
                 * be dropped. */
                ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	7ddb      	ldrb	r3, [r3, #23]
 800b122:	75bb      	strb	r3, [r7, #22]
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ( size_t ) ipSIZE_OF_IPv4_HEADER ] ) );
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b128:	3322      	adds	r3, #34	@ 0x22
 800b12a:	613b      	str	r3, [r7, #16]

                /* Identify the next protocol. */
                if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800b12c:	7dbb      	ldrb	r3, [r7, #22]
 800b12e:	2b11      	cmp	r3, #17
 800b130:	d12a      	bne.n	800b188 <prvAllowIPPacketIPv4+0xa0>
                {
                    if( pxProtocolHeaders->xUDPHeader.usChecksum == ( uint16_t ) 0U )
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	88db      	ldrh	r3, [r3, #6]
 800b136:	b29b      	uxth	r3, r3
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d125      	bne.n	800b188 <prvAllowIPPacketIPv4+0xa0>
                        #if ( ipconfigHAS_PRINTF != 0 )
                        {
                            static BaseType_t xCount = 0;

                            /* Exclude this from branch coverage as this is only used for debugging. */
                            if( xCount < 5 ) /* LCOV_EXCL_BR_LINE */
 800b13c:	4b15      	ldr	r3, [pc, #84]	@ (800b194 <prvAllowIPPacketIPv4+0xac>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	2b04      	cmp	r3, #4
 800b142:	dc1f      	bgt.n	800b184 <prvAllowIPPacketIPv4+0x9c>
                            {
                                FreeRTOS_printf( ( "prvAllowIPPacket: UDP packet from %xip without CRC dropped\n",
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800b14a:	061a      	lsls	r2, r3, #24
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800b152:	021b      	lsls	r3, r3, #8
 800b154:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b158:	431a      	orrs	r2, r3
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800b160:	0a1b      	lsrs	r3, r3, #8
 800b162:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b166:	431a      	orrs	r2, r3
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800b16e:	0e1b      	lsrs	r3, r3, #24
 800b170:	4313      	orrs	r3, r2
 800b172:	4619      	mov	r1, r3
 800b174:	4808      	ldr	r0, [pc, #32]	@ (800b198 <prvAllowIPPacketIPv4+0xb0>)
 800b176:	f017 fb15 	bl	80227a4 <lUDPLoggingPrintf>
                                                   FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulSourceIPAddress ) ) );
                                xCount++;
 800b17a:	4b06      	ldr	r3, [pc, #24]	@ (800b194 <prvAllowIPPacketIPv4+0xac>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	3301      	adds	r3, #1
 800b180:	4a04      	ldr	r2, [pc, #16]	@ (800b194 <prvAllowIPPacketIPv4+0xac>)
 800b182:	6013      	str	r3, [r2, #0]
                            }
                        }
                        #endif /* ( ipconfigHAS_PRINTF != 0 ) */

                        /* Protocol checksum not accepted. */
                        eReturn = eReleaseBuffer;
 800b184:	2300      	movs	r3, #0
 800b186:	75fb      	strb	r3, [r7, #23]
        ( void ) pxNetworkBuffer;
        ( void ) uxHeaderLength;
    }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */

    return eReturn;
 800b188:	7dfb      	ldrb	r3, [r7, #23]
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3718      	adds	r7, #24
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	20001224 	.word	0x20001224
 800b198:	08025688 	.word	0x08025688

0800b19c <prvCheckIP4HeaderOptions>:
 * @param[in] pxNetworkBuffer the network buffer that contains the packet.
 *
 * @return Either 'eProcessBuffer' or 'eReleaseBuffer'
 */
enum eFrameProcessingResult prvCheckIP4HeaderOptions( struct xNETWORK_BUFFER * const pxNetworkBuffer )
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b08a      	sub	sp, #40	@ 0x28
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    #if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 )
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1ae:	330e      	adds	r3, #14
 800b1b0:	623b      	str	r3, [r7, #32]

        /* All structs of headers expect a IP header size of 20 bytes
         * IP header options were included, we'll ignore them and cut them out. */
        size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 800b1b2:	6a3b      	ldr	r3, [r7, #32]
 800b1b4:	781b      	ldrb	r3, [r3, #0]
 800b1b6:	61fb      	str	r3, [r7, #28]

        /* Check if the IP headers are acceptable and if it has our destination.
         * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
         * length in multiples of 4. */
        size_t uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 800b1b8:	69fb      	ldr	r3, [r7, #28]
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800b1c0:	61bb      	str	r3, [r7, #24]

        /* Number of bytes contained in IPv4 header options. */
        const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 800b1c2:	69bb      	ldr	r3, [r7, #24]
 800b1c4:	3b14      	subs	r3, #20
 800b1c6:	617b      	str	r3, [r7, #20]
        /* From: the previous start of UDP/ICMP/TCP data. */
        const uint8_t * pucSource = ( const uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + uxHeaderLength ] );
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	330e      	adds	r3, #14
 800b1d0:	4413      	add	r3, r2
 800b1d2:	613b      	str	r3, [r7, #16]
        /* To: the usual start of UDP/ICMP/TCP data at offset 20 (decimal ) from IP header. */
        uint8_t * pucTarget = ( uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + ipSIZE_OF_IPv4_HEADER ] );
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1d8:	3322      	adds	r3, #34	@ 0x22
 800b1da:	60fb      	str	r3, [r7, #12]
        /* How many: total length minus the options and the lower headers. */
        const size_t xMoveLen = pxNetworkBuffer->xDataLength - ( optlen + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_ETH_HEADER );
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	1ad3      	subs	r3, r2, r3
 800b1e4:	3b22      	subs	r3, #34	@ 0x22
 800b1e6:	60bb      	str	r3, [r7, #8]

        ( void ) memmove( pucTarget, pucSource, xMoveLen );
 800b1e8:	68ba      	ldr	r2, [r7, #8]
 800b1ea:	6939      	ldr	r1, [r7, #16]
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f018 fc9a 	bl	8023b26 <memmove>
        pxNetworkBuffer->xDataLength -= optlen;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	1ad2      	subs	r2, r2, r3
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	629a      	str	r2, [r3, #40]	@ 0x28
        /* Update the total length of the IP packet after removing options. */
        pxIPHeader->usLength = FreeRTOS_htons( FreeRTOS_ntohs( pxIPHeader->usLength ) - optlen );
 800b1fe:	6a3b      	ldr	r3, [r7, #32]
 800b200:	885b      	ldrh	r3, [r3, #2]
 800b202:	b29b      	uxth	r3, r3
 800b204:	021b      	lsls	r3, r3, #8
 800b206:	b21a      	sxth	r2, r3
 800b208:	6a3b      	ldr	r3, [r7, #32]
 800b20a:	885b      	ldrh	r3, [r3, #2]
 800b20c:	b29b      	uxth	r3, r3
 800b20e:	0a1b      	lsrs	r3, r3, #8
 800b210:	b29b      	uxth	r3, r3
 800b212:	b21b      	sxth	r3, r3
 800b214:	4313      	orrs	r3, r2
 800b216:	b21b      	sxth	r3, r3
 800b218:	b29a      	uxth	r2, r3
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	1ad3      	subs	r3, r2, r3
 800b220:	b29b      	uxth	r3, r3
 800b222:	021b      	lsls	r3, r3, #8
 800b224:	b29a      	uxth	r2, r3
 800b226:	6a3b      	ldr	r3, [r7, #32]
 800b228:	885b      	ldrh	r3, [r3, #2]
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	021b      	lsls	r3, r3, #8
 800b22e:	b219      	sxth	r1, r3
 800b230:	6a3b      	ldr	r3, [r7, #32]
 800b232:	885b      	ldrh	r3, [r3, #2]
 800b234:	b29b      	uxth	r3, r3
 800b236:	0a1b      	lsrs	r3, r3, #8
 800b238:	b29b      	uxth	r3, r3
 800b23a:	b21b      	sxth	r3, r3
 800b23c:	430b      	orrs	r3, r1
 800b23e:	b21b      	sxth	r3, r3
 800b240:	b29b      	uxth	r3, r3
 800b242:	4619      	mov	r1, r3
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	1acb      	subs	r3, r1, r3
 800b248:	0a1b      	lsrs	r3, r3, #8
 800b24a:	b29b      	uxth	r3, r3
 800b24c:	4313      	orrs	r3, r2
 800b24e:	b29a      	uxth	r2, r3
 800b250:	6a3b      	ldr	r3, [r7, #32]
 800b252:	805a      	strh	r2, [r3, #2]

        /* Rewrite the Version/IHL byte to indicate that this packet has no IP options. */
        pxIPHeader->ucVersionHeaderLength = ( uint8_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0xF0U ) | /* High nibble is the version. */
 800b254:	6a3b      	ldr	r3, [r7, #32]
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	f023 030f 	bic.w	r3, r3, #15
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	f043 0305 	orr.w	r3, r3, #5
 800b262:	b2da      	uxtb	r2, r3
 800b264:	6a3b      	ldr	r3, [r7, #32]
 800b266:	701a      	strb	r2, [r3, #0]
         * IP-options will be dropped. */
        eReturn = eReleaseBuffer;
    }
    #endif /* if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 ) */

    return eReturn;
 800b268:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3728      	adds	r7, #40	@ 0x28
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <FreeRTOS_inet_ntop4>:
 *         pcDestination, else a NULL is returned.
 */
const char * FreeRTOS_inet_ntop4( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b088      	sub	sp, #32
 800b278:	af00      	add	r7, sp, #0
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	607a      	str	r2, [r7, #4]
    uint32_t ulIPAddress;
    void * pvCopyDest;
    const char * pcReturn;

    if( uxSize < 16U )
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2b0f      	cmp	r3, #15
 800b284:	d802      	bhi.n	800b28c <FreeRTOS_inet_ntop4+0x18>
    {
        /* There must be space for "255.255.255.255". */
        pcReturn = NULL;
 800b286:	2300      	movs	r3, #0
 800b288:	61fb      	str	r3, [r7, #28]
 800b28a:	e00e      	b.n	800b2aa <FreeRTOS_inet_ntop4+0x36>
    }
    else
    {
        pvCopyDest = ( void * ) &ulIPAddress;
 800b28c:	f107 0314 	add.w	r3, r7, #20
 800b290:	61bb      	str	r3, [r7, #24]
        ( void ) memcpy( pvCopyDest, pvSource, sizeof( ulIPAddress ) );
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	461a      	mov	r2, r3
 800b298:	69bb      	ldr	r3, [r7, #24]
 800b29a:	601a      	str	r2, [r3, #0]
        ( void ) FreeRTOS_inet_ntoa( ulIPAddress, pcDestination );
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	68b9      	ldr	r1, [r7, #8]
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f004 fac9 	bl	800f838 <FreeRTOS_inet_ntoa>
        pcReturn = pcDestination;
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	61fb      	str	r3, [r7, #28]
    }

    return pcReturn;
 800b2aa:	69fb      	ldr	r3, [r7, #28]
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3720      	adds	r7, #32
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <xSend_UDP_Update_IPv4>:
 * @param[in] pxDestinationAddress The IPv4 socket address.
 * @return  Returns NULL, always.
 */
void * xSend_UDP_Update_IPv4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                              const struct freertos_sockaddr * pxDestinationAddress )
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b085      	sub	sp, #20
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	6039      	str	r1, [r7, #0]
    UDPPacket_t * pxUDPPacket;

    if( ( pxNetworkBuffer != NULL ) && ( pxDestinationAddress != NULL ) )
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d010      	beq.n	800b2e6 <xSend_UDP_Update_IPv4+0x32>
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d00d      	beq.n	800b2e6 <xSend_UDP_Update_IPv4+0x32>
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2ce:	60fb      	str	r3, [r7, #12]

        pxNetworkBuffer->xIPAddress.ulIP_IPv4 = pxDestinationAddress->sin_address.ulIP_IPv4;
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	689a      	ldr	r2, [r3, #8]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	615a      	str	r2, [r3, #20]
        /* Map the UDP packet onto the start of the frame. */
        pxUDPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	f042 0208 	orr.w	r2, r2, #8
 800b2e0:	731a      	strb	r2, [r3, #12]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	735a      	strb	r2, [r3, #13]
    }

    return NULL;
 800b2e6:	2300      	movs	r3, #0
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3714      	adds	r7, #20
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr

0800b2f4 <vSetMultiCastIPv4MacAddress>:
 * @param[in] ulIPAddress IP address.
 * @param[out] pxMACAddress Pointer to MAC address.
 */
void vSetMultiCastIPv4MacAddress( uint32_t ulIPAddress,
                                  MACAddress_t * pxMACAddress )
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	061a      	lsls	r2, r3, #24
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	021b      	lsls	r3, r3, #8
 800b306:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b30a:	431a      	orrs	r2, r3
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	0a1b      	lsrs	r3, r3, #8
 800b310:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b314:	431a      	orrs	r2, r3
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	0e1b      	lsrs	r3, r3, #24
 800b31a:	4313      	orrs	r3, r2
 800b31c:	60fb      	str	r3, [r7, #12]

    pxMACAddress->ucBytes[ 0 ] = ( uint8_t ) 0x01U;
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	2201      	movs	r2, #1
 800b322:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = ( uint8_t ) 0x00U;
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	2200      	movs	r2, #0
 800b328:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = ( uint8_t ) 0x5EU;
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	225e      	movs	r2, #94	@ 0x5e
 800b32e:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU ); /* Use 7 bits. */
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	0c1b      	lsrs	r3, r3, #16
 800b334:	b2db      	uxtb	r3, r3
 800b336:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b33a:	b2da      	uxtb	r2, r3
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >> 8 ) & 0xffU );  /* Use 8 bits. */
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	0a1b      	lsrs	r3, r3, #8
 800b344:	b2da      	uxtb	r2, r3
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = ( uint8_t ) ( ( ulIP ) & 0xffU );       /* Use 8 bits. */
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	b2da      	uxtb	r2, r3
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	715a      	strb	r2, [r3, #5]
}
 800b352:	bf00      	nop
 800b354:	3714      	adds	r7, #20
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr
	...

0800b360 <xCheckIPv6SizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckIPv6SizeFields( const void * const pvEthernetBuffer,
                                            size_t uxBufferLength )
    {
 800b360:	b580      	push	{r7, lr}
 800b362:	b08c      	sub	sp, #48	@ 0x30
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFAIL;
 800b36a:	2300      	movs	r3, #0
 800b36c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint16_t ucVersionTrafficClass;
        uint16_t usPayloadLength;
        uint8_t ucNextHeader;
        size_t uxMinimumLength;
        size_t uxExtHeaderLength = 0;
 800b36e:	2300      	movs	r3, #0
 800b370:	623b      	str	r3, [r7, #32]
        const IPExtHeader_IPv6_t * pxExtHeader = NULL;
 800b372:	2300      	movs	r3, #0
 800b374:	61bb      	str	r3, [r7, #24]
        const uint8_t * const pucEthernetBuffer = ( const uint8_t * const ) pvEthernetBuffer;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	617b      	str	r3, [r7, #20]

        /* Map the buffer onto a IPv6-Packet struct to easily access the
         * fields of the IPv6 packet. */
        const IPPacket_IPv6_t * const pxIPv6Packet = ( const IPPacket_IPv6_t * const ) pucEthernetBuffer;
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	613b      	str	r3, [r7, #16]

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 800b37e:	2300      	movs	r3, #0
 800b380:	61fb      	str	r3, [r7, #28]

        do
        {
            /* Check for minimum packet size: Ethernet header and an IPv6-header, 54 bytes */
            if( uxBufferLength < sizeof( IPHeader_IPv6_t ) )
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	2b27      	cmp	r3, #39	@ 0x27
 800b386:	d802      	bhi.n	800b38e <xCheckIPv6SizeFields+0x2e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 800b388:	2301      	movs	r3, #1
 800b38a:	61fb      	str	r3, [r7, #28]
                break;
 800b38c:	e098      	b.n	800b4c0 <xCheckIPv6SizeFields+0x160>
            }

            ucVersionTrafficClass = pxIPv6Packet->xIPHeader.ucVersionTrafficClass;
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	7b9b      	ldrb	r3, [r3, #14]
 800b392:	81fb      	strh	r3, [r7, #14]

            /* Test if the IP-version is 6. */
            if( ( ( ucVersionTrafficClass & ( uint8_t ) 0xF0U ) >> 4 ) != 6U )
 800b394:	89fb      	ldrh	r3, [r7, #14]
 800b396:	111b      	asrs	r3, r3, #4
 800b398:	f003 030f 	and.w	r3, r3, #15
 800b39c:	2b06      	cmp	r3, #6
 800b39e:	d002      	beq.n	800b3a6 <xCheckIPv6SizeFields+0x46>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 800b3a0:	2302      	movs	r3, #2
 800b3a2:	61fb      	str	r3, [r7, #28]
                break;
 800b3a4:	e08c      	b.n	800b4c0 <xCheckIPv6SizeFields+0x160>
            }

            /* Check if the IPv6-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ) )
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	2b35      	cmp	r3, #53	@ 0x35
 800b3aa:	d802      	bhi.n	800b3b2 <xCheckIPv6SizeFields+0x52>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 800b3ac:	2303      	movs	r3, #3
 800b3ae:	61fb      	str	r3, [r7, #28]
                break;
 800b3b0:	e086      	b.n	800b4c0 <xCheckIPv6SizeFields+0x160>
            }

            /* Check if the complete IPv6-header plus protocol data have been transferred: */
            usPayloadLength = FreeRTOS_ntohs( pxIPv6Packet->xIPHeader.usPayloadLength );
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	8a5b      	ldrh	r3, [r3, #18]
 800b3b6:	b29b      	uxth	r3, r3
 800b3b8:	021b      	lsls	r3, r3, #8
 800b3ba:	b21a      	sxth	r2, r3
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	8a5b      	ldrh	r3, [r3, #18]
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	0a1b      	lsrs	r3, r3, #8
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	b21b      	sxth	r3, r3
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	b21b      	sxth	r3, r3
 800b3cc:	81bb      	strh	r3, [r7, #12]

            if( uxBufferLength != ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + ( size_t ) usPayloadLength ) )
 800b3ce:	89bb      	ldrh	r3, [r7, #12]
 800b3d0:	3336      	adds	r3, #54	@ 0x36
 800b3d2:	683a      	ldr	r2, [r7, #0]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d002      	beq.n	800b3de <xCheckIPv6SizeFields+0x7e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 800b3d8:	2304      	movs	r3, #4
 800b3da:	61fb      	str	r3, [r7, #28]
                break;
 800b3dc:	e070      	b.n	800b4c0 <xCheckIPv6SizeFields+0x160>
            }

            /* Identify the next protocol. */
            ucNextHeader = pxIPv6Packet->xIPHeader.ucNextHeader;
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	7d1b      	ldrb	r3, [r3, #20]
 800b3e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

            while( xIsExtHeader( ucNextHeader ) )
 800b3e6:	e015      	b.n	800b414 <xCheckIPv6SizeFields+0xb4>
            {
                pxExtHeader = ( const IPExtHeader_IPv6_t * ) ( &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength ] ) );
 800b3e8:	6a3b      	ldr	r3, [r7, #32]
 800b3ea:	3336      	adds	r3, #54	@ 0x36
 800b3ec:	697a      	ldr	r2, [r7, #20]
 800b3ee:	4413      	add	r3, r2
 800b3f0:	61bb      	str	r3, [r7, #24]
                /* The definition of length in extension header - Length of this header in 8-octet units, not including the first 8 octets. */
                uxExtHeaderLength += ( size_t ) ( ( 8 * pxExtHeader->ucHeaderExtLength ) + 8 );
 800b3f2:	69bb      	ldr	r3, [r7, #24]
 800b3f4:	785b      	ldrb	r3, [r3, #1]
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	00db      	lsls	r3, r3, #3
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	6a3b      	ldr	r3, [r7, #32]
 800b3fe:	4413      	add	r3, r2
 800b400:	623b      	str	r3, [r7, #32]

                ucNextHeader = pxExtHeader->ucNextHeader;
 800b402:	69bb      	ldr	r3, [r7, #24]
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

                if( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength >= uxBufferLength )
 800b40a:	6a3b      	ldr	r3, [r7, #32]
 800b40c:	3336      	adds	r3, #54	@ 0x36
 800b40e:	683a      	ldr	r2, [r7, #0]
 800b410:	429a      	cmp	r2, r3
 800b412:	d908      	bls.n	800b426 <xCheckIPv6SizeFields+0xc6>
            while( xIsExtHeader( ucNextHeader ) )
 800b414:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b418:	4618      	mov	r0, r3
 800b41a:	f000 f85f 	bl	800b4dc <xIsExtHeader>
 800b41e:	4603      	mov	r3, r0
 800b420:	2b00      	cmp	r3, #0
 800b422:	d1e1      	bne.n	800b3e8 <xCheckIPv6SizeFields+0x88>
 800b424:	e000      	b.n	800b428 <xCheckIPv6SizeFields+0xc8>
                {
                    break;
 800b426:	bf00      	nop
                }
            }

            if( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength >= uxBufferLength )
 800b428:	6a3b      	ldr	r3, [r7, #32]
 800b42a:	3336      	adds	r3, #54	@ 0x36
 800b42c:	683a      	ldr	r2, [r7, #0]
 800b42e:	429a      	cmp	r2, r3
 800b430:	d802      	bhi.n	800b438 <xCheckIPv6SizeFields+0xd8>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 800b432:	2307      	movs	r3, #7
 800b434:	61fb      	str	r3, [r7, #28]
                break;
 800b436:	e043      	b.n	800b4c0 <xCheckIPv6SizeFields+0x160>
            }

            /* Switch on the Layer 3/4 protocol. */
            if( ucNextHeader == ( uint8_t ) ipPROTOCOL_UDP )
 800b438:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b43c:	2b11      	cmp	r3, #17
 800b43e:	d103      	bne.n	800b448 <xCheckIPv6SizeFields+0xe8>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength + ipSIZE_OF_UDP_HEADER;
 800b440:	6a3b      	ldr	r3, [r7, #32]
 800b442:	333e      	adds	r3, #62	@ 0x3e
 800b444:	627b      	str	r3, [r7, #36]	@ 0x24
 800b446:	e032      	b.n	800b4ae <xCheckIPv6SizeFields+0x14e>
            }
            else if( ucNextHeader == ( uint8_t ) ipPROTOCOL_TCP )
 800b448:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b44c:	2b06      	cmp	r3, #6
 800b44e:	d103      	bne.n	800b458 <xCheckIPv6SizeFields+0xf8>
            {
                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength + ipSIZE_OF_TCP_HEADER;
 800b450:	6a3b      	ldr	r3, [r7, #32]
 800b452:	334a      	adds	r3, #74	@ 0x4a
 800b454:	627b      	str	r3, [r7, #36]	@ 0x24
 800b456:	e02a      	b.n	800b4ae <xCheckIPv6SizeFields+0x14e>
            }
            else if( ucNextHeader == ( uint8_t ) ipPROTOCOL_ICMP_IPv6 )
 800b458:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b45c:	2b3a      	cmp	r3, #58	@ 0x3a
 800b45e:	d123      	bne.n	800b4a8 <xCheckIPv6SizeFields+0x148>
            {
                uint8_t ucTypeOfMessage;

                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength;
 800b460:	6a3b      	ldr	r3, [r7, #32]
 800b462:	3336      	adds	r3, #54	@ 0x36
 800b464:	627b      	str	r3, [r7, #36]	@ 0x24

                ucTypeOfMessage = pucEthernetBuffer[ uxMinimumLength ];
 800b466:	697a      	ldr	r2, [r7, #20]
 800b468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b46a:	4413      	add	r3, r2
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	72fb      	strb	r3, [r7, #11]

                if( ( ucTypeOfMessage == ipICMP_PING_REQUEST_IPv6 ) ||
 800b470:	7afb      	ldrb	r3, [r7, #11]
 800b472:	2b80      	cmp	r3, #128	@ 0x80
 800b474:	d002      	beq.n	800b47c <xCheckIPv6SizeFields+0x11c>
 800b476:	7afb      	ldrb	r3, [r7, #11]
 800b478:	2b81      	cmp	r3, #129	@ 0x81
 800b47a:	d103      	bne.n	800b484 <xCheckIPv6SizeFields+0x124>
                    ( ucTypeOfMessage == ipICMP_PING_REPLY_IPv6 ) )
                {
                    uxMinimumLength += sizeof( ICMPEcho_IPv6_t );
 800b47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b47e:	3308      	adds	r3, #8
 800b480:	627b      	str	r3, [r7, #36]	@ 0x24
 800b482:	e014      	b.n	800b4ae <xCheckIPv6SizeFields+0x14e>
                }
                else if( ucTypeOfMessage == ipICMP_ROUTER_SOLICITATION_IPv6 )
 800b484:	7afb      	ldrb	r3, [r7, #11]
 800b486:	2b85      	cmp	r3, #133	@ 0x85
 800b488:	d103      	bne.n	800b492 <xCheckIPv6SizeFields+0x132>
                {
                    uxMinimumLength += sizeof( ICMPRouterSolicitation_IPv6_t );
 800b48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b48c:	3308      	adds	r3, #8
 800b48e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b490:	e00d      	b.n	800b4ae <xCheckIPv6SizeFields+0x14e>
                }
                else if( ucTypeOfMessage == ipICMP_ROUTER_ADVERTISEMENT_IPv6 )
 800b492:	7afb      	ldrb	r3, [r7, #11]
 800b494:	2b86      	cmp	r3, #134	@ 0x86
 800b496:	d103      	bne.n	800b4a0 <xCheckIPv6SizeFields+0x140>
                {
                    uxMinimumLength += sizeof( ICMPRouterAdvertisement_IPv6_t );
 800b498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b49a:	3310      	adds	r3, #16
 800b49c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b49e:	e006      	b.n	800b4ae <xCheckIPv6SizeFields+0x14e>
                }
                else
                {
                    uxMinimumLength += ipSIZE_OF_ICMPv6_HEADER;
 800b4a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4a2:	3318      	adds	r3, #24
 800b4a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4a6:	e002      	b.n	800b4ae <xCheckIPv6SizeFields+0x14e>
                }
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 800b4a8:	2305      	movs	r3, #5
 800b4aa:	61fb      	str	r3, [r7, #28]
                break;
 800b4ac:	e008      	b.n	800b4c0 <xCheckIPv6SizeFields+0x160>
            }

            if( uxBufferLength < uxMinimumLength )
 800b4ae:	683a      	ldr	r2, [r7, #0]
 800b4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d202      	bcs.n	800b4bc <xCheckIPv6SizeFields+0x15c>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800b4b6:	2306      	movs	r3, #6
 800b4b8:	61fb      	str	r3, [r7, #28]
                break;
 800b4ba:	e001      	b.n	800b4c0 <xCheckIPv6SizeFields+0x160>
            }

            xResult = pdPASS;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        } while( ipFALSE_BOOL );

        if( xResult != pdPASS )
 800b4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d003      	beq.n	800b4ce <xCheckIPv6SizeFields+0x16e>
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckIPv6SizeFields: location %ld\n", xLocation ) );
 800b4c6:	69f9      	ldr	r1, [r7, #28]
 800b4c8:	4803      	ldr	r0, [pc, #12]	@ (800b4d8 <xCheckIPv6SizeFields+0x178>)
 800b4ca:	f017 f96b 	bl	80227a4 <lUDPLoggingPrintf>
        }

        return xResult;
 800b4ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3730      	adds	r7, #48	@ 0x30
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}
 800b4d8:	080256c4 	.word	0x080256c4

0800b4dc <xIsExtHeader>:
 * @param[in] ucNextHeader Next header, such as ipIPv6_EXT_HEADER_HOP_BY_HOP.
 *
 * @return pdTRUE if it's extension header, otherwise pdFALSE.
 */
    static BaseType_t xIsExtHeader( uint8_t ucNextHeader )
    {
 800b4dc:	b480      	push	{r7}
 800b4de:	b085      	sub	sp, #20
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	71fb      	strb	r3, [r7, #7]
        BaseType_t xReturn = pdFALSE;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	60fb      	str	r3, [r7, #12]

        switch( ucNextHeader )
 800b4ea:	79fb      	ldrb	r3, [r7, #7]
 800b4ec:	2b87      	cmp	r3, #135	@ 0x87
 800b4ee:	d016      	beq.n	800b51e <xIsExtHeader+0x42>
 800b4f0:	2b87      	cmp	r3, #135	@ 0x87
 800b4f2:	dc16      	bgt.n	800b522 <xIsExtHeader+0x46>
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d012      	beq.n	800b51e <xIsExtHeader+0x42>
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	db12      	blt.n	800b522 <xIsExtHeader+0x46>
 800b4fc:	2b3c      	cmp	r3, #60	@ 0x3c
 800b4fe:	dc10      	bgt.n	800b522 <xIsExtHeader+0x46>
 800b500:	2b2b      	cmp	r3, #43	@ 0x2b
 800b502:	db0e      	blt.n	800b522 <xIsExtHeader+0x46>
 800b504:	3b2b      	subs	r3, #43	@ 0x2b
 800b506:	4a0a      	ldr	r2, [pc, #40]	@ (800b530 <xIsExtHeader+0x54>)
 800b508:	fa22 f303 	lsr.w	r3, r2, r3
 800b50c:	f003 0301 	and.w	r3, r3, #1
 800b510:	2b00      	cmp	r3, #0
 800b512:	bf14      	ite	ne
 800b514:	2301      	movne	r3, #1
 800b516:	2300      	moveq	r3, #0
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d001      	beq.n	800b522 <xIsExtHeader+0x46>
            case ipIPv6_EXT_HEADER_FRAGMENT_HEADER:
            case ipIPv6_EXT_HEADER_SECURE_PAYLOAD:
            case ipIPv6_EXT_HEADER_AUTHEN_HEADER:
            case ipIPv6_EXT_HEADER_DESTINATION_OPTIONS:
            case ipIPv6_EXT_HEADER_MOBILITY_HEADER:
                xReturn = pdTRUE;
 800b51e:	2301      	movs	r3, #1
 800b520:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800b522:	68fb      	ldr	r3, [r7, #12]
    }
 800b524:	4618      	mov	r0, r3
 800b526:	3714      	adds	r7, #20
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr
 800b530:	00020183 	.word	0x00020183

0800b534 <xGetIPv6MulticastGroupID>:
 * @param[in] pxIPv6Address The multicast address to filter group ID.
 * @param[out] pxReturnGroupID The buffer to store group ID.
 */
static void xGetIPv6MulticastGroupID( const IPv6_Address_t * pxIPv6Address,
                                      IPv6_Address_t * pxReturnGroupID )
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
    configASSERT( pxIPv6Address != NULL );
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d104      	bne.n	800b54e <xGetIPv6MulticastGroupID+0x1a>
 800b544:	f44f 7189 	mov.w	r1, #274	@ 0x112
 800b548:	480e      	ldr	r0, [pc, #56]	@ (800b584 <xGetIPv6MulticastGroupID+0x50>)
 800b54a:	f7f6 fa5d 	bl	8001a08 <vAssertCalled>
    configASSERT( pxReturnGroupID != NULL );
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d104      	bne.n	800b55e <xGetIPv6MulticastGroupID+0x2a>
 800b554:	f240 1113 	movw	r1, #275	@ 0x113
 800b558:	480a      	ldr	r0, [pc, #40]	@ (800b584 <xGetIPv6MulticastGroupID+0x50>)
 800b55a:	f7f6 fa55 	bl	8001a08 <vAssertCalled>

    pxReturnGroupID->ucBytes[ 0 ] = 0U;
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	2200      	movs	r2, #0
 800b562:	701a      	strb	r2, [r3, #0]
    pxReturnGroupID->ucBytes[ 1 ] = 0U;
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	2200      	movs	r2, #0
 800b568:	705a      	strb	r2, [r3, #1]
    ( void ) memcpy( &( pxReturnGroupID->ucBytes[ 2 ] ), &( pxIPv6Address->ucBytes[ 2 ] ), 14 );
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	1c98      	adds	r0, r3, #2
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	3302      	adds	r3, #2
 800b572:	220e      	movs	r2, #14
 800b574:	4619      	mov	r1, r3
 800b576:	f017 fb31 	bl	8022bdc <memcpy>
}
 800b57a:	bf00      	nop
 800b57c:	3708      	adds	r7, #8
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	080256e8 	.word	0x080256e8

0800b588 <xIsIPv6Loopback>:
 * @param[in] pxAddress The IP-address being checked.
 *
 * @return pdTRUE if the IP-address is a loopback address or else, pdFALSE.
 */
BaseType_t xIsIPv6Loopback( const IPv6_Address_t * pxAddress )
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b084      	sub	sp, #16
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800b590:	2300      	movs	r3, #0
 800b592:	60fb      	str	r3, [r7, #12]

    if( memcmp( pxAddress->ucBytes, FreeRTOS_in6addr_loopback.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2210      	movs	r2, #16
 800b598:	4906      	ldr	r1, [pc, #24]	@ (800b5b4 <xIsIPv6Loopback+0x2c>)
 800b59a:	4618      	mov	r0, r3
 800b59c:	f018 fab3 	bl	8023b06 <memcmp>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d101      	bne.n	800b5aa <xIsIPv6Loopback+0x22>
    {
        xReturn = pdTRUE;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3710      	adds	r7, #16
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	08027f44 	.word	0x08027f44

0800b5b8 <xIsIPv6AllowedMulticast>:
 * @param[in] pxIPAddress The IP address to be checked.
 *
 * @return Returns pdTRUE if pxIPAddress is an allowed multicast address, pdFALSE if not.
 */
BaseType_t xIsIPv6AllowedMulticast( const IPv6_Address_t * pxIPAddress )
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b088      	sub	sp, #32
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	61fb      	str	r3, [r7, #28]
    IPv6_Address_t xGroupIDAddress;

    if( pxIPAddress->ucBytes[ 0 ] == 0xffU )
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	2bff      	cmp	r3, #255	@ 0xff
 800b5ca:	d123      	bne.n	800b614 <xIsIPv6AllowedMulticast+0x5c>
    {
        IPv6MC_GET_GROUP_ID( pxIPAddress, &xGroupIDAddress );
 800b5cc:	f107 030c 	add.w	r3, r7, #12
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f7ff ffae 	bl	800b534 <xGetIPv6MulticastGroupID>

        /* From RFC4291 - sec 2.7, packets from multicast address whose scope field is 0
         * should be silently dropped. */
        if( IPv6MC_GET_SCOPE_VALUE( pxIPAddress ) == 0U )
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	785b      	ldrb	r3, [r3, #1]
 800b5dc:	f003 030f 	and.w	r3, r3, #15
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d102      	bne.n	800b5ea <xIsIPv6AllowedMulticast+0x32>
        {
            xReturn = pdFALSE;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	61fb      	str	r3, [r7, #28]
 800b5e8:	e014      	b.n	800b614 <xIsIPv6AllowedMulticast+0x5c>
        /* From RFC4291 - sec 2.7.1, packets from predefined multicast address should never be used.
         * - 0xFF00::
         * - 0xFF01::
         * - ..
         * - 0xFF0F:: */
        else if( ( IPv6MC_GET_FLAGS_VALUE( pxIPAddress ) == 0U ) &&
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	785b      	ldrb	r3, [r3, #1]
 800b5ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d10c      	bne.n	800b610 <xIsIPv6AllowedMulticast+0x58>
                 ( memcmp( xGroupIDAddress.ucBytes, FreeRTOS_in6addr_any.ucBytes, sizeof( IPv6_Address_t ) ) == 0 ) )
 800b5f6:	f107 030c 	add.w	r3, r7, #12
 800b5fa:	2210      	movs	r2, #16
 800b5fc:	4908      	ldr	r1, [pc, #32]	@ (800b620 <xIsIPv6AllowedMulticast+0x68>)
 800b5fe:	4618      	mov	r0, r3
 800b600:	f018 fa81 	bl	8023b06 <memcmp>
 800b604:	4603      	mov	r3, r0
        else if( ( IPv6MC_GET_FLAGS_VALUE( pxIPAddress ) == 0U ) &&
 800b606:	2b00      	cmp	r3, #0
 800b608:	d102      	bne.n	800b610 <xIsIPv6AllowedMulticast+0x58>
        {
            xReturn = pdFALSE;
 800b60a:	2300      	movs	r3, #0
 800b60c:	61fb      	str	r3, [r7, #28]
 800b60e:	e001      	b.n	800b614 <xIsIPv6AllowedMulticast+0x5c>
        }
        else
        {
            xReturn = pdTRUE;
 800b610:	2301      	movs	r3, #1
 800b612:	61fb      	str	r3, [r7, #28]
        }
    }

    return xReturn;
 800b614:	69fb      	ldr	r3, [r7, #28]
}
 800b616:	4618      	mov	r0, r3
 800b618:	3720      	adds	r7, #32
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	08027f34 	.word	0x08027f34

0800b624 <xCompareIPv6_Address>:
 * @return Returns 0 if it can handle it, else non zero .
 */
BaseType_t xCompareIPv6_Address( const IPv6_Address_t * pxLeft,
                                 const IPv6_Address_t * pxRight,
                                 size_t uxPrefixLength )
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b08a      	sub	sp, #40	@ 0x28
 800b628:	af00      	add	r7, sp, #0
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	607a      	str	r2, [r7, #4]
    /* This variable is initialized by the system to contain the IPv6 multicast address for all nodes. */
    static const struct xIPv6_Address FreeRTOS_in6addr_allnodes = { { 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 } };

    /* 0    2    4    6    8    10   12   14 */
    /* ff02:0000:0000:0000:0000:0001:ff66:4a81 */
    if( ( pxRight->ucBytes[ 0 ] == 0xffU ) &&
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	2bff      	cmp	r3, #255	@ 0xff
 800b636:	d112      	bne.n	800b65e <xCompareIPv6_Address+0x3a>
        ( pxRight->ucBytes[ 1 ] == 0x02U ) &&
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	785b      	ldrb	r3, [r3, #1]
    if( ( pxRight->ucBytes[ 0 ] == 0xffU ) &&
 800b63c:	2b02      	cmp	r3, #2
 800b63e:	d10e      	bne.n	800b65e <xCompareIPv6_Address+0x3a>
        ( pxRight->ucBytes[ 12 ] == 0xffU ) )
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	7b1b      	ldrb	r3, [r3, #12]
        ( pxRight->ucBytes[ 1 ] == 0x02U ) &&
 800b644:	2bff      	cmp	r3, #255	@ 0xff
 800b646:	d10a      	bne.n	800b65e <xCompareIPv6_Address+0x3a>
    {
        /* This is an LLMNR address. */
        xResult = memcmp( &( pxLeft->ucBytes[ 13 ] ), &( pxRight->ucBytes[ 13 ] ), 3 );
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f103 000d 	add.w	r0, r3, #13
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	330d      	adds	r3, #13
 800b652:	2203      	movs	r2, #3
 800b654:	4619      	mov	r1, r3
 800b656:	f018 fa56 	bl	8023b06 <memcmp>
 800b65a:	6278      	str	r0, [r7, #36]	@ 0x24
 800b65c:	e069      	b.n	800b732 <xCompareIPv6_Address+0x10e>
    }
    else
    if( memcmp( pxRight->ucBytes, FreeRTOS_in6addr_allnodes.ucBytes, sizeof( IPv6_Address_t ) ) == 0 )
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	2210      	movs	r2, #16
 800b662:	4936      	ldr	r1, [pc, #216]	@ (800b73c <xCompareIPv6_Address+0x118>)
 800b664:	4618      	mov	r0, r3
 800b666:	f018 fa4e 	bl	8023b06 <memcmp>
 800b66a:	4603      	mov	r3, r0
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d102      	bne.n	800b676 <xCompareIPv6_Address+0x52>
    {
        /* FF02::1 is all node address to reach out all nodes in the same link. */
        xResult = 0;
 800b670:	2300      	movs	r3, #0
 800b672:	627b      	str	r3, [r7, #36]	@ 0x24
 800b674:	e05d      	b.n	800b732 <xCompareIPv6_Address+0x10e>
    }
    else
    if( ( pxRight->ucBytes[ 0 ] == 0xfeU ) &&
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	781b      	ldrb	r3, [r3, #0]
 800b67a:	2bfe      	cmp	r3, #254	@ 0xfe
 800b67c:	d10e      	bne.n	800b69c <xCompareIPv6_Address+0x78>
        ( pxRight->ucBytes[ 1 ] == 0x80U ) &&
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	785b      	ldrb	r3, [r3, #1]
    if( ( pxRight->ucBytes[ 0 ] == 0xfeU ) &&
 800b682:	2b80      	cmp	r3, #128	@ 0x80
 800b684:	d10a      	bne.n	800b69c <xCompareIPv6_Address+0x78>
        ( pxLeft->ucBytes[ 0 ] == 0xfeU ) &&
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	781b      	ldrb	r3, [r3, #0]
        ( pxRight->ucBytes[ 1 ] == 0x80U ) &&
 800b68a:	2bfe      	cmp	r3, #254	@ 0xfe
 800b68c:	d106      	bne.n	800b69c <xCompareIPv6_Address+0x78>
        ( pxLeft->ucBytes[ 1 ] == 0x80U ) )
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	785b      	ldrb	r3, [r3, #1]
        ( pxLeft->ucBytes[ 0 ] == 0xfeU ) &&
 800b692:	2b80      	cmp	r3, #128	@ 0x80
 800b694:	d102      	bne.n	800b69c <xCompareIPv6_Address+0x78>
    {
        /* Both are local addresses. */
        xResult = 0;
 800b696:	2300      	movs	r3, #0
 800b698:	627b      	str	r3, [r7, #36]	@ 0x24
 800b69a:	e04a      	b.n	800b732 <xCompareIPv6_Address+0x10e>
    }
    else
    {
        if( uxPrefixLength == 0U )
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d102      	bne.n	800b6a8 <xCompareIPv6_Address+0x84>
        {
            xResult = 0;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6a6:	e044      	b.n	800b732 <xCompareIPv6_Address+0x10e>
        }
        else if( uxPrefixLength == ( 8U * ipSIZE_OF_IPv6_ADDRESS ) )
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2b80      	cmp	r3, #128	@ 0x80
 800b6ac:	d107      	bne.n	800b6be <xCompareIPv6_Address+0x9a>
        {
            xResult = memcmp( pxLeft->ucBytes, pxRight->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	68b9      	ldr	r1, [r7, #8]
 800b6b2:	2210      	movs	r2, #16
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f018 fa26 	bl	8023b06 <memcmp>
 800b6ba:	6278      	str	r0, [r7, #36]	@ 0x24
 800b6bc:	e039      	b.n	800b732 <xCompareIPv6_Address+0x10e>
        }
        else
        {
            size_t uxLength = uxPrefixLength / 8U;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	08db      	lsrs	r3, r3, #3
 800b6c2:	623b      	str	r3, [r7, #32]

            xResult = 0;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	627b      	str	r3, [r7, #36]	@ 0x24

            if( uxLength > 0U )
 800b6c8:	6a3b      	ldr	r3, [r7, #32]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d006      	beq.n	800b6dc <xCompareIPv6_Address+0xb8>
            {
                xResult = memcmp( pxLeft->ucBytes, pxRight->ucBytes, uxLength );
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	68b9      	ldr	r1, [r7, #8]
 800b6d2:	6a3a      	ldr	r2, [r7, #32]
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f018 fa16 	bl	8023b06 <memcmp>
 800b6da:	6278      	str	r0, [r7, #36]	@ 0x24
            }

            if( ( xResult == 0 ) && ( ( uxPrefixLength % 8U ) != 0U ) )
 800b6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d127      	bne.n	800b732 <xCompareIPv6_Address+0x10e>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f003 0307 	and.w	r3, r3, #7
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d022      	beq.n	800b732 <xCompareIPv6_Address+0x10e>
            {
                /* One byte has both a network- and a host-address. */
                size_t uxBits = uxPrefixLength % 8U;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f003 0307 	and.w	r3, r3, #7
 800b6f2:	61fb      	str	r3, [r7, #28]
                size_t uxHostLen = 8U - uxBits;
 800b6f4:	69fb      	ldr	r3, [r7, #28]
 800b6f6:	f1c3 0308 	rsb	r3, r3, #8
 800b6fa:	61bb      	str	r3, [r7, #24]
                uint32_t uxHostMask = ( ( ( uint32_t ) 1U ) << uxHostLen ) - 1U;
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	69bb      	ldr	r3, [r7, #24]
 800b700:	fa02 f303 	lsl.w	r3, r2, r3
 800b704:	3b01      	subs	r3, #1
 800b706:	617b      	str	r3, [r7, #20]
                uint8_t ucNetMask = ( uint8_t ) ~( uxHostMask );
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	b2db      	uxtb	r3, r3
 800b70c:	43db      	mvns	r3, r3
 800b70e:	74fb      	strb	r3, [r7, #19]

                if( ( pxLeft->ucBytes[ uxLength ] & ucNetMask ) != ( pxRight->ucBytes[ uxLength ] & ucNetMask ) )
 800b710:	68fa      	ldr	r2, [r7, #12]
 800b712:	6a3b      	ldr	r3, [r7, #32]
 800b714:	4413      	add	r3, r2
 800b716:	781a      	ldrb	r2, [r3, #0]
 800b718:	68b9      	ldr	r1, [r7, #8]
 800b71a:	6a3b      	ldr	r3, [r7, #32]
 800b71c:	440b      	add	r3, r1
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	4053      	eors	r3, r2
 800b722:	b2da      	uxtb	r2, r3
 800b724:	7cfb      	ldrb	r3, [r7, #19]
 800b726:	4013      	ands	r3, r2
 800b728:	b2db      	uxtb	r3, r3
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d001      	beq.n	800b732 <xCompareIPv6_Address+0x10e>
                {
                    xResult = 1;
 800b72e:	2301      	movs	r3, #1
 800b730:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }
        }
    }

    return xResult;
 800b732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b734:	4618      	mov	r0, r3
 800b736:	3728      	adds	r7, #40	@ 0x28
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}
 800b73c:	08027f54 	.word	0x08027f54

0800b740 <prvAllowIPPacketIPv6>:
 * @return Whether the packet should be processed or dropped.
 */
eFrameProcessingResult_t prvAllowIPPacketIPv6( const IPHeader_IPv6_t * const pxIPv6Header,
                                               const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                               UBaseType_t uxHeaderLength )
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b086      	sub	sp, #24
 800b744:	af00      	add	r7, sp, #0
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	60b9      	str	r1, [r7, #8]
 800b74a:	607a      	str	r2, [r7, #4]
    }
    #else /* if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) */
    {
        ( void ) pxIPv6Header;
        /* The packet has been checked by the network interface. */
        eReturn = eProcessBuffer;
 800b74c:	2301      	movs	r3, #1
 800b74e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
    {
        if( eReturn == eProcessBuffer )
 800b750:	7dfb      	ldrb	r3, [r7, #23]
 800b752:	2b01      	cmp	r3, #1
 800b754:	d10c      	bne.n	800b770 <prvAllowIPPacketIPv6+0x30>
        {
            if( xCheckIPv6SizeFields( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength ) != pdPASS )
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b75e:	4619      	mov	r1, r3
 800b760:	4610      	mov	r0, r2
 800b762:	f7ff fdfd 	bl	800b360 <xCheckIPv6SizeFields>
 800b766:	4603      	mov	r3, r0
 800b768:	2b01      	cmp	r3, #1
 800b76a:	d001      	beq.n	800b770 <prvAllowIPPacketIPv6+0x30>
            {
                /* Some of the length checks were not successful. */
                eReturn = eReleaseBuffer;
 800b76c:	2300      	movs	r3, #0
 800b76e:	75fb      	strb	r3, [r7, #23]
        ( void ) pxNetworkBuffer;
    }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */
    ( void ) uxHeaderLength;

    return eReturn;
 800b770:	7dfb      	ldrb	r3, [r7, #23]
}
 800b772:	4618      	mov	r0, r3
 800b774:	3718      	adds	r7, #24
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
	...

0800b77c <xGetExtensionOrder>:
 *
 * @return Extension header order in the packet.
 */
BaseType_t xGetExtensionOrder( uint8_t ucProtocol,
                               uint8_t ucNextHeader )
{
 800b77c:	b480      	push	{r7}
 800b77e:	b085      	sub	sp, #20
 800b780:	af00      	add	r7, sp, #0
 800b782:	4603      	mov	r3, r0
 800b784:	460a      	mov	r2, r1
 800b786:	71fb      	strb	r3, [r7, #7]
 800b788:	4613      	mov	r3, r2
 800b78a:	71bb      	strb	r3, [r7, #6]
    BaseType_t xReturn;

    switch( ucProtocol )
 800b78c:	79fb      	ldrb	r3, [r7, #7]
 800b78e:	2b87      	cmp	r3, #135	@ 0x87
 800b790:	d04b      	beq.n	800b82a <xGetExtensionOrder+0xae>
 800b792:	2b87      	cmp	r3, #135	@ 0x87
 800b794:	dc4c      	bgt.n	800b830 <xGetExtensionOrder+0xb4>
 800b796:	2b00      	cmp	r3, #0
 800b798:	d030      	beq.n	800b7fc <xGetExtensionOrder+0x80>
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	db48      	blt.n	800b830 <xGetExtensionOrder+0xb4>
 800b79e:	2b3c      	cmp	r3, #60	@ 0x3c
 800b7a0:	dc46      	bgt.n	800b830 <xGetExtensionOrder+0xb4>
 800b7a2:	2b2b      	cmp	r3, #43	@ 0x2b
 800b7a4:	db44      	blt.n	800b830 <xGetExtensionOrder+0xb4>
 800b7a6:	3b2b      	subs	r3, #43	@ 0x2b
 800b7a8:	2b11      	cmp	r3, #17
 800b7aa:	d841      	bhi.n	800b830 <xGetExtensionOrder+0xb4>
 800b7ac:	a201      	add	r2, pc, #4	@ (adr r2, 800b7b4 <xGetExtensionOrder+0x38>)
 800b7ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7b2:	bf00      	nop
 800b7b4:	0800b813 	.word	0x0800b813
 800b7b8:	0800b819 	.word	0x0800b819
 800b7bc:	0800b831 	.word	0x0800b831
 800b7c0:	0800b831 	.word	0x0800b831
 800b7c4:	0800b831 	.word	0x0800b831
 800b7c8:	0800b831 	.word	0x0800b831
 800b7cc:	0800b831 	.word	0x0800b831
 800b7d0:	0800b825 	.word	0x0800b825
 800b7d4:	0800b81f 	.word	0x0800b81f
 800b7d8:	0800b831 	.word	0x0800b831
 800b7dc:	0800b831 	.word	0x0800b831
 800b7e0:	0800b831 	.word	0x0800b831
 800b7e4:	0800b831 	.word	0x0800b831
 800b7e8:	0800b831 	.word	0x0800b831
 800b7ec:	0800b831 	.word	0x0800b831
 800b7f0:	0800b831 	.word	0x0800b831
 800b7f4:	0800b831 	.word	0x0800b831
 800b7f8:	0800b803 	.word	0x0800b803
    {
        case ipIPv6_EXT_HEADER_HOP_BY_HOP:
            xReturn = 1;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	60fb      	str	r3, [r7, #12]
            break;
 800b800:	e01b      	b.n	800b83a <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_DESTINATION_OPTIONS:
            xReturn = 7;
 800b802:	2307      	movs	r3, #7
 800b804:	60fb      	str	r3, [r7, #12]

            if( ucNextHeader == ipIPv6_EXT_HEADER_ROUTING_HEADER )
 800b806:	79bb      	ldrb	r3, [r7, #6]
 800b808:	2b2b      	cmp	r3, #43	@ 0x2b
 800b80a:	d115      	bne.n	800b838 <xGetExtensionOrder+0xbc>
            {
                xReturn = 2;
 800b80c:	2302      	movs	r3, #2
 800b80e:	60fb      	str	r3, [r7, #12]
            }

            break;
 800b810:	e012      	b.n	800b838 <xGetExtensionOrder+0xbc>

        case ipIPv6_EXT_HEADER_ROUTING_HEADER:
            xReturn = 3;
 800b812:	2303      	movs	r3, #3
 800b814:	60fb      	str	r3, [r7, #12]
            break;
 800b816:	e010      	b.n	800b83a <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_FRAGMENT_HEADER:
            xReturn = 4;
 800b818:	2304      	movs	r3, #4
 800b81a:	60fb      	str	r3, [r7, #12]
            break;
 800b81c:	e00d      	b.n	800b83a <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_AUTHEN_HEADER:
            xReturn = 5;
 800b81e:	2305      	movs	r3, #5
 800b820:	60fb      	str	r3, [r7, #12]
            break;
 800b822:	e00a      	b.n	800b83a <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_SECURE_PAYLOAD:
            xReturn = 6;
 800b824:	2306      	movs	r3, #6
 800b826:	60fb      	str	r3, [r7, #12]
            break;
 800b828:	e007      	b.n	800b83a <xGetExtensionOrder+0xbe>

        /* Destination options may follow here in case there are no routing options. */
        case ipIPv6_EXT_HEADER_MOBILITY_HEADER:
            xReturn = 8;
 800b82a:	2308      	movs	r3, #8
 800b82c:	60fb      	str	r3, [r7, #12]
            break;
 800b82e:	e004      	b.n	800b83a <xGetExtensionOrder+0xbe>

        default:
            xReturn = -1;
 800b830:	f04f 33ff 	mov.w	r3, #4294967295
 800b834:	60fb      	str	r3, [r7, #12]
            break;
 800b836:	e000      	b.n	800b83a <xGetExtensionOrder+0xbe>
            break;
 800b838:	bf00      	nop
    }

    return xReturn;
 800b83a:	68fb      	ldr	r3, [r7, #12]
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3714      	adds	r7, #20
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr

0800b848 <eHandleIPv6ExtensionHeaders>:
 * @return eProcessBuffer in case the options are removed successfully, otherwise
 *         eReleaseBuffer.
 */
eFrameProcessingResult_t eHandleIPv6ExtensionHeaders( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                      BaseType_t xDoRemove )
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b08e      	sub	sp, #56	@ 0x38
 800b84c:	af02      	add	r7, sp, #8
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eResult = eReleaseBuffer;
 800b852:	2300      	movs	r3, #0
 800b854:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    const size_t uxMaxLength = pxNetworkBuffer->xDataLength;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b85c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    IPPacket_IPv6_t * pxIPPacket_IPv6 = ( ( IPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b862:	623b      	str	r3, [r7, #32]
    size_t xMoveLen = 0U;
 800b864:	2300      	movs	r3, #0
 800b866:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxRemovedBytes = 0U;
 800b868:	2300      	movs	r3, #0
 800b86a:	61fb      	str	r3, [r7, #28]
    uint8_t ucNextHeader = 0U;
 800b86c:	2300      	movs	r3, #0
 800b86e:	72fb      	strb	r3, [r7, #11]
    size_t uxIndex = 0U;
 800b870:	2300      	movs	r3, #0
 800b872:	61bb      	str	r3, [r7, #24]

    uxRemovedBytes = usGetExtensionHeaderLength( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength, &ucNextHeader );
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b87c:	f107 020b 	add.w	r2, r7, #11
 800b880:	4619      	mov	r1, r3
 800b882:	f000 faa5 	bl	800bdd0 <usGetExtensionHeaderLength>
 800b886:	61f8      	str	r0, [r7, #28]
    uxIndex = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxRemovedBytes;
 800b888:	69fb      	ldr	r3, [r7, #28]
 800b88a:	3336      	adds	r3, #54	@ 0x36
 800b88c:	61bb      	str	r3, [r7, #24]

    if( uxIndex < uxMaxLength )
 800b88e:	69ba      	ldr	r2, [r7, #24]
 800b890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b892:	429a      	cmp	r2, r3
 800b894:	d243      	bcs.n	800b91e <eHandleIPv6ExtensionHeaders+0xd6>
    {
        uint8_t * pucTo;
        const uint8_t * pucFrom;
        uint16_t usPayloadLength = FreeRTOS_ntohs( pxIPPacket_IPv6->xIPHeader.usPayloadLength );
 800b896:	6a3b      	ldr	r3, [r7, #32]
 800b898:	8a5b      	ldrh	r3, [r3, #18]
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	021b      	lsls	r3, r3, #8
 800b89e:	b21a      	sxth	r2, r3
 800b8a0:	6a3b      	ldr	r3, [r7, #32]
 800b8a2:	8a5b      	ldrh	r3, [r3, #18]
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	0a1b      	lsrs	r3, r3, #8
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	b21b      	sxth	r3, r3
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	b21b      	sxth	r3, r3
 800b8b0:	82fb      	strh	r3, [r7, #22]

        if( uxRemovedBytes >= ( size_t ) usPayloadLength )
 800b8b2:	8afb      	ldrh	r3, [r7, #22]
 800b8b4:	69fa      	ldr	r2, [r7, #28]
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d231      	bcs.n	800b91e <eHandleIPv6ExtensionHeaders+0xd6>
        {
            /* Can not remove more bytes than the payload length. */
        }
        else if( xDoRemove == pdTRUE )
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d12e      	bne.n	800b91e <eHandleIPv6ExtensionHeaders+0xd6>
        {
            pxIPPacket_IPv6->xIPHeader.ucNextHeader = ucNextHeader;
 800b8c0:	7afa      	ldrb	r2, [r7, #11]
 800b8c2:	6a3b      	ldr	r3, [r7, #32]
 800b8c4:	751a      	strb	r2, [r3, #20]
            pucTo = &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ] );
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8ca:	3336      	adds	r3, #54	@ 0x36
 800b8cc:	613b      	str	r3, [r7, #16]
            pucFrom = &( pxNetworkBuffer->pucEthernetBuffer[ uxIndex ] );
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b8d2:	69bb      	ldr	r3, [r7, #24]
 800b8d4:	4413      	add	r3, r2
 800b8d6:	60fb      	str	r3, [r7, #12]
            xMoveLen = uxMaxLength - uxIndex;
 800b8d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8da:	69bb      	ldr	r3, [r7, #24]
 800b8dc:	1ad3      	subs	r3, r2, r3
 800b8de:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memmove( pucTo, pucFrom, xMoveLen );
 800b8e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b8e2:	68f9      	ldr	r1, [r7, #12]
 800b8e4:	6938      	ldr	r0, [r7, #16]
 800b8e6:	f018 f91e 	bl	8023b26 <memmove>
            pxNetworkBuffer->xDataLength -= uxRemovedBytes;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b8ee:	69fb      	ldr	r3, [r7, #28]
 800b8f0:	1ad2      	subs	r2, r2, r3
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	629a      	str	r2, [r3, #40]	@ 0x28

            usPayloadLength = ( uint16_t ) ( usPayloadLength - uxRemovedBytes );
 800b8f6:	69fb      	ldr	r3, [r7, #28]
 800b8f8:	b29b      	uxth	r3, r3
 800b8fa:	8afa      	ldrh	r2, [r7, #22]
 800b8fc:	1ad3      	subs	r3, r2, r3
 800b8fe:	82fb      	strh	r3, [r7, #22]
            pxIPPacket_IPv6->xIPHeader.usPayloadLength = FreeRTOS_htons( usPayloadLength );
 800b900:	8afb      	ldrh	r3, [r7, #22]
 800b902:	021b      	lsls	r3, r3, #8
 800b904:	b21a      	sxth	r2, r3
 800b906:	8afb      	ldrh	r3, [r7, #22]
 800b908:	0a1b      	lsrs	r3, r3, #8
 800b90a:	b29b      	uxth	r3, r3
 800b90c:	b21b      	sxth	r3, r3
 800b90e:	4313      	orrs	r3, r2
 800b910:	b21b      	sxth	r3, r3
 800b912:	b29a      	uxth	r2, r3
 800b914:	6a3b      	ldr	r3, [r7, #32]
 800b916:	825a      	strh	r2, [r3, #18]
            eResult = eProcessBuffer;
 800b918:	2301      	movs	r3, #1
 800b91a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* xDoRemove is false, so the function is not supposed to
             * remove extension headers. */
        }
    }

    FreeRTOS_printf( ( "Extension headers : %s Truncated %u bytes. Removed %u, Payload %u xDataLength now %u\n",
 800b91e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b922:	2b01      	cmp	r3, #1
 800b924:	d101      	bne.n	800b92a <eHandleIPv6ExtensionHeaders+0xe2>
 800b926:	4910      	ldr	r1, [pc, #64]	@ (800b968 <eHandleIPv6ExtensionHeaders+0x120>)
 800b928:	e000      	b.n	800b92c <eHandleIPv6ExtensionHeaders+0xe4>
 800b92a:	4910      	ldr	r1, [pc, #64]	@ (800b96c <eHandleIPv6ExtensionHeaders+0x124>)
 800b92c:	6a3b      	ldr	r3, [r7, #32]
 800b92e:	8a5b      	ldrh	r3, [r3, #18]
 800b930:	b29b      	uxth	r3, r3
 800b932:	021b      	lsls	r3, r3, #8
 800b934:	b21a      	sxth	r2, r3
 800b936:	6a3b      	ldr	r3, [r7, #32]
 800b938:	8a5b      	ldrh	r3, [r3, #18]
 800b93a:	b29b      	uxth	r3, r3
 800b93c:	0a1b      	lsrs	r3, r3, #8
 800b93e:	b29b      	uxth	r3, r3
 800b940:	b21b      	sxth	r3, r3
 800b942:	4313      	orrs	r3, r2
 800b944:	b21b      	sxth	r3, r3
 800b946:	b29b      	uxth	r3, r3
 800b948:	461a      	mov	r2, r3
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b94e:	9301      	str	r3, [sp, #4]
 800b950:	9200      	str	r2, [sp, #0]
 800b952:	69fb      	ldr	r3, [r7, #28]
 800b954:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b956:	4806      	ldr	r0, [pc, #24]	@ (800b970 <eHandleIPv6ExtensionHeaders+0x128>)
 800b958:	f016 ff24 	bl	80227a4 <lUDPLoggingPrintf>
                       ( eResult == eProcessBuffer ) ? "good" : "bad",
                       ( unsigned ) xMoveLen,
                       ( unsigned ) uxRemovedBytes,
                       FreeRTOS_ntohs( pxIPPacket_IPv6->xIPHeader.usPayloadLength ),
                       ( unsigned ) pxNetworkBuffer->xDataLength ) );
    return eResult;
 800b95c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b960:	4618      	mov	r0, r3
 800b962:	3730      	adds	r7, #48	@ 0x30
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}
 800b968:	08025718 	.word	0x08025718
 800b96c:	08025720 	.word	0x08025720
 800b970:	08025724 	.word	0x08025724

0800b974 <pxTCPSocketLookup_IPv6>:
 * @param[in] pxAddress The IPv4/IPv6 address.
 * @return The socket in case it is connected to the remote IP-address.
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup_IPv6( FreeRTOS_Socket_t * pxSocket,
                                                const IPv46_Address_t * pxAddress )
    {
 800b974:	b580      	push	{r7, lr}
 800b976:	b084      	sub	sp, #16
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
 800b97c:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxResult = NULL;
 800b97e:	2300      	movs	r3, #0
 800b980:	60fb      	str	r3, [r7, #12]

        if( ( pxSocket != NULL ) && ( pxAddress != NULL ) )
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d026      	beq.n	800b9d6 <pxTCPSocketLookup_IPv6+0x62>
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d023      	beq.n	800b9d6 <pxTCPSocketLookup_IPv6+0x62>
        {
            if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	7a1b      	ldrb	r3, [r3, #8]
 800b992:	f003 0301 	and.w	r3, r3, #1
 800b996:	b2db      	uxtb	r3, r3
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d010      	beq.n	800b9be <pxTCPSocketLookup_IPv6+0x4a>
            {
                if( pxAddress->xIs_IPv6 != pdFALSE )
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	691b      	ldr	r3, [r3, #16]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d018      	beq.n	800b9d6 <pxTCPSocketLookup_IPv6+0x62>
                {
                    if( memcmp( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxAddress->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	3354      	adds	r3, #84	@ 0x54
 800b9a8:	6839      	ldr	r1, [r7, #0]
 800b9aa:	2210      	movs	r2, #16
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f018 f8aa 	bl	8023b06 <memcmp>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d10e      	bne.n	800b9d6 <pxTCPSocketLookup_IPv6+0x62>
                    {
                        /* For sockets not in listening mode, find a match with
                         * uxLocalPort, ulRemoteIP AND uxRemotePort. */
                        pxResult = pxSocket;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	60fb      	str	r3, [r7, #12]
 800b9bc:	e00b      	b.n	800b9d6 <pxTCPSocketLookup_IPv6+0x62>
                    }
                }
            }
            else
            {
                if( pxAddress->xIs_IPv6 == pdFALSE )
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	691b      	ldr	r3, [r3, #16]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d107      	bne.n	800b9d6 <pxTCPSocketLookup_IPv6+0x62>
                {
                    if( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 == pxAddress->xIPAddress.ulIP_IPv4 )
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d101      	bne.n	800b9d6 <pxTCPSocketLookup_IPv6+0x62>
                    {
                        /* For sockets not in listening mode, find a match with
                         * uxLocalPort, ulRemoteIP AND uxRemotePort. */
                        pxResult = pxSocket;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	60fb      	str	r3, [r7, #12]
                    }
                }
            }
        }

        return pxResult;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
    }
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3710      	adds	r7, #16
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <xSend_UDP_Update_IPv6>:
 * @param[in] pxDestinationAddress The IPv4 socket address.
 * @return  Returns NULL, always.
 */
void * xSend_UDP_Update_IPv6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                              const struct freertos_sockaddr * pxDestinationAddress )
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	6039      	str	r1, [r7, #0]
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    UDPPacket_IPv6_t * pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9ee:	60fb      	str	r3, [r7, #12]

    pxNetworkBuffer->xIPAddress.ulIP_IPv4 = 0U;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	615a      	str	r2, [r3, #20]

    configASSERT( pxDestinationAddress != NULL );
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d103      	bne.n	800ba04 <xSend_UDP_Update_IPv6+0x24>
 800b9fc:	2173      	movs	r1, #115	@ 0x73
 800b9fe:	4811      	ldr	r0, [pc, #68]	@ (800ba44 <xSend_UDP_Update_IPv6+0x64>)
 800ba00:	f7f6 f802 	bl	8001a08 <vAssertCalled>
    ( void ) memcpy( pxUDPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, pxDestinationAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	3308      	adds	r3, #8
 800ba0e:	2210      	movs	r2, #16
 800ba10:	4619      	mov	r1, r3
 800ba12:	f017 f8e3 	bl	8022bdc <memcpy>
    ( void ) memcpy( pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, pxDestinationAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f103 0014 	add.w	r0, r3, #20
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	3308      	adds	r3, #8
 800ba20:	2210      	movs	r2, #16
 800ba22:	4619      	mov	r1, r3
 800ba24:	f017 f8da 	bl	8022bdc <memcpy>
    pxUDPPacket_IPv6->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800ba30:	731a      	strb	r2, [r3, #12]
 800ba32:	2200      	movs	r2, #0
 800ba34:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800ba38:	735a      	strb	r2, [r3, #13]

    return NULL;
 800ba3a:	2300      	movs	r3, #0
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3710      	adds	r7, #16
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}
 800ba44:	0802577c 	.word	0x0802577c

0800ba48 <cHexToChar>:
 * @brief Converts a 4 bit (nibble) value to a readable hex character, e.g. 14 becomes 'e'.
 * @param usValue  The value to be converted, must be between 0 and 15.
 * @return The character, between '0' and '9', or between 'a' and 'f'.
 */
char cHexToChar( uint16_t usValue )
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	4603      	mov	r3, r0
 800ba50:	80fb      	strh	r3, [r7, #6]
    char cReturn = '0';
 800ba52:	2330      	movs	r3, #48	@ 0x30
 800ba54:	73fb      	strb	r3, [r7, #15]

    if( usValue <= 9U )
 800ba56:	88fb      	ldrh	r3, [r7, #6]
 800ba58:	2b09      	cmp	r3, #9
 800ba5a:	d805      	bhi.n	800ba68 <cHexToChar+0x20>
    {
        cReturn = ( char ) ( cReturn + usValue );
 800ba5c:	88fb      	ldrh	r3, [r7, #6]
 800ba5e:	b2da      	uxtb	r2, r3
 800ba60:	7bfb      	ldrb	r3, [r7, #15]
 800ba62:	4413      	add	r3, r2
 800ba64:	73fb      	strb	r3, [r7, #15]
 800ba66:	e010      	b.n	800ba8a <cHexToChar+0x42>
    }
    else if( usValue <= 15U )
 800ba68:	88fb      	ldrh	r3, [r7, #6]
 800ba6a:	2b0f      	cmp	r3, #15
 800ba6c:	d809      	bhi.n	800ba82 <cHexToChar+0x3a>
    {
        cReturn = 'a';
 800ba6e:	2361      	movs	r3, #97	@ 0x61
 800ba70:	73fb      	strb	r3, [r7, #15]
        cReturn = ( char ) ( cReturn + ( usValue - ( uint16_t ) 10 ) );
 800ba72:	88fb      	ldrh	r3, [r7, #6]
 800ba74:	b2da      	uxtb	r2, r3
 800ba76:	7bfb      	ldrb	r3, [r7, #15]
 800ba78:	4413      	add	r3, r2
 800ba7a:	b2db      	uxtb	r3, r3
 800ba7c:	3b0a      	subs	r3, #10
 800ba7e:	73fb      	strb	r3, [r7, #15]
 800ba80:	e003      	b.n	800ba8a <cHexToChar+0x42>
    }
    else
    {
        /* The value passed to 'usValue' has been and-ed with 0x0f,
         * so this else clause should never be reached. */
        configASSERT( 0 == 1 );
 800ba82:	21b3      	movs	r1, #179	@ 0xb3
 800ba84:	4803      	ldr	r0, [pc, #12]	@ (800ba94 <cHexToChar+0x4c>)
 800ba86:	f7f5 ffbf 	bl	8001a08 <vAssertCalled>
    }

    return cReturn;
 800ba8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3710      	adds	r7, #16
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}
 800ba94:	0802577c 	.word	0x0802577c

0800ba98 <uxHexPrintShort>:
 * @return The number of bytes written to 'pcBuffer'.
 */
socklen_t uxHexPrintShort( char * pcBuffer,
                           size_t uxBufferSize,
                           uint16_t usValue )
{
 800ba98:	b590      	push	{r4, r7, lr}
 800ba9a:	b08b      	sub	sp, #44	@ 0x2c
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	60f8      	str	r0, [r7, #12]
 800baa0:	60b9      	str	r1, [r7, #8]
 800baa2:	4613      	mov	r3, r2
 800baa4:	80fb      	strh	r3, [r7, #6]
    const size_t uxNibbleCount = 4U;
 800baa6:	2304      	movs	r3, #4
 800baa8:	617b      	str	r3, [r7, #20]
    size_t uxNibble;
    socklen_t uxIndex = 0U;
 800baaa:	2300      	movs	r3, #0
 800baac:	623b      	str	r3, [r7, #32]
    uint16_t usShifter = usValue;
 800baae:	88fb      	ldrh	r3, [r7, #6]
 800bab0:	83fb      	strh	r3, [r7, #30]
    BaseType_t xHadNonZero = pdFALSE;
 800bab2:	2300      	movs	r3, #0
 800bab4:	61bb      	str	r3, [r7, #24]

    for( uxNibble = 0; uxNibble < uxNibbleCount; uxNibble++ )
 800bab6:	2300      	movs	r3, #0
 800bab8:	627b      	str	r3, [r7, #36]	@ 0x24
 800baba:	e026      	b.n	800bb0a <uxHexPrintShort+0x72>
    {
        uint16_t usNibble = ( usShifter >> 12 ) & 0x0FU;
 800babc:	8bfb      	ldrh	r3, [r7, #30]
 800babe:	0b1b      	lsrs	r3, r3, #12
 800bac0:	827b      	strh	r3, [r7, #18]

        if( usNibble != 0U )
 800bac2:	8a7b      	ldrh	r3, [r7, #18]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d001      	beq.n	800bacc <uxHexPrintShort+0x34>
        {
            xHadNonZero = pdTRUE;
 800bac8:	2301      	movs	r3, #1
 800baca:	61bb      	str	r3, [r7, #24]
        }

        if( ( xHadNonZero != pdFALSE ) || ( uxNibble == ( uxNibbleCount - 1U ) ) )
 800bacc:	69bb      	ldr	r3, [r7, #24]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d104      	bne.n	800badc <uxHexPrintShort+0x44>
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	3b01      	subs	r3, #1
 800bad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bad8:	429a      	cmp	r2, r3
 800bada:	d110      	bne.n	800bafe <uxHexPrintShort+0x66>
        {
            if( uxIndex >= ( uxBufferSize - 1U ) )
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	3b01      	subs	r3, #1
 800bae0:	6a3a      	ldr	r2, [r7, #32]
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d216      	bcs.n	800bb14 <uxHexPrintShort+0x7c>
            {
                break;
            }

            pcBuffer[ uxIndex ] = cHexToChar( usNibble );
 800bae6:	68fa      	ldr	r2, [r7, #12]
 800bae8:	6a3b      	ldr	r3, [r7, #32]
 800baea:	18d4      	adds	r4, r2, r3
 800baec:	8a7b      	ldrh	r3, [r7, #18]
 800baee:	4618      	mov	r0, r3
 800baf0:	f7ff ffaa 	bl	800ba48 <cHexToChar>
 800baf4:	4603      	mov	r3, r0
 800baf6:	7023      	strb	r3, [r4, #0]
            uxIndex++;
 800baf8:	6a3b      	ldr	r3, [r7, #32]
 800bafa:	3301      	adds	r3, #1
 800bafc:	623b      	str	r3, [r7, #32]
        }

        usShifter = ( uint16_t ) ( usShifter << 4 );
 800bafe:	8bfb      	ldrh	r3, [r7, #30]
 800bb00:	011b      	lsls	r3, r3, #4
 800bb02:	83fb      	strh	r3, [r7, #30]
    for( uxNibble = 0; uxNibble < uxNibbleCount; uxNibble++ )
 800bb04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb06:	3301      	adds	r3, #1
 800bb08:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d3d4      	bcc.n	800babc <uxHexPrintShort+0x24>
 800bb12:	e000      	b.n	800bb16 <uxHexPrintShort+0x7e>
                break;
 800bb14:	bf00      	nop
    }

    return uxIndex;
 800bb16:	6a3b      	ldr	r3, [r7, #32]
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	372c      	adds	r7, #44	@ 0x2c
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd90      	pop	{r4, r7, pc}

0800bb20 <prv_ntop6_search_zeros>:
 * @brief Scan the binary IPv6 address and find the longest train of consecutive zero's.
 *        The result of this search will be stored in 'xZeroStart' and 'xZeroLength'.
 * @param pxSet the set of parameters as used by FreeRTOS_inet_ntop6().
 */
void prv_ntop6_search_zeros( struct sNTOP6_Set * pxSet )
{
 800bb20:	b480      	push	{r7}
 800bb22:	b089      	sub	sp, #36	@ 0x24
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
    BaseType_t xIndex = 0;            /* The index in the IPv6 address: 0..7. */
 800bb28:	2300      	movs	r3, #0
 800bb2a:	61fb      	str	r3, [r7, #28]
    BaseType_t xCurStart = 0;         /* The position of the first zero found so far. */
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	61bb      	str	r3, [r7, #24]
    BaseType_t xCurLength = 0;        /* The number of zero's seen so far. */
 800bb30:	2300      	movs	r3, #0
 800bb32:	617b      	str	r3, [r7, #20]
    const BaseType_t xShortCount = 8; /* An IPv6 address consists of 8 shorts. */
 800bb34:	2308      	movs	r3, #8
 800bb36:	613b      	str	r3, [r7, #16]

    /* Default: when xZeroStart is negative, it won't match with any xIndex. */
    pxSet->xZeroStart = -1;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb3e:	605a      	str	r2, [r3, #4]

    /* Look for the longest train of zero's 0:0:0:... */
    for( ; xIndex < xShortCount; xIndex++ )
 800bb40:	e02c      	b.n	800bb9c <prv_ntop6_search_zeros+0x7c>
    {
        uint16_t usValue = pxSet->pusAddress[ xIndex ];
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681a      	ldr	r2, [r3, #0]
 800bb46:	69fb      	ldr	r3, [r7, #28]
 800bb48:	005b      	lsls	r3, r3, #1
 800bb4a:	4413      	add	r3, r2
 800bb4c:	881b      	ldrh	r3, [r3, #0]
 800bb4e:	81fb      	strh	r3, [r7, #14]

        if( usValue == 0U )
 800bb50:	89fb      	ldrh	r3, [r7, #14]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d107      	bne.n	800bb66 <prv_ntop6_search_zeros+0x46>
        {
            if( xCurLength == 0 )
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d101      	bne.n	800bb60 <prv_ntop6_search_zeros+0x40>
            {
                /* Remember the position of the first zero. */
                xCurStart = xIndex;
 800bb5c:	69fb      	ldr	r3, [r7, #28]
 800bb5e:	61bb      	str	r3, [r7, #24]
            }

            /* Count consecutive zeros. */
            xCurLength++;
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	3301      	adds	r3, #1
 800bb64:	617b      	str	r3, [r7, #20]
        }

        if( ( usValue != 0U ) || ( xIndex == ( xShortCount - 1 ) ) )
 800bb66:	89fb      	ldrh	r3, [r7, #14]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d104      	bne.n	800bb76 <prv_ntop6_search_zeros+0x56>
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	3b01      	subs	r3, #1
 800bb70:	69fa      	ldr	r2, [r7, #28]
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d10f      	bne.n	800bb96 <prv_ntop6_search_zeros+0x76>
        {
            /* Has a longer train of zero's been found? */
            if( ( xCurLength > 1 ) && ( pxSet->xZeroLength < xCurLength ) )
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	dd0a      	ble.n	800bb92 <prv_ntop6_search_zeros+0x72>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	697a      	ldr	r2, [r7, #20]
 800bb82:	429a      	cmp	r2, r3
 800bb84:	dd05      	ble.n	800bb92 <prv_ntop6_search_zeros+0x72>
            {
                /* Remember the number of consecutive zeros. */
                pxSet->xZeroLength = xCurLength;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	697a      	ldr	r2, [r7, #20]
 800bb8a:	609a      	str	r2, [r3, #8]
                /* Remember the index of the first zero found. */
                pxSet->xZeroStart = xCurStart;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	69ba      	ldr	r2, [r7, #24]
 800bb90:	605a      	str	r2, [r3, #4]
            }

            /* Reset the counter of consecutive zeros. */
            xCurLength = 0;
 800bb92:	2300      	movs	r3, #0
 800bb94:	617b      	str	r3, [r7, #20]
    for( ; xIndex < xShortCount; xIndex++ )
 800bb96:	69fb      	ldr	r3, [r7, #28]
 800bb98:	3301      	adds	r3, #1
 800bb9a:	61fb      	str	r3, [r7, #28]
 800bb9c:	69fa      	ldr	r2, [r7, #28]
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	dbce      	blt.n	800bb42 <prv_ntop6_search_zeros+0x22>
        }
    }
}
 800bba4:	bf00      	nop
 800bba6:	bf00      	nop
 800bba8:	3724      	adds	r7, #36	@ 0x24
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb0:	4770      	bx	lr

0800bbb2 <prv_ntop6_write_zeros>:
 *       null-terminated later on.
 */
static BaseType_t prv_ntop6_write_zeros( char * pcDestination,
                                         size_t uxSize,
                                         struct sNTOP6_Set * pxSet )
{
 800bbb2:	b480      	push	{r7}
 800bbb4:	b087      	sub	sp, #28
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	60f8      	str	r0, [r7, #12]
 800bbba:	60b9      	str	r1, [r7, #8]
 800bbbc:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdPASS;
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	617b      	str	r3, [r7, #20]
    const BaseType_t xShortCount = 8; /* An IPv6 address consists of 8 shorts. */
 800bbc2:	2308      	movs	r3, #8
 800bbc4:	613b      	str	r3, [r7, #16]

    if( pxSet->uxTargetIndex <= ( uxSize - 1U ) )
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	691a      	ldr	r2, [r3, #16]
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	3b01      	subs	r3, #1
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d827      	bhi.n	800bc22 <prv_ntop6_write_zeros+0x70>
    {
        pcDestination[ pxSet->uxTargetIndex ] = ':';
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	691b      	ldr	r3, [r3, #16]
 800bbd6:	68fa      	ldr	r2, [r7, #12]
 800bbd8:	4413      	add	r3, r2
 800bbda:	223a      	movs	r2, #58	@ 0x3a
 800bbdc:	701a      	strb	r2, [r3, #0]
        pxSet->uxTargetIndex++;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	691b      	ldr	r3, [r3, #16]
 800bbe2:	1c5a      	adds	r2, r3, #1
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	611a      	str	r2, [r3, #16]

        if( ( pxSet->xIndex + pxSet->xZeroLength ) == xShortCount )
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	68da      	ldr	r2, [r3, #12]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	689b      	ldr	r3, [r3, #8]
 800bbf0:	4413      	add	r3, r2
 800bbf2:	693a      	ldr	r2, [r7, #16]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d116      	bne.n	800bc26 <prv_ntop6_write_zeros+0x74>
        {
            /* Reached the last index, write a second ":". */
            if( pxSet->uxTargetIndex <= ( uxSize - 1U ) )
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	691a      	ldr	r2, [r3, #16]
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d80b      	bhi.n	800bc1c <prv_ntop6_write_zeros+0x6a>
            {
                pcDestination[ pxSet->uxTargetIndex ] = ':';
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	691b      	ldr	r3, [r3, #16]
 800bc08:	68fa      	ldr	r2, [r7, #12]
 800bc0a:	4413      	add	r3, r2
 800bc0c:	223a      	movs	r2, #58	@ 0x3a
 800bc0e:	701a      	strb	r2, [r3, #0]
                pxSet->uxTargetIndex++;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	691b      	ldr	r3, [r3, #16]
 800bc14:	1c5a      	adds	r2, r3, #1
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	611a      	str	r2, [r3, #16]
 800bc1a:	e004      	b.n	800bc26 <prv_ntop6_write_zeros+0x74>
            }
            else
            {
                /* Can not write the second colon. */
                xReturn = pdFAIL;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	617b      	str	r3, [r7, #20]
 800bc20:	e001      	b.n	800bc26 <prv_ntop6_write_zeros+0x74>
        }
    }
    else
    {
        /* Can not write the first colon. */
        xReturn = pdFAIL;
 800bc22:	2300      	movs	r3, #0
 800bc24:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800bc26:	697b      	ldr	r3, [r7, #20]
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	371c      	adds	r7, #28
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr

0800bc34 <prv_ntop6_write_short>:
 *       null-terminated later on.
 */
static BaseType_t prv_ntop6_write_short( char * pcDestination,
                                         size_t uxSize,
                                         struct sNTOP6_Set * pxSet )
{
 800bc34:	b590      	push	{r4, r7, lr}
 800bc36:	b089      	sub	sp, #36	@ 0x24
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	60f8      	str	r0, [r7, #12]
 800bc3c:	60b9      	str	r1, [r7, #8]
 800bc3e:	607a      	str	r2, [r7, #4]
    socklen_t uxLength;
    BaseType_t xReturn = pdPASS;
 800bc40:	2301      	movs	r3, #1
 800bc42:	61fb      	str	r3, [r7, #28]
    const size_t uxBytesPerShortValue = 4U;
 800bc44:	2304      	movs	r3, #4
 800bc46:	61bb      	str	r3, [r7, #24]

    if( pxSet->xIndex > 0 )
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	68db      	ldr	r3, [r3, #12]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	dd13      	ble.n	800bc78 <prv_ntop6_write_short+0x44>
    {
        if( pxSet->uxTargetIndex >= ( uxSize - 1U ) )
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	691a      	ldr	r2, [r3, #16]
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	3b01      	subs	r3, #1
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d302      	bcc.n	800bc62 <prv_ntop6_write_short+0x2e>
        {
            xReturn = pdFAIL;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	61fb      	str	r3, [r7, #28]
 800bc60:	e00a      	b.n	800bc78 <prv_ntop6_write_short+0x44>
        }
        else
        {
            pcDestination[ pxSet->uxTargetIndex ] = ':';
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	691b      	ldr	r3, [r3, #16]
 800bc66:	68fa      	ldr	r2, [r7, #12]
 800bc68:	4413      	add	r3, r2
 800bc6a:	223a      	movs	r2, #58	@ 0x3a
 800bc6c:	701a      	strb	r2, [r3, #0]
            pxSet->uxTargetIndex++;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	691b      	ldr	r3, [r3, #16]
 800bc72:	1c5a      	adds	r2, r3, #1
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	611a      	str	r2, [r3, #16]
        }
    }

    if( xReturn == pdPASS )
 800bc78:	69fb      	ldr	r3, [r7, #28]
 800bc7a:	2b01      	cmp	r3, #1
 800bc7c:	d130      	bne.n	800bce0 <prv_ntop6_write_short+0xac>
    {
        /* If there is enough space to write a short. */
        if( pxSet->uxTargetIndex <= ( uxSize - uxBytesPerShortValue ) )
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	691a      	ldr	r2, [r3, #16]
 800bc82:	68b9      	ldr	r1, [r7, #8]
 800bc84:	69bb      	ldr	r3, [r7, #24]
 800bc86:	1acb      	subs	r3, r1, r3
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	d827      	bhi.n	800bcdc <prv_ntop6_write_short+0xa8>
        {
            /* Write hex value of short. at most 4 + 1 bytes. */
            uxLength = uxHexPrintShort( &( pcDestination[ pxSet->uxTargetIndex ] ),
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	691b      	ldr	r3, [r3, #16]
 800bc90:	68fa      	ldr	r2, [r7, #12]
 800bc92:	18d0      	adds	r0, r2, r3
 800bc94:	69bb      	ldr	r3, [r7, #24]
 800bc96:	1c5c      	adds	r4, r3, #1
                                        uxBytesPerShortValue + 1U,
                                        FreeRTOS_ntohs( pxSet->pusAddress[ pxSet->xIndex ] ) );
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681a      	ldr	r2, [r3, #0]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	68db      	ldr	r3, [r3, #12]
 800bca0:	005b      	lsls	r3, r3, #1
 800bca2:	4413      	add	r3, r2
 800bca4:	881b      	ldrh	r3, [r3, #0]
 800bca6:	021b      	lsls	r3, r3, #8
 800bca8:	b21a      	sxth	r2, r3
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6819      	ldr	r1, [r3, #0]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	68db      	ldr	r3, [r3, #12]
 800bcb2:	005b      	lsls	r3, r3, #1
 800bcb4:	440b      	add	r3, r1
 800bcb6:	881b      	ldrh	r3, [r3, #0]
 800bcb8:	0a1b      	lsrs	r3, r3, #8
 800bcba:	b29b      	uxth	r3, r3
 800bcbc:	b21b      	sxth	r3, r3
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	b21b      	sxth	r3, r3
            uxLength = uxHexPrintShort( &( pcDestination[ pxSet->uxTargetIndex ] ),
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	4621      	mov	r1, r4
 800bcc8:	f7ff fee6 	bl	800ba98 <uxHexPrintShort>
 800bccc:	6178      	str	r0, [r7, #20]

            /* uxLength will be non zero and positive always. */
            pxSet->uxTargetIndex += uxLength;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	691a      	ldr	r2, [r3, #16]
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	441a      	add	r2, r3
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	611a      	str	r2, [r3, #16]
 800bcda:	e001      	b.n	800bce0 <prv_ntop6_write_short+0xac>
        }
        else
        {
            xReturn = pdFAIL;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	61fb      	str	r3, [r7, #28]
        }
    }

    return xReturn;
 800bce0:	69fb      	ldr	r3, [r7, #28]
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3724      	adds	r7, #36	@ 0x24
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd90      	pop	{r4, r7, pc}

0800bcea <FreeRTOS_inet_ntop6>:
 * @return pdPASS if the translation was successful or else pdFAIL.
 */
const char * FreeRTOS_inet_ntop6( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800bcea:	b580      	push	{r7, lr}
 800bcec:	b08a      	sub	sp, #40	@ 0x28
 800bcee:	af00      	add	r7, sp, #0
 800bcf0:	60f8      	str	r0, [r7, #12]
 800bcf2:	60b9      	str	r1, [r7, #8]
 800bcf4:	607a      	str	r2, [r7, #4]
    const char * pcReturn;  /* The return value, which is either 'pcDestination' or NULL. */
    struct sNTOP6_Set xSet; /* A set of values for easy exchange with the helper functions prv_ntop6_xxx(). */

    ( void ) memset( &( xSet ), 0, sizeof( xSet ) );
 800bcf6:	f107 0310 	add.w	r3, r7, #16
 800bcfa:	2214      	movs	r2, #20
 800bcfc:	2100      	movs	r1, #0
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f017 f879 	bl	8022df6 <memset>

    xSet.pusAddress = pvSource;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	613b      	str	r3, [r7, #16]

    if( uxSize < 3U )
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2b02      	cmp	r3, #2
 800bd0c:	d92c      	bls.n	800bd68 <FreeRTOS_inet_ntop6+0x7e>
    {
        /* Can not even print :: */
    }
    else
    {
        prv_ntop6_search_zeros( &( xSet ) );
 800bd0e:	f107 0310 	add.w	r3, r7, #16
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7ff ff04 	bl	800bb20 <prv_ntop6_search_zeros>

        while( xSet.xIndex < 8 )
 800bd18:	e01f      	b.n	800bd5a <FreeRTOS_inet_ntop6+0x70>
        {
            if( xSet.xIndex == xSet.xZeroStart )
 800bd1a:	69fa      	ldr	r2, [r7, #28]
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d10e      	bne.n	800bd40 <FreeRTOS_inet_ntop6+0x56>
            {
                if( prv_ntop6_write_zeros( pcDestination, uxSize, &( xSet ) ) == pdFAIL )
 800bd22:	f107 0310 	add.w	r3, r7, #16
 800bd26:	461a      	mov	r2, r3
 800bd28:	6879      	ldr	r1, [r7, #4]
 800bd2a:	68b8      	ldr	r0, [r7, #8]
 800bd2c:	f7ff ff41 	bl	800bbb2 <prv_ntop6_write_zeros>
 800bd30:	4603      	mov	r3, r0
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d015      	beq.n	800bd62 <FreeRTOS_inet_ntop6+0x78>
                {
                    break;
                }

                xSet.xIndex += xSet.xZeroLength;
 800bd36:	69fa      	ldr	r2, [r7, #28]
 800bd38:	69bb      	ldr	r3, [r7, #24]
 800bd3a:	4413      	add	r3, r2
 800bd3c:	61fb      	str	r3, [r7, #28]
 800bd3e:	e00c      	b.n	800bd5a <FreeRTOS_inet_ntop6+0x70>
            }
            else
            {
                if( prv_ntop6_write_short( pcDestination, uxSize, &( xSet ) ) == pdFAIL )
 800bd40:	f107 0310 	add.w	r3, r7, #16
 800bd44:	461a      	mov	r2, r3
 800bd46:	6879      	ldr	r1, [r7, #4]
 800bd48:	68b8      	ldr	r0, [r7, #8]
 800bd4a:	f7ff ff73 	bl	800bc34 <prv_ntop6_write_short>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d008      	beq.n	800bd66 <FreeRTOS_inet_ntop6+0x7c>
                {
                    break;
                }

                xSet.xIndex++;
 800bd54:	69fb      	ldr	r3, [r7, #28]
 800bd56:	3301      	adds	r3, #1
 800bd58:	61fb      	str	r3, [r7, #28]
        while( xSet.xIndex < 8 )
 800bd5a:	69fb      	ldr	r3, [r7, #28]
 800bd5c:	2b07      	cmp	r3, #7
 800bd5e:	dddc      	ble.n	800bd1a <FreeRTOS_inet_ntop6+0x30>
 800bd60:	e002      	b.n	800bd68 <FreeRTOS_inet_ntop6+0x7e>
                    break;
 800bd62:	bf00      	nop
 800bd64:	e000      	b.n	800bd68 <FreeRTOS_inet_ntop6+0x7e>
                    break;
 800bd66:	bf00      	nop
            }
        }
    }

    if( xSet.xIndex < 8 )
 800bd68:	69fb      	ldr	r3, [r7, #28]
 800bd6a:	2b07      	cmp	r3, #7
 800bd6c:	dc02      	bgt.n	800bd74 <FreeRTOS_inet_ntop6+0x8a>
    {
        /* Didn't reach the last nibble: clear the string. */
        pcReturn = NULL;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd72:	e006      	b.n	800bd82 <FreeRTOS_inet_ntop6+0x98>
    }
    else
    {
        pcDestination[ xSet.uxTargetIndex ] = '\0';
 800bd74:	6a3b      	ldr	r3, [r7, #32]
 800bd76:	68ba      	ldr	r2, [r7, #8]
 800bd78:	4413      	add	r3, r2
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	701a      	strb	r2, [r3, #0]
        pcReturn = pcDestination;
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return pcReturn;
 800bd82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3728      	adds	r7, #40	@ 0x28
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <vSetMultiCastIPv6MacAddress>:
 * @param[in] pxAddress IPv6 address.
 * @param[out] pxMACAddress Pointer to MAC address.
 */
void vSetMultiCastIPv6MacAddress( const IPv6_Address_t * pxAddress,
                                  MACAddress_t * pxMACAddress )
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b083      	sub	sp, #12
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	6039      	str	r1, [r7, #0]
    pxMACAddress->ucBytes[ 0 ] = 0x33U;
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	2233      	movs	r2, #51	@ 0x33
 800bd9a:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = 0x33U;
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	2233      	movs	r2, #51	@ 0x33
 800bda0:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = pxAddress->ucBytes[ 12 ];
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	7b1a      	ldrb	r2, [r3, #12]
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = pxAddress->ucBytes[ 13 ];
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	7b5a      	ldrb	r2, [r3, #13]
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = pxAddress->ucBytes[ 14 ];
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	7b9a      	ldrb	r2, [r3, #14]
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = pxAddress->ucBytes[ 15 ];
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	7bda      	ldrb	r2, [r3, #15]
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	715a      	strb	r2, [r3, #5]
}
 800bdc2:	bf00      	nop
 800bdc4:	370c      	adds	r7, #12
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdcc:	4770      	bx	lr
	...

0800bdd0 <usGetExtensionHeaderLength>:
 * @return The total length of all extension headers, or whole buffer length when error detected.
 */
size_t usGetExtensionHeaderLength( const uint8_t * pucEthernetBuffer,
                                   size_t uxBufferLength,
                                   uint8_t * pucProtocol )
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b08e      	sub	sp, #56	@ 0x38
 800bdd4:	af02      	add	r7, sp, #8
 800bdd6:	60f8      	str	r0, [r7, #12]
 800bdd8:	60b9      	str	r1, [r7, #8]
 800bdda:	607a      	str	r2, [r7, #4]
    uint8_t ucCurrentHeader;
    const IPPacket_IPv6_t * pxIPPacket_IPv6;
    uint8_t ucNextHeader = 0U;
 800bddc:	2300      	movs	r3, #0
 800bdde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    size_t uxIndex = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER;
 800bde2:	2336      	movs	r3, #54	@ 0x36
 800bde4:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxHopSize = 0U;
 800bde6:	2300      	movs	r3, #0
 800bde8:	61fb      	str	r3, [r7, #28]
    BaseType_t xCurrentOrder = 0;
 800bdea:	2300      	movs	r3, #0
 800bdec:	61bb      	str	r3, [r7, #24]
    BaseType_t xNextOrder = 0;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	617b      	str	r3, [r7, #20]
    size_t uxReturn = uxBufferLength;
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	627b      	str	r3, [r7, #36]	@ 0x24

    if( ( pucEthernetBuffer != NULL ) && ( pucProtocol != NULL ) )
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	f000 808c 	beq.w	800bf16 <usGetExtensionHeaderLength+0x146>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2b00      	cmp	r3, #0
 800be02:	f000 8088 	beq.w	800bf16 <usGetExtensionHeaderLength+0x146>
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxIPPacket_IPv6 = ( ( const IPPacket_IPv6_t * ) pucEthernetBuffer );
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	613b      	str	r3, [r7, #16]
        ucCurrentHeader = pxIPPacket_IPv6->xIPHeader.ucNextHeader;
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	7d1b      	ldrb	r3, [r3, #20]
 800be0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        /* Check if packet has extension header. */
        if( xGetExtensionOrder( ucCurrentHeader, 0U ) > 0 )
 800be12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800be16:	2100      	movs	r1, #0
 800be18:	4618      	mov	r0, r3
 800be1a:	f7ff fcaf 	bl	800b77c <xGetExtensionOrder>
 800be1e:	4603      	mov	r3, r0
 800be20:	2b00      	cmp	r3, #0
 800be22:	dd72      	ble.n	800bf0a <usGetExtensionHeaderLength+0x13a>
        {
            while( ( uxIndex + 8U ) < uxBufferLength )
 800be24:	e06b      	b.n	800befe <usGetExtensionHeaderLength+0x12e>
            {
                ucNextHeader = pucEthernetBuffer[ uxIndex ];
 800be26:	68fa      	ldr	r2, [r7, #12]
 800be28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be2a:	4413      	add	r3, r2
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                xCurrentOrder = xGetExtensionOrder( ucCurrentHeader, ucNextHeader );
 800be32:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800be36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800be3a:	4611      	mov	r1, r2
 800be3c:	4618      	mov	r0, r3
 800be3e:	f7ff fc9d 	bl	800b77c <xGetExtensionOrder>
 800be42:	61b8      	str	r0, [r7, #24]

                /* To avoid compile warning if debug print is disabled. */
                ( void ) xCurrentOrder;

                /* Read the length expressed in number of octets. */
                uxHopSize = ( size_t ) pucEthernetBuffer[ uxIndex + 1U ];
 800be44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be46:	3301      	adds	r3, #1
 800be48:	68fa      	ldr	r2, [r7, #12]
 800be4a:	4413      	add	r3, r2
 800be4c:	781b      	ldrb	r3, [r3, #0]
 800be4e:	61fb      	str	r3, [r7, #28]
                /* And multiply by 8 and add the minimum size of 8. */
                uxHopSize = ( uxHopSize * 8U ) + 8U;
 800be50:	69fb      	ldr	r3, [r7, #28]
 800be52:	3301      	adds	r3, #1
 800be54:	00db      	lsls	r3, r3, #3
 800be56:	61fb      	str	r3, [r7, #28]

                if( ( uxIndex + uxHopSize ) >= uxBufferLength )
 800be58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be5a:	69fb      	ldr	r3, [r7, #28]
 800be5c:	4413      	add	r3, r2
 800be5e:	68ba      	ldr	r2, [r7, #8]
 800be60:	429a      	cmp	r2, r3
 800be62:	d806      	bhi.n	800be72 <usGetExtensionHeaderLength+0xa2>
                {
                    FreeRTOS_debug_printf( ( "The length %u + %u of extension header is larger than buffer size %u \n", ( unsigned ) uxIndex, ( unsigned ) uxHopSize, ( unsigned ) uxBufferLength ) );
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	69fa      	ldr	r2, [r7, #28]
 800be68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800be6a:	482d      	ldr	r0, [pc, #180]	@ (800bf20 <usGetExtensionHeaderLength+0x150>)
 800be6c:	f016 fc9a 	bl	80227a4 <lUDPLoggingPrintf>
                    break;
 800be70:	e051      	b.n	800bf16 <usGetExtensionHeaderLength+0x146>
                }

                uxIndex = uxIndex + uxHopSize;
 800be72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be74:	69fb      	ldr	r3, [r7, #28]
 800be76:	4413      	add	r3, r2
 800be78:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( ( ucNextHeader == ipPROTOCOL_TCP ) ||
 800be7a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800be7e:	2b06      	cmp	r3, #6
 800be80:	d007      	beq.n	800be92 <usGetExtensionHeaderLength+0xc2>
 800be82:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800be86:	2b11      	cmp	r3, #17
 800be88:	d003      	beq.n	800be92 <usGetExtensionHeaderLength+0xc2>
                    ( ucNextHeader == ipPROTOCOL_UDP ) ||
 800be8a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800be8e:	2b3a      	cmp	r3, #58	@ 0x3a
 800be90:	d10d      	bne.n	800beae <usGetExtensionHeaderLength+0xde>
                    ( ucNextHeader == ipPROTOCOL_ICMP_IPv6 ) )
                {
                    FreeRTOS_debug_printf( ( "Stop at header %u\n", ucNextHeader ) );
 800be92:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800be96:	4619      	mov	r1, r3
 800be98:	4822      	ldr	r0, [pc, #136]	@ (800bf24 <usGetExtensionHeaderLength+0x154>)
 800be9a:	f016 fc83 	bl	80227a4 <lUDPLoggingPrintf>

                    uxReturn = uxIndex - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER );
 800be9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bea0:	3b36      	subs	r3, #54	@ 0x36
 800bea2:	627b      	str	r3, [r7, #36]	@ 0x24
                    *pucProtocol = ucNextHeader;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800beaa:	701a      	strb	r2, [r3, #0]
                    break;
 800beac:	e033      	b.n	800bf16 <usGetExtensionHeaderLength+0x146>
                }

                xNextOrder = xGetExtensionOrder( ucNextHeader, pucEthernetBuffer[ uxIndex ] );
 800beae:	68fa      	ldr	r2, [r7, #12]
 800beb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beb2:	4413      	add	r3, r2
 800beb4:	781a      	ldrb	r2, [r3, #0]
 800beb6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800beba:	4611      	mov	r1, r2
 800bebc:	4618      	mov	r0, r3
 800bebe:	f7ff fc5d 	bl	800b77c <xGetExtensionOrder>
 800bec2:	6178      	str	r0, [r7, #20]

                FreeRTOS_debug_printf( ( "Going from header %2u (%d) to %2u (%d)\n",
 800bec4:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800bec8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	9300      	str	r3, [sp, #0]
 800bed0:	4613      	mov	r3, r2
 800bed2:	69ba      	ldr	r2, [r7, #24]
 800bed4:	4814      	ldr	r0, [pc, #80]	@ (800bf28 <usGetExtensionHeaderLength+0x158>)
 800bed6:	f016 fc65 	bl	80227a4 <lUDPLoggingPrintf>
                 * any order and occurring any number of times in the same packet,
                 * except for the Hop-by-Hop Options header which is restricted to
                 * appear immediately after an IPv6 header only. Outlined
                 * by RFC 2460 section 4.1  Extension Header Order.
                 */
                if( xNextOrder == 1 ) /* ipIPv6_EXT_HEADER_HOP_BY_HOP */
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d103      	bne.n	800bee8 <usGetExtensionHeaderLength+0x118>
                {
                    FreeRTOS_printf( ( "Wrong order. Hop-by-Hop Options header restricted to appear immediately after an IPv6 header\n" ) );
 800bee0:	4812      	ldr	r0, [pc, #72]	@ (800bf2c <usGetExtensionHeaderLength+0x15c>)
 800bee2:	f016 fc5f 	bl	80227a4 <lUDPLoggingPrintf>
                    break;
 800bee6:	e016      	b.n	800bf16 <usGetExtensionHeaderLength+0x146>
                }
                else if( xNextOrder < 0 )
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	2b00      	cmp	r3, #0
 800beec:	da03      	bge.n	800bef6 <usGetExtensionHeaderLength+0x126>
                {
                    FreeRTOS_printf( ( "Invalid extension header detected\n" ) );
 800beee:	4810      	ldr	r0, [pc, #64]	@ (800bf30 <usGetExtensionHeaderLength+0x160>)
 800bef0:	f016 fc58 	bl	80227a4 <lUDPLoggingPrintf>
                    break;
 800bef4:	e00f      	b.n	800bf16 <usGetExtensionHeaderLength+0x146>
                else
                {
                    /* Do nothing, coverity happy. */
                }

                ucCurrentHeader = ucNextHeader;
 800bef6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800befa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            while( ( uxIndex + 8U ) < uxBufferLength )
 800befe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf00:	3308      	adds	r3, #8
 800bf02:	68ba      	ldr	r2, [r7, #8]
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d88e      	bhi.n	800be26 <usGetExtensionHeaderLength+0x56>
 800bf08:	e005      	b.n	800bf16 <usGetExtensionHeaderLength+0x146>
            }
        }
        else
        {
            /* No extension headers. */
            *pucProtocol = ucCurrentHeader;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800bf10:	701a      	strb	r2, [r3, #0]
            uxReturn = 0;
 800bf12:	2300      	movs	r3, #0
 800bf14:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    return uxReturn;
 800bf16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3730      	adds	r7, #48	@ 0x30
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	080257c4 	.word	0x080257c4
 800bf24:	0802580c 	.word	0x0802580c
 800bf28:	08025820 	.word	0x08025820
 800bf2c:	08025848 	.word	0x08025848
 800bf30:	080258a8 	.word	0x080258a8

0800bf34 <vManageSolicitedNodeAddress>:
 * @param[in] pxEndPoint The end-point for which a network up/down event is being handled.
 * @param[in] xNetworkGoingUp pdTRUE when the network goes UP, pdFALSE when the network goes DOWN.
 */
void vManageSolicitedNodeAddress( const struct xNetworkEndPoint * pxEndPoint,
                                  BaseType_t xNetworkGoingUp )
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
    IPv6_Type_t xAddressType;
    MACAddress_t xMACAddress;

    configASSERT( pxEndPoint != NULL );
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d104      	bne.n	800bf4e <vManageSolicitedNodeAddress+0x1a>
 800bf44:	f44f 7199 	mov.w	r1, #306	@ 0x132
 800bf48:	482d      	ldr	r0, [pc, #180]	@ (800c000 <vManageSolicitedNodeAddress+0xcc>)
 800bf4a:	f7f5 fd5d 	bl	8001a08 <vAssertCalled>
    configASSERT( pxEndPoint->pxNetworkInterface != NULL );
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d104      	bne.n	800bf62 <vManageSolicitedNodeAddress+0x2e>
 800bf58:	f240 1133 	movw	r1, #307	@ 0x133
 800bf5c:	4828      	ldr	r0, [pc, #160]	@ (800c000 <vManageSolicitedNodeAddress+0xcc>)
 800bf5e:	f7f5 fd53 	bl	8001a08 <vAssertCalled>
         * therefore the calculated MAC address will be incorrect. Nothing bad will happen though, because the address
         * type check below will kick us out before the call to pfRemoveAllowedMAC(). Without the check below, the network
         * driver ends up being called once to register 33:33:FF:00:00:00 and that MAC never gets unregistered. */

        /* Solicited-node multicast addresses only apply to normal unicast non-loopback addresses. */
        xAddressType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	3338      	adds	r3, #56	@ 0x38
 800bf66:	4618      	mov	r0, r3
 800bf68:	f002 f9c2 	bl	800e2f0 <xIPv6_GetIPType>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	73fb      	strb	r3, [r7, #15]

        if( ( xAddressType != eIPv6_LinkLocal ) && ( xAddressType != eIPv6_SiteLocal ) && ( xAddressType != eIPv6_Global ) )
 800bf70:	7bfb      	ldrb	r3, [r7, #15]
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d005      	beq.n	800bf82 <vManageSolicitedNodeAddress+0x4e>
 800bf76:	7bfb      	ldrb	r3, [r7, #15]
 800bf78:	2b02      	cmp	r3, #2
 800bf7a:	d002      	beq.n	800bf82 <vManageSolicitedNodeAddress+0x4e>
 800bf7c:	7bfb      	ldrb	r3, [r7, #15]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d138      	bne.n	800bff4 <vManageSolicitedNodeAddress+0xc0>
             * solicited-node multicast address that we need to manage. Do nothing.*/
            break;
        }

        /* Calculate the multicast MAC that corresponds to this endpoint's IPv6 address. */
        xMACAddress.ucBytes[ 0 ] = ipMULTICAST_MAC_ADDRESS_IPv6_0;
 800bf82:	2333      	movs	r3, #51	@ 0x33
 800bf84:	723b      	strb	r3, [r7, #8]
        xMACAddress.ucBytes[ 1 ] = ipMULTICAST_MAC_ADDRESS_IPv6_0;
 800bf86:	2333      	movs	r3, #51	@ 0x33
 800bf88:	727b      	strb	r3, [r7, #9]
        xMACAddress.ucBytes[ 2 ] = 0xFFU;
 800bf8a:	23ff      	movs	r3, #255	@ 0xff
 800bf8c:	72bb      	strb	r3, [r7, #10]
        xMACAddress.ucBytes[ 3 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 13 ];
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bf94:	72fb      	strb	r3, [r7, #11]
        xMACAddress.ucBytes[ 4 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 14 ];
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800bf9c:	733b      	strb	r3, [r7, #12]
        xMACAddress.ucBytes[ 5 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 15 ];
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800bfa4:	737b      	strb	r3, [r7, #13]

        /* Update the network driver filter */
        if( xNetworkGoingUp == pdTRUE )
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d111      	bne.n	800bfd0 <vManageSolicitedNodeAddress+0x9c>
        {
            if( pxEndPoint->pxNetworkInterface->pfAddAllowedMAC != NULL )
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800bfb2:	695b      	ldr	r3, [r3, #20]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d01e      	beq.n	800bff6 <vManageSolicitedNodeAddress+0xc2>
            {
                pxEndPoint->pxNetworkInterface->pfAddAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800bfbe:	695b      	ldr	r3, [r3, #20]
 800bfc0:	687a      	ldr	r2, [r7, #4]
 800bfc2:	f8d2 2120 	ldr.w	r2, [r2, #288]	@ 0x120
 800bfc6:	f107 0108 	add.w	r1, r7, #8
 800bfca:	4610      	mov	r0, r2
 800bfcc:	4798      	blx	r3
            {
                pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
            }
        }
    } while( pdFALSE );
}
 800bfce:	e012      	b.n	800bff6 <vManageSolicitedNodeAddress+0xc2>
            if( pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC != NULL )
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800bfd6:	699b      	ldr	r3, [r3, #24]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d00c      	beq.n	800bff6 <vManageSolicitedNodeAddress+0xc2>
                pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800bfe2:	699b      	ldr	r3, [r3, #24]
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	f8d2 2120 	ldr.w	r2, [r2, #288]	@ 0x120
 800bfea:	f107 0108 	add.w	r1, r7, #8
 800bfee:	4610      	mov	r0, r2
 800bff0:	4798      	blx	r3
}
 800bff2:	e000      	b.n	800bff6 <vManageSolicitedNodeAddress+0xc2>
            break;
 800bff4:	bf00      	nop
}
 800bff6:	bf00      	nop
 800bff8:	3710      	adds	r7, #16
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop
 800c000:	080258cc 	.word	0x080258cc

0800c004 <pxFindLocalEndpoint>:
 * @brief Find the first end-point of type IPv6.
 *
 * @return The first IPv6 end-point found.
 */
    static NetworkEndPoint_t * pxFindLocalEndpoint( void )
    {
 800c004:	b580      	push	{r7, lr}
 800c006:	b082      	sub	sp, #8
 800c008:	af00      	add	r7, sp, #0
        NetworkEndPoint_t * pxEndPoint;

        for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800c00a:	2000      	movs	r0, #0
 800c00c:	f001 fd8c 	bl	800db28 <FreeRTOS_FirstEndPoint>
 800c010:	6078      	str	r0, [r7, #4]
 800c012:	e016      	b.n	800c042 <pxFindLocalEndpoint+0x3e>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
        {
            if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c01a:	f003 0304 	and.w	r3, r3, #4
 800c01e:	b2db      	uxtb	r3, r3
 800c020:	2b00      	cmp	r3, #0
 800c022:	d009      	beq.n	800c038 <pxFindLocalEndpoint+0x34>
            {
                IPv6_Type_t eType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	3338      	adds	r3, #56	@ 0x38
 800c028:	4618      	mov	r0, r3
 800c02a:	f002 f961 	bl	800e2f0 <xIPv6_GetIPType>
 800c02e:	4603      	mov	r3, r0
 800c030:	70fb      	strb	r3, [r7, #3]

                if( eType == eIPv6_LinkLocal )
 800c032:	78fb      	ldrb	r3, [r7, #3]
 800c034:	2b01      	cmp	r3, #1
 800c036:	d008      	beq.n	800c04a <pxFindLocalEndpoint+0x46>
             pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 800c038:	6879      	ldr	r1, [r7, #4]
 800c03a:	2000      	movs	r0, #0
 800c03c:	f001 fd96 	bl	800db6c <FreeRTOS_NextEndPoint>
 800c040:	6078      	str	r0, [r7, #4]
             pxEndPoint != NULL;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d1e5      	bne.n	800c014 <pxFindLocalEndpoint+0x10>
 800c048:	e000      	b.n	800c04c <pxFindLocalEndpoint+0x48>
                {
                    break;
 800c04a:	bf00      	nop
                }
            }
        }

        return pxEndPoint;
 800c04c:	687b      	ldr	r3, [r7, #4]
    }
 800c04e:	4618      	mov	r0, r3
 800c050:	3708      	adds	r7, #8
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}

0800c056 <prvMACResolve>:
 * @return An enum, either eARPCacheHit or eARPCacheMiss.
 */
    static eARPLookupResult_t prvMACResolve( const IPv6_Address_t * pxAddressToLookup,
                                             MACAddress_t * const pxMACAddress,
                                             NetworkEndPoint_t ** ppxEndPoint )
    {
 800c056:	b580      	push	{r7, lr}
 800c058:	b086      	sub	sp, #24
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	60f8      	str	r0, [r7, #12]
 800c05e:	60b9      	str	r1, [r7, #8]
 800c060:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;

        /* Mostly used multi-cast address is ff02::. */
        if( xIsIPv6AllowedMulticast( pxAddressToLookup ) != pdFALSE )
 800c062:	68f8      	ldr	r0, [r7, #12]
 800c064:	f7ff faa8 	bl	800b5b8 <xIsIPv6AllowedMulticast>
 800c068:	4603      	mov	r3, r0
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d00e      	beq.n	800c08c <prvMACResolve+0x36>
        {
            vSetMultiCastIPv6MacAddress( pxAddressToLookup, pxMACAddress );
 800c06e:	68b9      	ldr	r1, [r7, #8]
 800c070:	68f8      	ldr	r0, [r7, #12]
 800c072:	f7ff fe8b 	bl	800bd8c <vSetMultiCastIPv6MacAddress>

            if( ppxEndPoint != NULL )
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d004      	beq.n	800c086 <prvMACResolve+0x30>
            {
                *ppxEndPoint = pxFindLocalEndpoint();
 800c07c:	f7ff ffc2 	bl	800c004 <pxFindLocalEndpoint>
 800c080:	4602      	mov	r2, r0
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	601a      	str	r2, [r3, #0]
            }

            eReturn = eARPCacheHit;
 800c086:	2301      	movs	r3, #1
 800c088:	75fb      	strb	r3, [r7, #23]
 800c08a:	e001      	b.n	800c090 <prvMACResolve+0x3a>
        }
        else
        {
            /* Not a multicast IP address. */
            eReturn = eARPCacheMiss;
 800c08c:	2300      	movs	r3, #0
 800c08e:	75fb      	strb	r3, [r7, #23]
        }

        return eReturn;
 800c090:	7dfb      	ldrb	r3, [r7, #23]
    }
 800c092:	4618      	mov	r0, r3
 800c094:	3718      	adds	r7, #24
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
	...

0800c09c <eNDGetCacheEntry>:
 * @return An enum which says whether the address was found: eARPCacheHit or eARPCacheMiss.
 */
    eARPLookupResult_t eNDGetCacheEntry( IPv6_Address_t * pxIPAddress,
                                         MACAddress_t * const pxMACAddress,
                                         struct xNetworkEndPoint ** ppxEndPoint )
    {
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b088      	sub	sp, #32
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	60f8      	str	r0, [r7, #12]
 800c0a4:	60b9      	str	r1, [r7, #8]
 800c0a6:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;
        NetworkEndPoint_t * pxEndPoint;

        /* Multi-cast addresses can be resolved immediately. */
        eReturn = prvMACResolve( pxIPAddress, pxMACAddress, ppxEndPoint );
 800c0a8:	687a      	ldr	r2, [r7, #4]
 800c0aa:	68b9      	ldr	r1, [r7, #8]
 800c0ac:	68f8      	ldr	r0, [r7, #12]
 800c0ae:	f7ff ffd2 	bl	800c056 <prvMACResolve>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	77fb      	strb	r3, [r7, #31]

        if( eReturn == eARPCacheMiss )
 800c0b6:	7ffb      	ldrb	r3, [r7, #31]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d106      	bne.n	800c0ca <eNDGetCacheEntry+0x2e>
        {
            /* See if the IP-address has an entry in the cache. */
            eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800c0bc:	687a      	ldr	r2, [r7, #4]
 800c0be:	68b9      	ldr	r1, [r7, #8]
 800c0c0:	68f8      	ldr	r0, [r7, #12]
 800c0c2:	f000 f9a9 	bl	800c418 <prvNDCacheLookup>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	77fb      	strb	r3, [r7, #31]
        }

        if( eReturn == eARPCacheMiss )
 800c0ca:	7ffb      	ldrb	r3, [r7, #31]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d104      	bne.n	800c0da <eNDGetCacheEntry+0x3e>
        {
            FreeRTOS_printf( ( "eNDGetCacheEntry: lookup %pip miss\n", ( void * ) pxIPAddress->ucBytes ) );
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	4619      	mov	r1, r3
 800c0d4:	4840      	ldr	r0, [pc, #256]	@ (800c1d8 <eNDGetCacheEntry+0x13c>)
 800c0d6:	f016 fb65 	bl	80227a4 <lUDPLoggingPrintf>
        }

        if( eReturn == eARPCacheMiss )
 800c0da:	7ffb      	ldrb	r3, [r7, #31]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d176      	bne.n	800c1ce <eNDGetCacheEntry+0x132>
        {
            IPv6_Type_t eIPType = xIPv6_GetIPType( pxIPAddress );
 800c0e0:	68f8      	ldr	r0, [r7, #12]
 800c0e2:	f002 f905 	bl	800e2f0 <xIPv6_GetIPType>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	75fb      	strb	r3, [r7, #23]

            pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv6( pxIPAddress );
 800c0ea:	68f8      	ldr	r0, [r7, #12]
 800c0ec:	f001 fdae 	bl	800dc4c <FreeRTOS_FindEndPointOnIP_IPv6>
 800c0f0:	61b8      	str	r0, [r7, #24]

            if( pxEndPoint != NULL )
 800c0f2:	69bb      	ldr	r3, [r7, #24]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d00d      	beq.n	800c114 <eNDGetCacheEntry+0x78>
            {
                if( ppxEndPoint != NULL )
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d002      	beq.n	800c104 <eNDGetCacheEntry+0x68>
                {
                    *( ppxEndPoint ) = pxEndPoint;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	69ba      	ldr	r2, [r7, #24]
 800c102:	601a      	str	r2, [r3, #0]
                }

                FreeRTOS_printf( ( "eNDGetCacheEntry: FindEndPointOnIP failed for %pip (endpoint %pip)\n",
 800c104:	68f9      	ldr	r1, [r7, #12]
 800c106:	69bb      	ldr	r3, [r7, #24]
 800c108:	3338      	adds	r3, #56	@ 0x38
 800c10a:	461a      	mov	r2, r3
 800c10c:	4833      	ldr	r0, [pc, #204]	@ (800c1dc <eNDGetCacheEntry+0x140>)
 800c10e:	f016 fb49 	bl	80227a4 <lUDPLoggingPrintf>
 800c112:	e05c      	b.n	800c1ce <eNDGetCacheEntry+0x132>
                                   ( void * ) pxIPAddress->ucBytes,
                                   ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
            }
            else
            {
                if( eIPType == eIPv6_LinkLocal )
 800c114:	7dfb      	ldrb	r3, [r7, #23]
 800c116:	2b01      	cmp	r3, #1
 800c118:	d12b      	bne.n	800c172 <eNDGetCacheEntry+0xd6>
                {
                    for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800c11a:	2000      	movs	r0, #0
 800c11c:	f001 fd04 	bl	800db28 <FreeRTOS_FirstEndPoint>
 800c120:	61b8      	str	r0, [r7, #24]
 800c122:	e017      	b.n	800c154 <eNDGetCacheEntry+0xb8>
                         pxEndPoint != NULL;
                         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
                    {
                        IPv6_Type_t eMyType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800c124:	69bb      	ldr	r3, [r7, #24]
 800c126:	3338      	adds	r3, #56	@ 0x38
 800c128:	4618      	mov	r0, r3
 800c12a:	f002 f8e1 	bl	800e2f0 <xIPv6_GetIPType>
 800c12e:	4603      	mov	r3, r0
 800c130:	75bb      	strb	r3, [r7, #22]

                        if( eMyType == eIPType )
 800c132:	7dba      	ldrb	r2, [r7, #22]
 800c134:	7dfb      	ldrb	r3, [r7, #23]
 800c136:	429a      	cmp	r2, r3
 800c138:	d107      	bne.n	800c14a <eNDGetCacheEntry+0xae>
                        {
                            eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	68b9      	ldr	r1, [r7, #8]
 800c13e:	68f8      	ldr	r0, [r7, #12]
 800c140:	f000 f96a 	bl	800c418 <prvNDCacheLookup>
 800c144:	4603      	mov	r3, r0
 800c146:	77fb      	strb	r3, [r7, #31]
                            break;
 800c148:	e007      	b.n	800c15a <eNDGetCacheEntry+0xbe>
                         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 800c14a:	69b9      	ldr	r1, [r7, #24]
 800c14c:	2000      	movs	r0, #0
 800c14e:	f001 fd0d 	bl	800db6c <FreeRTOS_NextEndPoint>
 800c152:	61b8      	str	r0, [r7, #24]
                         pxEndPoint != NULL;
 800c154:	69bb      	ldr	r3, [r7, #24]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d1e4      	bne.n	800c124 <eNDGetCacheEntry+0x88>
                        }
                    }

                    FreeRTOS_printf( ( "eNDGetCacheEntry: LinkLocal %pip \"%s\"\n", ( void * ) pxIPAddress->ucBytes,
 800c15a:	68f9      	ldr	r1, [r7, #12]
 800c15c:	7ffb      	ldrb	r3, [r7, #31]
 800c15e:	2b01      	cmp	r3, #1
 800c160:	d101      	bne.n	800c166 <eNDGetCacheEntry+0xca>
 800c162:	4b1f      	ldr	r3, [pc, #124]	@ (800c1e0 <eNDGetCacheEntry+0x144>)
 800c164:	e000      	b.n	800c168 <eNDGetCacheEntry+0xcc>
 800c166:	4b1f      	ldr	r3, [pc, #124]	@ (800c1e4 <eNDGetCacheEntry+0x148>)
 800c168:	461a      	mov	r2, r3
 800c16a:	481f      	ldr	r0, [pc, #124]	@ (800c1e8 <eNDGetCacheEntry+0x14c>)
 800c16c:	f016 fb1a 	bl	80227a4 <lUDPLoggingPrintf>
 800c170:	e02d      	b.n	800c1ce <eNDGetCacheEntry+0x132>
                                       ( eReturn == eARPCacheHit ) ? "hit" : "miss" ) );
                }
                else
                {
                    pxEndPoint = FreeRTOS_FindGateWay( ( BaseType_t ) ipTYPE_IPv6 );
 800c172:	2060      	movs	r0, #96	@ 0x60
 800c174:	f002 f87c 	bl	800e270 <FreeRTOS_FindGateWay>
 800c178:	61b8      	str	r0, [r7, #24]

                    if( pxEndPoint != NULL )
 800c17a:	69bb      	ldr	r3, [r7, #24]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d026      	beq.n	800c1ce <eNDGetCacheEntry+0x132>
                    {
                        ( void ) memcpy( pxIPAddress->ucBytes, pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c180:	68f8      	ldr	r0, [r7, #12]
 800c182:	69bb      	ldr	r3, [r7, #24]
 800c184:	335c      	adds	r3, #92	@ 0x5c
 800c186:	2210      	movs	r2, #16
 800c188:	4619      	mov	r1, r3
 800c18a:	f016 fd27 	bl	8022bdc <memcpy>
                        FreeRTOS_printf( ( "eNDGetCacheEntry: Using gw %pip\n", ( void * ) pxIPAddress->ucBytes ) );
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	4619      	mov	r1, r3
 800c192:	4816      	ldr	r0, [pc, #88]	@ (800c1ec <eNDGetCacheEntry+0x150>)
 800c194:	f016 fb06 	bl	80227a4 <lUDPLoggingPrintf>
                        FreeRTOS_printf( ( "eNDGetCacheEntry: From addr %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800c198:	69bb      	ldr	r3, [r7, #24]
 800c19a:	3338      	adds	r3, #56	@ 0x38
 800c19c:	4619      	mov	r1, r3
 800c19e:	4814      	ldr	r0, [pc, #80]	@ (800c1f0 <eNDGetCacheEntry+0x154>)
 800c1a0:	f016 fb00 	bl	80227a4 <lUDPLoggingPrintf>

                        /* See if the gateway has an entry in the cache. */
                        eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800c1a4:	687a      	ldr	r2, [r7, #4]
 800c1a6:	68b9      	ldr	r1, [r7, #8]
 800c1a8:	68f8      	ldr	r0, [r7, #12]
 800c1aa:	f000 f935 	bl	800c418 <prvNDCacheLookup>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	77fb      	strb	r3, [r7, #31]

                        if( *ppxEndPoint != NULL )
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d006      	beq.n	800c1c8 <eNDGetCacheEntry+0x12c>
                        {
                            FreeRTOS_printf( ( "eNDGetCacheEntry: found end-point %pip\n", ( void * ) ( *ppxEndPoint )->ipv6_settings.xIPAddress.ucBytes ) );
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	3338      	adds	r3, #56	@ 0x38
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	480c      	ldr	r0, [pc, #48]	@ (800c1f4 <eNDGetCacheEntry+0x158>)
 800c1c4:	f016 faee 	bl	80227a4 <lUDPLoggingPrintf>
                        }

                        *( ppxEndPoint ) = pxEndPoint;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	69ba      	ldr	r2, [r7, #24]
 800c1cc:	601a      	str	r2, [r3, #0]
                    }
                }
            }
        }

        return eReturn;
 800c1ce:	7ffb      	ldrb	r3, [r7, #31]
    }
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3720      	adds	r7, #32
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}
 800c1d8:	08025900 	.word	0x08025900
 800c1dc:	08025924 	.word	0x08025924
 800c1e0:	08025968 	.word	0x08025968
 800c1e4:	0802596c 	.word	0x0802596c
 800c1e8:	08025974 	.word	0x08025974
 800c1ec:	0802599c 	.word	0x0802599c
 800c1f0:	080259c0 	.word	0x080259c0
 800c1f4:	080259e4 	.word	0x080259e4

0800c1f8 <vNDRefreshCacheEntry>:
 *
 */
    void vNDRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                               const IPv6_Address_t * pxIPAddress,
                               NetworkEndPoint_t * pxEndPoint )
    {
 800c1f8:	b5b0      	push	{r4, r5, r7, lr}
 800c1fa:	b08e      	sub	sp, #56	@ 0x38
 800c1fc:	af04      	add	r7, sp, #16
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	60b9      	str	r1, [r7, #8]
 800c202:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        BaseType_t xFreeEntry = -1, xEntryFound = -1;
 800c204:	f04f 33ff 	mov.w	r3, #4294967295
 800c208:	623b      	str	r3, [r7, #32]
 800c20a:	f04f 33ff 	mov.w	r3, #4294967295
 800c20e:	61fb      	str	r3, [r7, #28]
        uint16_t xOldestValue = ipconfigMAX_ARP_AGE + 1;
 800c210:	2397      	movs	r3, #151	@ 0x97
 800c212:	837b      	strh	r3, [r7, #26]
        BaseType_t xOldestEntry = 0;
 800c214:	2300      	movs	r3, #0
 800c216:	617b      	str	r3, [r7, #20]

        /* For each entry in the ND cache table. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800c218:	2300      	movs	r3, #0
 800c21a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c21c:	e033      	b.n	800c286 <vNDRefreshCacheEntry+0x8e>
        {
            if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800c21e:	4a44      	ldr	r2, [pc, #272]	@ (800c330 <vNDRefreshCacheEntry+0x138>)
 800c220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c222:	015b      	lsls	r3, r3, #5
 800c224:	4413      	add	r3, r2
 800c226:	331d      	adds	r3, #29
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d106      	bne.n	800c23c <vNDRefreshCacheEntry+0x44>
            {
                if( xFreeEntry == -1 )
 800c22e:	6a3b      	ldr	r3, [r7, #32]
 800c230:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c234:	d124      	bne.n	800c280 <vNDRefreshCacheEntry+0x88>
                {
                    xFreeEntry = x;
 800c236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c238:	623b      	str	r3, [r7, #32]
 800c23a:	e021      	b.n	800c280 <vNDRefreshCacheEntry+0x88>
                }
            }
            else if( memcmp( xNDCache[ x ].xIPAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800c23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c23e:	015b      	lsls	r3, r3, #5
 800c240:	4a3b      	ldr	r2, [pc, #236]	@ (800c330 <vNDRefreshCacheEntry+0x138>)
 800c242:	4413      	add	r3, r2
 800c244:	68b9      	ldr	r1, [r7, #8]
 800c246:	2210      	movs	r2, #16
 800c248:	4618      	mov	r0, r3
 800c24a:	f017 fc5c 	bl	8023b06 <memcmp>
 800c24e:	4603      	mov	r3, r0
 800c250:	2b00      	cmp	r3, #0
 800c252:	d102      	bne.n	800c25a <vNDRefreshCacheEntry+0x62>
            {
                xEntryFound = x;
 800c254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c256:	61fb      	str	r3, [r7, #28]
                break;
 800c258:	e018      	b.n	800c28c <vNDRefreshCacheEntry+0x94>
                 * neighbor advertisement needed for that packet. If we don't store this network advertisement in cache,
                 * the parting of the frame from pxARPWaitingNetworkBuffer will cause the sending of neighbor solicitation
                 * and stores the frame in pxARPWaitingNetworkBuffer. This becomes a vicious circle with thousands of
                 * neighbor solicitation/advertisement packets going back and forth because the ND cache is full.
                 * Overwriting the oldest cache entry is not a fool-proof solution, but it's something. */
                if( xNDCache[ x ].ucAge < xOldestValue )
 800c25a:	4a35      	ldr	r2, [pc, #212]	@ (800c330 <vNDRefreshCacheEntry+0x138>)
 800c25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c25e:	015b      	lsls	r3, r3, #5
 800c260:	4413      	add	r3, r2
 800c262:	331c      	adds	r3, #28
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	461a      	mov	r2, r3
 800c268:	8b7b      	ldrh	r3, [r7, #26]
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d908      	bls.n	800c280 <vNDRefreshCacheEntry+0x88>
                {
                    xOldestValue = xNDCache[ x ].ucAge;
 800c26e:	4a30      	ldr	r2, [pc, #192]	@ (800c330 <vNDRefreshCacheEntry+0x138>)
 800c270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c272:	015b      	lsls	r3, r3, #5
 800c274:	4413      	add	r3, r2
 800c276:	331c      	adds	r3, #28
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	837b      	strh	r3, [r7, #26]
                    xOldestEntry = x;
 800c27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c27e:	617b      	str	r3, [r7, #20]
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800c280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c282:	3301      	adds	r3, #1
 800c284:	627b      	str	r3, [r7, #36]	@ 0x24
 800c286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c288:	2b17      	cmp	r3, #23
 800c28a:	ddc8      	ble.n	800c21e <vNDRefreshCacheEntry+0x26>
                }
            }
        }

        if( xEntryFound < 0 )
 800c28c:	69fb      	ldr	r3, [r7, #28]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	da22      	bge.n	800c2d8 <vNDRefreshCacheEntry+0xe0>
        {
            /* The IP-address was not found, use the first free location. */
            if( xFreeEntry >= 0 )
 800c292:	6a3b      	ldr	r3, [r7, #32]
 800c294:	2b00      	cmp	r3, #0
 800c296:	db02      	blt.n	800c29e <vNDRefreshCacheEntry+0xa6>
            {
                xEntryFound = xFreeEntry;
 800c298:	6a3b      	ldr	r3, [r7, #32]
 800c29a:	61fb      	str	r3, [r7, #28]
 800c29c:	e01c      	b.n	800c2d8 <vNDRefreshCacheEntry+0xe0>
            }
            else
            {
                /* No free location. Overwrite the oldest. */
                xEntryFound = xOldestEntry;
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	61fb      	str	r3, [r7, #28]
                FreeRTOS_printf( ( "vNDRefreshCacheEntry: Cache FULL! Overwriting oldest entry %i with %02X-%02X-%02X-%02X-%02X-%02X\n", ( int ) xEntryFound, pxMACAddress->ucBytes[ 0 ], pxMACAddress->ucBytes[ 1 ], pxMACAddress->ucBytes[ 2 ], pxMACAddress->ucBytes[ 3 ], pxMACAddress->ucBytes[ 4 ], pxMACAddress->ucBytes[ 5 ] ) );
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	781b      	ldrb	r3, [r3, #0]
 800c2a6:	461c      	mov	r4, r3
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	785b      	ldrb	r3, [r3, #1]
 800c2ac:	461d      	mov	r5, r3
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	789b      	ldrb	r3, [r3, #2]
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	78db      	ldrb	r3, [r3, #3]
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	791b      	ldrb	r3, [r3, #4]
 800c2be:	4618      	mov	r0, r3
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	795b      	ldrb	r3, [r3, #5]
 800c2c4:	9303      	str	r3, [sp, #12]
 800c2c6:	9002      	str	r0, [sp, #8]
 800c2c8:	9101      	str	r1, [sp, #4]
 800c2ca:	9200      	str	r2, [sp, #0]
 800c2cc:	462b      	mov	r3, r5
 800c2ce:	4622      	mov	r2, r4
 800c2d0:	69f9      	ldr	r1, [r7, #28]
 800c2d2:	4818      	ldr	r0, [pc, #96]	@ (800c334 <vNDRefreshCacheEntry+0x13c>)
 800c2d4:	f016 fa66 	bl	80227a4 <lUDPLoggingPrintf>
            }
        }

        /* At this point, xEntryFound is always a valid index. */
        /* Copy the IP-address. */
        ( void ) memcpy( xNDCache[ xEntryFound ].xIPAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c2d8:	69fb      	ldr	r3, [r7, #28]
 800c2da:	015b      	lsls	r3, r3, #5
 800c2dc:	4a14      	ldr	r2, [pc, #80]	@ (800c330 <vNDRefreshCacheEntry+0x138>)
 800c2de:	4413      	add	r3, r2
 800c2e0:	68b9      	ldr	r1, [r7, #8]
 800c2e2:	2210      	movs	r2, #16
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f016 fc79 	bl	8022bdc <memcpy>
        /* Copy the MAC-address. */
        ( void ) memcpy( xNDCache[ xEntryFound ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( MACAddress_t ) );
 800c2ea:	69fb      	ldr	r3, [r7, #28]
 800c2ec:	015b      	lsls	r3, r3, #5
 800c2ee:	3310      	adds	r3, #16
 800c2f0:	4a0f      	ldr	r2, [pc, #60]	@ (800c330 <vNDRefreshCacheEntry+0x138>)
 800c2f2:	4413      	add	r3, r2
 800c2f4:	68f9      	ldr	r1, [r7, #12]
 800c2f6:	2206      	movs	r2, #6
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f016 fc6f 	bl	8022bdc <memcpy>
        xNDCache[ xEntryFound ].pxEndPoint = pxEndPoint;
 800c2fe:	4a0c      	ldr	r2, [pc, #48]	@ (800c330 <vNDRefreshCacheEntry+0x138>)
 800c300:	69fb      	ldr	r3, [r7, #28]
 800c302:	015b      	lsls	r3, r3, #5
 800c304:	4413      	add	r3, r2
 800c306:	3318      	adds	r3, #24
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	601a      	str	r2, [r3, #0]
        xNDCache[ xEntryFound ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 800c30c:	4a08      	ldr	r2, [pc, #32]	@ (800c330 <vNDRefreshCacheEntry+0x138>)
 800c30e:	69fb      	ldr	r3, [r7, #28]
 800c310:	015b      	lsls	r3, r3, #5
 800c312:	4413      	add	r3, r2
 800c314:	331c      	adds	r3, #28
 800c316:	2296      	movs	r2, #150	@ 0x96
 800c318:	701a      	strb	r2, [r3, #0]
        xNDCache[ xEntryFound ].ucValid = ( uint8_t ) pdTRUE;
 800c31a:	4a05      	ldr	r2, [pc, #20]	@ (800c330 <vNDRefreshCacheEntry+0x138>)
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	015b      	lsls	r3, r3, #5
 800c320:	4413      	add	r3, r2
 800c322:	331d      	adds	r3, #29
 800c324:	2201      	movs	r2, #1
 800c326:	701a      	strb	r2, [r3, #0]
    }
 800c328:	bf00      	nop
 800c32a:	3728      	adds	r7, #40	@ 0x28
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bdb0      	pop	{r4, r5, r7, pc}
 800c330:	20001228 	.word	0x20001228
 800c334:	08025a0c 	.word	0x08025a0c

0800c338 <vNDAgeCache>:
 * @brief Reduce the age counter in each entry within the ND cache.  An entry is no
 * longer considered valid and is deleted if its age reaches zero.
 * Just before getting to zero, 3 times a neighbour solicitation will be sent.
 */
    void vNDAgeCache( void )
    {
 800c338:	b580      	push	{r7, lr}
 800c33a:	b084      	sub	sp, #16
 800c33c:	af00      	add	r7, sp, #0
        BaseType_t x;

        /* Loop through each entry in the ND cache. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800c33e:	2300      	movs	r3, #0
 800c340:	60fb      	str	r3, [r7, #12]
 800c342:	e05f      	b.n	800c404 <vNDAgeCache+0xcc>
        {
            BaseType_t xDoSolicitate = pdFALSE;
 800c344:	2300      	movs	r3, #0
 800c346:	60bb      	str	r3, [r7, #8]

            /* If the entry is valid (its age is greater than zero). */
            if( xNDCache[ x ].ucAge > 0U )
 800c348:	4a32      	ldr	r2, [pc, #200]	@ (800c414 <vNDAgeCache+0xdc>)
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	015b      	lsls	r3, r3, #5
 800c34e:	4413      	add	r3, r2
 800c350:	331c      	adds	r3, #28
 800c352:	781b      	ldrb	r3, [r3, #0]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d052      	beq.n	800c3fe <vNDAgeCache+0xc6>
            {
                /* Decrement the age value of the entry in this ND cache table row.
                 * When the age reaches zero it is no longer considered valid. */
                ( xNDCache[ x ].ucAge )--;
 800c358:	4a2e      	ldr	r2, [pc, #184]	@ (800c414 <vNDAgeCache+0xdc>)
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	015b      	lsls	r3, r3, #5
 800c35e:	4413      	add	r3, r2
 800c360:	331c      	adds	r3, #28
 800c362:	781b      	ldrb	r3, [r3, #0]
 800c364:	3b01      	subs	r3, #1
 800c366:	b2d9      	uxtb	r1, r3
 800c368:	4a2a      	ldr	r2, [pc, #168]	@ (800c414 <vNDAgeCache+0xdc>)
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	015b      	lsls	r3, r3, #5
 800c36e:	4413      	add	r3, r2
 800c370:	331c      	adds	r3, #28
 800c372:	460a      	mov	r2, r1
 800c374:	701a      	strb	r2, [r3, #0]

                if( xNDCache[ x ].ucAge == 0U )
 800c376:	4a27      	ldr	r2, [pc, #156]	@ (800c414 <vNDAgeCache+0xdc>)
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	015b      	lsls	r3, r3, #5
 800c37c:	4413      	add	r3, r2
 800c37e:	331c      	adds	r3, #28
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d109      	bne.n	800c39a <vNDAgeCache+0x62>
                {
                    /* The entry is no longer valid.  Wipe it out. */
                    iptraceND_TABLE_ENTRY_EXPIRED( xNDCache[ x ].xIPAddress );
                    ( void ) memset( &( xNDCache[ x ] ), 0, sizeof( xNDCache[ x ] ) );
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	015b      	lsls	r3, r3, #5
 800c38a:	4a22      	ldr	r2, [pc, #136]	@ (800c414 <vNDAgeCache+0xdc>)
 800c38c:	4413      	add	r3, r2
 800c38e:	2220      	movs	r2, #32
 800c390:	2100      	movs	r1, #0
 800c392:	4618      	mov	r0, r3
 800c394:	f016 fd2f 	bl	8022df6 <memset>
 800c398:	e031      	b.n	800c3fe <vNDAgeCache+0xc6>
                }
                else
                {
                    /* If the entry is not yet valid, then it is waiting an ND
                     * advertisement, and the ND solicitation should be retransmitted. */
                    if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800c39a:	4a1e      	ldr	r2, [pc, #120]	@ (800c414 <vNDAgeCache+0xdc>)
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	015b      	lsls	r3, r3, #5
 800c3a0:	4413      	add	r3, r2
 800c3a2:	331d      	adds	r3, #29
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d102      	bne.n	800c3b0 <vNDAgeCache+0x78>
                    {
                        xDoSolicitate = pdTRUE;
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	60bb      	str	r3, [r7, #8]
 800c3ae:	e009      	b.n	800c3c4 <vNDAgeCache+0x8c>
                    }
                    else if( xNDCache[ x ].ucAge <= ( uint8_t ) ndMAX_CACHE_AGE_BEFORE_NEW_ND_SOLICITATION )
 800c3b0:	4a18      	ldr	r2, [pc, #96]	@ (800c414 <vNDAgeCache+0xdc>)
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	015b      	lsls	r3, r3, #5
 800c3b6:	4413      	add	r3, r2
 800c3b8:	331c      	adds	r3, #28
 800c3ba:	781b      	ldrb	r3, [r3, #0]
 800c3bc:	2b03      	cmp	r3, #3
 800c3be:	d801      	bhi.n	800c3c4 <vNDAgeCache+0x8c>
                    {
                        /* This entry will get removed soon.  See if the MAC address is
                         * still valid to prevent this happening. */
                        iptraceND_TABLE_ENTRY_WILL_EXPIRE( xNDCache[ x ].xIPAddress );
                        xDoSolicitate = pdTRUE;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	60bb      	str	r3, [r7, #8]
                    else
                    {
                        /* The age has just ticked down, with nothing to do. */
                    }

                    if( xDoSolicitate != pdFALSE )
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d019      	beq.n	800c3fe <vNDAgeCache+0xc6>
                    {
                        size_t uxNeededSize;
                        NetworkBufferDescriptor_t * pxNetworkBuffer;

                        uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800c3ca:	2356      	movs	r3, #86	@ 0x56
 800c3cc:	607b      	str	r3, [r7, #4]
                        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, 0U );
 800c3ce:	2100      	movs	r1, #0
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f00b fad7 	bl	8017984 <pxGetNetworkBufferWithDescriptor>
 800c3d6:	6038      	str	r0, [r7, #0]

                        if( pxNetworkBuffer != NULL )
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d00f      	beq.n	800c3fe <vNDAgeCache+0xc6>
                        {
                            pxNetworkBuffer->pxEndPoint = xNDCache[ x ].pxEndPoint;
 800c3de:	4a0d      	ldr	r2, [pc, #52]	@ (800c414 <vNDAgeCache+0xdc>)
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	015b      	lsls	r3, r3, #5
 800c3e4:	4413      	add	r3, r2
 800c3e6:	3318      	adds	r3, #24
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	631a      	str	r2, [r3, #48]	@ 0x30
                            /* _HT_ From here I am suspecting a network buffer leak */
                            vNDSendNeighbourSolicitation( pxNetworkBuffer, &( xNDCache[ x ].xIPAddress ) );
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	015b      	lsls	r3, r3, #5
 800c3f2:	4a08      	ldr	r2, [pc, #32]	@ (800c414 <vNDAgeCache+0xdc>)
 800c3f4:	4413      	add	r3, r2
 800c3f6:	4619      	mov	r1, r3
 800c3f8:	6838      	ldr	r0, [r7, #0]
 800c3fa:	f000 f8bb 	bl	800c574 <vNDSendNeighbourSolicitation>
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	3301      	adds	r3, #1
 800c402:	60fb      	str	r3, [r7, #12]
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	2b17      	cmp	r3, #23
 800c408:	dd9c      	ble.n	800c344 <vNDAgeCache+0xc>
                        }
                    }
                }
            }
        }
    }
 800c40a:	bf00      	nop
 800c40c:	bf00      	nop
 800c40e:	3710      	adds	r7, #16
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}
 800c414:	20001228 	.word	0x20001228

0800c418 <prvNDCacheLookup>:
 * @return An enum: either eARPCacheHit or eARPCacheMiss.
 */
    static eARPLookupResult_t prvNDCacheLookup( const IPv6_Address_t * pxAddressToLookup,
                                                MACAddress_t * const pxMACAddress,
                                                NetworkEndPoint_t ** ppxEndPoint )
    {
 800c418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c41a:	b08d      	sub	sp, #52	@ 0x34
 800c41c:	af06      	add	r7, sp, #24
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	60b9      	str	r1, [r7, #8]
 800c422:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        eARPLookupResult_t eReturn = eARPCacheMiss;
 800c424:	2300      	movs	r3, #0
 800c426:	74fb      	strb	r3, [r7, #19]

        /* For each entry in the ND cache table. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800c428:	2300      	movs	r3, #0
 800c42a:	617b      	str	r3, [r7, #20]
 800c42c:	e04a      	b.n	800c4c4 <prvNDCacheLookup+0xac>
        {
            if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800c42e:	4a30      	ldr	r2, [pc, #192]	@ (800c4f0 <prvNDCacheLookup+0xd8>)
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	015b      	lsls	r3, r3, #5
 800c434:	4413      	add	r3, r2
 800c436:	331d      	adds	r3, #29
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d03f      	beq.n	800c4be <prvNDCacheLookup+0xa6>
            {
                /* Skip invalid entries. */
            }
            else if( memcmp( xNDCache[ x ].xIPAddress.ucBytes, pxAddressToLookup->ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	015b      	lsls	r3, r3, #5
 800c442:	4a2b      	ldr	r2, [pc, #172]	@ (800c4f0 <prvNDCacheLookup+0xd8>)
 800c444:	4413      	add	r3, r2
 800c446:	68f9      	ldr	r1, [r7, #12]
 800c448:	2210      	movs	r2, #16
 800c44a:	4618      	mov	r0, r3
 800c44c:	f017 fb5b 	bl	8023b06 <memcmp>
 800c450:	4603      	mov	r3, r0
 800c452:	2b00      	cmp	r3, #0
 800c454:	d133      	bne.n	800c4be <prvNDCacheLookup+0xa6>
            {
                ( void ) memcpy( pxMACAddress->ucBytes, xNDCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800c456:	68b8      	ldr	r0, [r7, #8]
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	015b      	lsls	r3, r3, #5
 800c45c:	3310      	adds	r3, #16
 800c45e:	4a24      	ldr	r2, [pc, #144]	@ (800c4f0 <prvNDCacheLookup+0xd8>)
 800c460:	4413      	add	r3, r2
 800c462:	2206      	movs	r2, #6
 800c464:	4619      	mov	r1, r3
 800c466:	f016 fbb9 	bl	8022bdc <memcpy>
                eReturn = eARPCacheHit;
 800c46a:	2301      	movs	r3, #1
 800c46c:	74fb      	strb	r3, [r7, #19]

                if( ppxEndPoint != NULL )
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d007      	beq.n	800c484 <prvNDCacheLookup+0x6c>
                {
                    *ppxEndPoint = xNDCache[ x ].pxEndPoint;
 800c474:	4a1e      	ldr	r2, [pc, #120]	@ (800c4f0 <prvNDCacheLookup+0xd8>)
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	015b      	lsls	r3, r3, #5
 800c47a:	4413      	add	r3, r2
 800c47c:	3318      	adds	r3, #24
 800c47e:	681a      	ldr	r2, [r3, #0]
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	601a      	str	r2, [r3, #0]
                }

                FreeRTOS_debug_printf( ( "prvCacheLookup6[ %d ] %pip with %02x:%02x:%02x:%02x:%02x:%02x\n",
 800c484:	68fa      	ldr	r2, [r7, #12]
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	461e      	mov	r6, r3
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	785b      	ldrb	r3, [r3, #1]
 800c490:	4619      	mov	r1, r3
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	789b      	ldrb	r3, [r3, #2]
 800c496:	4618      	mov	r0, r3
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	78db      	ldrb	r3, [r3, #3]
 800c49c:	461c      	mov	r4, r3
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	791b      	ldrb	r3, [r3, #4]
 800c4a2:	461d      	mov	r5, r3
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	795b      	ldrb	r3, [r3, #5]
 800c4a8:	9304      	str	r3, [sp, #16]
 800c4aa:	9503      	str	r5, [sp, #12]
 800c4ac:	9402      	str	r4, [sp, #8]
 800c4ae:	9001      	str	r0, [sp, #4]
 800c4b0:	9100      	str	r1, [sp, #0]
 800c4b2:	4633      	mov	r3, r6
 800c4b4:	6979      	ldr	r1, [r7, #20]
 800c4b6:	480f      	ldr	r0, [pc, #60]	@ (800c4f4 <prvNDCacheLookup+0xdc>)
 800c4b8:	f016 f974 	bl	80227a4 <lUDPLoggingPrintf>
                                         pxMACAddress->ucBytes[ 1 ],
                                         pxMACAddress->ucBytes[ 2 ],
                                         pxMACAddress->ucBytes[ 3 ],
                                         pxMACAddress->ucBytes[ 4 ],
                                         pxMACAddress->ucBytes[ 5 ] ) );
                break;
 800c4bc:	e005      	b.n	800c4ca <prvNDCacheLookup+0xb2>
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	3301      	adds	r3, #1
 800c4c2:	617b      	str	r3, [r7, #20]
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	2b17      	cmp	r3, #23
 800c4c8:	ddb1      	ble.n	800c42e <prvNDCacheLookup+0x16>
            {
                /* Entry is valid but the MAC-address doesn't match. */
            }
        }

        if( eReturn == eARPCacheMiss )
 800c4ca:	7cfb      	ldrb	r3, [r7, #19]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d10a      	bne.n	800c4e6 <prvNDCacheLookup+0xce>
        {
            FreeRTOS_printf( ( "prvNDCacheLookup %pip Miss\n", ( void * ) pxAddressToLookup->ucBytes ) );
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	4808      	ldr	r0, [pc, #32]	@ (800c4f8 <prvNDCacheLookup+0xe0>)
 800c4d6:	f016 f965 	bl	80227a4 <lUDPLoggingPrintf>

            if( ppxEndPoint != NULL )
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d002      	beq.n	800c4e6 <prvNDCacheLookup+0xce>
            {
                *ppxEndPoint = NULL;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	601a      	str	r2, [r3, #0]
            }
        }

        return eReturn;
 800c4e6:	7cfb      	ldrb	r3, [r7, #19]
    }
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	371c      	adds	r7, #28
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4f0:	20001228 	.word	0x20001228
 800c4f4:	08025a70 	.word	0x08025a70
 800c4f8:	08025ab0 	.word	0x08025ab0

0800c4fc <prvReturnICMP_IPv6>:
 * @param[in] pxNetworkBuffer The Ethernet packet.
 * @param[in] uxICMPSize The number of bytes to be sent.
 */
    static void prvReturnICMP_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                    size_t uxICMPSize )
    {
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b084      	sub	sp, #16
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	6039      	str	r1, [r7, #0]
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c50a:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPPacket_IPv6_t * pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c510:	60bb      	str	r3, [r7, #8]

        ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	3316      	adds	r3, #22
 800c51c:	2210      	movs	r2, #16
 800c51e:	4619      	mov	r1, r3
 800c520:	f016 fb5c 	bl	8022bdc <memcpy>
        ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	f103 0016 	add.w	r0, r3, #22
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	3338      	adds	r3, #56	@ 0x38
 800c52e:	2210      	movs	r2, #16
 800c530:	4619      	mov	r1, r3
 800c532:	f016 fb53 	bl	8022bdc <memcpy>
        pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( uxICMPSize );
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	b29b      	uxth	r3, r3
 800c53a:	021b      	lsls	r3, r3, #8
 800c53c:	b29a      	uxth	r2, r3
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	0a1b      	lsrs	r3, r3, #8
 800c542:	b29b      	uxth	r3, r3
 800c544:	4313      	orrs	r3, r2
 800c546:	b29a      	uxth	r2, r3
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	825a      	strh	r2, [r3, #18]

        /* Important: tell NIC driver how many bytes must be sent */
        pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	629a      	str	r2, [r3, #40]	@ 0x28
        }
        #else
        {
            /* Many EMAC peripherals will only calculate the ICMP checksum
             * correctly if the field is nulled beforehand. */
            pxICMPPacket->xICMPHeaderIPv6.usChecksum = 0;
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	2200      	movs	r2, #0
 800c55a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800c55e:	2200      	movs	r2, #0
 800c560:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        }
        #endif

        /* This function will fill in the Ethernet addresses and send the packet */
        vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 800c564:	2100      	movs	r1, #0
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f7fd fe46 	bl	800a1f8 <vReturnEthernetFrame>
    }
 800c56c:	bf00      	nop
 800c56e:	3710      	adds	r7, #16
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}

0800c574 <vNDSendNeighbourSolicitation>:
 * outstanding so re-transmissions can be generated.
 */

    void vNDSendNeighbourSolicitation( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                       const IPv6_Address_t * pxIPAddress )
    {
 800c574:	b5b0      	push	{r4, r5, r7, lr}
 800c576:	b090      	sub	sp, #64	@ 0x40
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
 800c57c:	6039      	str	r1, [r7, #0]
        ICMPPacket_IPv6_t * pxICMPPacket;
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6;
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c582:	637b      	str	r3, [r7, #52]	@ 0x34
        size_t uxNeededSize;
        IPv6_Address_t xTargetIPAddress;
        MACAddress_t xMultiCastMacAddress;
        NetworkBufferDescriptor_t * pxDescriptor = pxNetworkBuffer;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 800c588:	2300      	movs	r3, #0
 800c58a:	633b      	str	r3, [r7, #48]	@ 0x30
        BaseType_t xReleased = pdFALSE;
 800c58c:	2300      	movs	r3, #0
 800c58e:	63bb      	str	r3, [r7, #56]	@ 0x38

        if( ( pxEndPoint != NULL ) && ( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) )
 800c590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c592:	2b00      	cmp	r3, #0
 800c594:	f000 80c1 	beq.w	800c71a <vNDSendNeighbourSolicitation+0x1a6>
 800c598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c59a:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c59e:	f003 0304 	and.w	r3, r3, #4
 800c5a2:	b2db      	uxtb	r3, r3
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	f000 80b8 	beq.w	800c71a <vNDSendNeighbourSolicitation+0x1a6>
        {
            uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800c5aa:	2356      	movs	r3, #86	@ 0x56
 800c5ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if( pxDescriptor->xDataLength < uxNeededSize )
 800c5ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d909      	bls.n	800c5cc <vNDSendNeighbourSolicitation+0x58>
            {
                pxNewDescriptor = pxDuplicateNetworkBufferWithDescriptor( pxDescriptor, uxNeededSize );
 800c5b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c5ba:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c5bc:	f7fe f9ce 	bl	800a95c <pxDuplicateNetworkBufferWithDescriptor>
 800c5c0:	6338      	str	r0, [r7, #48]	@ 0x30
                vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800c5c2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c5c4:	f00b fa46 	bl	8017a54 <vReleaseNetworkBufferAndDescriptor>
                pxDescriptor = pxNewDescriptor;
 800c5c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }

            if( pxDescriptor != NULL )
 800c5cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	f000 80a3 	beq.w	800c71a <vNDSendNeighbourSolicitation+0x1a6>
            {
                const uint32_t ulPayloadLength = 32U;
 800c5d4:	2320      	movs	r3, #32
 800c5d6:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxDescriptor->pucEthernetBuffer );
 800c5d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5dc:	627b      	str	r3, [r7, #36]	@ 0x24
                pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800c5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5e0:	3336      	adds	r3, #54	@ 0x36
 800c5e2:	623b      	str	r3, [r7, #32]

                pxDescriptor->xDataLength = uxNeededSize;
 800c5e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c5e8:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Set the multi-cast MAC-address. */
                xMultiCastMacAddress.ucBytes[ 0 ] = 0x33U;
 800c5ea:	2333      	movs	r3, #51	@ 0x33
 800c5ec:	723b      	strb	r3, [r7, #8]
                xMultiCastMacAddress.ucBytes[ 1 ] = 0x33U;
 800c5ee:	2333      	movs	r3, #51	@ 0x33
 800c5f0:	727b      	strb	r3, [r7, #9]
                xMultiCastMacAddress.ucBytes[ 2 ] = 0xffU;
 800c5f2:	23ff      	movs	r3, #255	@ 0xff
 800c5f4:	72bb      	strb	r3, [r7, #10]
                xMultiCastMacAddress.ucBytes[ 3 ] = pxIPAddress->ucBytes[ 13 ];
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	7b5b      	ldrb	r3, [r3, #13]
 800c5fa:	72fb      	strb	r3, [r7, #11]
                xMultiCastMacAddress.ucBytes[ 4 ] = pxIPAddress->ucBytes[ 14 ];
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	7b9b      	ldrb	r3, [r3, #14]
 800c600:	733b      	strb	r3, [r7, #12]
                xMultiCastMacAddress.ucBytes[ 5 ] = pxIPAddress->ucBytes[ 15 ];
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	7bdb      	ldrb	r3, [r3, #15]
 800c606:	737b      	strb	r3, [r7, #13]

                /* Set Ethernet header. Source and Destination will be swapped. */
                ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, xMultiCastMacAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c60a:	3306      	adds	r3, #6
 800c60c:	461a      	mov	r2, r3
 800c60e:	f107 0308 	add.w	r3, r7, #8
 800c612:	6818      	ldr	r0, [r3, #0]
 800c614:	6010      	str	r0, [r2, #0]
 800c616:	889b      	ldrh	r3, [r3, #4]
 800c618:	8093      	strh	r3, [r2, #4]
                ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c61a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c61c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c61e:	33e8      	adds	r3, #232	@ 0xe8
 800c620:	2206      	movs	r2, #6
 800c622:	4619      	mov	r1, r3
 800c624:	f016 fada 	bl	8022bdc <memcpy>
                pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800c628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c62a:	2200      	movs	r2, #0
 800c62c:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800c630:	731a      	strb	r2, [r3, #12]
 800c632:	2200      	movs	r2, #0
 800c634:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800c638:	735a      	strb	r2, [r3, #13]

                /* Set IP-header. */
                pxICMPPacket->xIPHeader.ucVersionTrafficClass = 0x60U;
 800c63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c63c:	2260      	movs	r2, #96	@ 0x60
 800c63e:	739a      	strb	r2, [r3, #14]
                pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0U;
 800c640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c642:	2200      	movs	r2, #0
 800c644:	73da      	strb	r2, [r3, #15]
                pxICMPPacket->xIPHeader.usFlowLabel = 0U;
 800c646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c648:	2200      	movs	r2, #0
 800c64a:	741a      	strb	r2, [r3, #16]
 800c64c:	2200      	movs	r2, #0
 800c64e:	745a      	strb	r2, [r3, #17]
                pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( ulPayloadLength );
 800c650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c652:	b29b      	uxth	r3, r3
 800c654:	021b      	lsls	r3, r3, #8
 800c656:	b29a      	uxth	r2, r3
 800c658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c65a:	0a1b      	lsrs	r3, r3, #8
 800c65c:	b29b      	uxth	r3, r3
 800c65e:	4313      	orrs	r3, r2
 800c660:	b29a      	uxth	r2, r3
 800c662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c664:	825a      	strh	r2, [r3, #18]
                pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800c666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c668:	223a      	movs	r2, #58	@ 0x3a
 800c66a:	751a      	strb	r2, [r3, #20]
                pxICMPPacket->xIPHeader.ucHopLimit = 255U;
 800c66c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c66e:	22ff      	movs	r2, #255	@ 0xff
 800c670:	755a      	strb	r2, [r3, #21]

                /* Source address */
                ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c674:	f103 0016 	add.w	r0, r3, #22
 800c678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c67a:	3338      	adds	r3, #56	@ 0x38
 800c67c:	2210      	movs	r2, #16
 800c67e:	4619      	mov	r1, r3
 800c680:	f016 faac 	bl	8022bdc <memcpy>

                /*ff02::1:ff5a:afe7 */
                ( void ) memset( xTargetIPAddress.ucBytes, 0, sizeof( xTargetIPAddress.ucBytes ) );
 800c684:	f107 0310 	add.w	r3, r7, #16
 800c688:	2210      	movs	r2, #16
 800c68a:	2100      	movs	r1, #0
 800c68c:	4618      	mov	r0, r3
 800c68e:	f016 fbb2 	bl	8022df6 <memset>
                xTargetIPAddress.ucBytes[ 0 ] = 0xff;
 800c692:	23ff      	movs	r3, #255	@ 0xff
 800c694:	743b      	strb	r3, [r7, #16]
                xTargetIPAddress.ucBytes[ 1 ] = 0x02;
 800c696:	2302      	movs	r3, #2
 800c698:	747b      	strb	r3, [r7, #17]
                xTargetIPAddress.ucBytes[ 11 ] = 0x01;
 800c69a:	2301      	movs	r3, #1
 800c69c:	76fb      	strb	r3, [r7, #27]
                xTargetIPAddress.ucBytes[ 12 ] = 0xff;
 800c69e:	23ff      	movs	r3, #255	@ 0xff
 800c6a0:	773b      	strb	r3, [r7, #28]
                xTargetIPAddress.ucBytes[ 13 ] = pxIPAddress->ucBytes[ 13 ];
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	7b5b      	ldrb	r3, [r3, #13]
 800c6a6:	777b      	strb	r3, [r7, #29]
                xTargetIPAddress.ucBytes[ 14 ] = pxIPAddress->ucBytes[ 14 ];
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	7b9b      	ldrb	r3, [r3, #14]
 800c6ac:	77bb      	strb	r3, [r7, #30]
                xTargetIPAddress.ucBytes[ 15 ] = pxIPAddress->ucBytes[ 15 ];
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	7bdb      	ldrb	r3, [r3, #15]
 800c6b2:	77fb      	strb	r3, [r7, #31]
                ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, xTargetIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b6:	3326      	adds	r3, #38	@ 0x26
 800c6b8:	461d      	mov	r5, r3
 800c6ba:	f107 0410 	add.w	r4, r7, #16
 800c6be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c6c0:	6028      	str	r0, [r5, #0]
 800c6c2:	6069      	str	r1, [r5, #4]
 800c6c4:	60aa      	str	r2, [r5, #8]
 800c6c6:	60eb      	str	r3, [r5, #12]

                /* Set ICMP header. */
                ( void ) memset( pxICMPHeader_IPv6, 0, sizeof( *pxICMPHeader_IPv6 ) );
 800c6c8:	2220      	movs	r2, #32
 800c6ca:	2100      	movs	r1, #0
 800c6cc:	6a38      	ldr	r0, [r7, #32]
 800c6ce:	f016 fb92 	bl	8022df6 <memset>
                pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_SOLICITATION_IPv6;
 800c6d2:	6a3b      	ldr	r3, [r7, #32]
 800c6d4:	2287      	movs	r2, #135	@ 0x87
 800c6d6:	701a      	strb	r2, [r3, #0]
                ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c6d8:	6a3b      	ldr	r3, [r7, #32]
 800c6da:	3308      	adds	r3, #8
 800c6dc:	6839      	ldr	r1, [r7, #0]
 800c6de:	2210      	movs	r2, #16
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f016 fa7b 	bl	8022bdc <memcpy>
                pxICMPHeader_IPv6->ucOptionType = ndICMP_SOURCE_LINK_LAYER_ADDRESS;
 800c6e6:	6a3b      	ldr	r3, [r7, #32]
 800c6e8:	2201      	movs	r2, #1
 800c6ea:	761a      	strb	r2, [r3, #24]
                pxICMPHeader_IPv6->ucOptionLength = 1U; /* times 8 bytes. */
 800c6ec:	6a3b      	ldr	r3, [r7, #32]
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	765a      	strb	r2, [r3, #25]
                ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c6f2:	6a3b      	ldr	r3, [r7, #32]
 800c6f4:	f103 001a 	add.w	r0, r3, #26
 800c6f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6fa:	33e8      	adds	r3, #232	@ 0xe8
 800c6fc:	2206      	movs	r2, #6
 800c6fe:	4619      	mov	r1, r3
 800c700:	f016 fa6c 	bl	8022bdc <memcpy>
                }
                #else
                {
                    /* Many EMAC peripherals will only calculate the ICMP checksum
                     * correctly if the field is nulled beforehand. */
                    pxICMPHeader_IPv6->usChecksum = 0U;
 800c704:	6a3b      	ldr	r3, [r7, #32]
 800c706:	2200      	movs	r2, #0
 800c708:	709a      	strb	r2, [r3, #2]
 800c70a:	2200      	movs	r2, #0
 800c70c:	70da      	strb	r2, [r3, #3]
                }
                #endif

                /* This function will fill in the eth addresses and send the packet */
                vReturnEthernetFrame( pxDescriptor, pdTRUE );
 800c70e:	2101      	movs	r1, #1
 800c710:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c712:	f7fd fd71 	bl	800a1f8 <vReturnEthernetFrame>
                xReleased = pdTRUE;
 800c716:	2301      	movs	r3, #1
 800c718:	63bb      	str	r3, [r7, #56]	@ 0x38
            }
        }

        if( ( pxDescriptor != NULL ) && ( xReleased == pdFALSE ) )
 800c71a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d005      	beq.n	800c72c <vNDSendNeighbourSolicitation+0x1b8>
 800c720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c722:	2b00      	cmp	r3, #0
 800c724:	d102      	bne.n	800c72c <vNDSendNeighbourSolicitation+0x1b8>
        {
            vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800c726:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c728:	f00b f994 	bl	8017a54 <vReleaseNetworkBufferAndDescriptor>
        }
    }
 800c72c:	bf00      	nop
 800c72e:	3740      	adds	r7, #64	@ 0x40
 800c730:	46bd      	mov	sp, r7
 800c732:	bdb0      	pop	{r4, r5, r7, pc}

0800c734 <pcMessageType>:
 * @param[in] xType The type of message.
 *
 * @return A null-terminated string that represents the type the kind of message.
 */
        static const char * pcMessageType( BaseType_t xType )
        {
 800c734:	b480      	push	{r7}
 800c736:	b085      	sub	sp, #20
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
            const char * pcReturn;

            switch( ( uint8_t ) xType )
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	b2db      	uxtb	r3, r3
 800c740:	2b04      	cmp	r3, #4
 800c742:	dc29      	bgt.n	800c798 <pcMessageType+0x64>
 800c744:	2b00      	cmp	r3, #0
 800c746:	dc19      	bgt.n	800c77c <pcMessageType+0x48>
 800c748:	e049      	b.n	800c7de <pcMessageType+0xaa>
 800c74a:	3b80      	subs	r3, #128	@ 0x80
 800c74c:	2b08      	cmp	r3, #8
 800c74e:	d846      	bhi.n	800c7de <pcMessageType+0xaa>
 800c750:	a201      	add	r2, pc, #4	@ (adr r2, 800c758 <pcMessageType+0x24>)
 800c752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c756:	bf00      	nop
 800c758:	0800c7bb 	.word	0x0800c7bb
 800c75c:	0800c7c1 	.word	0x0800c7c1
 800c760:	0800c7df 	.word	0x0800c7df
 800c764:	0800c7df 	.word	0x0800c7df
 800c768:	0800c7df 	.word	0x0800c7df
 800c76c:	0800c7c7 	.word	0x0800c7c7
 800c770:	0800c7cd 	.word	0x0800c7cd
 800c774:	0800c7d3 	.word	0x0800c7d3
 800c778:	0800c7d9 	.word	0x0800c7d9
 800c77c:	3b01      	subs	r3, #1
 800c77e:	2b03      	cmp	r3, #3
 800c780:	d82d      	bhi.n	800c7de <pcMessageType+0xaa>
 800c782:	a201      	add	r2, pc, #4	@ (adr r2, 800c788 <pcMessageType+0x54>)
 800c784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c788:	0800c7a3 	.word	0x0800c7a3
 800c78c:	0800c7a9 	.word	0x0800c7a9
 800c790:	0800c7af 	.word	0x0800c7af
 800c794:	0800c7b5 	.word	0x0800c7b5
 800c798:	2b88      	cmp	r3, #136	@ 0x88
 800c79a:	dc20      	bgt.n	800c7de <pcMessageType+0xaa>
 800c79c:	2b80      	cmp	r3, #128	@ 0x80
 800c79e:	dad4      	bge.n	800c74a <pcMessageType+0x16>
 800c7a0:	e01d      	b.n	800c7de <pcMessageType+0xaa>
            {
                case ipICMP_DEST_UNREACHABLE_IPv6:
                    pcReturn = "DEST_UNREACHABLE";
 800c7a2:	4b14      	ldr	r3, [pc, #80]	@ (800c7f4 <pcMessageType+0xc0>)
 800c7a4:	60fb      	str	r3, [r7, #12]
                    break;
 800c7a6:	e01d      	b.n	800c7e4 <pcMessageType+0xb0>

                case ipICMP_PACKET_TOO_BIG_IPv6:
                    pcReturn = "PACKET_TOO_BIG";
 800c7a8:	4b13      	ldr	r3, [pc, #76]	@ (800c7f8 <pcMessageType+0xc4>)
 800c7aa:	60fb      	str	r3, [r7, #12]
                    break;
 800c7ac:	e01a      	b.n	800c7e4 <pcMessageType+0xb0>

                case ipICMP_TIME_EXCEEDED_IPv6:
                    pcReturn = "TIME_EXCEEDED";
 800c7ae:	4b13      	ldr	r3, [pc, #76]	@ (800c7fc <pcMessageType+0xc8>)
 800c7b0:	60fb      	str	r3, [r7, #12]
                    break;
 800c7b2:	e017      	b.n	800c7e4 <pcMessageType+0xb0>

                case ipICMP_PARAMETER_PROBLEM_IPv6:
                    pcReturn = "PARAMETER_PROBLEM";
 800c7b4:	4b12      	ldr	r3, [pc, #72]	@ (800c800 <pcMessageType+0xcc>)
 800c7b6:	60fb      	str	r3, [r7, #12]
                    break;
 800c7b8:	e014      	b.n	800c7e4 <pcMessageType+0xb0>

                case ipICMP_PING_REQUEST_IPv6:
                    pcReturn = "PING_REQUEST";
 800c7ba:	4b12      	ldr	r3, [pc, #72]	@ (800c804 <pcMessageType+0xd0>)
 800c7bc:	60fb      	str	r3, [r7, #12]
                    break;
 800c7be:	e011      	b.n	800c7e4 <pcMessageType+0xb0>

                case ipICMP_PING_REPLY_IPv6:
                    pcReturn = "PING_REPLY";
 800c7c0:	4b11      	ldr	r3, [pc, #68]	@ (800c808 <pcMessageType+0xd4>)
 800c7c2:	60fb      	str	r3, [r7, #12]
                    break;
 800c7c4:	e00e      	b.n	800c7e4 <pcMessageType+0xb0>

                case ipICMP_ROUTER_SOLICITATION_IPv6:
                    pcReturn = "ROUTER_SOL";
 800c7c6:	4b11      	ldr	r3, [pc, #68]	@ (800c80c <pcMessageType+0xd8>)
 800c7c8:	60fb      	str	r3, [r7, #12]
                    break;
 800c7ca:	e00b      	b.n	800c7e4 <pcMessageType+0xb0>

                case ipICMP_ROUTER_ADVERTISEMENT_IPv6:
                    pcReturn = "ROUTER_ADV";
 800c7cc:	4b10      	ldr	r3, [pc, #64]	@ (800c810 <pcMessageType+0xdc>)
 800c7ce:	60fb      	str	r3, [r7, #12]
                    break;
 800c7d0:	e008      	b.n	800c7e4 <pcMessageType+0xb0>

                case ipICMP_NEIGHBOR_SOLICITATION_IPv6:
                    pcReturn = "NEIGHBOR_SOL";
 800c7d2:	4b10      	ldr	r3, [pc, #64]	@ (800c814 <pcMessageType+0xe0>)
 800c7d4:	60fb      	str	r3, [r7, #12]
                    break;
 800c7d6:	e005      	b.n	800c7e4 <pcMessageType+0xb0>

                case ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6:
                    pcReturn = "NEIGHBOR_ADV";
 800c7d8:	4b0f      	ldr	r3, [pc, #60]	@ (800c818 <pcMessageType+0xe4>)
 800c7da:	60fb      	str	r3, [r7, #12]
                    break;
 800c7dc:	e002      	b.n	800c7e4 <pcMessageType+0xb0>

                default:
                    pcReturn = "UNKNOWN ICMP";
 800c7de:	4b0f      	ldr	r3, [pc, #60]	@ (800c81c <pcMessageType+0xe8>)
 800c7e0:	60fb      	str	r3, [r7, #12]
                    break;
 800c7e2:	bf00      	nop
            }

            return pcReturn;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
        }
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3714      	adds	r7, #20
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr
 800c7f2:	bf00      	nop
 800c7f4:	08025b78 	.word	0x08025b78
 800c7f8:	08025b8c 	.word	0x08025b8c
 800c7fc:	08025b9c 	.word	0x08025b9c
 800c800:	08025bac 	.word	0x08025bac
 800c804:	08025bc0 	.word	0x08025bc0
 800c808:	08025bd0 	.word	0x08025bd0
 800c80c:	08025bdc 	.word	0x08025bdc
 800c810:	08025be8 	.word	0x08025be8
 800c814:	08025bf4 	.word	0x08025bf4
 800c818:	08025c04 	.word	0x08025c04
 800c81c:	08025c14 	.word	0x08025c14

0800c820 <prvCheckWaitingBuffer>:
 * @brief When a neighbour advertisement has been received, check if 'pxARPWaitingNetworkBuffer'
 *        was waiting for this new address look-up. If so, feed it to the IP-task as a new
 *        incoming packet.
 */
    static void prvCheckWaitingBuffer( const IPv6_Address_t * pxIPv6Address )
    {
 800c820:	b580      	push	{r7, lr}
 800c822:	b088      	sub	sp, #32
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const IPPacket_IPv6_t * pxIPPacket = ( ( IPPacket_IPv6_t * ) pxARPWaitingNetworkBuffer->pucEthernetBuffer );
 800c828:	4b19      	ldr	r3, [pc, #100]	@ (800c890 <prvCheckWaitingBuffer+0x70>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c82e:	61fb      	str	r3, [r7, #28]
        const IPHeader_IPv6_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800c830:	69fb      	ldr	r3, [r7, #28]
 800c832:	330e      	adds	r3, #14
 800c834:	61bb      	str	r3, [r7, #24]

        if( memcmp( pxIPv6Address->ucBytes, pxIPHeader->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	69bb      	ldr	r3, [r7, #24]
 800c83a:	3308      	adds	r3, #8
 800c83c:	2210      	movs	r2, #16
 800c83e:	4619      	mov	r1, r3
 800c840:	f017 f961 	bl	8023b06 <memcmp>
 800c844:	4603      	mov	r3, r0
 800c846:	2b00      	cmp	r3, #0
 800c848:	d11d      	bne.n	800c886 <prvCheckWaitingBuffer+0x66>
        {
            IPStackEvent_t xEventMessage;
            const TickType_t xDontBlock = ( TickType_t ) 0;
 800c84a:	2300      	movs	r3, #0
 800c84c:	617b      	str	r3, [r7, #20]

            FreeRTOS_printf( ( "Waiting done\n" ) );
 800c84e:	4811      	ldr	r0, [pc, #68]	@ (800c894 <prvCheckWaitingBuffer+0x74>)
 800c850:	f015 ffa8 	bl	80227a4 <lUDPLoggingPrintf>

            xEventMessage.eEventType = eNetworkRxEvent;
 800c854:	2301      	movs	r3, #1
 800c856:	733b      	strb	r3, [r7, #12]
            xEventMessage.pvData = ( void * ) pxARPWaitingNetworkBuffer;
 800c858:	4b0d      	ldr	r3, [pc, #52]	@ (800c890 <prvCheckWaitingBuffer+0x70>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	613b      	str	r3, [r7, #16]

            if( xSendEventStructToIPTask( &xEventMessage, xDontBlock ) != pdPASS )
 800c85e:	f107 030c 	add.w	r3, r7, #12
 800c862:	6979      	ldr	r1, [r7, #20]
 800c864:	4618      	mov	r0, r3
 800c866:	f7fd fa13 	bl	8009c90 <xSendEventStructToIPTask>
 800c86a:	4603      	mov	r3, r0
 800c86c:	2b01      	cmp	r3, #1
 800c86e:	d004      	beq.n	800c87a <prvCheckWaitingBuffer+0x5a>
            {
                /* Failed to send the message, so release the network buffer. */
                vReleaseNetworkBufferAndDescriptor( BUFFER_FROM_WHERE_CALL( 140 ) pxARPWaitingNetworkBuffer );
 800c870:	4b07      	ldr	r3, [pc, #28]	@ (800c890 <prvCheckWaitingBuffer+0x70>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	4618      	mov	r0, r3
 800c876:	f00b f8ed 	bl	8017a54 <vReleaseNetworkBufferAndDescriptor>
            }

            /* Clear the buffer. */
            pxARPWaitingNetworkBuffer = NULL;
 800c87a:	4b05      	ldr	r3, [pc, #20]	@ (800c890 <prvCheckWaitingBuffer+0x70>)
 800c87c:	2200      	movs	r2, #0
 800c87e:	601a      	str	r2, [r3, #0]

            /* Found an ARP resolution, disable ARP resolution timer. */
            vIPSetARPResolutionTimerEnableState( pdFALSE );
 800c880:	2000      	movs	r0, #0
 800c882:	f7fd fffb 	bl	800a87c <vIPSetARPResolutionTimerEnableState>

            iptrace_DELAYED_ARP_REQUEST_REPLIED();
        }
    }
 800c886:	bf00      	nop
 800c888:	3720      	adds	r7, #32
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}
 800c88e:	bf00      	nop
 800c890:	2000119c 	.word	0x2000119c
 800c894:	08025c24 	.word	0x08025c24

0800c898 <prvProcessICMPMessage_IPv6>:
 * @param[in] pxNetworkBuffer The Ethernet packet which contains an IPv6 message.
 *
 * @return A const value 'eReleaseBuffer' which means that the network must still be released.
 */
    eFrameProcessingResult_t prvProcessICMPMessage_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 800c898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c89c:	b09e      	sub	sp, #120	@ 0x78
 800c89e:	af02      	add	r7, sp, #8
 800c8a0:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPPacket_IPv6_t * pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800c8a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c8aa:	3336      	adds	r3, #54	@ 0x36
 800c8ac:	65bb      	str	r3, [r7, #88]	@ 0x58
        /* Note: pxNetworkBuffer->pxEndPoint is already verified to be non-NULL in prvProcessEthernetPacket() */
        NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8b2:	657b      	str	r3, [r7, #84]	@ 0x54
        size_t uxNeededSize;

        #if ( ipconfigHAS_PRINTF == 1 )
        {
            if( pxICMPHeader_IPv6->ucTypeOfMessage != ipICMP_PING_REQUEST_IPv6 )
 800c8b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	2b80      	cmp	r3, #128	@ 0x80
 800c8ba:	d01e      	beq.n	800c8fa <prvProcessICMPMessage_IPv6+0x62>
            {
                char pcAddress[ 40 ];
                FreeRTOS_printf( ( "ICMPv6_recv %d (%s) from %pip to %pip end-point = %s\n",
 800c8bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	4698      	mov	r8, r3
 800c8c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f7ff ff34 	bl	800c734 <pcMessageType>
 800c8cc:	4606      	mov	r6, r0
 800c8ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c8d0:	f103 0516 	add.w	r5, r3, #22
 800c8d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c8d6:	f103 0426 	add.w	r4, r3, #38	@ 0x26
 800c8da:	f107 030c 	add.w	r3, r7, #12
 800c8de:	2228      	movs	r2, #40	@ 0x28
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c8e4:	f001 fd5c 	bl	800e3a0 <pcEndpointName>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	9301      	str	r3, [sp, #4]
 800c8ec:	9400      	str	r4, [sp, #0]
 800c8ee:	462b      	mov	r3, r5
 800c8f0:	4632      	mov	r2, r6
 800c8f2:	4641      	mov	r1, r8
 800c8f4:	48a7      	ldr	r0, [pc, #668]	@ (800cb94 <prvProcessICMPMessage_IPv6+0x2fc>)
 800c8f6:	f015 ff55 	bl	80227a4 <lUDPLoggingPrintf>
                                   pcEndpointName( pxEndPoint, pcAddress, sizeof( pcAddress ) ) ) );
            }
        }
        #endif /* ( ipconfigHAS_PRINTF == 1 ) */

        if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 800c8fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8fc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c900:	f003 0304 	and.w	r3, r3, #4
 800c904:	b2db      	uxtb	r3, r3
 800c906:	2b00      	cmp	r3, #0
 800c908:	f000 813e 	beq.w	800cb88 <prvProcessICMPMessage_IPv6+0x2f0>
        {
            switch( pxICMPHeader_IPv6->ucTypeOfMessage )
 800c90c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	2b04      	cmp	r3, #4
 800c912:	dc1d      	bgt.n	800c950 <prvProcessICMPMessage_IPv6+0xb8>
 800c914:	2b00      	cmp	r3, #0
 800c916:	f300 8130 	bgt.w	800cb7a <prvProcessICMPMessage_IPv6+0x2e2>
                            break;
                    #endif /* ( ipconfigUSE_RA != 0 ) */

                default:
                    /* All possible values are included here above. */
                    break;
 800c91a:	e130      	b.n	800cb7e <prvProcessICMPMessage_IPv6+0x2e6>
            switch( pxICMPHeader_IPv6->ucTypeOfMessage )
 800c91c:	3b80      	subs	r3, #128	@ 0x80
 800c91e:	2b08      	cmp	r3, #8
 800c920:	f200 812d 	bhi.w	800cb7e <prvProcessICMPMessage_IPv6+0x2e6>
 800c924:	a201      	add	r2, pc, #4	@ (adr r2, 800c92c <prvProcessICMPMessage_IPv6+0x94>)
 800c926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c92a:	bf00      	nop
 800c92c:	0800c95d 	.word	0x0800c95d
 800c930:	0800c9a5 	.word	0x0800c9a5
 800c934:	0800cb7f 	.word	0x0800cb7f
 800c938:	0800cb7f 	.word	0x0800cb7f
 800c93c:	0800cb7f 	.word	0x0800cb7f
 800c940:	0800cb7f 	.word	0x0800cb7f
 800c944:	0800cb73 	.word	0x0800cb73
 800c948:	0800ca1b 	.word	0x0800ca1b
 800c94c:	0800cb2b 	.word	0x0800cb2b
 800c950:	2b88      	cmp	r3, #136	@ 0x88
 800c952:	f300 8114 	bgt.w	800cb7e <prvProcessICMPMessage_IPv6+0x2e6>
 800c956:	2b80      	cmp	r3, #128	@ 0x80
 800c958:	dae0      	bge.n	800c91c <prvProcessICMPMessage_IPv6+0x84>
                    break;
 800c95a:	e110      	b.n	800cb7e <prvProcessICMPMessage_IPv6+0x2e6>
                       usICMPSize = FreeRTOS_ntohs( pxICMPPacket->xIPHeader.usPayloadLength );
 800c95c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c95e:	8a5b      	ldrh	r3, [r3, #18]
 800c960:	b29b      	uxth	r3, r3
 800c962:	021b      	lsls	r3, r3, #8
 800c964:	b21a      	sxth	r2, r3
 800c966:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c968:	8a5b      	ldrh	r3, [r3, #18]
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	0a1b      	lsrs	r3, r3, #8
 800c96e:	b29b      	uxth	r3, r3
 800c970:	b21b      	sxth	r3, r3
 800c972:	4313      	orrs	r3, r2
 800c974:	b21b      	sxth	r3, r3
 800c976:	877b      	strh	r3, [r7, #58]	@ 0x3a
                       uxICMPSize = ( size_t ) usICMPSize;
 800c978:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c97a:	637b      	str	r3, [r7, #52]	@ 0x34
                       uxNeededSize = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800c97c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c97e:	3336      	adds	r3, #54	@ 0x36
 800c980:	64bb      	str	r3, [r7, #72]	@ 0x48
                       if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c986:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c988:	429a      	cmp	r2, r3
 800c98a:	d903      	bls.n	800c994 <prvProcessICMPMessage_IPv6+0xfc>
                           FreeRTOS_printf( ( "Too small\n" ) );
 800c98c:	4882      	ldr	r0, [pc, #520]	@ (800cb98 <prvProcessICMPMessage_IPv6+0x300>)
 800c98e:	f015 ff09 	bl	80227a4 <lUDPLoggingPrintf>
                           break;
 800c992:	e0f9      	b.n	800cb88 <prvProcessICMPMessage_IPv6+0x2f0>
                       pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_PING_REPLY_IPv6;
 800c994:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c996:	2281      	movs	r2, #129	@ 0x81
 800c998:	701a      	strb	r2, [r3, #0]
                       prvReturnICMP_IPv6( pxNetworkBuffer, uxICMPSize );
 800c99a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f7ff fdad 	bl	800c4fc <prvReturnICMP_IPv6>
                   break;
 800c9a2:	e0f1      	b.n	800cb88 <prvProcessICMPMessage_IPv6+0x2f0>
                               ePingReplyStatus_t eStatus = eSuccess;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                               const ICMPEcho_IPv6_t * pxICMPEchoHeader = ( ( const ICMPEcho_IPv6_t * ) pxICMPHeader_IPv6 );
 800c9aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c9ac:	643b      	str	r3, [r7, #64]	@ 0x40
                               uxDataLength = ipNUMERIC_CAST( size_t, FreeRTOS_ntohs( pxICMPPacket->xIPHeader.usPayloadLength ) );
 800c9ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c9b0:	8a5b      	ldrh	r3, [r3, #18]
 800c9b2:	b29b      	uxth	r3, r3
 800c9b4:	021b      	lsls	r3, r3, #8
 800c9b6:	b21a      	sxth	r2, r3
 800c9b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c9ba:	8a5b      	ldrh	r3, [r3, #18]
 800c9bc:	b29b      	uxth	r3, r3
 800c9be:	0a1b      	lsrs	r3, r3, #8
 800c9c0:	b29b      	uxth	r3, r3
 800c9c2:	b21b      	sxth	r3, r3
 800c9c4:	4313      	orrs	r3, r2
 800c9c6:	b21b      	sxth	r3, r3
 800c9c8:	b29b      	uxth	r3, r3
 800c9ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
                               uxDataLength = uxDataLength - sizeof( *pxICMPEchoHeader );
 800c9cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9ce:	3b08      	subs	r3, #8
 800c9d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
                               pucByte = ( const uint8_t * ) pxICMPEchoHeader;
 800c9d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9d4:	667b      	str	r3, [r7, #100]	@ 0x64
                               pucByte = &( pucByte[ sizeof( *pxICMPEchoHeader ) ] );
 800c9d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c9d8:	3308      	adds	r3, #8
 800c9da:	667b      	str	r3, [r7, #100]	@ 0x64
                               for( uxCount = 0; uxCount < uxDataLength; uxCount++ )
 800c9dc:	2300      	movs	r3, #0
 800c9de:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c9e0:	e00d      	b.n	800c9fe <prvProcessICMPMessage_IPv6+0x166>
                                   if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 800c9e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	2b78      	cmp	r3, #120	@ 0x78
 800c9e8:	d003      	beq.n	800c9f2 <prvProcessICMPMessage_IPv6+0x15a>
                                       eStatus = eInvalidData;
 800c9ea:	2302      	movs	r3, #2
 800c9ec:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                                       break;
 800c9f0:	e009      	b.n	800ca06 <prvProcessICMPMessage_IPv6+0x16e>
                                   pucByte++;
 800c9f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c9f4:	3301      	adds	r3, #1
 800c9f6:	667b      	str	r3, [r7, #100]	@ 0x64
                               for( uxCount = 0; uxCount < uxDataLength; uxCount++ )
 800c9f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c9fa:	3301      	adds	r3, #1
 800c9fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c9fe:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ca00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d3ed      	bcc.n	800c9e2 <prvProcessICMPMessage_IPv6+0x14a>
                               vApplicationPingReplyHook( eStatus, pxICMPEchoHeader->usIdentifier );
 800ca06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca08:	889b      	ldrh	r3, [r3, #4]
 800ca0a:	b29a      	uxth	r2, r3
 800ca0c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ca10:	4611      	mov	r1, r2
 800ca12:	4618      	mov	r0, r3
 800ca14:	f7f5 f8ae 	bl	8001b74 <vApplicationPingReplyHook>
                           break;
 800ca18:	e0b6      	b.n	800cb88 <prvProcessICMPMessage_IPv6+0x2f0>
                       const NetworkEndPoint_t * pxTargetedEndPoint = pxEndPoint;
 800ca1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca1c:	663b      	str	r3, [r7, #96]	@ 0x60
                       const NetworkEndPoint_t * pxEndPointInSameSubnet = FreeRTOS_InterfaceEPInSameSubnet_IPv6( pxNetworkBuffer->pxInterface, &( pxICMPHeader_IPv6->xIPv6Address ) );
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca24:	3308      	adds	r3, #8
 800ca26:	4619      	mov	r1, r3
 800ca28:	4610      	mov	r0, r2
 800ca2a:	f001 f9cd 	bl	800ddc8 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>
 800ca2e:	6538      	str	r0, [r7, #80]	@ 0x50
                       if( pxEndPointInSameSubnet != NULL )
 800ca30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d002      	beq.n	800ca3c <prvProcessICMPMessage_IPv6+0x1a4>
                           pxTargetedEndPoint = pxEndPointInSameSubnet;
 800ca36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca38:	663b      	str	r3, [r7, #96]	@ 0x60
 800ca3a:	e005      	b.n	800ca48 <prvProcessICMPMessage_IPv6+0x1b0>
                           FreeRTOS_debug_printf( ( "prvProcessICMPMessage_IPv6: No match for %pip\n",
 800ca3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca3e:	3308      	adds	r3, #8
 800ca40:	4619      	mov	r1, r3
 800ca42:	4856      	ldr	r0, [pc, #344]	@ (800cb9c <prvProcessICMPMessage_IPv6+0x304>)
 800ca44:	f015 feae 	bl	80227a4 <lUDPLoggingPrintf>
                       uxICMPSize = sizeof( ICMPHeader_IPv6_t );
 800ca48:	2320      	movs	r3, #32
 800ca4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       uxNeededSize = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800ca4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca4e:	3336      	adds	r3, #54	@ 0x36
 800ca50:	64bb      	str	r3, [r7, #72]	@ 0x48
                       if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	d903      	bls.n	800ca64 <prvProcessICMPMessage_IPv6+0x1cc>
                           FreeRTOS_printf( ( "Too small\n" ) );
 800ca5c:	484e      	ldr	r0, [pc, #312]	@ (800cb98 <prvProcessICMPMessage_IPv6+0x300>)
 800ca5e:	f015 fea1 	bl	80227a4 <lUDPLoggingPrintf>
                           break;
 800ca62:	e091      	b.n	800cb88 <prvProcessICMPMessage_IPv6+0x2f0>
                       xCompare = memcmp( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxTargetedEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800ca64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca66:	f103 0008 	add.w	r0, r3, #8
 800ca6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ca6c:	3338      	adds	r3, #56	@ 0x38
 800ca6e:	2210      	movs	r2, #16
 800ca70:	4619      	mov	r1, r3
 800ca72:	f017 f848 	bl	8023b06 <memcmp>
 800ca76:	6478      	str	r0, [r7, #68]	@ 0x44
                       FreeRTOS_printf( ( "ND NS for %pip endpoint %pip %s\n",
 800ca78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca7a:	f103 0108 	add.w	r1, r3, #8
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca82:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800ca86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d101      	bne.n	800ca90 <prvProcessICMPMessage_IPv6+0x1f8>
 800ca8c:	4b44      	ldr	r3, [pc, #272]	@ (800cba0 <prvProcessICMPMessage_IPv6+0x308>)
 800ca8e:	e000      	b.n	800ca92 <prvProcessICMPMessage_IPv6+0x1fa>
 800ca90:	4b44      	ldr	r3, [pc, #272]	@ (800cba4 <prvProcessICMPMessage_IPv6+0x30c>)
 800ca92:	4845      	ldr	r0, [pc, #276]	@ (800cba8 <prvProcessICMPMessage_IPv6+0x310>)
 800ca94:	f015 fe86 	bl	80227a4 <lUDPLoggingPrintf>
                       if( xCompare == 0 )
 800ca98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d171      	bne.n	800cb82 <prvProcessICMPMessage_IPv6+0x2ea>
                           pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6;
 800ca9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800caa0:	2288      	movs	r2, #136	@ 0x88
 800caa2:	701a      	strb	r2, [r3, #0]
                           pxICMPHeader_IPv6->ucTypeOfService = 0U;
 800caa4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800caa6:	2200      	movs	r2, #0
 800caa8:	705a      	strb	r2, [r3, #1]
                           pxICMPHeader_IPv6->ulReserved = ndICMPv6_FLAG_SOLICITED | ndICMPv6_FLAG_UPDATE;
 800caaa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800caac:	2200      	movs	r2, #0
 800caae:	711a      	strb	r2, [r3, #4]
 800cab0:	2200      	movs	r2, #0
 800cab2:	715a      	strb	r2, [r3, #5]
 800cab4:	2200      	movs	r2, #0
 800cab6:	719a      	strb	r2, [r3, #6]
 800cab8:	2200      	movs	r2, #0
 800caba:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800cabe:	71da      	strb	r2, [r3, #7]
                           pxICMPHeader_IPv6->ulReserved = FreeRTOS_htonl( pxICMPHeader_IPv6->ulReserved );
 800cac0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cac2:	685b      	ldr	r3, [r3, #4]
 800cac4:	061a      	lsls	r2, r3, #24
 800cac6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cac8:	685b      	ldr	r3, [r3, #4]
 800caca:	021b      	lsls	r3, r3, #8
 800cacc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cad0:	431a      	orrs	r2, r3
 800cad2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cad4:	685b      	ldr	r3, [r3, #4]
 800cad6:	0a1b      	lsrs	r3, r3, #8
 800cad8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cadc:	431a      	orrs	r2, r3
 800cade:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	0e1b      	lsrs	r3, r3, #24
 800cae4:	431a      	orrs	r2, r3
 800cae6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cae8:	605a      	str	r2, [r3, #4]
                           pxICMPHeader_IPv6->ucOptionType = ndICMP_TARGET_LINK_LAYER_ADDRESS;
 800caea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800caec:	2202      	movs	r2, #2
 800caee:	761a      	strb	r2, [r3, #24]
                           pxICMPHeader_IPv6->ucOptionLength = 1U;
 800caf0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800caf2:	2201      	movs	r2, #1
 800caf4:	765a      	strb	r2, [r3, #25]
                           ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxTargetedEndPoint->xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800caf6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800caf8:	f103 001a 	add.w	r0, r3, #26
 800cafc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cafe:	33e8      	adds	r3, #232	@ 0xe8
 800cb00:	2206      	movs	r2, #6
 800cb02:	4619      	mov	r1, r3
 800cb04:	f016 f86a 	bl	8022bdc <memcpy>
                           pxICMPPacket->xIPHeader.ucHopLimit = 255U;
 800cb08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb0a:	22ff      	movs	r2, #255	@ 0xff
 800cb0c:	755a      	strb	r2, [r3, #21]
                           ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxTargetedEndPoint->ipv6_settings.xIPAddress.ucBytes, sizeof( pxICMPHeader_IPv6->xIPv6Address.ucBytes ) );
 800cb0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb10:	f103 0008 	add.w	r0, r3, #8
 800cb14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb16:	3338      	adds	r3, #56	@ 0x38
 800cb18:	2210      	movs	r2, #16
 800cb1a:	4619      	mov	r1, r3
 800cb1c:	f016 f85e 	bl	8022bdc <memcpy>
                           prvReturnICMP_IPv6( pxNetworkBuffer, uxICMPSize );
 800cb20:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f7ff fcea 	bl	800c4fc <prvReturnICMP_IPv6>
                   break;
 800cb28:	e02b      	b.n	800cb82 <prvProcessICMPMessage_IPv6+0x2ea>
                    vNDRefreshCacheEntry( ( ( const MACAddress_t * ) pxICMPHeader_IPv6->ucOptionBytes ),
 800cb2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb2c:	f103 001a 	add.w	r0, r3, #26
                                          &( pxICMPHeader_IPv6->xIPv6Address ),
 800cb30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb32:	3308      	adds	r3, #8
                    vNDRefreshCacheEntry( ( ( const MACAddress_t * ) pxICMPHeader_IPv6->ucOptionBytes ),
 800cb34:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cb36:	4619      	mov	r1, r3
 800cb38:	f7ff fb5e 	bl	800c1f8 <vNDRefreshCacheEntry>
                    FreeRTOS_printf( ( "NEIGHBOR_ADV from %pip\n",
 800cb3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb3e:	3308      	adds	r3, #8
 800cb40:	4619      	mov	r1, r3
 800cb42:	481a      	ldr	r0, [pc, #104]	@ (800cbac <prvProcessICMPMessage_IPv6+0x314>)
 800cb44:	f015 fe2e 	bl	80227a4 <lUDPLoggingPrintf>
                        vReceiveNA( pxNetworkBuffer );
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f000 fa89 	bl	800d060 <vReceiveNA>
                    if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800cb4e:	4b18      	ldr	r3, [pc, #96]	@ (800cbb0 <prvProcessICMPMessage_IPv6+0x318>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d017      	beq.n	800cb86 <prvProcessICMPMessage_IPv6+0x2ee>
                        ( uxIPHeaderSizePacket( pxARPWaitingNetworkBuffer ) == ipSIZE_OF_IPv6_HEADER ) )
 800cb56:	4b16      	ldr	r3, [pc, #88]	@ (800cbb0 <prvProcessICMPMessage_IPv6+0x318>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7fd fc4c 	bl	800a3f8 <uxIPHeaderSizePacket>
 800cb60:	4603      	mov	r3, r0
                    if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800cb62:	2b28      	cmp	r3, #40	@ 0x28
 800cb64:	d10f      	bne.n	800cb86 <prvProcessICMPMessage_IPv6+0x2ee>
                        prvCheckWaitingBuffer( &( pxICMPHeader_IPv6->xIPv6Address ) );
 800cb66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb68:	3308      	adds	r3, #8
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f7ff fe58 	bl	800c820 <prvCheckWaitingBuffer>
                    break;
 800cb70:	e009      	b.n	800cb86 <prvProcessICMPMessage_IPv6+0x2ee>
                            vReceiveRA( pxNetworkBuffer );
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f000 fb9a 	bl	800d2ac <vReceiveRA>
                            break;
 800cb78:	e006      	b.n	800cb88 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800cb7a:	bf00      	nop
 800cb7c:	e004      	b.n	800cb88 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800cb7e:	bf00      	nop
 800cb80:	e002      	b.n	800cb88 <prvProcessICMPMessage_IPv6+0x2f0>
                   break;
 800cb82:	bf00      	nop
 800cb84:	e000      	b.n	800cb88 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800cb86:	bf00      	nop
            } /* switch( pxICMPHeader_IPv6->ucTypeOfMessage ) */
        }     /* if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) */

        return eReleaseBuffer;
 800cb88:	2300      	movs	r3, #0
    }
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3770      	adds	r7, #112	@ 0x70
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb94:	08025c34 	.word	0x08025c34
 800cb98:	08025c6c 	.word	0x08025c6c
 800cb9c:	08025c78 	.word	0x08025c78
 800cba0:	08025ca8 	.word	0x08025ca8
 800cba4:	08025cb0 	.word	0x08025cb0
 800cba8:	08025cb8 	.word	0x08025cb8
 800cbac:	08025cdc 	.word	0x08025cdc
 800cbb0:	2000119c 	.word	0x2000119c

0800cbb4 <FreeRTOS_OutputAdvertiseIPv6>:
    /* MISRA Ref 8.9.1 [File scoped variables] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
    /* coverity[misra_c_2012_rule_8_9_violation] */
    /* coverity[single_use] */
    void FreeRTOS_OutputAdvertiseIPv6( NetworkEndPoint_t * pxEndPoint )
    {
 800cbb4:	b5b0      	push	{r4, r5, r7, lr}
 800cbb6:	b088      	sub	sp, #32
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxInterface;
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6;
        size_t uxICMPSize;
        size_t uxPacketSize;

        uxPacketSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800cbbc:	2356      	movs	r3, #86	@ 0x56
 800cbbe:	61fb      	str	r3, [r7, #28]

        /* This is called from the context of the IP event task, so a block time
         * must not be used. */
        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPacketSize, ndDONT_BLOCK );
 800cbc0:	2100      	movs	r1, #0
 800cbc2:	69f8      	ldr	r0, [r7, #28]
 800cbc4:	f00a fede 	bl	8017984 <pxGetNetworkBufferWithDescriptor>
 800cbc8:	61b8      	str	r0, [r7, #24]

        if( pxNetworkBuffer != NULL )
 800cbca:	69bb      	ldr	r3, [r7, #24]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	f000 80b1 	beq.w	800cd34 <FreeRTOS_OutputAdvertiseIPv6+0x180>
        {
            ( void ) memset( pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800cbd2:	69bb      	ldr	r3, [r7, #24]
 800cbd4:	3314      	adds	r3, #20
 800cbd6:	2210      	movs	r2, #16
 800cbd8:	2100      	movs	r1, #0
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f016 f90b 	bl	8022df6 <memset>
            pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800cbe0:	69bb      	ldr	r3, [r7, #24]
 800cbe2:	687a      	ldr	r2, [r7, #4]
 800cbe4:	631a      	str	r2, [r3, #48]	@ 0x30

            pxInterface = pxEndPoint->pxNetworkInterface;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800cbec:	617b      	str	r3, [r7, #20]

            configASSERT( pxInterface != NULL );
 800cbee:	697b      	ldr	r3, [r7, #20]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d104      	bne.n	800cbfe <FreeRTOS_OutputAdvertiseIPv6+0x4a>
 800cbf4:	f240 419e 	movw	r1, #1182	@ 0x49e
 800cbf8:	4850      	ldr	r0, [pc, #320]	@ (800cd3c <FreeRTOS_OutputAdvertiseIPv6+0x188>)
 800cbfa:	f7f4 ff05 	bl	8001a08 <vAssertCalled>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800cbfe:	69bb      	ldr	r3, [r7, #24]
 800cc00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc02:	613b      	str	r3, [r7, #16]
            pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	3336      	adds	r3, #54	@ 0x36
 800cc08:	60fb      	str	r3, [r7, #12]

            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pcLOCAL_ALL_NODES_MULTICAST_MAC, ipMAC_ADDRESS_LENGTH_BYTES );
 800cc0a:	693b      	ldr	r3, [r7, #16]
 800cc0c:	4a4c      	ldr	r2, [pc, #304]	@ (800cd40 <FreeRTOS_OutputAdvertiseIPv6+0x18c>)
 800cc0e:	6810      	ldr	r0, [r2, #0]
 800cc10:	6018      	str	r0, [r3, #0]
 800cc12:	8892      	ldrh	r2, [r2, #4]
 800cc14:	809a      	strh	r2, [r3, #4]
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	1d98      	adds	r0, r3, #6
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	33e8      	adds	r3, #232	@ 0xe8
 800cc1e:	2206      	movs	r2, #6
 800cc20:	4619      	mov	r1, r3
 800cc22:	f015 ffdb 	bl	8022bdc <memcpy>
            pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE; /* 12 + 2 = 14 */
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800cc2e:	731a      	strb	r2, [r3, #12]
 800cc30:	2200      	movs	r2, #0
 800cc32:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800cc36:	735a      	strb	r2, [r3, #13]

            pxICMPPacket->xIPHeader.ucVersionTrafficClass = 0x60;
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	2260      	movs	r2, #96	@ 0x60
 800cc3c:	739a      	strb	r2, [r3, #14]
            pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0;
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	2200      	movs	r2, #0
 800cc42:	73da      	strb	r2, [r3, #15]
            pxICMPPacket->xIPHeader.usFlowLabel = 0;
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	2200      	movs	r2, #0
 800cc48:	741a      	strb	r2, [r3, #16]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	745a      	strb	r2, [r3, #17]

            pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( sizeof( ICMPHeader_IPv6_t ) );
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	2200      	movs	r2, #0
 800cc52:	749a      	strb	r2, [r3, #18]
 800cc54:	2200      	movs	r2, #0
 800cc56:	f042 0220 	orr.w	r2, r2, #32
 800cc5a:	74da      	strb	r2, [r3, #19]
            pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	223a      	movs	r2, #58	@ 0x3a
 800cc60:	751a      	strb	r2, [r3, #20]
            pxICMPPacket->xIPHeader.ucHopLimit = 255;
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	22ff      	movs	r2, #255	@ 0xff
 800cc66:	755a      	strb	r2, [r3, #21]
            ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	f103 0016 	add.w	r0, r3, #22
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	3338      	adds	r3, #56	@ 0x38
 800cc72:	2210      	movs	r2, #16
 800cc74:	4619      	mov	r1, r3
 800cc76:	f015 ffb1 	bl	8022bdc <memcpy>
            ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pcLOCAL_ALL_NODES_MULTICAST_IP, ipSIZE_OF_IPv6_ADDRESS );
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	3326      	adds	r3, #38	@ 0x26
 800cc7e:	4a31      	ldr	r2, [pc, #196]	@ (800cd44 <FreeRTOS_OutputAdvertiseIPv6+0x190>)
 800cc80:	461c      	mov	r4, r3
 800cc82:	4615      	mov	r5, r2
 800cc84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cc86:	6020      	str	r0, [r4, #0]
 800cc88:	6061      	str	r1, [r4, #4]
 800cc8a:	60a2      	str	r2, [r4, #8]
 800cc8c:	60e3      	str	r3, [r4, #12]

            uxICMPSize = sizeof( ICMPHeader_IPv6_t );
 800cc8e:	2320      	movs	r3, #32
 800cc90:	60bb      	str	r3, [r7, #8]
            pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	2288      	movs	r2, #136	@ 0x88
 800cc96:	701a      	strb	r2, [r3, #0]
            pxICMPHeader_IPv6->ucTypeOfService = 0;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	705a      	strb	r2, [r3, #1]
            pxICMPHeader_IPv6->ulReserved = ndICMPv6_FLAG_SOLICITED | ndICMPv6_FLAG_UPDATE;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	2200      	movs	r2, #0
 800cca2:	711a      	strb	r2, [r3, #4]
 800cca4:	2200      	movs	r2, #0
 800cca6:	715a      	strb	r2, [r3, #5]
 800cca8:	2200      	movs	r2, #0
 800ccaa:	719a      	strb	r2, [r3, #6]
 800ccac:	2200      	movs	r2, #0
 800ccae:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800ccb2:	71da      	strb	r2, [r3, #7]
            pxICMPHeader_IPv6->ulReserved = FreeRTOS_htonl( pxICMPHeader_IPv6->ulReserved );
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	685b      	ldr	r3, [r3, #4]
 800ccb8:	061a      	lsls	r2, r3, #24
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	685b      	ldr	r3, [r3, #4]
 800ccbe:	021b      	lsls	r3, r3, #8
 800ccc0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ccc4:	431a      	orrs	r2, r3
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	685b      	ldr	r3, [r3, #4]
 800ccca:	0a1b      	lsrs	r3, r3, #8
 800cccc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ccd0:	431a      	orrs	r2, r3
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	685b      	ldr	r3, [r3, #4]
 800ccd6:	0e1b      	lsrs	r3, r3, #24
 800ccd8:	431a      	orrs	r2, r3
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	605a      	str	r2, [r3, #4]

            /* Type of option. */
            pxICMPHeader_IPv6->ucOptionType = ndICMP_TARGET_LINK_LAYER_ADDRESS;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	2202      	movs	r2, #2
 800cce2:	761a      	strb	r2, [r3, #24]
            /* Length of option in units of 8 bytes. */
            pxICMPHeader_IPv6->ucOptionLength = 1;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	2201      	movs	r2, #1
 800cce8:	765a      	strb	r2, [r3, #25]
            ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxEndPoint->xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	f103 001a 	add.w	r0, r3, #26
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	33e8      	adds	r3, #232	@ 0xe8
 800ccf4:	2206      	movs	r2, #6
 800ccf6:	4619      	mov	r1, r3
 800ccf8:	f015 ff70 	bl	8022bdc <memcpy>
            pxICMPPacket->xIPHeader.ucHopLimit = 255;
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	22ff      	movs	r2, #255	@ 0xff
 800cd00:	755a      	strb	r2, [r3, #21]
            ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, sizeof( pxICMPHeader_IPv6->xIPv6Address.ucBytes ) );
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	f103 0008 	add.w	r0, r3, #8
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	3338      	adds	r3, #56	@ 0x38
 800cd0c:	2210      	movs	r2, #16
 800cd0e:	4619      	mov	r1, r3
 800cd10:	f015 ff64 	bl	8022bdc <memcpy>

            /* Important: tell NIC driver how many bytes must be sent */
            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 800cd1a:	69bb      	ldr	r3, [r7, #24]
 800cd1c:	629a      	str	r2, [r3, #40]	@ 0x28
            }
            #else
            {
                /* Many EMAC peripherals will only calculate the ICMP checksum
                 * correctly if the field is nulled beforehand. */
                pxICMPHeader_IPv6->usChecksum = 0;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	2200      	movs	r2, #0
 800cd22:	709a      	strb	r2, [r3, #2]
 800cd24:	2200      	movs	r2, #0
 800cd26:	70da      	strb	r2, [r3, #3]
            }
            #endif

            /* Set the parameter 'bReleaseAfterSend'. */
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	68db      	ldr	r3, [r3, #12]
 800cd2c:	2201      	movs	r2, #1
 800cd2e:	69b9      	ldr	r1, [r7, #24]
 800cd30:	6978      	ldr	r0, [r7, #20]
 800cd32:	4798      	blx	r3
        }
    }
 800cd34:	bf00      	nop
 800cd36:	3720      	adds	r7, #32
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bdb0      	pop	{r4, r5, r7, pc}
 800cd3c:	08025cf4 	.word	0x08025cf4
 800cd40:	08027f74 	.word	0x08027f74
 800cd44:	08027f64 	.word	0x08027f64

0800cd48 <FreeRTOS_CreateIPv6Address>:
 */
    BaseType_t FreeRTOS_CreateIPv6Address( IPv6_Address_t * pxIPAddress,
                                           const IPv6_Address_t * pxPrefix,
                                           size_t uxPrefixLength,
                                           BaseType_t xDoRandom )
    {
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b090      	sub	sp, #64	@ 0x40
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	60f8      	str	r0, [r7, #12]
 800cd50:	60b9      	str	r1, [r7, #8]
 800cd52:	607a      	str	r2, [r7, #4]
 800cd54:	603b      	str	r3, [r7, #0]
        uint32_t pulRandom[ 4 ];
        uint8_t * pucSource;
        BaseType_t xIndex, xResult = pdPASS;
 800cd56:	2301      	movs	r3, #1
 800cd58:	637b      	str	r3, [r7, #52]	@ 0x34

        if( xDoRandom != pdFALSE )
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d017      	beq.n	800cd90 <FreeRTOS_CreateIPv6Address+0x48>
            /* Create an IP-address, based on a net prefix and a
             * random host address.
             * ARRAY_SIZE_X() returns the size of an array as a
             * signed value ( BaseType_t ).
             */
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( pulRandom ); xIndex++ )
 800cd60:	2300      	movs	r3, #0
 800cd62:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cd64:	e010      	b.n	800cd88 <FreeRTOS_CreateIPv6Address+0x40>
            {
                if( xApplicationGetRandomNumber( &( pulRandom[ xIndex ] ) ) == pdFAIL )
 800cd66:	f107 0214 	add.w	r2, r7, #20
 800cd6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd6c:	009b      	lsls	r3, r3, #2
 800cd6e:	4413      	add	r3, r2
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7f4 ff13 	bl	8001b9c <xApplicationGetRandomNumber>
 800cd76:	4603      	mov	r3, r0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d102      	bne.n	800cd82 <FreeRTOS_CreateIPv6Address+0x3a>
                {
                    xResult = pdFAIL;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800cd80:	e00d      	b.n	800cd9e <FreeRTOS_CreateIPv6Address+0x56>
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( pulRandom ); xIndex++ )
 800cd82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd84:	3301      	adds	r3, #1
 800cd86:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cd88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd8a:	2b03      	cmp	r3, #3
 800cd8c:	ddeb      	ble.n	800cd66 <FreeRTOS_CreateIPv6Address+0x1e>
 800cd8e:	e006      	b.n	800cd9e <FreeRTOS_CreateIPv6Address+0x56>
                }
            }
        }
        else
        {
            ( void ) memset( pulRandom, 0, sizeof( pulRandom ) );
 800cd90:	f107 0314 	add.w	r3, r7, #20
 800cd94:	2210      	movs	r2, #16
 800cd96:	2100      	movs	r1, #0
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f016 f82c 	bl	8022df6 <memset>
        }

        if( xResult == pdPASS )
 800cd9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cda0:	2b01      	cmp	r3, #1
 800cda2:	d167      	bne.n	800ce74 <FreeRTOS_CreateIPv6Address+0x12c>
        {
            size_t uxIndex;
            /* A loopback IP-address has a prefix of 128. */
            configASSERT( ( uxPrefixLength > 0U ) && ( uxPrefixLength <= ( 8U * ipSIZE_OF_IPv6_ADDRESS ) ) );
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d004      	beq.n	800cdb4 <FreeRTOS_CreateIPv6Address+0x6c>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2b80      	cmp	r3, #128	@ 0x80
 800cdae:	d801      	bhi.n	800cdb4 <FreeRTOS_CreateIPv6Address+0x6c>
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	e000      	b.n	800cdb6 <FreeRTOS_CreateIPv6Address+0x6e>
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d104      	bne.n	800cdc4 <FreeRTOS_CreateIPv6Address+0x7c>
 800cdba:	f240 5105 	movw	r1, #1285	@ 0x505
 800cdbe:	4830      	ldr	r0, [pc, #192]	@ (800ce80 <FreeRTOS_CreateIPv6Address+0x138>)
 800cdc0:	f7f4 fe22 	bl	8001a08 <vAssertCalled>

            if( uxPrefixLength >= 8U )
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2b07      	cmp	r3, #7
 800cdc8:	d907      	bls.n	800cdda <FreeRTOS_CreateIPv6Address+0x92>
            {
                ( void ) memcpy( pxIPAddress->ucBytes, pxPrefix->ucBytes, ( uxPrefixLength + 7U ) / 8U );
 800cdca:	68f8      	ldr	r0, [r7, #12]
 800cdcc:	68b9      	ldr	r1, [r7, #8]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	3307      	adds	r3, #7
 800cdd2:	08db      	lsrs	r3, r3, #3
 800cdd4:	461a      	mov	r2, r3
 800cdd6:	f015 ff01 	bl	8022bdc <memcpy>
            }

            pucSource = ( uint8_t * ) pulRandom;
 800cdda:	f107 0314 	add.w	r3, r7, #20
 800cdde:	63fb      	str	r3, [r7, #60]	@ 0x3c
            uxIndex = uxPrefixLength / 8U;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	08db      	lsrs	r3, r3, #3
 800cde4:	633b      	str	r3, [r7, #48]	@ 0x30

            if( ( uxPrefixLength % 8U ) != 0U )
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f003 0307 	and.w	r3, r3, #7
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d034      	beq.n	800ce5a <FreeRTOS_CreateIPv6Address+0x112>
            {
                /* uxHostLen is between 1 and 7 bits long. */
                size_t uxHostLen = 8U - ( uxPrefixLength % 8U );
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f003 0307 	and.w	r3, r3, #7
 800cdf6:	f1c3 0308 	rsb	r3, r3, #8
 800cdfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                uint32_t uxHostMask = ( ( ( uint32_t ) 1U ) << uxHostLen ) - 1U;
 800cdfc:	2201      	movs	r2, #1
 800cdfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce00:	fa02 f303 	lsl.w	r3, r2, r3
 800ce04:	3b01      	subs	r3, #1
 800ce06:	62bb      	str	r3, [r7, #40]	@ 0x28
                uint8_t ucNetMask = ( uint8_t ) ~( uxHostMask );
 800ce08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce0a:	b2db      	uxtb	r3, r3
 800ce0c:	43db      	mvns	r3, r3
 800ce0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                pxIPAddress->ucBytes[ uxIndex ] &= ucNetMask;
 800ce12:	68fa      	ldr	r2, [r7, #12]
 800ce14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce16:	4413      	add	r3, r2
 800ce18:	781a      	ldrb	r2, [r3, #0]
 800ce1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ce1e:	4013      	ands	r3, r2
 800ce20:	b2d9      	uxtb	r1, r3
 800ce22:	68fa      	ldr	r2, [r7, #12]
 800ce24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce26:	4413      	add	r3, r2
 800ce28:	460a      	mov	r2, r1
 800ce2a:	701a      	strb	r2, [r3, #0]
                pxIPAddress->ucBytes[ uxIndex ] |= ( pucSource[ 0 ] & ( ( uint8_t ) uxHostMask ) );
 800ce2c:	68fa      	ldr	r2, [r7, #12]
 800ce2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce30:	4413      	add	r3, r2
 800ce32:	781a      	ldrb	r2, [r3, #0]
 800ce34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce36:	7819      	ldrb	r1, [r3, #0]
 800ce38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce3a:	b2db      	uxtb	r3, r3
 800ce3c:	400b      	ands	r3, r1
 800ce3e:	b2db      	uxtb	r3, r3
 800ce40:	4313      	orrs	r3, r2
 800ce42:	b2d9      	uxtb	r1, r3
 800ce44:	68fa      	ldr	r2, [r7, #12]
 800ce46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce48:	4413      	add	r3, r2
 800ce4a:	460a      	mov	r2, r1
 800ce4c:	701a      	strb	r2, [r3, #0]
                pucSource = &( pucSource[ 1 ] );
 800ce4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce50:	3301      	adds	r3, #1
 800ce52:	63fb      	str	r3, [r7, #60]	@ 0x3c
                uxIndex++;
 800ce54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce56:	3301      	adds	r3, #1
 800ce58:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            if( uxIndex < ipSIZE_OF_IPv6_ADDRESS )
 800ce5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce5c:	2b0f      	cmp	r3, #15
 800ce5e:	d809      	bhi.n	800ce74 <FreeRTOS_CreateIPv6Address+0x12c>
            {
                ( void ) memcpy( &( pxIPAddress->ucBytes[ uxIndex ] ), pucSource, ipSIZE_OF_IPv6_ADDRESS - uxIndex );
 800ce60:	68fa      	ldr	r2, [r7, #12]
 800ce62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce64:	18d0      	adds	r0, r2, r3
 800ce66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce68:	f1c3 0310 	rsb	r3, r3, #16
 800ce6c:	461a      	mov	r2, r3
 800ce6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ce70:	f015 feb4 	bl	8022bdc <memcpy>
            }
        }

        return xResult;
 800ce74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800ce76:	4618      	mov	r0, r3
 800ce78:	3740      	adds	r7, #64	@ 0x40
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}
 800ce7e:	bf00      	nop
 800ce80:	08025cf4 	.word	0x08025cf4

0800ce84 <xGetLinkLocalAddress>:
 *
 * @return pdPASS in case a link-local address was found, otherwise pdFAIL.
 */
    static BaseType_t xGetLinkLocalAddress( const NetworkInterface_t * pxInterface,
                                            IPv6_Address_t * pxAddress )
    {
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b084      	sub	sp, #16
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFAIL;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	60fb      	str	r3, [r7, #12]
        NetworkEndPoint_t * pxEndPoint;

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f000 fe48 	bl	800db28 <FreeRTOS_FirstEndPoint>
 800ce98:	60b8      	str	r0, [r7, #8]
 800ce9a:	e01a      	b.n	800ced2 <xGetLinkLocalAddress+0x4e>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
        {
            /* Check if it has the link-local prefix FE80::/10 */
            if( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 0 ] == 0xfeU ) &&
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800cea2:	2bfe      	cmp	r3, #254	@ 0xfe
 800cea4:	d110      	bne.n	800cec8 <xGetLinkLocalAddress+0x44>
                ( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 1 ] & 0xc0U ) == 0x80U ) )
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800ceac:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
            if( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 0 ] == 0xfeU ) &&
 800ceb0:	2b80      	cmp	r3, #128	@ 0x80
 800ceb2:	d109      	bne.n	800cec8 <xGetLinkLocalAddress+0x44>
            {
                ( void ) memcpy( pxAddress->ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800ceb4:	6838      	ldr	r0, [r7, #0]
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	3338      	adds	r3, #56	@ 0x38
 800ceba:	2210      	movs	r2, #16
 800cebc:	4619      	mov	r1, r3
 800cebe:	f015 fe8d 	bl	8022bdc <memcpy>
                xResult = pdPASS;
 800cec2:	2301      	movs	r3, #1
 800cec4:	60fb      	str	r3, [r7, #12]
                break;
 800cec6:	e007      	b.n	800ced8 <xGetLinkLocalAddress+0x54>
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800cec8:	68b9      	ldr	r1, [r7, #8]
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f000 fe4e 	bl	800db6c <FreeRTOS_NextEndPoint>
 800ced0:	60b8      	str	r0, [r7, #8]
             pxEndPoint != NULL;
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d1e1      	bne.n	800ce9c <xGetLinkLocalAddress+0x18>
            }
        }

        return xResult;
 800ced8:	68fb      	ldr	r3, [r7, #12]
    }
 800ceda:	4618      	mov	r0, r3
 800cedc:	3710      	adds	r7, #16
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}
	...

0800cee4 <vNDSendRouterSolicitation>:
 * @param[in] pxIPAddress The target address, normally ff02::2
 *
 */
    void vNDSendRouterSolicitation( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                    IPv6_Address_t * pxIPAddress )
    {
 800cee4:	b5b0      	push	{r4, r5, r7, lr}
 800cee6:	b090      	sub	sp, #64	@ 0x40
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	6039      	str	r1, [r7, #0]
        ICMPPacket_IPv6_t * pxICMPPacket;
        ICMPRouterSolicitation_IPv6_t * xRASolicitationRequest;
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cef2:	63bb      	str	r3, [r7, #56]	@ 0x38
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPRouterSolicitation_IPv6_t );
 800cef4:	233e      	movs	r3, #62	@ 0x3e
 800cef6:	637b      	str	r3, [r7, #52]	@ 0x34
        MACAddress_t xMultiCastMacAddress;
        NetworkBufferDescriptor_t * pxDescriptor = pxNetworkBuffer;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        IPv6_Address_t xSourceAddress;
        BaseType_t xHasLocal;
        NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 800cefc:	2300      	movs	r3, #0
 800cefe:	633b      	str	r3, [r7, #48]	@ 0x30

        configASSERT( pxEndPoint != NULL );
 800cf00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d103      	bne.n	800cf0e <vNDSendRouterSolicitation+0x2a>
 800cf06:	218f      	movs	r1, #143	@ 0x8f
 800cf08:	4852      	ldr	r0, [pc, #328]	@ (800d054 <vNDSendRouterSolicitation+0x170>)
 800cf0a:	f7f4 fd7d 	bl	8001a08 <vAssertCalled>
        configASSERT( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED );
 800cf0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf10:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800cf14:	f003 0304 	and.w	r3, r3, #4
 800cf18:	b2db      	uxtb	r3, r3
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d103      	bne.n	800cf26 <vNDSendRouterSolicitation+0x42>
 800cf1e:	2190      	movs	r1, #144	@ 0x90
 800cf20:	484c      	ldr	r0, [pc, #304]	@ (800d054 <vNDSendRouterSolicitation+0x170>)
 800cf22:	f7f4 fd71 	bl	8001a08 <vAssertCalled>

        xHasLocal = xGetLinkLocalAddress( pxEndPoint->pxNetworkInterface, &( xSourceAddress ) );
 800cf26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf28:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800cf2c:	f107 020c 	add.w	r2, r7, #12
 800cf30:	4611      	mov	r1, r2
 800cf32:	4618      	mov	r0, r3
 800cf34:	f7ff ffa6 	bl	800ce84 <xGetLinkLocalAddress>
 800cf38:	62f8      	str	r0, [r7, #44]	@ 0x2c

        if( xHasLocal == pdFAIL )
 800cf3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d10a      	bne.n	800cf56 <vNDSendRouterSolicitation+0x72>
        {
            FreeRTOS_printf( ( "RA: can not find a Link-local address\n" ) );
 800cf40:	4845      	ldr	r0, [pc, #276]	@ (800d058 <vNDSendRouterSolicitation+0x174>)
 800cf42:	f015 fc2f 	bl	80227a4 <lUDPLoggingPrintf>
            ( void ) memset( xSourceAddress.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800cf46:	f107 030c 	add.w	r3, r7, #12
 800cf4a:	2210      	movs	r2, #16
 800cf4c:	2100      	movs	r1, #0
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f015 ff51 	bl	8022df6 <memset>
 800cf54:	e005      	b.n	800cf62 <vNDSendRouterSolicitation+0x7e>
        }
        else
        {
            FreeRTOS_printf( ( "RA: source %pip\n", ( void * ) xSourceAddress.ucBytes ) );
 800cf56:	f107 030c 	add.w	r3, r7, #12
 800cf5a:	4619      	mov	r1, r3
 800cf5c:	483f      	ldr	r0, [pc, #252]	@ (800d05c <vNDSendRouterSolicitation+0x178>)
 800cf5e:	f015 fc21 	bl	80227a4 <lUDPLoggingPrintf>
        }

        if( pxDescriptor->xDataLength < uxNeededSize )
 800cf62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	d909      	bls.n	800cf80 <vNDSendRouterSolicitation+0x9c>
        {
            pxNewDescriptor = pxDuplicateNetworkBufferWithDescriptor( pxDescriptor, uxNeededSize );
 800cf6c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cf6e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cf70:	f7fd fcf4 	bl	800a95c <pxDuplicateNetworkBufferWithDescriptor>
 800cf74:	6338      	str	r0, [r7, #48]	@ 0x30
            vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800cf76:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cf78:	f00a fd6c 	bl	8017a54 <vReleaseNetworkBufferAndDescriptor>
            pxDescriptor = pxNewDescriptor;
 800cf7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        if( pxDescriptor != NULL )
 800cf80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d062      	beq.n	800d04c <vNDSendRouterSolicitation+0x168>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxDescriptor->pucEthernetBuffer );
 800cf86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf8a:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            xRASolicitationRequest = ( ( ICMPRouterSolicitation_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800cf8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf8e:	3336      	adds	r3, #54	@ 0x36
 800cf90:	627b      	str	r3, [r7, #36]	@ 0x24

            pxDescriptor->xDataLength = uxNeededSize;
 800cf92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cf96:	629a      	str	r2, [r3, #40]	@ 0x28

            ( void ) eNDGetCacheEntry( pxIPAddress, &( xMultiCastMacAddress ), NULL );
 800cf98:	f107 031c 	add.w	r3, r7, #28
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	4619      	mov	r1, r3
 800cfa0:	6838      	ldr	r0, [r7, #0]
 800cfa2:	f7ff f87b 	bl	800c09c <eNDGetCacheEntry>

            /* Set Ethernet header. Will be swapped. */
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, xMultiCastMacAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800cfa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfa8:	3306      	adds	r3, #6
 800cfaa:	461a      	mov	r2, r3
 800cfac:	f107 031c 	add.w	r3, r7, #28
 800cfb0:	6818      	ldr	r0, [r3, #0]
 800cfb2:	6010      	str	r0, [r2, #0]
 800cfb4:	889b      	ldrh	r3, [r3, #4]
 800cfb6:	8093      	strh	r3, [r2, #4]
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800cfb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfbc:	33e8      	adds	r3, #232	@ 0xe8
 800cfbe:	2206      	movs	r2, #6
 800cfc0:	4619      	mov	r1, r3
 800cfc2:	f015 fe0b 	bl	8022bdc <memcpy>
            pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800cfc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfc8:	2200      	movs	r2, #0
 800cfca:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800cfce:	731a      	strb	r2, [r3, #12]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800cfd6:	735a      	strb	r2, [r3, #13]

            /* Set IP-header. */
            pxICMPPacket->xIPHeader.ucVersionTrafficClass = raDEFAULT_VERSION_TRAFFIC_CLASS;
 800cfd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfda:	2260      	movs	r2, #96	@ 0x60
 800cfdc:	739a      	strb	r2, [r3, #14]
            pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0U;
 800cfde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	73da      	strb	r2, [r3, #15]
            pxICMPPacket->xIPHeader.usFlowLabel = 0U;
 800cfe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	741a      	strb	r2, [r3, #16]
 800cfea:	2200      	movs	r2, #0
 800cfec:	745a      	strb	r2, [r3, #17]
            pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( sizeof( ICMPRouterSolicitation_IPv6_t ) );
 800cfee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cff0:	2200      	movs	r2, #0
 800cff2:	749a      	strb	r2, [r3, #18]
 800cff4:	2200      	movs	r2, #0
 800cff6:	f042 0208 	orr.w	r2, r2, #8
 800cffa:	74da      	strb	r2, [r3, #19]
            pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800cffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cffe:	223a      	movs	r2, #58	@ 0x3a
 800d000:	751a      	strb	r2, [r3, #20]
            pxICMPPacket->xIPHeader.ucHopLimit = raDEFAULT_HOP_LIMIT;
 800d002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d004:	22ff      	movs	r2, #255	@ 0xff
 800d006:	755a      	strb	r2, [r3, #21]

            /* Normally, the source address is set as 'ipv6_settings.xIPAddress'.
             * But is some routers will not accept a public IP-address, the original
             * default address will be used. It must be a link-local address. */
            ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800d008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d00a:	3316      	adds	r3, #22
 800d00c:	461d      	mov	r5, r3
 800d00e:	f107 040c 	add.w	r4, r7, #12
 800d012:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d014:	6028      	str	r0, [r5, #0]
 800d016:	6069      	str	r1, [r5, #4]
 800d018:	60aa      	str	r2, [r5, #8]
 800d01a:	60eb      	str	r3, [r5, #12]

            ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800d01c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d01e:	3326      	adds	r3, #38	@ 0x26
 800d020:	6839      	ldr	r1, [r7, #0]
 800d022:	2210      	movs	r2, #16
 800d024:	4618      	mov	r0, r3
 800d026:	f015 fdd9 	bl	8022bdc <memcpy>

            /* Set ICMP header. */
            ( void ) memset( xRASolicitationRequest, 0, sizeof( *xRASolicitationRequest ) );
 800d02a:	2208      	movs	r2, #8
 800d02c:	2100      	movs	r1, #0
 800d02e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d030:	f015 fee1 	bl	8022df6 <memset>
            xRASolicitationRequest->ucTypeOfMessage = ipICMP_ROUTER_SOLICITATION_IPv6;
 800d034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d036:	2285      	movs	r2, #133	@ 0x85
 800d038:	701a      	strb	r2, [r3, #0]
            }
            #else
            {
                /* Many EMAC peripherals will only calculate the ICMP checksum
                 * correctly if the field is nulled beforehand. */
                xRASolicitationRequest->usChecksum = 0U;
 800d03a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d03c:	2200      	movs	r2, #0
 800d03e:	709a      	strb	r2, [r3, #2]
 800d040:	2200      	movs	r2, #0
 800d042:	70da      	strb	r2, [r3, #3]
            }
            #endif

            /* This function will fill in the eth addresses and send the packet */
            vReturnEthernetFrame( pxDescriptor, pdTRUE );
 800d044:	2101      	movs	r1, #1
 800d046:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d048:	f7fd f8d6 	bl	800a1f8 <vReturnEthernetFrame>
        }
    }
 800d04c:	bf00      	nop
 800d04e:	3740      	adds	r7, #64	@ 0x40
 800d050:	46bd      	mov	sp, r7
 800d052:	bdb0      	pop	{r4, r5, r7, pc}
 800d054:	08025d20 	.word	0x08025d20
 800d058:	08025d4c 	.word	0x08025d4c
 800d05c:	08025d74 	.word	0x08025d74

0800d060 <vReceiveNA>:
 * @brief Receive a NA ( Neighbour Advertisement ) message to see if a chosen IP-address is already in use.
 *
 * @param[in] pxNetworkBuffer The buffer that contains the message.
 */
    void vReceiveNA( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800d060:	b580      	push	{r7, lr}
 800d062:	b086      	sub	sp, #24
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
        const NetworkInterface_t * pxInterface = pxNetworkBuffer->pxInterface;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d06c:	613b      	str	r3, [r7, #16]
        NetworkEndPoint_t * pxPoint;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ICMPPacket_IPv6_t * pxICMPPacket = ( ( const ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d072:	60fb      	str	r3, [r7, #12]
        const ICMPHeader_IPv6_t * pxICMPHeader_IPv6 = ( ( const ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	3336      	adds	r3, #54	@ 0x36
 800d078:	60bb      	str	r3, [r7, #8]

        for( pxPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800d07a:	6938      	ldr	r0, [r7, #16]
 800d07c:	f000 fd54 	bl	800db28 <FreeRTOS_FirstEndPoint>
 800d080:	6178      	str	r0, [r7, #20]
 800d082:	e028      	b.n	800d0d6 <vReceiveNA+0x76>
             pxPoint != NULL;
             pxPoint = FreeRTOS_NextEndPoint( pxInterface, pxPoint ) )
        {
            if( ( pxPoint->bits.bWantRA != pdFALSE_UNSIGNED ) && ( pxPoint->xRAData.eRAState == eRAStateIPWait ) )
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d08a:	f003 0302 	and.w	r3, r3, #2
 800d08e:	b2db      	uxtb	r3, r3
 800d090:	2b00      	cmp	r3, #0
 800d092:	d01b      	beq.n	800d0cc <vReceiveNA+0x6c>
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800d09a:	2b03      	cmp	r3, #3
 800d09c:	d116      	bne.n	800d0cc <vReceiveNA+0x6c>
            {
                if( memcmp( pxPoint->ipv6_settings.xIPAddress.ucBytes, pxICMPHeader_IPv6->xIPv6Address.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	3308      	adds	r3, #8
 800d0a8:	2210      	movs	r2, #16
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	f016 fd2b 	bl	8023b06 <memcmp>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d10a      	bne.n	800d0cc <vReceiveNA+0x6c>
                {
                    pxPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800d0b6:	697a      	ldr	r2, [r7, #20]
 800d0b8:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d0bc:	f043 0302 	orr.w	r3, r3, #2
 800d0c0:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                    vDHCP_RATimerReload( pxPoint, 100U );
 800d0c4:	2164      	movs	r1, #100	@ 0x64
 800d0c6:	6978      	ldr	r0, [r7, #20]
 800d0c8:	f7fd fb3e 	bl	800a748 <vDHCP_RATimerReload>
             pxPoint = FreeRTOS_NextEndPoint( pxInterface, pxPoint ) )
 800d0cc:	6979      	ldr	r1, [r7, #20]
 800d0ce:	6938      	ldr	r0, [r7, #16]
 800d0d0:	f000 fd4c 	bl	800db6c <FreeRTOS_NextEndPoint>
 800d0d4:	6178      	str	r0, [r7, #20]
             pxPoint != NULL;
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d1d3      	bne.n	800d084 <vReceiveNA+0x24>
                }
            }
        }
    }
 800d0dc:	bf00      	nop
 800d0de:	bf00      	nop
 800d0e0:	3718      	adds	r7, #24
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}
	...

0800d0e8 <vReceiveRA_ReadReply>:
 *
 * @returns Returns the ICMP prefix option pointer, pointing to its location in the
 *          input RA reply message buffer.
 */
    static ICMPPrefixOption_IPv6_t * vReceiveRA_ReadReply( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800d0e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0ea:	b091      	sub	sp, #68	@ 0x44
 800d0ec:	af04      	add	r7, sp, #16
 800d0ee:	6078      	str	r0, [r7, #4]
        size_t uxIndex = 0U;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const size_t uxICMPSize = sizeof( ICMPRouterAdvertisement_IPv6_t );
 800d0f4:	2310      	movs	r3, #16
 800d0f6:	627b      	str	r3, [r7, #36]	@ 0x24
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize;
 800d0f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0fa:	3336      	adds	r3, #54	@ 0x36
 800d0fc:	623b      	str	r3, [r7, #32]
        /* uxLast points to the first byte after the buffer. */
        const size_t uxLast = pxNetworkBuffer->xDataLength - uxNeededSize;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d102:	6a3b      	ldr	r3, [r7, #32]
 800d104:	1ad3      	subs	r3, r2, r3
 800d106:	61fb      	str	r3, [r7, #28]
        uint8_t * pucBytes = &( pxNetworkBuffer->pucEthernetBuffer[ uxNeededSize ] );
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d10c:	6a3b      	ldr	r3, [r7, #32]
 800d10e:	4413      	add	r3, r2
 800d110:	61bb      	str	r3, [r7, #24]
        ICMPPrefixOption_IPv6_t * pxPrefixOption = NULL;
 800d112:	2300      	movs	r3, #0
 800d114:	62bb      	str	r3, [r7, #40]	@ 0x28

        while( ( uxIndex + 1U ) < uxLast )
 800d116:	e0b2      	b.n	800d27e <vReceiveRA_ReadReply+0x196>
        {
            uint8_t ucType = pucBytes[ uxIndex ];
 800d118:	69ba      	ldr	r2, [r7, #24]
 800d11a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d11c:	4413      	add	r3, r2
 800d11e:	781b      	ldrb	r3, [r3, #0]
 800d120:	75fb      	strb	r3, [r7, #23]
            size_t uxPrefixLength = ( size_t ) pucBytes[ uxIndex + 1U ];
 800d122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d124:	3301      	adds	r3, #1
 800d126:	69ba      	ldr	r2, [r7, #24]
 800d128:	4413      	add	r3, r2
 800d12a:	781b      	ldrb	r3, [r3, #0]
 800d12c:	613b      	str	r3, [r7, #16]
            size_t uxLength = uxPrefixLength * 8U;
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	00db      	lsls	r3, r3, #3
 800d132:	60fb      	str	r3, [r7, #12]

            if( uxPrefixLength == 0U )
 800d134:	693b      	ldr	r3, [r7, #16]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d103      	bne.n	800d142 <vReceiveRA_ReadReply+0x5a>
            {
                /* According to RFC 4861, length of the option value 0 is invalid. Hence returning from here */
                FreeRTOS_printf( ( "RA: Invalid length of the option value as zero. " ) );
 800d13a:	4856      	ldr	r0, [pc, #344]	@ (800d294 <vReceiveRA_ReadReply+0x1ac>)
 800d13c:	f015 fb32 	bl	80227a4 <lUDPLoggingPrintf>
                break;
 800d140:	e0a3      	b.n	800d28a <vReceiveRA_ReadReply+0x1a2>
            }

            if( uxLast < ( uxIndex + uxLength ) )
 800d142:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	4413      	add	r3, r2
 800d148:	69fa      	ldr	r2, [r7, #28]
 800d14a:	429a      	cmp	r2, r3
 800d14c:	d208      	bcs.n	800d160 <vReceiveRA_ReadReply+0x78>
            {
                FreeRTOS_printf( ( "RA: Not enough bytes ( %u > %u )\n", ( unsigned ) ( uxIndex + uxLength ), ( unsigned ) uxLast ) );
 800d14e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	4413      	add	r3, r2
 800d154:	69fa      	ldr	r2, [r7, #28]
 800d156:	4619      	mov	r1, r3
 800d158:	484f      	ldr	r0, [pc, #316]	@ (800d298 <vReceiveRA_ReadReply+0x1b0>)
 800d15a:	f015 fb23 	bl	80227a4 <lUDPLoggingPrintf>
                break;
 800d15e:	e094      	b.n	800d28a <vReceiveRA_ReadReply+0x1a2>
            }

            switch( ucType )
 800d160:	7dfb      	ldrb	r3, [r7, #23]
 800d162:	3b01      	subs	r3, #1
 800d164:	2b04      	cmp	r3, #4
 800d166:	d87f      	bhi.n	800d268 <vReceiveRA_ReadReply+0x180>
 800d168:	a201      	add	r2, pc, #4	@ (adr r2, 800d170 <vReceiveRA_ReadReply+0x88>)
 800d16a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d16e:	bf00      	nop
 800d170:	0800d185 	.word	0x0800d185
 800d174:	0800d275 	.word	0x0800d275
 800d178:	0800d1df 	.word	0x0800d1df
 800d17c:	0800d275 	.word	0x0800d275
 800d180:	0800d24f 	.word	0x0800d24f
            {
                case ndICMP_SOURCE_LINK_LAYER_ADDRESS: /* 1 */
                    FreeRTOS_printf( ( "RA: Source = %02x-%02x-%02x-%02x-%02x-%02x\n",
 800d184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d186:	3302      	adds	r3, #2
 800d188:	69ba      	ldr	r2, [r7, #24]
 800d18a:	4413      	add	r3, r2
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	461c      	mov	r4, r3
 800d190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d192:	3303      	adds	r3, #3
 800d194:	69ba      	ldr	r2, [r7, #24]
 800d196:	4413      	add	r3, r2
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	461d      	mov	r5, r3
 800d19c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d19e:	3304      	adds	r3, #4
 800d1a0:	69ba      	ldr	r2, [r7, #24]
 800d1a2:	4413      	add	r3, r2
 800d1a4:	781b      	ldrb	r3, [r3, #0]
 800d1a6:	461e      	mov	r6, r3
 800d1a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1aa:	3305      	adds	r3, #5
 800d1ac:	69ba      	ldr	r2, [r7, #24]
 800d1ae:	4413      	add	r3, r2
 800d1b0:	781b      	ldrb	r3, [r3, #0]
 800d1b2:	4619      	mov	r1, r3
 800d1b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1b6:	3306      	adds	r3, #6
 800d1b8:	69ba      	ldr	r2, [r7, #24]
 800d1ba:	4413      	add	r3, r2
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	4618      	mov	r0, r3
 800d1c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1c2:	3307      	adds	r3, #7
 800d1c4:	69ba      	ldr	r2, [r7, #24]
 800d1c6:	4413      	add	r3, r2
 800d1c8:	781b      	ldrb	r3, [r3, #0]
 800d1ca:	9302      	str	r3, [sp, #8]
 800d1cc:	9001      	str	r0, [sp, #4]
 800d1ce:	9100      	str	r1, [sp, #0]
 800d1d0:	4633      	mov	r3, r6
 800d1d2:	462a      	mov	r2, r5
 800d1d4:	4621      	mov	r1, r4
 800d1d6:	4831      	ldr	r0, [pc, #196]	@ (800d29c <vReceiveRA_ReadReply+0x1b4>)
 800d1d8:	f015 fae4 	bl	80227a4 <lUDPLoggingPrintf>
                                       pucBytes[ uxIndex + 3U ],
                                       pucBytes[ uxIndex + 4U ],
                                       pucBytes[ uxIndex + 5U ],
                                       pucBytes[ uxIndex + 6U ],
                                       pucBytes[ uxIndex + 7U ] ) );
                    break;
 800d1dc:	e04b      	b.n	800d276 <vReceiveRA_ReadReply+0x18e>

                case ndICMP_PREFIX_INFORMATION: /* 3 */
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxPrefixOption = ( ( ICMPPrefixOption_IPv6_t * ) &( pucBytes[ uxIndex ] ) );
 800d1de:	69ba      	ldr	r2, [r7, #24]
 800d1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1e2:	4413      	add	r3, r2
 800d1e4:	62bb      	str	r3, [r7, #40]	@ 0x28

                    FreeRTOS_printf( ( "RA: Prefix len %d Life %u, %u (%pip)\n",
 800d1e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1e8:	789b      	ldrb	r3, [r3, #2]
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1ee:	685b      	ldr	r3, [r3, #4]
 800d1f0:	061a      	lsls	r2, r3, #24
 800d1f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	021b      	lsls	r3, r3, #8
 800d1f8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d1fc:	431a      	orrs	r2, r3
 800d1fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d200:	685b      	ldr	r3, [r3, #4]
 800d202:	0a1b      	lsrs	r3, r3, #8
 800d204:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d208:	431a      	orrs	r2, r3
 800d20a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d20c:	685b      	ldr	r3, [r3, #4]
 800d20e:	0e1b      	lsrs	r3, r3, #24
 800d210:	ea42 0103 	orr.w	r1, r2, r3
 800d214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d216:	689b      	ldr	r3, [r3, #8]
 800d218:	061a      	lsls	r2, r3, #24
 800d21a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d21c:	689b      	ldr	r3, [r3, #8]
 800d21e:	021b      	lsls	r3, r3, #8
 800d220:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d224:	431a      	orrs	r2, r3
 800d226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d228:	689b      	ldr	r3, [r3, #8]
 800d22a:	0a1b      	lsrs	r3, r3, #8
 800d22c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d230:	431a      	orrs	r2, r3
 800d232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d234:	689b      	ldr	r3, [r3, #8]
 800d236:	0e1b      	lsrs	r3, r3, #24
 800d238:	431a      	orrs	r2, r3
 800d23a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d23c:	3310      	adds	r3, #16
 800d23e:	9300      	str	r3, [sp, #0]
 800d240:	4613      	mov	r3, r2
 800d242:	460a      	mov	r2, r1
 800d244:	4601      	mov	r1, r0
 800d246:	4816      	ldr	r0, [pc, #88]	@ (800d2a0 <vReceiveRA_ReadReply+0x1b8>)
 800d248:	f015 faac 	bl	80227a4 <lUDPLoggingPrintf>
                                       pxPrefixOption->ucPrefixLength,
                                       ( unsigned ) FreeRTOS_ntohl( pxPrefixOption->ulValidLifeTime ),
                                       ( unsigned ) FreeRTOS_ntohl( pxPrefixOption->ulPreferredLifeTime ),
                                       ( void * ) pxPrefixOption->ucPrefix ) );
                    break;
 800d24c:	e013      	b.n	800d276 <vReceiveRA_ReadReply+0x18e>
                   {
                       uint32_t ulMTU;
                       ( void ) ulMTU;

                       /* ulChar2u32 returns host-endian numbers. */
                       ulMTU = ulChar2u32( &( pucBytes[ uxIndex + 4U ] ) );
 800d24e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d250:	3304      	adds	r3, #4
 800d252:	69ba      	ldr	r2, [r7, #24]
 800d254:	4413      	add	r3, r2
 800d256:	4618      	mov	r0, r3
 800d258:	f7fd fe60 	bl	800af1c <ulChar2u32>
 800d25c:	60b8      	str	r0, [r7, #8]
                       FreeRTOS_printf( ( "RA: MTU = %u\n", ( unsigned int ) ulMTU ) );
 800d25e:	68b9      	ldr	r1, [r7, #8]
 800d260:	4810      	ldr	r0, [pc, #64]	@ (800d2a4 <vReceiveRA_ReadReply+0x1bc>)
 800d262:	f015 fa9f 	bl	80227a4 <lUDPLoggingPrintf>
                   }
                   break;
 800d266:	e006      	b.n	800d276 <vReceiveRA_ReadReply+0x18e>

                default:
                    FreeRTOS_printf( ( "RA: Type 0x%02x not implemented\n", ucType ) );
 800d268:	7dfb      	ldrb	r3, [r7, #23]
 800d26a:	4619      	mov	r1, r3
 800d26c:	480e      	ldr	r0, [pc, #56]	@ (800d2a8 <vReceiveRA_ReadReply+0x1c0>)
 800d26e:	f015 fa99 	bl	80227a4 <lUDPLoggingPrintf>
                    break;
 800d272:	e000      	b.n	800d276 <vReceiveRA_ReadReply+0x18e>
                    break;
 800d274:	bf00      	nop
            }

            uxIndex = uxIndex + uxLength;
 800d276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	4413      	add	r3, r2
 800d27c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( ( uxIndex + 1U ) < uxLast )
 800d27e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d280:	3301      	adds	r3, #1
 800d282:	69fa      	ldr	r2, [r7, #28]
 800d284:	429a      	cmp	r2, r3
 800d286:	f63f af47 	bhi.w	800d118 <vReceiveRA_ReadReply+0x30>
        } /* while( ( uxIndex + 1 ) < uxLast ) */

        return pxPrefixOption;
 800d28a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
 800d28c:	4618      	mov	r0, r3
 800d28e:	3734      	adds	r7, #52	@ 0x34
 800d290:	46bd      	mov	sp, r7
 800d292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d294:	08025d88 	.word	0x08025d88
 800d298:	08025dbc 	.word	0x08025dbc
 800d29c:	08025de0 	.word	0x08025de0
 800d2a0:	08025e0c 	.word	0x08025e0c
 800d2a4:	08025e34 	.word	0x08025e34
 800d2a8:	08025e44 	.word	0x08025e44

0800d2ac <vReceiveRA>:
 *        already exists that uses the same IP-address.
 *
 * @param[in] pxNetworkBuffer The buffer that contains the message.
 */
    void vReceiveRA( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800d2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2ae:	b08d      	sub	sp, #52	@ 0x34
 800d2b0:	af04      	add	r7, sp, #16
 800d2b2:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ICMPPacket_IPv6_t * pxICMPPacket = ( ( const ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2b8:	61bb      	str	r3, [r7, #24]
        const ICMPPrefixOption_IPv6_t * pxPrefixOption = NULL;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	617b      	str	r3, [r7, #20]
        const size_t uxICMPSize = sizeof( ICMPRouterAdvertisement_IPv6_t );
 800d2be:	2310      	movs	r3, #16
 800d2c0:	613b      	str	r3, [r7, #16]
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize;
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	3336      	adds	r3, #54	@ 0x36
 800d2c6:	60fb      	str	r3, [r7, #12]

        /* A Router Advertisement was received, handle it here. */
        if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2cc:	68fa      	ldr	r2, [r7, #12]
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	d903      	bls.n	800d2da <vReceiveRA+0x2e>
        {
            FreeRTOS_printf( ( "vReceiveRA: The buffer provided is too small\n" ) );
 800d2d2:	485b      	ldr	r0, [pc, #364]	@ (800d440 <vReceiveRA+0x194>)
 800d2d4:	f015 fa66 	bl	80227a4 <lUDPLoggingPrintf>
            else
            {
                /* The life-time field contains zero. */
            }
        }
    }
 800d2d8:	e0ae      	b.n	800d438 <vReceiveRA+0x18c>
            const ICMPRouterAdvertisement_IPv6_t * pxAdvertisement = ( ( const ICMPRouterAdvertisement_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800d2da:	69bb      	ldr	r3, [r7, #24]
 800d2dc:	3336      	adds	r3, #54	@ 0x36
 800d2de:	60bb      	str	r3, [r7, #8]
            FreeRTOS_printf( ( "RA: Type %02x Srv %02x Checksum %04x Hops %d Flags %02x Life %d\n",
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	781b      	ldrb	r3, [r3, #0]
 800d2e4:	461c      	mov	r4, r3
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	785b      	ldrb	r3, [r3, #1]
 800d2ea:	461d      	mov	r5, r3
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	885b      	ldrh	r3, [r3, #2]
 800d2f0:	b29b      	uxth	r3, r3
 800d2f2:	021b      	lsls	r3, r3, #8
 800d2f4:	b21a      	sxth	r2, r3
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	885b      	ldrh	r3, [r3, #2]
 800d2fa:	b29b      	uxth	r3, r3
 800d2fc:	0a1b      	lsrs	r3, r3, #8
 800d2fe:	b29b      	uxth	r3, r3
 800d300:	b21b      	sxth	r3, r3
 800d302:	4313      	orrs	r3, r2
 800d304:	b21b      	sxth	r3, r3
 800d306:	b29b      	uxth	r3, r3
 800d308:	461e      	mov	r6, r3
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	791b      	ldrb	r3, [r3, #4]
 800d30e:	4619      	mov	r1, r3
 800d310:	68bb      	ldr	r3, [r7, #8]
 800d312:	795b      	ldrb	r3, [r3, #5]
 800d314:	4618      	mov	r0, r3
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	88db      	ldrh	r3, [r3, #6]
 800d31a:	b29b      	uxth	r3, r3
 800d31c:	021b      	lsls	r3, r3, #8
 800d31e:	b21a      	sxth	r2, r3
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	88db      	ldrh	r3, [r3, #6]
 800d324:	b29b      	uxth	r3, r3
 800d326:	0a1b      	lsrs	r3, r3, #8
 800d328:	b29b      	uxth	r3, r3
 800d32a:	b21b      	sxth	r3, r3
 800d32c:	4313      	orrs	r3, r2
 800d32e:	b21b      	sxth	r3, r3
 800d330:	b29b      	uxth	r3, r3
 800d332:	9302      	str	r3, [sp, #8]
 800d334:	9001      	str	r0, [sp, #4]
 800d336:	9100      	str	r1, [sp, #0]
 800d338:	4633      	mov	r3, r6
 800d33a:	462a      	mov	r2, r5
 800d33c:	4621      	mov	r1, r4
 800d33e:	4841      	ldr	r0, [pc, #260]	@ (800d444 <vReceiveRA+0x198>)
 800d340:	f015 fa30 	bl	80227a4 <lUDPLoggingPrintf>
            if( pxAdvertisement->usLifetime != 0U )
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	88db      	ldrh	r3, [r3, #6]
 800d348:	b29b      	uxth	r3, r3
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d074      	beq.n	800d438 <vReceiveRA+0x18c>
                pxPrefixOption = vReceiveRA_ReadReply( pxNetworkBuffer );
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f7ff feca 	bl	800d0e8 <vReceiveRA_ReadReply>
 800d354:	6178      	str	r0, [r7, #20]
                configASSERT( pxNetworkBuffer->pxInterface != NULL );
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d104      	bne.n	800d368 <vReceiveRA+0xbc>
 800d35e:	f240 118b 	movw	r1, #395	@ 0x18b
 800d362:	4839      	ldr	r0, [pc, #228]	@ (800d448 <vReceiveRA+0x19c>)
 800d364:	f7f4 fb50 	bl	8001a08 <vAssertCalled>
                if( pxPrefixOption != NULL )
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d064      	beq.n	800d438 <vReceiveRA+0x18c>
                    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxNetworkBuffer->pxInterface );
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d372:	4618      	mov	r0, r3
 800d374:	f000 fbd8 	bl	800db28 <FreeRTOS_FirstEndPoint>
 800d378:	61f8      	str	r0, [r7, #28]
 800d37a:	e05a      	b.n	800d432 <vReceiveRA+0x186>
                        if( ( pxEndPoint->bits.bWantRA != pdFALSE_UNSIGNED ) && ( pxEndPoint->xRAData.eRAState == eRAStateWait ) )
 800d37c:	69fb      	ldr	r3, [r7, #28]
 800d37e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d382:	f003 0302 	and.w	r3, r3, #2
 800d386:	b2db      	uxtb	r3, r3
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d04b      	beq.n	800d424 <vReceiveRA+0x178>
 800d38c:	69fb      	ldr	r3, [r7, #28]
 800d38e:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800d392:	2b01      	cmp	r3, #1
 800d394:	d146      	bne.n	800d424 <vReceiveRA+0x178>
                            pxEndPoint->ipv6_settings.uxPrefixLength = pxPrefixOption->ucPrefixLength;
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	789b      	ldrb	r3, [r3, #2]
 800d39a:	461a      	mov	r2, r3
 800d39c:	69fb      	ldr	r3, [r7, #28]
 800d39e:	649a      	str	r2, [r3, #72]	@ 0x48
                            ( void ) memcpy( pxEndPoint->ipv6_settings.xPrefix.ucBytes, pxPrefixOption->ucPrefix, ipSIZE_OF_IPv6_ADDRESS );
 800d3a0:	69fb      	ldr	r3, [r7, #28]
 800d3a2:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	3310      	adds	r3, #16
 800d3aa:	2210      	movs	r2, #16
 800d3ac:	4619      	mov	r1, r3
 800d3ae:	f015 fc15 	bl	8022bdc <memcpy>
                            ( void ) memcpy( pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800d3b2:	69fb      	ldr	r3, [r7, #28]
 800d3b4:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
 800d3b8:	69bb      	ldr	r3, [r7, #24]
 800d3ba:	3316      	adds	r3, #22
 800d3bc:	2210      	movs	r2, #16
 800d3be:	4619      	mov	r1, r3
 800d3c0:	f015 fc0c 	bl	8022bdc <memcpy>
                            pxEndPoint->xRAData.bits.bRouterReplied = pdTRUE_UNSIGNED;
 800d3c4:	69fa      	ldr	r2, [r7, #28]
 800d3c6:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d3ca:	f043 0301 	orr.w	r3, r3, #1
 800d3ce:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                            pxEndPoint->xRAData.uxRetryCount = 0U;
 800d3d2:	69fb      	ldr	r3, [r7, #28]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                            pxEndPoint->xRAData.ulPreferredLifeTime = FreeRTOS_ntohl( pxPrefixOption->ulPreferredLifeTime );
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	689b      	ldr	r3, [r3, #8]
 800d3de:	061a      	lsls	r2, r3, #24
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	689b      	ldr	r3, [r3, #8]
 800d3e4:	021b      	lsls	r3, r3, #8
 800d3e6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d3ea:	431a      	orrs	r2, r3
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	689b      	ldr	r3, [r3, #8]
 800d3f0:	0a1b      	lsrs	r3, r3, #8
 800d3f2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d3f6:	431a      	orrs	r2, r3
 800d3f8:	697b      	ldr	r3, [r7, #20]
 800d3fa:	689b      	ldr	r3, [r3, #8]
 800d3fc:	0e1b      	lsrs	r3, r3, #24
 800d3fe:	431a      	orrs	r2, r3
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                            pxEndPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800d406:	69fa      	ldr	r2, [r7, #28]
 800d408:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d40c:	f043 0302 	orr.w	r3, r3, #2
 800d410:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                            pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800d414:	69fb      	ldr	r3, [r7, #28]
 800d416:	2202      	movs	r2, #2
 800d418:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                            vRAProcess( pdFALSE, pxEndPoint );
 800d41c:	69f9      	ldr	r1, [r7, #28]
 800d41e:	2000      	movs	r0, #0
 800d420:	f000 f9b6 	bl	800d790 <vRAProcess>
                         pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkBuffer->pxInterface, pxEndPoint ) )
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d428:	69f9      	ldr	r1, [r7, #28]
 800d42a:	4618      	mov	r0, r3
 800d42c:	f000 fb9e 	bl	800db6c <FreeRTOS_NextEndPoint>
 800d430:	61f8      	str	r0, [r7, #28]
                         pxEndPoint != NULL;
 800d432:	69fb      	ldr	r3, [r7, #28]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d1a1      	bne.n	800d37c <vReceiveRA+0xd0>
    }
 800d438:	bf00      	nop
 800d43a:	3724      	adds	r7, #36	@ 0x24
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d440:	08025e68 	.word	0x08025e68
 800d444:	08025e98 	.word	0x08025e98
 800d448:	08025d20 	.word	0x08025d20

0800d44c <xRAProcess_HandleWaitStates>:
 *
 * @return New timer reload value.
 */
    static TickType_t xRAProcess_HandleWaitStates( NetworkEndPoint_t * pxEndPoint,
                                                   TickType_t uxReloadTime )
    {
 800d44c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d450:	b088      	sub	sp, #32
 800d452:	af00      	add	r7, sp, #0
 800d454:	6178      	str	r0, [r7, #20]
 800d456:	6139      	str	r1, [r7, #16]
        TickType_t uxNewReloadTime = uxReloadTime;
 800d458:	6939      	ldr	r1, [r7, #16]
 800d45a:	61f9      	str	r1, [r7, #28]

        if( pxEndPoint->xRAData.eRAState == eRAStateWait )
 800d45c:	6979      	ldr	r1, [r7, #20]
 800d45e:	f891 111c 	ldrb.w	r1, [r1, #284]	@ 0x11c
 800d462:	2901      	cmp	r1, #1
 800d464:	d133      	bne.n	800d4ce <xRAProcess_HandleWaitStates+0x82>
        {
            /* A Router Solicitation has been sent, waited for a reply, but no came.
             * All replies will be handled in the function vReceiveRA(). */
            pxEndPoint->xRAData.uxRetryCount++;
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d46c:	1c5a      	adds	r2, r3, #1
 800d46e:	697b      	ldr	r3, [r7, #20]
 800d470:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118

            if( pxEndPoint->xRAData.uxRetryCount < ( UBaseType_t ) ipconfigRA_SEARCH_COUNT )
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d47a:	2b02      	cmp	r3, #2
 800d47c:	d804      	bhi.n	800d488 <xRAProcess_HandleWaitStates+0x3c>
            {
                pxEndPoint->xRAData.eRAState = eRAStateApply;
 800d47e:	697b      	ldr	r3, [r7, #20]
 800d480:	2200      	movs	r2, #0
 800d482:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
 800d486:	e0bf      	b.n	800d608 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else
            {
                FreeRTOS_printf( ( "RA: Giving up waiting for a Router.\n" ) );
 800d488:	4862      	ldr	r0, [pc, #392]	@ (800d614 <xRAProcess_HandleWaitStates+0x1c8>)
 800d48a:	f015 f98b 	bl	80227a4 <lUDPLoggingPrintf>
                ( void ) memcpy( &( pxEndPoint->ipv6_settings ), &( pxEndPoint->ipv6_defaults ), sizeof( pxEndPoint->ipv6_settings ) );
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	3390      	adds	r3, #144	@ 0x90
 800d498:	2258      	movs	r2, #88	@ 0x58
 800d49a:	4619      	mov	r1, r3
 800d49c:	f015 fb9e 	bl	8022bdc <memcpy>

                pxEndPoint->xRAData.bits.bRouterReplied = pdFALSE_UNSIGNED;
 800d4a0:	697a      	ldr	r2, [r7, #20]
 800d4a2:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d4a6:	f36f 0300 	bfc	r3, #0, #1
 800d4aa:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                pxEndPoint->xRAData.uxRetryCount = 0U;
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                /* Force taking a new random IP-address. */
                pxEndPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800d4b6:	697a      	ldr	r2, [r7, #20]
 800d4b8:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d4bc:	f043 0302 	orr.w	r3, r3, #2
 800d4c0:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	2202      	movs	r2, #2
 800d4c8:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
 800d4cc:	e09c      	b.n	800d608 <xRAProcess_HandleWaitStates+0x1bc>
            }
        }
        else if( pxEndPoint->xRAData.eRAState == eRAStateIPWait )
 800d4ce:	6979      	ldr	r1, [r7, #20]
 800d4d0:	f891 111c 	ldrb.w	r1, [r1, #284]	@ 0x11c
 800d4d4:	2903      	cmp	r1, #3
 800d4d6:	f040 8097 	bne.w	800d608 <xRAProcess_HandleWaitStates+0x1bc>
        {
            /* A Neighbour Solicitation has been sent, waited for a reply.
             * Repeat this 'ipconfigRA_IP_TEST_COUNT' times to be sure. */
            if( pxEndPoint->xRAData.bits.bIPAddressInUse != pdFALSE_UNSIGNED )
 800d4da:	6979      	ldr	r1, [r7, #20]
 800d4dc:	f891 1110 	ldrb.w	r1, [r1, #272]	@ 0x110
 800d4e0:	f001 0102 	and.w	r1, r1, #2
 800d4e4:	b2c9      	uxtb	r1, r1
 800d4e6:	2900      	cmp	r1, #0
 800d4e8:	d00b      	beq.n	800d502 <xRAProcess_HandleWaitStates+0xb6>
            {
                /* Another device has responded with the same IPv4 address. */
                pxEndPoint->xRAData.uxRetryCount = 0U;
 800d4ea:	697b      	ldr	r3, [r7, #20]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	2202      	movs	r2, #2
 800d4f6:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_IP_TEST_TIME_OUT_MSEC );
 800d4fa:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800d4fe:	61fb      	str	r3, [r7, #28]
 800d500:	e082      	b.n	800d608 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else if( pxEndPoint->xRAData.uxRetryCount < ( UBaseType_t ) ipconfigRA_IP_TEST_COUNT )
 800d502:	6979      	ldr	r1, [r7, #20]
 800d504:	f8d1 1118 	ldr.w	r1, [r1, #280]	@ 0x118
 800d508:	2902      	cmp	r1, #2
 800d50a:	d80e      	bhi.n	800d52a <xRAProcess_HandleWaitStates+0xde>
            {
                /* Try again. */
                pxEndPoint->xRAData.uxRetryCount++;
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d512:	1c5a      	adds	r2, r3, #1
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800d51a:	697b      	ldr	r3, [r7, #20]
 800d51c:	2202      	movs	r2, #2
 800d51e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_IP_TEST_TIME_OUT_MSEC );
 800d522:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800d526:	61fb      	str	r3, [r7, #28]
 800d528:	e06e      	b.n	800d608 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else
            {
                /* Now it is assumed that there is no other device using the same IP-address. */
                if( pxEndPoint->xRAData.bits.bRouterReplied != pdFALSE_UNSIGNED )
 800d52a:	6979      	ldr	r1, [r7, #20]
 800d52c:	f891 1110 	ldrb.w	r1, [r1, #272]	@ 0x110
 800d530:	f001 0101 	and.w	r1, r1, #1
 800d534:	b2c9      	uxtb	r1, r1
 800d536:	2900      	cmp	r1, #0
 800d538:	d057      	beq.n	800d5ea <xRAProcess_HandleWaitStates+0x19e>
                {
                    /* Obtained configuration from a router. */
                    uxNewReloadTime = pdMS_TO_TICKS( ( 1000U * ( uint64_t ) pxEndPoint->xRAData.ulPreferredLifeTime ) );
 800d53a:	6979      	ldr	r1, [r7, #20]
 800d53c:	f8d1 1114 	ldr.w	r1, [r1, #276]	@ 0x114
 800d540:	2000      	movs	r0, #0
 800d542:	4688      	mov	r8, r1
 800d544:	4681      	mov	r9, r0
 800d546:	4640      	mov	r0, r8
 800d548:	4649      	mov	r1, r9
 800d54a:	f04f 0a00 	mov.w	sl, #0
 800d54e:	f04f 0b00 	mov.w	fp, #0
 800d552:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 800d556:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 800d55a:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800d55e:	4650      	mov	r0, sl
 800d560:	4659      	mov	r1, fp
 800d562:	ebb0 0208 	subs.w	r2, r0, r8
 800d566:	eb61 0309 	sbc.w	r3, r1, r9
 800d56a:	f04f 0000 	mov.w	r0, #0
 800d56e:	f04f 0100 	mov.w	r1, #0
 800d572:	0259      	lsls	r1, r3, #9
 800d574:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800d578:	0250      	lsls	r0, r2, #9
 800d57a:	4602      	mov	r2, r0
 800d57c:	460b      	mov	r3, r1
 800d57e:	eb12 0408 	adds.w	r4, r2, r8
 800d582:	eb43 0509 	adc.w	r5, r3, r9
 800d586:	f04f 0200 	mov.w	r2, #0
 800d58a:	f04f 0300 	mov.w	r3, #0
 800d58e:	01ab      	lsls	r3, r5, #6
 800d590:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 800d594:	01a2      	lsls	r2, r4, #6
 800d596:	1b11      	subs	r1, r2, r4
 800d598:	6039      	str	r1, [r7, #0]
 800d59a:	eb63 0305 	sbc.w	r3, r3, r5
 800d59e:	607b      	str	r3, [r7, #4]
 800d5a0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d5a4:	460b      	mov	r3, r1
 800d5a6:	eb13 0308 	adds.w	r3, r3, r8
 800d5aa:	60bb      	str	r3, [r7, #8]
 800d5ac:	4613      	mov	r3, r2
 800d5ae:	eb43 0309 	adc.w	r3, r3, r9
 800d5b2:	60fb      	str	r3, [r7, #12]
 800d5b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d5b8:	f04f 0300 	mov.w	r3, #0
 800d5bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d5c0:	f7f2 fef6 	bl	80003b0 <__aeabi_uldivmod>
 800d5c4:	4602      	mov	r2, r0
 800d5c6:	460b      	mov	r3, r1
 800d5c8:	4613      	mov	r3, r2
 800d5ca:	61fb      	str	r3, [r7, #28]
                    pxEndPoint->xRAData.eRAState = eRAStatePreLease;
 800d5cc:	697b      	ldr	r3, [r7, #20]
 800d5ce:	2204      	movs	r2, #4
 800d5d0:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                    iptraceRA_SUCCEEDED( &( pxEndPoint->ipv6_settings.xIPAddress ) );
                    FreeRTOS_printf( ( "RA: succeeded, using IP address %pip Reload after %u seconds\n",
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d5da:	697b      	ldr	r3, [r7, #20]
 800d5dc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800d5e0:	461a      	mov	r2, r3
 800d5e2:	480d      	ldr	r0, [pc, #52]	@ (800d618 <xRAProcess_HandleWaitStates+0x1cc>)
 800d5e4:	f015 f8de 	bl	80227a4 <lUDPLoggingPrintf>
 800d5e8:	e00b      	b.n	800d602 <xRAProcess_HandleWaitStates+0x1b6>
                                       ( unsigned ) pxEndPoint->xRAData.ulPreferredLifeTime ) );
                }
                else
                {
                    /* Using the default network parameters. */
                    pxEndPoint->xRAData.eRAState = eRAStateFailed;
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	2206      	movs	r2, #6
 800d5ee:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

                    iptraceRA_REQUESTS_FAILED_USING_DEFAULT_IP_ADDRESS( &( pxEndPoint->ipv6_settings.xIPAddress ) );

                    FreeRTOS_printf( ( "RA: failed, using default parameters and IP address %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	3338      	adds	r3, #56	@ 0x38
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	4808      	ldr	r0, [pc, #32]	@ (800d61c <xRAProcess_HandleWaitStates+0x1d0>)
 800d5fa:	f015 f8d3 	bl	80227a4 <lUDPLoggingPrintf>
                    /* Disable the timer. */
                    uxNewReloadTime = 0U;
 800d5fe:	2300      	movs	r3, #0
 800d600:	61fb      	str	r3, [r7, #28]
                }

                /* Now call vIPNetworkUpCalls() to send the network-up event and
                 * start the ARP timer. */
                vIPNetworkUpCalls( pxEndPoint );
 800d602:	6978      	ldr	r0, [r7, #20]
 800d604:	f7fc fa08 	bl	8009a18 <vIPNetworkUpCalls>
        else
        {
            /* Do nothing */
        }

        return uxNewReloadTime;
 800d608:	69fb      	ldr	r3, [r7, #28]
    }
 800d60a:	4618      	mov	r0, r3
 800d60c:	3720      	adds	r7, #32
 800d60e:	46bd      	mov	sp, r7
 800d610:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d614:	08025edc 	.word	0x08025edc
 800d618:	08025f04 	.word	0x08025f04
 800d61c:	08025f44 	.word	0x08025f44

0800d620 <xRAProcess_HandleOtherStates>:
 *
 * @return New timer reload value.
 */
    static TickType_t xRAProcess_HandleOtherStates( NetworkEndPoint_t * pxEndPoint,
                                                    TickType_t uxReloadTime )
    {
 800d620:	b580      	push	{r7, lr}
 800d622:	b08c      	sub	sp, #48	@ 0x30
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
 800d628:	6039      	str	r1, [r7, #0]
        TickType_t uxNewReloadTime = uxReloadTime;
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        switch( pxEndPoint->xRAData.eRAState )
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800d634:	2b06      	cmp	r3, #6
 800d636:	f200 808c 	bhi.w	800d752 <xRAProcess_HandleOtherStates+0x132>
 800d63a:	a201      	add	r2, pc, #4	@ (adr r2, 800d640 <xRAProcess_HandleOtherStates+0x20>)
 800d63c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d640:	0800d65d 	.word	0x0800d65d
 800d644:	0800d753 	.word	0x0800d753
 800d648:	0800d6bf 	.word	0x0800d6bf
 800d64c:	0800d753 	.word	0x0800d753
 800d650:	0800d73b 	.word	0x0800d73b
 800d654:	0800d745 	.word	0x0800d745
 800d658:	0800d753 	.word	0x0800d753
                   IPv6_Address_t xIPAddress;
                   size_t uxNeededSize;
                   NetworkBufferDescriptor_t * pxNetworkBuffer;

                   /* Send a Router Solicitation to ff02::2 */
                   ( void ) memset( xIPAddress.ucBytes, 0, sizeof( xIPAddress.ucBytes ) );
 800d65c:	f107 030c 	add.w	r3, r7, #12
 800d660:	2210      	movs	r2, #16
 800d662:	2100      	movs	r1, #0
 800d664:	4618      	mov	r0, r3
 800d666:	f015 fbc6 	bl	8022df6 <memset>
                   xIPAddress.ucBytes[ 0 ] = 0xffU;
 800d66a:	23ff      	movs	r3, #255	@ 0xff
 800d66c:	733b      	strb	r3, [r7, #12]
                   xIPAddress.ucBytes[ 1 ] = 0x02U;
 800d66e:	2302      	movs	r3, #2
 800d670:	737b      	strb	r3, [r7, #13]
                   xIPAddress.ucBytes[ 15 ] = 0x02U;
 800d672:	2302      	movs	r3, #2
 800d674:	76fb      	strb	r3, [r7, #27]
                   uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPRouterSolicitation_IPv6_t );
 800d676:	233e      	movs	r3, #62	@ 0x3e
 800d678:	623b      	str	r3, [r7, #32]
                   pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, raDONT_BLOCK );
 800d67a:	2100      	movs	r1, #0
 800d67c:	6a38      	ldr	r0, [r7, #32]
 800d67e:	f00a f981 	bl	8017984 <pxGetNetworkBufferWithDescriptor>
 800d682:	61f8      	str	r0, [r7, #28]

                   if( pxNetworkBuffer != NULL )
 800d684:	69fb      	ldr	r3, [r7, #28]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d008      	beq.n	800d69c <xRAProcess_HandleOtherStates+0x7c>
                   {
                       pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800d68a:	69fb      	ldr	r3, [r7, #28]
 800d68c:	687a      	ldr	r2, [r7, #4]
 800d68e:	631a      	str	r2, [r3, #48]	@ 0x30
                       vNDSendRouterSolicitation( pxNetworkBuffer, &( xIPAddress ) );
 800d690:	f107 030c 	add.w	r3, r7, #12
 800d694:	4619      	mov	r1, r3
 800d696:	69f8      	ldr	r0, [r7, #28]
 800d698:	f7ff fc24 	bl	800cee4 <vNDSendRouterSolicitation>
                   }

                   FreeRTOS_printf( ( "vRAProcess: Router Solicitation, attempt %lu/%u\n",
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	2203      	movs	r2, #3
 800d6a6:	4619      	mov	r1, r3
 800d6a8:	482d      	ldr	r0, [pc, #180]	@ (800d760 <xRAProcess_HandleOtherStates+0x140>)
 800d6aa:	f015 f87b 	bl	80227a4 <lUDPLoggingPrintf>
                                      pxEndPoint->xRAData.uxRetryCount + 1U,
                                      ipconfigRA_SEARCH_COUNT ) );
                   /* Wait a configurable time for a router advertisement. */
                   uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_SEARCH_TIME_OUT_MSEC );
 800d6ae:	f242 7310 	movw	r3, #10000	@ 0x2710
 800d6b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                   pxEndPoint->xRAData.eRAState = eRAStateWait;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2201      	movs	r2, #1
 800d6b8:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
               }
               break;
 800d6bc:	e04a      	b.n	800d754 <xRAProcess_HandleOtherStates+0x134>
               {
                   size_t uxNeededSize;
                   NetworkBufferDescriptor_t * pxNetworkBuffer;

                   /* Get an IP-address, using the network prefix and a random host address. */
                   if( pxEndPoint->xRAData.bits.bIPAddressInUse != 0U )
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800d6c4:	f003 0302 	and.w	r3, r3, #2
 800d6c8:	b2db      	uxtb	r3, r3
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d014      	beq.n	800d6f8 <xRAProcess_HandleOtherStates+0xd8>
                   {
                       pxEndPoint->xRAData.bits.bIPAddressInUse = pdFALSE_UNSIGNED;
 800d6ce:	687a      	ldr	r2, [r7, #4]
 800d6d0:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d6d4:	f36f 0341 	bfc	r3, #1, #1
 800d6d8:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110

                       ( void ) FreeRTOS_CreateIPv6Address( &pxEndPoint->ipv6_settings.xIPAddress, &pxEndPoint->ipv6_settings.xPrefix, pxEndPoint->ipv6_settings.uxPrefixLength, pdTRUE );
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	f7ff fb2b 	bl	800cd48 <FreeRTOS_CreateIPv6Address>

                       FreeRTOS_printf( ( "RA: Creating a random IP-address\n" ) );
 800d6f2:	481c      	ldr	r0, [pc, #112]	@ (800d764 <xRAProcess_HandleOtherStates+0x144>)
 800d6f4:	f015 f856 	bl	80227a4 <lUDPLoggingPrintf>
                   }

                   FreeRTOS_printf( ( "RA: Neighbour solicitation for %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	3338      	adds	r3, #56	@ 0x38
 800d6fc:	4619      	mov	r1, r3
 800d6fe:	481a      	ldr	r0, [pc, #104]	@ (800d768 <xRAProcess_HandleOtherStates+0x148>)
 800d700:	f015 f850 	bl	80227a4 <lUDPLoggingPrintf>

                   uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800d704:	2356      	movs	r3, #86	@ 0x56
 800d706:	62bb      	str	r3, [r7, #40]	@ 0x28
                   pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, raDONT_BLOCK );
 800d708:	2100      	movs	r1, #0
 800d70a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d70c:	f00a f93a 	bl	8017984 <pxGetNetworkBufferWithDescriptor>
 800d710:	6278      	str	r0, [r7, #36]	@ 0x24

                   if( pxNetworkBuffer != NULL )
 800d712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d714:	2b00      	cmp	r3, #0
 800d716:	d008      	beq.n	800d72a <xRAProcess_HandleOtherStates+0x10a>
                   {
                       pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800d718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d71a:	687a      	ldr	r2, [r7, #4]
 800d71c:	631a      	str	r2, [r3, #48]	@ 0x30
                       vNDSendNeighbourSolicitation( pxNetworkBuffer, &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	3338      	adds	r3, #56	@ 0x38
 800d722:	4619      	mov	r1, r3
 800d724:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d726:	f7fe ff25 	bl	800c574 <vNDSendNeighbourSolicitation>
                   }

                   uxNewReloadTime = pdMS_TO_TICKS( 1000U );
 800d72a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d72e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                   pxEndPoint->xRAData.eRAState = eRAStateIPWait;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2203      	movs	r2, #3
 800d734:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
               }
               break;
 800d738:	e00c      	b.n	800d754 <xRAProcess_HandleOtherStates+0x134>

            case eRAStatePreLease:
                pxEndPoint->xRAData.eRAState = eRAStateLease;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2205      	movs	r2, #5
 800d73e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                break;
 800d742:	e007      	b.n	800d754 <xRAProcess_HandleOtherStates+0x134>

            case eRAStateLease:

                vRAProcessInit( pxEndPoint );
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f000 f811 	bl	800d76c <vRAProcessInit>
                uxNewReloadTime = pdMS_TO_TICKS( 1000U );
 800d74a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d74e:	62fb      	str	r3, [r7, #44]	@ 0x2c

                break;
 800d750:	e000      	b.n	800d754 <xRAProcess_HandleOtherStates+0x134>
            case eRAStateFailed:
                break;

            default:
                /* All states were handled. */
                break;
 800d752:	bf00      	nop
        }

        return uxNewReloadTime;
 800d754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800d756:	4618      	mov	r0, r3
 800d758:	3730      	adds	r7, #48	@ 0x30
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
 800d75e:	bf00      	nop
 800d760:	08025f80 	.word	0x08025f80
 800d764:	08025fb4 	.word	0x08025fb4
 800d768:	08025fd8 	.word	0x08025fd8

0800d76c <vRAProcessInit>:
 * @brief Initialise the RA state machine.
 *
 * @param[in] pxEndPoint The end-point for which Router Advertisement is required.
 */
    static void vRAProcessInit( NetworkEndPoint_t * pxEndPoint )
    {
 800d76c:	b480      	push	{r7}
 800d76e:	b083      	sub	sp, #12
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
        pxEndPoint->xRAData.uxRetryCount = 0U;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2200      	movs	r2, #0
 800d778:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        pxEndPoint->xRAData.eRAState = eRAStateApply;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2200      	movs	r2, #0
 800d780:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
    }
 800d784:	bf00      	nop
 800d786:	370c      	adds	r7, #12
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr

0800d790 <vRAProcess>:
 * @param[in] xDoReset pdTRUE if the state machine must be reset.
 * @param[in] pxEndPoint The end-point for which a RA assignment is required.
 */
    void vRAProcess( BaseType_t xDoReset,
                     NetworkEndPoint_t * pxEndPoint )
    {
 800d790:	b590      	push	{r4, r7, lr}
 800d792:	b089      	sub	sp, #36	@ 0x24
 800d794:	af04      	add	r7, sp, #16
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	6039      	str	r1, [r7, #0]
        TickType_t uxReloadTime = pdMS_TO_TICKS( 5000U );
 800d79a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800d79e:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_PRINTF == 1 )
            eRAState_t eRAState;
        #endif

        configASSERT( pxEndPoint != NULL );
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d104      	bne.n	800d7b0 <vRAProcess+0x20>
 800d7a6:	f240 2189 	movw	r1, #649	@ 0x289
 800d7aa:	4828      	ldr	r0, [pc, #160]	@ (800d84c <vRAProcess+0xbc>)
 800d7ac:	f7f4 f92c 	bl	8001a08 <vAssertCalled>

        #if ( ipconfigHAS_PRINTF == 1 )
            /* Remember the initial state, just for logging. */
            eRAState = pxEndPoint->xRAData.eRAState;
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800d7b6:	72fb      	strb	r3, [r7, #11]
        #endif

        if( xDoReset != pdFALSE )
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d002      	beq.n	800d7c4 <vRAProcess+0x34>
        {
            vRAProcessInit( pxEndPoint );
 800d7be:	6838      	ldr	r0, [r7, #0]
 800d7c0:	f7ff ffd4 	bl	800d76c <vRAProcessInit>
        }

        /* First handle the states that are limited by a timer. See if some
         * timer has expired. */
        uxReloadTime = xRAProcess_HandleWaitStates( pxEndPoint, uxReloadTime );
 800d7c4:	68f9      	ldr	r1, [r7, #12]
 800d7c6:	6838      	ldr	r0, [r7, #0]
 800d7c8:	f7ff fe40 	bl	800d44c <xRAProcess_HandleWaitStates>
 800d7cc:	60f8      	str	r0, [r7, #12]

        /* Now handle the other states. */
        uxReloadTime = xRAProcess_HandleOtherStates( pxEndPoint, uxReloadTime );
 800d7ce:	68f9      	ldr	r1, [r7, #12]
 800d7d0:	6838      	ldr	r0, [r7, #0]
 800d7d2:	f7ff ff25 	bl	800d620 <xRAProcess_HandleOtherStates>
 800d7d6:	60f8      	str	r0, [r7, #12]

        #if ( ipconfigHAS_PRINTF == 1 )
        {
            FreeRTOS_printf( ( "vRAProcess( %ld, %pip) bRouterReplied=%d bIPAddressInUse=%d state %d -> %d\n",
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800d7e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d7e8:	b2db      	uxtb	r3, r3
 800d7ea:	461c      	mov	r4, r3
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800d7f2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d7f6:	b2db      	uxtb	r3, r3
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	7afb      	ldrb	r3, [r7, #11]
 800d7fc:	683a      	ldr	r2, [r7, #0]
 800d7fe:	f892 211c 	ldrb.w	r2, [r2, #284]	@ 0x11c
 800d802:	9202      	str	r2, [sp, #8]
 800d804:	9301      	str	r3, [sp, #4]
 800d806:	9000      	str	r0, [sp, #0]
 800d808:	4623      	mov	r3, r4
 800d80a:	460a      	mov	r2, r1
 800d80c:	6879      	ldr	r1, [r7, #4]
 800d80e:	4810      	ldr	r0, [pc, #64]	@ (800d850 <vRAProcess+0xc0>)
 800d810:	f014 ffc8 	bl	80227a4 <lUDPLoggingPrintf>
                               eRAState,
                               pxEndPoint->xRAData.eRAState ) );
        }
        #endif /* ( ipconfigHAS_PRINTF == 1 ) */

        if( uxReloadTime != 0U )
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d00d      	beq.n	800d836 <vRAProcess+0xa6>
        {
            FreeRTOS_printf( ( "RA: Reload %u seconds\n", ( unsigned ) ( uxReloadTime / 1000U ) ) );
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	4a0d      	ldr	r2, [pc, #52]	@ (800d854 <vRAProcess+0xc4>)
 800d81e:	fba2 2303 	umull	r2, r3, r2, r3
 800d822:	099b      	lsrs	r3, r3, #6
 800d824:	4619      	mov	r1, r3
 800d826:	480c      	ldr	r0, [pc, #48]	@ (800d858 <vRAProcess+0xc8>)
 800d828:	f014 ffbc 	bl	80227a4 <lUDPLoggingPrintf>
            vDHCP_RATimerReload( pxEndPoint, uxReloadTime );
 800d82c:	68f9      	ldr	r1, [r7, #12]
 800d82e:	6838      	ldr	r0, [r7, #0]
 800d830:	f7fc ff8a 	bl	800a748 <vDHCP_RATimerReload>
        {
            /* Disable the timer, this function vRAProcess() won't be called anymore for this end-point. */
            FreeRTOS_printf( ( "RA: Disabled timer.\n" ) );
            vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
        }
    }
 800d834:	e006      	b.n	800d844 <vRAProcess+0xb4>
            FreeRTOS_printf( ( "RA: Disabled timer.\n" ) );
 800d836:	4809      	ldr	r0, [pc, #36]	@ (800d85c <vRAProcess+0xcc>)
 800d838:	f014 ffb4 	bl	80227a4 <lUDPLoggingPrintf>
            vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
 800d83c:	2100      	movs	r1, #0
 800d83e:	6838      	ldr	r0, [r7, #0]
 800d840:	f7fd f836 	bl	800a8b0 <vIPSetDHCP_RATimerEnableState>
    }
 800d844:	bf00      	nop
 800d846:	3714      	adds	r7, #20
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd90      	pop	{r4, r7, pc}
 800d84c:	08025d20 	.word	0x08025d20
 800d850:	08026000 	.word	0x08026000
 800d854:	10624dd3 	.word	0x10624dd3
 800d858:	0802604c 	.word	0x0802604c
 800d85c:	08026064 	.word	0x08026064

0800d860 <FreeRTOS_FillEndPoint>:
                                const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
    {
 800d860:	b580      	push	{r7, lr}
 800d862:	b086      	sub	sp, #24
 800d864:	af00      	add	r7, sp, #0
 800d866:	60f8      	str	r0, [r7, #12]
 800d868:	60b9      	str	r1, [r7, #8]
 800d86a:	607a      	str	r2, [r7, #4]
 800d86c:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddress;

        if( ( pxNetworkInterface == NULL ) || ( pxEndPoint == NULL ) )
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d002      	beq.n	800d87a <FreeRTOS_FillEndPoint+0x1a>
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d105      	bne.n	800d886 <FreeRTOS_FillEndPoint+0x26>
        {
            /* Invalid input. */
            FreeRTOS_printf( ( "FreeRTOS_FillEndPoint: Invalid input, netif=%p, endpoint=%p\n",
 800d87a:	68ba      	ldr	r2, [r7, #8]
 800d87c:	68f9      	ldr	r1, [r7, #12]
 800d87e:	483f      	ldr	r0, [pc, #252]	@ (800d97c <FreeRTOS_FillEndPoint+0x11c>)
 800d880:	f014 ff90 	bl	80227a4 <lUDPLoggingPrintf>
 800d884:	e075      	b.n	800d972 <FreeRTOS_FillEndPoint+0x112>
             * The user must make sure that the object pointed to by 'pxEndPoint'
             * will remain to exist. */

            /* As the endpoint might be part of a linked list,
             * protect the field pxNext from being overwritten. */
            NetworkEndPoint_t * pxNext = pxEndPoint->pxNext;
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d88c:	617b      	str	r3, [r7, #20]
            ( void ) memset( pxEndPoint, 0, sizeof( *pxEndPoint ) );
 800d88e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800d892:	2100      	movs	r1, #0
 800d894:	68b8      	ldr	r0, [r7, #8]
 800d896:	f015 faae 	bl	8022df6 <memset>
            pxEndPoint->pxNext = pxNext;
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	697a      	ldr	r2, [r7, #20]
 800d89e:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

            ulIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	3303      	adds	r3, #3
 800d8a6:	781b      	ldrb	r3, [r3, #0]
 800d8a8:	061a      	lsls	r2, r3, #24
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	3302      	adds	r3, #2
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	041b      	lsls	r3, r3, #16
 800d8b2:	431a      	orrs	r2, r3
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	3301      	adds	r3, #1
 800d8b8:	781b      	ldrb	r3, [r3, #0]
 800d8ba:	021b      	lsls	r3, r3, #8
 800d8bc:	4313      	orrs	r3, r2
 800d8be:	687a      	ldr	r2, [r7, #4]
 800d8c0:	7812      	ldrb	r2, [r2, #0]
 800d8c2:	4313      	orrs	r3, r2
 800d8c4:	613b      	str	r3, [r7, #16]
            pxEndPoint->ipv4_settings.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	3303      	adds	r3, #3
 800d8ca:	781b      	ldrb	r3, [r3, #0]
 800d8cc:	061a      	lsls	r2, r3, #24
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	3302      	adds	r3, #2
 800d8d2:	781b      	ldrb	r3, [r3, #0]
 800d8d4:	041b      	lsls	r3, r3, #16
 800d8d6:	431a      	orrs	r2, r3
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	3301      	adds	r3, #1
 800d8dc:	781b      	ldrb	r3, [r3, #0]
 800d8de:	021b      	lsls	r3, r3, #8
 800d8e0:	4313      	orrs	r3, r2
 800d8e2:	683a      	ldr	r2, [r7, #0]
 800d8e4:	7812      	ldrb	r2, [r2, #0]
 800d8e6:	431a      	orrs	r2, r3
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	605a      	str	r2, [r3, #4]
            pxEndPoint->ipv4_settings.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 800d8ec:	6a3b      	ldr	r3, [r7, #32]
 800d8ee:	3303      	adds	r3, #3
 800d8f0:	781b      	ldrb	r3, [r3, #0]
 800d8f2:	061a      	lsls	r2, r3, #24
 800d8f4:	6a3b      	ldr	r3, [r7, #32]
 800d8f6:	3302      	adds	r3, #2
 800d8f8:	781b      	ldrb	r3, [r3, #0]
 800d8fa:	041b      	lsls	r3, r3, #16
 800d8fc:	431a      	orrs	r2, r3
 800d8fe:	6a3b      	ldr	r3, [r7, #32]
 800d900:	3301      	adds	r3, #1
 800d902:	781b      	ldrb	r3, [r3, #0]
 800d904:	021b      	lsls	r3, r3, #8
 800d906:	4313      	orrs	r3, r2
 800d908:	6a3a      	ldr	r2, [r7, #32]
 800d90a:	7812      	ldrb	r2, [r2, #0]
 800d90c:	431a      	orrs	r2, r3
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	609a      	str	r2, [r3, #8]
            pxEndPoint->ipv4_settings.ulDNSServerAddresses[ 0 ] = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 800d912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d914:	3303      	adds	r3, #3
 800d916:	781b      	ldrb	r3, [r3, #0]
 800d918:	061a      	lsls	r2, r3, #24
 800d91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d91c:	3302      	adds	r3, #2
 800d91e:	781b      	ldrb	r3, [r3, #0]
 800d920:	041b      	lsls	r3, r3, #16
 800d922:	431a      	orrs	r2, r3
 800d924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d926:	3301      	adds	r3, #1
 800d928:	781b      	ldrb	r3, [r3, #0]
 800d92a:	021b      	lsls	r3, r3, #8
 800d92c:	4313      	orrs	r3, r2
 800d92e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d930:	7812      	ldrb	r2, [r2, #0]
 800d932:	431a      	orrs	r2, r3
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	60da      	str	r2, [r3, #12]
            pxEndPoint->ipv4_settings.ulBroadcastAddress = ulIPAddress | ~( pxEndPoint->ipv4_settings.ulNetMask );
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	685b      	ldr	r3, [r3, #4]
 800d93c:	43da      	mvns	r2, r3
 800d93e:	693b      	ldr	r3, [r7, #16]
 800d940:	431a      	orrs	r2, r3
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	615a      	str	r2, [r3, #20]

            /* Copy the current values to the default values. */
            ( void ) memcpy( &( pxEndPoint->ipv4_defaults ), &( pxEndPoint->ipv4_settings ), sizeof( pxEndPoint->ipv4_defaults ) );
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	331c      	adds	r3, #28
 800d94a:	68b9      	ldr	r1, [r7, #8]
 800d94c:	221c      	movs	r2, #28
 800d94e:	4618      	mov	r0, r3
 800d950:	f015 f944 	bl	8022bdc <memcpy>

            /* The default IP-address will be used in case DHCP is not used, or also if DHCP has failed, or
             * when the user chooses to use the default IP-address. */
            pxEndPoint->ipv4_defaults.ulIPAddress = ulIPAddress;
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	693a      	ldr	r2, [r7, #16]
 800d958:	61da      	str	r2, [r3, #28]

            /* The field 'ipv4_settings.ulIPAddress' will be set later on. */

            ( void ) memcpy( pxEndPoint->xMACAddress.ucBytes, ucMACAddress, sizeof( pxEndPoint->xMACAddress ) );
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	33e8      	adds	r3, #232	@ 0xe8
 800d95e:	2206      	movs	r2, #6
 800d960:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d962:	4618      	mov	r0, r3
 800d964:	f015 f93a 	bl	8022bdc <memcpy>
            ( void ) FreeRTOS_AddEndPoint( pxNetworkInterface, pxEndPoint );
 800d968:	68b9      	ldr	r1, [r7, #8]
 800d96a:	68f8      	ldr	r0, [r7, #12]
 800d96c:	f000 f85c 	bl	800da28 <FreeRTOS_AddEndPoint>
        }
    }
 800d970:	bf00      	nop
 800d972:	bf00      	nop
 800d974:	3718      	adds	r7, #24
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
 800d97a:	bf00      	nop
 800d97c:	0802607c 	.word	0x0802607c

0800d980 <FreeRTOS_AddNetworkInterface>:
 * @param[in] pxInterface The address of the new interface.
 *
 * @return The value of the parameter 'pxInterface'.
 */
    NetworkInterface_t * FreeRTOS_AddNetworkInterface( NetworkInterface_t * pxInterface )
    {
 800d980:	b480      	push	{r7}
 800d982:	b085      	sub	sp, #20
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxIterator = NULL;
 800d988:	2300      	movs	r3, #0
 800d98a:	60fb      	str	r3, [r7, #12]

        if( pxInterface != NULL )
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d021      	beq.n	800d9d6 <FreeRTOS_AddNetworkInterface+0x56>
        {
            if( pxNetworkInterfaces == NULL )
 800d992:	4b14      	ldr	r3, [pc, #80]	@ (800d9e4 <FreeRTOS_AddNetworkInterface+0x64>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d106      	bne.n	800d9a8 <FreeRTOS_AddNetworkInterface+0x28>
            {
                /* No other interfaces are set yet, so this is the first in the list. */
                pxNetworkInterfaces = pxInterface;
 800d99a:	4a12      	ldr	r2, [pc, #72]	@ (800d9e4 <FreeRTOS_AddNetworkInterface+0x64>)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6013      	str	r3, [r2, #0]
                pxInterface->pxNext = NULL;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	625a      	str	r2, [r3, #36]	@ 0x24
 800d9a6:	e016      	b.n	800d9d6 <FreeRTOS_AddNetworkInterface+0x56>
            }
            else
            {
                /* Other interfaces are already defined, so iterate to the end of the
                 * list. */
                pxIterator = pxNetworkInterfaces;
 800d9a8:	4b0e      	ldr	r3, [pc, #56]	@ (800d9e4 <FreeRTOS_AddNetworkInterface+0x64>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	60fb      	str	r3, [r7, #12]

                for( ; ; )
                {
                    if( pxIterator == pxInterface )
 800d9ae:	68fa      	ldr	r2, [r7, #12]
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d00e      	beq.n	800d9d4 <FreeRTOS_AddNetworkInterface+0x54>
                    {
                        /* This interface was already added. */
                        break;
                    }

                    if( pxIterator->pxNext == NULL )
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d106      	bne.n	800d9cc <FreeRTOS_AddNetworkInterface+0x4c>
                    {
                        pxIterator->pxNext = pxInterface;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	687a      	ldr	r2, [r7, #4]
 800d9c2:	625a      	str	r2, [r3, #36]	@ 0x24
                        pxInterface->pxNext = NULL;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	625a      	str	r2, [r3, #36]	@ 0x24
                        break;
 800d9ca:	e004      	b.n	800d9d6 <FreeRTOS_AddNetworkInterface+0x56>
                    }

                    pxIterator = pxIterator->pxNext;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9d0:	60fb      	str	r3, [r7, #12]
                    if( pxIterator == pxInterface )
 800d9d2:	e7ec      	b.n	800d9ae <FreeRTOS_AddNetworkInterface+0x2e>
                        break;
 800d9d4:	bf00      	nop
                }
            }
        }

        return pxInterface;
 800d9d6:	687b      	ldr	r3, [r7, #4]
    }
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3714      	adds	r7, #20
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e2:	4770      	bx	lr
 800d9e4:	2000152c 	.word	0x2000152c

0800d9e8 <FreeRTOS_FirstNetworkInterface>:
 * @brief Get the first Network Interface, or NULL if none has been added.
 *
 * @return The first interface, or NULL if none has been added
 */
    NetworkInterface_t * FreeRTOS_FirstNetworkInterface( void )
    {
 800d9e8:	b480      	push	{r7}
 800d9ea:	af00      	add	r7, sp, #0
        return pxNetworkInterfaces;
 800d9ec:	4b03      	ldr	r3, [pc, #12]	@ (800d9fc <FreeRTOS_FirstNetworkInterface+0x14>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
    }
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f8:	4770      	bx	lr
 800d9fa:	bf00      	nop
 800d9fc:	2000152c 	.word	0x2000152c

0800da00 <FreeRTOS_NextNetworkInterface>:
 *
 * @return The interface that comes after 'pxInterface'. NULL when either 'pxInterface'
 *         is NULL, or when 'pxInterface' is the last interface.
 */
    NetworkInterface_t * FreeRTOS_NextNetworkInterface( const NetworkInterface_t * pxInterface )
    {
 800da00:	b480      	push	{r7}
 800da02:	b085      	sub	sp, #20
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxReturn;

        if( pxInterface != NULL )
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d003      	beq.n	800da16 <FreeRTOS_NextNetworkInterface+0x16>
        {
            pxReturn = pxInterface->pxNext;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da12:	60fb      	str	r3, [r7, #12]
 800da14:	e001      	b.n	800da1a <FreeRTOS_NextNetworkInterface+0x1a>
        }
        else
        {
            pxReturn = NULL;
 800da16:	2300      	movs	r3, #0
 800da18:	60fb      	str	r3, [r7, #12]
        }

        return pxReturn;
 800da1a:	68fb      	ldr	r3, [r7, #12]
    }
 800da1c:	4618      	mov	r0, r3
 800da1e:	3714      	adds	r7, #20
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr

0800da28 <FreeRTOS_AddEndPoint>:
 *
 * @return The value of the parameter 'pxEndPoint'.
 */
    static NetworkEndPoint_t * FreeRTOS_AddEndPoint( NetworkInterface_t * pxInterface,
                                                     NetworkEndPoint_t * pxEndPoint )
    {
 800da28:	b580      	push	{r7, lr}
 800da2a:	b084      	sub	sp, #16
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxIterator = NULL;
 800da32:	2300      	movs	r3, #0
 800da34:	60fb      	str	r3, [r7, #12]

        /* Double link between the NetworkInterface_t that is using the addressing
         * defined by this NetworkEndPoint_t structure. */
        pxEndPoint->pxNetworkInterface = pxInterface;
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	687a      	ldr	r2, [r7, #4]
 800da3a:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

        if( pxInterface->pxEndPoint == NULL )
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6a1b      	ldr	r3, [r3, #32]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d102      	bne.n	800da4c <FreeRTOS_AddEndPoint+0x24>
        {
            /*_RB_ When would pxInterface->pxEndPoint ever not be NULL unless this is called twice? */
            /*_HT_ It may be called twice. */
            pxInterface->pxEndPoint = pxEndPoint;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	683a      	ldr	r2, [r7, #0]
 800da4a:	621a      	str	r2, [r3, #32]
        }

        if( pxNetworkEndPoints == NULL )
 800da4c:	4b33      	ldr	r3, [pc, #204]	@ (800db1c <FreeRTOS_AddEndPoint+0xf4>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d107      	bne.n	800da64 <FreeRTOS_AddEndPoint+0x3c>
        {
            /* No other end points are defined yet - so this is the first in the
             * list. */
            pxEndPoint->pxNext = NULL;
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	2200      	movs	r2, #0
 800da58:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
            pxNetworkEndPoints = pxEndPoint;
 800da5c:	4a2f      	ldr	r2, [pc, #188]	@ (800db1c <FreeRTOS_AddEndPoint+0xf4>)
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	6013      	str	r3, [r2, #0]
 800da62:	e01a      	b.n	800da9a <FreeRTOS_AddEndPoint+0x72>
        }
        else
        {
            /* Other end points are already defined so iterate to the end of the
             * list. */
            pxIterator = pxNetworkEndPoints;
 800da64:	4b2d      	ldr	r3, [pc, #180]	@ (800db1c <FreeRTOS_AddEndPoint+0xf4>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	60fb      	str	r3, [r7, #12]

            for( ; ; )
            {
                if( pxIterator == pxEndPoint )
 800da6a:	68fa      	ldr	r2, [r7, #12]
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	429a      	cmp	r2, r3
 800da70:	d012      	beq.n	800da98 <FreeRTOS_AddEndPoint+0x70>
                {
                    /* This end-point has already been added to the list. */
                    break;
                }

                if( pxIterator->pxNext == NULL )
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d108      	bne.n	800da8e <FreeRTOS_AddEndPoint+0x66>
                {
                    pxEndPoint->pxNext = NULL;
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	2200      	movs	r2, #0
 800da80:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
                    pxIterator->pxNext = pxEndPoint;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	683a      	ldr	r2, [r7, #0]
 800da88:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
                    break;
 800da8c:	e005      	b.n	800da9a <FreeRTOS_AddEndPoint+0x72>
                }

                pxIterator = pxIterator->pxNext;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800da94:	60fb      	str	r3, [r7, #12]
                if( pxIterator == pxEndPoint )
 800da96:	e7e8      	b.n	800da6a <FreeRTOS_AddEndPoint+0x42>
                    break;
 800da98:	bf00      	nop
            }
        }

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800daa0:	f003 0304 	and.w	r3, r3, #4
 800daa4:	b2db      	uxtb	r3, r3
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d00c      	beq.n	800dac4 <FreeRTOS_AddEndPoint+0x9c>
            {
                FreeRTOS_printf( ( "FreeRTOS_AddEndPoint: MAC: %02x-%02x IPv6: %pip\n",
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800dab0:	4619      	mov	r1, r3
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 800dab8:	461a      	mov	r2, r3
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	3390      	adds	r3, #144	@ 0x90
 800dabe:	4818      	ldr	r0, [pc, #96]	@ (800db20 <FreeRTOS_AddEndPoint+0xf8>)
 800dac0:	f014 fe70 	bl	80227a4 <lUDPLoggingPrintf>
                                   pxEndPoint->xMACAddress.ucBytes[ 5 ],
                                   ( void * ) pxEndPoint->ipv6_defaults.xIPAddress.ucBytes ) );
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        #if ( ipconfigUSE_IPv4 != 0 )
            if( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED )
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800daca:	f003 0304 	and.w	r3, r3, #4
 800dace:	b2db      	uxtb	r3, r3
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d11e      	bne.n	800db12 <FreeRTOS_AddEndPoint+0xea>
            {
                FreeRTOS_printf( ( "FreeRTOS_AddEndPoint: MAC: %02x-%02x IPv4: %xip\n",
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800dada:	4619      	mov	r1, r3
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 800dae2:	4618      	mov	r0, r3
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	69db      	ldr	r3, [r3, #28]
 800dae8:	061a      	lsls	r2, r3, #24
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	69db      	ldr	r3, [r3, #28]
 800daee:	021b      	lsls	r3, r3, #8
 800daf0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800daf4:	431a      	orrs	r2, r3
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	69db      	ldr	r3, [r3, #28]
 800dafa:	0a1b      	lsrs	r3, r3, #8
 800dafc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800db00:	431a      	orrs	r2, r3
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	69db      	ldr	r3, [r3, #28]
 800db06:	0e1b      	lsrs	r3, r3, #24
 800db08:	4313      	orrs	r3, r2
 800db0a:	4602      	mov	r2, r0
 800db0c:	4805      	ldr	r0, [pc, #20]	@ (800db24 <FreeRTOS_AddEndPoint+0xfc>)
 800db0e:	f014 fe49 	bl	80227a4 <lUDPLoggingPrintf>
                                   pxEndPoint->xMACAddress.ucBytes[ 5 ],
                                   ( unsigned ) FreeRTOS_ntohl( pxEndPoint->ipv4_defaults.ulIPAddress ) ) );
            }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        return pxEndPoint;
 800db12:	683b      	ldr	r3, [r7, #0]
    }
 800db14:	4618      	mov	r0, r3
 800db16:	3710      	adds	r7, #16
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}
 800db1c:	20001528 	.word	0x20001528
 800db20:	080260bc 	.word	0x080260bc
 800db24:	080260f0 	.word	0x080260f0

0800db28 <FreeRTOS_FirstEndPoint>:
 *
 * @return The first end-point that is found to the interface, or NULL when the
 *         interface doesn't have any end-point yet.
 */
    NetworkEndPoint_t * FreeRTOS_FirstEndPoint( const NetworkInterface_t * pxInterface )
    {
 800db28:	b480      	push	{r7}
 800db2a:	b085      	sub	sp, #20
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800db30:	4b0d      	ldr	r3, [pc, #52]	@ (800db68 <FreeRTOS_FirstEndPoint+0x40>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	60fb      	str	r3, [r7, #12]

        /* Find and return the NetworkEndPoint_t structure that is associated with
         * the pxInterface NetworkInterface_t. *//*_RB_ Could this be made a two way link, so the NetworkEndPoint_t can just be read from the NetworkInterface_t structure?  Looks like there is a pointer in the struct already. */
        while( pxEndPoint != NULL )
 800db36:	e00c      	b.n	800db52 <FreeRTOS_FirstEndPoint+0x2a>
        {
            if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d00c      	beq.n	800db58 <FreeRTOS_FirstEndPoint+0x30>
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800db44:	687a      	ldr	r2, [r7, #4]
 800db46:	429a      	cmp	r2, r3
 800db48:	d006      	beq.n	800db58 <FreeRTOS_FirstEndPoint+0x30>
            {
                break;
            }

            pxEndPoint = pxEndPoint->pxNext;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800db50:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d1ef      	bne.n	800db38 <FreeRTOS_FirstEndPoint+0x10>
        }

        return pxEndPoint;
 800db58:	68fb      	ldr	r3, [r7, #12]
    }
 800db5a:	4618      	mov	r0, r3
 800db5c:	3714      	adds	r7, #20
 800db5e:	46bd      	mov	sp, r7
 800db60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db64:	4770      	bx	lr
 800db66:	bf00      	nop
 800db68:	20001528 	.word	0x20001528

0800db6c <FreeRTOS_NextEndPoint>:
 *
 * @return The end-point that is found, or NULL when there are no more end-points in the list.
 */
    NetworkEndPoint_t * FreeRTOS_NextEndPoint( const NetworkInterface_t * pxInterface,
                                               NetworkEndPoint_t * pxEndPoint )
    {
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b084      	sub	sp, #16
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
 800db74:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxResult = pxEndPoint;
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	60fb      	str	r3, [r7, #12]

        if( pxResult != NULL )
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d015      	beq.n	800dbac <FreeRTOS_NextEndPoint+0x40>
        {
            pxResult = pxResult->pxNext;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800db86:	60fb      	str	r3, [r7, #12]

            while( pxResult != NULL )
 800db88:	e00c      	b.n	800dba4 <FreeRTOS_NextEndPoint+0x38>
            {
                if( ( pxInterface == NULL ) || ( pxResult->pxNetworkInterface == pxInterface ) )
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d011      	beq.n	800dbb4 <FreeRTOS_NextEndPoint+0x48>
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800db96:	687a      	ldr	r2, [r7, #4]
 800db98:	429a      	cmp	r2, r3
 800db9a:	d00b      	beq.n	800dbb4 <FreeRTOS_NextEndPoint+0x48>
                {
                    break;
                }

                pxResult = pxResult->pxNext;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800dba2:	60fb      	str	r3, [r7, #12]
            while( pxResult != NULL )
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d1ef      	bne.n	800db8a <FreeRTOS_NextEndPoint+0x1e>
 800dbaa:	e003      	b.n	800dbb4 <FreeRTOS_NextEndPoint+0x48>
            }
        }
        else
        {
            pxResult = FreeRTOS_FirstEndPoint( pxInterface );
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f7ff ffbb 	bl	800db28 <FreeRTOS_FirstEndPoint>
 800dbb2:	60f8      	str	r0, [r7, #12]
        }

        return pxResult;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
    }
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3710      	adds	r7, #16
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}
	...

0800dbc0 <FreeRTOS_FindEndPointOnIP_IPv4>:
 *
 * @return The end-point found or NULL.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnIP_IPv4( uint32_t ulIPAddress,
                                                        uint32_t ulWhere )
    {
 800dbc0:	b480      	push	{r7}
 800dbc2:	b085      	sub	sp, #20
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
 800dbc8:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800dbca:	4b1e      	ldr	r3, [pc, #120]	@ (800dc44 <FreeRTOS_FindEndPointOnIP_IPv4+0x84>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
            uint32_t ulLocationCount = ( uint32_t ) ( sizeof( xRoutingStatistics.ulLocationsIP ) / sizeof( xRoutingStatistics.ulLocationsIP[ 0 ] ) );
 800dbd0:	2308      	movs	r3, #8
 800dbd2:	60bb      	str	r3, [r7, #8]

            xRoutingStatistics.ulOnIp++;
 800dbd4:	4b1c      	ldr	r3, [pc, #112]	@ (800dc48 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	3301      	adds	r3, #1
 800dbda:	4a1b      	ldr	r2, [pc, #108]	@ (800dc48 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800dbdc:	6013      	str	r3, [r2, #0]

            if( ulWhere < ulLocationCount )
 800dbde:	683a      	ldr	r2, [r7, #0]
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d223      	bcs.n	800dc2e <FreeRTOS_FindEndPointOnIP_IPv4+0x6e>
            {
                xRoutingStatistics.ulLocationsIP[ ulWhere ]++;
 800dbe6:	4a18      	ldr	r2, [pc, #96]	@ (800dc48 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	3312      	adds	r3, #18
 800dbec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbf0:	1c5a      	adds	r2, r3, #1
 800dbf2:	4915      	ldr	r1, [pc, #84]	@ (800dc48 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	3312      	adds	r3, #18
 800dbf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            }
        #endif /* ( ipconfigHAS_ROUTING_STATISTICS == 1 ) */

        while( pxEndPoint != NULL )
 800dbfc:	e017      	b.n	800dc2e <FreeRTOS_FindEndPointOnIP_IPv4+0x6e>
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                #if ( ipconfigUSE_IPv6 != 0 )
                    if( pxEndPoint->bits.bIPv6 == 0U )
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800dc04:	f003 0304 	and.w	r3, r3, #4
 800dc08:	b2db      	uxtb	r3, r3
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d10b      	bne.n	800dc26 <FreeRTOS_FindEndPointOnIP_IPv4+0x66>
                #endif
                {
                    if( ( ulIPAddress == 0U ) ||
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d00f      	beq.n	800dc34 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        ( pxEndPoint->ipv4_settings.ulIPAddress == 0U ) ||
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	681b      	ldr	r3, [r3, #0]
                    if( ( ulIPAddress == 0U ) ||
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d00b      	beq.n	800dc34 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        ( pxEndPoint->ipv4_settings.ulIPAddress == ulIPAddress ) )
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
                        ( pxEndPoint->ipv4_settings.ulIPAddress == 0U ) ||
 800dc20:	687a      	ldr	r2, [r7, #4]
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d006      	beq.n	800dc34 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        break;
                    }
                }
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            pxEndPoint = pxEndPoint->pxNext;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800dc2c:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d1e4      	bne.n	800dbfe <FreeRTOS_FindEndPointOnIP_IPv4+0x3e>
        }

        ( void ) ulIPAddress;

        return pxEndPoint;
 800dc34:	68fb      	ldr	r3, [r7, #12]
    }
 800dc36:	4618      	mov	r0, r3
 800dc38:	3714      	adds	r7, #20
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr
 800dc42:	bf00      	nop
 800dc44:	20001528 	.word	0x20001528
 800dc48:	20001530 	.word	0x20001530

0800dc4c <FreeRTOS_FindEndPointOnIP_IPv6>:
 * @param[in] pxIPAddress The IP-address of interest.
 *
 * @return The end-point found or NULL.
 */
        NetworkEndPoint_t * FreeRTOS_FindEndPointOnIP_IPv6( const IPv6_Address_t * pxIPAddress )
        {
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b082      	sub	sp, #8
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
            return FreeRTOS_InterfaceEPInSameSubnet_IPv6( NULL, pxIPAddress );
 800dc54:	6879      	ldr	r1, [r7, #4]
 800dc56:	2000      	movs	r0, #0
 800dc58:	f000 f8b6 	bl	800ddc8 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>
 800dc5c:	4603      	mov	r3, r0
        }
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3708      	adds	r7, #8
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}
	...

0800dc68 <FreeRTOS_FindEndPointOnMAC>:
 *
 * @return The end-point that has the given MAC-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnMAC( const MACAddress_t * pxMACAddress,
                                                    const NetworkInterface_t * pxInterface )
    {
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b084      	sub	sp, #16
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800dc72:	4b17      	ldr	r3, [pc, #92]	@ (800dcd0 <FreeRTOS_FindEndPointOnMAC+0x68>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
        {
            xRoutingStatistics.ulOnMAC++;
 800dc78:	4b16      	ldr	r3, [pc, #88]	@ (800dcd4 <FreeRTOS_FindEndPointOnMAC+0x6c>)
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	3301      	adds	r3, #1
 800dc7e:	4a15      	ldr	r2, [pc, #84]	@ (800dcd4 <FreeRTOS_FindEndPointOnMAC+0x6c>)
 800dc80:	6053      	str	r3, [r2, #4]
        }
        #endif

        /* If input MAC address is NULL, return NULL. */
        if( pxMACAddress == NULL )
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d119      	bne.n	800dcbc <FreeRTOS_FindEndPointOnMAC+0x54>
        {
            pxEndPoint = NULL;
 800dc88:	2300      	movs	r3, #0
 800dc8a:	60fb      	str	r3, [r7, #12]
         * uin64_t variables for direct comparison instead of using memcmp()?  [don't
         * know if there is a quick way of creating a 64-bit number from the 48-byte
         * MAC address without getting junk in the top 2 bytes]. */

        /* Find the end-point with given MAC-address. */
        while( pxEndPoint != NULL )
 800dc8c:	e016      	b.n	800dcbc <FreeRTOS_FindEndPointOnMAC+0x54>
        {
            if( ( pxInterface == NULL ) || ( pxInterface == pxEndPoint->pxNetworkInterface ) )
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d005      	beq.n	800dca0 <FreeRTOS_FindEndPointOnMAC+0x38>
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800dc9a:	683a      	ldr	r2, [r7, #0]
 800dc9c:	429a      	cmp	r2, r3
 800dc9e:	d109      	bne.n	800dcb4 <FreeRTOS_FindEndPointOnMAC+0x4c>
            {
                if( memcmp( pxEndPoint->xMACAddress.ucBytes, pxMACAddress->ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 )
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	33e8      	adds	r3, #232	@ 0xe8
 800dca4:	6879      	ldr	r1, [r7, #4]
 800dca6:	2206      	movs	r2, #6
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f015 ff2c 	bl	8023b06 <memcmp>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d007      	beq.n	800dcc4 <FreeRTOS_FindEndPointOnMAC+0x5c>
                {
                    break;
                }
            }

            pxEndPoint = pxEndPoint->pxNext;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800dcba:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d1e5      	bne.n	800dc8e <FreeRTOS_FindEndPointOnMAC+0x26>
 800dcc2:	e000      	b.n	800dcc6 <FreeRTOS_FindEndPointOnMAC+0x5e>
                    break;
 800dcc4:	bf00      	nop
        }

        return pxEndPoint;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
    }
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3710      	adds	r7, #16
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}
 800dcd0:	20001528 	.word	0x20001528
 800dcd4:	20001530 	.word	0x20001530

0800dcd8 <FreeRTOS_FindEndPointOnNetMask>:
 *
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnNetMask( uint32_t ulIPAddress,
                                                        uint32_t ulWhere )
    {
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b082      	sub	sp, #8
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	6039      	str	r1, [r7, #0]
        /* The 'ulWhere' parameter is only for debugging purposes. */
        return FreeRTOS_InterfaceEndPointOnNetMask( NULL, ulIPAddress, ulWhere );
 800dce2:	683a      	ldr	r2, [r7, #0]
 800dce4:	6879      	ldr	r1, [r7, #4]
 800dce6:	2000      	movs	r0, #0
 800dce8:	f000 f806 	bl	800dcf8 <FreeRTOS_InterfaceEndPointOnNetMask>
 800dcec:	4603      	mov	r3, r0
    }
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3708      	adds	r7, #8
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}
	...

0800dcf8 <FreeRTOS_InterfaceEndPointOnNetMask>:
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_InterfaceEndPointOnNetMask( const NetworkInterface_t * pxInterface,
                                                             uint32_t ulIPAddress,
                                                             uint32_t ulWhere )
    {
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b086      	sub	sp, #24
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	60f8      	str	r0, [r7, #12]
 800dd00:	60b9      	str	r1, [r7, #8]
 800dd02:	607a      	str	r2, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800dd04:	4b2d      	ldr	r3, [pc, #180]	@ (800ddbc <FreeRTOS_InterfaceEndPointOnNetMask+0xc4>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	617b      	str	r3, [r7, #20]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
            uint32_t ulLocationCount = ( uint32_t ) ( sizeof( xRoutingStatistics.ulLocations ) / sizeof( xRoutingStatistics.ulLocations[ 0 ] ) );
 800dd0a:	230e      	movs	r3, #14
 800dd0c:	613b      	str	r3, [r7, #16]

            xRoutingStatistics.ulOnNetMask++;
 800dd0e:	4b2c      	ldr	r3, [pc, #176]	@ (800ddc0 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800dd10:	689b      	ldr	r3, [r3, #8]
 800dd12:	3301      	adds	r3, #1
 800dd14:	4a2a      	ldr	r2, [pc, #168]	@ (800ddc0 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800dd16:	6093      	str	r3, [r2, #8]

            if( ulWhere < ulLocationCount )
 800dd18:	687a      	ldr	r2, [r7, #4]
 800dd1a:	693b      	ldr	r3, [r7, #16]
 800dd1c:	429a      	cmp	r2, r3
 800dd1e:	d22d      	bcs.n	800dd7c <FreeRTOS_InterfaceEndPointOnNetMask+0x84>
            {
                xRoutingStatistics.ulLocations[ ulWhere ]++;
 800dd20:	4a27      	ldr	r2, [pc, #156]	@ (800ddc0 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	3304      	adds	r3, #4
 800dd26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd2a:	1c5a      	adds	r2, r3, #1
 800dd2c:	4924      	ldr	r1, [pc, #144]	@ (800ddc0 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	3304      	adds	r3, #4
 800dd32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /*_RB_ Presumably then a broadcast reply could go out on a different end point to that on
         * which the broadcast was received - although that should not be an issue if the nodes are
         * on the same LAN it could be an issue if the nodes are on separate LAN's. */

        while( pxEndPoint != NULL )
 800dd36:	e021      	b.n	800dd7c <FreeRTOS_InterfaceEndPointOnNetMask+0x84>
        {
            if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d005      	beq.n	800dd4a <FreeRTOS_InterfaceEndPointOnNetMask+0x52>
 800dd3e:	697b      	ldr	r3, [r7, #20]
 800dd40:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800dd44:	68fa      	ldr	r2, [r7, #12]
 800dd46:	429a      	cmp	r2, r3
 800dd48:	d114      	bne.n	800dd74 <FreeRTOS_InterfaceEndPointOnNetMask+0x7c>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    #if ( ipconfigUSE_IPv6 != 0 )
                        if( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED )
 800dd4a:	697b      	ldr	r3, [r7, #20]
 800dd4c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800dd50:	f003 0304 	and.w	r3, r3, #4
 800dd54:	b2db      	uxtb	r3, r3
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d10c      	bne.n	800dd74 <FreeRTOS_InterfaceEndPointOnNetMask+0x7c>
                    #endif
                    {
                        if( ( ulIPAddress == ~0U ) ||
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd60:	d00f      	beq.n	800dd82 <FreeRTOS_InterfaceEndPointOnNetMask+0x8a>
                            ( ( ulIPAddress & pxEndPoint->ipv4_settings.ulNetMask ) == ( pxEndPoint->ipv4_settings.ulIPAddress & pxEndPoint->ipv4_settings.ulNetMask ) ) )
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	681a      	ldr	r2, [r3, #0]
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	405a      	eors	r2, r3
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	685b      	ldr	r3, [r3, #4]
 800dd6e:	4013      	ands	r3, r2
                        if( ( ulIPAddress == ~0U ) ||
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d006      	beq.n	800dd82 <FreeRTOS_InterfaceEndPointOnNetMask+0x8a>
                        }
                    }
                #endif /* if ( ipconfigUSE_IPv4 != 0 ) */
            }

            pxEndPoint = pxEndPoint->pxNext;
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800dd7a:	617b      	str	r3, [r7, #20]
        while( pxEndPoint != NULL )
 800dd7c:	697b      	ldr	r3, [r7, #20]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d1da      	bne.n	800dd38 <FreeRTOS_InterfaceEndPointOnNetMask+0x40>
        }

        /* This was only for debugging. */
        if( pxEndPoint == NULL )
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d113      	bne.n	800ddb0 <FreeRTOS_InterfaceEndPointOnNetMask+0xb8>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_FindEndPointOnNetMask[%d]: No match for %xip\n",
 800dd88:	68bb      	ldr	r3, [r7, #8]
 800dd8a:	061a      	lsls	r2, r3, #24
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	021b      	lsls	r3, r3, #8
 800dd90:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dd94:	431a      	orrs	r2, r3
 800dd96:	68bb      	ldr	r3, [r7, #8]
 800dd98:	0a1b      	lsrs	r3, r3, #8
 800dd9a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800dd9e:	431a      	orrs	r2, r3
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	0e1b      	lsrs	r3, r3, #24
 800dda4:	4313      	orrs	r3, r2
 800dda6:	461a      	mov	r2, r3
 800dda8:	6879      	ldr	r1, [r7, #4]
 800ddaa:	4806      	ldr	r0, [pc, #24]	@ (800ddc4 <FreeRTOS_InterfaceEndPointOnNetMask+0xcc>)
 800ddac:	f014 fcfa 	bl	80227a4 <lUDPLoggingPrintf>
                                     ( unsigned ) ulWhere, ( unsigned ) FreeRTOS_ntohl( ulIPAddress ) ) );
        }

        return pxEndPoint;
 800ddb0:	697b      	ldr	r3, [r7, #20]
    }
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	3718      	adds	r7, #24
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}
 800ddba:	bf00      	nop
 800ddbc:	20001528 	.word	0x20001528
 800ddc0:	20001530 	.word	0x20001530
 800ddc4:	08026124 	.word	0x08026124

0800ddc8 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>:
 * @param[in] pxIPAddress The IPv6-address for which an end-point is looked-up.
 * @return An end-point that is in the same subnet as the given IP-address.
 */
        NetworkEndPoint_t * FreeRTOS_InterfaceEPInSameSubnet_IPv6( const NetworkInterface_t * pxInterface,
                                                                   const IPv6_Address_t * pxIPAddress )
        {
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b084      	sub	sp, #16
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	6039      	str	r1, [r7, #0]
            NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800ddd2:	4b17      	ldr	r3, [pc, #92]	@ (800de30 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x68>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	60fb      	str	r3, [r7, #12]

            /* Find the best fitting end-point to reach a given IP-address. */

            while( pxEndPoint != NULL )
 800ddd8:	e020      	b.n	800de1c <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x54>
            {
                if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d005      	beq.n	800ddec <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x24>
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800dde6:	687a      	ldr	r2, [r7, #4]
 800dde8:	429a      	cmp	r2, r3
 800ddea:	d113      	bne.n	800de14 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x4c>
                {
                    if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ddf2:	f003 0304 	and.w	r3, r3, #4
 800ddf6:	b2db      	uxtb	r3, r3
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d00b      	beq.n	800de14 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x4c>
                    {
                        if( xCompareIPv6_Address( &( pxEndPoint->ipv6_settings.xIPAddress ), pxIPAddress, pxEndPoint->ipv6_settings.uxPrefixLength ) == 0 )
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800de06:	461a      	mov	r2, r3
 800de08:	6839      	ldr	r1, [r7, #0]
 800de0a:	f7fd fc0b 	bl	800b624 <xCompareIPv6_Address>
 800de0e:	4603      	mov	r3, r0
 800de10:	2b00      	cmp	r3, #0
 800de12:	d007      	beq.n	800de24 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x5c>
                            break;
                        }
                    }
                }

                pxEndPoint = pxEndPoint->pxNext;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800de1a:	60fb      	str	r3, [r7, #12]
            while( pxEndPoint != NULL )
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d1db      	bne.n	800ddda <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x12>
 800de22:	e000      	b.n	800de26 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x5e>
                            break;
 800de24:	bf00      	nop
            }

            return pxEndPoint;
 800de26:	68fb      	ldr	r3, [r7, #12]
        }
 800de28:	4618      	mov	r0, r3
 800de2a:	3710      	adds	r7, #16
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}
 800de30:	20001528 	.word	0x20001528

0800de34 <pxEasyFit>:
    NetworkEndPoint_t * pxEasyFit( const NetworkInterface_t * pxNetworkInterface,
                                   const uint16_t usFrameType,
                                   const IP_Address_t * pxIPAddressFrom,
                                   const IP_Address_t * pxIPAddressTo,
                                   const MACAddress_t * pxMACAddress )
    {
 800de34:	b5b0      	push	{r4, r5, r7, lr}
 800de36:	b0b0      	sub	sp, #192	@ 0xc0
 800de38:	af04      	add	r7, sp, #16
 800de3a:	60f8      	str	r0, [r7, #12]
 800de3c:	607a      	str	r2, [r7, #4]
 800de3e:	603b      	str	r3, [r7, #0]
 800de40:	460b      	mov	r3, r1
 800de42:	817b      	strh	r3, [r7, #10]
        NetworkEndPoint_t * pxEndPoint;
        NetworkEndPoint_t * pxReturn = NULL;
 800de44:	2300      	movs	r3, #0
 800de46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        /* endpoints found for IP-type, IP-address, and MAC-address. */
        NetworkEndPoint_t * pxFound[ rMATCH_COUNT ] = { NULL, NULL, NULL, NULL };
 800de4a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800de4e:	2200      	movs	r2, #0
 800de50:	601a      	str	r2, [r3, #0]
 800de52:	605a      	str	r2, [r3, #4]
 800de54:	609a      	str	r2, [r3, #8]
 800de56:	60da      	str	r2, [r3, #12]
        BaseType_t xCount[ rMATCH_COUNT ] = { 0, 0, 0, 0 };
 800de58:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800de5c:	2200      	movs	r2, #0
 800de5e:	601a      	str	r2, [r3, #0]
 800de60:	605a      	str	r2, [r3, #4]
 800de62:	609a      	str	r2, [r3, #8]
 800de64:	60da      	str	r2, [r3, #12]
        BaseType_t xIndex;
        BaseType_t xIsIPv6 = ( usFrameType == ipIPv6_FRAME_TYPE ) ? pdTRUE : pdFALSE;
 800de66:	897b      	ldrh	r3, [r7, #10]
 800de68:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d101      	bne.n	800de74 <pxEasyFit+0x40>
 800de70:	2301      	movs	r3, #1
 800de72:	e000      	b.n	800de76 <pxEasyFit+0x42>
 800de74:	2300      	movs	r3, #0
 800de76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        BaseType_t xGatewayTarget = pdFALSE;
 800de7a:	2300      	movs	r3, #0
 800de7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        BaseType_t xTargetGlobal = pdFALSE;
 800de80:	2300      	movs	r3, #0
 800de82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        ( void ) pxIPAddressFrom;
        ( void ) xGatewayTarget;
        ( void ) xTargetGlobal;

        #if ( ipconfigUSE_IPv6 != 0 )
            if( xIsIPv6 == pdTRUE )
 800de86:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800de8a:	2b01      	cmp	r3, #1
 800de8c:	d123      	bne.n	800ded6 <pxEasyFit+0xa2>
                    0xfe, 0x80, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x01
                };
                xGatewayTarget = ( memcmp( ucBytes, pxIPAddressTo->xIP_IPv6.ucBytes, 16 ) == 0 ) ? pdTRUE : pdFALSE;
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	2210      	movs	r2, #16
 800de92:	4619      	mov	r1, r3
 800de94:	4888      	ldr	r0, [pc, #544]	@ (800e0b8 <pxEasyFit+0x284>)
 800de96:	f015 fe36 	bl	8023b06 <memcmp>
 800de9a:	4603      	mov	r3, r0
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d101      	bne.n	800dea4 <pxEasyFit+0x70>
 800dea0:	2301      	movs	r3, #1
 800dea2:	e000      	b.n	800dea6 <pxEasyFit+0x72>
 800dea4:	2300      	movs	r3, #0
 800dea6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

                if( xGatewayTarget == pdTRUE )
 800deaa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800deae:	2b01      	cmp	r3, #1
 800deb0:	d105      	bne.n	800debe <pxEasyFit+0x8a>
                {
                    FreeRTOS_debug_printf( ( " GW address %pip to %pip\n",
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	683a      	ldr	r2, [r7, #0]
 800deb6:	4619      	mov	r1, r3
 800deb8:	4880      	ldr	r0, [pc, #512]	@ (800e0bc <pxEasyFit+0x288>)
 800deba:	f014 fc73 	bl	80227a4 <lUDPLoggingPrintf>
                                             ( void * ) pxIPAddressFrom->xIP_IPv6.ucBytes,
                                             ( void * ) pxIPAddressTo->xIP_IPv6.ucBytes ) );
                }

                xTargetGlobal = ( xIPv6_GetIPType( &( pxIPAddressTo->xIP_IPv6 ) ) == eIPv6_Global ) ? pdTRUE : pdFALSE;
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	4618      	mov	r0, r3
 800dec2:	f000 fa15 	bl	800e2f0 <xIPv6_GetIPType>
 800dec6:	4603      	mov	r3, r0
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d101      	bne.n	800ded0 <pxEasyFit+0x9c>
 800decc:	2301      	movs	r3, #1
 800dece:	e000      	b.n	800ded2 <pxEasyFit+0x9e>
 800ded0:	2300      	movs	r3, #0
 800ded2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxNetworkInterface );
 800ded6:	68f8      	ldr	r0, [r7, #12]
 800ded8:	f7ff fe26 	bl	800db28 <FreeRTOS_FirstEndPoint>
 800dedc:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 800dee0:	e07d      	b.n	800dfde <pxEasyFit+0x1aa>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkInterface, pxEndPoint ) )
        {
            BaseType_t xSameMACAddress = ( memcmp( pxEndPoint->xMACAddress.ucBytes, pxMACAddress->ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ? pdTRUE : pdFALSE;
 800dee2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dee6:	33e8      	adds	r3, #232	@ 0xe8
 800dee8:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 800deec:	2206      	movs	r2, #6
 800deee:	4618      	mov	r0, r3
 800def0:	f015 fe09 	bl	8023b06 <memcmp>
 800def4:	4603      	mov	r3, r0
 800def6:	2b00      	cmp	r3, #0
 800def8:	d101      	bne.n	800defe <pxEasyFit+0xca>
 800defa:	2301      	movs	r3, #1
 800defc:	e000      	b.n	800df00 <pxEasyFit+0xcc>
 800defe:	2300      	movs	r3, #0
 800df00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

            if( xIsIPv6 == ( BaseType_t ) pxEndPoint->bits.bIPv6 )
 800df04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df08:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800df0c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800df10:	b2db      	uxtb	r3, r3
 800df12:	461a      	mov	r2, r3
 800df14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800df18:	4293      	cmp	r3, r2
 800df1a:	d159      	bne.n	800dfd0 <pxEasyFit+0x19c>
            {
                pxFound[ rMATCH_IP_TYPE ] = pxEndPoint;
 800df1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df20:	67fb      	str	r3, [r7, #124]	@ 0x7c
                xCount[ rMATCH_IP_TYPE ]++;
 800df22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df24:	3301      	adds	r3, #1
 800df26:	66fb      	str	r3, [r7, #108]	@ 0x6c

                /* Case default is impossible to reach because no endpoints for disabled IP type. */
                switch( xIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 800df28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	d134      	bne.n	800df9a <pxEasyFit+0x166>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case ( BaseType_t ) pdTRUE:
                           {
                               IPv6_Type_t xEndpointType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800df30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df34:	3338      	adds	r3, #56	@ 0x38
 800df36:	4618      	mov	r0, r3
 800df38:	f000 f9da 	bl	800e2f0 <xIPv6_GetIPType>
 800df3c:	4603      	mov	r3, r0
 800df3e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                               if( xEndpointType != eIPv6_Unknown )
 800df42:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800df46:	2b05      	cmp	r3, #5
 800df48:	d035      	beq.n	800dfb6 <pxEasyFit+0x182>
                               {
                                   BaseType_t xEndpointGlobal = ( xEndpointType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 800df4a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d101      	bne.n	800df56 <pxEasyFit+0x122>
 800df52:	2301      	movs	r3, #1
 800df54:	e000      	b.n	800df58 <pxEasyFit+0x124>
 800df56:	2300      	movs	r3, #0
 800df58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                                   if( ( memcmp( pxEndPoint->ipv6_settings.xIPAddress.ucBytes, pxIPAddressTo->xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 ) )
 800df5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df60:	3338      	adds	r3, #56	@ 0x38
 800df62:	6839      	ldr	r1, [r7, #0]
 800df64:	2210      	movs	r2, #16
 800df66:	4618      	mov	r0, r3
 800df68:	f015 fdcd 	bl	8023b06 <memcmp>
 800df6c:	4603      	mov	r3, r0
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d106      	bne.n	800df80 <pxEasyFit+0x14c>
                                   {
                                       pxFound[ rMATCH_IP_ADDR ] = pxEndPoint;
 800df72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df76:	673b      	str	r3, [r7, #112]	@ 0x70
                                       xCount[ rMATCH_IP_ADDR ]++;
 800df78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800df7a:	3301      	adds	r3, #1
 800df7c:	663b      	str	r3, [r7, #96]	@ 0x60
                               else
                               {
                                   /* do nothing, coverity happy */
                               }
                           }
                           break;
 800df7e:	e01a      	b.n	800dfb6 <pxEasyFit+0x182>
                                   else if( xTargetGlobal == xEndpointGlobal )
 800df80:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800df84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800df88:	429a      	cmp	r2, r3
 800df8a:	d114      	bne.n	800dfb6 <pxEasyFit+0x182>
                                       pxFound[ rMATCH_IPv6_TYPE ] = pxEndPoint;
 800df8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df90:	677b      	str	r3, [r7, #116]	@ 0x74
                                       xCount[ rMATCH_IPv6_TYPE ]++;
 800df92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800df94:	3301      	adds	r3, #1
 800df96:	667b      	str	r3, [r7, #100]	@ 0x64
                           break;
 800df98:	e00d      	b.n	800dfb6 <pxEasyFit+0x182>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    case ( BaseType_t ) pdFALSE:
                    default:
                        #if ( ipconfigUSE_IPv4 != 0 )
                            if( pxEndPoint->ipv4_settings.ulIPAddress == pxIPAddressTo->ulIP_IPv4 )
 800df9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df9e:	681a      	ldr	r2, [r3, #0]
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	d108      	bne.n	800dfba <pxEasyFit+0x186>
                            {
                                pxFound[ rMATCH_IP_ADDR ] = pxEndPoint;
 800dfa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dfac:	673b      	str	r3, [r7, #112]	@ 0x70
                                xCount[ rMATCH_IP_ADDR ]++;
 800dfae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dfb0:	3301      	adds	r3, #1
 800dfb2:	663b      	str	r3, [r7, #96]	@ 0x60
                            {
                                /* do nothing, coverity happy */
                            }
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                        break;
 800dfb4:	e001      	b.n	800dfba <pxEasyFit+0x186>
                           break;
 800dfb6:	bf00      	nop
 800dfb8:	e000      	b.n	800dfbc <pxEasyFit+0x188>
                        break;
 800dfba:	bf00      	nop
                }

                if( xSameMACAddress == pdTRUE )
 800dfbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800dfc0:	2b01      	cmp	r3, #1
 800dfc2:	d105      	bne.n	800dfd0 <pxEasyFit+0x19c>
                {
                    xCount[ rMATCH_MAC_ADDR ]++;
 800dfc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	66bb      	str	r3, [r7, #104]	@ 0x68
                    pxFound[ rMATCH_MAC_ADDR ] = pxEndPoint;
 800dfca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dfce:	67bb      	str	r3, [r7, #120]	@ 0x78
             pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkInterface, pxEndPoint ) )
 800dfd0:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800dfd4:	68f8      	ldr	r0, [r7, #12]
 800dfd6:	f7ff fdc9 	bl	800db6c <FreeRTOS_NextEndPoint>
 800dfda:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
             pxEndPoint != NULL;
 800dfde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	f47f af7d 	bne.w	800dee2 <pxEasyFit+0xae>
                }
            }
        }

        for( xIndex = 0; xIndex < rMATCH_COUNT; xIndex++ )
 800dfe8:	2300      	movs	r3, #0
 800dfea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800dfee:	e017      	b.n	800e020 <pxEasyFit+0x1ec>
        {
            if( xCount[ xIndex ] >= 1 )
 800dff0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dff4:	009b      	lsls	r3, r3, #2
 800dff6:	33b0      	adds	r3, #176	@ 0xb0
 800dff8:	443b      	add	r3, r7
 800dffa:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	dd09      	ble.n	800e016 <pxEasyFit+0x1e2>
            {
                pxReturn = pxFound[ xIndex ];
 800e002:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e006:	009b      	lsls	r3, r3, #2
 800e008:	33b0      	adds	r3, #176	@ 0xb0
 800e00a:	443b      	add	r3, r7
 800e00c:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800e010:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                break;
 800e014:	e008      	b.n	800e028 <pxEasyFit+0x1f4>
        for( xIndex = 0; xIndex < rMATCH_COUNT; xIndex++ )
 800e016:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e01a:	3301      	adds	r3, #1
 800e01c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e020:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e024:	2b03      	cmp	r3, #3
 800e026:	dde3      	ble.n	800dff0 <pxEasyFit+0x1bc>
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            if( pxReturn == NULL )
 800e028:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d13c      	bne.n	800e0aa <pxEasyFit+0x276>
            {
                char pcBufferFrom[ 40 ];
                char pcBufferTo[ 40 ];
                BaseType_t xFamily = ( usFrameType == ipIPv6_FRAME_TYPE ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET4;
 800e030:	897b      	ldrh	r3, [r7, #10]
 800e032:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800e036:	4293      	cmp	r3, r2
 800e038:	d101      	bne.n	800e03e <pxEasyFit+0x20a>
 800e03a:	230a      	movs	r3, #10
 800e03c:	e000      	b.n	800e040 <pxEasyFit+0x20c>
 800e03e:	2302      	movs	r3, #2
 800e040:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                const char * xRetNtopTo;
                const char * xRetNtopFrom;
                xRetNtopTo = FreeRTOS_inet_ntop( xFamily,
                                                 ( void * ) pxIPAddressTo->xIP_IPv6.ucBytes,
 800e044:	6839      	ldr	r1, [r7, #0]
                xRetNtopTo = FreeRTOS_inet_ntop( xFamily,
 800e046:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800e04a:	2328      	movs	r3, #40	@ 0x28
 800e04c:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800e050:	f001 fc70 	bl	800f934 <FreeRTOS_inet_ntop>
 800e054:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
                                                 pcBufferTo,
                                                 sizeof( pcBufferTo ) );
                xRetNtopFrom = FreeRTOS_inet_ntop( xFamily,
                                                   ( void * ) pxIPAddressFrom->xIP_IPv6.ucBytes,
 800e058:	6879      	ldr	r1, [r7, #4]
                xRetNtopFrom = FreeRTOS_inet_ntop( xFamily,
 800e05a:	f107 0210 	add.w	r2, r7, #16
 800e05e:	2328      	movs	r3, #40	@ 0x28
 800e060:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800e064:	f001 fc66 	bl	800f934 <FreeRTOS_inet_ntop>
 800e068:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
                                                   pcBufferFrom,
                                                   sizeof( pcBufferFrom ) );

                FreeRTOS_debug_printf( ( "EasyFit[%x]: %d %d %d ( %s ->%s ) BAD\n",
 800e06c:	8979      	ldrh	r1, [r7, #10]
 800e06e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e070:	461c      	mov	r4, r3
 800e072:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e074:	461d      	mov	r5, r3
 800e076:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e078:	4618      	mov	r0, r3
 800e07a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d002      	beq.n	800e088 <pxEasyFit+0x254>
 800e082:	f107 0310 	add.w	r3, r7, #16
 800e086:	e000      	b.n	800e08a <pxEasyFit+0x256>
 800e088:	4b0d      	ldr	r3, [pc, #52]	@ (800e0c0 <pxEasyFit+0x28c>)
 800e08a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800e08e:	2a00      	cmp	r2, #0
 800e090:	d002      	beq.n	800e098 <pxEasyFit+0x264>
 800e092:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800e096:	e000      	b.n	800e09a <pxEasyFit+0x266>
 800e098:	4a09      	ldr	r2, [pc, #36]	@ (800e0c0 <pxEasyFit+0x28c>)
 800e09a:	9202      	str	r2, [sp, #8]
 800e09c:	9301      	str	r3, [sp, #4]
 800e09e:	9000      	str	r0, [sp, #0]
 800e0a0:	462b      	mov	r3, r5
 800e0a2:	4622      	mov	r2, r4
 800e0a4:	4807      	ldr	r0, [pc, #28]	@ (800e0c4 <pxEasyFit+0x290>)
 800e0a6:	f014 fb7d 	bl	80227a4 <lUDPLoggingPrintf>
                                         ( xRetNtopFrom == NULL ) ? "INVALID" : pcBufferFrom,
                                         ( xRetNtopTo == NULL ) ? "INVALID" : pcBufferTo ) );
            }
        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

        return pxReturn;
 800e0aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
    }
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	37b0      	adds	r7, #176	@ 0xb0
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bdb0      	pop	{r4, r5, r7, pc}
 800e0b6:	bf00      	nop
 800e0b8:	08027f7c 	.word	0x08027f7c
 800e0bc:	080261c0 	.word	0x080261c0
 800e0c0:	080261dc 	.word	0x080261dc
 800e0c4:	080261e4 	.word	0x080261e4

0800e0c8 <FreeRTOS_MatchingEndpoint>:
 *
 * @return The end-point that should handle the incoming Ethernet packet.
 */
    NetworkEndPoint_t * FreeRTOS_MatchingEndpoint( const NetworkInterface_t * pxNetworkInterface,
                                                   const uint8_t * pucEthernetBuffer )
    {
 800e0c8:	b590      	push	{r4, r7, lr}
 800e0ca:	b097      	sub	sp, #92	@ 0x5c
 800e0cc:	af02      	add	r7, sp, #8
 800e0ce:	6078      	str	r0, [r7, #4]
 800e0d0:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = NULL;
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolPacket_t * pxPacket = ( ( const ProtocolPacket_t * ) pucEthernetBuffer );
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	647b      	str	r3, [r7, #68]	@ 0x44

        #if ( ipconfigUSE_IPv6 != 0 )
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPPacket_IPv6_t * pxIPPacket_IPv6 = ( ( const IPPacket_IPv6_t * ) pucEthernetBuffer );
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	643b      	str	r3, [r7, #64]	@ 0x40
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        configASSERT( pucEthernetBuffer != NULL );
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d104      	bne.n	800e0ee <FreeRTOS_MatchingEndpoint+0x26>
 800e0e4:	f44f 7164 	mov.w	r1, #912	@ 0x390
 800e0e8:	485e      	ldr	r0, [pc, #376]	@ (800e264 <FreeRTOS_MatchingEndpoint+0x19c>)
 800e0ea:	f7f3 fc8d 	bl	8001a08 <vAssertCalled>
        #ifndef _lint
        {
            /* MISRA Ref 11.4.3 [Casting pointer to int for verification] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            uintptr_t uxAddress = ( uintptr_t ) pucEthernetBuffer;
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
            uxAddress += 2U;
 800e0f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0f4:	3302      	adds	r3, #2
 800e0f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            configASSERT( ( uxAddress % 4U ) == 0U );
 800e0f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0fa:	f003 0303 	and.w	r3, r3, #3
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d004      	beq.n	800e10c <FreeRTOS_MatchingEndpoint+0x44>
 800e102:	f240 319b 	movw	r1, #923	@ 0x39b
 800e106:	4857      	ldr	r0, [pc, #348]	@ (800e264 <FreeRTOS_MatchingEndpoint+0x19c>)
 800e108:	f7f3 fc7e 	bl	8001a08 <vAssertCalled>
         */

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
        {
            /* Some stats while developing. */
            xRoutingStatistics.ulMatching++;
 800e10c:	4b56      	ldr	r3, [pc, #344]	@ (800e268 <FreeRTOS_MatchingEndpoint+0x1a0>)
 800e10e:	68db      	ldr	r3, [r3, #12]
 800e110:	3301      	adds	r3, #1
 800e112:	4a55      	ldr	r2, [pc, #340]	@ (800e268 <FreeRTOS_MatchingEndpoint+0x1a0>)
 800e114:	60d3      	str	r3, [r2, #12]
        }
        #endif
        {
            uint16_t usFrameType = pxPacket->xUDPPacket.xEthernetHeader.usFrameType;
 800e116:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e118:	7b1a      	ldrb	r2, [r3, #12]
 800e11a:	7b5b      	ldrb	r3, [r3, #13]
 800e11c:	021b      	lsls	r3, r3, #8
 800e11e:	4313      	orrs	r3, r2
 800e120:	877b      	strh	r3, [r7, #58]	@ 0x3a
            IP_Address_t xIPAddressFrom;
            IP_Address_t xIPAddressTo;
            MACAddress_t xMACAddress;
            BaseType_t xDoProcessPacket = pdFALSE;
 800e122:	2300      	movs	r3, #0
 800e124:	64bb      	str	r3, [r7, #72]	@ 0x48

            ( void ) memset( xIPAddressFrom.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800e126:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e12a:	2210      	movs	r2, #16
 800e12c:	2100      	movs	r1, #0
 800e12e:	4618      	mov	r0, r3
 800e130:	f014 fe61 	bl	8022df6 <memset>
            ( void ) memset( xIPAddressTo.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800e134:	f107 0314 	add.w	r3, r7, #20
 800e138:	2210      	movs	r2, #16
 800e13a:	2100      	movs	r1, #0
 800e13c:	4618      	mov	r0, r3
 800e13e:	f014 fe5a 	bl	8022df6 <memset>

            switch( usFrameType )
 800e142:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e144:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800e148:	4293      	cmp	r3, r2
 800e14a:	d009      	beq.n	800e160 <FreeRTOS_MatchingEndpoint+0x98>
 800e14c:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800e150:	4293      	cmp	r3, r2
 800e152:	dc6a      	bgt.n	800e22a <FreeRTOS_MatchingEndpoint+0x162>
 800e154:	2b08      	cmp	r3, #8
 800e156:	d05d      	beq.n	800e214 <FreeRTOS_MatchingEndpoint+0x14c>
 800e158:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800e15c:	d015      	beq.n	800e18a <FreeRTOS_MatchingEndpoint+0xc2>
                    #if ( ipconfigPROCESS_CUSTOM_ETHERNET_FRAMES == 1 )
                        /* Custom frame types, match by MAC address only. */
                        xDoProcessPacket = pdTRUE;
                    #endif

                    break;
 800e15e:	e064      	b.n	800e22a <FreeRTOS_MatchingEndpoint+0x162>
                        ( void ) memcpy( xIPAddressFrom.xIP_IPv6.ucBytes, pxIPPacket_IPv6->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800e160:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e162:	3316      	adds	r3, #22
 800e164:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800e168:	6818      	ldr	r0, [r3, #0]
 800e16a:	6859      	ldr	r1, [r3, #4]
 800e16c:	689a      	ldr	r2, [r3, #8]
 800e16e:	68db      	ldr	r3, [r3, #12]
 800e170:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        ( void ) memcpy( xIPAddressTo.xIP_IPv6.ucBytes, pxIPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800e172:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e174:	3326      	adds	r3, #38	@ 0x26
 800e176:	f107 0414 	add.w	r4, r7, #20
 800e17a:	6818      	ldr	r0, [r3, #0]
 800e17c:	6859      	ldr	r1, [r3, #4]
 800e17e:	689a      	ldr	r2, [r3, #8]
 800e180:	68db      	ldr	r3, [r3, #12]
 800e182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        xDoProcessPacket = pdTRUE;
 800e184:	2301      	movs	r3, #1
 800e186:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800e188:	e050      	b.n	800e22c <FreeRTOS_MatchingEndpoint+0x164>
                        const ARPPacket_t * pxARPFrame = ( const ARPPacket_t * ) pucEthernetBuffer;
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	637b      	str	r3, [r7, #52]	@ 0x34
                        if( pxARPFrame->xARPHeader.usOperation == ( uint16_t ) ipARP_REQUEST )
 800e18e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e190:	8a9b      	ldrh	r3, [r3, #20]
 800e192:	b29b      	uxth	r3, r3
 800e194:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e198:	d108      	bne.n	800e1ac <FreeRTOS_MatchingEndpoint+0xe4>
                            ( void ) memcpy( xIPAddressFrom.xIP_IPv6.ucBytes, pxPacket->xARPPacket.xARPHeader.ucSenderProtocolAddress, sizeof( uint32_t ) );
 800e19a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e19c:	331c      	adds	r3, #28
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	627b      	str	r3, [r7, #36]	@ 0x24
                            xIPAddressTo.ulIP_IPv4 = pxPacket->xARPPacket.xARPHeader.ulTargetProtocolAddress;
 800e1a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1a4:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 800e1a8:	617b      	str	r3, [r7, #20]
 800e1aa:	e00d      	b.n	800e1c8 <FreeRTOS_MatchingEndpoint+0x100>
                        else if( pxARPFrame->xARPHeader.usOperation == ( uint16_t ) ipARP_REPLY )
 800e1ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1ae:	8a9b      	ldrh	r3, [r3, #20]
 800e1b0:	b29b      	uxth	r3, r3
 800e1b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e1b6:	d107      	bne.n	800e1c8 <FreeRTOS_MatchingEndpoint+0x100>
                            ( void ) memcpy( xIPAddressTo.xIP_IPv6.ucBytes, pxPacket->xARPPacket.xARPHeader.ucSenderProtocolAddress, sizeof( uint32_t ) );
 800e1b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1ba:	331c      	adds	r3, #28
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	617b      	str	r3, [r7, #20]
                            xIPAddressFrom.ulIP_IPv4 = pxPacket->xARPPacket.xARPHeader.ulTargetProtocolAddress;
 800e1c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1c2:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 800e1c6:	627b      	str	r3, [r7, #36]	@ 0x24
                        FreeRTOS_debug_printf( ( "pxEasyFit: ARP %xip -> %xip\n", ( unsigned ) FreeRTOS_ntohl( xIPAddressFrom.ulIP_IPv4 ), ( unsigned ) FreeRTOS_ntohl( xIPAddressTo.ulIP_IPv4 ) ) );
 800e1c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1ca:	061a      	lsls	r2, r3, #24
 800e1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1ce:	021b      	lsls	r3, r3, #8
 800e1d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e1d4:	431a      	orrs	r2, r3
 800e1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1d8:	0a1b      	lsrs	r3, r3, #8
 800e1da:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e1de:	431a      	orrs	r2, r3
 800e1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1e2:	0e1b      	lsrs	r3, r3, #24
 800e1e4:	ea42 0103 	orr.w	r1, r2, r3
 800e1e8:	697b      	ldr	r3, [r7, #20]
 800e1ea:	061a      	lsls	r2, r3, #24
 800e1ec:	697b      	ldr	r3, [r7, #20]
 800e1ee:	021b      	lsls	r3, r3, #8
 800e1f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e1f4:	431a      	orrs	r2, r3
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	0a1b      	lsrs	r3, r3, #8
 800e1fa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e1fe:	431a      	orrs	r2, r3
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	0e1b      	lsrs	r3, r3, #24
 800e204:	4313      	orrs	r3, r2
 800e206:	461a      	mov	r2, r3
 800e208:	4818      	ldr	r0, [pc, #96]	@ (800e26c <FreeRTOS_MatchingEndpoint+0x1a4>)
 800e20a:	f014 facb 	bl	80227a4 <lUDPLoggingPrintf>
                    xDoProcessPacket = pdTRUE;
 800e20e:	2301      	movs	r3, #1
 800e210:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800e212:	e00b      	b.n	800e22c <FreeRTOS_MatchingEndpoint+0x164>
                        xIPAddressFrom.ulIP_IPv4 = pxPacket->xUDPPacket.xIPHeader.ulSourceIPAddress;
 800e214:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e216:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e21a:	627b      	str	r3, [r7, #36]	@ 0x24
                        xIPAddressTo.ulIP_IPv4 = pxPacket->xUDPPacket.xIPHeader.ulDestinationIPAddress;
 800e21c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e21e:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800e222:	617b      	str	r3, [r7, #20]
                        xDoProcessPacket = pdTRUE;
 800e224:	2301      	movs	r3, #1
 800e226:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800e228:	e000      	b.n	800e22c <FreeRTOS_MatchingEndpoint+0x164>
                    break;
 800e22a:	bf00      	nop
            }

            if( xDoProcessPacket == pdTRUE )
 800e22c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e22e:	2b01      	cmp	r3, #1
 800e230:	d113      	bne.n	800e25a <FreeRTOS_MatchingEndpoint+0x192>
            {
                ( void ) memcpy( xMACAddress.ucBytes, pxPacket->xUDPPacket.xEthernetHeader.xDestinationAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800e232:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e234:	f107 030c 	add.w	r3, r7, #12
 800e238:	6810      	ldr	r0, [r2, #0]
 800e23a:	6018      	str	r0, [r3, #0]
 800e23c:	8892      	ldrh	r2, [r2, #4]
 800e23e:	809a      	strh	r2, [r3, #4]
                pxEndPoint = pxEasyFit( pxNetworkInterface,
 800e240:	f107 0014 	add.w	r0, r7, #20
 800e244:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800e248:	8f79      	ldrh	r1, [r7, #58]	@ 0x3a
 800e24a:	f107 030c 	add.w	r3, r7, #12
 800e24e:	9300      	str	r3, [sp, #0]
 800e250:	4603      	mov	r3, r0
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f7ff fdee 	bl	800de34 <pxEasyFit>
 800e258:	64f8      	str	r0, [r7, #76]	@ 0x4c
                                        &xIPAddressFrom,
                                        &xIPAddressTo,
                                        &xMACAddress );
            }
        }
        return pxEndPoint;
 800e25a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 800e25c:	4618      	mov	r0, r3
 800e25e:	3754      	adds	r7, #84	@ 0x54
 800e260:	46bd      	mov	sp, r7
 800e262:	bd90      	pop	{r4, r7, pc}
 800e264:	0802620c 	.word	0x0802620c
 800e268:	20001530 	.word	0x20001530
 800e26c:	0802623c 	.word	0x0802623c

0800e270 <FreeRTOS_FindGateWay>:
 * @param[in] xIPType The type of Gateway to look for ( ipTYPE_IPv4 or ipTYPE_IPv6 ).
 *
 * @return The end-point that will lead to the gateway, or NULL when no gateway was found.
 */
    NetworkEndPoint_t * FreeRTOS_FindGateWay( BaseType_t xIPType )
    {
 800e270:	b580      	push	{r7, lr}
 800e272:	b084      	sub	sp, #16
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800e278:	4b1b      	ldr	r3, [pc, #108]	@ (800e2e8 <FreeRTOS_FindGateWay+0x78>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	60fb      	str	r3, [r7, #12]

        while( pxEndPoint != NULL )
 800e27e:	e028      	b.n	800e2d2 <FreeRTOS_FindGateWay+0x62>
                if( pxEndPoint->ipv4_settings.ulGatewayAddress != 0U ) /* access to ipv4_settings is checked. */
                {
                    break;
                }
            #else
                if( ( xIPType == ( BaseType_t ) ipTYPE_IPv6 ) && ( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) )
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2b60      	cmp	r3, #96	@ 0x60
 800e284:	d112      	bne.n	800e2ac <FreeRTOS_FindGateWay+0x3c>
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800e28c:	f003 0304 	and.w	r3, r3, #4
 800e290:	b2db      	uxtb	r3, r3
 800e292:	2b00      	cmp	r3, #0
 800e294:	d00a      	beq.n	800e2ac <FreeRTOS_FindGateWay+0x3c>
                {
                    /* Check if the IP-address is non-zero. */
                    if( memcmp( FreeRTOS_in6addr_any.ucBytes, pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) != 0 )
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	335c      	adds	r3, #92	@ 0x5c
 800e29a:	2210      	movs	r2, #16
 800e29c:	4619      	mov	r1, r3
 800e29e:	4813      	ldr	r0, [pc, #76]	@ (800e2ec <FreeRTOS_FindGateWay+0x7c>)
 800e2a0:	f015 fc31 	bl	8023b06 <memcmp>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d00f      	beq.n	800e2ca <FreeRTOS_FindGateWay+0x5a>
                    {
                        break;
 800e2aa:	e017      	b.n	800e2dc <FreeRTOS_FindGateWay+0x6c>
                    }
                }

                #if ( ipconfigUSE_IPv4 != 0 )
                    else
                    if( ( xIPType == ( BaseType_t ) ipTYPE_IPv4 ) && ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) )
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2b40      	cmp	r3, #64	@ 0x40
 800e2b0:	d10b      	bne.n	800e2ca <FreeRTOS_FindGateWay+0x5a>
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800e2b8:	f003 0304 	and.w	r3, r3, #4
 800e2bc:	b2db      	uxtb	r3, r3
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d103      	bne.n	800e2ca <FreeRTOS_FindGateWay+0x5a>
                    {
                        if( pxEndPoint->ipv4_settings.ulGatewayAddress != 0U )
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	689b      	ldr	r3, [r3, #8]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d107      	bne.n	800e2da <FreeRTOS_FindGateWay+0x6a>
                else
                {
                    /* This end-point is not the right IP-type. */
                }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
            pxEndPoint = pxEndPoint->pxNext;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800e2d0:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d1d3      	bne.n	800e280 <FreeRTOS_FindGateWay+0x10>
 800e2d8:	e000      	b.n	800e2dc <FreeRTOS_FindGateWay+0x6c>
                            break;
 800e2da:	bf00      	nop
        }

        return pxEndPoint;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
    }
 800e2de:	4618      	mov	r0, r3
 800e2e0:	3710      	adds	r7, #16
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
 800e2e6:	bf00      	nop
 800e2e8:	20001528 	.word	0x20001528
 800e2ec:	08027f34 	.word	0x08027f34

0800e2f0 <xIPv6_GetIPType>:
 * @param[in] pxAddress The IPv6 address whose type needs to be returned.
 * @returns The IP type of the given address.
 */
#if ( ipconfigUSE_IPv6 != 0 )
    IPv6_Type_t xIPv6_GetIPType( const IPv6_Address_t * pxAddress )
    {
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b086      	sub	sp, #24
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
        IPv6_Type_t eResult = eIPv6_Unknown;
 800e2f8:	2305      	movs	r3, #5
 800e2fa:	75fb      	strb	r3, [r7, #23]
            { eIPv6_SiteLocal, 0xFFC0U, 0xFEC0U }, /* 1111 1110 11 */
            { eIPv6_Multicast, 0xFF00U, 0xFF00U }, /* 1111 1111 */
            { eIPv6_Loopback,  0xFFFFU, 0x0000U }, /* 0000 0000 ::1 */
        };

        if( pxAddress != NULL )
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d046      	beq.n	800e390 <xIPv6_GetIPType+0xa0>
        {
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( xIPCouples ); xIndex++ )
 800e302:	2300      	movs	r3, #0
 800e304:	613b      	str	r3, [r7, #16]
 800e306:	e040      	b.n	800e38a <xIPv6_GetIPType+0x9a>
            {
                uint16_t usAddress =
                    ( uint16_t ) ( ( ( ( uint16_t ) pxAddress->ucBytes[ 0 ] ) << 8 ) |
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	781b      	ldrb	r3, [r3, #0]
 800e30c:	021b      	lsls	r3, r3, #8
 800e30e:	b21a      	sxth	r2, r3
                                   ( ( uint16_t ) pxAddress->ucBytes[ 1 ] ) );
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	785b      	ldrb	r3, [r3, #1]
 800e314:	b21b      	sxth	r3, r3
                    ( uint16_t ) ( ( ( ( uint16_t ) pxAddress->ucBytes[ 0 ] ) << 8 ) |
 800e316:	4313      	orrs	r3, r2
 800e318:	b21b      	sxth	r3, r3
                uint16_t usAddress =
 800e31a:	81fb      	strh	r3, [r7, #14]

                if( xIPCouples[ xIndex ].eType == eIPv6_Loopback )
 800e31c:	491f      	ldr	r1, [pc, #124]	@ (800e39c <xIPv6_GetIPType+0xac>)
 800e31e:	693a      	ldr	r2, [r7, #16]
 800e320:	4613      	mov	r3, r2
 800e322:	005b      	lsls	r3, r3, #1
 800e324:	4413      	add	r3, r2
 800e326:	005b      	lsls	r3, r3, #1
 800e328:	440b      	add	r3, r1
 800e32a:	781b      	ldrb	r3, [r3, #0]
 800e32c:	2b04      	cmp	r3, #4
 800e32e:	d108      	bne.n	800e342 <xIPv6_GetIPType+0x52>
                {
                    if( xIsIPv6Loopback( pxAddress ) != pdFALSE )
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f7fd f929 	bl	800b588 <xIsIPv6Loopback>
 800e336:	4603      	mov	r3, r0
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d002      	beq.n	800e342 <xIPv6_GetIPType+0x52>
                    {
                        eResult = eIPv6_Loopback;
 800e33c:	2304      	movs	r3, #4
 800e33e:	75fb      	strb	r3, [r7, #23]
                        break;
 800e340:	e026      	b.n	800e390 <xIPv6_GetIPType+0xa0>
                    }
                }

                if( ( usAddress & xIPCouples[ xIndex ].usMask ) == xIPCouples[ xIndex ].usExpected )
 800e342:	4916      	ldr	r1, [pc, #88]	@ (800e39c <xIPv6_GetIPType+0xac>)
 800e344:	693a      	ldr	r2, [r7, #16]
 800e346:	4613      	mov	r3, r2
 800e348:	005b      	lsls	r3, r3, #1
 800e34a:	4413      	add	r3, r2
 800e34c:	005b      	lsls	r3, r3, #1
 800e34e:	440b      	add	r3, r1
 800e350:	3302      	adds	r3, #2
 800e352:	881a      	ldrh	r2, [r3, #0]
 800e354:	89fb      	ldrh	r3, [r7, #14]
 800e356:	4013      	ands	r3, r2
 800e358:	b299      	uxth	r1, r3
 800e35a:	4810      	ldr	r0, [pc, #64]	@ (800e39c <xIPv6_GetIPType+0xac>)
 800e35c:	693a      	ldr	r2, [r7, #16]
 800e35e:	4613      	mov	r3, r2
 800e360:	005b      	lsls	r3, r3, #1
 800e362:	4413      	add	r3, r2
 800e364:	005b      	lsls	r3, r3, #1
 800e366:	4403      	add	r3, r0
 800e368:	3304      	adds	r3, #4
 800e36a:	881b      	ldrh	r3, [r3, #0]
 800e36c:	4299      	cmp	r1, r3
 800e36e:	d109      	bne.n	800e384 <xIPv6_GetIPType+0x94>
                {
                    eResult = xIPCouples[ xIndex ].eType;
 800e370:	490a      	ldr	r1, [pc, #40]	@ (800e39c <xIPv6_GetIPType+0xac>)
 800e372:	693a      	ldr	r2, [r7, #16]
 800e374:	4613      	mov	r3, r2
 800e376:	005b      	lsls	r3, r3, #1
 800e378:	4413      	add	r3, r2
 800e37a:	005b      	lsls	r3, r3, #1
 800e37c:	440b      	add	r3, r1
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	75fb      	strb	r3, [r7, #23]
                    break;
 800e382:	e005      	b.n	800e390 <xIPv6_GetIPType+0xa0>
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( xIPCouples ); xIndex++ )
 800e384:	693b      	ldr	r3, [r7, #16]
 800e386:	3301      	adds	r3, #1
 800e388:	613b      	str	r3, [r7, #16]
 800e38a:	693b      	ldr	r3, [r7, #16]
 800e38c:	2b04      	cmp	r3, #4
 800e38e:	ddbb      	ble.n	800e308 <xIPv6_GetIPType+0x18>
                }
            }
        }

        return eResult;
 800e390:	7dfb      	ldrb	r3, [r7, #23]
    }
 800e392:	4618      	mov	r0, r3
 800e394:	3718      	adds	r7, #24
 800e396:	46bd      	mov	sp, r7
 800e398:	bd80      	pop	{r7, pc}
 800e39a:	bf00      	nop
 800e39c:	08027f8c 	.word	0x08027f8c

0800e3a0 <pcEndpointName>:
 *          The string will be "NULL" if the end point pointer is NULL.
 */
    const char * pcEndpointName( const NetworkEndPoint_t * pxEndPoint,
                                 char * pcBuffer,
                                 size_t uxSize )
    {
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b084      	sub	sp, #16
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	60f8      	str	r0, [r7, #12]
 800e3a8:	60b9      	str	r1, [r7, #8]
 800e3aa:	607a      	str	r2, [r7, #4]
        if( pxEndPoint == NULL )
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d105      	bne.n	800e3be <pcEndpointName+0x1e>
        {
            /* MISRA Ref 21.6.1 [snprintf and logging] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-216 */
            /* coverity[misra_c_2012_rule_21_6_violation] */
            ( void ) snprintf( pcBuffer, uxSize, "NULL" );
 800e3b2:	4a16      	ldr	r2, [pc, #88]	@ (800e40c <pcEndpointName+0x6c>)
 800e3b4:	6879      	ldr	r1, [r7, #4]
 800e3b6:	68b8      	ldr	r0, [r7, #8]
 800e3b8:	f015 fa20 	bl	80237fc <snprintf>
 800e3bc:	e020      	b.n	800e400 <pcEndpointName+0x60>
        }
        else
        {
            switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800e3c4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800e3c8:	b2db      	uxtb	r3, r3
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d002      	beq.n	800e3d4 <pcEndpointName+0x34>
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	d007      	beq.n	800e3e2 <pcEndpointName+0x42>
 800e3d2:	e00f      	b.n	800e3f4 <pcEndpointName+0x54>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE_UNSIGNED:
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
                                                     ( const void * ) &( pxEndPoint->ipv4_settings.ulIPAddress ),
 800e3d4:	68f9      	ldr	r1, [r7, #12]
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	68ba      	ldr	r2, [r7, #8]
 800e3da:	2002      	movs	r0, #2
 800e3dc:	f001 faaa 	bl	800f934 <FreeRTOS_inet_ntop>
                                                     pcBuffer,
                                                     ( socklen_t ) uxSize );
                        break;
 800e3e0:	e00e      	b.n	800e400 <pcEndpointName+0x60>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case pdTRUE_UNSIGNED:
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
                                                     pxEndPoint->ipv6_settings.xIPAddress.ucBytes,
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	68ba      	ldr	r2, [r7, #8]
 800e3ec:	200a      	movs	r0, #10
 800e3ee:	f001 faa1 	bl	800f934 <FreeRTOS_inet_ntop>
                                                     pcBuffer,
                                                     ( socklen_t ) uxSize );
                        break;
 800e3f2:	e005      	b.n	800e400 <pcEndpointName+0x60>
                default:
                    /* MISRA 16.4 Compliance */
                    /* MISRA Ref 21.6.1 [snprintf and logging] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-216 */
                    /* coverity[misra_c_2012_rule_21_6_violation] */
                    ( void ) snprintf( pcBuffer, uxSize, "NULL" );
 800e3f4:	4a05      	ldr	r2, [pc, #20]	@ (800e40c <pcEndpointName+0x6c>)
 800e3f6:	6879      	ldr	r1, [r7, #4]
 800e3f8:	68b8      	ldr	r0, [r7, #8]
 800e3fa:	f015 f9ff 	bl	80237fc <snprintf>
                    break;
 800e3fe:	bf00      	nop
            }
        }

        return pcBuffer;
 800e400:	68bb      	ldr	r3, [r7, #8]
    }
 800e402:	4618      	mov	r0, r3
 800e404:	3710      	adds	r7, #16
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}
 800e40a:	bf00      	nop
 800e40c:	0802625c 	.word	0x0802625c

0800e410 <prvValidSocket>:
 *         is returned.
 */
static BaseType_t prvValidSocket( const FreeRTOS_Socket_t * pxSocket,
                                  BaseType_t xProtocol,
                                  BaseType_t xIsBound )
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b086      	sub	sp, #24
 800e414:	af00      	add	r7, sp, #0
 800e416:	60f8      	str	r0, [r7, #12]
 800e418:	60b9      	str	r1, [r7, #8]
 800e41a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;

    if( xSocketValid( pxSocket ) == pdFALSE )
 800e41c:	68f8      	ldr	r0, [r7, #12]
 800e41e:	f002 fc3f 	bl	8010ca0 <xSocketValid>
 800e422:	4603      	mov	r3, r0
 800e424:	2b00      	cmp	r3, #0
 800e426:	d102      	bne.n	800e42e <prvValidSocket+0x1e>
    {
        xReturn = pdFALSE;
 800e428:	2300      	movs	r3, #0
 800e42a:	617b      	str	r3, [r7, #20]
 800e42c:	e015      	b.n	800e45a <prvValidSocket+0x4a>
    }
    else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d006      	beq.n	800e442 <prvValidSocket+0x32>
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	69db      	ldr	r3, [r3, #28]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d102      	bne.n	800e442 <prvValidSocket+0x32>
    {
        /* The caller expects the socket to be bound, but it isn't. */
        xReturn = pdFALSE;
 800e43c:	2300      	movs	r3, #0
 800e43e:	617b      	str	r3, [r7, #20]
 800e440:	e00b      	b.n	800e45a <prvValidSocket+0x4a>
    }
    else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	b2db      	uxtb	r3, r3
 800e44c:	429a      	cmp	r2, r3
 800e44e:	d002      	beq.n	800e456 <prvValidSocket+0x46>
    {
        /* Socket has a wrong type (UDP != TCP). */
        xReturn = pdFALSE;
 800e450:	2300      	movs	r3, #0
 800e452:	617b      	str	r3, [r7, #20]
 800e454:	e001      	b.n	800e45a <prvValidSocket+0x4a>
    }
    else
    {
        xReturn = pdTRUE;
 800e456:	2301      	movs	r3, #1
 800e458:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800e45a:	697b      	ldr	r3, [r7, #20]
}
 800e45c:	4618      	mov	r0, r3
 800e45e:	3718      	adds	r7, #24
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}

0800e464 <vNetworkSocketsInit>:

/**
 * @brief Initialise the bound TCP/UDP socket lists.
 */
void vNetworkSocketsInit( void )
{
 800e464:	b580      	push	{r7, lr}
 800e466:	af00      	add	r7, sp, #0
    vListInitialise( &xBoundUDPSocketsList );
 800e468:	4803      	ldr	r0, [pc, #12]	@ (800e478 <vNetworkSocketsInit+0x14>)
 800e46a:	f7f5 f9ad 	bl	80037c8 <vListInitialise>

    #if ( ipconfigUSE_TCP == 1 )
    {
        vListInitialise( &xBoundTCPSocketsList );
 800e46e:	4803      	ldr	r0, [pc, #12]	@ (800e47c <vNetworkSocketsInit+0x18>)
 800e470:	f7f5 f9aa 	bl	80037c8 <vListInitialise>
    }
    #endif /* ipconfigUSE_TCP == 1 */
}
 800e474:	bf00      	nop
 800e476:	bd80      	pop	{r7, pc}
 800e478:	200015f4 	.word	0x200015f4
 800e47c:	20001608 	.word	0x20001608

0800e480 <prvDetermineSocketSize>:
 */
static BaseType_t prvDetermineSocketSize( BaseType_t xDomain,
                                          BaseType_t xType,
                                          BaseType_t xProtocol,
                                          size_t * pxSocketSize )
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b086      	sub	sp, #24
 800e484:	af00      	add	r7, sp, #0
 800e486:	60f8      	str	r0, [r7, #12]
 800e488:	60b9      	str	r1, [r7, #8]
 800e48a:	607a      	str	r2, [r7, #4]
 800e48c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800e48e:	2301      	movs	r3, #1
 800e490:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t const * pxSocket = NULL;
 800e492:	2300      	movs	r3, #0
 800e494:	613b      	str	r3, [r7, #16]

    /* Asserts must not appear before it has been determined that the network
     * task is ready - otherwise the asserts will fail. */
    if( xIPIsNetworkTaskReady() == pdFALSE )
 800e496:	f7fb ff97 	bl	800a3c8 <xIPIsNetworkTaskReady>
 800e49a:	4603      	mov	r3, r0
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d102      	bne.n	800e4a6 <prvDetermineSocketSize+0x26>
    {
        xReturn = pdFAIL;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	617b      	str	r3, [r7, #20]
 800e4a4:	e05e      	b.n	800e564 <prvDetermineSocketSize+0xe4>

            configASSERT( xDomain == FREERTOS_AF_INET6 );
        }
        #else /* if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) ) */
        {
            if( ( xDomain != FREERTOS_AF_INET ) && ( xDomain != FREERTOS_AF_INET6 ) )
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	2b02      	cmp	r3, #2
 800e4aa:	d004      	beq.n	800e4b6 <prvDetermineSocketSize+0x36>
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	2b0a      	cmp	r3, #10
 800e4b0:	d001      	beq.n	800e4b6 <prvDetermineSocketSize+0x36>
            {
                xReturn = pdFAIL;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	617b      	str	r3, [r7, #20]
            }

            configASSERT( ( xDomain == FREERTOS_AF_INET ) || ( xDomain == FREERTOS_AF_INET6 ) );
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	2b02      	cmp	r3, #2
 800e4ba:	d002      	beq.n	800e4c2 <prvDetermineSocketSize+0x42>
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	2b0a      	cmp	r3, #10
 800e4c0:	d101      	bne.n	800e4c6 <prvDetermineSocketSize+0x46>
 800e4c2:	2301      	movs	r3, #1
 800e4c4:	e000      	b.n	800e4c8 <prvDetermineSocketSize+0x48>
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d104      	bne.n	800e4d6 <prvDetermineSocketSize+0x56>
 800e4cc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800e4d0:	4827      	ldr	r0, [pc, #156]	@ (800e570 <prvDetermineSocketSize+0xf0>)
 800e4d2:	f7f3 fa99 	bl	8001a08 <vAssertCalled>
        }
        #endif /* if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) ) */

        /* Check if the UDP socket-list has been initialised. */
        configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 800e4d6:	4b27      	ldr	r3, [pc, #156]	@ (800e574 <prvDetermineSocketSize+0xf4>)
 800e4d8:	689b      	ldr	r3, [r3, #8]
 800e4da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4de:	d004      	beq.n	800e4ea <prvDetermineSocketSize+0x6a>
 800e4e0:	f240 11f9 	movw	r1, #505	@ 0x1f9
 800e4e4:	4822      	ldr	r0, [pc, #136]	@ (800e570 <prvDetermineSocketSize+0xf0>)
 800e4e6:	f7f3 fa8f 	bl	8001a08 <vAssertCalled>
        #if ( ipconfigUSE_TCP == 1 )
        {
            /* Check if the TCP socket-list has been initialised. */
            configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 800e4ea:	4b23      	ldr	r3, [pc, #140]	@ (800e578 <prvDetermineSocketSize+0xf8>)
 800e4ec:	689b      	ldr	r3, [r3, #8]
 800e4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4f2:	d004      	beq.n	800e4fe <prvDetermineSocketSize+0x7e>
 800e4f4:	f240 11fd 	movw	r1, #509	@ 0x1fd
 800e4f8:	481d      	ldr	r0, [pc, #116]	@ (800e570 <prvDetermineSocketSize+0xf0>)
 800e4fa:	f7f3 fa85 	bl	8001a08 <vAssertCalled>
        }
        #endif /* ipconfigUSE_TCP == 1 */

        if( xProtocol == FREERTOS_IPPROTO_UDP )
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2b11      	cmp	r3, #17
 800e502:	d110      	bne.n	800e526 <prvDetermineSocketSize+0xa6>
        {
            if( xType != FREERTOS_SOCK_DGRAM )
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	2b02      	cmp	r3, #2
 800e508:	d009      	beq.n	800e51e <prvDetermineSocketSize+0x9e>
            {
                xReturn = pdFAIL;
 800e50a:	2300      	movs	r3, #0
 800e50c:	617b      	str	r3, [r7, #20]
                configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	2b01      	cmp	r3, #1
 800e512:	d004      	beq.n	800e51e <prvDetermineSocketSize+0x9e>
 800e514:	f240 2106 	movw	r1, #518	@ 0x206
 800e518:	4815      	ldr	r0, [pc, #84]	@ (800e570 <prvDetermineSocketSize+0xf0>)
 800e51a:	f7f3 fa75 	bl	8001a08 <vAssertCalled>
            }

            /* In case a UDP socket is created, do not allocate space for TCP data. */
            *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	2270      	movs	r2, #112	@ 0x70
 800e522:	601a      	str	r2, [r3, #0]
 800e524:	e01e      	b.n	800e564 <prvDetermineSocketSize+0xe4>
        }

        #if ( ipconfigUSE_TCP == 1 )
            else if( xProtocol == FREERTOS_IPPROTO_TCP )
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2b06      	cmp	r3, #6
 800e52a:	d111      	bne.n	800e550 <prvDetermineSocketSize+0xd0>
            {
                if( xType != FREERTOS_SOCK_STREAM )
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	2b01      	cmp	r3, #1
 800e530:	d009      	beq.n	800e546 <prvDetermineSocketSize+0xc6>
                {
                    xReturn = pdFAIL;
 800e532:	2300      	movs	r3, #0
 800e534:	617b      	str	r3, [r7, #20]
                    configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	2b01      	cmp	r3, #1
 800e53a:	d004      	beq.n	800e546 <prvDetermineSocketSize+0xc6>
 800e53c:	f240 2113 	movw	r1, #531	@ 0x213
 800e540:	480b      	ldr	r0, [pc, #44]	@ (800e570 <prvDetermineSocketSize+0xf0>)
 800e542:	f7f3 fa61 	bl	8001a08 <vAssertCalled>
                }

                *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800e54c:	601a      	str	r2, [r3, #0]
 800e54e:	e009      	b.n	800e564 <prvDetermineSocketSize+0xe4>
            }
        #endif /* ipconfigUSE_TCP == 1 */
        else
        {
            xReturn = pdFAIL;
 800e550:	2300      	movs	r3, #0
 800e552:	617b      	str	r3, [r7, #20]
            configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800e554:	697b      	ldr	r3, [r7, #20]
 800e556:	2b01      	cmp	r3, #1
 800e558:	d004      	beq.n	800e564 <prvDetermineSocketSize+0xe4>
 800e55a:	f44f 7107 	mov.w	r1, #540	@ 0x21c
 800e55e:	4804      	ldr	r0, [pc, #16]	@ (800e570 <prvDetermineSocketSize+0xf0>)
 800e560:	f7f3 fa52 	bl	8001a08 <vAssertCalled>
    }

    /* In case configASSERT() is not used */
    ( void ) xDomain;
    ( void ) pxSocket; /* Was only used for sizeof. */
    return xReturn;
 800e564:	697b      	ldr	r3, [r7, #20]
}
 800e566:	4618      	mov	r0, r3
 800e568:	3718      	adds	r7, #24
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}
 800e56e:	bf00      	nop
 800e570:	08026264 	.word	0x08026264
 800e574:	200015f4 	.word	0x200015f4
 800e578:	20001608 	.word	0x20001608

0800e57c <prvInitialiseTCPFields>:
 * @param[in] uxSocketSize The calculated size of the socket, only used to
 *                          gather memory usage statistics.
 */
    static void prvInitialiseTCPFields( FreeRTOS_Socket_t * pxSocket,
                                        size_t uxSocketSize )
    {
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b084      	sub	sp, #16
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
 800e584:	6039      	str	r1, [r7, #0]
        ( void ) uxSocketSize;
        /* Lint wants at least a comment, in case the macro is empty. */
        iptraceMEM_STATS_CREATE( tcpSOCKET_TCP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );
        /* StreamSize is expressed in number of bytes */
        /* Round up buffer sizes to nearest multiple of MSS */
        pxSocket->u.xTCP.usMSS = ( uint16_t ) ipconfigTCP_MSS;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800e58c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxSocket->bits.bIsIPv6 != 0U )
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	7a1b      	ldrb	r3, [r3, #8]
 800e594:	f003 0301 	and.w	r3, r3, #1
 800e598:	b2db      	uxtb	r3, r3
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d00a      	beq.n	800e5b4 <prvInitialiseTCPFields+0x38>
            {
                uint16_t usDifference = ipSIZE_OF_IPv6_HEADER - ipSIZE_OF_IPv4_HEADER;
 800e59e:	2314      	movs	r3, #20
 800e5a0:	81fb      	strh	r3, [r7, #14]

                /* Because ipconfigTCP_MSS is guaranteed not less than tcpMINIMUM_SEGMENT_LENGTH by FreeRTOSIPConfigDefaults.h,
                 * it's unnecessary to check if xSocket->u.xTCP.usMSS is greater than difference. */
                pxSocket->u.xTCP.usMSS = ( uint16_t ) ( pxSocket->u.xTCP.usMSS - usDifference );
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 800e5a8:	89fb      	ldrh	r3, [r7, #14]
 800e5aa:	1ad3      	subs	r3, r2, r3
 800e5ac:	b29a      	uxth	r2, r3
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
            }
        #endif /* ipconfigUSE_IPv6 != 0 */

        pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f241 121c 	movw	r2, #4380	@ 0x111c
 800e5ba:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 800e5be:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 800e5c2:	f640 3068 	movw	r0, #2920	@ 0xb68
 800e5c6:	f7fc fc85 	bl	800aed4 <FreeRTOS_round_up>
 800e5ca:	4602      	mov	r2, r0
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        /* Use half of the buffer size of the TCP windows */
        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            pxSocket->u.xTCP.uxRxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxRxStreamSize / 2U ) / ipconfigTCP_MSS );
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e5d8:	08db      	lsrs	r3, r3, #3
 800e5da:	4a10      	ldr	r2, [pc, #64]	@ (800e61c <prvInitialiseTCPFields+0xa0>)
 800e5dc:	fba2 2303 	umull	r2, r3, r2, r3
 800e5e0:	099b      	lsrs	r3, r3, #6
 800e5e2:	4619      	mov	r1, r3
 800e5e4:	2001      	movs	r0, #1
 800e5e6:	f7fc fc35 	bl	800ae54 <FreeRTOS_max_size_t>
 800e5ea:	4602      	mov	r2, r0
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
            pxSocket->u.xTCP.uxTxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxTxStreamSize / 2U ) / ipconfigTCP_MSS );
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e5f8:	08db      	lsrs	r3, r3, #3
 800e5fa:	4a08      	ldr	r2, [pc, #32]	@ (800e61c <prvInitialiseTCPFields+0xa0>)
 800e5fc:	fba2 2303 	umull	r2, r3, r2, r3
 800e600:	099b      	lsrs	r3, r3, #6
 800e602:	4619      	mov	r1, r3
 800e604:	2001      	movs	r0, #1
 800e606:	f7fc fc25 	bl	800ae54 <FreeRTOS_max_size_t>
 800e60a:	4602      	mov	r2, r0
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
        #endif

        /* The above values are just defaults, and can be overridden by
         * calling FreeRTOS_setsockopt().  No buffers will be allocated until a
         * socket is connected and data is exchanged. */
    }
 800e612:	bf00      	nop
 800e614:	3710      	adds	r7, #16
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}
 800e61a:	bf00      	nop
 800e61c:	2ce33e6d 	.word	0x2ce33e6d

0800e620 <FreeRTOS_socket>:
 *         a parameter error, otherwise a valid socket.
 */
Socket_t FreeRTOS_socket( BaseType_t xDomain,
                          BaseType_t xType,
                          BaseType_t xProtocol )
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b08a      	sub	sp, #40	@ 0x28
 800e624:	af00      	add	r7, sp, #0
 800e626:	60f8      	str	r0, [r7, #12]
 800e628:	60b9      	str	r1, [r7, #8]
 800e62a:	607a      	str	r2, [r7, #4]
    FreeRTOS_Socket_t * pxSocket;

/* Note that this value will be over-written by the call to prvDetermineSocketSize. */
    size_t uxSocketSize = 1;
 800e62c:	2301      	movs	r3, #1
 800e62e:	617b      	str	r3, [r7, #20]
    EventGroupHandle_t xEventGroup;
    Socket_t xReturn;
    BaseType_t xProtocolCpy = xProtocol;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	623b      	str	r3, [r7, #32]

    configASSERT( ( xDomain == FREERTOS_AF_INET6 ) || ( xDomain == FREERTOS_AF_INET ) );
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	2b0a      	cmp	r3, #10
 800e638:	d002      	beq.n	800e640 <FreeRTOS_socket+0x20>
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	2b02      	cmp	r3, #2
 800e63e:	d101      	bne.n	800e644 <FreeRTOS_socket+0x24>
 800e640:	2301      	movs	r3, #1
 800e642:	e000      	b.n	800e646 <FreeRTOS_socket+0x26>
 800e644:	2300      	movs	r3, #0
 800e646:	2b00      	cmp	r3, #0
 800e648:	d104      	bne.n	800e654 <FreeRTOS_socket+0x34>
 800e64a:	f240 2171 	movw	r1, #625	@ 0x271
 800e64e:	4845      	ldr	r0, [pc, #276]	@ (800e764 <FreeRTOS_socket+0x144>)
 800e650:	f7f3 f9da 	bl	8001a08 <vAssertCalled>
         * to passing 0 as defined by POSIX, indicates to the socket layer that it
         * should pick a sensible default protocol based off the given socket type.
         * If we can't, prvDetermineSocketSize will catch it as an invalid
         * type/protocol combo.
         */
        if( xProtocol == FREERTOS_SOCK_DEPENDENT_PROTO )
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d10c      	bne.n	800e674 <FreeRTOS_socket+0x54>
        {
            switch( xType )
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	2b01      	cmp	r3, #1
 800e65e:	d005      	beq.n	800e66c <FreeRTOS_socket+0x4c>
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	2b02      	cmp	r3, #2
 800e664:	d105      	bne.n	800e672 <FreeRTOS_socket+0x52>
            {
                case FREERTOS_SOCK_DGRAM:
                    xProtocolCpy = FREERTOS_IPPROTO_UDP;
 800e666:	2311      	movs	r3, #17
 800e668:	623b      	str	r3, [r7, #32]
                    break;
 800e66a:	e003      	b.n	800e674 <FreeRTOS_socket+0x54>

                case FREERTOS_SOCK_STREAM:
                    xProtocolCpy = FREERTOS_IPPROTO_TCP;
 800e66c:	2306      	movs	r3, #6
 800e66e:	623b      	str	r3, [r7, #32]
                    break;
 800e670:	e000      	b.n	800e674 <FreeRTOS_socket+0x54>
                default:

                    /* incorrect xType. this will be caught by
                     * prvDetermineSocketSize.
                     */
                    break;
 800e672:	bf00      	nop
            }
        }

        if( prvDetermineSocketSize( xDomain, xType, xProtocolCpy, &uxSocketSize ) == pdFAIL )
 800e674:	f107 0314 	add.w	r3, r7, #20
 800e678:	6a3a      	ldr	r2, [r7, #32]
 800e67a:	68b9      	ldr	r1, [r7, #8]
 800e67c:	68f8      	ldr	r0, [r7, #12]
 800e67e:	f7ff feff 	bl	800e480 <prvDetermineSocketSize>
 800e682:	4603      	mov	r3, r0
 800e684:	2b00      	cmp	r3, #0
 800e686:	d103      	bne.n	800e690 <FreeRTOS_socket+0x70>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800e688:	f04f 33ff 	mov.w	r3, #4294967295
 800e68c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800e68e:	e063      	b.n	800e758 <FreeRTOS_socket+0x138>
        * By default it points to the FreeRTOS function 'pvPortMalloc()'. */

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxSocket = ( ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize ) );
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	4618      	mov	r0, r3
 800e694:	f7f8 f986 	bl	80069a4 <pvPortMalloc>
 800e698:	61f8      	str	r0, [r7, #28]

        if( pxSocket == NULL )
 800e69a:	69fb      	ldr	r3, [r7, #28]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d103      	bne.n	800e6a8 <FreeRTOS_socket+0x88>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800e6a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e6a4:	627b      	str	r3, [r7, #36]	@ 0x24
            iptraceFAILED_TO_CREATE_SOCKET();
            break;
 800e6a6:	e057      	b.n	800e758 <FreeRTOS_socket+0x138>
        }

        xEventGroup = xEventGroupCreate();
 800e6a8:	f7f4 feb9 	bl	800341e <xEventGroupCreate>
 800e6ac:	61b8      	str	r0, [r7, #24]

        if( xEventGroup == NULL )
 800e6ae:	69bb      	ldr	r3, [r7, #24]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d106      	bne.n	800e6c2 <FreeRTOS_socket+0xa2>
        {
            vPortFreeSocket( pxSocket );
 800e6b4:	69f8      	ldr	r0, [r7, #28]
 800e6b6:	f7f8 fa49 	bl	8006b4c <vPortFree>

            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800e6ba:	f04f 33ff 	mov.w	r3, #4294967295
 800e6be:	627b      	str	r3, [r7, #36]	@ 0x24
 800e6c0:	e04a      	b.n	800e758 <FreeRTOS_socket+0x138>
            iptraceFAILED_TO_CREATE_EVENT_GROUP();
        }
        else
        {
            /* Clear the entire space to avoid nulling individual entries. */
            ( void ) memset( pxSocket, 0, uxSocketSize );
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	461a      	mov	r2, r3
 800e6c6:	2100      	movs	r1, #0
 800e6c8:	69f8      	ldr	r0, [r7, #28]
 800e6ca:	f014 fb94 	bl	8022df6 <memset>

            pxSocket->xEventGroup = xEventGroup;
 800e6ce:	69fb      	ldr	r3, [r7, #28]
 800e6d0:	69ba      	ldr	r2, [r7, #24]
 800e6d2:	605a      	str	r2, [r3, #4]

            switch( xDomain ) /* LCOV_EXCL_BR_LINE Exclude this because domain is checked at the begin of this function. */
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	2b02      	cmp	r3, #2
 800e6d8:	d008      	beq.n	800e6ec <FreeRTOS_socket+0xcc>
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	2b0a      	cmp	r3, #10
 800e6de:	d10b      	bne.n	800e6f8 <FreeRTOS_socket+0xd8>
            {
                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800e6e0:	69fa      	ldr	r2, [r7, #28]
 800e6e2:	7a13      	ldrb	r3, [r2, #8]
 800e6e4:	f043 0301 	orr.w	r3, r3, #1
 800e6e8:	7213      	strb	r3, [r2, #8]
                        break;
 800e6ea:	e009      	b.n	800e700 <FreeRTOS_socket+0xe0>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET:
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800e6ec:	69fa      	ldr	r2, [r7, #28]
 800e6ee:	7a13      	ldrb	r3, [r2, #8]
 800e6f0:	f36f 0300 	bfc	r3, #0, #1
 800e6f4:	7213      	strb	r3, [r2, #8]
                        break;
 800e6f6:	e003      	b.n	800e700 <FreeRTOS_socket+0xe0>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default: /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
                    FreeRTOS_debug_printf( ( "FreeRTOS_socket: Undefined xDomain \n" ) );
 800e6f8:	481b      	ldr	r0, [pc, #108]	@ (800e768 <FreeRTOS_socket+0x148>)
 800e6fa:	f014 f853 	bl	80227a4 <lUDPLoggingPrintf>

                    /* MISRA 16.4 Compliance */
                    break; /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
 800e6fe:	bf00      	nop
            }

            /* Initialise the socket's members.  The semaphore will be created
             * if the socket is bound to an address, for now the pointer to the
             * semaphore is just set to NULL to show it has not been created. */
            if( xProtocolCpy == FREERTOS_IPPROTO_UDP )
 800e700:	6a3b      	ldr	r3, [r7, #32]
 800e702:	2b11      	cmp	r3, #17
 800e704:	d105      	bne.n	800e712 <FreeRTOS_socket+0xf2>
            {
                iptraceMEM_STATS_CREATE( tcpSOCKET_UDP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );

                vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800e706:	69fb      	ldr	r3, [r7, #28]
 800e708:	3354      	adds	r3, #84	@ 0x54
 800e70a:	4618      	mov	r0, r3
 800e70c:	f7f5 f85c 	bl	80037c8 <vListInitialise>
 800e710:	e007      	b.n	800e722 <FreeRTOS_socket+0x102>
                }
                #endif /* ipconfigUDP_MAX_RX_PACKETS > 0 */
            }

            #if ( ipconfigUSE_TCP == 1 )
                else if( xProtocolCpy == FREERTOS_IPPROTO_TCP ) /* LCOV_EXCL_BR_LINE Exclude else case because protocol is checked in prvDetermineSocketSize */
 800e712:	6a3b      	ldr	r3, [r7, #32]
 800e714:	2b06      	cmp	r3, #6
 800e716:	d104      	bne.n	800e722 <FreeRTOS_socket+0x102>
                {
                    prvInitialiseTCPFields( pxSocket, uxSocketSize );
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	4619      	mov	r1, r3
 800e71c:	69f8      	ldr	r0, [r7, #28]
 800e71e:	f7ff ff2d 	bl	800e57c <prvInitialiseTCPFields>
                {
                    /* MISRA wants to see an unconditional else clause. */
                }
            #endif /* ipconfigUSE_TCP == 1 */

            vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800e722:	69fb      	ldr	r3, [r7, #28]
 800e724:	330c      	adds	r3, #12
 800e726:	4618      	mov	r0, r3
 800e728:	f7f5 f86e 	bl	8003808 <vListInitialiseItem>
            listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ( void * ) pxSocket );
 800e72c:	69fb      	ldr	r3, [r7, #28]
 800e72e:	69fa      	ldr	r2, [r7, #28]
 800e730:	619a      	str	r2, [r3, #24]

            pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 800e732:	69fb      	ldr	r3, [r7, #28]
 800e734:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e738:	621a      	str	r2, [r3, #32]
            pxSocket->xSendBlockTime = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 800e73a:	69fb      	ldr	r3, [r7, #28]
 800e73c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e740:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->ucSocketOptions = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800e742:	69fb      	ldr	r3, [r7, #28]
 800e744:	2202      	movs	r2, #2
 800e746:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            pxSocket->ucProtocol = ( uint8_t ) xProtocolCpy; /* protocol: UDP or TCP */
 800e74a:	6a3b      	ldr	r3, [r7, #32]
 800e74c:	b2da      	uxtb	r2, r3
 800e74e:	69fb      	ldr	r3, [r7, #28]
 800e750:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b

            xReturn = pxSocket;
 800e754:	69fb      	ldr	r3, [r7, #28]
 800e756:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 800e758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e75a:	4618      	mov	r0, r3
 800e75c:	3728      	adds	r7, #40	@ 0x28
 800e75e:	46bd      	mov	sp, r7
 800e760:	bd80      	pop	{r7, pc}
 800e762:	bf00      	nop
 800e764:	08026264 	.word	0x08026264
 800e768:	08026294 	.word	0x08026294

0800e76c <prvMakeSureSocketIsBound>:
 * @param[in] pxSocket The socket that must be bound to a port number.
 * @return Returns pdTRUE if the socket was already bound, or if the
 *         socket has been bound successfully.
 */
static BaseType_t prvMakeSureSocketIsBound( FreeRTOS_Socket_t * pxSocket )
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b084      	sub	sp, #16
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
    /* Check if this is a valid UDP socket, does not have to be bound yet. */
    BaseType_t xReturn = prvValidSocket( pxSocket, FREERTOS_IPPROTO_UDP, pdFALSE );
 800e774:	2200      	movs	r2, #0
 800e776:	2111      	movs	r1, #17
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	f7ff fe49 	bl	800e410 <prvValidSocket>
 800e77e:	60f8      	str	r0, [r7, #12]

    if( ( xReturn == pdTRUE ) && ( !socketSOCKET_IS_BOUND( pxSocket ) ) )
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	2b01      	cmp	r3, #1
 800e784:	d10d      	bne.n	800e7a2 <prvMakeSureSocketIsBound+0x36>
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	69db      	ldr	r3, [r3, #28]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d109      	bne.n	800e7a2 <prvMakeSureSocketIsBound+0x36>
    {
        /* The socket is valid but it is not yet bound. */
        if( FreeRTOS_bind( pxSocket, NULL, 0U ) != 0 )
 800e78e:	2200      	movs	r2, #0
 800e790:	2100      	movs	r1, #0
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f000 f934 	bl	800ea00 <FreeRTOS_bind>
 800e798:	4603      	mov	r3, r0
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d001      	beq.n	800e7a2 <prvMakeSureSocketIsBound+0x36>
        {
            /* The socket was not yet bound, and binding it has failed. */
            xReturn = pdFALSE;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
}
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	3710      	adds	r7, #16
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}

0800e7ac <prvSendUDPPacket>:
                                 size_t uxTotalDataLength,
                                 BaseType_t xFlags,
                                 const struct freertos_sockaddr * pxDestinationAddress,
                                 TickType_t xTicksToWait,
                                 size_t uxPayloadOffset )
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b088      	sub	sp, #32
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	60f8      	str	r0, [r7, #12]
 800e7b4:	60b9      	str	r1, [r7, #8]
 800e7b6:	607a      	str	r2, [r7, #4]
 800e7b8:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	61fb      	str	r3, [r7, #28]
    IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 800e7be:	2304      	movs	r3, #4
 800e7c0:	753b      	strb	r3, [r7, #20]
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	61bb      	str	r3, [r7, #24]

    switch( pxDestinationAddress->sin_family ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is checked before calling. */
 800e7c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7c8:	785b      	ldrb	r3, [r3, #1]
 800e7ca:	2b02      	cmp	r3, #2
 800e7cc:	d006      	beq.n	800e7dc <prvSendUDPPacket+0x30>
 800e7ce:	2b0a      	cmp	r3, #10
 800e7d0:	d109      	bne.n	800e7e6 <prvSendUDPPacket+0x3a>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                ( void ) xSend_UDP_Update_IPv6( pxNetworkBuffer, pxDestinationAddress );
 800e7d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e7d4:	68b8      	ldr	r0, [r7, #8]
 800e7d6:	f7fd f903 	bl	800b9e0 <xSend_UDP_Update_IPv6>
                break;
 800e7da:	e005      	b.n	800e7e8 <prvSendUDPPacket+0x3c>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                ( void ) xSend_UDP_Update_IPv4( pxNetworkBuffer, pxDestinationAddress );
 800e7dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e7de:	68b8      	ldr	r0, [r7, #8]
 800e7e0:	f7fc fd68 	bl	800b2b4 <xSend_UDP_Update_IPv4>
                break;
 800e7e4:	e000      	b.n	800e7e8 <prvSendUDPPacket+0x3c>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:   /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
            /* MISRA 16.4 Compliance */
            break; /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800e7e6:	bf00      	nop
    }

    pxNetworkBuffer->xDataLength = uxTotalDataLength + uxPayloadOffset;
 800e7e8:	687a      	ldr	r2, [r7, #4]
 800e7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7ec:	441a      	add	r2, r3
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	629a      	str	r2, [r3, #40]	@ 0x28
    pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 800e7f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7f4:	885a      	ldrh	r2, [r3, #2]
 800e7f6:	68bb      	ldr	r3, [r7, #8]
 800e7f8:	869a      	strh	r2, [r3, #52]	@ 0x34
    pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	68db      	ldr	r3, [r3, #12]
 800e7fe:	b29a      	uxth	r2, r3
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	86da      	strh	r2, [r3, #54]	@ 0x36

    /* The socket options are passed to the IP layer in the
     * space that will eventually get used by the Ethernet header. */
    pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = pxSocket->ucSocketOptions;
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e808:	3306      	adds	r3, #6
 800e80a:	68fa      	ldr	r2, [r7, #12]
 800e80c:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 800e810:	701a      	strb	r2, [r3, #0]

    /* Tell the networking task that the packet needs sending. */
    xStackTxEvent.pvData = pxNetworkBuffer;
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	61bb      	str	r3, [r7, #24]

    /* Ask the IP-task to send this packet */
    if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 800e816:	f107 0314 	add.w	r3, r7, #20
 800e81a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e81c:	4618      	mov	r0, r3
 800e81e:	f7fb fa37 	bl	8009c90 <xSendEventStructToIPTask>
 800e822:	4603      	mov	r3, r0
 800e824:	2b01      	cmp	r3, #1
 800e826:	d10b      	bne.n	800e840 <prvSendUDPPacket+0x94>
    {
        /* The packet was successfully sent to the IP task. */
        lReturn = ( int32_t ) uxTotalDataLength;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleSent ) )
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e830:	2b00      	cmp	r3, #0
 800e832:	d00d      	beq.n	800e850 <prvSendUDPPacket+0xa4>
            {
                pxSocket->u.xUDP.pxHandleSent( ( FreeRTOS_Socket_t * ) pxSocket, uxTotalDataLength );
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e838:	6879      	ldr	r1, [r7, #4]
 800e83a:	68f8      	ldr	r0, [r7, #12]
 800e83c:	4798      	blx	r3
 800e83e:	e007      	b.n	800e850 <prvSendUDPPacket+0xa4>
    }
    else
    {
        /* If the buffer was allocated in this function, release
         * it. */
        if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	f003 0301 	and.w	r3, r3, #1
 800e846:	2b00      	cmp	r3, #0
 800e848:	d102      	bne.n	800e850 <prvSendUDPPacket+0xa4>
        {
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800e84a:	68b8      	ldr	r0, [r7, #8]
 800e84c:	f009 f902 	bl	8017a54 <vReleaseNetworkBufferAndDescriptor>
        }

        iptraceSTACK_TX_EVENT_LOST( ipSTACK_TX_EVENT );
    }

    return lReturn;
 800e850:	69fb      	ldr	r3, [r7, #28]
}
 800e852:	4618      	mov	r0, r3
 800e854:	3720      	adds	r7, #32
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}

0800e85a <prvSendTo_ActualSend>:
                                     const void * pvBuffer,
                                     size_t uxTotalDataLength,
                                     BaseType_t xFlags,
                                     const struct freertos_sockaddr * pxDestinationAddress,
                                     size_t uxPayloadOffset )
{
 800e85a:	b580      	push	{r7, lr}
 800e85c:	b08e      	sub	sp, #56	@ 0x38
 800e85e:	af04      	add	r7, sp, #16
 800e860:	60f8      	str	r0, [r7, #12]
 800e862:	60b9      	str	r1, [r7, #8]
 800e864:	607a      	str	r2, [r7, #4]
 800e866:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800e868:	2300      	movs	r3, #0
 800e86a:	627b      	str	r3, [r7, #36]	@ 0x24
    TickType_t xTicksToWait = pxSocket->xSendBlockTime;
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e870:	61bb      	str	r3, [r7, #24]
    TimeOut_t xTimeOut;
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    if( ( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U ) ||
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	f003 0310 	and.w	r3, r3, #16
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d104      	bne.n	800e886 <prvSendTo_ActualSend+0x2c>
        ( xIsCallingFromIPTask() != pdFALSE ) )
 800e87c:	f7fc f94a 	bl	800ab14 <xIsCallingFromIPTask>
 800e880:	4603      	mov	r3, r0
    if( ( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U ) ||
 800e882:	2b00      	cmp	r3, #0
 800e884:	d001      	beq.n	800e88a <prvSendTo_ActualSend+0x30>
    {
        /* The caller wants a non-blocking operation. When called by the IP-task,
         * the operation should always be non-blocking. */
        xTicksToWait = ( TickType_t ) 0U;
 800e886:	2300      	movs	r3, #0
 800e888:	61bb      	str	r3, [r7, #24]
    }

    if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	f003 0301 	and.w	r3, r3, #1
 800e890:	2b00      	cmp	r3, #0
 800e892:	d128      	bne.n	800e8e6 <prvSendTo_ActualSend+0x8c>
    {
        /* Zero copy is not set, so obtain a network buffer into
         * which the payload will be copied. */
        vTaskSetTimeOutState( &xTimeOut );
 800e894:	f107 0310 	add.w	r3, r7, #16
 800e898:	4618      	mov	r0, r3
 800e89a:	f7f6 fdc3 	bl	8005424 <vTaskSetTimeOutState>

        /* Block until a buffer becomes available, or until a
         * timeout has been reached */
        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPayloadOffset + uxTotalDataLength, xTicksToWait );
 800e89e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	4413      	add	r3, r2
 800e8a4:	69ba      	ldr	r2, [r7, #24]
 800e8a6:	4611      	mov	r1, r2
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f009 f86b 	bl	8017984 <pxGetNetworkBufferWithDescriptor>
 800e8ae:	6238      	str	r0, [r7, #32]

        if( pxNetworkBuffer != NULL )
 800e8b0:	6a3b      	ldr	r3, [r7, #32]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d01b      	beq.n	800e8ee <prvSendTo_ActualSend+0x94>
        {
            void * pvCopyDest = ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ uxPayloadOffset ] );
 800e8b6:	6a3b      	ldr	r3, [r7, #32]
 800e8b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e8ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8bc:	4413      	add	r3, r2
 800e8be:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvBuffer, uxTotalDataLength );
 800e8c0:	687a      	ldr	r2, [r7, #4]
 800e8c2:	68b9      	ldr	r1, [r7, #8]
 800e8c4:	69f8      	ldr	r0, [r7, #28]
 800e8c6:	f014 f989 	bl	8022bdc <memcpy>

            if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE )
 800e8ca:	f107 0218 	add.w	r2, r7, #24
 800e8ce:	f107 0310 	add.w	r3, r7, #16
 800e8d2:	4611      	mov	r1, r2
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f7f6 fddd 	bl	8005494 <xTaskCheckForTimeOut>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	2b01      	cmp	r3, #1
 800e8de:	d106      	bne.n	800e8ee <prvSendTo_ActualSend+0x94>
            {
                /* The entire block time has been used up. */
                xTicksToWait = ( TickType_t ) 0;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	61bb      	str	r3, [r7, #24]
 800e8e4:	e003      	b.n	800e8ee <prvSendTo_ActualSend+0x94>
    else
    {
        /* When zero copy is used, pvBuffer is a pointer to the
         * payload of a buffer that has already been obtained from the
         * stack.  Obtain the network buffer pointer from the buffer. */
        pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer );
 800e8e6:	68b8      	ldr	r0, [r7, #8]
 800e8e8:	f7fc f8cc 	bl	800aa84 <pxUDPPayloadBuffer_to_NetworkBuffer>
 800e8ec:	6238      	str	r0, [r7, #32]
    }

    if( pxNetworkBuffer != NULL )
 800e8ee:	6a3b      	ldr	r3, [r7, #32]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d010      	beq.n	800e916 <prvSendTo_ActualSend+0xbc>
    {
        pxNetworkBuffer->pxEndPoint = pxSocket->pxEndPoint;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e8f8:	6a3b      	ldr	r3, [r7, #32]
 800e8fa:	631a      	str	r2, [r3, #48]	@ 0x30
        lReturn = prvSendUDPPacket( pxSocket,
 800e8fc:	69bb      	ldr	r3, [r7, #24]
 800e8fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e900:	9202      	str	r2, [sp, #8]
 800e902:	9301      	str	r3, [sp, #4]
 800e904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e906:	9300      	str	r3, [sp, #0]
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	687a      	ldr	r2, [r7, #4]
 800e90c:	6a39      	ldr	r1, [r7, #32]
 800e90e:	68f8      	ldr	r0, [r7, #12]
 800e910:	f7ff ff4c 	bl	800e7ac <prvSendUDPPacket>
 800e914:	6278      	str	r0, [r7, #36]	@ 0x24
         * number of transmitted bytes, so the calling function knows
         * how  much data was actually sent. */
        iptraceNO_BUFFER_FOR_SENDTO();
    }

    return lReturn;
 800e916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e918:	4618      	mov	r0, r3
 800e91a:	3728      	adds	r7, #40	@ 0x28
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}

0800e920 <FreeRTOS_sendto>:
                         const void * pvBuffer,
                         size_t uxTotalDataLength,
                         BaseType_t xFlags,
                         const struct freertos_sockaddr * pxDestinationAddress,
                         socklen_t xDestinationAddressLength )
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b090      	sub	sp, #64	@ 0x40
 800e924:	af02      	add	r7, sp, #8
 800e926:	60f8      	str	r0, [r7, #12]
 800e928:	60b9      	str	r1, [r7, #8]
 800e92a:	607a      	str	r2, [r7, #4]
 800e92c:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800e92e:	2300      	movs	r3, #0
 800e930:	637b      	str	r3, [r7, #52]	@ 0x34
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxMaxPayloadLength = 0;
 800e936:	2300      	movs	r3, #0
 800e938:	633b      	str	r3, [r7, #48]	@ 0x30
    size_t uxPayloadOffset = 0;
 800e93a:	2300      	movs	r3, #0
 800e93c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        struct freertos_sockaddr xTempDestinationAddress;

        if( ( pxDestinationAddress != NULL ) && ( pxDestinationAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxDestinationAddress->sin_family != FREERTOS_AF_INET ) )
 800e93e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e940:	2b00      	cmp	r3, #0
 800e942:	d013      	beq.n	800e96c <FreeRTOS_sendto+0x4c>
 800e944:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e946:	785b      	ldrb	r3, [r3, #1]
 800e948:	2b0a      	cmp	r3, #10
 800e94a:	d00f      	beq.n	800e96c <FreeRTOS_sendto+0x4c>
 800e94c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e94e:	785b      	ldrb	r3, [r3, #1]
 800e950:	2b02      	cmp	r3, #2
 800e952:	d00b      	beq.n	800e96c <FreeRTOS_sendto+0x4c>
        {
            ( void ) memcpy( &xTempDestinationAddress, pxDestinationAddress, sizeof( struct freertos_sockaddr ) );
 800e954:	f107 0310 	add.w	r3, r7, #16
 800e958:	2218      	movs	r2, #24
 800e95a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e95c:	4618      	mov	r0, r3
 800e95e:	f014 f93d 	bl	8022bdc <memcpy>

            /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
             *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
            xTempDestinationAddress.sin_family = FREERTOS_AF_INET;
 800e962:	2302      	movs	r3, #2
 800e964:	747b      	strb	r3, [r7, #17]
            pxDestinationAddress = &xTempDestinationAddress;
 800e966:	f107 0310 	add.w	r3, r7, #16
 800e96a:	643b      	str	r3, [r7, #64]	@ 0x40

    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the
     * parameters. */
    ( void ) xDestinationAddressLength;
    configASSERT( pxDestinationAddress != NULL );
 800e96c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d104      	bne.n	800e97c <FreeRTOS_sendto+0x5c>
 800e972:	f240 6143 	movw	r1, #1603	@ 0x643
 800e976:	4820      	ldr	r0, [pc, #128]	@ (800e9f8 <FreeRTOS_sendto+0xd8>)
 800e978:	f7f3 f846 	bl	8001a08 <vAssertCalled>
    configASSERT( pvBuffer != NULL );
 800e97c:	68bb      	ldr	r3, [r7, #8]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d104      	bne.n	800e98c <FreeRTOS_sendto+0x6c>
 800e982:	f240 6144 	movw	r1, #1604	@ 0x644
 800e986:	481c      	ldr	r0, [pc, #112]	@ (800e9f8 <FreeRTOS_sendto+0xd8>)
 800e988:	f7f3 f83e 	bl	8001a08 <vAssertCalled>

    switch( pxDestinationAddress->sin_family )
 800e98c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e98e:	785b      	ldrb	r3, [r3, #1]
 800e990:	2b02      	cmp	r3, #2
 800e992:	d007      	beq.n	800e9a4 <FreeRTOS_sendto+0x84>
 800e994:	2b0a      	cmp	r3, #10
 800e996:	d10b      	bne.n	800e9b0 <FreeRTOS_sendto+0x90>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                uxMaxPayloadLength = ipconfigNETWORK_MTU - ( ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER );
 800e998:	f240 53ac 	movw	r3, #1452	@ 0x5ac
 800e99c:	633b      	str	r3, [r7, #48]	@ 0x30
                uxPayloadOffset = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER;
 800e99e:	233e      	movs	r3, #62	@ 0x3e
 800e9a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800e9a2:	e00c      	b.n	800e9be <FreeRTOS_sendto+0x9e>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                uxMaxPayloadLength = ipconfigNETWORK_MTU - ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 800e9a4:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 800e9a8:	633b      	str	r3, [r7, #48]	@ 0x30
                uxPayloadOffset = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER;
 800e9aa:	232a      	movs	r3, #42	@ 0x2a
 800e9ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800e9ae:	e006      	b.n	800e9be <FreeRTOS_sendto+0x9e>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:
            FreeRTOS_debug_printf( ( "FreeRTOS_sendto: Undefined sin_family \n" ) );
 800e9b0:	4812      	ldr	r0, [pc, #72]	@ (800e9fc <FreeRTOS_sendto+0xdc>)
 800e9b2:	f013 fef7 	bl	80227a4 <lUDPLoggingPrintf>
            lReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e9b6:	f06f 0315 	mvn.w	r3, #21
 800e9ba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e9bc:	bf00      	nop
    }

    if( lReturn == 0 )
 800e9be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d114      	bne.n	800e9ee <FreeRTOS_sendto+0xce>
    {
        if( uxTotalDataLength <= ( size_t ) uxMaxPayloadLength )
 800e9c4:	687a      	ldr	r2, [r7, #4]
 800e9c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d810      	bhi.n	800e9ee <FreeRTOS_sendto+0xce>
        {
            /* If the socket is not already bound to an address, bind it now.
             * Passing NULL as the address parameter tells FreeRTOS_bind() to select
             * the address to bind to. */
            if( prvMakeSureSocketIsBound( pxSocket ) == pdTRUE )
 800e9cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9ce:	f7ff fecd 	bl	800e76c <prvMakeSureSocketIsBound>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	2b01      	cmp	r3, #1
 800e9d6:	d10a      	bne.n	800e9ee <FreeRTOS_sendto+0xce>
            {
                lReturn = prvSendTo_ActualSend( pxSocket, pvBuffer, uxTotalDataLength, xFlags, pxDestinationAddress, uxPayloadOffset );
 800e9d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9da:	9301      	str	r3, [sp, #4]
 800e9dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e9de:	9300      	str	r3, [sp, #0]
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	687a      	ldr	r2, [r7, #4]
 800e9e4:	68b9      	ldr	r1, [r7, #8]
 800e9e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9e8:	f7ff ff37 	bl	800e85a <prvSendTo_ActualSend>
 800e9ec:	6378      	str	r0, [r7, #52]	@ 0x34
            /* The data is longer than the available buffer space. */
            iptraceSENDTO_DATA_TOO_LONG();
        }
    }

    return lReturn;
 800e9ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
} /* Tested */
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3738      	adds	r7, #56	@ 0x38
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}
 800e9f8:	08026264 	.word	0x08026264
 800e9fc:	08026318 	.word	0x08026318

0800ea00 <FreeRTOS_bind>:
 *         If some error occurred, then a negative value is returned.
 */
BaseType_t FreeRTOS_bind( Socket_t xSocket,
                          struct freertos_sockaddr const * pxAddress,
                          socklen_t xAddressLength )
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b090      	sub	sp, #64	@ 0x40
 800ea04:	af02      	add	r7, sp, #8
 800ea06:	60f8      	str	r0, [r7, #12]
 800ea08:	60b9      	str	r1, [r7, #8]
 800ea0a:	607a      	str	r2, [r7, #4]
    IPStackEvent_t xBindEvent;
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	633b      	str	r3, [r7, #48]	@ 0x30
    BaseType_t xReturn = 0;
 800ea10:	2300      	movs	r3, #0
 800ea12:	637b      	str	r3, [r7, #52]	@ 0x34

    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        struct freertos_sockaddr xTempAddress;

        if( ( pxAddress != NULL ) && ( pxAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxAddress->sin_family != FREERTOS_AF_INET ) )
 800ea14:	68bb      	ldr	r3, [r7, #8]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d013      	beq.n	800ea42 <FreeRTOS_bind+0x42>
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	785b      	ldrb	r3, [r3, #1]
 800ea1e:	2b0a      	cmp	r3, #10
 800ea20:	d00f      	beq.n	800ea42 <FreeRTOS_bind+0x42>
 800ea22:	68bb      	ldr	r3, [r7, #8]
 800ea24:	785b      	ldrb	r3, [r3, #1]
 800ea26:	2b02      	cmp	r3, #2
 800ea28:	d00b      	beq.n	800ea42 <FreeRTOS_bind+0x42>
        {
            ( void ) memcpy( &xTempAddress, pxAddress, sizeof( struct freertos_sockaddr ) );
 800ea2a:	f107 0310 	add.w	r3, r7, #16
 800ea2e:	2218      	movs	r2, #24
 800ea30:	68b9      	ldr	r1, [r7, #8]
 800ea32:	4618      	mov	r0, r3
 800ea34:	f014 f8d2 	bl	8022bdc <memcpy>

            /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
             *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
            xTempAddress.sin_family = FREERTOS_AF_INET;
 800ea38:	2302      	movs	r3, #2
 800ea3a:	747b      	strb	r3, [r7, #17]
            pxAddress = &xTempAddress;
 800ea3c:	f107 0310 	add.w	r3, r7, #16
 800ea40:	60bb      	str	r3, [r7, #8]
        }
    #endif /* ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 ) */

    ( void ) xAddressLength;

    configASSERT( xIsCallingFromIPTask() == pdFALSE );
 800ea42:	f7fc f867 	bl	800ab14 <xIsCallingFromIPTask>
 800ea46:	4603      	mov	r3, r0
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d004      	beq.n	800ea56 <FreeRTOS_bind+0x56>
 800ea4c:	f240 61a1 	movw	r1, #1697	@ 0x6a1
 800ea50:	484b      	ldr	r0, [pc, #300]	@ (800eb80 <FreeRTOS_bind+0x180>)
 800ea52:	f7f2 ffd9 	bl	8001a08 <vAssertCalled>

    if( xSocketValid( pxSocket ) == pdFALSE )
 800ea56:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ea58:	f002 f922 	bl	8010ca0 <xSocketValid>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d103      	bne.n	800ea6a <FreeRTOS_bind+0x6a>
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ea62:	f06f 0315 	mvn.w	r3, #21
 800ea66:	637b      	str	r3, [r7, #52]	@ 0x34
 800ea68:	e084      	b.n	800eb74 <FreeRTOS_bind+0x174>
    }

    /* Once a socket is bound to a port, it can not be bound to a different
     * port number */
    else if( socketSOCKET_IS_BOUND( pxSocket ) )
 800ea6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea6c:	69db      	ldr	r3, [r3, #28]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d009      	beq.n	800ea86 <FreeRTOS_bind+0x86>
    {
        /* The socket is already bound. */
        FreeRTOS_debug_printf( ( "vSocketBind: Socket already bound to %d\n", pxSocket->usLocalPort ) );
 800ea72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea74:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800ea76:	4619      	mov	r1, r3
 800ea78:	4842      	ldr	r0, [pc, #264]	@ (800eb84 <FreeRTOS_bind+0x184>)
 800ea7a:	f013 fe93 	bl	80227a4 <lUDPLoggingPrintf>
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ea7e:	f06f 0315 	mvn.w	r3, #21
 800ea82:	637b      	str	r3, [r7, #52]	@ 0x34
 800ea84:	e076      	b.n	800eb74 <FreeRTOS_bind+0x174>
    }
    else
    {
        /* Prepare a messages to the IP-task in order to perform the binding.
         * The desired port number will be passed in usLocalPort. */
        xBindEvent.eEventType = eSocketBindEvent;
 800ea86:	2309      	movs	r3, #9
 800ea88:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        xBindEvent.pvData = xSocket;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( pxAddress != NULL )
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d042      	beq.n	800eb1c <FreeRTOS_bind+0x11c>
        {
            switch( pxAddress->sin_family )
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	785b      	ldrb	r3, [r3, #1]
 800ea9a:	2b02      	cmp	r3, #2
 800ea9c:	d010      	beq.n	800eac0 <FreeRTOS_bind+0xc0>
 800ea9e:	2b0a      	cmp	r3, #10
 800eaa0:	d129      	bne.n	800eaf6 <FreeRTOS_bind+0xf6>
            {
                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        ( void ) memcpy( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800eaa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaa4:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800eaa8:	68bb      	ldr	r3, [r7, #8]
 800eaaa:	3308      	adds	r3, #8
 800eaac:	2210      	movs	r2, #16
 800eaae:	4619      	mov	r1, r3
 800eab0:	f014 f894 	bl	8022bdc <memcpy>
                        pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800eab4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eab6:	7a13      	ldrb	r3, [r2, #8]
 800eab8:	f043 0301 	orr.w	r3, r3, #1
 800eabc:	7213      	strb	r3, [r2, #8]
                        break;
 800eabe:	e01e      	b.n	800eafe <FreeRTOS_bind+0xfe>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                        pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 );
 800eac0:	68bb      	ldr	r3, [r7, #8]
 800eac2:	689b      	ldr	r3, [r3, #8]
 800eac4:	061a      	lsls	r2, r3, #24
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	689b      	ldr	r3, [r3, #8]
 800eaca:	021b      	lsls	r3, r3, #8
 800eacc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ead0:	431a      	orrs	r2, r3
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	689b      	ldr	r3, [r3, #8]
 800ead6:	0a1b      	lsrs	r3, r3, #8
 800ead8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800eadc:	431a      	orrs	r2, r3
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	689b      	ldr	r3, [r3, #8]
 800eae2:	0e1b      	lsrs	r3, r3, #24
 800eae4:	431a      	orrs	r2, r3
 800eae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eae8:	629a      	str	r2, [r3, #40]	@ 0x28
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800eaea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eaec:	7a13      	ldrb	r3, [r2, #8]
 800eaee:	f36f 0300 	bfc	r3, #0, #1
 800eaf2:	7213      	strb	r3, [r2, #8]
                        break;
 800eaf4:	e003      	b.n	800eafe <FreeRTOS_bind+0xfe>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    FreeRTOS_debug_printf( ( "FreeRTOS_bind: Undefined sin_family \n" ) );
 800eaf6:	4824      	ldr	r0, [pc, #144]	@ (800eb88 <FreeRTOS_bind+0x188>)
 800eaf8:	f013 fe54 	bl	80227a4 <lUDPLoggingPrintf>
                    break;
 800eafc:	bf00      	nop
            }

            pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800eafe:	68bb      	ldr	r3, [r7, #8]
 800eb00:	885b      	ldrh	r3, [r3, #2]
 800eb02:	021b      	lsls	r3, r3, #8
 800eb04:	b21a      	sxth	r2, r3
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	885b      	ldrh	r3, [r3, #2]
 800eb0a:	0a1b      	lsrs	r3, r3, #8
 800eb0c:	b29b      	uxth	r3, r3
 800eb0e:	b21b      	sxth	r3, r3
 800eb10:	4313      	orrs	r3, r2
 800eb12:	b21b      	sxth	r3, r3
 800eb14:	b29a      	uxth	r2, r3
 800eb16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb18:	871a      	strh	r2, [r3, #56]	@ 0x38
 800eb1a:	e009      	b.n	800eb30 <FreeRTOS_bind+0x130>
        }
        else
        {
            /* Caller wants to bind to a random port number. */
            pxSocket->usLocalPort = 0U;
 800eb1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb1e:	2200      	movs	r2, #0
 800eb20:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800eb22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb24:	3328      	adds	r3, #40	@ 0x28
 800eb26:	2210      	movs	r2, #16
 800eb28:	2100      	movs	r1, #0
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f014 f963 	bl	8022df6 <memset>
        }

        /* portMAX_DELAY is used as a the time-out parameter, as binding *must*
         * succeed before the socket can be used.  _RB_ The use of an infinite
         * block time needs be changed as it could result in the task hanging. */
        if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800eb30:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800eb34:	f04f 31ff 	mov.w	r1, #4294967295
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f7fb f8a9 	bl	8009c90 <xSendEventStructToIPTask>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d106      	bne.n	800eb52 <FreeRTOS_bind+0x152>
        {
            /* Failed to wake-up the IP-task, no use to wait for it */
            FreeRTOS_debug_printf( ( "FreeRTOS_bind: send event failed\n" ) );
 800eb44:	4811      	ldr	r0, [pc, #68]	@ (800eb8c <FreeRTOS_bind+0x18c>)
 800eb46:	f013 fe2d 	bl	80227a4 <lUDPLoggingPrintf>
            xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 800eb4a:	f06f 038b 	mvn.w	r3, #139	@ 0x8b
 800eb4e:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb50:	e010      	b.n	800eb74 <FreeRTOS_bind+0x174>
        }
        else
        {
            /* The IP-task will set the 'eSOCKET_BOUND' bit when it has done its
             * job. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
 800eb52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb54:	6858      	ldr	r0, [r3, #4]
 800eb56:	f04f 33ff 	mov.w	r3, #4294967295
 800eb5a:	9300      	str	r3, [sp, #0]
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	2201      	movs	r2, #1
 800eb60:	2110      	movs	r1, #16
 800eb62:	f7f4 fc73 	bl	800344c <xEventGroupWaitBits>

            if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800eb66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb68:	69db      	ldr	r3, [r3, #28]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d102      	bne.n	800eb74 <FreeRTOS_bind+0x174>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800eb6e:	f06f 0315 	mvn.w	r3, #21
 800eb72:	637b      	str	r3, [r7, #52]	@ 0x34
            }
        }
    }

    return xReturn;
 800eb74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3738      	adds	r7, #56	@ 0x38
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}
 800eb7e:	bf00      	nop
 800eb80:	08026264 	.word	0x08026264
 800eb84:	08026340 	.word	0x08026340
 800eb88:	0802636c 	.word	0x0802636c
 800eb8c:	08026394 	.word	0x08026394

0800eb90 <prvSocketBindAdd>:
 */
static BaseType_t prvSocketBindAdd( FreeRTOS_Socket_t * pxSocket,
                                    const struct freertos_sockaddr * pxAddress,
                                    List_t * pxSocketList,
                                    BaseType_t xInternal )
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b086      	sub	sp, #24
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	60f8      	str	r0, [r7, #12]
 800eb98:	60b9      	str	r1, [r7, #8]
 800eb9a:	607a      	str	r2, [r7, #4]
 800eb9c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	617b      	str	r3, [r7, #20]

    /* Check to ensure the port is not already in use.  If the bind is
     * called internally, a port MAY be used by more than one socket. */
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d004      	beq.n	800ebb2 <prvSocketBindAdd+0x22>
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ebae:	2b06      	cmp	r3, #6
 800ebb0:	d024      	beq.n	800ebfc <prvSocketBindAdd+0x6c>
        ( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 800ebb2:	68bb      	ldr	r3, [r7, #8]
 800ebb4:	885b      	ldrh	r3, [r3, #2]
 800ebb6:	4619      	mov	r1, r3
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f000 fdf1 	bl	800f7a0 <pxListFindListItemWithValue>
 800ebbe:	4603      	mov	r3, r0
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d01b      	beq.n	800ebfc <prvSocketBindAdd+0x6c>
    {
        FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ebca:	2b06      	cmp	r3, #6
 800ebcc:	d101      	bne.n	800ebd2 <prvSocketBindAdd+0x42>
 800ebce:	493e      	ldr	r1, [pc, #248]	@ (800ecc8 <prvSocketBindAdd+0x138>)
 800ebd0:	e000      	b.n	800ebd4 <prvSocketBindAdd+0x44>
 800ebd2:	493e      	ldr	r1, [pc, #248]	@ (800eccc <prvSocketBindAdd+0x13c>)
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	885b      	ldrh	r3, [r3, #2]
 800ebd8:	021b      	lsls	r3, r3, #8
 800ebda:	b21a      	sxth	r2, r3
 800ebdc:	68bb      	ldr	r3, [r7, #8]
 800ebde:	885b      	ldrh	r3, [r3, #2]
 800ebe0:	0a1b      	lsrs	r3, r3, #8
 800ebe2:	b29b      	uxth	r3, r3
 800ebe4:	b21b      	sxth	r3, r3
 800ebe6:	4313      	orrs	r3, r2
 800ebe8:	b21b      	sxth	r3, r3
 800ebea:	b29b      	uxth	r3, r3
 800ebec:	461a      	mov	r2, r3
 800ebee:	4838      	ldr	r0, [pc, #224]	@ (800ecd0 <prvSocketBindAdd+0x140>)
 800ebf0:	f013 fdd8 	bl	80227a4 <lUDPLoggingPrintf>
                                 ( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) ? "TC" : "UD",
                                 FreeRTOS_ntohs( pxAddress->sin_port ) ) );
        xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 800ebf4:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 800ebf8:	617b      	str	r3, [r7, #20]
 800ebfa:	e060      	b.n	800ecbe <prvSocketBindAdd+0x12e>
    }
    else
    {
        /* Allocate the port number to the socket.
         * This macro will set 'xBoundSocketListItem->xItemValue' */
        socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	885b      	ldrh	r3, [r3, #2]
 800ec00:	461a      	mov	r2, r3
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	60da      	str	r2, [r3, #12]

        /* And also store it in a socket field 'usLocalPort' in host-byte-order,
         * mostly used for logging and debugging purposes */
        pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	885b      	ldrh	r3, [r3, #2]
 800ec0a:	021b      	lsls	r3, r3, #8
 800ec0c:	b21a      	sxth	r2, r3
 800ec0e:	68bb      	ldr	r3, [r7, #8]
 800ec10:	885b      	ldrh	r3, [r3, #2]
 800ec12:	0a1b      	lsrs	r3, r3, #8
 800ec14:	b29b      	uxth	r3, r3
 800ec16:	b21b      	sxth	r3, r3
 800ec18:	4313      	orrs	r3, r2
 800ec1a:	b21b      	sxth	r3, r3
 800ec1c:	b29a      	uxth	r2, r3
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	871a      	strh	r2, [r3, #56]	@ 0x38

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxAddress->sin_family == ( uint8_t ) FREERTOS_AF_INET6 )
 800ec22:	68bb      	ldr	r3, [r7, #8]
 800ec24:	785b      	ldrb	r3, [r3, #1]
 800ec26:	2b0a      	cmp	r3, #10
 800ec28:	d109      	bne.n	800ec3e <prvSocketBindAdd+0xae>
            {
                ( void ) memcpy( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	3308      	adds	r3, #8
 800ec34:	2210      	movs	r2, #16
 800ec36:	4619      	mov	r1, r3
 800ec38:	f013 ffd0 	bl	8022bdc <memcpy>
 800ec3c:	e00c      	b.n	800ec58 <prvSocketBindAdd+0xc8>
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                if( pxAddress->sin_address.ulIP_IPv4 != FREERTOS_INADDR_ANY )
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	689b      	ldr	r3, [r3, #8]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d008      	beq.n	800ec58 <prvSocketBindAdd+0xc8>
                {
                    pxSocket->pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( pxAddress->sin_address.ulIP_IPv4, 7 );
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	689b      	ldr	r3, [r3, #8]
 800ec4a:	2107      	movs	r1, #7
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f7fe ffb7 	bl	800dbc0 <FreeRTOS_FindEndPointOnIP_IPv4>
 800ec52:	4602      	mov	r2, r0
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	64da      	str	r2, [r3, #76]	@ 0x4c
                /* Place holder, do nothing, MISRA compliance */
            }
        }

        #if ( ipconfigUSE_IPv4 != 0 )
            if( pxSocket->pxEndPoint != NULL )
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d019      	beq.n	800ec94 <prvSocketBindAdd+0x104>
            {
                pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxSocket->pxEndPoint->ipv4_settings.ulIPAddress );
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	061a      	lsls	r2, r3, #24
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	021b      	lsls	r3, r3, #8
 800ec70:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ec74:	431a      	orrs	r2, r3
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	0a1b      	lsrs	r3, r3, #8
 800ec7e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ec82:	431a      	orrs	r2, r3
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	0e1b      	lsrs	r3, r3, #24
 800ec8c:	431a      	orrs	r2, r3
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	629a      	str	r2, [r3, #40]	@ 0x28
 800ec92:	e00a      	b.n	800ecaa <prvSocketBindAdd+0x11a>
            }
            else
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxAddress->sin_family == ( uint8_t ) FREERTOS_AF_INET6 )
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	785b      	ldrb	r3, [r3, #1]
 800ec98:	2b0a      	cmp	r3, #10
 800ec9a:	d006      	beq.n	800ecaa <prvSocketBindAdd+0x11a>
                /* Socket address was set, do nothing for IPv6. */
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	3328      	adds	r3, #40	@ 0x28
 800eca0:	2210      	movs	r2, #16
 800eca2:	2100      	movs	r1, #0
 800eca4:	4618      	mov	r0, r3
 800eca6:	f014 f8a6 	bl	8022df6 <memset>
            /* If the network driver can iterate through 'xBoundUDPSocketsList',
             * by calling xPortHasUDPSocket() then the IP-task must temporarily
             * suspend the scheduler to keep the list in a consistent state. */
            #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
            {
                vTaskSuspendAll();
 800ecaa:	f7f5 feff 	bl	8004aac <vTaskSuspendAll>
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

            /* Add the socket to 'xBoundUDPSocketsList' or 'xBoundTCPSocketsList' */
            vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	330c      	adds	r3, #12
 800ecb2:	4619      	mov	r1, r3
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	f7f4 fdb4 	bl	8003822 <vListInsertEnd>

            #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
            {
                ( void ) xTaskResumeAll();
 800ecba:	f7f5 ff05 	bl	8004ac8 <xTaskResumeAll>
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
        }
    }

    return xReturn;
 800ecbe:	697b      	ldr	r3, [r7, #20]
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3718      	adds	r7, #24
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}
 800ecc8:	080263b8 	.word	0x080263b8
 800eccc:	080263bc 	.word	0x080263bc
 800ecd0:	080263c0 	.word	0x080263c0

0800ecd4 <vSocketBind>:
 */
BaseType_t vSocketBind( FreeRTOS_Socket_t * pxSocket,
                        struct freertos_sockaddr * pxBindAddress,
                        size_t uxAddressLength,
                        BaseType_t xInternal )
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b08e      	sub	sp, #56	@ 0x38
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	60f8      	str	r0, [r7, #12]
 800ecdc:	60b9      	str	r1, [r7, #8]
 800ecde:	607a      	str	r2, [r7, #4]
 800ece0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 800ece2:	2300      	movs	r3, #0
 800ece4:	637b      	str	r3, [r7, #52]	@ 0x34
    List_t * pxSocketList;
    struct freertos_sockaddr * pxAddress = pxBindAddress;
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
        struct freertos_sockaddr xAddress;
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */

    configASSERT( xSocketValid( pxSocket ) == pdTRUE );
 800ecea:	68f8      	ldr	r0, [r7, #12]
 800ecec:	f001 ffd8 	bl	8010ca0 <xSocketValid>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	2b01      	cmp	r3, #1
 800ecf4:	d004      	beq.n	800ed00 <vSocketBind+0x2c>
 800ecf6:	f240 716f 	movw	r1, #1903	@ 0x76f
 800ecfa:	4828      	ldr	r0, [pc, #160]	@ (800ed9c <vSocketBind+0xc8>)
 800ecfc:	f7f2 fe84 	bl	8001a08 <vAssertCalled>

    #if ( ipconfigUSE_TCP == 1 )
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ed06:	2b06      	cmp	r3, #6
 800ed08:	d102      	bne.n	800ed10 <vSocketBind+0x3c>
        {
            pxSocketList = &xBoundTCPSocketsList;
 800ed0a:	4b25      	ldr	r3, [pc, #148]	@ (800eda0 <vSocketBind+0xcc>)
 800ed0c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ed0e:	e001      	b.n	800ed14 <vSocketBind+0x40>
        }
        else
    #endif /* ipconfigUSE_TCP == 1 */
    {
        pxSocketList = &xBoundUDPSocketsList;
 800ed10:	4b24      	ldr	r3, [pc, #144]	@ (800eda4 <vSocketBind+0xd0>)
 800ed12:	633b      	str	r3, [r7, #48]	@ 0x30
        /* pxAddress will be NULL if sendto() was called on a socket without the
         * socket being bound to an address. In this case, automatically allocate
         * an address to the socket.  There is a small chance that the allocated
         * port will already be in use - if that is the case, then the check below
         * [pxListFindListItemWithValue()] will result in an error being returned. */
        if( pxAddress == NULL )
 800ed14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d115      	bne.n	800ed46 <vSocketBind+0x72>
        {
            pxAddress = &xAddress;
 800ed1a:	f107 0314 	add.w	r3, r7, #20
 800ed1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Clear the address: */
            ( void ) memset( pxAddress, 0, sizeof( struct freertos_sockaddr ) );
 800ed20:	2218      	movs	r2, #24
 800ed22:	2100      	movs	r1, #0
 800ed24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ed26:	f014 f866 	bl	8022df6 <memset>

            if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	7a1b      	ldrb	r3, [r3, #8]
 800ed2e:	f003 0301 	and.w	r3, r3, #1
 800ed32:	b2db      	uxtb	r3, r3
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d003      	beq.n	800ed40 <vSocketBind+0x6c>
            {
                pxAddress->sin_family = FREERTOS_AF_INET6;
 800ed38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed3a:	220a      	movs	r2, #10
 800ed3c:	705a      	strb	r2, [r3, #1]
 800ed3e:	e002      	b.n	800ed46 <vSocketBind+0x72>
            }
            else
            {
                pxAddress->sin_family = FREERTOS_AF_INET;
 800ed40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed42:	2202      	movs	r2, #2
 800ed44:	705a      	strb	r2, [r3, #1]
    }
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */

    /* Sockets must be bound before calling FreeRTOS_sendto() if
    * ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is not set to 1. */
    configASSERT( pxAddress != NULL );
 800ed46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d104      	bne.n	800ed56 <vSocketBind+0x82>
 800ed4c:	f240 719b 	movw	r1, #1947	@ 0x79b
 800ed50:	4812      	ldr	r0, [pc, #72]	@ (800ed9c <vSocketBind+0xc8>)
 800ed52:	f7f2 fe59 	bl	8001a08 <vAssertCalled>
    #endif
    {
        /* Add a do-while loop to facilitate use of 'break' statements. */
        do
        {
            if( pxAddress->sin_port == 0U )
 800ed56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed58:	885b      	ldrh	r3, [r3, #2]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d111      	bne.n	800ed82 <vSocketBind+0xae>
            {
                pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ed64:	4618      	mov	r0, r3
 800ed66:	f000 fcc3 	bl	800f6f0 <prvGetPrivatePortNumber>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	461a      	mov	r2, r3
 800ed6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed70:	805a      	strh	r2, [r3, #2]

                if( pxAddress->sin_port == ( uint16_t ) 0U )
 800ed72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed74:	885b      	ldrh	r3, [r3, #2]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d103      	bne.n	800ed82 <vSocketBind+0xae>
                {
                    xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 800ed7a:	f06f 037c 	mvn.w	r3, #124	@ 0x7c
 800ed7e:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800ed80:	e006      	b.n	800ed90 <vSocketBind+0xbc>

            /* If vSocketBind() is called from the API FreeRTOS_bind() it has been
             * confirmed that the socket was not yet bound to a port.  If it is called
             * from the IP-task, no such check is necessary. */

            xReturn = prvSocketBindAdd( pxSocket, pxAddress, pxSocketList, xInternal );
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ed88:	68f8      	ldr	r0, [r7, #12]
 800ed8a:	f7ff ff01 	bl	800eb90 <prvSocketBindAdd>
 800ed8e:	6378      	str	r0, [r7, #52]	@ 0x34
    if( xReturn != 0 )
    {
        iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
    }

    return xReturn;
 800ed90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
} /* Tested */
 800ed92:	4618      	mov	r0, r3
 800ed94:	3738      	adds	r7, #56	@ 0x38
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}
 800ed9a:	bf00      	nop
 800ed9c:	08026264 	.word	0x08026264
 800eda0:	20001608 	.word	0x20001608
 800eda4:	200015f4 	.word	0x200015f4

0800eda8 <FreeRTOS_closesocket>:
 *         1: If the socket was successfully closed (read the brief above).
 *        -1: If the socket was valid but could not be closed because the message
 *            could not be delivered to the IP-task. Try again later.
 */
BaseType_t FreeRTOS_closesocket( Socket_t xSocket )
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b086      	sub	sp, #24
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
    BaseType_t xResult;

    #if ( ipconfigUSE_CALLBACKS == 1 )
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	613b      	str	r3, [r7, #16]
    #endif /* ipconfigUSE_CALLBACKS == 1 */
    IPStackEvent_t xCloseEvent;
    xCloseEvent.eEventType = eSocketCloseEvent;
 800edb4:	230a      	movs	r3, #10
 800edb6:	723b      	strb	r3, [r7, #8]
    xCloseEvent.pvData = xSocket;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	60fb      	str	r3, [r7, #12]

    if( xSocketValid( xSocket ) == pdFALSE )
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f001 ff6f 	bl	8010ca0 <xSocketValid>
 800edc2:	4603      	mov	r3, r0
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d102      	bne.n	800edce <FreeRTOS_closesocket+0x26>
    {
        xResult = 0;
 800edc8:	2300      	movs	r3, #0
 800edca:	617b      	str	r3, [r7, #20]
 800edcc:	e02f      	b.n	800ee2e <FreeRTOS_closesocket+0x86>
    else
    {
        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            #if ( ipconfigUSE_TCP == 1 )
                if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800edce:	693b      	ldr	r3, [r7, #16]
 800edd0:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800edd4:	2b06      	cmp	r3, #6
 800edd6:	d10c      	bne.n	800edf2 <FreeRTOS_closesocket+0x4a>
                {
                    /* Make sure that IP-task won't call the user callback's anymore */
                    pxSocket->u.xTCP.pxHandleConnected = NULL;
 800edd8:	693b      	ldr	r3, [r7, #16]
 800edda:	2200      	movs	r2, #0
 800eddc:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                    pxSocket->u.xTCP.pxHandleReceive = NULL;
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	2200      	movs	r2, #0
 800ede4:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                    pxSocket->u.xTCP.pxHandleSent = NULL;
 800ede8:	693b      	ldr	r3, [r7, #16]
 800edea:	2200      	movs	r2, #0
 800edec:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 800edf0:	e00a      	b.n	800ee08 <FreeRTOS_closesocket+0x60>
                }
                else
            #endif /* ipconfigUSE_TCP == 1 */

            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800edf2:	693b      	ldr	r3, [r7, #16]
 800edf4:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800edf8:	2b11      	cmp	r3, #17
 800edfa:	d105      	bne.n	800ee08 <FreeRTOS_closesocket+0x60>
            {
                /* Clear the two UDP handlers. */
                pxSocket->u.xUDP.pxHandleReceive = NULL;
 800edfc:	693b      	ldr	r3, [r7, #16]
 800edfe:	2200      	movs	r2, #0
 800ee00:	669a      	str	r2, [r3, #104]	@ 0x68
                pxSocket->u.xUDP.pxHandleSent = NULL;
 800ee02:	693b      	ldr	r3, [r7, #16]
 800ee04:	2200      	movs	r2, #0
 800ee06:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* The timeout value below is only used if this function is called from
         * a user task. If this function is called by the IP-task, it may fail
         * to close the socket when the event queue is full.
         * This should only happen in case of a user call-back. */
        if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800ee08:	f107 0308 	add.w	r3, r7, #8
 800ee0c:	f04f 31ff 	mov.w	r1, #4294967295
 800ee10:	4618      	mov	r0, r3
 800ee12:	f7fa ff3d 	bl	8009c90 <xSendEventStructToIPTask>
 800ee16:	4603      	mov	r3, r0
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d106      	bne.n	800ee2a <FreeRTOS_closesocket+0x82>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket: failed\n" ) );
 800ee1c:	4806      	ldr	r0, [pc, #24]	@ (800ee38 <FreeRTOS_closesocket+0x90>)
 800ee1e:	f013 fcc1 	bl	80227a4 <lUDPLoggingPrintf>
            xResult = -1;
 800ee22:	f04f 33ff 	mov.w	r3, #4294967295
 800ee26:	617b      	str	r3, [r7, #20]
 800ee28:	e001      	b.n	800ee2e <FreeRTOS_closesocket+0x86>
        }
        else
        {
            xResult = 1;
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	617b      	str	r3, [r7, #20]
        }
    }

    return xResult;
 800ee2e:	697b      	ldr	r3, [r7, #20]
}
 800ee30:	4618      	mov	r0, r3
 800ee32:	3718      	adds	r7, #24
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}
 800ee38:	080263e4 	.word	0x080263e4

0800ee3c <vSocketClose>:
 */
/* MISRA Ref 17.2.1 [Sockets and limited recursion] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
/* coverity[misra_c_2012_rule_17_2_violation] */
void * vSocketClose( FreeRTOS_Socket_t * pxSocket )
{
 800ee3c:	b590      	push	{r4, r7, lr}
 800ee3e:	b085      	sub	sp, #20
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* For TCP: clean up a little more. */
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ee4a:	2b06      	cmp	r3, #6
 800ee4c:	d129      	bne.n	800eea2 <vSocketClose+0x66>
        {
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d005      	beq.n	800ee64 <vSocketClose+0x28>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f008 fdf8 	bl	8017a54 <vReleaseNetworkBufferAndDescriptor>
                }

                /* Free the resources which were claimed by the tcpWin member */
                vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f007 f804 	bl	8015e78 <vTCPWindowDestroy>
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* Free the input and output streams */
            if( pxSocket->u.xTCP.rxStream != NULL )
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d005      	beq.n	800ee86 <vSocketClose+0x4a>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.rxStream );
                vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ee80:	4618      	mov	r0, r3
 800ee82:	f7f7 fe63 	bl	8006b4c <vPortFree>
            }

            if( pxSocket->u.xTCP.txStream != NULL )
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d005      	beq.n	800ee9c <vSocketClose+0x60>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.txStream );
                vPortFreeLarge( pxSocket->u.xTCP.txStream );
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ee96:	4618      	mov	r0, r3
 800ee98:	f7f7 fe58 	bl	8006b4c <vPortFree>
            }

            /* In case this is a child socket, make sure the child-count of the
             * parent socket is decreased. */
            prvTCPSetSocketCount( pxSocket );
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	f000 f8bd 	bl	800f01c <prvTCPSetSocketCount>
    }
    #endif /* ipconfigUSE_TCP == 1 */

    /* Socket must be unbound first, to ensure no more packets are queued on
     * it. */
    if( socketSOCKET_IS_BOUND( pxSocket ) )
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	69db      	ldr	r3, [r3, #28]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d008      	beq.n	800eebc <vSocketClose+0x80>
        /* If the network driver can iterate through 'xBoundUDPSocketsList',
         * by calling xPortHasUDPSocket(), then the IP-task must temporarily
         * suspend the scheduler to keep the list in a consistent state. */
        #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
        {
            vTaskSuspendAll();
 800eeaa:	f7f5 fdff 	bl	8004aac <vTaskSuspendAll>
        }
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

        ( void ) uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	330c      	adds	r3, #12
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f7f4 fd12 	bl	80038dc <uxListRemove>

        #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
        {
            ( void ) xTaskResumeAll();
 800eeb8:	f7f5 fe06 	bl	8004ac8 <xTaskResumeAll>
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
    }

    /* Now the socket is not bound the list of waiting packets can be
     * drained. */
    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800eec2:	2b11      	cmp	r3, #17
 800eec4:	d10f      	bne.n	800eee6 <vSocketClose+0xaa>
    {
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800eec6:	e00a      	b.n	800eede <vSocketClose+0xa2>
        {
            pxNetworkBuffer = ( ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eecc:	68db      	ldr	r3, [r3, #12]
 800eece:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7f4 fd02 	bl	80038dc <uxListRemove>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800eed8:	68f8      	ldr	r0, [r7, #12]
 800eeda:	f008 fdbb 	bl	8017a54 <vReleaseNetworkBufferAndDescriptor>
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d1f0      	bne.n	800eec8 <vSocketClose+0x8c>
        }
    }

    if( pxSocket->xEventGroup != NULL )
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	685b      	ldr	r3, [r3, #4]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d004      	beq.n	800eef8 <vSocketClose+0xbc>
    {
        vEventGroupDelete( pxSocket->xEventGroup );
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	685b      	ldr	r3, [r3, #4]
 800eef2:	4618      	mov	r0, r3
 800eef4:	f7f4 fc10 	bl	8003718 <vEventGroupDelete>
    }

    #if ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 )
    {
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800eefe:	2b06      	cmp	r3, #6
 800ef00:	d10c      	bne.n	800ef1c <vSocketClose+0xe0>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket[%s]: buffers %lu socks %lu\n",
 800ef02:	6878      	ldr	r0, [r7, #4]
 800ef04:	f000 f816 	bl	800ef34 <prvSocketProps>
 800ef08:	4604      	mov	r4, r0
 800ef0a:	f008 fdf5 	bl	8017af8 <uxGetNumberOfFreeNetworkBuffers>
 800ef0e:	4602      	mov	r2, r0
 800ef10:	4b06      	ldr	r3, [pc, #24]	@ (800ef2c <vSocketClose+0xf0>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	4621      	mov	r1, r4
 800ef16:	4806      	ldr	r0, [pc, #24]	@ (800ef30 <vSocketClose+0xf4>)
 800ef18:	f013 fc44 	bl	80227a4 <lUDPLoggingPrintf>
    }
    #endif /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

    /* And finally, after all resources have been freed, free the socket space */
    iptraceMEM_STATS_DELETE( pxSocket );
    vPortFreeSocket( pxSocket );
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	f7f7 fe15 	bl	8006b4c <vPortFree>

    return NULL;
 800ef22:	2300      	movs	r3, #0
} /* Tested */
 800ef24:	4618      	mov	r0, r3
 800ef26:	3714      	adds	r7, #20
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	bd90      	pop	{r4, r7, pc}
 800ef2c:	20001608 	.word	0x20001608
 800ef30:	08026404 	.word	0x08026404

0800ef34 <prvSocketProps>:
/*-----------------------------------------------------------*/

#if ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )
    const char * prvSocketProps( FreeRTOS_Socket_t * pxSocket )
    {
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b086      	sub	sp, #24
 800ef38:	af04      	add	r7, sp, #16
 800ef3a:	6078      	str	r0, [r7, #4]
        /* For debugging purposes only: show some properties of a socket:
         * IP-addresses and port numbers. */
        #if ipconfigUSE_TCP == 1
            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ef42:	2b06      	cmp	r3, #6
 800ef44:	d132      	bne.n	800efac <prvSocketProps+0x78>
            {
                switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	7a1b      	ldrb	r3, [r3, #8]
 800ef4a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ef4e:	b2db      	uxtb	r3, r3
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d002      	beq.n	800ef5a <prvSocketProps+0x26>
 800ef54:	2b01      	cmp	r3, #1
 800ef56:	d014      	beq.n	800ef82 <prvSocketProps+0x4e>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        break;
 800ef58:	e050      	b.n	800effc <prvSocketProps+0xc8>
                                               ( unsigned ) pxSocket->xLocalAddress.ulIP_IPv4,
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
                                               pxSocket->usLocalPort,
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%xip port %u to %xip port %u",
 800ef62:	4618      	mov	r0, r3
                                               ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                                               pxSocket->u.xTCP.usRemotePort );
 800ef68:	687a      	ldr	r2, [r7, #4]
 800ef6a:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%xip port %u to %xip port %u",
 800ef6e:	9202      	str	r2, [sp, #8]
 800ef70:	9301      	str	r3, [sp, #4]
 800ef72:	9000      	str	r0, [sp, #0]
 800ef74:	460b      	mov	r3, r1
 800ef76:	4a24      	ldr	r2, [pc, #144]	@ (800f008 <prvSocketProps+0xd4>)
 800ef78:	215c      	movs	r1, #92	@ 0x5c
 800ef7a:	4824      	ldr	r0, [pc, #144]	@ (800f00c <prvSocketProps+0xd8>)
 800ef7c:	f014 fc3e 	bl	80237fc <snprintf>
                            break;
 800ef80:	e03c      	b.n	800effc <prvSocketProps+0xc8>
                                               ( void * ) pxSocket->xLocalAddress.xIP_IPv6.ucBytes,
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	f103 0128 	add.w	r1, r3, #40	@ 0x28
                                               pxSocket->usLocalPort,
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%pip port %u to %pip port %u",
 800ef8c:	4618      	mov	r0, r3
                                               ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	3354      	adds	r3, #84	@ 0x54
                                               pxSocket->u.xTCP.usRemotePort );
 800ef92:	687a      	ldr	r2, [r7, #4]
 800ef94:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%pip port %u to %pip port %u",
 800ef98:	9202      	str	r2, [sp, #8]
 800ef9a:	9301      	str	r3, [sp, #4]
 800ef9c:	9000      	str	r0, [sp, #0]
 800ef9e:	460b      	mov	r3, r1
 800efa0:	4a1b      	ldr	r2, [pc, #108]	@ (800f010 <prvSocketProps+0xdc>)
 800efa2:	215c      	movs	r1, #92	@ 0x5c
 800efa4:	4819      	ldr	r0, [pc, #100]	@ (800f00c <prvSocketProps+0xd8>)
 800efa6:	f014 fc29 	bl	80237fc <snprintf>
                            break;
 800efaa:	e027      	b.n	800effc <prvSocketProps+0xc8>
                }
            }
            else
        #endif /* if ipconfigUSE_TCP == 1 */

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800efb2:	2b11      	cmp	r3, #17
 800efb4:	d122      	bne.n	800effc <prvSocketProps+0xc8>
        {
            switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	7a1b      	ldrb	r3, [r3, #8]
 800efba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800efbe:	b2db      	uxtb	r3, r3
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d002      	beq.n	800efca <prvSocketProps+0x96>
 800efc4:	2b01      	cmp	r3, #1
 800efc6:	d00c      	beq.n	800efe2 <prvSocketProps+0xae>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 800efc8:	e018      	b.n	800effc <prvSocketProps+0xc8>
                                           ( unsigned ) pxSocket->xLocalAddress.ulIP_IPv4,
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
                                           pxSocket->usLocalPort );
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                        ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ),
 800efd2:	9300      	str	r3, [sp, #0]
 800efd4:	4613      	mov	r3, r2
 800efd6:	4a0f      	ldr	r2, [pc, #60]	@ (800f014 <prvSocketProps+0xe0>)
 800efd8:	215c      	movs	r1, #92	@ 0x5c
 800efda:	480c      	ldr	r0, [pc, #48]	@ (800f00c <prvSocketProps+0xd8>)
 800efdc:	f014 fc0e 	bl	80237fc <snprintf>
                        break;
 800efe0:	e00c      	b.n	800effc <prvSocketProps+0xc8>
                                           ( void * ) pxSocket->xLocalAddress.xIP_IPv6.ucBytes,
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	f103 0228 	add.w	r2, r3, #40	@ 0x28
                                           pxSocket->usLocalPort );
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                        ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ),
 800efec:	9300      	str	r3, [sp, #0]
 800efee:	4613      	mov	r3, r2
 800eff0:	4a09      	ldr	r2, [pc, #36]	@ (800f018 <prvSocketProps+0xe4>)
 800eff2:	215c      	movs	r1, #92	@ 0x5c
 800eff4:	4805      	ldr	r0, [pc, #20]	@ (800f00c <prvSocketProps+0xd8>)
 800eff6:	f014 fc01 	bl	80237fc <snprintf>
                        break;
 800effa:	bf00      	nop
        else
        {
            /* Protocol not handled. */
        }

        return pucSocketProps;
 800effc:	4b03      	ldr	r3, [pc, #12]	@ (800f00c <prvSocketProps+0xd8>)
    }
 800effe:	4618      	mov	r0, r3
 800f000:	3708      	adds	r7, #8
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}
 800f006:	bf00      	nop
 800f008:	08026438 	.word	0x08026438
 800f00c:	20001598 	.word	0x20001598
 800f010:	08026458 	.word	0x08026458
 800f014:	08026478 	.word	0x08026478
 800f018:	08026488 	.word	0x08026488

0800f01c <prvTCPSetSocketCount>:
    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    static void prvTCPSetSocketCount( FreeRTOS_Socket_t const * pxSocketToDelete )
    {
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b088      	sub	sp, #32
 800f020:	af02      	add	r7, sp, #8
 800f022:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800f024:	4b3c      	ldr	r3, [pc, #240]	@ (800f118 <prvTCPSetSocketCount+0xfc>)
 800f026:	613b      	str	r3, [r7, #16]
        FreeRTOS_Socket_t * pxOtherSocket;
        uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f02c:	81fb      	strh	r3, [r7, #14]

        if( pxSocketToDelete->u.xTCP.eTCPState == eTCP_LISTEN )
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f034:	2b01      	cmp	r3, #1
 800f036:	d12b      	bne.n	800f090 <prvTCPSetSocketCount+0x74>
        {
            pxIterator = listGET_NEXT( pxEnd );
 800f038:	693b      	ldr	r3, [r7, #16]
 800f03a:	685b      	ldr	r3, [r3, #4]
 800f03c:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 800f03e:	e022      	b.n	800f086 <prvTCPSetSocketCount+0x6a>
            {
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	68db      	ldr	r3, [r3, #12]
 800f044:	60bb      	str	r3, [r7, #8]

                /* This needs to be done here, before calling vSocketClose. */
                pxIterator = listGET_NEXT( pxIterator );
 800f046:	697b      	ldr	r3, [r7, #20]
 800f048:	685b      	ldr	r3, [r3, #4]
 800f04a:	617b      	str	r3, [r7, #20]

                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f052:	2b01      	cmp	r3, #1
 800f054:	d017      	beq.n	800f086 <prvTCPSetSocketCount+0x6a>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800f056:	68bb      	ldr	r3, [r7, #8]
 800f058:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800f05a:	89fa      	ldrh	r2, [r7, #14]
 800f05c:	429a      	cmp	r2, r3
 800f05e:	d112      	bne.n	800f086 <prvTCPSetSocketCount+0x6a>
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f066:	f003 0304 	and.w	r3, r3, #4
 800f06a:	b2db      	uxtb	r3, r3
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d107      	bne.n	800f080 <prvTCPSetSocketCount+0x64>
                      ( pxOtherSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) ) )
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f076:	f003 0302 	and.w	r3, r3, #2
 800f07a:	b2db      	uxtb	r3, r3
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d002      	beq.n	800f086 <prvTCPSetSocketCount+0x6a>
                {
                    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
                    /* coverity[misra_c_2012_rule_17_2_violation] */
                    /* coverity[recursive_step] */
                    ( void ) vSocketClose( pxOtherSocket );
 800f080:	68b8      	ldr	r0, [r7, #8]
 800f082:	f7ff fedb 	bl	800ee3c <vSocketClose>
            while( pxIterator != pxEnd )
 800f086:	697a      	ldr	r2, [r7, #20]
 800f088:	693b      	ldr	r3, [r7, #16]
 800f08a:	429a      	cmp	r2, r3
 800f08c:	d1d8      	bne.n	800f040 <prvTCPSetSocketCount+0x24>
                                             ( pxOtherSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                    break;
                }
            }
        }
    }
 800f08e:	e03e      	b.n	800f10e <prvTCPSetSocketCount+0xf2>
            for( pxIterator = listGET_NEXT( pxEnd );
 800f090:	693b      	ldr	r3, [r7, #16]
 800f092:	685b      	ldr	r3, [r3, #4]
 800f094:	617b      	str	r3, [r7, #20]
 800f096:	e036      	b.n	800f106 <prvTCPSetSocketCount+0xea>
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800f098:	697b      	ldr	r3, [r7, #20]
 800f09a:	68db      	ldr	r3, [r3, #12]
 800f09c:	60bb      	str	r3, [r7, #8]
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f0a4:	2b01      	cmp	r3, #1
 800f0a6:	d12b      	bne.n	800f100 <prvTCPSetSocketCount+0xe4>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800f0ac:	89fa      	ldrh	r2, [r7, #14]
 800f0ae:	429a      	cmp	r2, r3
 800f0b0:	d126      	bne.n	800f100 <prvTCPSetSocketCount+0xe4>
                    ( pxOtherSocket->u.xTCP.usChildCount != 0U ) )
 800f0b2:	68bb      	ldr	r3, [r7, #8]
 800f0b4:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d021      	beq.n	800f100 <prvTCPSetSocketCount+0xe4>
                    pxOtherSocket->u.xTCP.usChildCount--;
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800f0c2:	3b01      	subs	r3, #1
 800f0c4:	b29a      	uxth	r2, r3
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
                    FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f0d0:	4619      	mov	r1, r3
 800f0d2:	68bb      	ldr	r3, [r7, #8]
 800f0d4:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800f0d8:	461a      	mov	r2, r3
 800f0da:	68bb      	ldr	r3, [r7, #8]
 800f0dc:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800f0e8:	2b01      	cmp	r3, #1
 800f0ea:	d101      	bne.n	800f0f0 <prvTCPSetSocketCount+0xd4>
 800f0ec:	4b0b      	ldr	r3, [pc, #44]	@ (800f11c <prvTCPSetSocketCount+0x100>)
 800f0ee:	e000      	b.n	800f0f2 <prvTCPSetSocketCount+0xd6>
 800f0f0:	4b0b      	ldr	r3, [pc, #44]	@ (800f120 <prvTCPSetSocketCount+0x104>)
 800f0f2:	9300      	str	r3, [sp, #0]
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	480b      	ldr	r0, [pc, #44]	@ (800f124 <prvTCPSetSocketCount+0x108>)
 800f0f8:	f013 fb54 	bl	80227a4 <lUDPLoggingPrintf>
                    break;
 800f0fc:	bf00      	nop
    }
 800f0fe:	e006      	b.n	800f10e <prvTCPSetSocketCount+0xf2>
                 pxIterator = listGET_NEXT( pxIterator ) )
 800f100:	697b      	ldr	r3, [r7, #20]
 800f102:	685b      	ldr	r3, [r3, #4]
 800f104:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 800f106:	697a      	ldr	r2, [r7, #20]
 800f108:	693b      	ldr	r3, [r7, #16]
 800f10a:	429a      	cmp	r2, r3
 800f10c:	d1c4      	bne.n	800f098 <prvTCPSetSocketCount+0x7c>
    }
 800f10e:	bf00      	nop
 800f110:	3718      	adds	r7, #24
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
 800f116:	bf00      	nop
 800f118:	20001610 	.word	0x20001610
 800f11c:	08026498 	.word	0x08026498
 800f120:	0802649c 	.word	0x0802649c
 800f124:	080264a0 	.word	0x080264a0

0800f128 <prvSockopt_so_buffer>:
 *         value is returned.
 */
    static BaseType_t prvSockopt_so_buffer( FreeRTOS_Socket_t * pxSocket,
                                            int32_t lOptionName,
                                            const void * pvOptionValue )
    {
 800f128:	b580      	push	{r7, lr}
 800f12a:	b086      	sub	sp, #24
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	60f8      	str	r0, [r7, #12]
 800f130:	60b9      	str	r1, [r7, #8]
 800f132:	607a      	str	r2, [r7, #4]
        uint32_t ulNewValue;
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f13a:	2b06      	cmp	r3, #6
 800f13c:	d00d      	beq.n	800f15a <prvSockopt_so_buffer+0x32>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: wrong socket type\n",
 800f13e:	68bb      	ldr	r3, [r7, #8]
 800f140:	2b04      	cmp	r3, #4
 800f142:	d101      	bne.n	800f148 <prvSockopt_so_buffer+0x20>
 800f144:	4b23      	ldr	r3, [pc, #140]	@ (800f1d4 <prvSockopt_so_buffer+0xac>)
 800f146:	e000      	b.n	800f14a <prvSockopt_so_buffer+0x22>
 800f148:	4b23      	ldr	r3, [pc, #140]	@ (800f1d8 <prvSockopt_so_buffer+0xb0>)
 800f14a:	4619      	mov	r1, r3
 800f14c:	4823      	ldr	r0, [pc, #140]	@ (800f1dc <prvSockopt_so_buffer+0xb4>)
 800f14e:	f013 fb29 	bl	80227a4 <lUDPLoggingPrintf>
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f152:	f06f 0315 	mvn.w	r3, #21
 800f156:	617b      	str	r3, [r7, #20]
 800f158:	e036      	b.n	800f1c8 <prvSockopt_so_buffer+0xa0>
        }
        else if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
 800f15a:	68bb      	ldr	r3, [r7, #8]
 800f15c:	2b04      	cmp	r3, #4
 800f15e:	d104      	bne.n	800f16a <prvSockopt_so_buffer+0x42>
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f166:	2b00      	cmp	r3, #0
 800f168:	d107      	bne.n	800f17a <prvSockopt_so_buffer+0x52>
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	2b05      	cmp	r3, #5
 800f16e:	d112      	bne.n	800f196 <prvSockopt_so_buffer+0x6e>
                 ( ( lOptionName == FREERTOS_SO_RCVBUF ) && ( pxSocket->u.xTCP.rxStream != NULL ) ) )
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f176:	2b00      	cmp	r3, #0
 800f178:	d00d      	beq.n	800f196 <prvSockopt_so_buffer+0x6e>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: buffer already created\n",
 800f17a:	68bb      	ldr	r3, [r7, #8]
 800f17c:	2b04      	cmp	r3, #4
 800f17e:	d101      	bne.n	800f184 <prvSockopt_so_buffer+0x5c>
 800f180:	4b14      	ldr	r3, [pc, #80]	@ (800f1d4 <prvSockopt_so_buffer+0xac>)
 800f182:	e000      	b.n	800f186 <prvSockopt_so_buffer+0x5e>
 800f184:	4b14      	ldr	r3, [pc, #80]	@ (800f1d8 <prvSockopt_so_buffer+0xb0>)
 800f186:	4619      	mov	r1, r3
 800f188:	4815      	ldr	r0, [pc, #84]	@ (800f1e0 <prvSockopt_so_buffer+0xb8>)
 800f18a:	f013 fb0b 	bl	80227a4 <lUDPLoggingPrintf>
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f18e:	f06f 0315 	mvn.w	r3, #21
 800f192:	617b      	str	r3, [r7, #20]
 800f194:	e018      	b.n	800f1c8 <prvSockopt_so_buffer+0xa0>
        }
        else
        {
            ulNewValue = *( ( const uint32_t * ) pvOptionValue );
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	613b      	str	r3, [r7, #16]

            if( lOptionName == FREERTOS_SO_SNDBUF )
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	2b04      	cmp	r3, #4
 800f1a0:	d10c      	bne.n	800f1bc <prvSockopt_so_buffer+0x94>
            {
                /* Round up to nearest MSS size */
                ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800f1a8:	4619      	mov	r1, r3
 800f1aa:	6938      	ldr	r0, [r7, #16]
 800f1ac:	f7fb fe92 	bl	800aed4 <FreeRTOS_round_up>
 800f1b0:	6138      	str	r0, [r7, #16]
                pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	693a      	ldr	r2, [r7, #16]
 800f1b6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800f1ba:	e003      	b.n	800f1c4 <prvSockopt_so_buffer+0x9c>
            }
            else
            {
                pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	693a      	ldr	r2, [r7, #16]
 800f1c0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
            }

            xReturn = 0;
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 800f1c8:	697b      	ldr	r3, [r7, #20]
    }
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	3718      	adds	r7, #24
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd80      	pop	{r7, pc}
 800f1d2:	bf00      	nop
 800f1d4:	080264cc 	.word	0x080264cc
 800f1d8:	080264d0 	.word	0x080264d0
 800f1dc:	080264d4 	.word	0x080264d4
 800f1e0:	080264f8 	.word	0x080264f8

0800f1e4 <prvSetOptionCallback>:
 *         value is returned.
 */
    BaseType_t prvSetOptionCallback( FreeRTOS_Socket_t * pxSocket,
                                     int32_t lOptionName,
                                     const void * pvOptionValue )
    {
 800f1e4:	b480      	push	{r7}
 800f1e6:	b087      	sub	sp, #28
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	60f8      	str	r0, [r7, #12]
 800f1ec:	60b9      	str	r1, [r7, #8]
 800f1ee:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = 0;
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	617b      	str	r3, [r7, #20]

        #if ( ipconfigUSE_TCP == 1 )
        {
            UBaseType_t uxProtocol;

            if( ( lOptionName == FREERTOS_SO_UDP_RECV_HANDLER ) ||
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	2b09      	cmp	r3, #9
 800f1f8:	d002      	beq.n	800f200 <prvSetOptionCallback+0x1c>
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	2b0a      	cmp	r3, #10
 800f1fe:	d102      	bne.n	800f206 <prvSetOptionCallback+0x22>
                ( lOptionName == FREERTOS_SO_UDP_SENT_HANDLER ) )
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_UDP;
 800f200:	2311      	movs	r3, #17
 800f202:	613b      	str	r3, [r7, #16]
 800f204:	e001      	b.n	800f20a <prvSetOptionCallback+0x26>
            }
            else
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_TCP;
 800f206:	2306      	movs	r3, #6
 800f208:	613b      	str	r3, [r7, #16]
            }

            if( pxSocket->ucProtocol != ( uint8_t ) uxProtocol )
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800f210:	693b      	ldr	r3, [r7, #16]
 800f212:	b2db      	uxtb	r3, r3
 800f214:	429a      	cmp	r2, r3
 800f216:	d002      	beq.n	800f21e <prvSetOptionCallback+0x3a>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f218:	f06f 0315 	mvn.w	r3, #21
 800f21c:	617b      	str	r3, [r7, #20]
            /* No need to check if the socket has the right
             * protocol, because only UDP sockets can be created. */
        }
        #endif /* ipconfigUSE_TCP */

        if( xReturn == 0 )
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d131      	bne.n	800f288 <prvSetOptionCallback+0xa4>
        {
            switch( lOptionName ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is checked before calling. */
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	3b06      	subs	r3, #6
 800f228:	2b04      	cmp	r3, #4
 800f22a:	d829      	bhi.n	800f280 <prvSetOptionCallback+0x9c>
 800f22c:	a201      	add	r2, pc, #4	@ (adr r2, 800f234 <prvSetOptionCallback+0x50>)
 800f22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f232:	bf00      	nop
 800f234:	0800f249 	.word	0x0800f249
 800f238:	0800f255 	.word	0x0800f255
 800f23c:	0800f261 	.word	0x0800f261
 800f240:	0800f26d 	.word	0x0800f26d
 800f244:	0800f277 	.word	0x0800f277
            {
                #if ipconfigUSE_TCP == 1
                    case FREERTOS_SO_TCP_CONN_HANDLER:
                        pxSocket->u.xTCP.pxHandleConnected = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPConnected;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681a      	ldr	r2, [r3, #0]
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                        break;
 800f252:	e019      	b.n	800f288 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_RECV_HANDLER:
                        pxSocket->u.xTCP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPReceive;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	685a      	ldr	r2, [r3, #4]
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                        break;
 800f25e:	e013      	b.n	800f288 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_SENT_HANDLER:
                        pxSocket->u.xTCP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPSent;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	689a      	ldr	r2, [r3, #8]
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
                        break;
 800f26a:	e00d      	b.n	800f288 <prvSetOptionCallback+0xa4>
                #endif /* ipconfigUSE_TCP */
                case FREERTOS_SO_UDP_RECV_HANDLER:
                    pxSocket->u.xUDP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPReceive;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	68da      	ldr	r2, [r3, #12]
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	669a      	str	r2, [r3, #104]	@ 0x68
                    break;
 800f274:	e008      	b.n	800f288 <prvSetOptionCallback+0xa4>

                case FREERTOS_SO_UDP_SENT_HANDLER:
                    pxSocket->u.xUDP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPSent;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	691a      	ldr	r2, [r3, #16]
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	66da      	str	r2, [r3, #108]	@ 0x6c
                    break;
 800f27e:	e003      	b.n	800f288 <prvSetOptionCallback+0xa4>

                default:                                /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
                    xReturn = -pdFREERTOS_ERRNO_EINVAL; /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800f280:	f06f 0315 	mvn.w	r3, #21
 800f284:	617b      	str	r3, [r7, #20]
                    break;                              /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800f286:	bf00      	nop
            }
        }

        return xReturn;
 800f288:	697b      	ldr	r3, [r7, #20]
    }
 800f28a:	4618      	mov	r0, r3
 800f28c:	371c      	adds	r7, #28
 800f28e:	46bd      	mov	sp, r7
 800f290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f294:	4770      	bx	lr
 800f296:	bf00      	nop

0800f298 <prvSetOptionTCPWindows>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionTCPWindows( FreeRTOS_Socket_t * pxSocket,
                                              const void * pvOptionValue )
    {
 800f298:	b580      	push	{r7, lr}
 800f29a:	b086      	sub	sp, #24
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
 800f2a0:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f2a2:	f06f 0315 	mvn.w	r3, #21
 800f2a6:	617b      	str	r3, [r7, #20]
        const WinProperties_t * pxProps;

        do
        {
            IPTCPSocket_t * pxTCP = &( pxSocket->u.xTCP );
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	3354      	adds	r3, #84	@ 0x54
 800f2ac:	613b      	str	r3, [r7, #16]

            if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f2b4:	2b06      	cmp	r3, #6
 800f2b6:	d003      	beq.n	800f2c0 <prvSetOptionTCPWindows+0x28>
            {
                FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: wrong socket type\n" ) );
 800f2b8:	4825      	ldr	r0, [pc, #148]	@ (800f350 <prvSetOptionTCPWindows+0xb8>)
 800f2ba:	f013 fa73 	bl	80227a4 <lUDPLoggingPrintf>
                break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800f2be:	e042      	b.n	800f346 <prvSetOptionTCPWindows+0xae>
            }

            pxProps = ( const WinProperties_t * ) pvOptionValue;
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	60fb      	str	r3, [r7, #12]

            /* Validity of txStream will be checked by the function below. */
            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_SNDBUF, &( pxProps->lTxBufSize ) );
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	461a      	mov	r2, r3
 800f2c8:	2104      	movs	r1, #4
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f7ff ff2c 	bl	800f128 <prvSockopt_so_buffer>
 800f2d0:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d133      	bne.n	800f340 <prvSetOptionTCPWindows+0xa8>
            {
                break; /* will return an error. */
            }

            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_RCVBUF, &( pxProps->lRxBufSize ) );
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	3308      	adds	r3, #8
 800f2dc:	461a      	mov	r2, r3
 800f2de:	2105      	movs	r1, #5
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f7ff ff21 	bl	800f128 <prvSockopt_so_buffer>
 800f2e6:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800f2e8:	697b      	ldr	r3, [r7, #20]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d12a      	bne.n	800f344 <prvSetOptionTCPWindows+0xac>
                break; /* will return an error. */
            }

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                pxTCP->uxRxWinSize = ( uint32_t ) pxProps->lRxWinSize; /* Fixed value: size of the TCP reception window */
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	68db      	ldr	r3, [r3, #12]
 800f2f2:	461a      	mov	r2, r3
 800f2f4:	693b      	ldr	r3, [r7, #16]
 800f2f6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
                pxTCP->uxTxWinSize = ( uint32_t ) pxProps->lTxWinSize; /* Fixed value: size of the TCP transmit window */
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	685b      	ldr	r3, [r3, #4]
 800f2fe:	461a      	mov	r2, r3
 800f300:	693b      	ldr	r3, [r7, #16]
 800f302:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
            }
            #endif

            /* In case the socket has already initialised its tcpWin,
             * adapt the window size parameters */
            if( pxTCP->xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
 800f306:	693b      	ldr	r3, [r7, #16]
 800f308:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 800f30c:	f003 0301 	and.w	r3, r3, #1
 800f310:	b2db      	uxtb	r3, r3
 800f312:	2b00      	cmp	r3, #0
 800f314:	d017      	beq.n	800f346 <prvSetOptionTCPWindows+0xae>
            {
                pxTCP->xTCPWindow.xSize.ulRxWindowLength = ( uint32_t ) ( pxTCP->uxRxWinSize * pxTCP->usMSS );
 800f316:	693b      	ldr	r3, [r7, #16]
 800f318:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800f31c:	693a      	ldr	r2, [r7, #16]
 800f31e:	8bd2      	ldrh	r2, [r2, #30]
 800f320:	fb03 f202 	mul.w	r2, r3, r2
 800f324:	693b      	ldr	r3, [r7, #16]
 800f326:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
                pxTCP->xTCPWindow.xSize.ulTxWindowLength = ( uint32_t ) ( pxTCP->uxTxWinSize * pxTCP->usMSS );
 800f32a:	693b      	ldr	r3, [r7, #16]
 800f32c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800f330:	693a      	ldr	r2, [r7, #16]
 800f332:	8bd2      	ldrh	r2, [r2, #30]
 800f334:	fb03 f202 	mul.w	r2, r3, r2
 800f338:	693b      	ldr	r3, [r7, #16]
 800f33a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800f33e:	e002      	b.n	800f346 <prvSetOptionTCPWindows+0xae>
                break; /* will return an error. */
 800f340:	bf00      	nop
 800f342:	e000      	b.n	800f346 <prvSetOptionTCPWindows+0xae>
                break; /* will return an error. */
 800f344:	bf00      	nop
            }
        }
        while( ipFALSE_BOOL );

        return xReturn;
 800f346:	697b      	ldr	r3, [r7, #20]
    }
 800f348:	4618      	mov	r0, r3
 800f34a:	3718      	adds	r7, #24
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bd80      	pop	{r7, pc}
 800f350:	08026520 	.word	0x08026520

0800f354 <prvSetOptionLowHighWater>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionLowHighWater( FreeRTOS_Socket_t * pxSocket,
                                                const void * pvOptionValue )
    {
 800f354:	b580      	push	{r7, lr}
 800f356:	b084      	sub	sp, #16
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
 800f35c:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f35e:	f06f 0315 	mvn.w	r3, #21
 800f362:	60fb      	str	r3, [r7, #12]
        const LowHighWater_t * pxLowHighWater = ( const LowHighWater_t * ) pvOptionValue;
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	60bb      	str	r3, [r7, #8]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f36e:	2b06      	cmp	r3, #6
 800f370:	d003      	beq.n	800f37a <prvSetOptionLowHighWater+0x26>
        {
            /* It is not allowed to access 'pxSocket->u.xTCP'. */
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: wrong socket type\n" ) );
 800f372:	4813      	ldr	r0, [pc, #76]	@ (800f3c0 <prvSetOptionLowHighWater+0x6c>)
 800f374:	f013 fa16 	bl	80227a4 <lUDPLoggingPrintf>
 800f378:	e01c      	b.n	800f3b4 <prvSetOptionLowHighWater+0x60>
        }
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	681a      	ldr	r2, [r3, #0]
 800f37e:	68bb      	ldr	r3, [r7, #8]
 800f380:	685b      	ldr	r3, [r3, #4]
 800f382:	429a      	cmp	r2, r3
 800f384:	d206      	bcs.n	800f394 <prvSetOptionLowHighWater+0x40>
                 ( pxLowHighWater->uxEnoughSpace > pxSocket->u.xTCP.uxRxStreamSize ) )
 800f386:	68bb      	ldr	r3, [r7, #8]
 800f388:	685a      	ldr	r2, [r3, #4]
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800f390:	429a      	cmp	r2, r3
 800f392:	d903      	bls.n	800f39c <prvSetOptionLowHighWater+0x48>
        {
            /* Impossible values. */
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: bad values\n" ) );
 800f394:	480b      	ldr	r0, [pc, #44]	@ (800f3c4 <prvSetOptionLowHighWater+0x70>)
 800f396:	f013 fa05 	bl	80227a4 <lUDPLoggingPrintf>
 800f39a:	e00b      	b.n	800f3b4 <prvSetOptionLowHighWater+0x60>
        }
        else
        {
            /* Send a STOP when buffer space drops below 'uxLittleSpace' bytes. */
            pxSocket->u.xTCP.uxLittleSpace = pxLowHighWater->uxLittleSpace;
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	681a      	ldr	r2, [r3, #0]
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            /* Send a GO when buffer space grows above 'uxEnoughSpace' bytes. */
            pxSocket->u.xTCP.uxEnoughSpace = pxLowHighWater->uxEnoughSpace;
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	685a      	ldr	r2, [r3, #4]
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            xReturn = 0;
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
    }
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	3710      	adds	r7, #16
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}
 800f3be:	bf00      	nop
 800f3c0:	08026544 	.word	0x08026544
 800f3c4:	08026578 	.word	0x08026578

0800f3c8 <prvSetOptionSetFullSize>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionSetFullSize( FreeRTOS_Socket_t * pxSocket,
                                               const void * pvOptionValue )
    {
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b084      	sub	sp, #16
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
 800f3d0:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f3d2:	f06f 0315 	mvn.w	r3, #21
 800f3d6:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f3de:	2b06      	cmp	r3, #6
 800f3e0:	d126      	bne.n	800f430 <prvSetOptionSetFullSize+0x68>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d007      	beq.n	800f3fa <prvSetOptionSetFullSize+0x32>
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdTRUE_UNSIGNED;
 800f3ea:	687a      	ldr	r2, [r7, #4]
 800f3ec:	f892 3120 	ldrb.w	r3, [r2, #288]	@ 0x120
 800f3f0:	f043 0302 	orr.w	r3, r3, #2
 800f3f4:	f882 3120 	strb.w	r3, [r2, #288]	@ 0x120
 800f3f8:	e006      	b.n	800f408 <prvSetOptionSetFullSize+0x40>
            }
            else
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdFALSE_UNSIGNED;
 800f3fa:	687a      	ldr	r2, [r7, #4]
 800f3fc:	f892 3120 	ldrb.w	r3, [r2, #288]	@ 0x120
 800f400:	f36f 0341 	bfc	r3, #1, #1
 800f404:	f882 3120 	strb.w	r3, [r2, #288]	@ 0x120
            }

            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f40e:	2b04      	cmp	r3, #4
 800f410:	d90c      	bls.n	800f42c <prvSetOptionSetFullSize+0x64>
                ( FreeRTOS_outstanding( pxSocket ) != 0 ) )
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f001 fbd8 	bl	8010bc8 <FreeRTOS_tx_size>
 800f418:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d006      	beq.n	800f42c <prvSetOptionSetFullSize+0x64>
            {
                /* There might be some data in the TX-stream, less than full-size,
                 * which equals a MSS.  Wake-up the IP-task to check this. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	2201      	movs	r2, #1
 800f422:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800f426:	2006      	movs	r0, #6
 800f428:	f7fa fc1c 	bl	8009c64 <xSendEventToIPTask>
            }

            xReturn = 0;
 800f42c:	2300      	movs	r3, #0
 800f42e:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800f430:	68fb      	ldr	r3, [r7, #12]
    }
 800f432:	4618      	mov	r0, r3
 800f434:	3710      	adds	r7, #16
 800f436:	46bd      	mov	sp, r7
 800f438:	bd80      	pop	{r7, pc}

0800f43a <prvSetOptionStopRX>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionStopRX( FreeRTOS_Socket_t * pxSocket,
                                          const void * pvOptionValue )
    {
 800f43a:	b580      	push	{r7, lr}
 800f43c:	b084      	sub	sp, #16
 800f43e:	af00      	add	r7, sp, #0
 800f440:	6078      	str	r0, [r7, #4]
 800f442:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f444:	f06f 0315 	mvn.w	r3, #21
 800f448:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f450:	2b06      	cmp	r3, #6
 800f452:	d122      	bne.n	800f49a <prvSetOptionStopRX+0x60>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d007      	beq.n	800f46c <prvSetOptionStopRX+0x32>
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdTRUE_UNSIGNED;
 800f45c:	687a      	ldr	r2, [r7, #4]
 800f45e:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800f462:	f043 0304 	orr.w	r3, r3, #4
 800f466:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
 800f46a:	e006      	b.n	800f47a <prvSetOptionStopRX+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdFALSE_UNSIGNED;
 800f46c:	687a      	ldr	r2, [r7, #4]
 800f46e:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800f472:	f36f 0382 	bfc	r3, #2, #1
 800f476:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            }

            pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800f47a:	687a      	ldr	r2, [r7, #4]
 800f47c:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800f480:	f043 0301 	orr.w	r3, r3, #1
 800f484:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bRxStopped */
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2201      	movs	r2, #1
 800f48c:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800f490:	2006      	movs	r0, #6
 800f492:	f7fa fbe7 	bl	8009c64 <xSendEventToIPTask>
            xReturn = 0;
 800f496:	2300      	movs	r3, #0
 800f498:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800f49a:	68fb      	ldr	r3, [r7, #12]
    }
 800f49c:	4618      	mov	r0, r3
 800f49e:	3710      	adds	r7, #16
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}

0800f4a4 <prvSetOptionTimeout>:
 *            otherwise handle the option `FREERTOS_SO_RCVTIMEO`.
 */
static void prvSetOptionTimeout( FreeRTOS_Socket_t * pxSocket,
                                 const void * pvOptionValue,
                                 BaseType_t xForSend )
{
 800f4a4:	b480      	push	{r7}
 800f4a6:	b087      	sub	sp, #28
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	60f8      	str	r0, [r7, #12]
 800f4ac:	60b9      	str	r1, [r7, #8]
 800f4ae:	607a      	str	r2, [r7, #4]
    TickType_t xBlockTime = *( ( const TickType_t * ) pvOptionValue );
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	617b      	str	r3, [r7, #20]

    if( xForSend == pdTRUE )
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	2b01      	cmp	r3, #1
 800f4ba:	d110      	bne.n	800f4de <prvSetOptionTimeout+0x3a>
    {
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f4c2:	2b11      	cmp	r3, #17
 800f4c4:	d107      	bne.n	800f4d6 <prvSetOptionTimeout+0x32>
        {
            /* The send time out is capped for the reason stated in the
             * comments where ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined
             * in FreeRTOSIPConfig.h (assuming an official configuration file
             * is being used. */
            if( xBlockTime > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 800f4c6:	697b      	ldr	r3, [r7, #20]
 800f4c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f4cc:	4293      	cmp	r3, r2
 800f4ce:	d902      	bls.n	800f4d6 <prvSetOptionTimeout+0x32>
            {
                xBlockTime = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 800f4d0:	f241 3388 	movw	r3, #5000	@ 0x1388
 800f4d4:	617b      	str	r3, [r7, #20]
            /* For TCP socket, it isn't necessary to limit the blocking time
             * because  the FreeRTOS_send() function does not wait for a network
             * buffer to become available. */
        }

        pxSocket->xSendBlockTime = xBlockTime;
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	697a      	ldr	r2, [r7, #20]
 800f4da:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    else
    {
        pxSocket->xReceiveBlockTime = xBlockTime;
    }
}
 800f4dc:	e002      	b.n	800f4e4 <prvSetOptionTimeout+0x40>
        pxSocket->xReceiveBlockTime = xBlockTime;
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	697a      	ldr	r2, [r7, #20]
 800f4e2:	621a      	str	r2, [r3, #32]
}
 800f4e4:	bf00      	nop
 800f4e6:	371c      	adds	r7, #28
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ee:	4770      	bx	lr

0800f4f0 <prvSetOptionReuseListenSocket>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionReuseListenSocket( FreeRTOS_Socket_t * pxSocket,
                                                     const void * pvOptionValue )
    {
 800f4f0:	b480      	push	{r7}
 800f4f2:	b085      	sub	sp, #20
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
 800f4f8:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f4fa:	f06f 0315 	mvn.w	r3, #21
 800f4fe:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f506:	2b06      	cmp	r3, #6
 800f508:	d114      	bne.n	800f534 <prvSetOptionReuseListenSocket+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d007      	beq.n	800f522 <prvSetOptionReuseListenSocket+0x32>
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE_UNSIGNED;
 800f512:	687a      	ldr	r2, [r7, #4]
 800f514:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f518:	f043 0308 	orr.w	r3, r3, #8
 800f51c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800f520:	e006      	b.n	800f530 <prvSetOptionReuseListenSocket+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdFALSE_UNSIGNED;
 800f522:	687a      	ldr	r2, [r7, #4]
 800f524:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f528:	f36f 03c3 	bfc	r3, #3, #1
 800f52c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            xReturn = 0;
 800f530:	2300      	movs	r3, #0
 800f532:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800f534:	68fb      	ldr	r3, [r7, #12]
    }
 800f536:	4618      	mov	r0, r3
 800f538:	3714      	adds	r7, #20
 800f53a:	46bd      	mov	sp, r7
 800f53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f540:	4770      	bx	lr

0800f542 <prvSetOptionCloseAfterSend>:
 * @param[in] pvOptionValue A pointer to a binary value of size
 *            BaseType_t.
 */
    static BaseType_t prvSetOptionCloseAfterSend( FreeRTOS_Socket_t * pxSocket,
                                                  const void * pvOptionValue )
    {
 800f542:	b480      	push	{r7}
 800f544:	b085      	sub	sp, #20
 800f546:	af00      	add	r7, sp, #0
 800f548:	6078      	str	r0, [r7, #4]
 800f54a:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f54c:	f06f 0315 	mvn.w	r3, #21
 800f550:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f558:	2b06      	cmp	r3, #6
 800f55a:	d114      	bne.n	800f586 <prvSetOptionCloseAfterSend+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d007      	beq.n	800f574 <prvSetOptionCloseAfterSend+0x32>
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdTRUE_UNSIGNED;
 800f564:	687a      	ldr	r2, [r7, #4]
 800f566:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f56a:	f043 0310 	orr.w	r3, r3, #16
 800f56e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800f572:	e006      	b.n	800f582 <prvSetOptionCloseAfterSend+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdFALSE_UNSIGNED;
 800f574:	687a      	ldr	r2, [r7, #4]
 800f576:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f57a:	f36f 1304 	bfc	r3, #4, #1
 800f57e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            xReturn = 0;
 800f582:	2300      	movs	r3, #0
 800f584:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800f586:	68fb      	ldr	r3, [r7, #12]
    }
 800f588:	4618      	mov	r0, r3
 800f58a:	3714      	adds	r7, #20
 800f58c:	46bd      	mov	sp, r7
 800f58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f592:	4770      	bx	lr

0800f594 <FreeRTOS_setsockopt>:
BaseType_t FreeRTOS_setsockopt( Socket_t xSocket,
                                int32_t lLevel,
                                int32_t lOptionName,
                                const void * pvOptionValue,
                                size_t uxOptionLength )
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b086      	sub	sp, #24
 800f598:	af00      	add	r7, sp, #0
 800f59a:	60f8      	str	r0, [r7, #12]
 800f59c:	60b9      	str	r1, [r7, #8]
 800f59e:	607a      	str	r2, [r7, #4]
 800f5a0:	603b      	str	r3, [r7, #0]
/* The standard Berkeley function returns 0 for success. */
    BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f5a2:	f06f 0315 	mvn.w	r3, #21
 800f5a6:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t * pxSocket;

    pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	613b      	str	r3, [r7, #16]
    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the parameters. */
    ( void ) lLevel;
    ( void ) uxOptionLength;

    if( xSocketValid( pxSocket ) == pdTRUE )
 800f5ac:	6938      	ldr	r0, [r7, #16]
 800f5ae:	f001 fb77 	bl	8010ca0 <xSocketValid>
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	2b01      	cmp	r3, #1
 800f5b6:	f040 8093 	bne.w	800f6e0 <FreeRTOS_setsockopt+0x14c>
    {
        switch( lOptionName )
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	2b12      	cmp	r3, #18
 800f5be:	f200 808b 	bhi.w	800f6d8 <FreeRTOS_setsockopt+0x144>
 800f5c2:	a201      	add	r2, pc, #4	@ (adr r2, 800f5c8 <FreeRTOS_setsockopt+0x34>)
 800f5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5c8:	0800f615 	.word	0x0800f615
 800f5cc:	0800f625 	.word	0x0800f625
 800f5d0:	0800f635 	.word	0x0800f635
 800f5d4:	0800f675 	.word	0x0800f675
 800f5d8:	0800f68f 	.word	0x0800f68f
 800f5dc:	0800f68f 	.word	0x0800f68f
 800f5e0:	0800f667 	.word	0x0800f667
 800f5e4:	0800f667 	.word	0x0800f667
 800f5e8:	0800f667 	.word	0x0800f667
 800f5ec:	0800f667 	.word	0x0800f667
 800f5f0:	0800f667 	.word	0x0800f667
 800f5f4:	0800f6a9 	.word	0x0800f6a9
 800f5f8:	0800f6b5 	.word	0x0800f6b5
 800f5fc:	0800f69d 	.word	0x0800f69d
 800f600:	0800f6c1 	.word	0x0800f6c1
 800f604:	0800f6cd 	.word	0x0800f6cd
 800f608:	0800f6d9 	.word	0x0800f6d9
 800f60c:	0800f6d9 	.word	0x0800f6d9
 800f610:	0800f683 	.word	0x0800f683
        {
            case FREERTOS_SO_RCVTIMEO:
                /* Receive time out. */
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdFALSE );
 800f614:	2200      	movs	r2, #0
 800f616:	6839      	ldr	r1, [r7, #0]
 800f618:	6938      	ldr	r0, [r7, #16]
 800f61a:	f7ff ff43 	bl	800f4a4 <prvSetOptionTimeout>
                xReturn = 0;
 800f61e:	2300      	movs	r3, #0
 800f620:	617b      	str	r3, [r7, #20]
                break;
 800f622:	e060      	b.n	800f6e6 <FreeRTOS_setsockopt+0x152>

            case FREERTOS_SO_SNDTIMEO:
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdTRUE );
 800f624:	2201      	movs	r2, #1
 800f626:	6839      	ldr	r1, [r7, #0]
 800f628:	6938      	ldr	r0, [r7, #16]
 800f62a:	f7ff ff3b 	bl	800f4a4 <prvSetOptionTimeout>
                xReturn = 0;
 800f62e:	2300      	movs	r3, #0
 800f630:	617b      	str	r3, [r7, #20]
                break;
 800f632:	e058      	b.n	800f6e6 <FreeRTOS_setsockopt+0x152>
            case FREERTOS_SO_UDPCKSUM_OUT:

                /* Turn calculating of the UDP checksum on/off for this socket. If pvOptionValue
                 * is anything else than NULL, the checksum generation will be turned on. */

                if( pvOptionValue == NULL )
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d109      	bne.n	800f64e <FreeRTOS_setsockopt+0xba>
                {
                    pxSocket->ucSocketOptions &= ( ( uint8_t ) ~( ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT ) );
 800f63a:	693b      	ldr	r3, [r7, #16]
 800f63c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800f640:	f023 0302 	bic.w	r3, r3, #2
 800f644:	b2da      	uxtb	r2, r3
 800f646:	693b      	ldr	r3, [r7, #16]
 800f648:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800f64c:	e008      	b.n	800f660 <FreeRTOS_setsockopt+0xcc>
                }
                else
                {
                    pxSocket->ucSocketOptions |= ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800f64e:	693b      	ldr	r3, [r7, #16]
 800f650:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800f654:	f043 0302 	orr.w	r3, r3, #2
 800f658:	b2da      	uxtb	r2, r3
 800f65a:	693b      	ldr	r3, [r7, #16]
 800f65c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                }

                xReturn = 0;
 800f660:	2300      	movs	r3, #0
 800f662:	617b      	str	r3, [r7, #20]
                break;
 800f664:	e03f      	b.n	800f6e6 <FreeRTOS_setsockopt+0x152>
                        case FREERTOS_SO_TCP_RECV_HANDLER: /* Install a callback for receiving TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        case FREERTOS_SO_TCP_SENT_HANDLER: /* Install a callback for sending TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    #endif /* ipconfigUSE_TCP */
                    case FREERTOS_SO_UDP_RECV_HANDLER:     /* Install a callback for receiving UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    case FREERTOS_SO_UDP_SENT_HANDLER:     /* Install a callback for sending UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        xReturn = prvSetOptionCallback( pxSocket, lOptionName, pvOptionValue );
 800f666:	683a      	ldr	r2, [r7, #0]
 800f668:	6879      	ldr	r1, [r7, #4]
 800f66a:	6938      	ldr	r0, [r7, #16]
 800f66c:	f7ff fdba 	bl	800f1e4 <prvSetOptionCallback>
 800f670:	6178      	str	r0, [r7, #20]
                        break;
 800f672:	e038      	b.n	800f6e6 <FreeRTOS_setsockopt+0x152>
                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE != 0 )

                    /* Each socket has a semaphore on which the using task normally
                     * sleeps. */
                    case FREERTOS_SO_SET_SEMAPHORE:
                        pxSocket->pxUserSemaphore = *( ( SemaphoreHandle_t * ) pvOptionValue );
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	681a      	ldr	r2, [r3, #0]
 800f678:	693b      	ldr	r3, [r7, #16]
 800f67a:	63da      	str	r2, [r3, #60]	@ 0x3c
                        xReturn = 0;
 800f67c:	2300      	movs	r3, #0
 800f67e:	617b      	str	r3, [r7, #20]
                        break;
 800f680:	e031      	b.n	800f6e6 <FreeRTOS_setsockopt+0x152>
                        break;
                #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

                #if ( ipconfigUSE_TCP != 0 )
                    case FREERTOS_SO_SET_LOW_HIGH_WATER:
                        xReturn = prvSetOptionLowHighWater( pxSocket, pvOptionValue );
 800f682:	6839      	ldr	r1, [r7, #0]
 800f684:	6938      	ldr	r0, [r7, #16]
 800f686:	f7ff fe65 	bl	800f354 <prvSetOptionLowHighWater>
 800f68a:	6178      	str	r0, [r7, #20]
                        break;
 800f68c:	e02b      	b.n	800f6e6 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_SNDBUF: /* Set the size of the send buffer, in units of MSS (TCP only) */
                    case FREERTOS_SO_RCVBUF: /* Set the size of the receive buffer, in units of MSS (TCP only) */
                        xReturn = prvSockopt_so_buffer( pxSocket, lOptionName, pvOptionValue );
 800f68e:	683a      	ldr	r2, [r7, #0]
 800f690:	6879      	ldr	r1, [r7, #4]
 800f692:	6938      	ldr	r0, [r7, #16]
 800f694:	f7ff fd48 	bl	800f128 <prvSockopt_so_buffer>
 800f698:	6178      	str	r0, [r7, #20]
                        break;
 800f69a:	e024      	b.n	800f6e6 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_WIN_PROPERTIES: /* Set all buffer and window properties in one call, parameter is pointer to WinProperties_t */
                        xReturn = prvSetOptionTCPWindows( pxSocket, pvOptionValue );
 800f69c:	6839      	ldr	r1, [r7, #0]
 800f69e:	6938      	ldr	r0, [r7, #16]
 800f6a0:	f7ff fdfa 	bl	800f298 <prvSetOptionTCPWindows>
 800f6a4:	6178      	str	r0, [r7, #20]
                        break;
 800f6a6:	e01e      	b.n	800f6e6 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_REUSE_LISTEN_SOCKET: /* If true, the server-socket will turn into a connected socket */
                        xReturn = prvSetOptionReuseListenSocket( pxSocket, pvOptionValue );
 800f6a8:	6839      	ldr	r1, [r7, #0]
 800f6aa:	6938      	ldr	r0, [r7, #16]
 800f6ac:	f7ff ff20 	bl	800f4f0 <prvSetOptionReuseListenSocket>
 800f6b0:	6178      	str	r0, [r7, #20]
                        break;
 800f6b2:	e018      	b.n	800f6e6 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_CLOSE_AFTER_SEND: /* As soon as the last byte has been transmitted, finalise the connection */
                        xReturn = prvSetOptionCloseAfterSend( pxSocket, pvOptionValue );
 800f6b4:	6839      	ldr	r1, [r7, #0]
 800f6b6:	6938      	ldr	r0, [r7, #16]
 800f6b8:	f7ff ff43 	bl	800f542 <prvSetOptionCloseAfterSend>
 800f6bc:	6178      	str	r0, [r7, #20]
                        break;
 800f6be:	e012      	b.n	800f6e6 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_SET_FULL_SIZE: /* Refuse to send packets smaller than MSS  */
                        xReturn = prvSetOptionSetFullSize( pxSocket, pvOptionValue );
 800f6c0:	6839      	ldr	r1, [r7, #0]
 800f6c2:	6938      	ldr	r0, [r7, #16]
 800f6c4:	f7ff fe80 	bl	800f3c8 <prvSetOptionSetFullSize>
 800f6c8:	6178      	str	r0, [r7, #20]
                        break;
 800f6ca:	e00c      	b.n	800f6e6 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_STOP_RX: /* Refuse to receive more packets. */
                        xReturn = prvSetOptionStopRX( pxSocket, pvOptionValue );
 800f6cc:	6839      	ldr	r1, [r7, #0]
 800f6ce:	6938      	ldr	r0, [r7, #16]
 800f6d0:	f7ff feb3 	bl	800f43a <prvSetOptionStopRX>
 800f6d4:	6178      	str	r0, [r7, #20]
                        break;
 800f6d6:	e006      	b.n	800f6e6 <FreeRTOS_setsockopt+0x152>
                #endif /* ipconfigUSE_TCP == 1 */

            default:
                /* No other options are handled. */
                xReturn = -pdFREERTOS_ERRNO_ENOPROTOOPT;
 800f6d8:	f06f 036c 	mvn.w	r3, #108	@ 0x6c
 800f6dc:	617b      	str	r3, [r7, #20]
                break;
 800f6de:	e002      	b.n	800f6e6 <FreeRTOS_setsockopt+0x152>
        }
    }
    else
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f6e0:	f06f 0315 	mvn.w	r3, #21
 800f6e4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800f6e6:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	3718      	adds	r7, #24
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bd80      	pop	{r7, pc}

0800f6f0 <prvGetPrivatePortNumber>:
 *
 * @return If an available protocol port is found then that port number is returned.
 *         Or else, 0 is returned.
 */
static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol )
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b086      	sub	sp, #24
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
    const uint16_t usEphemeralPortCount =
 800f6f8:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800f6fc:	81fb      	strh	r3, [r7, #14]
        socketAUTO_PORT_ALLOCATION_MAX_NUMBER - ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER - 1U );
    uint16_t usIterations = usEphemeralPortCount;
 800f6fe:	89fb      	ldrh	r3, [r7, #14]
 800f700:	82fb      	strh	r3, [r7, #22]
    uint32_t ulRandomSeed = 0;
 800f702:	2300      	movs	r3, #0
 800f704:	60bb      	str	r3, [r7, #8]
    uint16_t usResult = 0;
 800f706:	2300      	movs	r3, #0
 800f708:	82bb      	strh	r3, [r7, #20]
    const List_t * pxList;

    #if ipconfigUSE_TCP == 1
        if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	2b06      	cmp	r3, #6
 800f70e:	d102      	bne.n	800f716 <prvGetPrivatePortNumber+0x26>
        {
            pxList = &xBoundTCPSocketsList;
 800f710:	4b21      	ldr	r3, [pc, #132]	@ (800f798 <prvGetPrivatePortNumber+0xa8>)
 800f712:	613b      	str	r3, [r7, #16]
 800f714:	e001      	b.n	800f71a <prvGetPrivatePortNumber+0x2a>
        }
        else
    #endif
    {
        pxList = &xBoundUDPSocketsList;
 800f716:	4b21      	ldr	r3, [pc, #132]	@ (800f79c <prvGetPrivatePortNumber+0xac>)
 800f718:	613b      	str	r3, [r7, #16]
    /* Find the next available port using the random seed as a starting
     * point. */
    do
    {
        /* Only proceed if the random number generator succeeded. */
        if( xApplicationGetRandomNumber( &( ulRandomSeed ) ) == pdFALSE )
 800f71a:	f107 0308 	add.w	r3, r7, #8
 800f71e:	4618      	mov	r0, r3
 800f720:	f7f2 fa3c 	bl	8001b9c <xApplicationGetRandomNumber>
 800f724:	4603      	mov	r3, r0
 800f726:	2b00      	cmp	r3, #0
 800f728:	d030      	beq.n	800f78c <prvGetPrivatePortNumber+0x9c>
            break;
        }

        /* Map the random to a candidate port. */
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
                                  ( ( ( uint16_t ) ulRandomSeed ) % usEphemeralPortCount ) );
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	b29b      	uxth	r3, r3
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
 800f72e:	89fa      	ldrh	r2, [r7, #14]
 800f730:	fbb3 f1f2 	udiv	r1, r3, r2
 800f734:	fb01 f202 	mul.w	r2, r1, r2
 800f738:	1a9b      	subs	r3, r3, r2
 800f73a:	b29b      	uxth	r3, r3
 800f73c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f740:	82bb      	strh	r3, [r7, #20]

        /* Check if there's already an open socket with the same protocol
         * and port. */
        if( NULL == pxListFindListItemWithValue(
                pxList,
                ( TickType_t ) FreeRTOS_htons( usResult ) ) )
 800f742:	8abb      	ldrh	r3, [r7, #20]
 800f744:	021b      	lsls	r3, r3, #8
 800f746:	b21a      	sxth	r2, r3
 800f748:	8abb      	ldrh	r3, [r7, #20]
 800f74a:	0a1b      	lsrs	r3, r3, #8
 800f74c:	b29b      	uxth	r3, r3
 800f74e:	b21b      	sxth	r3, r3
 800f750:	4313      	orrs	r3, r2
 800f752:	b21b      	sxth	r3, r3
 800f754:	b29b      	uxth	r3, r3
        if( NULL == pxListFindListItemWithValue(
 800f756:	4619      	mov	r1, r3
 800f758:	6938      	ldr	r0, [r7, #16]
 800f75a:	f000 f821 	bl	800f7a0 <pxListFindListItemWithValue>
 800f75e:	4603      	mov	r3, r0
 800f760:	2b00      	cmp	r3, #0
 800f762:	d10a      	bne.n	800f77a <prvGetPrivatePortNumber+0x8a>
        {
            usResult = FreeRTOS_htons( usResult );
 800f764:	8abb      	ldrh	r3, [r7, #20]
 800f766:	021b      	lsls	r3, r3, #8
 800f768:	b21a      	sxth	r2, r3
 800f76a:	8abb      	ldrh	r3, [r7, #20]
 800f76c:	0a1b      	lsrs	r3, r3, #8
 800f76e:	b29b      	uxth	r3, r3
 800f770:	b21b      	sxth	r3, r3
 800f772:	4313      	orrs	r3, r2
 800f774:	b21b      	sxth	r3, r3
 800f776:	82bb      	strh	r3, [r7, #20]
            break;
 800f778:	e009      	b.n	800f78e <prvGetPrivatePortNumber+0x9e>
        }
        else
        {
            usResult = 0;
 800f77a:	2300      	movs	r3, #0
 800f77c:	82bb      	strh	r3, [r7, #20]
        }

        usIterations--;
 800f77e:	8afb      	ldrh	r3, [r7, #22]
 800f780:	3b01      	subs	r3, #1
 800f782:	82fb      	strh	r3, [r7, #22]
    }
    while( usIterations > 0U );
 800f784:	8afb      	ldrh	r3, [r7, #22]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d1c7      	bne.n	800f71a <prvGetPrivatePortNumber+0x2a>
 800f78a:	e000      	b.n	800f78e <prvGetPrivatePortNumber+0x9e>
            break;
 800f78c:	bf00      	nop

    return usResult;
 800f78e:	8abb      	ldrh	r3, [r7, #20]
}
 800f790:	4618      	mov	r0, r3
 800f792:	3718      	adds	r7, #24
 800f794:	46bd      	mov	sp, r7
 800f796:	bd80      	pop	{r7, pc}
 800f798:	20001608 	.word	0x20001608
 800f79c:	200015f4 	.word	0x200015f4

0800f7a0 <pxListFindListItemWithValue>:
 * @return The list item holding the value being searched for. If nothing is found,
 *         then a NULL is returned.
 */
static const ListItem_t * pxListFindListItemWithValue( const List_t * pxList,
                                                       TickType_t xWantedItemValue )
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b086      	sub	sp, #24
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
 800f7a8:	6039      	str	r1, [r7, #0]
    const ListItem_t * pxResult = NULL;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	617b      	str	r3, [r7, #20]

    if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 800f7ae:	f7fa fe0b 	bl	800a3c8 <xIPIsNetworkTaskReady>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d018      	beq.n	800f7ea <pxListFindListItemWithValue+0x4a>
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d015      	beq.n	800f7ea <pxListFindListItemWithValue+0x4a>
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxList->xListEnd ) );
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	3308      	adds	r3, #8
 800f7c2:	60fb      	str	r3, [r7, #12]

        for( pxIterator = listGET_NEXT( pxEnd );
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	685b      	ldr	r3, [r3, #4]
 800f7c8:	613b      	str	r3, [r7, #16]
 800f7ca:	e00a      	b.n	800f7e2 <pxListFindListItemWithValue+0x42>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800f7cc:	693b      	ldr	r3, [r7, #16]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	683a      	ldr	r2, [r7, #0]
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d102      	bne.n	800f7dc <pxListFindListItemWithValue+0x3c>
            {
                pxResult = pxIterator;
 800f7d6:	693b      	ldr	r3, [r7, #16]
 800f7d8:	617b      	str	r3, [r7, #20]
                break;
 800f7da:	e006      	b.n	800f7ea <pxListFindListItemWithValue+0x4a>
             pxIterator = listGET_NEXT( pxIterator ) )
 800f7dc:	693b      	ldr	r3, [r7, #16]
 800f7de:	685b      	ldr	r3, [r3, #4]
 800f7e0:	613b      	str	r3, [r7, #16]
             pxIterator != pxEnd;
 800f7e2:	693a      	ldr	r2, [r7, #16]
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	429a      	cmp	r2, r3
 800f7e8:	d1f0      	bne.n	800f7cc <pxListFindListItemWithValue+0x2c>
            }
        }
    }

    return pxResult;
 800f7ea:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	3718      	adds	r7, #24
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}

0800f7f4 <pxUDPSocketLookup>:
 *                         is to be found.
 *
 * @return The socket owning the port if found or else NULL.
 */
FreeRTOS_Socket_t * pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b084      	sub	sp, #16
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
    const ListItem_t * pxListItem;
    FreeRTOS_Socket_t * pxSocket = NULL;
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	60fb      	str	r3, [r7, #12]

    /* Looking up a socket is quite simple, find a match with the local port.
     *
     * See if there is a list item associated with the port number on the
     * list of bound sockets. */
    pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 800f800:	6879      	ldr	r1, [r7, #4]
 800f802:	480b      	ldr	r0, [pc, #44]	@ (800f830 <pxUDPSocketLookup+0x3c>)
 800f804:	f7ff ffcc 	bl	800f7a0 <pxListFindListItemWithValue>
 800f808:	60b8      	str	r0, [r7, #8]

    if( pxListItem != NULL )
 800f80a:	68bb      	ldr	r3, [r7, #8]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d00a      	beq.n	800f826 <pxUDPSocketLookup+0x32>
    {
        /* The owner of the list item is the socket itself. */
        pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxListItem ) );
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	68db      	ldr	r3, [r3, #12]
 800f814:	60fb      	str	r3, [r7, #12]
        configASSERT( pxSocket != NULL );
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d104      	bne.n	800f826 <pxUDPSocketLookup+0x32>
 800f81c:	f640 4111 	movw	r1, #3089	@ 0xc11
 800f820:	4804      	ldr	r0, [pc, #16]	@ (800f834 <pxUDPSocketLookup+0x40>)
 800f822:	f7f2 f8f1 	bl	8001a08 <vAssertCalled>
    }

    return pxSocket;
 800f826:	68fb      	ldr	r3, [r7, #12]
}
 800f828:	4618      	mov	r0, r3
 800f82a:	3710      	adds	r7, #16
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bd80      	pop	{r7, pc}
 800f830:	200015f4 	.word	0x200015f4
 800f834:	08026264 	.word	0x08026264

0800f838 <FreeRTOS_inet_ntoa>:
 * @return The pointer returned will be same as pcBuffer and will have the address
 *         stored in the location.
 */
const char * FreeRTOS_inet_ntoa( uint32_t ulIPAddress,
                                 char * pcBuffer )
{
 800f838:	b480      	push	{r7}
 800f83a:	b08b      	sub	sp, #44	@ 0x2c
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
 800f840:	6039      	str	r1, [r7, #0]
    socklen_t uxNibble;
    socklen_t uxIndex = 0;
 800f842:	2300      	movs	r3, #0
 800f844:	623b      	str	r3, [r7, #32]
    const uint8_t * pucAddress = ( const uint8_t * ) &( ulIPAddress );
 800f846:	1d3b      	adds	r3, r7, #4
 800f848:	617b      	str	r3, [r7, #20]
    const char * pcResult = pcBuffer;
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	613b      	str	r3, [r7, #16]

    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800f84e:	2300      	movs	r3, #0
 800f850:	627b      	str	r3, [r7, #36]	@ 0x24
 800f852:	e062      	b.n	800f91a <FreeRTOS_inet_ntoa+0xe2>
    {
        uint8_t pucDigits[ sockDIGIT_COUNT ];
        uint8_t ucValue = pucAddress[ uxNibble ];
 800f854:	697a      	ldr	r2, [r7, #20]
 800f856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f858:	4413      	add	r3, r2
 800f85a:	781b      	ldrb	r3, [r3, #0]
 800f85c:	77fb      	strb	r3, [r7, #31]
        socklen_t uxSource = ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U;
 800f85e:	2302      	movs	r3, #2
 800f860:	61bb      	str	r3, [r7, #24]

        for( ; ; )
        {
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800f862:	7ffa      	ldrb	r2, [r7, #31]
 800f864:	4b32      	ldr	r3, [pc, #200]	@ (800f930 <FreeRTOS_inet_ntoa+0xf8>)
 800f866:	fba3 1302 	umull	r1, r3, r3, r2
 800f86a:	08d9      	lsrs	r1, r3, #3
 800f86c:	460b      	mov	r3, r1
 800f86e:	009b      	lsls	r3, r3, #2
 800f870:	440b      	add	r3, r1
 800f872:	005b      	lsls	r3, r3, #1
 800f874:	1ad3      	subs	r3, r2, r3
 800f876:	b2d9      	uxtb	r1, r3
 800f878:	f107 020c 	add.w	r2, r7, #12
 800f87c:	69bb      	ldr	r3, [r7, #24]
 800f87e:	4413      	add	r3, r2
 800f880:	460a      	mov	r2, r1
 800f882:	701a      	strb	r2, [r3, #0]
            ucValue /= ( uint8_t ) 10U;
 800f884:	7ffb      	ldrb	r3, [r7, #31]
 800f886:	4a2a      	ldr	r2, [pc, #168]	@ (800f930 <FreeRTOS_inet_ntoa+0xf8>)
 800f888:	fba2 2303 	umull	r2, r3, r2, r3
 800f88c:	08db      	lsrs	r3, r3, #3
 800f88e:	77fb      	strb	r3, [r7, #31]

            if( uxSource == 1U )
 800f890:	69bb      	ldr	r3, [r7, #24]
 800f892:	2b01      	cmp	r3, #1
 800f894:	d003      	beq.n	800f89e <FreeRTOS_inet_ntoa+0x66>
            {
                break;
            }

            uxSource--;
 800f896:	69bb      	ldr	r3, [r7, #24]
 800f898:	3b01      	subs	r3, #1
 800f89a:	61bb      	str	r3, [r7, #24]
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800f89c:	e7e1      	b.n	800f862 <FreeRTOS_inet_ntoa+0x2a>
                break;
 800f89e:	bf00      	nop
        }

        pucDigits[ 0 ] = ucValue;
 800f8a0:	7ffb      	ldrb	r3, [r7, #31]
 800f8a2:	733b      	strb	r3, [r7, #12]

        /* Skip leading zeros. */
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	61bb      	str	r3, [r7, #24]
 800f8a8:	e009      	b.n	800f8be <FreeRTOS_inet_ntoa+0x86>
        {
            if( pucDigits[ uxSource ] != 0U )
 800f8aa:	f107 020c 	add.w	r2, r7, #12
 800f8ae:	69bb      	ldr	r3, [r7, #24]
 800f8b0:	4413      	add	r3, r2
 800f8b2:	781b      	ldrb	r3, [r3, #0]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d106      	bne.n	800f8c6 <FreeRTOS_inet_ntoa+0x8e>
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800f8b8:	69bb      	ldr	r3, [r7, #24]
 800f8ba:	3301      	adds	r3, #1
 800f8bc:	61bb      	str	r3, [r7, #24]
 800f8be:	69bb      	ldr	r3, [r7, #24]
 800f8c0:	2b01      	cmp	r3, #1
 800f8c2:	d9f2      	bls.n	800f8aa <FreeRTOS_inet_ntoa+0x72>
 800f8c4:	e012      	b.n	800f8ec <FreeRTOS_inet_ntoa+0xb4>
            {
                break;
 800f8c6:	bf00      	nop
            }
        }

        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800f8c8:	e010      	b.n	800f8ec <FreeRTOS_inet_ntoa+0xb4>
        {
            pcBuffer[ uxIndex ] = ( char ) ( pucDigits[ uxSource ] + ( char ) '0' );
 800f8ca:	f107 020c 	add.w	r2, r7, #12
 800f8ce:	69bb      	ldr	r3, [r7, #24]
 800f8d0:	4413      	add	r3, r2
 800f8d2:	781a      	ldrb	r2, [r3, #0]
 800f8d4:	6839      	ldr	r1, [r7, #0]
 800f8d6:	6a3b      	ldr	r3, [r7, #32]
 800f8d8:	440b      	add	r3, r1
 800f8da:	3230      	adds	r2, #48	@ 0x30
 800f8dc:	b2d2      	uxtb	r2, r2
 800f8de:	701a      	strb	r2, [r3, #0]
            uxIndex++;
 800f8e0:	6a3b      	ldr	r3, [r7, #32]
 800f8e2:	3301      	adds	r3, #1
 800f8e4:	623b      	str	r3, [r7, #32]
        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800f8e6:	69bb      	ldr	r3, [r7, #24]
 800f8e8:	3301      	adds	r3, #1
 800f8ea:	61bb      	str	r3, [r7, #24]
 800f8ec:	69bb      	ldr	r3, [r7, #24]
 800f8ee:	2b02      	cmp	r3, #2
 800f8f0:	d9eb      	bls.n	800f8ca <FreeRTOS_inet_ntoa+0x92>
        }

        if( uxNibble < ( ipSIZE_OF_IPv4_ADDRESS - 1U ) )
 800f8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8f4:	2b02      	cmp	r3, #2
 800f8f6:	d805      	bhi.n	800f904 <FreeRTOS_inet_ntoa+0xcc>
        {
            pcBuffer[ uxIndex ] = '.';
 800f8f8:	683a      	ldr	r2, [r7, #0]
 800f8fa:	6a3b      	ldr	r3, [r7, #32]
 800f8fc:	4413      	add	r3, r2
 800f8fe:	222e      	movs	r2, #46	@ 0x2e
 800f900:	701a      	strb	r2, [r3, #0]
 800f902:	e004      	b.n	800f90e <FreeRTOS_inet_ntoa+0xd6>
        }
        else
        {
            pcBuffer[ uxIndex ] = '\0';
 800f904:	683a      	ldr	r2, [r7, #0]
 800f906:	6a3b      	ldr	r3, [r7, #32]
 800f908:	4413      	add	r3, r2
 800f90a:	2200      	movs	r2, #0
 800f90c:	701a      	strb	r2, [r3, #0]
        }

        uxIndex++;
 800f90e:	6a3b      	ldr	r3, [r7, #32]
 800f910:	3301      	adds	r3, #1
 800f912:	623b      	str	r3, [r7, #32]
    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800f914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f916:	3301      	adds	r3, #1
 800f918:	627b      	str	r3, [r7, #36]	@ 0x24
 800f91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f91c:	2b03      	cmp	r3, #3
 800f91e:	d999      	bls.n	800f854 <FreeRTOS_inet_ntoa+0x1c>
    }

    return pcResult;
 800f920:	693b      	ldr	r3, [r7, #16]
}
 800f922:	4618      	mov	r0, r3
 800f924:	372c      	adds	r7, #44	@ 0x2c
 800f926:	46bd      	mov	sp, r7
 800f928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92c:	4770      	bx	lr
 800f92e:	bf00      	nop
 800f930:	cccccccd 	.word	0xcccccccd

0800f934 <FreeRTOS_inet_ntop>:
 */
const char * FreeRTOS_inet_ntop( BaseType_t xAddressFamily,
                                 const void * pvSource,
                                 char * pcDestination,
                                 socklen_t uxSize )
{
 800f934:	b580      	push	{r7, lr}
 800f936:	b086      	sub	sp, #24
 800f938:	af00      	add	r7, sp, #0
 800f93a:	60f8      	str	r0, [r7, #12]
 800f93c:	60b9      	str	r1, [r7, #8]
 800f93e:	607a      	str	r2, [r7, #4]
 800f940:	603b      	str	r3, [r7, #0]
    const char * pcResult;

    /* Printable struct sockaddr to string. */
    switch( xAddressFamily )
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	2b02      	cmp	r3, #2
 800f946:	d003      	beq.n	800f950 <FreeRTOS_inet_ntop+0x1c>
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	2b0a      	cmp	r3, #10
 800f94c:	d007      	beq.n	800f95e <FreeRTOS_inet_ntop+0x2a>
 800f94e:	e00d      	b.n	800f96c <FreeRTOS_inet_ntop+0x38>
    {
        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                pcResult = FreeRTOS_inet_ntop4( pvSource, pcDestination, uxSize );
 800f950:	683a      	ldr	r2, [r7, #0]
 800f952:	6879      	ldr	r1, [r7, #4]
 800f954:	68b8      	ldr	r0, [r7, #8]
 800f956:	f7fb fc8d 	bl	800b274 <FreeRTOS_inet_ntop4>
 800f95a:	6178      	str	r0, [r7, #20]
                break;
 800f95c:	e009      	b.n	800f972 <FreeRTOS_inet_ntop+0x3e>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                pcResult = FreeRTOS_inet_ntop6( pvSource, pcDestination, uxSize );
 800f95e:	683a      	ldr	r2, [r7, #0]
 800f960:	6879      	ldr	r1, [r7, #4]
 800f962:	68b8      	ldr	r0, [r7, #8]
 800f964:	f7fc f9c1 	bl	800bcea <FreeRTOS_inet_ntop6>
 800f968:	6178      	str	r0, [r7, #20]
                break;
 800f96a:	e002      	b.n	800f972 <FreeRTOS_inet_ntop+0x3e>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* errno should be set to pdFREERTOS_ERRNO_EAFNOSUPPORT. */
            pcResult = NULL;
 800f96c:	2300      	movs	r3, #0
 800f96e:	617b      	str	r3, [r7, #20]
            break;
 800f970:	bf00      	nop
    }

    return pcResult;
 800f972:	697b      	ldr	r3, [r7, #20]
}
 800f974:	4618      	mov	r0, r3
 800f976:	3718      	adds	r7, #24
 800f978:	46bd      	mov	sp, r7
 800f97a:	bd80      	pop	{r7, pc}

0800f97c <FreeRTOS_GetLocalAddress>:
 *
 * @return Size of the freertos_sockaddr structure.
 */
size_t FreeRTOS_GetLocalAddress( ConstSocket_t xSocket,
                                 struct freertos_sockaddr * pxAddress )
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b084      	sub	sp, #16
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
 800f984:	6039      	str	r1, [r7, #0]
    const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	60fb      	str	r3, [r7, #12]

    switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	7a1b      	ldrb	r3, [r3, #8]
 800f98e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800f992:	b2db      	uxtb	r3, r3
 800f994:	2b00      	cmp	r3, #0
 800f996:	d002      	beq.n	800f99e <FreeRTOS_GetLocalAddress+0x22>
 800f998:	2b01      	cmp	r3, #1
 800f99a:	d02a      	beq.n	800f9f2 <FreeRTOS_GetLocalAddress+0x76>
                break;
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* MISRA 16.4 Compliance */
            break;
 800f99c:	e044      	b.n	800fa28 <FreeRTOS_GetLocalAddress+0xac>
                pxAddress->sin_family = FREERTOS_AF_INET;
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	2202      	movs	r2, #2
 800f9a2:	705a      	strb	r2, [r3, #1]
                pxAddress->sin_len = ( uint8_t ) sizeof( *pxAddress );
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	2218      	movs	r2, #24
 800f9a8:	701a      	strb	r2, [r3, #0]
                pxAddress->sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9ae:	061a      	lsls	r2, r3, #24
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9b4:	021b      	lsls	r3, r3, #8
 800f9b6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f9ba:	431a      	orrs	r2, r3
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9c0:	0a1b      	lsrs	r3, r3, #8
 800f9c2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f9c6:	431a      	orrs	r2, r3
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9cc:	0e1b      	lsrs	r3, r3, #24
 800f9ce:	431a      	orrs	r2, r3
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	609a      	str	r2, [r3, #8]
                pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f9d8:	021b      	lsls	r3, r3, #8
 800f9da:	b21a      	sxth	r2, r3
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f9e0:	0a1b      	lsrs	r3, r3, #8
 800f9e2:	b29b      	uxth	r3, r3
 800f9e4:	b21b      	sxth	r3, r3
 800f9e6:	4313      	orrs	r3, r2
 800f9e8:	b21b      	sxth	r3, r3
 800f9ea:	b29a      	uxth	r2, r3
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	805a      	strh	r2, [r3, #2]
                break;
 800f9f0:	e01a      	b.n	800fa28 <FreeRTOS_GetLocalAddress+0xac>
                pxAddress->sin_family = FREERTOS_AF_INET6;
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	220a      	movs	r2, #10
 800f9f6:	705a      	strb	r2, [r3, #1]
                ( void ) memcpy( pxAddress->sin_address.xIP_IPv6.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( pxAddress->sin_address.xIP_IPv6.ucBytes ) );
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	f103 0008 	add.w	r0, r3, #8
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	3328      	adds	r3, #40	@ 0x28
 800fa02:	2210      	movs	r2, #16
 800fa04:	4619      	mov	r1, r3
 800fa06:	f013 f8e9 	bl	8022bdc <memcpy>
                pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800fa0e:	021b      	lsls	r3, r3, #8
 800fa10:	b21a      	sxth	r2, r3
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800fa16:	0a1b      	lsrs	r3, r3, #8
 800fa18:	b29b      	uxth	r3, r3
 800fa1a:	b21b      	sxth	r3, r3
 800fa1c:	4313      	orrs	r3, r2
 800fa1e:	b21b      	sxth	r3, r3
 800fa20:	b29a      	uxth	r2, r3
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	805a      	strh	r2, [r3, #2]
                break;
 800fa26:	bf00      	nop
    }

    return sizeof( *pxAddress );
 800fa28:	2318      	movs	r3, #24
}
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	3710      	adds	r7, #16
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	bd80      	pop	{r7, pc}

0800fa32 <vSocketWakeUpUser>:
 * @brief Wake up the user of the given socket through event-groups.
 *
 * @param[in] pxSocket The socket whose user is to be woken up.
 */
void vSocketWakeUpUser( FreeRTOS_Socket_t * pxSocket )
{
 800fa32:	b580      	push	{r7, lr}
 800fa34:	b084      	sub	sp, #16
 800fa36:	af00      	add	r7, sp, #0
 800fa38:	6078      	str	r0, [r7, #4]
/* _HT_ must work this out, now vSocketWakeUpUser will be called for any important
 * event or transition */
    #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
    {
        if( pxSocket->pxUserSemaphore != NULL )
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d006      	beq.n	800fa50 <vSocketWakeUpUser+0x1e>
        {
            ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800fa46:	2300      	movs	r3, #0
 800fa48:	2200      	movs	r2, #0
 800fa4a:	2100      	movs	r1, #0
 800fa4c:	f7f4 f8c0 	bl	8003bd0 <xQueueGenericSend>
    }
    #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
    {
        if( pxSocket->pxSocketSet != NULL )
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d015      	beq.n	800fa84 <vSocketWakeUpUser+0x52>
        {
            EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & ( ( EventBits_t ) eSELECT_ALL );
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	0a1b      	lsrs	r3, r3, #8
 800fa5e:	f003 030f 	and.w	r3, r3, #15
 800fa62:	60fb      	str	r3, [r7, #12]

            if( xSelectBits != 0U )
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d00c      	beq.n	800fa84 <vSocketWakeUpUser+0x52>
            {
                pxSocket->xSocketBits |= xSelectBits;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	431a      	orrs	r2, r3
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	649a      	str	r2, [r3, #72]	@ 0x48
                ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	68f9      	ldr	r1, [r7, #12]
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f7f3 fdca 	bl	8003618 <xEventGroupSetBits>
            }
        }

        pxSocket->xEventBits &= ( EventBits_t ) eSOCKET_ALL;
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	601a      	str	r2, [r3, #0]
    }
    #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

    if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0U ) )
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	685b      	ldr	r3, [r3, #4]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d00b      	beq.n	800fab0 <vSocketWakeUpUser+0x7e>
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d007      	beq.n	800fab0 <vSocketWakeUpUser+0x7e>
    {
        ( void ) xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	685a      	ldr	r2, [r3, #4]
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	4619      	mov	r1, r3
 800faaa:	4610      	mov	r0, r2
 800faac:	f7f3 fdb4 	bl	8003618 <xEventGroupSetBits>
    }

    pxSocket->xEventBits = 0U;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	2200      	movs	r2, #0
 800fab4:	601a      	str	r2, [r3, #0]
}
 800fab6:	bf00      	nop
 800fab8:	3710      	adds	r7, #16
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}

0800fabe <bMayConnect>:
 * @param[in] pxSocket The socket trying to connect.
 *
 * @return It may return: -EINPROGRESS, -EAGAIN, or 0 for OK.
 */
    static BaseType_t bMayConnect( FreeRTOS_Socket_t const * pxSocket )
    {
 800fabe:	b480      	push	{r7}
 800fac0:	b085      	sub	sp, #20
 800fac2:	af00      	add	r7, sp, #0
 800fac4:	6078      	str	r0, [r7, #4]
        BaseType_t xResult;

        eIPTCPState_t eState = pxSocket->u.xTCP.eTCPState;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800facc:	72fb      	strb	r3, [r7, #11]

        switch( eState )
 800face:	7afb      	ldrb	r3, [r7, #11]
 800fad0:	2b08      	cmp	r3, #8
 800fad2:	d006      	beq.n	800fae2 <bMayConnect+0x24>
 800fad4:	2b08      	cmp	r3, #8
 800fad6:	dc0b      	bgt.n	800faf0 <bMayConnect+0x32>
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d002      	beq.n	800fae2 <bMayConnect+0x24>
 800fadc:	2b02      	cmp	r3, #2
 800fade:	d003      	beq.n	800fae8 <bMayConnect+0x2a>
 800fae0:	e006      	b.n	800faf0 <bMayConnect+0x32>
        {
            case eCLOSED:
            case eCLOSE_WAIT:
                xResult = 0;
 800fae2:	2300      	movs	r3, #0
 800fae4:	60fb      	str	r3, [r7, #12]
                break;
 800fae6:	e007      	b.n	800faf8 <bMayConnect+0x3a>

            case eCONNECT_SYN:
                xResult = -pdFREERTOS_ERRNO_EINPROGRESS;
 800fae8:	f06f 0376 	mvn.w	r3, #118	@ 0x76
 800faec:	60fb      	str	r3, [r7, #12]
                break;
 800faee:	e003      	b.n	800faf8 <bMayConnect+0x3a>
            case eFIN_WAIT_2:
            case eCLOSING:
            case eLAST_ACK:
            case eTIME_WAIT:
            default:
                xResult = -pdFREERTOS_ERRNO_EAGAIN;
 800faf0:	f06f 030a 	mvn.w	r3, #10
 800faf4:	60fb      	str	r3, [r7, #12]
                break;
 800faf6:	bf00      	nop
        }

        return xResult;
 800faf8:	68fb      	ldr	r3, [r7, #12]
    }
 800fafa:	4618      	mov	r0, r3
 800fafc:	3714      	adds	r7, #20
 800fafe:	46bd      	mov	sp, r7
 800fb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb04:	4770      	bx	lr
	...

0800fb08 <prvTCPConnectStart>:
 *
 * @return 0 on successful checks or a negative error code.
 */
    static BaseType_t prvTCPConnectStart( FreeRTOS_Socket_t * pxSocket,
                                          struct freertos_sockaddr const * pxAddress )
    {
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b084      	sub	sp, #16
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
 800fb10:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = 0;
 800fb12:	2300      	movs	r3, #0
 800fb14:	60fb      	str	r3, [r7, #12]

        if( pxAddress == NULL )
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d103      	bne.n	800fb24 <prvTCPConnectStart+0x1c>
        {
            /* NULL address passed to the function. Invalid value. */
            xResult = -pdFREERTOS_ERRNO_EINVAL;
 800fb1c:	f06f 0315 	mvn.w	r3, #21
 800fb20:	60fb      	str	r3, [r7, #12]
 800fb22:	e01f      	b.n	800fb64 <prvTCPConnectStart+0x5c>
        }
        else if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdFALSE ) == pdFALSE )
 800fb24:	2200      	movs	r2, #0
 800fb26:	2106      	movs	r1, #6
 800fb28:	6878      	ldr	r0, [r7, #4]
 800fb2a:	f7fe fc71 	bl	800e410 <prvValidSocket>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d103      	bne.n	800fb3c <prvTCPConnectStart+0x34>
        {
            /* Not a valid socket or wrong type */
            xResult = -pdFREERTOS_ERRNO_EBADF;
 800fb34:	f06f 0308 	mvn.w	r3, #8
 800fb38:	60fb      	str	r3, [r7, #12]
 800fb3a:	e013      	b.n	800fb64 <prvTCPConnectStart+0x5c>
        }
        else if( FreeRTOS_issocketconnected( pxSocket ) > 0 )
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f001 f867 	bl	8010c10 <FreeRTOS_issocketconnected>
 800fb42:	4603      	mov	r3, r0
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	dd03      	ble.n	800fb50 <prvTCPConnectStart+0x48>
        {
            /* The socket is already connected. */
            xResult = -pdFREERTOS_ERRNO_EISCONN;
 800fb48:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800fb4c:	60fb      	str	r3, [r7, #12]
 800fb4e:	e009      	b.n	800fb64 <prvTCPConnectStart+0x5c>
        }
        else if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	69db      	ldr	r3, [r3, #28]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d105      	bne.n	800fb64 <prvTCPConnectStart+0x5c>
        {
            /* Bind the socket to the port that the client task will send from.
             * Non-standard, so the error returned is that returned by bind(). */
            xResult = FreeRTOS_bind( pxSocket, NULL, 0U );
 800fb58:	2200      	movs	r2, #0
 800fb5a:	2100      	movs	r1, #0
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f7fe ff4f 	bl	800ea00 <FreeRTOS_bind>
 800fb62:	60f8      	str	r0, [r7, #12]
        else
        {
            /* The socket is valid, not yet connected, and already bound to a port number. */
        }

        if( xResult == 0 )
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	f040 80a6 	bne.w	800fcb8 <prvTCPConnectStart+0x1b0>
        {
            /* Check if it makes any sense to wait for a connect event, this condition
             * might change while sleeping, so it must be checked within each loop */
            xResult = bMayConnect( pxSocket ); /* -EINPROGRESS, -EAGAIN, or 0 for OK */
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	f7ff ffa6 	bl	800fabe <bMayConnect>
 800fb72:	60f8      	str	r0, [r7, #12]

            /* Start the connect procedure, kernel will start working on it */
            if( xResult == 0 )
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	f040 809e 	bne.w	800fcb8 <prvTCPConnectStart+0x1b0>
            {
                pxSocket->u.xTCP.bits.bConnPrepared = pdFALSE;
 800fb7c:	687a      	ldr	r2, [r7, #4]
 800fb7e:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800fb82:	f36f 03c3 	bfc	r3, #3, #1
 800fb86:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.ucRepCount = 0U;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                switch( pxAddress->sin_family )
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	785b      	ldrb	r3, [r3, #1]
 800fb96:	2b02      	cmp	r3, #2
 800fb98:	d027      	beq.n	800fbea <prvTCPConnectStart+0xe2>
 800fb9a:	2b0a      	cmp	r3, #10
 800fb9c:	d168      	bne.n	800fc70 <prvTCPConnectStart+0x168>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case FREERTOS_AF_INET6:
                            pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800fb9e:	687a      	ldr	r2, [r7, #4]
 800fba0:	7a13      	ldrb	r3, [r2, #8]
 800fba2:	f043 0301 	orr.w	r3, r3, #1
 800fba6:	7213      	strb	r3, [r2, #8]
                            FreeRTOS_printf( ( "FreeRTOS_connect: %u to %pip port %u\n",
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800fbac:	4618      	mov	r0, r3
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	f103 0108 	add.w	r1, r3, #8
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	885b      	ldrh	r3, [r3, #2]
 800fbb8:	021b      	lsls	r3, r3, #8
 800fbba:	b21a      	sxth	r2, r3
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	885b      	ldrh	r3, [r3, #2]
 800fbc0:	0a1b      	lsrs	r3, r3, #8
 800fbc2:	b29b      	uxth	r3, r3
 800fbc4:	b21b      	sxth	r3, r3
 800fbc6:	4313      	orrs	r3, r2
 800fbc8:	b21b      	sxth	r3, r3
 800fbca:	b29b      	uxth	r3, r3
 800fbcc:	460a      	mov	r2, r1
 800fbce:	4601      	mov	r1, r0
 800fbd0:	483c      	ldr	r0, [pc, #240]	@ (800fcc4 <prvTCPConnectStart+0x1bc>)
 800fbd2:	f012 fde7 	bl	80227a4 <lUDPLoggingPrintf>
                                               pxSocket->usLocalPort, ( void * ) pxAddress->sin_address.xIP_IPv6.ucBytes,
                                               FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                            ( void ) memcpy( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	3308      	adds	r3, #8
 800fbe0:	2210      	movs	r2, #16
 800fbe2:	4619      	mov	r1, r3
 800fbe4:	f012 fffa 	bl	8022bdc <memcpy>
                            break;
 800fbe8:	e046      	b.n	800fc78 <prvTCPConnectStart+0x170>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    #if ( ipconfigUSE_IPv4 != 0 )
                        case FREERTOS_AF_INET4:
                            pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800fbea:	687a      	ldr	r2, [r7, #4]
 800fbec:	7a13      	ldrb	r3, [r2, #8]
 800fbee:	f36f 0300 	bfc	r3, #0, #1
 800fbf2:	7213      	strb	r3, [r2, #8]
                            FreeRTOS_printf( ( "FreeRTOS_connect: %u to %xip:%u\n",
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	683b      	ldr	r3, [r7, #0]
 800fbfc:	689b      	ldr	r3, [r3, #8]
 800fbfe:	061a      	lsls	r2, r3, #24
 800fc00:	683b      	ldr	r3, [r7, #0]
 800fc02:	689b      	ldr	r3, [r3, #8]
 800fc04:	021b      	lsls	r3, r3, #8
 800fc06:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800fc0a:	431a      	orrs	r2, r3
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	689b      	ldr	r3, [r3, #8]
 800fc10:	0a1b      	lsrs	r3, r3, #8
 800fc12:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800fc16:	431a      	orrs	r2, r3
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	689b      	ldr	r3, [r3, #8]
 800fc1c:	0e1b      	lsrs	r3, r3, #24
 800fc1e:	ea42 0103 	orr.w	r1, r2, r3
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	885b      	ldrh	r3, [r3, #2]
 800fc26:	021b      	lsls	r3, r3, #8
 800fc28:	b21a      	sxth	r2, r3
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	885b      	ldrh	r3, [r3, #2]
 800fc2e:	0a1b      	lsrs	r3, r3, #8
 800fc30:	b29b      	uxth	r3, r3
 800fc32:	b21b      	sxth	r3, r3
 800fc34:	4313      	orrs	r3, r2
 800fc36:	b21b      	sxth	r3, r3
 800fc38:	b29b      	uxth	r3, r3
 800fc3a:	460a      	mov	r2, r1
 800fc3c:	4601      	mov	r1, r0
 800fc3e:	4822      	ldr	r0, [pc, #136]	@ (800fcc8 <prvTCPConnectStart+0x1c0>)
 800fc40:	f012 fdb0 	bl	80227a4 <lUDPLoggingPrintf>
                                               pxSocket->usLocalPort, ( unsigned int ) FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 ), FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                            pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 = FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 );
 800fc44:	683b      	ldr	r3, [r7, #0]
 800fc46:	689b      	ldr	r3, [r3, #8]
 800fc48:	061a      	lsls	r2, r3, #24
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	689b      	ldr	r3, [r3, #8]
 800fc4e:	021b      	lsls	r3, r3, #8
 800fc50:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800fc54:	431a      	orrs	r2, r3
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	689b      	ldr	r3, [r3, #8]
 800fc5a:	0a1b      	lsrs	r3, r3, #8
 800fc5c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800fc60:	431a      	orrs	r2, r3
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	689b      	ldr	r3, [r3, #8]
 800fc66:	0e1b      	lsrs	r3, r3, #24
 800fc68:	431a      	orrs	r2, r3
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	655a      	str	r2, [r3, #84]	@ 0x54
                            break;
 800fc6e:	e003      	b.n	800fc78 <prvTCPConnectStart+0x170>
                    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                    default:
                        FreeRTOS_debug_printf( ( "FreeRTOS_connect: Undefined sin_family \n" ) );
 800fc70:	4816      	ldr	r0, [pc, #88]	@ (800fccc <prvTCPConnectStart+0x1c4>)
 800fc72:	f012 fd97 	bl	80227a4 <lUDPLoggingPrintf>
                        break;
 800fc76:	bf00      	nop
                }

                /* Port on remote machine. */
                pxSocket->u.xTCP.usRemotePort = FreeRTOS_ntohs( pxAddress->sin_port );
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	885b      	ldrh	r3, [r3, #2]
 800fc7c:	021b      	lsls	r3, r3, #8
 800fc7e:	b21a      	sxth	r2, r3
 800fc80:	683b      	ldr	r3, [r7, #0]
 800fc82:	885b      	ldrh	r3, [r3, #2]
 800fc84:	0a1b      	lsrs	r3, r3, #8
 800fc86:	b29b      	uxth	r3, r3
 800fc88:	b21b      	sxth	r3, r3
 800fc8a:	4313      	orrs	r3, r2
 800fc8c:	b21b      	sxth	r3, r3
 800fc8e:	b29a      	uxth	r2, r3
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

                /* (client) internal state: socket wants to send a connect. */
                vTCPStateChange( pxSocket, eCONNECT_SYN );
 800fc96:	2102      	movs	r1, #2
 800fc98:	6878      	ldr	r0, [r7, #4]
 800fc9a:	f001 fd77 	bl	801178c <vTCPStateChange>

                /* To start an active connect. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	2201      	movs	r2, #1
 800fca2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                if( xSendEventToIPTask( eTCPTimerEvent ) != pdPASS )
 800fca6:	2006      	movs	r0, #6
 800fca8:	f7f9 ffdc 	bl	8009c64 <xSendEventToIPTask>
 800fcac:	4603      	mov	r3, r0
 800fcae:	2b01      	cmp	r3, #1
 800fcb0:	d002      	beq.n	800fcb8 <prvTCPConnectStart+0x1b0>
                {
                    xResult = -pdFREERTOS_ERRNO_ECANCELED;
 800fcb2:	f06f 038b 	mvn.w	r3, #139	@ 0x8b
 800fcb6:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        return xResult;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
    }
 800fcba:	4618      	mov	r0, r3
 800fcbc:	3710      	adds	r7, #16
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}
 800fcc2:	bf00      	nop
 800fcc4:	080265a4 	.word	0x080265a4
 800fcc8:	080265cc 	.word	0x080265cc
 800fccc:	080265f0 	.word	0x080265f0

0800fcd0 <FreeRTOS_connect>:
 *         error code is returned.
 */
    BaseType_t FreeRTOS_connect( Socket_t xClientSocket,
                                 const struct freertos_sockaddr * pxAddress,
                                 socklen_t xAddressLength )
    {
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b094      	sub	sp, #80	@ 0x50
 800fcd4:	af02      	add	r7, sp, #8
 800fcd6:	60f8      	str	r0, [r7, #12]
 800fcd8:	60b9      	str	r1, [r7, #8]
 800fcda:	607a      	str	r2, [r7, #4]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xClientSocket;
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800fce0:	2300      	movs	r3, #0
 800fce2:	647b      	str	r3, [r7, #68]	@ 0x44
        BaseType_t xResult = -pdFREERTOS_ERRNO_EINVAL;
 800fce4:	f06f 0315 	mvn.w	r3, #21
 800fce8:	643b      	str	r3, [r7, #64]	@ 0x40
        TimeOut_t xTimeOut;

        #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
            struct freertos_sockaddr xTempAddress;

            if( ( pxAddress != NULL ) && ( pxAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxAddress->sin_family != FREERTOS_AF_INET ) )
 800fcea:	68bb      	ldr	r3, [r7, #8]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d013      	beq.n	800fd18 <FreeRTOS_connect+0x48>
 800fcf0:	68bb      	ldr	r3, [r7, #8]
 800fcf2:	785b      	ldrb	r3, [r3, #1]
 800fcf4:	2b0a      	cmp	r3, #10
 800fcf6:	d00f      	beq.n	800fd18 <FreeRTOS_connect+0x48>
 800fcf8:	68bb      	ldr	r3, [r7, #8]
 800fcfa:	785b      	ldrb	r3, [r3, #1]
 800fcfc:	2b02      	cmp	r3, #2
 800fcfe:	d00b      	beq.n	800fd18 <FreeRTOS_connect+0x48>
            {
                ( void ) memcpy( &xTempAddress, pxAddress, sizeof( struct freertos_sockaddr ) );
 800fd00:	f107 0314 	add.w	r3, r7, #20
 800fd04:	2218      	movs	r2, #24
 800fd06:	68b9      	ldr	r1, [r7, #8]
 800fd08:	4618      	mov	r0, r3
 800fd0a:	f012 ff67 	bl	8022bdc <memcpy>

                /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
                 *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
                xTempAddress.sin_family = FREERTOS_AF_INET;
 800fd0e:	2302      	movs	r3, #2
 800fd10:	757b      	strb	r3, [r7, #21]
                pxAddress = &xTempAddress;
 800fd12:	f107 0314 	add.w	r3, r7, #20
 800fd16:	60bb      	str	r3, [r7, #8]
            }
        #endif /* ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 ) */

        ( void ) xAddressLength;

        xResult = prvTCPConnectStart( pxSocket, pxAddress );
 800fd18:	68b9      	ldr	r1, [r7, #8]
 800fd1a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800fd1c:	f7ff fef4 	bl	800fb08 <prvTCPConnectStart>
 800fd20:	6438      	str	r0, [r7, #64]	@ 0x40

        if( xResult == 0 )
 800fd22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d146      	bne.n	800fdb6 <FreeRTOS_connect+0xe6>
            /* And wait for the result */
            for( ; ; )
            {
                EventBits_t uxEvents;

                if( xTimed == pdFALSE )
 800fd28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d110      	bne.n	800fd50 <FreeRTOS_connect+0x80>
                {
                    /* Only in the first round, check for non-blocking */
                    xRemainingTime = pxSocket->xReceiveBlockTime;
 800fd2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd30:	6a1b      	ldr	r3, [r3, #32]
 800fd32:	637b      	str	r3, [r7, #52]	@ 0x34

                    if( xRemainingTime == ( TickType_t ) 0 )
 800fd34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d103      	bne.n	800fd42 <FreeRTOS_connect+0x72>
                    {
                        /* Not yet connected, correct state, non-blocking. */
                        xResult = -pdFREERTOS_ERRNO_EWOULDBLOCK;
 800fd3a:	f06f 030a 	mvn.w	r3, #10
 800fd3e:	643b      	str	r3, [r7, #64]	@ 0x40
                        break;
 800fd40:	e039      	b.n	800fdb6 <FreeRTOS_connect+0xe6>
                    }

                    /* Don't get here a second time. */
                    xTimed = pdTRUE;
 800fd42:	2301      	movs	r3, #1
 800fd44:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* Fetch the current time */
                    vTaskSetTimeOutState( &xTimeOut );
 800fd46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	f7f5 fb6a 	bl	8005424 <vTaskSetTimeOutState>
                }

                /* Did it get connected while sleeping ? */
                xResult = FreeRTOS_issocketconnected( pxSocket );
 800fd50:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800fd52:	f000 ff5d 	bl	8010c10 <FreeRTOS_issocketconnected>
 800fd56:	6438      	str	r0, [r7, #64]	@ 0x40

                /* Returns positive when connected, negative means an error */
                if( xResult < 0 )
 800fd58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	db2a      	blt.n	800fdb4 <FreeRTOS_connect+0xe4>
                {
                    /* Return the error */
                    break;
                }

                if( xResult > 0 )
 800fd5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	dd02      	ble.n	800fd6a <FreeRTOS_connect+0x9a>
                {
                    /* Socket now connected, return a zero */
                    xResult = 0;
 800fd64:	2300      	movs	r3, #0
 800fd66:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 800fd68:	e025      	b.n	800fdb6 <FreeRTOS_connect+0xe6>
                }

                /* Is it allowed to sleep more? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800fd6a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800fd6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800fd72:	4611      	mov	r1, r2
 800fd74:	4618      	mov	r0, r3
 800fd76:	f7f5 fb8d 	bl	8005494 <xTaskCheckForTimeOut>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d003      	beq.n	800fd88 <FreeRTOS_connect+0xb8>
                {
                    xResult = -pdFREERTOS_ERRNO_ETIMEDOUT;
 800fd80:	f06f 0373 	mvn.w	r3, #115	@ 0x73
 800fd84:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 800fd86:	e016      	b.n	800fdb6 <FreeRTOS_connect+0xe6>
                }

                /* Go sleeping until we get any down-stream event */
                uxEvents = xEventGroupWaitBits( pxSocket->xEventGroup,
 800fd88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd8a:	6858      	ldr	r0, [r3, #4]
 800fd8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd8e:	9300      	str	r3, [sp, #0]
 800fd90:	2300      	movs	r3, #0
 800fd92:	2201      	movs	r2, #1
 800fd94:	2128      	movs	r1, #40	@ 0x28
 800fd96:	f7f3 fb59 	bl	800344c <xEventGroupWaitBits>
 800fd9a:	63b8      	str	r0, [r7, #56]	@ 0x38
                                                ( EventBits_t ) eSOCKET_CONNECT | ( EventBits_t ) eSOCKET_CLOSED,
                                                pdTRUE /*xClearOnExit*/,
                                                pdFALSE /*xWaitAllBits*/,
                                                xRemainingTime );

                if( ( uxEvents & ( EventBits_t ) eSOCKET_CLOSED ) != 0U )
 800fd9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd9e:	f003 0320 	and.w	r3, r3, #32
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d0c0      	beq.n	800fd28 <FreeRTOS_connect+0x58>
                {
                    xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800fda6:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800fdaa:	643b      	str	r3, [r7, #64]	@ 0x40
                    FreeRTOS_debug_printf( ( "FreeRTOS_connect() stopped due to an error\n" ) );
 800fdac:	4804      	ldr	r0, [pc, #16]	@ (800fdc0 <FreeRTOS_connect+0xf0>)
 800fdae:	f012 fcf9 	bl	80227a4 <lUDPLoggingPrintf>
                    break;
 800fdb2:	e000      	b.n	800fdb6 <FreeRTOS_connect+0xe6>
                    break;
 800fdb4:	bf00      	nop
                }
            }
        }

        return xResult;
 800fdb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    }
 800fdb8:	4618      	mov	r0, r3
 800fdba:	3748      	adds	r7, #72	@ 0x48
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}
 800fdc0:	0802661c 	.word	0x0802661c

0800fdc4 <prvAcceptWaitClient>:
 * @return A new connected socket or NULL.
 */
    static FreeRTOS_Socket_t * prvAcceptWaitClient( FreeRTOS_Socket_t * pxParentSocket,
                                                    struct freertos_sockaddr * pxAddress,
                                                    socklen_t * pxAddressLength )
    {
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b086      	sub	sp, #24
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	60f8      	str	r0, [r7, #12]
 800fdcc:	60b9      	str	r1, [r7, #8]
 800fdce:	607a      	str	r2, [r7, #4]
        FreeRTOS_Socket_t * pxClientSocket = NULL;
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	617b      	str	r3, [r7, #20]

        /* Is there a new client? */
        vTaskSuspendAll();
 800fdd4:	f7f4 fe6a 	bl	8004aac <vTaskSuspendAll>
        {
            if( pxParentSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800fdde:	f003 0308 	and.w	r3, r3, #8
 800fde2:	b2db      	uxtb	r3, r3
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d10b      	bne.n	800fe00 <prvAcceptWaitClient+0x3c>
            {
                pxClientSocket = pxParentSocket->u.xTCP.pxPeerSocket;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fdec:	617b      	str	r3, [r7, #20]

                if( pxClientSocket != NULL )
 800fdee:	697b      	ldr	r3, [r7, #20]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d007      	beq.n	800fe04 <prvAcceptWaitClient+0x40>
                {
                    FreeRTOS_printf( ( "prvAcceptWaitClient: client %p parent %p\n",
 800fdf4:	68fa      	ldr	r2, [r7, #12]
 800fdf6:	6979      	ldr	r1, [r7, #20]
 800fdf8:	4845      	ldr	r0, [pc, #276]	@ (800ff10 <prvAcceptWaitClient+0x14c>)
 800fdfa:	f012 fcd3 	bl	80227a4 <lUDPLoggingPrintf>
 800fdfe:	e001      	b.n	800fe04 <prvAcceptWaitClient+0x40>
                                       ( void * ) pxClientSocket, ( void * ) pxParentSocket ) );
                }
            }
            else
            {
                pxClientSocket = pxParentSocket;
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	617b      	str	r3, [r7, #20]
            }

            if( pxClientSocket != NULL )
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d018      	beq.n	800fe3c <prvAcceptWaitClient+0x78>
            {
                /* Is it still not taken ? */
                if( pxClientSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED )
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800fe10:	f003 0302 	and.w	r3, r3, #2
 800fe14:	b2db      	uxtb	r3, r3
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d00e      	beq.n	800fe38 <prvAcceptWaitClient+0x74>
                {
                    if( pxParentSocket->u.xTCP.pxPeerSocket != NULL )
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d002      	beq.n	800fe28 <prvAcceptWaitClient+0x64>
                    {
                        pxParentSocket->u.xTCP.pxPeerSocket = NULL;
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	2200      	movs	r2, #0
 800fe26:	67da      	str	r2, [r3, #124]	@ 0x7c
                    }

                    pxClientSocket->u.xTCP.bits.bPassAccept = pdFALSE_UNSIGNED;
 800fe28:	697a      	ldr	r2, [r7, #20]
 800fe2a:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800fe2e:	f36f 0341 	bfc	r3, #1, #1
 800fe32:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800fe36:	e001      	b.n	800fe3c <prvAcceptWaitClient+0x78>
                }
                else
                {
                    pxClientSocket = NULL;
 800fe38:	2300      	movs	r3, #0
 800fe3a:	617b      	str	r3, [r7, #20]
                }
            }
        }
        ( void ) xTaskResumeAll();
 800fe3c:	f7f4 fe44 	bl	8004ac8 <xTaskResumeAll>

        if( pxClientSocket != NULL )
 800fe40:	697b      	ldr	r3, [r7, #20]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d05e      	beq.n	800ff04 <prvAcceptWaitClient+0x140>
        {
            if( pxAddressLength != NULL )
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d002      	beq.n	800fe52 <prvAcceptWaitClient+0x8e>
            {
                *pxAddressLength = sizeof( struct freertos_sockaddr );
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2218      	movs	r2, #24
 800fe50:	601a      	str	r2, [r3, #0]
            }

            switch( pxClientSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	7a1b      	ldrb	r3, [r3, #8]
 800fe56:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800fe5a:	b2db      	uxtb	r3, r3
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d002      	beq.n	800fe66 <prvAcceptWaitClient+0xa2>
 800fe60:	2b01      	cmp	r3, #1
 800fe62:	d02c      	beq.n	800febe <prvAcceptWaitClient+0xfa>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 800fe64:	e04e      	b.n	800ff04 <prvAcceptWaitClient+0x140>
                        if( pxAddress != NULL )
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d048      	beq.n	800fefe <prvAcceptWaitClient+0x13a>
                            pxAddress->sin_family = FREERTOS_AF_INET4;
 800fe6c:	68bb      	ldr	r3, [r7, #8]
 800fe6e:	2202      	movs	r2, #2
 800fe70:	705a      	strb	r2, [r3, #1]
                            pxAddress->sin_address.ulIP_IPv4 = FreeRTOS_ntohl( pxClientSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 800fe72:	697b      	ldr	r3, [r7, #20]
 800fe74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe76:	061a      	lsls	r2, r3, #24
 800fe78:	697b      	ldr	r3, [r7, #20]
 800fe7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe7c:	021b      	lsls	r3, r3, #8
 800fe7e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800fe82:	431a      	orrs	r2, r3
 800fe84:	697b      	ldr	r3, [r7, #20]
 800fe86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe88:	0a1b      	lsrs	r3, r3, #8
 800fe8a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800fe8e:	431a      	orrs	r2, r3
 800fe90:	697b      	ldr	r3, [r7, #20]
 800fe92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe94:	0e1b      	lsrs	r3, r3, #24
 800fe96:	431a      	orrs	r2, r3
 800fe98:	68bb      	ldr	r3, [r7, #8]
 800fe9a:	609a      	str	r2, [r3, #8]
                            pxAddress->sin_port = FreeRTOS_ntohs( pxClientSocket->u.xTCP.usRemotePort );
 800fe9c:	697b      	ldr	r3, [r7, #20]
 800fe9e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800fea2:	021b      	lsls	r3, r3, #8
 800fea4:	b21a      	sxth	r2, r3
 800fea6:	697b      	ldr	r3, [r7, #20]
 800fea8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800feac:	0a1b      	lsrs	r3, r3, #8
 800feae:	b29b      	uxth	r3, r3
 800feb0:	b21b      	sxth	r3, r3
 800feb2:	4313      	orrs	r3, r2
 800feb4:	b21b      	sxth	r3, r3
 800feb6:	b29a      	uxth	r2, r3
 800feb8:	68bb      	ldr	r3, [r7, #8]
 800feba:	805a      	strh	r2, [r3, #2]
                        break;
 800febc:	e01f      	b.n	800fefe <prvAcceptWaitClient+0x13a>
                        if( pxAddress != NULL )
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d01e      	beq.n	800ff02 <prvAcceptWaitClient+0x13e>
                            pxAddress->sin_family = FREERTOS_AF_INET6;
 800fec4:	68bb      	ldr	r3, [r7, #8]
 800fec6:	220a      	movs	r2, #10
 800fec8:	705a      	strb	r2, [r3, #1]
                            ( void ) memcpy( pxAddress->sin_address.xIP_IPv6.ucBytes, pxClientSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800feca:	68bb      	ldr	r3, [r7, #8]
 800fecc:	f103 0008 	add.w	r0, r3, #8
 800fed0:	697b      	ldr	r3, [r7, #20]
 800fed2:	3354      	adds	r3, #84	@ 0x54
 800fed4:	2210      	movs	r2, #16
 800fed6:	4619      	mov	r1, r3
 800fed8:	f012 fe80 	bl	8022bdc <memcpy>
                            pxAddress->sin_port = FreeRTOS_ntohs( pxClientSocket->u.xTCP.usRemotePort );
 800fedc:	697b      	ldr	r3, [r7, #20]
 800fede:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800fee2:	021b      	lsls	r3, r3, #8
 800fee4:	b21a      	sxth	r2, r3
 800fee6:	697b      	ldr	r3, [r7, #20]
 800fee8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800feec:	0a1b      	lsrs	r3, r3, #8
 800feee:	b29b      	uxth	r3, r3
 800fef0:	b21b      	sxth	r3, r3
 800fef2:	4313      	orrs	r3, r2
 800fef4:	b21b      	sxth	r3, r3
 800fef6:	b29a      	uxth	r2, r3
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	805a      	strh	r2, [r3, #2]
                        break;
 800fefc:	e001      	b.n	800ff02 <prvAcceptWaitClient+0x13e>
                        break;
 800fefe:	bf00      	nop
 800ff00:	e000      	b.n	800ff04 <prvAcceptWaitClient+0x140>
                        break;
 800ff02:	bf00      	nop
            }
        }

        return pxClientSocket;
 800ff04:	697b      	ldr	r3, [r7, #20]
    }
 800ff06:	4618      	mov	r0, r3
 800ff08:	3718      	adds	r7, #24
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}
 800ff0e:	bf00      	nop
 800ff10:	08026648 	.word	0x08026648

0800ff14 <FreeRTOS_accept>:
 *         be bound already to the same port number as the listening socket.
 */
    Socket_t FreeRTOS_accept( Socket_t xServerSocket,
                              struct freertos_sockaddr * pxAddress,
                              socklen_t * pxAddressLength )
    {
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b08e      	sub	sp, #56	@ 0x38
 800ff18:	af02      	add	r7, sp, #8
 800ff1a:	60f8      	str	r0, [r7, #12]
 800ff1c:	60b9      	str	r1, [r7, #8]
 800ff1e:	607a      	str	r2, [r7, #4]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xServerSocket;
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	627b      	str	r3, [r7, #36]	@ 0x24
        FreeRTOS_Socket_t * pxClientSocket = NULL;
 800ff24:	2300      	movs	r3, #0
 800ff26:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800ff28:	2300      	movs	r3, #0
 800ff2a:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        IPStackEvent_t xAskEvent;

        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800ff2c:	2201      	movs	r2, #1
 800ff2e:	2106      	movs	r1, #6
 800ff30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ff32:	f7fe fa6d 	bl	800e410 <prvValidSocket>
 800ff36:	4603      	mov	r3, r0
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d103      	bne.n	800ff44 <FreeRTOS_accept+0x30>
            /* Not a valid socket or wrong type */

            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            pxClientSocket = FREERTOS_INVALID_SOCKET;
 800ff3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ff40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ff42:	e058      	b.n	800fff6 <FreeRTOS_accept+0xe2>
        }
        else if( ( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) &&
 800ff44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff46:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800ff4a:	f003 0308 	and.w	r3, r3, #8
 800ff4e:	b2db      	uxtb	r3, r3
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d000      	beq.n	800ff56 <FreeRTOS_accept+0x42>
 800ff54:	e008      	b.n	800ff68 <FreeRTOS_accept+0x54>
                 ( pxSocket->u.xTCP.eTCPState != eTCP_LISTEN ) )
 800ff56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff58:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
        else if( ( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) &&
 800ff5c:	2b01      	cmp	r3, #1
 800ff5e:	d003      	beq.n	800ff68 <FreeRTOS_accept+0x54>
            /* Parent socket is not in listening mode */

            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            pxClientSocket = FREERTOS_INVALID_SOCKET;
 800ff60:	f04f 33ff 	mov.w	r3, #4294967295
 800ff64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ff66:	e046      	b.n	800fff6 <FreeRTOS_accept+0xe2>
        else
        {
            /* Loop will stop with breaks. */
            for( ; ; )
            {
                pxClientSocket = prvAcceptWaitClient( pxSocket, pxAddress, pxAddressLength );
 800ff68:	687a      	ldr	r2, [r7, #4]
 800ff6a:	68b9      	ldr	r1, [r7, #8]
 800ff6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ff6e:	f7ff ff29 	bl	800fdc4 <prvAcceptWaitClient>
 800ff72:	62f8      	str	r0, [r7, #44]	@ 0x2c

                if( pxClientSocket != NULL )
 800ff74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d013      	beq.n	800ffa2 <FreeRTOS_accept+0x8e>
                {
                    if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800ff7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff7c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800ff80:	f003 0308 	and.w	r3, r3, #8
 800ff84:	b2db      	uxtb	r3, r3
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d130      	bne.n	800ffec <FreeRTOS_accept+0xd8>
                    {
                        /* Ask to set an event in 'xEventGroup' as soon as a new
                         * client gets connected for this listening socket. */
                        xAskEvent.eEventType = eTCPAcceptEvent;
 800ff8a:	2307      	movs	r3, #7
 800ff8c:	743b      	strb	r3, [r7, #16]
                        xAskEvent.pvData = pxSocket;
 800ff8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff90:	617b      	str	r3, [r7, #20]
                        ( void ) xSendEventStructToIPTask( &xAskEvent, portMAX_DELAY );
 800ff92:	f107 0310 	add.w	r3, r7, #16
 800ff96:	f04f 31ff 	mov.w	r1, #4294967295
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f7f9 fe78 	bl	8009c90 <xSendEventStructToIPTask>
                    }

                    break;
 800ffa0:	e024      	b.n	800ffec <FreeRTOS_accept+0xd8>
                }

                if( xTimed == pdFALSE )
 800ffa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d10c      	bne.n	800ffc2 <FreeRTOS_accept+0xae>
                {
                    /* Only in the first round, check for non-blocking */
                    xRemainingTime = pxSocket->xReceiveBlockTime;
 800ffa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffaa:	6a1b      	ldr	r3, [r3, #32]
 800ffac:	623b      	str	r3, [r7, #32]

                    if( xRemainingTime == ( TickType_t ) 0 )
 800ffae:	6a3b      	ldr	r3, [r7, #32]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d01d      	beq.n	800fff0 <FreeRTOS_accept+0xdc>
                    {
                        break;
                    }

                    /* Don't get here a second time */
                    xTimed = pdTRUE;
 800ffb4:	2301      	movs	r3, #1
 800ffb6:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* Fetch the current time */
                    vTaskSetTimeOutState( &xTimeOut );
 800ffb8:	f107 0318 	add.w	r3, r7, #24
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	f7f5 fa31 	bl	8005424 <vTaskSetTimeOutState>
                }

                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800ffc2:	f107 0220 	add.w	r2, r7, #32
 800ffc6:	f107 0318 	add.w	r3, r7, #24
 800ffca:	4611      	mov	r1, r2
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f7f5 fa61 	bl	8005494 <xTaskCheckForTimeOut>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d10d      	bne.n	800fff4 <FreeRTOS_accept+0xe0>
                {
                    break;
                }

                /* Put the calling task to 'sleep' until a down-stream event is received. */
                ( void ) xEventGroupWaitBits( pxSocket->xEventGroup,
 800ffd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffda:	6858      	ldr	r0, [r3, #4]
 800ffdc:	6a3b      	ldr	r3, [r7, #32]
 800ffde:	9300      	str	r3, [sp, #0]
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	2201      	movs	r2, #1
 800ffe4:	2104      	movs	r1, #4
 800ffe6:	f7f3 fa31 	bl	800344c <xEventGroupWaitBits>
                pxClientSocket = prvAcceptWaitClient( pxSocket, pxAddress, pxAddressLength );
 800ffea:	e7bd      	b.n	800ff68 <FreeRTOS_accept+0x54>
                    break;
 800ffec:	bf00      	nop
 800ffee:	e002      	b.n	800fff6 <FreeRTOS_accept+0xe2>
                        break;
 800fff0:	bf00      	nop
 800fff2:	e000      	b.n	800fff6 <FreeRTOS_accept+0xe2>
                    break;
 800fff4:	bf00      	nop
                                              pdFALSE /*xWaitAllBits*/,
                                              xRemainingTime );
            }
        }

        return pxClientSocket;
 800fff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800fff8:	4618      	mov	r0, r3
 800fffa:	3730      	adds	r7, #48	@ 0x30
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd80      	pop	{r7, pc}

08010000 <prvRecvData>:
 */
    static BaseType_t prvRecvData( FreeRTOS_Socket_t * pxSocket,
                                   void * pvBuffer,
                                   size_t uxBufferLength,
                                   BaseType_t xFlags )
    {
 8010000:	b580      	push	{r7, lr}
 8010002:	b08a      	sub	sp, #40	@ 0x28
 8010004:	af02      	add	r7, sp, #8
 8010006:	60f8      	str	r0, [r7, #12]
 8010008:	60b9      	str	r1, [r7, #8]
 801000a:	607a      	str	r2, [r7, #4]
 801000c:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount;

        if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) == 0U )
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	f003 0301 	and.w	r3, r3, #1
 8010014:	2b00      	cmp	r3, #0
 8010016:	d13b      	bne.n	8010090 <prvRecvData+0x90>
        {
            BaseType_t xIsPeek = ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_PEEK ) != 0U ) ? 1L : 0L;
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	089b      	lsrs	r3, r3, #2
 801001c:	f003 0301 	and.w	r3, r3, #1
 8010020:	61bb      	str	r3, [r7, #24]

            xByteCount = ( BaseType_t )
                         uxStreamBufferGet( pxSocket->u.xTCP.rxStream,
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
 8010028:	69bb      	ldr	r3, [r7, #24]
 801002a:	9300      	str	r3, [sp, #0]
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	68ba      	ldr	r2, [r7, #8]
 8010030:	2100      	movs	r1, #0
 8010032:	f001 fa04 	bl	801143e <uxStreamBufferGet>
 8010036:	4603      	mov	r3, r0
            xByteCount = ( BaseType_t )
 8010038:	61fb      	str	r3, [r7, #28]
                                            0U,
                                            ( uint8_t * ) pvBuffer,
                                            ( size_t ) uxBufferLength,
                                            xIsPeek );

            if( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED )
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010040:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010044:	b2db      	uxtb	r3, r3
 8010046:	2b00      	cmp	r3, #0
 8010048:	d02b      	beq.n	80100a2 <prvRecvData+0xa2>
            {
                /* We had reached the low-water mark, now see if the flag
                 * can be cleared */
                size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010050:	4618      	mov	r0, r3
 8010052:	f001 f8c5 	bl	80111e0 <uxStreamBufferFrontSpace>
 8010056:	6178      	str	r0, [r7, #20]

                if( uxFrontSpace >= pxSocket->u.xTCP.uxEnoughSpace )
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801005e:	697a      	ldr	r2, [r7, #20]
 8010060:	429a      	cmp	r2, r3
 8010062:	d31e      	bcc.n	80100a2 <prvRecvData+0xa2>
                {
                    pxSocket->u.xTCP.bits.bLowWater = pdFALSE_UNSIGNED;
 8010064:	68fa      	ldr	r2, [r7, #12]
 8010066:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801006a:	f36f 13c7 	bfc	r3, #7, #1
 801006e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                    pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8010072:	68fa      	ldr	r2, [r7, #12]
 8010074:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8010078:	f043 0301 	orr.w	r3, r3, #1
 801007c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                    pxSocket->u.xTCP.usTimeout = 1U; /* because bLowWater is cleared. */
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	2201      	movs	r2, #1
 8010084:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                    ( void ) xSendEventToIPTask( eTCPTimerEvent );
 8010088:	2006      	movs	r0, #6
 801008a:	f7f9 fdeb 	bl	8009c64 <xSendEventToIPTask>
 801008e:	e008      	b.n	80100a2 <prvRecvData+0xa2>
            }
        }
        else
        {
            /* Zero-copy reception of data: pvBuffer is a pointer to a pointer. */
            xByteCount = ( BaseType_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, ( uint8_t ** ) pvBuffer );
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010096:	68b9      	ldr	r1, [r7, #8]
 8010098:	4618      	mov	r0, r3
 801009a:	f001 f930 	bl	80112fe <uxStreamBufferGetPtr>
 801009e:	4603      	mov	r3, r0
 80100a0:	61fb      	str	r3, [r7, #28]
        }

        return xByteCount;
 80100a2:	69fb      	ldr	r3, [r7, #28]
    }
 80100a4:	4618      	mov	r0, r3
 80100a6:	3720      	adds	r7, #32
 80100a8:	46bd      	mov	sp, r7
 80100aa:	bd80      	pop	{r7, pc}

080100ac <prvRecvWait>:
 *            is checked in this function.
 */
    static BaseType_t prvRecvWait( const FreeRTOS_Socket_t * pxSocket,
                                   EventBits_t * pxEventBits,
                                   BaseType_t xFlags )
    {
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b08e      	sub	sp, #56	@ 0x38
 80100b0:	af02      	add	r7, sp, #8
 80100b2:	60f8      	str	r0, [r7, #12]
 80100b4:	60b9      	str	r1, [r7, #8]
 80100b6:	607a      	str	r2, [r7, #4]
        BaseType_t xByteCount = 0;
 80100b8:	2300      	movs	r3, #0
 80100ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 80100bc:	2300      	movs	r3, #0
 80100be:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        EventBits_t xEventBits = ( EventBits_t ) 0U;
 80100c0:	2300      	movs	r3, #0
 80100c2:	627b      	str	r3, [r7, #36]	@ 0x24

        if( pxSocket->u.xTCP.rxStream != NULL )
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d05f      	beq.n	801018e <prvRecvWait+0xe2>
        {
            xByteCount = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80100d4:	4618      	mov	r0, r3
 80100d6:	f001 f894 	bl	8011202 <uxStreamBufferGetSize>
 80100da:	4603      	mov	r3, r0
 80100dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        while( xByteCount == 0 )
 80100de:	e056      	b.n	801018e <prvRecvWait+0xe2>
        {
            eIPTCPState_t eType = ( eIPTCPState_t ) pxSocket->u.xTCP.eTCPState;
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80100e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( ( eType == eCLOSED ) ||
 80100ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d007      	beq.n	8010102 <prvRecvWait+0x56>
 80100f2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80100f6:	2b08      	cmp	r3, #8
 80100f8:	d003      	beq.n	8010102 <prvRecvWait+0x56>
                ( eType == eCLOSE_WAIT ) || /* (server + client) waiting for a connection termination request from the local user. */
 80100fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80100fe:	2b09      	cmp	r3, #9
 8010100:	d10e      	bne.n	8010120 <prvRecvWait+0x74>
                ( eType == eCLOSING ) )     /* (server + client) waiting for a connection termination request acknowledgement from the remote TCP. */
            {
                /* Return -ENOTCONN, unless there was a malloc failure. */
                xByteCount = -pdFREERTOS_ERRNO_ENOTCONN;
 8010102:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8010106:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 801010e:	f003 0308 	and.w	r3, r3, #8
 8010112:	b2db      	uxtb	r3, r3
 8010114:	2b00      	cmp	r3, #0
 8010116:	d03e      	beq.n	8010196 <prvRecvWait+0xea>
                {
                    /* The no-memory error has priority above the non-connected error.
                     * Both are fatal and will lead to closing the socket. */
                    xByteCount = -pdFREERTOS_ERRNO_ENOMEM;
 8010118:	f06f 030b 	mvn.w	r3, #11
 801011c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                }

                break;
 801011e:	e03a      	b.n	8010196 <prvRecvWait+0xea>
            }

            if( xTimed == pdFALSE )
 8010120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010122:	2b00      	cmp	r3, #0
 8010124:	d111      	bne.n	801014a <prvRecvWait+0x9e>
            {
                /* Only in the first round, check for non-blocking. */
                xRemainingTime = pxSocket->xReceiveBlockTime;
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	6a1b      	ldr	r3, [r3, #32]
 801012a:	61fb      	str	r3, [r7, #28]

                if( xRemainingTime == ( TickType_t ) 0U )
 801012c:	69fb      	ldr	r3, [r7, #28]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d033      	beq.n	801019a <prvRecvWait+0xee>
                    }
                    #endif /* ipconfigSUPPORT_SIGNALS */
                    break;
                }

                if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	f003 0310 	and.w	r3, r3, #16
 8010138:	2b00      	cmp	r3, #0
 801013a:	d130      	bne.n	801019e <prvRecvWait+0xf2>
                {
                    break;
                }

                /* Don't get here a second time. */
                xTimed = pdTRUE;
 801013c:	2301      	movs	r3, #1
 801013e:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 8010140:	f107 0314 	add.w	r3, r7, #20
 8010144:	4618      	mov	r0, r3
 8010146:	f7f5 f96d 	bl	8005424 <vTaskSetTimeOutState>
            }

            /* Has the timeout been reached? */
            if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 801014a:	f107 021c 	add.w	r2, r7, #28
 801014e:	f107 0314 	add.w	r3, r7, #20
 8010152:	4611      	mov	r1, r2
 8010154:	4618      	mov	r0, r3
 8010156:	f7f5 f99d 	bl	8005494 <xTaskCheckForTimeOut>
 801015a:	4603      	mov	r3, r0
 801015c:	2b00      	cmp	r3, #0
 801015e:	d120      	bne.n	80101a2 <prvRecvWait+0xf6>
            {
                break;
            }

            /* Block until there is a down-stream event. */
            xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup,
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	6858      	ldr	r0, [r3, #4]
 8010164:	69fb      	ldr	r3, [r7, #28]
 8010166:	9300      	str	r3, [sp, #0]
 8010168:	2300      	movs	r3, #0
 801016a:	2201      	movs	r2, #1
 801016c:	2161      	movs	r1, #97	@ 0x61
 801016e:	f7f3 f96d 	bl	800344c <xEventGroupWaitBits>
 8010172:	6278      	str	r0, [r7, #36]	@ 0x24
            {
                ( void ) xEventBits;
            }
            #endif /* ipconfigSUPPORT_SIGNALS */

            if( pxSocket->u.xTCP.rxStream != NULL )
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801017a:	2b00      	cmp	r3, #0
 801017c:	d007      	beq.n	801018e <prvRecvWait+0xe2>
            {
                xByteCount = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010184:	4618      	mov	r0, r3
 8010186:	f001 f83c 	bl	8011202 <uxStreamBufferGetSize>
 801018a:	4603      	mov	r3, r0
 801018c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( xByteCount == 0 )
 801018e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010190:	2b00      	cmp	r3, #0
 8010192:	d0a5      	beq.n	80100e0 <prvRecvWait+0x34>
 8010194:	e006      	b.n	80101a4 <prvRecvWait+0xf8>
                break;
 8010196:	bf00      	nop
 8010198:	e004      	b.n	80101a4 <prvRecvWait+0xf8>
                    break;
 801019a:	bf00      	nop
 801019c:	e002      	b.n	80101a4 <prvRecvWait+0xf8>
                    break;
 801019e:	bf00      	nop
 80101a0:	e000      	b.n	80101a4 <prvRecvWait+0xf8>
                break;
 80101a2:	bf00      	nop
            }
        } /* while( xByteCount == 0 ) */

        *( pxEventBits ) = xEventBits;
 80101a4:	68bb      	ldr	r3, [r7, #8]
 80101a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80101a8:	601a      	str	r2, [r3, #0]

        return xByteCount;
 80101aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 80101ac:	4618      	mov	r0, r3
 80101ae:	3730      	adds	r7, #48	@ 0x30
 80101b0:	46bd      	mov	sp, r7
 80101b2:	bd80      	pop	{r7, pc}

080101b4 <FreeRTOS_recv>:
 */
    BaseType_t FreeRTOS_recv( Socket_t xSocket,
                              void * pvBuffer,
                              size_t uxBufferLength,
                              BaseType_t xFlags )
    {
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b088      	sub	sp, #32
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	60f8      	str	r0, [r7, #12]
 80101bc:	60b9      	str	r1, [r7, #8]
 80101be:	607a      	str	r2, [r7, #4]
 80101c0:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount = 0;
 80101c2:	2300      	movs	r3, #0
 80101c4:	61fb      	str	r3, [r7, #28]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	61bb      	str	r3, [r7, #24]
        EventBits_t xEventBits = ( EventBits_t ) 0U;
 80101ca:	2300      	movs	r3, #0
 80101cc:	617b      	str	r3, [r7, #20]

        /* Check if the socket is valid, has type TCP and if it is bound to a
         * port. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 80101ce:	2201      	movs	r2, #1
 80101d0:	2106      	movs	r1, #6
 80101d2:	69b8      	ldr	r0, [r7, #24]
 80101d4:	f7fe f91c 	bl	800e410 <prvValidSocket>
 80101d8:	4603      	mov	r3, r0
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d103      	bne.n	80101e6 <FreeRTOS_recv+0x32>
        {
            xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 80101de:	f06f 0315 	mvn.w	r3, #21
 80101e2:	61fb      	str	r3, [r7, #28]
 80101e4:	e01d      	b.n	8010222 <FreeRTOS_recv+0x6e>
        }
        else if( ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) != 0U ) &&
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	f003 0301 	and.w	r3, r3, #1
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d006      	beq.n	80101fe <FreeRTOS_recv+0x4a>
 80101f0:	68bb      	ldr	r3, [r7, #8]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d103      	bne.n	80101fe <FreeRTOS_recv+0x4a>
                 ( pvBuffer == NULL ) )
        {
            /* In zero-copy mode, pvBuffer is a pointer to a pointer ( not NULL ). */
            xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 80101f6:	f06f 0315 	mvn.w	r3, #21
 80101fa:	61fb      	str	r3, [r7, #28]
 80101fc:	e011      	b.n	8010222 <FreeRTOS_recv+0x6e>
        }
        else
        {
            /* The function parameters have been checked, now wait for incoming data. */
            xByteCount = prvRecvWait( pxSocket, &( xEventBits ), xFlags );
 80101fe:	f107 0314 	add.w	r3, r7, #20
 8010202:	683a      	ldr	r2, [r7, #0]
 8010204:	4619      	mov	r1, r3
 8010206:	69b8      	ldr	r0, [r7, #24]
 8010208:	f7ff ff50 	bl	80100ac <prvRecvWait>
 801020c:	61f8      	str	r0, [r7, #28]
                    xByteCount = -pdFREERTOS_ERRNO_EINTR;
                }
                else
            #endif /* ipconfigSUPPORT_SIGNALS */

            if( xByteCount > 0 )
 801020e:	69fb      	ldr	r3, [r7, #28]
 8010210:	2b00      	cmp	r3, #0
 8010212:	dd06      	ble.n	8010222 <FreeRTOS_recv+0x6e>
            {
                /* Get the actual data from the buffer, or in case of zero-copy,
                 * let *pvBuffer point to the RX-stream of the socket. */
                xByteCount = prvRecvData( pxSocket, pvBuffer, uxBufferLength, xFlags );
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	687a      	ldr	r2, [r7, #4]
 8010218:	68b9      	ldr	r1, [r7, #8]
 801021a:	69b8      	ldr	r0, [r7, #24]
 801021c:	f7ff fef0 	bl	8010000 <prvRecvData>
 8010220:	61f8      	str	r0, [r7, #28]
            }
        } /* prvValidSocket() */

        return xByteCount;
 8010222:	69fb      	ldr	r3, [r7, #28]
    }
 8010224:	4618      	mov	r0, r3
 8010226:	3720      	adds	r7, #32
 8010228:	46bd      	mov	sp, r7
 801022a:	bd80      	pop	{r7, pc}

0801022c <prvTCPSendCheck>:
 *
 * @return 0: representing OK, else a negative error code will be returned.
 */
    static int32_t prvTCPSendCheck( FreeRTOS_Socket_t * pxSocket,
                                    size_t uxDataLength )
    {
 801022c:	b580      	push	{r7, lr}
 801022e:	b084      	sub	sp, #16
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
 8010234:	6039      	str	r1, [r7, #0]
        int32_t xResult = 1;
 8010236:	2301      	movs	r3, #1
 8010238:	60fb      	str	r3, [r7, #12]

        /* Is this a socket of type TCP and is it already bound to a port number ? */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 801023a:	2201      	movs	r2, #1
 801023c:	2106      	movs	r1, #6
 801023e:	6878      	ldr	r0, [r7, #4]
 8010240:	f7fe f8e6 	bl	800e410 <prvValidSocket>
 8010244:	4603      	mov	r3, r0
 8010246:	2b00      	cmp	r3, #0
 8010248:	d103      	bne.n	8010252 <prvTCPSendCheck+0x26>
        {
            xResult = -pdFREERTOS_ERRNO_EINVAL;
 801024a:	f06f 0315 	mvn.w	r3, #21
 801024e:	60fb      	str	r3, [r7, #12]
 8010250:	e040      	b.n	80102d4 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8010258:	f003 0308 	and.w	r3, r3, #8
 801025c:	b2db      	uxtb	r3, r3
 801025e:	2b00      	cmp	r3, #0
 8010260:	d003      	beq.n	801026a <prvTCPSendCheck+0x3e>
        {
            xResult = -pdFREERTOS_ERRNO_ENOMEM;
 8010262:	f06f 030b 	mvn.w	r3, #11
 8010266:	60fb      	str	r3, [r7, #12]
 8010268:	e034      	b.n	80102d4 <prvTCPSendCheck+0xa8>
        }
        else if( ( pxSocket->u.xTCP.eTCPState == eCLOSED ) ||
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010270:	2b00      	cmp	r3, #0
 8010272:	d009      	beq.n	8010288 <prvTCPSendCheck+0x5c>
                 ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) ||
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
        else if( ( pxSocket->u.xTCP.eTCPState == eCLOSED ) ||
 801027a:	2b08      	cmp	r3, #8
 801027c:	d004      	beq.n	8010288 <prvTCPSendCheck+0x5c>
                 ( pxSocket->u.xTCP.eTCPState == eCLOSING ) )
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                 ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) ||
 8010284:	2b09      	cmp	r3, #9
 8010286:	d103      	bne.n	8010290 <prvTCPSendCheck+0x64>
        {
            xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 8010288:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 801028c:	60fb      	str	r3, [r7, #12]
 801028e:	e021      	b.n	80102d4 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8010296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801029a:	b2db      	uxtb	r3, r3
 801029c:	2b00      	cmp	r3, #0
 801029e:	d002      	beq.n	80102a6 <prvTCPSendCheck+0x7a>
        {
            /* This TCP connection is closing already, the FIN flag has been sent.
             * Maybe it is still delivering or receiving data.
             * Return OK in order not to get closed/deleted too quickly */
            xResult = 0;
 80102a0:	2300      	movs	r3, #0
 80102a2:	60fb      	str	r3, [r7, #12]
 80102a4:	e016      	b.n	80102d4 <prvTCPSendCheck+0xa8>
        }
        else if( uxDataLength == 0U )
 80102a6:	683b      	ldr	r3, [r7, #0]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d102      	bne.n	80102b2 <prvTCPSendCheck+0x86>
        {
            /* send() is being called to send zero bytes */
            xResult = 0;
 80102ac:	2300      	movs	r3, #0
 80102ae:	60fb      	str	r3, [r7, #12]
 80102b0:	e010      	b.n	80102d4 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.txStream == NULL )
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d10b      	bne.n	80102d4 <prvTCPSendCheck+0xa8>
        {
            /* Create the outgoing stream only when it is needed */
            ( void ) prvTCPCreateStream( pxSocket, pdFALSE );
 80102bc:	2100      	movs	r1, #0
 80102be:	6878      	ldr	r0, [r7, #4]
 80102c0:	f000 fac6 	bl	8010850 <prvTCPCreateStream>

            if( pxSocket->u.xTCP.txStream == NULL )
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d102      	bne.n	80102d4 <prvTCPSendCheck+0xa8>
            {
                xResult = -pdFREERTOS_ERRNO_ENOMEM;
 80102ce:	f06f 030b 	mvn.w	r3, #11
 80102d2:	60fb      	str	r3, [r7, #12]
        else
        {
            /* Nothing. */
        }

        return xResult;
 80102d4:	68fb      	ldr	r3, [r7, #12]
    }
 80102d6:	4618      	mov	r0, r3
 80102d8:	3710      	adds	r7, #16
 80102da:	46bd      	mov	sp, r7
 80102dc:	bd80      	pop	{r7, pc}

080102de <FreeRTOS_get_tx_head>:
 * @return Head of the circular transmit buffer if all checks pass. Or else, NULL
 *         is returned.
 */
    uint8_t * FreeRTOS_get_tx_head( Socket_t xSocket,
                                    BaseType_t * pxLength )
    {
 80102de:	b580      	push	{r7, lr}
 80102e0:	b088      	sub	sp, #32
 80102e2:	af00      	add	r7, sp, #0
 80102e4:	6078      	str	r0, [r7, #4]
 80102e6:	6039      	str	r1, [r7, #0]
        uint8_t * pucReturn = NULL;
 80102e8:	2300      	movs	r3, #0
 80102ea:	61fb      	str	r3, [r7, #28]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	617b      	str	r3, [r7, #20]
        StreamBuffer_t * pxBuffer = NULL;
 80102f0:	2300      	movs	r3, #0
 80102f2:	61bb      	str	r3, [r7, #24]

        *pxLength = 0;
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	2200      	movs	r2, #0
 80102f8:	601a      	str	r2, [r3, #0]

        /* Confirm that this is a TCP socket before dereferencing structure
         * member pointers. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdFALSE ) == pdTRUE )
 80102fa:	2200      	movs	r2, #0
 80102fc:	2106      	movs	r1, #6
 80102fe:	6978      	ldr	r0, [r7, #20]
 8010300:	f7fe f886 	bl	800e410 <prvValidSocket>
 8010304:	4603      	mov	r3, r0
 8010306:	2b01      	cmp	r3, #1
 8010308:	d135      	bne.n	8010376 <FreeRTOS_get_tx_head+0x98>
        {
            pxBuffer = pxSocket->u.xTCP.txStream;
 801030a:	697b      	ldr	r3, [r7, #20]
 801030c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010310:	61bb      	str	r3, [r7, #24]

            /* If the TX buffer hasn't been created yet,
             * and if no malloc error has occurred on this socket yet. */
            if( ( pxBuffer == NULL ) &&
 8010312:	69bb      	ldr	r3, [r7, #24]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d10f      	bne.n	8010338 <FreeRTOS_get_tx_head+0x5a>
                ( pxSocket->u.xTCP.bits.bMallocError == pdFALSE_UNSIGNED ) )
 8010318:	697b      	ldr	r3, [r7, #20]
 801031a:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 801031e:	f003 0308 	and.w	r3, r3, #8
 8010322:	b2db      	uxtb	r3, r3
            if( ( pxBuffer == NULL ) &&
 8010324:	2b00      	cmp	r3, #0
 8010326:	d107      	bne.n	8010338 <FreeRTOS_get_tx_head+0x5a>
            {
                /* Create the outgoing stream only when it is needed */
                ( void ) prvTCPCreateStream( pxSocket, pdFALSE );
 8010328:	2100      	movs	r1, #0
 801032a:	6978      	ldr	r0, [r7, #20]
 801032c:	f000 fa90 	bl	8010850 <prvTCPCreateStream>
                pxBuffer = pxSocket->u.xTCP.txStream;
 8010330:	697b      	ldr	r3, [r7, #20]
 8010332:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010336:	61bb      	str	r3, [r7, #24]
            }

            if( pxBuffer != NULL )
 8010338:	69bb      	ldr	r3, [r7, #24]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d01b      	beq.n	8010376 <FreeRTOS_get_tx_head+0x98>
            {
                size_t uxSpace = uxStreamBufferGetSpace( pxBuffer );
 801033e:	69b8      	ldr	r0, [r7, #24]
 8010340:	f000 ff3d 	bl	80111be <uxStreamBufferGetSpace>
 8010344:	6138      	str	r0, [r7, #16]
                size_t uxRemain = pxBuffer->LENGTH - pxBuffer->uxHead;
 8010346:	69bb      	ldr	r3, [r7, #24]
 8010348:	691a      	ldr	r2, [r3, #16]
 801034a:	69bb      	ldr	r3, [r7, #24]
 801034c:	689b      	ldr	r3, [r3, #8]
 801034e:	1ad3      	subs	r3, r2, r3
 8010350:	60fb      	str	r3, [r7, #12]

                if( uxRemain <= uxSpace )
 8010352:	68fa      	ldr	r2, [r7, #12]
 8010354:	693b      	ldr	r3, [r7, #16]
 8010356:	429a      	cmp	r2, r3
 8010358:	d803      	bhi.n	8010362 <FreeRTOS_get_tx_head+0x84>
                {
                    *pxLength = ( BaseType_t ) uxRemain;
 801035a:	68fa      	ldr	r2, [r7, #12]
 801035c:	683b      	ldr	r3, [r7, #0]
 801035e:	601a      	str	r2, [r3, #0]
 8010360:	e002      	b.n	8010368 <FreeRTOS_get_tx_head+0x8a>
                }
                else
                {
                    *pxLength = ( BaseType_t ) uxSpace;
 8010362:	693a      	ldr	r2, [r7, #16]
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	601a      	str	r2, [r3, #0]
                }

                pucReturn = &( pxBuffer->ucArray[ pxBuffer->uxHead ] );
 8010368:	69bb      	ldr	r3, [r7, #24]
 801036a:	689b      	ldr	r3, [r3, #8]
 801036c:	3310      	adds	r3, #16
 801036e:	69ba      	ldr	r2, [r7, #24]
 8010370:	4413      	add	r3, r2
 8010372:	3304      	adds	r3, #4
 8010374:	61fb      	str	r3, [r7, #28]
            }
        }

        return pucReturn;
 8010376:	69fb      	ldr	r3, [r7, #28]
    }
 8010378:	4618      	mov	r0, r3
 801037a:	3720      	adds	r7, #32
 801037c:	46bd      	mov	sp, r7
 801037e:	bd80      	pop	{r7, pc}

08010380 <prvTCPSendLoop>:
 */
    static BaseType_t prvTCPSendLoop( FreeRTOS_Socket_t * pxSocket,
                                      const void * pvBuffer,
                                      size_t uxDataLength,
                                      BaseType_t xFlags )
    {
 8010380:	b580      	push	{r7, lr}
 8010382:	b090      	sub	sp, #64	@ 0x40
 8010384:	af02      	add	r7, sp, #8
 8010386:	60f8      	str	r0, [r7, #12]
 8010388:	60b9      	str	r1, [r7, #8]
 801038a:	607a      	str	r2, [r7, #4]
 801038c:	603b      	str	r3, [r7, #0]
        /* The number of bytes sent. */
        BaseType_t xBytesSent = 0;
 801038e:	2300      	movs	r3, #0
 8010390:	637b      	str	r3, [r7, #52]	@ 0x34
        /* xBytesLeft is the number of bytes that still must be sent. */
        BaseType_t xBytesLeft = ( BaseType_t ) uxDataLength;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	633b      	str	r3, [r7, #48]	@ 0x30
        /* xByteCount is number of bytes that can be sent now. */
        BaseType_t xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801039c:	4618      	mov	r0, r3
 801039e:	f000 ff0e 	bl	80111be <uxStreamBufferGetSpace>
 80103a2:	4603      	mov	r3, r0
 80103a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 80103a6:	2300      	movs	r3, #0
 80103a8:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        const uint8_t * pucSource = ( const uint8_t * ) pvBuffer;
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	627b      	str	r3, [r7, #36]	@ 0x24

        /* While there are still bytes to be sent. */
        while( xBytesLeft > 0 )
 80103ae:	e08f      	b.n	80104d0 <prvTCPSendLoop+0x150>
        {
            /* If txStream has space. */
            if( xByteCount > 0 )
 80103b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	dd4b      	ble.n	801044e <prvTCPSendLoop+0xce>
            {
                BaseType_t xCloseAfterSend = pdFALSE;
 80103b6:	2300      	movs	r3, #0
 80103b8:	623b      	str	r3, [r7, #32]

                /* Don't send more than necessary. */
                if( xByteCount > xBytesLeft )
 80103ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80103bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103be:	429a      	cmp	r2, r3
 80103c0:	dd01      	ble.n	80103c6 <prvTCPSendLoop+0x46>
                {
                    xByteCount = xBytesLeft;
 80103c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                }

                if( ( pxSocket->u.xTCP.bits.bCloseAfterSend != pdFALSE_UNSIGNED ) &&
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80103cc:	f003 0310 	and.w	r3, r3, #16
 80103d0:	b2db      	uxtb	r3, r3
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d00e      	beq.n	80103f4 <prvTCPSendLoop+0x74>
 80103d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80103d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103da:	429a      	cmp	r2, r3
 80103dc:	d10a      	bne.n	80103f4 <prvTCPSendLoop+0x74>
                    ( xByteCount == xBytesLeft ) )
                {
                    xCloseAfterSend = pdTRUE;
 80103de:	2301      	movs	r3, #1
 80103e0:	623b      	str	r3, [r7, #32]

                    /* Now suspend the scheduler: sending the last data and
                     * setting bCloseRequested must be done together */
                    vTaskSuspendAll();
 80103e2:	f7f4 fb63 	bl	8004aac <vTaskSuspendAll>
                    pxSocket->u.xTCP.bits.bCloseRequested = pdTRUE_UNSIGNED;
 80103e6:	68fa      	ldr	r2, [r7, #12]
 80103e8:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80103ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80103f0:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                     * expected.  The use of 'bCloseAfterSend' is not mandatory, it
                     * is just a faster way of transferring files (e.g. when using
                     * FTP). */
                }

                xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0U, pucSource, ( size_t ) xByteCount );
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 80103fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80103fe:	2100      	movs	r1, #0
 8010400:	f000 ff9d 	bl	801133e <uxStreamBufferAdd>
 8010404:	4603      	mov	r3, r0
 8010406:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( xCloseAfterSend == pdTRUE )
 8010408:	6a3b      	ldr	r3, [r7, #32]
 801040a:	2b01      	cmp	r3, #1
 801040c:	d101      	bne.n	8010412 <prvTCPSendLoop+0x92>
                {
                    /* Now when the IP-task transmits the data, it will also
                     * see that bCloseRequested is true and include the FIN
                     * flag to start closure of the connection. */
                    ( void ) xTaskResumeAll();
 801040e:	f7f4 fb5b 	bl	8004ac8 <xTaskResumeAll>
                }

                /* Send a message to the IP-task so it can work on this
                * socket.  Data is sent, let the IP-task work on it. */
                pxSocket->u.xTCP.usTimeout = 1U;
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	2201      	movs	r2, #1
 8010416:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                if( xIsCallingFromIPTask() == pdFALSE )
 801041a:	f7fa fb7b 	bl	800ab14 <xIsCallingFromIPTask>
 801041e:	4603      	mov	r3, r0
 8010420:	2b00      	cmp	r3, #0
 8010422:	d102      	bne.n	801042a <prvTCPSendLoop+0xaa>
                {
                    /* Only send a TCP timer event when not called from the
                     * IP-task. */
                    ( void ) xSendEventToIPTask( eTCPTimerEvent );
 8010424:	2006      	movs	r0, #6
 8010426:	f7f9 fc1d 	bl	8009c64 <xSendEventToIPTask>
                }

                xBytesLeft -= xByteCount;
 801042a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801042c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801042e:	1ad3      	subs	r3, r2, r3
 8010430:	633b      	str	r3, [r7, #48]	@ 0x30
                xBytesSent += xByteCount;
 8010432:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010436:	4413      	add	r3, r2
 8010438:	637b      	str	r3, [r7, #52]	@ 0x34

                if( ( xBytesLeft == 0 ) || ( pvBuffer == NULL ) )
 801043a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801043c:	2b00      	cmp	r3, #0
 801043e:	d053      	beq.n	80104e8 <prvTCPSendLoop+0x168>
 8010440:	68bb      	ldr	r3, [r7, #8]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d050      	beq.n	80104e8 <prvTCPSendLoop+0x168>
                    break;
                }

                /* As there are still bytes left to be sent, increase the
                 * data pointer. */
                pucSource = &( pucSource[ xByteCount ] );
 8010446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801044a:	4413      	add	r3, r2
 801044c:	627b      	str	r3, [r7, #36]	@ 0x24
            } /* if( xByteCount > 0 ) */

            /* Not all bytes have been sent. In case the socket is marked as
             * blocking sleep for a while. */
            if( xTimed == pdFALSE )
 801044e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010450:	2b00      	cmp	r3, #0
 8010452:	d119      	bne.n	8010488 <prvTCPSendLoop+0x108>
            {
                /* Only in the first round, check for non-blocking. */
                xRemainingTime = pxSocket->xSendBlockTime;
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010458:	61fb      	str	r3, [r7, #28]

                if( xIsCallingFromIPTask() != pdFALSE )
 801045a:	f7fa fb5b 	bl	800ab14 <xIsCallingFromIPTask>
 801045e:	4603      	mov	r3, r0
 8010460:	2b00      	cmp	r3, #0
 8010462:	d001      	beq.n	8010468 <prvTCPSendLoop+0xe8>
                {
                    /* If this send function is called from within a
                     * call-back handler it may not block, otherwise
                     * chances would be big to get a deadlock: the IP-task
                     * waiting for itself. */
                    xRemainingTime = ( TickType_t ) 0U;
 8010464:	2300      	movs	r3, #0
 8010466:	61fb      	str	r3, [r7, #28]
                }

                if( xRemainingTime == ( TickType_t ) 0U )
 8010468:	69fb      	ldr	r3, [r7, #28]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d035      	beq.n	80104da <prvTCPSendLoop+0x15a>
                {
                    break;
                }

                if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 801046e:	683b      	ldr	r3, [r7, #0]
 8010470:	f003 0310 	and.w	r3, r3, #16
 8010474:	2b00      	cmp	r3, #0
 8010476:	d132      	bne.n	80104de <prvTCPSendLoop+0x15e>
                {
                    break;
                }

                /* Don't get here a second time. */
                xTimed = pdTRUE;
 8010478:	2301      	movs	r3, #1
 801047a:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 801047c:	f107 0314 	add.w	r3, r7, #20
 8010480:	4618      	mov	r0, r3
 8010482:	f7f4 ffcf 	bl	8005424 <vTaskSetTimeOutState>
 8010486:	e00a      	b.n	801049e <prvTCPSendLoop+0x11e>
            }
            else
            {
                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 8010488:	f107 021c 	add.w	r2, r7, #28
 801048c:	f107 0314 	add.w	r3, r7, #20
 8010490:	4611      	mov	r1, r2
 8010492:	4618      	mov	r0, r3
 8010494:	f7f4 fffe 	bl	8005494 <xTaskCheckForTimeOut>
 8010498:	4603      	mov	r3, r0
 801049a:	2b00      	cmp	r3, #0
 801049c:	d121      	bne.n	80104e2 <prvTCPSendLoop+0x162>
                    break;
                }
            }

            /* Go sleeping until a SEND or a CLOSE event is received. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_SEND | ( EventBits_t ) eSOCKET_CLOSED,
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	6858      	ldr	r0, [r3, #4]
 80104a2:	69fb      	ldr	r3, [r7, #28]
 80104a4:	9300      	str	r3, [sp, #0]
 80104a6:	2300      	movs	r3, #0
 80104a8:	2201      	movs	r2, #1
 80104aa:	2122      	movs	r1, #34	@ 0x22
 80104ac:	f7f2 ffce 	bl	800344c <xEventGroupWaitBits>
                                          pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );

            xByteCount = ( BaseType_t ) prvTCPSendCheck( pxSocket, uxDataLength );
 80104b0:	6879      	ldr	r1, [r7, #4]
 80104b2:	68f8      	ldr	r0, [r7, #12]
 80104b4:	f7ff feba 	bl	801022c <prvTCPSendCheck>
 80104b8:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( xByteCount < 0 )
 80104ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104bc:	2b00      	cmp	r3, #0
 80104be:	db12      	blt.n	80104e6 <prvTCPSendLoop+0x166>
                /* In a meanwhile, the connection has dropped, stop iterating. */
                break;
            }

            /* See if in a meanwhile there is space in the TX-stream. */
            xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80104c6:	4618      	mov	r0, r3
 80104c8:	f000 fe79 	bl	80111be <uxStreamBufferGetSpace>
 80104cc:	4603      	mov	r3, r0
 80104ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( xBytesLeft > 0 )
 80104d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	f73f af6c 	bgt.w	80103b0 <prvTCPSendLoop+0x30>
 80104d8:	e006      	b.n	80104e8 <prvTCPSendLoop+0x168>
                    break;
 80104da:	bf00      	nop
 80104dc:	e004      	b.n	80104e8 <prvTCPSendLoop+0x168>
                    break;
 80104de:	bf00      	nop
 80104e0:	e002      	b.n	80104e8 <prvTCPSendLoop+0x168>
                    break;
 80104e2:	bf00      	nop
 80104e4:	e000      	b.n	80104e8 <prvTCPSendLoop+0x168>
                break;
 80104e6:	bf00      	nop
        } /* while( xBytesLeft > 0 ) */

        return xBytesSent;
 80104e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80104ea:	4618      	mov	r0, r3
 80104ec:	3738      	adds	r7, #56	@ 0x38
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}
	...

080104f4 <FreeRTOS_send>:
 */
    BaseType_t FreeRTOS_send( Socket_t xSocket,
                              const void * pvBuffer,
                              size_t uxDataLength,
                              BaseType_t xFlags )
    {
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b086      	sub	sp, #24
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	60f8      	str	r0, [r7, #12]
 80104fc:	60b9      	str	r1, [r7, #8]
 80104fe:	607a      	str	r2, [r7, #4]
 8010500:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount;
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	613b      	str	r3, [r7, #16]

        xByteCount = ( BaseType_t ) prvTCPSendCheck( pxSocket, uxDataLength );
 8010506:	6879      	ldr	r1, [r7, #4]
 8010508:	6938      	ldr	r0, [r7, #16]
 801050a:	f7ff fe8f 	bl	801022c <prvTCPSendCheck>
 801050e:	6178      	str	r0, [r7, #20]

        if( xByteCount > 0 )
 8010510:	697b      	ldr	r3, [r7, #20]
 8010512:	2b00      	cmp	r3, #0
 8010514:	dd24      	ble.n	8010560 <FreeRTOS_send+0x6c>
        {
            /* prvTCPSendLoop() will try to send as many bytes as possible,
             * returning number of bytes that have been queued for transmission.. */
            xByteCount = prvTCPSendLoop( pxSocket, pvBuffer, uxDataLength, xFlags );
 8010516:	683b      	ldr	r3, [r7, #0]
 8010518:	687a      	ldr	r2, [r7, #4]
 801051a:	68b9      	ldr	r1, [r7, #8]
 801051c:	6938      	ldr	r0, [r7, #16]
 801051e:	f7ff ff2f 	bl	8010380 <prvTCPSendLoop>
 8010522:	6178      	str	r0, [r7, #20]

            if( xByteCount == 0 )
 8010524:	697b      	ldr	r3, [r7, #20]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d11a      	bne.n	8010560 <FreeRTOS_send+0x6c>
            {
                if( pxSocket->u.xTCP.eTCPState > eESTABLISHED )
 801052a:	693b      	ldr	r3, [r7, #16]
 801052c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010530:	2b05      	cmp	r3, #5
 8010532:	d903      	bls.n	801053c <FreeRTOS_send+0x48>
                {
                    xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOTCONN;
 8010534:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8010538:	617b      	str	r3, [r7, #20]
 801053a:	e011      	b.n	8010560 <FreeRTOS_send+0x6c>
                }
                else
                {
                    if( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 801053c:	693b      	ldr	r3, [r7, #16]
 801053e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010540:	2b17      	cmp	r3, #23
 8010542:	d00a      	beq.n	801055a <FreeRTOS_send+0x66>
                    {
                        FreeRTOS_debug_printf( ( "FreeRTOS_send: %u -> %xip:%d: no space\n",
 8010544:	693b      	ldr	r3, [r7, #16]
 8010546:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010548:	4619      	mov	r1, r3
 801054a:	693b      	ldr	r3, [r7, #16]
 801054c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801054e:	693b      	ldr	r3, [r7, #16]
 8010550:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010554:	4805      	ldr	r0, [pc, #20]	@ (801056c <FreeRTOS_send+0x78>)
 8010556:	f012 f925 	bl	80227a4 <lUDPLoggingPrintf>
                                                 pxSocket->usLocalPort,
                                                 ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                 pxSocket->u.xTCP.usRemotePort ) );
                    }

                    xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOSPC;
 801055a:	f06f 031b 	mvn.w	r3, #27
 801055e:	617b      	str	r3, [r7, #20]
                }
            }
        }

        return xByteCount;
 8010560:	697b      	ldr	r3, [r7, #20]
    }
 8010562:	4618      	mov	r0, r3
 8010564:	3718      	adds	r7, #24
 8010566:	46bd      	mov	sp, r7
 8010568:	bd80      	pop	{r7, pc}
 801056a:	bf00      	nop
 801056c:	08026674 	.word	0x08026674

08010570 <FreeRTOS_listen>:
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    BaseType_t FreeRTOS_listen( Socket_t xSocket,
                                BaseType_t xBacklog )
    {
 8010570:	b580      	push	{r7, lr}
 8010572:	b084      	sub	sp, #16
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
 8010578:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket;
        BaseType_t xResult = 0;
 801057a:	2300      	movs	r3, #0
 801057c:	60fb      	str	r3, [r7, #12]

        pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	60bb      	str	r3, [r7, #8]

        /* listen() is allowed for a valid TCP socket in Closed state and already
         * bound. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 8010582:	2201      	movs	r2, #1
 8010584:	2106      	movs	r1, #6
 8010586:	68b8      	ldr	r0, [r7, #8]
 8010588:	f7fd ff42 	bl	800e410 <prvValidSocket>
 801058c:	4603      	mov	r3, r0
 801058e:	2b00      	cmp	r3, #0
 8010590:	d103      	bne.n	801059a <FreeRTOS_listen+0x2a>
        {
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 8010592:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 8010596:	60fb      	str	r3, [r7, #12]
 8010598:	e056      	b.n	8010648 <FreeRTOS_listen+0xd8>
        }
        else if( ( pxSocket->u.xTCP.eTCPState != eCLOSED ) && ( pxSocket->u.xTCP.eTCPState != eCLOSE_WAIT ) )
 801059a:	68bb      	ldr	r3, [r7, #8]
 801059c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d008      	beq.n	80105b6 <FreeRTOS_listen+0x46>
 80105a4:	68bb      	ldr	r3, [r7, #8]
 80105a6:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80105aa:	2b08      	cmp	r3, #8
 80105ac:	d003      	beq.n	80105b6 <FreeRTOS_listen+0x46>
        {
            /* Socket is in a wrong state. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 80105ae:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 80105b2:	60fb      	str	r3, [r7, #12]
 80105b4:	e048      	b.n	8010648 <FreeRTOS_listen+0xd8>
        }
        else
        {
            /* Backlog is interpreted here as "the maximum number of child
             * sockets. */
            pxSocket->u.xTCP.usBacklog = ( uint16_t ) FreeRTOS_min_int32( ( int32_t ) 0xffff, ( int32_t ) xBacklog );
 80105b6:	6839      	ldr	r1, [r7, #0]
 80105b8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80105bc:	f7fa fc5a 	bl	800ae74 <FreeRTOS_min_int32>
 80105c0:	4603      	mov	r3, r0
 80105c2:	b29a      	uxth	r2, r3
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76

            /* This cleaning is necessary only if a listening socket is being
             * reused as it might have had a previous connection. */
            if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 80105ca:	68bb      	ldr	r3, [r7, #8]
 80105cc:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80105d0:	f003 0308 	and.w	r3, r3, #8
 80105d4:	b2db      	uxtb	r3, r3
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d032      	beq.n	8010640 <FreeRTOS_listen+0xd0>
            {
                if( pxSocket->u.xTCP.rxStream != NULL )
 80105da:	68bb      	ldr	r3, [r7, #8]
 80105dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d005      	beq.n	80105f0 <FreeRTOS_listen+0x80>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.rxStream );
 80105e4:	68bb      	ldr	r3, [r7, #8]
 80105e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80105ea:	4618      	mov	r0, r3
 80105ec:	f000 fe2b 	bl	8011246 <vStreamBufferClear>
                }

                if( pxSocket->u.xTCP.txStream != NULL )
 80105f0:	68bb      	ldr	r3, [r7, #8]
 80105f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d005      	beq.n	8010606 <FreeRTOS_listen+0x96>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.txStream );
 80105fa:	68bb      	ldr	r3, [r7, #8]
 80105fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010600:	4618      	mov	r0, r3
 8010602:	f000 fe20 	bl	8011246 <vStreamBufferClear>
                }

                ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8010606:	68bb      	ldr	r3, [r7, #8]
 8010608:	33aa      	adds	r3, #170	@ 0xaa
 801060a:	225a      	movs	r2, #90	@ 0x5a
 801060c:	2100      	movs	r1, #0
 801060e:	4618      	mov	r0, r3
 8010610:	f012 fbf1 	bl	8022df6 <memset>
                ( void ) memset( &pxSocket->u.xTCP.xTCPWindow, 0, sizeof( pxSocket->u.xTCP.xTCPWindow ) );
 8010614:	68bb      	ldr	r3, [r7, #8]
 8010616:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 801061a:	22c0      	movs	r2, #192	@ 0xc0
 801061c:	2100      	movs	r1, #0
 801061e:	4618      	mov	r0, r3
 8010620:	f012 fbe9 	bl	8022df6 <memset>
                ( void ) memset( &pxSocket->u.xTCP.bits, 0, sizeof( pxSocket->u.xTCP.bits ) );
 8010624:	68bb      	ldr	r3, [r7, #8]
 8010626:	3368      	adds	r3, #104	@ 0x68
 8010628:	2204      	movs	r2, #4
 801062a:	2100      	movs	r1, #0
 801062c:	4618      	mov	r0, r3
 801062e:	f012 fbe2 	bl	8022df6 <memset>

                /* Now set the bReuseSocket flag again, because the bits have
                 * just been cleared. */
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE;
 8010632:	68ba      	ldr	r2, [r7, #8]
 8010634:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8010638:	f043 0308 	orr.w	r3, r3, #8
 801063c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            vTCPStateChange( pxSocket, eTCP_LISTEN );
 8010640:	2101      	movs	r1, #1
 8010642:	68b8      	ldr	r0, [r7, #8]
 8010644:	f001 f8a2 	bl	801178c <vTCPStateChange>
        }

        return xResult;
 8010648:	68fb      	ldr	r3, [r7, #12]
    }
 801064a:	4618      	mov	r0, r3
 801064c:	3710      	adds	r7, #16
 801064e:	46bd      	mov	sp, r7
 8010650:	bd80      	pop	{r7, pc}

08010652 <FreeRTOS_shutdown>:
 *
 * @return 0 on successful shutdown or else a negative error code.
 */
    BaseType_t FreeRTOS_shutdown( Socket_t xSocket,
                                  BaseType_t xHow )
    {
 8010652:	b580      	push	{r7, lr}
 8010654:	b084      	sub	sp, #16
 8010656:	af00      	add	r7, sp, #0
 8010658:	6078      	str	r0, [r7, #4]
 801065a:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	60bb      	str	r3, [r7, #8]
        BaseType_t xResult;

        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 8010660:	2201      	movs	r2, #1
 8010662:	2106      	movs	r1, #6
 8010664:	68b8      	ldr	r0, [r7, #8]
 8010666:	f7fd fed3 	bl	800e410 <prvValidSocket>
 801066a:	4603      	mov	r3, r0
 801066c:	2b00      	cmp	r3, #0
 801066e:	d103      	bne.n	8010678 <FreeRTOS_shutdown+0x26>
        {
            /*_RB_ Is this comment correct?  The socket is not of a type that
             * supports the listen() operation. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 8010670:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 8010674:	60fb      	str	r3, [r7, #12]
 8010676:	e018      	b.n	80106aa <FreeRTOS_shutdown+0x58>
        }
        else if( pxSocket->u.xTCP.eTCPState != eESTABLISHED )
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801067e:	2b05      	cmp	r3, #5
 8010680:	d003      	beq.n	801068a <FreeRTOS_shutdown+0x38>
        {
            /* The socket is not connected. */
            xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 8010682:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8010686:	60fb      	str	r3, [r7, #12]
 8010688:	e00f      	b.n	80106aa <FreeRTOS_shutdown+0x58>
        }
        else
        {
            pxSocket->u.xTCP.bits.bUserShutdown = pdTRUE_UNSIGNED;
 801068a:	68ba      	ldr	r2, [r7, #8]
 801068c:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8010690:	f043 0320 	orr.w	r3, r3, #32
 8010694:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

            /* Let the IP-task perform the shutdown of the connection. */
            pxSocket->u.xTCP.usTimeout = 1U;
 8010698:	68bb      	ldr	r3, [r7, #8]
 801069a:	2201      	movs	r2, #1
 801069c:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 80106a0:	2006      	movs	r0, #6
 80106a2:	f7f9 fadf 	bl	8009c64 <xSendEventToIPTask>
            xResult = 0;
 80106a6:	2300      	movs	r3, #0
 80106a8:	60fb      	str	r3, [r7, #12]
        }

        ( void ) xHow;

        return xResult;
 80106aa:	68fb      	ldr	r3, [r7, #12]
    }
 80106ac:	4618      	mov	r0, r3
 80106ae:	3710      	adds	r7, #16
 80106b0:	46bd      	mov	sp, r7
 80106b2:	bd80      	pop	{r7, pc}

080106b4 <xTCPTimerCheck>:
 * @param[in] xWillSleep Whether the calling task is going to sleep.
 *
 * @return Minimum amount of time before the timer shall expire.
 */
    TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
    {
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b08a      	sub	sp, #40	@ 0x28
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
        FreeRTOS_Socket_t * pxSocket;
        TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
 80106bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80106c0:	627b      	str	r3, [r7, #36]	@ 0x24
        TickType_t xNow = xTaskGetTickCount();
 80106c2:	f7f4 fb05 	bl	8004cd0 <xTaskGetTickCount>
 80106c6:	61b8      	str	r0, [r7, #24]
        static TickType_t xLastTime = 0U;
        TickType_t xDelta = xNow - xLastTime;
 80106c8:	4b32      	ldr	r3, [pc, #200]	@ (8010794 <xTCPTimerCheck+0xe0>)
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	69ba      	ldr	r2, [r7, #24]
 80106ce:	1ad3      	subs	r3, r2, r3
 80106d0:	623b      	str	r3, [r7, #32]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 80106d2:	4b31      	ldr	r3, [pc, #196]	@ (8010798 <xTCPTimerCheck+0xe4>)
 80106d4:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 80106d6:	4b31      	ldr	r3, [pc, #196]	@ (801079c <xTCPTimerCheck+0xe8>)
 80106d8:	68db      	ldr	r3, [r3, #12]
 80106da:	61fb      	str	r3, [r7, #28]

        xLastTime = xNow;
 80106dc:	4a2d      	ldr	r2, [pc, #180]	@ (8010794 <xTCPTimerCheck+0xe0>)
 80106de:	69bb      	ldr	r3, [r7, #24]
 80106e0:	6013      	str	r3, [r2, #0]

        if( xDelta == 0U )
 80106e2:	6a3b      	ldr	r3, [r7, #32]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d14b      	bne.n	8010780 <xTCPTimerCheck+0xcc>
        {
            xDelta = 1U;
 80106e8:	2301      	movs	r3, #1
 80106ea:	623b      	str	r3, [r7, #32]
        }

        while( pxIterator != pxEnd )
 80106ec:	e048      	b.n	8010780 <xTCPTimerCheck+0xcc>
        {
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80106ee:	69fb      	ldr	r3, [r7, #28]
 80106f0:	68db      	ldr	r3, [r3, #12]
 80106f2:	613b      	str	r3, [r7, #16]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 80106f4:	69fb      	ldr	r3, [r7, #28]
 80106f6:	685b      	ldr	r3, [r3, #4]
 80106f8:	61fb      	str	r3, [r7, #28]

            /* Sockets with 'timeout == 0' do not need any regular attention. */
            if( pxSocket->u.xTCP.usTimeout == 0U )
 80106fa:	693b      	ldr	r3, [r7, #16]
 80106fc:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8010700:	2b00      	cmp	r3, #0
 8010702:	d03a      	beq.n	801077a <xTCPTimerCheck+0xc6>
            {
                continue;
            }

            if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 8010704:	693b      	ldr	r3, [r7, #16]
 8010706:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 801070a:	461a      	mov	r2, r3
 801070c:	6a3b      	ldr	r3, [r7, #32]
 801070e:	4293      	cmp	r3, r2
 8010710:	d20a      	bcs.n	8010728 <xTCPTimerCheck+0x74>
            {
                pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 8010712:	693b      	ldr	r3, [r7, #16]
 8010714:	f8b3 2070 	ldrh.w	r2, [r3, #112]	@ 0x70
 8010718:	6a3b      	ldr	r3, [r7, #32]
 801071a:	b29b      	uxth	r3, r3
 801071c:	1ad3      	subs	r3, r2, r3
 801071e:	b29a      	uxth	r2, r3
 8010720:	693b      	ldr	r3, [r7, #16]
 8010722:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 8010726:	e00a      	b.n	801073e <xTCPTimerCheck+0x8a>
            }
            else
            {
                BaseType_t xRc;

                pxSocket->u.xTCP.usTimeout = 0U;
 8010728:	693b      	ldr	r3, [r7, #16]
 801072a:	2200      	movs	r2, #0
 801072c:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                xRc = xTCPSocketCheck( pxSocket );
 8010730:	6938      	ldr	r0, [r7, #16]
 8010732:	f000 ff33 	bl	801159c <xTCPSocketCheck>
 8010736:	60f8      	str	r0, [r7, #12]

                /* Within this function, the socket might want to send a delayed
                 * ack or send out data or whatever it needs to do. */
                if( xRc < 0 )
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	2b00      	cmp	r3, #0
 801073c:	db1f      	blt.n	801077e <xTCPTimerCheck+0xca>
            }

            /* In xEventBits the driver may indicate that the socket has
             * important events for the user.  These are only done just before the
             * IP-task goes to sleep. */
            if( pxSocket->xEventBits != 0U )
 801073e:	693b      	ldr	r3, [r7, #16]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d008      	beq.n	8010758 <xTCPTimerCheck+0xa4>
            {
                if( xWillSleep != pdFALSE )
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d003      	beq.n	8010754 <xTCPTimerCheck+0xa0>
                {
                    /* The IP-task is about to go to sleep, so messages can be
                     * sent to the socket owners. */
                    vSocketWakeUpUser( pxSocket );
 801074c:	6938      	ldr	r0, [r7, #16]
 801074e:	f7ff f970 	bl	800fa32 <vSocketWakeUpUser>
 8010752:	e001      	b.n	8010758 <xTCPTimerCheck+0xa4>
                }
                else
                {
                    /* Or else make sure this will be called again to wake-up
                     * the sockets' owner. */
                    xShortest = ( TickType_t ) 0;
 8010754:	2300      	movs	r3, #0
 8010756:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            if( ( pxSocket->u.xTCP.usTimeout != 0U ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 8010758:	693b      	ldr	r3, [r7, #16]
 801075a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 801075e:	2b00      	cmp	r3, #0
 8010760:	d00e      	beq.n	8010780 <xTCPTimerCheck+0xcc>
 8010762:	693b      	ldr	r3, [r7, #16]
 8010764:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8010768:	461a      	mov	r2, r3
 801076a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801076c:	4293      	cmp	r3, r2
 801076e:	d907      	bls.n	8010780 <xTCPTimerCheck+0xcc>
            {
                xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 8010770:	693b      	ldr	r3, [r7, #16]
 8010772:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8010776:	627b      	str	r3, [r7, #36]	@ 0x24
 8010778:	e002      	b.n	8010780 <xTCPTimerCheck+0xcc>
                continue;
 801077a:	bf00      	nop
 801077c:	e000      	b.n	8010780 <xTCPTimerCheck+0xcc>
                    continue;
 801077e:	bf00      	nop
        while( pxIterator != pxEnd )
 8010780:	69fa      	ldr	r2, [r7, #28]
 8010782:	697b      	ldr	r3, [r7, #20]
 8010784:	429a      	cmp	r2, r3
 8010786:	d1b2      	bne.n	80106ee <xTCPTimerCheck+0x3a>
            }
        }

        return xShortest;
 8010788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 801078a:	4618      	mov	r0, r3
 801078c:	3728      	adds	r7, #40	@ 0x28
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}
 8010792:	bf00      	nop
 8010794:	2000161c 	.word	0x2000161c
 8010798:	20001610 	.word	0x20001610
 801079c:	20001608 	.word	0x20001608

080107a0 <pxTCPSocketLookup>:
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup( uint32_t ulLocalIP,
                                           UBaseType_t uxLocalPort,
                                           IPv46_Address_t xRemoteIP,
                                           UBaseType_t uxRemotePort )
    {
 80107a0:	b082      	sub	sp, #8
 80107a2:	b580      	push	{r7, lr}
 80107a4:	b088      	sub	sp, #32
 80107a6:	af00      	add	r7, sp, #0
 80107a8:	6078      	str	r0, [r7, #4]
 80107aa:	6039      	str	r1, [r7, #0]
 80107ac:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80107b0:	e881 000c 	stmia.w	r1, {r2, r3}
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxResult = NULL, * pxListenSocket = NULL;
 80107b4:	2300      	movs	r3, #0
 80107b6:	61bb      	str	r3, [r7, #24]
 80107b8:	2300      	movs	r3, #0
 80107ba:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 80107bc:	4b23      	ldr	r3, [pc, #140]	@ (801084c <pxTCPSocketLookup+0xac>)
 80107be:	613b      	str	r3, [r7, #16]

        ( void ) ulLocalIP;

        for( pxIterator = listGET_NEXT( pxEnd );
 80107c0:	693b      	ldr	r3, [r7, #16]
 80107c2:	685b      	ldr	r3, [r3, #4]
 80107c4:	61fb      	str	r3, [r7, #28]
 80107c6:	e02e      	b.n	8010826 <pxTCPSocketLookup+0x86>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80107c8:	69fb      	ldr	r3, [r7, #28]
 80107ca:	68db      	ldr	r3, [r3, #12]
 80107cc:	60fb      	str	r3, [r7, #12]

            if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 80107d2:	683b      	ldr	r3, [r7, #0]
 80107d4:	b29b      	uxth	r3, r3
 80107d6:	429a      	cmp	r2, r3
 80107d8:	d122      	bne.n	8010820 <pxTCPSocketLookup+0x80>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80107e0:	2b01      	cmp	r3, #1
 80107e2:	d102      	bne.n	80107ea <pxTCPSocketLookup+0x4a>
                {
                    /* If this is a socket listening to uxLocalPort, remember it
                     * in case there is no perfect match. */
                    pxListenSocket = pxSocket;
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	617b      	str	r3, [r7, #20]
 80107e8:	e01a      	b.n	8010820 <pxTCPSocketLookup+0x80>
                }
                else if( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort )
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80107f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107f2:	b29b      	uxth	r3, r3
 80107f4:	429a      	cmp	r2, r3
 80107f6:	d113      	bne.n	8010820 <pxTCPSocketLookup+0x80>
                {
                    if( xRemoteIP.xIs_IPv6 != pdFALSE )
 80107f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d006      	beq.n	801080c <pxTCPSocketLookup+0x6c>
                    {
                        #if ( ipconfigUSE_IPv6 != 0 )
                            pxResult = pxTCPSocketLookup_IPv6( pxSocket, &xRemoteIP );
 80107fe:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8010802:	68f8      	ldr	r0, [r7, #12]
 8010804:	f7fb f8b6 	bl	800b974 <pxTCPSocketLookup_IPv6>
 8010808:	61b8      	str	r0, [r7, #24]
 801080a:	e006      	b.n	801081a <pxTCPSocketLookup+0x7a>
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
                    }
                    else
                    {
                        if( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 == xRemoteIP.xIPAddress.ulIP_IPv4 )
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010812:	429a      	cmp	r2, r3
 8010814:	d101      	bne.n	801081a <pxTCPSocketLookup+0x7a>
                        {
                            /* For sockets not in listening mode, find a match with
                             * xLocalPort, ulRemoteIP AND xRemotePort. */
                            pxResult = pxSocket;
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	61bb      	str	r3, [r7, #24]
                        }
                    }

                    if( pxResult != NULL )
 801081a:	69bb      	ldr	r3, [r7, #24]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d107      	bne.n	8010830 <pxTCPSocketLookup+0x90>
             pxIterator = listGET_NEXT( pxIterator ) )
 8010820:	69fb      	ldr	r3, [r7, #28]
 8010822:	685b      	ldr	r3, [r3, #4]
 8010824:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEnd;
 8010826:	69fa      	ldr	r2, [r7, #28]
 8010828:	693b      	ldr	r3, [r7, #16]
 801082a:	429a      	cmp	r2, r3
 801082c:	d1cc      	bne.n	80107c8 <pxTCPSocketLookup+0x28>
 801082e:	e000      	b.n	8010832 <pxTCPSocketLookup+0x92>
                    {
                        break;
 8010830:	bf00      	nop
                    /* This 'pxSocket' doesn't match. */
                }
            }
        }

        if( pxResult == NULL )
 8010832:	69bb      	ldr	r3, [r7, #24]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d101      	bne.n	801083c <pxTCPSocketLookup+0x9c>
        {
            /* An exact match was not found, maybe a listening socket was
             * found. */
            pxResult = pxListenSocket;
 8010838:	697b      	ldr	r3, [r7, #20]
 801083a:	61bb      	str	r3, [r7, #24]
        }

        return pxResult;
 801083c:	69bb      	ldr	r3, [r7, #24]
    }
 801083e:	4618      	mov	r0, r3
 8010840:	3720      	adds	r7, #32
 8010842:	46bd      	mov	sp, r7
 8010844:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010848:	b002      	add	sp, #8
 801084a:	4770      	bx	lr
 801084c:	20001610 	.word	0x20001610

08010850 <prvTCPCreateStream>:
 *
 * @return The stream buffer.
 */
    static StreamBuffer_t * prvTCPCreateStream( FreeRTOS_Socket_t * pxSocket,
                                                BaseType_t xIsInputStream )
    {
 8010850:	b580      	push	{r7, lr}
 8010852:	b088      	sub	sp, #32
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
 8010858:	6039      	str	r1, [r7, #0]
        size_t uxLength;
        size_t uxSize;

        /* Now that a stream is created, the maximum size is fixed before
         * creation, it could still be changed with setsockopt(). */
        if( xIsInputStream != pdFALSE )
 801085a:	683b      	ldr	r3, [r7, #0]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d048      	beq.n	80108f2 <prvTCPCreateStream+0xa2>
        {
            size_t uxLittlePerc = sock20_PERCENT;
 8010860:	2314      	movs	r3, #20
 8010862:	61bb      	str	r3, [r7, #24]
            size_t uxEnoughPerc = sock80_PERCENT;
 8010864:	2350      	movs	r3, #80	@ 0x50
 8010866:	617b      	str	r3, [r7, #20]
            size_t uxSegmentCount = pxSocket->u.xTCP.uxRxStreamSize / pxSocket->u.xTCP.usMSS;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801086e:	687a      	ldr	r2, [r7, #4]
 8010870:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
 8010874:	fbb3 f3f2 	udiv	r3, r3, r2
 8010878:	613b      	str	r3, [r7, #16]
                { 50U, 100U }, /* 2 segments. */
                { 34U, 100U }, /* 3 segments. */
                { 25U, 100U }, /* 4 segments. */
            };

            if( ( uxSegmentCount > 0U ) &&
 801087a:	693b      	ldr	r3, [r7, #16]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d00f      	beq.n	80108a0 <prvTCPCreateStream+0x50>
 8010880:	693b      	ldr	r3, [r7, #16]
 8010882:	2b04      	cmp	r3, #4
 8010884:	d80c      	bhi.n	80108a0 <prvTCPCreateStream+0x50>
                ( uxSegmentCount <= ARRAY_USIZE( xPercTable ) ) )
            {
                uxLittlePerc = xPercTable[ uxSegmentCount - 1U ].uxPercLittle;
 8010886:	693b      	ldr	r3, [r7, #16]
 8010888:	3b01      	subs	r3, #1
 801088a:	4a40      	ldr	r2, [pc, #256]	@ (801098c <prvTCPCreateStream+0x13c>)
 801088c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010890:	61bb      	str	r3, [r7, #24]
                uxEnoughPerc = xPercTable[ uxSegmentCount - 1U ].uxPercEnough;
 8010892:	693b      	ldr	r3, [r7, #16]
 8010894:	3b01      	subs	r3, #1
 8010896:	4a3d      	ldr	r2, [pc, #244]	@ (801098c <prvTCPCreateStream+0x13c>)
 8010898:	00db      	lsls	r3, r3, #3
 801089a:	4413      	add	r3, r2
 801089c:	685b      	ldr	r3, [r3, #4]
 801089e:	617b      	str	r3, [r7, #20]
            }

            uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80108a6:	61fb      	str	r3, [r7, #28]

            if( pxSocket->u.xTCP.uxLittleSpace == 0U )
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d10c      	bne.n	80108cc <prvTCPCreateStream+0x7c>
            {
                pxSocket->u.xTCP.uxLittleSpace = ( uxLittlePerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80108b8:	69ba      	ldr	r2, [r7, #24]
 80108ba:	fb02 f303 	mul.w	r3, r2, r3
 80108be:	4a34      	ldr	r2, [pc, #208]	@ (8010990 <prvTCPCreateStream+0x140>)
 80108c0:	fba2 2303 	umull	r2, r3, r2, r3
 80108c4:	095a      	lsrs	r2, r3, #5
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            }

            if( pxSocket->u.xTCP.uxEnoughSpace == 0U )
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d111      	bne.n	80108fa <prvTCPCreateStream+0xaa>
            {
                pxSocket->u.xTCP.uxEnoughSpace = ( uxEnoughPerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80108dc:	697a      	ldr	r2, [r7, #20]
 80108de:	fb02 f303 	mul.w	r3, r2, r3
 80108e2:	4a2b      	ldr	r2, [pc, #172]	@ (8010990 <prvTCPCreateStream+0x140>)
 80108e4:	fba2 2303 	umull	r2, r3, r2, r3
 80108e8:	095a      	lsrs	r2, r3, #5
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80108f0:	e003      	b.n	80108fa <prvTCPCreateStream+0xaa>
            }
        }
        else
        {
            uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80108f8:	61fb      	str	r3, [r7, #28]
        }

        /* Add an extra 4 (or 8) bytes. */
        uxLength += sizeof( size_t );
 80108fa:	69fb      	ldr	r3, [r7, #28]
 80108fc:	3304      	adds	r3, #4
 80108fe:	61fb      	str	r3, [r7, #28]

        /* And make the length a multiple of sizeof( size_t ). */
        uxLength &= ~( sizeof( size_t ) - 1U );
 8010900:	69fb      	ldr	r3, [r7, #28]
 8010902:	f023 0303 	bic.w	r3, r3, #3
 8010906:	61fb      	str	r3, [r7, #28]

        uxSize = ( sizeof( *pxBuffer ) + uxLength ) - sizeof( pxBuffer->ucArray );
 8010908:	69fb      	ldr	r3, [r7, #28]
 801090a:	3314      	adds	r3, #20
 801090c:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxBuffer = ( ( StreamBuffer_t * ) pvPortMallocLarge( uxSize ) );
 801090e:	68f8      	ldr	r0, [r7, #12]
 8010910:	f7f6 f848 	bl	80069a4 <pvPortMalloc>
 8010914:	60b8      	str	r0, [r7, #8]

        if( pxBuffer == NULL )
 8010916:	68bb      	ldr	r3, [r7, #8]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d10e      	bne.n	801093a <prvTCPCreateStream+0xea>
        {
            FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
 801091c:	481d      	ldr	r0, [pc, #116]	@ (8010994 <prvTCPCreateStream+0x144>)
 801091e:	f011 ff41 	bl	80227a4 <lUDPLoggingPrintf>
            pxSocket->u.xTCP.bits.bMallocError = pdTRUE_UNSIGNED;
 8010922:	687a      	ldr	r2, [r7, #4]
 8010924:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8010928:	f043 0308 	orr.w	r3, r3, #8
 801092c:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8010930:	2108      	movs	r1, #8
 8010932:	6878      	ldr	r0, [r7, #4]
 8010934:	f000 ff2a 	bl	801178c <vTCPStateChange>
 8010938:	e022      	b.n	8010980 <prvTCPCreateStream+0x130>
        }
        else
        {
            /* Clear the markers of the stream */
            ( void ) memset( pxBuffer, 0, sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 801093a:	2214      	movs	r2, #20
 801093c:	2100      	movs	r1, #0
 801093e:	68b8      	ldr	r0, [r7, #8]
 8010940:	f012 fa59 	bl	8022df6 <memset>
            pxBuffer->LENGTH = ( size_t ) uxLength;
 8010944:	68bb      	ldr	r3, [r7, #8]
 8010946:	69fa      	ldr	r2, [r7, #28]
 8010948:	611a      	str	r2, [r3, #16]

            if( xTCPWindowLoggingLevel != 0 )
 801094a:	4b13      	ldr	r3, [pc, #76]	@ (8010998 <prvTCPCreateStream+0x148>)
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d00a      	beq.n	8010968 <prvTCPCreateStream+0x118>
            {
                FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %u bytes (total %u)\n", ( xIsInputStream != 0 ) ? 'R' : 'T', ( unsigned ) uxLength, ( unsigned ) uxSize ) );
 8010952:	683b      	ldr	r3, [r7, #0]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d001      	beq.n	801095c <prvTCPCreateStream+0x10c>
 8010958:	2152      	movs	r1, #82	@ 0x52
 801095a:	e000      	b.n	801095e <prvTCPCreateStream+0x10e>
 801095c:	2154      	movs	r1, #84	@ 0x54
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	69fa      	ldr	r2, [r7, #28]
 8010962:	480e      	ldr	r0, [pc, #56]	@ (801099c <prvTCPCreateStream+0x14c>)
 8010964:	f011 ff1e 	bl	80227a4 <lUDPLoggingPrintf>
            }

            if( xIsInputStream != 0 )
 8010968:	683b      	ldr	r3, [r7, #0]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d004      	beq.n	8010978 <prvTCPCreateStream+0x128>
            {
                iptraceMEM_STATS_CREATE( tcpRX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.rxStream = pxBuffer;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	68ba      	ldr	r2, [r7, #8]
 8010972:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8010976:	e003      	b.n	8010980 <prvTCPCreateStream+0x130>
            }
            else
            {
                iptraceMEM_STATS_CREATE( tcpTX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.txStream = pxBuffer;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	68ba      	ldr	r2, [r7, #8]
 801097c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
            }
        }

        return pxBuffer;
 8010980:	68bb      	ldr	r3, [r7, #8]
    }
 8010982:	4618      	mov	r0, r3
 8010984:	3720      	adds	r7, #32
 8010986:	46bd      	mov	sp, r7
 8010988:	bd80      	pop	{r7, pc}
 801098a:	bf00      	nop
 801098c:	08027fac 	.word	0x08027fac
 8010990:	51eb851f 	.word	0x51eb851f
 8010994:	0802669c 	.word	0x0802669c
 8010998:	2000164c 	.word	0x2000164c
 801099c:	080266c0 	.word	0x080266c0

080109a0 <vTCPAddRxdata_Callback>:
 * @param[in] ulByteCount The number of bytes that were received.
 */
    static void vTCPAddRxdata_Callback( FreeRTOS_Socket_t * pxSocket,
                                        const uint8_t * pcData,
                                        uint32_t ulByteCount )
    {
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b08a      	sub	sp, #40	@ 0x28
 80109a4:	af02      	add	r7, sp, #8
 80109a6:	60f8      	str	r0, [r7, #12]
 80109a8:	60b9      	str	r1, [r7, #8]
 80109aa:	607a      	str	r2, [r7, #4]
        const uint8_t * pucBuffer = pcData;
 80109ac:	68bb      	ldr	r3, [r7, #8]
 80109ae:	61fb      	str	r3, [r7, #28]

        /* The socket owner has installed an OnReceive handler. Pass the
         * Rx data, without copying from the rxStream, to the user. */
        for( ; ; )
        {
            uint8_t * ucReadPtr = NULL;
 80109b0:	2300      	movs	r3, #0
 80109b2:	617b      	str	r3, [r7, #20]
            uint32_t ulCount;

            if( pucBuffer != NULL )
 80109b4:	69fb      	ldr	r3, [r7, #28]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d006      	beq.n	80109c8 <vTCPAddRxdata_Callback+0x28>
            {
                ucReadPtr = ( uint8_t * ) pucBuffer;
 80109ba:	69fb      	ldr	r3, [r7, #28]
 80109bc:	617b      	str	r3, [r7, #20]
                ulCount = ulByteCount;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	61bb      	str	r3, [r7, #24]
                pucBuffer = NULL;
 80109c2:	2300      	movs	r3, #0
 80109c4:	61fb      	str	r3, [r7, #28]
 80109c6:	e009      	b.n	80109dc <vTCPAddRxdata_Callback+0x3c>
            }
            else
            {
                ulCount = ( uint32_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, &( ucReadPtr ) );
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80109ce:	f107 0214 	add.w	r2, r7, #20
 80109d2:	4611      	mov	r1, r2
 80109d4:	4618      	mov	r0, r3
 80109d6:	f000 fc92 	bl	80112fe <uxStreamBufferGetPtr>
 80109da:	61b8      	str	r0, [r7, #24]
            }

            if( ulCount == 0U )
 80109dc:	69bb      	ldr	r3, [r7, #24]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d011      	beq.n	8010a06 <vTCPAddRxdata_Callback+0x66>
                break;
            }

            /* For advanced users only: here a pointer to the RX-stream of a socket
             * is passed to an application hook. */
            ( void ) pxSocket->u.xTCP.pxHandleReceive( pxSocket, ucReadPtr, ( size_t ) ulCount );
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80109e8:	6979      	ldr	r1, [r7, #20]
 80109ea:	69ba      	ldr	r2, [r7, #24]
 80109ec:	68f8      	ldr	r0, [r7, #12]
 80109ee:	4798      	blx	r3
            /* Forward the tail in the RX stream. */
            ( void ) uxStreamBufferGet( pxSocket->u.xTCP.rxStream, 0U, NULL, ( size_t ) ulCount, pdFALSE );
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
 80109f6:	2300      	movs	r3, #0
 80109f8:	9300      	str	r3, [sp, #0]
 80109fa:	69bb      	ldr	r3, [r7, #24]
 80109fc:	2200      	movs	r2, #0
 80109fe:	2100      	movs	r1, #0
 8010a00:	f000 fd1d 	bl	801143e <uxStreamBufferGet>
        {
 8010a04:	e7d4      	b.n	80109b0 <vTCPAddRxdata_Callback+0x10>
        }
    }
 8010a06:	bf00      	nop
 8010a08:	3720      	adds	r7, #32
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}

08010a0e <vTCPAddRxdata_Stored>:
 *        RX-stream. When the space is dropped below a threshold, it may set the
 *        bit field 'bLowWater'. Also the socket's events bits for READ will be set.
 * @param[in] pxSocket the socket that has received new data.
 */
    static void vTCPAddRxdata_Stored( FreeRTOS_Socket_t * pxSocket )
    {
 8010a0e:	b580      	push	{r7, lr}
 8010a10:	b084      	sub	sp, #16
 8010a12:	af00      	add	r7, sp, #0
 8010a14:	6078      	str	r0, [r7, #4]
        /* See if running out of space. */
        if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010a1c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010a20:	b2db      	uxtb	r3, r3
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d121      	bne.n	8010a6a <vTCPAddRxdata_Stored+0x5c>
        {
            size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	f000 fbd7 	bl	80111e0 <uxStreamBufferFrontSpace>
 8010a32:	60f8      	str	r0, [r7, #12]

            if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace )
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010a3a:	68fa      	ldr	r2, [r7, #12]
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	d814      	bhi.n	8010a6a <vTCPAddRxdata_Stored+0x5c>
            {
                pxSocket->u.xTCP.bits.bLowWater = pdTRUE_UNSIGNED;
 8010a40:	687a      	ldr	r2, [r7, #4]
 8010a42:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8010a46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a4a:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8010a4e:	687a      	ldr	r2, [r7, #4]
 8010a50:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8010a54:	f043 0301 	orr.w	r3, r3, #1
 8010a58:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                /* bLowWater was reached, send the changed window size. */
                pxSocket->u.xTCP.usTimeout = 1U;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	2201      	movs	r2, #1
 8010a60:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 8010a64:	2006      	movs	r0, #6
 8010a66:	f7f9 f8fd 	bl	8009c64 <xSendEventToIPTask>
            }
        }

        /* New incoming data is available, wake up the user.   User's
         * semaphores will be set just before the IP-task goes asleep. */
        pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_RECEIVE;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	f043 0201 	orr.w	r2, r3, #1
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	601a      	str	r2, [r3, #0]

        #if ipconfigSUPPORT_SELECT_FUNCTION == 1
        {
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U )
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a7a:	f003 0301 	and.w	r3, r3, #1
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d005      	beq.n	8010a8e <vTCPAddRxdata_Stored+0x80>
            {
                pxSocket->xEventBits |= ( ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT );
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	601a      	str	r2, [r3, #0]
            }
        }
        #endif
    }
 8010a8e:	bf00      	nop
 8010a90:	3710      	adds	r7, #16
 8010a92:	46bd      	mov	sp, r7
 8010a94:	bd80      	pop	{r7, pc}
	...

08010a98 <lTCPAddRxdata>:
 */
    int32_t lTCPAddRxdata( FreeRTOS_Socket_t * pxSocket,
                           size_t uxOffset,
                           const uint8_t * pcData,
                           uint32_t ulByteCount )
    {
 8010a98:	b5b0      	push	{r4, r5, r7, lr}
 8010a9a:	b08c      	sub	sp, #48	@ 0x30
 8010a9c:	af04      	add	r7, sp, #16
 8010a9e:	60f8      	str	r0, [r7, #12]
 8010aa0:	60b9      	str	r1, [r7, #8]
 8010aa2:	607a      	str	r2, [r7, #4]
 8010aa4:	603b      	str	r3, [r7, #0]
        StreamBuffer_t * pxStream = pxSocket->u.xTCP.rxStream;
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010aac:	61fb      	str	r3, [r7, #28]
        int32_t xResult = 0;
 8010aae:	2300      	movs	r3, #0
 8010ab0:	61bb      	str	r3, [r7, #24]

        #if ( ipconfigUSE_CALLBACKS == 1 )
            BaseType_t bHasHandler = ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleReceive ) ? pdTRUE : pdFALSE;
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d001      	beq.n	8010ac0 <lTCPAddRxdata+0x28>
 8010abc:	2301      	movs	r3, #1
 8010abe:	e000      	b.n	8010ac2 <lTCPAddRxdata+0x2a>
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	613b      	str	r3, [r7, #16]
            const uint8_t * pucBuffer = NULL;
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	617b      	str	r3, [r7, #20]
        /* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
         * if( pucData != NULL ) copy data the the buffer
         * if( pucData == NULL ) no copying, just advance rxHead
         * if( uxOffset != 0 ) Just store data which has come out-of-order
         * if( uxOffset == 0 ) Also advance rxHead */
        if( pxStream == NULL )
 8010ac8:	69fb      	ldr	r3, [r7, #28]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d10a      	bne.n	8010ae4 <lTCPAddRxdata+0x4c>
        {
            pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 8010ace:	2101      	movs	r1, #1
 8010ad0:	68f8      	ldr	r0, [r7, #12]
 8010ad2:	f7ff febd 	bl	8010850 <prvTCPCreateStream>
 8010ad6:	61f8      	str	r0, [r7, #28]

            if( pxStream == NULL )
 8010ad8:	69fb      	ldr	r3, [r7, #28]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d102      	bne.n	8010ae4 <lTCPAddRxdata+0x4c>
            {
                xResult = -1;
 8010ade:	f04f 33ff 	mov.w	r3, #4294967295
 8010ae2:	61bb      	str	r3, [r7, #24]
            }
        }

        if( xResult >= 0 )
 8010ae4:	69bb      	ldr	r3, [r7, #24]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	db41      	blt.n	8010b6e <lTCPAddRxdata+0xd6>
        {
            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( bHasHandler != pdFALSE ) && ( uxStreamBufferGetSize( pxStream ) == 0U ) && ( uxOffset == 0U ) && ( pcData != NULL ) )
 8010aea:	693b      	ldr	r3, [r7, #16]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d00f      	beq.n	8010b10 <lTCPAddRxdata+0x78>
 8010af0:	69f8      	ldr	r0, [r7, #28]
 8010af2:	f000 fb86 	bl	8011202 <uxStreamBufferGetSize>
 8010af6:	4603      	mov	r3, r0
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d109      	bne.n	8010b10 <lTCPAddRxdata+0x78>
 8010afc:	68bb      	ldr	r3, [r7, #8]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d106      	bne.n	8010b10 <lTCPAddRxdata+0x78>
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d003      	beq.n	8010b10 <lTCPAddRxdata+0x78>
                {
                    /* Data can be passed directly to the user because there is
                     * no data in the RX-stream, it the new data must be stored
                     * at offset zero, and a buffer 'pcData' is provided.
                     */
                    pucBuffer = pcData;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	617b      	str	r3, [r7, #20]

                    /* Zero-copy for call-back: no need to add the bytes to the
                     * stream, only the pointer will be advanced by uxStreamBufferAdd(). */
                    pcData = NULL;
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	607b      	str	r3, [r7, #4]
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 8010b10:	683b      	ldr	r3, [r7, #0]
 8010b12:	687a      	ldr	r2, [r7, #4]
 8010b14:	68b9      	ldr	r1, [r7, #8]
 8010b16:	69f8      	ldr	r0, [r7, #28]
 8010b18:	f000 fc11 	bl	801133e <uxStreamBufferAdd>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	61bb      	str	r3, [r7, #24]

            #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            {
                if( xResult != ( int32_t ) ulByteCount )
 8010b20:	683b      	ldr	r3, [r7, #0]
 8010b22:	69ba      	ldr	r2, [r7, #24]
 8010b24:	429a      	cmp	r2, r3
 8010b26:	d013      	beq.n	8010b50 <lTCPAddRxdata+0xb8>
                {
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: at %u: %d/%u bytes (tail %u head %u space %u front %u)\n",
 8010b28:	69fb      	ldr	r3, [r7, #28]
 8010b2a:	681c      	ldr	r4, [r3, #0]
 8010b2c:	69fb      	ldr	r3, [r7, #28]
 8010b2e:	689d      	ldr	r5, [r3, #8]
 8010b30:	69f8      	ldr	r0, [r7, #28]
 8010b32:	f000 fb55 	bl	80111e0 <uxStreamBufferFrontSpace>
 8010b36:	4602      	mov	r2, r0
 8010b38:	69fb      	ldr	r3, [r7, #28]
 8010b3a:	68db      	ldr	r3, [r3, #12]
 8010b3c:	9303      	str	r3, [sp, #12]
 8010b3e:	9202      	str	r2, [sp, #8]
 8010b40:	9501      	str	r5, [sp, #4]
 8010b42:	9400      	str	r4, [sp, #0]
 8010b44:	683b      	ldr	r3, [r7, #0]
 8010b46:	69ba      	ldr	r2, [r7, #24]
 8010b48:	68b9      	ldr	r1, [r7, #8]
 8010b4a:	480b      	ldr	r0, [pc, #44]	@ (8010b78 <lTCPAddRxdata+0xe0>)
 8010b4c:	f011 fe2a 	bl	80227a4 <lUDPLoggingPrintf>
                                             ( unsigned int ) pxStream->uxFront ) );
                }
            }
            #endif /* ipconfigHAS_DEBUG_PRINTF */

            if( uxOffset == 0U )
 8010b50:	68bb      	ldr	r3, [r7, #8]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d10b      	bne.n	8010b6e <lTCPAddRxdata+0xd6>
            {
                /* Data is being added to rxStream at the head (offs = 0) */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                    if( bHasHandler != pdFALSE )
 8010b56:	693b      	ldr	r3, [r7, #16]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d005      	beq.n	8010b68 <lTCPAddRxdata+0xd0>
                    {
                        vTCPAddRxdata_Callback( pxSocket, pucBuffer, ulByteCount );
 8010b5c:	683a      	ldr	r2, [r7, #0]
 8010b5e:	6979      	ldr	r1, [r7, #20]
 8010b60:	68f8      	ldr	r0, [r7, #12]
 8010b62:	f7ff ff1d 	bl	80109a0 <vTCPAddRxdata_Callback>
 8010b66:	e002      	b.n	8010b6e <lTCPAddRxdata+0xd6>
                    }
                    else
                #endif /* ipconfigUSE_CALLBACKS */
                {
                    vTCPAddRxdata_Stored( pxSocket );
 8010b68:	68f8      	ldr	r0, [r7, #12]
 8010b6a:	f7ff ff50 	bl	8010a0e <vTCPAddRxdata_Stored>
                }
            }
        }

        return xResult;
 8010b6e:	69bb      	ldr	r3, [r7, #24]
    }
 8010b70:	4618      	mov	r0, r3
 8010b72:	3720      	adds	r7, #32
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bdb0      	pop	{r4, r5, r7, pc}
 8010b78:	080266fc 	.word	0x080266fc

08010b7c <FreeRTOS_tx_space>:
 * @param[in] xSocket the socket to be checked.
 *
 * @return The bytes that can be written. Or else an error code.
 */
    BaseType_t FreeRTOS_tx_space( ConstSocket_t xSocket )
    {
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b084      	sub	sp, #16
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8010b88:	68bb      	ldr	r3, [r7, #8]
 8010b8a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8010b8e:	2b06      	cmp	r3, #6
 8010b90:	d003      	beq.n	8010b9a <FreeRTOS_tx_space+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8010b92:	f06f 0315 	mvn.w	r3, #21
 8010b96:	60fb      	str	r3, [r7, #12]
 8010b98:	e011      	b.n	8010bbe <FreeRTOS_tx_space+0x42>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 8010b9a:	68bb      	ldr	r3, [r7, #8]
 8010b9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d008      	beq.n	8010bb6 <FreeRTOS_tx_space+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 8010ba4:	68bb      	ldr	r3, [r7, #8]
 8010ba6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010baa:	4618      	mov	r0, r3
 8010bac:	f000 fb07 	bl	80111be <uxStreamBufferGetSpace>
 8010bb0:	4603      	mov	r3, r0
 8010bb2:	60fb      	str	r3, [r7, #12]
 8010bb4:	e003      	b.n	8010bbe <FreeRTOS_tx_space+0x42>
            }
            else
            {
                xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 8010bb6:	68bb      	ldr	r3, [r7, #8]
 8010bb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8010bbc:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 8010bbe:	68fb      	ldr	r3, [r7, #12]
    }
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	3710      	adds	r7, #16
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	bd80      	pop	{r7, pc}

08010bc8 <FreeRTOS_tx_size>:
 *
 * @return The number of bytes stored in the Tx buffer of the socket.
 *         Or an error code.
 */
    BaseType_t FreeRTOS_tx_size( ConstSocket_t xSocket )
    {
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b084      	sub	sp, #16
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8010bd4:	68bb      	ldr	r3, [r7, #8]
 8010bd6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8010bda:	2b06      	cmp	r3, #6
 8010bdc:	d003      	beq.n	8010be6 <FreeRTOS_tx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8010bde:	f06f 0315 	mvn.w	r3, #21
 8010be2:	60fb      	str	r3, [r7, #12]
 8010be4:	e00f      	b.n	8010c06 <FreeRTOS_tx_size+0x3e>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 8010be6:	68bb      	ldr	r3, [r7, #8]
 8010be8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d008      	beq.n	8010c02 <FreeRTOS_tx_size+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.txStream );
 8010bf0:	68bb      	ldr	r3, [r7, #8]
 8010bf2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	f000 fb03 	bl	8011202 <uxStreamBufferGetSize>
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	60fb      	str	r3, [r7, #12]
 8010c00:	e001      	b.n	8010c06 <FreeRTOS_tx_size+0x3e>
            }
            else
            {
                xReturn = 0;
 8010c02:	2300      	movs	r3, #0
 8010c04:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 8010c06:	68fb      	ldr	r3, [r7, #12]
    }
 8010c08:	4618      	mov	r0, r3
 8010c0a:	3710      	adds	r7, #16
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}

08010c10 <FreeRTOS_issocketconnected>:
 * @param[in] xSocket The socket being checked.
 *
 * @return pdTRUE if TCP socket is connected.
 */
    BaseType_t FreeRTOS_issocketconnected( ConstSocket_t xSocket )
    {
 8010c10:	b480      	push	{r7}
 8010c12:	b085      	sub	sp, #20
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8010c20:	68bb      	ldr	r3, [r7, #8]
 8010c22:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8010c26:	2b06      	cmp	r3, #6
 8010c28:	d003      	beq.n	8010c32 <FreeRTOS_issocketconnected+0x22>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8010c2a:	f06f 0315 	mvn.w	r3, #21
 8010c2e:	60fb      	str	r3, [r7, #12]
 8010c30:	e00b      	b.n	8010c4a <FreeRTOS_issocketconnected+0x3a>
        }
        else
        {
            if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 8010c32:	68bb      	ldr	r3, [r7, #8]
 8010c34:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010c38:	2b04      	cmp	r3, #4
 8010c3a:	d906      	bls.n	8010c4a <FreeRTOS_issocketconnected+0x3a>
            {
                if( pxSocket->u.xTCP.eTCPState < eCLOSE_WAIT )
 8010c3c:	68bb      	ldr	r3, [r7, #8]
 8010c3e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010c42:	2b07      	cmp	r3, #7
 8010c44:	d801      	bhi.n	8010c4a <FreeRTOS_issocketconnected+0x3a>
                {
                    xReturn = pdTRUE;
 8010c46:	2301      	movs	r3, #1
 8010c48:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        return xReturn;
 8010c4a:	68fb      	ldr	r3, [r7, #12]
    }
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	3714      	adds	r7, #20
 8010c50:	46bd      	mov	sp, r7
 8010c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c56:	4770      	bx	lr

08010c58 <FreeRTOS_rx_size>:
 *
 * @return Returns the number of bytes which can be read. Or an error
 *         code is returned.
 */
    BaseType_t FreeRTOS_rx_size( ConstSocket_t xSocket )
    {
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b084      	sub	sp, #16
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8010c64:	68bb      	ldr	r3, [r7, #8]
 8010c66:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8010c6a:	2b06      	cmp	r3, #6
 8010c6c:	d003      	beq.n	8010c76 <FreeRTOS_rx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8010c6e:	f06f 0315 	mvn.w	r3, #21
 8010c72:	60fb      	str	r3, [r7, #12]
 8010c74:	e00f      	b.n	8010c96 <FreeRTOS_rx_size+0x3e>
        }
        else if( pxSocket->u.xTCP.rxStream != NULL )
 8010c76:	68bb      	ldr	r3, [r7, #8]
 8010c78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d008      	beq.n	8010c92 <FreeRTOS_rx_size+0x3a>
        {
            xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 8010c80:	68bb      	ldr	r3, [r7, #8]
 8010c82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010c86:	4618      	mov	r0, r3
 8010c88:	f000 fabb 	bl	8011202 <uxStreamBufferGetSize>
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	60fb      	str	r3, [r7, #12]
 8010c90:	e001      	b.n	8010c96 <FreeRTOS_rx_size+0x3e>
        }
        else
        {
            xReturn = 0;
 8010c92:	2300      	movs	r3, #0
 8010c94:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 8010c96:	68fb      	ldr	r3, [r7, #12]
    }
 8010c98:	4618      	mov	r0, r3
 8010c9a:	3710      	adds	r7, #16
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}

08010ca0 <xSocketValid>:
 * @param[in] xSocket The socket to be checked.
 * @return pdTRUE if the socket is valid, else pdFALSE.
 *
 */
BaseType_t xSocketValid( const ConstSocket_t xSocket )
{
 8010ca0:	b480      	push	{r7}
 8010ca2:	b085      	sub	sp, #20
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturnValue = pdFALSE;
 8010ca8:	2300      	movs	r3, #0
 8010caa:	60fb      	str	r3, [r7, #12]
     */

    /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
    /* coverity[misra_c_2012_rule_11_4_violation] */
    if( ( xSocket != FREERTOS_INVALID_SOCKET ) && ( xSocket != NULL ) )
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cb2:	d004      	beq.n	8010cbe <xSocketValid+0x1e>
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d001      	beq.n	8010cbe <xSocketValid+0x1e>
    {
        xReturnValue = pdTRUE;
 8010cba:	2301      	movs	r3, #1
 8010cbc:	60fb      	str	r3, [r7, #12]
    }

    return xReturnValue;
 8010cbe:	68fb      	ldr	r3, [r7, #12]
}
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	3714      	adds	r7, #20
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cca:	4770      	bx	lr

08010ccc <vTCPNetStat_TCPSocket>:
 * @brief A helper function of vTCPNetStat(), see below.
 *
 * @param[in] pxSocket The socket that needs logging.
 */
    static void vTCPNetStat_TCPSocket( const FreeRTOS_Socket_t * pxSocket )
    {
 8010ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cd0:	b09c      	sub	sp, #112	@ 0x70
 8010cd2:	af08      	add	r7, sp, #32
 8010cd4:	6078      	str	r0, [r7, #4]
        char pcRemoteIp[ 40 ];
        int xIPWidth = 32;
 8010cd6:	2320      	movs	r3, #32
 8010cd8:	64bb      	str	r3, [r7, #72]	@ 0x48

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 8010cda:	f7f3 fff9 	bl	8004cd0 <xTaskGetTickCount>
 8010cde:	4602      	mov	r2, r0
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010ce6:	1ad3      	subs	r3, r2, r3
 8010ce8:	64fb      	str	r3, [r7, #76]	@ 0x4c
        #else
            TickType_t age = 0U;
        #endif

        char ucChildText[ 16 ] = "";
 8010cea:	2300      	movs	r3, #0
 8010cec:	60fb      	str	r3, [r7, #12]
 8010cee:	f107 0310 	add.w	r3, r7, #16
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	601a      	str	r2, [r3, #0]
 8010cf6:	605a      	str	r2, [r3, #4]
 8010cf8:	609a      	str	r2, [r3, #8]

        if( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eTCP_LISTEN )
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010d00:	2b01      	cmp	r3, #1
 8010d02:	d11f      	bne.n	8010d44 <vTCPNetStat_TCPSocket+0x78>
        {
            /* Using function "snprintf". */
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
                                                 pxSocket->u.xTCP.usChildCount,
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 8010d0a:	461a      	mov	r2, r3
                                                 pxSocket->u.xTCP.usBacklog );
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 8010d12:	f107 000c 	add.w	r0, r7, #12
 8010d16:	9300      	str	r3, [sp, #0]
 8010d18:	4613      	mov	r3, r2
 8010d1a:	4a3b      	ldr	r2, [pc, #236]	@ (8010e08 <vTCPNetStat_TCPSocket+0x13c>)
 8010d1c:	2110      	movs	r1, #16
 8010d1e:	f012 fd6d 	bl	80237fc <snprintf>
 8010d22:	6478      	str	r0, [r7, #68]	@ 0x44
            ( void ) copied_len;
            /* These should never evaluate to false since the buffers are both shorter than 5-6 characters (<=65535) */
            configASSERT( copied_len >= 0 );                                /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 8010d24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	da04      	bge.n	8010d34 <vTCPNetStat_TCPSocket+0x68>
 8010d2a:	f241 61df 	movw	r1, #5855	@ 0x16df
 8010d2e:	4837      	ldr	r0, [pc, #220]	@ (8010e0c <vTCPNetStat_TCPSocket+0x140>)
 8010d30:	f7f0 fe6a 	bl	8001a08 <vAssertCalled>
            configASSERT( copied_len < ( int32_t ) sizeof( ucChildText ) ); /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 8010d34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010d36:	2b0f      	cmp	r3, #15
 8010d38:	dd04      	ble.n	8010d44 <vTCPNetStat_TCPSocket+0x78>
 8010d3a:	f44f 51b7 	mov.w	r1, #5856	@ 0x16e0
 8010d3e:	4833      	ldr	r0, [pc, #204]	@ (8010e0c <vTCPNetStat_TCPSocket+0x140>)
 8010d40:	f7f0 fe62 	bl	8001a08 <vAssertCalled>
        }

        if( age > 999999U )
 8010d44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d46:	4a32      	ldr	r2, [pc, #200]	@ (8010e10 <vTCPNetStat_TCPSocket+0x144>)
 8010d48:	4293      	cmp	r3, r2
 8010d4a:	d901      	bls.n	8010d50 <vTCPNetStat_TCPSocket+0x84>
        {
            age = 999999U;
 8010d4c:	4b30      	ldr	r3, [pc, #192]	@ (8010e10 <vTCPNetStat_TCPSocket+0x144>)
 8010d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	7a1b      	ldrb	r3, [r3, #8]
 8010d54:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8010d58:	b2db      	uxtb	r3, r3
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d002      	beq.n	8010d64 <vTCPNetStat_TCPSocket+0x98>
 8010d5e:	2b01      	cmp	r3, #1
 8010d60:	d009      	beq.n	8010d76 <vTCPNetStat_TCPSocket+0xaa>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* MISRA 16.4 Compliance */
                break;
 8010d62:	e011      	b.n	8010d88 <vTCPNetStat_TCPSocket+0xbc>
                    ( void ) snprintf( pcRemoteIp, sizeof( pcRemoteIp ), "%xip", ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010d68:	f107 001c 	add.w	r0, r7, #28
 8010d6c:	4a29      	ldr	r2, [pc, #164]	@ (8010e14 <vTCPNetStat_TCPSocket+0x148>)
 8010d6e:	2128      	movs	r1, #40	@ 0x28
 8010d70:	f012 fd44 	bl	80237fc <snprintf>
                    break;
 8010d74:	e008      	b.n	8010d88 <vTCPNetStat_TCPSocket+0xbc>
                                       "%pip", ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes );
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	3354      	adds	r3, #84	@ 0x54
                    ( void ) snprintf( pcRemoteIp,
 8010d7a:	f107 001c 	add.w	r0, r7, #28
 8010d7e:	4a26      	ldr	r2, [pc, #152]	@ (8010e18 <vTCPNetStat_TCPSocket+0x14c>)
 8010d80:	2128      	movs	r1, #40	@ 0x28
 8010d82:	f012 fd3b 	bl	80237fc <snprintf>
                    break;
 8010d86:	bf00      	nop
        }

        FreeRTOS_printf( ( "TCP %5d %-*s:%5d %d/%d %-13.13s %6u %6u%s\n",
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010d8c:	4698      	mov	r8, r3
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010d94:	461c      	mov	r4, r3
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	bf14      	ite	ne
 8010da0:	2301      	movne	r3, #1
 8010da2:	2300      	moveq	r3, #0
 8010da4:	b2db      	uxtb	r3, r3
 8010da6:	461d      	mov	r5, r3
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	bf14      	ite	ne
 8010db2:	2301      	movne	r3, #1
 8010db4:	2300      	moveq	r3, #0
 8010db6:	b2db      	uxtb	r3, r3
 8010db8:	461e      	mov	r6, r3
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f002 fbf5 	bl	80135b0 <FreeRTOS_GetTCPStateName>
 8010dc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010dc8:	4a11      	ldr	r2, [pc, #68]	@ (8010e10 <vTCPNetStat_TCPSocket+0x144>)
 8010dca:	4293      	cmp	r3, r2
 8010dcc:	bf28      	it	cs
 8010dce:	4613      	movcs	r3, r2
 8010dd0:	687a      	ldr	r2, [r7, #4]
 8010dd2:	f8b2 2070 	ldrh.w	r2, [r2, #112]	@ 0x70
 8010dd6:	603a      	str	r2, [r7, #0]
 8010dd8:	f107 011c 	add.w	r1, r7, #28
 8010ddc:	f107 020c 	add.w	r2, r7, #12
 8010de0:	9206      	str	r2, [sp, #24]
 8010de2:	683a      	ldr	r2, [r7, #0]
 8010de4:	9205      	str	r2, [sp, #20]
 8010de6:	9304      	str	r3, [sp, #16]
 8010de8:	9003      	str	r0, [sp, #12]
 8010dea:	9602      	str	r6, [sp, #8]
 8010dec:	9501      	str	r5, [sp, #4]
 8010dee:	9400      	str	r4, [sp, #0]
 8010df0:	460b      	mov	r3, r1
 8010df2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010df4:	4641      	mov	r1, r8
 8010df6:	4809      	ldr	r0, [pc, #36]	@ (8010e1c <vTCPNetStat_TCPSocket+0x150>)
 8010df8:	f011 fcd4 	bl	80227a4 <lUDPLoggingPrintf>
                           ( pxSocket->u.xTCP.txStream != NULL ) ? 1 : 0,
                           FreeRTOS_GetTCPStateName( pxSocket->u.xTCP.eTCPState ),
                           ( unsigned ) ( ( age > 999999U ) ? 999999U : age ), /* Format 'age' for printing */
                           pxSocket->u.xTCP.usTimeout,
                           ucChildText ) );
    }
 8010dfc:	bf00      	nop
 8010dfe:	3750      	adds	r7, #80	@ 0x50
 8010e00:	46bd      	mov	sp, r7
 8010e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e06:	bf00      	nop
 8010e08:	08026744 	.word	0x08026744
 8010e0c:	08026264 	.word	0x08026264
 8010e10:	000f423f 	.word	0x000f423f
 8010e14:	0802674c 	.word	0x0802674c
 8010e18:	08026754 	.word	0x08026754
 8010e1c:	0802675c 	.word	0x0802675c

08010e20 <vTCPNetStat>:

/**
 * @brief Print a summary of all sockets and their connections.
 */
    void vTCPNetStat( void )
    {
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b08a      	sub	sp, #40	@ 0x28
 8010e24:	af02      	add	r7, sp, #8
        /* Show a simple listing of all created sockets and their connections */
        const ListItem_t * pxIterator;
        BaseType_t count = 0;
 8010e26:	2300      	movs	r3, #0
 8010e28:	61bb      	str	r3, [r7, #24]
        size_t uxMinimum = uxGetMinimumFreeNetworkBuffers();
 8010e2a:	f006 fe59 	bl	8017ae0 <uxGetMinimumFreeNetworkBuffers>
 8010e2e:	6178      	str	r0, [r7, #20]
        size_t uxCurrent = uxGetNumberOfFreeNetworkBuffers();
 8010e30:	f006 fe62 	bl	8017af8 <uxGetNumberOfFreeNetworkBuffers>
 8010e34:	6138      	str	r0, [r7, #16]

        if( !listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) )
 8010e36:	4b26      	ldr	r3, [pc, #152]	@ (8010ed0 <vTCPNetStat+0xb0>)
 8010e38:	689b      	ldr	r3, [r3, #8]
 8010e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e3e:	d003      	beq.n	8010e48 <vTCPNetStat+0x28>
        {
            FreeRTOS_printf( ( "PLUS-TCP not initialized\n" ) );
 8010e40:	4824      	ldr	r0, [pc, #144]	@ (8010ed4 <vTCPNetStat+0xb4>)
 8010e42:	f011 fcaf 	bl	80227a4 <lUDPLoggingPrintf>
                               ( int ) count,
                               ( unsigned ) uxMinimum,
                               ( unsigned ) uxCurrent,
                               ( unsigned ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) );
        }
    }
 8010e46:	e03f      	b.n	8010ec8 <vTCPNetStat+0xa8>
            const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 8010e48:	4b23      	ldr	r3, [pc, #140]	@ (8010ed8 <vTCPNetStat+0xb8>)
 8010e4a:	60fb      	str	r3, [r7, #12]
            const ListItem_t * pxEndUDP = listGET_END_MARKER( &xBoundUDPSocketsList );
 8010e4c:	4b23      	ldr	r3, [pc, #140]	@ (8010edc <vTCPNetStat+0xbc>)
 8010e4e:	60bb      	str	r3, [r7, #8]
            FreeRTOS_printf( ( "Prot Port IP-Remote       : Port  R/T Status       Alive  tmout Child\n" ) );
 8010e50:	4823      	ldr	r0, [pc, #140]	@ (8010ee0 <vTCPNetStat+0xc0>)
 8010e52:	f011 fca7 	bl	80227a4 <lUDPLoggingPrintf>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8010e56:	4b1e      	ldr	r3, [pc, #120]	@ (8010ed0 <vTCPNetStat+0xb0>)
 8010e58:	68db      	ldr	r3, [r3, #12]
 8010e5a:	61fb      	str	r3, [r7, #28]
 8010e5c:	e00b      	b.n	8010e76 <vTCPNetStat+0x56>
                const FreeRTOS_Socket_t * pxSocket = ( ( const FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8010e5e:	69fb      	ldr	r3, [r7, #28]
 8010e60:	68db      	ldr	r3, [r3, #12]
 8010e62:	607b      	str	r3, [r7, #4]
                vTCPNetStat_TCPSocket( pxSocket );
 8010e64:	6878      	ldr	r0, [r7, #4]
 8010e66:	f7ff ff31 	bl	8010ccc <vTCPNetStat_TCPSocket>
                count++;
 8010e6a:	69bb      	ldr	r3, [r7, #24]
 8010e6c:	3301      	adds	r3, #1
 8010e6e:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 8010e70:	69fb      	ldr	r3, [r7, #28]
 8010e72:	685b      	ldr	r3, [r3, #4]
 8010e74:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndTCP;
 8010e76:	69fa      	ldr	r2, [r7, #28]
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	429a      	cmp	r2, r3
 8010e7c:	d1ef      	bne.n	8010e5e <vTCPNetStat+0x3e>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 8010e7e:	4b19      	ldr	r3, [pc, #100]	@ (8010ee4 <vTCPNetStat+0xc4>)
 8010e80:	68db      	ldr	r3, [r3, #12]
 8010e82:	61fb      	str	r3, [r7, #28]
 8010e84:	e014      	b.n	8010eb0 <vTCPNetStat+0x90>
                FreeRTOS_printf( ( "UDP Port %5u\n",
 8010e86:	69fb      	ldr	r3, [r7, #28]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	b29b      	uxth	r3, r3
 8010e8c:	021b      	lsls	r3, r3, #8
 8010e8e:	b29a      	uxth	r2, r3
 8010e90:	69fb      	ldr	r3, [r7, #28]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	0a1b      	lsrs	r3, r3, #8
 8010e96:	b29b      	uxth	r3, r3
 8010e98:	4313      	orrs	r3, r2
 8010e9a:	b29b      	uxth	r3, r3
 8010e9c:	4619      	mov	r1, r3
 8010e9e:	4812      	ldr	r0, [pc, #72]	@ (8010ee8 <vTCPNetStat+0xc8>)
 8010ea0:	f011 fc80 	bl	80227a4 <lUDPLoggingPrintf>
                count++;
 8010ea4:	69bb      	ldr	r3, [r7, #24]
 8010ea6:	3301      	adds	r3, #1
 8010ea8:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 8010eaa:	69fb      	ldr	r3, [r7, #28]
 8010eac:	685b      	ldr	r3, [r3, #4]
 8010eae:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndUDP;
 8010eb0:	69fa      	ldr	r2, [r7, #28]
 8010eb2:	68bb      	ldr	r3, [r7, #8]
 8010eb4:	429a      	cmp	r2, r3
 8010eb6:	d1e6      	bne.n	8010e86 <vTCPNetStat+0x66>
            FreeRTOS_printf( ( "FreeRTOS_netstat: %d sockets %u < %u < %u buffers free\n",
 8010eb8:	2340      	movs	r3, #64	@ 0x40
 8010eba:	9300      	str	r3, [sp, #0]
 8010ebc:	693b      	ldr	r3, [r7, #16]
 8010ebe:	697a      	ldr	r2, [r7, #20]
 8010ec0:	69b9      	ldr	r1, [r7, #24]
 8010ec2:	480a      	ldr	r0, [pc, #40]	@ (8010eec <vTCPNetStat+0xcc>)
 8010ec4:	f011 fc6e 	bl	80227a4 <lUDPLoggingPrintf>
    }
 8010ec8:	bf00      	nop
 8010eca:	3720      	adds	r7, #32
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	bd80      	pop	{r7, pc}
 8010ed0:	20001608 	.word	0x20001608
 8010ed4:	08026788 	.word	0x08026788
 8010ed8:	20001610 	.word	0x20001610
 8010edc:	200015fc 	.word	0x200015fc
 8010ee0:	080267a4 	.word	0x080267a4
 8010ee4:	200015f4 	.word	0x200015f4
 8010ee8:	080267ec 	.word	0x080267ec
 8010eec:	080267fc 	.word	0x080267fc

08010ef0 <vSocketSelectTCP>:
 *
 * @param[in] pxSocket The socket which needs to be checked.
 * @return An event mask of events that are active for this socket.
 */
        static EventBits_t vSocketSelectTCP( FreeRTOS_Socket_t * pxSocket )
        {
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b086      	sub	sp, #24
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
            /* Check if the TCP socket has already been accepted by
             * the owner.  If not, it is useless to return it from a
             * select(). */
            BaseType_t bAccepted = pdFALSE;
 8010ef8:	2300      	movs	r3, #0
 8010efa:	617b      	str	r3, [r7, #20]
            EventBits_t xSocketBits = 0U;
 8010efc:	2300      	movs	r3, #0
 8010efe:	613b      	str	r3, [r7, #16]

            if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010f06:	f003 0304 	and.w	r3, r3, #4
 8010f0a:	b2db      	uxtb	r3, r3
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d109      	bne.n	8010f24 <vSocketSelectTCP+0x34>
            {
                if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010f16:	f003 0302 	and.w	r3, r3, #2
 8010f1a:	b2db      	uxtb	r3, r3
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d101      	bne.n	8010f24 <vSocketSelectTCP+0x34>
                {
                    bAccepted = pdTRUE;
 8010f20:	2301      	movs	r3, #1
 8010f22:	617b      	str	r3, [r7, #20]
                }
            }

            /* Is the set owner interested in READ events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != ( EventBits_t ) 0U )
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010f28:	f003 0301 	and.w	r3, r3, #1
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d038      	beq.n	8010fa2 <vSocketSelectTCP+0xb2>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010f36:	2b01      	cmp	r3, #1
 8010f38:	d111      	bne.n	8010f5e <vSocketSelectTCP+0x6e>
                {
                    if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d02f      	beq.n	8010fa2 <vSocketSelectTCP+0xb2>
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010f46:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010f4a:	f003 0302 	and.w	r3, r3, #2
 8010f4e:	b2db      	uxtb	r3, r3
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d026      	beq.n	8010fa2 <vSocketSelectTCP+0xb2>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 8010f54:	693b      	ldr	r3, [r7, #16]
 8010f56:	f043 0301 	orr.w	r3, r3, #1
 8010f5a:	613b      	str	r3, [r7, #16]
 8010f5c:	e021      	b.n	8010fa2 <vSocketSelectTCP+0xb2>
                    }
                }
                else if( ( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010f64:	f003 0308 	and.w	r3, r3, #8
 8010f68:	b2db      	uxtb	r3, r3
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d00c      	beq.n	8010f88 <vSocketSelectTCP+0x98>
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010f74:	f003 0302 	and.w	r3, r3, #2
 8010f78:	b2db      	uxtb	r3, r3
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d004      	beq.n	8010f88 <vSocketSelectTCP+0x98>
                {
                    /* This socket has the re-use flag. After connecting it turns into
                     * a connected socket. Set the READ event, so that accept() will be called. */
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 8010f7e:	693b      	ldr	r3, [r7, #16]
 8010f80:	f043 0301 	orr.w	r3, r3, #1
 8010f84:	613b      	str	r3, [r7, #16]
 8010f86:	e00c      	b.n	8010fa2 <vSocketSelectTCP+0xb2>
                }
                else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 8010f88:	697b      	ldr	r3, [r7, #20]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d009      	beq.n	8010fa2 <vSocketSelectTCP+0xb2>
 8010f8e:	6878      	ldr	r0, [r7, #4]
 8010f90:	f7ff fe62 	bl	8010c58 <FreeRTOS_rx_size>
 8010f94:	4603      	mov	r3, r0
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	dd03      	ble.n	8010fa2 <vSocketSelectTCP+0xb2>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 8010f9a:	693b      	ldr	r3, [r7, #16]
 8010f9c:	f043 0301 	orr.w	r3, r3, #1
 8010fa0:	613b      	str	r3, [r7, #16]
                    /* Nothing. */
                }
            }

            /* Is the set owner interested in EXCEPTION events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010fa6:	f003 0304 	and.w	r3, r3, #4
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d00d      	beq.n	8010fca <vSocketSelectTCP+0xda>
            {
                if( ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) || ( pxSocket->u.xTCP.eTCPState == eCLOSED ) )
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010fb4:	2b08      	cmp	r3, #8
 8010fb6:	d004      	beq.n	8010fc2 <vSocketSelectTCP+0xd2>
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d103      	bne.n	8010fca <vSocketSelectTCP+0xda>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_EXCEPT;
 8010fc2:	693b      	ldr	r3, [r7, #16]
 8010fc4:	f043 0304 	orr.w	r3, r3, #4
 8010fc8:	613b      	str	r3, [r7, #16]
                }
            }

            /* Is the set owner interested in WRITE events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010fce:	f003 0302 	and.w	r3, r3, #2
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d034      	beq.n	8011040 <vSocketSelectTCP+0x150>
            {
                BaseType_t bMatch = pdFALSE;
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	60fb      	str	r3, [r7, #12]

                if( bAccepted != 0 )
 8010fda:	697b      	ldr	r3, [r7, #20]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d007      	beq.n	8010ff0 <vSocketSelectTCP+0x100>
                {
                    if( FreeRTOS_tx_space( pxSocket ) > 0 )
 8010fe0:	6878      	ldr	r0, [r7, #4]
 8010fe2:	f7ff fdcb 	bl	8010b7c <FreeRTOS_tx_space>
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	dd01      	ble.n	8010ff0 <vSocketSelectTCP+0x100>
                    {
                        bMatch = pdTRUE;
 8010fec:	2301      	movs	r3, #1
 8010fee:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch == pdFALSE )
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d11d      	bne.n	8011032 <vSocketSelectTCP+0x142>
                {
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8010ffc:	f003 0308 	and.w	r3, r3, #8
 8011000:	b2db      	uxtb	r3, r3
 8011002:	2b00      	cmp	r3, #0
 8011004:	d015      	beq.n	8011032 <vSocketSelectTCP+0x142>
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 801100c:	2b04      	cmp	r3, #4
 801100e:	d910      	bls.n	8011032 <vSocketSelectTCP+0x142>
                        ( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8011016:	f003 0310 	and.w	r3, r3, #16
 801101a:	b2db      	uxtb	r3, r3
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 801101c:	2b00      	cmp	r3, #0
 801101e:	d108      	bne.n	8011032 <vSocketSelectTCP+0x142>
                    {
                        pxSocket->u.xTCP.bits.bConnPassed = pdTRUE_UNSIGNED;
 8011020:	687a      	ldr	r2, [r7, #4]
 8011022:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8011026:	f043 0310 	orr.w	r3, r3, #16
 801102a:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                        bMatch = pdTRUE;
 801102e:	2301      	movs	r3, #1
 8011030:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch != pdFALSE )
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d003      	beq.n	8011040 <vSocketSelectTCP+0x150>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_WRITE;
 8011038:	693b      	ldr	r3, [r7, #16]
 801103a:	f043 0302 	orr.w	r3, r3, #2
 801103e:	613b      	str	r3, [r7, #16]
                }
            }

            return xSocketBits;
 8011040:	693b      	ldr	r3, [r7, #16]
        }
 8011042:	4618      	mov	r0, r3
 8011044:	3718      	adds	r7, #24
 8011046:	46bd      	mov	sp, r7
 8011048:	bd80      	pop	{r7, pc}
	...

0801104c <vSocketSelect>:
 *        event has occurred.
 *
 * @param[in] pxSocketSet The socket-set which is to be waited on for change.
 */
    void vSocketSelect( const SocketSelect_t * pxSocketSet )
    {
 801104c:	b580      	push	{r7, lr}
 801104e:	b08a      	sub	sp, #40	@ 0x28
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
        BaseType_t xRound;
        EventBits_t xSocketBits, xBitsToClear;

        #if ipconfigUSE_TCP == 1
            BaseType_t xLastRound = 1;
 8011054:	2301      	movs	r3, #1
 8011056:	613b      	str	r3, [r7, #16]
        #else
            BaseType_t xLastRound = 0;
        #endif

        /* These flags will be switched on after checking the socket status. */
        EventBits_t xGroupBits = 0;
 8011058:	2300      	movs	r3, #0
 801105a:	61fb      	str	r3, [r7, #28]

        for( xRound = 0; xRound <= xLastRound; xRound++ )
 801105c:	2300      	movs	r3, #0
 801105e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011060:	e043      	b.n	80110ea <vSocketSelect+0x9e>
        {
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;

            if( xRound == 0 )
 8011062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011064:	2b00      	cmp	r3, #0
 8011066:	d102      	bne.n	801106e <vSocketSelect+0x22>
            {
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxEnd = ( ( const ListItem_t * ) &( xBoundUDPSocketsList.xListEnd ) );
 8011068:	4b34      	ldr	r3, [pc, #208]	@ (801113c <vSocketSelect+0xf0>)
 801106a:	617b      	str	r3, [r7, #20]
 801106c:	e001      	b.n	8011072 <vSocketSelect+0x26>
                else
                {
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 801106e:	4b34      	ldr	r3, [pc, #208]	@ (8011140 <vSocketSelect+0xf4>)
 8011070:	617b      	str	r3, [r7, #20]
                }
            #endif /* ipconfigUSE_TCP == 1 */

            for( pxIterator = listGET_NEXT( pxEnd );
 8011072:	697b      	ldr	r3, [r7, #20]
 8011074:	685b      	ldr	r3, [r3, #4]
 8011076:	61bb      	str	r3, [r7, #24]
 8011078:	e030      	b.n	80110dc <vSocketSelect+0x90>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 801107a:	69bb      	ldr	r3, [r7, #24]
 801107c:	68db      	ldr	r3, [r3, #12]
 801107e:	60bb      	str	r3, [r7, #8]

                if( pxSocket->pxSocketSet != pxSocketSet )
 8011080:	68bb      	ldr	r3, [r7, #8]
 8011082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011084:	687a      	ldr	r2, [r7, #4]
 8011086:	429a      	cmp	r2, r3
 8011088:	d124      	bne.n	80110d4 <vSocketSelect+0x88>
                {
                    /* Socket does not belong to this select group. */
                    continue;
                }

                xSocketBits = 0;
 801108a:	2300      	movs	r3, #0
 801108c:	623b      	str	r3, [r7, #32]

                #if ( ipconfigUSE_TCP == 1 )
                    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 801108e:	68bb      	ldr	r3, [r7, #8]
 8011090:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8011094:	2b06      	cmp	r3, #6
 8011096:	d107      	bne.n	80110a8 <vSocketSelect+0x5c>
                    {
                        xSocketBits |= vSocketSelectTCP( pxSocket );
 8011098:	68b8      	ldr	r0, [r7, #8]
 801109a:	f7ff ff29 	bl	8010ef0 <vSocketSelectTCP>
 801109e:	4602      	mov	r2, r0
 80110a0:	6a3b      	ldr	r3, [r7, #32]
 80110a2:	4313      	orrs	r3, r2
 80110a4:	623b      	str	r3, [r7, #32]
 80110a6:	e00d      	b.n	80110c4 <vSocketSelect+0x78>
                    }
                    else
                #endif /* ipconfigUSE_TCP == 1 */
                {
                    /* Select events for UDP are simpler. */
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 80110a8:	68bb      	ldr	r3, [r7, #8]
 80110aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110ac:	f003 0301 	and.w	r3, r3, #1
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d007      	beq.n	80110c4 <vSocketSelect+0x78>
                        ( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 80110b4:	68bb      	ldr	r3, [r7, #8]
 80110b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d003      	beq.n	80110c4 <vSocketSelect+0x78>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 80110bc:	6a3b      	ldr	r3, [r7, #32]
 80110be:	f043 0301 	orr.w	r3, r3, #1
 80110c2:	623b      	str	r3, [r7, #32]
                    /* The WRITE and EXCEPT bits are not used for UDP */
                } /* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

                /* Each socket keeps its own event flags, which are looked-up
                 * by FreeRTOS_FD_ISSSET() */
                pxSocket->xSocketBits = xSocketBits;
 80110c4:	68bb      	ldr	r3, [r7, #8]
 80110c6:	6a3a      	ldr	r2, [r7, #32]
 80110c8:	649a      	str	r2, [r3, #72]	@ 0x48

                /* The ORed value will be used to set the bits in the event
                 * group. */
                xGroupBits |= xSocketBits;
 80110ca:	69fa      	ldr	r2, [r7, #28]
 80110cc:	6a3b      	ldr	r3, [r7, #32]
 80110ce:	4313      	orrs	r3, r2
 80110d0:	61fb      	str	r3, [r7, #28]
 80110d2:	e000      	b.n	80110d6 <vSocketSelect+0x8a>
                    continue;
 80110d4:	bf00      	nop
                 pxIterator = listGET_NEXT( pxIterator ) )
 80110d6:	69bb      	ldr	r3, [r7, #24]
 80110d8:	685b      	ldr	r3, [r3, #4]
 80110da:	61bb      	str	r3, [r7, #24]
                 pxIterator != pxEnd;
 80110dc:	69ba      	ldr	r2, [r7, #24]
 80110de:	697b      	ldr	r3, [r7, #20]
 80110e0:	429a      	cmp	r2, r3
 80110e2:	d1ca      	bne.n	801107a <vSocketSelect+0x2e>
        for( xRound = 0; xRound <= xLastRound; xRound++ )
 80110e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110e6:	3301      	adds	r3, #1
 80110e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80110ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80110ec:	693b      	ldr	r3, [r7, #16]
 80110ee:	429a      	cmp	r2, r3
 80110f0:	ddb7      	ble.n	8011062 <vSocketSelect+0x16>
            } /* for( pxIterator ... ) */
        }     /* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

        xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	2100      	movs	r1, #0
 80110f8:	4618      	mov	r0, r3
 80110fa:	f7f2 fa5f 	bl	80035bc <xEventGroupClearBits>
 80110fe:	60f8      	str	r0, [r7, #12]

        /* Now set the necessary bits. */
        xBitsToClear = ( xBitsToClear & ~xGroupBits ) & ( ( EventBits_t ) eSELECT_ALL );
 8011100:	69fb      	ldr	r3, [r7, #28]
 8011102:	43da      	mvns	r2, r3
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	4013      	ands	r3, r2
 8011108:	f003 030f 	and.w	r3, r3, #15
 801110c:	60fb      	str	r3, [r7, #12]
             * and cleared in FreeRTOS_select(). */
            xBitsToClear &= ~( ( EventBits_t ) eSELECT_INTR );
        }
        #endif /* ipconfigSUPPORT_SIGNALS */

        if( xBitsToClear != 0U )
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d005      	beq.n	8011120 <vSocketSelect+0xd4>
        {
            ( void ) xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	68f9      	ldr	r1, [r7, #12]
 801111a:	4618      	mov	r0, r3
 801111c:	f7f2 fa4e 	bl	80035bc <xEventGroupClearBits>
        }

        /* Now include eSELECT_CALL_IP to wakeup the caller. */
        ( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	681a      	ldr	r2, [r3, #0]
 8011124:	69fb      	ldr	r3, [r7, #28]
 8011126:	f043 0310 	orr.w	r3, r3, #16
 801112a:	4619      	mov	r1, r3
 801112c:	4610      	mov	r0, r2
 801112e:	f7f2 fa73 	bl	8003618 <xEventGroupSetBits>
    }
 8011132:	bf00      	nop
 8011134:	3728      	adds	r7, #40	@ 0x28
 8011136:	46bd      	mov	sp, r7
 8011138:	bd80      	pop	{r7, pc}
 801113a:	bf00      	nop
 801113c:	200015fc 	.word	0x200015fc
 8011140:	20001610 	.word	0x20001610

08011144 <uxStreamBufferSpace>:
 *         minus 1.
 */
size_t uxStreamBufferSpace( const StreamBuffer_t * const pxBuffer,
                            size_t uxLower,
                            size_t uxUpper )
{
 8011144:	b480      	push	{r7}
 8011146:	b087      	sub	sp, #28
 8011148:	af00      	add	r7, sp, #0
 801114a:	60f8      	str	r0, [r7, #12]
 801114c:	60b9      	str	r1, [r7, #8]
 801114e:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	691b      	ldr	r3, [r3, #16]
 8011154:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower - 1U;
 8011156:	693a      	ldr	r2, [r7, #16]
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	441a      	add	r2, r3
 801115c:	68bb      	ldr	r3, [r7, #8]
 801115e:	1ad3      	subs	r3, r2, r3
 8011160:	3b01      	subs	r3, #1
 8011162:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 8011164:	697a      	ldr	r2, [r7, #20]
 8011166:	693b      	ldr	r3, [r7, #16]
 8011168:	429a      	cmp	r2, r3
 801116a:	d303      	bcc.n	8011174 <uxStreamBufferSpace+0x30>
    {
        uxCount -= uxLength;
 801116c:	697a      	ldr	r2, [r7, #20]
 801116e:	693b      	ldr	r3, [r7, #16]
 8011170:	1ad3      	subs	r3, r2, r3
 8011172:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 8011174:	697b      	ldr	r3, [r7, #20]
}
 8011176:	4618      	mov	r0, r3
 8011178:	371c      	adds	r7, #28
 801117a:	46bd      	mov	sp, r7
 801117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011180:	4770      	bx	lr

08011182 <uxStreamBufferDistance>:
 * @return The distance between uxLower and uxUpper.
 */
size_t uxStreamBufferDistance( const StreamBuffer_t * const pxBuffer,
                               size_t uxLower,
                               size_t uxUpper )
{
 8011182:	b480      	push	{r7}
 8011184:	b087      	sub	sp, #28
 8011186:	af00      	add	r7, sp, #0
 8011188:	60f8      	str	r0, [r7, #12]
 801118a:	60b9      	str	r1, [r7, #8]
 801118c:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	691b      	ldr	r3, [r3, #16]
 8011192:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower;
 8011194:	693a      	ldr	r2, [r7, #16]
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	441a      	add	r2, r3
 801119a:	68bb      	ldr	r3, [r7, #8]
 801119c:	1ad3      	subs	r3, r2, r3
 801119e:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 80111a0:	697a      	ldr	r2, [r7, #20]
 80111a2:	693b      	ldr	r3, [r7, #16]
 80111a4:	429a      	cmp	r2, r3
 80111a6:	d303      	bcc.n	80111b0 <uxStreamBufferDistance+0x2e>
    {
        uxCount -= uxLength;
 80111a8:	697a      	ldr	r2, [r7, #20]
 80111aa:	693b      	ldr	r3, [r7, #16]
 80111ac:	1ad3      	subs	r3, r2, r3
 80111ae:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 80111b0:	697b      	ldr	r3, [r7, #20]
}
 80111b2:	4618      	mov	r0, r3
 80111b4:	371c      	adds	r7, #28
 80111b6:	46bd      	mov	sp, r7
 80111b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111bc:	4770      	bx	lr

080111be <uxStreamBufferGetSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can still be added to uxHead
 *         before hitting on uxTail
 */
size_t uxStreamBufferGetSpace( const StreamBuffer_t * const pxBuffer )
{
 80111be:	b580      	push	{r7, lr}
 80111c0:	b082      	sub	sp, #8
 80111c2:	af00      	add	r7, sp, #0
 80111c4:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxHead, pxBuffer->uxTail );
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	6899      	ldr	r1, [r3, #8]
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	461a      	mov	r2, r3
 80111d0:	6878      	ldr	r0, [r7, #4]
 80111d2:	f7ff ffb7 	bl	8011144 <uxStreamBufferSpace>
 80111d6:	4603      	mov	r3, r0
}
 80111d8:	4618      	mov	r0, r3
 80111da:	3708      	adds	r7, #8
 80111dc:	46bd      	mov	sp, r7
 80111de:	bd80      	pop	{r7, pc}

080111e0 <uxStreamBufferFrontSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return Distance between uxFront and uxTail or the number of items
 *         which can still be added to uxFront, before hitting on uxTail.
 */
size_t uxStreamBufferFrontSpace( const StreamBuffer_t * const pxBuffer )
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b082      	sub	sp, #8
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxFront, pxBuffer->uxTail );
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	68d9      	ldr	r1, [r3, #12]
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	461a      	mov	r2, r3
 80111f2:	6878      	ldr	r0, [r7, #4]
 80111f4:	f7ff ffa6 	bl	8011144 <uxStreamBufferSpace>
 80111f8:	4603      	mov	r3, r0
}
 80111fa:	4618      	mov	r0, r3
 80111fc:	3708      	adds	r7, #8
 80111fe:	46bd      	mov	sp, r7
 8011200:	bd80      	pop	{r7, pc}

08011202 <uxStreamBufferGetSize>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can be read from the tail before
 *        reaching the head.
 */
size_t uxStreamBufferGetSize( const StreamBuffer_t * const pxBuffer )
{
 8011202:	b580      	push	{r7, lr}
 8011204:	b082      	sub	sp, #8
 8011206:	af00      	add	r7, sp, #0
 8011208:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxTail, pxBuffer->uxHead );
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	6819      	ldr	r1, [r3, #0]
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	689b      	ldr	r3, [r3, #8]
 8011212:	461a      	mov	r2, r3
 8011214:	6878      	ldr	r0, [r7, #4]
 8011216:	f7ff ffb4 	bl	8011182 <uxStreamBufferDistance>
 801121a:	4603      	mov	r3, r0
}
 801121c:	4618      	mov	r0, r3
 801121e:	3708      	adds	r7, #8
 8011220:	46bd      	mov	sp, r7
 8011222:	bd80      	pop	{r7, pc}

08011224 <uxStreamBufferMidSpace>:
 *        buffer.
 * @param[in] pxBuffer The circular stream buffer.
 * @return The space between the mid pointer and the head.
 */
size_t uxStreamBufferMidSpace( const StreamBuffer_t * const pxBuffer )
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b082      	sub	sp, #8
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxMid, pxBuffer->uxHead );
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	6859      	ldr	r1, [r3, #4]
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	689b      	ldr	r3, [r3, #8]
 8011234:	461a      	mov	r2, r3
 8011236:	6878      	ldr	r0, [r7, #4]
 8011238:	f7ff ffa3 	bl	8011182 <uxStreamBufferDistance>
 801123c:	4603      	mov	r3, r0
}
 801123e:	4618      	mov	r0, r3
 8011240:	3708      	adds	r7, #8
 8011242:	46bd      	mov	sp, r7
 8011244:	bd80      	pop	{r7, pc}

08011246 <vStreamBufferClear>:
/**
 * @brief Clear the stream buffer.
 * @param[in] pxBuffer The circular stream buffer.
 */
void vStreamBufferClear( StreamBuffer_t * const pxBuffer )
{
 8011246:	b480      	push	{r7}
 8011248:	b083      	sub	sp, #12
 801124a:	af00      	add	r7, sp, #0
 801124c:	6078      	str	r0, [r7, #4]
    /* Make the circular buffer empty */
    pxBuffer->uxHead = 0U;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	2200      	movs	r2, #0
 8011252:	609a      	str	r2, [r3, #8]
    pxBuffer->uxTail = 0U;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2200      	movs	r2, #0
 8011258:	601a      	str	r2, [r3, #0]
    pxBuffer->uxFront = 0U;
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	2200      	movs	r2, #0
 801125e:	60da      	str	r2, [r3, #12]
    pxBuffer->uxMid = 0U;
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	2200      	movs	r2, #0
 8011264:	605a      	str	r2, [r3, #4]
}
 8011266:	bf00      	nop
 8011268:	370c      	adds	r7, #12
 801126a:	46bd      	mov	sp, r7
 801126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011270:	4770      	bx	lr

08011272 <vStreamBufferMoveMid>:
 * @param[in] pxBuffer The circular stream buffer.
 * @param[in] uxCount The byte count by which the mid pointer is to be moved.
 */
void vStreamBufferMoveMid( StreamBuffer_t * const pxBuffer,
                           const size_t uxCount )
{
 8011272:	b580      	push	{r7, lr}
 8011274:	b086      	sub	sp, #24
 8011276:	af00      	add	r7, sp, #0
 8011278:	6078      	str	r0, [r7, #4]
 801127a:	6039      	str	r1, [r7, #0]
    /* Increment uxMid, but no further than uxHead */
    const size_t uxLength = pxBuffer->LENGTH;
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	691b      	ldr	r3, [r3, #16]
 8011280:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 8011282:	6878      	ldr	r0, [r7, #4]
 8011284:	f7ff ffce 	bl	8011224 <uxStreamBufferMidSpace>
 8011288:	60b8      	str	r0, [r7, #8]
    size_t uxMid = pxBuffer->uxMid;
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	685b      	ldr	r3, [r3, #4]
 801128e:	617b      	str	r3, [r7, #20]
    size_t uxMoveCount = uxCount;
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	613b      	str	r3, [r7, #16]

    if( uxMoveCount > uxSize )
 8011294:	693a      	ldr	r2, [r7, #16]
 8011296:	68bb      	ldr	r3, [r7, #8]
 8011298:	429a      	cmp	r2, r3
 801129a:	d901      	bls.n	80112a0 <vStreamBufferMoveMid+0x2e>
    {
        uxMoveCount = uxSize;
 801129c:	68bb      	ldr	r3, [r7, #8]
 801129e:	613b      	str	r3, [r7, #16]
    }

    uxMid += uxMoveCount;
 80112a0:	697a      	ldr	r2, [r7, #20]
 80112a2:	693b      	ldr	r3, [r7, #16]
 80112a4:	4413      	add	r3, r2
 80112a6:	617b      	str	r3, [r7, #20]

    if( uxMid >= uxLength )
 80112a8:	697a      	ldr	r2, [r7, #20]
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	429a      	cmp	r2, r3
 80112ae:	d303      	bcc.n	80112b8 <vStreamBufferMoveMid+0x46>
    {
        uxMid -= uxLength;
 80112b0:	697a      	ldr	r2, [r7, #20]
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	1ad3      	subs	r3, r2, r3
 80112b6:	617b      	str	r3, [r7, #20]
    }

    pxBuffer->uxMid = uxMid;
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	697a      	ldr	r2, [r7, #20]
 80112bc:	605a      	str	r2, [r3, #4]
}
 80112be:	bf00      	nop
 80112c0:	3718      	adds	r7, #24
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bd80      	pop	{r7, pc}

080112c6 <xStreamBufferLessThenEqual>:
 * @return pdTRUE if uxLeft <= uxRight, else pdFALSE.
 */
BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t * const pxBuffer,
                                       size_t uxLeft,
                                       size_t uxRight )
{
 80112c6:	b480      	push	{r7}
 80112c8:	b087      	sub	sp, #28
 80112ca:	af00      	add	r7, sp, #0
 80112cc:	60f8      	str	r0, [r7, #12]
 80112ce:	60b9      	str	r1, [r7, #8]
 80112d0:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80112d2:	2300      	movs	r3, #0
 80112d4:	617b      	str	r3, [r7, #20]
    const size_t uxTail = pxBuffer->uxTail;
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	613b      	str	r3, [r7, #16]

    if( ( uxLeft - uxTail ) <= ( uxRight - uxTail ) )
 80112dc:	68ba      	ldr	r2, [r7, #8]
 80112de:	693b      	ldr	r3, [r7, #16]
 80112e0:	1ad2      	subs	r2, r2, r3
 80112e2:	6879      	ldr	r1, [r7, #4]
 80112e4:	693b      	ldr	r3, [r7, #16]
 80112e6:	1acb      	subs	r3, r1, r3
 80112e8:	429a      	cmp	r2, r3
 80112ea:	d801      	bhi.n	80112f0 <xStreamBufferLessThenEqual+0x2a>
    {
        xReturn = pdTRUE;
 80112ec:	2301      	movs	r3, #1
 80112ee:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80112f0:	697b      	ldr	r3, [r7, #20]
}
 80112f2:	4618      	mov	r0, r3
 80112f4:	371c      	adds	r7, #28
 80112f6:	46bd      	mov	sp, r7
 80112f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fc:	4770      	bx	lr

080112fe <uxStreamBufferGetPtr>:
 *         actual number of available bytes since this is a circular buffer and tail
 *         can loop back to the start of the buffer).
 */
size_t uxStreamBufferGetPtr( StreamBuffer_t * const pxBuffer,
                             uint8_t ** const ppucData )
{
 80112fe:	b580      	push	{r7, lr}
 8011300:	b084      	sub	sp, #16
 8011302:	af00      	add	r7, sp, #0
 8011304:	6078      	str	r0, [r7, #4]
 8011306:	6039      	str	r1, [r7, #0]
    const size_t uxNextTail = pxBuffer->uxTail;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 801130e:	6878      	ldr	r0, [r7, #4]
 8011310:	f7ff ff77 	bl	8011202 <uxStreamBufferGetSize>
 8011314:	60b8      	str	r0, [r7, #8]

    /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
    /* coverity[misra_c_2012_rule_18_4_violation] */
    *ppucData = pxBuffer->ucArray + uxNextTail;
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	f103 0214 	add.w	r2, r3, #20
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	441a      	add	r2, r3
 8011320:	683b      	ldr	r3, [r7, #0]
 8011322:	601a      	str	r2, [r3, #0]

    return FreeRTOS_min_size_t( uxSize, pxBuffer->LENGTH - uxNextTail );
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	691a      	ldr	r2, [r3, #16]
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	1ad3      	subs	r3, r2, r3
 801132c:	4619      	mov	r1, r3
 801132e:	68b8      	ldr	r0, [r7, #8]
 8011330:	f7f9 fdc0 	bl	800aeb4 <FreeRTOS_min_size_t>
 8011334:	4603      	mov	r3, r0
}
 8011336:	4618      	mov	r0, r3
 8011338:	3710      	adds	r7, #16
 801133a:	46bd      	mov	sp, r7
 801133c:	bd80      	pop	{r7, pc}

0801133e <uxStreamBufferAdd>:
 */
size_t uxStreamBufferAdd( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          const uint8_t * const pucData,
                          size_t uxByteCount )
{
 801133e:	b580      	push	{r7, lr}
 8011340:	b08a      	sub	sp, #40	@ 0x28
 8011342:	af00      	add	r7, sp, #0
 8011344:	60f8      	str	r0, [r7, #12]
 8011346:	60b9      	str	r1, [r7, #8]
 8011348:	607a      	str	r2, [r7, #4]
 801134a:	603b      	str	r3, [r7, #0]
    size_t uxCount;
    size_t uxSpace = uxStreamBufferGetSpace( pxBuffer );
 801134c:	68f8      	ldr	r0, [r7, #12]
 801134e:	f7ff ff36 	bl	80111be <uxStreamBufferGetSpace>
 8011352:	6278      	str	r0, [r7, #36]	@ 0x24

    /* If uxOffset > 0, items can be placed in front of uxHead */
    if( uxSpace > uxOffset )
 8011354:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011356:	68bb      	ldr	r3, [r7, #8]
 8011358:	429a      	cmp	r2, r3
 801135a:	d904      	bls.n	8011366 <uxStreamBufferAdd+0x28>
    {
        uxSpace -= uxOffset;
 801135c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801135e:	68bb      	ldr	r3, [r7, #8]
 8011360:	1ad3      	subs	r3, r2, r3
 8011362:	627b      	str	r3, [r7, #36]	@ 0x24
 8011364:	e001      	b.n	801136a <uxStreamBufferAdd+0x2c>
    }
    else
    {
        uxSpace = 0U;
 8011366:	2300      	movs	r3, #0
 8011368:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* The number of bytes that can be written is the minimum of the number of
     * bytes requested and the number available. */
    uxCount = FreeRTOS_min_size_t( uxSpace, uxByteCount );
 801136a:	6839      	ldr	r1, [r7, #0]
 801136c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801136e:	f7f9 fda1 	bl	800aeb4 <FreeRTOS_min_size_t>
 8011372:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 8011374:	69fb      	ldr	r3, [r7, #28]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d05c      	beq.n	8011434 <uxStreamBufferAdd+0xf6>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	691b      	ldr	r3, [r3, #16]
 801137e:	61bb      	str	r3, [r7, #24]
        size_t uxNextHead = pxBuffer->uxHead;
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	689b      	ldr	r3, [r3, #8]
 8011384:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 8011386:	68bb      	ldr	r3, [r7, #8]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d00b      	beq.n	80113a4 <uxStreamBufferAdd+0x66>
        {
            /* ( uxOffset > 0 ) means: write in front if the uxHead marker */
            uxNextHead += uxOffset;
 801138c:	6a3a      	ldr	r2, [r7, #32]
 801138e:	68bb      	ldr	r3, [r7, #8]
 8011390:	4413      	add	r3, r2
 8011392:	623b      	str	r3, [r7, #32]

            if( uxNextHead >= uxLength )
 8011394:	6a3a      	ldr	r2, [r7, #32]
 8011396:	69bb      	ldr	r3, [r7, #24]
 8011398:	429a      	cmp	r2, r3
 801139a:	d303      	bcc.n	80113a4 <uxStreamBufferAdd+0x66>
            {
                uxNextHead -= uxLength;
 801139c:	6a3a      	ldr	r2, [r7, #32]
 801139e:	69bb      	ldr	r3, [r7, #24]
 80113a0:	1ad3      	subs	r3, r2, r3
 80113a2:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d021      	beq.n	80113ee <uxStreamBufferAdd+0xb0>
        {
            /* Calculate the number of bytes that can be added in the first
            * write - which may be less than the total number of bytes that need
            * to be added if the buffer will wrap back to the beginning. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextHead, uxCount );
 80113aa:	69ba      	ldr	r2, [r7, #24]
 80113ac:	6a3b      	ldr	r3, [r7, #32]
 80113ae:	1ad3      	subs	r3, r2, r3
 80113b0:	69f9      	ldr	r1, [r7, #28]
 80113b2:	4618      	mov	r0, r3
 80113b4:	f7f9 fd7e 	bl	800aeb4 <FreeRTOS_min_size_t>
 80113b8:	6178      	str	r0, [r7, #20]

            /* Write as many bytes as can be written in the first write. */
            ( void ) memcpy( &( pxBuffer->ucArray[ uxNextHead ] ), pucData, uxFirst );
 80113ba:	6a3b      	ldr	r3, [r7, #32]
 80113bc:	3310      	adds	r3, #16
 80113be:	68fa      	ldr	r2, [r7, #12]
 80113c0:	4413      	add	r3, r2
 80113c2:	3304      	adds	r3, #4
 80113c4:	697a      	ldr	r2, [r7, #20]
 80113c6:	6879      	ldr	r1, [r7, #4]
 80113c8:	4618      	mov	r0, r3
 80113ca:	f011 fc07 	bl	8022bdc <memcpy>

            /* If the number of bytes written was less than the number that
             * could be written in the first write... */
            if( uxCount > uxFirst )
 80113ce:	69fa      	ldr	r2, [r7, #28]
 80113d0:	697b      	ldr	r3, [r7, #20]
 80113d2:	429a      	cmp	r2, r3
 80113d4:	d90b      	bls.n	80113ee <uxStreamBufferAdd+0xb0>
            {
                /* ...then write the remaining bytes to the start of the
                 * buffer. */
                ( void ) memcpy( pxBuffer->ucArray, &( pucData[ uxFirst ] ), uxCount - uxFirst );
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	f103 0014 	add.w	r0, r3, #20
 80113dc:	687a      	ldr	r2, [r7, #4]
 80113de:	697b      	ldr	r3, [r7, #20]
 80113e0:	18d1      	adds	r1, r2, r3
 80113e2:	69fa      	ldr	r2, [r7, #28]
 80113e4:	697b      	ldr	r3, [r7, #20]
 80113e6:	1ad3      	subs	r3, r2, r3
 80113e8:	461a      	mov	r2, r3
 80113ea:	f011 fbf7 	bl	8022bdc <memcpy>
            }
        }

        /* The below update to the stream buffer members must happen
         * atomically. */
        vTaskSuspendAll();
 80113ee:	f7f3 fb5d 	bl	8004aac <vTaskSuspendAll>
        {
            if( uxOffset == 0U )
 80113f2:	68bb      	ldr	r3, [r7, #8]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d10e      	bne.n	8011416 <uxStreamBufferAdd+0xd8>
            {
                /* ( uxOffset == 0 ) means: write at uxHead position */
                uxNextHead += uxCount;
 80113f8:	6a3a      	ldr	r2, [r7, #32]
 80113fa:	69fb      	ldr	r3, [r7, #28]
 80113fc:	4413      	add	r3, r2
 80113fe:	623b      	str	r3, [r7, #32]

                if( uxNextHead >= uxLength )
 8011400:	6a3a      	ldr	r2, [r7, #32]
 8011402:	69bb      	ldr	r3, [r7, #24]
 8011404:	429a      	cmp	r2, r3
 8011406:	d303      	bcc.n	8011410 <uxStreamBufferAdd+0xd2>
                {
                    uxNextHead -= uxLength;
 8011408:	6a3a      	ldr	r2, [r7, #32]
 801140a:	69bb      	ldr	r3, [r7, #24]
 801140c:	1ad3      	subs	r3, r2, r3
 801140e:	623b      	str	r3, [r7, #32]
                }

                pxBuffer->uxHead = uxNextHead;
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	6a3a      	ldr	r2, [r7, #32]
 8011414:	609a      	str	r2, [r3, #8]
            }

            if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	68db      	ldr	r3, [r3, #12]
 801141a:	6a3a      	ldr	r2, [r7, #32]
 801141c:	4619      	mov	r1, r3
 801141e:	68f8      	ldr	r0, [r7, #12]
 8011420:	f7ff ff51 	bl	80112c6 <xStreamBufferLessThenEqual>
 8011424:	4603      	mov	r3, r0
 8011426:	2b00      	cmp	r3, #0
 8011428:	d002      	beq.n	8011430 <uxStreamBufferAdd+0xf2>
            {
                /* Advance the front pointer */
                pxBuffer->uxFront = uxNextHead;
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	6a3a      	ldr	r2, [r7, #32]
 801142e:	60da      	str	r2, [r3, #12]
            }
        }
        ( void ) xTaskResumeAll();
 8011430:	f7f3 fb4a 	bl	8004ac8 <xTaskResumeAll>
    }

    return uxCount;
 8011434:	69fb      	ldr	r3, [r7, #28]
}
 8011436:	4618      	mov	r0, r3
 8011438:	3728      	adds	r7, #40	@ 0x28
 801143a:	46bd      	mov	sp, r7
 801143c:	bd80      	pop	{r7, pc}

0801143e <uxStreamBufferGet>:
size_t uxStreamBufferGet( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          uint8_t * const pucData,
                          size_t uxMaxCount,
                          BaseType_t xPeek )
{
 801143e:	b580      	push	{r7, lr}
 8011440:	b08a      	sub	sp, #40	@ 0x28
 8011442:	af00      	add	r7, sp, #0
 8011444:	60f8      	str	r0, [r7, #12]
 8011446:	60b9      	str	r1, [r7, #8]
 8011448:	607a      	str	r2, [r7, #4]
 801144a:	603b      	str	r3, [r7, #0]
    size_t uxCount;

    /* How much data is available? */
    size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 801144c:	68f8      	ldr	r0, [r7, #12]
 801144e:	f7ff fed8 	bl	8011202 <uxStreamBufferGetSize>
 8011452:	6278      	str	r0, [r7, #36]	@ 0x24

    if( uxSize > uxOffset )
 8011454:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011456:	68bb      	ldr	r3, [r7, #8]
 8011458:	429a      	cmp	r2, r3
 801145a:	d904      	bls.n	8011466 <uxStreamBufferGet+0x28>
    {
        uxSize -= uxOffset;
 801145c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801145e:	68bb      	ldr	r3, [r7, #8]
 8011460:	1ad3      	subs	r3, r2, r3
 8011462:	627b      	str	r3, [r7, #36]	@ 0x24
 8011464:	e001      	b.n	801146a <uxStreamBufferGet+0x2c>
    }
    else
    {
        uxSize = 0U;
 8011466:	2300      	movs	r3, #0
 8011468:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Use the minimum of the wanted bytes and the available bytes. */
    uxCount = FreeRTOS_min_size_t( uxSize, uxMaxCount );
 801146a:	6839      	ldr	r1, [r7, #0]
 801146c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801146e:	f7f9 fd21 	bl	800aeb4 <FreeRTOS_min_size_t>
 8011472:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 8011474:	69fb      	ldr	r3, [r7, #28]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d04e      	beq.n	8011518 <uxStreamBufferGet+0xda>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	691b      	ldr	r3, [r3, #16]
 801147e:	61bb      	str	r3, [r7, #24]
        size_t uxNextTail = pxBuffer->uxTail;
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 8011486:	68bb      	ldr	r3, [r7, #8]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d00b      	beq.n	80114a4 <uxStreamBufferGet+0x66>
        {
            uxNextTail += uxOffset;
 801148c:	6a3a      	ldr	r2, [r7, #32]
 801148e:	68bb      	ldr	r3, [r7, #8]
 8011490:	4413      	add	r3, r2
 8011492:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 8011494:	6a3a      	ldr	r2, [r7, #32]
 8011496:	69bb      	ldr	r3, [r7, #24]
 8011498:	429a      	cmp	r2, r3
 801149a:	d303      	bcc.n	80114a4 <uxStreamBufferGet+0x66>
            {
                uxNextTail -= uxLength;
 801149c:	6a3a      	ldr	r2, [r7, #32]
 801149e:	69bb      	ldr	r3, [r7, #24]
 80114a0:	1ad3      	subs	r3, r2, r3
 80114a2:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d021      	beq.n	80114ee <uxStreamBufferGet+0xb0>
        {
            /* Calculate the number of bytes that can be read - which may be
             * less than the number wanted if the data wraps around to the start of
             * the buffer. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextTail, uxCount );
 80114aa:	69ba      	ldr	r2, [r7, #24]
 80114ac:	6a3b      	ldr	r3, [r7, #32]
 80114ae:	1ad3      	subs	r3, r2, r3
 80114b0:	69f9      	ldr	r1, [r7, #28]
 80114b2:	4618      	mov	r0, r3
 80114b4:	f7f9 fcfe 	bl	800aeb4 <FreeRTOS_min_size_t>
 80114b8:	6178      	str	r0, [r7, #20]

            /* Obtain the number of bytes it is possible to obtain in the first
             * read. */
            ( void ) memcpy( pucData, &( pxBuffer->ucArray[ uxNextTail ] ), uxFirst );
 80114ba:	6a3b      	ldr	r3, [r7, #32]
 80114bc:	3310      	adds	r3, #16
 80114be:	68fa      	ldr	r2, [r7, #12]
 80114c0:	4413      	add	r3, r2
 80114c2:	3304      	adds	r3, #4
 80114c4:	697a      	ldr	r2, [r7, #20]
 80114c6:	4619      	mov	r1, r3
 80114c8:	6878      	ldr	r0, [r7, #4]
 80114ca:	f011 fb87 	bl	8022bdc <memcpy>

            /* If the total number of wanted bytes is greater than the number
             * that could be read in the first read... */
            if( uxCount > uxFirst )
 80114ce:	69fa      	ldr	r2, [r7, #28]
 80114d0:	697b      	ldr	r3, [r7, #20]
 80114d2:	429a      	cmp	r2, r3
 80114d4:	d90b      	bls.n	80114ee <uxStreamBufferGet+0xb0>
            {
                /* ...then read the remaining bytes from the start of the buffer. */
                ( void ) memcpy( &( pucData[ uxFirst ] ), pxBuffer->ucArray, uxCount - uxFirst );
 80114d6:	687a      	ldr	r2, [r7, #4]
 80114d8:	697b      	ldr	r3, [r7, #20]
 80114da:	18d0      	adds	r0, r2, r3
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	f103 0114 	add.w	r1, r3, #20
 80114e2:	69fa      	ldr	r2, [r7, #28]
 80114e4:	697b      	ldr	r3, [r7, #20]
 80114e6:	1ad3      	subs	r3, r2, r3
 80114e8:	461a      	mov	r2, r3
 80114ea:	f011 fb77 	bl	8022bdc <memcpy>
            }
        }

        if( ( xPeek == pdFALSE ) && ( uxOffset == 0U ) )
 80114ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d111      	bne.n	8011518 <uxStreamBufferGet+0xda>
 80114f4:	68bb      	ldr	r3, [r7, #8]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d10e      	bne.n	8011518 <uxStreamBufferGet+0xda>
        {
            /* Move the tail pointer to effectively remove the data read from
             * the buffer. */
            uxNextTail += uxCount;
 80114fa:	6a3a      	ldr	r2, [r7, #32]
 80114fc:	69fb      	ldr	r3, [r7, #28]
 80114fe:	4413      	add	r3, r2
 8011500:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 8011502:	6a3a      	ldr	r2, [r7, #32]
 8011504:	69bb      	ldr	r3, [r7, #24]
 8011506:	429a      	cmp	r2, r3
 8011508:	d303      	bcc.n	8011512 <uxStreamBufferGet+0xd4>
            {
                uxNextTail -= uxLength;
 801150a:	6a3a      	ldr	r2, [r7, #32]
 801150c:	69bb      	ldr	r3, [r7, #24]
 801150e:	1ad3      	subs	r3, r2, r3
 8011510:	623b      	str	r3, [r7, #32]
            }

            pxBuffer->uxTail = uxNextTail;
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	6a3a      	ldr	r2, [r7, #32]
 8011516:	601a      	str	r2, [r3, #0]
        }
    }

    return uxCount;
 8011518:	69fb      	ldr	r3, [r7, #28]
}
 801151a:	4618      	mov	r0, r3
 801151c:	3728      	adds	r7, #40	@ 0x28
 801151e:	46bd      	mov	sp, r7
 8011520:	bd80      	pop	{r7, pc}
	...

08011524 <vSocketCloseNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketCloseNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 8011524:	b580      	push	{r7, lr}
 8011526:	b082      	sub	sp, #8
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
        if( ( xSocketToClose != NULL ) && ( xSocketToClose != pxSocket ) )
 801152c:	4b0a      	ldr	r3, [pc, #40]	@ (8011558 <vSocketCloseNextTime+0x34>)
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d009      	beq.n	8011548 <vSocketCloseNextTime+0x24>
 8011534:	4b08      	ldr	r3, [pc, #32]	@ (8011558 <vSocketCloseNextTime+0x34>)
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	687a      	ldr	r2, [r7, #4]
 801153a:	429a      	cmp	r2, r3
 801153c:	d004      	beq.n	8011548 <vSocketCloseNextTime+0x24>
        {
            ( void ) vSocketClose( xSocketToClose );
 801153e:	4b06      	ldr	r3, [pc, #24]	@ (8011558 <vSocketCloseNextTime+0x34>)
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	4618      	mov	r0, r3
 8011544:	f7fd fc7a 	bl	800ee3c <vSocketClose>
        }

        xSocketToClose = pxSocket;
 8011548:	4a03      	ldr	r2, [pc, #12]	@ (8011558 <vSocketCloseNextTime+0x34>)
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	6013      	str	r3, [r2, #0]
    }
 801154e:	bf00      	nop
 8011550:	3708      	adds	r7, #8
 8011552:	46bd      	mov	sp, r7
 8011554:	bd80      	pop	{r7, pc}
 8011556:	bf00      	nop
 8011558:	20001620 	.word	0x20001620

0801155c <vSocketListenNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketListenNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 801155c:	b580      	push	{r7, lr}
 801155e:	b082      	sub	sp, #8
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
        if( ( xSocketToListen != NULL ) && ( xSocketToListen != pxSocket ) )
 8011564:	4b0c      	ldr	r3, [pc, #48]	@ (8011598 <vSocketListenNextTime+0x3c>)
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d00e      	beq.n	801158a <vSocketListenNextTime+0x2e>
 801156c:	4b0a      	ldr	r3, [pc, #40]	@ (8011598 <vSocketListenNextTime+0x3c>)
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	687a      	ldr	r2, [r7, #4]
 8011572:	429a      	cmp	r2, r3
 8011574:	d009      	beq.n	801158a <vSocketListenNextTime+0x2e>
        {
            ( void ) FreeRTOS_listen( ( Socket_t ) xSocketToListen, ( BaseType_t ) ( xSocketToListen->u.xTCP.usBacklog ) );
 8011576:	4b08      	ldr	r3, [pc, #32]	@ (8011598 <vSocketListenNextTime+0x3c>)
 8011578:	681a      	ldr	r2, [r3, #0]
 801157a:	4b07      	ldr	r3, [pc, #28]	@ (8011598 <vSocketListenNextTime+0x3c>)
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8011582:	4619      	mov	r1, r3
 8011584:	4610      	mov	r0, r2
 8011586:	f7fe fff3 	bl	8010570 <FreeRTOS_listen>
        }

        xSocketToListen = pxSocket;
 801158a:	4a03      	ldr	r2, [pc, #12]	@ (8011598 <vSocketListenNextTime+0x3c>)
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	6013      	str	r3, [r2, #0]
    }
 8011590:	bf00      	nop
 8011592:	3708      	adds	r7, #8
 8011594:	46bd      	mov	sp, r7
 8011596:	bd80      	pop	{r7, pc}
 8011598:	20001624 	.word	0x20001624

0801159c <xTCPSocketCheck>:
 *      prvTCPSendRepeated()            // Send at most 8 messages on a row
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
 */
    BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t * pxSocket )
    {
 801159c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115a0:	b086      	sub	sp, #24
 80115a2:	af02      	add	r7, sp, #8
 80115a4:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = 0;
 80115a6:	2300      	movs	r3, #0
 80115a8:	60fb      	str	r3, [r7, #12]
        BaseType_t xReady = pdFALSE;
 80115aa:	2300      	movs	r3, #0
 80115ac:	60bb      	str	r3, [r7, #8]

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80115b4:	2b04      	cmp	r3, #4
 80115b6:	d907      	bls.n	80115c8 <xTCPSocketCheck+0x2c>
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d002      	beq.n	80115c8 <xTCPSocketCheck+0x2c>
        {
            /* The API FreeRTOS_send() might have added data to the TX stream.  Add
             * this data to the windowing system so it can be transmitted. */
            prvTCPAddTxData( pxSocket );
 80115c2:	6878      	ldr	r0, [r7, #4]
 80115c4:	f003 f834 	bl	8014630 <prvTCPAddTxData>
        }

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( pxSocket->u.xTCP.pxAckMessage != NULL )
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d05f      	beq.n	8011692 <xTCPSocketCheck+0xf6>
            {
                /* The first task of this regular socket check is to send-out delayed
                 * ACK's. */
                if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80115d8:	f003 0320 	and.w	r3, r3, #32
 80115dc:	b2db      	uxtb	r3, r3
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d148      	bne.n	8011674 <xTCPSocketCheck+0xd8>
                {
                    /* Earlier data was received but not yet acknowledged.  This
                     * function is called when the TCP timer for the socket expires, the
                     * ACK may be sent now. */
                    if( pxSocket->u.xTCP.eTCPState != eCLOSED )
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d03b      	beq.n	8011664 <xTCPSocketCheck+0xc8>
                    {
                        if( ( xTCPWindowLoggingLevel > 1 ) && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 80115ec:	4b37      	ldr	r3, [pc, #220]	@ (80116cc <xTCPSocketCheck+0x130>)
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	2b01      	cmp	r3, #1
 80115f2:	dd25      	ble.n	8011640 <xTCPSocketCheck+0xa4>
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80115f8:	2b17      	cmp	r3, #23
 80115fa:	d021      	beq.n	8011640 <xTCPSocketCheck+0xa4>
                        {
                            FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %u SEQ %u (len %u)\n",
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011600:	461e      	mov	r6, r3
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011608:	4698      	mov	r8, r3
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8011616:	1ad5      	subs	r5, r2, r3
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8011624:	1ad4      	subs	r4, r2, r3
 8011626:	6878      	ldr	r0, [r7, #4]
 8011628:	f7f8 ff00 	bl	800a42c <uxIPHeaderSizeSocket>
 801162c:	4603      	mov	r3, r0
 801162e:	3314      	adds	r3, #20
 8011630:	9301      	str	r3, [sp, #4]
 8011632:	9400      	str	r4, [sp, #0]
 8011634:	462b      	mov	r3, r5
 8011636:	4642      	mov	r2, r8
 8011638:	4631      	mov	r1, r6
 801163a:	4825      	ldr	r0, [pc, #148]	@ (80116d0 <xTCPSocketCheck+0x134>)
 801163c:	f011 f8b2 	bl	80227a4 <lUDPLoggingPrintf>
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) ) );
                        }

                        prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ( uint32_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ), ipconfigZERO_COPY_TX_DRIVER );
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 8011646:	6878      	ldr	r0, [r7, #4]
 8011648:	f7f8 fef0 	bl	800a42c <uxIPHeaderSizeSocket>
 801164c:	4603      	mov	r3, r0
 801164e:	f103 0214 	add.w	r2, r3, #20
 8011652:	2301      	movs	r3, #1
 8011654:	4621      	mov	r1, r4
 8011656:	6878      	ldr	r0, [r7, #4]
 8011658:	f002 fac8 	bl	8013bec <prvTCPReturnPacket>

                        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                        {
                            /* The ownership has been passed to the SEND routine,
                             * clear the pointer to it. */
                            pxSocket->u.xTCP.pxAckMessage = NULL;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	2200      	movs	r2, #0
 8011660:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                        }
                        #endif /* ipconfigZERO_COPY_TX_DRIVER */
                    }

                    if( prvTCPNextTimeout( pxSocket ) > 1U )
 8011664:	6878      	ldr	r0, [r7, #4]
 8011666:	f000 faa1 	bl	8011bac <prvTCPNextTimeout>
 801166a:	4603      	mov	r3, r0
 801166c:	2b01      	cmp	r3, #1
 801166e:	d901      	bls.n	8011674 <xTCPSocketCheck+0xd8>
                    {
                        /* Tell the code below that this function is ready. */
                        xReady = pdTRUE;
 8011670:	2301      	movs	r3, #1
 8011672:	60bb      	str	r3, [r7, #8]
                    /* The user wants to perform an active shutdown(), skip sending
                     * the delayed ACK.  The function prvTCPSendPacket() will send the
                     * FIN along with the ACK's. */
                }

                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801167a:	2b00      	cmp	r3, #0
 801167c:	d009      	beq.n	8011692 <xTCPSocketCheck+0xf6>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011684:	4618      	mov	r0, r3
 8011686:	f006 f9e5 	bl	8017a54 <vReleaseNetworkBufferAndDescriptor>
                    pxSocket->u.xTCP.pxAckMessage = NULL;
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	2200      	movs	r2, #0
 801168e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                }
            }
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xReady == pdFALSE )
 8011692:	68bb      	ldr	r3, [r7, #8]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d113      	bne.n	80116c0 <xTCPSocketCheck+0x124>
        {
            /* The second task of this regular socket check is sending out data. */
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801169e:	2b04      	cmp	r3, #4
 80116a0:	d804      	bhi.n	80116ac <xTCPSocketCheck+0x110>
                ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) )
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 80116a8:	2b02      	cmp	r3, #2
 80116aa:	d102      	bne.n	80116b2 <xTCPSocketCheck+0x116>
            {
                ( void ) prvTCPSendPacket( pxSocket );
 80116ac:	6878      	ldr	r0, [r7, #4]
 80116ae:	f002 f9ff 	bl	8013ab0 <prvTCPSendPacket>
            }

            /* Set the time-out for the next wakeup for this socket. */
            ( void ) prvTCPNextTimeout( pxSocket );
 80116b2:	6878      	ldr	r0, [r7, #4]
 80116b4:	f000 fa7a 	bl	8011bac <prvTCPNextTimeout>

            #if ( ipconfigTCP_HANG_PROTECTION == 1 )
            {
                /* In all (non-connected) states in which keep-alive messages can not be sent
                 * the anti-hang protocol will close sockets that are 'hanging'. */
                xResult = prvTCPStatusAgeCheck( pxSocket );
 80116b8:	6878      	ldr	r0, [r7, #4]
 80116ba:	f001 f973 	bl	80129a4 <prvTCPStatusAgeCheck>
 80116be:	60f8      	str	r0, [r7, #12]
            }
            #endif
        }

        return xResult;
 80116c0:	68fb      	ldr	r3, [r7, #12]
    }
 80116c2:	4618      	mov	r0, r3
 80116c4:	3710      	adds	r7, #16
 80116c6:	46bd      	mov	sp, r7
 80116c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116cc:	2000164c 	.word	0x2000164c
 80116d0:	08026834 	.word	0x08026834

080116d4 <prvTCPTouchSocket>:
 * @note This is used for anti-hanging protection and TCP keep-alive messages.
 *       Called in two places: after receiving a packet and after a state change.
 *       The socket's alive timer may be reset.
 */
    void prvTCPTouchSocket( struct xSOCKET * pxSocket )
    {
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b082      	sub	sp, #8
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
        #if ( ipconfigTCP_HANG_PROTECTION == 1 )
        {
            pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 80116dc:	f7f3 faf8 	bl	8004cd0 <xTaskGetTickCount>
 80116e0:	4602      	mov	r2, r0
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        }
        #endif

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
        {
            pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 80116e8:	687a      	ldr	r2, [r7, #4]
 80116ea:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80116ee:	f36f 0382 	bfc	r3, #2, #1
 80116f2:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 80116f6:	687a      	ldr	r2, [r7, #4]
 80116f8:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80116fc:	f36f 0341 	bfc	r3, #1, #1
 8011700:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.ucKeepRepCount = 0U;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	2200      	movs	r2, #0
 8011708:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 801170c:	f7f3 fae0 	bl	8004cd0 <xTaskGetTickCount>
 8011710:	4602      	mov	r2, r0
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        }
        #endif

        ( void ) pxSocket;
    }
 8011718:	bf00      	nop
 801171a:	3708      	adds	r7, #8
 801171c:	46bd      	mov	sp, r7
 801171e:	bd80      	pop	{r7, pc}

08011720 <vTCPRemoveTCPChild>:
    /*-----------------------------------------------------------*/

    static BaseType_t vTCPRemoveTCPChild( const FreeRTOS_Socket_t * pxChildSocket )
    {
 8011720:	b480      	push	{r7}
 8011722:	b087      	sub	sp, #28
 8011724:	af00      	add	r7, sp, #0
 8011726:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8011728:	2300      	movs	r3, #0
 801172a:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 801172c:	4b15      	ldr	r3, [pc, #84]	@ (8011784 <vTCPRemoveTCPChild+0x64>)
 801172e:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8011730:	4b15      	ldr	r3, [pc, #84]	@ (8011788 <vTCPRemoveTCPChild+0x68>)
 8011732:	68db      	ldr	r3, [r3, #12]
 8011734:	613b      	str	r3, [r7, #16]

        while( pxIterator != pxEnd )
 8011736:	e01a      	b.n	801176e <vTCPRemoveTCPChild+0x4e>
        {
            FreeRTOS_Socket_t * pxSocket;
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8011738:	693b      	ldr	r3, [r7, #16]
 801173a:	68db      	ldr	r3, [r3, #12]
 801173c:	60bb      	str	r3, [r7, #8]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 801173e:	693b      	ldr	r3, [r7, #16]
 8011740:	685b      	ldr	r3, [r3, #4]
 8011742:	613b      	str	r3, [r7, #16]

            if( ( pxSocket != pxChildSocket ) && ( pxSocket->usLocalPort == pxChildSocket->usLocalPort ) )
 8011744:	68ba      	ldr	r2, [r7, #8]
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	429a      	cmp	r2, r3
 801174a:	d010      	beq.n	801176e <vTCPRemoveTCPChild+0x4e>
 801174c:	68bb      	ldr	r3, [r7, #8]
 801174e:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011754:	429a      	cmp	r2, r3
 8011756:	d10a      	bne.n	801176e <vTCPRemoveTCPChild+0x4e>
            {
                if( pxSocket->u.xTCP.pxPeerSocket == pxChildSocket ) /**< for server socket: child, for child socket: parent */
 8011758:	68bb      	ldr	r3, [r7, #8]
 801175a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801175c:	687a      	ldr	r2, [r7, #4]
 801175e:	429a      	cmp	r2, r3
 8011760:	d105      	bne.n	801176e <vTCPRemoveTCPChild+0x4e>
                {
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 8011762:	68bb      	ldr	r3, [r7, #8]
 8011764:	2200      	movs	r2, #0
 8011766:	67da      	str	r2, [r3, #124]	@ 0x7c
                    xReturn = pdTRUE;
 8011768:	2301      	movs	r3, #1
 801176a:	617b      	str	r3, [r7, #20]
                    break;
 801176c:	e003      	b.n	8011776 <vTCPRemoveTCPChild+0x56>
        while( pxIterator != pxEnd )
 801176e:	693a      	ldr	r2, [r7, #16]
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	429a      	cmp	r2, r3
 8011774:	d1e0      	bne.n	8011738 <vTCPRemoveTCPChild+0x18>
                }
            }
        }

        return xReturn;
 8011776:	697b      	ldr	r3, [r7, #20]
    }
 8011778:	4618      	mov	r0, r3
 801177a:	371c      	adds	r7, #28
 801177c:	46bd      	mov	sp, r7
 801177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011782:	4770      	bx	lr
 8011784:	20001610 	.word	0x20001610
 8011788:	20001608 	.word	0x20001608

0801178c <vTCPStateChange>:
 * @param[in] pxSocket The socket whose state we are trying to change.
 * @param[in] eTCPState The state to which we want to change to.
 */
    void vTCPStateChange( FreeRTOS_Socket_t * pxSocket,
                          enum eTCP_STATE eTCPState )
    {
 801178c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801178e:	b097      	sub	sp, #92	@ 0x5c
 8011790:	af02      	add	r7, sp, #8
 8011792:	6078      	str	r0, [r7, #4]
 8011794:	460b      	mov	r3, r1
 8011796:	70fb      	strb	r3, [r7, #3]
        FreeRTOS_Socket_t * xParent = pxSocket;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	64fb      	str	r3, [r7, #76]	@ 0x4c
        BaseType_t bBefore = tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.eTCPState ); /* Was it connected ? */
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80117a2:	2b04      	cmp	r3, #4
 80117a4:	d906      	bls.n	80117b4 <vTCPStateChange+0x28>
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80117ac:	2b08      	cmp	r3, #8
 80117ae:	d001      	beq.n	80117b4 <vTCPStateChange+0x28>
 80117b0:	2301      	movs	r3, #1
 80117b2:	e000      	b.n	80117b6 <vTCPStateChange+0x2a>
 80117b4:	2300      	movs	r3, #0
 80117b6:	64bb      	str	r3, [r7, #72]	@ 0x48
        BaseType_t bAfter = tcpNOW_CONNECTED( ( BaseType_t ) eTCPState );                   /* Is it connected now ? */
 80117b8:	78fb      	ldrb	r3, [r7, #3]
 80117ba:	2b04      	cmp	r3, #4
 80117bc:	d904      	bls.n	80117c8 <vTCPStateChange+0x3c>
 80117be:	78fb      	ldrb	r3, [r7, #3]
 80117c0:	2b08      	cmp	r3, #8
 80117c2:	d001      	beq.n	80117c8 <vTCPStateChange+0x3c>
 80117c4:	2301      	movs	r3, #1
 80117c6:	e000      	b.n	80117ca <vTCPStateChange+0x3e>
 80117c8:	2300      	movs	r3, #0
 80117ca:	63bb      	str	r3, [r7, #56]	@ 0x38

        eIPTCPState_t xPreviousState = pxSocket->u.xTCP.eTCPState;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80117d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        #if ( ipconfigUSE_CALLBACKS == 1 )
            FreeRTOS_Socket_t * xConnected = NULL;
 80117d6:	2300      	movs	r3, #0
 80117d8:	647b      	str	r3, [r7, #68]	@ 0x44
        #endif

        if( ( ( xPreviousState == eCONNECT_SYN ) ||
 80117da:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80117de:	2b02      	cmp	r3, #2
 80117e0:	d007      	beq.n	80117f2 <vTCPStateChange+0x66>
 80117e2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80117e6:	2b03      	cmp	r3, #3
 80117e8:	d003      	beq.n	80117f2 <vTCPStateChange+0x66>
              ( xPreviousState == eSYN_FIRST ) ||
 80117ea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80117ee:	2b04      	cmp	r3, #4
 80117f0:	d114      	bne.n	801181c <vTCPStateChange+0x90>
              ( xPreviousState == eSYN_RECEIVED ) ) &&
 80117f2:	78fb      	ldrb	r3, [r7, #3]
 80117f4:	2b08      	cmp	r3, #8
 80117f6:	d111      	bne.n	801181c <vTCPStateChange+0x90>
            ( eTCPState == eCLOSE_WAIT ) )
        {
            /* A socket was in the connecting phase but something
             * went wrong and it should be closed. */
            #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                FreeRTOS_debug_printf( ( "Move from %s to %s\n",
 80117f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80117fc:	4618      	mov	r0, r3
 80117fe:	f001 fed7 	bl	80135b0 <FreeRTOS_GetTCPStateName>
 8011802:	4604      	mov	r4, r0
 8011804:	78fb      	ldrb	r3, [r7, #3]
 8011806:	4618      	mov	r0, r3
 8011808:	f001 fed2 	bl	80135b0 <FreeRTOS_GetTCPStateName>
 801180c:	4603      	mov	r3, r0
 801180e:	461a      	mov	r2, r3
 8011810:	4621      	mov	r1, r4
 8011812:	4875      	ldr	r0, [pc, #468]	@ (80119e8 <vTCPStateChange+0x25c>)
 8011814:	f010 ffc6 	bl	80227a4 <lUDPLoggingPrintf>
            #endif

            /* Set the flag to show that it was connected before and that the
             * status has changed now. This will cause the control flow to go
             * in the below if condition.*/
            bBefore = pdTRUE;
 8011818:	2301      	movs	r3, #1
 801181a:	64bb      	str	r3, [r7, #72]	@ 0x48
        }

        /* Has the connected status changed? */
        if( bBefore != bAfter )
 801181c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801181e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011820:	429a      	cmp	r2, r3
 8011822:	f000 809f 	beq.w	8011964 <vTCPStateChange+0x1d8>
        {
            /* if bPassQueued is true, this socket is an orphan until it gets connected. */
            if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801182c:	f003 0304 	and.w	r3, r3, #4
 8011830:	b2db      	uxtb	r3, r3
 8011832:	2b00      	cmp	r3, #0
 8011834:	d012      	beq.n	801185c <vTCPStateChange+0xd0>
            {
                /* Find it's parent if the reuse bit is not set. */
                if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801183c:	f003 0308 	and.w	r3, r3, #8
 8011840:	b2db      	uxtb	r3, r3
 8011842:	2b00      	cmp	r3, #0
 8011844:	d10a      	bne.n	801185c <vTCPStateChange+0xd0>
                {
                    xParent = pxSocket->u.xTCP.pxPeerSocket;
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801184a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    configASSERT( xParent != NULL );
 801184c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801184e:	2b00      	cmp	r3, #0
 8011850:	d104      	bne.n	801185c <vTCPStateChange+0xd0>
 8011852:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 8011856:	4865      	ldr	r0, [pc, #404]	@ (80119ec <vTCPStateChange+0x260>)
 8011858:	f7f0 f8d6 	bl	8001a08 <vAssertCalled>
                }
            }

            /* Is the socket connected now ? */
            if( bAfter != pdFALSE )
 801185c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801185e:	2b00      	cmp	r3, #0
 8011860:	d057      	beq.n	8011912 <vTCPStateChange+0x186>
            {
                /* if bPassQueued is true, this socket is an orphan until it gets connected. */
                if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011868:	f003 0304 	and.w	r3, r3, #4
 801186c:	b2db      	uxtb	r3, r3
 801186e:	2b00      	cmp	r3, #0
 8011870:	d03c      	beq.n	80118ec <vTCPStateChange+0x160>
                {
                    if( xParent != NULL )
 8011872:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011874:	2b00      	cmp	r3, #0
 8011876:	d027      	beq.n	80118c8 <vTCPStateChange+0x13c>
                        /* The child socket has got connected.  See if the parent
                         * ( the listening socket ) should be signalled, or if a
                         * call-back must be made, in which case 'xConnected' will
                         * be set to the parent socket. */

                        if( xParent->u.xTCP.pxPeerSocket == NULL )
 8011878:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801187a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801187c:	2b00      	cmp	r3, #0
 801187e:	d102      	bne.n	8011886 <vTCPStateChange+0xfa>
                        {
                            xParent->u.xTCP.pxPeerSocket = pxSocket;
 8011880:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011882:	687a      	ldr	r2, [r7, #4]
 8011884:	67da      	str	r2, [r3, #124]	@ 0x7c
                        }

                        xParent->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 8011886:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	f043 0204 	orr.w	r2, r3, #4
 801188e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011890:	601a      	str	r2, [r3, #0]

                        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                        {
                            /* Library support FreeRTOS_select().  Receiving a new
                             * connection is being translated as a READ event. */
                            if( ( xParent->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U )
 8011892:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011896:	f003 0301 	and.w	r3, r3, #1
 801189a:	2b00      	cmp	r3, #0
 801189c:	d005      	beq.n	80118aa <vTCPStateChange+0x11e>
                            {
                                xParent->xEventBits |= ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT;
 801189e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80118a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118a8:	601a      	str	r2, [r3, #0]
                        }
                        #endif

                        #if ( ipconfigUSE_CALLBACKS == 1 )
                        {
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 80118aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118ac:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d009      	beq.n	80118c8 <vTCPStateChange+0x13c>
                                ( xParent->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) )
 80118b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118b6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80118ba:	f003 0308 	and.w	r3, r3, #8
 80118be:	b2db      	uxtb	r3, r3
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d101      	bne.n	80118c8 <vTCPStateChange+0x13c>
                            {
                                /* The listening socket does not become connected itself, in stead
                                 * a child socket is created.
                                 * Postpone a call the OnConnect event until the end of this function. */
                                xConnected = xParent;
 80118c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118c6:	647b      	str	r3, [r7, #68]	@ 0x44
                        #endif
                    }

                    /* Don't need to access the parent socket anymore, so the
                     * reference 'pxPeerSocket' may be cleared. */
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	2200      	movs	r2, #0
 80118cc:	67da      	str	r2, [r3, #124]	@ 0x7c
                    pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 80118ce:	687a      	ldr	r2, [r7, #4]
 80118d0:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80118d4:	f36f 0382 	bfc	r3, #2, #1
 80118d8:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

                    /* When true, this socket may be returned in a call to accept(). */
                    pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 80118dc:	687a      	ldr	r2, [r7, #4]
 80118de:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80118e2:	f043 0302 	orr.w	r3, r3, #2
 80118e6:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 80118ea:	e024      	b.n	8011936 <vTCPStateChange+0x1aa>
                else
                {
                    /* An active connect() has succeeded. In this case there is no
                     * ( listening ) parent socket. Signal the now connected socket. */

                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CONNECT;
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	f043 0208 	orr.w	r2, r3, #8
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	601a      	str	r2, [r3, #0]

                    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80118fc:	f003 0302 	and.w	r3, r3, #2
 8011900:	2b00      	cmp	r3, #0
 8011902:	d018      	beq.n	8011936 <vTCPStateChange+0x1aa>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	601a      	str	r2, [r3, #0]
 8011910:	e011      	b.n	8011936 <vTCPStateChange+0x1aa>
                }
            }
            else /* bAfter == pdFALSE, connection is closed. */
            {
                /* Notify/wake-up the socket-owner by setting the event bits. */
                xParent->xEventBits |= ( EventBits_t ) eSOCKET_CLOSED;
 8011912:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	f043 0220 	orr.w	r2, r3, #32
 801191a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801191c:	601a      	str	r2, [r3, #0]

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( xParent->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 801191e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011922:	f003 0304 	and.w	r3, r3, #4
 8011926:	2b00      	cmp	r3, #0
 8011928:	d005      	beq.n	8011936 <vTCPStateChange+0x1aa>
                    {
                        xParent->xEventBits |= ( ( EventBits_t ) eSELECT_EXCEPT ) << SOCKET_EVENT_BIT_COUNT;
 801192a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8011932:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011934:	601a      	str	r2, [r3, #0]
                #endif
            }

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 801193c:	2b00      	cmp	r3, #0
 801193e:	d004      	beq.n	801194a <vTCPStateChange+0x1be>
 8011940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011942:	2b00      	cmp	r3, #0
 8011944:	d101      	bne.n	801194a <vTCPStateChange+0x1be>
                {
                    /* The 'connected' state has changed, call the user handler. */
                    xConnected = pxSocket;
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	647b      	str	r3, [r7, #68]	@ 0x44
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            if( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == 0 )
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011950:	4618      	mov	r0, r3
 8011952:	f000 ffff 	bl	8012954 <prvTCPSocketIsActive>
 8011956:	4603      	mov	r3, r0
 8011958:	2b00      	cmp	r3, #0
 801195a:	d103      	bne.n	8011964 <vTCPStateChange+0x1d8>
            {
                /* Now the socket isn't in an active state anymore so it
                 * won't need further attention of the IP-task.
                 * Setting time-out to zero means that the socket won't get checked during
                 * timer events. */
                pxSocket->u.xTCP.usTimeout = 0U;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	2200      	movs	r2, #0
 8011960:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            }
        }

        /* Fill in the new state. */
        pxSocket->u.xTCP.eTCPState = eTCPState;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	78fa      	ldrb	r2, [r7, #3]
 8011968:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79

        if( ( eTCPState == eCLOSED ) ||
 801196c:	78fb      	ldrb	r3, [r7, #3]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d003      	beq.n	801197a <vTCPStateChange+0x1ee>
 8011972:	78fb      	ldrb	r3, [r7, #3]
 8011974:	2b08      	cmp	r3, #8
 8011976:	f040 8084 	bne.w	8011a82 <vTCPStateChange+0x2f6>
            ( eTCPState == eCLOSE_WAIT ) )
        {
            BaseType_t xMustClear = pdFALSE;
 801197a:	2300      	movs	r3, #0
 801197c:	643b      	str	r3, [r7, #64]	@ 0x40
            BaseType_t xHasCleared = pdFALSE;
 801197e:	2300      	movs	r3, #0
 8011980:	63fb      	str	r3, [r7, #60]	@ 0x3c

            if( ( xParent == pxSocket ) && ( pxSocket->u.xTCP.pxPeerSocket != NULL ) )
 8011982:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	429a      	cmp	r2, r3
 8011988:	d106      	bne.n	8011998 <vTCPStateChange+0x20c>
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801198e:	2b00      	cmp	r3, #0
 8011990:	d002      	beq.n	8011998 <vTCPStateChange+0x20c>
            {
                xParent = pxSocket->u.xTCP.pxPeerSocket;
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011996:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 8011998:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801199a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801199c:	2b00      	cmp	r3, #0
 801199e:	d006      	beq.n	80119ae <vTCPStateChange+0x222>
                ( xParent->u.xTCP.pxPeerSocket == pxSocket ) )
 80119a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80119a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 80119a4:	687a      	ldr	r2, [r7, #4]
 80119a6:	429a      	cmp	r2, r3
 80119a8:	d101      	bne.n	80119ae <vTCPStateChange+0x222>
            {
                xMustClear = pdTRUE;
 80119aa:	2301      	movs	r3, #1
 80119ac:	643b      	str	r3, [r7, #64]	@ 0x40
                ( void ) xMustClear;
            }

            /* Socket goes to status eCLOSED because of a RST.
             * When nobody owns the socket yet, delete it. */
            FreeRTOS_printf( ( "vTCPStateChange: Closing (Queued %d, Accept %d Reuse %d)\n",
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80119b4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80119b8:	b2db      	uxtb	r3, r3
 80119ba:	4619      	mov	r1, r3
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80119c2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80119c6:	b2db      	uxtb	r3, r3
 80119c8:	461a      	mov	r2, r3
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80119d0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80119d4:	b2db      	uxtb	r3, r3
 80119d6:	4806      	ldr	r0, [pc, #24]	@ (80119f0 <vTCPStateChange+0x264>)
 80119d8:	f010 fee4 	bl	80227a4 <lUDPLoggingPrintf>
                               pxSocket->u.xTCP.bits.bPassQueued,
                               pxSocket->u.xTCP.bits.bPassAccept,
                               pxSocket->u.xTCP.bits.bReuseSocket ) );
            FreeRTOS_printf( ( "vTCPStateChange: me %p parent %p peer %p clear %d\n",
 80119dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d008      	beq.n	80119f4 <vTCPStateChange+0x268>
 80119e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80119e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80119e6:	e006      	b.n	80119f6 <vTCPStateChange+0x26a>
 80119e8:	08026860 	.word	0x08026860
 80119ec:	08026874 	.word	0x08026874
 80119f0:	080268a4 	.word	0x080268a4
 80119f4:	2300      	movs	r3, #0
 80119f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80119f8:	9200      	str	r2, [sp, #0]
 80119fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80119fc:	6879      	ldr	r1, [r7, #4]
 80119fe:	4865      	ldr	r0, [pc, #404]	@ (8011b94 <vTCPStateChange+0x408>)
 8011a00:	f010 fed0 	bl	80227a4 <lUDPLoggingPrintf>
                               ( void * ) pxSocket,
                               ( void * ) xParent,
                               xParent ? ( void * ) xParent->u.xTCP.pxPeerSocket : NULL,
                               ( int ) xMustClear ) );

            vTaskSuspendAll();
 8011a04:	f7f3 f852 	bl	8004aac <vTaskSuspendAll>
            {
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011a0e:	f003 0304 	and.w	r3, r3, #4
 8011a12:	b2db      	uxtb	r3, r3
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d107      	bne.n	8011a28 <vTCPStateChange+0x29c>
                    ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011a1e:	f003 0302 	and.w	r3, r3, #2
 8011a22:	b2db      	uxtb	r3, r3
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d026      	beq.n	8011a76 <vTCPStateChange+0x2ea>
                {
                    if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011a2e:	f003 0308 	and.w	r3, r3, #8
 8011a32:	b2db      	uxtb	r3, r3
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d11e      	bne.n	8011a76 <vTCPStateChange+0x2ea>
                    {
                        xHasCleared = vTCPRemoveTCPChild( pxSocket );
 8011a38:	6878      	ldr	r0, [r7, #4]
 8011a3a:	f7ff fe71 	bl	8011720 <vTCPRemoveTCPChild>
 8011a3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
                        ( void ) xHasCleared;

                        pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 8011a40:	687a      	ldr	r2, [r7, #4]
 8011a42:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8011a46:	f36f 0382 	bfc	r3, #2, #1
 8011a4a:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                        pxSocket->u.xTCP.bits.bPassAccept = pdFALSE_UNSIGNED;
 8011a4e:	687a      	ldr	r2, [r7, #4]
 8011a50:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8011a54:	f36f 0341 	bfc	r3, #1, #1
 8011a58:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                        configASSERT( xIsCallingFromIPTask() != pdFALSE );
 8011a5c:	f7f9 f85a 	bl	800ab14 <xIsCallingFromIPTask>
 8011a60:	4603      	mov	r3, r0
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d104      	bne.n	8011a70 <vTCPStateChange+0x2e4>
 8011a66:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8011a6a:	484b      	ldr	r0, [pc, #300]	@ (8011b98 <vTCPStateChange+0x40c>)
 8011a6c:	f7ef ffcc 	bl	8001a08 <vAssertCalled>
                        vSocketCloseNextTime( pxSocket );
 8011a70:	6878      	ldr	r0, [r7, #4]
 8011a72:	f7ff fd57 	bl	8011524 <vSocketCloseNextTime>
                    }
                }
            }
            ( void ) xTaskResumeAll();
 8011a76:	f7f3 f827 	bl	8004ac8 <xTaskResumeAll>
            FreeRTOS_printf( ( "vTCPStateChange: xHasCleared = %d\n",
 8011a7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011a7c:	4847      	ldr	r0, [pc, #284]	@ (8011b9c <vTCPStateChange+0x410>)
 8011a7e:	f010 fe91 	bl	80227a4 <lUDPLoggingPrintf>
                               ( int ) xHasCleared ) );
        }

        if( ( eTCPState == eCLOSE_WAIT ) && ( pxSocket->u.xTCP.bits.bReuseSocket == pdTRUE_UNSIGNED ) )
 8011a82:	78fb      	ldrb	r3, [r7, #3]
 8011a84:	2b08      	cmp	r3, #8
 8011a86:	d11b      	bne.n	8011ac0 <vTCPStateChange+0x334>
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011a8e:	f003 0308 	and.w	r3, r3, #8
 8011a92:	b2db      	uxtb	r3, r3
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d013      	beq.n	8011ac0 <vTCPStateChange+0x334>
        {
            switch( xPreviousState )
 8011a98:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011a9c:	3b03      	subs	r3, #3
 8011a9e:	2b01      	cmp	r3, #1
 8011aa0:	d80d      	bhi.n	8011abe <vTCPStateChange+0x332>
            {
                case eSYN_FIRST:    /* 3 (server) Just created, must ACK the SYN request */
                case eSYN_RECEIVED: /* 4 (server) waiting for a confirming connection request */
                    FreeRTOS_debug_printf( ( "Restoring a reuse socket port %u\n", pxSocket->usLocalPort ) );
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011aa6:	4619      	mov	r1, r3
 8011aa8:	483d      	ldr	r0, [pc, #244]	@ (8011ba0 <vTCPStateChange+0x414>)
 8011aaa:	f010 fe7b 	bl	80227a4 <lUDPLoggingPrintf>

                    /* Go back into listening mode. Set the TCP status to 'eCLOSED',
                     * otherwise FreeRTOS_listen() will refuse the action. */
                    pxSocket->u.xTCP.eTCPState = eCLOSED;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79

                    /* vSocketListenNextTime() makes sure that FreeRTOS_listen() will be called
                     * before the IP-task handles any new message. */
                    vSocketListenNextTime( pxSocket );
 8011ab6:	6878      	ldr	r0, [r7, #4]
 8011ab8:	f7ff fd50 	bl	801155c <vSocketListenNextTime>
                    break;
 8011abc:	e000      	b.n	8011ac0 <vTCPStateChange+0x334>

                default:
                    /* Nothing to do. */
                    break;
 8011abe:	bf00      	nop
            }
        }

        /* Touch the alive timers because moving to another state. */
        prvTCPTouchSocket( pxSocket );
 8011ac0:	6878      	ldr	r0, [r7, #4]
 8011ac2:	f7ff fe07 	bl	80116d4 <prvTCPTouchSocket>

        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        {
            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 8011ac6:	4b37      	ldr	r3, [pc, #220]	@ (8011ba4 <vTCPStateChange+0x418>)
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	db4f      	blt.n	8011b6e <vTCPStateChange+0x3e2>
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011ad2:	2b17      	cmp	r3, #23
 8011ad4:	d04b      	beq.n	8011b6e <vTCPStateChange+0x3e2>
            {
                char pcBuffer[ 40 ];

                switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	7a1b      	ldrb	r3, [r3, #8]
 8011ada:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8011ade:	b2db      	uxtb	r3, r3
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d002      	beq.n	8011aea <vTCPStateChange+0x35e>
 8011ae4:	2b01      	cmp	r3, #1
 8011ae6:	d01d      	beq.n	8011b24 <vTCPStateChange+0x398>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:   /* LCOV_EXCL_LINE */
                        /* MISRA 16.4 Compliance */
                        break; /* LCOV_EXCL_LINE */
 8011ae8:	e026      	b.n	8011b38 <vTCPStateChange+0x3ac>
                               uint32_t ulIPAddress = FreeRTOS_ntohl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011aee:	061a      	lsls	r2, r3, #24
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011af4:	021b      	lsls	r3, r3, #8
 8011af6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011afa:	431a      	orrs	r2, r3
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011b00:	0a1b      	lsrs	r3, r3, #8
 8011b02:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011b06:	431a      	orrs	r2, r3
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011b0c:	0e1b      	lsrs	r3, r3, #24
 8011b0e:	4313      	orrs	r3, r2
 8011b10:	633b      	str	r3, [r7, #48]	@ 0x30
                               FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
 8011b12:	f107 0208 	add.w	r2, r7, #8
 8011b16:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8011b1a:	2328      	movs	r3, #40	@ 0x28
 8011b1c:	2002      	movs	r0, #2
 8011b1e:	f7fd ff09 	bl	800f934 <FreeRTOS_inet_ntop>
                           break;
 8011b22:	e009      	b.n	8011b38 <vTCPStateChange+0x3ac>
                                                pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	f103 0154 	add.w	r1, r3, #84	@ 0x54
                            FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
 8011b2a:	f107 0208 	add.w	r2, r7, #8
 8011b2e:	2328      	movs	r3, #40	@ 0x28
 8011b30:	200a      	movs	r0, #10
 8011b32:	f7fd feff 	bl	800f934 <FreeRTOS_inet_ntop>
                            break;
 8011b36:	bf00      	nop
                }

                FreeRTOS_debug_printf( ( "Socket %u -> [%s]:%u State %s->%s\n",
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011b3c:	461d      	mov	r5, r3
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011b44:	461e      	mov	r6, r3
 8011b46:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	f001 fd30 	bl	80135b0 <FreeRTOS_GetTCPStateName>
 8011b50:	4604      	mov	r4, r0
 8011b52:	78fb      	ldrb	r3, [r7, #3]
 8011b54:	4618      	mov	r0, r3
 8011b56:	f001 fd2b 	bl	80135b0 <FreeRTOS_GetTCPStateName>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	f107 0208 	add.w	r2, r7, #8
 8011b60:	9301      	str	r3, [sp, #4]
 8011b62:	9400      	str	r4, [sp, #0]
 8011b64:	4633      	mov	r3, r6
 8011b66:	4629      	mov	r1, r5
 8011b68:	480f      	ldr	r0, [pc, #60]	@ (8011ba8 <vTCPStateChange+0x41c>)
 8011b6a:	f010 fe1b 	bl	80227a4 <lUDPLoggingPrintf>
        }
        #endif /* ipconfigHAS_DEBUG_PRINTF */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            if( xConnected != NULL )
 8011b6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d005      	beq.n	8011b80 <vTCPStateChange+0x3f4>
            {
                /* The 'connected' state has changed, call the OnConnect handler of the parent. */
                xConnected->u.xTCP.pxHandleConnected( ( Socket_t ) xConnected, bAfter );
 8011b74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b76:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8011b7a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011b7c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011b7e:	4798      	blx	r3
            }
        }
        #endif

        if( xParent != NULL )
 8011b80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d002      	beq.n	8011b8c <vTCPStateChange+0x400>
        {
            vSocketWakeUpUser( xParent );
 8011b86:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8011b88:	f7fd ff53 	bl	800fa32 <vSocketWakeUpUser>
        }
    }
 8011b8c:	bf00      	nop
 8011b8e:	3754      	adds	r7, #84	@ 0x54
 8011b90:	46bd      	mov	sp, r7
 8011b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b94:	080268e0 	.word	0x080268e0
 8011b98:	08026874 	.word	0x08026874
 8011b9c:	08026914 	.word	0x08026914
 8011ba0:	08026938 	.word	0x08026938
 8011ba4:	2000164c 	.word	0x2000164c
 8011ba8:	0802695c 	.word	0x0802695c

08011bac <prvTCPNextTimeout>:
 * @param[in] pxSocket The socket to be checked.
 *
 * @return The number of clock ticks before the timer expires.
 */
    TickType_t prvTCPNextTimeout( struct xSOCKET * pxSocket )
    {
 8011bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011bb0:	b098      	sub	sp, #96	@ 0x60
 8011bb2:	af02      	add	r7, sp, #8
 8011bb4:	64f8      	str	r0, [r7, #76]	@ 0x4c
        TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 8011bb6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8011bba:	653b      	str	r3, [r7, #80]	@ 0x50

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8011bbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011bbe:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011bc2:	2b02      	cmp	r3, #2
 8011bc4:	f040 80cc 	bne.w	8011d60 <prvTCPNextTimeout+0x1b4>
        {
            /* The socket is actively connecting to a peer. */
            if( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED )
 8011bc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011bca:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8011bce:	f003 0308 	and.w	r3, r3, #8
 8011bd2:	b2db      	uxtb	r3, r3
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d01a      	beq.n	8011c0e <prvTCPNextTimeout+0x62>
            {
                /* Ethernet address has been found, use progressive timeout for
                 * active connect(). */
                if( pxSocket->u.xTCP.ucRepCount < 3U )
 8011bd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011bda:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8011bde:	2b02      	cmp	r3, #2
 8011be0:	d811      	bhi.n	8011c06 <prvTCPNextTimeout+0x5a>
                {
                    if( pxSocket->u.xTCP.ucRepCount == 0U )
 8011be2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011be4:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d102      	bne.n	8011bf2 <prvTCPNextTimeout+0x46>
                    {
                        ulDelayMs = 0U;
 8011bec:	2300      	movs	r3, #0
 8011bee:	653b      	str	r3, [r7, #80]	@ 0x50
 8011bf0:	e010      	b.n	8011c14 <prvTCPNextTimeout+0x68>
                    }
                    else
                    {
                        ulDelayMs = ( ( uint32_t ) 3000U ) << ( pxSocket->u.xTCP.ucRepCount - 1U );
 8011bf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011bf4:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8011bf8:	3b01      	subs	r3, #1
 8011bfa:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8011bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8011c02:	653b      	str	r3, [r7, #80]	@ 0x50
 8011c04:	e006      	b.n	8011c14 <prvTCPNextTimeout+0x68>
                    }
                }
                else
                {
                    ulDelayMs = 11000U;
 8011c06:	f642 23f8 	movw	r3, #11000	@ 0x2af8
 8011c0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8011c0c:	e002      	b.n	8011c14 <prvTCPNextTimeout+0x68>
                }
            }
            else
            {
                /* Still in the ARP phase: check every half second. */
                ulDelayMs = 500U;
 8011c0e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8011c12:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            FreeRTOS_debug_printf( ( "Connect[%xip:%u]: next timeout %u: %u ms\n",
 8011c14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c16:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8011c18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c1a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011c1e:	4618      	mov	r0, r3
 8011c20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c22:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8011c26:	461a      	mov	r2, r3
 8011c28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c2a:	9300      	str	r3, [sp, #0]
 8011c2c:	4613      	mov	r3, r2
 8011c2e:	4602      	mov	r2, r0
 8011c30:	48a4      	ldr	r0, [pc, #656]	@ (8011ec4 <prvTCPNextTimeout+0x318>)
 8011c32:	f010 fdb7 	bl	80227a4 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort,
                                     pxSocket->u.xTCP.ucRepCount, ( unsigned ) ulDelayMs ) );
            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 8011c36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c38:	2200      	movs	r2, #0
 8011c3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8011c3c:	647a      	str	r2, [r7, #68]	@ 0x44
 8011c3e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8011c42:	4622      	mov	r2, r4
 8011c44:	462b      	mov	r3, r5
 8011c46:	f04f 0000 	mov.w	r0, #0
 8011c4a:	f04f 0100 	mov.w	r1, #0
 8011c4e:	0159      	lsls	r1, r3, #5
 8011c50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011c54:	0150      	lsls	r0, r2, #5
 8011c56:	4602      	mov	r2, r0
 8011c58:	460b      	mov	r3, r1
 8011c5a:	4621      	mov	r1, r4
 8011c5c:	1a51      	subs	r1, r2, r1
 8011c5e:	6239      	str	r1, [r7, #32]
 8011c60:	4629      	mov	r1, r5
 8011c62:	eb63 0301 	sbc.w	r3, r3, r1
 8011c66:	627b      	str	r3, [r7, #36]	@ 0x24
 8011c68:	f04f 0200 	mov.w	r2, #0
 8011c6c:	f04f 0300 	mov.w	r3, #0
 8011c70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8011c74:	4649      	mov	r1, r9
 8011c76:	008b      	lsls	r3, r1, #2
 8011c78:	4641      	mov	r1, r8
 8011c7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011c7e:	4641      	mov	r1, r8
 8011c80:	008a      	lsls	r2, r1, #2
 8011c82:	4610      	mov	r0, r2
 8011c84:	4619      	mov	r1, r3
 8011c86:	4603      	mov	r3, r0
 8011c88:	4622      	mov	r2, r4
 8011c8a:	189b      	adds	r3, r3, r2
 8011c8c:	61bb      	str	r3, [r7, #24]
 8011c8e:	462b      	mov	r3, r5
 8011c90:	460a      	mov	r2, r1
 8011c92:	eb42 0303 	adc.w	r3, r2, r3
 8011c96:	61fb      	str	r3, [r7, #28]
 8011c98:	f04f 0200 	mov.w	r2, #0
 8011c9c:	f04f 0300 	mov.w	r3, #0
 8011ca0:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8011ca4:	4629      	mov	r1, r5
 8011ca6:	00cb      	lsls	r3, r1, #3
 8011ca8:	4621      	mov	r1, r4
 8011caa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011cae:	4621      	mov	r1, r4
 8011cb0:	00ca      	lsls	r2, r1, #3
 8011cb2:	4610      	mov	r0, r2
 8011cb4:	4619      	mov	r1, r3
 8011cb6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011cba:	f04f 0300 	mov.w	r3, #0
 8011cbe:	f7ee fb77 	bl	80003b0 <__aeabi_uldivmod>
 8011cc2:	4602      	mov	r2, r0
 8011cc4:	460b      	mov	r3, r1
 8011cc6:	4613      	mov	r3, r2
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d044      	beq.n	8011d56 <prvTCPNextTimeout+0x1aa>
 8011ccc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011cce:	2200      	movs	r2, #0
 8011cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011cd2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8011cd4:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8011cd8:	4622      	mov	r2, r4
 8011cda:	462b      	mov	r3, r5
 8011cdc:	f04f 0000 	mov.w	r0, #0
 8011ce0:	f04f 0100 	mov.w	r1, #0
 8011ce4:	0159      	lsls	r1, r3, #5
 8011ce6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011cea:	0150      	lsls	r0, r2, #5
 8011cec:	4602      	mov	r2, r0
 8011cee:	460b      	mov	r3, r1
 8011cf0:	4621      	mov	r1, r4
 8011cf2:	ebb2 0a01 	subs.w	sl, r2, r1
 8011cf6:	4629      	mov	r1, r5
 8011cf8:	eb63 0b01 	sbc.w	fp, r3, r1
 8011cfc:	f04f 0200 	mov.w	r2, #0
 8011d00:	f04f 0300 	mov.w	r3, #0
 8011d04:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8011d08:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 8011d0c:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8011d10:	4692      	mov	sl, r2
 8011d12:	469b      	mov	fp, r3
 8011d14:	4623      	mov	r3, r4
 8011d16:	eb1a 0303 	adds.w	r3, sl, r3
 8011d1a:	613b      	str	r3, [r7, #16]
 8011d1c:	462b      	mov	r3, r5
 8011d1e:	eb4b 0303 	adc.w	r3, fp, r3
 8011d22:	617b      	str	r3, [r7, #20]
 8011d24:	f04f 0200 	mov.w	r2, #0
 8011d28:	f04f 0300 	mov.w	r3, #0
 8011d2c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8011d30:	4629      	mov	r1, r5
 8011d32:	00cb      	lsls	r3, r1, #3
 8011d34:	4621      	mov	r1, r4
 8011d36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011d3a:	4621      	mov	r1, r4
 8011d3c:	00ca      	lsls	r2, r1, #3
 8011d3e:	4610      	mov	r0, r2
 8011d40:	4619      	mov	r1, r3
 8011d42:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011d46:	f04f 0300 	mov.w	r3, #0
 8011d4a:	f7ee fb31 	bl	80003b0 <__aeabi_uldivmod>
 8011d4e:	4602      	mov	r2, r0
 8011d50:	460b      	mov	r3, r1
 8011d52:	b292      	uxth	r2, r2
 8011d54:	e000      	b.n	8011d58 <prvTCPNextTimeout+0x1ac>
 8011d56:	2201      	movs	r2, #1
 8011d58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d5a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 8011d5e:	e0a8      	b.n	8011eb2 <prvTCPNextTimeout+0x306>
        }
        else if( pxSocket->u.xTCP.usTimeout == 0U )
 8011d60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d62:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	f040 80a3 	bne.w	8011eb2 <prvTCPNextTimeout+0x306>
        {
            /* Let the sliding window mechanism decide what time-out is appropriate. */
            BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 8011d6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d6e:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8011d72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d74:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 8011d78:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8011d7c:	461a      	mov	r2, r3
 8011d7e:	f004 fcbd 	bl	80166fc <xTCPWindowTxHasData>
 8011d82:	6578      	str	r0, [r7, #84]	@ 0x54

            if( ulDelayMs == 0U )
 8011d84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d108      	bne.n	8011d9c <prvTCPNextTimeout+0x1f0>
            {
                if( xResult != ( BaseType_t ) 0 )
 8011d8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d002      	beq.n	8011d96 <prvTCPNextTimeout+0x1ea>
                {
                    ulDelayMs = 1U;
 8011d90:	2301      	movs	r3, #1
 8011d92:	653b      	str	r3, [r7, #80]	@ 0x50
 8011d94:	e002      	b.n	8011d9c <prvTCPNextTimeout+0x1f0>
                }
                else
                {
                    ulDelayMs = tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 8011d96:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8011d9a:	653b      	str	r3, [r7, #80]	@ 0x50
            else
            {
                /* ulDelayMs contains the time to wait before a re-transmission. */
            }

            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs ); /* LCOV_EXCL_BR_LINE ulDelayMs will not be smaller than 1 */
 8011d9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d9e:	2200      	movs	r2, #0
 8011da0:	633b      	str	r3, [r7, #48]	@ 0x30
 8011da2:	637a      	str	r2, [r7, #52]	@ 0x34
 8011da4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8011da8:	4652      	mov	r2, sl
 8011daa:	465b      	mov	r3, fp
 8011dac:	f04f 0000 	mov.w	r0, #0
 8011db0:	f04f 0100 	mov.w	r1, #0
 8011db4:	0159      	lsls	r1, r3, #5
 8011db6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011dba:	0150      	lsls	r0, r2, #5
 8011dbc:	4602      	mov	r2, r0
 8011dbe:	460b      	mov	r3, r1
 8011dc0:	4651      	mov	r1, sl
 8011dc2:	ebb2 0801 	subs.w	r8, r2, r1
 8011dc6:	4659      	mov	r1, fp
 8011dc8:	eb63 0901 	sbc.w	r9, r3, r1
 8011dcc:	f04f 0200 	mov.w	r2, #0
 8011dd0:	f04f 0300 	mov.w	r3, #0
 8011dd4:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8011dd8:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8011ddc:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8011de0:	4690      	mov	r8, r2
 8011de2:	4699      	mov	r9, r3
 8011de4:	4653      	mov	r3, sl
 8011de6:	eb18 0303 	adds.w	r3, r8, r3
 8011dea:	60bb      	str	r3, [r7, #8]
 8011dec:	465b      	mov	r3, fp
 8011dee:	eb49 0303 	adc.w	r3, r9, r3
 8011df2:	60fb      	str	r3, [r7, #12]
 8011df4:	f04f 0200 	mov.w	r2, #0
 8011df8:	f04f 0300 	mov.w	r3, #0
 8011dfc:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8011e00:	4649      	mov	r1, r9
 8011e02:	00cb      	lsls	r3, r1, #3
 8011e04:	4641      	mov	r1, r8
 8011e06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011e0a:	4641      	mov	r1, r8
 8011e0c:	00ca      	lsls	r2, r1, #3
 8011e0e:	4610      	mov	r0, r2
 8011e10:	4619      	mov	r1, r3
 8011e12:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011e16:	f04f 0300 	mov.w	r3, #0
 8011e1a:	f7ee fac9 	bl	80003b0 <__aeabi_uldivmod>
 8011e1e:	4602      	mov	r2, r0
 8011e20:	460b      	mov	r3, r1
 8011e22:	4613      	mov	r3, r2
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d040      	beq.n	8011eaa <prvTCPNextTimeout+0x2fe>
 8011e28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e2a:	2200      	movs	r2, #0
 8011e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011e2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011e30:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8011e34:	4642      	mov	r2, r8
 8011e36:	464b      	mov	r3, r9
 8011e38:	f04f 0000 	mov.w	r0, #0
 8011e3c:	f04f 0100 	mov.w	r1, #0
 8011e40:	0159      	lsls	r1, r3, #5
 8011e42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011e46:	0150      	lsls	r0, r2, #5
 8011e48:	4602      	mov	r2, r0
 8011e4a:	460b      	mov	r3, r1
 8011e4c:	4641      	mov	r1, r8
 8011e4e:	1a54      	subs	r4, r2, r1
 8011e50:	4649      	mov	r1, r9
 8011e52:	eb63 0501 	sbc.w	r5, r3, r1
 8011e56:	f04f 0200 	mov.w	r2, #0
 8011e5a:	f04f 0300 	mov.w	r3, #0
 8011e5e:	00ab      	lsls	r3, r5, #2
 8011e60:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8011e64:	00a2      	lsls	r2, r4, #2
 8011e66:	4614      	mov	r4, r2
 8011e68:	461d      	mov	r5, r3
 8011e6a:	4643      	mov	r3, r8
 8011e6c:	18e3      	adds	r3, r4, r3
 8011e6e:	603b      	str	r3, [r7, #0]
 8011e70:	464b      	mov	r3, r9
 8011e72:	eb45 0303 	adc.w	r3, r5, r3
 8011e76:	607b      	str	r3, [r7, #4]
 8011e78:	f04f 0200 	mov.w	r2, #0
 8011e7c:	f04f 0300 	mov.w	r3, #0
 8011e80:	e9d7 4500 	ldrd	r4, r5, [r7]
 8011e84:	4629      	mov	r1, r5
 8011e86:	00cb      	lsls	r3, r1, #3
 8011e88:	4621      	mov	r1, r4
 8011e8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011e8e:	4621      	mov	r1, r4
 8011e90:	00ca      	lsls	r2, r1, #3
 8011e92:	4610      	mov	r0, r2
 8011e94:	4619      	mov	r1, r3
 8011e96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011e9a:	f04f 0300 	mov.w	r3, #0
 8011e9e:	f7ee fa87 	bl	80003b0 <__aeabi_uldivmod>
 8011ea2:	4602      	mov	r2, r0
 8011ea4:	460b      	mov	r3, r1
 8011ea6:	b292      	uxth	r2, r2
 8011ea8:	e000      	b.n	8011eac <prvTCPNextTimeout+0x300>
 8011eaa:	2201      	movs	r2, #1
 8011eac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011eae:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            /* field '.usTimeout' has already been set (by the
             * keep-alive/delayed-ACK mechanism). */
        }

        /* Return the number of clock ticks before the timer expires. */
        return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 8011eb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011eb4:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
    }
 8011eb8:	4618      	mov	r0, r3
 8011eba:	3758      	adds	r7, #88	@ 0x58
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011ec2:	bf00      	nop
 8011ec4:	08026980 	.word	0x08026980

08011ec8 <xGetSourceAddrFromBuffer>:
 * @param[in] pucEthernetBuffer The Ethernet buffer from which the source address will be retrieved.
 *
 * @return IPv46_Address_t struct containing the source IP address.
 */
    static IPv46_Address_t xGetSourceAddrFromBuffer( const uint8_t * const pucEthernetBuffer )
    {
 8011ec8:	b4b0      	push	{r4, r5, r7}
 8011eca:	b08b      	sub	sp, #44	@ 0x2c
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	6078      	str	r0, [r7, #4]
 8011ed0:	6039      	str	r1, [r7, #0]

        /* Map the buffer onto Ethernet Header struct for easy access to fields. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 8011ed2:	683b      	ldr	r3, [r7, #0]
 8011ed4:	627b      	str	r3, [r7, #36]	@ 0x24

        if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 8011ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ed8:	899b      	ldrh	r3, [r3, #12]
 8011eda:	b29b      	uxth	r3, r3
 8011edc:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8011ee0:	4293      	cmp	r3, r2
 8011ee2:	d10e      	bne.n	8011f02 <xGetSourceAddrFromBuffer+0x3a>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_IPv6_t * const pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8011ee4:	683b      	ldr	r3, [r7, #0]
 8011ee6:	330e      	adds	r3, #14
 8011ee8:	61fb      	str	r3, [r7, #28]
            xSourceAddr.xIs_IPv6 = pdTRUE;
 8011eea:	2301      	movs	r3, #1
 8011eec:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( xSourceAddr.xIPAddress.xIP_IPv6.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, sizeof( IPv6_Address_t ) );
 8011eee:	69fb      	ldr	r3, [r7, #28]
 8011ef0:	3308      	adds	r3, #8
 8011ef2:	f107 0408 	add.w	r4, r7, #8
 8011ef6:	6818      	ldr	r0, [r3, #0]
 8011ef8:	6859      	ldr	r1, [r3, #4]
 8011efa:	689a      	ldr	r2, [r3, #8]
 8011efc:	68db      	ldr	r3, [r3, #12]
 8011efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011f00:	e018      	b.n	8011f34 <xGetSourceAddrFromBuffer+0x6c>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_t * const pxIPHeader = ( ( const IPHeader_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8011f02:	683b      	ldr	r3, [r7, #0]
 8011f04:	330e      	adds	r3, #14
 8011f06:	623b      	str	r3, [r7, #32]
            xSourceAddr.xIs_IPv6 = pdFALSE;
 8011f08:	2300      	movs	r3, #0
 8011f0a:	61bb      	str	r3, [r7, #24]
            xSourceAddr.xIPAddress.ulIP_IPv4 = FreeRTOS_htonl( pxIPHeader->ulSourceIPAddress );
 8011f0c:	6a3b      	ldr	r3, [r7, #32]
 8011f0e:	68db      	ldr	r3, [r3, #12]
 8011f10:	061a      	lsls	r2, r3, #24
 8011f12:	6a3b      	ldr	r3, [r7, #32]
 8011f14:	68db      	ldr	r3, [r3, #12]
 8011f16:	021b      	lsls	r3, r3, #8
 8011f18:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011f1c:	431a      	orrs	r2, r3
 8011f1e:	6a3b      	ldr	r3, [r7, #32]
 8011f20:	68db      	ldr	r3, [r3, #12]
 8011f22:	0a1b      	lsrs	r3, r3, #8
 8011f24:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011f28:	431a      	orrs	r2, r3
 8011f2a:	6a3b      	ldr	r3, [r7, #32]
 8011f2c:	68db      	ldr	r3, [r3, #12]
 8011f2e:	0e1b      	lsrs	r3, r3, #24
 8011f30:	4313      	orrs	r3, r2
 8011f32:	60bb      	str	r3, [r7, #8]
        }

        return xSourceAddr;
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	461d      	mov	r5, r3
 8011f38:	f107 0408 	add.w	r4, r7, #8
 8011f3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011f3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011f40:	6823      	ldr	r3, [r4, #0]
 8011f42:	602b      	str	r3, [r5, #0]
    }
 8011f44:	6878      	ldr	r0, [r7, #4]
 8011f46:	372c      	adds	r7, #44	@ 0x2c
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	bcb0      	pop	{r4, r5, r7}
 8011f4c:	4770      	bx	lr
	...

08011f50 <xProcessReceivedTCPPacket>:
 *      prvTCPSendRepeated()
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC
 */
    BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t * pxDescriptor )
    {
 8011f50:	b5b0      	push	{r4, r5, r7, lr}
 8011f52:	b096      	sub	sp, #88	@ 0x58
 8011f54:	af04      	add	r7, sp, #16
 8011f56:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = pdPASS;
 8011f58:	2301      	movs	r3, #1
 8011f5a:	647b      	str	r3, [r7, #68]	@ 0x44
        /* Function might modify the parameter. */
        NetworkBufferDescriptor_t * pxNetworkBuffer;
        size_t uxIPHeaderOffset;

        configASSERT( pxDescriptor != NULL );
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d104      	bne.n	8011f6c <xProcessReceivedTCPPacket+0x1c>
 8011f62:	f240 21f7 	movw	r1, #759	@ 0x2f7
 8011f66:	4898      	ldr	r0, [pc, #608]	@ (80121c8 <xProcessReceivedTCPPacket+0x278>)
 8011f68:	f7ef fd4e 	bl	8001a08 <vAssertCalled>
        configASSERT( pxDescriptor->pucEthernetBuffer != NULL );
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d104      	bne.n	8011f7e <xProcessReceivedTCPPacket+0x2e>
 8011f74:	f44f 713e 	mov.w	r1, #760	@ 0x2f8
 8011f78:	4893      	ldr	r0, [pc, #588]	@ (80121c8 <xProcessReceivedTCPPacket+0x278>)
 8011f7a:	f7ef fd45 	bl	8001a08 <vAssertCalled>

        pxNetworkBuffer = pxDescriptor;
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	61fb      	str	r3, [r7, #28]
        uxIPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 8011f82:	69fb      	ldr	r3, [r7, #28]
 8011f84:	4618      	mov	r0, r3
 8011f86:	f7f8 fa37 	bl	800a3f8 <uxIPHeaderSizePacket>
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	330e      	adds	r3, #14
 8011f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Check for a minimum packet size. */
        if( pxNetworkBuffer->xDataLength < ( uxIPHeaderOffset + ipSIZE_OF_TCP_HEADER ) )
 8011f90:	69fb      	ldr	r3, [r7, #28]
 8011f92:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f96:	3314      	adds	r3, #20
 8011f98:	429a      	cmp	r2, r3
 8011f9a:	d202      	bcs.n	8011fa2 <xProcessReceivedTCPPacket+0x52>
        {
            xResult = pdFAIL;
 8011f9c:	2300      	movs	r3, #0
 8011f9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8011fa0:	e191      	b.n	80122c6 <xProcessReceivedTCPPacket+0x376>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
                                                &( pxNetworkBuffer->pucEthernetBuffer[ uxIPHeaderOffset ] ) );
 8011fa2:	69fb      	ldr	r3, [r7, #28]
 8011fa4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
 8011fa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011fa8:	4413      	add	r3, r2
 8011faa:	63bb      	str	r3, [r7, #56]	@ 0x38

            const uint16_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8011fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fae:	7b5b      	ldrb	r3, [r3, #13]
 8011fb0:	86fb      	strh	r3, [r7, #54]	@ 0x36
            const uint16_t usLocalPort = FreeRTOS_htons( pxTCPHeader->usDestinationPort );
 8011fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fb4:	885b      	ldrh	r3, [r3, #2]
 8011fb6:	b29b      	uxth	r3, r3
 8011fb8:	021b      	lsls	r3, r3, #8
 8011fba:	b21a      	sxth	r2, r3
 8011fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fbe:	885b      	ldrh	r3, [r3, #2]
 8011fc0:	b29b      	uxth	r3, r3
 8011fc2:	0a1b      	lsrs	r3, r3, #8
 8011fc4:	b29b      	uxth	r3, r3
 8011fc6:	b21b      	sxth	r3, r3
 8011fc8:	4313      	orrs	r3, r2
 8011fca:	b21b      	sxth	r3, r3
 8011fcc:	86bb      	strh	r3, [r7, #52]	@ 0x34
            const uint16_t usRemotePort = FreeRTOS_htons( pxTCPHeader->usSourcePort );
 8011fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fd0:	881b      	ldrh	r3, [r3, #0]
 8011fd2:	b29b      	uxth	r3, r3
 8011fd4:	021b      	lsls	r3, r3, #8
 8011fd6:	b21a      	sxth	r2, r3
 8011fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fda:	881b      	ldrh	r3, [r3, #0]
 8011fdc:	b29b      	uxth	r3, r3
 8011fde:	0a1b      	lsrs	r3, r3, #8
 8011fe0:	b29b      	uxth	r3, r3
 8011fe2:	b21b      	sxth	r3, r3
 8011fe4:	4313      	orrs	r3, r2
 8011fe6:	b21b      	sxth	r3, r3
 8011fe8:	867b      	strh	r3, [r7, #50]	@ 0x32
            const IPv46_Address_t xRemoteIP = xGetSourceAddrFromBuffer( pxNetworkBuffer->pucEthernetBuffer );
 8011fea:	69fb      	ldr	r3, [r7, #28]
 8011fec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011fee:	f107 0308 	add.w	r3, r7, #8
 8011ff2:	4611      	mov	r1, r2
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	f7ff ff67 	bl	8011ec8 <xGetSourceAddrFromBuffer>

            /* Find the destination socket, and if not found: return a socket listening to
             * the destination PORT. */
            FreeRTOS_Socket_t * pxSocket = pxTCPSocketLookup( 0U, usLocalPort, xRemoteIP, usRemotePort );
 8011ffa:	8ebd      	ldrh	r5, [r7, #52]	@ 0x34
 8011ffc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8011ffe:	9303      	str	r3, [sp, #12]
 8012000:	466c      	mov	r4, sp
 8012002:	f107 0310 	add.w	r3, r7, #16
 8012006:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801200a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801200e:	f107 0308 	add.w	r3, r7, #8
 8012012:	cb0c      	ldmia	r3, {r2, r3}
 8012014:	4629      	mov	r1, r5
 8012016:	2000      	movs	r0, #0
 8012018:	f7fe fbc2 	bl	80107a0 <pxTCPSocketLookup>
 801201c:	6438      	str	r0, [r7, #64]	@ 0x40

            if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == pdFALSE ) )
 801201e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012020:	2b00      	cmp	r3, #0
 8012022:	d008      	beq.n	8012036 <xProcessReceivedTCPPacket+0xe6>
 8012024:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012026:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801202a:	4618      	mov	r0, r3
 801202c:	f000 fc92 	bl	8012954 <prvTCPSocketIsActive>
 8012030:	4603      	mov	r3, r0
 8012032:	2b00      	cmp	r3, #0
 8012034:	d116      	bne.n	8012064 <xProcessReceivedTCPPacket+0x114>
                /* A TCP messages is received but either there is no socket with the
                 * given port number or the there is a socket, but it is in one of these
                 * non-active states:  eCLOSED, eCLOSE_WAIT, eFIN_WAIT_2, eCLOSING, or
                 * eTIME_WAIT. */

                FreeRTOS_debug_printf( ( "TCP: No active socket on port %d (%d)\n", usLocalPort, usRemotePort ) );
 8012036:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8012038:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801203a:	4619      	mov	r1, r3
 801203c:	4863      	ldr	r0, [pc, #396]	@ (80121cc <xProcessReceivedTCPPacket+0x27c>)
 801203e:	f010 fbb1 	bl	80227a4 <lUDPLoggingPrintf>
                 * the other party will get a ECONN error.  There are two exceptions:
                 * 1) A packet that already has the RST flag set.
                 * 2) A packet that only has the ACK flag set.
                 * A packet with only the ACK flag set might be the last ACK in
                 * a three-way hand-shake that closes a connection. */
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 8012042:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012044:	f003 031f 	and.w	r3, r3, #31
 8012048:	2b10      	cmp	r3, #16
 801204a:	d008      	beq.n	801205e <xProcessReceivedTCPPacket+0x10e>
                    ( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U ) )
 801204c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801204e:	f003 0304 	and.w	r3, r3, #4
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 8012052:	2b00      	cmp	r3, #0
 8012054:	d103      	bne.n	801205e <xProcessReceivedTCPPacket+0x10e>
                {
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 8012056:	69fb      	ldr	r3, [r7, #28]
 8012058:	4618      	mov	r0, r3
 801205a:	f002 fd0b 	bl	8014a74 <prvTCPSendReset>
                }

                /* The packet can't be handled. */
                xResult = pdFAIL;
 801205e:	2300      	movs	r3, #0
 8012060:	647b      	str	r3, [r7, #68]	@ 0x44
 8012062:	e0d6      	b.n	8012212 <xProcessReceivedTCPPacket+0x2c2>
            }
            else
            {
                pxSocket->u.xTCP.ucRepCount = 0U;
 8012064:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012066:	2200      	movs	r2, #0
 8012068:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 801206c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801206e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012072:	2b01      	cmp	r3, #1
 8012074:	d127      	bne.n	80120c6 <xProcessReceivedTCPPacket+0x176>
                {
                    /* The matching socket is in a listening state.  Test if the peer
                     * has set the SYN flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_SYN )
 8012076:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012078:	f003 031f 	and.w	r3, r3, #31
 801207c:	2b02      	cmp	r3, #2
 801207e:	d015      	beq.n	80120ac <xProcessReceivedTCPPacket+0x15c>
                        /* What happens: maybe after a reboot, a client doesn't know the
                         * connection had gone.  Send a RST in order to get a new connect
                         * request. */
                        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                        {
                            FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %u to port %u\n",
 8012080:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012082:	4618      	mov	r0, r3
 8012084:	f003 fbbe 	bl	8015804 <prvTCPFlagMeaning>
 8012088:	4601      	mov	r1, r0
 801208a:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801208c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801208e:	4850      	ldr	r0, [pc, #320]	@ (80121d0 <xProcessReceivedTCPPacket+0x280>)
 8012090:	f010 fb88 	bl	80227a4 <lUDPLoggingPrintf>
                                                     prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), usRemotePort, usLocalPort ) );
                        }
                        #endif /* ipconfigHAS_DEBUG_PRINTF */

                        if( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U )
 8012094:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012096:	f003 0304 	and.w	r3, r3, #4
 801209a:	2b00      	cmp	r3, #0
 801209c:	d103      	bne.n	80120a6 <xProcessReceivedTCPPacket+0x156>
                        {
                            ( void ) prvTCPSendReset( pxNetworkBuffer );
 801209e:	69fb      	ldr	r3, [r7, #28]
 80120a0:	4618      	mov	r0, r3
 80120a2:	f002 fce7 	bl	8014a74 <prvTCPSendReset>
                        }

                        xResult = pdFAIL;
 80120a6:	2300      	movs	r3, #0
 80120a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80120aa:	e0b2      	b.n	8012212 <xProcessReceivedTCPPacket+0x2c2>
                    else
                    {
                        /* prvHandleListen() will either return a newly created socket
                         * (if bReuseSocket is false), otherwise it returns the current
                         * socket which will later get connected. */
                        pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 80120ac:	69fb      	ldr	r3, [r7, #28]
 80120ae:	4619      	mov	r1, r3
 80120b0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80120b2:	f001 f999 	bl	80133e8 <prvHandleListen>
 80120b6:	6438      	str	r0, [r7, #64]	@ 0x40

                        if( pxSocket == NULL )
 80120b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	f040 80a9 	bne.w	8012212 <xProcessReceivedTCPPacket+0x2c2>
                        {
                            xResult = pdFAIL;
 80120c0:	2300      	movs	r3, #0
 80120c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80120c4:	e0a5      	b.n	8012212 <xProcessReceivedTCPPacket+0x2c2>
                } /* if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN ). */
                else
                {
                    /* This is not a socket in listening mode. Check for the RST
                     * flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_RST ) != 0U )
 80120c6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80120c8:	f003 0304 	and.w	r3, r3, #4
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d068      	beq.n	80121a2 <xProcessReceivedTCPPacket+0x252>
                    {
                        FreeRTOS_debug_printf( ( "TCP: RST received from %u for %u\n", usRemotePort, usLocalPort ) );
 80120d0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80120d2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80120d4:	4619      	mov	r1, r3
 80120d6:	483f      	ldr	r0, [pc, #252]	@ (80121d4 <xProcessReceivedTCPPacket+0x284>)
 80120d8:	f010 fb64 	bl	80227a4 <lUDPLoggingPrintf>

                        /* Implement https://tools.ietf.org/html/rfc5961#section-3.2. */
                        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 80120dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80120de:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80120e2:	2b02      	cmp	r3, #2
 80120e4:	d11f      	bne.n	8012126 <xProcessReceivedTCPPacket+0x1d6>
                        {
                            const uint32_t ulAckNumber = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 80120e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120e8:	689b      	ldr	r3, [r3, #8]
 80120ea:	061a      	lsls	r2, r3, #24
 80120ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120ee:	689b      	ldr	r3, [r3, #8]
 80120f0:	021b      	lsls	r3, r3, #8
 80120f2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80120f6:	431a      	orrs	r2, r3
 80120f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120fa:	689b      	ldr	r3, [r3, #8]
 80120fc:	0a1b      	lsrs	r3, r3, #8
 80120fe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012102:	431a      	orrs	r2, r3
 8012104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012106:	689b      	ldr	r3, [r3, #8]
 8012108:	0e1b      	lsrs	r3, r3, #24
 801210a:	4313      	orrs	r3, r2
 801210c:	627b      	str	r3, [r7, #36]	@ 0x24

                            /* Per the above RFC, "In the SYN-SENT state ... the RST is
                             * acceptable if the ACK field acknowledges the SYN." */
                            if( ulAckNumber == ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber + 1U ) )
 801210e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012110:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8012114:	3301      	adds	r3, #1
 8012116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012118:	429a      	cmp	r2, r3
 801211a:	d13f      	bne.n	801219c <xProcessReceivedTCPPacket+0x24c>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 801211c:	2100      	movs	r1, #0
 801211e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8012120:	f7ff fb34 	bl	801178c <vTCPStateChange>
 8012124:	e03a      	b.n	801219c <xProcessReceivedTCPPacket+0x24c>
                            }
                        }
                        else
                        {
                            const uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 8012126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012128:	685b      	ldr	r3, [r3, #4]
 801212a:	061a      	lsls	r2, r3, #24
 801212c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801212e:	685b      	ldr	r3, [r3, #4]
 8012130:	021b      	lsls	r3, r3, #8
 8012132:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012136:	431a      	orrs	r2, r3
 8012138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801213a:	685b      	ldr	r3, [r3, #4]
 801213c:	0a1b      	lsrs	r3, r3, #8
 801213e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012142:	431a      	orrs	r2, r3
 8012144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012146:	685b      	ldr	r3, [r3, #4]
 8012148:	0e1b      	lsrs	r3, r3, #24
 801214a:	4313      	orrs	r3, r2
 801214c:	62bb      	str	r3, [r7, #40]	@ 0x28

                            /* Check whether the packet matches the next expected sequence number. */
                            if( ulSequenceNumber == pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber )
 801214e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012150:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8012154:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012156:	429a      	cmp	r2, r3
 8012158:	d104      	bne.n	8012164 <xProcessReceivedTCPPacket+0x214>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 801215a:	2100      	movs	r1, #0
 801215c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801215e:	f7ff fb15 	bl	801178c <vTCPStateChange>
 8012162:	e01b      	b.n	801219c <xProcessReceivedTCPPacket+0x24c>
                            }
                            /* Otherwise, check whether the packet is within the receive window. */
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 8012164:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012166:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 801216a:	4619      	mov	r1, r3
 801216c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801216e:	f003 fc82 	bl	8015a76 <xSequenceGreaterThan>
 8012172:	4603      	mov	r3, r0
 8012174:	2b00      	cmp	r3, #0
 8012176:	d011      	beq.n	801219c <xProcessReceivedTCPPacket+0x24c>
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 8012178:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801217a:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
                                                          pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength ) != pdFALSE ) )
 801217e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012180:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 8012184:	4413      	add	r3, r2
 8012186:	4619      	mov	r1, r3
 8012188:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801218a:	f003 fc5e 	bl	8015a4a <xSequenceLessThan>
 801218e:	4603      	mov	r3, r0
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 8012190:	2b00      	cmp	r3, #0
 8012192:	d003      	beq.n	801219c <xProcessReceivedTCPPacket+0x24c>
                            {
                                /* Send a challenge ACK. */
                                ( void ) prvTCPSendChallengeAck( pxNetworkBuffer );
 8012194:	69fb      	ldr	r3, [r7, #28]
 8012196:	4618      	mov	r0, r3
 8012198:	f002 fc5f 	bl	8014a5a <prvTCPSendChallengeAck>
                                /* Nothing. */
                            }
                        }

                        /* Otherwise, do nothing. In any case, the packet cannot be handled. */
                        xResult = pdFAIL;
 801219c:	2300      	movs	r3, #0
 801219e:	647b      	str	r3, [r7, #68]	@ 0x44
 80121a0:	e037      	b.n	8012212 <xProcessReceivedTCPPacket+0x2c2>
                    }
                    /* Check whether there is a pure SYN amongst the TCP flags while the connection is established. */
                    else if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) == tcpTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) )
 80121a2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80121a4:	f003 031f 	and.w	r3, r3, #31
 80121a8:	2b02      	cmp	r3, #2
 80121aa:	d117      	bne.n	80121dc <xProcessReceivedTCPPacket+0x28c>
 80121ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80121ae:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80121b2:	2b04      	cmp	r3, #4
 80121b4:	d912      	bls.n	80121dc <xProcessReceivedTCPPacket+0x28c>
                    {
                        /* SYN flag while this socket is already connected. */
                        FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %u\n", usRemotePort ) );
 80121b6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80121b8:	4619      	mov	r1, r3
 80121ba:	4807      	ldr	r0, [pc, #28]	@ (80121d8 <xProcessReceivedTCPPacket+0x288>)
 80121bc:	f010 faf2 	bl	80227a4 <lUDPLoggingPrintf>

                        /* The packet cannot be handled. */
                        xResult = pdFAIL;
 80121c0:	2300      	movs	r3, #0
 80121c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80121c4:	e025      	b.n	8012212 <xProcessReceivedTCPPacket+0x2c2>
 80121c6:	bf00      	nop
 80121c8:	08026874 	.word	0x08026874
 80121cc:	080269ac 	.word	0x080269ac
 80121d0:	080269d4 	.word	0x080269d4
 80121d4:	08026a0c 	.word	0x08026a0c
 80121d8:	08026a30 	.word	0x08026a30
                    else
                    {
                        /* Update the copy of the TCP header only (skipping eth and IP
                         * headers).  It might be used later on, whenever data must be sent
                         * to the peer. */
                        const size_t uxOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket );
 80121dc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80121de:	f7f8 f925 	bl	800a42c <uxIPHeaderSizeSocket>
 80121e2:	4603      	mov	r3, r0
 80121e4:	330e      	adds	r3, #14
 80121e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 80121e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121ea:	33a0      	adds	r3, #160	@ 0xa0
 80121ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80121ee:	4413      	add	r3, r2
 80121f0:	f103 000a 	add.w	r0, r3, #10
                                         ( const void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ uxOffset ] ) ),
 80121f4:	69fb      	ldr	r3, [r7, #28]
 80121f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80121f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121fa:	4413      	add	r3, r2
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 80121fc:	2214      	movs	r2, #20
 80121fe:	4619      	mov	r1, r3
 8012200:	f010 fcec 	bl	8022bdc <memcpy>
                                         ipSIZE_OF_TCP_HEADER );
                        /* Clear flags that are set by the peer, and set the ACK flag. */
                        pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset + ipTCP_FLAGS_OFFSET ] = tcpTCP_FLAG_ACK;
 8012204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012206:	330d      	adds	r3, #13
 8012208:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801220a:	4413      	add	r3, r2
 801220c:	2210      	movs	r2, #16
 801220e:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
                    }
                }
            }

            if( xResult != pdFAIL )
 8012212:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012214:	2b00      	cmp	r3, #0
 8012216:	d056      	beq.n	80122c6 <xProcessReceivedTCPPacket+0x376>
            {
                uint16_t usWindow;

                /* pxSocket is not NULL when xResult != pdFAIL. */
                configASSERT( pxSocket != NULL ); /* LCOV_EXCL_LINE ,this branch will not be hit*/
 8012218:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801221a:	2b00      	cmp	r3, #0
 801221c:	d104      	bne.n	8012228 <xProcessReceivedTCPPacket+0x2d8>
 801221e:	f240 319e 	movw	r1, #926	@ 0x39e
 8012222:	482b      	ldr	r0, [pc, #172]	@ (80122d0 <xProcessReceivedTCPPacket+0x380>)
 8012224:	f7ef fbf0 	bl	8001a08 <vAssertCalled>

                /* Touch the alive timers because we received a message for this
                 * socket. */
                prvTCPTouchSocket( pxSocket );
 8012228:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801222a:	f7ff fa53 	bl	80116d4 <prvTCPTouchSocket>
                /* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
                 * then we MUST assume an MSS size of 536 bytes for backward compatibility. */

                /* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
                 * the number 5 (words) in the higher nibble of the TCP-offset byte. */
                if( ( pxTCPHeader->ucTCPOffset & tcpTCP_OFFSET_LENGTH_BITS ) > tcpTCP_OFFSET_STANDARD_LENGTH )
 801222e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012230:	7b1b      	ldrb	r3, [r3, #12]
 8012232:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012236:	2b50      	cmp	r3, #80	@ 0x50
 8012238:	d905      	bls.n	8012246 <xProcessReceivedTCPPacket+0x2f6>
                {
                    xResult = prvCheckOptions( pxSocket, pxNetworkBuffer );
 801223a:	69fb      	ldr	r3, [r7, #28]
 801223c:	4619      	mov	r1, r3
 801223e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8012240:	f000 f894 	bl	801236c <prvCheckOptions>
 8012244:	6478      	str	r0, [r7, #68]	@ 0x44
                }

                if( xResult != pdFAIL )
 8012246:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012248:	2b00      	cmp	r3, #0
 801224a:	d03c      	beq.n	80122c6 <xProcessReceivedTCPPacket+0x376>
                {
                    usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 801224c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801224e:	89db      	ldrh	r3, [r3, #14]
 8012250:	b29b      	uxth	r3, r3
 8012252:	021b      	lsls	r3, r3, #8
 8012254:	b21a      	sxth	r2, r3
 8012256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012258:	89db      	ldrh	r3, [r3, #14]
 801225a:	b29b      	uxth	r3, r3
 801225c:	0a1b      	lsrs	r3, r3, #8
 801225e:	b29b      	uxth	r3, r3
 8012260:	b21b      	sxth	r3, r3
 8012262:	4313      	orrs	r3, r2
 8012264:	b21b      	sxth	r3, r3
 8012266:	847b      	strh	r3, [r7, #34]	@ 0x22
                    pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 8012268:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801226a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801226c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                    #if ( ipconfigUSE_TCP_WIN == 1 )
                    {
                        /* rfc1323 : The Window field in a SYN (i.e., a <SYN> or <SYN,ACK>)
                         * segment itself is never scaled. */
                        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_SYN ) == 0U )
 8012270:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012272:	f003 0302 	and.w	r3, r3, #2
 8012276:	2b00      	cmp	r3, #0
 8012278:	d10a      	bne.n	8012290 <xProcessReceivedTCPPacket+0x340>
                        {
                            pxSocket->u.xTCP.ulWindowSize =
                                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 801227a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801227c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8012280:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012282:	f892 2106 	ldrb.w	r2, [r2, #262]	@ 0x106
 8012286:	fa03 f202 	lsl.w	r2, r3, r2
                            pxSocket->u.xTCP.ulWindowSize =
 801228a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801228c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                    }
                    #endif /* ipconfigUSE_TCP_WIN */

                    /* In prvTCPHandleState() the incoming messages will be handled
                     * depending on the current state of the connection. */
                    if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 8012290:	f107 031c 	add.w	r3, r7, #28
 8012294:	4619      	mov	r1, r3
 8012296:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8012298:	f000 ff78 	bl	801318c <prvTCPHandleState>
 801229c:	4603      	mov	r3, r0
 801229e:	2b00      	cmp	r3, #0
 80122a0:	dd05      	ble.n	80122ae <xProcessReceivedTCPPacket+0x35e>
                    {
                        /* prvTCPHandleState() has sent a message, see if there are more to
                         * be transmitted. */
                        #if ( ipconfigUSE_TCP_WIN == 1 )
                        {
                            ( void ) prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 80122a2:	f107 031c 	add.w	r3, r7, #28
 80122a6:	4619      	mov	r1, r3
 80122a8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80122aa:	f001 fc6f 	bl	8013b8c <prvTCPSendRepeated>
                        }
                        #endif /* ipconfigUSE_TCP_WIN */
                    }

                    if( pxNetworkBuffer != NULL )
 80122ae:	69fb      	ldr	r3, [r7, #28]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d005      	beq.n	80122c0 <xProcessReceivedTCPPacket+0x370>
                    {
                        /* We must check if the buffer is unequal to NULL, because the
                         * socket might keep a reference to it in case a delayed ACK must be
                         * sent. */
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80122b4:	69fb      	ldr	r3, [r7, #28]
 80122b6:	4618      	mov	r0, r3
 80122b8:	f005 fbcc 	bl	8017a54 <vReleaseNetworkBufferAndDescriptor>
                        #ifndef _lint
                            /* Clear pointers that are freed. */
                            pxNetworkBuffer = NULL;
 80122bc:	2300      	movs	r3, #0
 80122be:	61fb      	str	r3, [r7, #28]
                        #endif
                    }

                    /* And finally, calculate when this socket wants to be woken up. */
                    ( void ) prvTCPNextTimeout( pxSocket );
 80122c0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80122c2:	f7ff fc73 	bl	8011bac <prvTCPNextTimeout>
                }
            }
        }

        /* pdPASS being returned means the buffer has been consumed. */
        return xResult;
 80122c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 80122c8:	4618      	mov	r0, r3
 80122ca:	3748      	adds	r7, #72	@ 0x48
 80122cc:	46bd      	mov	sp, r7
 80122ce:	bdb0      	pop	{r4, r5, r7, pc}
 80122d0:	08026874 	.word	0x08026874

080122d4 <xTCPCheckNewClient>:
 * @param[in] pxSocket The socket for which the bound socket list will be iterated.
 *
 * @return if there is a new client, then pdTRUE is returned or else, pdFALSE.
 */
    BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t * pxSocket )
    {
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b088      	sub	sp, #32
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
        TickType_t uxLocalPort = ( TickType_t ) FreeRTOS_htons( pxSocket->usLocalPort );
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80122e0:	021b      	lsls	r3, r3, #8
 80122e2:	b21a      	sxth	r2, r3
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80122e8:	0a1b      	lsrs	r3, r3, #8
 80122ea:	b29b      	uxth	r3, r3
 80122ec:	b21b      	sxth	r3, r3
 80122ee:	4313      	orrs	r3, r2
 80122f0:	b21b      	sxth	r3, r3
 80122f2:	b29b      	uxth	r3, r3
 80122f4:	617b      	str	r3, [r7, #20]
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxFound;
        BaseType_t xResult = pdFALSE;
 80122f6:	2300      	movs	r3, #0
 80122f8:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEndTCP = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 80122fa:	4b19      	ldr	r3, [pc, #100]	@ (8012360 <xTCPCheckNewClient+0x8c>)
 80122fc:	613b      	str	r3, [r7, #16]

        /* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
         * who has access. */
        for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 80122fe:	4b19      	ldr	r3, [pc, #100]	@ (8012364 <xTCPCheckNewClient+0x90>)
 8012300:	68db      	ldr	r3, [r3, #12]
 8012302:	61fb      	str	r3, [r7, #28]
 8012304:	e023      	b.n	801234e <xTCPCheckNewClient+0x7a>
             pxIterator != pxEndTCP;
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == ( configLIST_VOLATILE TickType_t ) uxLocalPort )
 8012306:	69fb      	ldr	r3, [r7, #28]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	697a      	ldr	r2, [r7, #20]
 801230c:	429a      	cmp	r2, r3
 801230e:	d11b      	bne.n	8012348 <xTCPCheckNewClient+0x74>
            {
                pxFound = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8012310:	69fb      	ldr	r3, [r7, #28]
 8012312:	68db      	ldr	r3, [r3, #12]
 8012314:	60fb      	str	r3, [r7, #12]

                if( ( pxFound->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 801231c:	2b06      	cmp	r3, #6
 801231e:	d113      	bne.n	8012348 <xTCPCheckNewClient+0x74>
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8012326:	f003 0302 	and.w	r3, r3, #2
 801232a:	b2db      	uxtb	r3, r3
 801232c:	2b00      	cmp	r3, #0
 801232e:	d00b      	beq.n	8012348 <xTCPCheckNewClient+0x74>
                {
                    pxSocket->u.xTCP.pxPeerSocket = pxFound;
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	68fa      	ldr	r2, [r7, #12]
 8012334:	67da      	str	r2, [r3, #124]	@ 0x7c
                    FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801233a:	4619      	mov	r1, r3
 801233c:	480a      	ldr	r0, [pc, #40]	@ (8012368 <xTCPCheckNewClient+0x94>)
 801233e:	f010 fa31 	bl	80227a4 <lUDPLoggingPrintf>
                    xResult = pdTRUE;
 8012342:	2301      	movs	r3, #1
 8012344:	61bb      	str	r3, [r7, #24]
                    break;
 8012346:	e006      	b.n	8012356 <xTCPCheckNewClient+0x82>
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 8012348:	69fb      	ldr	r3, [r7, #28]
 801234a:	685b      	ldr	r3, [r3, #4]
 801234c:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEndTCP;
 801234e:	69fa      	ldr	r2, [r7, #28]
 8012350:	693b      	ldr	r3, [r7, #16]
 8012352:	429a      	cmp	r2, r3
 8012354:	d1d7      	bne.n	8012306 <xTCPCheckNewClient+0x32>
                }
            }
        }

        return xResult;
 8012356:	69bb      	ldr	r3, [r7, #24]
    }
 8012358:	4618      	mov	r0, r3
 801235a:	3720      	adds	r7, #32
 801235c:	46bd      	mov	sp, r7
 801235e:	bd80      	pop	{r7, pc}
 8012360:	20001610 	.word	0x20001610
 8012364:	20001608 	.word	0x20001608
 8012368:	08026a50 	.word	0x08026a50

0801236c <prvCheckOptions>:
 *       ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that
 *       the TP header is longer than the usual 20 (5 x 4) bytes.
 */
    BaseType_t prvCheckOptions( FreeRTOS_Socket_t * pxSocket,
                                const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 801236c:	b580      	push	{r7, lr}
 801236e:	b08c      	sub	sp, #48	@ 0x30
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
 8012374:	6039      	str	r1, [r7, #0]
        size_t uxTCPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 8012376:	6838      	ldr	r0, [r7, #0]
 8012378:	f7f8 f83e 	bl	800a3f8 <uxIPHeaderSizePacket>
 801237c:	4603      	mov	r3, r0
 801237e:	330e      	adds	r3, #14
 8012380:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ uxTCPHeaderOffset ] ) );
 8012382:	683b      	ldr	r3, [r7, #0]
 8012384:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012386:	69fb      	ldr	r3, [r7, #28]
 8012388:	4413      	add	r3, r2
 801238a:	61bb      	str	r3, [r7, #24]
        const TCPHeader_t * pxTCPHeader;
        const uint8_t * pucPtr;
        BaseType_t xHasSYNFlag;
        BaseType_t xReturn = pdPASS;
 801238c:	2301      	movs	r3, #1
 801238e:	627b      	str	r3, [r7, #36]	@ 0x24
        /* Offset in the network packet where the first option byte is stored. */
        size_t uxOptionOffset = uxTCPHeaderOffset + ipSIZE_OF_TCP_HEADER;
 8012390:	69fb      	ldr	r3, [r7, #28]
 8012392:	3314      	adds	r3, #20
 8012394:	617b      	str	r3, [r7, #20]
        size_t uxOptionsLength;
        int32_t lResult;
        uint8_t ucLength;

        pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8012396:	69bb      	ldr	r3, [r7, #24]
 8012398:	613b      	str	r3, [r7, #16]


        /* A character pointer to iterate through the option data */
        pucPtr = pxTCPHeader->ucOptdata;
 801239a:	693b      	ldr	r3, [r7, #16]
 801239c:	3314      	adds	r3, #20
 801239e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPOffset <= ( 5U << 4U ) )
 80123a0:	693b      	ldr	r3, [r7, #16]
 80123a2:	7b1b      	ldrb	r3, [r3, #12]
 80123a4:	2b50      	cmp	r3, #80	@ 0x50
 80123a6:	d93f      	bls.n	8012428 <prvCheckOptions+0xbc>
        {
            /* Avoid integer underflow in computation of ucLength. */
        }
        else
        {
            ucLength = ( uint8_t ) ( ( ( pxTCPHeader->ucTCPOffset >> 4U ) - 5U ) << 2U );
 80123a8:	693b      	ldr	r3, [r7, #16]
 80123aa:	7b1b      	ldrb	r3, [r3, #12]
 80123ac:	091b      	lsrs	r3, r3, #4
 80123ae:	b2db      	uxtb	r3, r3
 80123b0:	3b05      	subs	r3, #5
 80123b2:	b2db      	uxtb	r3, r3
 80123b4:	009b      	lsls	r3, r3, #2
 80123b6:	73fb      	strb	r3, [r7, #15]
            uxOptionsLength = ( size_t ) ucLength;
 80123b8:	7bfb      	ldrb	r3, [r7, #15]
 80123ba:	623b      	str	r3, [r7, #32]

            if( pxNetworkBuffer->xDataLength > uxOptionOffset )
 80123bc:	683b      	ldr	r3, [r7, #0]
 80123be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80123c0:	697a      	ldr	r2, [r7, #20]
 80123c2:	429a      	cmp	r2, r3
 80123c4:	d230      	bcs.n	8012428 <prvCheckOptions+0xbc>
            {
                /* Validate options size calculation. */
                if( uxOptionsLength <= ( pxNetworkBuffer->xDataLength - uxOptionOffset ) )
 80123c6:	683b      	ldr	r3, [r7, #0]
 80123c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80123ca:	697b      	ldr	r3, [r7, #20]
 80123cc:	1ad3      	subs	r3, r2, r3
 80123ce:	6a3a      	ldr	r2, [r7, #32]
 80123d0:	429a      	cmp	r2, r3
 80123d2:	d829      	bhi.n	8012428 <prvCheckOptions+0xbc>
                {
                    if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_SYN ) != ( uint8_t ) 0U )
 80123d4:	693b      	ldr	r3, [r7, #16]
 80123d6:	7b5b      	ldrb	r3, [r3, #13]
 80123d8:	f003 0302 	and.w	r3, r3, #2
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d002      	beq.n	80123e6 <prvCheckOptions+0x7a>
                    {
                        xHasSYNFlag = pdTRUE;
 80123e0:	2301      	movs	r3, #1
 80123e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80123e4:	e001      	b.n	80123ea <prvCheckOptions+0x7e>
                    }
                    else
                    {
                        xHasSYNFlag = pdFALSE;
 80123e6:	2300      	movs	r3, #0
 80123e8:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* The length check is only necessary in case the option data are
                     *  corrupted, we don't like to run into invalid memory and crash. */
                    for( ; ; )
                    {
                        if( uxOptionsLength == 0U )
 80123ea:	6a3b      	ldr	r3, [r7, #32]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d018      	beq.n	8012422 <prvCheckOptions+0xb6>
                        {
                            /* coverity[break_stmt] : Break statement terminating the loop */
                            break;
                        }

                        lResult = prvSingleStepTCPHeaderOptions( pucPtr, uxOptionsLength, pxSocket, xHasSYNFlag );
 80123f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123f2:	687a      	ldr	r2, [r7, #4]
 80123f4:	6a39      	ldr	r1, [r7, #32]
 80123f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80123f8:	f000 f81c 	bl	8012434 <prvSingleStepTCPHeaderOptions>
 80123fc:	60b8      	str	r0, [r7, #8]

                        if( lResult < 0 )
 80123fe:	68bb      	ldr	r3, [r7, #8]
 8012400:	2b00      	cmp	r3, #0
 8012402:	da02      	bge.n	801240a <prvCheckOptions+0x9e>
                        {
                            xReturn = pdFAIL;
 8012404:	2300      	movs	r3, #0
 8012406:	627b      	str	r3, [r7, #36]	@ 0x24
                            break;
 8012408:	e00e      	b.n	8012428 <prvCheckOptions+0xbc>
                        }

                        if( lResult == 0 )
 801240a:	68bb      	ldr	r3, [r7, #8]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d00a      	beq.n	8012426 <prvCheckOptions+0xba>
                        {
                            break;
                        }

                        uxOptionsLength -= ( size_t ) lResult;
 8012410:	68bb      	ldr	r3, [r7, #8]
 8012412:	6a3a      	ldr	r2, [r7, #32]
 8012414:	1ad3      	subs	r3, r2, r3
 8012416:	623b      	str	r3, [r7, #32]
                        pucPtr = &( pucPtr[ lResult ] );
 8012418:	68bb      	ldr	r3, [r7, #8]
 801241a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801241c:	4413      	add	r3, r2
 801241e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        if( uxOptionsLength == 0U )
 8012420:	e7e3      	b.n	80123ea <prvCheckOptions+0x7e>
                            break;
 8012422:	bf00      	nop
 8012424:	e000      	b.n	8012428 <prvCheckOptions+0xbc>
                            break;
 8012426:	bf00      	nop
                    }
                }
            }
        }

        return xReturn;
 8012428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 801242a:	4618      	mov	r0, r3
 801242c:	3730      	adds	r7, #48	@ 0x30
 801242e:	46bd      	mov	sp, r7
 8012430:	bd80      	pop	{r7, pc}
	...

08012434 <prvSingleStepTCPHeaderOptions>:
 */
    static int32_t prvSingleStepTCPHeaderOptions( const uint8_t * const pucPtr,
                                                  size_t uxTotalLength,
                                                  FreeRTOS_Socket_t * const pxSocket,
                                                  BaseType_t xHasSYNFlag )
    {
 8012434:	b580      	push	{r7, lr}
 8012436:	b08a      	sub	sp, #40	@ 0x28
 8012438:	af00      	add	r7, sp, #0
 801243a:	60f8      	str	r0, [r7, #12]
 801243c:	60b9      	str	r1, [r7, #8]
 801243e:	607a      	str	r2, [r7, #4]
 8012440:	603b      	str	r3, [r7, #0]
        UBaseType_t uxNewMSS;
        size_t uxRemainingOptionsBytes = uxTotalLength;
 8012442:	68bb      	ldr	r3, [r7, #8]
 8012444:	617b      	str	r3, [r7, #20]
        uint8_t ucLen;
        int32_t lIndex = 0;
 8012446:	2300      	movs	r3, #0
 8012448:	61fb      	str	r3, [r7, #28]
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012450:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8012452:	2300      	movs	r3, #0
 8012454:	61bb      	str	r3, [r7, #24]

        if( pucPtr[ 0U ] == tcpTCP_OPT_END )
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	781b      	ldrb	r3, [r3, #0]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d102      	bne.n	8012464 <prvSingleStepTCPHeaderOptions+0x30>
        {
            /* End of options. */
            lIndex = 0;
 801245e:	2300      	movs	r3, #0
 8012460:	61fb      	str	r3, [r7, #28]
 8012462:	e0da      	b.n	801261a <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else if( pucPtr[ 0U ] == tcpTCP_OPT_NOOP )
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	781b      	ldrb	r3, [r3, #0]
 8012468:	2b01      	cmp	r3, #1
 801246a:	d102      	bne.n	8012472 <prvSingleStepTCPHeaderOptions+0x3e>
        {
            /* NOP option, inserted to make the length a multiple of 4. */
            lIndex = 1;
 801246c:	2301      	movs	r3, #1
 801246e:	61fb      	str	r3, [r7, #28]
 8012470:	e0d3      	b.n	801261a <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else if( uxRemainingOptionsBytes < 2U )
 8012472:	697b      	ldr	r3, [r7, #20]
 8012474:	2b01      	cmp	r3, #1
 8012476:	d803      	bhi.n	8012480 <prvSingleStepTCPHeaderOptions+0x4c>
        {
            /* Any other well-formed option must be at least two bytes: the option
             * type byte followed by a length byte. */
            lIndex = -1;
 8012478:	f04f 33ff 	mov.w	r3, #4294967295
 801247c:	61fb      	str	r3, [r7, #28]
 801247e:	e0cc      	b.n	801261a <prvSingleStepTCPHeaderOptions+0x1e6>
        }

        #if ( ipconfigUSE_TCP_WIN != 0 )
            else if( pucPtr[ 0 ] == tcpTCP_OPT_WSOPT )
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	781b      	ldrb	r3, [r3, #0]
 8012484:	2b03      	cmp	r3, #3
 8012486:	d11e      	bne.n	80124c6 <prvSingleStepTCPHeaderOptions+0x92>
            {
                /* The TCP Window Scale Option. */
                /* Confirm that the option fits in the remaining buffer space. */
                if( ( uxRemainingOptionsBytes < tcpTCP_OPT_WSOPT_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_WSOPT_LEN ) )
 8012488:	697b      	ldr	r3, [r7, #20]
 801248a:	2b02      	cmp	r3, #2
 801248c:	d904      	bls.n	8012498 <prvSingleStepTCPHeaderOptions+0x64>
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	3301      	adds	r3, #1
 8012492:	781b      	ldrb	r3, [r3, #0]
 8012494:	2b03      	cmp	r3, #3
 8012496:	d003      	beq.n	80124a0 <prvSingleStepTCPHeaderOptions+0x6c>
                {
                    lIndex = -1;
 8012498:	f04f 33ff 	mov.w	r3, #4294967295
 801249c:	61fb      	str	r3, [r7, #28]
 801249e:	e0bc      	b.n	801261a <prvSingleStepTCPHeaderOptions+0x1e6>
                }
                else
                {
                    /* Option is only valid in SYN phase. */
                    if( xHasSYNFlag != 0 )
 80124a0:	683b      	ldr	r3, [r7, #0]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d00c      	beq.n	80124c0 <prvSingleStepTCPHeaderOptions+0x8c>
                    {
                        pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	3302      	adds	r3, #2
 80124aa:	781a      	ldrb	r2, [r3, #0]
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
                        pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 80124b2:	687a      	ldr	r2, [r7, #4]
 80124b4:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80124b8:	f043 0310 	orr.w	r3, r3, #16
 80124bc:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_WSOPT_LEN;
 80124c0:	2303      	movs	r3, #3
 80124c2:	61fb      	str	r3, [r7, #28]
 80124c4:	e0a9      	b.n	801261a <prvSingleStepTCPHeaderOptions+0x1e6>
                }
            }
        #endif /* ipconfigUSE_TCP_WIN */
        else if( pucPtr[ 0 ] == tcpTCP_OPT_MSS )
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	781b      	ldrb	r3, [r3, #0]
 80124ca:	2b02      	cmp	r3, #2
 80124cc:	d16d      	bne.n	80125aa <prvSingleStepTCPHeaderOptions+0x176>
        {
            /* Confirm that the option fits in the remaining buffer space. */
            if( ( uxRemainingOptionsBytes < tcpTCP_OPT_MSS_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_MSS_LEN ) )
 80124ce:	697b      	ldr	r3, [r7, #20]
 80124d0:	2b03      	cmp	r3, #3
 80124d2:	d904      	bls.n	80124de <prvSingleStepTCPHeaderOptions+0xaa>
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	3301      	adds	r3, #1
 80124d8:	781b      	ldrb	r3, [r3, #0]
 80124da:	2b04      	cmp	r3, #4
 80124dc:	d003      	beq.n	80124e6 <prvSingleStepTCPHeaderOptions+0xb2>
            {
                lIndex = -1;
 80124de:	f04f 33ff 	mov.w	r3, #4294967295
 80124e2:	61fb      	str	r3, [r7, #28]
 80124e4:	e099      	b.n	801261a <prvSingleStepTCPHeaderOptions+0x1e6>
            else
            {
                /* An MSS option with the correct option length.  FreeRTOS_htons()
                 * is not needed here because usChar2u16() already returns a host
                 * endian number. */
                uxNewMSS = usChar2u16( &( pucPtr[ 2 ] ) );
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	3302      	adds	r3, #2
 80124ea:	4618      	mov	r0, r3
 80124ec:	f7f8 fd31 	bl	800af52 <usChar2u16>
 80124f0:	4603      	mov	r3, r0
 80124f2:	627b      	str	r3, [r7, #36]	@ 0x24

                if( pxSocket->u.xTCP.usMSS != uxNewMSS )
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80124fa:	461a      	mov	r2, r3
 80124fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124fe:	4293      	cmp	r3, r2
 8012500:	d010      	beq.n	8012524 <prvSingleStepTCPHeaderOptions+0xf0>
                {
                    /* Perform a basic check on the the new MSS. */
                    if( uxNewMSS == 0U )
 8012502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012504:	2b00      	cmp	r3, #0
 8012506:	d105      	bne.n	8012514 <prvSingleStepTCPHeaderOptions+0xe0>
                    {
                        lIndex = -1;
 8012508:	f04f 33ff 	mov.w	r3, #4294967295
 801250c:	61fb      	str	r3, [r7, #28]

                        /* Return Condition found. */
                        xReturn = pdTRUE;
 801250e:	2301      	movs	r3, #1
 8012510:	61bb      	str	r3, [r7, #24]
 8012512:	e007      	b.n	8012524 <prvSingleStepTCPHeaderOptions+0xf0>
                    }
                    else
                    {
                        FreeRTOS_debug_printf( ( "MSS change %u -> %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801251a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801251c:	4619      	mov	r1, r3
 801251e:	4841      	ldr	r0, [pc, #260]	@ (8012624 <prvSingleStepTCPHeaderOptions+0x1f0>)
 8012520:	f010 f940 	bl	80227a4 <lUDPLoggingPrintf>
                    }
                }

                /* If a 'return' condition has not been found. */
                if( xReturn == pdFALSE )
 8012524:	69bb      	ldr	r3, [r7, #24]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d177      	bne.n	801261a <prvSingleStepTCPHeaderOptions+0x1e6>
                {
                    /* Restrict the minimum value of segment length to the ( Minimum IP MTU (576) - IP header(20) - TCP Header(20) ).
                     * See "RFC 791 section 3.1 Total Length" for more details. */
                    if( uxNewMSS < tcpMINIMUM_SEGMENT_LENGTH )
 801252a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801252c:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8012530:	d202      	bcs.n	8012538 <prvSingleStepTCPHeaderOptions+0x104>
                    {
                        uxNewMSS = tcpMINIMUM_SEGMENT_LENGTH;
 8012532:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8012536:	627b      	str	r3, [r7, #36]	@ 0x24
                    }

                    if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801253e:	461a      	mov	r2, r3
 8012540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012542:	4293      	cmp	r3, r2
 8012544:	d22e      	bcs.n	80125a4 <prvSingleStepTCPHeaderOptions+0x170>
                    {
                        /* our MSS was bigger than the MSS of the other party: adapt it. */
                        pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 8012546:	687a      	ldr	r2, [r7, #4]
 8012548:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801254c:	f043 0301 	orr.w	r3, r3, #1
 8012550:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

                        if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801255a:	461a      	mov	r2, r3
 801255c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801255e:	4293      	cmp	r3, r2
 8012560:	d207      	bcs.n	8012572 <prvSingleStepTCPHeaderOptions+0x13e>
                        {
                            /* The peer advertises a smaller MSS than this socket was
                             * using.  Use that as well. */
                            FreeRTOS_debug_printf( ( "Change mss %d => %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8012568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801256a:	4619      	mov	r1, r3
 801256c:	482e      	ldr	r0, [pc, #184]	@ (8012628 <prvSingleStepTCPHeaderOptions+0x1f4>)
 801256e:	f010 f919 	bl	80227a4 <lUDPLoggingPrintf>
                        }

                        pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 8012572:	693b      	ldr	r3, [r7, #16]
 8012574:	685a      	ldr	r2, [r3, #4]
 8012576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012578:	fbb2 f3f3 	udiv	r3, r2, r3
 801257c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801257e:	fb03 f202 	mul.w	r2, r3, r2
 8012582:	693b      	ldr	r3, [r7, #16]
 8012584:	605a      	str	r2, [r3, #4]
                        pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 8012586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012588:	b29a      	uxth	r2, r3
 801258a:	693b      	ldr	r3, [r7, #16]
 801258c:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
                        pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 8012590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012592:	b29a      	uxth	r2, r3
 8012594:	693b      	ldr	r3, [r7, #16]
 8012596:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
                        pxSocket->u.xTCP.usMSS = ( uint16_t ) uxNewMSS;
 801259a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801259c:	b29a      	uxth	r2, r3
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_MSS_LEN;
 80125a4:	2304      	movs	r3, #4
 80125a6:	61fb      	str	r3, [r7, #28]
 80125a8:	e037      	b.n	801261a <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else
        {
            /* All other options have a length field, so that we easily
             * can skip past them. */
            ucLen = pucPtr[ 1 ];
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	3301      	adds	r3, #1
 80125ae:	781b      	ldrb	r3, [r3, #0]
 80125b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            lIndex = 0;
 80125b4:	2300      	movs	r3, #0
 80125b6:	61fb      	str	r3, [r7, #28]

            if( ( ucLen < ( uint8_t ) 2U ) || ( uxRemainingOptionsBytes < ( size_t ) ucLen ) )
 80125b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80125bc:	2b01      	cmp	r3, #1
 80125be:	d904      	bls.n	80125ca <prvSingleStepTCPHeaderOptions+0x196>
 80125c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80125c4:	697a      	ldr	r2, [r7, #20]
 80125c6:	429a      	cmp	r2, r3
 80125c8:	d203      	bcs.n	80125d2 <prvSingleStepTCPHeaderOptions+0x19e>
            {
                /* If the length field is too small or too big, the options are
                 * malformed, don't process them further.
                 */
                lIndex = -1;
 80125ca:	f04f 33ff 	mov.w	r3, #4294967295
 80125ce:	61fb      	str	r3, [r7, #28]
 80125d0:	e023      	b.n	801261a <prvSingleStepTCPHeaderOptions+0x1e6>
                {
                    /* Selective ACK: the peer has received a packet but it is missing
                     * earlier packets. At least this packet does not need retransmission
                     * anymore. ulTCPWindowTxSack( ) takes care of this administration.
                     */
                    if( pucPtr[ 0U ] == tcpTCP_OPT_SACK_A )
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	781b      	ldrb	r3, [r3, #0]
 80125d6:	2b05      	cmp	r3, #5
 80125d8:	d11a      	bne.n	8012610 <prvSingleStepTCPHeaderOptions+0x1dc>
                    {
                        ucLen = ( uint8_t ) ( ucLen - 2U );
 80125da:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80125de:	3b02      	subs	r3, #2
 80125e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        lIndex += 2;
 80125e4:	69fb      	ldr	r3, [r7, #28]
 80125e6:	3302      	adds	r3, #2
 80125e8:	61fb      	str	r3, [r7, #28]

                        while( ucLen >= ( uint8_t ) 8U )
 80125ea:	e00d      	b.n	8012608 <prvSingleStepTCPHeaderOptions+0x1d4>
                        {
                            prvReadSackOption( pucPtr, ( size_t ) lIndex, pxSocket );
 80125ec:	69fb      	ldr	r3, [r7, #28]
 80125ee:	687a      	ldr	r2, [r7, #4]
 80125f0:	4619      	mov	r1, r3
 80125f2:	68f8      	ldr	r0, [r7, #12]
 80125f4:	f000 f81a 	bl	801262c <prvReadSackOption>
                            lIndex += 8;
 80125f8:	69fb      	ldr	r3, [r7, #28]
 80125fa:	3308      	adds	r3, #8
 80125fc:	61fb      	str	r3, [r7, #28]
                            ucLen = ( uint8_t ) ( ucLen - 8U );
 80125fe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012602:	3b08      	subs	r3, #8
 8012604:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        while( ucLen >= ( uint8_t ) 8U )
 8012608:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801260c:	2b07      	cmp	r3, #7
 801260e:	d8ed      	bhi.n	80125ec <prvSingleStepTCPHeaderOptions+0x1b8>
                        /* ucLen should be 0 by now. */
                    }
                }
                #endif /* ipconfigUSE_TCP_WIN == 1 */

                lIndex += ( int32_t ) ucLen;
 8012610:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012614:	69fa      	ldr	r2, [r7, #28]
 8012616:	4413      	add	r3, r2
 8012618:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 0 )
            /* Avoid compiler warnings when TCP window is not used. */
            ( void ) xHasSYNFlag;
        #endif

        return lIndex;
 801261a:	69fb      	ldr	r3, [r7, #28]
    }
 801261c:	4618      	mov	r0, r3
 801261e:	3728      	adds	r7, #40	@ 0x28
 8012620:	46bd      	mov	sp, r7
 8012622:	bd80      	pop	{r7, pc}
 8012624:	08026a7c 	.word	0x08026a7c
 8012628:	08026a94 	.word	0x08026a94

0801262c <prvReadSackOption>:
 * @param[in] pxSocket Socket handling the TCP connection.
 */
        static void prvReadSackOption( const uint8_t * const pucPtr,
                                       size_t uxIndex,
                                       FreeRTOS_Socket_t * const pxSocket )
        {
 801262c:	b580      	push	{r7, lr}
 801262e:	b08a      	sub	sp, #40	@ 0x28
 8012630:	af02      	add	r7, sp, #8
 8012632:	60f8      	str	r0, [r7, #12]
 8012634:	60b9      	str	r1, [r7, #8]
 8012636:	607a      	str	r2, [r7, #4]
            uint32_t ulFirst = ulChar2u32( &( pucPtr[ uxIndex ] ) );
 8012638:	68fa      	ldr	r2, [r7, #12]
 801263a:	68bb      	ldr	r3, [r7, #8]
 801263c:	4413      	add	r3, r2
 801263e:	4618      	mov	r0, r3
 8012640:	f7f8 fc6c 	bl	800af1c <ulChar2u32>
 8012644:	61f8      	str	r0, [r7, #28]
            uint32_t ulLast = ulChar2u32( &( pucPtr[ uxIndex + 4U ] ) );
 8012646:	68bb      	ldr	r3, [r7, #8]
 8012648:	3304      	adds	r3, #4
 801264a:	68fa      	ldr	r2, [r7, #12]
 801264c:	4413      	add	r3, r2
 801264e:	4618      	mov	r0, r3
 8012650:	f7f8 fc64 	bl	800af1c <ulChar2u32>
 8012654:	61b8      	str	r0, [r7, #24]
            uint32_t ulCount = ulTCPWindowTxSack( &( pxSocket->u.xTCP.xTCPWindow ), ulFirst, ulLast );
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 801265c:	69ba      	ldr	r2, [r7, #24]
 801265e:	69f9      	ldr	r1, [r7, #28]
 8012660:	4618      	mov	r0, r3
 8012662:	f004 fba3 	bl	8016dac <ulTCPWindowTxSack>
 8012666:	6178      	str	r0, [r7, #20]

            /* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
             * starting from the head position.  Advance the tail pointer in txStream.
             */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801266e:	2b00      	cmp	r3, #0
 8012670:	d029      	beq.n	80126c6 <prvReadSackOption+0x9a>
 8012672:	697b      	ldr	r3, [r7, #20]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d026      	beq.n	80126c6 <prvReadSackOption+0x9a>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
                ( void ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 801267e:	2300      	movs	r3, #0
 8012680:	9300      	str	r3, [sp, #0]
 8012682:	697b      	ldr	r3, [r7, #20]
 8012684:	2200      	movs	r2, #0
 8012686:	2100      	movs	r1, #0
 8012688:	f7fe fed9 	bl	801143e <uxStreamBufferGet>
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	f043 0202 	orr.w	r2, r3, #2
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	601a      	str	r2, [r3, #0]

                #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                {
                    if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801269c:	f003 0302 	and.w	r3, r3, #2
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d005      	beq.n	80126b0 <prvReadSackOption+0x84>
                    {
                        /* The field 'xEventBits' is used to store regular socket events
                         * (at most 8), as well as 'select events', which will be left-shifted.
                         */
                        pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	601a      	str	r2, [r3, #0]

                /* In case the socket owner has installed an OnSent handler,
                 * call it now. */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                {
                    if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d005      	beq.n	80126c6 <prvReadSackOption+0x9a>
                    {
                        pxSocket->u.xTCP.pxHandleSent( pxSocket, ulCount );
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80126c0:	6979      	ldr	r1, [r7, #20]
 80126c2:	6878      	ldr	r0, [r7, #4]
 80126c4:	4798      	blx	r3
                    }
                }
                #endif /* ipconfigUSE_CALLBACKS == 1  */
            }
        }
 80126c6:	bf00      	nop
 80126c8:	3720      	adds	r7, #32
 80126ca:	46bd      	mov	sp, r7
 80126cc:	bd80      	pop	{r7, pc}

080126ce <prvCheckRxData>:
 *
 * @return Length of the received buffer.
 */
    BaseType_t prvCheckRxData( const NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint8_t ** ppucRecvData )
    {
 80126ce:	b590      	push	{r4, r7, lr}
 80126d0:	b08f      	sub	sp, #60	@ 0x3c
 80126d2:	af00      	add	r7, sp, #0
 80126d4:	6078      	str	r0, [r7, #4]
 80126d6:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80126dc:	6878      	ldr	r0, [r7, #4]
 80126de:	f7f7 fe8b 	bl	800a3f8 <uxIPHeaderSizePacket>
 80126e2:	4603      	mov	r3, r0
 80126e4:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80126e6:	4423      	add	r3, r4
 80126e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 80126ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126ec:	62bb      	str	r3, [r7, #40]	@ 0x28
        int32_t lLength, lTCPHeaderLength, lReceiveLength, lUrgentLength;

        /* Map the buffer onto an IPHeader_t struct for easy access to fields. */

        const size_t xIPHeaderLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 80126ee:	6878      	ldr	r0, [r7, #4]
 80126f0:	f7f7 fe82 	bl	800a3f8 <uxIPHeaderSizePacket>
 80126f4:	6278      	str	r0, [r7, #36]	@ 0x24
        uint16_t usLength;
        uint8_t ucIntermediateResult = 0;
 80126f6:	2300      	movs	r3, #0
 80126f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
         * node.
         *
         * The size of the TCP header is given in a multiple of 4-byte words (single
         * byte, needs no ntoh() translation).  A shift-right 2: is the same as
         * (offset >> 4) * 4. */
        ucIntermediateResult = ( pxTCPHeader->ucTCPOffset & tcpVALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2;
 80126fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126fe:	7b1b      	ldrb	r3, [r3, #12]
 8012700:	089b      	lsrs	r3, r3, #2
 8012702:	b2db      	uxtb	r3, r3
 8012704:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8012708:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        lTCPHeaderLength = ( int32_t ) ucIntermediateResult;
 801270c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012710:	61fb      	str	r3, [r7, #28]

        /* Let pucRecvData point to the first byte received. */
        *ppucRecvData = &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderLength + ( size_t ) lTCPHeaderLength ] );
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012716:	69f9      	ldr	r1, [r7, #28]
 8012718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801271a:	440b      	add	r3, r1
 801271c:	330e      	adds	r3, #14
 801271e:	441a      	add	r2, r3
 8012720:	683b      	ldr	r3, [r7, #0]
 8012722:	601a      	str	r2, [r3, #0]

        /* Calculate lReceiveLength - the length of the TCP data received.  This is
         * equal to the total packet length minus:
         * ( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
        lReceiveLength = ( int32_t ) pxNetworkBuffer->xDataLength;
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012728:	633b      	str	r3, [r7, #48]	@ 0x30
        lReceiveLength -= ( int32_t ) ipSIZE_OF_ETH_HEADER;
 801272a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801272c:	3b0e      	subs	r3, #14
 801272e:	633b      	str	r3, [r7, #48]	@ 0x30

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        switch( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer )->usFrameType )
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012734:	899b      	ldrh	r3, [r3, #12]
 8012736:	b29b      	uxth	r3, r3
 8012738:	2b08      	cmp	r3, #8
 801273a:	d004      	beq.n	8012746 <prvCheckRxData+0x78>
 801273c:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8012740:	4293      	cmp	r3, r2
 8012742:	d015      	beq.n	8012770 <prvCheckRxData+0xa2>
 8012744:	e02c      	b.n	80127a0 <prvCheckRxData+0xd2>
                case ipIPv4_FRAME_TYPE:
                   {
                       /* MISRA Ref 11.3.1 [Misaligned access] */
                       /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                       /* coverity[misra_c_2012_rule_11_3_violation] */
                       const IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801274a:	330e      	adds	r3, #14
 801274c:	613b      	str	r3, [r7, #16]

                       usLength = FreeRTOS_htons( pxIPHeader->usLength );
 801274e:	693b      	ldr	r3, [r7, #16]
 8012750:	885b      	ldrh	r3, [r3, #2]
 8012752:	b29b      	uxth	r3, r3
 8012754:	021b      	lsls	r3, r3, #8
 8012756:	b21a      	sxth	r2, r3
 8012758:	693b      	ldr	r3, [r7, #16]
 801275a:	885b      	ldrh	r3, [r3, #2]
 801275c:	b29b      	uxth	r3, r3
 801275e:	0a1b      	lsrs	r3, r3, #8
 8012760:	b29b      	uxth	r3, r3
 8012762:	b21b      	sxth	r3, r3
 8012764:	4313      	orrs	r3, r2
 8012766:	b21b      	sxth	r3, r3
 8012768:	82fb      	strh	r3, [r7, #22]
                       lLength = ( int32_t ) usLength;
 801276a:	8afb      	ldrh	r3, [r7, #22]
 801276c:	637b      	str	r3, [r7, #52]	@ 0x34
                   }
                   break;
 801276e:	e01a      	b.n	80127a6 <prvCheckRxData+0xd8>
                case ipIPv6_FRAME_TYPE:
                   {
                       /* MISRA Ref 11.3.1 [Misaligned access] */
                       /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                       /* coverity[misra_c_2012_rule_11_3_violation] */
                       const IPHeader_IPv6_t * pxIPHeader = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012774:	330e      	adds	r3, #14
 8012776:	61bb      	str	r3, [r7, #24]

                       /* For Coverity: conversion and cast in 2 steps. */
                       usLength = FreeRTOS_htons( pxIPHeader->usPayloadLength );
 8012778:	69bb      	ldr	r3, [r7, #24]
 801277a:	889b      	ldrh	r3, [r3, #4]
 801277c:	b29b      	uxth	r3, r3
 801277e:	021b      	lsls	r3, r3, #8
 8012780:	b21a      	sxth	r2, r3
 8012782:	69bb      	ldr	r3, [r7, #24]
 8012784:	889b      	ldrh	r3, [r3, #4]
 8012786:	b29b      	uxth	r3, r3
 8012788:	0a1b      	lsrs	r3, r3, #8
 801278a:	b29b      	uxth	r3, r3
 801278c:	b21b      	sxth	r3, r3
 801278e:	4313      	orrs	r3, r2
 8012790:	b21b      	sxth	r3, r3
 8012792:	82fb      	strh	r3, [r7, #22]
                       lLength = ( int32_t ) usLength;
 8012794:	8afb      	ldrh	r3, [r7, #22]
 8012796:	637b      	str	r3, [r7, #52]	@ 0x34
                       /* Add the length of the TCP-header, because that was not included in 'usPayloadLength'. */
                       lLength += ( int32_t ) sizeof( IPHeader_IPv6_t );
 8012798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801279a:	3328      	adds	r3, #40	@ 0x28
 801279c:	637b      	str	r3, [r7, #52]	@ 0x34
                   }
                   break;
 801279e:	e002      	b.n	80127a6 <prvCheckRxData+0xd8>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                lLength = 0;
 80127a0:	2300      	movs	r3, #0
 80127a2:	637b      	str	r3, [r7, #52]	@ 0x34
                break;
 80127a4:	bf00      	nop
        }

        if( lReceiveLength > lLength )
 80127a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80127a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127aa:	429a      	cmp	r2, r3
 80127ac:	dd01      	ble.n	80127b2 <prvCheckRxData+0xe4>
        {
            /* More bytes were received than the reported length, often because of
             * padding bytes at the end. */
            lReceiveLength = lLength;
 80127ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127b0:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        /* Subtract the size of the TCP and IP headers and the actual data size is
         * known. */
        if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength ) )
 80127b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80127b4:	69fb      	ldr	r3, [r7, #28]
 80127b6:	4413      	add	r3, r2
 80127b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80127ba:	429a      	cmp	r2, r3
 80127bc:	dd06      	ble.n	80127cc <prvCheckRxData+0xfe>
        {
            lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength );
 80127be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80127c0:	69fb      	ldr	r3, [r7, #28]
 80127c2:	4413      	add	r3, r2
 80127c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80127c6:	1ad3      	subs	r3, r2, r3
 80127c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80127ca:	e001      	b.n	80127d0 <prvCheckRxData+0x102>
        }
        else
        {
            lReceiveLength = 0;
 80127cc:	2300      	movs	r3, #0
 80127ce:	633b      	str	r3, [r7, #48]	@ 0x30
         * This field communicates the current value of the urgent pointer as a
         * positive offset from the sequence number in this segment.  The urgent
         * pointer points to the sequence number of the octet following the urgent
         * data.  This field is only be interpreted in segments with the URG control
         * bit set. */
        if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_URG ) != 0U )
 80127d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127d2:	7b5b      	ldrb	r3, [r3, #13]
 80127d4:	f003 0320 	and.w	r3, r3, #32
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d01c      	beq.n	8012816 <prvCheckRxData+0x148>
        {
            /* Although we ignore the urgent data, we have to skip it. */
            lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 80127dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127de:	8a5b      	ldrh	r3, [r3, #18]
 80127e0:	b29b      	uxth	r3, r3
 80127e2:	021b      	lsls	r3, r3, #8
 80127e4:	b21a      	sxth	r2, r3
 80127e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127e8:	8a5b      	ldrh	r3, [r3, #18]
 80127ea:	b29b      	uxth	r3, r3
 80127ec:	0a1b      	lsrs	r3, r3, #8
 80127ee:	b29b      	uxth	r3, r3
 80127f0:	b21b      	sxth	r3, r3
 80127f2:	4313      	orrs	r3, r2
 80127f4:	b21b      	sxth	r3, r3
 80127f6:	b29b      	uxth	r3, r3
 80127f8:	60fb      	str	r3, [r7, #12]

            /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
            /* coverity[misra_c_2012_rule_18_4_violation] */
            *ppucRecvData += lUrgentLength;
 80127fa:	683b      	ldr	r3, [r7, #0]
 80127fc:	681a      	ldr	r2, [r3, #0]
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	441a      	add	r2, r3
 8012802:	683b      	ldr	r3, [r7, #0]
 8012804:	601a      	str	r2, [r3, #0]
            lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 8012806:	68f9      	ldr	r1, [r7, #12]
 8012808:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801280a:	f7f8 fb33 	bl	800ae74 <FreeRTOS_min_int32>
 801280e:	4602      	mov	r2, r0
 8012810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012812:	1a9b      	subs	r3, r3, r2
 8012814:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        return ( BaseType_t ) lReceiveLength;
 8012816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
 8012818:	4618      	mov	r0, r3
 801281a:	373c      	adds	r7, #60	@ 0x3c
 801281c:	46bd      	mov	sp, r7
 801281e:	bd90      	pop	{r4, r7, pc}

08012820 <prvStoreRxData>:
 */
    BaseType_t prvStoreRxData( FreeRTOS_Socket_t * pxSocket,
                               const uint8_t * pucRecvData,
                               NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint32_t ulReceiveLength )
    {
 8012820:	b580      	push	{r7, lr}
 8012822:	b092      	sub	sp, #72	@ 0x48
 8012824:	af02      	add	r7, sp, #8
 8012826:	60f8      	str	r0, [r7, #12]
 8012828:	60b9      	str	r1, [r7, #8]
 801282a:	607a      	str	r2, [r7, #4]
 801282c:	603b      	str	r3, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        size_t uxIPOffset = uxIPHeaderSizePacket( pxNetworkBuffer );
 801282e:	6878      	ldr	r0, [r7, #4]
 8012830:	f7f7 fde2 	bl	800a3f8 <uxIPHeaderSizePacket>
 8012834:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPOffset ] ) );
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801283a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801283c:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 801283e:	4413      	add	r3, r2
 8012840:	62bb      	str	r3, [r7, #40]	@ 0x28
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8012842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012844:	627b      	str	r3, [r7, #36]	@ 0x24
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 801284c:	623b      	str	r3, [r7, #32]
        uint32_t ulSequenceNumber, ulSpace;
        int32_t lOffset, lStored;
        BaseType_t xResult = 0;
 801284e:	2300      	movs	r3, #0
 8012850:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint32_t ulRxLength = ulReceiveLength;
 8012852:	683b      	ldr	r3, [r7, #0]
 8012854:	637b      	str	r3, [r7, #52]	@ 0x34
        const uint8_t * pucRxBuffer = &( pucRecvData[ 0 ] );
 8012856:	68bb      	ldr	r3, [r7, #8]
 8012858:	633b      	str	r3, [r7, #48]	@ 0x30

        ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 801285a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801285c:	685b      	ldr	r3, [r3, #4]
 801285e:	061a      	lsls	r2, r3, #24
 8012860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012862:	685b      	ldr	r3, [r3, #4]
 8012864:	021b      	lsls	r3, r3, #8
 8012866:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801286a:	431a      	orrs	r2, r3
 801286c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801286e:	685b      	ldr	r3, [r3, #4]
 8012870:	0a1b      	lsrs	r3, r3, #8
 8012872:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012876:	431a      	orrs	r2, r3
 8012878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801287a:	685b      	ldr	r3, [r3, #4]
 801287c:	0e1b      	lsrs	r3, r3, #24
 801287e:	4313      	orrs	r3, r2
 8012880:	61fb      	str	r3, [r7, #28]

        if( ( ulRxLength > 0U ) && ( pxSocket->u.xTCP.eTCPState >= eSYN_RECEIVED ) )
 8012882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012884:	2b00      	cmp	r3, #0
 8012886:	d057      	beq.n	8012938 <prvStoreRxData+0x118>
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801288e:	2b03      	cmp	r3, #3
 8012890:	d952      	bls.n	8012938 <prvStoreRxData+0x118>
        {
            uint32_t ulSkipCount = 0;
 8012892:	2300      	movs	r3, #0
 8012894:	613b      	str	r3, [r7, #16]
             *
             * If it can't be "accept"ed it may have to be stored and send a selective
             * ack (SACK) option to confirm it.  In that case, lTCPAddRxdata() will be
             * called later to store an out-of-order packet (in case lOffset is
             * negative). */
            if( pxSocket->u.xTCP.rxStream != NULL )
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801289c:	2b00      	cmp	r3, #0
 801289e:	d007      	beq.n	80128b0 <prvStoreRxData+0x90>
            {
                ulSpace = ( uint32_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.rxStream );
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80128a6:	4618      	mov	r0, r3
 80128a8:	f7fe fc89 	bl	80111be <uxStreamBufferGetSpace>
 80128ac:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80128ae:	e003      	b.n	80128b8 <prvStoreRxData+0x98>
            }
            else
            {
                ulSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80128b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }

            lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulRxLength, ulSpace, &( ulSkipCount ) );
 80128b8:	f107 0310 	add.w	r3, r7, #16
 80128bc:	9300      	str	r3, [sp, #0]
 80128be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80128c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80128c2:	69f9      	ldr	r1, [r7, #28]
 80128c4:	6a38      	ldr	r0, [r7, #32]
 80128c6:	f003 fd45 	bl	8016354 <lTCPWindowRxCheck>
 80128ca:	61b8      	str	r0, [r7, #24]

            if( lOffset >= 0 )
 80128cc:	69bb      	ldr	r3, [r7, #24]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	db20      	blt.n	8012914 <prvStoreRxData+0xf4>
            {
                /* New data has arrived and may be made available to the user.  See
                 * if the head marker in rxStream may be advanced, only if lOffset == 0.
                 * In case the low-water mark is reached, bLowWater will be set
                 * "low-water" here stands for "little space". */
                if( ulSkipCount != 0U )
 80128d2:	693b      	ldr	r3, [r7, #16]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d007      	beq.n	80128e8 <prvStoreRxData+0xc8>
                {
                    /* A packet was received that starts before 'ulCurrentSequenceNumber',
                     * and that ends after it.  The first 'ulSkipCount' bytes shall be
                     * skipped. */
                    ulRxLength -= ulSkipCount;
 80128d8:	693b      	ldr	r3, [r7, #16]
 80128da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80128dc:	1ad3      	subs	r3, r2, r3
 80128de:	637b      	str	r3, [r7, #52]	@ 0x34
                    pucRxBuffer = &( pucRecvData[ ulSkipCount ] );
 80128e0:	693b      	ldr	r3, [r7, #16]
 80128e2:	68ba      	ldr	r2, [r7, #8]
 80128e4:	4413      	add	r3, r2
 80128e6:	633b      	str	r3, [r7, #48]	@ 0x30
                }

                lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRxBuffer, ulRxLength );
 80128e8:	69b9      	ldr	r1, [r7, #24]
 80128ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80128ee:	68f8      	ldr	r0, [r7, #12]
 80128f0:	f7fe f8d2 	bl	8010a98 <lTCPAddRxdata>
 80128f4:	6178      	str	r0, [r7, #20]

                if( lStored != ( int32_t ) ulRxLength )
 80128f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128f8:	697a      	ldr	r2, [r7, #20]
 80128fa:	429a      	cmp	r2, r3
 80128fc:	d00a      	beq.n	8012914 <prvStoreRxData+0xf4>
                {
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %d / %u bytes? ?\n", ( int ) lStored, ( unsigned ) ulRxLength ) );
 80128fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012900:	6979      	ldr	r1, [r7, #20]
 8012902:	4813      	ldr	r0, [pc, #76]	@ (8012950 <prvStoreRxData+0x130>)
 8012904:	f00f ff4e 	bl	80227a4 <lUDPLoggingPrintf>

                    /* Received data could not be stored.  The socket's flag
                     * bMallocError has been set.  The socket now has the status
                     * eCLOSE_WAIT and a RST packet will be sent back. */
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 8012908:	6878      	ldr	r0, [r7, #4]
 801290a:	f002 f8b3 	bl	8014a74 <prvTCPSendReset>
                    xResult = -1;
 801290e:	f04f 33ff 	mov.w	r3, #4294967295
 8012912:	63bb      	str	r3, [r7, #56]	@ 0x38
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                /* Now lTCPAddRxdata() will move the rxHead pointer forward
                 * so data becomes available to the user immediately
                 * In case the low-water mark is reached, bLowWater will be set. */
                if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0U ) )
 8012914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012916:	2b00      	cmp	r3, #0
 8012918:	d113      	bne.n	8012942 <prvStoreRxData+0x122>
 801291a:	6a3b      	ldr	r3, [r7, #32]
 801291c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801291e:	2b00      	cmp	r3, #0
 8012920:	d00f      	beq.n	8012942 <prvStoreRxData+0x122>
                {
                    ( void ) lTCPAddRxdata( pxSocket, 0U, NULL, pxTCPWindow->ulUserDataLength );
 8012922:	6a3b      	ldr	r3, [r7, #32]
 8012924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012926:	2200      	movs	r2, #0
 8012928:	2100      	movs	r1, #0
 801292a:	68f8      	ldr	r0, [r7, #12]
 801292c:	f7fe f8b4 	bl	8010a98 <lTCPAddRxdata>
                    pxTCPWindow->ulUserDataLength = 0;
 8012930:	6a3b      	ldr	r3, [r7, #32]
 8012932:	2200      	movs	r2, #0
 8012934:	631a      	str	r2, [r3, #48]	@ 0x30
        {
 8012936:	e004      	b.n	8012942 <prvStoreRxData+0x122>
            }
            #endif /* ipconfigUSE_TCP_WIN */
        }
        else
        {
            pxTCPWindow->ucOptionLength = 0U;
 8012938:	6a3b      	ldr	r3, [r7, #32]
 801293a:	2200      	movs	r2, #0
 801293c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8012940:	e000      	b.n	8012944 <prvStoreRxData+0x124>
        {
 8012942:	bf00      	nop
        }

        return xResult;
 8012944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    }
 8012946:	4618      	mov	r0, r3
 8012948:	3740      	adds	r7, #64	@ 0x40
 801294a:	46bd      	mov	sp, r7
 801294c:	bd80      	pop	{r7, pc}
 801294e:	bf00      	nop
 8012950:	08026aac 	.word	0x08026aac

08012954 <prvTCPSocketIsActive>:
 *
 * @return pdTRUE if the socket must be checked. Non-active sockets
 *         are waiting for user action, either connect() or close().
 */
    BaseType_t prvTCPSocketIsActive( eIPTCPState_t eStatus )
    {
 8012954:	b480      	push	{r7}
 8012956:	b085      	sub	sp, #20
 8012958:	af00      	add	r7, sp, #0
 801295a:	4603      	mov	r3, r0
 801295c:	71fb      	strb	r3, [r7, #7]
        BaseType_t xResult;

        switch( eStatus )
 801295e:	79fb      	ldrb	r3, [r7, #7]
 8012960:	2b0b      	cmp	r3, #11
 8012962:	bf8c      	ite	hi
 8012964:	2201      	movhi	r2, #1
 8012966:	2200      	movls	r2, #0
 8012968:	b2d2      	uxtb	r2, r2
 801296a:	2a00      	cmp	r2, #0
 801296c:	d10f      	bne.n	801298e <prvTCPSocketIsActive+0x3a>
 801296e:	f640 3281 	movw	r2, #2945	@ 0xb81
 8012972:	fa22 f303 	lsr.w	r3, r2, r3
 8012976:	f003 0301 	and.w	r3, r3, #1
 801297a:	2b00      	cmp	r3, #0
 801297c:	bf14      	ite	ne
 801297e:	2301      	movne	r3, #1
 8012980:	2300      	moveq	r3, #0
 8012982:	b2db      	uxtb	r3, r3
 8012984:	2b00      	cmp	r3, #0
 8012986:	d002      	beq.n	801298e <prvTCPSocketIsActive+0x3a>
            case eCLOSED:
            case eCLOSE_WAIT:
            case eFIN_WAIT_2:
            case eCLOSING:
            case eTIME_WAIT:
                xResult = pdFALSE;
 8012988:	2300      	movs	r3, #0
 801298a:	60fb      	str	r3, [r7, #12]
                break;
 801298c:	e002      	b.n	8012994 <prvTCPSocketIsActive+0x40>
            case eSYN_RECEIVED:
            case eESTABLISHED:
            case eFIN_WAIT_1:
            case eLAST_ACK:
            default:
                xResult = pdTRUE;
 801298e:	2301      	movs	r3, #1
 8012990:	60fb      	str	r3, [r7, #12]
                break;
 8012992:	bf00      	nop
        }

        return xResult;
 8012994:	68fb      	ldr	r3, [r7, #12]
    }
 8012996:	4618      	mov	r0, r3
 8012998:	3714      	adds	r7, #20
 801299a:	46bd      	mov	sp, r7
 801299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a0:	4770      	bx	lr
	...

080129a4 <prvTCPStatusAgeCheck>:
 * @return pdFALSE if no checks are needed, pdTRUE if checks were done, or negative
 *         in case the socket has reached a critical time-out. The socket will go to
 *         the eCLOSE_WAIT state.
 */
        BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t * pxSocket )
        {
 80129a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129a6:	b089      	sub	sp, #36	@ 0x24
 80129a8:	af02      	add	r7, sp, #8
 80129aa:	6078      	str	r0, [r7, #4]
            BaseType_t xResult;

            eIPTCPState_t eState = pxSocket->u.xTCP.eTCPState;
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80129b2:	74fb      	strb	r3, [r7, #19]

            switch( eState )
 80129b4:	7cfb      	ldrb	r3, [r7, #19]
 80129b6:	2b08      	cmp	r3, #8
 80129b8:	d00b      	beq.n	80129d2 <prvTCPStatusAgeCheck+0x2e>
 80129ba:	2b08      	cmp	r3, #8
 80129bc:	dc0c      	bgt.n	80129d8 <prvTCPStatusAgeCheck+0x34>
 80129be:	2b01      	cmp	r3, #1
 80129c0:	dc02      	bgt.n	80129c8 <prvTCPStatusAgeCheck+0x24>
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	da05      	bge.n	80129d2 <prvTCPStatusAgeCheck+0x2e>
 80129c6:	e007      	b.n	80129d8 <prvTCPStatusAgeCheck+0x34>
 80129c8:	2b05      	cmp	r3, #5
 80129ca:	d105      	bne.n	80129d8 <prvTCPStatusAgeCheck+0x34>
            {
                case eESTABLISHED:

                    /* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
                     *  state ESTABLISHED can be protected using keep-alive messages. */
                    xResult = pdFALSE;
 80129cc:	2300      	movs	r3, #0
 80129ce:	617b      	str	r3, [r7, #20]
                    break;
 80129d0:	e005      	b.n	80129de <prvTCPStatusAgeCheck+0x3a>

                case eCLOSED:
                case eTCP_LISTEN:
                case eCLOSE_WAIT:
                    /* These 3 states may last for ever, up to the owner. */
                    xResult = pdFALSE;
 80129d2:	2300      	movs	r3, #0
 80129d4:	617b      	str	r3, [r7, #20]
                    break;
 80129d6:	e002      	b.n	80129de <prvTCPStatusAgeCheck+0x3a>
                case eTIME_WAIT:
                default:

                    /* All other (non-connected) states will get anti-hanging
                     * protection. */
                    xResult = pdTRUE;
 80129d8:	2301      	movs	r3, #1
 80129da:	617b      	str	r3, [r7, #20]
                    break;
 80129dc:	bf00      	nop
            }

            if( xResult != pdFALSE )
 80129de:	697b      	ldr	r3, [r7, #20]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d032      	beq.n	8012a4a <prvTCPStatusAgeCheck+0xa6>
            {
                /* How much time has past since the last active moment which is
                 * defined as A) a state change or B) a packet has arrived. */
                TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastActTime;
 80129e4:	f7f2 f974 	bl	8004cd0 <xTaskGetTickCount>
 80129e8:	4602      	mov	r2, r0
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80129f0:	1ad3      	subs	r3, r2, r3
 80129f2:	60fb      	str	r3, [r7, #12]

                /* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
                if( xAge > ( ( TickType_t ) ipconfigTCP_HANG_PROTECTION_TIME * ( TickType_t ) configTICK_RATE_HZ ) )
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	f247 5230 	movw	r2, #30000	@ 0x7530
 80129fa:	4293      	cmp	r3, r2
 80129fc:	d925      	bls.n	8012a4a <prvTCPStatusAgeCheck+0xa6>
                {
                    #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                    {
                        FreeRTOS_debug_printf( ( "Inactive socket closed: port %u rem %xip:%u status %s\n",
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012a02:	461d      	mov	r5, r3
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012a0e:	461e      	mov	r6, r3
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012a16:	4618      	mov	r0, r3
 8012a18:	f000 fdca 	bl	80135b0 <FreeRTOS_GetTCPStateName>
 8012a1c:	4603      	mov	r3, r0
 8012a1e:	9300      	str	r3, [sp, #0]
 8012a20:	4633      	mov	r3, r6
 8012a22:	4622      	mov	r2, r4
 8012a24:	4629      	mov	r1, r5
 8012a26:	480b      	ldr	r0, [pc, #44]	@ (8012a54 <prvTCPStatusAgeCheck+0xb0>)
 8012a28:	f00f febc 	bl	80227a4 <lUDPLoggingPrintf>
                                                 FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.eTCPState ) ) );
                    }
                    #endif /* ipconfigHAS_DEBUG_PRINTF */

                    /* Move to eCLOSE_WAIT, user may close the socket. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8012a2c:	2108      	movs	r1, #8
 8012a2e:	6878      	ldr	r0, [r7, #4]
 8012a30:	f7fe feac 	bl	801178c <vTCPStateChange>

                    /* When 'bPassQueued' true, this socket is an orphan until it
                     * gets connected. */
                    if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8012a3a:	f003 0304 	and.w	r3, r3, #4
 8012a3e:	b2db      	uxtb	r3, r3
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d002      	beq.n	8012a4a <prvTCPStatusAgeCheck+0xa6>
                    {
                        /* vTCPStateChange() has called vSocketCloseNextTime()
                         * in case the socket is not yet owned by the application.
                         * Return a negative value to inform the caller that
                         * the socket will be closed in the next cycle. */
                        xResult = -1;
 8012a44:	f04f 33ff 	mov.w	r3, #4294967295
 8012a48:	617b      	str	r3, [r7, #20]
                    }
                }
            }

            return xResult;
 8012a4a:	697b      	ldr	r3, [r7, #20]
        }
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	371c      	adds	r7, #28
 8012a50:	46bd      	mov	sp, r7
 8012a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a54:	08026ad4 	.word	0x08026ad4

08012a58 <prvTCPHandleFin>:
 *
 * @return Length of the packet to be sent.
 */
    static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t * pxSocket,
                                       const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8012a58:	b5b0      	push	{r4, r5, r7, lr}
 8012a5a:	b08a      	sub	sp, #40	@ 0x28
 8012a5c:	af02      	add	r7, sp, #8
 8012a5e:	6078      	str	r0, [r7, #4]
 8012a60:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8012a62:	683b      	ldr	r3, [r7, #0]
 8012a64:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012a66:	6838      	ldr	r0, [r7, #0]
 8012a68:	f7f7 fcc6 	bl	800a3f8 <uxIPHeaderSizePacket>
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012a70:	4423      	add	r3, r4
 8012a72:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8012a74:	69bb      	ldr	r3, [r7, #24]
 8012a76:	617b      	str	r3, [r7, #20]
        uint8_t ucIntermediateResult = 0, ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8012a78:	2300      	movs	r3, #0
 8012a7a:	74fb      	strb	r3, [r7, #19]
 8012a7c:	697b      	ldr	r3, [r7, #20]
 8012a7e:	7b5b      	ldrb	r3, [r3, #13]
 8012a80:	74bb      	strb	r3, [r7, #18]
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012a88:	60fb      	str	r3, [r7, #12]
        BaseType_t xSendLength = 0;
 8012a8a:	2300      	movs	r3, #0
 8012a8c:	61fb      	str	r3, [r7, #28]
        uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 8012a8e:	697b      	ldr	r3, [r7, #20]
 8012a90:	689b      	ldr	r3, [r3, #8]
 8012a92:	061a      	lsls	r2, r3, #24
 8012a94:	697b      	ldr	r3, [r7, #20]
 8012a96:	689b      	ldr	r3, [r3, #8]
 8012a98:	021b      	lsls	r3, r3, #8
 8012a9a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012a9e:	431a      	orrs	r2, r3
 8012aa0:	697b      	ldr	r3, [r7, #20]
 8012aa2:	689b      	ldr	r3, [r3, #8]
 8012aa4:	0a1b      	lsrs	r3, r3, #8
 8012aa6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012aaa:	431a      	orrs	r2, r3
 8012aac:	697b      	ldr	r3, [r7, #20]
 8012aae:	689b      	ldr	r3, [r3, #8]
 8012ab0:	0e1b      	lsrs	r3, r3, #24
 8012ab2:	4313      	orrs	r3, r2
 8012ab4:	60bb      	str	r3, [r7, #8]

        if( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U )
 8012ab6:	7cbb      	ldrb	r3, [r7, #18]
 8012ab8:	f003 0301 	and.w	r3, r3, #1
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d004      	beq.n	8012aca <prvTCPHandleFin+0x72>
        {
            pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1U;
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	695b      	ldr	r3, [r3, #20]
 8012ac4:	1c5a      	adds	r2, r3, #1
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	611a      	str	r2, [r3, #16]
        }

        if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012ad4:	b2db      	uxtb	r3, r3
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d10b      	bne.n	8012af2 <prvTCPHandleFin+0x9a>
        {
            /* We haven't yet replied with a FIN, do so now. */
            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	6a1a      	ldr	r2, [r3, #32]
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8012ae2:	687a      	ldr	r2, [r7, #4]
 8012ae4:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012ae8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012aec:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 8012af0:	e00c      	b.n	8012b0c <prvTCPHandleFin+0xb4>
        }
        else
        {
            /* We did send a FIN already, see if it's ACK'd. */
            if( ulAckNr == ( pxTCPWindow->tx.ulFINSequenceNumber + 1U ) )
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012af6:	3301      	adds	r3, #1
 8012af8:	68ba      	ldr	r2, [r7, #8]
 8012afa:	429a      	cmp	r2, r3
 8012afc:	d106      	bne.n	8012b0c <prvTCPHandleFin+0xb4>
            {
                pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 8012afe:	687a      	ldr	r2, [r7, #4]
 8012b00:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8012b04:	f043 0301 	orr.w	r3, r3, #1
 8012b08:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            }
        }

        if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8012b12:	f003 0301 	and.w	r3, r3, #1
 8012b16:	b2db      	uxtb	r3, r3
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d10b      	bne.n	8012b34 <prvTCPHandleFin+0xdc>
        {
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	621a      	str	r2, [r3, #32]
            pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_FIN;
 8012b24:	697b      	ldr	r3, [r7, #20]
 8012b26:	2211      	movs	r2, #17
 8012b28:	735a      	strb	r2, [r3, #13]

            /* And wait for the final ACK. */
            vTCPStateChange( pxSocket, eLAST_ACK );
 8012b2a:	210a      	movs	r1, #10
 8012b2c:	6878      	ldr	r0, [r7, #4]
 8012b2e:	f7fe fe2d 	bl	801178c <vTCPStateChange>
 8012b32:	e023      	b.n	8012b7c <prvTCPHandleFin+0x124>
        }
        else
        {
            /* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1U;
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b38:	1c5a      	adds	r2, r3, #1
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	621a      	str	r2, [r3, #32]

            if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012b44:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012b48:	b2db      	uxtb	r3, r3
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d103      	bne.n	8012b56 <prvTCPHandleFin+0xfe>
            {
                /* We have sent out a FIN but the peer hasn't replied with a FIN
                 * yet. Do nothing for the moment. */
                pxTCPHeader->ucTCPFlags = 0U;
 8012b4e:	697b      	ldr	r3, [r7, #20]
 8012b50:	2200      	movs	r2, #0
 8012b52:	735a      	strb	r2, [r3, #13]
 8012b54:	e012      	b.n	8012b7c <prvTCPHandleFin+0x124>
            }
            else
            {
                if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8012b5c:	f003 0302 	and.w	r3, r3, #2
 8012b60:	b2db      	uxtb	r3, r3
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d103      	bne.n	8012b6e <prvTCPHandleFin+0x116>
                {
                    /* This is the third of the three-way hand shake: the last
                     * ACK. */
                    pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8012b66:	697b      	ldr	r3, [r7, #20]
 8012b68:	2210      	movs	r2, #16
 8012b6a:	735a      	strb	r2, [r3, #13]
 8012b6c:	e002      	b.n	8012b74 <prvTCPHandleFin+0x11c>
                }
                else
                {
                    /* The other party started the closure, so we just wait for the
                     * last ACK. */
                    pxTCPHeader->ucTCPFlags = 0U;
 8012b6e:	697b      	ldr	r3, [r7, #20]
 8012b70:	2200      	movs	r2, #0
 8012b72:	735a      	strb	r2, [r3, #13]
                }

                /* And wait for the user to close this socket. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8012b74:	2108      	movs	r1, #8
 8012b76:	6878      	ldr	r0, [r7, #4]
 8012b78:	f7fe fe08 	bl	801178c <vTCPStateChange>
            }
        }

        pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	6a1a      	ldr	r2, [r3, #32]
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	62da      	str	r2, [r3, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPFlags != 0U )
 8012b84:	697b      	ldr	r3, [r7, #20]
 8012b86:	7b5b      	ldrb	r3, [r3, #13]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d00d      	beq.n	8012ba8 <prvTCPHandleFin+0x150>
        {
            ucIntermediateResult = ( uint8_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength );
 8012b8c:	6878      	ldr	r0, [r7, #4]
 8012b8e:	f7f7 fc4d 	bl	800a42c <uxIPHeaderSizeSocket>
 8012b92:	4603      	mov	r3, r0
 8012b94:	b2da      	uxtb	r2, r3
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012b9c:	4413      	add	r3, r2
 8012b9e:	b2db      	uxtb	r3, r3
 8012ba0:	3314      	adds	r3, #20
 8012ba2:	74fb      	strb	r3, [r7, #19]
            xSendLength = ( BaseType_t ) ucIntermediateResult;
 8012ba4:	7cfb      	ldrb	r3, [r7, #19]
 8012ba6:	61fb      	str	r3, [r7, #28]
        }

        pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012bae:	3314      	adds	r3, #20
 8012bb0:	b2db      	uxtb	r3, r3
 8012bb2:	009b      	lsls	r3, r3, #2
 8012bb4:	b2da      	uxtb	r2, r3
 8012bb6:	697b      	ldr	r3, [r7, #20]
 8012bb8:	731a      	strb	r2, [r3, #12]

        if( xTCPWindowLoggingLevel != 0 )
 8012bba:	4b14      	ldr	r3, [pc, #80]	@ (8012c0c <prvTCPHandleFin+0x1b4>)
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d01f      	beq.n	8012c02 <prvTCPHandleFin+0x1aa>
        {
            FreeRTOS_debug_printf( ( "TCP: send FIN+ACK (ack %u, cur/nxt %u/%u) ourSeqNr %u | Rx %u\n",
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	69db      	ldr	r3, [r3, #28]
 8012bc6:	68ba      	ldr	r2, [r7, #8]
 8012bc8:	1ad0      	subs	r0, r2, r3
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	6a1a      	ldr	r2, [r3, #32]
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	69db      	ldr	r3, [r3, #28]
 8012bd2:	1ad4      	subs	r4, r2, r3
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	69db      	ldr	r3, [r3, #28]
 8012bdc:	1ad5      	subs	r5, r2, r3
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	69db      	ldr	r3, [r3, #28]
 8012be6:	1ad3      	subs	r3, r2, r3
 8012be8:	68fa      	ldr	r2, [r7, #12]
 8012bea:	6911      	ldr	r1, [r2, #16]
 8012bec:	68fa      	ldr	r2, [r7, #12]
 8012bee:	68d2      	ldr	r2, [r2, #12]
 8012bf0:	1a8a      	subs	r2, r1, r2
 8012bf2:	9201      	str	r2, [sp, #4]
 8012bf4:	9300      	str	r3, [sp, #0]
 8012bf6:	462b      	mov	r3, r5
 8012bf8:	4622      	mov	r2, r4
 8012bfa:	4601      	mov	r1, r0
 8012bfc:	4804      	ldr	r0, [pc, #16]	@ (8012c10 <prvTCPHandleFin+0x1b8>)
 8012bfe:	f00f fdd1 	bl	80227a4 <lUDPLoggingPrintf>
                                     ( unsigned ) ( pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );
        }

        return xSendLength;
 8012c02:	69fb      	ldr	r3, [r7, #28]
    }
 8012c04:	4618      	mov	r0, r3
 8012c06:	3720      	adds	r7, #32
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	bdb0      	pop	{r4, r5, r7, pc}
 8012c0c:	2000164c 	.word	0x2000164c
 8012c10:	08026b0c 	.word	0x08026b0c

08012c14 <prvHandleSynReceived>:
 */
    static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t * pxSocket,
                                            const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 8012c14:	b590      	push	{r4, r7, lr}
 8012c16:	b09b      	sub	sp, #108	@ 0x6c
 8012c18:	af02      	add	r7, sp, #8
 8012c1a:	60f8      	str	r0, [r7, #12]
 8012c1c:	60b9      	str	r1, [r7, #8]
 8012c1e:	607a      	str	r2, [r7, #4]
 8012c20:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8012c22:	68bb      	ldr	r3, [r7, #8]
 8012c24:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012c26:	68f8      	ldr	r0, [r7, #12]
 8012c28:	f7f7 fc00 	bl	800a42c <uxIPHeaderSizeSocket>
 8012c2c:	4603      	mov	r3, r0
 8012c2e:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012c30:	4423      	add	r3, r4
 8012c32:	657b      	str	r3, [r7, #84]	@ 0x54
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8012c34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c36:	653b      	str	r3, [r7, #80]	@ 0x50
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8012c40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c42:	7b5b      	ldrb	r3, [r3, #13]
 8012c44:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 8012c48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c4a:	685b      	ldr	r3, [r3, #4]
 8012c4c:	061a      	lsls	r2, r3, #24
 8012c4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c50:	685b      	ldr	r3, [r3, #4]
 8012c52:	021b      	lsls	r3, r3, #8
 8012c54:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012c58:	431a      	orrs	r2, r3
 8012c5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c5c:	685b      	ldr	r3, [r3, #4]
 8012c5e:	0a1b      	lsrs	r3, r3, #8
 8012c60:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012c64:	431a      	orrs	r2, r3
 8012c66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c68:	685b      	ldr	r3, [r3, #4]
 8012c6a:	0e1b      	lsrs	r3, r3, #24
 8012c6c:	4313      	orrs	r3, r2
 8012c6e:	647b      	str	r3, [r7, #68]	@ 0x44
        BaseType_t xSendLength = 0;
 8012c70:	2300      	movs	r3, #0
 8012c72:	65fb      	str	r3, [r7, #92]	@ 0x5c
        UBaseType_t uxIntermediateResult = 0U;
 8012c74:	2300      	movs	r3, #0
 8012c76:	643b      	str	r3, [r7, #64]	@ 0x40

        /* Either expect a ACK or a SYN+ACK. */
        uint8_t ucExpect = tcpTCP_FLAG_ACK;
 8012c78:	2310      	movs	r3, #16
 8012c7a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        const uint8_t ucFlagsMask = tcpTCP_FLAG_ACK | tcpTCP_FLAG_RST | tcpTCP_FLAG_SYN | tcpTCP_FLAG_FIN;
 8012c7e:	2317      	movs	r3, #23
 8012c80:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012c8a:	2b02      	cmp	r3, #2
 8012c8c:	d105      	bne.n	8012c9a <prvHandleSynReceived+0x86>
        {
            ucExpect |= tcpTCP_FLAG_SYN;
 8012c8e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8012c92:	f043 0302 	orr.w	r3, r3, #2
 8012c96:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        }

        if( ( ucTCPFlags & ucFlagsMask ) != ucExpect )
 8012c9a:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8012c9e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012ca2:	4013      	ands	r3, r2
 8012ca4:	b2db      	uxtb	r3, r3
 8012ca6:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8012caa:	429a      	cmp	r2, r3
 8012cac:	d044      	beq.n	8012d38 <prvHandleSynReceived+0x124>
        {
            /* eSYN_RECEIVED: flags 0010 expected, not 0002. */
            /* eSYN_RECEIVED: flags ACK  expected, not SYN. */
            FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X\n",
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012cb4:	2b04      	cmp	r3, #4
 8012cb6:	d101      	bne.n	8012cbc <prvHandleSynReceived+0xa8>
 8012cb8:	4977      	ldr	r1, [pc, #476]	@ (8012e98 <prvHandleSynReceived+0x284>)
 8012cba:	e000      	b.n	8012cbe <prvHandleSynReceived+0xaa>
 8012cbc:	4977      	ldr	r1, [pc, #476]	@ (8012e9c <prvHandleSynReceived+0x288>)
 8012cbe:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8012cc2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8012cc6:	4876      	ldr	r0, [pc, #472]	@ (8012ea0 <prvHandleSynReceived+0x28c>)
 8012cc8:	f00f fd6c 	bl	80227a4 <lUDPLoggingPrintf>
                                     ( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eSYN_RECEIVED ) ? "eSYN_RECEIVED" : "eCONNECT_SYN",
                                     ucExpect, ucTCPFlags ) );

            /* In case pxSocket is not yet owned by the application, a closure
             * of the socket will be scheduled for the next cycle. */
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8012ccc:	2108      	movs	r1, #8
 8012cce:	68f8      	ldr	r0, [r7, #12]
 8012cd0:	f7fe fd5c 	bl	801178c <vTCPStateChange>

            /* Send RST with the expected sequence and ACK numbers,
             * otherwise the packet will be ignored. */
            pxTCPWindow->ulOurSequenceNumber = FreeRTOS_htonl( pxTCPHeader->ulAckNr );
 8012cd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012cd6:	689b      	ldr	r3, [r3, #8]
 8012cd8:	061a      	lsls	r2, r3, #24
 8012cda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012cdc:	689b      	ldr	r3, [r3, #8]
 8012cde:	021b      	lsls	r3, r3, #8
 8012ce0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012ce4:	431a      	orrs	r2, r3
 8012ce6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ce8:	689b      	ldr	r3, [r3, #8]
 8012cea:	0a1b      	lsrs	r3, r3, #8
 8012cec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012cf0:	431a      	orrs	r2, r3
 8012cf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012cf4:	689b      	ldr	r3, [r3, #8]
 8012cf6:	0e1b      	lsrs	r3, r3, #24
 8012cf8:	431a      	orrs	r2, r3
 8012cfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012cfc:	62da      	str	r2, [r3, #44]	@ 0x2c
            pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 8012cfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012d02:	611a      	str	r2, [r3, #16]

            pxTCPHeader->ucTCPFlags |= tcpTCP_FLAG_RST;
 8012d04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d06:	7b5b      	ldrb	r3, [r3, #13]
 8012d08:	f043 0304 	orr.w	r3, r3, #4
 8012d0c:	b2da      	uxtb	r2, r3
 8012d0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d10:	735a      	strb	r2, [r3, #13]

            uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012d12:	68f8      	ldr	r0, [r7, #12]
 8012d14:	f7f7 fb8a 	bl	800a42c <uxIPHeaderSizeSocket>
 8012d18:	4602      	mov	r2, r0
 8012d1a:	683b      	ldr	r3, [r7, #0]
 8012d1c:	4413      	add	r3, r2
 8012d1e:	3314      	adds	r3, #20
 8012d20:	643b      	str	r3, [r7, #64]	@ 0x40
            xSendLength = ( BaseType_t ) uxIntermediateResult;
 8012d22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012d24:	65fb      	str	r3, [r7, #92]	@ 0x5c

            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8012d26:	683b      	ldr	r3, [r7, #0]
 8012d28:	b2db      	uxtb	r3, r3
 8012d2a:	3314      	adds	r3, #20
 8012d2c:	b2db      	uxtb	r3, r3
 8012d2e:	009b      	lsls	r3, r3, #2
 8012d30:	b2da      	uxtb	r2, r3
 8012d32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d34:	731a      	strb	r2, [r3, #12]
 8012d36:	e0aa      	b.n	8012e8e <prvHandleSynReceived+0x27a>
        }
        else
        {
            pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8012d3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d40:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
            pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8012d48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d4a:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8

            if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012d54:	2b02      	cmp	r3, #2
 8012d56:	d12e      	bne.n	8012db6 <prvHandleSynReceived+0x1a2>

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
                                                      &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8012d58:	68f8      	ldr	r0, [r7, #12]
 8012d5a:	f7f7 fb67 	bl	800a42c <uxIPHeaderSizeSocket>
 8012d5e:	4603      	mov	r3, r0
 8012d60:	330e      	adds	r3, #14
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
 8012d62:	33a0      	adds	r3, #160	@ 0xa0
 8012d64:	68fa      	ldr	r2, [r7, #12]
 8012d66:	4413      	add	r3, r2
 8012d68:	330a      	adds	r3, #10
 8012d6a:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Clear the SYN flag in lastPacket. */
                pxLastHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 8012d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d6e:	2210      	movs	r2, #16
 8012d70:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 8012d72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d74:	2210      	movs	r2, #16
 8012d76:	735a      	strb	r2, [r3, #13]

                /* This socket was the one connecting actively so now perform the
                 * synchronisation. */
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
                                ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 8012d8a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012d8c:	f003 f8ec 	bl	8015f68 <vTCPWindowInit>
                pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 8012d90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012d92:	1c5a      	adds	r2, r3, #1
 8012d94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d96:	619a      	str	r2, [r3, #24]
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 8012d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012d9a:	1c5a      	adds	r2, r3, #1
 8012d9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d9e:	611a      	str	r2, [r3, #16]
                pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 8012da0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012da2:	6a1b      	ldr	r3, [r3, #32]
 8012da4:	1c5a      	adds	r2, r3, #1
 8012da6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012da8:	621a      	str	r2, [r3, #32]
                pxTCPWindow->ulNextTxSequenceNumber++;
 8012daa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012dae:	1c5a      	adds	r2, r3, #1
 8012db0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012db2:	635a      	str	r2, [r3, #52]	@ 0x34
 8012db4:	e005      	b.n	8012dc2 <prvHandleSynReceived+0x1ae>
            }
            else if( ulReceiveLength == 0U )
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d102      	bne.n	8012dc2 <prvHandleSynReceived+0x1ae>
            {
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 8012dbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012dbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012dc0:	611a      	str	r2, [r3, #16]
                /* Nothing. */
            }

            /* The SYN+ACK has been confirmed, increase the next sequence number by
             * 1. */
            pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 8012dc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012dc4:	69db      	ldr	r3, [r3, #28]
 8012dc6:	1c5a      	adds	r2, r3, #1
 8012dc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012dca:	62da      	str	r2, [r3, #44]	@ 0x2c

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                char pcBuffer[ 40 ]; /* Space to print an IP-address. */
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	7a1b      	ldrb	r3, [r3, #8]
 8012dd0:	f003 0301 	and.w	r3, r3, #1
 8012dd4:	b2db      	uxtb	r3, r3
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d001      	beq.n	8012dde <prvHandleSynReceived+0x1ca>
 8012dda:	200a      	movs	r0, #10
 8012ddc:	e000      	b.n	8012de0 <prvHandleSynReceived+0x1cc>
 8012dde:	2002      	movs	r0, #2
                                             ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	f103 0154 	add.w	r1, r3, #84	@ 0x54
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 8012de6:	f107 0210 	add.w	r2, r7, #16
 8012dea:	2328      	movs	r3, #40	@ 0x28
 8012dec:	f7fc fda2 	bl	800f934 <FreeRTOS_inet_ntop>
                                             pcBuffer,
                                             sizeof( pcBuffer ) );
                FreeRTOS_debug_printf( ( "TCP: %s %u => %s port %u set ESTAB (scaling %u)\n",
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012df6:	2b02      	cmp	r3, #2
 8012df8:	d101      	bne.n	8012dfe <prvHandleSynReceived+0x1ea>
 8012dfa:	492a      	ldr	r1, [pc, #168]	@ (8012ea4 <prvHandleSynReceived+0x290>)
 8012dfc:	e000      	b.n	8012e00 <prvHandleSynReceived+0x1ec>
 8012dfe:	492a      	ldr	r1, [pc, #168]	@ (8012ea8 <prvHandleSynReceived+0x294>)
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012e04:	461c      	mov	r4, r3
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012e0c:	461a      	mov	r2, r3
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8012e14:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8012e18:	b2db      	uxtb	r3, r3
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	f107 0310 	add.w	r3, r7, #16
 8012e20:	9001      	str	r0, [sp, #4]
 8012e22:	9200      	str	r2, [sp, #0]
 8012e24:	4622      	mov	r2, r4
 8012e26:	4821      	ldr	r0, [pc, #132]	@ (8012eac <prvHandleSynReceived+0x298>)
 8012e28:	f00f fcbc 	bl	80227a4 <lUDPLoggingPrintf>
                                         pxSocket->u.xTCP.usRemotePort,
                                         ( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
            }
            #endif /* ipconfigUSE_TCP_WIN */

            if( ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) || ( ulReceiveLength != 0U ) )
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012e32:	2b02      	cmp	r3, #2
 8012e34:	d002      	beq.n	8012e3c <prvHandleSynReceived+0x228>
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d014      	beq.n	8012e66 <prvHandleSynReceived+0x252>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8012e3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e3e:	2210      	movs	r2, #16
 8012e40:	735a      	strb	r2, [r3, #13]

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ( size_t ) ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012e42:	68f8      	ldr	r0, [r7, #12]
 8012e44:	f7f7 faf2 	bl	800a42c <uxIPHeaderSizeSocket>
 8012e48:	4602      	mov	r2, r0
 8012e4a:	683b      	ldr	r3, [r7, #0]
 8012e4c:	4413      	add	r3, r2
 8012e4e:	3314      	adds	r3, #20
 8012e50:	643b      	str	r3, [r7, #64]	@ 0x40
                xSendLength = ( BaseType_t ) uxIntermediateResult;
 8012e52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012e54:	65fb      	str	r3, [r7, #92]	@ 0x5c
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8012e56:	683b      	ldr	r3, [r7, #0]
 8012e58:	b2db      	uxtb	r3, r3
 8012e5a:	3314      	adds	r3, #20
 8012e5c:	b2db      	uxtb	r3, r3
 8012e5e:	009b      	lsls	r3, r3, #2
 8012e60:	b2da      	uxtb	r2, r3
 8012e62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e64:	731a      	strb	r2, [r3, #12]
            }

            #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8012e6c:	f003 0310 	and.w	r3, r3, #16
 8012e70:	b2db      	uxtb	r3, r3
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d107      	bne.n	8012e86 <prvHandleSynReceived+0x272>
                {
                    /* The other party did not send a scaling factor.
                     * A shifting factor in this side must be canceled. */
                    pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	2200      	movs	r2, #0
 8012e7a:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
                    pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	2200      	movs	r2, #0
 8012e82:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* This was the third step of connecting: SYN, SYN+ACK, ACK so now the
             * connection is established. */
            vTCPStateChange( pxSocket, eESTABLISHED );
 8012e86:	2105      	movs	r1, #5
 8012e88:	68f8      	ldr	r0, [r7, #12]
 8012e8a:	f7fe fc7f 	bl	801178c <vTCPStateChange>
        }

        return xSendLength;
 8012e8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
    }
 8012e90:	4618      	mov	r0, r3
 8012e92:	3764      	adds	r7, #100	@ 0x64
 8012e94:	46bd      	mov	sp, r7
 8012e96:	bd90      	pop	{r4, r7, pc}
 8012e98:	08026b4c 	.word	0x08026b4c
 8012e9c:	08026b5c 	.word	0x08026b5c
 8012ea0:	08026b6c 	.word	0x08026b6c
 8012ea4:	08026b90 	.word	0x08026b90
 8012ea8:	08026b98 	.word	0x08026b98
 8012eac:	08026ba0 	.word	0x08026ba0

08012eb0 <prvHandleEstablished>:
 */
    static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t * pxSocket,
                                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 8012eb0:	b590      	push	{r4, r7, lr}
 8012eb2:	b097      	sub	sp, #92	@ 0x5c
 8012eb4:	af02      	add	r7, sp, #8
 8012eb6:	60f8      	str	r0, [r7, #12]
 8012eb8:	60b9      	str	r1, [r7, #8]
 8012eba:	607a      	str	r2, [r7, #4]
 8012ebc:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8012ebe:	68bb      	ldr	r3, [r7, #8]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012ec4:	68f8      	ldr	r0, [r7, #12]
 8012ec6:	f7f7 fab1 	bl	800a42c <uxIPHeaderSizeSocket>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012ece:	4423      	add	r3, r4
 8012ed0:	647b      	str	r3, [r7, #68]	@ 0x44
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8012ed2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012ed4:	643b      	str	r3, [r7, #64]	@ 0x40
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8012ede:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012ee0:	7b5b      	ldrb	r3, [r3, #13]
 8012ee2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount, ulIntermediateResult = 0;
 8012ee6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012ee8:	685b      	ldr	r3, [r3, #4]
 8012eea:	061a      	lsls	r2, r3, #24
 8012eec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012eee:	685b      	ldr	r3, [r3, #4]
 8012ef0:	021b      	lsls	r3, r3, #8
 8012ef2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012ef6:	431a      	orrs	r2, r3
 8012ef8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012efa:	685b      	ldr	r3, [r3, #4]
 8012efc:	0a1b      	lsrs	r3, r3, #8
 8012efe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012f02:	431a      	orrs	r2, r3
 8012f04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f06:	685b      	ldr	r3, [r3, #4]
 8012f08:	0e1b      	lsrs	r3, r3, #24
 8012f0a:	4313      	orrs	r3, r2
 8012f0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8012f0e:	2300      	movs	r3, #0
 8012f10:	633b      	str	r3, [r7, #48]	@ 0x30
        BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 8012f12:	2300      	movs	r3, #0
 8012f14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012f16:	2300      	movs	r3, #0
 8012f18:	64bb      	str	r3, [r7, #72]	@ 0x48
        int32_t lDistance, lSendResult;
        uint16_t usWindow;
        UBaseType_t uxIntermediateResult = 0;
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Remember the window size the peer is advertising. */
        usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 8012f1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f20:	89db      	ldrh	r3, [r3, #14]
 8012f22:	b29b      	uxth	r3, r3
 8012f24:	021b      	lsls	r3, r3, #8
 8012f26:	b21a      	sxth	r2, r3
 8012f28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f2a:	89db      	ldrh	r3, [r3, #14]
 8012f2c:	b29b      	uxth	r3, r3
 8012f2e:	0a1b      	lsrs	r3, r3, #8
 8012f30:	b29b      	uxth	r3, r3
 8012f32:	b21b      	sxth	r3, r3
 8012f34:	4313      	orrs	r3, r2
 8012f36:	b21b      	sxth	r3, r3
 8012f38:	857b      	strh	r3, [r7, #42]	@ 0x2a
        pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 8012f3a:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ulWindowSize =
                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8012f48:	68fa      	ldr	r2, [r7, #12]
 8012f4a:	f892 2106 	ldrb.w	r2, [r2, #262]	@ 0x106
 8012f4e:	fa03 f202 	lsl.w	r2, r3, r2
            pxSocket->u.xTCP.ulWindowSize =
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_ACK ) == 0U )
 8012f58:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8012f5c:	f003 0310 	and.w	r3, r3, #16
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	f000 8106 	beq.w	8013172 <prvHandleEstablished+0x2c2>
             * be dropped
             */
        }
        else
        {
            ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPHeader->ulAckNr ) );
 8012f66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f68:	689b      	ldr	r3, [r3, #8]
 8012f6a:	061a      	lsls	r2, r3, #24
 8012f6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f6e:	689b      	ldr	r3, [r3, #8]
 8012f70:	021b      	lsls	r3, r3, #8
 8012f72:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012f76:	431a      	orrs	r2, r3
 8012f78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f7a:	689b      	ldr	r3, [r3, #8]
 8012f7c:	0a1b      	lsrs	r3, r3, #8
 8012f7e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012f82:	431a      	orrs	r2, r3
 8012f84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f86:	689b      	ldr	r3, [r3, #8]
 8012f88:	0e1b      	lsrs	r3, r3, #24
 8012f8a:	4313      	orrs	r3, r2
 8012f8c:	4619      	mov	r1, r3
 8012f8e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012f90:	f003 feee 	bl	8016d70 <ulTCPWindowTxAck>
 8012f94:	6278      	str	r0, [r7, #36]	@ 0x24

            /* ulTCPWindowTxAck() returns the number of bytes which have been acked,
             * starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
             * txStream. */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d02c      	beq.n	8012ffa <prvHandleEstablished+0x14a>
 8012fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d029      	beq.n	8012ffa <prvHandleEstablished+0x14a>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been
                 * confirmed, and because there is new space in the txStream, the
                 * user/owner should be woken up. */
                /* _HT_ : only in case the socket's waiting? */
                if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0U, NULL, ( size_t ) ulCount, pdFALSE ) != 0U )
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8012fac:	2300      	movs	r3, #0
 8012fae:	9300      	str	r3, [sp, #0]
 8012fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fb2:	2200      	movs	r2, #0
 8012fb4:	2100      	movs	r1, #0
 8012fb6:	f7fe fa42 	bl	801143e <uxStreamBufferGet>
 8012fba:	4603      	mov	r3, r0
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d01c      	beq.n	8012ffa <prvHandleEstablished+0x14a>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	f043 0202 	orr.w	r2, r3, #2
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	601a      	str	r2, [r3, #0]

                    #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012fd0:	f003 0302 	and.w	r3, r3, #2
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d005      	beq.n	8012fe4 <prvHandleEstablished+0x134>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	601a      	str	r2, [r3, #0]

                    /* In case the socket owner has installed an OnSent handler,
                     * call it now. */
                    #if ( ipconfigUSE_CALLBACKS == 1 )
                    {
                        if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d005      	beq.n	8012ffa <prvHandleEstablished+0x14a>
                        {
                            pxSocket->u.xTCP.pxHandleSent( ( Socket_t ) pxSocket, ulCount );
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8012ff4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012ff6:	68f8      	ldr	r0, [r7, #12]
 8012ff8:	4798      	blx	r3
                }
            }

            /* If this socket has a stream for transmission, add the data to the
             * outgoing segment(s). */
            if( pxSocket->u.xTCP.txStream != NULL )
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013000:	2b00      	cmp	r3, #0
 8013002:	d002      	beq.n	801300a <prvHandleEstablished+0x15a>
            {
                prvTCPAddTxData( pxSocket );
 8013004:	68f8      	ldr	r0, [r7, #12]
 8013006:	f001 fb13 	bl	8014630 <prvTCPAddTxData>
            }

            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 801300a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801300c:	6a1a      	ldr	r2, [r3, #32]
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U ) )
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801301a:	f003 0320 	and.w	r3, r3, #32
 801301e:	b2db      	uxtb	r3, r3
 8013020:	2b00      	cmp	r3, #0
 8013022:	d105      	bne.n	8013030 <prvHandleEstablished+0x180>
 8013024:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8013028:	f003 0301 	and.w	r3, r3, #1
 801302c:	2b00      	cmp	r3, #0
 801302e:	d06b      	beq.n	8013108 <prvHandleEstablished+0x258>
            {
                /* Peer is requesting to stop, see if we're really finished. */
                xMayClose = pdTRUE;
 8013030:	2301      	movs	r3, #1
 8013032:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Checks are only necessary if we haven't sent a FIN yet. */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801303a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801303e:	b2db      	uxtb	r3, r3
 8013040:	2b00      	cmp	r3, #0
 8013042:	d13a      	bne.n	80130ba <prvHandleEstablished+0x20a>
                {
                    /* xTCPWindowTxDone returns true when all Tx queues are empty. */
                    bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 8013044:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8013046:	f002 fe87 	bl	8015d58 <xTCPWindowRxEmpty>
 801304a:	6238      	str	r0, [r7, #32]
                    bTxDone = xTCPWindowTxDone( pxTCPWindow );
 801304c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801304e:	f003 fafd 	bl	801664c <xTCPWindowTxDone>
 8013052:	61f8      	str	r0, [r7, #28]

                    if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 8013054:	6a3b      	ldr	r3, [r7, #32]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d002      	beq.n	8013060 <prvHandleEstablished+0x1b0>
 801305a:	69fb      	ldr	r3, [r7, #28]
 801305c:	2b00      	cmp	r3, #0
 801305e:	d10f      	bne.n	8013080 <prvHandleEstablished+0x1d0>
                    {
                        /* Refusing FIN: Rx incomplete 1 optlen 4 tx done 1. */
                        FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %d tx done %d\n",
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013064:	4619      	mov	r1, r3
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801306c:	461a      	mov	r2, r3
 801306e:	69fb      	ldr	r3, [r7, #28]
 8013070:	9300      	str	r3, [sp, #0]
 8013072:	6a3b      	ldr	r3, [r7, #32]
 8013074:	4841      	ldr	r0, [pc, #260]	@ (801317c <prvHandleEstablished+0x2cc>)
 8013076:	f00f fb95 	bl	80227a4 <lUDPLoggingPrintf>
                                                 pxSocket->usLocalPort,
                                                 pxSocket->u.xTCP.usRemotePort,
                                                 ( int ) bRxComplete,
                                                 ( int ) bTxDone ) );
                        xMayClose = pdFALSE;
 801307a:	2300      	movs	r3, #0
 801307c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801307e:	e01c      	b.n	80130ba <prvHandleEstablished+0x20a>
                    }
                    else
                    {
                        ulIntermediateResult = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber;
 8013080:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	441a      	add	r2, r3
 8013086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013088:	691b      	ldr	r3, [r3, #16]
 801308a:	1ad3      	subs	r3, r2, r3
 801308c:	633b      	str	r3, [r7, #48]	@ 0x30
                        lDistance = ( int32_t ) ulIntermediateResult;
 801308e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013090:	61bb      	str	r3, [r7, #24]

                        if( lDistance > 1 )
 8013092:	69bb      	ldr	r3, [r7, #24]
 8013094:	2b01      	cmp	r3, #1
 8013096:	dd10      	ble.n	80130ba <prvHandleEstablished+0x20a>
                        {
                            FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %d (cur %u high %u)\n",
 8013098:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801309a:	691a      	ldr	r2, [r3, #16]
 801309c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801309e:	68db      	ldr	r3, [r3, #12]
 80130a0:	1ad1      	subs	r1, r2, r3
 80130a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130a4:	699a      	ldr	r2, [r3, #24]
 80130a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130a8:	68db      	ldr	r3, [r3, #12]
 80130aa:	1ad3      	subs	r3, r2, r3
 80130ac:	460a      	mov	r2, r1
 80130ae:	69b9      	ldr	r1, [r7, #24]
 80130b0:	4833      	ldr	r0, [pc, #204]	@ (8013180 <prvHandleEstablished+0x2d0>)
 80130b2:	f00f fb77 	bl	80227a4 <lUDPLoggingPrintf>
                                                     ( int ) lDistance,
                                                     ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );

                            xMayClose = pdFALSE;
 80130b6:	2300      	movs	r3, #0
 80130b8:	64bb      	str	r3, [r7, #72]	@ 0x48
                        }
                    }
                }

                if( xTCPWindowLoggingLevel > 0 )
 80130ba:	4b32      	ldr	r3, [pc, #200]	@ (8013184 <prvHandleEstablished+0x2d4>)
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	dd11      	ble.n	80130e6 <prvHandleEstablished+0x236>
                {
                    FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %d (Rx %u Len %d, Tx %u)\n",
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80130c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80130ca:	1ad1      	subs	r1, r2, r3
 80130cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130ce:	6a1a      	ldr	r2, [r3, #32]
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80130d6:	1ad3      	subs	r3, r2, r3
 80130d8:	9300      	str	r3, [sp, #0]
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	460a      	mov	r2, r1
 80130de:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80130e0:	4829      	ldr	r0, [pc, #164]	@ (8013188 <prvHandleEstablished+0x2d8>)
 80130e2:	f00f fb5f 	bl	80227a4 <lUDPLoggingPrintf>
                                             ( unsigned ) ( ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulReceiveLength,
                                             ( unsigned ) ( pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ) ) );
                }

                if( xMayClose != pdFALSE )
 80130e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d00d      	beq.n	8013108 <prvHandleEstablished+0x258>
                {
                    pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 80130ec:	68fa      	ldr	r2, [r7, #12]
 80130ee:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80130f2:	f043 0320 	orr.w	r3, r3, #32
 80130f6:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 80130fa:	68bb      	ldr	r3, [r7, #8]
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	4619      	mov	r1, r3
 8013100:	68f8      	ldr	r0, [r7, #12]
 8013102:	f7ff fca9 	bl	8012a58 <prvTCPHandleFin>
 8013106:	64f8      	str	r0, [r7, #76]	@ 0x4c
                }
            }

            if( xMayClose == pdFALSE )
 8013108:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801310a:	2b00      	cmp	r3, #0
 801310c:	d131      	bne.n	8013172 <prvHandleEstablished+0x2c2>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 801310e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013110:	2210      	movs	r2, #16
 8013112:	735a      	strb	r2, [r3, #13]

                if( ulReceiveLength != 0U )
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d01d      	beq.n	8013156 <prvHandleEstablished+0x2a6>
                {
                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 801311a:	68f8      	ldr	r0, [r7, #12]
 801311c:	f7f7 f986 	bl	800a42c <uxIPHeaderSizeSocket>
 8013120:	4602      	mov	r2, r0
 8013122:	683b      	ldr	r3, [r7, #0]
 8013124:	4413      	add	r3, r2
 8013126:	3314      	adds	r3, #20
 8013128:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 801312a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801312c:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    /* TCP-offset equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 801312e:	683b      	ldr	r3, [r7, #0]
 8013130:	b2db      	uxtb	r3, r3
 8013132:	3314      	adds	r3, #20
 8013134:	b2db      	uxtb	r3, r3
 8013136:	009b      	lsls	r3, r3, #2
 8013138:	b2da      	uxtb	r2, r3
 801313a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801313c:	731a      	strb	r2, [r3, #12]

                    if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013148:	b2db      	uxtb	r3, r3
 801314a:	2b00      	cmp	r3, #0
 801314c:	d003      	beq.n	8013156 <prvHandleEstablished+0x2a6>
                    {
                        pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 801314e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013150:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013154:	621a      	str	r2, [r3, #32]

                /* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
                 * can not send-out both TCP options and also a full packet. Sending
                 * options (SACK) is always more urgent than sending data, which can be
                 * sent later. */
                if( uxOptionsLength == 0U )
 8013156:	683b      	ldr	r3, [r7, #0]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d10a      	bne.n	8013172 <prvHandleEstablished+0x2c2>
                {
                    /* prvTCPPrepareSend might allocate a bigger network buffer, if
                     * necessary. */
                    lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 801315c:	683a      	ldr	r2, [r7, #0]
 801315e:	68b9      	ldr	r1, [r7, #8]
 8013160:	68f8      	ldr	r0, [r7, #12]
 8013162:	f001 f8a1 	bl	80142a8 <prvTCPPrepareSend>
 8013166:	6178      	str	r0, [r7, #20]

                    if( lSendResult > 0 )
 8013168:	697b      	ldr	r3, [r7, #20]
 801316a:	2b00      	cmp	r3, #0
 801316c:	dd01      	ble.n	8013172 <prvHandleEstablished+0x2c2>
                    {
                        xSendLength = ( BaseType_t ) lSendResult;
 801316e:	697b      	ldr	r3, [r7, #20]
 8013170:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    }
                }
            }
        }

        return xSendLength;
 8013172:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 8013174:	4618      	mov	r0, r3
 8013176:	3754      	adds	r7, #84	@ 0x54
 8013178:	46bd      	mov	sp, r7
 801317a:	bd90      	pop	{r4, r7, pc}
 801317c:	08026bd4 	.word	0x08026bd4
 8013180:	08026c00 	.word	0x08026c00
 8013184:	2000164c 	.word	0x2000164c
 8013188:	08026c34 	.word	0x08026c34

0801318c <prvTCPHandleState>:
 * As these functions are declared static, and they're called from one location
 * only, most compilers will inline them, thus avoiding a call and return.
 */
    BaseType_t prvTCPHandleState( FreeRTOS_Socket_t * pxSocket,
                                  NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 801318c:	b590      	push	{r4, r7, lr}
 801318e:	b08f      	sub	sp, #60	@ 0x3c
 8013190:	af00      	add	r7, sp, #0
 8013192:	6078      	str	r0, [r7, #4]
 8013194:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 8013196:	683b      	ldr	r3, [r7, #0]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801319c:	683b      	ldr	r3, [r7, #0]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	4618      	mov	r0, r3
 80131a2:	f7f7 f929 	bl	800a3f8 <uxIPHeaderSizePacket>
 80131a6:	4603      	mov	r3, r0
 80131a8:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80131aa:	4423      	add	r3, r4
 80131ac:	633b      	str	r3, [r7, #48]	@ 0x30
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 80131ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        BaseType_t xSendLength = 0;
 80131b2:	2300      	movs	r3, #0
 80131b4:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulReceiveLength; /* Number of bytes contained in the TCP message. */
        uint8_t * pucRecvData;
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 80131b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131b8:	685b      	ldr	r3, [r3, #4]
 80131ba:	061a      	lsls	r2, r3, #24
 80131bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131be:	685b      	ldr	r3, [r3, #4]
 80131c0:	021b      	lsls	r3, r3, #8
 80131c2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80131c6:	431a      	orrs	r2, r3
 80131c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131ca:	685b      	ldr	r3, [r3, #4]
 80131cc:	0a1b      	lsrs	r3, r3, #8
 80131ce:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80131d2:	431a      	orrs	r2, r3
 80131d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131d6:	685b      	ldr	r3, [r3, #4]
 80131d8:	0e1b      	lsrs	r3, r3, #24
 80131da:	4313      	orrs	r3, r2
 80131dc:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* uxOptionsLength: the size of the options to be sent (always a multiple of
         * 4 bytes)
         * 1. in the SYN phase, we shall communicate the MSS
         * 2. in case of a SACK, Selective ACK, ack a segment which comes in
         * out-of-order. */
        UBaseType_t uxOptionsLength = 0U;
 80131de:	2300      	movs	r3, #0
 80131e0:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 80131e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131e4:	7b5b      	ldrb	r3, [r3, #13]
 80131e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80131f0:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxIntermediateResult = 0;
 80131f2:	2300      	movs	r3, #0
 80131f4:	61bb      	str	r3, [r7, #24]
        uint32_t ulSum;

        /* First get the length and the position of the received data, if any.
         * pucRecvData will point to the first byte of the TCP payload. */
        ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 80131f6:	683b      	ldr	r3, [r7, #0]
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	f107 0208 	add.w	r2, r7, #8
 80131fe:	4611      	mov	r1, r2
 8013200:	4618      	mov	r0, r3
 8013202:	f7ff fa64 	bl	80126ce <prvCheckRxData>
 8013206:	4603      	mov	r3, r0
 8013208:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8013210:	2b04      	cmp	r3, #4
 8013212:	d90c      	bls.n	801322e <prvTCPHandleState+0xa2>
        {
            if( pxTCPWindow->rx.ulCurrentSequenceNumber == ( ulSequenceNumber + 1U ) )
 8013214:	69fb      	ldr	r3, [r7, #28]
 8013216:	691a      	ldr	r2, [r3, #16]
 8013218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801321a:	3301      	adds	r3, #1
 801321c:	429a      	cmp	r2, r3
 801321e:	d106      	bne.n	801322e <prvTCPHandleState+0xa2>
            {
                /* This is most probably a keep-alive message from peer.  Setting
                 * 'bWinChange' doesn't cause a window-size-change, the flag is used
                 * here to force sending an immediate ACK. */
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8013220:	687a      	ldr	r2, [r7, #4]
 8013222:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013226:	f043 0301 	orr.w	r3, r3, #1
 801322a:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            }
        }

        /* Keep track of the highest sequence number that might be expected within
         * this connection. */
        ulSum = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber;
 801322e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013230:	697b      	ldr	r3, [r7, #20]
 8013232:	441a      	add	r2, r3
 8013234:	69fb      	ldr	r3, [r7, #28]
 8013236:	699b      	ldr	r3, [r3, #24]
 8013238:	1ad3      	subs	r3, r2, r3
 801323a:	613b      	str	r3, [r7, #16]

        if( ( ( int32_t ) ulSum ) > 0 )
 801323c:	693b      	ldr	r3, [r7, #16]
 801323e:	2b00      	cmp	r3, #0
 8013240:	dd04      	ble.n	801324c <prvTCPHandleState+0xc0>
        {
            pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 8013242:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013244:	697b      	ldr	r3, [r7, #20]
 8013246:	441a      	add	r2, r3
 8013248:	69fb      	ldr	r3, [r7, #28]
 801324a:	619a      	str	r2, [r3, #24]
        }

        /* Storing data may result in a fatal error if malloc() fails. */
        if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
 801324c:	68b9      	ldr	r1, [r7, #8]
 801324e:	683b      	ldr	r3, [r7, #0]
 8013250:	681a      	ldr	r2, [r3, #0]
 8013252:	697b      	ldr	r3, [r7, #20]
 8013254:	6878      	ldr	r0, [r7, #4]
 8013256:	f7ff fae3 	bl	8012820 <prvStoreRxData>
 801325a:	4603      	mov	r3, r0
 801325c:	2b00      	cmp	r3, #0
 801325e:	da03      	bge.n	8013268 <prvTCPHandleState+0xdc>
        {
            xSendLength = -1;
 8013260:	f04f 33ff 	mov.w	r3, #4294967295
 8013264:	637b      	str	r3, [r7, #52]	@ 0x34
 8013266:	e0ae      	b.n	80133c6 <prvTCPHandleState+0x23a>
        }
        else
        {
            eIPTCPState_t eState;

            uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
 8013268:	683b      	ldr	r3, [r7, #0]
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	4619      	mov	r1, r3
 801326e:	6878      	ldr	r0, [r7, #4]
 8013270:	f001 fa0c 	bl	801468c <prvSetOptions>
 8013274:	6278      	str	r0, [r7, #36]	@ 0x24

            if( ( pxSocket->u.xTCP.eTCPState == eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801327c:	2b04      	cmp	r3, #4
 801327e:	d10c      	bne.n	801329a <prvTCPHandleState+0x10e>
 8013280:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013284:	f003 031f 	and.w	r3, r3, #31
 8013288:	2b02      	cmp	r3, #2
 801328a:	d106      	bne.n	801329a <prvTCPHandleState+0x10e>
            {
                FreeRTOS_debug_printf( ( "eSYN_RECEIVED: ACK expected, not SYN: peer missed our SYN+ACK\n" ) );
 801328c:	4855      	ldr	r0, [pc, #340]	@ (80133e4 <prvTCPHandleState+0x258>)
 801328e:	f00f fa89 	bl	80227a4 <lUDPLoggingPrintf>

                /* In eSYN_RECEIVED a simple ACK is expected, but apparently the
                 * 'SYN+ACK' didn't arrive.  Step back to the previous state in which
                 * a first incoming SYN is handled.  The SYN was counted already so
                 * decrease it first. */
                vTCPStateChange( pxSocket, eSYN_FIRST );
 8013292:	2103      	movs	r1, #3
 8013294:	6878      	ldr	r0, [r7, #4]
 8013296:	f7fe fa79 	bl	801178c <vTCPStateChange>
            }

            if( ( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 801329a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801329e:	f003 0301 	and.w	r3, r3, #1
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d022      	beq.n	80132ec <prvTCPHandleState+0x160>
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80132ac:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80132b0:	b2db      	uxtb	r3, r3
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d11a      	bne.n	80132ec <prvTCPHandleState+0x160>
            {
                /* It's the first time a FIN has been received, remember its
                 * sequence number. */
                pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 80132b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80132b8:	697b      	ldr	r3, [r7, #20]
 80132ba:	441a      	add	r2, r3
 80132bc:	69fb      	ldr	r3, [r7, #28]
 80132be:	615a      	str	r2, [r3, #20]
                pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 80132c0:	687a      	ldr	r2, [r7, #4]
 80132c2:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80132c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80132ca:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                /* Was peer the first one to send a FIN? */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80132d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80132d8:	b2db      	uxtb	r3, r3
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d106      	bne.n	80132ec <prvTCPHandleState+0x160>
                {
                    /* If so, don't send the-last-ACK. */
                    pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 80132de:	687a      	ldr	r2, [r7, #4]
 80132e0:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80132e4:	f043 0302 	orr.w	r3, r3, #2
 80132e8:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
                }
            }

            eState = ( eIPTCPState_t ) pxSocket->u.xTCP.eTCPState;
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80132f2:	73fb      	strb	r3, [r7, #15]

            switch( eState )
 80132f4:	7bfb      	ldrb	r3, [r7, #15]
 80132f6:	2b0b      	cmp	r3, #11
 80132f8:	d864      	bhi.n	80133c4 <prvTCPHandleState+0x238>
 80132fa:	a201      	add	r2, pc, #4	@ (adr r2, 8013300 <prvTCPHandleState+0x174>)
 80132fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013300:	080133c5 	.word	0x080133c5
 8013304:	080133c5 	.word	0x080133c5
 8013308:	08013393 	.word	0x08013393
 801330c:	08013331 	.word	0x08013331
 8013310:	08013393 	.word	0x08013393
 8013314:	080133a5 	.word	0x080133a5
 8013318:	080133b5 	.word	0x080133b5
 801331c:	080133b5 	.word	0x080133b5
 8013320:	080133c5 	.word	0x080133c5
 8013324:	080133c5 	.word	0x080133c5
 8013328:	080133b5 	.word	0x080133b5
 801332c:	080133c5 	.word	0x080133c5
                                  * socket. */

                    /* A new socket has been created, reply with a SYN+ACK.
                     * Acknowledge with seq+1 because the SYN is seen as pseudo data
                     * with len = 1. */
                    uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPHeader );
 8013330:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013332:	6878      	ldr	r0, [r7, #4]
 8013334:	f000 fe4e 	bl	8013fd4 <prvSetSynAckOptions>
 8013338:	6278      	str	r0, [r7, #36]	@ 0x24
                    pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_SYN | ( uint8_t ) tcpTCP_FLAG_ACK;
 801333a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801333c:	2212      	movs	r2, #18
 801333e:	735a      	strb	r2, [r3, #13]

                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8013340:	6878      	ldr	r0, [r7, #4]
 8013342:	f7f7 f873 	bl	800a42c <uxIPHeaderSizeSocket>
 8013346:	4602      	mov	r2, r0
 8013348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801334a:	4413      	add	r3, r2
 801334c:	3314      	adds	r3, #20
 801334e:	61bb      	str	r3, [r7, #24]
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 8013350:	69bb      	ldr	r3, [r7, #24]
 8013352:	637b      	str	r3, [r7, #52]	@ 0x34

                    /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                     * uxOptionsLength is a multiple of 4.  The complete expression is:
                     * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8013354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013356:	b2db      	uxtb	r3, r3
 8013358:	3314      	adds	r3, #20
 801335a:	b2db      	uxtb	r3, r3
 801335c:	009b      	lsls	r3, r3, #2
 801335e:	b2da      	uxtb	r2, r3
 8013360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013362:	731a      	strb	r2, [r3, #12]
                    vTCPStateChange( pxSocket, eSYN_RECEIVED );
 8013364:	2104      	movs	r1, #4
 8013366:	6878      	ldr	r0, [r7, #4]
 8013368:	f7fe fa10 	bl	801178c <vTCPStateChange>

                    pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 801336c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801336e:	1c5a      	adds	r2, r3, #1
 8013370:	69fb      	ldr	r3, [r7, #28]
 8013372:	619a      	str	r2, [r3, #24]
                    pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 8013374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013376:	1c5a      	adds	r2, r3, #1
 8013378:	69fb      	ldr	r3, [r7, #28]
 801337a:	611a      	str	r2, [r3, #16]
                    pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 801337c:	69fb      	ldr	r3, [r7, #28]
 801337e:	69db      	ldr	r3, [r3, #28]
 8013380:	1c5a      	adds	r2, r3, #1
 8013382:	69fb      	ldr	r3, [r7, #28]
 8013384:	635a      	str	r2, [r3, #52]	@ 0x34
                    pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U; /* because we send a TCP_SYN. */
 8013386:	69fb      	ldr	r3, [r7, #28]
 8013388:	69db      	ldr	r3, [r3, #28]
 801338a:	1c5a      	adds	r2, r3, #1
 801338c:	69fb      	ldr	r3, [r7, #28]
 801338e:	621a      	str	r2, [r3, #32]
                    break;
 8013390:	e019      	b.n	80133c6 <prvTCPHandleState+0x23a>
                case eCONNECT_SYN:  /* (client) also called SYN_SENT: we've just send a
                                     * SYN, expect a SYN+ACK and send a ACK now. */
                /* Fall through */
                case eSYN_RECEIVED: /* (server) we've had a SYN, replied with SYN+SCK
                                     * expect a ACK and do nothing. */
                    xSendLength = prvHandleSynReceived( pxSocket, *( ppxNetworkBuffer ), ulReceiveLength, uxOptionsLength );
 8013392:	683b      	ldr	r3, [r7, #0]
 8013394:	6819      	ldr	r1, [r3, #0]
 8013396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013398:	697a      	ldr	r2, [r7, #20]
 801339a:	6878      	ldr	r0, [r7, #4]
 801339c:	f7ff fc3a 	bl	8012c14 <prvHandleSynReceived>
 80133a0:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 80133a2:	e010      	b.n	80133c6 <prvTCPHandleState+0x23a>
                case eESTABLISHED: /* (server + client) an open connection, data
                                    * received can be delivered to the user. The normal
                                    * state for the data transfer phase of the connection
                                    * The closing states are also handled here with the
                                    * use of some flags. */
                    xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 80133a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133a6:	697a      	ldr	r2, [r7, #20]
 80133a8:	6839      	ldr	r1, [r7, #0]
 80133aa:	6878      	ldr	r0, [r7, #4]
 80133ac:	f7ff fd80 	bl	8012eb0 <prvHandleEstablished>
 80133b0:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 80133b2:	e008      	b.n	80133c6 <prvTCPHandleState+0x23a>
                /* Fall through */
                case eFIN_WAIT_1: /* (server + client) waiting for a connection termination request from the remote TCP,
                                   * or an acknowledgement of the connection termination request previously sent. */
                /* Fall through */
                case eFIN_WAIT_2: /* (server + client) waiting for a connection termination request from the remote TCP. */
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 80133b4:	683b      	ldr	r3, [r7, #0]
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	4619      	mov	r1, r3
 80133ba:	6878      	ldr	r0, [r7, #4]
 80133bc:	f7ff fb4c 	bl	8012a58 <prvTCPHandleFin>
 80133c0:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 80133c2:	e000      	b.n	80133c6 <prvTCPHandleState+0x23a>
                                  * 'bFinSent', 'bFinRecv', and 'bFinAcked'. */
                    break;

                default:
                    /* No more known states. */
                    break;
 80133c4:	bf00      	nop
            }
        }

        if( xSendLength > 0 )
 80133c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	dd06      	ble.n	80133da <prvTCPHandleState+0x24e>
        {
            xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
 80133cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133ce:	697a      	ldr	r2, [r7, #20]
 80133d0:	6839      	ldr	r1, [r7, #0]
 80133d2:	6878      	ldr	r0, [r7, #4]
 80133d4:	f001 fa1a 	bl	801480c <prvSendData>
 80133d8:	6378      	str	r0, [r7, #52]	@ 0x34
        }

        return xSendLength;
 80133da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80133dc:	4618      	mov	r0, r3
 80133de:	373c      	adds	r7, #60	@ 0x3c
 80133e0:	46bd      	mov	sp, r7
 80133e2:	bd90      	pop	{r4, r7, pc}
 80133e4:	08026c6c 	.word	0x08026c6c

080133e8 <prvHandleListen>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
    FreeRTOS_Socket_t * prvHandleListen( FreeRTOS_Socket_t * pxSocket,
                                         NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 80133e8:	b580      	push	{r7, lr}
 80133ea:	b084      	sub	sp, #16
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	6078      	str	r0, [r7, #4]
 80133f0:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxNewSocket = NULL;
 80133f2:	2300      	movs	r3, #0
 80133f4:	60fb      	str	r3, [r7, #12]

        switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 80133f6:	6838      	ldr	r0, [r7, #0]
 80133f8:	f7f6 fffe 	bl	800a3f8 <uxIPHeaderSizePacket>
 80133fc:	4603      	mov	r3, r0
 80133fe:	2b14      	cmp	r3, #20
 8013400:	d002      	beq.n	8013408 <prvHandleListen+0x20>
 8013402:	2b28      	cmp	r3, #40	@ 0x28
 8013404:	d006      	beq.n	8013414 <prvHandleListen+0x2c>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break;
 8013406:	e00b      	b.n	8013420 <prvHandleListen+0x38>
                    pxNewSocket = prvHandleListen_IPV4( pxSocket, pxNetworkBuffer );
 8013408:	6839      	ldr	r1, [r7, #0]
 801340a:	6878      	ldr	r0, [r7, #4]
 801340c:	f000 f8ee 	bl	80135ec <prvHandleListen_IPV4>
 8013410:	60f8      	str	r0, [r7, #12]
                    break;
 8013412:	e005      	b.n	8013420 <prvHandleListen+0x38>
                    pxNewSocket = prvHandleListen_IPV6( pxSocket, pxNetworkBuffer );
 8013414:	6839      	ldr	r1, [r7, #0]
 8013416:	6878      	ldr	r0, [r7, #4]
 8013418:	f000 fa10 	bl	801383c <prvHandleListen_IPV6>
 801341c:	60f8      	str	r0, [r7, #12]
                    break;
 801341e:	bf00      	nop
        }

        return pxNewSocket;
 8013420:	68fb      	ldr	r3, [r7, #12]
    }
 8013422:	4618      	mov	r0, r3
 8013424:	3710      	adds	r7, #16
 8013426:	46bd      	mov	sp, r7
 8013428:	bd80      	pop	{r7, pc}
	...

0801342c <prvTCPSocketCopy>:
 *
 * @return If all steps all successful, then pdTRUE is returned. Else, pdFALSE.
 */
    BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t * pxNewSocket,
                                 FreeRTOS_Socket_t * pxSocket )
    {
 801342c:	b590      	push	{r4, r7, lr}
 801342e:	b08f      	sub	sp, #60	@ 0x3c
 8013430:	af04      	add	r7, sp, #16
 8013432:	6078      	str	r0, [r7, #4]
 8013434:	6039      	str	r1, [r7, #0]
        struct freertos_sockaddr xAddress;
        BaseType_t xResult;

        pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 8013436:	683b      	ldr	r3, [r7, #0]
 8013438:	6a1a      	ldr	r2, [r3, #32]
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	621a      	str	r2, [r3, #32]
        pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 801343e:	683b      	ldr	r3, [r7, #0]
 8013440:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	625a      	str	r2, [r3, #36]	@ 0x24
        pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 8013446:	683b      	ldr	r3, [r7, #0]
 8013448:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 8013452:	683b      	ldr	r3, [r7, #0]
 8013454:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 801345e:	683b      	ldr	r3, [r7, #0]
 8013460:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 801346a:	683b      	ldr	r3, [r7, #0]
 801346c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 8013476:	683b      	ldr	r3, [r7, #0]
 8013478:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        pxNewSocket->u.xTCP.uxRxWinSize = pxSocket->u.xTCP.uxRxWinSize;
 8013482:	683b      	ldr	r3, [r7, #0]
 8013484:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        pxNewSocket->u.xTCP.uxTxWinSize = pxSocket->u.xTCP.uxTxWinSize;
 801348e:	683b      	ldr	r3, [r7, #0]
 8013490:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

        #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
        {
            pxNewSocket->pxUserSemaphore = pxSocket->pxUserSemaphore;
 801349a:	683b      	ldr	r3, [r7, #0]
 801349c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	63da      	str	r2, [r3, #60]	@ 0x3c
        #endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            /* In case call-backs are used, copy them from parent to child. */
            pxNewSocket->u.xTCP.pxHandleConnected = pxSocket->u.xTCP.pxHandleConnected;
 80134a2:	683b      	ldr	r3, [r7, #0]
 80134a4:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            pxNewSocket->u.xTCP.pxHandleReceive = pxSocket->u.xTCP.pxHandleReceive;
 80134ae:	683b      	ldr	r3, [r7, #0]
 80134b0:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            pxNewSocket->u.xTCP.pxHandleSent = pxSocket->u.xTCP.pxHandleSent;
 80134ba:	683b      	ldr	r3, [r7, #0]
 80134bc:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
        {
            /* Child socket of listening sockets will inherit the Socket Set
             * Otherwise the owner has no chance of including it into the set. */
            if( pxSocket->pxSocketSet != NULL )
 80134c6:	683b      	ldr	r3, [r7, #0]
 80134c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d009      	beq.n	80134e2 <prvTCPSocketCopy+0xb6>
            {
                pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 80134ce:	683b      	ldr	r3, [r7, #0]
 80134d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	641a      	str	r2, [r3, #64]	@ 0x40
                pxNewSocket->xSelectBits = pxSocket->xSelectBits | ( ( EventBits_t ) eSELECT_READ ) | ( ( EventBits_t ) eSELECT_EXCEPT );
 80134d6:	683b      	ldr	r3, [r7, #0]
 80134d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80134da:	f043 0205 	orr.w	r2, r3, #5
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	645a      	str	r2, [r3, #68]	@ 0x44
            }
        }
        #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

        /* And bind it to the same local port as its parent. */
        ( void ) FreeRTOS_GetLocalAddress( pxSocket, &xAddress );
 80134e2:	f107 030c 	add.w	r3, r7, #12
 80134e6:	4619      	mov	r1, r3
 80134e8:	6838      	ldr	r0, [r7, #0]
 80134ea:	f7fc fa47 	bl	800f97c <FreeRTOS_GetLocalAddress>
             * orphan temporarily.  Once this socket is really connected, the owner of
             * the server socket will be notified. */

            /* When bPassQueued is true, the socket is an orphan until it gets
             * connected. */
            pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 80134ee:	687a      	ldr	r2, [r7, #4]
 80134f0:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80134f4:	f043 0304 	orr.w	r3, r3, #4
 80134f8:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	683a      	ldr	r2, [r7, #0]
 8013500:	67da      	str	r2, [r3, #124]	@ 0x7c
                pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
            }
        }
        #endif /* if ( ipconfigTCP_HANG_PROTECTION == 1 ) */

        pxSocket->u.xTCP.usChildCount++;
 8013502:	683b      	ldr	r3, [r7, #0]
 8013504:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8013508:	3301      	adds	r3, #1
 801350a:	b29a      	uxth	r2, r3
 801350c:	683b      	ldr	r3, [r7, #0]
 801350e:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74

        if( pxSocket->u.xTCP.pxPeerSocket == NULL )
 8013512:	683b      	ldr	r3, [r7, #0]
 8013514:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013516:	2b00      	cmp	r3, #0
 8013518:	d102      	bne.n	8013520 <prvTCPSocketCopy+0xf4>
        {
            pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
 801351a:	683b      	ldr	r3, [r7, #0]
 801351c:	687a      	ldr	r2, [r7, #4]
 801351e:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        FreeRTOS_debug_printf( ( "Gain: Socket %u now has %u / %u child%s me: %p parent: %p peer: %p\n",
 8013520:	683b      	ldr	r3, [r7, #0]
 8013522:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013524:	4619      	mov	r1, r3
 8013526:	683b      	ldr	r3, [r7, #0]
 8013528:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801352c:	4618      	mov	r0, r3
 801352e:	683b      	ldr	r3, [r7, #0]
 8013530:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8013534:	461c      	mov	r4, r3
 8013536:	683b      	ldr	r3, [r7, #0]
 8013538:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801353c:	2b01      	cmp	r3, #1
 801353e:	d101      	bne.n	8013544 <prvTCPSocketCopy+0x118>
 8013540:	4a17      	ldr	r2, [pc, #92]	@ (80135a0 <prvTCPSocketCopy+0x174>)
 8013542:	e000      	b.n	8013546 <prvTCPSocketCopy+0x11a>
 8013544:	4a17      	ldr	r2, [pc, #92]	@ (80135a4 <prvTCPSocketCopy+0x178>)
 8013546:	683b      	ldr	r3, [r7, #0]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d002      	beq.n	8013552 <prvTCPSocketCopy+0x126>
 801354c:	683b      	ldr	r3, [r7, #0]
 801354e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013550:	e000      	b.n	8013554 <prvTCPSocketCopy+0x128>
 8013552:	2300      	movs	r3, #0
 8013554:	9303      	str	r3, [sp, #12]
 8013556:	683b      	ldr	r3, [r7, #0]
 8013558:	9302      	str	r3, [sp, #8]
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	9301      	str	r3, [sp, #4]
 801355e:	9200      	str	r2, [sp, #0]
 8013560:	4623      	mov	r3, r4
 8013562:	4602      	mov	r2, r0
 8013564:	4810      	ldr	r0, [pc, #64]	@ (80135a8 <prvTCPSocketCopy+0x17c>)
 8013566:	f00f f91d 	bl	80227a4 <lUDPLoggingPrintf>
                                 ( void * ) pxNewSocket,
                                 ( void * ) pxSocket,
                                 pxSocket ? ( void * ) pxSocket->u.xTCP.pxPeerSocket : NULL ) );

        /* Now bind the child socket to the same port as the listening socket. */
        if( vSocketBind( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 801356a:	f107 010c 	add.w	r1, r7, #12
 801356e:	2301      	movs	r3, #1
 8013570:	2218      	movs	r2, #24
 8013572:	6878      	ldr	r0, [r7, #4]
 8013574:	f7fb fbae 	bl	800ecd4 <vSocketBind>
 8013578:	4603      	mov	r3, r0
 801357a:	2b00      	cmp	r3, #0
 801357c:	d008      	beq.n	8013590 <prvTCPSocketCopy+0x164>
        {
            FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
 801357e:	480b      	ldr	r0, [pc, #44]	@ (80135ac <prvTCPSocketCopy+0x180>)
 8013580:	f00f f910 	bl	80227a4 <lUDPLoggingPrintf>
            ( void ) vSocketClose( pxNewSocket );
 8013584:	6878      	ldr	r0, [r7, #4]
 8013586:	f7fb fc59 	bl	800ee3c <vSocketClose>
            xResult = pdFALSE;
 801358a:	2300      	movs	r3, #0
 801358c:	627b      	str	r3, [r7, #36]	@ 0x24
 801358e:	e001      	b.n	8013594 <prvTCPSocketCopy+0x168>
        }
        else
        {
            xResult = pdTRUE;
 8013590:	2301      	movs	r3, #1
 8013592:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return xResult;
 8013594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8013596:	4618      	mov	r0, r3
 8013598:	372c      	adds	r7, #44	@ 0x2c
 801359a:	46bd      	mov	sp, r7
 801359c:	bd90      	pop	{r4, r7, pc}
 801359e:	bf00      	nop
 80135a0:	08026cac 	.word	0x08026cac
 80135a4:	08026cb0 	.word	0x08026cb0
 80135a8:	08026cb4 	.word	0x08026cb4
 80135ac:	08026cf8 	.word	0x08026cf8

080135b0 <FreeRTOS_GetTCPStateName>:
    /*-----------------------------------------------------------*/

    #if ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )

        const char * FreeRTOS_GetTCPStateName( UBaseType_t ulState )
        {
 80135b0:	b480      	push	{r7}
 80135b2:	b085      	sub	sp, #20
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	6078      	str	r0, [r7, #4]
                "eCLOSING",
                "eLAST_ACK",
                "eTIME_WAIT",
                "eUNKNOWN",
            };
            BaseType_t xIndex = ( BaseType_t ) ulState;
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	60fb      	str	r3, [r7, #12]

            if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	db02      	blt.n	80135c8 <FreeRTOS_GetTCPStateName+0x18>
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	2b0c      	cmp	r3, #12
 80135c6:	dd04      	ble.n	80135d2 <FreeRTOS_GetTCPStateName+0x22>
            {
                /* The last item is called 'eUNKNOWN' */
                xIndex = ARRAY_SIZE( pcStateNames );
 80135c8:	230d      	movs	r3, #13
 80135ca:	60fb      	str	r3, [r7, #12]
                xIndex--;
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	3b01      	subs	r3, #1
 80135d0:	60fb      	str	r3, [r7, #12]
            }

            return pcStateNames[ xIndex ];
 80135d2:	4a05      	ldr	r2, [pc, #20]	@ (80135e8 <FreeRTOS_GetTCPStateName+0x38>)
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        }
 80135da:	4618      	mov	r0, r3
 80135dc:	3714      	adds	r7, #20
 80135de:	46bd      	mov	sp, r7
 80135e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e4:	4770      	bx	lr
 80135e6:	bf00      	nop
 80135e8:	08027fcc 	.word	0x08027fcc

080135ec <prvHandleListen_IPV4>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
FreeRTOS_Socket_t * prvHandleListen_IPV4( FreeRTOS_Socket_t * pxSocket,
                                          NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 80135ec:	b590      	push	{r4, r7, lr}
 80135ee:	b08f      	sub	sp, #60	@ 0x3c
 80135f0:	af02      	add	r7, sp, #8
 80135f2:	6078      	str	r0, [r7, #4]
 80135f4:	6039      	str	r1, [r7, #0]
    /* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

    const TCPPacket_t * pxTCPPacket = NULL;
 80135f6:	2300      	movs	r3, #0
 80135f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t * pxReturn = NULL;
 80135fa:	2300      	movs	r3, #0
 80135fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t ulInitialSequenceNumber = 0U;
 80135fe:	2300      	movs	r3, #0
 8013600:	627b      	str	r3, [r7, #36]	@ 0x24
    const NetworkEndPoint_t * pxEndpoint = NULL;
 8013602:	2300      	movs	r3, #0
 8013604:	623b      	str	r3, [r7, #32]
    BaseType_t xIsNewSocket = pdFALSE;
 8013606:	2300      	movs	r3, #0
 8013608:	61fb      	str	r3, [r7, #28]

    if( ( pxSocket != NULL ) && ( pxNetworkBuffer != NULL ) )
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d008      	beq.n	8013622 <prvHandleListen_IPV4+0x36>
 8013610:	683b      	ldr	r3, [r7, #0]
 8013612:	2b00      	cmp	r3, #0
 8013614:	d005      	beq.n	8013622 <prvHandleListen_IPV4+0x36>
    {
        /* Initialize pointers if inputs are valid. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( const TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8013616:	683b      	ldr	r3, [r7, #0]
 8013618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801361a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pxEndpoint = pxNetworkBuffer->pxEndPoint;
 801361c:	683b      	ldr	r3, [r7, #0]
 801361e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013620:	623b      	str	r3, [r7, #32]
    }

    /* Silently discard a SYN packet which was not specifically sent for this node. */
    if( ( pxEndpoint != NULL ) && ( pxTCPPacket->xIPHeader.ulDestinationIPAddress == pxEndpoint->ipv4_settings.ulIPAddress ) )
 8013622:	6a3b      	ldr	r3, [r7, #32]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d015      	beq.n	8013654 <prvHandleListen_IPV4+0x68>
 8013628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801362a:	f8d3 201e 	ldr.w	r2, [r3, #30]
 801362e:	6a3b      	ldr	r3, [r7, #32]
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	429a      	cmp	r2, r3
 8013634:	d10e      	bne.n	8013654 <prvHandleListen_IPV4+0x68>
    {
        /* Assume that a new Initial Sequence Number will be required. Request
         * it now in order to fail out if necessary. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 8013636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013638:	f8d3 001e 	ldr.w	r0, [r3, #30]
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
                                                                      pxSocket->usLocalPort,
                                                                      pxTCPPacket->xIPHeader.ulSourceIPAddress,
 8013640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013642:	f8d3 201a 	ldr.w	r2, [r3, #26]
                                                                      pxTCPPacket->xTCPHeader.usSourcePort );
 8013646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013648:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801364a:	b29b      	uxth	r3, r3
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 801364c:	f7ee f9fc 	bl	8001a48 <ulApplicationGetNextSequenceNumber>
 8013650:	6278      	str	r0, [r7, #36]	@ 0x24
 8013652:	e001      	b.n	8013658 <prvHandleListen_IPV4+0x6c>
    }
    else
    {
        /* Set the sequence number to 0 to avoid further processing. */
        ulInitialSequenceNumber = 0U;
 8013654:	2300      	movs	r3, #0
 8013656:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* A pure SYN (without ACK) has come in, create a new socket to answer
     * it. */
    if( ulInitialSequenceNumber != 0U )
 8013658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801365a:	2b00      	cmp	r3, #0
 801365c:	d059      	beq.n	8013712 <prvHandleListen_IPV4+0x126>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8013664:	f003 0308 	and.w	r3, r3, #8
 8013668:	b2db      	uxtb	r3, r3
 801366a:	2b00      	cmp	r3, #0
 801366c:	d00c      	beq.n	8013688 <prvHandleListen_IPV4+0x9c>
        {
            /* The flag bReuseSocket indicates that the same instance of the
             * listening socket should be used for the connection. */
            pxReturn = pxSocket;
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	62bb      	str	r3, [r7, #40]	@ 0x28
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8013672:	687a      	ldr	r2, [r7, #4]
 8013674:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8013678:	f043 0304 	orr.w	r3, r3, #4
 801367c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	687a      	ldr	r2, [r7, #4]
 8013684:	67da      	str	r2, [r3, #124]	@ 0x7c
 8013686:	e044      	b.n	8013712 <prvHandleListen_IPV4+0x126>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
             * new socket when a connection comes in. */
            pxReturn = NULL;
 8013688:	2300      	movs	r3, #0
 801368a:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	f8b3 2074 	ldrh.w	r2, [r3, #116]	@ 0x74
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8013698:	429a      	cmp	r2, r3
 801369a:	d31b      	bcc.n	80136d4 <prvHandleListen_IPV4+0xe8>
            {
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80136a0:	4619      	mov	r1, r3
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80136a8:	461a      	mov	r2, r3
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80136b0:	4618      	mov	r0, r3
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80136b8:	2b01      	cmp	r3, #1
 80136ba:	d101      	bne.n	80136c0 <prvHandleListen_IPV4+0xd4>
 80136bc:	4b5b      	ldr	r3, [pc, #364]	@ (801382c <prvHandleListen_IPV4+0x240>)
 80136be:	e000      	b.n	80136c2 <prvHandleListen_IPV4+0xd6>
 80136c0:	4b5b      	ldr	r3, [pc, #364]	@ (8013830 <prvHandleListen_IPV4+0x244>)
 80136c2:	9300      	str	r3, [sp, #0]
 80136c4:	4603      	mov	r3, r0
 80136c6:	485b      	ldr	r0, [pc, #364]	@ (8013834 <prvHandleListen_IPV4+0x248>)
 80136c8:	f00f f86c 	bl	80227a4 <lUDPLoggingPrintf>
                                   pxSocket->usLocalPort,
                                   pxSocket->u.xTCP.usChildCount,
                                   pxSocket->u.xTCP.usBacklog,
                                   ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                ( void ) prvTCPSendReset( pxNetworkBuffer );
 80136cc:	6838      	ldr	r0, [r7, #0]
 80136ce:	f001 f9d1 	bl	8014a74 <prvTCPSendReset>
 80136d2:	e01e      	b.n	8013712 <prvHandleListen_IPV4+0x126>
            }
            else
            {
                FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                  FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 80136d4:	2206      	movs	r2, #6
 80136d6:	2101      	movs	r1, #1
 80136d8:	2002      	movs	r0, #2
 80136da:	f7fa ffa1 	bl	800e620 <FreeRTOS_socket>
 80136de:	6178      	str	r0, [r7, #20]

                /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
                /* coverity[misra_c_2012_rule_11_4_violation] */
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 80136e0:	697b      	ldr	r3, [r7, #20]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d003      	beq.n	80136ee <prvHandleListen_IPV4+0x102>
 80136e6:	697b      	ldr	r3, [r7, #20]
 80136e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136ec:	d106      	bne.n	80136fc <prvHandleListen_IPV4+0x110>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 80136ee:	4852      	ldr	r0, [pc, #328]	@ (8013838 <prvHandleListen_IPV4+0x24c>)
 80136f0:	f00f f858 	bl	80227a4 <lUDPLoggingPrintf>
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 80136f4:	6838      	ldr	r0, [r7, #0]
 80136f6:	f001 f9bd 	bl	8014a74 <prvTCPSendReset>
 80136fa:	e00a      	b.n	8013712 <prvHandleListen_IPV4+0x126>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 80136fc:	6879      	ldr	r1, [r7, #4]
 80136fe:	6978      	ldr	r0, [r7, #20]
 8013700:	f7ff fe94 	bl	801342c <prvTCPSocketCopy>
 8013704:	4603      	mov	r3, r0
 8013706:	2b00      	cmp	r3, #0
 8013708:	d003      	beq.n	8013712 <prvHandleListen_IPV4+0x126>
                {
                    /* The socket will be connected immediately, no time for the
                     * owner to setsockopt's, therefore copy properties of the server
                     * socket to the new socket.  Only the binding might fail (due to
                     * lack of resources). */
                    pxReturn = pxNewSocket;
 801370a:	697b      	ldr	r3, [r7, #20]
 801370c:	62bb      	str	r3, [r7, #40]	@ 0x28
                    xIsNewSocket = pdTRUE;
 801370e:	2301      	movs	r3, #1
 8013710:	61fb      	str	r3, [r7, #28]
                }
            }
        }
    }

    if( ( ulInitialSequenceNumber != 0U ) && ( pxReturn != NULL ) )
 8013712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013714:	2b00      	cmp	r3, #0
 8013716:	f000 8083 	beq.w	8013820 <prvHandleListen_IPV4+0x234>
 801371a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801371c:	2b00      	cmp	r3, #0
 801371e:	d07f      	beq.n	8013820 <prvHandleListen_IPV4+0x234>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                            &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8013720:	683b      	ldr	r3, [r7, #0]
 8013722:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013724:	6838      	ldr	r0, [r7, #0]
 8013726:	f7f6 fe67 	bl	800a3f8 <uxIPHeaderSizePacket>
 801372a:	4603      	mov	r3, r0
 801372c:	330e      	adds	r3, #14
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 801372e:	4423      	add	r3, r4
 8013730:	613b      	str	r3, [r7, #16]

            /* The endpoint in network buffer must be valid in this condition. */
            pxReturn->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8013732:	683b      	ldr	r3, [r7, #0]
 8013734:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013738:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxReturn->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 801373a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801373c:	7a13      	ldrb	r3, [r2, #8]
 801373e:	f36f 0300 	bfc	r3, #0, #1
 8013742:	7213      	strb	r3, [r2, #8]
            pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 8013744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013746:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8013748:	b29b      	uxth	r3, r3
 801374a:	021b      	lsls	r3, r3, #8
 801374c:	b21a      	sxth	r2, r3
 801374e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013750:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8013752:	b29b      	uxth	r3, r3
 8013754:	0a1b      	lsrs	r3, r3, #8
 8013756:	b29b      	uxth	r3, r3
 8013758:	b21b      	sxth	r3, r3
 801375a:	4313      	orrs	r3, r2
 801375c:	b21b      	sxth	r3, r3
 801375e:	b29a      	uxth	r2, r3
 8013760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013762:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
            pxReturn->u.xTCP.xRemoteIP.ulIP_IPv4 = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 8013766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013768:	f8d3 301a 	ldr.w	r3, [r3, #26]
 801376c:	061a      	lsls	r2, r3, #24
 801376e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013770:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8013774:	021b      	lsls	r3, r3, #8
 8013776:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801377a:	431a      	orrs	r2, r3
 801377c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801377e:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8013782:	0a1b      	lsrs	r3, r3, #8
 8013784:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013788:	431a      	orrs	r2, r3
 801378a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801378c:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8013790:	0e1b      	lsrs	r3, r3, #24
 8013792:	431a      	orrs	r2, r3
 8013794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013796:	655a      	str	r2, [r3, #84]	@ 0x54
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 8013798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801379a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801379c:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 80137a0:	693b      	ldr	r3, [r7, #16]
 80137a2:	685b      	ldr	r3, [r3, #4]
 80137a4:	061a      	lsls	r2, r3, #24
 80137a6:	693b      	ldr	r3, [r7, #16]
 80137a8:	685b      	ldr	r3, [r3, #4]
 80137aa:	021b      	lsls	r3, r3, #8
 80137ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80137b0:	431a      	orrs	r2, r3
 80137b2:	693b      	ldr	r3, [r7, #16]
 80137b4:	685b      	ldr	r3, [r3, #4]
 80137b6:	0a1b      	lsrs	r3, r3, #8
 80137b8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80137bc:	431a      	orrs	r2, r3
 80137be:	693b      	ldr	r3, [r7, #16]
 80137c0:	685b      	ldr	r3, [r3, #4]
 80137c2:	0e1b      	lsrs	r3, r3, #24
 80137c4:	431a      	orrs	r2, r3
 80137c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137c8:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            prvSocketSetMSS( pxReturn );
 80137cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80137ce:	f002 f877 	bl	80158c0 <prvSocketSetMSS>

            xReturnCreateWindow = prvTCPCreateWindow( pxReturn );
 80137d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80137d4:	f000 fb66 	bl	8013ea4 <prvTCPCreateWindow>
 80137d8:	60f8      	str	r0, [r7, #12]

            /* Did allocating TCP sectors fail? */
            if( xReturnCreateWindow != pdPASS )
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	2b01      	cmp	r3, #1
 80137de:	d008      	beq.n	80137f2 <prvHandleListen_IPV4+0x206>
            {
                /* Close the socket if it was newly created. */
                if( xIsNewSocket == pdTRUE )
 80137e0:	69fb      	ldr	r3, [r7, #28]
 80137e2:	2b01      	cmp	r3, #1
 80137e4:	d102      	bne.n	80137ec <prvHandleListen_IPV4+0x200>
                {
                    ( void ) vSocketClose( pxReturn );
 80137e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80137e8:	f7fb fb28 	bl	800ee3c <vSocketClose>
                }

                pxReturn = NULL;
 80137ec:	2300      	movs	r3, #0
 80137ee:	62bb      	str	r3, [r7, #40]	@ 0x28
                break;
 80137f0:	e016      	b.n	8013820 <prvHandleListen_IPV4+0x234>
            }

            vTCPStateChange( pxReturn, eSYN_FIRST );
 80137f2:	2103      	movs	r1, #3
 80137f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80137f6:	f7fd ffc9 	bl	801178c <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            if( pxNetworkBuffer->xDataLength > sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) )
 80137fa:	683b      	ldr	r3, [r7, #0]
 80137fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80137fe:	2b5a      	cmp	r3, #90	@ 0x5a
 8013800:	d902      	bls.n	8013808 <prvHandleListen_IPV4+0x21c>
            {
                xCopyLength = sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket );
 8013802:	235a      	movs	r3, #90	@ 0x5a
 8013804:	61bb      	str	r3, [r7, #24]
 8013806:	e002      	b.n	801380e <prvHandleListen_IPV4+0x222>
            }
            else
            {
                xCopyLength = pxNetworkBuffer->xDataLength;
 8013808:	683b      	ldr	r3, [r7, #0]
 801380a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801380c:	61bb      	str	r3, [r7, #24]
            }

            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 801380e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013810:	f103 00aa 	add.w	r0, r3, #170	@ 0xaa
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 8013814:	683b      	ldr	r3, [r7, #0]
 8013816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 8013818:	69ba      	ldr	r2, [r7, #24]
 801381a:	4619      	mov	r1, r3
 801381c:	f00f f9de 	bl	8022bdc <memcpy>
                             xCopyLength );
        } while( ipFALSE_BOOL );
    }

    return pxReturn;
 8013820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8013822:	4618      	mov	r0, r3
 8013824:	3734      	adds	r7, #52	@ 0x34
 8013826:	46bd      	mov	sp, r7
 8013828:	bd90      	pop	{r4, r7, pc}
 801382a:	bf00      	nop
 801382c:	08026da0 	.word	0x08026da0
 8013830:	08026da4 	.word	0x08026da4
 8013834:	08026da8 	.word	0x08026da8
 8013838:	08026dd8 	.word	0x08026dd8

0801383c <prvHandleListen_IPV6>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
FreeRTOS_Socket_t * prvHandleListen_IPV6( FreeRTOS_Socket_t * pxSocket,
                                          NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 801383c:	b590      	push	{r4, r7, lr}
 801383e:	b08f      	sub	sp, #60	@ 0x3c
 8013840:	af02      	add	r7, sp, #8
 8013842:	6078      	str	r0, [r7, #4]
 8013844:	6039      	str	r1, [r7, #0]
    const TCPPacket_IPv6_t * pxTCPPacket = NULL;
 8013846:	2300      	movs	r3, #0
 8013848:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t * pxReturn = NULL;
 801384a:	2300      	movs	r3, #0
 801384c:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t ulInitialSequenceNumber = 0;
 801384e:	2300      	movs	r3, #0
 8013850:	60bb      	str	r3, [r7, #8]
    BaseType_t xHasSequence = pdFALSE;
 8013852:	2300      	movs	r3, #0
 8013854:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xIsNewSocket = pdFALSE;
 8013856:	2300      	movs	r3, #0
 8013858:	623b      	str	r3, [r7, #32]

    if( ( pxSocket != NULL ) && ( pxNetworkBuffer != NULL ) )
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d024      	beq.n	80138aa <prvHandleListen_IPV6+0x6e>
 8013860:	683b      	ldr	r3, [r7, #0]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d021      	beq.n	80138aa <prvHandleListen_IPV6+0x6e>
        /* Map the ethernet buffer onto a TCPPacket_IPv6_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( const TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8013866:	683b      	ldr	r3, [r7, #0]
 8013868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801386a:	62fb      	str	r3, [r7, #44]	@ 0x2c

        configASSERT( pxNetworkBuffer->pxEndPoint != NULL );
 801386c:	683b      	ldr	r3, [r7, #0]
 801386e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013870:	2b00      	cmp	r3, #0
 8013872:	d103      	bne.n	801387c <prvHandleListen_IPV6+0x40>
 8013874:	215d      	movs	r1, #93	@ 0x5d
 8013876:	487b      	ldr	r0, [pc, #492]	@ (8013a64 <prvHandleListen_IPV6+0x228>)
 8013878:	f7ee f8c6 	bl	8001a08 <vAssertCalled>

        /* Silently discard a SYN packet which was not specifically sent for this node. */
        if( memcmp( pxTCPPacket->xIPHeader.xDestinationAddress.ucBytes, pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 801387c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801387e:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8013882:	683b      	ldr	r3, [r7, #0]
 8013884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013886:	3338      	adds	r3, #56	@ 0x38
 8013888:	2210      	movs	r2, #16
 801388a:	4619      	mov	r1, r3
 801388c:	f010 f93b 	bl	8023b06 <memcmp>
 8013890:	4603      	mov	r3, r0
 8013892:	2b00      	cmp	r3, #0
 8013894:	d109      	bne.n	80138aa <prvHandleListen_IPV6+0x6e>
        {
            /* Assume that a new Initial Sequence Number will be required. Request
             * it now in order to fail out if necessary. */
            if( xApplicationGetRandomNumber( &ulInitialSequenceNumber ) == pdPASS )
 8013896:	f107 0308 	add.w	r3, r7, #8
 801389a:	4618      	mov	r0, r3
 801389c:	f7ee f97e 	bl	8001b9c <xApplicationGetRandomNumber>
 80138a0:	4603      	mov	r3, r0
 80138a2:	2b01      	cmp	r3, #1
 80138a4:	d101      	bne.n	80138aa <prvHandleListen_IPV6+0x6e>
            {
                xHasSequence = pdTRUE;
 80138a6:	2301      	movs	r3, #1
 80138a8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    /* A pure SYN (without ACK) has come in, create a new socket to answer
     * it. */
    if( xHasSequence != pdFALSE )
 80138aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d059      	beq.n	8013964 <prvHandleListen_IPV6+0x128>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80138b6:	f003 0308 	and.w	r3, r3, #8
 80138ba:	b2db      	uxtb	r3, r3
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d00c      	beq.n	80138da <prvHandleListen_IPV6+0x9e>
        {
            /* The flag bReuseSocket indicates that the same instance of the
             * listening socket should be used for the connection. */
            pxReturn = pxSocket;
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	62bb      	str	r3, [r7, #40]	@ 0x28
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 80138c4:	687a      	ldr	r2, [r7, #4]
 80138c6:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80138ca:	f043 0304 	orr.w	r3, r3, #4
 80138ce:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	687a      	ldr	r2, [r7, #4]
 80138d6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80138d8:	e044      	b.n	8013964 <prvHandleListen_IPV6+0x128>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
             * new socket when a connection comes in. */
            pxReturn = NULL;
 80138da:	2300      	movs	r3, #0
 80138dc:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	f8b3 2074 	ldrh.w	r2, [r3, #116]	@ 0x74
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80138ea:	429a      	cmp	r2, r3
 80138ec:	d31b      	bcc.n	8013926 <prvHandleListen_IPV6+0xea>
            {
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80138f2:	4619      	mov	r1, r3
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80138fa:	461a      	mov	r2, r3
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8013902:	4618      	mov	r0, r3
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801390a:	2b01      	cmp	r3, #1
 801390c:	d101      	bne.n	8013912 <prvHandleListen_IPV6+0xd6>
 801390e:	4b56      	ldr	r3, [pc, #344]	@ (8013a68 <prvHandleListen_IPV6+0x22c>)
 8013910:	e000      	b.n	8013914 <prvHandleListen_IPV6+0xd8>
 8013912:	4b56      	ldr	r3, [pc, #344]	@ (8013a6c <prvHandleListen_IPV6+0x230>)
 8013914:	9300      	str	r3, [sp, #0]
 8013916:	4603      	mov	r3, r0
 8013918:	4855      	ldr	r0, [pc, #340]	@ (8013a70 <prvHandleListen_IPV6+0x234>)
 801391a:	f00e ff43 	bl	80227a4 <lUDPLoggingPrintf>
                                   pxSocket->usLocalPort,
                                   pxSocket->u.xTCP.usChildCount,
                                   pxSocket->u.xTCP.usBacklog,
                                   ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                ( void ) prvTCPSendReset( pxNetworkBuffer );
 801391e:	6838      	ldr	r0, [r7, #0]
 8013920:	f001 f8a8 	bl	8014a74 <prvTCPSendReset>
 8013924:	e01e      	b.n	8013964 <prvHandleListen_IPV6+0x128>
            }
            else
            {
                FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                  FreeRTOS_socket( FREERTOS_AF_INET6, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 8013926:	2206      	movs	r2, #6
 8013928:	2101      	movs	r1, #1
 801392a:	200a      	movs	r0, #10
 801392c:	f7fa fe78 	bl	800e620 <FreeRTOS_socket>
 8013930:	61b8      	str	r0, [r7, #24]

                /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
                /* coverity[misra_c_2012_rule_11_4_violation] */
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 8013932:	69bb      	ldr	r3, [r7, #24]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d003      	beq.n	8013940 <prvHandleListen_IPV6+0x104>
 8013938:	69bb      	ldr	r3, [r7, #24]
 801393a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801393e:	d106      	bne.n	801394e <prvHandleListen_IPV6+0x112>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 8013940:	484c      	ldr	r0, [pc, #304]	@ (8013a74 <prvHandleListen_IPV6+0x238>)
 8013942:	f00e ff2f 	bl	80227a4 <lUDPLoggingPrintf>
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 8013946:	6838      	ldr	r0, [r7, #0]
 8013948:	f001 f894 	bl	8014a74 <prvTCPSendReset>
 801394c:	e00a      	b.n	8013964 <prvHandleListen_IPV6+0x128>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 801394e:	6879      	ldr	r1, [r7, #4]
 8013950:	69b8      	ldr	r0, [r7, #24]
 8013952:	f7ff fd6b 	bl	801342c <prvTCPSocketCopy>
 8013956:	4603      	mov	r3, r0
 8013958:	2b00      	cmp	r3, #0
 801395a:	d003      	beq.n	8013964 <prvHandleListen_IPV6+0x128>
                {
                    /* The socket will be connected immediately, no time for the
                     * owner to setsockopt's, therefore copy properties of the server
                     * socket to the new socket.  Only the binding might fail (due to
                     * lack of resources). */
                    pxReturn = pxNewSocket;
 801395c:	69bb      	ldr	r3, [r7, #24]
 801395e:	62bb      	str	r3, [r7, #40]	@ 0x28
                    xIsNewSocket = pdTRUE;
 8013960:	2301      	movs	r3, #1
 8013962:	623b      	str	r3, [r7, #32]
                }
            }
        }
    }

    if( ( xHasSequence != pdFALSE ) && ( pxReturn != NULL ) )
 8013964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013966:	2b00      	cmp	r3, #0
 8013968:	d076      	beq.n	8013a58 <prvHandleListen_IPV6+0x21c>
 801396a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801396c:	2b00      	cmp	r3, #0
 801396e:	d073      	beq.n	8013a58 <prvHandleListen_IPV6+0x21c>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                            &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8013970:	683b      	ldr	r3, [r7, #0]
 8013972:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013974:	6838      	ldr	r0, [r7, #0]
 8013976:	f7f6 fd3f 	bl	800a3f8 <uxIPHeaderSizePacket>
 801397a:	4603      	mov	r3, r0
 801397c:	330e      	adds	r3, #14
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 801397e:	4423      	add	r3, r4
 8013980:	617b      	str	r3, [r7, #20]

            pxReturn->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8013982:	683b      	ldr	r3, [r7, #0]
 8013984:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013988:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxReturn->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 801398a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801398c:	7a13      	ldrb	r3, [r2, #8]
 801398e:	f043 0301 	orr.w	r3, r3, #1
 8013992:	7213      	strb	r3, [r2, #8]

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8013994:	683b      	ldr	r3, [r7, #0]
 8013996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013998:	330e      	adds	r3, #14
 801399a:	613b      	str	r3, [r7, #16]
            pxReturn->u.xTCP.usRemotePort = FreeRTOS_ntohs( pxTCPPacket->xTCPHeader.usSourcePort );
 801399c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801399e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80139a0:	b29b      	uxth	r3, r3
 80139a2:	021b      	lsls	r3, r3, #8
 80139a4:	b21a      	sxth	r2, r3
 80139a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80139aa:	b29b      	uxth	r3, r3
 80139ac:	0a1b      	lsrs	r3, r3, #8
 80139ae:	b29b      	uxth	r3, r3
 80139b0:	b21b      	sxth	r3, r3
 80139b2:	4313      	orrs	r3, r2
 80139b4:	b21b      	sxth	r3, r3
 80139b6:	b29a      	uxth	r2, r3
 80139b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139ba:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
            ( void ) memcpy( pxReturn->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80139be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139c0:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 80139c4:	693b      	ldr	r3, [r7, #16]
 80139c6:	3308      	adds	r3, #8
 80139c8:	2210      	movs	r2, #16
 80139ca:	4619      	mov	r1, r3
 80139cc:	f00f f906 	bl	8022bdc <memcpy>
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 80139d0:	68ba      	ldr	r2, [r7, #8]
 80139d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139d4:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 80139d8:	697b      	ldr	r3, [r7, #20]
 80139da:	685b      	ldr	r3, [r3, #4]
 80139dc:	061a      	lsls	r2, r3, #24
 80139de:	697b      	ldr	r3, [r7, #20]
 80139e0:	685b      	ldr	r3, [r3, #4]
 80139e2:	021b      	lsls	r3, r3, #8
 80139e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80139e8:	431a      	orrs	r2, r3
 80139ea:	697b      	ldr	r3, [r7, #20]
 80139ec:	685b      	ldr	r3, [r3, #4]
 80139ee:	0a1b      	lsrs	r3, r3, #8
 80139f0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80139f4:	431a      	orrs	r2, r3
 80139f6:	697b      	ldr	r3, [r7, #20]
 80139f8:	685b      	ldr	r3, [r3, #4]
 80139fa:	0e1b      	lsrs	r3, r3, #24
 80139fc:	431a      	orrs	r2, r3
 80139fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a00:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            prvSocketSetMSS( pxReturn );
 8013a04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013a06:	f001 ff5b 	bl	80158c0 <prvSocketSetMSS>

            xReturnCreateWindow = prvTCPCreateWindow( pxReturn );
 8013a0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013a0c:	f000 fa4a 	bl	8013ea4 <prvTCPCreateWindow>
 8013a10:	60f8      	str	r0, [r7, #12]

            /* Did allocating TCP sectors fail? */
            if( xReturnCreateWindow != pdPASS )
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	2b01      	cmp	r3, #1
 8013a16:	d008      	beq.n	8013a2a <prvHandleListen_IPV6+0x1ee>
            {
                /* Close the socket if it was newly created. */
                if( xIsNewSocket == pdTRUE )
 8013a18:	6a3b      	ldr	r3, [r7, #32]
 8013a1a:	2b01      	cmp	r3, #1
 8013a1c:	d102      	bne.n	8013a24 <prvHandleListen_IPV6+0x1e8>
                {
                    ( void ) vSocketClose( pxReturn );
 8013a1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013a20:	f7fb fa0c 	bl	800ee3c <vSocketClose>
                }

                pxReturn = NULL;
 8013a24:	2300      	movs	r3, #0
 8013a26:	62bb      	str	r3, [r7, #40]	@ 0x28
                break;
 8013a28:	e016      	b.n	8013a58 <prvHandleListen_IPV6+0x21c>
            }

            vTCPStateChange( pxReturn, eSYN_FIRST );
 8013a2a:	2103      	movs	r1, #3
 8013a2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013a2e:	f7fd fead 	bl	801178c <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            if( pxNetworkBuffer->xDataLength > sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) )
 8013a32:	683b      	ldr	r3, [r7, #0]
 8013a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a36:	2b5a      	cmp	r3, #90	@ 0x5a
 8013a38:	d902      	bls.n	8013a40 <prvHandleListen_IPV6+0x204>
            {
                xCopyLength = sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket );
 8013a3a:	235a      	movs	r3, #90	@ 0x5a
 8013a3c:	61fb      	str	r3, [r7, #28]
 8013a3e:	e002      	b.n	8013a46 <prvHandleListen_IPV6+0x20a>
            }
            else
            {
                xCopyLength = pxNetworkBuffer->xDataLength;
 8013a40:	683b      	ldr	r3, [r7, #0]
 8013a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a44:	61fb      	str	r3, [r7, #28]
            }

            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 8013a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a48:	f103 00aa 	add.w	r0, r3, #170	@ 0xaa
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 8013a4c:	683b      	ldr	r3, [r7, #0]
 8013a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 8013a50:	69fa      	ldr	r2, [r7, #28]
 8013a52:	4619      	mov	r1, r3
 8013a54:	f00f f8c2 	bl	8022bdc <memcpy>
                             xCopyLength );
        } while( ipFALSE_BOOL );
    }

    return pxReturn;
 8013a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	3734      	adds	r7, #52	@ 0x34
 8013a5e:	46bd      	mov	sp, r7
 8013a60:	bd90      	pop	{r4, r7, pc}
 8013a62:	bf00      	nop
 8013a64:	08026df8 	.word	0x08026df8
 8013a68:	08026e38 	.word	0x08026e38
 8013a6c:	08026e3c 	.word	0x08026e3c
 8013a70:	08026e40 	.word	0x08026e40
 8013a74:	08026e70 	.word	0x08026e70

08013a78 <prvTCPMakeSurePrepared>:
 *         call prvTCPPrepareConnect() to continue the preparation.
 * @param[in] pxSocket The socket that wants to connect.
 * @return Returns pdTRUE if the connection is prepared, i.e. the MAC-
 *         address of the peer is already known. */
    static BaseType_t prvTCPMakeSurePrepared( FreeRTOS_Socket_t * pxSocket )
    {
 8013a78:	b580      	push	{r7, lr}
 8013a7a:	b084      	sub	sp, #16
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 8013a80:	2301      	movs	r3, #1
 8013a82:	60fb      	str	r3, [r7, #12]

        if( pxSocket->u.xTCP.bits.bConnPrepared == pdFALSE_UNSIGNED )
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013a8a:	f003 0308 	and.w	r3, r3, #8
 8013a8e:	b2db      	uxtb	r3, r3
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d107      	bne.n	8013aa4 <prvTCPMakeSurePrepared+0x2c>
        {
            if( prvTCPPrepareConnect( pxSocket ) != pdTRUE )
 8013a94:	6878      	ldr	r0, [r7, #4]
 8013a96:	f000 fa51 	bl	8013f3c <prvTCPPrepareConnect>
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	2b01      	cmp	r3, #1
 8013a9e:	d001      	beq.n	8013aa4 <prvTCPMakeSurePrepared+0x2c>
            {
                /* The preparation of a connection ( ARP resolution ) is not yet ready. */
                xReturn = pdFALSE;
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 8013aa4:	68fb      	ldr	r3, [r7, #12]
    }
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	3710      	adds	r7, #16
 8013aaa:	46bd      	mov	sp, r7
 8013aac:	bd80      	pop	{r7, pc}
	...

08013ab0 <prvTCPSendPacket>:
 * @return Number of bytes to be sent.
 *
 * @note It is only called by xTCPSocketCheck().
 */
    int32_t prvTCPSendPacket( FreeRTOS_Socket_t * pxSocket )
    {
 8013ab0:	b580      	push	{r7, lr}
 8013ab2:	b088      	sub	sp, #32
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	6078      	str	r0, [r7, #4]
        int32_t lResult = 0;
 8013ab8:	2300      	movs	r3, #0
 8013aba:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxOptionsLength, uxIntermediateResult = 0;
 8013abc:	2300      	movs	r3, #0
 8013abe:	61bb      	str	r3, [r7, #24]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( pxSocket->u.xTCP.eTCPState != eCONNECT_SYN )
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8013ac6:	2b02      	cmp	r3, #2
 8013ac8:	d010      	beq.n	8013aec <prvTCPSendPacket+0x3c>
        {
            /* The connection is in a state other than SYN. */
            pxNetworkBuffer = NULL;
 8013aca:	2300      	movs	r3, #0
 8013acc:	60fb      	str	r3, [r7, #12]

            /* prvTCPSendRepeated() will only create a network buffer if necessary,
             * i.e. when data must be sent to the peer. */
            lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 8013ace:	f107 030c 	add.w	r3, r7, #12
 8013ad2:	4619      	mov	r1, r3
 8013ad4:	6878      	ldr	r0, [r7, #4]
 8013ad6:	f000 f859 	bl	8013b8c <prvTCPSendRepeated>
 8013ada:	61f8      	str	r0, [r7, #28]

            if( pxNetworkBuffer != NULL )
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d04d      	beq.n	8013b7e <prvTCPSendPacket+0xce>
            {
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	f003 ffb5 	bl	8017a54 <vReleaseNetworkBufferAndDescriptor>
 8013aea:	e048      	b.n	8013b7e <prvTCPSendPacket+0xce>
            }
        }
        else
        {
            if( pxSocket->u.xTCP.ucRepCount >= 3U )
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8013af2:	2b02      	cmp	r3, #2
 8013af4:	d90d      	bls.n	8013b12 <prvTCPSendPacket+0x62>
            {
                /* The connection is in the SYN status. The packet will be repeated
                 * to most 3 times.  When there is no response, the socket get the
                 * status 'eCLOSE_WAIT'. */
                FreeRTOS_debug_printf( ( "Connect: giving up %xip:%u\n",
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013b00:	461a      	mov	r2, r3
 8013b02:	4821      	ldr	r0, [pc, #132]	@ (8013b88 <prvTCPSendPacket+0xd8>)
 8013b04:	f00e fe4e 	bl	80227a4 <lUDPLoggingPrintf>
                                         ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                         pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8013b08:	2108      	movs	r1, #8
 8013b0a:	6878      	ldr	r0, [r7, #4]
 8013b0c:	f7fd fe3e 	bl	801178c <vTCPStateChange>
 8013b10:	e035      	b.n	8013b7e <prvTCPSendPacket+0xce>
            }
            else if( prvTCPMakeSurePrepared( pxSocket ) == pdTRUE )
 8013b12:	6878      	ldr	r0, [r7, #4]
 8013b14:	f7ff ffb0 	bl	8013a78 <prvTCPMakeSurePrepared>
 8013b18:	4603      	mov	r3, r0
 8013b1a:	2b01      	cmp	r3, #1
 8013b1c:	d12f      	bne.n	8013b7e <prvTCPSendPacket+0xce>
                 * the Ethernet address of the peer or the gateway is found. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8013b1e:	6878      	ldr	r0, [r7, #4]
 8013b20:	f7f6 fc84 	bl	800a42c <uxIPHeaderSizeSocket>
 8013b24:	4603      	mov	r3, r0
 8013b26:	330e      	adds	r3, #14
 8013b28:	33a0      	adds	r3, #160	@ 0xa0
 8013b2a:	687a      	ldr	r2, [r7, #4]
 8013b2c:	4413      	add	r3, r2
 8013b2e:	330a      	adds	r3, #10
 8013b30:	617b      	str	r3, [r7, #20]

                /* About to send a SYN packet.  Call prvSetSynAckOptions() to set
                 * the proper options: The size of MSS and whether SACK's are
                 * allowed. */
                uxOptionsLength = prvSetSynAckOptions( pxSocket, &( pxProtocolHeaders->xTCPHeader ) );
 8013b32:	697b      	ldr	r3, [r7, #20]
 8013b34:	4619      	mov	r1, r3
 8013b36:	6878      	ldr	r0, [r7, #4]
 8013b38:	f000 fa4c 	bl	8013fd4 <prvSetSynAckOptions>
 8013b3c:	6138      	str	r0, [r7, #16]

                /* Return the number of bytes to be sent. */
                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8013b3e:	6878      	ldr	r0, [r7, #4]
 8013b40:	f7f6 fc74 	bl	800a42c <uxIPHeaderSizeSocket>
 8013b44:	4602      	mov	r2, r0
 8013b46:	693b      	ldr	r3, [r7, #16]
 8013b48:	4413      	add	r3, r2
 8013b4a:	3314      	adds	r3, #20
 8013b4c:	61bb      	str	r3, [r7, #24]
                lResult = ( int32_t ) uxIntermediateResult;
 8013b4e:	69bb      	ldr	r3, [r7, #24]
 8013b50:	61fb      	str	r3, [r7, #28]

                /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                 * uxOptionsLength is always a multiple of 4.  The complete expression
                 * would be:
                 * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8013b52:	693b      	ldr	r3, [r7, #16]
 8013b54:	b2db      	uxtb	r3, r3
 8013b56:	3314      	adds	r3, #20
 8013b58:	b2db      	uxtb	r3, r3
 8013b5a:	009b      	lsls	r3, r3, #2
 8013b5c:	b2da      	uxtb	r2, r3
 8013b5e:	697b      	ldr	r3, [r7, #20]
 8013b60:	731a      	strb	r2, [r3, #12]

                /* Repeat Count is used for a connecting socket, to limit the number
                 * of tries. */
                pxSocket->u.xTCP.ucRepCount++;
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8013b68:	3301      	adds	r3, #1
 8013b6a:	b2da      	uxtb	r2, r3
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                /* Send the SYN message to make a connection.  The messages is
                 * stored in the socket field 'xPacket'.  It will be wrapped in a
                 * pseudo network buffer descriptor before it will be sent. */
                prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 8013b72:	69fa      	ldr	r2, [r7, #28]
 8013b74:	2300      	movs	r3, #0
 8013b76:	2100      	movs	r1, #0
 8013b78:	6878      	ldr	r0, [r7, #4]
 8013b7a:	f000 f837 	bl	8013bec <prvTCPReturnPacket>
                /* Nothing to do. */
            }
        }

        /* Return the total number of bytes sent. */
        return lResult;
 8013b7e:	69fb      	ldr	r3, [r7, #28]
    }
 8013b80:	4618      	mov	r0, r3
 8013b82:	3720      	adds	r7, #32
 8013b84:	46bd      	mov	sp, r7
 8013b86:	bd80      	pop	{r7, pc}
 8013b88:	08026e90 	.word	0x08026e90

08013b8c <prvTCPSendRepeated>:
 *
 * @return Total number of bytes sent.
 */
    int32_t prvTCPSendRepeated( FreeRTOS_Socket_t * pxSocket,
                                NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	b086      	sub	sp, #24
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	6078      	str	r0, [r7, #4]
 8013b94:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIndex;
        int32_t lResult = 0;
 8013b96:	2300      	movs	r3, #0
 8013b98:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = 0U;
 8013b9a:	2300      	movs	r3, #0
 8013b9c:	60fb      	str	r3, [r7, #12]
        int32_t xSendLength;

        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	617b      	str	r3, [r7, #20]
 8013ba2:	e019      	b.n	8013bd8 <prvTCPSendRepeated+0x4c>
        {
            /* prvTCPPrepareSend() might allocate a network buffer if there is data
             * to be sent. */
            xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 8013ba4:	68fa      	ldr	r2, [r7, #12]
 8013ba6:	6839      	ldr	r1, [r7, #0]
 8013ba8:	6878      	ldr	r0, [r7, #4]
 8013baa:	f000 fb7d 	bl	80142a8 <prvTCPPrepareSend>
 8013bae:	60b8      	str	r0, [r7, #8]

            if( xSendLength <= 0 )
 8013bb0:	68bb      	ldr	r3, [r7, #8]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	dd14      	ble.n	8013be0 <prvTCPSendRepeated+0x54>
            {
                break;
            }

            /* And return the packet to the peer. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8013bb6:	683b      	ldr	r3, [r7, #0]
 8013bb8:	6819      	ldr	r1, [r3, #0]
 8013bba:	68ba      	ldr	r2, [r7, #8]
 8013bbc:	2301      	movs	r3, #1
 8013bbe:	6878      	ldr	r0, [r7, #4]
 8013bc0:	f000 f814 	bl	8013bec <prvTCPReturnPacket>

            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                *ppxNetworkBuffer = NULL;
 8013bc4:	683b      	ldr	r3, [r7, #0]
 8013bc6:	2200      	movs	r2, #0
 8013bc8:	601a      	str	r2, [r3, #0]
            }
            #endif /* ipconfigZERO_COPY_TX_DRIVER */

            lResult += xSendLength;
 8013bca:	693a      	ldr	r2, [r7, #16]
 8013bcc:	68bb      	ldr	r3, [r7, #8]
 8013bce:	4413      	add	r3, r2
 8013bd0:	613b      	str	r3, [r7, #16]
        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8013bd2:	697b      	ldr	r3, [r7, #20]
 8013bd4:	3301      	adds	r3, #1
 8013bd6:	617b      	str	r3, [r7, #20]
 8013bd8:	697b      	ldr	r3, [r7, #20]
 8013bda:	2b07      	cmp	r3, #7
 8013bdc:	d9e2      	bls.n	8013ba4 <prvTCPSendRepeated+0x18>
 8013bde:	e000      	b.n	8013be2 <prvTCPSendRepeated+0x56>
                break;
 8013be0:	bf00      	nop
        }

        /* Return the total number of bytes sent. */
        return lResult;
 8013be2:	693b      	ldr	r3, [r7, #16]
    }
 8013be4:	4618      	mov	r0, r3
 8013be6:	3718      	adds	r7, #24
 8013be8:	46bd      	mov	sp, r7
 8013bea:	bd80      	pop	{r7, pc}

08013bec <prvTCPReturnPacket>:
 */
    void prvTCPReturnPacket( FreeRTOS_Socket_t * pxSocket,
                             NetworkBufferDescriptor_t * pxDescriptor,
                             uint32_t ulLen,
                             BaseType_t xReleaseAfterSend )
    {
 8013bec:	b580      	push	{r7, lr}
 8013bee:	b086      	sub	sp, #24
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	60f8      	str	r0, [r7, #12]
 8013bf4:	60b9      	str	r1, [r7, #8]
 8013bf6:	607a      	str	r2, [r7, #4]
 8013bf8:	603b      	str	r3, [r7, #0]
        const NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 8013bfa:	68bb      	ldr	r3, [r7, #8]
 8013bfc:	613b      	str	r3, [r7, #16]
        BaseType_t xIsIPv6 = pdFALSE;
 8013bfe:	2300      	movs	r3, #0
 8013c00:	617b      	str	r3, [r7, #20]

        if( pxNetworkBuffer != NULL )
 8013c02:	693b      	ldr	r3, [r7, #16]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d008      	beq.n	8013c1a <prvTCPReturnPacket+0x2e>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                if( uxIPHeaderSizePacket( pxNetworkBuffer ) == ipSIZE_OF_IPv6_HEADER )
 8013c08:	6938      	ldr	r0, [r7, #16]
 8013c0a:	f7f6 fbf5 	bl	800a3f8 <uxIPHeaderSizePacket>
 8013c0e:	4603      	mov	r3, r0
 8013c10:	2b28      	cmp	r3, #40	@ 0x28
 8013c12:	d113      	bne.n	8013c3c <prvTCPReturnPacket+0x50>
                {
                    xIsIPv6 = pdTRUE;
 8013c14:	2301      	movs	r3, #1
 8013c16:	617b      	str	r3, [r7, #20]
 8013c18:	e010      	b.n	8013c3c <prvTCPReturnPacket+0x50>
                }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else if( pxSocket != NULL )
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d008      	beq.n	8013c32 <prvTCPReturnPacket+0x46>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                if( uxIPHeaderSizeSocket( pxSocket ) == ipSIZE_OF_IPv6_HEADER )
 8013c20:	68f8      	ldr	r0, [r7, #12]
 8013c22:	f7f6 fc03 	bl	800a42c <uxIPHeaderSizeSocket>
 8013c26:	4603      	mov	r3, r0
 8013c28:	2b28      	cmp	r3, #40	@ 0x28
 8013c2a:	d107      	bne.n	8013c3c <prvTCPReturnPacket+0x50>
                {
                    xIsIPv6 = pdTRUE;
 8013c2c:	2301      	movs	r3, #1
 8013c2e:	617b      	str	r3, [r7, #20]
 8013c30:	e004      	b.n	8013c3c <prvTCPReturnPacket+0x50>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else
        {
            /* prvTCPReturnPacket_IPVx() needs either a network buffer, or a socket. */
            configASSERT( pdFALSE );
 8013c32:	f240 1119 	movw	r1, #281	@ 0x119
 8013c36:	480c      	ldr	r0, [pc, #48]	@ (8013c68 <prvTCPReturnPacket+0x7c>)
 8013c38:	f7ed fee6 	bl	8001a08 <vAssertCalled>
        }

        #if ( ipconfigUSE_IPv6 != 0 )
            if( xIsIPv6 == pdTRUE )
 8013c3c:	697b      	ldr	r3, [r7, #20]
 8013c3e:	2b01      	cmp	r3, #1
 8013c40:	d105      	bne.n	8013c4e <prvTCPReturnPacket+0x62>
            {
                prvTCPReturnPacket_IPV6( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
 8013c42:	683b      	ldr	r3, [r7, #0]
 8013c44:	687a      	ldr	r2, [r7, #4]
 8013c46:	68b9      	ldr	r1, [r7, #8]
 8013c48:	68f8      	ldr	r0, [r7, #12]
 8013c4a:	f001 fa61 	bl	8015110 <prvTCPReturnPacket_IPV6>
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            if( xIsIPv6 == pdFALSE )
 8013c4e:	697b      	ldr	r3, [r7, #20]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d105      	bne.n	8013c60 <prvTCPReturnPacket+0x74>
            {
                prvTCPReturnPacket_IPV4( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
 8013c54:	683b      	ldr	r3, [r7, #0]
 8013c56:	687a      	ldr	r2, [r7, #4]
 8013c58:	68b9      	ldr	r1, [r7, #8]
 8013c5a:	68f8      	ldr	r0, [r7, #12]
 8013c5c:	f000 ff18 	bl	8014a90 <prvTCPReturnPacket_IPV4>
            }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
    }
 8013c60:	bf00      	nop
 8013c62:	3718      	adds	r7, #24
 8013c64:	46bd      	mov	sp, r7
 8013c66:	bd80      	pop	{r7, pc}
 8013c68:	08026eac 	.word	0x08026eac

08013c6c <prvTCPReturn_CheckTCPWindow>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_CheckTCPWindow( FreeRTOS_Socket_t * pxSocket,
                                      const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      size_t uxIPHeaderSize )
    {
 8013c6c:	b580      	push	{r7, lr}
 8013c6e:	b08a      	sub	sp, #40	@ 0x28
 8013c70:	af00      	add	r7, sp, #0
 8013c72:	60f8      	str	r0, [r7, #12]
 8013c74:	60b9      	str	r1, [r7, #8]
 8013c76:	607a      	str	r2, [r7, #4]
        /* Calculate the space in the RX buffer in order to advertise the
         * size of this socket's reception window. */
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8013c7e:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 8013c80:	68bb      	ldr	r3, [r7, #8]
 8013c82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8013c88:	4413      	add	r3, r2
 8013c8a:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.rxStream != NULL )
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d007      	beq.n	8013ca6 <prvTCPReturn_CheckTCPWindow+0x3a>
        {
            /* An RX stream was created already, see how much space is
             * available. */
            ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	f7fd fa9f 	bl	80111e0 <uxStreamBufferFrontSpace>
 8013ca2:	6278      	str	r0, [r7, #36]	@ 0x24
 8013ca4:	e003      	b.n	8013cae <prvTCPReturn_CheckTCPWindow+0x42>
        }
        else
        {
            /* No RX stream has been created, the full stream size is
             * available. */
            ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013cac:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        /* Take the minimum of the RX buffer space and the RX window size. */
        ulSpace = FreeRTOS_min_uint32( pxTCPWindow->xSize.ulRxWindowLength, ulFrontSpace );
 8013cae:	69bb      	ldr	r3, [r7, #24]
 8013cb0:	685b      	ldr	r3, [r3, #4]
 8013cb2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	f7f7 f8ed 	bl	800ae94 <FreeRTOS_min_uint32>
 8013cba:	6238      	str	r0, [r7, #32]

        if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8013cc2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8013cc6:	b2db      	uxtb	r3, r3
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d107      	bne.n	8013cdc <prvTCPReturn_CheckTCPWindow+0x70>
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8013cd2:	f003 0304 	and.w	r3, r3, #4
 8013cd6:	b2db      	uxtb	r3, r3
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d001      	beq.n	8013ce0 <prvTCPReturn_CheckTCPWindow+0x74>
        {
            /* The low-water mark was reached, meaning there was little
             * space left.  The socket will wait until the application has read
             * or flushed the incoming data, and 'zero-window' will be
             * advertised. */
            ulSpace = 0U;
 8013cdc:	2300      	movs	r3, #0
 8013cde:	623b      	str	r3, [r7, #32]
        }

        /* If possible, advertise an RX window size of at least 1 MSS, otherwise
         * the peer might start 'zero window probing', i.e. sending small packets
         * (1, 2, 4, 8... bytes). */
        if( ( ulSpace < pxSocket->u.xTCP.usMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usMSS ) )
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013ce6:	461a      	mov	r2, r3
 8013ce8:	6a3b      	ldr	r3, [r7, #32]
 8013cea:	4293      	cmp	r3, r2
 8013cec:	d20a      	bcs.n	8013d04 <prvTCPReturn_CheckTCPWindow+0x98>
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013cf4:	461a      	mov	r2, r3
 8013cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cf8:	4293      	cmp	r3, r2
 8013cfa:	d303      	bcc.n	8013d04 <prvTCPReturn_CheckTCPWindow+0x98>
        {
            ulSpace = pxSocket->u.xTCP.usMSS;
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013d02:	623b      	str	r3, [r7, #32]
        }

        /* Avoid overflow of the 16-bit win field. */
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8013d0a:	461a      	mov	r2, r3
 8013d0c:	6a3b      	ldr	r3, [r7, #32]
 8013d0e:	40d3      	lsrs	r3, r2
 8013d10:	61fb      	str	r3, [r7, #28]
        {
            ulWinSize = ulSpace;
        }
        #endif

        if( ulWinSize > 0xfffcU )
 8013d12:	69fb      	ldr	r3, [r7, #28]
 8013d14:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8013d18:	4293      	cmp	r3, r2
 8013d1a:	d902      	bls.n	8013d22 <prvTCPReturn_CheckTCPWindow+0xb6>
        {
            ulWinSize = 0xfffcU;
 8013d1c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8013d20:	61fb      	str	r3, [r7, #28]
        }

        pxProtocolHeaders->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 8013d22:	69fb      	ldr	r3, [r7, #28]
 8013d24:	b29b      	uxth	r3, r3
 8013d26:	021b      	lsls	r3, r3, #8
 8013d28:	b21a      	sxth	r2, r3
 8013d2a:	69fb      	ldr	r3, [r7, #28]
 8013d2c:	b29b      	uxth	r3, r3
 8013d2e:	0a1b      	lsrs	r3, r3, #8
 8013d30:	b29b      	uxth	r3, r3
 8013d32:	b21b      	sxth	r3, r3
 8013d34:	4313      	orrs	r3, r2
 8013d36:	b21b      	sxth	r3, r3
 8013d38:	b29a      	uxth	r2, r3
 8013d3a:	697b      	ldr	r3, [r7, #20]
 8013d3c:	81da      	strh	r2, [r3, #14]

        /* The new window size has been advertised, switch off the flag. */
        pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 8013d3e:	68fa      	ldr	r2, [r7, #12]
 8013d40:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013d44:	f36f 0300 	bfc	r3, #0, #1
 8013d48:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Later on, when deciding to delay an ACK, a precise estimate is needed
         * of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
         * highest sequence number minus 1 that the socket will accept. */
        pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 8013d4c:	69bb      	ldr	r3, [r7, #24]
 8013d4e:	691a      	ldr	r2, [r3, #16]
 8013d50:	6a3b      	ldr	r3, [r7, #32]
 8013d52:	441a      	add	r2, r3
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
 8013d58:	bf00      	nop
 8013d5a:	3728      	adds	r7, #40	@ 0x28
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	bd80      	pop	{r7, pc}

08013d60 <prvTCPReturn_SetSequenceNumber>:
 */
    void prvTCPReturn_SetSequenceNumber( FreeRTOS_Socket_t * pxSocket,
                                         const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                         size_t uxIPHeaderSize,
                                         uint32_t ulLen )
    {
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b088      	sub	sp, #32
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	60f8      	str	r0, [r7, #12]
 8013d68:	60b9      	str	r1, [r7, #8]
 8013d6a:	607a      	str	r2, [r7, #4]
 8013d6c:	603b      	str	r3, [r7, #0]
        ProtocolHeaders_t * pxProtocolHeaders;
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8013d74:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 8013d76:	68bb      	ldr	r3, [r7, #8]
 8013d78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8013d7e:	4413      	add	r3, r2
 8013d80:	61bb      	str	r3, [r7, #24]
        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013d88:	f003 0302 	and.w	r3, r3, #2
 8013d8c:	b2db      	uxtb	r3, r3
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d029      	beq.n	8013de6 <prvTCPReturn_SetSequenceNumber+0x86>
            {
                /* Sending a keep-alive packet, send the current sequence number
                 * minus 1, which will be recognised as a keep-alive packet and
                 * responded to by acknowledging the last byte. */
                pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8013d92:	68fa      	ldr	r2, [r7, #12]
 8013d94:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013d98:	f36f 0341 	bfc	r3, #1, #1
 8013d9c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 8013da0:	68fa      	ldr	r2, [r7, #12]
 8013da2:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013da6:	f043 0304 	orr.w	r3, r3, #4
 8013daa:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1U;
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013db4:	1e5a      	subs	r2, r3, #1
 8013db6:	69bb      	ldr	r3, [r7, #24]
 8013db8:	605a      	str	r2, [r3, #4]
                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 8013dba:	69bb      	ldr	r3, [r7, #24]
 8013dbc:	685b      	ldr	r3, [r3, #4]
 8013dbe:	061a      	lsls	r2, r3, #24
 8013dc0:	69bb      	ldr	r3, [r7, #24]
 8013dc2:	685b      	ldr	r3, [r3, #4]
 8013dc4:	021b      	lsls	r3, r3, #8
 8013dc6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013dca:	431a      	orrs	r2, r3
 8013dcc:	69bb      	ldr	r3, [r7, #24]
 8013dce:	685b      	ldr	r3, [r3, #4]
 8013dd0:	0a1b      	lsrs	r3, r3, #8
 8013dd2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013dd6:	431a      	orrs	r2, r3
 8013dd8:	69bb      	ldr	r3, [r7, #24]
 8013dda:	685b      	ldr	r3, [r3, #4]
 8013ddc:	0e1b      	lsrs	r3, r3, #24
 8013dde:	431a      	orrs	r2, r3
 8013de0:	69bb      	ldr	r3, [r7, #24]
 8013de2:	605a      	str	r2, [r3, #4]
 8013de4:	e043      	b.n	8013e6e <prvTCPReturn_SetSequenceNumber+0x10e>
            }
            else
        #endif /* if ( ipconfigTCP_KEEP_ALIVE == 1 ) */
        {
            pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013dec:	061a      	lsls	r2, r3, #24
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013df4:	021b      	lsls	r3, r3, #8
 8013df6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013dfa:	431a      	orrs	r2, r3
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013e02:	0a1b      	lsrs	r3, r3, #8
 8013e04:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013e08:	431a      	orrs	r2, r3
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013e10:	0e1b      	lsrs	r3, r3, #24
 8013e12:	431a      	orrs	r2, r3
 8013e14:	69bb      	ldr	r3, [r7, #24]
 8013e16:	605a      	str	r2, [r3, #4]

            if( ( pxProtocolHeaders->xTCPHeader.ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U )
 8013e18:	69bb      	ldr	r3, [r7, #24]
 8013e1a:	7b5b      	ldrb	r3, [r3, #13]
 8013e1c:	f003 0301 	and.w	r3, r3, #1
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d024      	beq.n	8013e6e <prvTCPReturn_SetSequenceNumber+0x10e>
            {
                /* Suppress FIN in case this packet carries earlier data to be
                 * retransmitted. */
                uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + uxIPHeaderSizeSocket( pxSocket ) ) );
 8013e24:	68f8      	ldr	r0, [r7, #12]
 8013e26:	f7f6 fb01 	bl	800a42c <uxIPHeaderSizeSocket>
 8013e2a:	4602      	mov	r2, r0
 8013e2c:	683b      	ldr	r3, [r7, #0]
 8013e2e:	1a9b      	subs	r3, r3, r2
 8013e30:	3b14      	subs	r3, #20
 8013e32:	617b      	str	r3, [r7, #20]

                if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 8013e34:	69fb      	ldr	r3, [r7, #28]
 8013e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e38:	697b      	ldr	r3, [r7, #20]
 8013e3a:	441a      	add	r2, r3
 8013e3c:	69fb      	ldr	r3, [r7, #28]
 8013e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e40:	429a      	cmp	r2, r3
 8013e42:	d014      	beq.n	8013e6e <prvTCPReturn_SetSequenceNumber+0x10e>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_FIN );
 8013e44:	69bb      	ldr	r3, [r7, #24]
 8013e46:	7b5b      	ldrb	r3, [r3, #13]
 8013e48:	f023 0301 	bic.w	r3, r3, #1
 8013e4c:	b2da      	uxtb	r2, r3
 8013e4e:	69bb      	ldr	r3, [r7, #24]
 8013e50:	735a      	strb	r2, [r3, #13]
                    FreeRTOS_debug_printf( ( "Suppress FIN for %u + %u < %u\n",
 8013e52:	69fb      	ldr	r3, [r7, #28]
 8013e54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e56:	69fb      	ldr	r3, [r7, #28]
 8013e58:	69db      	ldr	r3, [r3, #28]
 8013e5a:	1ad1      	subs	r1, r2, r3
 8013e5c:	69fb      	ldr	r3, [r7, #28]
 8013e5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013e60:	69fb      	ldr	r3, [r7, #28]
 8013e62:	69db      	ldr	r3, [r3, #28]
 8013e64:	1ad3      	subs	r3, r2, r3
 8013e66:	697a      	ldr	r2, [r7, #20]
 8013e68:	480d      	ldr	r0, [pc, #52]	@ (8013ea0 <prvTCPReturn_SetSequenceNumber+0x140>)
 8013e6a:	f00e fc9b 	bl	80227a4 <lUDPLoggingPrintf>
                }
            }
        }

        /* Tell which sequence number is expected next time */
        pxProtocolHeaders->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 8013e6e:	69fb      	ldr	r3, [r7, #28]
 8013e70:	691b      	ldr	r3, [r3, #16]
 8013e72:	061a      	lsls	r2, r3, #24
 8013e74:	69fb      	ldr	r3, [r7, #28]
 8013e76:	691b      	ldr	r3, [r3, #16]
 8013e78:	021b      	lsls	r3, r3, #8
 8013e7a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013e7e:	431a      	orrs	r2, r3
 8013e80:	69fb      	ldr	r3, [r7, #28]
 8013e82:	691b      	ldr	r3, [r3, #16]
 8013e84:	0a1b      	lsrs	r3, r3, #8
 8013e86:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013e8a:	431a      	orrs	r2, r3
 8013e8c:	69fb      	ldr	r3, [r7, #28]
 8013e8e:	691b      	ldr	r3, [r3, #16]
 8013e90:	0e1b      	lsrs	r3, r3, #24
 8013e92:	431a      	orrs	r2, r3
 8013e94:	69bb      	ldr	r3, [r7, #24]
 8013e96:	609a      	str	r2, [r3, #8]
    }
 8013e98:	bf00      	nop
 8013e9a:	3720      	adds	r7, #32
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	bd80      	pop	{r7, pc}
 8013ea0:	08026ee8 	.word	0x08026ee8

08013ea4 <prvTCPCreateWindow>:
 *       random starting value, are being synchronized. The sliding window manager
 *       (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 *       Size (MSS).
 */
    BaseType_t prvTCPCreateWindow( FreeRTOS_Socket_t * pxSocket )
    {
 8013ea4:	b5b0      	push	{r4, r5, r7, lr}
 8013ea6:	b088      	sub	sp, #32
 8013ea8:	af02      	add	r7, sp, #8
 8013eaa:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        uint32_t ulRxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxRxWinSize;
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8013eb2:	617b      	str	r3, [r7, #20]
        uint32_t ulTxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxTxWinSize;
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8013eba:	613b      	str	r3, [r7, #16]

        if( xTCPWindowLoggingLevel != 0 )
 8013ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8013f34 <prvTCPCreateWindow+0x90>)
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d014      	beq.n	8013eee <prvTCPCreateWindow+0x4a>
        {
            FreeRTOS_debug_printf( ( "Limits (using): TCP Win size %u Water %u <= %u <= %u\n",
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8013eca:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8013ece:	fb02 f103 	mul.w	r1, r2, r3
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013ee4:	9300      	str	r3, [sp, #0]
 8013ee6:	4603      	mov	r3, r0
 8013ee8:	4813      	ldr	r0, [pc, #76]	@ (8013f38 <prvTCPCreateWindow+0x94>)
 8013eea:	f00e fc5b 	bl	80227a4 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxLittleSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxEnoughSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxRxStreamSize ) );
        }

        xReturn = xTCPWindowCreate(
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8013ef4:	697b      	ldr	r3, [r7, #20]
 8013ef6:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8013efa:	fb02 f103 	mul.w	r1, r2, r3
 8013efe:	693b      	ldr	r3, [r7, #16]
 8013f00:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8013f04:	fb02 f403 	mul.w	r4, r2, r3
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	f8d3 5130 	ldr.w	r5, [r3, #304]	@ 0x130
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
            &pxSocket->u.xTCP.xTCPWindow,
            ulRxWindowSize * ipconfigTCP_MSS,
            ulTxWindowSize * ipconfigTCP_MSS,
            pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
            ( uint32_t ) pxSocket->u.xTCP.usMSS );
 8013f14:	687a      	ldr	r2, [r7, #4]
 8013f16:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
        xReturn = xTCPWindowCreate(
 8013f1a:	9201      	str	r2, [sp, #4]
 8013f1c:	9300      	str	r3, [sp, #0]
 8013f1e:	462b      	mov	r3, r5
 8013f20:	4622      	mov	r2, r4
 8013f22:	f001 ffd7 	bl	8015ed4 <xTCPWindowCreate>
 8013f26:	60f8      	str	r0, [r7, #12]

        return xReturn;
 8013f28:	68fb      	ldr	r3, [r7, #12]
    }
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	3718      	adds	r7, #24
 8013f2e:	46bd      	mov	sp, r7
 8013f30:	bdb0      	pop	{r4, r5, r7, pc}
 8013f32:	bf00      	nop
 8013f34:	2000164c 	.word	0x2000164c
 8013f38:	08026f08 	.word	0x08026f08

08013f3c <prvTCPPrepareConnect>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
    static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t * pxSocket )
    {
 8013f3c:	b580      	push	{r7, lr}
 8013f3e:	b084      	sub	sp, #16
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 8013f44:	2301      	movs	r3, #1
 8013f46:	60fb      	str	r3, [r7, #12]

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	7a1b      	ldrb	r3, [r3, #8]
 8013f4c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8013f50:	b2db      	uxtb	r3, r3
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d002      	beq.n	8013f5c <prvTCPPrepareConnect+0x20>
 8013f56:	2b01      	cmp	r3, #1
 8013f58:	d005      	beq.n	8013f66 <prvTCPPrepareConnect+0x2a>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 8013f5a:	e009      	b.n	8013f70 <prvTCPPrepareConnect+0x34>
                    xReturn = prvTCPPrepareConnect_IPV4( pxSocket );
 8013f5c:	6878      	ldr	r0, [r7, #4]
 8013f5e:	f000 ff69 	bl	8014e34 <prvTCPPrepareConnect_IPV4>
 8013f62:	60f8      	str	r0, [r7, #12]
                    break;
 8013f64:	e004      	b.n	8013f70 <prvTCPPrepareConnect+0x34>
                    xReturn = prvTCPPrepareConnect_IPV6( pxSocket );
 8013f66:	6878      	ldr	r0, [r7, #4]
 8013f68:	f001 fab4 	bl	80154d4 <prvTCPPrepareConnect_IPV6>
 8013f6c:	60f8      	str	r0, [r7, #12]
                    break;
 8013f6e:	bf00      	nop
        }

        return xReturn;
 8013f70:	68fb      	ldr	r3, [r7, #12]
    }
 8013f72:	4618      	mov	r0, r3
 8013f74:	3710      	adds	r7, #16
 8013f76:	46bd      	mov	sp, r7
 8013f78:	bd80      	pop	{r7, pc}
	...

08013f7c <prvWinScaleFactor>:
 * @param[in] pxSocket The socket owning the TCP connection.
 *
 * @return The scaling factor.
 */
        static uint8_t prvWinScaleFactor( const FreeRTOS_Socket_t * pxSocket )
        {
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b084      	sub	sp, #16
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
            size_t uxWinSize;
            uint8_t ucFactor;


            /* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
            uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usMSS;
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8013f8a:	687a      	ldr	r2, [r7, #4]
 8013f8c:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
 8013f90:	fb02 f303 	mul.w	r3, r2, r3
 8013f94:	60fb      	str	r3, [r7, #12]
            ucFactor = 0U;
 8013f96:	2300      	movs	r3, #0
 8013f98:	72fb      	strb	r3, [r7, #11]

            while( uxWinSize > 0xffffU )
 8013f9a:	e005      	b.n	8013fa8 <prvWinScaleFactor+0x2c>
            {
                /* Divide by two and increase the binary factor by 1. */
                uxWinSize >>= 1;
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	085b      	lsrs	r3, r3, #1
 8013fa0:	60fb      	str	r3, [r7, #12]
                ucFactor++;
 8013fa2:	7afb      	ldrb	r3, [r7, #11]
 8013fa4:	3301      	adds	r3, #1
 8013fa6:	72fb      	strb	r3, [r7, #11]
            while( uxWinSize > 0xffffU )
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013fae:	d2f5      	bcs.n	8013f9c <prvWinScaleFactor+0x20>
            }

            FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %u MSS %u Factor %u\n",
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	f8d3 1118 	ldr.w	r1, [r3, #280]	@ 0x118
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013fbc:	461a      	mov	r2, r3
 8013fbe:	7afb      	ldrb	r3, [r7, #11]
 8013fc0:	4803      	ldr	r0, [pc, #12]	@ (8013fd0 <prvWinScaleFactor+0x54>)
 8013fc2:	f00e fbef 	bl	80227a4 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxRxWinSize,
                                     pxSocket->u.xTCP.usMSS,
                                     ucFactor ) );

            return ucFactor;
 8013fc6:	7afb      	ldrb	r3, [r7, #11]
        }
 8013fc8:	4618      	mov	r0, r3
 8013fca:	3710      	adds	r7, #16
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	bd80      	pop	{r7, pc}
 8013fd0:	08026f40 	.word	0x08026f40

08013fd4 <prvSetSynAckOptions>:
 *
 * @note MSS is the net size of the payload, an is always smaller than MTU.
 */
    UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t * pxSocket,
                                     TCPHeader_t * pxTCPHeader )
    {
 8013fd4:	b580      	push	{r7, lr}
 8013fd6:	b084      	sub	sp, #16
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	6078      	str	r0, [r7, #4]
 8013fdc:	6039      	str	r1, [r7, #0]
        uint16_t usMSS = pxSocket->u.xTCP.usMSS;
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013fe4:	81fb      	strh	r3, [r7, #14]
        UBaseType_t uxOptionsLength;

        /* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */

        pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) tcpTCP_OPT_MSS;
 8013fe6:	683b      	ldr	r3, [r7, #0]
 8013fe8:	2202      	movs	r2, #2
 8013fea:	751a      	strb	r2, [r3, #20]
        pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) tcpTCP_OPT_MSS_LEN;
 8013fec:	683b      	ldr	r3, [r7, #0]
 8013fee:	2204      	movs	r2, #4
 8013ff0:	755a      	strb	r2, [r3, #21]
        pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 8013ff2:	89fb      	ldrh	r3, [r7, #14]
 8013ff4:	0a1b      	lsrs	r3, r3, #8
 8013ff6:	b29b      	uxth	r3, r3
 8013ff8:	b2da      	uxtb	r2, r3
 8013ffa:	683b      	ldr	r3, [r7, #0]
 8013ffc:	759a      	strb	r2, [r3, #22]
        pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffU );
 8013ffe:	89fb      	ldrh	r3, [r7, #14]
 8014000:	b2da      	uxtb	r2, r3
 8014002:	683b      	ldr	r3, [r7, #0]
 8014004:	75da      	strb	r2, [r3, #23]

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 8014006:	6878      	ldr	r0, [r7, #4]
 8014008:	f7ff ffb8 	bl	8013f7c <prvWinScaleFactor>
 801400c:	4603      	mov	r3, r0
 801400e:	461a      	mov	r2, r3
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105

            pxTCPHeader->ucOptdata[ 4 ] = tcpTCP_OPT_NOOP;
 8014016:	683b      	ldr	r3, [r7, #0]
 8014018:	2201      	movs	r2, #1
 801401a:	761a      	strb	r2, [r3, #24]
            pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT );
 801401c:	683b      	ldr	r3, [r7, #0]
 801401e:	2203      	movs	r2, #3
 8014020:	765a      	strb	r2, [r3, #25]
            pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT_LEN );
 8014022:	683b      	ldr	r3, [r7, #0]
 8014024:	2203      	movs	r2, #3
 8014026:	769a      	strb	r2, [r3, #26]
            pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	f893 2105 	ldrb.w	r2, [r3, #261]	@ 0x105
 801402e:	683b      	ldr	r3, [r7, #0]
 8014030:	76da      	strb	r2, [r3, #27]
            uxOptionsLength = 8U;
 8014032:	2308      	movs	r3, #8
 8014034:	60bb      	str	r3, [r7, #8]
        }
        #endif /* if ( ipconfigUSE_TCP_WIN != 0 ) */

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxTCPHeader->ucOptdata[ uxOptionsLength ] = tcpTCP_OPT_NOOP;
 8014036:	683a      	ldr	r2, [r7, #0]
 8014038:	68bb      	ldr	r3, [r7, #8]
 801403a:	4413      	add	r3, r2
 801403c:	3314      	adds	r3, #20
 801403e:	2201      	movs	r2, #1
 8014040:	701a      	strb	r2, [r3, #0]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 1U ] = tcpTCP_OPT_NOOP;
 8014042:	68bb      	ldr	r3, [r7, #8]
 8014044:	3301      	adds	r3, #1
 8014046:	683a      	ldr	r2, [r7, #0]
 8014048:	4413      	add	r3, r2
 801404a:	2201      	movs	r2, #1
 801404c:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 2U ] = tcpTCP_OPT_SACK_P; /* 4: Sack-Permitted Option. */
 801404e:	68bb      	ldr	r3, [r7, #8]
 8014050:	3302      	adds	r3, #2
 8014052:	683a      	ldr	r2, [r7, #0]
 8014054:	4413      	add	r3, r2
 8014056:	2204      	movs	r2, #4
 8014058:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 3U ] = 2U;                /* 2: length of this option. */
 801405a:	68bb      	ldr	r3, [r7, #8]
 801405c:	3303      	adds	r3, #3
 801405e:	683a      	ldr	r2, [r7, #0]
 8014060:	4413      	add	r3, r2
 8014062:	2202      	movs	r2, #2
 8014064:	751a      	strb	r2, [r3, #20]
            uxOptionsLength += 4U;
 8014066:	68bb      	ldr	r3, [r7, #8]
 8014068:	3304      	adds	r3, #4
 801406a:	60bb      	str	r3, [r7, #8]
        }
        #endif /* ipconfigUSE_TCP_WIN == 0 */
        return uxOptionsLength; /* bytes, not words. */
 801406c:	68bb      	ldr	r3, [r7, #8]
    }
 801406e:	4618      	mov	r0, r3
 8014070:	3710      	adds	r7, #16
 8014072:	46bd      	mov	sp, r7
 8014074:	bd80      	pop	{r7, pc}
	...

08014078 <prvTCPBufferResize>:
 */
    NetworkBufferDescriptor_t * prvTCPBufferResize( const FreeRTOS_Socket_t * pxSocket,
                                                    NetworkBufferDescriptor_t * pxNetworkBuffer,
                                                    int32_t lDataLen,
                                                    UBaseType_t uxOptionsLength )
    {
 8014078:	b580      	push	{r7, lr}
 801407a:	b088      	sub	sp, #32
 801407c:	af00      	add	r7, sp, #0
 801407e:	60f8      	str	r0, [r7, #12]
 8014080:	60b9      	str	r1, [r7, #8]
 8014082:	607a      	str	r2, [r7, #4]
 8014084:	603b      	str	r3, [r7, #0]
        NetworkBufferDescriptor_t * pxReturn;
        size_t uxNeeded;
        BaseType_t xResize;

        if( xBufferAllocFixedSize != pdFALSE )
 8014086:	4b38      	ldr	r3, [pc, #224]	@ (8014168 <prvTCPBufferResize+0xf0>)
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	2b00      	cmp	r3, #0
 801408c:	d00b      	beq.n	80140a6 <prvTCPBufferResize+0x2e>
        {
            /* Network buffers are created with a fixed size and can hold the largest
             * MTU. */
            uxNeeded = ( size_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 801408e:	f240 53f2 	movw	r3, #1522	@ 0x5f2
 8014092:	61bb      	str	r3, [r7, #24]

            /* and therefore, the buffer won't be too small.
             * Only ask for a new network buffer in case none was supplied. */
            if( pxNetworkBuffer == NULL )
 8014094:	68bb      	ldr	r3, [r7, #8]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d102      	bne.n	80140a0 <prvTCPBufferResize+0x28>
            {
                xResize = pdTRUE;
 801409a:	2301      	movs	r3, #1
 801409c:	617b      	str	r3, [r7, #20]
 801409e:	e020      	b.n	80140e2 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 80140a0:	2300      	movs	r3, #0
 80140a2:	617b      	str	r3, [r7, #20]
 80140a4:	e01d      	b.n	80140e2 <prvTCPBufferResize+0x6a>
        }
        else
        {
            /* Network buffers are created with a variable size. See if it must
             * grow. */
            uxNeeded = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80140a6:	68f8      	ldr	r0, [r7, #12]
 80140a8:	f7f6 f9c0 	bl	800a42c <uxIPHeaderSizeSocket>
 80140ac:	4602      	mov	r2, r0
 80140ae:	683b      	ldr	r3, [r7, #0]
 80140b0:	4413      	add	r3, r2
 80140b2:	3322      	adds	r3, #34	@ 0x22
 80140b4:	61bb      	str	r3, [r7, #24]
            uxNeeded += ( size_t ) lDataLen;
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	69ba      	ldr	r2, [r7, #24]
 80140ba:	4413      	add	r3, r2
 80140bc:	61bb      	str	r3, [r7, #24]

            if( uxNeeded < sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) )
 80140be:	69bb      	ldr	r3, [r7, #24]
 80140c0:	2b59      	cmp	r3, #89	@ 0x59
 80140c2:	d801      	bhi.n	80140c8 <prvTCPBufferResize+0x50>
            {
                uxNeeded = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 80140c4:	235a      	movs	r3, #90	@ 0x5a
 80140c6:	61bb      	str	r3, [r7, #24]
            }

            /* In case we were called from a TCP timer event, a buffer must be
             *  created.  Otherwise, test 'xDataLength' of the provided buffer. */
            if( ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < uxNeeded ) )
 80140c8:	68bb      	ldr	r3, [r7, #8]
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d004      	beq.n	80140d8 <prvTCPBufferResize+0x60>
 80140ce:	68bb      	ldr	r3, [r7, #8]
 80140d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80140d2:	69ba      	ldr	r2, [r7, #24]
 80140d4:	429a      	cmp	r2, r3
 80140d6:	d902      	bls.n	80140de <prvTCPBufferResize+0x66>
            {
                xResize = pdTRUE;
 80140d8:	2301      	movs	r3, #1
 80140da:	617b      	str	r3, [r7, #20]
 80140dc:	e001      	b.n	80140e2 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 80140de:	2300      	movs	r3, #0
 80140e0:	617b      	str	r3, [r7, #20]
            }
        }

        if( xResize != pdFALSE )
 80140e2:	697b      	ldr	r3, [r7, #20]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d023      	beq.n	8014130 <prvTCPBufferResize+0xb8>
        {
            /* The caller didn't provide a network buffer or the provided buffer is
             * too small.  As we must send-out a data packet, a buffer will be created
             * here. */
            pxReturn = pxGetNetworkBufferWithDescriptor( uxNeeded, 0U );
 80140e8:	2100      	movs	r1, #0
 80140ea:	69b8      	ldr	r0, [r7, #24]
 80140ec:	f003 fc4a 	bl	8017984 <pxGetNetworkBufferWithDescriptor>
 80140f0:	61f8      	str	r0, [r7, #28]

            if( pxReturn != NULL )
 80140f2:	69fb      	ldr	r3, [r7, #28]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d031      	beq.n	801415c <prvTCPBufferResize+0xe4>
            {
                /* Set the actual packet size, in case the returned buffer is larger. */
                pxReturn->xDataLength = uxNeeded;
 80140f8:	69fb      	ldr	r3, [r7, #28]
 80140fa:	69ba      	ldr	r2, [r7, #24]
 80140fc:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Copy the existing data to the new created buffer. */
                if( pxNetworkBuffer != NULL )
 80140fe:	68bb      	ldr	r3, [r7, #8]
 8014100:	2b00      	cmp	r3, #0
 8014102:	d00c      	beq.n	801411e <prvTCPBufferResize+0xa6>
                {
                    /* Either from the previous buffer... */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 8014104:	69fb      	ldr	r3, [r7, #28]
 8014106:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8014108:	68bb      	ldr	r3, [r7, #8]
 801410a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801410c:	68bb      	ldr	r3, [r7, #8]
 801410e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014110:	461a      	mov	r2, r3
 8014112:	f00e fd63 	bl	8022bdc <memcpy>

                    /* ...and release it. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8014116:	68b8      	ldr	r0, [r7, #8]
 8014118:	f003 fc9c 	bl	8017a54 <vReleaseNetworkBufferAndDescriptor>
 801411c:	e01e      	b.n	801415c <prvTCPBufferResize+0xe4>
                }
                else
                {
                    /* Or from the socket field 'xTCP.xPacket'. */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 801411e:	69fb      	ldr	r3, [r7, #28]
 8014120:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	33aa      	adds	r3, #170	@ 0xaa
 8014126:	225a      	movs	r2, #90	@ 0x5a
 8014128:	4619      	mov	r1, r3
 801412a:	f00e fd57 	bl	8022bdc <memcpy>
 801412e:	e015      	b.n	801415c <prvTCPBufferResize+0xe4>
            }
        }
        else
        {
            /* xResize is false, the network buffer provided was big enough. */
            configASSERT( pxNetworkBuffer != NULL ); /* LCOV_EXCL_BR_LINE this branch will not be covered, since it would never be NULL. to tell lint: when xResize is false, pxNetworkBuffer is not NULL. */
 8014130:	68bb      	ldr	r3, [r7, #8]
 8014132:	2b00      	cmp	r3, #0
 8014134:	d104      	bne.n	8014140 <prvTCPBufferResize+0xc8>
 8014136:	f240 21ca 	movw	r1, #714	@ 0x2ca
 801413a:	480c      	ldr	r0, [pc, #48]	@ (801416c <prvTCPBufferResize+0xf4>)
 801413c:	f7ed fc64 	bl	8001a08 <vAssertCalled>
            pxReturn = pxNetworkBuffer;
 8014140:	68bb      	ldr	r3, [r7, #8]
 8014142:	61fb      	str	r3, [r7, #28]

            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 8014144:	68f8      	ldr	r0, [r7, #12]
 8014146:	f7f6 f971 	bl	800a42c <uxIPHeaderSizeSocket>
 801414a:	4602      	mov	r2, r0
 801414c:	683b      	ldr	r3, [r7, #0]
 801414e:	441a      	add	r2, r3
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	4413      	add	r3, r2
 8014154:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8014158:	68bb      	ldr	r3, [r7, #8]
 801415a:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        return pxReturn;
 801415c:	69fb      	ldr	r3, [r7, #28]
    }
 801415e:	4618      	mov	r0, r3
 8014160:	3720      	adds	r7, #32
 8014162:	46bd      	mov	sp, r7
 8014164:	bd80      	pop	{r7, pc}
 8014166:	bf00      	nop
 8014168:	08028018 	.word	0x08028018
 801416c:	08026eac 	.word	0x08026eac

08014170 <prvTCPReturn_SetEndPoint>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_SetEndPoint( const FreeRTOS_Socket_t * pxSocket,
                                   NetworkBufferDescriptor_t * pxNetworkBuffer,
                                   size_t uxIPHeaderSize )
    {
 8014170:	b580      	push	{r7, lr}
 8014172:	b086      	sub	sp, #24
 8014174:	af00      	add	r7, sp, #0
 8014176:	60f8      	str	r0, [r7, #12]
 8014178:	60b9      	str	r1, [r7, #8]
 801417a:	607a      	str	r2, [r7, #4]
        #if ( ipconfigUSE_IPv4 != 0 )
            const IPHeader_t * pxIPHeader = NULL;
 801417c:	2300      	movs	r3, #0
 801417e:	617b      	str	r3, [r7, #20]
        #endif
        #if ( ipconfigUSE_IPv6 != 0 )
            const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
 8014180:	2300      	movs	r3, #0
 8014182:	613b      	str	r3, [r7, #16]
        #endif

        if( ( pxSocket != NULL ) && ( pxSocket->pxEndPoint != NULL ) )
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d008      	beq.n	801419c <prvTCPReturn_SetEndPoint+0x2c>
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801418e:	2b00      	cmp	r3, #0
 8014190:	d004      	beq.n	801419c <prvTCPReturn_SetEndPoint+0x2c>
        {
            pxNetworkBuffer->pxEndPoint = pxSocket->pxEndPoint;
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014196:	68bb      	ldr	r3, [r7, #8]
 8014198:	631a      	str	r2, [r3, #48]	@ 0x30
                FreeRTOS_printf( ( "prvTCPReturnPacket: packet's end-point %02x-%02x\n",
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 4 ],
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 5 ] ) );
            }
        }
    }
 801419a:	e078      	b.n	801428e <prvTCPReturn_SetEndPoint+0x11e>
            FreeRTOS_printf( ( "prvTCPReturnPacket: No pxEndPoint yet?\n" ) );
 801419c:	483e      	ldr	r0, [pc, #248]	@ (8014298 <prvTCPReturn_SetEndPoint+0x128>)
 801419e:	f00e fb01 	bl	80227a4 <lUDPLoggingPrintf>
            switch( uxIPHeaderSize )
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	2b14      	cmp	r3, #20
 80141a6:	d003      	beq.n	80141b0 <prvTCPReturn_SetEndPoint+0x40>
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	2b28      	cmp	r3, #40	@ 0x28
 80141ac:	d03d      	beq.n	801422a <prvTCPReturn_SetEndPoint+0xba>
 80141ae:	e056      	b.n	801425e <prvTCPReturn_SetEndPoint+0xee>
                        pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80141b0:	68bb      	ldr	r3, [r7, #8]
 80141b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80141b4:	330e      	adds	r3, #14
 80141b6:	617b      	str	r3, [r7, #20]
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPHeader->ulDestinationIPAddress, 8 );
 80141b8:	697b      	ldr	r3, [r7, #20]
 80141ba:	691b      	ldr	r3, [r3, #16]
 80141bc:	2108      	movs	r1, #8
 80141be:	4618      	mov	r0, r3
 80141c0:	f7f9 fd8a 	bl	800dcd8 <FreeRTOS_FindEndPointOnNetMask>
 80141c4:	4602      	mov	r2, r0
 80141c6:	68bb      	ldr	r3, [r7, #8]
 80141c8:	631a      	str	r2, [r3, #48]	@ 0x30
                        if( pxNetworkBuffer->pxEndPoint == NULL )
 80141ca:	68bb      	ldr	r3, [r7, #8]
 80141cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d149      	bne.n	8014266 <prvTCPReturn_SetEndPoint+0xf6>
                            FreeRTOS_printf( ( "prvTCPReturnPacket: no such end-point %xip => %xip\n",
 80141d2:	697b      	ldr	r3, [r7, #20]
 80141d4:	68db      	ldr	r3, [r3, #12]
 80141d6:	061a      	lsls	r2, r3, #24
 80141d8:	697b      	ldr	r3, [r7, #20]
 80141da:	68db      	ldr	r3, [r3, #12]
 80141dc:	021b      	lsls	r3, r3, #8
 80141de:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80141e2:	431a      	orrs	r2, r3
 80141e4:	697b      	ldr	r3, [r7, #20]
 80141e6:	68db      	ldr	r3, [r3, #12]
 80141e8:	0a1b      	lsrs	r3, r3, #8
 80141ea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80141ee:	431a      	orrs	r2, r3
 80141f0:	697b      	ldr	r3, [r7, #20]
 80141f2:	68db      	ldr	r3, [r3, #12]
 80141f4:	0e1b      	lsrs	r3, r3, #24
 80141f6:	ea42 0103 	orr.w	r1, r2, r3
 80141fa:	697b      	ldr	r3, [r7, #20]
 80141fc:	691b      	ldr	r3, [r3, #16]
 80141fe:	061a      	lsls	r2, r3, #24
 8014200:	697b      	ldr	r3, [r7, #20]
 8014202:	691b      	ldr	r3, [r3, #16]
 8014204:	021b      	lsls	r3, r3, #8
 8014206:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801420a:	431a      	orrs	r2, r3
 801420c:	697b      	ldr	r3, [r7, #20]
 801420e:	691b      	ldr	r3, [r3, #16]
 8014210:	0a1b      	lsrs	r3, r3, #8
 8014212:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014216:	431a      	orrs	r2, r3
 8014218:	697b      	ldr	r3, [r7, #20]
 801421a:	691b      	ldr	r3, [r3, #16]
 801421c:	0e1b      	lsrs	r3, r3, #24
 801421e:	4313      	orrs	r3, r2
 8014220:	461a      	mov	r2, r3
 8014222:	481e      	ldr	r0, [pc, #120]	@ (801429c <prvTCPReturn_SetEndPoint+0x12c>)
 8014224:	f00e fabe 	bl	80227a4 <lUDPLoggingPrintf>
                        break;
 8014228:	e01d      	b.n	8014266 <prvTCPReturn_SetEndPoint+0xf6>
                        pxIPHeader_IPv6 = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 801422a:	68bb      	ldr	r3, [r7, #8]
 801422c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801422e:	330e      	adds	r3, #14
 8014230:	613b      	str	r3, [r7, #16]
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv6( &( pxIPHeader_IPv6->xDestinationAddress ) );
 8014232:	693b      	ldr	r3, [r7, #16]
 8014234:	3318      	adds	r3, #24
 8014236:	4618      	mov	r0, r3
 8014238:	f7f9 fd08 	bl	800dc4c <FreeRTOS_FindEndPointOnIP_IPv6>
 801423c:	4602      	mov	r2, r0
 801423e:	68bb      	ldr	r3, [r7, #8]
 8014240:	631a      	str	r2, [r3, #48]	@ 0x30
                        if( pxNetworkBuffer->pxEndPoint == NULL )
 8014242:	68bb      	ldr	r3, [r7, #8]
 8014244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014246:	2b00      	cmp	r3, #0
 8014248:	d10f      	bne.n	801426a <prvTCPReturn_SetEndPoint+0xfa>
                            FreeRTOS_printf( ( "prvTCPReturnPacket: no such end-point %pip => %pip\n",
 801424a:	693b      	ldr	r3, [r7, #16]
 801424c:	f103 0108 	add.w	r1, r3, #8
 8014250:	693b      	ldr	r3, [r7, #16]
 8014252:	3318      	adds	r3, #24
 8014254:	461a      	mov	r2, r3
 8014256:	4812      	ldr	r0, [pc, #72]	@ (80142a0 <prvTCPReturn_SetEndPoint+0x130>)
 8014258:	f00e faa4 	bl	80227a4 <lUDPLoggingPrintf>
                        break;
 801425c:	e005      	b.n	801426a <prvTCPReturn_SetEndPoint+0xfa>
                    pxNetworkBuffer->pxEndPoint = NULL;
 801425e:	68bb      	ldr	r3, [r7, #8]
 8014260:	2200      	movs	r2, #0
 8014262:	631a      	str	r2, [r3, #48]	@ 0x30
                    break;
 8014264:	e002      	b.n	801426c <prvTCPReturn_SetEndPoint+0xfc>
                        break;
 8014266:	bf00      	nop
 8014268:	e000      	b.n	801426c <prvTCPReturn_SetEndPoint+0xfc>
                        break;
 801426a:	bf00      	nop
            if( pxNetworkBuffer->pxEndPoint != NULL )
 801426c:	68bb      	ldr	r3, [r7, #8]
 801426e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014270:	2b00      	cmp	r3, #0
 8014272:	d00c      	beq.n	801428e <prvTCPReturn_SetEndPoint+0x11e>
                FreeRTOS_printf( ( "prvTCPReturnPacket: packet's end-point %02x-%02x\n",
 8014274:	68bb      	ldr	r3, [r7, #8]
 8014276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014278:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 801427c:	4619      	mov	r1, r3
 801427e:	68bb      	ldr	r3, [r7, #8]
 8014280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014282:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 8014286:	461a      	mov	r2, r3
 8014288:	4806      	ldr	r0, [pc, #24]	@ (80142a4 <prvTCPReturn_SetEndPoint+0x134>)
 801428a:	f00e fa8b 	bl	80227a4 <lUDPLoggingPrintf>
    }
 801428e:	bf00      	nop
 8014290:	3718      	adds	r7, #24
 8014292:	46bd      	mov	sp, r7
 8014294:	bd80      	pop	{r7, pc}
 8014296:	bf00      	nop
 8014298:	08026f74 	.word	0x08026f74
 801429c:	08026f9c 	.word	0x08026f9c
 80142a0:	08026fd0 	.word	0x08026fd0
 80142a4:	08027004 	.word	0x08027004

080142a8 <prvTCPPrepareSend>:
 *         is returned in case of any error.
 */
    int32_t prvTCPPrepareSend( FreeRTOS_Socket_t * pxSocket,
                               NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                               UBaseType_t uxOptionsLength )
    {
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b096      	sub	sp, #88	@ 0x58
 80142ac:	af02      	add	r7, sp, #8
 80142ae:	60f8      	str	r0, [r7, #12]
 80142b0:	60b9      	str	r1, [r7, #8]
 80142b2:	607a      	str	r2, [r7, #4]
        size_t uxOffset;
        uint32_t ulDataGot, ulDistance;
        TCPWindow_t * pxTCPWindow;
        NetworkBufferDescriptor_t * pxNewBuffer;
        int32_t lStreamPos;
        UBaseType_t uxIntermediateResult = 0;
 80142b4:	2300      	movs	r3, #0
 80142b6:	63fb      	str	r3, [r7, #60]	@ 0x3c

        if( ( *ppxNetworkBuffer ) != NULL )
 80142b8:	68bb      	ldr	r3, [r7, #8]
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d004      	beq.n	80142ca <prvTCPPrepareSend+0x22>
        {
            /* A network buffer descriptor was already supplied */
            pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 80142c0:	68bb      	ldr	r3, [r7, #8]
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80142c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80142c8:	e002      	b.n	80142d0 <prvTCPPrepareSend+0x28>
        }
        else
        {
            /* For now let it point to the last packet header */
            pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	33aa      	adds	r3, #170	@ 0xaa
 80142ce:	64bb      	str	r3, [r7, #72]	@ 0x48
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 80142d0:	68f8      	ldr	r0, [r7, #12]
 80142d2:	f7f6 f8ab 	bl	800a42c <uxIPHeaderSizeSocket>
 80142d6:	4603      	mov	r3, r0
 80142d8:	330e      	adds	r3, #14
 80142da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80142dc:	4413      	add	r3, r2
 80142de:	647b      	str	r3, [r7, #68]	@ 0x44
        pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80142e6:	63bb      	str	r3, [r7, #56]	@ 0x38
        lDataLen = 0;
 80142e8:	2300      	movs	r3, #0
 80142ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
        lStreamPos = 0;
 80142ec:	2300      	movs	r3, #0
 80142ee:	613b      	str	r3, [r7, #16]
        pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_ACK;
 80142f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80142f2:	7b5b      	ldrb	r3, [r3, #13]
 80142f4:	f043 0310 	orr.w	r3, r3, #16
 80142f8:	b2da      	uxtb	r2, r3
 80142fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80142fc:	735a      	strb	r2, [r3, #13]

        if( pxSocket->u.xTCP.txStream != NULL )
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014304:	2b00      	cmp	r3, #0
 8014306:	f000 80a5 	beq.w	8014454 <prvTCPPrepareSend+0x1ac>
        {
            /* ulTCPWindowTxGet will return the amount of data which may be sent
             * along with the position in the txStream.
             * Why check for MSS > 1 ?
             * Because some TCP-stacks (like uIP) use it for flow-control. */
            if( pxSocket->u.xTCP.usMSS > 1U )
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8014310:	2b01      	cmp	r3, #1
 8014312:	d90a      	bls.n	801432a <prvTCPPrepareSend+0x82>
            {
                lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 801431a:	f107 0210 	add.w	r2, r7, #16
 801431e:	4619      	mov	r1, r3
 8014320:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014322:	f002 fb13 	bl	801694c <ulTCPWindowTxGet>
 8014326:	4603      	mov	r3, r0
 8014328:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            if( lDataLen > 0 )
 801432a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801432c:	2b00      	cmp	r3, #0
 801432e:	f340 8091 	ble.w	8014454 <prvTCPPrepareSend+0x1ac>
            {
                /* Check if the current network buffer is big enough, if not,
                 * resize it. */
                pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 8014332:	68bb      	ldr	r3, [r7, #8]
 8014334:	6819      	ldr	r1, [r3, #0]
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801433a:	68f8      	ldr	r0, [r7, #12]
 801433c:	f7ff fe9c 	bl	8014078 <prvTCPBufferResize>
 8014340:	6378      	str	r0, [r7, #52]	@ 0x34

                if( pxNewBuffer != NULL )
 8014342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014344:	2b00      	cmp	r3, #0
 8014346:	f000 8082 	beq.w	801444e <prvTCPPrepareSend+0x1a6>
                {
                    *ppxNetworkBuffer = pxNewBuffer;
 801434a:	68bb      	ldr	r3, [r7, #8]
 801434c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801434e:	601a      	str	r2, [r3, #0]
                    pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 8014350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014354:	64bb      	str	r3, [r7, #72]	@ 0x48
                     * access to the fields. */

                    /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8014356:	68f8      	ldr	r0, [r7, #12]
 8014358:	f7f6 f868 	bl	800a42c <uxIPHeaderSizeSocket>
 801435c:	4603      	mov	r3, r0
 801435e:	330e      	adds	r3, #14
 8014360:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014362:	4413      	add	r3, r2
 8014364:	647b      	str	r3, [r7, #68]	@ 0x44

                    pucSendData = &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ] );
 8014366:	68f8      	ldr	r0, [r7, #12]
 8014368:	f7f6 f860 	bl	800a42c <uxIPHeaderSizeSocket>
 801436c:	4602      	mov	r2, r0
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	4413      	add	r3, r2
 8014372:	3322      	adds	r3, #34	@ 0x22
 8014374:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014376:	4413      	add	r3, r2
 8014378:	633b      	str	r3, [r7, #48]	@ 0x30

                    /* Translate the position in txStream to an offset from the tail
                     * marker. */
                    uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8014380:	68fb      	ldr	r3, [r7, #12]
 8014382:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	693a      	ldr	r2, [r7, #16]
 801438a:	4619      	mov	r1, r3
 801438c:	f7fc fef9 	bl	8011182 <uxStreamBufferDistance>
 8014390:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* Here data is copied from the txStream in 'peek' mode.  Only
                     * when the packets are acked, the tail marker will be updated. */
                    ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8014398:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801439a:	2201      	movs	r2, #1
 801439c:	9200      	str	r2, [sp, #0]
 801439e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80143a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80143a2:	f7fd f84c 	bl	801143e <uxStreamBufferGet>
 80143a6:	62b8      	str	r0, [r7, #40]	@ 0x28

                    #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    {
                        if( ulDataGot != ( uint32_t ) lDataLen )
 80143a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80143aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80143ac:	429a      	cmp	r2, r3
 80143ae:	d007      	beq.n	80143c0 <prvTCPPrepareSend+0x118>
                        {
                            FreeRTOS_debug_printf( ( "uxStreamBufferGet: pos %d offs %u only %u != %d\n",
 80143b0:	6939      	ldr	r1, [r7, #16]
 80143b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80143b4:	9300      	str	r3, [sp, #0]
 80143b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80143ba:	4898      	ldr	r0, [pc, #608]	@ (801461c <prvTCPPrepareSend+0x374>)
 80143bc:	f00e f9f2 	bl	80227a4 <lUDPLoggingPrintf>
                    }
                    #endif

                    /* If the owner of the socket requests a closure, add the FIN
                     * flag to the last packet. */
                    if( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED )
 80143c0:	68fb      	ldr	r3, [r7, #12]
 80143c2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80143c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80143ca:	b2db      	uxtb	r3, r3
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d041      	beq.n	8014454 <prvTCPPrepareSend+0x1ac>
                    {
                        ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 80143d6:	693b      	ldr	r3, [r7, #16]
 80143d8:	4619      	mov	r1, r3
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80143e0:	689b      	ldr	r3, [r3, #8]
 80143e2:	461a      	mov	r2, r3
 80143e4:	f7fc fecd 	bl	8011182 <uxStreamBufferDistance>
 80143e8:	6278      	str	r0, [r7, #36]	@ 0x24

                        if( ulDistance == ulDataGot )
 80143ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80143ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143ee:	429a      	cmp	r2, r3
 80143f0:	d130      	bne.n	8014454 <prvTCPPrepareSend+0x1ac>
                        {
                            #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                            {
                                /* the order of volatile accesses is undefined
                                 *  so such workaround */
                                size_t uxHead = pxSocket->u.xTCP.txStream->uxHead;
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80143f8:	689b      	ldr	r3, [r3, #8]
 80143fa:	623b      	str	r3, [r7, #32]
                                size_t uxMid = pxSocket->u.xTCP.txStream->uxMid;
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014402:	685b      	ldr	r3, [r3, #4]
 8014404:	61fb      	str	r3, [r7, #28]
                                size_t uxTail = pxSocket->u.xTCP.txStream->uxTail;
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	61bb      	str	r3, [r7, #24]

                                FreeRTOS_debug_printf( ( "CheckClose %u <= %u (%u <= %u <= %u)\n",
 8014410:	6a3b      	ldr	r3, [r7, #32]
 8014412:	9301      	str	r3, [sp, #4]
 8014414:	69fb      	ldr	r3, [r7, #28]
 8014416:	9300      	str	r3, [sp, #0]
 8014418:	69bb      	ldr	r3, [r7, #24]
 801441a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801441c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801441e:	4880      	ldr	r0, [pc, #512]	@ (8014620 <prvTCPPrepareSend+0x378>)
 8014420:	f00e f9c0 	bl	80227a4 <lUDPLoggingPrintf>
                            #endif /* if ( ipconfigHAS_DEBUG_PRINTF == 1 ) */

                            /* Although the socket sends a FIN, it will stay in
                             * ESTABLISHED until all current data has been received or
                             * delivered. */
                            pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 8014424:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014426:	7b5b      	ldrb	r3, [r3, #13]
 8014428:	f043 0301 	orr.w	r3, r3, #1
 801442c:	b2da      	uxtb	r2, r3
 801442e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014430:	735a      	strb	r2, [r3, #13]
                            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 8014432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014436:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014438:	441a      	add	r2, r3
 801443a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801443c:	625a      	str	r2, [r3, #36]	@ 0x24
                            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 801443e:	68fa      	ldr	r2, [r7, #12]
 8014440:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8014444:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014448:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 801444c:	e002      	b.n	8014454 <prvTCPPrepareSend+0x1ac>
                        }
                    }
                }
                else
                {
                    lDataLen = -1;
 801444e:	f04f 33ff 	mov.w	r3, #4294967295
 8014452:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }
            }
        }

        if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) )
 8014454:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014456:	2b00      	cmp	r3, #0
 8014458:	f2c0 8099 	blt.w	801458e <prvTCPPrepareSend+0x2e6>
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8014462:	2b05      	cmp	r3, #5
 8014464:	f040 8093 	bne.w	801458e <prvTCPPrepareSend+0x2e6>
        {
            /* See if the socket owner wants to shutdown this connection. */
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801446e:	f003 0320 	and.w	r3, r3, #32
 8014472:	b2db      	uxtb	r3, r3
 8014474:	2b00      	cmp	r3, #0
 8014476:	d029      	beq.n	80144cc <prvTCPPrepareSend+0x224>
                ( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 8014478:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801447a:	f002 f8e7 	bl	801664c <xTCPWindowTxDone>
 801447e:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 8014480:	2b00      	cmp	r3, #0
 8014482:	d023      	beq.n	80144cc <prvTCPPrepareSend+0x224>
            {
                pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 8014484:	68fa      	ldr	r2, [r7, #12]
 8014486:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801448a:	f36f 1345 	bfc	r3, #5, #1
 801448e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 8014492:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014494:	7b5b      	ldrb	r3, [r3, #13]
 8014496:	f043 0301 	orr.w	r3, r3, #1
 801449a:	b2da      	uxtb	r2, r3
 801449c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801449e:	735a      	strb	r2, [r3, #13]
                pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 80144a0:	68fa      	ldr	r2, [r7, #12]
 80144a2:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80144a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80144aa:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 80144ae:	68fa      	ldr	r2, [r7, #12]
 80144b0:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80144b4:	f043 0301 	orr.w	r3, r3, #1
 80144b8:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 80144bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144be:	6a1a      	ldr	r2, [r3, #32]
 80144c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144c2:	625a      	str	r2, [r3, #36]	@ 0x24
                vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 80144c4:	2106      	movs	r1, #6
 80144c6:	68f8      	ldr	r0, [r7, #12]
 80144c8:	f7fd f960 	bl	801178c <vTCPStateChange>
            }

            #if ( ipconfigTCP_KEEP_ALIVE != 0 )
            {
                if( pxSocket->u.xTCP.ucKeepRepCount > 3U ) /*_RB_ Magic number. */
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80144d2:	2b03      	cmp	r3, #3
 80144d4:	d90f      	bls.n	80144f6 <prvTCPPrepareSend+0x24e>
                {
                    FreeRTOS_debug_printf( ( "keep-alive: giving up %xip:%u\n",
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80144da:	68fb      	ldr	r3, [r7, #12]
 80144dc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80144e0:	461a      	mov	r2, r3
 80144e2:	4850      	ldr	r0, [pc, #320]	@ (8014624 <prvTCPPrepareSend+0x37c>)
 80144e4:	f00e f95e 	bl	80227a4 <lUDPLoggingPrintf>
                                             ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                             pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 80144e8:	2108      	movs	r1, #8
 80144ea:	68f8      	ldr	r0, [r7, #12]
 80144ec:	f7fd f94e 	bl	801178c <vTCPStateChange>
                    lDataLen = -1;
 80144f0:	f04f 33ff 	mov.w	r3, #4294967295
 80144f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }

                if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 80144f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d148      	bne.n	801458e <prvTCPPrepareSend+0x2e6>
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8014502:	f003 0301 	and.w	r3, r3, #1
 8014506:	b2db      	uxtb	r3, r3
 8014508:	2b00      	cmp	r3, #0
 801450a:	d140      	bne.n	801458e <prvTCPPrepareSend+0x2e6>
                {
                    /* If there is no data to be sent, and no window-update message,
                     * we might want to send a keep-alive message. */
                    TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 801450c:	f7f0 fbe0 	bl	8004cd0 <xTaskGetTickCount>
 8014510:	4602      	mov	r2, r0
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014518:	1ad3      	subs	r3, r2, r3
 801451a:	617b      	str	r3, [r7, #20]
                    TickType_t xMax;
                    xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * ( TickType_t ) configTICK_RATE_HZ );
 801451c:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8014520:	643b      	str	r3, [r7, #64]	@ 0x40

                    if( pxSocket->u.xTCP.ucKeepRepCount != 0U )
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014528:	2b00      	cmp	r3, #0
 801452a:	d002      	beq.n	8014532 <prvTCPPrepareSend+0x28a>
                    {
                        xMax = 3U * configTICK_RATE_HZ;
 801452c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8014530:	643b      	str	r3, [r7, #64]	@ 0x40
                    }

                    if( xAge > xMax )
 8014532:	697a      	ldr	r2, [r7, #20]
 8014534:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014536:	429a      	cmp	r2, r3
 8014538:	d929      	bls.n	801458e <prvTCPPrepareSend+0x2e6>
                    {
                        pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 801453a:	f7f0 fbc9 	bl	8004cd0 <xTaskGetTickCount>
 801453e:	4602      	mov	r2, r0
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

                        if( xTCPWindowLoggingLevel != 0 )
 8014546:	4b38      	ldr	r3, [pc, #224]	@ (8014628 <prvTCPPrepareSend+0x380>)
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d00b      	beq.n	8014566 <prvTCPPrepareSend+0x2be>
                        {
                            FreeRTOS_debug_printf( ( "keep-alive: %xip:%u count %u\n",
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014558:	461a      	mov	r2, r3
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014560:	4832      	ldr	r0, [pc, #200]	@ (801462c <prvTCPPrepareSend+0x384>)
 8014562:	f00e f91f 	bl	80227a4 <lUDPLoggingPrintf>
                                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                     pxSocket->u.xTCP.usRemotePort,
                                                     pxSocket->u.xTCP.ucKeepRepCount ) );
                        }

                        pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 8014566:	68fa      	ldr	r2, [r7, #12]
 8014568:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801456c:	f043 0302 	orr.w	r3, r3, #2
 8014570:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                        pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500U ) );
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 801457a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                        pxSocket->u.xTCP.ucKeepRepCount++;
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014584:	3301      	adds	r3, #1
 8014586:	b2da      	uxtb	r2, r3
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
                }
            }
            #endif /* ipconfigTCP_KEEP_ALIVE */
        }

        if( lDataLen >= 0 )
 801458e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014590:	2b00      	cmp	r3, #0
 8014592:	db3e      	blt.n	8014612 <prvTCPPrepareSend+0x36a>
        {
            /* Anything to send, a change of the advertised window size, or maybe send a
             * keep-alive message? */
            if( ( lDataLen > 0 ) ||
 8014594:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014596:	2b00      	cmp	r3, #0
 8014598:	dc0f      	bgt.n	80145ba <prvTCPPrepareSend+0x312>
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80145a0:	f003 0301 	and.w	r3, r3, #1
 80145a4:	b2db      	uxtb	r3, r3
            if( ( lDataLen > 0 ) ||
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d107      	bne.n	80145ba <prvTCPPrepareSend+0x312>
                ( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80145b0:	f003 0302 	and.w	r3, r3, #2
 80145b4:	b2db      	uxtb	r3, r3
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d02b      	beq.n	8014612 <prvTCPPrepareSend+0x36a>
            {
                pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 80145ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80145bc:	7b5b      	ldrb	r3, [r3, #13]
 80145be:	f023 0308 	bic.w	r3, r3, #8
 80145c2:	b2da      	uxtb	r2, r3
 80145c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80145c6:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	b2db      	uxtb	r3, r3
 80145cc:	3314      	adds	r3, #20
 80145ce:	b2db      	uxtb	r3, r3
 80145d0:	009b      	lsls	r3, r3, #2
 80145d2:	b2da      	uxtb	r2, r3
 80145d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80145d6:	731a      	strb	r2, [r3, #12]

                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 80145d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80145da:	7b5b      	ldrb	r3, [r3, #13]
 80145dc:	f043 0310 	orr.w	r3, r3, #16
 80145e0:	b2da      	uxtb	r2, r3
 80145e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80145e4:	735a      	strb	r2, [r3, #13]

                if( lDataLen != 0L )
 80145e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d006      	beq.n	80145fa <prvTCPPrepareSend+0x352>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_PSH;
 80145ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80145ee:	7b5b      	ldrb	r3, [r3, #13]
 80145f0:	f043 0308 	orr.w	r3, r3, #8
 80145f4:	b2da      	uxtb	r2, r3
 80145f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80145f8:	735a      	strb	r2, [r3, #13]
                }

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80145fa:	68f8      	ldr	r0, [r7, #12]
 80145fc:	f7f5 ff16 	bl	800a42c <uxIPHeaderSizeSocket>
 8014600:	4602      	mov	r2, r0
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	4413      	add	r3, r2
 8014606:	3314      	adds	r3, #20
 8014608:	63fb      	str	r3, [r7, #60]	@ 0x3c
                lDataLen += ( int32_t ) uxIntermediateResult;
 801460a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801460c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801460e:	4413      	add	r3, r2
 8014610:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

        return lDataLen;
 8014612:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 8014614:	4618      	mov	r0, r3
 8014616:	3750      	adds	r7, #80	@ 0x50
 8014618:	46bd      	mov	sp, r7
 801461a:	bd80      	pop	{r7, pc}
 801461c:	08027038 	.word	0x08027038
 8014620:	0802706c 	.word	0x0802706c
 8014624:	08027094 	.word	0x08027094
 8014628:	2000164c 	.word	0x2000164c
 801462c:	080270b4 	.word	0x080270b4

08014630 <prvTCPAddTxData>:
 *        this data to the windowing system to it can be transmitted.
 *
 * @param[in] pxSocket The socket owning the connection.
 */
    void prvTCPAddTxData( FreeRTOS_Socket_t * pxSocket )
    {
 8014630:	b580      	push	{r7, lr}
 8014632:	b084      	sub	sp, #16
 8014634:	af00      	add	r7, sp, #0
 8014636:	6078      	str	r0, [r7, #4]
         * the sliding window.
         *
         * uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It
         * contains new Tx data which has not been passed to the sliding window yet.
         * The oldest data not-yet-confirmed can be found at rxTail. */
        lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801463e:	4618      	mov	r0, r3
 8014640:	f7fc fdf0 	bl	8011224 <uxStreamBufferMidSpace>
 8014644:	4603      	mov	r3, r0
 8014646:	60fb      	str	r3, [r7, #12]

        if( lLength > 0 )
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	2b00      	cmp	r3, #0
 801464c:	dd1a      	ble.n	8014684 <prvTCPAddTxData+0x54>
             * window manager, so it can start transmitting them.
             *
             * Hand over the new data to the sliding window handler.  It will be
             * split-up in chunks of 1460 bytes each (or less, depending on
             * ipconfigTCP_MSS). */
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8014654:	68f9      	ldr	r1, [r7, #12]
                                      ( uint32_t ) lLength,
                                      ( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801465c:	685b      	ldr	r3, [r3, #4]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 801465e:	461a      	mov	r2, r3
                                      ( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014666:	691b      	ldr	r3, [r3, #16]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 8014668:	f001 ff5c 	bl	8016524 <lTCPWindowTxAdd>
 801466c:	60b8      	str	r0, [r7, #8]

            /* Move the rxMid pointer forward up to rxHead. */
            if( lCount > 0 )
 801466e:	68bb      	ldr	r3, [r7, #8]
 8014670:	2b00      	cmp	r3, #0
 8014672:	dd07      	ble.n	8014684 <prvTCPAddTxData+0x54>
            {
                vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801467a:	68ba      	ldr	r2, [r7, #8]
 801467c:	4611      	mov	r1, r2
 801467e:	4618      	mov	r0, r3
 8014680:	f7fc fdf7 	bl	8011272 <vStreamBufferMoveMid>
            }
        }
    }
 8014684:	bf00      	nop
 8014686:	3710      	adds	r7, #16
 8014688:	46bd      	mov	sp, r7
 801468a:	bd80      	pop	{r7, pc}

0801468c <prvSetOptions>:
 *
 * @return Length of the TCP options after they are set.
 */
    UBaseType_t prvSetOptions( FreeRTOS_Socket_t * pxSocket,
                               const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 801468c:	b590      	push	{r4, r7, lr}
 801468e:	b08b      	sub	sp, #44	@ 0x2c
 8014690:	af02      	add	r7, sp, #8
 8014692:	6078      	str	r0, [r7, #4]
 8014694:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8014696:	683b      	ldr	r3, [r7, #0]
 8014698:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801469a:	6838      	ldr	r0, [r7, #0]
 801469c:	f7f5 feac 	bl	800a3f8 <uxIPHeaderSizePacket>
 80146a0:	4603      	mov	r3, r0
 80146a2:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80146a4:	4423      	add	r3, r4
 80146a6:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 80146a8:	69bb      	ldr	r3, [r7, #24]
 80146aa:	617b      	str	r3, [r7, #20]
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80146b2:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 80146b4:	693b      	ldr	r3, [r7, #16]
 80146b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80146ba:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
            const void * pvCopySource;
            void * pvCopyDest;

            if( uxOptionsLength != 0U )
 80146bc:	69fb      	ldr	r3, [r7, #28]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d05c      	beq.n	801477c <prvSetOptions+0xf0>
            {
                /* TCP options must be sent because a packet which is out-of-order
                 * was received. */
                if( xTCPWindowLoggingLevel >= 0 )
 80146c2:	4b4f      	ldr	r3, [pc, #316]	@ (8014800 <prvSetOptions+0x174>)
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	db44      	blt.n	8014754 <prvSetOptions+0xc8>
                {
                    FreeRTOS_debug_printf( ( "SACK[%u,%u]: optlen %u sending %u - %u\n",
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80146ce:	4618      	mov	r0, r3
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80146d6:	461c      	mov	r4, r3
 80146d8:	693b      	ldr	r3, [r7, #16]
 80146da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80146de:	061a      	lsls	r2, r3, #24
 80146e0:	693b      	ldr	r3, [r7, #16]
 80146e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80146e6:	021b      	lsls	r3, r3, #8
 80146e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80146ec:	431a      	orrs	r2, r3
 80146ee:	693b      	ldr	r3, [r7, #16]
 80146f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80146f4:	0a1b      	lsrs	r3, r3, #8
 80146f6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80146fa:	431a      	orrs	r2, r3
 80146fc:	693b      	ldr	r3, [r7, #16]
 80146fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014702:	0e1b      	lsrs	r3, r3, #24
 8014704:	431a      	orrs	r2, r3
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 801470c:	1ad3      	subs	r3, r2, r3
 801470e:	693a      	ldr	r2, [r7, #16]
 8014710:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8014714:	0611      	lsls	r1, r2, #24
 8014716:	693a      	ldr	r2, [r7, #16]
 8014718:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 801471c:	0212      	lsls	r2, r2, #8
 801471e:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 8014722:	4311      	orrs	r1, r2
 8014724:	693a      	ldr	r2, [r7, #16]
 8014726:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 801472a:	0a12      	lsrs	r2, r2, #8
 801472c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8014730:	4311      	orrs	r1, r2
 8014732:	693a      	ldr	r2, [r7, #16]
 8014734:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8014738:	0e12      	lsrs	r2, r2, #24
 801473a:	4311      	orrs	r1, r2
 801473c:	687a      	ldr	r2, [r7, #4]
 801473e:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 8014742:	1a8a      	subs	r2, r1, r2
 8014744:	9201      	str	r2, [sp, #4]
 8014746:	9300      	str	r3, [sp, #0]
 8014748:	69fb      	ldr	r3, [r7, #28]
 801474a:	4622      	mov	r2, r4
 801474c:	4601      	mov	r1, r0
 801474e:	482d      	ldr	r0, [pc, #180]	@ (8014804 <prvSetOptions+0x178>)
 8014750:	f00e f828 	bl	80227a4 <lUDPLoggingPrintf>
                /*
                 * Use helper variables for memcpy() source & dest to remain
                 * compliant with MISRA Rule 21.15.  These should be
                 * optimized away.
                 */
                pvCopySource = pxTCPWindow->ulOptionsData;
 8014754:	693b      	ldr	r3, [r7, #16]
 8014756:	3380      	adds	r3, #128	@ 0x80
 8014758:	60fb      	str	r3, [r7, #12]
                pvCopyDest = pxTCPHeader->ucOptdata;
 801475a:	697b      	ldr	r3, [r7, #20]
 801475c:	3314      	adds	r3, #20
 801475e:	60bb      	str	r3, [r7, #8]
                ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) uxOptionsLength );
 8014760:	69fa      	ldr	r2, [r7, #28]
 8014762:	68f9      	ldr	r1, [r7, #12]
 8014764:	68b8      	ldr	r0, [r7, #8]
 8014766:	f00e fa39 	bl	8022bdc <memcpy>

                /* The header length divided by 4, goes into the higher nibble,
                 * effectively a shift-left 2. */
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 801476a:	69fb      	ldr	r3, [r7, #28]
 801476c:	b2db      	uxtb	r3, r3
 801476e:	3314      	adds	r3, #20
 8014770:	b2db      	uxtb	r3, r3
 8014772:	009b      	lsls	r3, r3, #2
 8014774:	b2da      	uxtb	r2, r3
 8014776:	697b      	ldr	r3, [r7, #20]
 8014778:	731a      	strb	r2, [r3, #12]
 801477a:	e03c      	b.n	80147f6 <prvSetOptions+0x16a>
            }
            else
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8014782:	2b04      	cmp	r3, #4
 8014784:	d937      	bls.n	80147f6 <prvSetOptions+0x16a>
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801478c:	f003 0301 	and.w	r3, r3, #1
 8014790:	b2db      	uxtb	r3, r3
 8014792:	2b00      	cmp	r3, #0
 8014794:	d02f      	beq.n	80147f6 <prvSetOptions+0x16a>
        {
            /* TCP options must be sent because the MSS has changed. */
            pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 8014796:	687a      	ldr	r2, [r7, #4]
 8014798:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801479c:	f36f 0300 	bfc	r3, #0, #1
 80147a0:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

            if( xTCPWindowLoggingLevel >= 0 )
 80147a4:	4b16      	ldr	r3, [pc, #88]	@ (8014800 <prvSetOptions+0x174>)
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	db06      	blt.n	80147ba <prvSetOptions+0x12e>
            {
                FreeRTOS_debug_printf( ( "MSS: sending %u\n", pxSocket->u.xTCP.usMSS ) );
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80147b2:	4619      	mov	r1, r3
 80147b4:	4814      	ldr	r0, [pc, #80]	@ (8014808 <prvSetOptions+0x17c>)
 80147b6:	f00d fff5 	bl	80227a4 <lUDPLoggingPrintf>
            }

            pxTCPHeader->ucOptdata[ 0 ] = tcpTCP_OPT_MSS;
 80147ba:	697b      	ldr	r3, [r7, #20]
 80147bc:	2202      	movs	r2, #2
 80147be:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ 1 ] = tcpTCP_OPT_MSS_LEN;
 80147c0:	697b      	ldr	r3, [r7, #20]
 80147c2:	2204      	movs	r2, #4
 80147c4:	755a      	strb	r2, [r3, #21]
            pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) >> 8 );
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80147cc:	0a1b      	lsrs	r3, r3, #8
 80147ce:	b29b      	uxth	r3, r3
 80147d0:	b2da      	uxtb	r2, r3
 80147d2:	697b      	ldr	r3, [r7, #20]
 80147d4:	759a      	strb	r2, [r3, #22]
            pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) & 0xffU );
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80147dc:	b2da      	uxtb	r2, r3
 80147de:	697b      	ldr	r3, [r7, #20]
 80147e0:	75da      	strb	r2, [r3, #23]
            uxOptionsLength = 4U;
 80147e2:	2304      	movs	r3, #4
 80147e4:	61fb      	str	r3, [r7, #28]
            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80147e6:	69fb      	ldr	r3, [r7, #28]
 80147e8:	b2db      	uxtb	r3, r3
 80147ea:	3314      	adds	r3, #20
 80147ec:	b2db      	uxtb	r3, r3
 80147ee:	009b      	lsls	r3, r3, #2
 80147f0:	b2da      	uxtb	r2, r3
 80147f2:	697b      	ldr	r3, [r7, #20]
 80147f4:	731a      	strb	r2, [r3, #12]
        else
        {
            /* Nothing. */
        }

        return uxOptionsLength;
 80147f6:	69fb      	ldr	r3, [r7, #28]
    }
 80147f8:	4618      	mov	r0, r3
 80147fa:	3724      	adds	r7, #36	@ 0x24
 80147fc:	46bd      	mov	sp, r7
 80147fe:	bd90      	pop	{r4, r7, pc}
 8014800:	2000164c 	.word	0x2000164c
 8014804:	080270d4 	.word	0x080270d4
 8014808:	080270fc 	.word	0x080270fc

0801480c <prvSendData>:
 */
    BaseType_t prvSendData( FreeRTOS_Socket_t * pxSocket,
                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                            uint32_t ulReceiveLength,
                            BaseType_t xByteCount )
    {
 801480c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801480e:	b093      	sub	sp, #76	@ 0x4c
 8014810:	af04      	add	r7, sp, #16
 8014812:	60f8      	str	r0, [r7, #12]
 8014814:	60b9      	str	r1, [r7, #8]
 8014816:	607a      	str	r2, [r7, #4]
 8014818:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 801481a:	68bb      	ldr	r3, [r7, #8]
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014820:	68bb      	ldr	r3, [r7, #8]
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	4618      	mov	r0, r3
 8014826:	f7f5 fde7 	bl	800a3f8 <uxIPHeaderSizePacket>
 801482a:	4603      	mov	r3, r0
 801482c:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 801482e:	4423      	add	r3, r4
 8014830:	633b      	str	r3, [r7, #48]	@ 0x30
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8014832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014834:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 801483c:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* Find out what window size we may advertised. */
        int32_t lRxSpace;
        BaseType_t xSendLength = xByteCount;
 801483e:	683b      	ldr	r3, [r7, #0]
 8014840:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulRxBufferSpace;

        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* Two steps to please MISRA. */
            size_t uxSize = uxIPHeaderSizePacket( *ppxNetworkBuffer ) + ipSIZE_OF_TCP_HEADER;
 8014842:	68bb      	ldr	r3, [r7, #8]
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	4618      	mov	r0, r3
 8014848:	f7f5 fdd6 	bl	800a3f8 <uxIPHeaderSizePacket>
 801484c:	4603      	mov	r3, r0
 801484e:	3314      	adds	r3, #20
 8014850:	627b      	str	r3, [r7, #36]	@ 0x24
            BaseType_t xSizeWithoutData = ( BaseType_t ) uxSize;
 8014852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014854:	623b      	str	r3, [r7, #32]
            int32_t lMinLength;
        #endif

        /* Set the time-out field, so that we'll be called by the IP-task in case no
         * next message will be received. */
        ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801485a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801485c:	691b      	ldr	r3, [r3, #16]
 801485e:	1ad3      	subs	r3, r2, r3
 8014860:	61fb      	str	r3, [r7, #28]
        lRxSpace = ( int32_t ) ulRxBufferSpace;
 8014862:	69fb      	ldr	r3, [r7, #28]
 8014864:	61bb      	str	r3, [r7, #24]

        #if ipconfigUSE_TCP_WIN == 1
        {
            /* An ACK may be delayed if the peer has space for at least 2 x MSS. */
            lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usMSS );
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801486c:	005b      	lsls	r3, r3, #1
 801486e:	617b      	str	r3, [r7, #20]

            /* In case we're receiving data continuously, we might postpone sending
             * an ACK to gain performance. */
            /* lint e9007 is OK because 'uxIPHeaderSizeSocket()' has no side-effects. */
            if( ( ulReceiveLength > 0U ) &&                               /* Data was sent to this socket. */
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d079      	beq.n	801496a <prvSendData+0x15e>
 8014876:	69ba      	ldr	r2, [r7, #24]
 8014878:	697b      	ldr	r3, [r7, #20]
 801487a:	429a      	cmp	r2, r3
 801487c:	db75      	blt.n	801496a <prvSendData+0x15e>
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8014884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014888:	b2db      	uxtb	r3, r3
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
 801488a:	2b00      	cmp	r3, #0
 801488c:	d16d      	bne.n	801496a <prvSendData+0x15e>
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 801488e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014890:	6a3b      	ldr	r3, [r7, #32]
 8014892:	429a      	cmp	r2, r3
 8014894:	d169      	bne.n	801496a <prvSendData+0x15e>
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
 801489c:	2b05      	cmp	r3, #5
 801489e:	d164      	bne.n	801496a <prvSendData+0x15e>
                ( pxTCPHeader->ucTCPFlags == tcpTCP_FLAG_ACK ) )          /* There are no other flags than an ACK. */
 80148a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148a2:	7b5b      	ldrb	r3, [r3, #13]
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 80148a4:	2b10      	cmp	r3, #16
 80148a6:	d160      	bne.n	801496a <prvSendData+0x15e>
            {
                uint32_t ulCurMSS = ( uint32_t ) pxSocket->u.xTCP.usMSS;
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80148ae:	613b      	str	r3, [r7, #16]

                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80148b6:	68bb      	ldr	r3, [r7, #8]
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	429a      	cmp	r2, r3
 80148bc:	d00f      	beq.n	80148de <prvSendData+0xd2>
                {
                    /* There was still a delayed in queue, delete it. */
                    if( pxSocket->u.xTCP.pxAckMessage != NULL )
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d005      	beq.n	80148d4 <prvSendData+0xc8>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80148ce:	4618      	mov	r0, r3
 80148d0:	f003 f8c0 	bl	8017a54 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 80148d4:	68bb      	ldr	r3, [r7, #8]
 80148d6:	681a      	ldr	r2, [r3, #0]
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                }

                if( ulReceiveLength < ulCurMSS ) /* Received a small message. */
 80148de:	687a      	ldr	r2, [r7, #4]
 80148e0:	693b      	ldr	r3, [r7, #16]
 80148e2:	429a      	cmp	r2, r3
 80148e4:	d204      	bcs.n	80148f0 <prvSendData+0xe4>
                {
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) tcpDELAYED_ACK_SHORT_DELAY_MS;
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	2202      	movs	r2, #2
 80148ea:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 80148ee:	e00c      	b.n	801490a <prvSendData+0xfe>
                else
                {
                    /* Normally a delayed ACK should wait 200 ms for a next incoming
                     * packet.  Only wait 20 ms here to gain performance.  A slow ACK
                     * for full-size message. */
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_TICKS( tcpDELAYED_ACK_LONGER_DELAY_MS );
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	2214      	movs	r2, #20
 80148f4:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                    if( pxSocket->u.xTCP.usTimeout < 1U ) /* LCOV_EXCL_BR_LINE, the second branch will never be hit */
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d103      	bne.n	801490a <prvSendData+0xfe>
                    {
                        pxSocket->u.xTCP.usTimeout = 1U;  /* LCOV_EXCL_LINE, this line will not be reached */
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	2201      	movs	r2, #1
 8014906:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                    }
                }

                if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 801490a:	4b3d      	ldr	r3, [pc, #244]	@ (8014a00 <prvSendData+0x1f4>)
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	2b01      	cmp	r3, #1
 8014910:	dd25      	ble.n	801495e <prvSendData+0x152>
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014916:	2b17      	cmp	r3, #23
 8014918:	d021      	beq.n	801495e <prvSendData+0x152>
                {
                    FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %u SEQ %u (len %u) tmout %u d %d\n",
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801491e:	461d      	mov	r5, r3
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014926:	461e      	mov	r6, r3
 8014928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801492a:	691a      	ldr	r2, [r3, #16]
 801492c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801492e:	68db      	ldr	r3, [r3, #12]
 8014930:	1ad0      	subs	r0, r2, r3
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8014938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801493a:	69db      	ldr	r3, [r3, #28]
 801493c:	1ad3      	subs	r3, r2, r3
 801493e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014940:	68f9      	ldr	r1, [r7, #12]
 8014942:	f8b1 1070 	ldrh.w	r1, [r1, #112]	@ 0x70
 8014946:	460c      	mov	r4, r1
 8014948:	69b9      	ldr	r1, [r7, #24]
 801494a:	9103      	str	r1, [sp, #12]
 801494c:	9402      	str	r4, [sp, #8]
 801494e:	9201      	str	r2, [sp, #4]
 8014950:	9300      	str	r3, [sp, #0]
 8014952:	4603      	mov	r3, r0
 8014954:	4632      	mov	r2, r6
 8014956:	4629      	mov	r1, r5
 8014958:	482a      	ldr	r0, [pc, #168]	@ (8014a04 <prvSendData+0x1f8>)
 801495a:	f00d ff23 	bl	80227a4 <lUDPLoggingPrintf>
                                             ( unsigned ) xSendLength,
                                             pxSocket->u.xTCP.usTimeout,
                                             ( int ) lRxSpace ) );
                }

                *ppxNetworkBuffer = NULL;
 801495e:	68bb      	ldr	r3, [r7, #8]
 8014960:	2200      	movs	r2, #0
 8014962:	601a      	str	r2, [r3, #0]
                xSendLength = 0;
 8014964:	2300      	movs	r3, #0
 8014966:	637b      	str	r3, [r7, #52]	@ 0x34
            {
 8014968:	e015      	b.n	8014996 <prvSendData+0x18a>
            }
            else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014970:	2b00      	cmp	r3, #0
 8014972:	d010      	beq.n	8014996 <prvSendData+0x18a>
            {
                /* As an ACK is not being delayed, remove any earlier delayed ACK
                 * message. */
                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 801497a:	68bb      	ldr	r3, [r7, #8]
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	429a      	cmp	r2, r3
 8014980:	d005      	beq.n	801498e <prvSendData+0x182>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014988:	4618      	mov	r0, r3
 801498a:	f003 f863 	bl	8017a54 <vReleaseNetworkBufferAndDescriptor>
                }

                pxSocket->u.xTCP.pxAckMessage = NULL;
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	2200      	movs	r2, #0
 8014992:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
            ( void ) pxTCPHeader;
            ( void ) lRxSpace;
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xSendLength != 0 )
 8014996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014998:	2b00      	cmp	r3, #0
 801499a:	d02b      	beq.n	80149f4 <prvSendData+0x1e8>
        {
            if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 801499c:	4b18      	ldr	r3, [pc, #96]	@ (8014a00 <prvSendData+0x1f4>)
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	2b01      	cmp	r3, #1
 80149a2:	dd1d      	ble.n	80149e0 <prvSendData+0x1d4>
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80149a8:	2b17      	cmp	r3, #23
 80149aa:	d019      	beq.n	80149e0 <prvSendData+0x1d4>
            {
                FreeRTOS_debug_printf( ( "Send[%u->%u] imm ACK %u SEQ %u (len %u)\n",
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80149b0:	4618      	mov	r0, r3
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80149b8:	461c      	mov	r4, r3
 80149ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149bc:	691a      	ldr	r2, [r3, #16]
 80149be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149c0:	68db      	ldr	r3, [r3, #12]
 80149c2:	1ad1      	subs	r1, r2, r3
 80149c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80149c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149ca:	69db      	ldr	r3, [r3, #28]
 80149cc:	1ad3      	subs	r3, r2, r3
 80149ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80149d0:	9201      	str	r2, [sp, #4]
 80149d2:	9300      	str	r3, [sp, #0]
 80149d4:	460b      	mov	r3, r1
 80149d6:	4622      	mov	r2, r4
 80149d8:	4601      	mov	r1, r0
 80149da:	480b      	ldr	r0, [pc, #44]	@ (8014a08 <prvSendData+0x1fc>)
 80149dc:	f00d fee2 	bl	80227a4 <lUDPLoggingPrintf>
                                         ( unsigned ) xSendLength ) );
            }

            /* Set the parameter 'xReleaseAfterSend' to the value of
             * ipconfigZERO_COPY_TX_DRIVER. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 80149e0:	68bb      	ldr	r3, [r7, #8]
 80149e2:	6819      	ldr	r1, [r3, #0]
 80149e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80149e6:	2301      	movs	r3, #1
 80149e8:	68f8      	ldr	r0, [r7, #12]
 80149ea:	f7ff f8ff 	bl	8013bec <prvTCPReturnPacket>
            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                /* The driver has taken ownership of the Network Buffer. */
                *ppxNetworkBuffer = NULL;
 80149ee:	68bb      	ldr	r3, [r7, #8]
 80149f0:	2200      	movs	r2, #0
 80149f2:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        return xSendLength;
 80149f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80149f6:	4618      	mov	r0, r3
 80149f8:	373c      	adds	r7, #60	@ 0x3c
 80149fa:	46bd      	mov	sp, r7
 80149fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149fe:	bf00      	nop
 8014a00:	2000164c 	.word	0x2000164c
 8014a04:	08027110 	.word	0x08027110
 8014a08:	08027148 	.word	0x08027148

08014a0c <prvTCPSendSpecialPacketHelper>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
    BaseType_t prvTCPSendSpecialPacketHelper( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                              uint8_t ucTCPFlags )
    {
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b084      	sub	sp, #16
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]
 8014a14:	460b      	mov	r3, r1
 8014a16:	70fb      	strb	r3, [r7, #3]
        BaseType_t xReturn = pdTRUE;
 8014a18:	2301      	movs	r3, #1
 8014a1a:	60fb      	str	r3, [r7, #12]
            /* Configured to ignore unknown packets just suppress a compiler warning. */
            ( void ) pxNetworkBuffer;
            ( void ) ucTCPFlags;
        #else
        {
            switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 8014a1c:	6878      	ldr	r0, [r7, #4]
 8014a1e:	f7f5 fceb 	bl	800a3f8 <uxIPHeaderSizePacket>
 8014a22:	4603      	mov	r3, r0
 8014a24:	2b14      	cmp	r3, #20
 8014a26:	d002      	beq.n	8014a2e <prvTCPSendSpecialPacketHelper+0x22>
 8014a28:	2b28      	cmp	r3, #40	@ 0x28
 8014a2a:	d007      	beq.n	8014a3c <prvTCPSendSpecialPacketHelper+0x30>
 8014a2c:	e00d      	b.n	8014a4a <prvTCPSendSpecialPacketHelper+0x3e>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipSIZE_OF_IPv4_HEADER:
                        xReturn = prvTCPSendSpecialPktHelper_IPV4( pxNetworkBuffer, ucTCPFlags );
 8014a2e:	78fb      	ldrb	r3, [r7, #3]
 8014a30:	4619      	mov	r1, r3
 8014a32:	6878      	ldr	r0, [r7, #4]
 8014a34:	f000 fb18 	bl	8015068 <prvTCPSendSpecialPktHelper_IPV4>
 8014a38:	60f8      	str	r0, [r7, #12]
                        break;
 8014a3a:	e009      	b.n	8014a50 <prvTCPSendSpecialPacketHelper+0x44>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case ipSIZE_OF_IPv6_HEADER:
                        xReturn = prvTCPSendSpecialPktHelper_IPV6( pxNetworkBuffer, ucTCPFlags );
 8014a3c:	78fb      	ldrb	r3, [r7, #3]
 8014a3e:	4619      	mov	r1, r3
 8014a40:	6878      	ldr	r0, [r7, #4]
 8014a42:	f000 fe8b 	bl	801575c <prvTCPSendSpecialPktHelper_IPV6>
 8014a46:	60f8      	str	r0, [r7, #12]
                        break;
 8014a48:	e002      	b.n	8014a50 <prvTCPSendSpecialPacketHelper+0x44>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    xReturn = pdFAIL;
 8014a4a:	2300      	movs	r3, #0
 8014a4c:	60fb      	str	r3, [r7, #12]
                    break;
 8014a4e:	bf00      	nop
            }
        }
        #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

        /* The packet was not consumed. */
        return xReturn;
 8014a50:	68fb      	ldr	r3, [r7, #12]
    }
 8014a52:	4618      	mov	r0, r3
 8014a54:	3710      	adds	r7, #16
 8014a56:	46bd      	mov	sp, r7
 8014a58:	bd80      	pop	{r7, pc}

08014a5a <prvTCPSendChallengeAck>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendChallengeAck( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8014a5a:	b580      	push	{r7, lr}
 8014a5c:	b082      	sub	sp, #8
 8014a5e:	af00      	add	r7, sp, #0
 8014a60:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer, tcpTCP_FLAG_ACK );
 8014a62:	2110      	movs	r1, #16
 8014a64:	6878      	ldr	r0, [r7, #4]
 8014a66:	f7ff ffd1 	bl	8014a0c <prvTCPSendSpecialPacketHelper>
 8014a6a:	4603      	mov	r3, r0
    }
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	3708      	adds	r7, #8
 8014a70:	46bd      	mov	sp, r7
 8014a72:	bd80      	pop	{r7, pc}

08014a74 <prvTCPSendReset>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8014a74:	b580      	push	{r7, lr}
 8014a76:	b082      	sub	sp, #8
 8014a78:	af00      	add	r7, sp, #0
 8014a7a:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer,
 8014a7c:	2114      	movs	r1, #20
 8014a7e:	6878      	ldr	r0, [r7, #4]
 8014a80:	f7ff ffc4 	bl	8014a0c <prvTCPSendSpecialPacketHelper>
 8014a84:	4603      	mov	r3, r0
                                              ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_RST );
    }
 8014a86:	4618      	mov	r0, r3
 8014a88:	3708      	adds	r7, #8
 8014a8a:	46bd      	mov	sp, r7
 8014a8c:	bd80      	pop	{r7, pc}
	...

08014a90 <prvTCPReturnPacket_IPV4>:
 */
void prvTCPReturnPacket_IPV4( FreeRTOS_Socket_t * pxSocket,
                              NetworkBufferDescriptor_t * pxDescriptor,
                              uint32_t ulLen,
                              BaseType_t xReleaseAfterSend )
{
 8014a90:	b580      	push	{r7, lr}
 8014a92:	b0a6      	sub	sp, #152	@ 0x98
 8014a94:	af00      	add	r7, sp, #0
 8014a96:	60f8      	str	r0, [r7, #12]
 8014a98:	60b9      	str	r1, [r7, #8]
 8014a9a:	607a      	str	r2, [r7, #4]
 8014a9c:	603b      	str	r3, [r7, #0]
    TCPPacket_t * pxTCPPacket = NULL;
 8014a9e:	2300      	movs	r3, #0
 8014aa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 8014aa4:	2300      	movs	r3, #0
 8014aa6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    IPHeader_t * pxIPHeader = NULL;
 8014aaa:	2300      	movs	r3, #0
 8014aac:	67fb      	str	r3, [r7, #124]	@ 0x7c
    BaseType_t xDoRelease = xReleaseAfterSend;
 8014aae:	683b      	ldr	r3, [r7, #0]
 8014ab0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    EthernetHeader_t * pxEthernetHeader = NULL;
 8014ab4:	2300      	movs	r3, #0
 8014ab6:	67bb      	str	r3, [r7, #120]	@ 0x78
    NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 8014ab8:	68bb      	ldr	r3, [r7, #8]
 8014aba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    NetworkBufferDescriptor_t xTempBuffer;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    MACAddress_t xMACAddress;
    const void * pvCopySource = NULL;
 8014abe:	2300      	movs	r3, #0
 8014ac0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    void * pvCopyDest = NULL;
 8014ac4:	2300      	movs	r3, #0
 8014ac6:	677b      	str	r3, [r7, #116]	@ 0x74
    const size_t uxIPHeaderSize = ipSIZE_OF_IPv4_HEADER;
 8014ac8:	2314      	movs	r3, #20
 8014aca:	673b      	str	r3, [r7, #112]	@ 0x70
    uint32_t ulDestinationIPAddress;
    eARPLookupResult_t eResult;
    NetworkEndPoint_t * pxEndPoint = NULL;
 8014acc:	2300      	movs	r3, #0
 8014ace:	617b      	str	r3, [r7, #20]

    do
    {
        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 8014ad0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d117      	bne.n	8014b08 <prvTCPReturnPacket_IPV4+0x78>
        {
            pxNetworkBuffer = &xTempBuffer;
 8014ad8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014adc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

            ( void ) memset( &xTempBuffer, 0, sizeof( xTempBuffer ) );
 8014ae0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014ae4:	2238      	movs	r2, #56	@ 0x38
 8014ae6:	2100      	movs	r1, #0
 8014ae8:	4618      	mov	r0, r3
 8014aea:	f00e f984 	bl	8022df6 <memset>
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	f103 02aa 	add.w	r2, r3, #170	@ 0xaa
 8014af4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014af8:	625a      	str	r2, [r3, #36]	@ 0x24
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8014afa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014afe:	225a      	movs	r2, #90	@ 0x5a
 8014b00:	629a      	str	r2, [r3, #40]	@ 0x28
            xDoRelease = pdFALSE;
 8014b02:	2300      	movs	r3, #0
 8014b04:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        {
            if( xDoRelease == pdFALSE )
 8014b08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d114      	bne.n	8014b3a <prvTCPReturnPacket_IPV4+0xaa>
            {
                /* A zero-copy network driver wants to pass the packet buffer
                 * to DMA, so a new buffer must be created. */
                pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 8014b10:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014b16:	4619      	mov	r1, r3
 8014b18:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8014b1c:	f7f5 ff1e 	bl	800a95c <pxDuplicateNetworkBufferWithDescriptor>
 8014b20:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

                if( pxNetworkBuffer != NULL )
 8014b24:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d003      	beq.n	8014b34 <prvTCPReturnPacket_IPV4+0xa4>
                {
                    xDoRelease = pdTRUE;
 8014b2c:	2301      	movs	r3, #1
 8014b2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8014b32:	e002      	b.n	8014b3a <prvTCPReturnPacket_IPV4+0xaa>
                }
                else
                {
                    FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 8014b34:	48bc      	ldr	r0, [pc, #752]	@ (8014e28 <prvTCPReturnPacket_IPV4+0x398>)
 8014b36:	f00d fe35 	bl	80227a4 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL ) /* LCOV_EXCL_BR_LINE the 2nd branch will never be reached */
 8014b3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	f000 8166 	beq.w	8014e10 <prvTCPReturnPacket_IPV4+0x380>
            NetworkInterface_t * pxInterface;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8014b44:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b4a:	330e      	adds	r3, #14
 8014b4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
            /* Map the Ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxTCPPacket = ( TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 8014b4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            pxEthernetHeader = ( EthernetHeader_t * ) &( pxTCPPacket->xEthernetHeader );
 8014b58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014b5c:	67bb      	str	r3, [r7, #120]	@ 0x78
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] );
 8014b5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014b62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014b64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014b66:	330e      	adds	r3, #14
 8014b68:	4413      	add	r3, r2
 8014b6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8014b6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d10b      	bne.n	8014b90 <prvTCPReturnPacket_IPV4+0x100>
            {
                prvTCPReturn_SetEndPoint( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8014b78:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8014b7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8014b7e:	68f8      	ldr	r0, [r7, #12]
 8014b80:	f7ff faf6 	bl	8014170 <prvTCPReturn_SetEndPoint>

                if( pxNetworkBuffer->pxEndPoint == NULL )
 8014b84:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	f000 813d 	beq.w	8014e0a <prvTCPReturnPacket_IPV4+0x37a>
                    break;
                }
            }

            /* Fill the packet, using hton translations. */
            if( pxSocket != NULL )
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d028      	beq.n	8014be8 <prvTCPReturnPacket_IPV4+0x158>
            {
                prvTCPReturn_CheckTCPWindow( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8014b96:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8014b98:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8014b9c:	68f8      	ldr	r0, [r7, #12]
 8014b9e:	f7ff f865 	bl	8013c6c <prvTCPReturn_CheckTCPWindow>
                prvTCPReturn_SetSequenceNumber( pxSocket, pxNetworkBuffer, uxIPHeaderSize, ulLen );
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8014ba6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8014baa:	68f8      	ldr	r0, [r7, #12]
 8014bac:	f7ff f8d8 	bl	8013d60 <prvTCPReturn_SetSequenceNumber>
                pxIPHeader->ulDestinationIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014bb4:	061a      	lsls	r2, r3, #24
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014bba:	021b      	lsls	r3, r3, #8
 8014bbc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014bc0:	431a      	orrs	r2, r3
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014bc6:	0a1b      	lsrs	r3, r3, #8
 8014bc8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014bcc:	431a      	orrs	r2, r3
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014bd2:	0e1b      	lsrs	r3, r3, #24
 8014bd4:	431a      	orrs	r2, r3
 8014bd6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014bd8:	611a      	str	r2, [r3, #16]
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 8014bda:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014be0:	681a      	ldr	r2, [r3, #0]
 8014be2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014be4:	60da      	str	r2, [r3, #12]
 8014be6:	e017      	b.n	8014c18 <prvTCPReturnPacket_IPV4+0x188>
            }
            else
            {
                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxProtocolHeaders->xTCPHeader.ulSequenceNumber, pxProtocolHeaders->xTCPHeader.ulAckNr );
 8014be8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014bec:	685b      	ldr	r3, [r3, #4]
 8014bee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014bf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014bf4:	689a      	ldr	r2, [r3, #8]
 8014bf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014bfa:	605a      	str	r2, [r3, #4]
 8014bfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014c00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8014c02:	609a      	str	r2, [r3, #8]
                vFlip_32( pxIPHeader->ulDestinationIPAddress, pxIPHeader->ulSourceIPAddress );
 8014c04:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014c06:	691b      	ldr	r3, [r3, #16]
 8014c08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014c0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014c0c:	68da      	ldr	r2, [r3, #12]
 8014c0e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014c10:	611a      	str	r2, [r3, #16]
 8014c12:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014c14:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8014c16:	60da      	str	r2, [r3, #12]
            }

            pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 8014c18:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014c1a:	2280      	movs	r2, #128	@ 0x80
 8014c1c:	721a      	strb	r2, [r3, #8]
            pxIPHeader->usLength = FreeRTOS_htons( ulLen );
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	b29b      	uxth	r3, r3
 8014c22:	021b      	lsls	r3, r3, #8
 8014c24:	b29a      	uxth	r2, r3
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	0a1b      	lsrs	r3, r3, #8
 8014c2a:	b29b      	uxth	r3, r3
 8014c2c:	4313      	orrs	r3, r2
 8014c2e:	b29a      	uxth	r2, r3
 8014c30:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014c32:	805a      	strh	r2, [r3, #2]

            /* Just an increasing number. */
            pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 8014c34:	4b7d      	ldr	r3, [pc, #500]	@ (8014e2c <prvTCPReturnPacket_IPV4+0x39c>)
 8014c36:	881b      	ldrh	r3, [r3, #0]
 8014c38:	021b      	lsls	r3, r3, #8
 8014c3a:	b21a      	sxth	r2, r3
 8014c3c:	4b7b      	ldr	r3, [pc, #492]	@ (8014e2c <prvTCPReturnPacket_IPV4+0x39c>)
 8014c3e:	881b      	ldrh	r3, [r3, #0]
 8014c40:	0a1b      	lsrs	r3, r3, #8
 8014c42:	b29b      	uxth	r3, r3
 8014c44:	b21b      	sxth	r3, r3
 8014c46:	4313      	orrs	r3, r2
 8014c48:	b21b      	sxth	r3, r3
 8014c4a:	b29a      	uxth	r2, r3
 8014c4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014c4e:	809a      	strh	r2, [r3, #4]
            usPacketIdentifier++;
 8014c50:	4b76      	ldr	r3, [pc, #472]	@ (8014e2c <prvTCPReturnPacket_IPV4+0x39c>)
 8014c52:	881b      	ldrh	r3, [r3, #0]
 8014c54:	3301      	adds	r3, #1
 8014c56:	b29a      	uxth	r2, r3
 8014c58:	4b74      	ldr	r3, [pc, #464]	@ (8014e2c <prvTCPReturnPacket_IPV4+0x39c>)
 8014c5a:	801a      	strh	r2, [r3, #0]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 8014c5c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014c5e:	2200      	movs	r2, #0
 8014c60:	719a      	strb	r2, [r3, #6]
 8014c62:	2200      	movs	r2, #0
 8014c64:	71da      	strb	r2, [r3, #7]
                /* calculate the TCP checksum for an outgoing packet. */
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxTCPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            vFlip_16( pxProtocolHeaders->xTCPHeader.usSourcePort, pxProtocolHeaders->xTCPHeader.usDestinationPort );
 8014c66:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014c6a:	781a      	ldrb	r2, [r3, #0]
 8014c6c:	785b      	ldrb	r3, [r3, #1]
 8014c6e:	021b      	lsls	r3, r3, #8
 8014c70:	4313      	orrs	r3, r2
 8014c72:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8014c76:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014c7a:	885b      	ldrh	r3, [r3, #2]
 8014c7c:	b29a      	uxth	r2, r3
 8014c7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014c82:	801a      	strh	r2, [r3, #0]
 8014c84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014c88:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8014c8c:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ( size_t ) ulLen;
 8014c8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014c92:	687a      	ldr	r2, [r7, #4]
 8014c94:	629a      	str	r2, [r3, #40]	@ 0x28
            pxNetworkBuffer->xDataLength += ipSIZE_OF_ETH_HEADER;
 8014c96:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014c9c:	f103 020e 	add.w	r2, r3, #14
 8014ca0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014ca4:	629a      	str	r2, [r3, #40]	@ 0x28
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif

            pvCopySource = &pxEthernetHeader->xSourceAddress;
 8014ca6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014ca8:	3306      	adds	r3, #6
 8014caa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 8014cae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014cb0:	691b      	ldr	r3, [r3, #16]
 8014cb2:	61bb      	str	r3, [r7, #24]

            eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &pxEndPoint );
 8014cb4:	f107 0214 	add.w	r2, r7, #20
 8014cb8:	f107 011c 	add.w	r1, r7, #28
 8014cbc:	f107 0318 	add.w	r3, r7, #24
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	f7f2 fd7f 	bl	80077c4 <eARPGetCacheEntry>
 8014cc6:	4603      	mov	r3, r0
 8014cc8:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

            if( eResult == eARPCacheHit )
 8014ccc:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8014cd0:	2b01      	cmp	r3, #1
 8014cd2:	d108      	bne.n	8014ce6 <prvTCPReturnPacket_IPV4+0x256>
            {
                pvCopySource = &xMACAddress;
 8014cd4:	f107 031c 	add.w	r3, r7, #28
 8014cd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8014cdc:	697a      	ldr	r2, [r7, #20]
 8014cde:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014ce2:	631a      	str	r2, [r3, #48]	@ 0x30
 8014ce4:	e003      	b.n	8014cee <prvTCPReturnPacket_IPV4+0x25e>
            }
            else
            {
                pvCopySource = &pxEthernetHeader->xSourceAddress;
 8014ce6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014ce8:	3306      	adds	r3, #6
 8014cea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            }

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8014cee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	f000 808a 	beq.w	8014e0e <prvTCPReturnPacket_IPV4+0x37e>
            {
                break;
            }

            /* Fill in the destination MAC addresses. */
            pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 8014cfa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014cfc:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 8014cfe:	2206      	movs	r2, #6
 8014d00:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8014d04:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8014d06:	f00d ff69 	bl	8022bdc <memcpy>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8014d0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014d10:	33e8      	adds	r3, #232	@ 0xe8
 8014d12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 8014d16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014d18:	3306      	adds	r3, #6
 8014d1a:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8014d1c:	2206      	movs	r2, #6
 8014d1e:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8014d22:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8014d24:	f00d ff5a 	bl	8022bdc <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8014d28:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014d2e:	2b3b      	cmp	r3, #59	@ 0x3b
 8014d30:	d81a      	bhi.n	8014d68 <prvTCPReturnPacket_IPV4+0x2d8>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8014d32:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014d38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8014d3c:	e00c      	b.n	8014d58 <prvTCPReturnPacket_IPV4+0x2c8>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8014d3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014d42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014d44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014d48:	4413      	add	r3, r2
 8014d4a:	2200      	movs	r2, #0
 8014d4c:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8014d4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014d52:	3301      	adds	r3, #1
 8014d54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8014d58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014d5c:	2b3b      	cmp	r3, #59	@ 0x3b
 8014d5e:	ddee      	ble.n	8014d3e <prvTCPReturnPacket_IPV4+0x2ae>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8014d60:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014d64:	223c      	movs	r2, #60	@ 0x3c
 8014d66:	629a      	str	r2, [r3, #40]	@ 0x28
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface != NULL );
 8014d68:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014d6e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d104      	bne.n	8014d80 <prvTCPReturnPacket_IPV4+0x2f0>
 8014d76:	f240 111d 	movw	r1, #285	@ 0x11d
 8014d7a:	482d      	ldr	r0, [pc, #180]	@ (8014e30 <prvTCPReturnPacket_IPV4+0x3a0>)
 8014d7c:	f7ec fe44 	bl	8001a08 <vAssertCalled>
            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface->pfOutput != NULL );
 8014d80:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014d86:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014d8a:	68db      	ldr	r3, [r3, #12]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d104      	bne.n	8014d9a <prvTCPReturnPacket_IPV4+0x30a>
 8014d90:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8014d94:	4826      	ldr	r0, [pc, #152]	@ (8014e30 <prvTCPReturnPacket_IPV4+0x3a0>)
 8014d96:	f7ec fe37 	bl	8001a08 <vAssertCalled>

            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8014d9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014da0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014da4:	663b      	str	r3, [r7, #96]	@ 0x60
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xDoRelease );
 8014da6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014da8:	68db      	ldr	r3, [r3, #12]
 8014daa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8014dae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8014db2:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8014db4:	4798      	blx	r3

            if( xDoRelease == pdFALSE )
 8014db6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d121      	bne.n	8014e02 <prvTCPReturnPacket_IPV4+0x372>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 8014dbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014dc2:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8014dc6:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8014dca:	021b      	lsls	r3, r3, #8
 8014dcc:	4313      	orrs	r3, r2
 8014dce:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8014dd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014dd6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014dd8:	b29a      	uxth	r2, r3
 8014dda:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014dde:	845a      	strh	r2, [r3, #34]	@ 0x22
 8014de0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014de4:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8014de8:	849a      	strh	r2, [r3, #36]	@ 0x24

                pxIPHeader->ulSourceIPAddress = pxIPHeader->ulDestinationIPAddress;
 8014dea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014dec:	691a      	ldr	r2, [r3, #16]
 8014dee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014df0:	60da      	str	r2, [r3, #12]

                ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8014df2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014df4:	3306      	adds	r3, #6
 8014df6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8014df8:	2206      	movs	r2, #6
 8014dfa:	4618      	mov	r0, r3
 8014dfc:	f00d feee 	bl	8022bdc <memcpy>
 8014e00:	e006      	b.n	8014e10 <prvTCPReturnPacket_IPV4+0x380>
            }
            else
            {
                xDoRelease = pdFALSE;
 8014e02:	2300      	movs	r3, #0
 8014e04:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8014e08:	e002      	b.n	8014e10 <prvTCPReturnPacket_IPV4+0x380>
                    break;
 8014e0a:	bf00      	nop
 8014e0c:	e000      	b.n	8014e10 <prvTCPReturnPacket_IPV4+0x380>
                break;
 8014e0e:	bf00      	nop
                /* The buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    } while( ipFALSE_BOOL );

    if( xDoRelease == pdTRUE )
 8014e10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014e14:	2b01      	cmp	r3, #1
 8014e16:	d103      	bne.n	8014e20 <prvTCPReturnPacket_IPV4+0x390>
    {
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8014e18:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8014e1c:	f002 fe1a 	bl	8017a54 <vReleaseNetworkBufferAndDescriptor>
    }
}
 8014e20:	bf00      	nop
 8014e22:	3798      	adds	r7, #152	@ 0x98
 8014e24:	46bd      	mov	sp, r7
 8014e26:	bd80      	pop	{r7, pc}
 8014e28:	08027174 	.word	0x08027174
 8014e2c:	200011a4 	.word	0x200011a4
 8014e30:	0802719c 	.word	0x0802719c

08014e34 <prvTCPPrepareConnect_IPV4>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
BaseType_t prvTCPPrepareConnect_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 8014e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e36:	b093      	sub	sp, #76	@ 0x4c
 8014e38:	af06      	add	r7, sp, #24
 8014e3a:	6078      	str	r0, [r7, #4]
    TCPPacket_t * pxTCPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulRemoteIP;
    MACAddress_t xEthAddress;
    BaseType_t xReturn = pdTRUE;
 8014e3c:	2301      	movs	r3, #1
 8014e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t ulInitialSequenceNumber = 0;
 8014e40:	2300      	movs	r3, #0
 8014e42:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ( ipconfigHAS_PRINTF != 0 )
    {
        /* Only necessary for nicer logging. */
        ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 8014e44:	f107 030c 	add.w	r3, r7, #12
 8014e48:	2206      	movs	r2, #6
 8014e4a:	2100      	movs	r1, #0
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	f00d ffd2 	bl	8022df6 <memset>
    }
    #endif /* ipconfigHAS_PRINTF != 0 */

    ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e56:	061a      	lsls	r2, r3, #24
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e5c:	021b      	lsls	r3, r3, #8
 8014e5e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014e62:	431a      	orrs	r2, r3
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e68:	0a1b      	lsrs	r3, r3, #8
 8014e6a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014e6e:	431a      	orrs	r2, r3
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e74:	0e1b      	lsrs	r3, r3, #24
 8014e76:	4313      	orrs	r3, r2
 8014e78:	617b      	str	r3, [r7, #20]
    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ), &( pxSocket->pxEndPoint ) );
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8014e80:	f107 010c 	add.w	r1, r7, #12
 8014e84:	f107 0314 	add.w	r3, r7, #20
 8014e88:	4618      	mov	r0, r3
 8014e8a:	f7f2 fc9b 	bl	80077c4 <eARPGetCacheEntry>
 8014e8e:	4603      	mov	r3, r0
 8014e90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    switch( eReturned )
 8014e94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014e98:	2b01      	cmp	r3, #1
 8014e9a:	d037      	beq.n	8014f0c <prvTCPPrepareConnect_IPV4+0xd8>

        case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
        case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
        default:
            /* Count the number of times it could not find the ARP address. */
            pxSocket->u.xTCP.ucRepCount++;
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8014ea2:	3301      	adds	r3, #1
 8014ea4:	b2da      	uxtb	r2, r3
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

            FreeRTOS_debug_printf( ( "ARP for %xip (using %xip): rc=%d %02x-%02x-%02x-%02x-%02x-%02x\n",
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8014eb0:	697b      	ldr	r3, [r7, #20]
 8014eb2:	061a      	lsls	r2, r3, #24
 8014eb4:	697b      	ldr	r3, [r7, #20]
 8014eb6:	021b      	lsls	r3, r3, #8
 8014eb8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014ebc:	431a      	orrs	r2, r3
 8014ebe:	697b      	ldr	r3, [r7, #20]
 8014ec0:	0a1b      	lsrs	r3, r3, #8
 8014ec2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014ec6:	431a      	orrs	r2, r3
 8014ec8:	697b      	ldr	r3, [r7, #20]
 8014eca:	0e1b      	lsrs	r3, r3, #24
 8014ecc:	431a      	orrs	r2, r3
 8014ece:	f897 e027 	ldrb.w	lr, [r7, #39]	@ 0x27
 8014ed2:	7b38      	ldrb	r0, [r7, #12]
 8014ed4:	7b7c      	ldrb	r4, [r7, #13]
 8014ed6:	7bbd      	ldrb	r5, [r7, #14]
 8014ed8:	7bfe      	ldrb	r6, [r7, #15]
 8014eda:	f897 c010 	ldrb.w	ip, [r7, #16]
 8014ede:	f8c7 c000 	str.w	ip, [r7]
 8014ee2:	f897 c011 	ldrb.w	ip, [r7, #17]
 8014ee6:	4663      	mov	r3, ip
 8014ee8:	9305      	str	r3, [sp, #20]
 8014eea:	683b      	ldr	r3, [r7, #0]
 8014eec:	9304      	str	r3, [sp, #16]
 8014eee:	9603      	str	r6, [sp, #12]
 8014ef0:	9502      	str	r5, [sp, #8]
 8014ef2:	9401      	str	r4, [sp, #4]
 8014ef4:	9000      	str	r0, [sp, #0]
 8014ef6:	4673      	mov	r3, lr
 8014ef8:	485a      	ldr	r0, [pc, #360]	@ (8015064 <prvTCPPrepareConnect_IPV4+0x230>)
 8014efa:	f00d fc53 	bl	80227a4 <lUDPLoggingPrintf>
                                     xEthAddress.ucBytes[ 3 ],
                                     xEthAddress.ucBytes[ 4 ],
                                     xEthAddress.ucBytes[ 5 ] ) );

            /* And issue a (new) ARP request */
            FreeRTOS_OutputARPRequest( ulRemoteIP );
 8014efe:	697b      	ldr	r3, [r7, #20]
 8014f00:	4618      	mov	r0, r3
 8014f02:	f7f2 feb3 	bl	8007c6c <FreeRTOS_OutputARPRequest>
            xReturn = pdFALSE;
 8014f06:	2300      	movs	r3, #0
 8014f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8014f0a:	e000      	b.n	8014f0e <prvTCPPrepareConnect_IPV4+0xda>
            break;            /* We can now prepare the SYN packet. */
 8014f0c:	bf00      	nop
    }

    if( xReturn != pdFALSE )
 8014f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d010      	beq.n	8014f36 <prvTCPPrepareConnect_IPV4+0x102>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxSocket->xLocalAddress.ulIP_IPv4,
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014f26:	f7ec fd8f 	bl	8001a48 <ulApplicationGetNextSequenceNumber>
 8014f2a:	62b8      	str	r0, [r7, #40]	@ 0x28
                                                                      pxSocket->usLocalPort,
                                                                      pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                                      pxSocket->u.xTCP.usRemotePort );

        /* Check for a random number generation error. */
        if( ulInitialSequenceNumber == 0U )
 8014f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d101      	bne.n	8014f36 <prvTCPPrepareConnect_IPV4+0x102>
        {
            xReturn = pdFALSE;
 8014f32:	2300      	movs	r3, #0
 8014f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if( xReturn != pdFALSE )
 8014f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	f000 808d 	beq.w	8015058 <prvTCPPrepareConnect_IPV4+0x224>
         * the buffer onto the TCPPacket_t struct to easily access it's field. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( TCPPacket_t * ) pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	33aa      	adds	r3, #170	@ 0xaa
 8014f42:	623b      	str	r3, [r7, #32]
        pxIPHeader = &pxTCPPacket->xIPHeader;
 8014f44:	6a3b      	ldr	r3, [r7, #32]
 8014f46:	330e      	adds	r3, #14
 8014f48:	61fb      	str	r3, [r7, #28]

        /* reset the retry counter to zero. */
        pxSocket->u.xTCP.ucRepCount = 0U;
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	2200      	movs	r2, #0
 8014f4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        /* And remember that the connect/SYN data are prepared. */
        pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 8014f52:	687a      	ldr	r2, [r7, #4]
 8014f54:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8014f58:	f043 0308 	orr.w	r3, r3, #8
 8014f5c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Now that the Ethernet address is known, the initial packet can be
         * prepared. */
        ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	33aa      	adds	r3, #170	@ 0xaa
 8014f64:	225a      	movs	r2, #90	@ 0x5a
 8014f66:	2100      	movs	r1, #0
 8014f68:	4618      	mov	r0, r3
 8014f6a:	f00d ff44 	bl	8022df6 <memset>

        /* Write the Ethernet address in Source, because it will be swapped by
         * prvTCPReturnPacket(). */
        ( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 8014f6e:	6a3b      	ldr	r3, [r7, #32]
 8014f70:	3306      	adds	r3, #6
 8014f72:	461a      	mov	r2, r3
 8014f74:	f107 030c 	add.w	r3, r7, #12
 8014f78:	6818      	ldr	r0, [r3, #0]
 8014f7a:	6010      	str	r0, [r2, #0]
 8014f7c:	889b      	ldrh	r3, [r3, #4]
 8014f7e:	8093      	strh	r3, [r2, #4]

        /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
        pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 8014f80:	6a3b      	ldr	r3, [r7, #32]
 8014f82:	2200      	movs	r2, #0
 8014f84:	f042 0208 	orr.w	r2, r2, #8
 8014f88:	731a      	strb	r2, [r3, #12]
 8014f8a:	2200      	movs	r2, #0
 8014f8c:	735a      	strb	r2, [r3, #13]

        pxIPHeader->ucVersionHeaderLength = 0x45U;
 8014f8e:	69fb      	ldr	r3, [r7, #28]
 8014f90:	2245      	movs	r2, #69	@ 0x45
 8014f92:	701a      	strb	r2, [r3, #0]
        usLength = ( uint16_t ) ( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 8014f94:	2338      	movs	r3, #56	@ 0x38
 8014f96:	837b      	strh	r3, [r7, #26]
        pxIPHeader->usLength = FreeRTOS_htons( usLength );
 8014f98:	8b7b      	ldrh	r3, [r7, #26]
 8014f9a:	021b      	lsls	r3, r3, #8
 8014f9c:	b21a      	sxth	r2, r3
 8014f9e:	8b7b      	ldrh	r3, [r7, #26]
 8014fa0:	0a1b      	lsrs	r3, r3, #8
 8014fa2:	b29b      	uxth	r3, r3
 8014fa4:	b21b      	sxth	r3, r3
 8014fa6:	4313      	orrs	r3, r2
 8014fa8:	b21b      	sxth	r3, r3
 8014faa:	b29a      	uxth	r2, r3
 8014fac:	69fb      	ldr	r3, [r7, #28]
 8014fae:	805a      	strh	r2, [r3, #2]
        pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 8014fb0:	69fb      	ldr	r3, [r7, #28]
 8014fb2:	2280      	movs	r2, #128	@ 0x80
 8014fb4:	721a      	strb	r2, [r3, #8]

        pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 8014fb6:	69fb      	ldr	r3, [r7, #28]
 8014fb8:	2206      	movs	r2, #6
 8014fba:	725a      	strb	r2, [r3, #9]

        /* Addresses and ports will be stored swapped because prvTCPReturnPacket
         * will swap them back while replying. */
        pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014fc0:	061a      	lsls	r2, r3, #24
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014fc6:	021b      	lsls	r3, r3, #8
 8014fc8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014fcc:	431a      	orrs	r2, r3
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014fd2:	0a1b      	lsrs	r3, r3, #8
 8014fd4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014fd8:	431a      	orrs	r2, r3
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014fde:	0e1b      	lsrs	r3, r3, #24
 8014fe0:	431a      	orrs	r2, r3
 8014fe2:	69fb      	ldr	r3, [r7, #28]
 8014fe4:	60da      	str	r2, [r3, #12]

        pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014fec:	021b      	lsls	r3, r3, #8
 8014fee:	b21a      	sxth	r2, r3
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014ff6:	0a1b      	lsrs	r3, r3, #8
 8014ff8:	b29b      	uxth	r3, r3
 8014ffa:	b21b      	sxth	r3, r3
 8014ffc:	4313      	orrs	r3, r2
 8014ffe:	b21b      	sxth	r3, r3
 8015000:	b29a      	uxth	r2, r3
 8015002:	6a3b      	ldr	r3, [r7, #32]
 8015004:	845a      	strh	r2, [r3, #34]	@ 0x22
        pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801500a:	021b      	lsls	r3, r3, #8
 801500c:	b21a      	sxth	r2, r3
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8015012:	0a1b      	lsrs	r3, r3, #8
 8015014:	b29b      	uxth	r3, r3
 8015016:	b21b      	sxth	r3, r3
 8015018:	4313      	orrs	r3, r2
 801501a:	b21b      	sxth	r3, r3
 801501c:	b29a      	uxth	r2, r3
 801501e:	6a3b      	ldr	r3, [r7, #32]
 8015020:	849a      	strh	r2, [r3, #36]	@ 0x24

        /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
         * isn't known yet. */
        pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0U;
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	2200      	movs	r2, #0
 8015026:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Start with ISN (Initial Sequence Number). */
        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801502e:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
         * the high nibble of the TCP offset field. */
        pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50U;
 8015032:	6a3b      	ldr	r3, [r7, #32]
 8015034:	2250      	movs	r2, #80	@ 0x50
 8015036:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

        /* Only set the SYN flag. */
        pxTCPPacket->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 801503a:	6a3b      	ldr	r3, [r7, #32]
 801503c:	2202      	movs	r2, #2
 801503e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

        /* Set the value of usMSS for this socket. */
        prvSocketSetMSS( pxSocket );
 8015042:	6878      	ldr	r0, [r7, #4]
 8015044:	f000 fc3c 	bl	80158c0 <prvSocketSetMSS>

        /* The initial sequence numbers at our side are known.  Later
         * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
         * first wait for a SYN+ACK reply. */
        if( prvTCPCreateWindow( pxSocket ) != pdTRUE )
 8015048:	6878      	ldr	r0, [r7, #4]
 801504a:	f7fe ff2b 	bl	8013ea4 <prvTCPCreateWindow>
 801504e:	4603      	mov	r3, r0
 8015050:	2b01      	cmp	r3, #1
 8015052:	d001      	beq.n	8015058 <prvTCPPrepareConnect_IPV4+0x224>
        {
            xReturn = pdFALSE;
 8015054:	2300      	movs	r3, #0
 8015056:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    return xReturn;
 8015058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 801505a:	4618      	mov	r0, r3
 801505c:	3734      	adds	r7, #52	@ 0x34
 801505e:	46bd      	mov	sp, r7
 8015060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015062:	bf00      	nop
 8015064:	080271dc 	.word	0x080271dc

08015068 <prvTCPSendSpecialPktHelper_IPV4>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
BaseType_t prvTCPSendSpecialPktHelper_IPV4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint8_t ucTCPFlags )
{
 8015068:	b580      	push	{r7, lr}
 801506a:	b086      	sub	sp, #24
 801506c:	af00      	add	r7, sp, #0
 801506e:	6078      	str	r0, [r7, #4]
 8015070:	460b      	mov	r3, r1
 8015072:	70fb      	strb	r3, [r7, #3]
        /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        TCPPacket_t * pxTCPPacket = ( ( TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015078:	617b      	str	r3, [r7, #20]
        const uint32_t ulSendLength =
 801507a:	2328      	movs	r3, #40	@ 0x28
 801507c:	613b      	str	r3, [r7, #16]
            ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER; /* Plus 0 options. */

        uint8_t ucFlagsReceived = pxTCPPacket->xTCPHeader.ucTCPFlags;
 801507e:	697b      	ldr	r3, [r7, #20]
 8015080:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8015084:	73fb      	strb	r3, [r7, #15]
        pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 8015086:	697b      	ldr	r3, [r7, #20]
 8015088:	78fa      	ldrb	r2, [r7, #3]
 801508a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
        pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 801508e:	697b      	ldr	r3, [r7, #20]
 8015090:	2250      	movs	r2, #80	@ 0x50
 8015092:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

        if( ( ucFlagsReceived & tcpTCP_FLAG_SYN ) != 0U )
 8015096:	7bfb      	ldrb	r3, [r7, #15]
 8015098:	f003 0302 	and.w	r3, r3, #2
 801509c:	2b00      	cmp	r3, #0
 801509e:	d02c      	beq.n	80150fa <prvTCPSendSpecialPktHelper_IPV4+0x92>
        {
            /* A synchronize packet is received. It counts as 1 pseudo byte of data,
             * so increase the variable with 1. Before sending a reply, the values of
             * 'ulSequenceNumber' and 'ulAckNr' will be swapped. */
            uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 80150a0:	697b      	ldr	r3, [r7, #20]
 80150a2:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 80150a6:	061a      	lsls	r2, r3, #24
 80150a8:	697b      	ldr	r3, [r7, #20]
 80150aa:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 80150ae:	021b      	lsls	r3, r3, #8
 80150b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80150b4:	431a      	orrs	r2, r3
 80150b6:	697b      	ldr	r3, [r7, #20]
 80150b8:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 80150bc:	0a1b      	lsrs	r3, r3, #8
 80150be:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80150c2:	431a      	orrs	r2, r3
 80150c4:	697b      	ldr	r3, [r7, #20]
 80150c6:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 80150ca:	0e1b      	lsrs	r3, r3, #24
 80150cc:	4313      	orrs	r3, r2
 80150ce:	60bb      	str	r3, [r7, #8]
            ulSequenceNumber++;
 80150d0:	68bb      	ldr	r3, [r7, #8]
 80150d2:	3301      	adds	r3, #1
 80150d4:	60bb      	str	r3, [r7, #8]
            pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( ulSequenceNumber );
 80150d6:	68bb      	ldr	r3, [r7, #8]
 80150d8:	061a      	lsls	r2, r3, #24
 80150da:	68bb      	ldr	r3, [r7, #8]
 80150dc:	021b      	lsls	r3, r3, #8
 80150de:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80150e2:	431a      	orrs	r2, r3
 80150e4:	68bb      	ldr	r3, [r7, #8]
 80150e6:	0a1b      	lsrs	r3, r3, #8
 80150e8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80150ec:	431a      	orrs	r2, r3
 80150ee:	68bb      	ldr	r3, [r7, #8]
 80150f0:	0e1b      	lsrs	r3, r3, #24
 80150f2:	431a      	orrs	r2, r3
 80150f4:	697b      	ldr	r3, [r7, #20]
 80150f6:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26
        }

        prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 80150fa:	2300      	movs	r3, #0
 80150fc:	693a      	ldr	r2, [r7, #16]
 80150fe:	6879      	ldr	r1, [r7, #4]
 8015100:	2000      	movs	r0, #0
 8015102:	f7fe fd73 	bl	8013bec <prvTCPReturnPacket>
    }
    #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

    /* The packet was not consumed. */
    return pdFAIL;
 8015106:	2300      	movs	r3, #0
}
 8015108:	4618      	mov	r0, r3
 801510a:	3718      	adds	r7, #24
 801510c:	46bd      	mov	sp, r7
 801510e:	bd80      	pop	{r7, pc}

08015110 <prvTCPReturnPacket_IPV6>:
 */
void prvTCPReturnPacket_IPV6( FreeRTOS_Socket_t * pxSocket,
                              NetworkBufferDescriptor_t * pxDescriptor,
                              uint32_t ulLen,
                              BaseType_t xReleaseAfterSend )
{
 8015110:	b5b0      	push	{r4, r5, r7, lr}
 8015112:	b0aa      	sub	sp, #168	@ 0xa8
 8015114:	af00      	add	r7, sp, #0
 8015116:	60f8      	str	r0, [r7, #12]
 8015118:	60b9      	str	r1, [r7, #8]
 801511a:	607a      	str	r2, [r7, #4]
 801511c:	603b      	str	r3, [r7, #0]
    TCPPacket_IPv6_t * pxTCPPacket = NULL;
 801511e:	2300      	movs	r3, #0
 8015120:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 8015124:	2300      	movs	r3, #0
 8015126:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    IPHeader_IPv6_t * pxIPHeader = NULL;
 801512a:	2300      	movs	r3, #0
 801512c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    BaseType_t xDoRelease = xReleaseAfterSend;
 8015130:	683b      	ldr	r3, [r7, #0]
 8015132:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    EthernetHeader_t * pxEthernetHeader = NULL;
 8015136:	2300      	movs	r3, #0
 8015138:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 801513c:	68bb      	ldr	r3, [r7, #8]
 801513e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    NetworkBufferDescriptor_t xTempBuffer;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    MACAddress_t xMACAddress;
    const void * pvCopySource = NULL;
 8015142:	2300      	movs	r3, #0
 8015144:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    void * pvCopyDest = NULL;
 8015148:	2300      	movs	r3, #0
 801514a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    const size_t uxIPHeaderSize = ipSIZE_OF_IPv6_HEADER;
 801514e:	2328      	movs	r3, #40	@ 0x28
 8015150:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    IPv6_Address_t xDestinationIPAddress;

    do
    {
        /* Use do/while to be able to break out of the flow */
        if( ( pxNetworkBuffer == NULL ) && ( pxSocket == NULL ) )
 8015154:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015158:	2b00      	cmp	r3, #0
 801515a:	d103      	bne.n	8015164 <prvTCPReturnPacket_IPV6+0x54>
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	2b00      	cmp	r3, #0
 8015160:	f000 81ae 	beq.w	80154c0 <prvTCPReturnPacket_IPV6+0x3b0>
            break;
        }

        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 8015164:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015168:	2b00      	cmp	r3, #0
 801516a:	d117      	bne.n	801519c <prvTCPReturnPacket_IPV6+0x8c>
        {
            pxNetworkBuffer = &xTempBuffer;
 801516c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8015170:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

            ( void ) memset( &xTempBuffer, 0, sizeof( xTempBuffer ) );
 8015174:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8015178:	2238      	movs	r2, #56	@ 0x38
 801517a:	2100      	movs	r1, #0
 801517c:	4618      	mov	r0, r3
 801517e:	f00d fe3a 	bl	8022df6 <memset>
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	f103 02aa 	add.w	r2, r3, #170	@ 0xaa
 8015188:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801518c:	625a      	str	r2, [r3, #36]	@ 0x24
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 801518e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015192:	225a      	movs	r2, #90	@ 0x5a
 8015194:	629a      	str	r2, [r3, #40]	@ 0x28
            xDoRelease = pdFALSE;
 8015196:	2300      	movs	r3, #0
 8015198:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        {
            if( xDoRelease == pdFALSE )
 801519c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d114      	bne.n	80151ce <prvTCPReturnPacket_IPV6+0xbe>
            {
                /* A zero-copy network driver wants to pass the packet buffer
                 * to DMA, so a new buffer must be created. */
                pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 80151a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80151a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80151aa:	4619      	mov	r1, r3
 80151ac:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80151b0:	f7f5 fbd4 	bl	800a95c <pxDuplicateNetworkBufferWithDescriptor>
 80151b4:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

                if( pxNetworkBuffer != NULL )
 80151b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d003      	beq.n	80151c8 <prvTCPReturnPacket_IPV6+0xb8>
                {
                    xDoRelease = pdTRUE;
 80151c0:	2301      	movs	r3, #1
 80151c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80151c6:	e002      	b.n	80151ce <prvTCPReturnPacket_IPV6+0xbe>
                }
                else
                {
                    FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 80151c8:	48c0      	ldr	r0, [pc, #768]	@ (80154cc <prvTCPReturnPacket_IPV6+0x3bc>)
 80151ca:	f00d faeb 	bl	80227a4 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL ) /* LCOV_EXCL_BR_LINE the 2nd branch will never be reached */
 80151ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	f000 8175 	beq.w	80154c2 <prvTCPReturnPacket_IPV6+0x3b2>
        #endif
        {
            eARPLookupResult_t eResult;
            NetworkInterface_t * pxInterface;

            configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 80151d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80151dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d103      	bne.n	80151ea <prvTCPReturnPacket_IPV6+0xda>
 80151e2:	219d      	movs	r1, #157	@ 0x9d
 80151e4:	48ba      	ldr	r0, [pc, #744]	@ (80154d0 <prvTCPReturnPacket_IPV6+0x3c0>)
 80151e6:	f7ec fc0f 	bl	8001a08 <vAssertCalled>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80151ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80151ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151f0:	330e      	adds	r3, #14
 80151f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            /* Map the Ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxTCPPacket = ( TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer;
 80151f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80151fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            pxEthernetHeader = ( EthernetHeader_t * ) &( pxTCPPacket->xEthernetHeader );
 8015200:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8015204:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] );
 8015208:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801520c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801520e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8015212:	330e      	adds	r3, #14
 8015214:	4413      	add	r3, r2
 8015216:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

            if( pxNetworkBuffer->pxEndPoint == NULL )
 801521a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801521e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015220:	2b00      	cmp	r3, #0
 8015222:	d117      	bne.n	8015254 <prvTCPReturnPacket_IPV6+0x144>
            {
                prvTCPReturn_SetEndPoint( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8015224:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8015228:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 801522c:	68f8      	ldr	r0, [r7, #12]
 801522e:	f7fe ff9f 	bl	8014170 <prvTCPReturn_SetEndPoint>

                if( pxNetworkBuffer->pxEndPoint == NULL )
 8015232:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015238:	2b00      	cmp	r3, #0
 801523a:	d10b      	bne.n	8015254 <prvTCPReturnPacket_IPV6+0x144>
                {
                    if( xDoRelease != pdFALSE )
 801523c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8015240:	2b00      	cmp	r3, #0
 8015242:	d003      	beq.n	801524c <prvTCPReturnPacket_IPV6+0x13c>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8015244:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8015248:	f002 fc04 	bl	8017a54 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxNetworkBuffer = NULL;
 801524c:	2300      	movs	r3, #0
 801524e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                    break;
 8015252:	e136      	b.n	80154c2 <prvTCPReturnPacket_IPV6+0x3b2>
                }
            }

            /* Fill the packet, swapping from- and to-addresses. */
            if( pxSocket != NULL )
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	2b00      	cmp	r3, #0
 8015258:	d025      	beq.n	80152a6 <prvTCPReturnPacket_IPV6+0x196>
            {
                prvTCPReturn_CheckTCPWindow( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 801525a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801525e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8015262:	68f8      	ldr	r0, [r7, #12]
 8015264:	f7fe fd02 	bl	8013c6c <prvTCPReturn_CheckTCPWindow>
                prvTCPReturn_SetSequenceNumber( pxSocket, pxNetworkBuffer, uxIPHeaderSize, ulLen );
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801526e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8015272:	68f8      	ldr	r0, [r7, #12]
 8015274:	f7fe fd74 	bl	8013d60 <prvTCPReturn_SetSequenceNumber>
                ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8015278:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801527c:	f103 0018 	add.w	r0, r3, #24
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	3354      	adds	r3, #84	@ 0x54
 8015284:	2210      	movs	r2, #16
 8015286:	4619      	mov	r1, r3
 8015288:	f00d fca8 	bl	8022bdc <memcpy>
                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 801528c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015290:	f103 0008 	add.w	r0, r3, #8
 8015294:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801529a:	3338      	adds	r3, #56	@ 0x38
 801529c:	2210      	movs	r2, #16
 801529e:	4619      	mov	r1, r3
 80152a0:	f00d fc9c 	bl	8022bdc <memcpy>
 80152a4:	e02d      	b.n	8015302 <prvTCPReturnPacket_IPV6+0x1f2>
            {
                IPv6_Address_t xTempAddress;

                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxProtocolHeaders->xTCPHeader.ulSequenceNumber, pxProtocolHeaders->xTCPHeader.ulAckNr );
 80152a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80152aa:	685b      	ldr	r3, [r3, #4]
 80152ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80152ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80152b2:	689a      	ldr	r2, [r3, #8]
 80152b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80152b8:	605a      	str	r2, [r3, #4]
 80152ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80152be:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80152c0:	609a      	str	r2, [r3, #8]
                ( void ) memcpy( xTempAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80152c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80152c6:	3318      	adds	r3, #24
 80152c8:	f107 0410 	add.w	r4, r7, #16
 80152cc:	6818      	ldr	r0, [r3, #0]
 80152ce:	6859      	ldr	r1, [r3, #4]
 80152d0:	689a      	ldr	r2, [r3, #8]
 80152d2:	68db      	ldr	r3, [r3, #12]
 80152d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxIPHeader->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80152d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80152da:	f103 0018 	add.w	r0, r3, #24
 80152de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80152e2:	3308      	adds	r3, #8
 80152e4:	2210      	movs	r2, #16
 80152e6:	4619      	mov	r1, r3
 80152e8:	f00d fc78 	bl	8022bdc <memcpy>
                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, xTempAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80152ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80152f0:	3308      	adds	r3, #8
 80152f2:	461d      	mov	r5, r3
 80152f4:	f107 0410 	add.w	r4, r7, #16
 80152f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80152fa:	6028      	str	r0, [r5, #0]
 80152fc:	6069      	str	r1, [r5, #4]
 80152fe:	60aa      	str	r2, [r5, #8]
 8015300:	60eb      	str	r3, [r5, #12]
            }

            /* In IPv6, the "payload length" does not include the size of the IP-header */
            pxIPHeader->usPayloadLength = FreeRTOS_htons( ulLen - sizeof( IPHeader_IPv6_t ) );
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	b29b      	uxth	r3, r3
 8015306:	3b28      	subs	r3, #40	@ 0x28
 8015308:	b29b      	uxth	r3, r3
 801530a:	021b      	lsls	r3, r3, #8
 801530c:	b29a      	uxth	r2, r3
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	3b28      	subs	r3, #40	@ 0x28
 8015312:	0a1b      	lsrs	r3, r3, #8
 8015314:	b29b      	uxth	r3, r3
 8015316:	4313      	orrs	r3, r2
 8015318:	b29a      	uxth	r2, r3
 801531a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801531e:	809a      	strh	r2, [r3, #4]
                uint32_t ulTotalLength = ulLen + ipSIZE_OF_ETH_HEADER;
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxNetworkBuffer->pucEthernetBuffer, ulTotalLength, pdTRUE );
            }
            #endif /* ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 */

            vFlip_16( pxProtocolHeaders->xTCPHeader.usSourcePort, pxProtocolHeaders->xTCPHeader.usDestinationPort );
 8015320:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8015324:	781a      	ldrb	r2, [r3, #0]
 8015326:	785b      	ldrb	r3, [r3, #1]
 8015328:	021b      	lsls	r3, r3, #8
 801532a:	4313      	orrs	r3, r2
 801532c:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 8015330:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8015334:	885b      	ldrh	r3, [r3, #2]
 8015336:	b29a      	uxth	r2, r3
 8015338:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801533c:	801a      	strh	r2, [r3, #0]
 801533e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8015342:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8015346:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ( size_t ) ulLen;
 8015348:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801534c:	687a      	ldr	r2, [r7, #4]
 801534e:	629a      	str	r2, [r3, #40]	@ 0x28
            pxNetworkBuffer->xDataLength += ipSIZE_OF_ETH_HEADER;
 8015350:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015356:	f103 020e 	add.w	r2, r3, #14
 801535a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801535e:	629a      	str	r2, [r3, #40]	@ 0x28
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif

            ( void ) memcpy( xDestinationIPAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8015360:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015364:	3318      	adds	r3, #24
 8015366:	f107 0420 	add.w	r4, r7, #32
 801536a:	6818      	ldr	r0, [r3, #0]
 801536c:	6859      	ldr	r1, [r3, #4]
 801536e:	689a      	ldr	r2, [r3, #8]
 8015370:	68db      	ldr	r3, [r3, #12]
 8015372:	c40f      	stmia	r4!, {r0, r1, r2, r3}

            eResult = eNDGetCacheEntry( &xDestinationIPAddress, &xMACAddress, &( pxNetworkBuffer->pxEndPoint ) );
 8015374:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015378:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801537c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8015380:	f107 0320 	add.w	r3, r7, #32
 8015384:	4618      	mov	r0, r3
 8015386:	f7f6 fe89 	bl	800c09c <eNDGetCacheEntry>
 801538a:	4603      	mov	r3, r0
 801538c:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79

            if( eResult == eARPCacheHit )
 8015390:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8015394:	2b01      	cmp	r3, #1
 8015396:	d104      	bne.n	80153a2 <prvTCPReturnPacket_IPV6+0x292>
            {
                pvCopySource = &xMACAddress;
 8015398:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801539c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80153a0:	e004      	b.n	80153ac <prvTCPReturnPacket_IPV6+0x29c>
            }
            else
            {
                pvCopySource = &pxEthernetHeader->xSourceAddress;
 80153a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80153a6:	3306      	adds	r3, #6
 80153a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            }

            /* Fill in the destination MAC addresses. */
            pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 80153ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80153b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 80153b4:	2206      	movs	r2, #6
 80153b6:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80153ba:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80153be:	f00d fc0d 	bl	8022bdc <memcpy>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 80153c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80153c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80153c8:	33e8      	adds	r3, #232	@ 0xe8
 80153ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 80153ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80153d2:	3306      	adds	r3, #6
 80153d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 80153d8:	2206      	movs	r2, #6
 80153da:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80153de:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80153e2:	f00d fbfb 	bl	8022bdc <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 80153e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80153ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80153ec:	2b3b      	cmp	r3, #59	@ 0x3b
 80153ee:	d81a      	bhi.n	8015426 <prvTCPReturnPacket_IPV6+0x316>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80153f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80153f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80153f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80153fa:	e00c      	b.n	8015416 <prvTCPReturnPacket_IPV6+0x306>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 80153fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015400:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015402:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8015406:	4413      	add	r3, r2
 8015408:	2200      	movs	r2, #0
 801540a:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 801540c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8015410:	3301      	adds	r3, #1
 8015412:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8015416:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801541a:	2b3b      	cmp	r3, #59	@ 0x3b
 801541c:	ddee      	ble.n	80153fc <prvTCPReturnPacket_IPV6+0x2ec>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 801541e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015422:	223c      	movs	r2, #60	@ 0x3c
 8015424:	629a      	str	r2, [r3, #40]	@ 0x28
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface != NULL );
 8015426:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801542a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801542c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8015430:	2b00      	cmp	r3, #0
 8015432:	d104      	bne.n	801543e <prvTCPReturnPacket_IPV6+0x32e>
 8015434:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8015438:	4825      	ldr	r0, [pc, #148]	@ (80154d0 <prvTCPReturnPacket_IPV6+0x3c0>)
 801543a:	f7ec fae5 	bl	8001a08 <vAssertCalled>
            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface->pfOutput != NULL );
 801543e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015444:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8015448:	68db      	ldr	r3, [r3, #12]
 801544a:	2b00      	cmp	r3, #0
 801544c:	d104      	bne.n	8015458 <prvTCPReturnPacket_IPV6+0x348>
 801544e:	f240 1119 	movw	r1, #281	@ 0x119
 8015452:	481f      	ldr	r0, [pc, #124]	@ (80154d0 <prvTCPReturnPacket_IPV6+0x3c0>)
 8015454:	f7ec fad8 	bl	8001a08 <vAssertCalled>

            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8015458:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801545c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801545e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8015462:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xDoRelease );
 8015464:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8015466:	68db      	ldr	r3, [r3, #12]
 8015468:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801546c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8015470:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8015472:	4798      	blx	r3

            if( xDoRelease == pdFALSE )
 8015474:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8015478:	2b00      	cmp	r3, #0
 801547a:	d122      	bne.n	80154c2 <prvTCPReturnPacket_IPV6+0x3b2>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 801547c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8015480:	f893 2036 	ldrb.w	r2, [r3, #54]	@ 0x36
 8015484:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8015488:	021b      	lsls	r3, r3, #8
 801548a:	4313      	orrs	r3, r2
 801548c:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
 8015490:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8015494:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8015496:	b29a      	uxth	r2, r3
 8015498:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801549c:	86da      	strh	r2, [r3, #54]	@ 0x36
 801549e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80154a2:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 80154a6:	871a      	strh	r2, [r3, #56]	@ 0x38

                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80154a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80154ac:	f103 0008 	add.w	r0, r3, #8
 80154b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80154b4:	3318      	adds	r3, #24
 80154b6:	2210      	movs	r2, #16
 80154b8:	4619      	mov	r1, r3
 80154ba:	f00d fb8f 	bl	8022bdc <memcpy>
            {
                /* Nothing to do: the buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    } while( ipFALSE_BOOL );
}
 80154be:	e000      	b.n	80154c2 <prvTCPReturnPacket_IPV6+0x3b2>
            break;
 80154c0:	bf00      	nop
}
 80154c2:	bf00      	nop
 80154c4:	37a8      	adds	r7, #168	@ 0xa8
 80154c6:	46bd      	mov	sp, r7
 80154c8:	bdb0      	pop	{r4, r5, r7, pc}
 80154ca:	bf00      	nop
 80154cc:	0802721c 	.word	0x0802721c
 80154d0:	08027244 	.word	0x08027244

080154d4 <prvTCPPrepareConnect_IPV6>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
BaseType_t prvTCPPrepareConnect_IPV6( FreeRTOS_Socket_t * pxSocket )
{
 80154d4:	b590      	push	{r4, r7, lr}
 80154d6:	b093      	sub	sp, #76	@ 0x4c
 80154d8:	af00      	add	r7, sp, #0
 80154da:	6078      	str	r0, [r7, #4]
    TCPPacket_IPv6_t * pxTCPPacket = NULL;
 80154dc:	2300      	movs	r3, #0
 80154de:	63fb      	str	r3, [r7, #60]	@ 0x3c
    IPHeader_IPv6_t * pxIPHeader = NULL;
 80154e0:	2300      	movs	r3, #0
 80154e2:	63bb      	str	r3, [r7, #56]	@ 0x38
    eARPLookupResult_t eReturned;
    IP_Address_t xRemoteIP;
    MACAddress_t xEthAddress;
    BaseType_t xReturn = pdTRUE;
 80154e4:	2301      	movs	r3, #1
 80154e6:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t ulInitialSequenceNumber = 0;
 80154e8:	2300      	movs	r3, #0
 80154ea:	643b      	str	r3, [r7, #64]	@ 0x40
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 80154ec:	2300      	movs	r3, #0
 80154ee:	637b      	str	r3, [r7, #52]	@ 0x34
    NetworkEndPoint_t * pxEndPoint = NULL;
 80154f0:	2300      	movs	r3, #0
 80154f2:	60fb      	str	r3, [r7, #12]

    #if ( ipconfigHAS_PRINTF != 0 )
    {
        /* Only necessary for nicer logging. */
        ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 80154f4:	f107 0310 	add.w	r3, r7, #16
 80154f8:	2206      	movs	r2, #6
 80154fa:	2100      	movs	r1, #0
 80154fc:	4618      	mov	r0, r3
 80154fe:	f00d fc7a 	bl	8022df6 <memset>
    }
    #endif /* ipconfigHAS_PRINTF != 0 */

    ( void ) memset( xRemoteIP.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 8015502:	f107 0318 	add.w	r3, r7, #24
 8015506:	2210      	movs	r2, #16
 8015508:	2100      	movs	r1, #0
 801550a:	4618      	mov	r0, r3
 801550c:	f00d fc73 	bl	8022df6 <memset>
    ( void ) memcpy( xRemoteIP.xIP_IPv6.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	3354      	adds	r3, #84	@ 0x54
 8015514:	f107 0418 	add.w	r4, r7, #24
 8015518:	6818      	ldr	r0, [r3, #0]
 801551a:	6859      	ldr	r1, [r3, #4]
 801551c:	689a      	ldr	r2, [r3, #8]
 801551e:	68db      	ldr	r3, [r3, #12]
 8015520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    eReturned = eNDGetCacheEntry( &( xRemoteIP.xIP_IPv6 ), &( xEthAddress ), &( pxEndPoint ) );
 8015522:	f107 020c 	add.w	r2, r7, #12
 8015526:	f107 0110 	add.w	r1, r7, #16
 801552a:	f107 0318 	add.w	r3, r7, #24
 801552e:	4618      	mov	r0, r3
 8015530:	f7f6 fdb4 	bl	800c09c <eNDGetCacheEntry>
 8015534:	4603      	mov	r3, r0
 8015536:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    FreeRTOS_printf( ( "eNDGetCacheEntry: %d with end-point %p\n", eReturned, ( void * ) pxEndPoint ) );
 801553a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801553e:	68fa      	ldr	r2, [r7, #12]
 8015540:	4619      	mov	r1, r3
 8015542:	4881      	ldr	r0, [pc, #516]	@ (8015748 <prvTCPPrepareConnect_IPV6+0x274>)
 8015544:	f00d f92e 	bl	80227a4 <lUDPLoggingPrintf>

    if( pxEndPoint != NULL )
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d002      	beq.n	8015554 <prvTCPPrepareConnect_IPV6+0x80>
    {
        pxSocket->pxEndPoint = pxEndPoint;
 801554e:	68fa      	ldr	r2, [r7, #12]
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                          &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8015554:	6878      	ldr	r0, [r7, #4]
 8015556:	f7f4 ff69 	bl	800a42c <uxIPHeaderSizeSocket>
 801555a:	4603      	mov	r3, r0
 801555c:	330e      	adds	r3, #14
    pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 801555e:	33a0      	adds	r3, #160	@ 0xa0
 8015560:	687a      	ldr	r2, [r7, #4]
 8015562:	4413      	add	r3, r2
 8015564:	330a      	adds	r3, #10
 8015566:	637b      	str	r3, [r7, #52]	@ 0x34

    switch( eReturned )
 8015568:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801556c:	2b01      	cmp	r3, #1
 801556e:	d02c      	beq.n	80155ca <prvTCPPrepareConnect_IPV6+0xf6>

        case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
        case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
        default:
            /* Count the number of times it could not find the ARP address. */
            pxSocket->u.xTCP.ucRepCount++;
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8015576:	3301      	adds	r3, #1
 8015578:	b2da      	uxtb	r2, r3
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

            FreeRTOS_printf( ( "Looking up %pip with%s end-point\n", ( void * ) xRemoteIP.xIP_IPv6.ucBytes, ( pxEndPoint != NULL ) ? "" : "out" ) );
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	2b00      	cmp	r3, #0
 8015584:	d001      	beq.n	801558a <prvTCPPrepareConnect_IPV6+0xb6>
 8015586:	4a71      	ldr	r2, [pc, #452]	@ (801574c <prvTCPPrepareConnect_IPV6+0x278>)
 8015588:	e000      	b.n	801558c <prvTCPPrepareConnect_IPV6+0xb8>
 801558a:	4a71      	ldr	r2, [pc, #452]	@ (8015750 <prvTCPPrepareConnect_IPV6+0x27c>)
 801558c:	f107 0318 	add.w	r3, r7, #24
 8015590:	4619      	mov	r1, r3
 8015592:	4870      	ldr	r0, [pc, #448]	@ (8015754 <prvTCPPrepareConnect_IPV6+0x280>)
 8015594:	f00d f906 	bl	80227a4 <lUDPLoggingPrintf>

            if( pxEndPoint != NULL )
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	2b00      	cmp	r3, #0
 801559c:	d012      	beq.n	80155c4 <prvTCPPrepareConnect_IPV6+0xf0>
            {
                size_t uxNeededSize;
                NetworkBufferDescriptor_t * pxNetworkBuffer;

                uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 801559e:	2356      	movs	r3, #86	@ 0x56
 80155a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, 0U );
 80155a2:	2100      	movs	r1, #0
 80155a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80155a6:	f002 f9ed 	bl	8017984 <pxGetNetworkBufferWithDescriptor>
 80155aa:	62b8      	str	r0, [r7, #40]	@ 0x28

                if( pxNetworkBuffer != NULL )
 80155ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d008      	beq.n	80155c4 <prvTCPPrepareConnect_IPV6+0xf0>
                {
                    pxNetworkBuffer->pxEndPoint = pxEndPoint;
 80155b2:	68fa      	ldr	r2, [r7, #12]
 80155b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155b6:	631a      	str	r2, [r3, #48]	@ 0x30
                    vNDSendNeighbourSolicitation( pxNetworkBuffer, &( xRemoteIP.xIP_IPv6 ) );
 80155b8:	f107 0318 	add.w	r3, r7, #24
 80155bc:	4619      	mov	r1, r3
 80155be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80155c0:	f7f6 ffd8 	bl	800c574 <vNDSendNeighbourSolicitation>
                }
            }

            xReturn = pdFALSE;
 80155c4:	2300      	movs	r3, #0
 80155c6:	647b      	str	r3, [r7, #68]	@ 0x44
            break;
 80155c8:	e000      	b.n	80155cc <prvTCPPrepareConnect_IPV6+0xf8>
            break;            /* We can now prepare the SYN packet. */
 80155ca:	bf00      	nop
    }

    if( xReturn != pdFALSE )
 80155cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d010      	beq.n	80155f4 <prvTCPPrepareConnect_IPV6+0x120>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxSocket->xLocalAddress.ulIP_IPv4,
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80155e4:	f7ec fa30 	bl	8001a48 <ulApplicationGetNextSequenceNumber>
 80155e8:	6438      	str	r0, [r7, #64]	@ 0x40
                                                                      pxSocket->usLocalPort,
                                                                      pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                                      pxSocket->u.xTCP.usRemotePort );

        /* Check for a random number generation error. */
        if( ulInitialSequenceNumber == 0U )
 80155ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d101      	bne.n	80155f4 <prvTCPPrepareConnect_IPV6+0x120>
        {
            xReturn = pdFALSE;
 80155f0:	2300      	movs	r3, #0
 80155f2:	647b      	str	r3, [r7, #68]	@ 0x44
        }
    }

    if( xReturn != pdFALSE )
 80155f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d05d      	beq.n	80156b6 <prvTCPPrepareConnect_IPV6+0x1e2>
         * the buffer onto the TCPPacket_IPv6_t struct to easily access it's field. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( TCPPacket_IPv6_t * ) pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	33aa      	adds	r3, #170	@ 0xaa
 80155fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pxIPHeader = &( pxTCPPacket->xIPHeader );
 8015600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015602:	330e      	adds	r3, #14
 8015604:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* reset the retry counter to zero. */
        pxSocket->u.xTCP.ucRepCount = 0U;
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	2200      	movs	r2, #0
 801560a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        /* And remember that the connect/SYN data are prepared. */
        pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 801560e:	687a      	ldr	r2, [r7, #4]
 8015610:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8015614:	f043 0308 	orr.w	r3, r3, #8
 8015618:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Now that the Ethernet address is known, the initial packet can be
         * prepared. */
        ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	33aa      	adds	r3, #170	@ 0xaa
 8015620:	225a      	movs	r2, #90	@ 0x5a
 8015622:	2100      	movs	r1, #0
 8015624:	4618      	mov	r0, r3
 8015626:	f00d fbe6 	bl	8022df6 <memset>

        /* Write the Ethernet address in Source, because it will be swapped by
         * prvTCPReturnPacket(). */
        ( void ) memcpy( ( void * ) ( &( pxTCPPacket->xEthernetHeader.xSourceAddress ) ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 801562a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801562c:	3306      	adds	r3, #6
 801562e:	461a      	mov	r2, r3
 8015630:	f107 0310 	add.w	r3, r7, #16
 8015634:	6818      	ldr	r0, [r3, #0]
 8015636:	6010      	str	r0, [r2, #0]
 8015638:	889b      	ldrh	r3, [r3, #4]
 801563a:	8093      	strh	r3, [r2, #4]

        if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	7a1b      	ldrb	r3, [r3, #8]
 8015640:	f003 0301 	and.w	r3, r3, #1
 8015644:	b2db      	uxtb	r3, r3
 8015646:	2b00      	cmp	r3, #0
 8015648:	d035      	beq.n	80156b6 <prvTCPPrepareConnect_IPV6+0x1e2>
        {
            /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
            pxTCPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 801564a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801564c:	2200      	movs	r2, #0
 801564e:	f062 0279 	orn	r2, r2, #121	@ 0x79
 8015652:	731a      	strb	r2, [r3, #12]
 8015654:	2200      	movs	r2, #0
 8015656:	f062 0222 	orn	r2, r2, #34	@ 0x22
 801565a:	735a      	strb	r2, [r3, #13]

            pxIPHeader->ucVersionTrafficClass = ( uint8_t ) 0x60U;
 801565c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801565e:	2260      	movs	r2, #96	@ 0x60
 8015660:	701a      	strb	r2, [r3, #0]
            pxIPHeader->ucTrafficClassFlow = ( uint8_t ) 0x00;
 8015662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015664:	2200      	movs	r2, #0
 8015666:	705a      	strb	r2, [r3, #1]
            pxIPHeader->usFlowLabel = ( uint16_t ) 0x0000U;
 8015668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801566a:	2200      	movs	r2, #0
 801566c:	709a      	strb	r2, [r3, #2]
 801566e:	2200      	movs	r2, #0
 8015670:	70da      	strb	r2, [r3, #3]
            pxIPHeader->usPayloadLength = FreeRTOS_htons( sizeof( TCPHeader_t ) );
 8015672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015674:	2200      	movs	r2, #0
 8015676:	711a      	strb	r2, [r3, #4]
 8015678:	2200      	movs	r2, #0
 801567a:	f042 0224 	orr.w	r2, r2, #36	@ 0x24
 801567e:	715a      	strb	r2, [r3, #5]
            pxIPHeader->ucNextHeader = ( uint8_t ) ipPROTOCOL_TCP;
 8015680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015682:	2206      	movs	r2, #6
 8015684:	719a      	strb	r2, [r3, #6]
            pxIPHeader->ucHopLimit = 128;
 8015686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015688:	2280      	movs	r2, #128	@ 0x80
 801568a:	71da      	strb	r2, [r3, #7]
            /* The Source and Destination addresses will be swapped later. */
            ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, sizeof( pxIPHeader->xSourceAddress.ucBytes ) );
 801568c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801568e:	f103 0008 	add.w	r0, r3, #8
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	3354      	adds	r3, #84	@ 0x54
 8015696:	2210      	movs	r2, #16
 8015698:	4619      	mov	r1, r3
 801569a:	f00d fa9f 	bl	8022bdc <memcpy>
            ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( pxIPHeader->xDestinationAddress.ucBytes ) );
 801569e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156a0:	f103 0018 	add.w	r0, r3, #24
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	3328      	adds	r3, #40	@ 0x28
 80156a8:	2210      	movs	r2, #16
 80156aa:	4619      	mov	r1, r3
 80156ac:	f00d fa96 	bl	8022bdc <memcpy>
            pxEndPoint = pxSocket->pxEndPoint;
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80156b4:	60fb      	str	r3, [r7, #12]
        }
    }

    if( pxEndPoint != NULL )
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d03a      	beq.n	8015732 <prvTCPPrepareConnect_IPV6+0x25e>
    {
        pxSocket->pxEndPoint = pxEndPoint;
 80156bc:	68fa      	ldr	r2, [r7, #12]
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	64da      	str	r2, [r3, #76]	@ 0x4c

        pxProtocolHeaders->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80156c8:	021b      	lsls	r3, r3, #8
 80156ca:	b21a      	sxth	r2, r3
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80156d2:	0a1b      	lsrs	r3, r3, #8
 80156d4:	b29b      	uxth	r3, r3
 80156d6:	b21b      	sxth	r3, r3
 80156d8:	4313      	orrs	r3, r2
 80156da:	b21b      	sxth	r3, r3
 80156dc:	b29a      	uxth	r2, r3
 80156de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80156e0:	801a      	strh	r2, [r3, #0]
        pxProtocolHeaders->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80156e6:	021b      	lsls	r3, r3, #8
 80156e8:	b21a      	sxth	r2, r3
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80156ee:	0a1b      	lsrs	r3, r3, #8
 80156f0:	b29b      	uxth	r3, r3
 80156f2:	b21b      	sxth	r3, r3
 80156f4:	4313      	orrs	r3, r2
 80156f6:	b21b      	sxth	r3, r3
 80156f8:	b29a      	uxth	r2, r3
 80156fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80156fc:	805a      	strh	r2, [r3, #2]

        /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
         * isn't known yet. */
        pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0U;
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	2200      	movs	r2, #0
 8015702:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Start with ISN (Initial Sequence Number). */
        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801570a:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
         * the high nibble of the TCP offset field. */
        pxProtocolHeaders->xTCPHeader.ucTCPOffset = 0x50U;
 801570e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015710:	2250      	movs	r2, #80	@ 0x50
 8015712:	731a      	strb	r2, [r3, #12]

        /* Only set the SYN flag. */
        pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 8015714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015716:	2202      	movs	r2, #2
 8015718:	735a      	strb	r2, [r3, #13]

        /* Set the value of usMSS for this socket. */
        prvSocketSetMSS( pxSocket );
 801571a:	6878      	ldr	r0, [r7, #4]
 801571c:	f000 f8d0 	bl	80158c0 <prvSocketSetMSS>

        /* The initial sequence numbers at our side are known.  Later
         * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
         * first wait for a SYN+ACK reply. */
        if( prvTCPCreateWindow( pxSocket ) != pdTRUE )
 8015720:	6878      	ldr	r0, [r7, #4]
 8015722:	f7fe fbbf 	bl	8013ea4 <prvTCPCreateWindow>
 8015726:	4603      	mov	r3, r0
 8015728:	2b01      	cmp	r3, #1
 801572a:	d007      	beq.n	801573c <prvTCPPrepareConnect_IPV6+0x268>
        {
            xReturn = pdFAIL;
 801572c:	2300      	movs	r3, #0
 801572e:	647b      	str	r3, [r7, #68]	@ 0x44
 8015730:	e004      	b.n	801573c <prvTCPPrepareConnect_IPV6+0x268>
        }
    }
    else
    {
        FreeRTOS_printf( ( "prvTCPPrepareConnect: No pxEndPoint yet?\n" ) );
 8015732:	4809      	ldr	r0, [pc, #36]	@ (8015758 <prvTCPPrepareConnect_IPV6+0x284>)
 8015734:	f00d f836 	bl	80227a4 <lUDPLoggingPrintf>
        xReturn = pdFAIL;
 8015738:	2300      	movs	r3, #0
 801573a:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    return xReturn;
 801573c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 801573e:	4618      	mov	r0, r3
 8015740:	374c      	adds	r7, #76	@ 0x4c
 8015742:	46bd      	mov	sp, r7
 8015744:	bd90      	pop	{r4, r7, pc}
 8015746:	bf00      	nop
 8015748:	08027284 	.word	0x08027284
 801574c:	080272ac 	.word	0x080272ac
 8015750:	080272b0 	.word	0x080272b0
 8015754:	080272b4 	.word	0x080272b4
 8015758:	080272d8 	.word	0x080272d8

0801575c <prvTCPSendSpecialPktHelper_IPV6>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
BaseType_t prvTCPSendSpecialPktHelper_IPV6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint8_t ucTCPFlags )
{
 801575c:	b580      	push	{r7, lr}
 801575e:	b086      	sub	sp, #24
 8015760:	af00      	add	r7, sp, #0
 8015762:	6078      	str	r0, [r7, #4]
 8015764:	460b      	mov	r3, r1
 8015766:	70fb      	strb	r3, [r7, #3]
        /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        TCPPacket_IPv6_t * pxTCPPacket = ( ( TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801576c:	617b      	str	r3, [r7, #20]
        const uint32_t ulSendLength =
 801576e:	233c      	movs	r3, #60	@ 0x3c
 8015770:	613b      	str	r3, [r7, #16]
            ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_TCP_HEADER; /* Plus 0 options. */

        uint8_t ucFlagsReceived = pxTCPPacket->xTCPHeader.ucTCPFlags;
 8015772:	697b      	ldr	r3, [r7, #20]
 8015774:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015778:	73fb      	strb	r3, [r7, #15]
        pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 801577a:	697b      	ldr	r3, [r7, #20]
 801577c:	78fa      	ldrb	r2, [r7, #3]
 801577e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
        pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 8015782:	697b      	ldr	r3, [r7, #20]
 8015784:	2250      	movs	r2, #80	@ 0x50
 8015786:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        if( ( ucFlagsReceived & tcpTCP_FLAG_SYN ) != 0U )
 801578a:	7bfb      	ldrb	r3, [r7, #15]
 801578c:	f003 0302 	and.w	r3, r3, #2
 8015790:	2b00      	cmp	r3, #0
 8015792:	d02c      	beq.n	80157ee <prvTCPSendSpecialPktHelper_IPV6+0x92>
        {
            /* A synchronize packet is received. It counts as 1 pseudo byte of data,
             * so increase the variable with 1. Before sending a reply, the values of
             * 'ulSequenceNumber' and 'ulAckNr' will be swapped. */
            uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 8015794:	697b      	ldr	r3, [r7, #20]
 8015796:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 801579a:	061a      	lsls	r2, r3, #24
 801579c:	697b      	ldr	r3, [r7, #20]
 801579e:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 80157a2:	021b      	lsls	r3, r3, #8
 80157a4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80157a8:	431a      	orrs	r2, r3
 80157aa:	697b      	ldr	r3, [r7, #20]
 80157ac:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 80157b0:	0a1b      	lsrs	r3, r3, #8
 80157b2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80157b6:	431a      	orrs	r2, r3
 80157b8:	697b      	ldr	r3, [r7, #20]
 80157ba:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 80157be:	0e1b      	lsrs	r3, r3, #24
 80157c0:	4313      	orrs	r3, r2
 80157c2:	60bb      	str	r3, [r7, #8]
            ulSequenceNumber++;
 80157c4:	68bb      	ldr	r3, [r7, #8]
 80157c6:	3301      	adds	r3, #1
 80157c8:	60bb      	str	r3, [r7, #8]
            pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( ulSequenceNumber );
 80157ca:	68bb      	ldr	r3, [r7, #8]
 80157cc:	061a      	lsls	r2, r3, #24
 80157ce:	68bb      	ldr	r3, [r7, #8]
 80157d0:	021b      	lsls	r3, r3, #8
 80157d2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80157d6:	431a      	orrs	r2, r3
 80157d8:	68bb      	ldr	r3, [r7, #8]
 80157da:	0a1b      	lsrs	r3, r3, #8
 80157dc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80157e0:	431a      	orrs	r2, r3
 80157e2:	68bb      	ldr	r3, [r7, #8]
 80157e4:	0e1b      	lsrs	r3, r3, #24
 80157e6:	431a      	orrs	r2, r3
 80157e8:	697b      	ldr	r3, [r7, #20]
 80157ea:	f8c3 203a 	str.w	r2, [r3, #58]	@ 0x3a
        }

        prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 80157ee:	2300      	movs	r3, #0
 80157f0:	693a      	ldr	r2, [r7, #16]
 80157f2:	6879      	ldr	r1, [r7, #4]
 80157f4:	2000      	movs	r0, #0
 80157f6:	f7fe f9f9 	bl	8013bec <prvTCPReturnPacket>
    }
    #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

    /* The packet was not consumed. */
    return pdFAIL;
 80157fa:	2300      	movs	r3, #0
}
 80157fc:	4618      	mov	r0, r3
 80157fe:	3718      	adds	r7, #24
 8015800:	46bd      	mov	sp, r7
 8015802:	bd80      	pop	{r7, pc}

08015804 <prvTCPFlagMeaning>:
 * @param[in] xFlags The TCP flags.
 *
 * @return The string containing the flags.
 */
        const char * prvTCPFlagMeaning( UBaseType_t xFlags )
        {
 8015804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015806:	b08d      	sub	sp, #52	@ 0x34
 8015808:	af08      	add	r7, sp, #32
 801580a:	6078      	str	r0, [r7, #4]
            size_t uxFlags = ( size_t ) xFlags;
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	60fb      	str	r3, [r7, #12]

            ( void ) snprintf( retString,
                               sizeof( retString ), "%c%c%c%c%c%c%c%c",
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_FIN ) != 0 ) ? 'F' : '.',   /* 0x0001: No more data from sender */
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	f003 0301 	and.w	r3, r3, #1
            ( void ) snprintf( retString,
 8015816:	2b00      	cmp	r3, #0
 8015818:	d002      	beq.n	8015820 <prvTCPFlagMeaning+0x1c>
 801581a:	f04f 0c46 	mov.w	ip, #70	@ 0x46
 801581e:	e001      	b.n	8015824 <prvTCPFlagMeaning+0x20>
 8015820:	f04f 0c2e 	mov.w	ip, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_SYN ) != 0 ) ? 'S' : '.',   /* 0x0002: Synchronize sequence numbers */
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	f003 0302 	and.w	r3, r3, #2
            ( void ) snprintf( retString,
 801582a:	2b00      	cmp	r3, #0
 801582c:	d001      	beq.n	8015832 <prvTCPFlagMeaning+0x2e>
 801582e:	2353      	movs	r3, #83	@ 0x53
 8015830:	e000      	b.n	8015834 <prvTCPFlagMeaning+0x30>
 8015832:	232e      	movs	r3, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_RST ) != 0 ) ? 'R' : '.',   /* 0x0004: Reset the connection */
 8015834:	68fa      	ldr	r2, [r7, #12]
 8015836:	f002 0204 	and.w	r2, r2, #4
            ( void ) snprintf( retString,
 801583a:	2a00      	cmp	r2, #0
 801583c:	d001      	beq.n	8015842 <prvTCPFlagMeaning+0x3e>
 801583e:	2252      	movs	r2, #82	@ 0x52
 8015840:	e000      	b.n	8015844 <prvTCPFlagMeaning+0x40>
 8015842:	222e      	movs	r2, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_PSH ) != 0 ) ? 'P' : '.',   /* 0x0008: Push function: please push buffered data to the recv application */
 8015844:	68f9      	ldr	r1, [r7, #12]
 8015846:	f001 0108 	and.w	r1, r1, #8
            ( void ) snprintf( retString,
 801584a:	2900      	cmp	r1, #0
 801584c:	d001      	beq.n	8015852 <prvTCPFlagMeaning+0x4e>
 801584e:	2150      	movs	r1, #80	@ 0x50
 8015850:	e000      	b.n	8015854 <prvTCPFlagMeaning+0x50>
 8015852:	212e      	movs	r1, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ACK ) != 0 ) ? 'A' : '.',   /* 0x0010: Acknowledgment field is significant */
 8015854:	68f8      	ldr	r0, [r7, #12]
 8015856:	f000 0010 	and.w	r0, r0, #16
            ( void ) snprintf( retString,
 801585a:	2800      	cmp	r0, #0
 801585c:	d001      	beq.n	8015862 <prvTCPFlagMeaning+0x5e>
 801585e:	2041      	movs	r0, #65	@ 0x41
 8015860:	e000      	b.n	8015864 <prvTCPFlagMeaning+0x60>
 8015862:	202e      	movs	r0, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_URG ) != 0 ) ? 'U' : '.',   /* 0x0020: Urgent pointer field is significant */
 8015864:	68fc      	ldr	r4, [r7, #12]
 8015866:	f004 0420 	and.w	r4, r4, #32
            ( void ) snprintf( retString,
 801586a:	2c00      	cmp	r4, #0
 801586c:	d001      	beq.n	8015872 <prvTCPFlagMeaning+0x6e>
 801586e:	2455      	movs	r4, #85	@ 0x55
 8015870:	e000      	b.n	8015874 <prvTCPFlagMeaning+0x70>
 8015872:	242e      	movs	r4, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ECN ) != 0 ) ? 'E' : '.',   /* 0x0040: ECN-Echo */
 8015874:	68fd      	ldr	r5, [r7, #12]
 8015876:	f005 0540 	and.w	r5, r5, #64	@ 0x40
            ( void ) snprintf( retString,
 801587a:	2d00      	cmp	r5, #0
 801587c:	d001      	beq.n	8015882 <prvTCPFlagMeaning+0x7e>
 801587e:	2545      	movs	r5, #69	@ 0x45
 8015880:	e000      	b.n	8015884 <prvTCPFlagMeaning+0x80>
 8015882:	252e      	movs	r5, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_CWR ) != 0 ) ? 'C' : '.' ); /* 0x0080: Congestion Window Reduced */
 8015884:	68fe      	ldr	r6, [r7, #12]
 8015886:	f006 0680 	and.w	r6, r6, #128	@ 0x80
            ( void ) snprintf( retString,
 801588a:	2e00      	cmp	r6, #0
 801588c:	d001      	beq.n	8015892 <prvTCPFlagMeaning+0x8e>
 801588e:	2643      	movs	r6, #67	@ 0x43
 8015890:	e000      	b.n	8015894 <prvTCPFlagMeaning+0x90>
 8015892:	262e      	movs	r6, #46	@ 0x2e
 8015894:	9606      	str	r6, [sp, #24]
 8015896:	9505      	str	r5, [sp, #20]
 8015898:	9404      	str	r4, [sp, #16]
 801589a:	9003      	str	r0, [sp, #12]
 801589c:	9102      	str	r1, [sp, #8]
 801589e:	9201      	str	r2, [sp, #4]
 80158a0:	9300      	str	r3, [sp, #0]
 80158a2:	4663      	mov	r3, ip
 80158a4:	4a04      	ldr	r2, [pc, #16]	@ (80158b8 <prvTCPFlagMeaning+0xb4>)
 80158a6:	210a      	movs	r1, #10
 80158a8:	4804      	ldr	r0, [pc, #16]	@ (80158bc <prvTCPFlagMeaning+0xb8>)
 80158aa:	f00d ffa7 	bl	80237fc <snprintf>
            return retString;
 80158ae:	4b03      	ldr	r3, [pc, #12]	@ (80158bc <prvTCPFlagMeaning+0xb8>)
        }
 80158b0:	4618      	mov	r0, r3
 80158b2:	3714      	adds	r7, #20
 80158b4:	46bd      	mov	sp, r7
 80158b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158b8:	08027304 	.word	0x08027304
 80158bc:	20001628 	.word	0x20001628

080158c0 <prvSocketSetMSS>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
    void prvSocketSetMSS( FreeRTOS_Socket_t * pxSocket )
    {
 80158c0:	b580      	push	{r7, lr}
 80158c2:	b082      	sub	sp, #8
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	6078      	str	r0, [r7, #4]
        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	7a1b      	ldrb	r3, [r3, #8]
 80158cc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80158d0:	b2db      	uxtb	r3, r3
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d002      	beq.n	80158dc <prvSocketSetMSS+0x1c>
 80158d6:	2b01      	cmp	r3, #1
 80158d8:	d004      	beq.n	80158e4 <prvSocketSetMSS+0x24>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default: /* LCOV_EXCL_LINE */
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 80158da:	e007      	b.n	80158ec <prvSocketSetMSS+0x2c>
                    prvSocketSetMSS_IPV4( pxSocket );
 80158dc:	6878      	ldr	r0, [r7, #4]
 80158de:	f000 f809 	bl	80158f4 <prvSocketSetMSS_IPV4>
                    break;
 80158e2:	e003      	b.n	80158ec <prvSocketSetMSS+0x2c>
                    prvSocketSetMSS_IPV6( pxSocket );
 80158e4:	6878      	ldr	r0, [r7, #4]
 80158e6:	f000 f84b 	bl	8015980 <prvSocketSetMSS_IPV6>
                    break;
 80158ea:	bf00      	nop
        }
    }
 80158ec:	bf00      	nop
 80158ee:	3708      	adds	r7, #8
 80158f0:	46bd      	mov	sp, r7
 80158f2:	bd80      	pop	{r7, pc}

080158f4 <prvSocketSetMSS_IPV4>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
void prvSocketSetMSS_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b084      	sub	sp, #16
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	6078      	str	r0, [r7, #4]
    uint32_t ulMSS = ipconfigTCP_MSS;
 80158fc:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8015900:	60fb      	str	r3, [r7, #12]
    const NetworkEndPoint_t * pxEndPoint = pxSocket->pxEndPoint;
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015906:	60bb      	str	r3, [r7, #8]

    if( pxEndPoint != NULL )
 8015908:	68bb      	ldr	r3, [r7, #8]
 801590a:	2b00      	cmp	r3, #0
 801590c:	d023      	beq.n	8015956 <prvSocketSetMSS_IPV4+0x62>
    {
        /* Do not allow MSS smaller than tcpMINIMUM_SEGMENT_LENGTH. */
        #if ( ipconfigTCP_MSS >= tcpMINIMUM_SEGMENT_LENGTH )
        {
            ulMSS = ipconfigTCP_MSS;
 801590e:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8015912:	60fb      	str	r3, [r7, #12]
            ulMSS = tcpMINIMUM_SEGMENT_LENGTH;
        }
        #endif

        /* Check if the remote IP-address belongs to the same netmask. */
        if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 ) ^ pxEndPoint->ipv4_settings.ulIPAddress ) & pxEndPoint->ipv4_settings.ulNetMask ) != 0U )
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015918:	061a      	lsls	r2, r3, #24
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801591e:	021b      	lsls	r3, r3, #8
 8015920:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8015924:	431a      	orrs	r2, r3
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801592a:	0a1b      	lsrs	r3, r3, #8
 801592c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8015930:	431a      	orrs	r2, r3
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015936:	0e1b      	lsrs	r3, r3, #24
 8015938:	431a      	orrs	r2, r3
 801593a:	68bb      	ldr	r3, [r7, #8]
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	405a      	eors	r2, r3
 8015940:	68bb      	ldr	r3, [r7, #8]
 8015942:	685b      	ldr	r3, [r3, #4]
 8015944:	4013      	ands	r3, r2
 8015946:	2b00      	cmp	r3, #0
 8015948:	d005      	beq.n	8015956 <prvSocketSetMSS_IPV4+0x62>
        {
            /* Data for this peer will pass through a router, and maybe through
             * the internet.  Limit the MSS to 1400 bytes or less. */
            ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 801594a:	68f9      	ldr	r1, [r7, #12]
 801594c:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 8015950:	f7f5 faa0 	bl	800ae94 <FreeRTOS_min_uint32>
 8015954:	60f8      	str	r0, [r7, #12]
        }
    }

    FreeRTOS_debug_printf( ( "prvSocketSetMSS: %u bytes for %xip port %u\n", ( unsigned ) ulMSS, ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort ) );
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8015960:	68f9      	ldr	r1, [r7, #12]
 8015962:	4806      	ldr	r0, [pc, #24]	@ (801597c <prvSocketSetMSS_IPV4+0x88>)
 8015964:	f00c ff1e 	bl	80227a4 <lUDPLoggingPrintf>

    pxSocket->u.xTCP.usMSS = ( uint16_t ) ulMSS;
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	b29a      	uxth	r2, r3
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8015972:	bf00      	nop
 8015974:	3710      	adds	r7, #16
 8015976:	46bd      	mov	sp, r7
 8015978:	bd80      	pop	{r7, pc}
 801597a:	bf00      	nop
 801597c:	08027318 	.word	0x08027318

08015980 <prvSocketSetMSS_IPV6>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
void prvSocketSetMSS_IPV6( FreeRTOS_Socket_t * pxSocket )
{
 8015980:	b580      	push	{r7, lr}
 8015982:	b090      	sub	sp, #64	@ 0x40
 8015984:	af00      	add	r7, sp, #0
 8015986:	6078      	str	r0, [r7, #4]
    uint32_t ulMSS = ipconfigTCP_MSS;
 8015988:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 801598c:	63fb      	str	r3, [r7, #60]	@ 0x3c

    #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        char cIPv6Address[ 40 ];
    #endif

    const NetworkEndPoint_t * pxEndPoint = NULL;
 801598e:	2300      	movs	r3, #0
 8015990:	63bb      	str	r3, [r7, #56]	@ 0x38

    do
    {
        if( pxSocket == NULL )
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	2b00      	cmp	r3, #0
 8015996:	d103      	bne.n	80159a0 <prvSocketSetMSS_IPV6+0x20>
        {
            /* If NULL socket handler, skip all following steps. */
            FreeRTOS_debug_printf( ( "prvSocketSetMSS_IPV6: NULL socket handler\n" ) );
 8015998:	481f      	ldr	r0, [pc, #124]	@ (8015a18 <prvSocketSetMSS_IPV6+0x98>)
 801599a:	f00c ff03 	bl	80227a4 <lUDPLoggingPrintf>

            break;
 801599e:	e036      	b.n	8015a0e <prvSocketSetMSS_IPV6+0x8e>
        }

        pxEndPoint = pxSocket->pxEndPoint;
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80159a4:	63bb      	str	r3, [r7, #56]	@ 0x38

        if( pxEndPoint != NULL )
 80159a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d018      	beq.n	80159de <prvSocketSetMSS_IPV6+0x5e>
        {
            IPv6_Type_t eType;

            /* Compared to IPv4, an IPv6 header is 20 bytes longer.
             * It must be subtracted from the MSS. */
            size_t uxDifference = ipSIZE_OF_IPv6_HEADER - ipSIZE_OF_IPv4_HEADER;
 80159ac:	2314      	movs	r3, #20
 80159ae:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Because ipconfigTCP_MSS is guaranteed not less than tcpMINIMUM_SEGMENT_LENGTH by FreeRTOSIPConfigDefaults.h,
             * it's unnecessary to check if xSocket->u.xTCP.usMSS is greater than difference. */
            ulMSS = ( uint32_t ) ( ipconfigTCP_MSS - uxDifference );
 80159b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80159b2:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 80159b6:	1a9b      	subs	r3, r3, r2
 80159b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
            eType = xIPv6_GetIPType( &( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6 ) );
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	3354      	adds	r3, #84	@ 0x54
 80159be:	4618      	mov	r0, r3
 80159c0:	f7f8 fc96 	bl	800e2f0 <xIPv6_GetIPType>
 80159c4:	4603      	mov	r3, r0
 80159c6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

            if( eType == eIPv6_Global )
 80159ca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d105      	bne.n	80159de <prvSocketSetMSS_IPV6+0x5e>
            {
                /* The packet will travel through Internet, make the MSS
                 * smaller. */
                ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 80159d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80159d4:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 80159d8:	f7f5 fa5c 	bl	800ae94 <FreeRTOS_min_uint32>
 80159dc:	63f8      	str	r0, [r7, #60]	@ 0x3c
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        {
            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6, ( const void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, cIPv6Address, sizeof( cIPv6Address ) );
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 80159e4:	f107 0208 	add.w	r2, r7, #8
 80159e8:	2328      	movs	r3, #40	@ 0x28
 80159ea:	200a      	movs	r0, #10
 80159ec:	f7f9 ffa2 	bl	800f934 <FreeRTOS_inet_ntop>
            FreeRTOS_debug_printf( ( "prvSocketSetMSS: %u bytes for %s ip port %u\n", ( unsigned ) ulMSS, cIPv6Address, pxSocket->u.xTCP.usRemotePort ) );
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80159f6:	f107 0208 	add.w	r2, r7, #8
 80159fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80159fc:	4807      	ldr	r0, [pc, #28]	@ (8015a1c <prvSocketSetMSS_IPV6+0x9c>)
 80159fe:	f00c fed1 	bl	80227a4 <lUDPLoggingPrintf>
        }
        #endif

        pxSocket->u.xTCP.usMSS = ( uint16_t ) ulMSS;
 8015a02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015a04:	b29a      	uxth	r2, r3
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
    } while( ipFALSE_BOOL );
}
 8015a0c:	bf00      	nop
 8015a0e:	bf00      	nop
 8015a10:	3740      	adds	r7, #64	@ 0x40
 8015a12:	46bd      	mov	sp, r7
 8015a14:	bd80      	pop	{r7, pc}
 8015a16:	bf00      	nop
 8015a18:	08027344 	.word	0x08027344
 8015a1c:	08027370 	.word	0x08027370

08015a20 <xSequenceLessThanOrEqual>:
 *
 * @return pdTRUE when "( b - a ) < 0x80000000". Else, pdFALSE.
 */
        static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a,
                                                               uint32_t b )
        {
 8015a20:	b480      	push	{r7}
 8015a22:	b085      	sub	sp, #20
 8015a24:	af00      	add	r7, sp, #0
 8015a26:	6078      	str	r0, [r7, #4]
 8015a28:	6039      	str	r1, [r7, #0]
            BaseType_t xResult = pdFALSE;
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	60fb      	str	r3, [r7, #12]

            /* Test if a <= b
             * Return true if the unsigned subtraction of (b-a) doesn't generate an
             * arithmetic overflow. */
            if( ( ( b - a ) & 0x80000000U ) == 0U )
 8015a2e:	683a      	ldr	r2, [r7, #0]
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	1ad3      	subs	r3, r2, r3
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	db01      	blt.n	8015a3c <xSequenceLessThanOrEqual+0x1c>
            {
                xResult = pdTRUE;
 8015a38:	2301      	movs	r3, #1
 8015a3a:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 8015a3c:	68fb      	ldr	r3, [r7, #12]
        }
 8015a3e:	4618      	mov	r0, r3
 8015a40:	3714      	adds	r7, #20
 8015a42:	46bd      	mov	sp, r7
 8015a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a48:	4770      	bx	lr

08015a4a <xSequenceLessThan>:
 *
 * @return pdTRUE when "( b - ( a + 1 ) ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceLessThan( uint32_t a,
                                  uint32_t b )
    {
 8015a4a:	b480      	push	{r7}
 8015a4c:	b085      	sub	sp, #20
 8015a4e:	af00      	add	r7, sp, #0
 8015a50:	6078      	str	r0, [r7, #4]
 8015a52:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8015a54:	2300      	movs	r3, #0
 8015a56:	60fb      	str	r3, [r7, #12]

        /* Test if a < b */
        if( ( ( b - ( a + 1U ) ) & 0x80000000U ) == 0U )
 8015a58:	683a      	ldr	r2, [r7, #0]
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	1ad3      	subs	r3, r2, r3
 8015a5e:	3b01      	subs	r3, #1
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	db01      	blt.n	8015a68 <xSequenceLessThan+0x1e>
        {
            xResult = pdTRUE;
 8015a64:	2301      	movs	r3, #1
 8015a66:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8015a68:	68fb      	ldr	r3, [r7, #12]
    }
 8015a6a:	4618      	mov	r0, r3
 8015a6c:	3714      	adds	r7, #20
 8015a6e:	46bd      	mov	sp, r7
 8015a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a74:	4770      	bx	lr

08015a76 <xSequenceGreaterThan>:
 *
 * @return pdTRUE when "( a - b ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceGreaterThan( uint32_t a,
                                     uint32_t b )
    {
 8015a76:	b480      	push	{r7}
 8015a78:	b085      	sub	sp, #20
 8015a7a:	af00      	add	r7, sp, #0
 8015a7c:	6078      	str	r0, [r7, #4]
 8015a7e:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8015a80:	2300      	movs	r3, #0
 8015a82:	60fb      	str	r3, [r7, #12]

        /* Test if a > b */
        if( ( ( a - ( b + 1U ) ) & 0x80000000U ) == 0U )
 8015a84:	687a      	ldr	r2, [r7, #4]
 8015a86:	683b      	ldr	r3, [r7, #0]
 8015a88:	1ad3      	subs	r3, r2, r3
 8015a8a:	3b01      	subs	r3, #1
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	db01      	blt.n	8015a94 <xSequenceGreaterThan+0x1e>
        {
            xResult = pdTRUE;
 8015a90:	2301      	movs	r3, #1
 8015a92:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8015a94:	68fb      	ldr	r3, [r7, #12]
    }
 8015a96:	4618      	mov	r0, r3
 8015a98:	3714      	adds	r7, #20
 8015a9a:	46bd      	mov	sp, r7
 8015a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aa0:	4770      	bx	lr

08015aa2 <xSequenceGreaterThanOrEqual>:
 *
 * @return pdTRUE if a>=b, else pdFALSE.
 */
    static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a,
                                                              uint32_t b )
    {
 8015aa2:	b480      	push	{r7}
 8015aa4:	b085      	sub	sp, #20
 8015aa6:	af00      	add	r7, sp, #0
 8015aa8:	6078      	str	r0, [r7, #4]
 8015aaa:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8015aac:	2300      	movs	r3, #0
 8015aae:	60fb      	str	r3, [r7, #12]

        /* Test if a >= b */
        if( ( ( a - b ) & 0x80000000U ) == 0U )
 8015ab0:	687a      	ldr	r2, [r7, #4]
 8015ab2:	683b      	ldr	r3, [r7, #0]
 8015ab4:	1ad3      	subs	r3, r2, r3
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	db01      	blt.n	8015abe <xSequenceGreaterThanOrEqual+0x1c>
        {
            xResult = pdTRUE;
 8015aba:	2301      	movs	r3, #1
 8015abc:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8015abe:	68fb      	ldr	r3, [r7, #12]
    }
 8015ac0:	4618      	mov	r0, r3
 8015ac2:	3714      	adds	r7, #20
 8015ac4:	46bd      	mov	sp, r7
 8015ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aca:	4770      	bx	lr

08015acc <vListInsertFifo>:
 * @param[in] pxList The list in which the item is to inserted.
 * @param[in] pxNewListItem The item to be inserted.
 */
        static portINLINE void vListInsertFifo( List_t * const pxList,
                                                ListItem_t * const pxNewListItem )
        {
 8015acc:	b580      	push	{r7, lr}
 8015ace:	b082      	sub	sp, #8
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	6078      	str	r0, [r7, #4]
 8015ad4:	6039      	str	r1, [r7, #0]
            vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	3308      	adds	r3, #8
 8015ada:	461a      	mov	r2, r3
 8015adc:	6839      	ldr	r1, [r7, #0]
 8015ade:	6878      	ldr	r0, [r7, #4]
 8015ae0:	f000 f822 	bl	8015b28 <vListInsertGeneric>
        }
 8015ae4:	bf00      	nop
 8015ae6:	3708      	adds	r7, #8
 8015ae8:	46bd      	mov	sp, r7
 8015aea:	bd80      	pop	{r7, pc}

08015aec <vTCPTimerSet>:
 * @brief Set the timer's "born" time.
 *
 * @param[in] pxTimer The TCP timer.
 */
    static portINLINE void vTCPTimerSet( TCPTimer_t * pxTimer )
    {
 8015aec:	b580      	push	{r7, lr}
 8015aee:	b082      	sub	sp, #8
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	6078      	str	r0, [r7, #4]
        pxTimer->uxBorn = xTaskGetTickCount();
 8015af4:	f7ef f8ec 	bl	8004cd0 <xTaskGetTickCount>
 8015af8:	4602      	mov	r2, r0
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	601a      	str	r2, [r3, #0]
    }
 8015afe:	bf00      	nop
 8015b00:	3708      	adds	r7, #8
 8015b02:	46bd      	mov	sp, r7
 8015b04:	bd80      	pop	{r7, pc}

08015b06 <ulTimerGetAge>:
 * @param[in] pxTimer The timer whose age is to be fetched.
 *
 * @return The time in milliseconds since the timer was born.
 */
    static portINLINE uint32_t ulTimerGetAge( const TCPTimer_t * pxTimer )
    {
 8015b06:	b580      	push	{r7, lr}
 8015b08:	b084      	sub	sp, #16
 8015b0a:	af00      	add	r7, sp, #0
 8015b0c:	6078      	str	r0, [r7, #4]
        TickType_t uxNow = xTaskGetTickCount();
 8015b0e:	f7ef f8df 	bl	8004cd0 <xTaskGetTickCount>
 8015b12:	60f8      	str	r0, [r7, #12]
        TickType_t uxDiff = uxNow - pxTimer->uxBorn;
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	681b      	ldr	r3, [r3, #0]
 8015b18:	68fa      	ldr	r2, [r7, #12]
 8015b1a:	1ad3      	subs	r3, r2, r3
 8015b1c:	60bb      	str	r3, [r7, #8]

        return ( uint32_t ) ( uxDiff * portTICK_PERIOD_MS );
 8015b1e:	68bb      	ldr	r3, [r7, #8]
    }
 8015b20:	4618      	mov	r0, r3
 8015b22:	3710      	adds	r7, #16
 8015b24:	46bd      	mov	sp, r7
 8015b26:	bd80      	pop	{r7, pc}

08015b28 <vListInsertGeneric>:
 */
    #if ( ipconfigUSE_TCP_WIN == 1 )
        static void vListInsertGeneric( List_t * const pxList,
                                        ListItem_t * const pxNewListItem,
                                        MiniListItem_t * pxWhere )
        {
 8015b28:	b480      	push	{r7}
 8015b2a:	b085      	sub	sp, #20
 8015b2c:	af00      	add	r7, sp, #0
 8015b2e:	60f8      	str	r0, [r7, #12]
 8015b30:	60b9      	str	r1, [r7, #8]
 8015b32:	607a      	str	r2, [r7, #4]
             * returned by listGET_HEAD_ENTRY() */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewListItem->pxNext = ( ( ListItem_t * ) pxWhere );
 8015b34:	68bb      	ldr	r3, [r7, #8]
 8015b36:	687a      	ldr	r2, [r7, #4]
 8015b38:	605a      	str	r2, [r3, #4]

            pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	689a      	ldr	r2, [r3, #8]
 8015b3e:	68bb      	ldr	r3, [r7, #8]
 8015b40:	609a      	str	r2, [r3, #8]
            pxWhere->pxPrevious->pxNext = pxNewListItem;
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	689b      	ldr	r3, [r3, #8]
 8015b46:	68ba      	ldr	r2, [r7, #8]
 8015b48:	605a      	str	r2, [r3, #4]
            pxWhere->pxPrevious = pxNewListItem;
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	68ba      	ldr	r2, [r7, #8]
 8015b4e:	609a      	str	r2, [r3, #8]

            /* Remember which list the item is in. */
            listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 8015b50:	68bb      	ldr	r3, [r7, #8]
 8015b52:	68fa      	ldr	r2, [r7, #12]
 8015b54:	611a      	str	r2, [r3, #16]

            ( pxList->uxNumberOfItems )++;
 8015b56:	68fb      	ldr	r3, [r7, #12]
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	1c5a      	adds	r2, r3, #1
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	601a      	str	r2, [r3, #0]
        }
 8015b60:	bf00      	nop
 8015b62:	3714      	adds	r7, #20
 8015b64:	46bd      	mov	sp, r7
 8015b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b6a:	4770      	bx	lr

08015b6c <prvCreateSectors>:
 * @brief Creates a pool of 'ipconfigTCP_WIN_SEG_COUNT' sector buffers. Should be called once only.
 *
 * @return When the allocation was successful: pdPASS, otherwise pdFAIL.
 */
        static BaseType_t prvCreateSectors( void )
        {
 8015b6c:	b580      	push	{r7, lr}
 8015b6e:	b082      	sub	sp, #8
 8015b70:	af00      	add	r7, sp, #0
            BaseType_t xIndex;
            BaseType_t xReturn;

            /* Allocate space for 'xTCPSegments' and store them in 'xSegmentList'. */

            vListInitialise( &xSegmentList );
 8015b72:	4827      	ldr	r0, [pc, #156]	@ (8015c10 <prvCreateSectors+0xa4>)
 8015b74:	f7ed fe28 	bl	80037c8 <vListInitialise>
            xTCPSegments = ( ( TCPSegment_t * ) pvPortMallocLarge( ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );
 8015b78:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8015b7c:	f7f0 ff12 	bl	80069a4 <pvPortMalloc>
 8015b80:	4603      	mov	r3, r0
 8015b82:	4a24      	ldr	r2, [pc, #144]	@ (8015c14 <prvCreateSectors+0xa8>)
 8015b84:	6013      	str	r3, [r2, #0]

            if( xTCPSegments == NULL )
 8015b86:	4b23      	ldr	r3, [pc, #140]	@ (8015c14 <prvCreateSectors+0xa8>)
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d107      	bne.n	8015b9e <prvCreateSectors+0x32>
            {
                FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %u failed\n",
 8015b8e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8015b92:	4821      	ldr	r0, [pc, #132]	@ (8015c18 <prvCreateSectors+0xac>)
 8015b94:	f00c fe06 	bl	80227a4 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) ) );

                xReturn = pdFAIL;
 8015b98:	2300      	movs	r3, #0
 8015b9a:	603b      	str	r3, [r7, #0]
 8015b9c:	e032      	b.n	8015c04 <prvCreateSectors+0x98>
            }
            else
            {
                /* Clear the allocated space. */
                ( void ) memset( xTCPSegments, 0, ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 8015b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8015c14 <prvCreateSectors+0xa8>)
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8015ba6:	2100      	movs	r1, #0
 8015ba8:	4618      	mov	r0, r3
 8015baa:	f00d f924 	bl	8022df6 <memset>

                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8015bae:	2300      	movs	r3, #0
 8015bb0:	607b      	str	r3, [r7, #4]
 8015bb2:	e022      	b.n	8015bfa <prvCreateSectors+0x8e>
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xSegmentItem ) );
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xQueueItem ) );
                    }
                    #endif

                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xSegmentItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 8015bb4:	4b17      	ldr	r3, [pc, #92]	@ (8015c14 <prvCreateSectors+0xa8>)
 8015bb6:	6819      	ldr	r1, [r3, #0]
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	019a      	lsls	r2, r3, #6
 8015bbc:	4b15      	ldr	r3, [pc, #84]	@ (8015c14 <prvCreateSectors+0xa8>)
 8015bbe:	6818      	ldr	r0, [r3, #0]
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	019b      	lsls	r3, r3, #6
 8015bc4:	4403      	add	r3, r0
 8015bc6:	440a      	add	r2, r1
 8015bc8:	639a      	str	r2, [r3, #56]	@ 0x38
                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 8015bca:	4b12      	ldr	r3, [pc, #72]	@ (8015c14 <prvCreateSectors+0xa8>)
 8015bcc:	6819      	ldr	r1, [r3, #0]
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	019a      	lsls	r2, r3, #6
 8015bd2:	4b10      	ldr	r3, [pc, #64]	@ (8015c14 <prvCreateSectors+0xa8>)
 8015bd4:	6818      	ldr	r0, [r3, #0]
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	019b      	lsls	r3, r3, #6
 8015bda:	4403      	add	r3, r0
 8015bdc:	440a      	add	r2, r1
 8015bde:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* And add it to the pool of available segments */
                    vListInsertFifo( &xSegmentList, &( xTCPSegments[ xIndex ].xSegmentItem ) );
 8015be0:	4b0c      	ldr	r3, [pc, #48]	@ (8015c14 <prvCreateSectors+0xa8>)
 8015be2:	681a      	ldr	r2, [r3, #0]
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	019b      	lsls	r3, r3, #6
 8015be8:	4413      	add	r3, r2
 8015bea:	332c      	adds	r3, #44	@ 0x2c
 8015bec:	4619      	mov	r1, r3
 8015bee:	4808      	ldr	r0, [pc, #32]	@ (8015c10 <prvCreateSectors+0xa4>)
 8015bf0:	f7ff ff6c 	bl	8015acc <vListInsertFifo>
                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	3301      	adds	r3, #1
 8015bf8:	607b      	str	r3, [r7, #4]
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	2b3f      	cmp	r3, #63	@ 0x3f
 8015bfe:	ddd9      	ble.n	8015bb4 <prvCreateSectors+0x48>
                }

                xReturn = pdPASS;
 8015c00:	2301      	movs	r3, #1
 8015c02:	603b      	str	r3, [r7, #0]
            }

            return xReturn;
 8015c04:	683b      	ldr	r3, [r7, #0]
        }
 8015c06:	4618      	mov	r0, r3
 8015c08:	3708      	adds	r7, #8
 8015c0a:	46bd      	mov	sp, r7
 8015c0c:	bd80      	pop	{r7, pc}
 8015c0e:	bf00      	nop
 8015c10:	20001638 	.word	0x20001638
 8015c14:	20001634 	.word	0x20001634
 8015c18:	080273a0 	.word	0x080273a0

08015c1c <xTCPWindowRxFind>:
 *
 * @return The address of the segment descriptor found, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowRxFind( const TCPWindow_t * pxWindow,
                                                uint32_t ulSequenceNumber )
        {
 8015c1c:	b480      	push	{r7}
 8015c1e:	b087      	sub	sp, #28
 8015c20:	af00      	add	r7, sp, #0
 8015c22:	6078      	str	r0, [r7, #4]
 8015c24:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment, * pxReturn = NULL;
 8015c26:	2300      	movs	r3, #0
 8015c28:	613b      	str	r3, [r7, #16]
             * segments. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	33ac      	adds	r3, #172	@ 0xac
 8015c2e:	60fb      	str	r3, [r7, #12]

            for( pxIterator = listGET_NEXT( pxEnd );
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	685b      	ldr	r3, [r3, #4]
 8015c34:	617b      	str	r3, [r7, #20]
 8015c36:	e00d      	b.n	8015c54 <xTCPWindowRxFind+0x38>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8015c38:	697b      	ldr	r3, [r7, #20]
 8015c3a:	68db      	ldr	r3, [r3, #12]
 8015c3c:	60bb      	str	r3, [r7, #8]

                if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 8015c3e:	68bb      	ldr	r3, [r7, #8]
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	683a      	ldr	r2, [r7, #0]
 8015c44:	429a      	cmp	r2, r3
 8015c46:	d102      	bne.n	8015c4e <xTCPWindowRxFind+0x32>
                {
                    pxReturn = pxSegment;
 8015c48:	68bb      	ldr	r3, [r7, #8]
 8015c4a:	613b      	str	r3, [r7, #16]
                    break;
 8015c4c:	e006      	b.n	8015c5c <xTCPWindowRxFind+0x40>
                 pxIterator = listGET_NEXT( pxIterator ) )
 8015c4e:	697b      	ldr	r3, [r7, #20]
 8015c50:	685b      	ldr	r3, [r3, #4]
 8015c52:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 8015c54:	697a      	ldr	r2, [r7, #20]
 8015c56:	68fb      	ldr	r3, [r7, #12]
 8015c58:	429a      	cmp	r2, r3
 8015c5a:	d1ed      	bne.n	8015c38 <xTCPWindowRxFind+0x1c>
                }
            }

            return pxReturn;
 8015c5c:	693b      	ldr	r3, [r7, #16]
        }
 8015c5e:	4618      	mov	r0, r3
 8015c60:	371c      	adds	r7, #28
 8015c62:	46bd      	mov	sp, r7
 8015c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c68:	4770      	bx	lr
	...

08015c6c <xTCPWindowNew>:
 */
        static TCPSegment_t * xTCPWindowNew( TCPWindow_t * pxWindow,
                                             uint32_t ulSequenceNumber,
                                             int32_t lCount,
                                             BaseType_t xIsForRx )
        {
 8015c6c:	b580      	push	{r7, lr}
 8015c6e:	b088      	sub	sp, #32
 8015c70:	af00      	add	r7, sp, #0
 8015c72:	60f8      	str	r0, [r7, #12]
 8015c74:	60b9      	str	r1, [r7, #8]
 8015c76:	607a      	str	r2, [r7, #4]
 8015c78:	603b      	str	r3, [r7, #0]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Allocate a new segment.  The socket will borrow all segments from a
             * common pool: 'xSegmentList', which is a list of 'TCPSegment_t' */
            if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 8015c7a:	4b33      	ldr	r3, [pc, #204]	@ (8015d48 <xTCPWindowNew+0xdc>)
 8015c7c:	681b      	ldr	r3, [r3, #0]
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d10c      	bne.n	8015c9c <xTCPWindowNew+0x30>
            {
                /* If the TCP-stack runs out of segments, you might consider
                 * increasing 'ipconfigTCP_WIN_SEG_COUNT'. */
                FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", ( xIsForRx != 0 ) ? 'R' : 'T' ) );
 8015c82:	683b      	ldr	r3, [r7, #0]
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d001      	beq.n	8015c8c <xTCPWindowNew+0x20>
 8015c88:	2352      	movs	r3, #82	@ 0x52
 8015c8a:	e000      	b.n	8015c8e <xTCPWindowNew+0x22>
 8015c8c:	2354      	movs	r3, #84	@ 0x54
 8015c8e:	4619      	mov	r1, r3
 8015c90:	482e      	ldr	r0, [pc, #184]	@ (8015d4c <xTCPWindowNew+0xe0>)
 8015c92:	f00c fd87 	bl	80227a4 <lUDPLoggingPrintf>
                pxSegment = NULL;
 8015c96:	2300      	movs	r3, #0
 8015c98:	61fb      	str	r3, [r7, #28]
 8015c9a:	e04f      	b.n	8015d3c <xTCPWindowNew+0xd0>
            }
            else
            {
                /* Pop the item at the head of the list.  Semaphore protection is
                * not required as only the IP task will call these functions.  */
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 8015c9c:	4b2a      	ldr	r3, [pc, #168]	@ (8015d48 <xTCPWindowNew+0xdc>)
 8015c9e:	68db      	ldr	r3, [r3, #12]
 8015ca0:	61bb      	str	r3, [r7, #24]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8015ca2:	69bb      	ldr	r3, [r7, #24]
 8015ca4:	68db      	ldr	r3, [r3, #12]
 8015ca6:	61fb      	str	r3, [r7, #28]

                configASSERT( pxItem != NULL );
 8015ca8:	69bb      	ldr	r3, [r7, #24]
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d104      	bne.n	8015cb8 <xTCPWindowNew+0x4c>
 8015cae:	f240 2125 	movw	r1, #549	@ 0x225
 8015cb2:	4827      	ldr	r0, [pc, #156]	@ (8015d50 <xTCPWindowNew+0xe4>)
 8015cb4:	f7eb fea8 	bl	8001a08 <vAssertCalled>
                configASSERT( pxSegment != NULL );
 8015cb8:	69fb      	ldr	r3, [r7, #28]
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d104      	bne.n	8015cc8 <xTCPWindowNew+0x5c>
 8015cbe:	f240 2126 	movw	r1, #550	@ 0x226
 8015cc2:	4823      	ldr	r0, [pc, #140]	@ (8015d50 <xTCPWindowNew+0xe4>)
 8015cc4:	f7eb fea0 	bl	8001a08 <vAssertCalled>

                /* Remove the item from xSegmentList. */
                ( void ) uxListRemove( pxItem );
 8015cc8:	69b8      	ldr	r0, [r7, #24]
 8015cca:	f7ed fe07 	bl	80038dc <uxListRemove>

                /* Add it to either the connections' Rx or Tx queue. */
                if( xIsForRx != 0 )
 8015cce:	683b      	ldr	r3, [r7, #0]
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d006      	beq.n	8015ce2 <xTCPWindowNew+0x76>
                {
                    vListInsertFifo( &pxWindow->xRxSegments, pxItem );
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	33a4      	adds	r3, #164	@ 0xa4
 8015cd8:	69b9      	ldr	r1, [r7, #24]
 8015cda:	4618      	mov	r0, r3
 8015cdc:	f7ff fef6 	bl	8015acc <vListInsertFifo>
 8015ce0:	e005      	b.n	8015cee <xTCPWindowNew+0x82>
                }
                else
                {
                    vListInsertFifo( &pxWindow->xTxSegments, pxItem );
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	3390      	adds	r3, #144	@ 0x90
 8015ce6:	69b9      	ldr	r1, [r7, #24]
 8015ce8:	4618      	mov	r0, r3
 8015cea:	f7ff feef 	bl	8015acc <vListInsertFifo>
                }

                /* And set the segment's timer to zero */
                vTCPTimerSet( &pxSegment->xTransmitTimer );
 8015cee:	69fb      	ldr	r3, [r7, #28]
 8015cf0:	3310      	adds	r3, #16
 8015cf2:	4618      	mov	r0, r3
 8015cf4:	f7ff fefa 	bl	8015aec <vTCPTimerSet>

                pxSegment->u.ulFlags = 0;
 8015cf8:	69fb      	ldr	r3, [r7, #28]
 8015cfa:	2200      	movs	r2, #0
 8015cfc:	615a      	str	r2, [r3, #20]
                pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 8015cfe:	683b      	ldr	r3, [r7, #0]
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d001      	beq.n	8015d08 <xTCPWindowNew+0x9c>
 8015d04:	2101      	movs	r1, #1
 8015d06:	e000      	b.n	8015d0a <xTCPWindowNew+0x9e>
 8015d08:	2100      	movs	r1, #0
 8015d0a:	69fa      	ldr	r2, [r7, #28]
 8015d0c:	7d93      	ldrb	r3, [r2, #22]
 8015d0e:	f361 0382 	bfi	r3, r1, #2, #1
 8015d12:	7593      	strb	r3, [r2, #22]
                pxSegment->lMaxLength = lCount;
 8015d14:	69fb      	ldr	r3, [r7, #28]
 8015d16:	687a      	ldr	r2, [r7, #4]
 8015d18:	605a      	str	r2, [r3, #4]
                pxSegment->lDataLength = lCount;
 8015d1a:	69fb      	ldr	r3, [r7, #28]
 8015d1c:	687a      	ldr	r2, [r7, #4]
 8015d1e:	609a      	str	r2, [r3, #8]
                pxSegment->ulSequenceNumber = ulSequenceNumber;
 8015d20:	69fb      	ldr	r3, [r7, #28]
 8015d22:	68ba      	ldr	r2, [r7, #8]
 8015d24:	601a      	str	r2, [r3, #0]
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                {
                    static UBaseType_t xLowestLength = ipconfigTCP_WIN_SEG_COUNT;
                    UBaseType_t xLength = listCURRENT_LIST_LENGTH( &xSegmentList );
 8015d26:	4b08      	ldr	r3, [pc, #32]	@ (8015d48 <xTCPWindowNew+0xdc>)
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	617b      	str	r3, [r7, #20]

                    if( xLowestLength > xLength )
 8015d2c:	4b09      	ldr	r3, [pc, #36]	@ (8015d54 <xTCPWindowNew+0xe8>)
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	697a      	ldr	r2, [r7, #20]
 8015d32:	429a      	cmp	r2, r3
 8015d34:	d202      	bcs.n	8015d3c <xTCPWindowNew+0xd0>
                    {
                        xLowestLength = xLength;
 8015d36:	4a07      	ldr	r2, [pc, #28]	@ (8015d54 <xTCPWindowNew+0xe8>)
 8015d38:	697b      	ldr	r3, [r7, #20]
 8015d3a:	6013      	str	r3, [r2, #0]
                    }
                }
                #endif /* ipconfigHAS_DEBUG_PRINTF */
            }

            return pxSegment;
 8015d3c:	69fb      	ldr	r3, [r7, #28]
        }
 8015d3e:	4618      	mov	r0, r3
 8015d40:	3720      	adds	r7, #32
 8015d42:	46bd      	mov	sp, r7
 8015d44:	bd80      	pop	{r7, pc}
 8015d46:	bf00      	nop
 8015d48:	20001638 	.word	0x20001638
 8015d4c:	080273c4 	.word	0x080273c4
 8015d50:	080273f4 	.word	0x080273f4
 8015d54:	2000001c 	.word	0x2000001c

08015d58 <xTCPWindowRxEmpty>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if the connection can be closed. Else, pdFALSE.
 */
        BaseType_t xTCPWindowRxEmpty( const TCPWindow_t * pxWindow )
        {
 8015d58:	b580      	push	{r7, lr}
 8015d5a:	b084      	sub	sp, #16
 8015d5c:	af00      	add	r7, sp, #0
 8015d5e:	6078      	str	r0, [r7, #4]
            /* When the peer has a close request (FIN flag), the driver will check
             * if there are missing packets in the Rx-queue.  It will accept the
             * closure of the connection if both conditions are true:
             * - the Rx-queue is empty
             * - the highest Rx sequence number has been ACK'ed */
            if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d002      	beq.n	8015d70 <xTCPWindowRxEmpty+0x18>
            {
                /* Rx data has been stored while earlier packets were missing. */
                xReturn = pdFALSE;
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	60fb      	str	r3, [r7, #12]
 8015d6e:	e01e      	b.n	8015dae <xTCPWindowRxEmpty+0x56>
            }
            else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber + 1U, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	691b      	ldr	r3, [r3, #16]
 8015d74:	1c5a      	adds	r2, r3, #1
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	699b      	ldr	r3, [r3, #24]
 8015d7a:	4619      	mov	r1, r3
 8015d7c:	4610      	mov	r0, r2
 8015d7e:	f7ff fe90 	bl	8015aa2 <xSequenceGreaterThanOrEqual>
 8015d82:	4603      	mov	r3, r0
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d002      	beq.n	8015d8e <xTCPWindowRxEmpty+0x36>
            {
                /* No Rx packets are being stored and the highest sequence number
                 * that has been received has been ACKed. */
                xReturn = pdTRUE;
 8015d88:	2301      	movs	r3, #1
 8015d8a:	60fb      	str	r3, [r7, #12]
 8015d8c:	e00f      	b.n	8015dae <xTCPWindowRxEmpty+0x56>
            }
            else
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %u highest %u (empty)\n",
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	691a      	ldr	r2, [r3, #16]
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	68db      	ldr	r3, [r3, #12]
 8015d96:	1ad1      	subs	r1, r2, r3
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	699a      	ldr	r2, [r3, #24]
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	68db      	ldr	r3, [r3, #12]
 8015da0:	1ad3      	subs	r3, r2, r3
 8015da2:	461a      	mov	r2, r3
 8015da4:	4804      	ldr	r0, [pc, #16]	@ (8015db8 <xTCPWindowRxEmpty+0x60>)
 8015da6:	f00c fcfd 	bl	80227a4 <lUDPLoggingPrintf>
                                         ( unsigned ) ( pxWindow->rx.ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->rx.ulHighestSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ) ) );
                xReturn = pdFALSE;
 8015daa:	2300      	movs	r3, #0
 8015dac:	60fb      	str	r3, [r7, #12]
            }

            return xReturn;
 8015dae:	68fb      	ldr	r3, [r7, #12]
        }
 8015db0:	4618      	mov	r0, r3
 8015db2:	3710      	adds	r7, #16
 8015db4:	46bd      	mov	sp, r7
 8015db6:	bd80      	pop	{r7, pc}
 8015db8:	08027424 	.word	0x08027424

08015dbc <xTCPWindowGetHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowGetHead( const List_t * pxList )
        {
 8015dbc:	b580      	push	{r7, lr}
 8015dbe:	b084      	sub	sp, #16
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Detaches and returns the head of a queue. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d102      	bne.n	8015dd2 <xTCPWindowGetHead+0x16>
            {
                pxSegment = NULL;
 8015dcc:	2300      	movs	r3, #0
 8015dce:	60fb      	str	r3, [r7, #12]
 8015dd0:	e008      	b.n	8015de4 <xTCPWindowGetHead+0x28>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	68db      	ldr	r3, [r3, #12]
 8015dd6:	60bb      	str	r3, [r7, #8]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8015dd8:	68bb      	ldr	r3, [r7, #8]
 8015dda:	68db      	ldr	r3, [r3, #12]
 8015ddc:	60fb      	str	r3, [r7, #12]

                ( void ) uxListRemove( pxItem );
 8015dde:	68b8      	ldr	r0, [r7, #8]
 8015de0:	f7ed fd7c 	bl	80038dc <uxListRemove>
            }

            return pxSegment;
 8015de4:	68fb      	ldr	r3, [r7, #12]
        }
 8015de6:	4618      	mov	r0, r3
 8015de8:	3710      	adds	r7, #16
 8015dea:	46bd      	mov	sp, r7
 8015dec:	bd80      	pop	{r7, pc}

08015dee <xTCPWindowPeekHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when the list is empty.
 */
        static TCPSegment_t * xTCPWindowPeekHead( const List_t * pxList )
        {
 8015dee:	b480      	push	{r7}
 8015df0:	b085      	sub	sp, #20
 8015df2:	af00      	add	r7, sp, #0
 8015df4:	6078      	str	r0, [r7, #4]
            const ListItem_t * pxItem;
            TCPSegment_t * pxReturn;

            /* Returns the head of a queue but it won't be detached. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d102      	bne.n	8015e04 <xTCPWindowPeekHead+0x16>
            {
                pxReturn = NULL;
 8015dfe:	2300      	movs	r3, #0
 8015e00:	60fb      	str	r3, [r7, #12]
 8015e02:	e005      	b.n	8015e10 <xTCPWindowPeekHead+0x22>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	68db      	ldr	r3, [r3, #12]
 8015e08:	60bb      	str	r3, [r7, #8]
                pxReturn = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8015e0a:	68bb      	ldr	r3, [r7, #8]
 8015e0c:	68db      	ldr	r3, [r3, #12]
 8015e0e:	60fb      	str	r3, [r7, #12]
            }

            return pxReturn;
 8015e10:	68fb      	ldr	r3, [r7, #12]
        }
 8015e12:	4618      	mov	r0, r3
 8015e14:	3714      	adds	r7, #20
 8015e16:	46bd      	mov	sp, r7
 8015e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e1c:	4770      	bx	lr
	...

08015e20 <vTCPWindowFree>:
 * @brief Release a segment object, return it to the list of available segment holders.
 *
 * @param[in] pxSegment The segment descriptor that must be freed.
 */
        static void vTCPWindowFree( TCPSegment_t * pxSegment )
        {
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b082      	sub	sp, #8
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	6078      	str	r0, [r7, #4]
            /*  Free entry pxSegment because it's not used any more.  The ownership
             * will be passed back to the segment pool.
             *
             * Unlink it from one of the queues, if any. */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d004      	beq.n	8015e3a <vTCPWindowFree+0x1a>
            {
                ( void ) uxListRemove( &( pxSegment->xQueueItem ) );
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	3318      	adds	r3, #24
 8015e34:	4618      	mov	r0, r3
 8015e36:	f7ed fd51 	bl	80038dc <uxListRemove>
            }

            pxSegment->ulSequenceNumber = 0U;
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	2200      	movs	r2, #0
 8015e3e:	601a      	str	r2, [r3, #0]
            pxSegment->lDataLength = 0;
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	2200      	movs	r2, #0
 8015e44:	609a      	str	r2, [r3, #8]
            pxSegment->u.ulFlags = 0U;
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	2200      	movs	r2, #0
 8015e4a:	615a      	str	r2, [r3, #20]

            /* Take it out of xRxSegments/xTxSegments */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d004      	beq.n	8015e5e <vTCPWindowFree+0x3e>
            {
                ( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	332c      	adds	r3, #44	@ 0x2c
 8015e58:	4618      	mov	r0, r3
 8015e5a:	f7ed fd3f 	bl	80038dc <uxListRemove>
            }

            /* Return it to xSegmentList */
            vListInsertFifo( &xSegmentList, &( pxSegment->xSegmentItem ) );
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	332c      	adds	r3, #44	@ 0x2c
 8015e62:	4619      	mov	r1, r3
 8015e64:	4803      	ldr	r0, [pc, #12]	@ (8015e74 <vTCPWindowFree+0x54>)
 8015e66:	f7ff fe31 	bl	8015acc <vListInsertFifo>
        }
 8015e6a:	bf00      	nop
 8015e6c:	3708      	adds	r7, #8
 8015e6e:	46bd      	mov	sp, r7
 8015e70:	bd80      	pop	{r7, pc}
 8015e72:	bf00      	nop
 8015e74:	20001638 	.word	0x20001638

08015e78 <vTCPWindowDestroy>:
 * @brief Return all segment descriptor to the poll of descriptors, before deleting a socket.
 *
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        void vTCPWindowDestroy( TCPWindow_t const * pxWindow )
        {
 8015e78:	b580      	push	{r7, lr}
 8015e7a:	b086      	sub	sp, #24
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	6078      	str	r0, [r7, #4]

            /*  Destroy a window.  A TCP window doesn't serve any more.  Return all
             * owned segments to the pool.  In order to save code, it will make 2 rounds,
             * one to remove the segments from xRxSegments, and a second round to clear
             * xTxSegments*/
            for( xRound = 0; xRound < 2; xRound++ )
 8015e80:	2300      	movs	r3, #0
 8015e82:	613b      	str	r3, [r7, #16]
 8015e84:	e01d      	b.n	8015ec2 <vTCPWindowDestroy+0x4a>
            {
                if( xRound != 0 )
 8015e86:	693b      	ldr	r3, [r7, #16]
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d003      	beq.n	8015e94 <vTCPWindowDestroy+0x1c>
                {
                    pxSegments = &( pxWindow->xRxSegments );
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	33a4      	adds	r3, #164	@ 0xa4
 8015e90:	617b      	str	r3, [r7, #20]
 8015e92:	e002      	b.n	8015e9a <vTCPWindowDestroy+0x22>
                }
                else
                {
                    pxSegments = &( pxWindow->xTxSegments );
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	3390      	adds	r3, #144	@ 0x90
 8015e98:	617b      	str	r3, [r7, #20]
                }

                if( listLIST_IS_INITIALISED( pxSegments ) )
 8015e9a:	697b      	ldr	r3, [r7, #20]
 8015e9c:	689b      	ldr	r3, [r3, #8]
 8015e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ea2:	d10b      	bne.n	8015ebc <vTCPWindowDestroy+0x44>
                {
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8015ea4:	e006      	b.n	8015eb4 <vTCPWindowDestroy+0x3c>
                    {
                        pxSegment = ( ( TCPSegment_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxSegments ) );
 8015ea6:	697b      	ldr	r3, [r7, #20]
 8015ea8:	68db      	ldr	r3, [r3, #12]
 8015eaa:	68db      	ldr	r3, [r3, #12]
 8015eac:	60fb      	str	r3, [r7, #12]
                        vTCPWindowFree( pxSegment );
 8015eae:	68f8      	ldr	r0, [r7, #12]
 8015eb0:	f7ff ffb6 	bl	8015e20 <vTCPWindowFree>
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8015eb4:	697b      	ldr	r3, [r7, #20]
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d1f4      	bne.n	8015ea6 <vTCPWindowDestroy+0x2e>
            for( xRound = 0; xRound < 2; xRound++ )
 8015ebc:	693b      	ldr	r3, [r7, #16]
 8015ebe:	3301      	adds	r3, #1
 8015ec0:	613b      	str	r3, [r7, #16]
 8015ec2:	693b      	ldr	r3, [r7, #16]
 8015ec4:	2b01      	cmp	r3, #1
 8015ec6:	ddde      	ble.n	8015e86 <vTCPWindowDestroy+0xe>
                    }
                }
            }
        }
 8015ec8:	bf00      	nop
 8015eca:	bf00      	nop
 8015ecc:	3718      	adds	r7, #24
 8015ece:	46bd      	mov	sp, r7
 8015ed0:	bd80      	pop	{r7, pc}
	...

08015ed4 <xTCPWindowCreate>:
                                 uint32_t ulRxWindowLength,
                                 uint32_t ulTxWindowLength,
                                 uint32_t ulAckNumber,
                                 uint32_t ulSequenceNumber,
                                 uint32_t ulMSS )
    {
 8015ed4:	b580      	push	{r7, lr}
 8015ed6:	b086      	sub	sp, #24
 8015ed8:	af00      	add	r7, sp, #0
 8015eda:	60f8      	str	r0, [r7, #12]
 8015edc:	60b9      	str	r1, [r7, #8]
 8015ede:	607a      	str	r2, [r7, #4]
 8015ee0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdPASS;
 8015ee2:	2301      	movs	r3, #1
 8015ee4:	617b      	str	r3, [r7, #20]

        /* Create and initialize a window. */

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( xTCPSegments == NULL )
 8015ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8015f5c <xTCPWindowCreate+0x88>)
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d102      	bne.n	8015ef4 <xTCPWindowCreate+0x20>
            {
                xReturn = prvCreateSectors();
 8015eee:	f7ff fe3d 	bl	8015b6c <prvCreateSectors>
 8015ef2:	6178      	str	r0, [r7, #20]
            }

            vListInitialise( &( pxWindow->xTxSegments ) );
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	3390      	adds	r3, #144	@ 0x90
 8015ef8:	4618      	mov	r0, r3
 8015efa:	f7ed fc65 	bl	80037c8 <vListInitialise>
            vListInitialise( &( pxWindow->xRxSegments ) );
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	33a4      	adds	r3, #164	@ 0xa4
 8015f02:	4618      	mov	r0, r3
 8015f04:	f7ed fc60 	bl	80037c8 <vListInitialise>

            vListInitialise( &( pxWindow->xPriorityQueue ) ); /* Priority queue: segments which must be sent immediately */
 8015f08:	68fb      	ldr	r3, [r7, #12]
 8015f0a:	3340      	adds	r3, #64	@ 0x40
 8015f0c:	4618      	mov	r0, r3
 8015f0e:	f7ed fc5b 	bl	80037c8 <vListInitialise>
            vListInitialise( &( pxWindow->xTxQueue ) );       /* Transmit queue: segments queued for transmission */
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	3354      	adds	r3, #84	@ 0x54
 8015f16:	4618      	mov	r0, r3
 8015f18:	f7ed fc56 	bl	80037c8 <vListInitialise>
            vListInitialise( &( pxWindow->xWaitQueue ) );     /* Waiting queue:  outstanding segments */
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	3368      	adds	r3, #104	@ 0x68
 8015f20:	4618      	mov	r0, r3
 8015f22:	f7ed fc51 	bl	80037c8 <vListInitialise>
        }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        if( xTCPWindowLoggingLevel != 0 )
 8015f26:	4b0e      	ldr	r3, [pc, #56]	@ (8015f60 <xTCPWindowCreate+0x8c>)
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d004      	beq.n	8015f38 <xTCPWindowCreate+0x64>
        {
            FreeRTOS_debug_printf( ( "xTCPWindowCreate: for WinLen = Rx/Tx: %u/%u\n",
 8015f2e:	687a      	ldr	r2, [r7, #4]
 8015f30:	68b9      	ldr	r1, [r7, #8]
 8015f32:	480c      	ldr	r0, [pc, #48]	@ (8015f64 <xTCPWindowCreate+0x90>)
 8015f34:	f00c fc36 	bl	80227a4 <lUDPLoggingPrintf>
                                     ( unsigned ) ulRxWindowLength, ( unsigned ) ulTxWindowLength ) );
        }

        pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	68ba      	ldr	r2, [r7, #8]
 8015f3c:	605a      	str	r2, [r3, #4]
        pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	687a      	ldr	r2, [r7, #4]
 8015f42:	609a      	str	r2, [r3, #8]

        vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 8015f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f46:	6a3a      	ldr	r2, [r7, #32]
 8015f48:	6839      	ldr	r1, [r7, #0]
 8015f4a:	68f8      	ldr	r0, [r7, #12]
 8015f4c:	f000 f80c 	bl	8015f68 <vTCPWindowInit>

        return xReturn;
 8015f50:	697b      	ldr	r3, [r7, #20]
    }
 8015f52:	4618      	mov	r0, r3
 8015f54:	3718      	adds	r7, #24
 8015f56:	46bd      	mov	sp, r7
 8015f58:	bd80      	pop	{r7, pc}
 8015f5a:	bf00      	nop
 8015f5c:	20001634 	.word	0x20001634
 8015f60:	2000164c 	.word	0x2000164c
 8015f64:	08027454 	.word	0x08027454

08015f68 <vTCPWindowInit>:
 */
    void vTCPWindowInit( TCPWindow_t * pxWindow,
                         uint32_t ulAckNumber,
                         uint32_t ulSequenceNumber,
                         uint32_t ulMSS )
    {
 8015f68:	b480      	push	{r7}
 8015f6a:	b087      	sub	sp, #28
 8015f6c:	af00      	add	r7, sp, #0
 8015f6e:	60f8      	str	r0, [r7, #12]
 8015f70:	60b9      	str	r1, [r7, #8]
 8015f72:	607a      	str	r2, [r7, #4]
 8015f74:	603b      	str	r3, [r7, #0]
        const int32_t l500ms = 500;
 8015f76:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8015f7a:	617b      	str	r3, [r7, #20]

        pxWindow->u.ulFlags = 0U;
 8015f7c:	68fb      	ldr	r3, [r7, #12]
 8015f7e:	2200      	movs	r2, #0
 8015f80:	601a      	str	r2, [r3, #0]
        pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 8015f82:	68fa      	ldr	r2, [r7, #12]
 8015f84:	7813      	ldrb	r3, [r2, #0]
 8015f86:	f043 0301 	orr.w	r3, r3, #1
 8015f8a:	7013      	strb	r3, [r2, #0]

        if( ulMSS != 0U )
 8015f8c:	683b      	ldr	r3, [r7, #0]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d024      	beq.n	8015fdc <vTCPWindowInit+0x74>
        {
            if( pxWindow->usMSSInit != 0U )
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	f8b3 30be 	ldrh.w	r3, [r3, #190]	@ 0xbe
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d004      	beq.n	8015fa6 <vTCPWindowInit+0x3e>
            {
                pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 8015f9c:	683b      	ldr	r3, [r7, #0]
 8015f9e:	b29a      	uxth	r2, r3
 8015fa0:	68fb      	ldr	r3, [r7, #12]
 8015fa2:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
            }

            if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0U ) )
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8015fac:	461a      	mov	r2, r3
 8015fae:	683b      	ldr	r3, [r7, #0]
 8015fb0:	4293      	cmp	r3, r2
 8015fb2:	d304      	bcc.n	8015fbe <vTCPWindowInit+0x56>
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d10e      	bne.n	8015fdc <vTCPWindowInit+0x74>
            {
                pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	685a      	ldr	r2, [r3, #4]
 8015fc2:	683b      	ldr	r3, [r7, #0]
 8015fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8015fc8:	683a      	ldr	r2, [r7, #0]
 8015fca:	fb03 f202 	mul.w	r2, r3, r2
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	605a      	str	r2, [r3, #4]
                pxWindow->usMSS = ( uint16_t ) ulMSS;
 8015fd2:	683b      	ldr	r3, [r7, #0]
 8015fd4:	b29a      	uxth	r2, r3
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
            pxWindow->xTxSegment.lMaxLength = ( int32_t ) pxWindow->usMSS;
        }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        /*Start with a timeout of 2 * 500 ms (1 sec). */
        pxWindow->lSRTT = l500ms;
 8015fdc:	68fb      	ldr	r3, [r7, #12]
 8015fde:	697a      	ldr	r2, [r7, #20]
 8015fe0:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Just for logging, to print relative sequence numbers. */
        pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	68ba      	ldr	r2, [r7, #8]
 8015fe6:	60da      	str	r2, [r3, #12]

        /* The segment asked for in the next transmission. */
        pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 8015fe8:	68fb      	ldr	r3, [r7, #12]
 8015fea:	68ba      	ldr	r2, [r7, #8]
 8015fec:	611a      	str	r2, [r3, #16]

        /* The right-hand side of the receive window. */
        pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	68ba      	ldr	r2, [r7, #8]
 8015ff2:	619a      	str	r2, [r3, #24]

        pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	687a      	ldr	r2, [r7, #4]
 8015ff8:	61da      	str	r2, [r3, #28]

        /* The segment asked for in next transmission. */
        pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 8015ffa:	68fb      	ldr	r3, [r7, #12]
 8015ffc:	687a      	ldr	r2, [r7, #4]
 8015ffe:	621a      	str	r2, [r3, #32]

        /* The sequence number given to the next outgoing byte to be added is
         * maintained by lTCPWindowTxAdd(). */
        pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	687a      	ldr	r2, [r7, #4]
 8016004:	635a      	str	r2, [r3, #52]	@ 0x34

        /* The right-hand side of the transmit window. */
        pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	687a      	ldr	r2, [r7, #4]
 801600a:	629a      	str	r2, [r3, #40]	@ 0x28
        pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	687a      	ldr	r2, [r7, #4]
 8016010:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
 8016012:	bf00      	nop
 8016014:	371c      	adds	r7, #28
 8016016:	46bd      	mov	sp, r7
 8016018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801601c:	4770      	bx	lr
	...

08016020 <xTCPWindowRxConfirm>:
 * @return The first segment descriptor involved, or NULL when no matching descriptor was found.
 */
        static TCPSegment_t * xTCPWindowRxConfirm( const TCPWindow_t * pxWindow,
                                                   uint32_t ulSequenceNumber,
                                                   uint32_t ulLength )
        {
 8016020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016022:	b08f      	sub	sp, #60	@ 0x3c
 8016024:	af04      	add	r7, sp, #16
 8016026:	60f8      	str	r0, [r7, #12]
 8016028:	60b9      	str	r1, [r7, #8]
 801602a:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxBest = NULL;
 801602c:	2300      	movs	r3, #0
 801602e:	627b      	str	r3, [r7, #36]	@ 0x24
            const ListItem_t * pxIterator;
            uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 8016030:	68ba      	ldr	r2, [r7, #8]
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	4413      	add	r3, r2
 8016036:	61fb      	str	r3, [r7, #28]

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 8016038:	68fb      	ldr	r3, [r7, #12]
 801603a:	33ac      	adds	r3, #172	@ 0xac
 801603c:	61bb      	str	r3, [r7, #24]
             * and (ulSequenceNumber+ulLength).  Normally none will be found, because
             * the next RX segment should have a sequence number equal to
             * '(ulSequenceNumber+ulLength)'. */

            /* Iterate through all RX segments that are stored: */
            for( pxIterator = listGET_NEXT( pxEnd );
 801603e:	69bb      	ldr	r3, [r7, #24]
 8016040:	685b      	ldr	r3, [r3, #4]
 8016042:	623b      	str	r3, [r7, #32]
 8016044:	e027      	b.n	8016096 <xTCPWindowRxConfirm+0x76>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8016046:	6a3b      	ldr	r3, [r7, #32]
 8016048:	68db      	ldr	r3, [r3, #12]
 801604a:	617b      	str	r3, [r7, #20]

                /* And see if there is a segment for which:
                 * 'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < 'ulNextSequenceNumber'
                 * If there are more matching segments, the one with the lowest sequence number
                 * shall be taken */
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 801604c:	697b      	ldr	r3, [r7, #20]
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	68b9      	ldr	r1, [r7, #8]
 8016052:	4618      	mov	r0, r3
 8016054:	f7ff fd25 	bl	8015aa2 <xSequenceGreaterThanOrEqual>
 8016058:	4603      	mov	r3, r0
 801605a:	2b00      	cmp	r3, #0
 801605c:	d018      	beq.n	8016090 <xTCPWindowRxConfirm+0x70>
                    ( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 801605e:	697b      	ldr	r3, [r7, #20]
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	69f9      	ldr	r1, [r7, #28]
 8016064:	4618      	mov	r0, r3
 8016066:	f7ff fcf0 	bl	8015a4a <xSequenceLessThan>
 801606a:	4603      	mov	r3, r0
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 801606c:	2b00      	cmp	r3, #0
 801606e:	d00f      	beq.n	8016090 <xTCPWindowRxConfirm+0x70>
                {
                    if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 8016070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016072:	2b00      	cmp	r3, #0
 8016074:	d00a      	beq.n	801608c <xTCPWindowRxConfirm+0x6c>
 8016076:	697b      	ldr	r3, [r7, #20]
 8016078:	681a      	ldr	r2, [r3, #0]
 801607a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	4619      	mov	r1, r3
 8016080:	4610      	mov	r0, r2
 8016082:	f7ff fce2 	bl	8015a4a <xSequenceLessThan>
 8016086:	4603      	mov	r3, r0
 8016088:	2b00      	cmp	r3, #0
 801608a:	d001      	beq.n	8016090 <xTCPWindowRxConfirm+0x70>
                    {
                        pxBest = pxSegment;
 801608c:	697b      	ldr	r3, [r7, #20]
 801608e:	627b      	str	r3, [r7, #36]	@ 0x24
                 pxIterator = listGET_NEXT( pxIterator ) )
 8016090:	6a3b      	ldr	r3, [r7, #32]
 8016092:	685b      	ldr	r3, [r3, #4]
 8016094:	623b      	str	r3, [r7, #32]
                 pxIterator != pxEnd;
 8016096:	6a3a      	ldr	r2, [r7, #32]
 8016098:	69bb      	ldr	r3, [r7, #24]
 801609a:	429a      	cmp	r2, r3
 801609c:	d1d3      	bne.n	8016046 <xTCPWindowRxConfirm+0x26>
                    }
                }
            }

            if( ( pxBest != NULL ) &&
 801609e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d030      	beq.n	8016106 <xTCPWindowRxConfirm+0xe6>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 80160a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160a6:	681b      	ldr	r3, [r3, #0]
            if( ( pxBest != NULL ) &&
 80160a8:	68ba      	ldr	r2, [r7, #8]
 80160aa:	429a      	cmp	r2, r3
 80160ac:	d104      	bne.n	80160b8 <xTCPWindowRxConfirm+0x98>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 80160ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160b0:	689a      	ldr	r2, [r3, #8]
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	429a      	cmp	r2, r3
 80160b6:	d026      	beq.n	8016106 <xTCPWindowRxConfirm+0xe6>
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxConfirm[%u]: search %u (+%u=%u) found %u (+%d=%u)\n",
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80160be:	461e      	mov	r6, r3
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	68db      	ldr	r3, [r3, #12]
 80160c4:	68ba      	ldr	r2, [r7, #8]
 80160c6:	1ad5      	subs	r5, r2, r3
 80160c8:	68ba      	ldr	r2, [r7, #8]
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	441a      	add	r2, r3
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	68db      	ldr	r3, [r3, #12]
 80160d2:	1ad3      	subs	r3, r2, r3
 80160d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80160d6:	6811      	ldr	r1, [r2, #0]
 80160d8:	68fa      	ldr	r2, [r7, #12]
 80160da:	68d2      	ldr	r2, [r2, #12]
 80160dc:	1a8a      	subs	r2, r1, r2
 80160de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80160e0:	6889      	ldr	r1, [r1, #8]
 80160e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80160e4:	6800      	ldr	r0, [r0, #0]
 80160e6:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80160e8:	68a4      	ldr	r4, [r4, #8]
 80160ea:	4404      	add	r4, r0
 80160ec:	68f8      	ldr	r0, [r7, #12]
 80160ee:	68c0      	ldr	r0, [r0, #12]
 80160f0:	1a20      	subs	r0, r4, r0
 80160f2:	9003      	str	r0, [sp, #12]
 80160f4:	9102      	str	r1, [sp, #8]
 80160f6:	9201      	str	r2, [sp, #4]
 80160f8:	9300      	str	r3, [sp, #0]
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	462a      	mov	r2, r5
 80160fe:	4631      	mov	r1, r6
 8016100:	4803      	ldr	r0, [pc, #12]	@ (8016110 <xTCPWindowRxConfirm+0xf0>)
 8016102:	f00c fb4f 	bl	80227a4 <lUDPLoggingPrintf>
                                         ( unsigned ) ( pxBest->ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) pxBest->lDataLength,
                                         ( unsigned ) ( pxBest->ulSequenceNumber + ( ( uint32_t ) pxBest->lDataLength ) - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            return pxBest;
 8016106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 8016108:	4618      	mov	r0, r3
 801610a:	372c      	adds	r7, #44	@ 0x2c
 801610c:	46bd      	mov	sp, r7
 801610e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016110:	08027484 	.word	0x08027484

08016114 <prvTCPWindowRx_ExpectedRX>:
 * @param[in] pxWindow The TCP sliding window data of the socket.
 * @param[in] ulLength The number of bytes that can be added.
 */
        static void prvTCPWindowRx_ExpectedRX( TCPWindow_t * pxWindow,
                                               uint32_t ulLength )
        {
 8016114:	b5b0      	push	{r4, r5, r7, lr}
 8016116:	b08a      	sub	sp, #40	@ 0x28
 8016118:	af04      	add	r7, sp, #16
 801611a:	6078      	str	r0, [r7, #4]
 801611c:	6039      	str	r1, [r7, #0]
            uint32_t ulSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	691b      	ldr	r3, [r3, #16]
 8016122:	613b      	str	r3, [r7, #16]
            uint32_t ulCurrentSequenceNumber = ulSequenceNumber + ulLength;
 8016124:	693a      	ldr	r2, [r7, #16]
 8016126:	683b      	ldr	r3, [r7, #0]
 8016128:	4413      	add	r3, r2
 801612a:	617b      	str	r3, [r7, #20]

            if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0U )
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8016132:	2b00      	cmp	r3, #0
 8016134:	d04e      	beq.n	80161d4 <prvTCPWindowRx_ExpectedRX+0xc0>
            {
                uint32_t ulSavedSequenceNumber = ulCurrentSequenceNumber;
 8016136:	697b      	ldr	r3, [r7, #20]
 8016138:	60fb      	str	r3, [r7, #12]
                 * If the server is forced to retransmit packets several time in a row it might send a batch of concatenated packet for speed.
                 * So we cannot rely on the packets between ulSequenceNumber and ulSequenceNumber + ulLength to be sequential and it is better to just
                 * clean them out. */
                do
                {
                    pxFound = xTCPWindowRxConfirm( pxWindow, ulSequenceNumber, ulLength );
 801613a:	683a      	ldr	r2, [r7, #0]
 801613c:	6939      	ldr	r1, [r7, #16]
 801613e:	6878      	ldr	r0, [r7, #4]
 8016140:	f7ff ff6e 	bl	8016020 <xTCPWindowRxConfirm>
 8016144:	60b8      	str	r0, [r7, #8]

                    if( pxFound != NULL )
 8016146:	68bb      	ldr	r3, [r7, #8]
 8016148:	2b00      	cmp	r3, #0
 801614a:	d002      	beq.n	8016152 <prvTCPWindowRx_ExpectedRX+0x3e>
                    {
                        /* Remove it because it will be passed to user directly. */
                        vTCPWindowFree( pxFound );
 801614c:	68b8      	ldr	r0, [r7, #8]
 801614e:	f7ff fe67 	bl	8015e20 <vTCPWindowFree>
                    }
                } while( pxFound != NULL );
 8016152:	68bb      	ldr	r3, [r7, #8]
 8016154:	2b00      	cmp	r3, #0
 8016156:	d1f0      	bne.n	801613a <prvTCPWindowRx_ExpectedRX+0x26>

                /*  Check for following segments that are already in the
                 * queue and increment ulCurrentSequenceNumber. */
                for( ; ; )
                {
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 8016158:	6979      	ldr	r1, [r7, #20]
 801615a:	6878      	ldr	r0, [r7, #4]
 801615c:	f7ff fd5e 	bl	8015c1c <xTCPWindowRxFind>
 8016160:	60b8      	str	r0, [r7, #8]

                    if( pxFound == NULL )
 8016162:	68bb      	ldr	r3, [r7, #8]
 8016164:	2b00      	cmp	r3, #0
 8016166:	d009      	beq.n	801617c <prvTCPWindowRx_ExpectedRX+0x68>
                    {
                        break;
                    }

                    ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 8016168:	68bb      	ldr	r3, [r7, #8]
 801616a:	689b      	ldr	r3, [r3, #8]
 801616c:	461a      	mov	r2, r3
 801616e:	697b      	ldr	r3, [r7, #20]
 8016170:	4413      	add	r3, r2
 8016172:	617b      	str	r3, [r7, #20]

                    /* As all packet below this one have been passed to the
                     * user it can be discarded. */
                    vTCPWindowFree( pxFound );
 8016174:	68b8      	ldr	r0, [r7, #8]
 8016176:	f7ff fe53 	bl	8015e20 <vTCPWindowFree>
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 801617a:	e7ed      	b.n	8016158 <prvTCPWindowRx_ExpectedRX+0x44>
                        break;
 801617c:	bf00      	nop
                }

                if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 801617e:	68fa      	ldr	r2, [r7, #12]
 8016180:	697b      	ldr	r3, [r7, #20]
 8016182:	429a      	cmp	r2, r3
 8016184:	d026      	beq.n	80161d4 <prvTCPWindowRx_ExpectedRX+0xc0>
                {
                    /*  After the current data-package, there is more data
                     * to be popped. */
                    pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 8016186:	697a      	ldr	r2, [r7, #20]
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	1ad2      	subs	r2, r2, r3
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	631a      	str	r2, [r3, #48]	@ 0x30

                    if( xTCPWindowLoggingLevel >= 1 )
 8016190:	4b14      	ldr	r3, [pc, #80]	@ (80161e4 <prvTCPWindowRx_ExpectedRX+0xd0>)
 8016192:	681b      	ldr	r3, [r3, #0]
 8016194:	2b00      	cmp	r3, #0
 8016196:	dd1d      	ble.n	80161d4 <prvTCPWindowRx_ExpectedRX+0xc0>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: retran %u (Found %u bytes at %u cnt %d)\n",
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 801619e:	461c      	mov	r4, r3
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80161a6:	461d      	mov	r5, r3
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	68db      	ldr	r3, [r3, #12]
 80161ac:	693a      	ldr	r2, [r7, #16]
 80161ae:	1ad0      	subs	r0, r2, r3
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80161b4:	687a      	ldr	r2, [r7, #4]
 80161b6:	68d2      	ldr	r2, [r2, #12]
 80161b8:	68f9      	ldr	r1, [r7, #12]
 80161ba:	1a8a      	subs	r2, r1, r2
 80161bc:	6879      	ldr	r1, [r7, #4]
 80161be:	f8d1 10a4 	ldr.w	r1, [r1, #164]	@ 0xa4
 80161c2:	9102      	str	r1, [sp, #8]
 80161c4:	9201      	str	r2, [sp, #4]
 80161c6:	9300      	str	r3, [sp, #0]
 80161c8:	4603      	mov	r3, r0
 80161ca:	462a      	mov	r2, r5
 80161cc:	4621      	mov	r1, r4
 80161ce:	4806      	ldr	r0, [pc, #24]	@ (80161e8 <prvTCPWindowRx_ExpectedRX+0xd4>)
 80161d0:	f00c fae8 	bl	80227a4 <lUDPLoggingPrintf>
                                                 ( int ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }
                }
            }

            pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	697a      	ldr	r2, [r7, #20]
 80161d8:	611a      	str	r2, [r3, #16]
        }
 80161da:	bf00      	nop
 80161dc:	3718      	adds	r7, #24
 80161de:	46bd      	mov	sp, r7
 80161e0:	bdb0      	pop	{r4, r5, r7, pc}
 80161e2:	bf00      	nop
 80161e4:	2000164c 	.word	0x2000164c
 80161e8:	080274c4 	.word	0x080274c4

080161ec <prvTCPWindowRx_UnexpectedRX>:
 *         offset ( from the head ) at which the data can be placed.
 */
        static int32_t prvTCPWindowRx_UnexpectedRX( TCPWindow_t * pxWindow,
                                                    uint32_t ulSequenceNumber,
                                                    uint32_t ulLength )
        {
 80161ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161ee:	b08f      	sub	sp, #60	@ 0x3c
 80161f0:	af04      	add	r7, sp, #16
 80161f2:	60f8      	str	r0, [r7, #12]
 80161f4:	60b9      	str	r1, [r7, #8]
 80161f6:	607a      	str	r2, [r7, #4]
            int32_t lReturn = -1;
 80161f8:	f04f 33ff 	mov.w	r3, #4294967295
 80161fc:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t ulLast = ulSequenceNumber + ulLength;
 80161fe:	68ba      	ldr	r2, [r7, #8]
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	4413      	add	r3, r2
 8016204:	623b      	str	r3, [r7, #32]
            uint32_t ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	691b      	ldr	r3, [r3, #16]
 801620a:	61fb      	str	r3, [r7, #28]
             * This is useful because subsequent packets will be SACK'd with
             * single one message
             */
            for( ; ; )
            {
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 801620c:	6a39      	ldr	r1, [r7, #32]
 801620e:	68f8      	ldr	r0, [r7, #12]
 8016210:	f7ff fd04 	bl	8015c1c <xTCPWindowRxFind>
 8016214:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 8016216:	69bb      	ldr	r3, [r7, #24]
 8016218:	2b00      	cmp	r3, #0
 801621a:	d006      	beq.n	801622a <prvTCPWindowRx_UnexpectedRX+0x3e>
                {
                    break;
                }

                ulLast += ( uint32_t ) pxFound->lDataLength;
 801621c:	69bb      	ldr	r3, [r7, #24]
 801621e:	689b      	ldr	r3, [r3, #8]
 8016220:	461a      	mov	r2, r3
 8016222:	6a3b      	ldr	r3, [r7, #32]
 8016224:	4413      	add	r3, r2
 8016226:	623b      	str	r3, [r7, #32]
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 8016228:	e7f0      	b.n	801620c <prvTCPWindowRx_UnexpectedRX+0x20>
                    break;
 801622a:	bf00      	nop
            }

            if( xTCPWindowLoggingLevel >= 1 )
 801622c:	4b45      	ldr	r3, [pc, #276]	@ (8016344 <prvTCPWindowRx_UnexpectedRX+0x158>)
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	2b00      	cmp	r3, #0
 8016232:	dd20      	ble.n	8016276 <prvTCPWindowRx_UnexpectedRX+0x8a>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%d,%d]: seqnr %u exp %u (dist %d) SACK to %u\n",
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 801623a:	461d      	mov	r5, r3
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016242:	461e      	mov	r6, r3
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	68db      	ldr	r3, [r3, #12]
 8016248:	68ba      	ldr	r2, [r7, #8]
 801624a:	1ad0      	subs	r0, r2, r3
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	68db      	ldr	r3, [r3, #12]
 8016250:	69fa      	ldr	r2, [r7, #28]
 8016252:	1ad3      	subs	r3, r2, r3
 8016254:	68b9      	ldr	r1, [r7, #8]
 8016256:	69fa      	ldr	r2, [r7, #28]
 8016258:	1a8a      	subs	r2, r1, r2
 801625a:	4614      	mov	r4, r2
 801625c:	68fa      	ldr	r2, [r7, #12]
 801625e:	68d2      	ldr	r2, [r2, #12]
 8016260:	6a39      	ldr	r1, [r7, #32]
 8016262:	1a8a      	subs	r2, r1, r2
 8016264:	9202      	str	r2, [sp, #8]
 8016266:	9401      	str	r4, [sp, #4]
 8016268:	9300      	str	r3, [sp, #0]
 801626a:	4603      	mov	r3, r0
 801626c:	4632      	mov	r2, r6
 801626e:	4629      	mov	r1, r5
 8016270:	4835      	ldr	r0, [pc, #212]	@ (8016348 <prvTCPWindowRx_UnexpectedRX+0x15c>)
 8016272:	f00c fa97 	bl	80227a4 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ulLast - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            /* Now prepare the SACK message.
             * Code OPTION_CODE_SINGLE_SACK already in network byte order. */
            pxWindow->ulOptionsData[ 0 ] = OPTION_CODE_SINGLE_SACK;
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	4a34      	ldr	r2, [pc, #208]	@ (801634c <prvTCPWindowRx_UnexpectedRX+0x160>)
 801627a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* First sequence number that we received. */
            pxWindow->ulOptionsData[ 1 ] = FreeRTOS_htonl( ulSequenceNumber );
 801627e:	68bb      	ldr	r3, [r7, #8]
 8016280:	061a      	lsls	r2, r3, #24
 8016282:	68bb      	ldr	r3, [r7, #8]
 8016284:	021b      	lsls	r3, r3, #8
 8016286:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801628a:	431a      	orrs	r2, r3
 801628c:	68bb      	ldr	r3, [r7, #8]
 801628e:	0a1b      	lsrs	r3, r3, #8
 8016290:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8016294:	431a      	orrs	r2, r3
 8016296:	68bb      	ldr	r3, [r7, #8]
 8016298:	0e1b      	lsrs	r3, r3, #24
 801629a:	431a      	orrs	r2, r3
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Last + 1 */
            pxWindow->ulOptionsData[ 2 ] = FreeRTOS_htonl( ulLast );
 80162a2:	6a3b      	ldr	r3, [r7, #32]
 80162a4:	061a      	lsls	r2, r3, #24
 80162a6:	6a3b      	ldr	r3, [r7, #32]
 80162a8:	021b      	lsls	r3, r3, #8
 80162aa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80162ae:	431a      	orrs	r2, r3
 80162b0:	6a3b      	ldr	r3, [r7, #32]
 80162b2:	0a1b      	lsrs	r3, r3, #8
 80162b4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80162b8:	431a      	orrs	r2, r3
 80162ba:	6a3b      	ldr	r3, [r7, #32]
 80162bc:	0e1b      	lsrs	r3, r3, #24
 80162be:	431a      	orrs	r2, r3
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

            /* Which make 12 (3*4) option bytes. */
            pxWindow->ucOptionLength = ( uint8_t ) ( 3U * sizeof( pxWindow->ulOptionsData[ 0 ] ) );
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	220c      	movs	r2, #12
 80162ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 80162ce:	68b9      	ldr	r1, [r7, #8]
 80162d0:	68f8      	ldr	r0, [r7, #12]
 80162d2:	f7ff fca3 	bl	8015c1c <xTCPWindowRxFind>
 80162d6:	61b8      	str	r0, [r7, #24]

            if( pxFound != NULL )
 80162d8:	69bb      	ldr	r3, [r7, #24]
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d12d      	bne.n	801633a <prvTCPWindowRx_UnexpectedRX+0x14e>
                 * again. */
                /* A negative value will be returned to indicate than error. */
            }
            else
            {
                pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 80162de:	687a      	ldr	r2, [r7, #4]
 80162e0:	2301      	movs	r3, #1
 80162e2:	68b9      	ldr	r1, [r7, #8]
 80162e4:	68f8      	ldr	r0, [r7, #12]
 80162e6:	f7ff fcc1 	bl	8015c6c <xTCPWindowNew>
 80162ea:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 80162ec:	69bb      	ldr	r3, [r7, #24]
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d104      	bne.n	80162fc <prvTCPWindowRx_UnexpectedRX+0x110>
                {
                    /* Can not send a SACK, because the segment cannot be
                     * stored. */
                    pxWindow->ucOptionLength = 0U;
 80162f2:	68fb      	ldr	r3, [r7, #12]
 80162f4:	2200      	movs	r2, #0
 80162f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80162fa:	e01e      	b.n	801633a <prvTCPWindowRx_UnexpectedRX+0x14e>
                }
                else
                {
                    uint32_t ulIntermediateResult;

                    if( xTCPWindowLoggingLevel != 0 )
 80162fc:	4b11      	ldr	r3, [pc, #68]	@ (8016344 <prvTCPWindowRx_UnexpectedRX+0x158>)
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	2b00      	cmp	r3, #0
 8016302:	d014      	beq.n	801632e <prvTCPWindowRx_UnexpectedRX+0x142>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: seqnr %u (cnt %u)\n",
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 801630a:	4619      	mov	r1, r3
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016312:	4618      	mov	r0, r3
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	68db      	ldr	r3, [r3, #12]
 8016318:	68ba      	ldr	r2, [r7, #8]
 801631a:	1ad2      	subs	r2, r2, r3
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8016322:	9300      	str	r3, [sp, #0]
 8016324:	4613      	mov	r3, r2
 8016326:	4602      	mov	r2, r0
 8016328:	4809      	ldr	r0, [pc, #36]	@ (8016350 <prvTCPWindowRx_UnexpectedRX+0x164>)
 801632a:	f00c fa3b 	bl	80227a4 <lUDPLoggingPrintf>
                                                 ( unsigned ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }

                    /* Return a positive value.  The packet may be accepted
                    * and stored but an earlier packet is still missing. */
                    ulIntermediateResult = ulSequenceNumber - ulCurrentSequenceNumber;
 801632e:	68ba      	ldr	r2, [r7, #8]
 8016330:	69fb      	ldr	r3, [r7, #28]
 8016332:	1ad3      	subs	r3, r2, r3
 8016334:	617b      	str	r3, [r7, #20]
                    lReturn = ( int32_t ) ulIntermediateResult;
 8016336:	697b      	ldr	r3, [r7, #20]
 8016338:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            return lReturn;
 801633a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 801633c:	4618      	mov	r0, r3
 801633e:	372c      	adds	r7, #44	@ 0x2c
 8016340:	46bd      	mov	sp, r7
 8016342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016344:	2000164c 	.word	0x2000164c
 8016348:	08027508 	.word	0x08027508
 801634c:	0a050101 	.word	0x0a050101
 8016350:	08027548 	.word	0x08027548

08016354 <lTCPWindowRxCheck>:
        int32_t lTCPWindowRxCheck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber,
                                   uint32_t ulLength,
                                   uint32_t ulSpace,
                                   uint32_t * pulSkipCount )
        {
 8016354:	b580      	push	{r7, lr}
 8016356:	b08c      	sub	sp, #48	@ 0x30
 8016358:	af00      	add	r7, sp, #0
 801635a:	60f8      	str	r0, [r7, #12]
 801635c:	60b9      	str	r1, [r7, #8]
 801635e:	607a      	str	r2, [r7, #4]
 8016360:	603b      	str	r3, [r7, #0]
            uint32_t ulCurrentSequenceNumber;
            uint32_t ulIntermediateResult;
            int32_t lReturn = -1;
 8016362:	f04f 33ff 	mov.w	r3, #4294967295
 8016366:	62fb      	str	r3, [r7, #44]	@ 0x2c
            int32_t lStartDistance;
            int32_t lLastDistance;
            uint32_t ulLast;
            uint32_t ulRxSequenceNumber = ulSequenceNumber;
 8016368:	68bb      	ldr	r3, [r7, #8]
 801636a:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t ulRxLength = ulLength;
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Only in an exceptional case, where a packet starts before
             * ulCurrentSequenceNumber, and ends after it, the skip-count
             * will be set. See below. */

            *( pulSkipCount ) = 0U;
 8016370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016372:	2200      	movs	r2, #0
 8016374:	601a      	str	r2, [r3, #0]

            ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8016376:	68fb      	ldr	r3, [r7, #12]
 8016378:	691b      	ldr	r3, [r3, #16]
 801637a:	623b      	str	r3, [r7, #32]

            ulLast = ulRxSequenceNumber + ulRxLength;
 801637c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801637e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016380:	4413      	add	r3, r2
 8016382:	61fb      	str	r3, [r7, #28]
            ulIntermediateResult = ulLast - ulCurrentSequenceNumber;
 8016384:	69fa      	ldr	r2, [r7, #28]
 8016386:	6a3b      	ldr	r3, [r7, #32]
 8016388:	1ad3      	subs	r3, r2, r3
 801638a:	61bb      	str	r3, [r7, #24]
            /* The cast from unsigned long to signed long is on purpose. */
            lLastDistance = ( int32_t ) ulIntermediateResult;
 801638c:	69bb      	ldr	r3, [r7, #24]
 801638e:	617b      	str	r3, [r7, #20]

            ulIntermediateResult = ulRxSequenceNumber - ulCurrentSequenceNumber;
 8016390:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016392:	6a3b      	ldr	r3, [r7, #32]
 8016394:	1ad3      	subs	r3, r2, r3
 8016396:	61bb      	str	r3, [r7, #24]
            lStartDistance = ( int32_t ) ulIntermediateResult;
 8016398:	69bb      	ldr	r3, [r7, #24]
 801639a:	613b      	str	r3, [r7, #16]

            if( ( lStartDistance < 0 ) && ( lLastDistance > 0 ) )
 801639c:	693b      	ldr	r3, [r7, #16]
 801639e:	2b00      	cmp	r3, #0
 80163a0:	da18      	bge.n	80163d4 <lTCPWindowRxCheck+0x80>
 80163a2:	697b      	ldr	r3, [r7, #20]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	dd15      	ble.n	80163d4 <lTCPWindowRxCheck+0x80>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Received +%u bytes for %u, only using %d\n",
 80163a8:	68fb      	ldr	r3, [r7, #12]
 80163aa:	68db      	ldr	r3, [r3, #12]
 80163ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80163ae:	1ad2      	subs	r2, r2, r3
 80163b0:	697b      	ldr	r3, [r7, #20]
 80163b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80163b4:	4824      	ldr	r0, [pc, #144]	@ (8016448 <lTCPWindowRxCheck+0xf4>)
 80163b6:	f00c f9f5 	bl	80227a4 <lUDPLoggingPrintf>
                                         ( unsigned ) ulRxLength,
                                         ( unsigned ) ( ulRxSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) lLastDistance ) );
                /* Increase the sequence number, decrease the length. */
                ulRxSequenceNumber += ( uint32_t ) ( -lStartDistance );
 80163ba:	693b      	ldr	r3, [r7, #16]
 80163bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80163be:	1ad3      	subs	r3, r2, r3
 80163c0:	62bb      	str	r3, [r7, #40]	@ 0x28
                ulRxLength += ( uint32_t ) lStartDistance;
 80163c2:	693b      	ldr	r3, [r7, #16]
 80163c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80163c6:	4413      	add	r3, r2
 80163c8:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Tell the caller that the first 'pulSkipCount' bytes don't
                 * need to be stored. */
                *( pulSkipCount ) = ( uint32_t ) ( -lStartDistance );
 80163ca:	693b      	ldr	r3, [r7, #16]
 80163cc:	425b      	negs	r3, r3
 80163ce:	461a      	mov	r2, r3
 80163d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80163d2:	601a      	str	r2, [r3, #0]
            }

            /* For Selective Ack (SACK), used when out-of-sequence data come in. */
            pxWindow->ucOptionLength = 0U;
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	2200      	movs	r2, #0
 80163d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            /* Non-zero if TCP-windows contains data which must be popped. */
            pxWindow->ulUserDataLength = 0U;
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	2200      	movs	r2, #0
 80163e0:	631a      	str	r2, [r3, #48]	@ 0x30

            if( ulCurrentSequenceNumber == ulRxSequenceNumber )
 80163e2:	6a3a      	ldr	r2, [r7, #32]
 80163e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163e6:	429a      	cmp	r2, r3
 80163e8:	d110      	bne.n	801640c <lTCPWindowRxCheck+0xb8>
            {
                /* This is the packet with the lowest sequence number we're waiting
                 * for.  It can be passed directly to the rx stream. */
                if( ulRxLength > ulSpace )
 80163ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80163ec:	683b      	ldr	r3, [r7, #0]
 80163ee:	429a      	cmp	r2, r3
 80163f0:	d905      	bls.n	80163fe <lTCPWindowRxCheck+0xaa>
                {
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %u bytes, due to lack of space (%u)\n", ( unsigned ) ulRxLength, ( unsigned ) ulSpace ) );
 80163f2:	683a      	ldr	r2, [r7, #0]
 80163f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80163f6:	4815      	ldr	r0, [pc, #84]	@ (801644c <lTCPWindowRxCheck+0xf8>)
 80163f8:	f00c f9d4 	bl	80227a4 <lUDPLoggingPrintf>
 80163fc:	e01f      	b.n	801643e <lTCPWindowRxCheck+0xea>
                }
                else
                {
                    /* Packet was expected, may be passed directly to the socket
                     * buffer or application.  Store the packet at offset 0. */
                    prvTCPWindowRx_ExpectedRX( pxWindow, ulRxLength );
 80163fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016400:	68f8      	ldr	r0, [r7, #12]
 8016402:	f7ff fe87 	bl	8016114 <prvTCPWindowRx_ExpectedRX>
                    lReturn = 0;
 8016406:	2300      	movs	r3, #0
 8016408:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801640a:	e018      	b.n	801643e <lTCPWindowRxCheck+0xea>
                }
            }
            else if( ulCurrentSequenceNumber == ( ulRxSequenceNumber + 1U ) )
 801640c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801640e:	3301      	adds	r3, #1
 8016410:	6a3a      	ldr	r2, [r7, #32]
 8016412:	429a      	cmp	r2, r3
 8016414:	d013      	beq.n	801643e <lTCPWindowRxCheck+0xea>
                 * window so it can be stored. */

                /*  An "out-of-sequence" segment was received, must have missed one.
                 * Prepare a SACK (Selective ACK). */

                if( lLastDistance <= 0 )
 8016416:	697b      	ldr	r3, [r7, #20]
 8016418:	2b00      	cmp	r3, #0
 801641a:	dd10      	ble.n	801643e <lTCPWindowRxCheck+0xea>
                {
                    /* An earlier packet has been received, must be a retransmission of a
                     * packet that has been accepted already.  No need to send out a
                     * Selective ACK (SACK). */
                }
                else if( lLastDistance > ( int32_t ) ulSpace )
 801641c:	683b      	ldr	r3, [r7, #0]
 801641e:	697a      	ldr	r2, [r7, #20]
 8016420:	429a      	cmp	r2, r3
 8016422:	dd06      	ble.n	8016432 <lTCPWindowRxCheck+0xde>
                {
                    /* The new segment is ahead of rx.ulCurrentSequenceNumber.  The
                     * sequence number of this packet is too far ahead, ignore it. */
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %d+%u bytes, due to lack of space (%u)\n",
 8016424:	683b      	ldr	r3, [r7, #0]
 8016426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016428:	6979      	ldr	r1, [r7, #20]
 801642a:	4809      	ldr	r0, [pc, #36]	@ (8016450 <lTCPWindowRxCheck+0xfc>)
 801642c:	f00c f9ba 	bl	80227a4 <lUDPLoggingPrintf>
 8016430:	e005      	b.n	801643e <lTCPWindowRxCheck+0xea>
                                             ( unsigned ) ulRxLength,
                                             ( unsigned ) ulSpace ) );
                }
                else
                {
                    lReturn = prvTCPWindowRx_UnexpectedRX( pxWindow, ulRxSequenceNumber, ulRxLength );
 8016432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016434:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016436:	68f8      	ldr	r0, [r7, #12]
 8016438:	f7ff fed8 	bl	80161ec <prvTCPWindowRx_UnexpectedRX>
 801643c:	62f8      	str	r0, [r7, #44]	@ 0x2c
                }
            }

            return lReturn;
 801643e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 8016440:	4618      	mov	r0, r3
 8016442:	3730      	adds	r7, #48	@ 0x30
 8016444:	46bd      	mov	sp, r7
 8016446:	bd80      	pop	{r7, pc}
 8016448:	08027578 	.word	0x08027578
 801644c:	080275b8 	.word	0x080275b8
 8016450:	080275f8 	.word	0x080275f8

08016454 <lTCPIncrementTxPosition>:
 * @return The new incremented position, or "( lPosition + lCount ) % lMax".
 */
        static int32_t lTCPIncrementTxPosition( int32_t lPosition,
                                                int32_t lMax,
                                                int32_t lCount )
        {
 8016454:	b480      	push	{r7}
 8016456:	b087      	sub	sp, #28
 8016458:	af00      	add	r7, sp, #0
 801645a:	60f8      	str	r0, [r7, #12]
 801645c:	60b9      	str	r1, [r7, #8]
 801645e:	607a      	str	r2, [r7, #4]
            int32_t lReturn;


            /* +TCP stores data in circular buffers.  Calculate the next position to
             * store. */
            lReturn = lPosition + lCount;
 8016460:	68fa      	ldr	r2, [r7, #12]
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	4413      	add	r3, r2
 8016466:	617b      	str	r3, [r7, #20]

            if( lReturn >= lMax )
 8016468:	697a      	ldr	r2, [r7, #20]
 801646a:	68bb      	ldr	r3, [r7, #8]
 801646c:	429a      	cmp	r2, r3
 801646e:	db03      	blt.n	8016478 <lTCPIncrementTxPosition+0x24>
            {
                lReturn -= lMax;
 8016470:	697a      	ldr	r2, [r7, #20]
 8016472:	68bb      	ldr	r3, [r7, #8]
 8016474:	1ad3      	subs	r3, r2, r3
 8016476:	617b      	str	r3, [r7, #20]
            }

            return lReturn;
 8016478:	697b      	ldr	r3, [r7, #20]
        }
 801647a:	4618      	mov	r0, r3
 801647c:	371c      	adds	r7, #28
 801647e:	46bd      	mov	sp, r7
 8016480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016484:	4770      	bx	lr
	...

08016488 <prvTCPWindowTxAdd_FrontSegment>:
 * @return lToWrite: the number of bytes added to the segment.
 */
        static int32_t prvTCPWindowTxAdd_FrontSegment( TCPWindow_t * pxWindow,
                                                       TCPSegment_t * pxSegment,
                                                       int32_t lBytesLeft )
        {
 8016488:	b580      	push	{r7, lr}
 801648a:	b088      	sub	sp, #32
 801648c:	af02      	add	r7, sp, #8
 801648e:	60f8      	str	r0, [r7, #12]
 8016490:	60b9      	str	r1, [r7, #8]
 8016492:	607a      	str	r2, [r7, #4]
            int32_t lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 8016494:	68bb      	ldr	r3, [r7, #8]
 8016496:	685a      	ldr	r2, [r3, #4]
 8016498:	68bb      	ldr	r3, [r7, #8]
 801649a:	689b      	ldr	r3, [r3, #8]
 801649c:	1ad3      	subs	r3, r2, r3
 801649e:	4619      	mov	r1, r3
 80164a0:	6878      	ldr	r0, [r7, #4]
 80164a2:	f7f4 fce7 	bl	800ae74 <FreeRTOS_min_int32>
 80164a6:	6178      	str	r0, [r7, #20]

            pxSegment->lDataLength += lToWrite;
 80164a8:	68bb      	ldr	r3, [r7, #8]
 80164aa:	689a      	ldr	r2, [r3, #8]
 80164ac:	697b      	ldr	r3, [r7, #20]
 80164ae:	441a      	add	r2, r3
 80164b0:	68bb      	ldr	r3, [r7, #8]
 80164b2:	609a      	str	r2, [r3, #8]

            if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 80164b4:	68bb      	ldr	r3, [r7, #8]
 80164b6:	689a      	ldr	r2, [r3, #8]
 80164b8:	68bb      	ldr	r3, [r7, #8]
 80164ba:	685b      	ldr	r3, [r3, #4]
 80164bc:	429a      	cmp	r2, r3
 80164be:	db02      	blt.n	80164c6 <prvTCPWindowTxAdd_FrontSegment+0x3e>
            {
                /* This segment is full, don't add more bytes. */
                pxWindow->pxHeadSegment = NULL;
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	2200      	movs	r2, #0
 80164c4:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            /* ulNextTxSequenceNumber is the sequence number of the next byte to
             * be stored for transmission. */
            pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80164ca:	697b      	ldr	r3, [r7, #20]
 80164cc:	441a      	add	r2, r3
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Some detailed logging, for those who're interested. */
            if( ( xTCPWindowLoggingLevel >= 2 ) && ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 80164d2:	4b12      	ldr	r3, [pc, #72]	@ (801651c <prvTCPWindowTxAdd_FrontSegment+0x94>)
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	2b01      	cmp	r3, #1
 80164d8:	dd1a      	ble.n	8016510 <prvTCPWindowTxAdd_FrontSegment+0x88>
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80164e0:	2b17      	cmp	r3, #23
 80164e2:	d015      	beq.n	8016510 <prvTCPWindowTxAdd_FrontSegment+0x88>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Add %4d bytes for seqNr %u len %4d (nxt %u) pos %d\n",
 80164e4:	68bb      	ldr	r3, [r7, #8]
 80164e6:	681a      	ldr	r2, [r3, #0]
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	69db      	ldr	r3, [r3, #28]
 80164ec:	1ad1      	subs	r1, r2, r3
 80164ee:	68bb      	ldr	r3, [r7, #8]
 80164f0:	6898      	ldr	r0, [r3, #8]
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80164f6:	68fb      	ldr	r3, [r7, #12]
 80164f8:	69db      	ldr	r3, [r3, #28]
 80164fa:	1ad3      	subs	r3, r2, r3
 80164fc:	68ba      	ldr	r2, [r7, #8]
 80164fe:	68d2      	ldr	r2, [r2, #12]
 8016500:	9201      	str	r2, [sp, #4]
 8016502:	9300      	str	r3, [sp, #0]
 8016504:	4603      	mov	r3, r0
 8016506:	460a      	mov	r2, r1
 8016508:	6879      	ldr	r1, [r7, #4]
 801650a:	4805      	ldr	r0, [pc, #20]	@ (8016520 <prvTCPWindowTxAdd_FrontSegment+0x98>)
 801650c:	f00c f94a 	bl	80227a4 <lUDPLoggingPrintf>
                                         ( int ) pxSegment->lDataLength,
                                         ( unsigned ) ( pxWindow->ulNextTxSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( int ) pxSegment->lStreamPos ) );
            }

            return lToWrite;
 8016510:	697b      	ldr	r3, [r7, #20]
        }
 8016512:	4618      	mov	r0, r3
 8016514:	3718      	adds	r7, #24
 8016516:	46bd      	mov	sp, r7
 8016518:	bd80      	pop	{r7, pc}
 801651a:	bf00      	nop
 801651c:	2000164c 	.word	0x2000164c
 8016520:	0802763c 	.word	0x0802763c

08016524 <lTCPWindowTxAdd>:
 */
        int32_t lTCPWindowTxAdd( TCPWindow_t * pxWindow,
                                 uint32_t ulLength,
                                 int32_t lPosition,
                                 int32_t lMax )
        {
 8016524:	b580      	push	{r7, lr}
 8016526:	b08a      	sub	sp, #40	@ 0x28
 8016528:	af00      	add	r7, sp, #0
 801652a:	60f8      	str	r0, [r7, #12]
 801652c:	60b9      	str	r1, [r7, #8]
 801652e:	607a      	str	r2, [r7, #4]
 8016530:	603b      	str	r3, [r7, #0]
            int32_t lBytesLeft = ( int32_t ) ulLength;
 8016532:	68bb      	ldr	r3, [r7, #8]
 8016534:	627b      	str	r3, [r7, #36]	@ 0x24
            int32_t lToWrite;
            int32_t lDone = 0;
 8016536:	2300      	movs	r3, #0
 8016538:	623b      	str	r3, [r7, #32]
            int32_t lBufferIndex = lPosition;
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	61fb      	str	r3, [r7, #28]
            TCPSegment_t * pxSegment = pxWindow->pxHeadSegment;
 801653e:	68fb      	ldr	r3, [r7, #12]
 8016540:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016542:	61bb      	str	r3, [r7, #24]

            /* Puts a message in the Tx-window (after buffer size has been
             * verified). */
            if( ( pxSegment != NULL ) &&
 8016544:	69bb      	ldr	r3, [r7, #24]
 8016546:	2b00      	cmp	r3, #0
 8016548:	d073      	beq.n	8016632 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 801654a:	69bb      	ldr	r3, [r7, #24]
 801654c:	689a      	ldr	r2, [r3, #8]
 801654e:	69bb      	ldr	r3, [r7, #24]
 8016550:	685b      	ldr	r3, [r3, #4]
            if( ( pxSegment != NULL ) &&
 8016552:	429a      	cmp	r2, r3
 8016554:	da6d      	bge.n	8016632 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 8016556:	69bb      	ldr	r3, [r7, #24]
 8016558:	7d9b      	ldrb	r3, [r3, #22]
 801655a:	f003 0301 	and.w	r3, r3, #1
 801655e:	b2db      	uxtb	r3, r3
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 8016560:	2b00      	cmp	r3, #0
 8016562:	d166      	bne.n	8016632 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->lDataLength != 0 ) )
 8016564:	69bb      	ldr	r3, [r7, #24]
 8016566:	689b      	ldr	r3, [r3, #8]
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 8016568:	2b00      	cmp	r3, #0
 801656a:	d062      	beq.n	8016632 <lTCPWindowTxAdd+0x10e>
            {
                lToWrite = prvTCPWindowTxAdd_FrontSegment( pxWindow, pxSegment, lBytesLeft );
 801656c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801656e:	69b9      	ldr	r1, [r7, #24]
 8016570:	68f8      	ldr	r0, [r7, #12]
 8016572:	f7ff ff89 	bl	8016488 <prvTCPWindowTxAdd_FrontSegment>
 8016576:	6178      	str	r0, [r7, #20]
                lBytesLeft -= lToWrite;
 8016578:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801657a:	697b      	ldr	r3, [r7, #20]
 801657c:	1ad3      	subs	r3, r2, r3
 801657e:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Increased the return value. */
                lDone += lToWrite;
 8016580:	6a3a      	ldr	r2, [r7, #32]
 8016582:	697b      	ldr	r3, [r7, #20]
 8016584:	4413      	add	r3, r2
 8016586:	623b      	str	r3, [r7, #32]

                /* Calculate the next position in the circular data buffer, knowing
                 * its maximum length 'lMax'. */
                lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 8016588:	697a      	ldr	r2, [r7, #20]
 801658a:	6839      	ldr	r1, [r7, #0]
 801658c:	69f8      	ldr	r0, [r7, #28]
 801658e:	f7ff ff61 	bl	8016454 <lTCPIncrementTxPosition>
 8016592:	61f8      	str	r0, [r7, #28]
            }

            while( lBytesLeft > 0 )
 8016594:	e04d      	b.n	8016632 <lTCPWindowTxAdd+0x10e>
            {
                /* The current transmission segment is full, create new segments as
                 * needed. */
                pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, ( int32_t ) pxWindow->usMSS );
 8016596:	68fb      	ldr	r3, [r7, #12]
 8016598:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801659a:	68fb      	ldr	r3, [r7, #12]
 801659c:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 80165a0:	461a      	mov	r2, r3
 80165a2:	2300      	movs	r3, #0
 80165a4:	68f8      	ldr	r0, [r7, #12]
 80165a6:	f7ff fb61 	bl	8015c6c <xTCPWindowNew>
 80165aa:	61b8      	str	r0, [r7, #24]

                if( pxSegment != NULL )
 80165ac:	69bb      	ldr	r3, [r7, #24]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d037      	beq.n	8016622 <lTCPWindowTxAdd+0xfe>
                {
                    /* Store as many as needed, but no more than the maximum
                     * (MSS). */
                    lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 80165b2:	69bb      	ldr	r3, [r7, #24]
 80165b4:	685b      	ldr	r3, [r3, #4]
 80165b6:	4619      	mov	r1, r3
 80165b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80165ba:	f7f4 fc5b 	bl	800ae74 <FreeRTOS_min_int32>
 80165be:	6178      	str	r0, [r7, #20]

                    pxSegment->lDataLength = lToWrite;
 80165c0:	69bb      	ldr	r3, [r7, #24]
 80165c2:	697a      	ldr	r2, [r7, #20]
 80165c4:	609a      	str	r2, [r3, #8]
                    pxSegment->lStreamPos = lBufferIndex;
 80165c6:	69bb      	ldr	r3, [r7, #24]
 80165c8:	69fa      	ldr	r2, [r7, #28]
 80165ca:	60da      	str	r2, [r3, #12]
                    lBytesLeft -= lToWrite;
 80165cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80165ce:	697b      	ldr	r3, [r7, #20]
 80165d0:	1ad3      	subs	r3, r2, r3
 80165d2:	627b      	str	r3, [r7, #36]	@ 0x24
                    lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 80165d4:	697a      	ldr	r2, [r7, #20]
 80165d6:	6839      	ldr	r1, [r7, #0]
 80165d8:	69f8      	ldr	r0, [r7, #28]
 80165da:	f7ff ff3b 	bl	8016454 <lTCPIncrementTxPosition>
 80165de:	61f8      	str	r0, [r7, #28]
                    pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80165e4:	697b      	ldr	r3, [r7, #20]
 80165e6:	441a      	add	r2, r3
 80165e8:	68fb      	ldr	r3, [r7, #12]
 80165ea:	635a      	str	r2, [r3, #52]	@ 0x34
                    lDone += lToWrite;
 80165ec:	6a3a      	ldr	r2, [r7, #32]
 80165ee:	697b      	ldr	r3, [r7, #20]
 80165f0:	4413      	add	r3, r2
 80165f2:	623b      	str	r3, [r7, #32]

                    /* Link this segment in the Tx-Queue. */
                    vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 80165fa:	69bb      	ldr	r3, [r7, #24]
 80165fc:	3318      	adds	r3, #24
 80165fe:	4619      	mov	r1, r3
 8016600:	4610      	mov	r0, r2
 8016602:	f7ff fa63 	bl	8015acc <vListInsertFifo>

                    /* Let 'pxHeadSegment' point to this segment if there is still
                     * space. */
                    if( pxSegment->lDataLength < pxSegment->lMaxLength )
 8016606:	69bb      	ldr	r3, [r7, #24]
 8016608:	689a      	ldr	r2, [r3, #8]
 801660a:	69bb      	ldr	r3, [r7, #24]
 801660c:	685b      	ldr	r3, [r3, #4]
 801660e:	429a      	cmp	r2, r3
 8016610:	da03      	bge.n	801661a <lTCPWindowTxAdd+0xf6>
                    {
                        pxWindow->pxHeadSegment = pxSegment;
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	69ba      	ldr	r2, [r7, #24]
 8016616:	67da      	str	r2, [r3, #124]	@ 0x7c
 8016618:	e00b      	b.n	8016632 <lTCPWindowTxAdd+0x10e>
                    }
                    else
                    {
                        pxWindow->pxHeadSegment = NULL;
 801661a:	68fb      	ldr	r3, [r7, #12]
 801661c:	2200      	movs	r2, #0
 801661e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8016620:	e007      	b.n	8016632 <lTCPWindowTxAdd+0x10e>
                }
                else
                {
                    /* A sever situation: running out of segments for transmission.
                     * No more data can be sent at the moment. */
                    if( lDone != 0 )
 8016622:	6a3b      	ldr	r3, [r7, #32]
 8016624:	2b00      	cmp	r3, #0
 8016626:	d008      	beq.n	801663a <lTCPWindowTxAdd+0x116>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %d bytes)\n", ( int ) lBytesLeft ) );
 8016628:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801662a:	4807      	ldr	r0, [pc, #28]	@ (8016648 <lTCPWindowTxAdd+0x124>)
 801662c:	f00c f8ba 	bl	80227a4 <lUDPLoggingPrintf>
                    }

                    break;
 8016630:	e003      	b.n	801663a <lTCPWindowTxAdd+0x116>
            while( lBytesLeft > 0 )
 8016632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016634:	2b00      	cmp	r3, #0
 8016636:	dcae      	bgt.n	8016596 <lTCPWindowTxAdd+0x72>
 8016638:	e000      	b.n	801663c <lTCPWindowTxAdd+0x118>
                    break;
 801663a:	bf00      	nop
                }
            }

            return lDone;
 801663c:	6a3b      	ldr	r3, [r7, #32]
        }
 801663e:	4618      	mov	r0, r3
 8016640:	3728      	adds	r7, #40	@ 0x28
 8016642:	46bd      	mov	sp, r7
 8016644:	bd80      	pop	{r7, pc}
 8016646:	bf00      	nop
 8016648:	08027684 	.word	0x08027684

0801664c <xTCPWindowTxDone>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if there are no more outstanding Tx segments, else pdFALSE.
 */
        BaseType_t xTCPWindowTxDone( const TCPWindow_t * pxWindow )
        {
 801664c:	b480      	push	{r7}
 801664e:	b083      	sub	sp, #12
 8016650:	af00      	add	r7, sp, #0
 8016652:	6078      	str	r0, [r7, #4]
            return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments ) );
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801665a:	2b00      	cmp	r3, #0
 801665c:	d101      	bne.n	8016662 <xTCPWindowTxDone+0x16>
 801665e:	2301      	movs	r3, #1
 8016660:	e000      	b.n	8016664 <xTCPWindowTxDone+0x18>
 8016662:	2300      	movs	r3, #0
        }
 8016664:	4618      	mov	r0, r3
 8016666:	370c      	adds	r7, #12
 8016668:	46bd      	mov	sp, r7
 801666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801666e:	4770      	bx	lr

08016670 <prvTCPWindowTxHasSpace>:
 *
 * @return True if the peer has space in it window to receive more data.
 */
        static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t const * pxWindow,
                                                  uint32_t ulWindowSize )
        {
 8016670:	b580      	push	{r7, lr}
 8016672:	b086      	sub	sp, #24
 8016674:	af00      	add	r7, sp, #0
 8016676:	6078      	str	r0, [r7, #4]
 8016678:	6039      	str	r1, [r7, #0]
            uint32_t ulNettSize;

            /* This function will look if there is new transmission data.  It will
             * return true if there is data to be sent. */

            pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	3354      	adds	r3, #84	@ 0x54
 801667e:	4618      	mov	r0, r3
 8016680:	f7ff fbb5 	bl	8015dee <xTCPWindowPeekHead>
 8016684:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	2b00      	cmp	r3, #0
 801668a:	d102      	bne.n	8016692 <prvTCPWindowTxHasSpace+0x22>
            {
                xHasSpace = pdFALSE;
 801668c:	2300      	movs	r3, #0
 801668e:	613b      	str	r3, [r7, #16]
 8016690:	e02f      	b.n	80166f2 <prvTCPWindowTxHasSpace+0x82>
            }
            else
            {
                /* How much data is outstanding, i.e. how much data has been sent
                 * but not yet acknowledged ? */
                if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	6a1b      	ldr	r3, [r3, #32]
 801669a:	429a      	cmp	r2, r3
 801669c:	d306      	bcc.n	80166ac <prvTCPWindowTxHasSpace+0x3c>
                {
                    ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	6a1b      	ldr	r3, [r3, #32]
 80166a6:	1ad3      	subs	r3, r2, r3
 80166a8:	617b      	str	r3, [r7, #20]
 80166aa:	e001      	b.n	80166b0 <prvTCPWindowTxHasSpace+0x40>
                }
                else
                {
                    ulTxOutstanding = 0U;
 80166ac:	2300      	movs	r3, #0
 80166ae:	617b      	str	r3, [r7, #20]
                }

                /* Subtract this from the peer's space. */
                ulNettSize = ulWindowSize - FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 80166b0:	6979      	ldr	r1, [r7, #20]
 80166b2:	6838      	ldr	r0, [r7, #0]
 80166b4:	f7f4 fbee 	bl	800ae94 <FreeRTOS_min_uint32>
 80166b8:	4602      	mov	r2, r0
 80166ba:	683b      	ldr	r3, [r7, #0]
 80166bc:	1a9b      	subs	r3, r3, r2
 80166be:	60bb      	str	r3, [r7, #8]

                /* See if the next segment may be sent. */
                if( ulNettSize >= ( uint32_t ) pxSegment->lDataLength )
 80166c0:	68fb      	ldr	r3, [r7, #12]
 80166c2:	689b      	ldr	r3, [r3, #8]
 80166c4:	461a      	mov	r2, r3
 80166c6:	68bb      	ldr	r3, [r7, #8]
 80166c8:	4293      	cmp	r3, r2
 80166ca:	d302      	bcc.n	80166d2 <prvTCPWindowTxHasSpace+0x62>
                {
                    xHasSpace = pdTRUE;
 80166cc:	2301      	movs	r3, #1
 80166ce:	613b      	str	r3, [r7, #16]
 80166d0:	e001      	b.n	80166d6 <prvTCPWindowTxHasSpace+0x66>
                }
                else
                {
                    xHasSpace = pdFALSE;
 80166d2:	2300      	movs	r3, #0
 80166d4:	613b      	str	r3, [r7, #16]

                /* If 'xHasSpace', it looks like the peer has at least space for 1
                 * more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
                 * limitation of the transmission window (in case of many resends it
                 * may be decreased). */
                if( ( ulTxOutstanding != 0U ) &&
 80166d6:	697b      	ldr	r3, [r7, #20]
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d00a      	beq.n	80166f2 <prvTCPWindowTxHasSpace+0x82>
                    ( pxWindow->xSize.ulTxWindowLength <
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	689a      	ldr	r2, [r3, #8]
                      ( ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) ) )
 80166e0:	68fb      	ldr	r3, [r7, #12]
 80166e2:	689b      	ldr	r3, [r3, #8]
 80166e4:	4619      	mov	r1, r3
 80166e6:	697b      	ldr	r3, [r7, #20]
 80166e8:	440b      	add	r3, r1
                if( ( ulTxOutstanding != 0U ) &&
 80166ea:	429a      	cmp	r2, r3
 80166ec:	d201      	bcs.n	80166f2 <prvTCPWindowTxHasSpace+0x82>
                {
                    xHasSpace = pdFALSE;
 80166ee:	2300      	movs	r3, #0
 80166f0:	613b      	str	r3, [r7, #16]
                }
            }

            return xHasSpace;
 80166f2:	693b      	ldr	r3, [r7, #16]
        }
 80166f4:	4618      	mov	r0, r3
 80166f6:	3718      	adds	r7, #24
 80166f8:	46bd      	mov	sp, r7
 80166fa:	bd80      	pop	{r7, pc}

080166fc <xTCPWindowTxHasData>:
 * @return pdTRUE if there is Tx data that can be sent, else pdFALSE.
 */
        BaseType_t xTCPWindowTxHasData( TCPWindow_t const * pxWindow,
                                        uint32_t ulWindowSize,
                                        TickType_t * pulDelay )
        {
 80166fc:	b580      	push	{r7, lr}
 80166fe:	b08a      	sub	sp, #40	@ 0x28
 8016700:	af00      	add	r7, sp, #0
 8016702:	60f8      	str	r0, [r7, #12]
 8016704:	60b9      	str	r1, [r7, #8]
 8016706:	607a      	str	r2, [r7, #4]
            TCPSegment_t const * pxSegment;
            BaseType_t xReturn;
            TickType_t ulAge, ulMaxAge;

            *pulDelay = 0U;
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	2200      	movs	r2, #0
 801670c:	601a      	str	r2, [r3, #0]

            if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 801670e:	68fb      	ldr	r3, [r7, #12]
 8016710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016712:	2b00      	cmp	r3, #0
 8016714:	d002      	beq.n	801671c <xTCPWindowTxHasData+0x20>
            {
                /* No need to look at retransmissions or new transmission as long as
                 * there are priority segments.  *pulDelay equals zero, meaning it must
                 * be sent out immediately. */
                xReturn = pdTRUE;
 8016716:	2301      	movs	r3, #1
 8016718:	627b      	str	r3, [r7, #36]	@ 0x24
 801671a:	e050      	b.n	80167be <xTCPWindowTxHasData+0xc2>
            }
            else
            {
                pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 801671c:	68fb      	ldr	r3, [r7, #12]
 801671e:	3368      	adds	r3, #104	@ 0x68
 8016720:	4618      	mov	r0, r3
 8016722:	f7ff fb64 	bl	8015dee <xTCPWindowPeekHead>
 8016726:	6238      	str	r0, [r7, #32]

                if( pxSegment != NULL )
 8016728:	6a3b      	ldr	r3, [r7, #32]
 801672a:	2b00      	cmp	r3, #0
 801672c:	d01f      	beq.n	801676e <xTCPWindowTxHasData+0x72>
                {
                    uint32_t ulSRTT = ( uint32_t ) pxWindow->lSRTT;
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016732:	61fb      	str	r3, [r7, #28]

                    /* There is an outstanding segment, see if it is time to resend
                     * it. */
                    ulAge = ulTimerGetAge( &pxSegment->xTransmitTimer );
 8016734:	6a3b      	ldr	r3, [r7, #32]
 8016736:	3310      	adds	r3, #16
 8016738:	4618      	mov	r0, r3
 801673a:	f7ff f9e4 	bl	8015b06 <ulTimerGetAge>
 801673e:	61b8      	str	r0, [r7, #24]

                    /* After a packet has been sent for the first time, it will wait
                     * '1 * ulSRTT' ms for an ACK. A second time it will wait '2 * ulSRTT' ms,
                     * each time doubling the time-out */
                    ulMaxAge = ( ( uint32_t ) 1U << pxSegment->u.bits.ucTransmitCount );
 8016740:	6a3b      	ldr	r3, [r7, #32]
 8016742:	7d1b      	ldrb	r3, [r3, #20]
 8016744:	461a      	mov	r2, r3
 8016746:	2301      	movs	r3, #1
 8016748:	4093      	lsls	r3, r2
 801674a:	617b      	str	r3, [r7, #20]
                    ulMaxAge *= ulSRTT;
 801674c:	697b      	ldr	r3, [r7, #20]
 801674e:	69fa      	ldr	r2, [r7, #28]
 8016750:	fb02 f303 	mul.w	r3, r2, r3
 8016754:	617b      	str	r3, [r7, #20]

                    if( ulMaxAge > ulAge )
 8016756:	697a      	ldr	r2, [r7, #20]
 8016758:	69bb      	ldr	r3, [r7, #24]
 801675a:	429a      	cmp	r2, r3
 801675c:	d904      	bls.n	8016768 <xTCPWindowTxHasData+0x6c>
                    {
                        /* A segment must be sent after this amount of msecs */
                        *pulDelay = ulMaxAge - ulAge;
 801675e:	697a      	ldr	r2, [r7, #20]
 8016760:	69bb      	ldr	r3, [r7, #24]
 8016762:	1ad2      	subs	r2, r2, r3
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	601a      	str	r2, [r3, #0]
                    }

                    xReturn = pdTRUE;
 8016768:	2301      	movs	r3, #1
 801676a:	627b      	str	r3, [r7, #36]	@ 0x24
 801676c:	e027      	b.n	80167be <xTCPWindowTxHasData+0xc2>
                }
                else
                {
                    /* No priority segment, no outstanding data, see if there is new
                     * transmission data. */
                    pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	3354      	adds	r3, #84	@ 0x54
 8016772:	4618      	mov	r0, r3
 8016774:	f7ff fb3b 	bl	8015dee <xTCPWindowPeekHead>
 8016778:	6238      	str	r0, [r7, #32]

                    /* See if it fits in the peer's reception window. */
                    if( pxSegment == NULL )
 801677a:	6a3b      	ldr	r3, [r7, #32]
 801677c:	2b00      	cmp	r3, #0
 801677e:	d102      	bne.n	8016786 <xTCPWindowTxHasData+0x8a>
                    {
                        xReturn = pdFALSE;
 8016780:	2300      	movs	r3, #0
 8016782:	627b      	str	r3, [r7, #36]	@ 0x24
 8016784:	e01b      	b.n	80167be <xTCPWindowTxHasData+0xc2>
                    }
                    else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 8016786:	68b9      	ldr	r1, [r7, #8]
 8016788:	68f8      	ldr	r0, [r7, #12]
 801678a:	f7ff ff71 	bl	8016670 <prvTCPWindowTxHasSpace>
 801678e:	4603      	mov	r3, r0
 8016790:	2b00      	cmp	r3, #0
 8016792:	d102      	bne.n	801679a <xTCPWindowTxHasData+0x9e>
                    {
                        /* Too many outstanding messages. */
                        xReturn = pdFALSE;
 8016794:	2300      	movs	r3, #0
 8016796:	627b      	str	r3, [r7, #36]	@ 0x24
 8016798:	e011      	b.n	80167be <xTCPWindowTxHasData+0xc2>
                    }
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	781b      	ldrb	r3, [r3, #0]
 801679e:	f003 0302 	and.w	r3, r3, #2
 80167a2:	b2db      	uxtb	r3, r3
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d008      	beq.n	80167ba <xTCPWindowTxHasData+0xbe>
                             ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 80167a8:	6a3b      	ldr	r3, [r7, #32]
 80167aa:	689a      	ldr	r2, [r3, #8]
 80167ac:	6a3b      	ldr	r3, [r7, #32]
 80167ae:	685b      	ldr	r3, [r3, #4]
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 80167b0:	429a      	cmp	r2, r3
 80167b2:	da02      	bge.n	80167ba <xTCPWindowTxHasData+0xbe>
                    {
                        /* 'bSendFullSize' is a special optimisation.  If true, the
                         * driver will only sent completely filled packets (of MSS
                         * bytes). */
                        xReturn = pdFALSE;
 80167b4:	2300      	movs	r3, #0
 80167b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80167b8:	e001      	b.n	80167be <xTCPWindowTxHasData+0xc2>
                    }
                    else
                    {
                        xReturn = pdTRUE;
 80167ba:	2301      	movs	r3, #1
 80167bc:	627b      	str	r3, [r7, #36]	@ 0x24
                    }
                }
            }

            return xReturn;
 80167be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 80167c0:	4618      	mov	r0, r3
 80167c2:	3728      	adds	r7, #40	@ 0x28
 80167c4:	46bd      	mov	sp, r7
 80167c6:	bd80      	pop	{r7, pc}

080167c8 <pxTCPWindowTx_GetWaitQueue>:
 *        the normal TX queue of unsent data.  Message in the waiting queue will
 *        be sent when their timer has expired.
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        static TCPSegment_t * pxTCPWindowTx_GetWaitQueue( const TCPWindow_t * pxWindow )
        {
 80167c8:	b590      	push	{r4, r7, lr}
 80167ca:	b087      	sub	sp, #28
 80167cc:	af02      	add	r7, sp, #8
 80167ce:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	3368      	adds	r3, #104	@ 0x68
 80167d4:	4618      	mov	r0, r3
 80167d6:	f7ff fb0a 	bl	8015dee <xTCPWindowPeekHead>
 80167da:	60f8      	str	r0, [r7, #12]

            if( pxSegment != NULL )
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d043      	beq.n	801686a <pxTCPWindowTx_GetWaitQueue+0xa2>
            {
                /* Do check the timing. */
                uint32_t ulMaxTime;

                ulMaxTime = ( ( uint32_t ) 1U ) << pxSegment->u.bits.ucTransmitCount;
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	7d1b      	ldrb	r3, [r3, #20]
 80167e6:	461a      	mov	r2, r3
 80167e8:	2301      	movs	r3, #1
 80167ea:	4093      	lsls	r3, r2
 80167ec:	60bb      	str	r3, [r7, #8]
                ulMaxTime *= ( uint32_t ) pxWindow->lSRTT;
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80167f2:	461a      	mov	r2, r3
 80167f4:	68bb      	ldr	r3, [r7, #8]
 80167f6:	fb02 f303 	mul.w	r3, r2, r3
 80167fa:	60bb      	str	r3, [r7, #8]

                if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	3310      	adds	r3, #16
 8016800:	4618      	mov	r0, r3
 8016802:	f7ff f980 	bl	8015b06 <ulTimerGetAge>
 8016806:	4602      	mov	r2, r0
 8016808:	68bb      	ldr	r3, [r7, #8]
 801680a:	4293      	cmp	r3, r2
 801680c:	d22b      	bcs.n	8016866 <pxTCPWindowTx_GetWaitQueue+0x9e>
                {
                    /* A normal (non-fast) retransmission.  Move it from the
                     * head of the waiting queue. */
                    pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	3368      	adds	r3, #104	@ 0x68
 8016812:	4618      	mov	r0, r3
 8016814:	f7ff fad2 	bl	8015dbc <xTCPWindowGetHead>
 8016818:	60f8      	str	r0, [r7, #12]
                    pxSegment->u.bits.ucDupAckCount = ( uint8_t ) pdFALSE_UNSIGNED;
 801681a:	68fb      	ldr	r3, [r7, #12]
 801681c:	2200      	movs	r2, #0
 801681e:	755a      	strb	r2, [r3, #21]

                    /* Some detailed logging. */
                    if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8016820:	4b14      	ldr	r3, [pc, #80]	@ (8016874 <pxTCPWindowTx_GetWaitQueue+0xac>)
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	2b00      	cmp	r3, #0
 8016826:	d020      	beq.n	801686a <pxTCPWindowTx_GetWaitQueue+0xa2>
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 801682e:	2b17      	cmp	r3, #23
 8016830:	d01b      	beq.n	801686a <pxTCPWindowTx_GetWaitQueue+0xa2>
                    {
                        FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: WaitQueue %d bytes for sequence number %u (0x%X)\n",
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8016838:	4618      	mov	r0, r3
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016840:	461c      	mov	r4, r3
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	6899      	ldr	r1, [r3, #8]
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	681a      	ldr	r2, [r3, #0]
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	69db      	ldr	r3, [r3, #28]
 801684e:	1ad3      	subs	r3, r2, r3
 8016850:	68fa      	ldr	r2, [r7, #12]
 8016852:	6812      	ldr	r2, [r2, #0]
 8016854:	9201      	str	r2, [sp, #4]
 8016856:	9300      	str	r3, [sp, #0]
 8016858:	460b      	mov	r3, r1
 801685a:	4622      	mov	r2, r4
 801685c:	4601      	mov	r1, r0
 801685e:	4806      	ldr	r0, [pc, #24]	@ (8016878 <pxTCPWindowTx_GetWaitQueue+0xb0>)
 8016860:	f00b ffa0 	bl	80227a4 <lUDPLoggingPrintf>
 8016864:	e001      	b.n	801686a <pxTCPWindowTx_GetWaitQueue+0xa2>
                                                 ( unsigned ) pxSegment->ulSequenceNumber ) );
                    }
                }
                else
                {
                    pxSegment = NULL;
 8016866:	2300      	movs	r3, #0
 8016868:	60fb      	str	r3, [r7, #12]
                }
            }

            return pxSegment;
 801686a:	68fb      	ldr	r3, [r7, #12]
        }
 801686c:	4618      	mov	r0, r3
 801686e:	3714      	adds	r7, #20
 8016870:	46bd      	mov	sp, r7
 8016872:	bd90      	pop	{r4, r7, pc}
 8016874:	2000164c 	.word	0x2000164c
 8016878:	080276c0 	.word	0x080276c0

0801687c <pxTCPWindowTx_GetTXQueue>:
 *                          reception window.
 * @return Either a segment that has to be sent, or NULL.
 */
        static TCPSegment_t * pxTCPWindowTx_GetTXQueue( TCPWindow_t * pxWindow,
                                                        uint32_t ulWindowSize )
        {
 801687c:	b590      	push	{r4, r7, lr}
 801687e:	b087      	sub	sp, #28
 8016880:	af02      	add	r7, sp, #8
 8016882:	6078      	str	r0, [r7, #4]
 8016884:	6039      	str	r1, [r7, #0]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	3354      	adds	r3, #84	@ 0x54
 801688a:	4618      	mov	r0, r3
 801688c:	f7ff faaf 	bl	8015dee <xTCPWindowPeekHead>
 8016890:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	2b00      	cmp	r3, #0
 8016896:	d04f      	beq.n	8016938 <pxTCPWindowTx_GetTXQueue+0xbc>
            {
                /* No segments queued. */
            }
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	781b      	ldrb	r3, [r3, #0]
 801689c:	f003 0302 	and.w	r3, r3, #2
 80168a0:	b2db      	uxtb	r3, r3
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d008      	beq.n	80168b8 <pxTCPWindowTx_GetTXQueue+0x3c>
                     ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 80168a6:	68fb      	ldr	r3, [r7, #12]
 80168a8:	689a      	ldr	r2, [r3, #8]
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	685b      	ldr	r3, [r3, #4]
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 80168ae:	429a      	cmp	r2, r3
 80168b0:	da02      	bge.n	80168b8 <pxTCPWindowTx_GetTXQueue+0x3c>
            {
                /* A segment has been queued but the driver waits until it
                 * has a full size of MSS. */
                pxSegment = NULL;
 80168b2:	2300      	movs	r3, #0
 80168b4:	60fb      	str	r3, [r7, #12]
 80168b6:	e03f      	b.n	8016938 <pxTCPWindowTx_GetTXQueue+0xbc>
            }
            else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 80168b8:	6839      	ldr	r1, [r7, #0]
 80168ba:	6878      	ldr	r0, [r7, #4]
 80168bc:	f7ff fed8 	bl	8016670 <prvTCPWindowTxHasSpace>
 80168c0:	4603      	mov	r3, r0
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d102      	bne.n	80168cc <pxTCPWindowTx_GetTXQueue+0x50>
            {
                /* Peer has no more space at this moment. */
                pxSegment = NULL;
 80168c6:	2300      	movs	r3, #0
 80168c8:	60fb      	str	r3, [r7, #12]
 80168ca:	e035      	b.n	8016938 <pxTCPWindowTx_GetTXQueue+0xbc>
            }
            else
            {
                /* pxSegment was just obtained with a peek function,
                 * now remove it from of the Tx queue. */
                pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	3354      	adds	r3, #84	@ 0x54
 80168d0:	4618      	mov	r0, r3
 80168d2:	f7ff fa73 	bl	8015dbc <xTCPWindowGetHead>
 80168d6:	60f8      	str	r0, [r7, #12]

                /* Don't let pxHeadSegment point to this segment any more,
                 * so no more data will be added. */
                if( pxWindow->pxHeadSegment == pxSegment )
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80168dc:	68fa      	ldr	r2, [r7, #12]
 80168de:	429a      	cmp	r2, r3
 80168e0:	d102      	bne.n	80168e8 <pxTCPWindowTx_GetTXQueue+0x6c>
                {
                    pxWindow->pxHeadSegment = NULL;
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	2200      	movs	r2, #0
 80168e6:	67da      	str	r2, [r3, #124]	@ 0x7c
                }

                /* pxWindow->tx.highest registers the highest sequence
                 * number in our transmission window. */
                pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	68fa      	ldr	r2, [r7, #12]
 80168ee:	6892      	ldr	r2, [r2, #8]
 80168f0:	441a      	add	r2, r3
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	629a      	str	r2, [r3, #40]	@ 0x28

                /* ...and more detailed logging */
                if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 80168f6:	4b13      	ldr	r3, [pc, #76]	@ (8016944 <pxTCPWindowTx_GetTXQueue+0xc8>)
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	2b01      	cmp	r3, #1
 80168fc:	dd1c      	ble.n	8016938 <pxTCPWindowTx_GetTXQueue+0xbc>
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016904:	2b17      	cmp	r3, #23
 8016906:	d017      	beq.n	8016938 <pxTCPWindowTx_GetTXQueue+0xbc>
                {
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: XmitQueue %d bytes for sequence number %u (ws %u)\n",
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 801690e:	4618      	mov	r0, r3
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016916:	461c      	mov	r4, r3
 8016918:	68fb      	ldr	r3, [r7, #12]
 801691a:	6899      	ldr	r1, [r3, #8]
 801691c:	68fb      	ldr	r3, [r7, #12]
 801691e:	681a      	ldr	r2, [r3, #0]
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	69db      	ldr	r3, [r3, #28]
 8016924:	1ad3      	subs	r3, r2, r3
 8016926:	683a      	ldr	r2, [r7, #0]
 8016928:	9201      	str	r2, [sp, #4]
 801692a:	9300      	str	r3, [sp, #0]
 801692c:	460b      	mov	r3, r1
 801692e:	4622      	mov	r2, r4
 8016930:	4601      	mov	r1, r0
 8016932:	4805      	ldr	r0, [pc, #20]	@ (8016948 <pxTCPWindowTx_GetTXQueue+0xcc>)
 8016934:	f00b ff36 	bl	80227a4 <lUDPLoggingPrintf>
                                             ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulWindowSize ) );
                }
            }

            return pxSegment;
 8016938:	68fb      	ldr	r3, [r7, #12]
        }
 801693a:	4618      	mov	r0, r3
 801693c:	3714      	adds	r7, #20
 801693e:	46bd      	mov	sp, r7
 8016940:	bd90      	pop	{r4, r7, pc}
 8016942:	bf00      	nop
 8016944:	2000164c 	.word	0x2000164c
 8016948:	0802770c 	.word	0x0802770c

0801694c <ulTCPWindowTxGet>:
 * @return The amount of data in bytes that can be transmitted right now.
 */
        uint32_t ulTCPWindowTxGet( TCPWindow_t * pxWindow,
                                   uint32_t ulWindowSize,
                                   int32_t * plPosition )
        {
 801694c:	b590      	push	{r4, r7, lr}
 801694e:	b08b      	sub	sp, #44	@ 0x2c
 8016950:	af02      	add	r7, sp, #8
 8016952:	60f8      	str	r0, [r7, #12]
 8016954:	60b9      	str	r1, [r7, #8]
 8016956:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxSegment;
            uint32_t ulReturn = 0U;
 8016958:	2300      	movs	r3, #0
 801695a:	61bb      	str	r3, [r7, #24]

            /* Fetches data to be sent-out now.
             *
             * Priority messages: segments with a resend need no check current sliding
             * window size. */
            pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	3340      	adds	r3, #64	@ 0x40
 8016960:	4618      	mov	r0, r3
 8016962:	f7ff fa2b 	bl	8015dbc <xTCPWindowGetHead>
 8016966:	61f8      	str	r0, [r7, #28]
            pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 8016968:	68fb      	ldr	r3, [r7, #12]
 801696a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	62da      	str	r2, [r3, #44]	@ 0x2c

            if( pxSegment != NULL )
 8016970:	69fb      	ldr	r3, [r7, #28]
 8016972:	2b00      	cmp	r3, #0
 8016974:	d01c      	beq.n	80169b0 <ulTCPWindowTxGet+0x64>
            {
                /* There is a priority segment. It doesn't need any checking for
                 * space or timeouts. */
                if( xTCPWindowLoggingLevel != 0 )
 8016976:	4b41      	ldr	r3, [pc, #260]	@ (8016a7c <ulTCPWindowTxGet+0x130>)
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	2b00      	cmp	r3, #0
 801697c:	d024      	beq.n	80169c8 <ulTCPWindowTxGet+0x7c>
                {
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: PrioQueue %d bytes for sequence number %u (ws %u)\n",
 801697e:	68fb      	ldr	r3, [r7, #12]
 8016980:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8016984:	4618      	mov	r0, r3
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 801698c:	461c      	mov	r4, r3
 801698e:	69fb      	ldr	r3, [r7, #28]
 8016990:	6899      	ldr	r1, [r3, #8]
 8016992:	69fb      	ldr	r3, [r7, #28]
 8016994:	681a      	ldr	r2, [r3, #0]
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	69db      	ldr	r3, [r3, #28]
 801699a:	1ad3      	subs	r3, r2, r3
 801699c:	68ba      	ldr	r2, [r7, #8]
 801699e:	9201      	str	r2, [sp, #4]
 80169a0:	9300      	str	r3, [sp, #0]
 80169a2:	460b      	mov	r3, r1
 80169a4:	4622      	mov	r2, r4
 80169a6:	4601      	mov	r1, r0
 80169a8:	4835      	ldr	r0, [pc, #212]	@ (8016a80 <ulTCPWindowTxGet+0x134>)
 80169aa:	f00b fefb 	bl	80227a4 <lUDPLoggingPrintf>
 80169ae:	e00b      	b.n	80169c8 <ulTCPWindowTxGet+0x7c>
            else
            {
                /* Waiting messages: outstanding messages with a running timer
                 * neither check peer's reception window size because these packets
                 * have been sent earlier. */
                pxSegment = pxTCPWindowTx_GetWaitQueue( pxWindow );
 80169b0:	68f8      	ldr	r0, [r7, #12]
 80169b2:	f7ff ff09 	bl	80167c8 <pxTCPWindowTx_GetWaitQueue>
 80169b6:	61f8      	str	r0, [r7, #28]

                if( pxSegment == NULL )
 80169b8:	69fb      	ldr	r3, [r7, #28]
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d104      	bne.n	80169c8 <ulTCPWindowTxGet+0x7c>
                {
                    /* New messages: sent-out for the first time.  Check current
                     * sliding window size of peer. */
                    pxSegment = pxTCPWindowTx_GetTXQueue( pxWindow, ulWindowSize );
 80169be:	68b9      	ldr	r1, [r7, #8]
 80169c0:	68f8      	ldr	r0, [r7, #12]
 80169c2:	f7ff ff5b 	bl	801687c <pxTCPWindowTx_GetTXQueue>
 80169c6:	61f8      	str	r0, [r7, #28]
                }
            }

            /* See if it has already been determined to return 0. */
            if( pxSegment != NULL )
 80169c8:	69fb      	ldr	r3, [r7, #28]
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d051      	beq.n	8016a72 <ulTCPWindowTxGet+0x126>
            {
                configASSERT( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) == NULL );
 80169ce:	69fb      	ldr	r3, [r7, #28]
 80169d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d004      	beq.n	80169e0 <ulTCPWindowTxGet+0x94>
 80169d6:	f240 7136 	movw	r1, #1846	@ 0x736
 80169da:	482a      	ldr	r0, [pc, #168]	@ (8016a84 <ulTCPWindowTxGet+0x138>)
 80169dc:	f7eb f814 	bl	8001a08 <vAssertCalled>

                /* Now that the segment will be transmitted, add it to the tail of
                 * the waiting queue. */
                vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80169e6:	69fb      	ldr	r3, [r7, #28]
 80169e8:	3318      	adds	r3, #24
 80169ea:	4619      	mov	r1, r3
 80169ec:	4610      	mov	r0, r2
 80169ee:	f7ff f86d 	bl	8015acc <vListInsertFifo>

                /* And mark it as outstanding. */
                pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 80169f2:	69fa      	ldr	r2, [r7, #28]
 80169f4:	7d93      	ldrb	r3, [r2, #22]
 80169f6:	f043 0301 	orr.w	r3, r3, #1
 80169fa:	7593      	strb	r3, [r2, #22]

                /* Administer the transmit count, needed for fast
                 * retransmissions. */
                ( pxSegment->u.bits.ucTransmitCount )++;
 80169fc:	69fb      	ldr	r3, [r7, #28]
 80169fe:	7d1b      	ldrb	r3, [r3, #20]
 8016a00:	3301      	adds	r3, #1
 8016a02:	b2da      	uxtb	r2, r3
 8016a04:	69fb      	ldr	r3, [r7, #28]
 8016a06:	751a      	strb	r2, [r3, #20]

                /* If there have been several retransmissions (4), decrease the
                 * size of the transmission window to at most 2 times MSS. */
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 8016a08:	69fb      	ldr	r3, [r7, #28]
 8016a0a:	7d1b      	ldrb	r3, [r3, #20]
 8016a0c:	2b04      	cmp	r3, #4
 8016a0e:	d120      	bne.n	8016a52 <ulTCPWindowTxGet+0x106>
                    ( pxWindow->xSize.ulTxWindowLength > ( 2U * ( ( uint32_t ) pxWindow->usMSS ) ) ) )
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	689a      	ldr	r2, [r3, #8]
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8016a1a:	005b      	lsls	r3, r3, #1
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 8016a1c:	429a      	cmp	r2, r3
 8016a1e:	d918      	bls.n	8016a52 <ulTCPWindowTxGet+0x106>
                {
                    uint16_t usMSS2 = ( uint16_t ) ( pxWindow->usMSS * 2U );
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8016a26:	005b      	lsls	r3, r3, #1
 8016a28:	82fb      	strh	r3, [r7, #22]
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %u]: Change Tx window: %u -> %u\n",
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8016a30:	4619      	mov	r1, r3
 8016a32:	68fb      	ldr	r3, [r7, #12]
 8016a34:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016a38:	4618      	mov	r0, r3
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	689a      	ldr	r2, [r3, #8]
 8016a3e:	8afb      	ldrh	r3, [r7, #22]
 8016a40:	9300      	str	r3, [sp, #0]
 8016a42:	4613      	mov	r3, r2
 8016a44:	4602      	mov	r2, r0
 8016a46:	4810      	ldr	r0, [pc, #64]	@ (8016a88 <ulTCPWindowTxGet+0x13c>)
 8016a48:	f00b feac 	bl	80227a4 <lUDPLoggingPrintf>
                                             pxWindow->usPeerPortNumber,
                                             pxWindow->usOurPortNumber,
                                             ( unsigned ) pxWindow->xSize.ulTxWindowLength,
                                             usMSS2 ) );
                    pxWindow->xSize.ulTxWindowLength = usMSS2;
 8016a4c:	8afa      	ldrh	r2, [r7, #22]
 8016a4e:	68fb      	ldr	r3, [r7, #12]
 8016a50:	609a      	str	r2, [r3, #8]
                }

                /* Clear the transmit timer. */
                vTCPTimerSet( &( pxSegment->xTransmitTimer ) );
 8016a52:	69fb      	ldr	r3, [r7, #28]
 8016a54:	3310      	adds	r3, #16
 8016a56:	4618      	mov	r0, r3
 8016a58:	f7ff f848 	bl	8015aec <vTCPTimerSet>

                pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 8016a5c:	69fb      	ldr	r3, [r7, #28]
 8016a5e:	681a      	ldr	r2, [r3, #0]
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Inform the caller where to find the data within the queue. */
                *plPosition = pxSegment->lStreamPos;
 8016a64:	69fb      	ldr	r3, [r7, #28]
 8016a66:	68da      	ldr	r2, [r3, #12]
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	601a      	str	r2, [r3, #0]

                /* And return the length of the data segment */
                ulReturn = ( uint32_t ) pxSegment->lDataLength;
 8016a6c:	69fb      	ldr	r3, [r7, #28]
 8016a6e:	689b      	ldr	r3, [r3, #8]
 8016a70:	61bb      	str	r3, [r7, #24]
            }

            return ulReturn;
 8016a72:	69bb      	ldr	r3, [r7, #24]
        }
 8016a74:	4618      	mov	r0, r3
 8016a76:	3724      	adds	r7, #36	@ 0x24
 8016a78:	46bd      	mov	sp, r7
 8016a7a:	bd90      	pop	{r4, r7, pc}
 8016a7c:	2000164c 	.word	0x2000164c
 8016a80:	08027758 	.word	0x08027758
 8016a84:	080273f4 	.word	0x080273f4
 8016a88:	080277a4 	.word	0x080277a4

08016a8c <prvTCPWindowTxCheckAck_CalcSRTT>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 * @param[in] pxSegment The segment that was just acknowledged.
 */
        static void prvTCPWindowTxCheckAck_CalcSRTT( TCPWindow_t * pxWindow,
                                                     const TCPSegment_t * pxSegment )
        {
 8016a8c:	b580      	push	{r7, lr}
 8016a8e:	b084      	sub	sp, #16
 8016a90:	af00      	add	r7, sp, #0
 8016a92:	6078      	str	r0, [r7, #4]
 8016a94:	6039      	str	r1, [r7, #0]
            int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );
 8016a96:	683b      	ldr	r3, [r7, #0]
 8016a98:	3310      	adds	r3, #16
 8016a9a:	4618      	mov	r0, r3
 8016a9c:	f7ff f833 	bl	8015b06 <ulTimerGetAge>
 8016aa0:	4603      	mov	r3, r0
 8016aa2:	60fb      	str	r3, [r7, #12]

            if( pxWindow->lSRTT >= mS )
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016aa8:	68fa      	ldr	r2, [r7, #12]
 8016aaa:	429a      	cmp	r2, r3
 8016aac:	dc0e      	bgt.n	8016acc <prvTCPWindowTxCheckAck_CalcSRTT+0x40>
            {
                /* RTT becomes smaller: adapt slowly. */
                pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016ab2:	4613      	mov	r3, r2
 8016ab4:	00db      	lsls	r3, r3, #3
 8016ab6:	1a9a      	subs	r2, r3, r2
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	4413      	add	r3, r2
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	da00      	bge.n	8016ac2 <prvTCPWindowTxCheckAck_CalcSRTT+0x36>
 8016ac0:	3307      	adds	r3, #7
 8016ac2:	10db      	asrs	r3, r3, #3
 8016ac4:	461a      	mov	r2, r3
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	639a      	str	r2, [r3, #56]	@ 0x38
 8016aca:	e00d      	b.n	8016ae8 <prvTCPWindowTxCheckAck_CalcSRTT+0x5c>
            }
            else
            {
                /* RTT becomes larger: adapt quicker */
                pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016ad0:	4613      	mov	r3, r2
 8016ad2:	005b      	lsls	r3, r3, #1
 8016ad4:	441a      	add	r2, r3
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	4413      	add	r3, r2
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	da00      	bge.n	8016ae0 <prvTCPWindowTxCheckAck_CalcSRTT+0x54>
 8016ade:	3303      	adds	r3, #3
 8016ae0:	109b      	asrs	r3, r3, #2
 8016ae2:	461a      	mov	r2, r3
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* Cap to the minimum of 50ms. */
            if( pxWindow->lSRTT < winSRTT_CAP_mS )
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016aec:	2b31      	cmp	r3, #49	@ 0x31
 8016aee:	dc02      	bgt.n	8016af6 <prvTCPWindowTxCheckAck_CalcSRTT+0x6a>
            {
                pxWindow->lSRTT = winSRTT_CAP_mS;
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	2232      	movs	r2, #50	@ 0x32
 8016af4:	639a      	str	r2, [r3, #56]	@ 0x38
            }
        }
 8016af6:	bf00      	nop
 8016af8:	3710      	adds	r7, #16
 8016afa:	46bd      	mov	sp, r7
 8016afc:	bd80      	pop	{r7, pc}
	...

08016b00 <prvTCPWindowTxCheckAck>:
 * @return number of bytes that the tail of txStream may be advanced.
 */
        static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t * pxWindow,
                                                uint32_t ulFirst,
                                                uint32_t ulLast )
        {
 8016b00:	b5b0      	push	{r4, r5, r7, lr}
 8016b02:	b090      	sub	sp, #64	@ 0x40
 8016b04:	af04      	add	r7, sp, #16
 8016b06:	60f8      	str	r0, [r7, #12]
 8016b08:	60b9      	str	r1, [r7, #8]
 8016b0a:	607a      	str	r2, [r7, #4]
            uint32_t ulBytesConfirmed = 0U;
 8016b0c:	2300      	movs	r3, #0
 8016b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint32_t ulSequenceNumber = ulFirst;
 8016b10:	68bb      	ldr	r3, [r7, #8]
 8016b12:	62bb      	str	r3, [r7, #40]	@ 0x28
            const ListItem_t * pxIterator;

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xTxSegments.xListEnd ) );
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	3398      	adds	r3, #152	@ 0x98
 8016b18:	61fb      	str	r3, [r7, #28]
             * RTO is Retransmit timeout
             *
             * A Smoothed RTT will increase quickly, but it is conservative when
             * becoming smaller. */

            pxIterator = listGET_NEXT( pxEnd );
 8016b1a:	69fb      	ldr	r3, [r7, #28]
 8016b1c:	685b      	ldr	r3, [r3, #4]
 8016b1e:	627b      	str	r3, [r7, #36]	@ 0x24

            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8016b20:	e0a6      	b.n	8016c70 <prvTCPWindowTxCheckAck+0x170>
            {
                xDoUnlink = pdFALSE;
 8016b22:	2300      	movs	r3, #0
 8016b24:	623b      	str	r3, [r7, #32]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8016b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b28:	68db      	ldr	r3, [r3, #12]
 8016b2a:	61bb      	str	r3, [r7, #24]

                /* Move to the next item because the current item might get
                 * removed. */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8016b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b2e:	685b      	ldr	r3, [r3, #4]
 8016b30:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Continue if this segment does not fall within the ACK'd range. */
                if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 8016b32:	69bb      	ldr	r3, [r7, #24]
 8016b34:	681b      	ldr	r3, [r3, #0]
 8016b36:	4619      	mov	r1, r3
 8016b38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016b3a:	f7fe ff9c 	bl	8015a76 <xSequenceGreaterThan>
 8016b3e:	4603      	mov	r3, r0
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	f040 8094 	bne.w	8016c6e <prvTCPWindowTxCheckAck+0x16e>
                {
                    continue;
                }

                /* Is it ready? */
                if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 8016b46:	69bb      	ldr	r3, [r7, #24]
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016b4c:	429a      	cmp	r2, r3
 8016b4e:	f040 809c 	bne.w	8016c8a <prvTCPWindowTxCheckAck+0x18a>
                {
                    /* coverity[break_stmt] : Break statement terminating the loop */
                    break;
                }

                ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 8016b52:	69bb      	ldr	r3, [r7, #24]
 8016b54:	689b      	ldr	r3, [r3, #8]
 8016b56:	617b      	str	r3, [r7, #20]

                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8016b58:	69bb      	ldr	r3, [r7, #24]
 8016b5a:	7d9b      	ldrb	r3, [r3, #22]
 8016b5c:	f003 0302 	and.w	r3, r3, #2
 8016b60:	b2db      	uxtb	r3, r3
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d144      	bne.n	8016bf0 <prvTCPWindowTxCheckAck+0xf0>
                {
                    if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t ) ulDataLength, ulLast ) != pdFALSE )
 8016b66:	69bb      	ldr	r3, [r7, #24]
 8016b68:	681a      	ldr	r2, [r3, #0]
 8016b6a:	697b      	ldr	r3, [r7, #20]
 8016b6c:	4413      	add	r3, r2
 8016b6e:	6879      	ldr	r1, [r7, #4]
 8016b70:	4618      	mov	r0, r3
 8016b72:	f7fe ff80 	bl	8015a76 <xSequenceGreaterThan>
 8016b76:	4603      	mov	r3, r0
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d023      	beq.n	8016bc4 <prvTCPWindowTxCheckAck+0xc4>
                         *
                         * AAAAAAA BBBBBBB << acked
                         * aaaaaaa aaaa    << sent */
                        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                        {
                            uint32_t ulFirstSeq = pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber;
 8016b7c:	69bb      	ldr	r3, [r7, #24]
 8016b7e:	681a      	ldr	r2, [r3, #0]
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	69db      	ldr	r3, [r3, #28]
 8016b84:	1ad3      	subs	r3, r2, r3
 8016b86:	613b      	str	r3, [r7, #16]
                            FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck[%u.%u]: %u - %u Partial sequence number %u - %u\n",
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8016b8e:	461c      	mov	r4, r3
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016b96:	461d      	mov	r5, r3
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	69db      	ldr	r3, [r3, #28]
 8016b9c:	693a      	ldr	r2, [r7, #16]
 8016b9e:	1ad0      	subs	r0, r2, r3
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	69db      	ldr	r3, [r3, #28]
 8016ba4:	687a      	ldr	r2, [r7, #4]
 8016ba6:	1ad3      	subs	r3, r2, r3
 8016ba8:	6939      	ldr	r1, [r7, #16]
 8016baa:	697a      	ldr	r2, [r7, #20]
 8016bac:	440a      	add	r2, r1
 8016bae:	9202      	str	r2, [sp, #8]
 8016bb0:	693a      	ldr	r2, [r7, #16]
 8016bb2:	9201      	str	r2, [sp, #4]
 8016bb4:	9300      	str	r3, [sp, #0]
 8016bb6:	4603      	mov	r3, r0
 8016bb8:	462a      	mov	r2, r5
 8016bba:	4621      	mov	r1, r4
 8016bbc:	4836      	ldr	r0, [pc, #216]	@ (8016c98 <prvTCPWindowTxCheckAck+0x198>)
 8016bbe:	f00b fdf1 	bl	80227a4 <lUDPLoggingPrintf>
                                                     ( unsigned ) ulFirstSeq,
                                                     ( unsigned ) ( ulFirstSeq + ulDataLength ) ) );
                        }
                        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                        break;
 8016bc2:	e063      	b.n	8016c8c <prvTCPWindowTxCheckAck+0x18c>
                    }

                    /* This segment is fully ACK'd, set the flag. */
                    pxSegment->u.bits.bAcked = pdTRUE;
 8016bc4:	69ba      	ldr	r2, [r7, #24]
 8016bc6:	7d93      	ldrb	r3, [r2, #22]
 8016bc8:	f043 0302 	orr.w	r3, r3, #2
 8016bcc:	7593      	strb	r3, [r2, #22]

                    /* Calculate the RTT only if the segment was sent-out for the
                     * first time and if this is the last ACK'd segment in a range. */
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 8016bce:	69bb      	ldr	r3, [r7, #24]
 8016bd0:	7d1b      	ldrb	r3, [r3, #20]
 8016bd2:	2b01      	cmp	r3, #1
 8016bd4:	d10a      	bne.n	8016bec <prvTCPWindowTxCheckAck+0xec>
                        ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 8016bd6:	69bb      	ldr	r3, [r7, #24]
 8016bd8:	681a      	ldr	r2, [r3, #0]
 8016bda:	697b      	ldr	r3, [r7, #20]
 8016bdc:	4413      	add	r3, r2
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 8016bde:	687a      	ldr	r2, [r7, #4]
 8016be0:	429a      	cmp	r2, r3
 8016be2:	d103      	bne.n	8016bec <prvTCPWindowTxCheckAck+0xec>
                    {
                        prvTCPWindowTxCheckAck_CalcSRTT( pxWindow, pxSegment );
 8016be4:	69b9      	ldr	r1, [r7, #24]
 8016be6:	68f8      	ldr	r0, [r7, #12]
 8016be8:	f7ff ff50 	bl	8016a8c <prvTCPWindowTxCheckAck_CalcSRTT>
                    }

                    /* Unlink it from the 3 queues, but do not destroy it (yet). */
                    xDoUnlink = pdTRUE;
 8016bec:	2301      	movs	r3, #1
 8016bee:	623b      	str	r3, [r7, #32]
                }

                /* pxSegment->u.bits.bAcked is now true.  Is it located at the left
                 * side of the transmission queue?  If so, it may be freed. */
                if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 8016bf0:	68fb      	ldr	r3, [r7, #12]
 8016bf2:	6a1b      	ldr	r3, [r3, #32]
 8016bf4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016bf6:	429a      	cmp	r2, r3
 8016bf8:	d128      	bne.n	8016c4c <prvTCPWindowTxCheckAck+0x14c>
                {
                    if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8016bfa:	4b28      	ldr	r3, [pc, #160]	@ (8016c9c <prvTCPWindowTxCheckAck+0x19c>)
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	2b01      	cmp	r3, #1
 8016c00:	dd15      	ble.n	8016c2e <prvTCPWindowTxCheckAck+0x12e>
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016c08:	2b17      	cmp	r3, #23
 8016c0a:	d010      	beq.n	8016c2e <prvTCPWindowTxCheckAck+0x12e>
                    {
                        FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck: %u - %u Ready sequence number %u\n",
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	69db      	ldr	r3, [r3, #28]
 8016c10:	68ba      	ldr	r2, [r7, #8]
 8016c12:	1ad1      	subs	r1, r2, r3
 8016c14:	68fb      	ldr	r3, [r7, #12]
 8016c16:	69db      	ldr	r3, [r3, #28]
 8016c18:	687a      	ldr	r2, [r7, #4]
 8016c1a:	1ad0      	subs	r0, r2, r3
 8016c1c:	69bb      	ldr	r3, [r7, #24]
 8016c1e:	681a      	ldr	r2, [r3, #0]
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	69db      	ldr	r3, [r3, #28]
 8016c24:	1ad3      	subs	r3, r2, r3
 8016c26:	4602      	mov	r2, r0
 8016c28:	481d      	ldr	r0, [pc, #116]	@ (8016ca0 <prvTCPWindowTxCheckAck+0x1a0>)
 8016c2a:	f00b fdbb 	bl	80227a4 <lUDPLoggingPrintf>
                                                 ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                                 ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
                    }

                    /* Increase the left-hand value of the transmission window. */
                    pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	6a1a      	ldr	r2, [r3, #32]
 8016c32:	697b      	ldr	r3, [r7, #20]
 8016c34:	441a      	add	r2, r3
 8016c36:	68fb      	ldr	r3, [r7, #12]
 8016c38:	621a      	str	r2, [r3, #32]

                    /* This function will return the number of bytes that the tail
                     * of txStream may be advanced. */
                    ulBytesConfirmed += ulDataLength;
 8016c3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016c3c:	697b      	ldr	r3, [r7, #20]
 8016c3e:	4413      	add	r3, r2
 8016c40:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* All segments below tx.ulCurrentSequenceNumber may be freed. */
                    vTCPWindowFree( pxSegment );
 8016c42:	69b8      	ldr	r0, [r7, #24]
 8016c44:	f7ff f8ec 	bl	8015e20 <vTCPWindowFree>

                    /* No need to unlink it any more. */
                    xDoUnlink = pdFALSE;
 8016c48:	2300      	movs	r3, #0
 8016c4a:	623b      	str	r3, [r7, #32]
                }

                if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 8016c4c:	6a3b      	ldr	r3, [r7, #32]
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d008      	beq.n	8016c64 <prvTCPWindowTxCheckAck+0x164>
 8016c52:	69bb      	ldr	r3, [r7, #24]
 8016c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d004      	beq.n	8016c64 <prvTCPWindowTxCheckAck+0x164>
                {
                    /* Remove item from its queues. */
                    ( void ) uxListRemove( &pxSegment->xQueueItem );
 8016c5a:	69bb      	ldr	r3, [r7, #24]
 8016c5c:	3318      	adds	r3, #24
 8016c5e:	4618      	mov	r0, r3
 8016c60:	f7ec fe3c 	bl	80038dc <uxListRemove>
                }

                ulSequenceNumber += ulDataLength;
 8016c64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016c66:	697b      	ldr	r3, [r7, #20]
 8016c68:	4413      	add	r3, r2
 8016c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016c6c:	e000      	b.n	8016c70 <prvTCPWindowTxCheckAck+0x170>
                    continue;
 8016c6e:	bf00      	nop
            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8016c70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016c72:	69fb      	ldr	r3, [r7, #28]
 8016c74:	429a      	cmp	r2, r3
 8016c76:	d009      	beq.n	8016c8c <prvTCPWindowTxCheckAck+0x18c>
 8016c78:	6879      	ldr	r1, [r7, #4]
 8016c7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016c7c:	f7fe fee5 	bl	8015a4a <xSequenceLessThan>
 8016c80:	4603      	mov	r3, r0
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	f47f af4d 	bne.w	8016b22 <prvTCPWindowTxCheckAck+0x22>
 8016c88:	e000      	b.n	8016c8c <prvTCPWindowTxCheckAck+0x18c>
                    break;
 8016c8a:	bf00      	nop
            }

            return ulBytesConfirmed;
 8016c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 8016c8e:	4618      	mov	r0, r3
 8016c90:	3730      	adds	r7, #48	@ 0x30
 8016c92:	46bd      	mov	sp, r7
 8016c94:	bdb0      	pop	{r4, r5, r7, pc}
 8016c96:	bf00      	nop
 8016c98:	080277dc 	.word	0x080277dc
 8016c9c:	2000164c 	.word	0x2000164c
 8016ca0:	08027824 	.word	0x08027824

08016ca4 <prvTCPWindowFastRetransmit>:
 *
 * @return The number of segments that need a fast retransmission.
 */
        static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t * pxWindow,
                                                    uint32_t ulFirst )
        {
 8016ca4:	b580      	push	{r7, lr}
 8016ca6:	b086      	sub	sp, #24
 8016ca8:	af00      	add	r7, sp, #0
 8016caa:	6078      	str	r0, [r7, #4]
 8016cac:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment;
            uint32_t ulCount = 0U;
 8016cae:	2300      	movs	r3, #0
 8016cb0:	613b      	str	r3, [r7, #16]
             * xWaitQueue to find a possible condition for a FAST retransmission. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xWaitQueue.xListEnd ) );
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	3370      	adds	r3, #112	@ 0x70
 8016cb6:	60fb      	str	r3, [r7, #12]

            pxIterator = listGET_NEXT( pxEnd );
 8016cb8:	68fb      	ldr	r3, [r7, #12]
 8016cba:	685b      	ldr	r3, [r3, #4]
 8016cbc:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 8016cbe:	e049      	b.n	8016d54 <prvTCPWindowFastRetransmit+0xb0>
            {
                /* Get the owner, which is a TCP segment. */
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8016cc0:	697b      	ldr	r3, [r7, #20]
 8016cc2:	68db      	ldr	r3, [r3, #12]
 8016cc4:	60bb      	str	r3, [r7, #8]

                /* Hop to the next item before the current gets unlinked. */
                pxIterator = listGET_NEXT( pxIterator );
 8016cc6:	697b      	ldr	r3, [r7, #20]
 8016cc8:	685b      	ldr	r3, [r3, #4]
 8016cca:	617b      	str	r3, [r7, #20]

                /* Fast retransmission:
                 * When 3 packets with a higher sequence number have been acknowledged
                 * by the peer, it is very unlikely a current packet will ever arrive.
                 * It will be retransmitted far before the RTO. */
                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8016ccc:	68bb      	ldr	r3, [r7, #8]
 8016cce:	7d9b      	ldrb	r3, [r3, #22]
 8016cd0:	f003 0302 	and.w	r3, r3, #2
 8016cd4:	b2db      	uxtb	r3, r3
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d13c      	bne.n	8016d54 <prvTCPWindowFastRetransmit+0xb0>
                {
                    if( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE )
 8016cda:	68bb      	ldr	r3, [r7, #8]
 8016cdc:	681b      	ldr	r3, [r3, #0]
 8016cde:	6839      	ldr	r1, [r7, #0]
 8016ce0:	4618      	mov	r0, r3
 8016ce2:	f7fe feb2 	bl	8015a4a <xSequenceLessThan>
 8016ce6:	4603      	mov	r3, r0
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d033      	beq.n	8016d54 <prvTCPWindowFastRetransmit+0xb0>
                    {
                        pxSegment->u.bits.ucDupAckCount++;
 8016cec:	68bb      	ldr	r3, [r7, #8]
 8016cee:	7d5b      	ldrb	r3, [r3, #21]
 8016cf0:	3301      	adds	r3, #1
 8016cf2:	b2da      	uxtb	r2, r3
 8016cf4:	68bb      	ldr	r3, [r7, #8]
 8016cf6:	755a      	strb	r2, [r3, #21]

                        if( pxSegment->u.bits.ucDupAckCount == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT )
 8016cf8:	68bb      	ldr	r3, [r7, #8]
 8016cfa:	7d5b      	ldrb	r3, [r3, #21]
 8016cfc:	2b03      	cmp	r3, #3
 8016cfe:	d129      	bne.n	8016d54 <prvTCPWindowFastRetransmit+0xb0>
                        {
                            pxSegment->u.bits.ucTransmitCount = ( uint8_t ) pdFALSE;
 8016d00:	68bb      	ldr	r3, [r7, #8]
 8016d02:	2200      	movs	r2, #0
 8016d04:	751a      	strb	r2, [r3, #20]

                            /* Not clearing 'ucDupAckCount' yet as more SACK's might come in
                             * which might lead to a second fast rexmit. */
                            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8016d06:	4b18      	ldr	r3, [pc, #96]	@ (8016d68 <prvTCPWindowFastRetransmit+0xc4>)
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	db11      	blt.n	8016d32 <prvTCPWindowFastRetransmit+0x8e>
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016d14:	2b17      	cmp	r3, #23
 8016d16:	d00c      	beq.n	8016d32 <prvTCPWindowFastRetransmit+0x8e>
                            {
                                FreeRTOS_debug_printf( ( "prvTCPWindowFastRetransmit: Requeue sequence number %u < %u\n",
 8016d18:	68bb      	ldr	r3, [r7, #8]
 8016d1a:	681a      	ldr	r2, [r3, #0]
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	69db      	ldr	r3, [r3, #28]
 8016d20:	1ad1      	subs	r1, r2, r3
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	69db      	ldr	r3, [r3, #28]
 8016d26:	683a      	ldr	r2, [r7, #0]
 8016d28:	1ad3      	subs	r3, r2, r3
 8016d2a:	461a      	mov	r2, r3
 8016d2c:	480f      	ldr	r0, [pc, #60]	@ (8016d6c <prvTCPWindowFastRetransmit+0xc8>)
 8016d2e:	f00b fd39 	bl	80227a4 <lUDPLoggingPrintf>
                                                         ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ) ) );
                            }

                            /* Remove it from xWaitQueue. */
                            ( void ) uxListRemove( &pxSegment->xQueueItem );
 8016d32:	68bb      	ldr	r3, [r7, #8]
 8016d34:	3318      	adds	r3, #24
 8016d36:	4618      	mov	r0, r3
 8016d38:	f7ec fdd0 	bl	80038dc <uxListRemove>

                            /* Add this segment to the priority queue so it gets
                             * retransmitted immediately. */
                            vListInsertFifo( &( pxWindow->xPriorityQueue ), &( pxSegment->xQueueItem ) );
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8016d42:	68bb      	ldr	r3, [r7, #8]
 8016d44:	3318      	adds	r3, #24
 8016d46:	4619      	mov	r1, r3
 8016d48:	4610      	mov	r0, r2
 8016d4a:	f7fe febf 	bl	8015acc <vListInsertFifo>
                            ulCount++;
 8016d4e:	693b      	ldr	r3, [r7, #16]
 8016d50:	3301      	adds	r3, #1
 8016d52:	613b      	str	r3, [r7, #16]
            while( pxIterator != pxEnd )
 8016d54:	697a      	ldr	r2, [r7, #20]
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	429a      	cmp	r2, r3
 8016d5a:	d1b1      	bne.n	8016cc0 <prvTCPWindowFastRetransmit+0x1c>
                        }
                    }
                }
            }

            return ulCount;
 8016d5c:	693b      	ldr	r3, [r7, #16]
        }
 8016d5e:	4618      	mov	r0, r3
 8016d60:	3718      	adds	r7, #24
 8016d62:	46bd      	mov	sp, r7
 8016d64:	bd80      	pop	{r7, pc}
 8016d66:	bf00      	nop
 8016d68:	2000164c 	.word	0x2000164c
 8016d6c:	08027860 	.word	0x08027860

08016d70 <ulTCPWindowTxAck>:
 *
 * @return The location where the packet should be added.
 */
        uint32_t ulTCPWindowTxAck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber )
        {
 8016d70:	b580      	push	{r7, lr}
 8016d72:	b084      	sub	sp, #16
 8016d74:	af00      	add	r7, sp, #0
 8016d76:	6078      	str	r0, [r7, #4]
 8016d78:	6039      	str	r1, [r7, #0]
            uint32_t ulFirstSequence;
            uint32_t ulReturn;

            /* Receive a normal ACK. */

            ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	6a1b      	ldr	r3, [r3, #32]
 8016d7e:	60bb      	str	r3, [r7, #8]

            if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 8016d80:	68b9      	ldr	r1, [r7, #8]
 8016d82:	6838      	ldr	r0, [r7, #0]
 8016d84:	f7fe fe4c 	bl	8015a20 <xSequenceLessThanOrEqual>
 8016d88:	4603      	mov	r3, r0
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d002      	beq.n	8016d94 <ulTCPWindowTxAck+0x24>
            {
                ulReturn = 0U;
 8016d8e:	2300      	movs	r3, #0
 8016d90:	60fb      	str	r3, [r7, #12]
 8016d92:	e005      	b.n	8016da0 <ulTCPWindowTxAck+0x30>
            }
            else
            {
                ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 8016d94:	683a      	ldr	r2, [r7, #0]
 8016d96:	68b9      	ldr	r1, [r7, #8]
 8016d98:	6878      	ldr	r0, [r7, #4]
 8016d9a:	f7ff feb1 	bl	8016b00 <prvTCPWindowTxCheckAck>
 8016d9e:	60f8      	str	r0, [r7, #12]
            }

            return ulReturn;
 8016da0:	68fb      	ldr	r3, [r7, #12]
        }
 8016da2:	4618      	mov	r0, r3
 8016da4:	3710      	adds	r7, #16
 8016da6:	46bd      	mov	sp, r7
 8016da8:	bd80      	pop	{r7, pc}
	...

08016dac <ulTCPWindowTxSack>:
 *         the head position.
 */
        uint32_t ulTCPWindowTxSack( TCPWindow_t * pxWindow,
                                    uint32_t ulFirst,
                                    uint32_t ulLast )
        {
 8016dac:	b5b0      	push	{r4, r5, r7, lr}
 8016dae:	b088      	sub	sp, #32
 8016db0:	af02      	add	r7, sp, #8
 8016db2:	60f8      	str	r0, [r7, #12]
 8016db4:	60b9      	str	r1, [r7, #8]
 8016db6:	607a      	str	r2, [r7, #4]
            uint32_t ulAckCount;
            uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 8016db8:	68fb      	ldr	r3, [r7, #12]
 8016dba:	6a1b      	ldr	r3, [r3, #32]
 8016dbc:	617b      	str	r3, [r7, #20]

            /* Receive a SACK option. */
            ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 8016dbe:	687a      	ldr	r2, [r7, #4]
 8016dc0:	68b9      	ldr	r1, [r7, #8]
 8016dc2:	68f8      	ldr	r0, [r7, #12]
 8016dc4:	f7ff fe9c 	bl	8016b00 <prvTCPWindowTxCheckAck>
 8016dc8:	6138      	str	r0, [r7, #16]
            ( void ) prvTCPWindowFastRetransmit( pxWindow, ulFirst );
 8016dca:	68b9      	ldr	r1, [r7, #8]
 8016dcc:	68f8      	ldr	r0, [r7, #12]
 8016dce:	f7ff ff69 	bl	8016ca4 <prvTCPWindowFastRetransmit>

            if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 8016dd2:	4b16      	ldr	r3, [pc, #88]	@ (8016e2c <ulTCPWindowTxSack+0x80>)
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	dd23      	ble.n	8016e22 <ulTCPWindowTxSack+0x76>
 8016dda:	6979      	ldr	r1, [r7, #20]
 8016ddc:	68b8      	ldr	r0, [r7, #8]
 8016dde:	f7fe fe4a 	bl	8015a76 <xSequenceGreaterThan>
 8016de2:	4603      	mov	r3, r0
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d01c      	beq.n	8016e22 <ulTCPWindowTxSack+0x76>
            {
                FreeRTOS_debug_printf( ( "ulTCPWindowTxSack[%u,%u]: from %u to %u (ack = %u)\n",
 8016de8:	68fb      	ldr	r3, [r7, #12]
 8016dea:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8016dee:	461c      	mov	r4, r3
 8016df0:	68fb      	ldr	r3, [r7, #12]
 8016df2:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016df6:	461d      	mov	r5, r3
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	69db      	ldr	r3, [r3, #28]
 8016dfc:	68ba      	ldr	r2, [r7, #8]
 8016dfe:	1ad0      	subs	r0, r2, r3
 8016e00:	68fb      	ldr	r3, [r7, #12]
 8016e02:	69db      	ldr	r3, [r3, #28]
 8016e04:	687a      	ldr	r2, [r7, #4]
 8016e06:	1ad3      	subs	r3, r2, r3
 8016e08:	68fa      	ldr	r2, [r7, #12]
 8016e0a:	6a11      	ldr	r1, [r2, #32]
 8016e0c:	68fa      	ldr	r2, [r7, #12]
 8016e0e:	69d2      	ldr	r2, [r2, #28]
 8016e10:	1a8a      	subs	r2, r1, r2
 8016e12:	9201      	str	r2, [sp, #4]
 8016e14:	9300      	str	r3, [sp, #0]
 8016e16:	4603      	mov	r3, r0
 8016e18:	462a      	mov	r2, r5
 8016e1a:	4621      	mov	r1, r4
 8016e1c:	4804      	ldr	r0, [pc, #16]	@ (8016e30 <ulTCPWindowTxSack+0x84>)
 8016e1e:	f00b fcc1 	bl	80227a4 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
            }

            return ulAckCount;
 8016e22:	693b      	ldr	r3, [r7, #16]
        }
 8016e24:	4618      	mov	r0, r3
 8016e26:	3718      	adds	r7, #24
 8016e28:	46bd      	mov	sp, r7
 8016e2a:	bdb0      	pop	{r4, r5, r7, pc}
 8016e2c:	2000164c 	.word	0x2000164c
 8016e30:	080278a0 	.word	0x080278a0

08016e34 <vProcessGeneratedUDPPacket>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8016e34:	b580      	push	{r7, lr}
 8016e36:	b084      	sub	sp, #16
 8016e38:	af00      	add	r7, sp, #0
 8016e3a:	6078      	str	r0, [r7, #4]
    const UDPPacket_t * pxUDPPacket;

    if( pxNetworkBuffer != NULL )
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d014      	beq.n	8016e6c <vProcessGeneratedUDPPacket+0x38>
        /* Map the UDP packet onto the start of the frame. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e46:	60fb      	str	r3, [r7, #12]

        switch( pxUDPPacket->xEthernetHeader.usFrameType )
 8016e48:	68fb      	ldr	r3, [r7, #12]
 8016e4a:	899b      	ldrh	r3, [r3, #12]
 8016e4c:	b29b      	uxth	r3, r3
 8016e4e:	2b08      	cmp	r3, #8
 8016e50:	d004      	beq.n	8016e5c <vProcessGeneratedUDPPacket+0x28>
 8016e52:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8016e56:	4293      	cmp	r3, r2
 8016e58:	d004      	beq.n	8016e64 <vProcessGeneratedUDPPacket+0x30>
                    vProcessGeneratedUDPPacket_IPv6( pxNetworkBuffer );
                    break;
            #endif
            default:
                /* do nothing, coverity happy */
                break;
 8016e5a:	e007      	b.n	8016e6c <vProcessGeneratedUDPPacket+0x38>
                    vProcessGeneratedUDPPacket_IPv4( pxNetworkBuffer );
 8016e5c:	6878      	ldr	r0, [r7, #4]
 8016e5e:	f000 f845 	bl	8016eec <vProcessGeneratedUDPPacket_IPv4>
                    break;
 8016e62:	e003      	b.n	8016e6c <vProcessGeneratedUDPPacket+0x38>
                    vProcessGeneratedUDPPacket_IPv6( pxNetworkBuffer );
 8016e64:	6878      	ldr	r0, [r7, #4]
 8016e66:	f000 fae3 	bl	8017430 <vProcessGeneratedUDPPacket_IPv6>
                    break;
 8016e6a:	bf00      	nop
        }
    }
}
 8016e6c:	bf00      	nop
 8016e6e:	3710      	adds	r7, #16
 8016e70:	46bd      	mov	sp, r7
 8016e72:	bd80      	pop	{r7, pc}

08016e74 <xProcessReceivedUDPPacket>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint16_t usPort,
                                      BaseType_t * pxIsWaitingForARPResolution )
{
 8016e74:	b580      	push	{r7, lr}
 8016e76:	b086      	sub	sp, #24
 8016e78:	af00      	add	r7, sp, #0
 8016e7a:	60f8      	str	r0, [r7, #12]
 8016e7c:	460b      	mov	r3, r1
 8016e7e:	607a      	str	r2, [r7, #4]
 8016e80:	817b      	strh	r3, [r7, #10]
    /* Returning pdPASS means that the packet was consumed, released. */
    BaseType_t xReturn = pdFAIL;
 8016e82:	2300      	movs	r3, #0
 8016e84:	617b      	str	r3, [r7, #20]
    const UDPPacket_t * pxUDPPacket;

    configASSERT( pxNetworkBuffer != NULL );
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d103      	bne.n	8016e94 <xProcessReceivedUDPPacket+0x20>
 8016e8c:	2178      	movs	r1, #120	@ 0x78
 8016e8e:	4816      	ldr	r0, [pc, #88]	@ (8016ee8 <xProcessReceivedUDPPacket+0x74>)
 8016e90:	f7ea fdba 	bl	8001a08 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8016e94:	68fb      	ldr	r3, [r7, #12]
 8016e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d103      	bne.n	8016ea4 <xProcessReceivedUDPPacket+0x30>
 8016e9c:	2179      	movs	r1, #121	@ 0x79
 8016e9e:	4812      	ldr	r0, [pc, #72]	@ (8016ee8 <xProcessReceivedUDPPacket+0x74>)
 8016ea0:	f7ea fdb2 	bl	8001a08 <vAssertCalled>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( const UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016ea4:	68fb      	ldr	r3, [r7, #12]
 8016ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ea8:	613b      	str	r3, [r7, #16]

    switch( pxUDPPacket->xEthernetHeader.usFrameType )
 8016eaa:	693b      	ldr	r3, [r7, #16]
 8016eac:	899b      	ldrh	r3, [r3, #12]
 8016eae:	b29b      	uxth	r3, r3
 8016eb0:	2b08      	cmp	r3, #8
 8016eb2:	d004      	beq.n	8016ebe <xProcessReceivedUDPPacket+0x4a>
 8016eb4:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8016eb8:	4293      	cmp	r3, r2
 8016eba:	d008      	beq.n	8016ece <xProcessReceivedUDPPacket+0x5a>
                                                          usPort, pxIsWaitingForARPResolution );
                break;
        #endif
        default:
            /* do nothing, coverity happy */
            break;
 8016ebc:	e00f      	b.n	8016ede <xProcessReceivedUDPPacket+0x6a>
                xReturn = xProcessReceivedUDPPacket_IPv4( pxNetworkBuffer,
 8016ebe:	897b      	ldrh	r3, [r7, #10]
 8016ec0:	687a      	ldr	r2, [r7, #4]
 8016ec2:	4619      	mov	r1, r3
 8016ec4:	68f8      	ldr	r0, [r7, #12]
 8016ec6:	f000 f92f 	bl	8017128 <xProcessReceivedUDPPacket_IPv4>
 8016eca:	6178      	str	r0, [r7, #20]
                break;
 8016ecc:	e007      	b.n	8016ede <xProcessReceivedUDPPacket+0x6a>
                xReturn = xProcessReceivedUDPPacket_IPv6( pxNetworkBuffer,
 8016ece:	897b      	ldrh	r3, [r7, #10]
 8016ed0:	687a      	ldr	r2, [r7, #4]
 8016ed2:	4619      	mov	r1, r3
 8016ed4:	68f8      	ldr	r0, [r7, #12]
 8016ed6:	f000 fbdd 	bl	8017694 <xProcessReceivedUDPPacket_IPv6>
 8016eda:	6178      	str	r0, [r7, #20]
                break;
 8016edc:	bf00      	nop
    }

    return xReturn;
 8016ede:	697b      	ldr	r3, [r7, #20]
}
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	3718      	adds	r7, #24
 8016ee4:	46bd      	mov	sp, r7
 8016ee6:	bd80      	pop	{r7, pc}
 8016ee8:	080278d4 	.word	0x080278d4

08016eec <vProcessGeneratedUDPPacket_IPv4>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket_IPv4( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8016eec:	b580      	push	{r7, lr}
 8016eee:	b08e      	sub	sp, #56	@ 0x38
 8016ef0:	af00      	add	r7, sp, #0
 8016ef2:	6078      	str	r0, [r7, #4]
    UDPPacket_t * pxUDPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	695b      	ldr	r3, [r3, #20]
 8016ef8:	60fb      	str	r3, [r7, #12]
    NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016efe:	60bb      	str	r3, [r7, #8]
    /* Map the UDP packet onto the start of the frame. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f04:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ipconfigSUPPORT_OUTGOING_PINGS == 1
        if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d104      	bne.n	8016f18 <vProcessGeneratedUDPPacket_IPv4+0x2c>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( ICMPPacket_t );
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016f12:	3b2a      	subs	r3, #42	@ 0x2a
 8016f14:	633b      	str	r3, [r7, #48]	@ 0x30
 8016f16:	e003      	b.n	8016f20 <vProcessGeneratedUDPPacket_IPv4+0x34>
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016f1c:	3b2a      	subs	r3, #42	@ 0x2a
 8016f1e:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ), &( pxEndPoint ) );
 8016f20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016f22:	f107 0208 	add.w	r2, r7, #8
 8016f26:	f107 030c 	add.w	r3, r7, #12
 8016f2a:	4618      	mov	r0, r3
 8016f2c:	f7f0 fc4a 	bl	80077c4 <eARPGetCacheEntry>
 8016f30:	4603      	mov	r3, r0
 8016f32:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( pxNetworkBuffer->pxEndPoint == NULL )
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d102      	bne.n	8016f44 <vProcessGeneratedUDPPacket_IPv4+0x58>
    {
        pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8016f3e:	68ba      	ldr	r2, [r7, #8]
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    if( eReturned != eCantSendPacket )
 8016f44:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016f48:	2b02      	cmp	r3, #2
 8016f4a:	f000 80a0 	beq.w	801708e <vProcessGeneratedUDPPacket_IPv4+0x1a2>
    {
        if( eReturned == eARPCacheHit )
 8016f4e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016f52:	2b01      	cmp	r3, #1
 8016f54:	d176      	bne.n	8017044 <vProcessGeneratedUDPPacket_IPv4+0x158>
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* Create short cuts to the data within the packet. */
            pxIPHeader = &( pxUDPPacket->xIPHeader );
 8016f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f58:	330e      	adds	r3, #14
 8016f5a:	627b      	str	r3, [r7, #36]	@ 0x24

            #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

                /* Is it possible that the packet is not actually a UDP packet
                 * after all, but an ICMP packet. */
                if( pxNetworkBuffer->usPort != ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d025      	beq.n	8016fb0 <vProcessGeneratedUDPPacket_IPv4+0xc4>
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader;

                pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 8016f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f66:	3322      	adds	r3, #34	@ 0x22
 8016f68:	623b      	str	r3, [r7, #32]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8016f6e:	6a3b      	ldr	r3, [r7, #32]
 8016f70:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 8016f76:	6a3b      	ldr	r3, [r7, #32]
 8016f78:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( UDPHeader_t ) );
 8016f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f7c:	b29b      	uxth	r3, r3
 8016f7e:	3308      	adds	r3, #8
 8016f80:	b29a      	uxth	r2, r3
 8016f82:	6a3b      	ldr	r3, [r7, #32]
 8016f84:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 8016f86:	6a3b      	ldr	r3, [r7, #32]
 8016f88:	889b      	ldrh	r3, [r3, #4]
 8016f8a:	b29b      	uxth	r3, r3
 8016f8c:	021b      	lsls	r3, r3, #8
 8016f8e:	b21a      	sxth	r2, r3
 8016f90:	6a3b      	ldr	r3, [r7, #32]
 8016f92:	889b      	ldrh	r3, [r3, #4]
 8016f94:	b29b      	uxth	r3, r3
 8016f96:	0a1b      	lsrs	r3, r3, #8
 8016f98:	b29b      	uxth	r3, r3
 8016f9a:	b21b      	sxth	r3, r3
 8016f9c:	4313      	orrs	r3, r2
 8016f9e:	b21b      	sxth	r3, r3
 8016fa0:	b29a      	uxth	r2, r3
 8016fa2:	6a3b      	ldr	r3, [r7, #32]
 8016fa4:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 8016fa6:	6a3b      	ldr	r3, [r7, #32]
 8016fa8:	2200      	movs	r2, #0
 8016faa:	719a      	strb	r2, [r3, #6]
 8016fac:	2200      	movs	r2, #0
 8016fae:	71da      	strb	r2, [r3, #7]
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = ucDefaultPartUDPPacketHeader;
 8016fb0:	4b5b      	ldr	r3, [pc, #364]	@ (8017120 <vProcessGeneratedUDPPacket_IPv4+0x234>)
 8016fb2:	61fb      	str	r3, [r7, #28]
            /* The Ethernet source address is at offset 6. */
            pvCopyDest = &pxNetworkBuffer->pucEthernetBuffer[ sizeof( MACAddress_t ) ];
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016fb8:	3306      	adds	r3, #6
 8016fba:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ucDefaultPartUDPPacketHeader ) );
 8016fbc:	2218      	movs	r2, #24
 8016fbe:	69f9      	ldr	r1, [r7, #28]
 8016fc0:	69b8      	ldr	r0, [r7, #24]
 8016fc2:	f00b fe0b 	bl	8022bdc <memcpy>

            #if ipconfigSUPPORT_OUTGOING_PINGS == 1
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d109      	bne.n	8016fe2 <vProcessGeneratedUDPPacket_IPv4+0xf6>
                {
                    pxIPHeader->ucProtocol = ipPROTOCOL_ICMP;
 8016fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fd0:	2201      	movs	r2, #1
 8016fd2:	725a      	strb	r2, [r3, #9]
                    pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( ICMPHeader_t ) );
 8016fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fd6:	b29b      	uxth	r3, r3
 8016fd8:	331c      	adds	r3, #28
 8016fda:	b29a      	uxth	r2, r3
 8016fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fde:	805a      	strh	r2, [r3, #2]
 8016fe0:	e005      	b.n	8016fee <vProcessGeneratedUDPPacket_IPv4+0x102>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 8016fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fe4:	b29b      	uxth	r3, r3
 8016fe6:	331c      	adds	r3, #28
 8016fe8:	b29a      	uxth	r2, r3
 8016fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fec:	805a      	strh	r2, [r3, #2]
            }

            pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 8016fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ff0:	885b      	ldrh	r3, [r3, #2]
 8016ff2:	b29b      	uxth	r3, r3
 8016ff4:	021b      	lsls	r3, r3, #8
 8016ff6:	b21a      	sxth	r2, r3
 8016ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ffa:	885b      	ldrh	r3, [r3, #2]
 8016ffc:	b29b      	uxth	r3, r3
 8016ffe:	0a1b      	lsrs	r3, r3, #8
 8017000:	b29b      	uxth	r3, r3
 8017002:	b21b      	sxth	r3, r3
 8017004:	4313      	orrs	r3, r2
 8017006:	b21b      	sxth	r3, r3
 8017008:	b29a      	uxth	r2, r3
 801700a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801700c:	805a      	strh	r2, [r3, #2]
            pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 801700e:	687b      	ldr	r3, [r7, #4]
 8017010:	695a      	ldr	r2, [r3, #20]
 8017012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017014:	611a      	str	r2, [r3, #16]

            if( pxNetworkBuffer->pxEndPoint != NULL )
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801701a:	2b00      	cmp	r3, #0
 801701c:	d004      	beq.n	8017028 <vProcessGeneratedUDPPacket_IPv4+0x13c>
            {
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017022:	681a      	ldr	r2, [r3, #0]
 8017024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017026:	60da      	str	r2, [r3, #12]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 8017028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801702a:	2200      	movs	r2, #0
 801702c:	719a      	strb	r2, [r3, #6]
 801702e:	2200      	movs	r2, #0
 8017030:	71da      	strb	r2, [r3, #7]

            #if ( ipconfigUSE_LLMNR == 1 )
            {
                /* LLMNR messages are typically used on a LAN and they're
                 * not supposed to cross routers */
                if( pxNetworkBuffer->xIPAddress.ulIP_IPv4 == ipLLMNR_IP_ADDR )
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	695b      	ldr	r3, [r3, #20]
 8017036:	4a3b      	ldr	r2, [pc, #236]	@ (8017124 <vProcessGeneratedUDPPacket_IPv4+0x238>)
 8017038:	4293      	cmp	r3, r2
 801703a:	d128      	bne.n	801708e <vProcessGeneratedUDPPacket_IPv4+0x1a2>
                {
                    pxIPHeader->ucTimeToLive = 0x01;
 801703c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801703e:	2201      	movs	r2, #1
 8017040:	721a      	strb	r2, [r3, #8]
 8017042:	e024      	b.n	801708e <vProcessGeneratedUDPPacket_IPv4+0x1a2>
                    pxUDPPacket->xUDPHeader.usChecksum = 0U;
                }
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 8017044:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8017048:	2b00      	cmp	r3, #0
 801704a:	d11d      	bne.n	8017088 <vProcessGeneratedUDPPacket_IPv4+0x19c>
        {
            /* Add an entry to the ARP table with a null hardware address.
             * This allows the ARP timer to know that an ARP reply is
             * outstanding, and perform retransmissions if necessary. */
            vARPRefreshCacheEntry( NULL, ulIPAddress, NULL );
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	2200      	movs	r2, #0
 8017050:	4619      	mov	r1, r3
 8017052:	2000      	movs	r0, #0
 8017054:	f7f0 faa2 	bl	800759c <vARPRefreshCacheEntry>
            iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* 'ulIPAddress' might have become the address of the Gateway.
             * Find the route again. */

            pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxNetworkBuffer->xIPAddress.ulIP_IPv4, 11 );
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	695b      	ldr	r3, [r3, #20]
 801705c:	210b      	movs	r1, #11
 801705e:	4618      	mov	r0, r3
 8017060:	f7f6 fe3a 	bl	800dcd8 <FreeRTOS_FindEndPointOnNetMask>
 8017064:	4602      	mov	r2, r0
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	631a      	str	r2, [r3, #48]	@ 0x30

            if( pxNetworkBuffer->pxEndPoint == NULL )
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801706e:	2b00      	cmp	r3, #0
 8017070:	d103      	bne.n	801707a <vProcessGeneratedUDPPacket_IPv4+0x18e>
            {
                eReturned = eCantSendPacket;
 8017072:	2302      	movs	r3, #2
 8017074:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8017078:	e009      	b.n	801708e <vProcessGeneratedUDPPacket_IPv4+0x1a2>
            }
            else
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 801707a:	68fa      	ldr	r2, [r7, #12]
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	615a      	str	r2, [r3, #20]
                vARPGenerateRequestPacket( pxNetworkBuffer );
 8017080:	6878      	ldr	r0, [r7, #4]
 8017082:	f7f0 fe07 	bl	8007c94 <vARPGenerateRequestPacket>
 8017086:	e002      	b.n	801708e <vProcessGeneratedUDPPacket_IPv4+0x1a2>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 8017088:	2302      	movs	r3, #2
 801708a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if( eReturned != eCantSendPacket )
 801708e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8017092:	2b02      	cmp	r3, #2
 8017094:	d03d      	beq.n	8017112 <vProcessGeneratedUDPPacket_IPv4+0x226>
    {
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        if( pxNetworkBuffer->pxEndPoint != NULL )
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801709a:	2b00      	cmp	r3, #0
 801709c:	d035      	beq.n	801710a <vProcessGeneratedUDPPacket_IPv4+0x21e>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80170a2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80170a6:	617b      	str	r3, [r7, #20]
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            EthernetHeader_t * pxEthernetHeader = ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80170ac:	613b      	str	r3, [r7, #16]
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 80170ae:	693b      	ldr	r3, [r7, #16]
 80170b0:	1d98      	adds	r0, r3, #6
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80170b6:	33e8      	adds	r3, #232	@ 0xe8
 80170b8:	2206      	movs	r2, #6
 80170ba:	4619      	mov	r1, r3
 80170bc:	f00b fd8e 	bl	8022bdc <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80170c4:	2b3b      	cmp	r3, #59	@ 0x3b
 80170c6:	d812      	bhi.n	80170ee <vProcessGeneratedUDPPacket_IPv4+0x202>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80170cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80170ce:	e008      	b.n	80170e2 <vProcessGeneratedUDPPacket_IPv4+0x1f6>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80170d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80170d6:	4413      	add	r3, r2
 80170d8:	2200      	movs	r2, #0
 80170da:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80170dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80170de:	3301      	adds	r3, #1
 80170e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80170e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80170e4:	2b3b      	cmp	r3, #59	@ 0x3b
 80170e6:	ddf3      	ble.n	80170d0 <vProcessGeneratedUDPPacket_IPv4+0x1e4>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	223c      	movs	r2, #60	@ 0x3c
 80170ec:	629a      	str	r2, [r3, #40]	@ 0x28
                }
            }
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            if( ( pxInterface != NULL ) && ( pxInterface->pfOutput != NULL ) )
 80170ee:	697b      	ldr	r3, [r7, #20]
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d011      	beq.n	8017118 <vProcessGeneratedUDPPacket_IPv4+0x22c>
 80170f4:	697b      	ldr	r3, [r7, #20]
 80170f6:	68db      	ldr	r3, [r3, #12]
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d00d      	beq.n	8017118 <vProcessGeneratedUDPPacket_IPv4+0x22c>
            {
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 80170fc:	697b      	ldr	r3, [r7, #20]
 80170fe:	68db      	ldr	r3, [r3, #12]
 8017100:	2201      	movs	r2, #1
 8017102:	6879      	ldr	r1, [r7, #4]
 8017104:	6978      	ldr	r0, [r7, #20]
 8017106:	4798      	blx	r3
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 8017108:	e006      	b.n	8017118 <vProcessGeneratedUDPPacket_IPv4+0x22c>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801710a:	6878      	ldr	r0, [r7, #4]
 801710c:	f000 fca2 	bl	8017a54 <vReleaseNetworkBufferAndDescriptor>
}
 8017110:	e002      	b.n	8017118 <vProcessGeneratedUDPPacket_IPv4+0x22c>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8017112:	6878      	ldr	r0, [r7, #4]
 8017114:	f000 fc9e 	bl	8017a54 <vReleaseNetworkBufferAndDescriptor>
}
 8017118:	bf00      	nop
 801711a:	3738      	adds	r7, #56	@ 0x38
 801711c:	46bd      	mov	sp, r7
 801711e:	bd80      	pop	{r7, pc}
 8017120:	08028000 	.word	0x08028000
 8017124:	fc0000e0 	.word	0xfc0000e0

08017128 <xProcessReceivedUDPPacket_IPv4>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket_IPv4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                           uint16_t usPort,
                                           BaseType_t * pxIsWaitingForARPResolution )
{
 8017128:	b590      	push	{r4, r7, lr}
 801712a:	b099      	sub	sp, #100	@ 0x64
 801712c:	af02      	add	r7, sp, #8
 801712e:	60f8      	str	r0, [r7, #12]
 8017130:	460b      	mov	r3, r1
 8017132:	607a      	str	r2, [r7, #4]
 8017134:	817b      	strh	r3, [r7, #10]
    BaseType_t xReturn = pdPASS;
 8017136:	2301      	movs	r3, #1
 8017138:	657b      	str	r3, [r7, #84]	@ 0x54
    FreeRTOS_Socket_t * pxSocket;
    const UDPPacket_t * pxUDPPacket;
    const NetworkEndPoint_t * pxEndpoint;

    configASSERT( pxNetworkBuffer != NULL );
 801713a:	68fb      	ldr	r3, [r7, #12]
 801713c:	2b00      	cmp	r3, #0
 801713e:	d104      	bne.n	801714a <xProcessReceivedUDPPacket_IPv4+0x22>
 8017140:	f240 116f 	movw	r1, #367	@ 0x16f
 8017144:	4872      	ldr	r0, [pc, #456]	@ (8017310 <xProcessReceivedUDPPacket_IPv4+0x1e8>)
 8017146:	f7ea fc5f 	bl	8001a08 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801714e:	2b00      	cmp	r3, #0
 8017150:	d104      	bne.n	801715c <xProcessReceivedUDPPacket_IPv4+0x34>
 8017152:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8017156:	486e      	ldr	r0, [pc, #440]	@ (8017310 <xProcessReceivedUDPPacket_IPv4+0x1e8>)
 8017158:	f7ea fc56 	bl	8001a08 <vAssertCalled>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017160:	653b      	str	r3, [r7, #80]	@ 0x50
    pxEndpoint = pxNetworkBuffer->pxEndPoint;
 8017162:	68fb      	ldr	r3, [r7, #12]
 8017164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017166:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 8017168:	897b      	ldrh	r3, [r7, #10]
 801716a:	4618      	mov	r0, r3
 801716c:	f7f8 fb42 	bl	800f7f4 <pxUDPSocketLookup>
 8017170:	64b8      	str	r0, [r7, #72]	@ 0x48

    *pxIsWaitingForARPResolution = pdFALSE;
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	2200      	movs	r2, #0
 8017176:	601a      	str	r2, [r3, #0]

    do
    {
        if( pxSocket != NULL )
 8017178:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801717a:	2b00      	cmp	r3, #0
 801717c:	f000 8085 	beq.w	801728a <xProcessReceivedUDPPacket_IPv4+0x162>
        {
            if( ( pxEndpoint != NULL ) && ( pxEndpoint->ipv4_settings.ulIPAddress != 0U ) )
 8017180:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017182:	2b00      	cmp	r3, #0
 8017184:	d018      	beq.n	80171b8 <xProcessReceivedUDPPacket_IPv4+0x90>
 8017186:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017188:	681b      	ldr	r3, [r3, #0]
 801718a:	2b00      	cmp	r3, #0
 801718c:	d014      	beq.n	80171b8 <xProcessReceivedUDPPacket_IPv4+0x90>
            {
                if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 801718e:	68f8      	ldr	r0, [r7, #12]
 8017190:	f7f0 f8ee 	bl	8007370 <xCheckRequiresARPResolution>
 8017194:	4603      	mov	r3, r0
 8017196:	2b01      	cmp	r3, #1
 8017198:	d105      	bne.n	80171a6 <xProcessReceivedUDPPacket_IPv4+0x7e>
                {
                    /* Mark this packet as waiting for ARP resolution. */
                    *pxIsWaitingForARPResolution = pdTRUE;
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	2201      	movs	r2, #1
 801719e:	601a      	str	r2, [r3, #0]

                    /* Return a fail to show that the frame will not be processed right now. */
                    xReturn = pdFAIL;
 80171a0:	2300      	movs	r3, #0
 80171a2:	657b      	str	r3, [r7, #84]	@ 0x54
                    break;
 80171a4:	e0ae      	b.n	8017304 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                }
                else
                {
                    /* Update the age of this cache entry since a packet was received. */
                    vARPRefreshCacheEntryAge( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 80171a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80171a8:	1d9a      	adds	r2, r3, #6
 80171aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80171ac:	f8d3 301a 	ldr.w	r3, [r3, #26]
 80171b0:	4619      	mov	r1, r3
 80171b2:	4610      	mov	r0, r2
 80171b4:	f7f0 f9bc 	bl	8007530 <vARPRefreshCacheEntryAge>
            }

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                /* Did the owner of this socket register a reception handler ? */
                if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
 80171b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80171ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80171bc:	2b00      	cmp	r3, #0
 80171be:	d02f      	beq.n	8017220 <xProcessReceivedUDPPacket_IPv4+0xf8>
                {
                    struct freertos_sockaddr xSourceAddress, destinationAddress;
                    void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80171c4:	332a      	adds	r3, #42	@ 0x2a
 80171c6:	647b      	str	r3, [r7, #68]	@ 0x44
                    FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
 80171c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80171ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80171cc:	643b      	str	r3, [r7, #64]	@ 0x40

                    xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80171d2:	857b      	strh	r3, [r7, #42]	@ 0x2a
                    xSourceAddress.sin_address.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	695b      	ldr	r3, [r3, #20]
 80171d8:	633b      	str	r3, [r7, #48]	@ 0x30
                    xSourceAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 80171da:	2302      	movs	r3, #2
 80171dc:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                    xSourceAddress.sin_len = ( uint8_t ) sizeof( xSourceAddress );
 80171e0:	2318      	movs	r3, #24
 80171e2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
                    destinationAddress.sin_port = usPort;
 80171e6:	897b      	ldrh	r3, [r7, #10]
 80171e8:	827b      	strh	r3, [r7, #18]
                    destinationAddress.sin_address.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulDestinationIPAddress;
 80171ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80171ec:	f8d3 301e 	ldr.w	r3, [r3, #30]
 80171f0:	61bb      	str	r3, [r7, #24]
                    destinationAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 80171f2:	2302      	movs	r3, #2
 80171f4:	747b      	strb	r3, [r7, #17]
                    destinationAddress.sin_len = ( uint8_t ) sizeof( destinationAddress );
 80171f6:	2318      	movs	r3, #24
 80171f8:	743b      	strb	r3, [r7, #16]

                    /* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
                    if( xHandler( ( Socket_t ) pxSocket,
                                  ( void * ) pcData,
                                  ( size_t ) ( pxNetworkBuffer->xDataLength - ipUDP_PAYLOAD_OFFSET_IPv4 ),
 80171fa:	68fb      	ldr	r3, [r7, #12]
 80171fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80171fe:	f1a3 022a 	sub.w	r2, r3, #42	@ 0x2a
                    if( xHandler( ( Socket_t ) pxSocket,
 8017202:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8017206:	f107 0310 	add.w	r3, r7, #16
 801720a:	9300      	str	r3, [sp, #0]
 801720c:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 801720e:	460b      	mov	r3, r1
 8017210:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8017212:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8017214:	47a0      	blx	r4
 8017216:	4603      	mov	r3, r0
 8017218:	2b00      	cmp	r3, #0
 801721a:	d001      	beq.n	8017220 <xProcessReceivedUDPPacket_IPv4+0xf8>
                                  &( xSourceAddress ),
                                  &( destinationAddress ) ) != 0 )
                    {
                        xReturn = pdFAIL; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
 801721c:	2300      	movs	r3, #0
 801721e:	657b      	str	r3, [r7, #84]	@ 0x54
                }
            }
            #endif /* if ( ipconfigUDP_MAX_RX_PACKETS > 0U ) */

            #if ( ipconfigUSE_CALLBACKS == 1 ) || ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
 8017220:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017222:	2b01      	cmp	r3, #1
 8017224:	d16e      	bne.n	8017304 <xProcessReceivedUDPPacket_IPv4+0x1dc>
            #else
                /* xReturn is still pdPASS. */
            #endif
            {
                vTaskSuspendAll();
 8017226:	f7ed fc41 	bl	8004aac <vTaskSuspendAll>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 801722a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801722c:	3354      	adds	r3, #84	@ 0x54
 801722e:	68fa      	ldr	r2, [r7, #12]
 8017230:	4611      	mov	r1, r2
 8017232:	4618      	mov	r0, r3
 8017234:	f7ec faf5 	bl	8003822 <vListInsertEnd>
                }
                ( void ) xTaskResumeAll();
 8017238:	f7ed fc46 	bl	8004ac8 <xTaskResumeAll>

                /* Set the socket's receive event */
                if( pxSocket->xEventGroup != NULL )
 801723c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801723e:	685b      	ldr	r3, [r3, #4]
 8017240:	2b00      	cmp	r3, #0
 8017242:	d005      	beq.n	8017250 <xProcessReceivedUDPPacket_IPv4+0x128>
                {
                    ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 8017244:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017246:	685b      	ldr	r3, [r3, #4]
 8017248:	2101      	movs	r1, #1
 801724a:	4618      	mov	r0, r3
 801724c:	f7ec f9e4 	bl	8003618 <xEventGroupSetBits>
                }

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 8017250:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017254:	2b00      	cmp	r3, #0
 8017256:	d00c      	beq.n	8017272 <xProcessReceivedUDPPacket_IPv4+0x14a>
 8017258:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801725a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801725c:	f003 0301 	and.w	r3, r3, #1
 8017260:	2b00      	cmp	r3, #0
 8017262:	d006      	beq.n	8017272 <xProcessReceivedUDPPacket_IPv4+0x14a>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 8017264:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	2101      	movs	r1, #1
 801726c:	4618      	mov	r0, r3
 801726e:	f7ec f9d3 	bl	8003618 <xEventGroupSetBits>
                }
                #endif

                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
                {
                    if( pxSocket->pxUserSemaphore != NULL )
 8017272:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017276:	2b00      	cmp	r3, #0
 8017278:	d044      	beq.n	8017304 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                    {
                        ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 801727a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801727c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801727e:	2300      	movs	r3, #0
 8017280:	2200      	movs	r2, #0
 8017282:	2100      	movs	r1, #0
 8017284:	f7ec fca4 	bl	8003bd0 <xQueueGenericSend>
 8017288:	e03c      	b.n	8017304 <xProcessReceivedUDPPacket_IPv4+0x1dc>

                /* A DNS reply, check for the source port.  Although the DNS client
                 * does open a UDP socket to send a messages, this socket will be
                 * closed after a short timeout.  Messages that come late (after the
                 * socket is closed) will be treated here. */
                if( FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usSourcePort ) == ( uint16_t ) ipDNS_PORT )
 801728a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801728c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801728e:	b29b      	uxth	r3, r3
 8017290:	021b      	lsls	r3, r3, #8
 8017292:	b21a      	sxth	r2, r3
 8017294:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017296:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8017298:	b29b      	uxth	r3, r3
 801729a:	0a1b      	lsrs	r3, r3, #8
 801729c:	b29b      	uxth	r3, r3
 801729e:	b21b      	sxth	r3, r3
 80172a0:	4313      	orrs	r3, r2
 80172a2:	b21b      	sxth	r3, r3
 80172a4:	2b35      	cmp	r3, #53	@ 0x35
 80172a6:	d10f      	bne.n	80172c8 <xProcessReceivedUDPPacket_IPv4+0x1a0>
                {
                    vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress,
 80172a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80172aa:	1d98      	adds	r0, r3, #6
 80172ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80172ae:	f8d3 101a 	ldr.w	r1, [r3, #26]
 80172b2:	68fb      	ldr	r3, [r7, #12]
 80172b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80172b6:	461a      	mov	r2, r3
 80172b8:	f7f0 f970 	bl	800759c <vARPRefreshCacheEntry>
                                           pxNetworkBuffer->pxEndPoint );
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 80172bc:	68f8      	ldr	r0, [r7, #12]
 80172be:	f7f0 fe02 	bl	8007ec6 <ulDNSHandlePacket>
 80172c2:	4603      	mov	r3, r0
 80172c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80172c6:	e01d      	b.n	8017304 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                else
            #endif

            #if ( ipconfigUSE_DNS == 1 ) && ( ipconfigUSE_LLMNR == 1 )
                /* A LLMNR request, check for the destination port. */
                if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 80172c8:	897b      	ldrh	r3, [r7, #10]
 80172ca:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 80172ce:	4293      	cmp	r3, r2
 80172d0:	d006      	beq.n	80172e0 <xProcessReceivedUDPPacket_IPv4+0x1b8>
                    ( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) )
 80172d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80172d4:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80172d6:	b29b      	uxth	r3, r3
                if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 80172d8:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 80172dc:	4293      	cmp	r3, r2
 80172de:	d10f      	bne.n	8017300 <xProcessReceivedUDPPacket_IPv4+0x1d8>
                {
                    vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress,
 80172e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80172e2:	1d98      	adds	r0, r3, #6
 80172e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80172e6:	f8d3 101a 	ldr.w	r1, [r3, #26]
 80172ea:	68fb      	ldr	r3, [r7, #12]
 80172ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80172ee:	461a      	mov	r2, r3
 80172f0:	f7f0 f954 	bl	800759c <vARPRefreshCacheEntry>
                                           pxNetworkBuffer->pxEndPoint );
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 80172f4:	68f8      	ldr	r0, [r7, #12]
 80172f6:	f7f0 fde6 	bl	8007ec6 <ulDNSHandlePacket>
 80172fa:	4603      	mov	r3, r0
 80172fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80172fe:	e001      	b.n	8017304 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                    xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
                }
                else
            #endif /* ipconfigUSE_NBNS */
            {
                xReturn = pdFAIL;
 8017300:	2300      	movs	r3, #0
 8017302:	657b      	str	r3, [r7, #84]	@ 0x54
            }
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 8017304:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 8017306:	4618      	mov	r0, r3
 8017308:	375c      	adds	r7, #92	@ 0x5c
 801730a:	46bd      	mov	sp, r7
 801730c:	bd90      	pop	{r4, r7, pc}
 801730e:	bf00      	nop
 8017310:	08027904 	.word	0x08027904

08017314 <pxGetEndpoint>:
 * @returns Pointer to the first end point of the given IP type from the
 *          list of end points.
 */
static NetworkEndPoint_t * pxGetEndpoint( BaseType_t xIPType,
                                          BaseType_t xIsGlobal )
{
 8017314:	b580      	push	{r7, lr}
 8017316:	b086      	sub	sp, #24
 8017318:	af00      	add	r7, sp, #0
 801731a:	6078      	str	r0, [r7, #4]
 801731c:	6039      	str	r1, [r7, #0]
    NetworkEndPoint_t * pxEndPoint;

    for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 801731e:	2000      	movs	r0, #0
 8017320:	f7f6 fc02 	bl	800db28 <FreeRTOS_FirstEndPoint>
 8017324:	6178      	str	r0, [r7, #20]
 8017326:	e021      	b.n	801736c <pxGetEndpoint+0x58>
         pxEndPoint != NULL;
         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
    {
        if( xIPType == ( BaseType_t ) ipTYPE_IPv6 )
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	2b60      	cmp	r3, #96	@ 0x60
 801732c:	d119      	bne.n	8017362 <pxGetEndpoint+0x4e>
        {
            if( pxEndPoint->bits.bIPv6 != 0U )
 801732e:	697b      	ldr	r3, [r7, #20]
 8017330:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8017334:	f003 0304 	and.w	r3, r3, #4
 8017338:	b2db      	uxtb	r3, r3
 801733a:	2b00      	cmp	r3, #0
 801733c:	d011      	beq.n	8017362 <pxGetEndpoint+0x4e>
            {
                IPv6_Type_t eEndpointType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 801733e:	697b      	ldr	r3, [r7, #20]
 8017340:	3338      	adds	r3, #56	@ 0x38
 8017342:	4618      	mov	r0, r3
 8017344:	f7f6 ffd4 	bl	800e2f0 <xIPv6_GetIPType>
 8017348:	4603      	mov	r3, r0
 801734a:	74fb      	strb	r3, [r7, #19]
                BaseType_t xEndpointGlobal = ( eEndpointType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 801734c:	7cfb      	ldrb	r3, [r7, #19]
 801734e:	2b00      	cmp	r3, #0
 8017350:	d101      	bne.n	8017356 <pxGetEndpoint+0x42>
 8017352:	2301      	movs	r3, #1
 8017354:	e000      	b.n	8017358 <pxGetEndpoint+0x44>
 8017356:	2300      	movs	r3, #0
 8017358:	60fb      	str	r3, [r7, #12]

                if( xEndpointGlobal == xIsGlobal )
 801735a:	68fa      	ldr	r2, [r7, #12]
 801735c:	683b      	ldr	r3, [r7, #0]
 801735e:	429a      	cmp	r2, r3
 8017360:	d008      	beq.n	8017374 <pxGetEndpoint+0x60>
         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8017362:	6979      	ldr	r1, [r7, #20]
 8017364:	2000      	movs	r0, #0
 8017366:	f7f6 fc01 	bl	800db6c <FreeRTOS_NextEndPoint>
 801736a:	6178      	str	r0, [r7, #20]
         pxEndPoint != NULL;
 801736c:	697b      	ldr	r3, [r7, #20]
 801736e:	2b00      	cmp	r3, #0
 8017370:	d1da      	bne.n	8017328 <pxGetEndpoint+0x14>
 8017372:	e000      	b.n	8017376 <pxGetEndpoint+0x62>
                {
                    break;
 8017374:	bf00      	nop
                }
            }
        }
    }

    return pxEndPoint;
 8017376:	697b      	ldr	r3, [r7, #20]
}
 8017378:	4618      	mov	r0, r3
 801737a:	3718      	adds	r7, #24
 801737c:	46bd      	mov	sp, r7
 801737e:	bd80      	pop	{r7, pc}

08017380 <prvStartLookup>:
 * @param[out] pxLostBuffer  The pointee will be set to true in case the network packet got released
 *                            ( the ownership was taken ).
 */
static eARPLookupResult_t prvStartLookup( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                          BaseType_t * pxLostBuffer )
{
 8017380:	b580      	push	{r7, lr}
 8017382:	b084      	sub	sp, #16
 8017384:	af00      	add	r7, sp, #0
 8017386:	6078      	str	r0, [r7, #4]
 8017388:	6039      	str	r1, [r7, #0]
    eARPLookupResult_t eReturned = eARPCacheMiss;
 801738a:	2300      	movs	r3, #0
 801738c:	73fb      	strb	r3, [r7, #15]

    FreeRTOS_printf( ( "Looking up %pip with%s end-point\n",
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	f103 0114 	add.w	r1, r3, #20
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017398:	2b00      	cmp	r3, #0
 801739a:	d001      	beq.n	80173a0 <prvStartLookup+0x20>
 801739c:	4b1e      	ldr	r3, [pc, #120]	@ (8017418 <prvStartLookup+0x98>)
 801739e:	e000      	b.n	80173a2 <prvStartLookup+0x22>
 80173a0:	4b1e      	ldr	r3, [pc, #120]	@ (801741c <prvStartLookup+0x9c>)
 80173a2:	461a      	mov	r2, r3
 80173a4:	481e      	ldr	r0, [pc, #120]	@ (8017420 <prvStartLookup+0xa0>)
 80173a6:	f00b f9fd 	bl	80227a4 <lUDPLoggingPrintf>
                       ( void * ) pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes,
                       ( pxNetworkBuffer->pxEndPoint != NULL ) ? "" : "out" ) );

    if( pxNetworkBuffer->pxEndPoint == NULL )
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d11f      	bne.n	80173f2 <prvStartLookup+0x72>
    {
        IPv6_Type_t eTargetType = xIPv6_GetIPType( &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ) );
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	3314      	adds	r3, #20
 80173b6:	4618      	mov	r0, r3
 80173b8:	f7f6 ff9a 	bl	800e2f0 <xIPv6_GetIPType>
 80173bc:	4603      	mov	r3, r0
 80173be:	73bb      	strb	r3, [r7, #14]
        BaseType_t xIsGlobal = ( eTargetType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 80173c0:	7bbb      	ldrb	r3, [r7, #14]
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d101      	bne.n	80173ca <prvStartLookup+0x4a>
 80173c6:	2301      	movs	r3, #1
 80173c8:	e000      	b.n	80173cc <prvStartLookup+0x4c>
 80173ca:	2300      	movs	r3, #0
 80173cc:	60bb      	str	r3, [r7, #8]
        pxNetworkBuffer->pxEndPoint = pxGetEndpoint( ( BaseType_t ) ipTYPE_IPv6, xIsGlobal );
 80173ce:	68b9      	ldr	r1, [r7, #8]
 80173d0:	2060      	movs	r0, #96	@ 0x60
 80173d2:	f7ff ff9f 	bl	8017314 <pxGetEndpoint>
 80173d6:	4602      	mov	r2, r0
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	631a      	str	r2, [r3, #48]	@ 0x30
        FreeRTOS_printf( ( "prvStartLookup: Got an end-point: %s\n", pxNetworkBuffer->pxEndPoint ? "yes" : "no" ) );
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d001      	beq.n	80173e8 <prvStartLookup+0x68>
 80173e4:	4b0f      	ldr	r3, [pc, #60]	@ (8017424 <prvStartLookup+0xa4>)
 80173e6:	e000      	b.n	80173ea <prvStartLookup+0x6a>
 80173e8:	4b0f      	ldr	r3, [pc, #60]	@ (8017428 <prvStartLookup+0xa8>)
 80173ea:	4619      	mov	r1, r3
 80173ec:	480f      	ldr	r0, [pc, #60]	@ (801742c <prvStartLookup+0xac>)
 80173ee:	f00b f9d9 	bl	80227a4 <lUDPLoggingPrintf>
    }

    if( pxNetworkBuffer->pxEndPoint != NULL )
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d008      	beq.n	801740c <prvStartLookup+0x8c>
    {
        vNDSendNeighbourSolicitation( pxNetworkBuffer, &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ) );
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	3314      	adds	r3, #20
 80173fe:	4619      	mov	r1, r3
 8017400:	6878      	ldr	r0, [r7, #4]
 8017402:	f7f5 f8b7 	bl	800c574 <vNDSendNeighbourSolicitation>

        /* pxNetworkBuffer has been sent and released.
         * Make sure it won't be used again.. */
        *pxLostBuffer = pdTRUE;
 8017406:	683b      	ldr	r3, [r7, #0]
 8017408:	2201      	movs	r2, #1
 801740a:	601a      	str	r2, [r3, #0]
    }

    return eReturned;
 801740c:	7bfb      	ldrb	r3, [r7, #15]
}
 801740e:	4618      	mov	r0, r3
 8017410:	3710      	adds	r7, #16
 8017412:	46bd      	mov	sp, r7
 8017414:	bd80      	pop	{r7, pc}
 8017416:	bf00      	nop
 8017418:	08027938 	.word	0x08027938
 801741c:	0802793c 	.word	0x0802793c
 8017420:	08027940 	.word	0x08027940
 8017424:	08027964 	.word	0x08027964
 8017428:	08027968 	.word	0x08027968
 801742c:	0802796c 	.word	0x0802796c

08017430 <vProcessGeneratedUDPPacket_IPv6>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8017430:	b590      	push	{r4, r7, lr}
 8017432:	b093      	sub	sp, #76	@ 0x4c
 8017434:	af00      	add	r7, sp, #0
 8017436:	6078      	str	r0, [r7, #4]
    UDPPacket_IPv6_t * pxUDPPacket_IPv6;
    IPHeader_IPv6_t * pxIPHeader_IPv6;
    eARPLookupResult_t eReturned;
    size_t uxPayloadSize;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    NetworkInterface_t * pxInterface = NULL;
 8017438:	2300      	movs	r3, #0
 801743a:	63bb      	str	r3, [r7, #56]	@ 0x38
    EthernetHeader_t * pxEthernetHeader = NULL;
 801743c:	2300      	movs	r3, #0
 801743e:	637b      	str	r3, [r7, #52]	@ 0x34
    BaseType_t xLostBuffer = pdFALSE;
 8017440:	2300      	movs	r3, #0
 8017442:	623b      	str	r3, [r7, #32]
    NetworkEndPoint_t * pxEndPoint = NULL;
 8017444:	2300      	movs	r3, #0
 8017446:	61fb      	str	r3, [r7, #28]
    /* Map the UDP packet onto the start of the frame. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801744c:	633b      	str	r3, [r7, #48]	@ 0x30
    pxIPHeader_IPv6 = &( pxUDPPacket_IPv6->xIPHeader );
 801744e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017450:	330e      	adds	r3, #14
 8017452:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Remember the original address. It might get replaced with
     * the address of the gateway. */
    ( void ) memcpy( xIPv6Address.ucBytes, pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, sizeof( xIPv6Address.ucBytes ) );
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	3314      	adds	r3, #20
 8017458:	f107 040c 	add.w	r4, r7, #12
 801745c:	6818      	ldr	r0, [r3, #0]
 801745e:	6859      	ldr	r1, [r3, #4]
 8017460:	689a      	ldr	r2, [r3, #8]
 8017462:	68db      	ldr	r3, [r3, #12]
 8017464:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    #if ipconfigSUPPORT_OUTGOING_PINGS == 1
        if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801746a:	2b00      	cmp	r3, #0
 801746c:	d107      	bne.n	801747e <vProcessGeneratedUDPPacket_IPv6+0x4e>
        {
            size_t uxHeadersSize = sizeof( EthernetHeader_t ) + sizeof( IPHeader_IPv6_t ) + sizeof( ICMPHeader_t );
 801746e:	233e      	movs	r3, #62	@ 0x3e
 8017470:	62bb      	str	r3, [r7, #40]	@ 0x28
            uxPayloadSize = pxNetworkBuffer->xDataLength - uxHeadersSize;
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8017476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017478:	1ad3      	subs	r3, r2, r3
 801747a:	643b      	str	r3, [r7, #64]	@ 0x40
 801747c:	e003      	b.n	8017486 <vProcessGeneratedUDPPacket_IPv6+0x56>
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_IPv6_t );
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017482:	3b3e      	subs	r3, #62	@ 0x3e
 8017484:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    /* Look in the IPv6 MAC-address cache for the target IP-address. */
    eReturned = eNDGetCacheEntry( &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ), &( pxUDPPacket_IPv6->xEthernetHeader.xDestinationAddress ),
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	3314      	adds	r3, #20
 801748a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801748c:	f107 021c 	add.w	r2, r7, #28
 8017490:	4618      	mov	r0, r3
 8017492:	f7f4 fe03 	bl	800c09c <eNDGetCacheEntry>
 8017496:	4603      	mov	r3, r0
 8017498:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                                  &( pxEndPoint ) );

    if( eReturned != eCantSendPacket )
 801749c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80174a0:	2b02      	cmp	r3, #2
 80174a2:	f000 80b1 	beq.w	8017608 <vProcessGeneratedUDPPacket_IPv6+0x1d8>
    {
        if( eReturned == eARPCacheHit )
 80174a6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80174aa:	2b01      	cmp	r3, #1
 80174ac:	f040 8095 	bne.w	80175da <vProcessGeneratedUDPPacket_IPv6+0x1aa>
            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            pxNetworkBuffer->pxEndPoint = pxEndPoint;
 80174b0:	69fa      	ldr	r2, [r7, #28]
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

                /* Is it possible that the packet is not actually a UDP packet
                 * after all, but an ICMP packet. */
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d109      	bne.n	80174d2 <vProcessGeneratedUDPPacket_IPv6+0xa2>
                {
                    pxIPHeader_IPv6->ucVersionTrafficClass = 0x60;
 80174be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174c0:	2260      	movs	r2, #96	@ 0x60
 80174c2:	701a      	strb	r2, [r3, #0]
                    pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 80174c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174c6:	223a      	movs	r2, #58	@ 0x3a
 80174c8:	719a      	strb	r2, [r3, #6]
                    pxIPHeader_IPv6->ucHopLimit = 128;
 80174ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174cc:	2280      	movs	r2, #128	@ 0x80
 80174ce:	71da      	strb	r2, [r3, #7]
 80174d0:	e05e      	b.n	8017590 <vProcessGeneratedUDPPacket_IPv6+0x160>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader = NULL;
 80174d2:	2300      	movs	r3, #0
 80174d4:	627b      	str	r3, [r7, #36]	@ 0x24

                pxUDPHeader = &( pxUDPPacket_IPv6->xUDPHeader );
 80174d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80174d8:	3336      	adds	r3, #54	@ 0x36
 80174da:	627b      	str	r3, [r7, #36]	@ 0x24

                pxIPHeader_IPv6->ucVersionTrafficClass = 0x60;
 80174dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174de:	2260      	movs	r2, #96	@ 0x60
 80174e0:	701a      	strb	r2, [r3, #0]
                pxIPHeader_IPv6->ucTrafficClassFlow = 0;
 80174e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174e4:	2200      	movs	r2, #0
 80174e6:	705a      	strb	r2, [r3, #1]
                pxIPHeader_IPv6->usFlowLabel = 0;
 80174e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174ea:	2200      	movs	r2, #0
 80174ec:	709a      	strb	r2, [r3, #2]
 80174ee:	2200      	movs	r2, #0
 80174f0:	70da      	strb	r2, [r3, #3]
                pxIPHeader_IPv6->ucHopLimit = 255;
 80174f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174f4:	22ff      	movs	r2, #255	@ 0xff
 80174f6:	71da      	strb	r2, [r3, #7]
                pxUDPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ) );
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80174fc:	b29b      	uxth	r3, r3
 80174fe:	3b36      	subs	r3, #54	@ 0x36
 8017500:	b29a      	uxth	r2, r3
 8017502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017504:	809a      	strh	r2, [r3, #4]

                pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_UDP;
 8017506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017508:	2211      	movs	r2, #17
 801750a:	719a      	strb	r2, [r3, #6]
                pxIPHeader_IPv6->usPayloadLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength - sizeof( IPPacket_IPv6_t ) );
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017510:	b29b      	uxth	r3, r3
 8017512:	3b36      	subs	r3, #54	@ 0x36
 8017514:	b29a      	uxth	r2, r3
 8017516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017518:	809a      	strh	r2, [r3, #4]
                /* The total transmit size adds on the Ethernet header. */
                pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( pxIPHeader_IPv6->usPayloadLength );
 801751a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801751c:	889b      	ldrh	r3, [r3, #4]
 801751e:	b29b      	uxth	r3, r3
 8017520:	021b      	lsls	r3, r3, #8
 8017522:	b21a      	sxth	r2, r3
 8017524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017526:	889b      	ldrh	r3, [r3, #4]
 8017528:	b29b      	uxth	r3, r3
 801752a:	0a1b      	lsrs	r3, r3, #8
 801752c:	b29b      	uxth	r3, r3
 801752e:	b21b      	sxth	r3, r3
 8017530:	4313      	orrs	r3, r2
 8017532:	b21b      	sxth	r3, r3
 8017534:	b29a      	uxth	r2, r3
 8017536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017538:	809a      	strh	r2, [r3, #4]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 801753e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017540:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 8017546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017548:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 801754a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801754c:	889b      	ldrh	r3, [r3, #4]
 801754e:	b29b      	uxth	r3, r3
 8017550:	021b      	lsls	r3, r3, #8
 8017552:	b21a      	sxth	r2, r3
 8017554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017556:	889b      	ldrh	r3, [r3, #4]
 8017558:	b29b      	uxth	r3, r3
 801755a:	0a1b      	lsrs	r3, r3, #8
 801755c:	b29b      	uxth	r3, r3
 801755e:	b21b      	sxth	r3, r3
 8017560:	4313      	orrs	r3, r2
 8017562:	b21b      	sxth	r3, r3
 8017564:	b29a      	uxth	r2, r3
 8017566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017568:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 801756a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801756c:	2200      	movs	r2, #0
 801756e:	719a      	strb	r2, [r3, #6]
 8017570:	2200      	movs	r2, #0
 8017572:	71da      	strb	r2, [r3, #7]

                if( pxNetworkBuffer->pxEndPoint != NULL )
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017578:	2b00      	cmp	r3, #0
 801757a:	d009      	beq.n	8017590 <vProcessGeneratedUDPPacket_IPv6+0x160>
                {
                    ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes,
 801757c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801757e:	f103 0008 	add.w	r0, r3, #8
                                     pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes,
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017586:	3338      	adds	r3, #56	@ 0x38
                    ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes,
 8017588:	2210      	movs	r2, #16
 801758a:	4619      	mov	r1, r3
 801758c:	f00b fb26 	bl	8022bdc <memcpy>
                ucSocketOptions = pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ];
            }
            #endif

            #if ipconfigSUPPORT_OUTGOING_PINGS == 1
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8017594:	2b00      	cmp	r3, #0
 8017596:	d10e      	bne.n	80175b6 <vProcessGeneratedUDPPacket_IPv6+0x186>
                {
                    pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( sizeof( ICMPEcho_IPv6_t ) + uxPayloadSize );
 8017598:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801759a:	b29b      	uxth	r3, r3
 801759c:	3308      	adds	r3, #8
 801759e:	b29b      	uxth	r3, r3
 80175a0:	021b      	lsls	r3, r3, #8
 80175a2:	b29a      	uxth	r2, r3
 80175a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80175a6:	3308      	adds	r3, #8
 80175a8:	0a1b      	lsrs	r3, r3, #8
 80175aa:	b29b      	uxth	r3, r3
 80175ac:	4313      	orrs	r3, r2
 80175ae:	b29a      	uxth	r2, r3
 80175b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175b2:	809a      	strh	r2, [r3, #4]
 80175b4:	e028      	b.n	8017608 <vProcessGeneratedUDPPacket_IPv6+0x1d8>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_UDP;
 80175b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175b8:	2211      	movs	r2, #17
 80175ba:	719a      	strb	r2, [r3, #6]
                pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( sizeof( UDPHeader_t ) + uxPayloadSize );
 80175bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80175be:	b29b      	uxth	r3, r3
 80175c0:	3308      	adds	r3, #8
 80175c2:	b29b      	uxth	r3, r3
 80175c4:	021b      	lsls	r3, r3, #8
 80175c6:	b29a      	uxth	r2, r3
 80175c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80175ca:	3308      	adds	r3, #8
 80175cc:	0a1b      	lsrs	r3, r3, #8
 80175ce:	b29b      	uxth	r3, r3
 80175d0:	4313      	orrs	r3, r2
 80175d2:	b29a      	uxth	r2, r3
 80175d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175d6:	809a      	strh	r2, [r3, #4]
 80175d8:	e016      	b.n	8017608 <vProcessGeneratedUDPPacket_IPv6+0x1d8>
                    pxUDPPacket_IPv6->xUDPHeader.usChecksum = 0U;
                }
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 80175da:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d10f      	bne.n	8017602 <vProcessGeneratedUDPPacket_IPv6+0x1d2>
        {
            if( pxEndPoint != NULL )
 80175e2:	69fb      	ldr	r3, [r7, #28]
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d002      	beq.n	80175ee <vProcessGeneratedUDPPacket_IPv6+0x1be>
            {
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 80175e8:	69fa      	ldr	r2, [r7, #28]
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	631a      	str	r2, [r3, #48]	@ 0x30
            }

            eReturned = prvStartLookup( pxNetworkBuffer, &( xLostBuffer ) );
 80175ee:	f107 0320 	add.w	r3, r7, #32
 80175f2:	4619      	mov	r1, r3
 80175f4:	6878      	ldr	r0, [r7, #4]
 80175f6:	f7ff fec3 	bl	8017380 <prvStartLookup>
 80175fa:	4603      	mov	r3, r0
 80175fc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8017600:	e002      	b.n	8017608 <vProcessGeneratedUDPPacket_IPv6+0x1d8>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 8017602:	2302      	movs	r3, #2
 8017604:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }
    }

    if( xLostBuffer == pdTRUE )
 8017608:	6a3b      	ldr	r3, [r7, #32]
 801760a:	2b01      	cmp	r3, #1
 801760c:	d03d      	beq.n	801768a <vProcessGeneratedUDPPacket_IPv6+0x25a>
    {
        /* An ND solicitation or ARP request has been sent. */
    }
    else if( eReturned != eCantSendPacket )
 801760e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8017612:	2b02      	cmp	r3, #2
 8017614:	d036      	beq.n	8017684 <vProcessGeneratedUDPPacket_IPv6+0x254>
    {
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        if( pxNetworkBuffer->pxEndPoint != NULL )
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801761a:	2b00      	cmp	r3, #0
 801761c:	d02e      	beq.n	801767c <vProcessGeneratedUDPPacket_IPv6+0x24c>
        {
            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017622:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8017626:	63bb      	str	r3, [r7, #56]	@ 0x38
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEthernetHeader = ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801762c:	637b      	str	r3, [r7, #52]	@ 0x34
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes,
 801762e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017630:	1d98      	adds	r0, r3, #6
                             pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes,
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017636:	33e8      	adds	r3, #232	@ 0xe8
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes,
 8017638:	2206      	movs	r2, #6
 801763a:	4619      	mov	r1, r3
 801763c:	f00b face 	bl	8022bdc <memcpy>
                             ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017644:	2b3b      	cmp	r3, #59	@ 0x3b
 8017646:	d812      	bhi.n	801766e <vProcessGeneratedUDPPacket_IPv6+0x23e>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801764c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801764e:	e008      	b.n	8017662 <vProcessGeneratedUDPPacket_IPv6+0x232>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017656:	4413      	add	r3, r2
 8017658:	2200      	movs	r2, #0
 801765a:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 801765c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801765e:	3301      	adds	r3, #1
 8017660:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017664:	2b3b      	cmp	r3, #59	@ 0x3b
 8017666:	ddf3      	ble.n	8017650 <vProcessGeneratedUDPPacket_IPv6+0x220>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	223c      	movs	r2, #60	@ 0x3c
 801766c:	629a      	str	r2, [r3, #40]	@ 0x28
                }
            }
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 801766e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017670:	68db      	ldr	r3, [r3, #12]
 8017672:	2201      	movs	r2, #1
 8017674:	6879      	ldr	r1, [r7, #4]
 8017676:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8017678:	4798      	blx	r3
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 801767a:	e006      	b.n	801768a <vProcessGeneratedUDPPacket_IPv6+0x25a>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801767c:	6878      	ldr	r0, [r7, #4]
 801767e:	f000 f9e9 	bl	8017a54 <vReleaseNetworkBufferAndDescriptor>
}
 8017682:	e002      	b.n	801768a <vProcessGeneratedUDPPacket_IPv6+0x25a>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8017684:	6878      	ldr	r0, [r7, #4]
 8017686:	f000 f9e5 	bl	8017a54 <vReleaseNetworkBufferAndDescriptor>
}
 801768a:	bf00      	nop
 801768c:	374c      	adds	r7, #76	@ 0x4c
 801768e:	46bd      	mov	sp, r7
 8017690:	bd90      	pop	{r4, r7, pc}
	...

08017694 <xProcessReceivedUDPPacket_IPv6>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket_IPv6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                           uint16_t usPort,
                                           BaseType_t * pxIsWaitingForARPResolution )
{
 8017694:	b590      	push	{r4, r7, lr}
 8017696:	b09b      	sub	sp, #108	@ 0x6c
 8017698:	af02      	add	r7, sp, #8
 801769a:	60f8      	str	r0, [r7, #12]
 801769c:	460b      	mov	r3, r1
 801769e:	607a      	str	r2, [r7, #4]
 80176a0:	817b      	strh	r3, [r7, #10]
    /* Returning pdPASS means that the packet was consumed, released. */
    BaseType_t xReturn = pdPASS;
 80176a2:	2301      	movs	r3, #1
 80176a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    FreeRTOS_Socket_t * pxSocket;
    const UDPPacket_IPv6_t * pxUDPPacket_IPv6;

    configASSERT( pxNetworkBuffer != NULL );
 80176a6:	68fb      	ldr	r3, [r7, #12]
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d104      	bne.n	80176b6 <xProcessReceivedUDPPacket_IPv6+0x22>
 80176ac:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 80176b0:	4874      	ldr	r0, [pc, #464]	@ (8017884 <xProcessReceivedUDPPacket_IPv6+0x1f0>)
 80176b2:	f7ea f9a9 	bl	8001a08 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 80176b6:	68fb      	ldr	r3, [r7, #12]
 80176b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d104      	bne.n	80176c8 <xProcessReceivedUDPPacket_IPv6+0x34>
 80176be:	f240 1187 	movw	r1, #391	@ 0x187
 80176c2:	4870      	ldr	r0, [pc, #448]	@ (8017884 <xProcessReceivedUDPPacket_IPv6+0x1f0>)
 80176c4:	f7ea f9a0 	bl	8001a08 <vAssertCalled>
     * handling them, no use to fill the cache with those IP addresses. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80176cc:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 80176ce:	897b      	ldrh	r3, [r7, #10]
 80176d0:	4618      	mov	r0, r3
 80176d2:	f7f8 f88f 	bl	800f7f4 <pxUDPSocketLookup>
 80176d6:	6578      	str	r0, [r7, #84]	@ 0x54

    *pxIsWaitingForARPResolution = pdFALSE;
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	2200      	movs	r2, #0
 80176dc:	601a      	str	r2, [r3, #0]

    do
    {
        /* UDPv6 doesn't allow zero-checksum, refer to RFC2460 - section 8.1.
         * Some platforms (such as Zynq) pass the packet to upper layer for flexibility to allow zero-checksum. */
        if( pxUDPPacket_IPv6->xUDPHeader.usChecksum == 0U )
 80176de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80176e0:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80176e2:	b29b      	uxth	r3, r3
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	d109      	bne.n	80176fc <xProcessReceivedUDPPacket_IPv6+0x68>
        {
            FreeRTOS_debug_printf( ( "xProcessReceivedUDPPacket_IPv6: Drop packets with checksum %d\n",
 80176e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80176ea:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80176ec:	b29b      	uxth	r3, r3
 80176ee:	4619      	mov	r1, r3
 80176f0:	4865      	ldr	r0, [pc, #404]	@ (8017888 <xProcessReceivedUDPPacket_IPv6+0x1f4>)
 80176f2:	f00b f857 	bl	80227a4 <lUDPLoggingPrintf>
                                     pxUDPPacket_IPv6->xUDPHeader.usChecksum ) );

            xReturn = pdFAIL;
 80176f6:	2300      	movs	r3, #0
 80176f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 80176fa:	e0bd      	b.n	8017878 <xProcessReceivedUDPPacket_IPv6+0x1e4>
        }

        if( pxSocket != NULL )
 80176fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80176fe:	2b00      	cmp	r3, #0
 8017700:	f000 8091 	beq.w	8017826 <xProcessReceivedUDPPacket_IPv6+0x192>
        {
            if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 8017704:	68f8      	ldr	r0, [r7, #12]
 8017706:	f7ef fe33 	bl	8007370 <xCheckRequiresARPResolution>
 801770a:	4603      	mov	r3, r0
 801770c:	2b01      	cmp	r3, #1
 801770e:	d105      	bne.n	801771c <xProcessReceivedUDPPacket_IPv6+0x88>
            {
                /* Mark this packet as waiting for ARP resolution. */
                *pxIsWaitingForARPResolution = pdTRUE;
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	2201      	movs	r2, #1
 8017714:	601a      	str	r2, [r3, #0]

                /* Return a fail to show that the frame will not be processed right now. */
                xReturn = pdFAIL;
 8017716:	2300      	movs	r3, #0
 8017718:	65fb      	str	r3, [r7, #92]	@ 0x5c
                break;
 801771a:	e0ad      	b.n	8017878 <xProcessReceivedUDPPacket_IPv6+0x1e4>
            }

            vNDRefreshCacheEntry( &( pxUDPPacket_IPv6->xEthernetHeader.xSourceAddress ), &( pxUDPPacket_IPv6->xIPHeader.xSourceAddress ),
 801771c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801771e:	1d98      	adds	r0, r3, #6
 8017720:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017722:	f103 0116 	add.w	r1, r3, #22
                                  pxNetworkBuffer->pxEndPoint );
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            vNDRefreshCacheEntry( &( pxUDPPacket_IPv6->xEthernetHeader.xSourceAddress ), &( pxUDPPacket_IPv6->xIPHeader.xSourceAddress ),
 801772a:	461a      	mov	r2, r3
 801772c:	f7f4 fd64 	bl	800c1f8 <vNDRefreshCacheEntry>

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                size_t uxIPLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 8017730:	68f8      	ldr	r0, [r7, #12]
 8017732:	f7f2 fe61 	bl	800a3f8 <uxIPHeaderSizePacket>
 8017736:	6538      	str	r0, [r7, #80]	@ 0x50
                size_t uxPayloadSize;

                /* Did the owner of this socket register a reception handler ? */
                if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
 8017738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801773a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801773c:	2b00      	cmp	r3, #0
 801773e:	d03d      	beq.n	80177bc <xProcessReceivedUDPPacket_IPv6+0x128>
                {
                    struct freertos_sockaddr xSourceAddress, destinationAddress;
                    /* The application hook needs to know the from- and to-addresses. */

                    void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPLength + ipSIZE_OF_UDP_HEADER ] );
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017744:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017746:	3316      	adds	r3, #22
 8017748:	4413      	add	r3, r2
 801774a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
 801774c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801774e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017750:	64bb      	str	r3, [r7, #72]	@ 0x48

                    xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 8017752:	68fb      	ldr	r3, [r7, #12]
 8017754:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8017756:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                    destinationAddress.sin_port = usPort;
 8017758:	897b      	ldrh	r3, [r7, #10]
 801775a:	82fb      	strh	r3, [r7, #22]
                    ( void ) memcpy( xSourceAddress.sin_address.xIP_IPv6.ucBytes, pxUDPPacket_IPv6->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 801775c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801775e:	3316      	adds	r3, #22
 8017760:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8017764:	6818      	ldr	r0, [r3, #0]
 8017766:	6859      	ldr	r1, [r3, #4]
 8017768:	689a      	ldr	r2, [r3, #8]
 801776a:	68db      	ldr	r3, [r3, #12]
 801776c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                    ( void ) memcpy( destinationAddress.sin_address.xIP_IPv6.ucBytes, pxUDPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 801776e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017770:	3326      	adds	r3, #38	@ 0x26
 8017772:	f107 041c 	add.w	r4, r7, #28
 8017776:	6818      	ldr	r0, [r3, #0]
 8017778:	6859      	ldr	r1, [r3, #4]
 801777a:	689a      	ldr	r2, [r3, #8]
 801777c:	68db      	ldr	r3, [r3, #12]
 801777e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                    xSourceAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET6;
 8017780:	230a      	movs	r3, #10
 8017782:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                    destinationAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET6;
 8017786:	230a      	movs	r3, #10
 8017788:	757b      	strb	r3, [r7, #21]
                    xSourceAddress.sin_len = ( uint8_t ) sizeof( xSourceAddress );
 801778a:	2318      	movs	r3, #24
 801778c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    destinationAddress.sin_len = ( uint8_t ) sizeof( destinationAddress );
 8017790:	2318      	movs	r3, #24
 8017792:	753b      	strb	r3, [r7, #20]
                    uxPayloadSize = pxNetworkBuffer->xDataLength - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER + ( size_t ) ipSIZE_OF_IPv6_HEADER );
 8017794:	68fb      	ldr	r3, [r7, #12]
 8017796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017798:	3b3e      	subs	r3, #62	@ 0x3e
 801779a:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
                    if( xHandler( ( Socket_t ) pxSocket,
 801779c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80177a0:	f107 0314 	add.w	r3, r7, #20
 80177a4:	9300      	str	r3, [sp, #0]
 80177a6:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 80177a8:	4613      	mov	r3, r2
 80177aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80177ac:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80177ae:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80177b0:	47a0      	blx	r4
 80177b2:	4603      	mov	r3, r0
 80177b4:	2b00      	cmp	r3, #0
 80177b6:	d001      	beq.n	80177bc <xProcessReceivedUDPPacket_IPv6+0x128>
                                  ( void * ) pcData,
                                  uxPayloadSize,
                                  &( xSourceAddress ),
                                  &( destinationAddress ) ) != 0 )
                    {
                        xReturn = pdFAIL; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
 80177b8:	2300      	movs	r3, #0
 80177ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
                }
            }
            #endif /* if ( ipconfigUDP_MAX_RX_PACKETS > 0U ) */

            #if ( ipconfigUSE_CALLBACKS == 1 ) || ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
 80177bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80177be:	2b01      	cmp	r3, #1
 80177c0:	d15a      	bne.n	8017878 <xProcessReceivedUDPPacket_IPv6+0x1e4>
            #else
                /* xReturn is still pdPASS. */
            #endif
            {
                vTaskSuspendAll();
 80177c2:	f7ed f973 	bl	8004aac <vTaskSuspendAll>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 80177c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80177c8:	3354      	adds	r3, #84	@ 0x54
 80177ca:	68fa      	ldr	r2, [r7, #12]
 80177cc:	4611      	mov	r1, r2
 80177ce:	4618      	mov	r0, r3
 80177d0:	f7ec f827 	bl	8003822 <vListInsertEnd>
                }
                ( void ) xTaskResumeAll();
 80177d4:	f7ed f978 	bl	8004ac8 <xTaskResumeAll>

                /* Set the socket's receive event */
                if( pxSocket->xEventGroup != NULL )
 80177d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80177da:	685b      	ldr	r3, [r3, #4]
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d005      	beq.n	80177ec <xProcessReceivedUDPPacket_IPv6+0x158>
                {
                    ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 80177e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80177e2:	685b      	ldr	r3, [r3, #4]
 80177e4:	2101      	movs	r1, #1
 80177e6:	4618      	mov	r0, r3
 80177e8:	f7eb ff16 	bl	8003618 <xEventGroupSetBits>
                }

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 80177ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80177ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d00c      	beq.n	801780e <xProcessReceivedUDPPacket_IPv6+0x17a>
 80177f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80177f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80177f8:	f003 0301 	and.w	r3, r3, #1
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d006      	beq.n	801780e <xProcessReceivedUDPPacket_IPv6+0x17a>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 8017800:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	2101      	movs	r1, #1
 8017808:	4618      	mov	r0, r3
 801780a:	f7eb ff05 	bl	8003618 <xEventGroupSetBits>
                }
                #endif

                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
                {
                    if( pxSocket->pxUserSemaphore != NULL )
 801780e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017812:	2b00      	cmp	r3, #0
 8017814:	d030      	beq.n	8017878 <xProcessReceivedUDPPacket_IPv6+0x1e4>
                    {
                        ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 8017816:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017818:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801781a:	2300      	movs	r3, #0
 801781c:	2200      	movs	r2, #0
 801781e:	2100      	movs	r1, #0
 8017820:	f7ec f9d6 	bl	8003bd0 <xQueueGenericSend>
 8017824:	e028      	b.n	8017878 <xProcessReceivedUDPPacket_IPv6+0x1e4>

                /* A DNS reply, check for the source port.  Although the DNS client
                 * does open a UDP socket to send a messages, this socket will be
                 * closed after a short timeout.  Messages that come late (after the
                 * socket is closed) will be treated here. */
                if( FreeRTOS_ntohs( pxUDPPacket_IPv6->xUDPHeader.usSourcePort ) == ( uint16_t ) ipDNS_PORT )
 8017826:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017828:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801782a:	b29b      	uxth	r3, r3
 801782c:	021b      	lsls	r3, r3, #8
 801782e:	b21a      	sxth	r2, r3
 8017830:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017832:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8017834:	b29b      	uxth	r3, r3
 8017836:	0a1b      	lsrs	r3, r3, #8
 8017838:	b29b      	uxth	r3, r3
 801783a:	b21b      	sxth	r3, r3
 801783c:	4313      	orrs	r3, r2
 801783e:	b21b      	sxth	r3, r3
 8017840:	2b35      	cmp	r3, #53	@ 0x35
 8017842:	d105      	bne.n	8017850 <xProcessReceivedUDPPacket_IPv6+0x1bc>
                {
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8017844:	68f8      	ldr	r0, [r7, #12]
 8017846:	f7f0 fb3e 	bl	8007ec6 <ulDNSHandlePacket>
 801784a:	4603      	mov	r3, r0
 801784c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801784e:	e013      	b.n	8017878 <xProcessReceivedUDPPacket_IPv6+0x1e4>
                else
            #endif

            #if ( ipconfigUSE_DNS == 1 ) && ( ipconfigUSE_LLMNR == 1 )
                /* A LLMNR request, check for the destination port. */
                if( ( usPort == FreeRTOS_htons( ipLLMNR_PORT ) ) ||
 8017850:	897b      	ldrh	r3, [r7, #10]
 8017852:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 8017856:	4293      	cmp	r3, r2
 8017858:	d006      	beq.n	8017868 <xProcessReceivedUDPPacket_IPv6+0x1d4>
                    ( pxUDPPacket_IPv6->xUDPHeader.usSourcePort == FreeRTOS_htons( ipLLMNR_PORT ) ) )
 801785a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801785c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801785e:	b29b      	uxth	r3, r3
                if( ( usPort == FreeRTOS_htons( ipLLMNR_PORT ) ) ||
 8017860:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 8017864:	4293      	cmp	r3, r2
 8017866:	d105      	bne.n	8017874 <xProcessReceivedUDPPacket_IPv6+0x1e0>
                {
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8017868:	68f8      	ldr	r0, [r7, #12]
 801786a:	f7f0 fb2c 	bl	8007ec6 <ulDNSHandlePacket>
 801786e:	4603      	mov	r3, r0
 8017870:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8017872:	e001      	b.n	8017878 <xProcessReceivedUDPPacket_IPv6+0x1e4>
                    xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
                }
                else
            #endif /* ipconfigUSE_NBNS */
            {
                xReturn = pdFAIL;
 8017874:	2300      	movs	r3, #0
 8017876:	65fb      	str	r3, [r7, #92]	@ 0x5c
            }
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 8017878:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 801787a:	4618      	mov	r0, r3
 801787c:	3764      	adds	r7, #100	@ 0x64
 801787e:	46bd      	mov	sp, r7
 8017880:	bd90      	pop	{r4, r7, pc}
 8017882:	bf00      	nop
 8017884:	08027994 	.word	0x08027994
 8017888:	080279c8 	.word	0x080279c8

0801788c <bIsValidNetworkDescriptor>:
    }
    /*-----------------------------------------------------------*/

#else /* if ( ipconfigTCP_IP_SANITY != 0 ) */
    static UBaseType_t bIsValidNetworkDescriptor( const NetworkBufferDescriptor_t * pxDesc )
    {
 801788c:	b480      	push	{r7}
 801788e:	b083      	sub	sp, #12
 8017890:	af00      	add	r7, sp, #0
 8017892:	6078      	str	r0, [r7, #4]
        ( void ) pxDesc;
        return ( UBaseType_t ) pdTRUE;
 8017894:	2301      	movs	r3, #1
    }
 8017896:	4618      	mov	r0, r3
 8017898:	370c      	adds	r7, #12
 801789a:	46bd      	mov	sp, r7
 801789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178a0:	4770      	bx	lr

080178a2 <prvShowWarnings>:
    /*-----------------------------------------------------------*/

    static void prvShowWarnings( void )
    {
 80178a2:	b480      	push	{r7}
 80178a4:	af00      	add	r7, sp, #0
    }
 80178a6:	bf00      	nop
 80178a8:	46bd      	mov	sp, r7
 80178aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ae:	4770      	bx	lr

080178b0 <xNetworkBuffersInitialise>:
    /*-----------------------------------------------------------*/

#endif /* ipconfigTCP_IP_SANITY */

BaseType_t xNetworkBuffersInitialise( void )
{
 80178b0:	b580      	push	{r7, lr}
 80178b2:	b082      	sub	sp, #8
 80178b4:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    uint32_t x;

    /* Only initialise the buffers and their associated kernel objects if they
     * have not been initialised before. */
    if( xNetworkBufferSemaphore == NULL )
 80178b6:	4b2e      	ldr	r3, [pc, #184]	@ (8017970 <xNetworkBuffersInitialise+0xc0>)
 80178b8:	681b      	ldr	r3, [r3, #0]
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	d149      	bne.n	8017952 <xNetworkBuffersInitialise+0xa2>
                ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS,
                &xNetworkBufferSemaphoreBuffer );
        }
        #else
        {
            xNetworkBufferSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
 80178be:	2140      	movs	r1, #64	@ 0x40
 80178c0:	2040      	movs	r0, #64	@ 0x40
 80178c2:	f7ec f95b 	bl	8003b7c <xQueueCreateCountingSemaphore>
 80178c6:	4603      	mov	r3, r0
 80178c8:	4a29      	ldr	r2, [pc, #164]	@ (8017970 <xNetworkBuffersInitialise+0xc0>)
 80178ca:	6013      	str	r3, [r2, #0]
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        configASSERT( xNetworkBufferSemaphore != NULL );
 80178cc:	4b28      	ldr	r3, [pc, #160]	@ (8017970 <xNetworkBuffersInitialise+0xc0>)
 80178ce:	681b      	ldr	r3, [r3, #0]
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d103      	bne.n	80178dc <xNetworkBuffersInitialise+0x2c>
 80178d4:	21c3      	movs	r1, #195	@ 0xc3
 80178d6:	4827      	ldr	r0, [pc, #156]	@ (8017974 <xNetworkBuffersInitialise+0xc4>)
 80178d8:	f7ea f896 	bl	8001a08 <vAssertCalled>

        if( xNetworkBufferSemaphore != NULL )
 80178dc:	4b24      	ldr	r3, [pc, #144]	@ (8017970 <xNetworkBuffersInitialise+0xc0>)
 80178de:	681b      	ldr	r3, [r3, #0]
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d036      	beq.n	8017952 <xNetworkBuffersInitialise+0xa2>
        {
            vListInitialise( &xFreeBuffersList );
 80178e4:	4824      	ldr	r0, [pc, #144]	@ (8017978 <xNetworkBuffersInitialise+0xc8>)
 80178e6:	f7eb ff6f 	bl	80037c8 <vListInitialise>

            /* Initialise all the network buffers.  The buffer storage comes
             * from the network interface, and different hardware has different
             * requirements. */
            vNetworkInterfaceAllocateRAMToBuffers( xNetworkBuffers );
 80178ea:	4824      	ldr	r0, [pc, #144]	@ (801797c <xNetworkBuffersInitialise+0xcc>)
 80178ec:	f001 fa24 	bl	8018d38 <vNetworkInterfaceAllocateRAMToBuffers>

            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 80178f0:	2300      	movs	r3, #0
 80178f2:	603b      	str	r3, [r7, #0]
 80178f4:	e027      	b.n	8017946 <xNetworkBuffersInitialise+0x96>
            {
                /* Initialise and set the owner of the buffer list items. */
                vListInitialiseItem( &( xNetworkBuffers[ x ].xBufferListItem ) );
 80178f6:	683a      	ldr	r2, [r7, #0]
 80178f8:	4613      	mov	r3, r2
 80178fa:	00db      	lsls	r3, r3, #3
 80178fc:	1a9b      	subs	r3, r3, r2
 80178fe:	00db      	lsls	r3, r3, #3
 8017900:	4a1e      	ldr	r2, [pc, #120]	@ (801797c <xNetworkBuffersInitialise+0xcc>)
 8017902:	4413      	add	r3, r2
 8017904:	4618      	mov	r0, r3
 8017906:	f7eb ff7f 	bl	8003808 <vListInitialiseItem>
                listSET_LIST_ITEM_OWNER( &( xNetworkBuffers[ x ].xBufferListItem ), &xNetworkBuffers[ x ] );
 801790a:	683a      	ldr	r2, [r7, #0]
 801790c:	4613      	mov	r3, r2
 801790e:	00db      	lsls	r3, r3, #3
 8017910:	1a9b      	subs	r3, r3, r2
 8017912:	00db      	lsls	r3, r3, #3
 8017914:	4a19      	ldr	r2, [pc, #100]	@ (801797c <xNetworkBuffersInitialise+0xcc>)
 8017916:	1899      	adds	r1, r3, r2
 8017918:	4818      	ldr	r0, [pc, #96]	@ (801797c <xNetworkBuffersInitialise+0xcc>)
 801791a:	683a      	ldr	r2, [r7, #0]
 801791c:	4613      	mov	r3, r2
 801791e:	00db      	lsls	r3, r3, #3
 8017920:	1a9b      	subs	r3, r3, r2
 8017922:	00db      	lsls	r3, r3, #3
 8017924:	4403      	add	r3, r0
 8017926:	330c      	adds	r3, #12
 8017928:	6019      	str	r1, [r3, #0]

                /* Currently, all buffers are available for use. */
                vListInsert( &xFreeBuffersList, &( xNetworkBuffers[ x ].xBufferListItem ) );
 801792a:	683a      	ldr	r2, [r7, #0]
 801792c:	4613      	mov	r3, r2
 801792e:	00db      	lsls	r3, r3, #3
 8017930:	1a9b      	subs	r3, r3, r2
 8017932:	00db      	lsls	r3, r3, #3
 8017934:	4a11      	ldr	r2, [pc, #68]	@ (801797c <xNetworkBuffersInitialise+0xcc>)
 8017936:	4413      	add	r3, r2
 8017938:	4619      	mov	r1, r3
 801793a:	480f      	ldr	r0, [pc, #60]	@ (8017978 <xNetworkBuffersInitialise+0xc8>)
 801793c:	f7eb ff95 	bl	800386a <vListInsert>
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 8017940:	683b      	ldr	r3, [r7, #0]
 8017942:	3301      	adds	r3, #1
 8017944:	603b      	str	r3, [r7, #0]
 8017946:	683b      	ldr	r3, [r7, #0]
 8017948:	2b3f      	cmp	r3, #63	@ 0x3f
 801794a:	d9d4      	bls.n	80178f6 <xNetworkBuffersInitialise+0x46>
            }

            uxMinimumFreeNetworkBuffers = ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 801794c:	4b0c      	ldr	r3, [pc, #48]	@ (8017980 <xNetworkBuffersInitialise+0xd0>)
 801794e:	2240      	movs	r2, #64	@ 0x40
 8017950:	601a      	str	r2, [r3, #0]
        }
    }

    if( xNetworkBufferSemaphore == NULL )
 8017952:	4b07      	ldr	r3, [pc, #28]	@ (8017970 <xNetworkBuffersInitialise+0xc0>)
 8017954:	681b      	ldr	r3, [r3, #0]
 8017956:	2b00      	cmp	r3, #0
 8017958:	d102      	bne.n	8017960 <xNetworkBuffersInitialise+0xb0>
    {
        xReturn = pdFAIL;
 801795a:	2300      	movs	r3, #0
 801795c:	607b      	str	r3, [r7, #4]
 801795e:	e001      	b.n	8017964 <xNetworkBuffersInitialise+0xb4>
    }
    else
    {
        xReturn = pdPASS;
 8017960:	2301      	movs	r3, #1
 8017962:	607b      	str	r3, [r7, #4]
    }

    return xReturn;
 8017964:	687b      	ldr	r3, [r7, #4]
}
 8017966:	4618      	mov	r0, r3
 8017968:	3708      	adds	r7, #8
 801796a:	46bd      	mov	sp, r7
 801796c:	bd80      	pop	{r7, pc}
 801796e:	bf00      	nop
 8017970:	20002468 	.word	0x20002468
 8017974:	08027a08 	.word	0x08027a08
 8017978:	20001650 	.word	0x20001650
 801797c:	20001668 	.word	0x20001668
 8017980:	20001664 	.word	0x20001664

08017984 <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t * pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes,
                                                              TickType_t xBlockTimeTicks )
{
 8017984:	b580      	push	{r7, lr}
 8017986:	b086      	sub	sp, #24
 8017988:	af00      	add	r7, sp, #0
 801798a:	6078      	str	r0, [r7, #4]
 801798c:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxReturn = NULL;
 801798e:	2300      	movs	r3, #0
 8017990:	617b      	str	r3, [r7, #20]
    BaseType_t xInvalid = pdFALSE;
 8017992:	2300      	movs	r3, #0
 8017994:	613b      	str	r3, [r7, #16]

    /* The current implementation only has a single size memory block, so
     * the requested size parameter is not used (yet). */
    ( void ) xRequestedSizeBytes;

    if( xNetworkBufferSemaphore != NULL )
 8017996:	4b2a      	ldr	r3, [pc, #168]	@ (8017a40 <pxGetNetworkBufferWithDescriptor+0xbc>)
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	2b00      	cmp	r3, #0
 801799c:	d04b      	beq.n	8017a36 <pxGetNetworkBufferWithDescriptor+0xb2>
    {
        /* If there is a semaphore available, there is a network buffer
         * available. */
        if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 801799e:	4b28      	ldr	r3, [pc, #160]	@ (8017a40 <pxGetNetworkBufferWithDescriptor+0xbc>)
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	6839      	ldr	r1, [r7, #0]
 80179a4:	4618      	mov	r0, r3
 80179a6:	f7ec facb 	bl	8003f40 <xQueueSemaphoreTake>
 80179aa:	4603      	mov	r3, r0
 80179ac:	2b01      	cmp	r3, #1
 80179ae:	d13d      	bne.n	8017a2c <pxGetNetworkBufferWithDescriptor+0xa8>
        {
            /* Protect the structure as it is accessed from tasks and
             * interrupts. */
            ipconfigBUFFER_ALLOC_LOCK();
 80179b0:	f7ee fef6 	bl	80067a0 <vPortEnterCritical>
            {
                pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 80179b4:	4b23      	ldr	r3, [pc, #140]	@ (8017a44 <pxGetNetworkBufferWithDescriptor+0xc0>)
 80179b6:	68db      	ldr	r3, [r3, #12]
 80179b8:	68db      	ldr	r3, [r3, #12]
 80179ba:	617b      	str	r3, [r7, #20]

                if( ( bIsValidNetworkDescriptor( pxReturn ) != pdFALSE_UNSIGNED ) &&
 80179bc:	6978      	ldr	r0, [r7, #20]
 80179be:	f7ff ff65 	bl	801788c <bIsValidNetworkDescriptor>
 80179c2:	4603      	mov	r3, r0
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d009      	beq.n	80179dc <pxGetNetworkBufferWithDescriptor+0x58>
                    listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxReturn->xBufferListItem ) ) )
 80179c8:	697b      	ldr	r3, [r7, #20]
 80179ca:	691b      	ldr	r3, [r3, #16]
                if( ( bIsValidNetworkDescriptor( pxReturn ) != pdFALSE_UNSIGNED ) &&
 80179cc:	4a1d      	ldr	r2, [pc, #116]	@ (8017a44 <pxGetNetworkBufferWithDescriptor+0xc0>)
 80179ce:	4293      	cmp	r3, r2
 80179d0:	d104      	bne.n	80179dc <pxGetNetworkBufferWithDescriptor+0x58>
                {
                    ( void ) uxListRemove( &( pxReturn->xBufferListItem ) );
 80179d2:	697b      	ldr	r3, [r7, #20]
 80179d4:	4618      	mov	r0, r3
 80179d6:	f7eb ff81 	bl	80038dc <uxListRemove>
 80179da:	e001      	b.n	80179e0 <pxGetNetworkBufferWithDescriptor+0x5c>
                }
                else
                {
                    xInvalid = pdTRUE;
 80179dc:	2301      	movs	r3, #1
 80179de:	613b      	str	r3, [r7, #16]
                }
            }
            ipconfigBUFFER_ALLOC_UNLOCK();
 80179e0:	f7ee ff0a 	bl	80067f8 <vPortExitCritical>

            if( xInvalid == pdTRUE )
 80179e4:	693b      	ldr	r3, [r7, #16]
 80179e6:	2b01      	cmp	r3, #1
 80179e8:	d10b      	bne.n	8017a02 <pxGetNetworkBufferWithDescriptor+0x7e>
                 * above says this can be called from an interrupt too) */

                /* _HT_ The function shall not be called from an ISR. Comment
                 * was indeed misleading. Hopefully clear now?
                 * So the printf()is OK here. */
                FreeRTOS_debug_printf( ( "pxGetNetworkBufferWithDescriptor: INVALID BUFFER: %p (valid %lu)\n",
 80179ea:	6978      	ldr	r0, [r7, #20]
 80179ec:	f7ff ff4e 	bl	801788c <bIsValidNetworkDescriptor>
 80179f0:	4603      	mov	r3, r0
 80179f2:	461a      	mov	r2, r3
 80179f4:	6979      	ldr	r1, [r7, #20]
 80179f6:	4814      	ldr	r0, [pc, #80]	@ (8017a48 <pxGetNetworkBufferWithDescriptor+0xc4>)
 80179f8:	f00a fed4 	bl	80227a4 <lUDPLoggingPrintf>
                                         pxReturn, bIsValidNetworkDescriptor( pxReturn ) ) );
                pxReturn = NULL;
 80179fc:	2300      	movs	r3, #0
 80179fe:	617b      	str	r3, [r7, #20]
 8017a00:	e019      	b.n	8017a36 <pxGetNetworkBufferWithDescriptor+0xb2>
            }
            else
            {
                /* Reading UBaseType_t, no critical section needed. */
                uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8017a02:	4b10      	ldr	r3, [pc, #64]	@ (8017a44 <pxGetNetworkBufferWithDescriptor+0xc0>)
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	60fb      	str	r3, [r7, #12]

                /* For stats, latch the lowest number of network buffers since
                 * booting. */
                if( uxMinimumFreeNetworkBuffers > uxCount )
 8017a08:	4b10      	ldr	r3, [pc, #64]	@ (8017a4c <pxGetNetworkBufferWithDescriptor+0xc8>)
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	68fa      	ldr	r2, [r7, #12]
 8017a0e:	429a      	cmp	r2, r3
 8017a10:	d202      	bcs.n	8017a18 <pxGetNetworkBufferWithDescriptor+0x94>
                {
                    uxMinimumFreeNetworkBuffers = uxCount;
 8017a12:	4a0e      	ldr	r2, [pc, #56]	@ (8017a4c <pxGetNetworkBufferWithDescriptor+0xc8>)
 8017a14:	68fb      	ldr	r3, [r7, #12]
 8017a16:	6013      	str	r3, [r2, #0]
                }

                pxReturn->xDataLength = xRequestedSizeBytes;
 8017a18:	697b      	ldr	r3, [r7, #20]
 8017a1a:	687a      	ldr	r2, [r7, #4]
 8017a1c:	629a      	str	r2, [r3, #40]	@ 0x28
                pxReturn->pxInterface = NULL;
 8017a1e:	697b      	ldr	r3, [r7, #20]
 8017a20:	2200      	movs	r2, #0
 8017a22:	62da      	str	r2, [r3, #44]	@ 0x2c
                pxReturn->pxEndPoint = NULL;
 8017a24:	697b      	ldr	r3, [r7, #20]
 8017a26:	2200      	movs	r2, #0
 8017a28:	631a      	str	r2, [r3, #48]	@ 0x30
 8017a2a:	e004      	b.n	8017a36 <pxGetNetworkBufferWithDescriptor+0xb2>
            iptraceNETWORK_BUFFER_OBTAINED( pxReturn );
        }
        else
        {
            /* lint wants to see at least a comment. */
            iptraceFAILED_TO_OBTAIN_NETWORK_BUFFER();
 8017a2c:	f240 113b 	movw	r1, #315	@ 0x13b
 8017a30:	4807      	ldr	r0, [pc, #28]	@ (8017a50 <pxGetNetworkBufferWithDescriptor+0xcc>)
 8017a32:	f7e9 ffe9 	bl	8001a08 <vAssertCalled>
        }
    }

    return pxReturn;
 8017a36:	697b      	ldr	r3, [r7, #20]
}
 8017a38:	4618      	mov	r0, r3
 8017a3a:	3718      	adds	r7, #24
 8017a3c:	46bd      	mov	sp, r7
 8017a3e:	bd80      	pop	{r7, pc}
 8017a40:	20002468 	.word	0x20002468
 8017a44:	20001650 	.word	0x20001650
 8017a48:	08027a54 	.word	0x08027a54
 8017a4c:	20001664 	.word	0x20001664
 8017a50:	08027a08 	.word	0x08027a08

08017a54 <vReleaseNetworkBufferAndDescriptor>:
    return xHigherPriorityTaskWoken;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8017a54:	b580      	push	{r7, lr}
 8017a56:	b084      	sub	sp, #16
 8017a58:	af00      	add	r7, sp, #0
 8017a5a:	6078      	str	r0, [r7, #4]
    BaseType_t xListItemAlreadyInFreeList;

    if( bIsValidNetworkDescriptor( pxNetworkBuffer ) == pdFALSE_UNSIGNED )
 8017a5c:	6878      	ldr	r0, [r7, #4]
 8017a5e:	f7ff ff15 	bl	801788c <bIsValidNetworkDescriptor>
 8017a62:	4603      	mov	r3, r0
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d104      	bne.n	8017a72 <vReleaseNetworkBufferAndDescriptor+0x1e>
    {
        FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: Invalid buffer %p\n", pxNetworkBuffer ) );
 8017a68:	6879      	ldr	r1, [r7, #4]
 8017a6a:	4819      	ldr	r0, [pc, #100]	@ (8017ad0 <vReleaseNetworkBufferAndDescriptor+0x7c>)
 8017a6c:	f00a fe9a 	bl	80227a4 <lUDPLoggingPrintf>
            prvShowWarnings();
        }

        iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
    }
}
 8017a70:	e029      	b.n	8017ac6 <vReleaseNetworkBufferAndDescriptor+0x72>
        ipconfigBUFFER_ALLOC_LOCK();
 8017a72:	f7ee fe95 	bl	80067a0 <vPortEnterCritical>
                xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	691b      	ldr	r3, [r3, #16]
 8017a7a:	4a16      	ldr	r2, [pc, #88]	@ (8017ad4 <vReleaseNetworkBufferAndDescriptor+0x80>)
 8017a7c:	4293      	cmp	r3, r2
 8017a7e:	d101      	bne.n	8017a84 <vReleaseNetworkBufferAndDescriptor+0x30>
 8017a80:	2301      	movs	r3, #1
 8017a82:	e000      	b.n	8017a86 <vReleaseNetworkBufferAndDescriptor+0x32>
 8017a84:	2300      	movs	r3, #0
 8017a86:	60fb      	str	r3, [r7, #12]
                if( xListItemAlreadyInFreeList == pdFALSE )
 8017a88:	68fb      	ldr	r3, [r7, #12]
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d104      	bne.n	8017a98 <vReleaseNetworkBufferAndDescriptor+0x44>
                    vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	4619      	mov	r1, r3
 8017a92:	4810      	ldr	r0, [pc, #64]	@ (8017ad4 <vReleaseNetworkBufferAndDescriptor+0x80>)
 8017a94:	f7eb fec5 	bl	8003822 <vListInsertEnd>
        ipconfigBUFFER_ALLOC_UNLOCK();
 8017a98:	f7ee feae 	bl	80067f8 <vPortExitCritical>
        if( xListItemAlreadyInFreeList )
 8017a9c:	68fb      	ldr	r3, [r7, #12]
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d008      	beq.n	8017ab4 <vReleaseNetworkBufferAndDescriptor+0x60>
            FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: %p ALREADY RELEASED (now %lu)\n",
 8017aa2:	f000 f829 	bl	8017af8 <uxGetNumberOfFreeNetworkBuffers>
 8017aa6:	4603      	mov	r3, r0
 8017aa8:	461a      	mov	r2, r3
 8017aaa:	6879      	ldr	r1, [r7, #4]
 8017aac:	480a      	ldr	r0, [pc, #40]	@ (8017ad8 <vReleaseNetworkBufferAndDescriptor+0x84>)
 8017aae:	f00a fe79 	bl	80227a4 <lUDPLoggingPrintf>
}
 8017ab2:	e008      	b.n	8017ac6 <vReleaseNetworkBufferAndDescriptor+0x72>
            ( void ) xSemaphoreGive( xNetworkBufferSemaphore );
 8017ab4:	4b09      	ldr	r3, [pc, #36]	@ (8017adc <vReleaseNetworkBufferAndDescriptor+0x88>)
 8017ab6:	6818      	ldr	r0, [r3, #0]
 8017ab8:	2300      	movs	r3, #0
 8017aba:	2200      	movs	r2, #0
 8017abc:	2100      	movs	r1, #0
 8017abe:	f7ec f887 	bl	8003bd0 <xQueueGenericSend>
            prvShowWarnings();
 8017ac2:	f7ff feee 	bl	80178a2 <prvShowWarnings>
}
 8017ac6:	bf00      	nop
 8017ac8:	3710      	adds	r7, #16
 8017aca:	46bd      	mov	sp, r7
 8017acc:	bd80      	pop	{r7, pc}
 8017ace:	bf00      	nop
 8017ad0:	08027a98 	.word	0x08027a98
 8017ad4:	20001650 	.word	0x20001650
 8017ad8:	08027ad0 	.word	0x08027ad0
 8017adc:	20002468 	.word	0x20002468

08017ae0 <uxGetMinimumFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetMinimumFreeNetworkBuffers( void )
{
 8017ae0:	b480      	push	{r7}
 8017ae2:	af00      	add	r7, sp, #0
    return uxMinimumFreeNetworkBuffers;
 8017ae4:	4b03      	ldr	r3, [pc, #12]	@ (8017af4 <uxGetMinimumFreeNetworkBuffers+0x14>)
 8017ae6:	681b      	ldr	r3, [r3, #0]
}
 8017ae8:	4618      	mov	r0, r3
 8017aea:	46bd      	mov	sp, r7
 8017aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017af0:	4770      	bx	lr
 8017af2:	bf00      	nop
 8017af4:	20001664 	.word	0x20001664

08017af8 <uxGetNumberOfFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetNumberOfFreeNetworkBuffers( void )
{
 8017af8:	b480      	push	{r7}
 8017afa:	af00      	add	r7, sp, #0
    return listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8017afc:	4b03      	ldr	r3, [pc, #12]	@ (8017b0c <uxGetNumberOfFreeNetworkBuffers+0x14>)
 8017afe:	681b      	ldr	r3, [r3, #0]
}
 8017b00:	4618      	mov	r0, r3
 8017b02:	46bd      	mov	sp, r7
 8017b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b08:	4770      	bx	lr
 8017b0a:	bf00      	nop
 8017b0c:	20001650 	.word	0x20001650

08017b10 <xHas_1F_PHYSPCS>:
/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask );

static BaseType_t xHas_1F_PHYSPCS( uint32_t ulPhyID )
{
 8017b10:	b480      	push	{r7}
 8017b12:	b085      	sub	sp, #20
 8017b14:	af00      	add	r7, sp, #0
 8017b16:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 8017b18:	2300      	movs	r3, #0
 8017b1a:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	4a11      	ldr	r2, [pc, #68]	@ (8017b64 <xHas_1F_PHYSPCS+0x54>)
 8017b20:	4293      	cmp	r3, r2
 8017b22:	d016      	beq.n	8017b52 <xHas_1F_PHYSPCS+0x42>
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	4a0f      	ldr	r2, [pc, #60]	@ (8017b64 <xHas_1F_PHYSPCS+0x54>)
 8017b28:	4293      	cmp	r3, r2
 8017b2a:	d80f      	bhi.n	8017b4c <xHas_1F_PHYSPCS+0x3c>
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	4a0e      	ldr	r2, [pc, #56]	@ (8017b68 <xHas_1F_PHYSPCS+0x58>)
 8017b30:	4293      	cmp	r3, r2
 8017b32:	d00e      	beq.n	8017b52 <xHas_1F_PHYSPCS+0x42>
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	4a0c      	ldr	r2, [pc, #48]	@ (8017b68 <xHas_1F_PHYSPCS+0x58>)
 8017b38:	4293      	cmp	r3, r2
 8017b3a:	d807      	bhi.n	8017b4c <xHas_1F_PHYSPCS+0x3c>
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	4a0b      	ldr	r2, [pc, #44]	@ (8017b6c <xHas_1F_PHYSPCS+0x5c>)
 8017b40:	4293      	cmp	r3, r2
 8017b42:	d006      	beq.n	8017b52 <xHas_1F_PHYSPCS+0x42>
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	4a0a      	ldr	r2, [pc, #40]	@ (8017b70 <xHas_1F_PHYSPCS+0x60>)
 8017b48:	4293      	cmp	r3, r2
 8017b4a:	d002      	beq.n	8017b52 <xHas_1F_PHYSPCS+0x42>
        case PHY_ID_KSZ8081MNXIA:

        case PHY_ID_KSZ8863:
        default:
            /* Most PHY's have a 1F_PHYSPCS */
            xResult = pdTRUE;
 8017b4c:	2301      	movs	r3, #1
 8017b4e:	60fb      	str	r3, [r7, #12]
            break;
 8017b50:	e000      	b.n	8017b54 <xHas_1F_PHYSPCS+0x44>
        case PHY_ID_DP83848I:
        case PHY_ID_DP83TC811S:
        case PHY_ID_TM4C129X:
        case PHY_ID_MV88E6071:
            /* Has no 0x1F register "PHY Special Control Status". */
            break;
 8017b52:	bf00      	nop
    }

    return xResult;
 8017b54:	68fb      	ldr	r3, [r7, #12]
}
 8017b56:	4618      	mov	r0, r3
 8017b58:	3714      	adds	r7, #20
 8017b5a:	46bd      	mov	sp, r7
 8017b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b60:	4770      	bx	lr
 8017b62:	bf00      	nop
 8017b64:	ff000710 	.word	0xff000710
 8017b68:	2000a250 	.word	0x2000a250
 8017b6c:	20005c90 	.word	0x20005c90
 8017b70:	2000a221 	.word	0x2000a221

08017b74 <xHas_19_PHYCR>:
/*-----------------------------------------------------------*/

static BaseType_t xHas_19_PHYCR( uint32_t ulPhyID )
{
 8017b74:	b480      	push	{r7}
 8017b76:	b085      	sub	sp, #20
 8017b78:	af00      	add	r7, sp, #0
 8017b7a:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 8017b7c:	2300      	movs	r3, #0
 8017b7e:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	4a0d      	ldr	r2, [pc, #52]	@ (8017bb8 <xHas_19_PHYCR+0x44>)
 8017b84:	4293      	cmp	r3, r2
 8017b86:	d00b      	beq.n	8017ba0 <xHas_19_PHYCR+0x2c>
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	4a0b      	ldr	r2, [pc, #44]	@ (8017bb8 <xHas_19_PHYCR+0x44>)
 8017b8c:	4293      	cmp	r3, r2
 8017b8e:	d80a      	bhi.n	8017ba6 <xHas_19_PHYCR+0x32>
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	4a0a      	ldr	r2, [pc, #40]	@ (8017bbc <xHas_19_PHYCR+0x48>)
 8017b94:	4293      	cmp	r3, r2
 8017b96:	d003      	beq.n	8017ba0 <xHas_19_PHYCR+0x2c>
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	4a09      	ldr	r2, [pc, #36]	@ (8017bc0 <xHas_19_PHYCR+0x4c>)
 8017b9c:	4293      	cmp	r3, r2
 8017b9e:	d102      	bne.n	8017ba6 <xHas_19_PHYCR+0x32>
    {
        case PHY_ID_LAN8742A:
        case PHY_ID_DP83848I:
        case PHY_ID_TM4C129X:
            xResult = pdTRUE;
 8017ba0:	2301      	movs	r3, #1
 8017ba2:	60fb      	str	r3, [r7, #12]
            break;
 8017ba4:	e000      	b.n	8017ba8 <xHas_19_PHYCR+0x34>

        case PHY_ID_MV88E6071: /* Marvell 88E6071 */
        default:
            /* Most PHY's do not have a 19_PHYCR */
            break;
 8017ba6:	bf00      	nop
    }

    return xResult;
 8017ba8:	68fb      	ldr	r3, [r7, #12]
}
 8017baa:	4618      	mov	r0, r3
 8017bac:	3714      	adds	r7, #20
 8017bae:	46bd      	mov	sp, r7
 8017bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bb4:	4770      	bx	lr
 8017bb6:	bf00      	nop
 8017bb8:	2000a221 	.word	0x2000a221
 8017bbc:	0007c130 	.word	0x0007c130
 8017bc0:	20005c90 	.word	0x20005c90

08017bc4 <vPhyInitialise>:

/* Initialise the struct and assign a PHY-read and -write function. */
void vPhyInitialise( EthernetPhy_t * pxPhyObject,
                     xApplicationPhyReadHook_t fnPhyRead,
                     xApplicationPhyWriteHook_t fnPhyWrite )
{
 8017bc4:	b580      	push	{r7, lr}
 8017bc6:	b084      	sub	sp, #16
 8017bc8:	af00      	add	r7, sp, #0
 8017bca:	60f8      	str	r0, [r7, #12]
 8017bcc:	60b9      	str	r1, [r7, #8]
 8017bce:	607a      	str	r2, [r7, #4]
    memset( ( void * ) pxPhyObject, 0, sizeof( *pxPhyObject ) );
 8017bd0:	2240      	movs	r2, #64	@ 0x40
 8017bd2:	2100      	movs	r1, #0
 8017bd4:	68f8      	ldr	r0, [r7, #12]
 8017bd6:	f00b f90e 	bl	8022df6 <memset>

    pxPhyObject->fnPhyRead = fnPhyRead;
 8017bda:	68fb      	ldr	r3, [r7, #12]
 8017bdc:	68ba      	ldr	r2, [r7, #8]
 8017bde:	601a      	str	r2, [r3, #0]
    pxPhyObject->fnPhyWrite = fnPhyWrite;
 8017be0:	68fb      	ldr	r3, [r7, #12]
 8017be2:	687a      	ldr	r2, [r7, #4]
 8017be4:	605a      	str	r2, [r3, #4]
}
 8017be6:	bf00      	nop
 8017be8:	3710      	adds	r7, #16
 8017bea:	46bd      	mov	sp, r7
 8017bec:	bd80      	pop	{r7, pc}
	...

08017bf0 <xPhyDiscover>:
/*-----------------------------------------------------------*/

/* Discover all PHY's connected by polling 32 indexes ( zero-based ) */
BaseType_t xPhyDiscover( EthernetPhy_t * pxPhyObject )
{
 8017bf0:	b580      	push	{r7, lr}
 8017bf2:	b086      	sub	sp, #24
 8017bf4:	af00      	add	r7, sp, #0
 8017bf6:	6078      	str	r0, [r7, #4]
    BaseType_t xPhyAddress;

    pxPhyObject->xPortCount = 0;
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	2200      	movs	r2, #0
 8017bfc:	629a      	str	r2, [r3, #40]	@ 0x28

    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8017bfe:	2300      	movs	r3, #0
 8017c00:	617b      	str	r3, [r7, #20]
 8017c02:	e03a      	b.n	8017c7a <xPhyDiscover+0x8a>
    {
        uint32_t ulLowerID = 0U;
 8017c04:	2300      	movs	r3, #0
 8017c06:	60fb      	str	r3, [r7, #12]

        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_03_PHYSID2, &ulLowerID );
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	681b      	ldr	r3, [r3, #0]
 8017c0c:	f107 020c 	add.w	r2, r7, #12
 8017c10:	2103      	movs	r1, #3
 8017c12:	6978      	ldr	r0, [r7, #20]
 8017c14:	4798      	blx	r3

        /* A valid PHY id can not be all zeros or all ones. */
        if( ( ulLowerID != ( uint16_t ) ~0U ) && ( ulLowerID != ( uint16_t ) 0U ) )
 8017c16:	68fb      	ldr	r3, [r7, #12]
 8017c18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017c1c:	4293      	cmp	r3, r2
 8017c1e:	d029      	beq.n	8017c74 <xPhyDiscover+0x84>
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d026      	beq.n	8017c74 <xPhyDiscover+0x84>
        {
            uint32_t ulUpperID;
            uint32_t ulPhyID;

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_02_PHYSID1, &ulUpperID );
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	681b      	ldr	r3, [r3, #0]
 8017c2a:	f107 0208 	add.w	r2, r7, #8
 8017c2e:	2102      	movs	r1, #2
 8017c30:	6978      	ldr	r0, [r7, #20]
 8017c32:	4798      	blx	r3
            ulPhyID = ( ( ( uint32_t ) ulUpperID ) << 16 ) | ( ulLowerID & 0xFFF0U );
 8017c34:	68bb      	ldr	r3, [r7, #8]
 8017c36:	041a      	lsls	r2, r3, #16
 8017c38:	68f9      	ldr	r1, [r7, #12]
 8017c3a:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8017c3e:	400b      	ands	r3, r1
 8017c40:	4313      	orrs	r3, r2
 8017c42:	613b      	str	r3, [r7, #16]

            pxPhyObject->ucPhyIndexes[ pxPhyObject->xPortCount ] = ( uint8_t ) xPhyAddress;
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017c48:	697a      	ldr	r2, [r7, #20]
 8017c4a:	b2d1      	uxtb	r1, r2
 8017c4c:	687a      	ldr	r2, [r7, #4]
 8017c4e:	4413      	add	r3, r2
 8017c50:	460a      	mov	r2, r1
 8017c52:	761a      	strb	r2, [r3, #24]
            pxPhyObject->ulPhyIDs[ pxPhyObject->xPortCount ] = ulPhyID;
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	3202      	adds	r2, #2
 8017c5c:	6939      	ldr	r1, [r7, #16]
 8017c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            pxPhyObject->xPortCount++;
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017c66:	1c5a      	adds	r2, r3, #1
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* See if there is more storage space. */
            if( pxPhyObject->xPortCount == ipconfigPHY_MAX_PORTS )
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017c70:	2b04      	cmp	r3, #4
 8017c72:	d005      	beq.n	8017c80 <xPhyDiscover+0x90>
    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8017c74:	697b      	ldr	r3, [r7, #20]
 8017c76:	3301      	adds	r3, #1
 8017c78:	617b      	str	r3, [r7, #20]
 8017c7a:	697b      	ldr	r3, [r7, #20]
 8017c7c:	2b1f      	cmp	r3, #31
 8017c7e:	ddc1      	ble.n	8017c04 <xPhyDiscover+0x14>
                break;
            }
        }
    }

    if( pxPhyObject->xPortCount > 0 )
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	dd05      	ble.n	8017c94 <xPhyDiscover+0xa4>
    {
        FreeRTOS_printf( ( "PHY ID %X\n", ( unsigned int ) pxPhyObject->ulPhyIDs[ 0 ] ) );
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	689b      	ldr	r3, [r3, #8]
 8017c8c:	4619      	mov	r1, r3
 8017c8e:	4804      	ldr	r0, [pc, #16]	@ (8017ca0 <xPhyDiscover+0xb0>)
 8017c90:	f00a fd88 	bl	80227a4 <lUDPLoggingPrintf>
    }

    return pxPhyObject->xPortCount;
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8017c98:	4618      	mov	r0, r3
 8017c9a:	3718      	adds	r7, #24
 8017c9c:	46bd      	mov	sp, r7
 8017c9e:	bd80      	pop	{r7, pc}
 8017ca0:	08027b14 	.word	0x08027b14

08017ca4 <xPhyReset>:
/*-----------------------------------------------------------*/

/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask )
{
 8017ca4:	b580      	push	{r7, lr}
 8017ca6:	b08c      	sub	sp, #48	@ 0x30
 8017ca8:	af00      	add	r7, sp, #0
 8017caa:	6078      	str	r0, [r7, #4]
 8017cac:	6039      	str	r1, [r7, #0]
    TickType_t xRemainingTime;
    TimeOut_t xTimer;
    BaseType_t xPhyIndex;

    /* A bit-mask of PHY ports that are ready. */
    ulDoneMask = 0U;
 8017cae:	2300      	movs	r3, #0
 8017cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set the RESET bits high. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017cb2:	2300      	movs	r3, #0
 8017cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017cb6:	e017      	b.n	8017ce8 <xPhyReset+0x44>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017cb8:	687a      	ldr	r2, [r7, #4]
 8017cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017cbc:	4413      	add	r3, r2
 8017cbe:	3318      	adds	r3, #24
 8017cc0:	781b      	ldrb	r3, [r3, #0]
 8017cc2:	61fb      	str	r3, [r7, #28]

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	f107 0218 	add.w	r2, r7, #24
 8017ccc:	2100      	movs	r1, #0
 8017cce:	69f8      	ldr	r0, [r7, #28]
 8017cd0:	4798      	blx	r3
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig | phyBMCR_RESET );
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	685b      	ldr	r3, [r3, #4]
 8017cd6:	69ba      	ldr	r2, [r7, #24]
 8017cd8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8017cdc:	2100      	movs	r1, #0
 8017cde:	69f8      	ldr	r0, [r7, #28]
 8017ce0:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ce4:	3301      	adds	r3, #1
 8017ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017cec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017cee:	429a      	cmp	r2, r3
 8017cf0:	dbe2      	blt.n	8017cb8 <xPhyReset+0x14>
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_RESET_TIME_MS );
 8017cf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017cf6:	617b      	str	r3, [r7, #20]
    vTaskSetTimeOutState( &xTimer );
 8017cf8:	f107 030c 	add.w	r3, r7, #12
 8017cfc:	4618      	mov	r0, r3
 8017cfe:	f7ed fb91 	bl	8005424 <vTaskSetTimeOutState>

    /* The reset should last less than a second. */
    for( ; ; )
    {
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017d02:	2300      	movs	r3, #0
 8017d04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017d06:	e01f      	b.n	8017d48 <xPhyReset+0xa4>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017d08:	687a      	ldr	r2, [r7, #4]
 8017d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d0c:	4413      	add	r3, r2
 8017d0e:	3318      	adds	r3, #24
 8017d10:	781b      	ldrb	r3, [r3, #0]
 8017d12:	623b      	str	r3, [r7, #32]

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	f107 0218 	add.w	r2, r7, #24
 8017d1c:	2100      	movs	r1, #0
 8017d1e:	6a38      	ldr	r0, [r7, #32]
 8017d20:	4798      	blx	r3

            if( ( ulConfig & phyBMCR_RESET ) == 0 )
 8017d22:	69bb      	ldr	r3, [r7, #24]
 8017d24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d10a      	bne.n	8017d42 <xPhyReset+0x9e>
            {
                FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET %d ready\n", ( int ) xPhyIndex ) );
 8017d2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017d2e:	482d      	ldr	r0, [pc, #180]	@ (8017de4 <xPhyReset+0x140>)
 8017d30:	f00a fd38 	bl	80227a4 <lUDPLoggingPrintf>
                ulDoneMask |= ( 1U << xPhyIndex );
 8017d34:	2201      	movs	r2, #1
 8017d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d38:	fa02 f303 	lsl.w	r3, r2, r3
 8017d3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017d3e:	4313      	orrs	r3, r2
 8017d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d44:	3301      	adds	r3, #1
 8017d46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017d4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017d4e:	429a      	cmp	r2, r3
 8017d50:	dbda      	blt.n	8017d08 <xPhyReset+0x64>
            }
        }

        if( ulDoneMask == ulPhyMask )
 8017d52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017d54:	683b      	ldr	r3, [r7, #0]
 8017d56:	429a      	cmp	r2, r3
 8017d58:	d013      	beq.n	8017d82 <xPhyReset+0xde>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 8017d5a:	f107 0214 	add.w	r2, r7, #20
 8017d5e:	f107 030c 	add.w	r3, r7, #12
 8017d62:	4611      	mov	r1, r2
 8017d64:	4618      	mov	r0, r3
 8017d66:	f7ed fb95 	bl	8005494 <xTaskCheckForTimeOut>
 8017d6a:	4603      	mov	r3, r0
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d004      	beq.n	8017d7a <xPhyReset+0xd6>
        {
            FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
 8017d70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017d72:	481d      	ldr	r0, [pc, #116]	@ (8017de8 <xPhyReset+0x144>)
 8017d74:	f00a fd16 	bl	80227a4 <lUDPLoggingPrintf>
            break;
 8017d78:	e004      	b.n	8017d84 <xPhyReset+0xe0>
        }

        /* Block for a while */
        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8017d7a:	2032      	movs	r0, #50	@ 0x32
 8017d7c:	f7ec fdde 	bl	800493c <vTaskDelay>
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017d80:	e7bf      	b.n	8017d02 <xPhyReset+0x5e>
            break;
 8017d82:	bf00      	nop
    }

    /* Clear the reset bits. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017d84:	2300      	movs	r3, #0
 8017d86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017d88:	e01e      	b.n	8017dc8 <xPhyReset+0x124>
    {
        if( ( ulDoneMask & ( 1U << xPhyIndex ) ) == 0U )
 8017d8a:	2201      	movs	r2, #1
 8017d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d8e:	409a      	lsls	r2, r3
 8017d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d92:	4013      	ands	r3, r2
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d114      	bne.n	8017dc2 <xPhyReset+0x11e>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017d98:	687a      	ldr	r2, [r7, #4]
 8017d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d9c:	4413      	add	r3, r2
 8017d9e:	3318      	adds	r3, #24
 8017da0:	781b      	ldrb	r3, [r3, #0]
 8017da2:	627b      	str	r3, [r7, #36]	@ 0x24

            /* The reset operation timed out, clear the bit manually. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	f107 0218 	add.w	r2, r7, #24
 8017dac:	2100      	movs	r1, #0
 8017dae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017db0:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig & ~phyBMCR_RESET );
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	685b      	ldr	r3, [r3, #4]
 8017db6:	69ba      	ldr	r2, [r7, #24]
 8017db8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8017dbc:	2100      	movs	r1, #0
 8017dbe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017dc0:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017dc4:	3301      	adds	r3, #1
 8017dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017dcc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017dce:	429a      	cmp	r2, r3
 8017dd0:	dbdb      	blt.n	8017d8a <xPhyReset+0xe6>
        }
    }

    vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8017dd2:	2032      	movs	r0, #50	@ 0x32
 8017dd4:	f7ec fdb2 	bl	800493c <vTaskDelay>

    return ulDoneMask;
 8017dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8017dda:	4618      	mov	r0, r3
 8017ddc:	3730      	adds	r7, #48	@ 0x30
 8017dde:	46bd      	mov	sp, r7
 8017de0:	bd80      	pop	{r7, pc}
 8017de2:	bf00      	nop
 8017de4:	08027b20 	.word	0x08027b20
 8017de8:	08027b44 	.word	0x08027b44

08017dec <xPhyConfigure>:
/*-----------------------------------------------------------*/

BaseType_t xPhyConfigure( EthernetPhy_t * pxPhyObject,
                          const PhyProperties_t * pxPhyProperties )
{
 8017dec:	b580      	push	{r7, lr}
 8017dee:	b088      	sub	sp, #32
 8017df0:	af00      	add	r7, sp, #0
 8017df2:	6078      	str	r0, [r7, #4]
 8017df4:	6039      	str	r1, [r7, #0]
    uint32_t ulConfig, ulAdvertise;
    BaseType_t xPhyIndex;

    if( pxPhyObject->xPortCount < 1 )
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	dc05      	bgt.n	8017e0a <xPhyConfigure+0x1e>
    {
        FreeRTOS_printf( ( "xPhyConfigure: No PHY's detected.\n" ) );
 8017dfe:	487c      	ldr	r0, [pc, #496]	@ (8017ff0 <xPhyConfigure+0x204>)
 8017e00:	f00a fcd0 	bl	80227a4 <lUDPLoggingPrintf>
        return -1;
 8017e04:	f04f 33ff 	mov.w	r3, #4294967295
 8017e08:	e0ed      	b.n	8017fe6 <xPhyConfigure+0x1fa>
    /* The expected ID for the 'LAN8742A'  is 0x0007c130. */
    /* The expected ID for the 'LAN8720'   is 0x0007c0f0. */
    /* The expected ID for the 'DP83848I'  is 0x20005C90. */

    /* Set advertise register. */
    if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) && ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 8017e0a:	683b      	ldr	r3, [r7, #0]
 8017e0c:	781b      	ldrb	r3, [r3, #0]
 8017e0e:	2b03      	cmp	r3, #3
 8017e10:	d107      	bne.n	8017e22 <xPhyConfigure+0x36>
 8017e12:	683b      	ldr	r3, [r7, #0]
 8017e14:	789b      	ldrb	r3, [r3, #2]
 8017e16:	2b03      	cmp	r3, #3
 8017e18:	d103      	bne.n	8017e22 <xPhyConfigure+0x36>
    {
        ulAdvertise = phyADVERTISE_ALL;
 8017e1a:	f240 13e1 	movw	r3, #481	@ 0x1e1
 8017e1e:	61fb      	str	r3, [r7, #28]
 8017e20:	e044      	b.n	8017eac <xPhyConfigure+0xc0>
        /* Reset auto-negotiation capability. */
    }
    else
    {
        /* Always select protocol 802.3u. */
        ulAdvertise = phyADVERTISE_CSMA;
 8017e22:	2301      	movs	r3, #1
 8017e24:	61fb      	str	r3, [r7, #28]

        if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO )
 8017e26:	683b      	ldr	r3, [r7, #0]
 8017e28:	781b      	ldrb	r3, [r3, #0]
 8017e2a:	2b03      	cmp	r3, #3
 8017e2c:	d10d      	bne.n	8017e4a <xPhyConfigure+0x5e>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8017e2e:	683b      	ldr	r3, [r7, #0]
 8017e30:	789b      	ldrb	r3, [r3, #2]
 8017e32:	2b02      	cmp	r3, #2
 8017e34:	d104      	bne.n	8017e40 <xPhyConfigure+0x54>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_100FULL;
 8017e36:	69fb      	ldr	r3, [r7, #28]
 8017e38:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8017e3c:	61fb      	str	r3, [r7, #28]
 8017e3e:	e035      	b.n	8017eac <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF | phyADVERTISE_100HALF;
 8017e40:	69fb      	ldr	r3, [r7, #28]
 8017e42:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8017e46:	61fb      	str	r3, [r7, #28]
 8017e48:	e030      	b.n	8017eac <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO )
 8017e4a:	683b      	ldr	r3, [r7, #0]
 8017e4c:	789b      	ldrb	r3, [r3, #2]
 8017e4e:	2b03      	cmp	r3, #3
 8017e50:	d10d      	bne.n	8017e6e <xPhyConfigure+0x82>
        {
            if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8017e52:	683b      	ldr	r3, [r7, #0]
 8017e54:	781b      	ldrb	r3, [r3, #0]
 8017e56:	2b01      	cmp	r3, #1
 8017e58:	d104      	bne.n	8017e64 <xPhyConfigure+0x78>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_10HALF;
 8017e5a:	69fb      	ldr	r3, [r7, #28]
 8017e5c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8017e60:	61fb      	str	r3, [r7, #28]
 8017e62:	e023      	b.n	8017eac <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100FULL | phyADVERTISE_100HALF;
 8017e64:	69fb      	ldr	r3, [r7, #28]
 8017e66:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8017e6a:	61fb      	str	r3, [r7, #28]
 8017e6c:	e01e      	b.n	8017eac <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 )
 8017e6e:	683b      	ldr	r3, [r7, #0]
 8017e70:	781b      	ldrb	r3, [r3, #0]
 8017e72:	2b02      	cmp	r3, #2
 8017e74:	d10d      	bne.n	8017e92 <xPhyConfigure+0xa6>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8017e76:	683b      	ldr	r3, [r7, #0]
 8017e78:	789b      	ldrb	r3, [r3, #2]
 8017e7a:	2b02      	cmp	r3, #2
 8017e7c:	d104      	bne.n	8017e88 <xPhyConfigure+0x9c>
            {
                ulAdvertise |= phyADVERTISE_100FULL;
 8017e7e:	69fb      	ldr	r3, [r7, #28]
 8017e80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8017e84:	61fb      	str	r3, [r7, #28]
 8017e86:	e011      	b.n	8017eac <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100HALF;
 8017e88:	69fb      	ldr	r3, [r7, #28]
 8017e8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017e8e:	61fb      	str	r3, [r7, #28]
 8017e90:	e00c      	b.n	8017eac <xPhyConfigure+0xc0>
            }
        }
        else
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8017e92:	683b      	ldr	r3, [r7, #0]
 8017e94:	789b      	ldrb	r3, [r3, #2]
 8017e96:	2b02      	cmp	r3, #2
 8017e98:	d104      	bne.n	8017ea4 <xPhyConfigure+0xb8>
            {
                ulAdvertise |= phyADVERTISE_10FULL;
 8017e9a:	69fb      	ldr	r3, [r7, #28]
 8017e9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017ea0:	61fb      	str	r3, [r7, #28]
 8017ea2:	e003      	b.n	8017eac <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF;
 8017ea4:	69fb      	ldr	r3, [r7, #28]
 8017ea6:	f043 0320 	orr.w	r3, r3, #32
 8017eaa:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Send a reset command to a set of PHY-ports. */
    xPhyReset( pxPhyObject, xPhyGetMask( pxPhyObject ) );
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017eb0:	2201      	movs	r2, #1
 8017eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8017eb6:	3b01      	subs	r3, #1
 8017eb8:	4619      	mov	r1, r3
 8017eba:	6878      	ldr	r0, [r7, #4]
 8017ebc:	f7ff fef2 	bl	8017ca4 <xPhyReset>

    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017ec0:	2300      	movs	r3, #0
 8017ec2:	61bb      	str	r3, [r7, #24]
 8017ec4:	e080      	b.n	8017fc8 <xPhyConfigure+0x1dc>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017ec6:	687a      	ldr	r2, [r7, #4]
 8017ec8:	69bb      	ldr	r3, [r7, #24]
 8017eca:	4413      	add	r3, r2
 8017ecc:	3318      	adds	r3, #24
 8017ece:	781b      	ldrb	r3, [r3, #0]
 8017ed0:	617b      	str	r3, [r7, #20]
        uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	69ba      	ldr	r2, [r7, #24]
 8017ed6:	3202      	adds	r2, #2
 8017ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017edc:	613b      	str	r3, [r7, #16]

        /* Write advertise register. */
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, ulAdvertise );
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	685b      	ldr	r3, [r3, #4]
 8017ee2:	69fa      	ldr	r2, [r7, #28]
 8017ee4:	2104      	movs	r1, #4
 8017ee6:	6978      	ldr	r0, [r7, #20]
 8017ee8:	4798      	blx	r3
         *        1           1           1        10BASE-T, Half/Full-Duplex
         *                                         100BASE-TX, Half/Full-Duplex
         */

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	681b      	ldr	r3, [r3, #0]
 8017eee:	f107 020c 	add.w	r2, r7, #12
 8017ef2:	2100      	movs	r1, #0
 8017ef4:	6978      	ldr	r0, [r7, #20]
 8017ef6:	4798      	blx	r3

        ulConfig &= ~( phyBMCR_SPEED_100 | phyBMCR_FULL_DUPLEX );
 8017ef8:	68fb      	ldr	r3, [r7, #12]
 8017efa:	f423 5304 	bic.w	r3, r3, #8448	@ 0x2100
 8017efe:	60fb      	str	r3, [r7, #12]

        ulConfig |= phyBMCR_AN_ENABLE;
 8017f00:	68fb      	ldr	r3, [r7, #12]
 8017f02:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8017f06:	60fb      	str	r3, [r7, #12]

        if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 ) || ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) )
 8017f08:	683b      	ldr	r3, [r7, #0]
 8017f0a:	781b      	ldrb	r3, [r3, #0]
 8017f0c:	2b02      	cmp	r3, #2
 8017f0e:	d003      	beq.n	8017f18 <xPhyConfigure+0x12c>
 8017f10:	683b      	ldr	r3, [r7, #0]
 8017f12:	781b      	ldrb	r3, [r3, #0]
 8017f14:	2b03      	cmp	r3, #3
 8017f16:	d104      	bne.n	8017f22 <xPhyConfigure+0x136>
        {
            ulConfig |= phyBMCR_SPEED_100;
 8017f18:	68fb      	ldr	r3, [r7, #12]
 8017f1a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8017f1e:	60fb      	str	r3, [r7, #12]
 8017f20:	e007      	b.n	8017f32 <xPhyConfigure+0x146>
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8017f22:	683b      	ldr	r3, [r7, #0]
 8017f24:	781b      	ldrb	r3, [r3, #0]
 8017f26:	2b01      	cmp	r3, #1
 8017f28:	d103      	bne.n	8017f32 <xPhyConfigure+0x146>
        {
            ulConfig &= ~phyBMCR_SPEED_100;
 8017f2a:	68fb      	ldr	r3, [r7, #12]
 8017f2c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8017f30:	60fb      	str	r3, [r7, #12]
        }

        if( ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL ) || ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 8017f32:	683b      	ldr	r3, [r7, #0]
 8017f34:	789b      	ldrb	r3, [r3, #2]
 8017f36:	2b02      	cmp	r3, #2
 8017f38:	d003      	beq.n	8017f42 <xPhyConfigure+0x156>
 8017f3a:	683b      	ldr	r3, [r7, #0]
 8017f3c:	789b      	ldrb	r3, [r3, #2]
 8017f3e:	2b03      	cmp	r3, #3
 8017f40:	d104      	bne.n	8017f4c <xPhyConfigure+0x160>
        {
            ulConfig |= phyBMCR_FULL_DUPLEX;
 8017f42:	68fb      	ldr	r3, [r7, #12]
 8017f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8017f48:	60fb      	str	r3, [r7, #12]
 8017f4a:	e007      	b.n	8017f5c <xPhyConfigure+0x170>
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_HALF )
 8017f4c:	683b      	ldr	r3, [r7, #0]
 8017f4e:	789b      	ldrb	r3, [r3, #2]
 8017f50:	2b01      	cmp	r3, #1
 8017f52:	d103      	bne.n	8017f5c <xPhyConfigure+0x170>
        {
            ulConfig &= ~phyBMCR_FULL_DUPLEX;
 8017f54:	68fb      	ldr	r3, [r7, #12]
 8017f56:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8017f5a:	60fb      	str	r3, [r7, #12]
        }

        if( xHas_19_PHYCR( ulPhyID ) )
 8017f5c:	6938      	ldr	r0, [r7, #16]
 8017f5e:	f7ff fe09 	bl	8017b74 <xHas_19_PHYCR>
 8017f62:	4603      	mov	r3, r0
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d026      	beq.n	8017fb6 <xPhyConfigure+0x1ca>
        {
            uint32_t ulPhyControl;
            /* Read PHY Control register. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_19_PHYCR, &ulPhyControl );
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	681b      	ldr	r3, [r3, #0]
 8017f6c:	f107 0208 	add.w	r2, r7, #8
 8017f70:	2119      	movs	r1, #25
 8017f72:	6978      	ldr	r0, [r7, #20]
 8017f74:	4798      	blx	r3

            /* Clear bits which might get set: */
            ulPhyControl &= ~( PHYCR_MDIX_EN | PHYCR_MDIX_FORCE );
 8017f76:	68bb      	ldr	r3, [r7, #8]
 8017f78:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8017f7c:	60bb      	str	r3, [r7, #8]

            if( pxPhyProperties->ucMDI_X == PHY_MDIX_AUTO )
 8017f7e:	683b      	ldr	r3, [r7, #0]
 8017f80:	785b      	ldrb	r3, [r3, #1]
 8017f82:	2b03      	cmp	r3, #3
 8017f84:	d104      	bne.n	8017f90 <xPhyConfigure+0x1a4>
            {
                ulPhyControl |= PHYCR_MDIX_EN;
 8017f86:	68bb      	ldr	r3, [r7, #8]
 8017f88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8017f8c:	60bb      	str	r3, [r7, #8]
 8017f8e:	e00c      	b.n	8017faa <xPhyConfigure+0x1be>
            }
            else if( pxPhyProperties->ucMDI_X == PHY_MDIX_CROSSED )
 8017f90:	683b      	ldr	r3, [r7, #0]
 8017f92:	785b      	ldrb	r3, [r3, #1]
 8017f94:	2b02      	cmp	r3, #2
 8017f96:	d104      	bne.n	8017fa2 <xPhyConfigure+0x1b6>
            {
                /* Force direct link = Use crossed RJ45 cable. */
                ulPhyControl &= ~PHYCR_MDIX_FORCE;
 8017f98:	68bb      	ldr	r3, [r7, #8]
 8017f9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8017f9e:	60bb      	str	r3, [r7, #8]
 8017fa0:	e003      	b.n	8017faa <xPhyConfigure+0x1be>
            }
            else
            {
                /* Force crossed link = Use direct RJ45 cable. */
                ulPhyControl |= PHYCR_MDIX_FORCE;
 8017fa2:	68bb      	ldr	r3, [r7, #8]
 8017fa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8017fa8:	60bb      	str	r3, [r7, #8]
            }

            /* update PHY Control Register. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_19_PHYCR, ulPhyControl );
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	685b      	ldr	r3, [r3, #4]
 8017fae:	68ba      	ldr	r2, [r7, #8]
 8017fb0:	2119      	movs	r1, #25
 8017fb2:	6978      	ldr	r0, [r7, #20]
 8017fb4:	4798      	blx	r3
        }

        FreeRTOS_printf( ( "+TCP: advertise: %04X config %04X\n", ( unsigned int ) ulAdvertise, ( unsigned int ) ulConfig ) );
 8017fb6:	68fb      	ldr	r3, [r7, #12]
 8017fb8:	461a      	mov	r2, r3
 8017fba:	69f9      	ldr	r1, [r7, #28]
 8017fbc:	480d      	ldr	r0, [pc, #52]	@ (8017ff4 <xPhyConfigure+0x208>)
 8017fbe:	f00a fbf1 	bl	80227a4 <lUDPLoggingPrintf>
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017fc2:	69bb      	ldr	r3, [r7, #24]
 8017fc4:	3301      	adds	r3, #1
 8017fc6:	61bb      	str	r3, [r7, #24]
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017fcc:	69ba      	ldr	r2, [r7, #24]
 8017fce:	429a      	cmp	r2, r3
 8017fd0:	f6ff af79 	blt.w	8017ec6 <xPhyConfigure+0xda>
    }

    /* Keep these values for later use. */
    pxPhyObject->ulBCRValue = ulConfig & ~phyBMCR_ISOLATE;
 8017fd4:	68fb      	ldr	r3, [r7, #12]
 8017fd6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	62da      	str	r2, [r3, #44]	@ 0x2c
    pxPhyObject->ulACRValue = ulAdvertise;
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	69fa      	ldr	r2, [r7, #28]
 8017fe2:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 8017fe4:	2300      	movs	r3, #0
}
 8017fe6:	4618      	mov	r0, r3
 8017fe8:	3720      	adds	r7, #32
 8017fea:	46bd      	mov	sp, r7
 8017fec:	bd80      	pop	{r7, pc}
 8017fee:	bf00      	nop
 8017ff0:	08027b78 	.word	0x08027b78
 8017ff4:	08027b9c 	.word	0x08027b9c

08017ff8 <xPhyStartAutoNegotiation>:
/* xPhyStartAutoNegotiation() is the alternative xPhyFixedValue():
 * It sets the BMCR_AN_RESTART bit and waits for the auto-negotiation completion
 * ( phyBMSR_AN_COMPLETE ). */
BaseType_t xPhyStartAutoNegotiation( EthernetPhy_t * pxPhyObject,
                                     uint32_t ulPhyMask )
{
 8017ff8:	b590      	push	{r4, r7, lr}
 8017ffa:	b095      	sub	sp, #84	@ 0x54
 8017ffc:	af02      	add	r7, sp, #8
 8017ffe:	6078      	str	r0, [r7, #4]
 8018000:	6039      	str	r1, [r7, #0]
    uint32_t xPhyIndex, ulDoneMask, ulBitMask;
    uint32_t ulRegValue;
    TickType_t xRemainingTime;
    TimeOut_t xTimer;

    if( ulPhyMask == ( uint32_t ) 0U )
 8018002:	683b      	ldr	r3, [r7, #0]
 8018004:	2b00      	cmp	r3, #0
 8018006:	d101      	bne.n	801800c <xPhyStartAutoNegotiation+0x14>
    {
        return 0;
 8018008:	2300      	movs	r3, #0
 801800a:	e18d      	b.n	8018328 <xPhyStartAutoNegotiation+0x330>
    }

    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 801800c:	2300      	movs	r3, #0
 801800e:	647b      	str	r3, [r7, #68]	@ 0x44
 8018010:	e020      	b.n	8018054 <xPhyStartAutoNegotiation+0x5c>
    {
        if( ( ulPhyMask & ( 1lu << xPhyIndex ) ) != 0lu )
 8018012:	683a      	ldr	r2, [r7, #0]
 8018014:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018016:	fa22 f303 	lsr.w	r3, r2, r3
 801801a:	f003 0301 	and.w	r3, r3, #1
 801801e:	2b00      	cmp	r3, #0
 8018020:	d015      	beq.n	801804e <xPhyStartAutoNegotiation+0x56>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8018022:	687a      	ldr	r2, [r7, #4]
 8018024:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018026:	4413      	add	r3, r2
 8018028:	3318      	adds	r3, #24
 801802a:	781b      	ldrb	r3, [r3, #0]
 801802c:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Enable Auto-Negotiation. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, pxPhyObject->ulACRValue );
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	685b      	ldr	r3, [r3, #4]
 8018032:	687a      	ldr	r2, [r7, #4]
 8018034:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8018036:	2104      	movs	r1, #4
 8018038:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801803a:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue | phyBMCR_AN_RESTART );
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	685b      	ldr	r3, [r3, #4]
 8018040:	687a      	ldr	r2, [r7, #4]
 8018042:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8018044:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8018048:	2100      	movs	r1, #0
 801804a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801804c:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 801804e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018050:	3301      	adds	r3, #1
 8018052:	647b      	str	r3, [r7, #68]	@ 0x44
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018058:	461a      	mov	r2, r3
 801805a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801805c:	4293      	cmp	r3, r2
 801805e:	d3d8      	bcc.n	8018012 <xPhyStartAutoNegotiation+0x1a>
        }
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_NEGOTIATE_TIME_MS );
 8018060:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8018064:	623b      	str	r3, [r7, #32]
    vTaskSetTimeOutState( &xTimer );
 8018066:	f107 0318 	add.w	r3, r7, #24
 801806a:	4618      	mov	r0, r3
 801806c:	f7ed f9da 	bl	8005424 <vTaskSetTimeOutState>
    ulDoneMask = 0;
 8018070:	2300      	movs	r3, #0
 8018072:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Wait until the auto-negotiation will be completed */
    for( ; ; )
    {
        ulBitMask = ( uint32_t ) 1U;
 8018074:	2301      	movs	r3, #1
 8018076:	63fb      	str	r3, [r7, #60]	@ 0x3c

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8018078:	2300      	movs	r3, #0
 801807a:	647b      	str	r3, [r7, #68]	@ 0x44
 801807c:	e025      	b.n	80180ca <xPhyStartAutoNegotiation+0xd2>
        {
            if( ( ulPhyMask & ulBitMask ) != 0lu )
 801807e:	683a      	ldr	r2, [r7, #0]
 8018080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018082:	4013      	ands	r3, r2
 8018084:	2b00      	cmp	r3, #0
 8018086:	d01a      	beq.n	80180be <xPhyStartAutoNegotiation+0xc6>
            {
                if( ( ulDoneMask & ulBitMask ) == 0lu )
 8018088:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801808a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801808c:	4013      	ands	r3, r2
 801808e:	2b00      	cmp	r3, #0
 8018090:	d115      	bne.n	80180be <xPhyStartAutoNegotiation+0xc6>
                {
                    BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8018092:	687a      	ldr	r2, [r7, #4]
 8018094:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018096:	4413      	add	r3, r2
 8018098:	3318      	adds	r3, #24
 801809a:	781b      	ldrb	r3, [r3, #0]
 801809c:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	681b      	ldr	r3, [r3, #0]
 80180a2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80180a6:	2101      	movs	r1, #1
 80180a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80180aa:	4798      	blx	r3

                    if( ( ulRegValue & phyBMSR_AN_COMPLETE ) != 0 )
 80180ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180ae:	f003 0320 	and.w	r3, r3, #32
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d003      	beq.n	80180be <xPhyStartAutoNegotiation+0xc6>
                    {
                        ulDoneMask |= ulBitMask;
 80180b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80180b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80180ba:	4313      	orrs	r3, r2
 80180bc:	643b      	str	r3, [r7, #64]	@ 0x40
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80180be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80180c0:	3301      	adds	r3, #1
 80180c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80180c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80180c6:	005b      	lsls	r3, r3, #1
 80180c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80180ce:	461a      	mov	r2, r3
 80180d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80180d2:	4293      	cmp	r3, r2
 80180d4:	d3d3      	bcc.n	801807e <xPhyStartAutoNegotiation+0x86>
                    }
                }
            }
        }

        if( ulPhyMask == ulDoneMask )
 80180d6:	683a      	ldr	r2, [r7, #0]
 80180d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80180da:	429a      	cmp	r2, r3
 80180dc:	d013      	beq.n	8018106 <xPhyStartAutoNegotiation+0x10e>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 80180de:	f107 0220 	add.w	r2, r7, #32
 80180e2:	f107 0318 	add.w	r3, r7, #24
 80180e6:	4611      	mov	r1, r2
 80180e8:	4618      	mov	r0, r3
 80180ea:	f7ed f9d3 	bl	8005494 <xTaskCheckForTimeOut>
 80180ee:	4603      	mov	r3, r0
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	d004      	beq.n	80180fe <xPhyStartAutoNegotiation+0x106>
        {
            FreeRTOS_printf( ( "xPhyStartAutoNegotiation: phyBMSR_AN_COMPLETE timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
 80180f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80180f6:	488e      	ldr	r0, [pc, #568]	@ (8018330 <xPhyStartAutoNegotiation+0x338>)
 80180f8:	f00a fb54 	bl	80227a4 <lUDPLoggingPrintf>
            break;
 80180fc:	e004      	b.n	8018108 <xPhyStartAutoNegotiation+0x110>
        }

        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 80180fe:	2032      	movs	r0, #50	@ 0x32
 8018100:	f7ec fc1c 	bl	800493c <vTaskDelay>
        ulBitMask = ( uint32_t ) 1U;
 8018104:	e7b6      	b.n	8018074 <xPhyStartAutoNegotiation+0x7c>
            break;
 8018106:	bf00      	nop
    }

    if( ulDoneMask != ( uint32_t ) 0U )
 8018108:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801810a:	2b00      	cmp	r3, #0
 801810c:	f000 810b 	beq.w	8018326 <xPhyStartAutoNegotiation+0x32e>
    {
        ulBitMask = ( uint32_t ) 1U;
 8018110:	2301      	movs	r3, #1
 8018112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pxPhyObject->ulLinkStatusMask &= ~( ulDoneMask );
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018118:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801811a:	43db      	mvns	r3, r3
 801811c:	401a      	ands	r2, r3
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	635a      	str	r2, [r3, #52]	@ 0x34

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8018122:	2300      	movs	r3, #0
 8018124:	647b      	str	r3, [r7, #68]	@ 0x44
 8018126:	e0f7      	b.n	8018318 <xPhyStartAutoNegotiation+0x320>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8018128:	687a      	ldr	r2, [r7, #4]
 801812a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801812c:	4413      	add	r3, r2
 801812e:	3318      	adds	r3, #24
 8018130:	781b      	ldrb	r3, [r3, #0]
 8018132:	63bb      	str	r3, [r7, #56]	@ 0x38
            uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018138:	3202      	adds	r2, #2
 801813a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801813e:	637b      	str	r3, [r7, #52]	@ 0x34

            if( ( ulDoneMask & ulBitMask ) == ( uint32_t ) 0U )
 8018140:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8018142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018144:	4013      	ands	r3, r2
 8018146:	2b00      	cmp	r3, #0
 8018148:	f000 80df 	beq.w	801830a <xPhyStartAutoNegotiation+0x312>
            {
                continue;
            }

            /* Clear the 'phyBMCR_AN_RESTART'  bit. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue );
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	685b      	ldr	r3, [r3, #4]
 8018150:	687a      	ldr	r2, [r7, #4]
 8018152:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8018154:	2100      	movs	r1, #0
 8018156:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8018158:	4798      	blx	r3

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	681b      	ldr	r3, [r3, #0]
 801815e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8018162:	2101      	movs	r1, #1
 8018164:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8018166:	4798      	blx	r3

            if( ( ulRegValue & phyBMSR_LINK_STATUS ) != 0U )
 8018168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801816a:	f003 0304 	and.w	r3, r3, #4
 801816e:	2b00      	cmp	r3, #0
 8018170:	d005      	beq.n	801817e <xPhyStartAutoNegotiation+0x186>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018176:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018178:	431a      	orrs	r2, r3
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	635a      	str	r2, [r3, #52]	@ 0x34
            }

            if( ulPhyID == PHY_ID_KSZ8081MNXIA )
 801817e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018180:	4a6c      	ldr	r2, [pc, #432]	@ (8018334 <xPhyStartAutoNegotiation+0x33c>)
 8018182:	4293      	cmp	r3, r2
 8018184:	d130      	bne.n	80181e8 <xPhyStartAutoNegotiation+0x1f0>
            {
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, 0x1E, &ulControlStatus );
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	681b      	ldr	r3, [r3, #0]
 801818a:	f107 0214 	add.w	r2, r7, #20
 801818e:	211e      	movs	r1, #30
 8018190:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8018192:	4798      	blx	r3

                switch( ulControlStatus & 0x07 )
 8018194:	697b      	ldr	r3, [r7, #20]
 8018196:	f003 0307 	and.w	r3, r3, #7
 801819a:	3b01      	subs	r3, #1
 801819c:	2b05      	cmp	r3, #5
 801819e:	d814      	bhi.n	80181ca <xPhyStartAutoNegotiation+0x1d2>
 80181a0:	a201      	add	r2, pc, #4	@ (adr r2, 80181a8 <xPhyStartAutoNegotiation+0x1b0>)
 80181a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181a6:	bf00      	nop
 80181a8:	080181c1 	.word	0x080181c1
 80181ac:	080181cb 	.word	0x080181cb
 80181b0:	080181cb 	.word	0x080181cb
 80181b4:	080181cb 	.word	0x080181cb
 80181b8:	080181c1 	.word	0x080181c1
 80181bc:	080181cb 	.word	0x080181cb
                    case 0x01:
                    case 0x05:
/*	[001] = 10BASE-T half-duplex */
/*	[101] = 10BASE-T full-duplex */
                        /* 10 Mbps. */
                        ulRegValue |= phyPHYSTS_SPEED_STATUS;
 80181c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181c2:	f043 0302 	orr.w	r3, r3, #2
 80181c6:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 80181c8:	bf00      	nop
/*	[010] = 100BASE-TX half-duplex */
/*	[110] = 100BASE-TX full-duplex */
                        break;
                }

                switch( ulControlStatus & 0x07 )
 80181ca:	697b      	ldr	r3, [r7, #20]
 80181cc:	f003 0307 	and.w	r3, r3, #7
 80181d0:	2b02      	cmp	r3, #2
 80181d2:	d801      	bhi.n	80181d8 <xPhyStartAutoNegotiation+0x1e0>
 80181d4:	2b00      	cmp	r3, #0

                    case 0x01:
                    case 0x02:
/*	[001] = 10BASE-T half-duplex */
/*	[010] = 100BASE-TX half-duplex */
                        break;
 80181d6:	e05b      	b.n	8018290 <xPhyStartAutoNegotiation+0x298>
 80181d8:	3b05      	subs	r3, #5
                switch( ulControlStatus & 0x07 )
 80181da:	2b01      	cmp	r3, #1
 80181dc:	d858      	bhi.n	8018290 <xPhyStartAutoNegotiation+0x298>
                        ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 80181de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181e0:	f043 0304 	orr.w	r3, r3, #4
 80181e4:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 80181e6:	e053      	b.n	8018290 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else if( ulPhyID == PHY_ID_KSZ8795 )
 80181e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181ea:	4a53      	ldr	r2, [pc, #332]	@ (8018338 <xPhyStartAutoNegotiation+0x340>)
 80181ec:	4293      	cmp	r3, r2
 80181ee:	d126      	bne.n	801823e <xPhyStartAutoNegotiation+0x246>
                 *     010 = 10BASE-T half-duplex
                 *     101 = 10BASE-T full-duplex
                 *     011 = 100BASE-TX half-duplex
                 *     110 = 100BASE-TX full-duplex
                 */
                uint32_t ulControlStatus = 0u;
 80181f0:	2300      	movs	r3, #0
 80181f2:	613b      	str	r3, [r7, #16]
                uint32_t ulPortOperationMode = 0u;
 80181f4:	2300      	movs	r3, #0
 80181f6:	633b      	str	r3, [r7, #48]	@ 0x30
                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	f107 0210 	add.w	r2, r7, #16
 8018200:	211f      	movs	r1, #31
 8018202:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8018204:	4798      	blx	r3
                ulPortOperationMode = ( ulControlStatus >> 8u ) & 0x07u;
 8018206:	693b      	ldr	r3, [r7, #16]
 8018208:	0a1b      	lsrs	r3, r3, #8
 801820a:	f003 0307 	and.w	r3, r3, #7
 801820e:	633b      	str	r3, [r7, #48]	@ 0x30

                ulRegValue = 0;
 8018210:	2300      	movs	r3, #0
 8018212:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Detect 10baseT operation */
                if( ( 0x02u == ulPortOperationMode ) || ( 0x05u == ulPortOperationMode ) )
 8018214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018216:	2b02      	cmp	r3, #2
 8018218:	d002      	beq.n	8018220 <xPhyStartAutoNegotiation+0x228>
 801821a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801821c:	2b05      	cmp	r3, #5
 801821e:	d103      	bne.n	8018228 <xPhyStartAutoNegotiation+0x230>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8018220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018222:	f043 0302 	orr.w	r3, r3, #2
 8018226:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                /* Detect full duplex operation */
                if( ( 0x05u == ulPortOperationMode ) || ( 0x06u == ulPortOperationMode ) )
 8018228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801822a:	2b05      	cmp	r3, #5
 801822c:	d002      	beq.n	8018234 <xPhyStartAutoNegotiation+0x23c>
 801822e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018230:	2b06      	cmp	r3, #6
 8018232:	d12d      	bne.n	8018290 <xPhyStartAutoNegotiation+0x298>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8018234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018236:	f043 0304 	orr.w	r3, r3, #4
 801823a:	627b      	str	r3, [r7, #36]	@ 0x24
 801823c:	e028      	b.n	8018290 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else if( xHas_1F_PHYSPCS( ulPhyID ) )
 801823e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8018240:	f7ff fc66 	bl	8017b10 <xHas_1F_PHYSPCS>
 8018244:	4603      	mov	r3, r0
 8018246:	2b00      	cmp	r3, #0
 8018248:	d01b      	beq.n	8018282 <xPhyStartAutoNegotiation+0x28a>
            {
                /* 31 RW PHY Special Control Status */
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	f107 020c 	add.w	r2, r7, #12
 8018252:	211f      	movs	r1, #31
 8018254:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8018256:	4798      	blx	r3
                ulRegValue = 0;
 8018258:	2300      	movs	r3, #0
 801825a:	627b      	str	r3, [r7, #36]	@ 0x24

                if( ( ulControlStatus & phyPHYSPCS_FULL_DUPLEX ) != 0 )
 801825c:	68fb      	ldr	r3, [r7, #12]
 801825e:	f003 0310 	and.w	r3, r3, #16
 8018262:	2b00      	cmp	r3, #0
 8018264:	d003      	beq.n	801826e <xPhyStartAutoNegotiation+0x276>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8018266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018268:	f043 0304 	orr.w	r3, r3, #4
 801826c:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                if( ( ulControlStatus & phyPHYSPCS_SPEED_MASK ) == phyPHYSPCS_SPEED_10 )
 801826e:	68fb      	ldr	r3, [r7, #12]
 8018270:	f003 030c 	and.w	r3, r3, #12
 8018274:	2b04      	cmp	r3, #4
 8018276:	d10b      	bne.n	8018290 <xPhyStartAutoNegotiation+0x298>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8018278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801827a:	f043 0302 	orr.w	r3, r3, #2
 801827e:	627b      	str	r3, [r7, #36]	@ 0x24
 8018280:	e006      	b.n	8018290 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else
            {
                /* Read the result of the auto-negotiation. */
                pxPhyObject->fnPhyRead( xPhyAddress, PHYREG_10_PHYSTS, &ulRegValue );
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801828a:	2110      	movs	r1, #16
 801828c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801828e:	4798      	blx	r3
            }

            FreeRTOS_printf( ( "Autonego ready: %08x: %s duplex %u mbit %s status\n",
 8018290:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018294:	f003 0304 	and.w	r3, r3, #4
 8018298:	2b00      	cmp	r3, #0
 801829a:	d001      	beq.n	80182a0 <xPhyStartAutoNegotiation+0x2a8>
 801829c:	4827      	ldr	r0, [pc, #156]	@ (801833c <xPhyStartAutoNegotiation+0x344>)
 801829e:	e000      	b.n	80182a2 <xPhyStartAutoNegotiation+0x2aa>
 80182a0:	4827      	ldr	r0, [pc, #156]	@ (8018340 <xPhyStartAutoNegotiation+0x348>)
 80182a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182a4:	f003 0302 	and.w	r3, r3, #2
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d001      	beq.n	80182b0 <xPhyStartAutoNegotiation+0x2b8>
 80182ac:	240a      	movs	r4, #10
 80182ae:	e000      	b.n	80182b2 <xPhyStartAutoNegotiation+0x2ba>
 80182b0:	2464      	movs	r4, #100	@ 0x64
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80182b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80182b8:	4013      	ands	r3, r2
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d001      	beq.n	80182c2 <xPhyStartAutoNegotiation+0x2ca>
 80182be:	4b21      	ldr	r3, [pc, #132]	@ (8018344 <xPhyStartAutoNegotiation+0x34c>)
 80182c0:	e000      	b.n	80182c4 <xPhyStartAutoNegotiation+0x2cc>
 80182c2:	4b21      	ldr	r3, [pc, #132]	@ (8018348 <xPhyStartAutoNegotiation+0x350>)
 80182c4:	9300      	str	r3, [sp, #0]
 80182c6:	4623      	mov	r3, r4
 80182c8:	4602      	mov	r2, r0
 80182ca:	4820      	ldr	r0, [pc, #128]	@ (801834c <xPhyStartAutoNegotiation+0x354>)
 80182cc:	f00a fa6a 	bl	80227a4 <lUDPLoggingPrintf>
                               ( unsigned int ) ulRegValue,
                               ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) ? "full" : "half",
                               ( ulRegValue & phyPHYSTS_SPEED_STATUS ) ? 10 : 100,
                               ( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) != 0U ) ? "high" : "low" ) );

            if( ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) != ( uint32_t ) 0U )
 80182d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182d2:	f003 0304 	and.w	r3, r3, #4
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d004      	beq.n	80182e4 <xPhyStartAutoNegotiation+0x2ec>
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_FULL;
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	2202      	movs	r2, #2
 80182de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80182e2:	e003      	b.n	80182ec <xPhyStartAutoNegotiation+0x2f4>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_HALF;
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	2201      	movs	r2, #1
 80182e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            }

            if( ( ulRegValue & phyPHYSTS_SPEED_STATUS ) != 0 )
 80182ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182ee:	f003 0302 	and.w	r3, r3, #2
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d004      	beq.n	8018300 <xPhyStartAutoNegotiation+0x308>
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_10;
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	2201      	movs	r2, #1
 80182fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80182fe:	e005      	b.n	801830c <xPhyStartAutoNegotiation+0x314>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_100;
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	2202      	movs	r2, #2
 8018304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8018308:	e000      	b.n	801830c <xPhyStartAutoNegotiation+0x314>
                continue;
 801830a:	bf00      	nop
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801830c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801830e:	3301      	adds	r3, #1
 8018310:	647b      	str	r3, [r7, #68]	@ 0x44
 8018312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018314:	005b      	lsls	r3, r3, #1
 8018316:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801831c:	461a      	mov	r2, r3
 801831e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018320:	4293      	cmp	r3, r2
 8018322:	f4ff af01 	bcc.w	8018128 <xPhyStartAutoNegotiation+0x130>
            }
        }
    } /* if( ulDoneMask != ( uint32_t) 0U ) */

    return 0;
 8018326:	2300      	movs	r3, #0
}
 8018328:	4618      	mov	r0, r3
 801832a:	374c      	adds	r7, #76	@ 0x4c
 801832c:	46bd      	mov	sp, r7
 801832e:	bd90      	pop	{r4, r7, pc}
 8018330:	08027bc0 	.word	0x08027bc0
 8018334:	00221560 	.word	0x00221560
 8018338:	00221550 	.word	0x00221550
 801833c:	08027c0c 	.word	0x08027c0c
 8018340:	08027c14 	.word	0x08027c14
 8018344:	08027c1c 	.word	0x08027c1c
 8018348:	08027c24 	.word	0x08027c24
 801834c:	08027c28 	.word	0x08027c28

08018350 <xPhyCheckLinkStatus>:
/*-----------------------------------------------------------*/

BaseType_t xPhyCheckLinkStatus( EthernetPhy_t * pxPhyObject,
                                BaseType_t xHadReception )
{
 8018350:	b580      	push	{r7, lr}
 8018352:	b088      	sub	sp, #32
 8018354:	af00      	add	r7, sp, #0
 8018356:	6078      	str	r0, [r7, #4]
 8018358:	6039      	str	r1, [r7, #0]
    uint32_t ulStatus, ulBitMask = 1U;
 801835a:	2301      	movs	r3, #1
 801835c:	61fb      	str	r3, [r7, #28]
    BaseType_t xPhyIndex;
    BaseType_t xNeedCheck = pdFALSE;
 801835e:	2300      	movs	r3, #0
 8018360:	617b      	str	r3, [r7, #20]

    if( xHadReception > 0 )
 8018362:	683b      	ldr	r3, [r7, #0]
 8018364:	2b00      	cmp	r3, #0
 8018366:	dd2b      	ble.n	80183c0 <xPhyCheckLinkStatus+0x70>
    {
        /* A packet was received. No need to check for the PHY status now,
         * but set a timer to check it later on. */
        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	331c      	adds	r3, #28
 801836c:	4618      	mov	r0, r3
 801836e:	f7ed f859 	bl	8005424 <vTaskSetTimeOutState>
        pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8018378:	625a      	str	r2, [r3, #36]	@ 0x24

        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801837a:	2300      	movs	r3, #0
 801837c:	61bb      	str	r3, [r7, #24]
 801837e:	e019      	b.n	80183b4 <xPhyCheckLinkStatus+0x64>
        {
            if( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) == 0UL )
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018384:	69fb      	ldr	r3, [r7, #28]
 8018386:	4013      	ands	r3, r2
 8018388:	2b00      	cmp	r3, #0
 801838a:	d10d      	bne.n	80183a8 <xPhyCheckLinkStatus+0x58>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018390:	69fb      	ldr	r3, [r7, #28]
 8018392:	431a      	orrs	r2, r3
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	635a      	str	r2, [r3, #52]	@ 0x34
                FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801839c:	4619      	mov	r1, r3
 801839e:	4842      	ldr	r0, [pc, #264]	@ (80184a8 <xPhyCheckLinkStatus+0x158>)
 80183a0:	f00a fa00 	bl	80227a4 <lUDPLoggingPrintf>
                xNeedCheck = pdTRUE;
 80183a4:	2301      	movs	r3, #1
 80183a6:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80183a8:	69bb      	ldr	r3, [r7, #24]
 80183aa:	3301      	adds	r3, #1
 80183ac:	61bb      	str	r3, [r7, #24]
 80183ae:	69fb      	ldr	r3, [r7, #28]
 80183b0:	005b      	lsls	r3, r3, #1
 80183b2:	61fb      	str	r3, [r7, #28]
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80183b8:	69ba      	ldr	r2, [r7, #24]
 80183ba:	429a      	cmp	r2, r3
 80183bc:	dbe0      	blt.n	8018380 <xPhyCheckLinkStatus+0x30>
 80183be:	e06e      	b.n	801849e <xPhyCheckLinkStatus+0x14e>
            }
        }
    }
    else if( xTaskCheckForTimeOut( &( pxPhyObject->xLinkStatusTimer ), &( pxPhyObject->xLinkStatusRemaining ) ) != pdFALSE )
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	f103 021c 	add.w	r2, r3, #28
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	3324      	adds	r3, #36	@ 0x24
 80183ca:	4619      	mov	r1, r3
 80183cc:	4610      	mov	r0, r2
 80183ce:	f7ed f861 	bl	8005494 <xTaskCheckForTimeOut>
 80183d2:	4603      	mov	r3, r0
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	d062      	beq.n	801849e <xPhyCheckLinkStatus+0x14e>
    {
        /* Frequent checking the PHY Link Status can affect for the performance of Ethernet controller.
         * As long as packets are received, no polling is needed.
         * Otherwise, polling will be done when the 'xLinkStatusTimer' expires. */
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80183d8:	2300      	movs	r3, #0
 80183da:	61bb      	str	r3, [r7, #24]
 80183dc:	e045      	b.n	801846a <xPhyCheckLinkStatus+0x11a>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80183de:	687a      	ldr	r2, [r7, #4]
 80183e0:	69bb      	ldr	r3, [r7, #24]
 80183e2:	4413      	add	r3, r2
 80183e4:	3318      	adds	r3, #24
 80183e6:	781b      	ldrb	r3, [r3, #0]
 80183e8:	613b      	str	r3, [r7, #16]

            if( pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulStatus ) == 0 )
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	f107 020c 	add.w	r2, r7, #12
 80183f2:	2101      	movs	r1, #1
 80183f4:	6938      	ldr	r0, [r7, #16]
 80183f6:	4798      	blx	r3
 80183f8:	4603      	mov	r3, r0
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d12f      	bne.n	801845e <xPhyCheckLinkStatus+0x10e>
            {
                if( !!( pxPhyObject->ulLinkStatusMask & ulBitMask ) != !!( ulStatus & phyBMSR_LINK_STATUS ) )
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018402:	69fb      	ldr	r3, [r7, #28]
 8018404:	4013      	ands	r3, r2
 8018406:	2b00      	cmp	r3, #0
 8018408:	bf14      	ite	ne
 801840a:	2301      	movne	r3, #1
 801840c:	2300      	moveq	r3, #0
 801840e:	b2da      	uxtb	r2, r3
 8018410:	68fb      	ldr	r3, [r7, #12]
 8018412:	f003 0304 	and.w	r3, r3, #4
 8018416:	2b00      	cmp	r3, #0
 8018418:	bf14      	ite	ne
 801841a:	2301      	movne	r3, #1
 801841c:	2300      	moveq	r3, #0
 801841e:	b2db      	uxtb	r3, r3
 8018420:	4053      	eors	r3, r2
 8018422:	b2db      	uxtb	r3, r3
 8018424:	2b00      	cmp	r3, #0
 8018426:	d01a      	beq.n	801845e <xPhyCheckLinkStatus+0x10e>
                {
                    if( ( ulStatus & phyBMSR_LINK_STATUS ) != 0 )
 8018428:	68fb      	ldr	r3, [r7, #12]
 801842a:	f003 0304 	and.w	r3, r3, #4
 801842e:	2b00      	cmp	r3, #0
 8018430:	d006      	beq.n	8018440 <xPhyCheckLinkStatus+0xf0>
                    {
                        pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018436:	69fb      	ldr	r3, [r7, #28]
 8018438:	431a      	orrs	r2, r3
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	635a      	str	r2, [r3, #52]	@ 0x34
 801843e:	e006      	b.n	801844e <xPhyCheckLinkStatus+0xfe>
                    }
                    else
                    {
                        pxPhyObject->ulLinkStatusMask &= ~( ulBitMask );
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018444:	69fb      	ldr	r3, [r7, #28]
 8018446:	43db      	mvns	r3, r3
 8018448:	401a      	ands	r2, r3
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	635a      	str	r2, [r3, #52]	@ 0x34
                    }

                    FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018452:	4619      	mov	r1, r3
 8018454:	4814      	ldr	r0, [pc, #80]	@ (80184a8 <xPhyCheckLinkStatus+0x158>)
 8018456:	f00a f9a5 	bl	80227a4 <lUDPLoggingPrintf>
                    xNeedCheck = pdTRUE;
 801845a:	2301      	movs	r3, #1
 801845c:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801845e:	69bb      	ldr	r3, [r7, #24]
 8018460:	3301      	adds	r3, #1
 8018462:	61bb      	str	r3, [r7, #24]
 8018464:	69fb      	ldr	r3, [r7, #28]
 8018466:	005b      	lsls	r3, r3, #1
 8018468:	61fb      	str	r3, [r7, #28]
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801846e:	69ba      	ldr	r2, [r7, #24]
 8018470:	429a      	cmp	r2, r3
 8018472:	dbb4      	blt.n	80183de <xPhyCheckLinkStatus+0x8e>
                }
            }
        }

        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	331c      	adds	r3, #28
 8018478:	4618      	mov	r0, r3
 801847a:	f7ec ffd3 	bl	8005424 <vTaskSetTimeOutState>

        if( ( pxPhyObject->ulLinkStatusMask & ( ulBitMask >> 1 ) ) != 0 )
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018482:	69fb      	ldr	r3, [r7, #28]
 8018484:	085b      	lsrs	r3, r3, #1
 8018486:	4013      	ands	r3, r2
 8018488:	2b00      	cmp	r3, #0
 801848a:	d004      	beq.n	8018496 <xPhyCheckLinkStatus+0x146>
        {
            /* The link status is high, so don't poll the PHY too often. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8018492:	625a      	str	r2, [r3, #36]	@ 0x24
 8018494:	e003      	b.n	801849e <xPhyCheckLinkStatus+0x14e>
        }
        else
        {
            /* The link status is low, polling may be done more frequently. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_LOW_CHECK_TIME_MS );
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801849c:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }

    return xNeedCheck;
 801849e:	697b      	ldr	r3, [r7, #20]
}
 80184a0:	4618      	mov	r0, r3
 80184a2:	3720      	adds	r7, #32
 80184a4:	46bd      	mov	sp, r7
 80184a6:	bd80      	pop	{r7, pc}
 80184a8:	08027c5c 	.word	0x08027c5c

080184ac <prvRevBits32>:
};
/*-----------------------------------------------------------*/

/* Reverse the bits of a 32 bit unsigned integer */
static uint32_t prvRevBits32( uint32_t ulValue )
{
 80184ac:	b480      	push	{r7}
 80184ae:	b085      	sub	sp, #20
 80184b0:	af00      	add	r7, sp, #0
 80184b2:	6078      	str	r0, [r7, #4]
    uint32_t ulRev32;
    int iIndex;

    ulRev32 = 0;
 80184b4:	2300      	movs	r3, #0
 80184b6:	60fb      	str	r3, [r7, #12]

    for( iIndex = 0; iIndex < 32; iIndex++ )
 80184b8:	2300      	movs	r3, #0
 80184ba:	60bb      	str	r3, [r7, #8]
 80184bc:	e013      	b.n	80184e6 <prvRevBits32+0x3a>
    {
        if( ulValue & ( 1 << iIndex ) )
 80184be:	2201      	movs	r2, #1
 80184c0:	68bb      	ldr	r3, [r7, #8]
 80184c2:	fa02 f303 	lsl.w	r3, r2, r3
 80184c6:	461a      	mov	r2, r3
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	4013      	ands	r3, r2
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	d007      	beq.n	80184e0 <prvRevBits32+0x34>
        {
            {
                ulRev32 |= 1 << ( 31 - iIndex );
 80184d0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80184d4:	68bb      	ldr	r3, [r7, #8]
 80184d6:	fa22 f303 	lsr.w	r3, r2, r3
 80184da:	68fa      	ldr	r2, [r7, #12]
 80184dc:	4313      	orrs	r3, r2
 80184de:	60fb      	str	r3, [r7, #12]
    for( iIndex = 0; iIndex < 32; iIndex++ )
 80184e0:	68bb      	ldr	r3, [r7, #8]
 80184e2:	3301      	adds	r3, #1
 80184e4:	60bb      	str	r3, [r7, #8]
 80184e6:	68bb      	ldr	r3, [r7, #8]
 80184e8:	2b1f      	cmp	r3, #31
 80184ea:	dde8      	ble.n	80184be <prvRevBits32+0x12>
            }
        }
    }

    return ulRev32;
 80184ec:	68fb      	ldr	r3, [r7, #12]
}
 80184ee:	4618      	mov	r0, r3
 80184f0:	3714      	adds	r7, #20
 80184f2:	46bd      	mov	sp, r7
 80184f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184f8:	4770      	bx	lr
	...

080184fc <prvComputeCRC32_MAC>:

/* Compute the CRC32 of the given MAC address as per IEEE 802.3 CRC32 */
static uint32_t prvComputeCRC32_MAC( const uint8_t * pucMAC )
{
 80184fc:	b590      	push	{r4, r7, lr}
 80184fe:	b087      	sub	sp, #28
 8018500:	af00      	add	r7, sp, #0
 8018502:	6078      	str	r0, [r7, #4]
    int iiIndex, ijIndex;
    uint32_t ulCRC32 = 0xFFFFFFFF;
 8018504:	f04f 33ff 	mov.w	r3, #4294967295
 8018508:	60fb      	str	r3, [r7, #12]

    for( ijIndex = 0; ijIndex < 6; ijIndex++ )
 801850a:	2300      	movs	r3, #0
 801850c:	613b      	str	r3, [r7, #16]
 801850e:	e024      	b.n	801855a <prvComputeCRC32_MAC+0x5e>
    {
        ulCRC32 = ulCRC32 ^ ( uint32_t ) pucMAC[ ijIndex ];
 8018510:	693b      	ldr	r3, [r7, #16]
 8018512:	687a      	ldr	r2, [r7, #4]
 8018514:	4413      	add	r3, r2
 8018516:	781b      	ldrb	r3, [r3, #0]
 8018518:	461a      	mov	r2, r3
 801851a:	68fb      	ldr	r3, [r7, #12]
 801851c:	4053      	eors	r3, r2
 801851e:	60fb      	str	r3, [r7, #12]

        for( iiIndex = 0; iiIndex < 8; iiIndex++ )
 8018520:	2300      	movs	r3, #0
 8018522:	617b      	str	r3, [r7, #20]
 8018524:	e013      	b.n	801854e <prvComputeCRC32_MAC+0x52>
        {
            if( ulCRC32 & 1 )
 8018526:	68fb      	ldr	r3, [r7, #12]
 8018528:	f003 0301 	and.w	r3, r3, #1
 801852c:	2b00      	cmp	r3, #0
 801852e:	d008      	beq.n	8018542 <prvComputeCRC32_MAC+0x46>
            {
                ulCRC32 = ( ulCRC32 >> 1 ) ^ prvRevBits32( 0x04C11DB7 ); /* IEEE 802.3 CRC32 polynomial - 0x04C11DB7 */
 8018530:	68fb      	ldr	r3, [r7, #12]
 8018532:	085c      	lsrs	r4, r3, #1
 8018534:	480e      	ldr	r0, [pc, #56]	@ (8018570 <prvComputeCRC32_MAC+0x74>)
 8018536:	f7ff ffb9 	bl	80184ac <prvRevBits32>
 801853a:	4603      	mov	r3, r0
 801853c:	4063      	eors	r3, r4
 801853e:	60fb      	str	r3, [r7, #12]
 8018540:	e002      	b.n	8018548 <prvComputeCRC32_MAC+0x4c>
            }
            else
            {
                ulCRC32 = ( ulCRC32 >> 1 );
 8018542:	68fb      	ldr	r3, [r7, #12]
 8018544:	085b      	lsrs	r3, r3, #1
 8018546:	60fb      	str	r3, [r7, #12]
        for( iiIndex = 0; iiIndex < 8; iiIndex++ )
 8018548:	697b      	ldr	r3, [r7, #20]
 801854a:	3301      	adds	r3, #1
 801854c:	617b      	str	r3, [r7, #20]
 801854e:	697b      	ldr	r3, [r7, #20]
 8018550:	2b07      	cmp	r3, #7
 8018552:	dde8      	ble.n	8018526 <prvComputeCRC32_MAC+0x2a>
    for( ijIndex = 0; ijIndex < 6; ijIndex++ )
 8018554:	693b      	ldr	r3, [r7, #16]
 8018556:	3301      	adds	r3, #1
 8018558:	613b      	str	r3, [r7, #16]
 801855a:	693b      	ldr	r3, [r7, #16]
 801855c:	2b05      	cmp	r3, #5
 801855e:	ddd7      	ble.n	8018510 <prvComputeCRC32_MAC+0x14>
            }
        }
    }

    ulCRC32 = ~( ulCRC32 );
 8018560:	68fb      	ldr	r3, [r7, #12]
 8018562:	43db      	mvns	r3, r3
 8018564:	60fb      	str	r3, [r7, #12]
    return ulCRC32;
 8018566:	68fb      	ldr	r3, [r7, #12]
}
 8018568:	4618      	mov	r0, r3
 801856a:	371c      	adds	r7, #28
 801856c:	46bd      	mov	sp, r7
 801856e:	bd90      	pop	{r4, r7, pc}
 8018570:	04c11db7 	.word	0x04c11db7

08018574 <prvComputeEthernet_MACHash>:

/* Compute the hash value of a given MAC address to index the bits in the Hash Table
 * Registers (ETH_MACHT0R and ETH_MACHT1R) */
static uint32_t prvComputeEthernet_MACHash( const uint8_t * pucMAC )
{
 8018574:	b580      	push	{r7, lr}
 8018576:	b084      	sub	sp, #16
 8018578:	af00      	add	r7, sp, #0
 801857a:	6078      	str	r0, [r7, #4]
    uint32_t ulCRC32;
    uint32_t ulHash;

    /*  Calculate the 32-bit CRC for the MAC */
    ulCRC32 = prvComputeCRC32_MAC( pucMAC );
 801857c:	6878      	ldr	r0, [r7, #4]
 801857e:	f7ff ffbd 	bl	80184fc <prvComputeCRC32_MAC>
 8018582:	60f8      	str	r0, [r7, #12]

    /* Perform bitwise reversal on the CRC32 */
    ulHash = prvRevBits32( ulCRC32 );
 8018584:	68f8      	ldr	r0, [r7, #12]
 8018586:	f7ff ff91 	bl	80184ac <prvRevBits32>
 801858a:	60b8      	str	r0, [r7, #8]

    /* Take the upper 6 bits of the above result */
    return( ulHash >> 26 );
 801858c:	68bb      	ldr	r3, [r7, #8]
 801858e:	0e9b      	lsrs	r3, r3, #26
}
 8018590:	4618      	mov	r0, r3
 8018592:	3710      	adds	r7, #16
 8018594:	46bd      	mov	sp, r7
 8018596:	bd80      	pop	{r7, pc}

08018598 <prvSetMAC_HashFilter>:

/* Update the Hash Table Registers
 * (ETH_MACHT0R and ETH_MACHT1R) with hash value of the given MAC address */
static void prvSetMAC_HashFilter( ETH_HandleTypeDef * pxEthHandle,
                                  const uint8_t * pucMAC )
{
 8018598:	b580      	push	{r7, lr}
 801859a:	b084      	sub	sp, #16
 801859c:	af00      	add	r7, sp, #0
 801859e:	6078      	str	r0, [r7, #4]
 80185a0:	6039      	str	r1, [r7, #0]
    uint32_t ulHash;

    /* Compute the hash */
    ulHash = prvComputeEthernet_MACHash( pucMAC );
 80185a2:	6838      	ldr	r0, [r7, #0]
 80185a4:	f7ff ffe6 	bl	8018574 <prvComputeEthernet_MACHash>
 80185a8:	60f8      	str	r0, [r7, #12]

    /* Use the upper (MACHT1R) or lower (MACHT0R) Hash Table Registers
     * to set the required bit based on the ulHash */
    if( ulHash < 32 )
 80185aa:	68fb      	ldr	r3, [r7, #12]
 80185ac:	2b1f      	cmp	r3, #31
 80185ae:	d80c      	bhi.n	80185ca <prvSetMAC_HashFilter+0x32>
    {
        pxEthHandle->Instance->MACHT0R |= ( 1 << ulHash );
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	681b      	ldr	r3, [r3, #0]
 80185b4:	691a      	ldr	r2, [r3, #16]
 80185b6:	2101      	movs	r1, #1
 80185b8:	68fb      	ldr	r3, [r7, #12]
 80185ba:	fa01 f303 	lsl.w	r3, r1, r3
 80185be:	4619      	mov	r1, r3
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	681b      	ldr	r3, [r3, #0]
 80185c4:	430a      	orrs	r2, r1
 80185c6:	611a      	str	r2, [r3, #16]
    }
    else
    {
        pxEthHandle->Instance->MACHT1R |= ( 1 << ( ulHash % 32 ) );
    }
}
 80185c8:	e00d      	b.n	80185e6 <prvSetMAC_HashFilter+0x4e>
        pxEthHandle->Instance->MACHT1R |= ( 1 << ( ulHash % 32 ) );
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	681b      	ldr	r3, [r3, #0]
 80185ce:	695a      	ldr	r2, [r3, #20]
 80185d0:	68fb      	ldr	r3, [r7, #12]
 80185d2:	f003 031f 	and.w	r3, r3, #31
 80185d6:	2101      	movs	r1, #1
 80185d8:	fa01 f303 	lsl.w	r3, r1, r3
 80185dc:	4619      	mov	r1, r3
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	430a      	orrs	r2, r1
 80185e4:	615a      	str	r2, [r3, #20]
}
 80185e6:	bf00      	nop
 80185e8:	3710      	adds	r7, #16
 80185ea:	46bd      	mov	sp, r7
 80185ec:	bd80      	pop	{r7, pc}

080185ee <pucGetRXBuffer>:
/*******************************************************************************
*                      Network Interface API Functions
*******************************************************************************/

static uint8_t * pucGetRXBuffer( size_t uxSize )
{
 80185ee:	b580      	push	{r7, lr}
 80185f0:	b086      	sub	sp, #24
 80185f2:	af00      	add	r7, sp, #0
 80185f4:	6078      	str	r0, [r7, #4]
    TickType_t uxBlockTimeTicks = ipMS_TO_MIN_TICKS( 10U );
 80185f6:	230a      	movs	r3, #10
 80185f8:	613b      	str	r3, [r7, #16]
    NetworkBufferDescriptor_t * pxBufferDescriptor;
    uint8_t * pucReturn = NULL;
 80185fa:	2300      	movs	r3, #0
 80185fc:	617b      	str	r3, [r7, #20]

    pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxSize, uxBlockTimeTicks );
 80185fe:	6939      	ldr	r1, [r7, #16]
 8018600:	6878      	ldr	r0, [r7, #4]
 8018602:	f7ff f9bf 	bl	8017984 <pxGetNetworkBufferWithDescriptor>
 8018606:	60f8      	str	r0, [r7, #12]

    if( pxBufferDescriptor != NULL )
 8018608:	68fb      	ldr	r3, [r7, #12]
 801860a:	2b00      	cmp	r3, #0
 801860c:	d002      	beq.n	8018614 <pucGetRXBuffer+0x26>
    {
        pucReturn = pxBufferDescriptor->pucEthernetBuffer;
 801860e:	68fb      	ldr	r3, [r7, #12]
 8018610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018612:	617b      	str	r3, [r7, #20]
    }

    return pucReturn;
 8018614:	697b      	ldr	r3, [r7, #20]
}
 8018616:	4618      	mov	r0, r3
 8018618:	3718      	adds	r7, #24
 801861a:	46bd      	mov	sp, r7
 801861c:	bd80      	pop	{r7, pc}
	...

08018620 <xSTM32H_NetworkInterfaceInitialise>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_NetworkInterfaceInitialise( NetworkInterface_t * pxInterface )
{
 8018620:	b580      	push	{r7, lr}
 8018622:	b08e      	sub	sp, #56	@ 0x38
 8018624:	af02      	add	r7, sp, #8
 8018626:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFAIL;
 8018628:	2300      	movs	r3, #0
 801862a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NetworkEndPoint_t * pxEndPoint;
    HAL_StatusTypeDef xHalEthInitStatus;
    size_t uxIndex = 0;
 801862c:	2300      	movs	r3, #0
 801862e:	627b      	str	r3, [r7, #36]	@ 0x24

    if( xMacInitStatus == eMACInit )
 8018630:	4b8d      	ldr	r3, [pc, #564]	@ (8018868 <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8018632:	781b      	ldrb	r3, [r3, #0]
 8018634:	2b00      	cmp	r3, #0
 8018636:	f040 8104 	bne.w	8018842 <xSTM32H_NetworkInterfaceInitialise+0x222>
    {
        pxMyInterface = pxInterface;
 801863a:	4a8c      	ldr	r2, [pc, #560]	@ (801886c <xSTM32H_NetworkInterfaceInitialise+0x24c>)
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	6013      	str	r3, [r2, #0]

        pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 8018640:	6878      	ldr	r0, [r7, #4]
 8018642:	f7f5 fa71 	bl	800db28 <FreeRTOS_FirstEndPoint>
 8018646:	62b8      	str	r0, [r7, #40]	@ 0x28
        configASSERT( pxEndPoint != NULL );
 8018648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801864a:	2b00      	cmp	r3, #0
 801864c:	d104      	bne.n	8018658 <xSTM32H_NetworkInterfaceInitialise+0x38>
 801864e:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8018652:	4887      	ldr	r0, [pc, #540]	@ (8018870 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8018654:	f7e9 f9d8 	bl	8001a08 <vAssertCalled>
        /*
         * Initialize ETH Handler
         * It assumes that Ethernet GPIO and clock configuration
         * are already done in the ETH_MspInit()
         */
        xEthHandle.Instance = ETH;
 8018658:	4b86      	ldr	r3, [pc, #536]	@ (8018874 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801865a:	4a87      	ldr	r2, [pc, #540]	@ (8018878 <xSTM32H_NetworkInterfaceInitialise+0x258>)
 801865c:	601a      	str	r2, [r3, #0]
        xEthHandle.Init.MACAddr = ( uint8_t * ) pxEndPoint->xMACAddress.ucBytes;
 801865e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018660:	33e8      	adds	r3, #232	@ 0xe8
 8018662:	4a84      	ldr	r2, [pc, #528]	@ (8018874 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018664:	6053      	str	r3, [r2, #4]
        xEthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8018666:	4b83      	ldr	r3, [pc, #524]	@ (8018874 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018668:	2201      	movs	r2, #1
 801866a:	721a      	strb	r2, [r3, #8]
        xEthHandle.Init.TxDesc = DMATxDscrTab;
 801866c:	4b81      	ldr	r3, [pc, #516]	@ (8018874 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801866e:	4a83      	ldr	r2, [pc, #524]	@ (801887c <xSTM32H_NetworkInterfaceInitialise+0x25c>)
 8018670:	60da      	str	r2, [r3, #12]
        xEthHandle.Init.RxDesc = DMARxDscrTab;
 8018672:	4b80      	ldr	r3, [pc, #512]	@ (8018874 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018674:	4a82      	ldr	r2, [pc, #520]	@ (8018880 <xSTM32H_NetworkInterfaceInitialise+0x260>)
 8018676:	611a      	str	r2, [r3, #16]
        xEthHandle.Init.RxBuffLen = ( ETH_RX_BUF_SIZE - ipBUFFER_PADDING ) & ~( ( uint32_t ) 3U );
 8018678:	4b7e      	ldr	r3, [pc, #504]	@ (8018874 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801867a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 801867e:	615a      	str	r2, [r3, #20]

        /* Make sure that all unused fields are cleared. */
        memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 8018680:	2260      	movs	r2, #96	@ 0x60
 8018682:	2100      	movs	r1, #0
 8018684:	487d      	ldr	r0, [pc, #500]	@ (801887c <xSTM32H_NetworkInterfaceInitialise+0x25c>)
 8018686:	f00a fbb6 	bl	8022df6 <memset>
        memset( &( DMARxDscrTab ), '\0', sizeof( DMARxDscrTab ) );
 801868a:	2260      	movs	r2, #96	@ 0x60
 801868c:	2100      	movs	r1, #0
 801868e:	487c      	ldr	r0, [pc, #496]	@ (8018880 <xSTM32H_NetworkInterfaceInitialise+0x260>)
 8018690:	f00a fbb1 	bl	8022df6 <memset>

        xHalEthInitStatus = HAL_ETH_Init( &( xEthHandle ) );
 8018694:	4877      	ldr	r0, [pc, #476]	@ (8018874 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018696:	f000 fc71 	bl	8018f7c <HAL_ETH_Init>
 801869a:	4603      	mov	r3, r0
 801869c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

        if( xHalEthInitStatus == HAL_OK )
 80186a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80186a4:	2b00      	cmp	r3, #0
 80186a6:	f040 80c9 	bne.w	801883c <xSTM32H_NetworkInterfaceInitialise+0x21c>
        {
            /* Update MAC filter settings */
            xEthHandle.Instance->MACPFR |= ENABLE_HASH_FILTER_SETTINGS;
 80186aa:	4b72      	ldr	r3, [pc, #456]	@ (8018874 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	6899      	ldr	r1, [r3, #8]
 80186b0:	4b70      	ldr	r3, [pc, #448]	@ (8018874 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80186b2:	681a      	ldr	r2, [r3, #0]
 80186b4:	f240 4316 	movw	r3, #1046	@ 0x416
 80186b8:	430b      	orrs	r3, r1
 80186ba:	6093      	str	r3, [r2, #8]

            /* Configuration for HAL_ETH_Transmit(_IT). */
            memset( &( xTxConfig ), 0, sizeof( ETH_TxPacketConfig ) );
 80186bc:	2234      	movs	r2, #52	@ 0x34
 80186be:	2100      	movs	r1, #0
 80186c0:	4870      	ldr	r0, [pc, #448]	@ (8018884 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 80186c2:	f00a fb98 	bl	8022df6 <memset>
            xTxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CRCPAD;
 80186c6:	4b6f      	ldr	r3, [pc, #444]	@ (8018884 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 80186c8:	2220      	movs	r2, #32
 80186ca:	601a      	str	r2, [r3, #0]

            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM != 0 )
            {
                /*xTxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC; */
                xTxConfig.Attributes |= ETH_TX_PACKETS_FEATURES_CSUM;
 80186cc:	4b6d      	ldr	r3, [pc, #436]	@ (8018884 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 80186ce:	681b      	ldr	r3, [r3, #0]
 80186d0:	f043 0301 	orr.w	r3, r3, #1
 80186d4:	4a6b      	ldr	r2, [pc, #428]	@ (8018884 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 80186d6:	6013      	str	r3, [r2, #0]
                xTxConfig.ChecksumCtrl = ETH_DMATXNDESCRF_CIC_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80186d8:	4b6a      	ldr	r3, [pc, #424]	@ (8018884 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 80186da:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80186de:	615a      	str	r2, [r3, #20]
            #else
            {
                xTxConfig.ChecksumCtrl = ETH_CHECKSUM_DISABLE;
            }
            #endif
            xTxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80186e0:	4b68      	ldr	r3, [pc, #416]	@ (8018884 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 80186e2:	2200      	movs	r2, #0
 80186e4:	611a      	str	r2, [r3, #16]

            /* This counting semaphore will count the number of free TX DMA descriptors. */
            xTXDescriptorSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ETH_TX_DESC_CNT, ( UBaseType_t ) ETH_TX_DESC_CNT );
 80186e6:	2104      	movs	r1, #4
 80186e8:	2004      	movs	r0, #4
 80186ea:	f7eb fa47 	bl	8003b7c <xQueueCreateCountingSemaphore>
 80186ee:	4603      	mov	r3, r0
 80186f0:	4a65      	ldr	r2, [pc, #404]	@ (8018888 <xSTM32H_NetworkInterfaceInitialise+0x268>)
 80186f2:	6013      	str	r3, [r2, #0]
            configASSERT( xTXDescriptorSemaphore );
 80186f4:	4b64      	ldr	r3, [pc, #400]	@ (8018888 <xSTM32H_NetworkInterfaceInitialise+0x268>)
 80186f6:	681b      	ldr	r3, [r3, #0]
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	d104      	bne.n	8018706 <xSTM32H_NetworkInterfaceInitialise+0xe6>
 80186fc:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8018700:	485b      	ldr	r0, [pc, #364]	@ (8018870 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8018702:	f7e9 f981 	bl	8001a08 <vAssertCalled>

            xTransmissionMutex = xSemaphoreCreateMutex();
 8018706:	2001      	movs	r0, #1
 8018708:	f7eb fa1f 	bl	8003b4a <xQueueCreateMutex>
 801870c:	4603      	mov	r3, r0
 801870e:	4a5f      	ldr	r2, [pc, #380]	@ (801888c <xSTM32H_NetworkInterfaceInitialise+0x26c>)
 8018710:	6013      	str	r3, [r2, #0]
            configASSERT( xTransmissionMutex );
 8018712:	4b5e      	ldr	r3, [pc, #376]	@ (801888c <xSTM32H_NetworkInterfaceInitialise+0x26c>)
 8018714:	681b      	ldr	r3, [r3, #0]
 8018716:	2b00      	cmp	r3, #0
 8018718:	d104      	bne.n	8018724 <xSTM32H_NetworkInterfaceInitialise+0x104>
 801871a:	f240 117f 	movw	r1, #383	@ 0x17f
 801871e:	4854      	ldr	r0, [pc, #336]	@ (8018870 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8018720:	f7e9 f972 	bl	8001a08 <vAssertCalled>

            /* Assign Rx memory buffers to a DMA Rx descriptor */
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 8018724:	2300      	movs	r3, #0
 8018726:	627b      	str	r3, [r7, #36]	@ 0x24
 8018728:	e015      	b.n	8018756 <xSTM32H_NetworkInterfaceInitialise+0x136>
            {
                uint8_t * pucBuffer;

                #if ( ipconfigZERO_COPY_RX_DRIVER != 0 )
                {
                    pucBuffer = pucGetRXBuffer( ETH_RX_BUF_SIZE );
 801872a:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 801872e:	f7ff ff5e 	bl	80185ee <pucGetRXBuffer>
 8018732:	61f8      	str	r0, [r7, #28]
                    configASSERT( pucBuffer != NULL );
 8018734:	69fb      	ldr	r3, [r7, #28]
 8018736:	2b00      	cmp	r3, #0
 8018738:	d104      	bne.n	8018744 <xSTM32H_NetworkInterfaceInitialise+0x124>
 801873a:	f240 1189 	movw	r1, #393	@ 0x189
 801873e:	484c      	ldr	r0, [pc, #304]	@ (8018870 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8018740:	f7e9 f962 	bl	8001a08 <vAssertCalled>
                {
                    pucBuffer = Rx_Buff[ uxIndex ];
                }
                #endif

                HAL_ETH_DescAssignMemory( &( xEthHandle ), uxIndex, pucBuffer, NULL );
 8018744:	2300      	movs	r3, #0
 8018746:	69fa      	ldr	r2, [r7, #28]
 8018748:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801874a:	484a      	ldr	r0, [pc, #296]	@ (8018874 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801874c:	f000 fd02 	bl	8019154 <HAL_ETH_DescAssignMemory>
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 8018750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018752:	3301      	adds	r3, #1
 8018754:	627b      	str	r3, [r7, #36]	@ 0x24
 8018756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018758:	2b03      	cmp	r3, #3
 801875a:	d9e6      	bls.n	801872a <xSTM32H_NetworkInterfaceInitialise+0x10a>
            }
            #endif
            #if ( ipconfigUSE_LLMNR == 1 )
            {
                /* Program the LLMNR address. */
                prvSetMAC_HashFilter( &xEthHandle, ( uint8_t * ) xLLMNR_MacAddress.ucBytes );
 801875c:	494c      	ldr	r1, [pc, #304]	@ (8018890 <xSTM32H_NetworkInterfaceInitialise+0x270>)
 801875e:	4845      	ldr	r0, [pc, #276]	@ (8018874 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018760:	f7ff ff1a 	bl	8018598 <prvSetMAC_HashFilter>
            }
            #endif
            #if ( ( ipconfigUSE_LLMNR == 1 ) && ( ipconfigUSE_IPv6 != 0 ) )
            {
                prvSetMAC_HashFilter( &xEthHandle, ( uint8_t * ) xLLMNR_MacAddressIPv6.ucBytes );
 8018764:	494b      	ldr	r1, [pc, #300]	@ (8018894 <xSTM32H_NetworkInterfaceInitialise+0x274>)
 8018766:	4843      	ldr	r0, [pc, #268]	@ (8018874 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018768:	f7ff ff16 	bl	8018598 <prvSetMAC_HashFilter>
            }
            #endif

            {
                /* The EMAC address of the first end-point has been registered in HAL_ETH_Init(). */
                for( ;
 801876c:	e03a      	b.n	80187e4 <xSTM32H_NetworkInterfaceInitialise+0x1c4>
                     pxEndPoint != NULL;
                     pxEndPoint = FreeRTOS_NextEndPoint( pxMyInterface, pxEndPoint ) )
                {
                    switch( pxEndPoint->bits.bIPv6 )
 801876e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018770:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8018774:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018778:	b2db      	uxtb	r3, r3
 801877a:	2b00      	cmp	r3, #0
 801877c:	d002      	beq.n	8018784 <xSTM32H_NetworkInterfaceInitialise+0x164>
 801877e:	2b01      	cmp	r3, #1
 8018780:	d00d      	beq.n	801879e <xSTM32H_NetworkInterfaceInitialise+0x17e>
                               break;
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        default:
                            /* MISRA 16.4 Compliance */
                            break;
 8018782:	e028      	b.n	80187d6 <xSTM32H_NetworkInterfaceInitialise+0x1b6>
                                if( xEthHandle.Init.MACAddr != ( uint8_t * ) pxEndPoint->xMACAddress.ucBytes )
 8018784:	4b3b      	ldr	r3, [pc, #236]	@ (8018874 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018786:	685a      	ldr	r2, [r3, #4]
 8018788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801878a:	33e8      	adds	r3, #232	@ 0xe8
 801878c:	429a      	cmp	r2, r3
 801878e:	d021      	beq.n	80187d4 <xSTM32H_NetworkInterfaceInitialise+0x1b4>
                                    prvSetMAC_HashFilter( &xEthHandle, pxEndPoint->xMACAddress.ucBytes );
 8018790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018792:	33e8      	adds	r3, #232	@ 0xe8
 8018794:	4619      	mov	r1, r3
 8018796:	4837      	ldr	r0, [pc, #220]	@ (8018874 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018798:	f7ff fefe 	bl	8018598 <prvSetMAC_HashFilter>
                                break;
 801879c:	e01a      	b.n	80187d4 <xSTM32H_NetworkInterfaceInitialise+0x1b4>
                                   uint8_t ucMACAddress[ 6 ] = { 0x33, 0x33, 0xff, 0, 0, 0 };
 801879e:	4a3e      	ldr	r2, [pc, #248]	@ (8018898 <xSTM32H_NetworkInterfaceInitialise+0x278>)
 80187a0:	f107 0314 	add.w	r3, r7, #20
 80187a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80187a8:	6018      	str	r0, [r3, #0]
 80187aa:	3304      	adds	r3, #4
 80187ac:	8019      	strh	r1, [r3, #0]
                                   ucMACAddress[ 3 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 13 ];
 80187ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80187b4:	75fb      	strb	r3, [r7, #23]
                                   ucMACAddress[ 4 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 14 ];
 80187b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187b8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80187bc:	763b      	strb	r3, [r7, #24]
                                   ucMACAddress[ 5 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 15 ];
 80187be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187c0:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80187c4:	767b      	strb	r3, [r7, #25]
                                   prvSetMAC_HashFilter( &xEthHandle, ucMACAddress );
 80187c6:	f107 0314 	add.w	r3, r7, #20
 80187ca:	4619      	mov	r1, r3
 80187cc:	4829      	ldr	r0, [pc, #164]	@ (8018874 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80187ce:	f7ff fee3 	bl	8018598 <prvSetMAC_HashFilter>
                               break;
 80187d2:	e000      	b.n	80187d6 <xSTM32H_NetworkInterfaceInitialise+0x1b6>
                                break;
 80187d4:	bf00      	nop
                     pxEndPoint = FreeRTOS_NextEndPoint( pxMyInterface, pxEndPoint ) )
 80187d6:	4b25      	ldr	r3, [pc, #148]	@ (801886c <xSTM32H_NetworkInterfaceInitialise+0x24c>)
 80187d8:	681b      	ldr	r3, [r3, #0]
 80187da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80187dc:	4618      	mov	r0, r3
 80187de:	f7f5 f9c5 	bl	800db6c <FreeRTOS_NextEndPoint>
 80187e2:	62b8      	str	r0, [r7, #40]	@ 0x28
                     pxEndPoint != NULL;
 80187e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d1c1      	bne.n	801876e <xSTM32H_NetworkInterfaceInitialise+0x14e>
            }

            #if ( ipconfigUSE_IPv6 != 0 )
            {
                /* Allow traffic destined to IPv6 all nodes multicast MAC 33:33:00:00:00:01 */
                const uint8_t ucMACAddress[ 6 ] = { 0x33, 0x33, 0, 0, 0, 0x01 };
 80187ea:	4a2c      	ldr	r2, [pc, #176]	@ (801889c <xSTM32H_NetworkInterfaceInitialise+0x27c>)
 80187ec:	f107 030c 	add.w	r3, r7, #12
 80187f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80187f4:	6018      	str	r0, [r3, #0]
 80187f6:	3304      	adds	r3, #4
 80187f8:	8019      	strh	r1, [r3, #0]
                prvSetMAC_HashFilter( &xEthHandle, ucMACAddress );
 80187fa:	f107 030c 	add.w	r3, r7, #12
 80187fe:	4619      	mov	r1, r3
 8018800:	481c      	ldr	r0, [pc, #112]	@ (8018874 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018802:	f7ff fec9 	bl	8018598 <prvSetMAC_HashFilter>
            }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            /* Initialize the MACB and set all PHY properties */
            prvMACBProbePhy();
 8018806:	f000 f911 	bl	8018a2c <prvMACBProbePhy>

            /* Force a negotiation with the Switch or Router and wait for LS. */
            prvEthernetUpdateConfig( pdTRUE );
 801880a:	2001      	movs	r0, #1
 801880c:	f000 f926 	bl	8018a5c <prvEthernetUpdateConfig>

            /* The deferred interrupt handler task is created at the highest
             *  possible priority to ensure the interrupt handler can return directly
             *  to it.  The task's handle is stored in xEMACTaskHandle so interrupts can
             *  notify the task when there is something to process. */
            if( xTaskCreate( prvEMACHandlerTask, niEMAC_HANDLER_TASK_NAME, niEMAC_HANDLER_TASK_STACK_SIZE, NULL, niEMAC_HANDLER_TASK_PRIORITY, &( xEMACTaskHandle ) ) == pdPASS )
 8018810:	4b23      	ldr	r3, [pc, #140]	@ (80188a0 <xSTM32H_NetworkInterfaceInitialise+0x280>)
 8018812:	9301      	str	r3, [sp, #4]
 8018814:	2305      	movs	r3, #5
 8018816:	9300      	str	r3, [sp, #0]
 8018818:	2300      	movs	r3, #0
 801881a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801881e:	4921      	ldr	r1, [pc, #132]	@ (80188a4 <xSTM32H_NetworkInterfaceInitialise+0x284>)
 8018820:	4821      	ldr	r0, [pc, #132]	@ (80188a8 <xSTM32H_NetworkInterfaceInitialise+0x288>)
 8018822:	f7eb fead 	bl	8004580 <xTaskCreate>
 8018826:	4603      	mov	r3, r0
 8018828:	2b01      	cmp	r3, #1
 801882a:	d103      	bne.n	8018834 <xSTM32H_NetworkInterfaceInitialise+0x214>
            {
                /* The task was created successfully. */
                xMacInitStatus = eMACPass;
 801882c:	4b0e      	ldr	r3, [pc, #56]	@ (8018868 <xSTM32H_NetworkInterfaceInitialise+0x248>)
 801882e:	2201      	movs	r2, #1
 8018830:	701a      	strb	r2, [r3, #0]
 8018832:	e006      	b.n	8018842 <xSTM32H_NetworkInterfaceInitialise+0x222>
            }
            else
            {
                xMacInitStatus = eMACFailed;
 8018834:	4b0c      	ldr	r3, [pc, #48]	@ (8018868 <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8018836:	2202      	movs	r2, #2
 8018838:	701a      	strb	r2, [r3, #0]
 801883a:	e002      	b.n	8018842 <xSTM32H_NetworkInterfaceInitialise+0x222>
            }
        }
        else
        {
            /* HAL_ETH_Init() returned an error, the driver gets into a fatal error sate. */
            xMacInitStatus = eMACFailed;
 801883c:	4b0a      	ldr	r3, [pc, #40]	@ (8018868 <xSTM32H_NetworkInterfaceInitialise+0x248>)
 801883e:	2202      	movs	r2, #2
 8018840:	701a      	strb	r2, [r3, #0]
        }
    } /* ( xMacInitStatus == eMACInit ) */

    if( xMacInitStatus == eMACPass )
 8018842:	4b09      	ldr	r3, [pc, #36]	@ (8018868 <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8018844:	781b      	ldrb	r3, [r3, #0]
 8018846:	2b01      	cmp	r3, #1
 8018848:	d108      	bne.n	801885c <xSTM32H_NetworkInterfaceInitialise+0x23c>
    {
        if( xPhyObject.ulLinkStatusMask != 0U )
 801884a:	4b18      	ldr	r3, [pc, #96]	@ (80188ac <xSTM32H_NetworkInterfaceInitialise+0x28c>)
 801884c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801884e:	2b00      	cmp	r3, #0
 8018850:	d004      	beq.n	801885c <xSTM32H_NetworkInterfaceInitialise+0x23c>
        {
            xResult = pdPASS;
 8018852:	2301      	movs	r3, #1
 8018854:	62fb      	str	r3, [r7, #44]	@ 0x2c
            FreeRTOS_printf( ( "Link Status is high\n" ) );
 8018856:	4816      	ldr	r0, [pc, #88]	@ (80188b0 <xSTM32H_NetworkInterfaceInitialise+0x290>)
 8018858:	f009 ffa4 	bl	80227a4 <lUDPLoggingPrintf>
            /* For now pdFAIL will be returned. But prvEMACHandlerTask() is running
             * and it will keep on checking the PHY and set 'ulLinkStatusMask' when necessary. */
        }
    }

    return xResult;
 801885c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 801885e:	4618      	mov	r0, r3
 8018860:	3730      	adds	r7, #48	@ 0x30
 8018862:	46bd      	mov	sp, r7
 8018864:	bd80      	pop	{r7, pc}
 8018866:	bf00      	nop
 8018868:	20002470 	.word	0x20002470
 801886c:	20002524 	.word	0x20002524
 8018870:	08027c84 	.word	0x08027c84
 8018874:	2000247c 	.word	0x2000247c
 8018878:	40028000 	.word	0x40028000
 801887c:	24040060 	.word	0x24040060
 8018880:	24040000 	.word	0x24040000
 8018884:	200024f0 	.word	0x200024f0
 8018888:	20002474 	.word	0x20002474
 801888c:	20002478 	.word	0x20002478
 8018890:	08027f1c 	.word	0x08027f1c
 8018894:	08027f24 	.word	0x08027f24
 8018898:	08027cfc 	.word	0x08027cfc
 801889c:	08027d04 	.word	0x08027d04
 80188a0:	20002528 	.word	0x20002528
 80188a4:	08027cd8 	.word	0x08027cd8
 80188a8:	08018e11 	.word	0x08018e11
 80188ac:	2000252c 	.word	0x2000252c
 80188b0:	08027ce4 	.word	0x08027ce4

080188b4 <xSTM32H_GetPhyLinkStatus>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_GetPhyLinkStatus( NetworkInterface_t * pxInterface )
{
 80188b4:	b480      	push	{r7}
 80188b6:	b085      	sub	sp, #20
 80188b8:	af00      	add	r7, sp, #0
 80188ba:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( xPhyObject.ulLinkStatusMask != 0U )
 80188bc:	4b07      	ldr	r3, [pc, #28]	@ (80188dc <xSTM32H_GetPhyLinkStatus+0x28>)
 80188be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d002      	beq.n	80188ca <xSTM32H_GetPhyLinkStatus+0x16>
    {
        xReturn = pdPASS;
 80188c4:	2301      	movs	r3, #1
 80188c6:	60fb      	str	r3, [r7, #12]
 80188c8:	e001      	b.n	80188ce <xSTM32H_GetPhyLinkStatus+0x1a>
    }
    else
    {
        xReturn = pdFAIL;
 80188ca:	2300      	movs	r3, #0
 80188cc:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 80188ce:	68fb      	ldr	r3, [r7, #12]
}
 80188d0:	4618      	mov	r0, r3
 80188d2:	3714      	adds	r7, #20
 80188d4:	46bd      	mov	sp, r7
 80188d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188da:	4770      	bx	lr
 80188dc:	2000252c 	.word	0x2000252c

080188e0 <pxSTM32H_FillInterfaceDescriptor>:
#endif
/*-----------------------------------------------------------*/

NetworkInterface_t * pxSTM32H_FillInterfaceDescriptor( BaseType_t xEMACIndex,
                                                       NetworkInterface_t * pxInterface )
{
 80188e0:	b580      	push	{r7, lr}
 80188e2:	b082      	sub	sp, #8
 80188e4:	af00      	add	r7, sp, #0
 80188e6:	6078      	str	r0, [r7, #4]
 80188e8:	6039      	str	r1, [r7, #0]

/* This function pxSTM32Hxx_FillInterfaceDescriptor() adds a network-interface.
 * Make sure that the object pointed to by 'pxInterface'
 * is declared static or global, and that it will remain to exist. */

    snprintf( pcName, sizeof( pcName ), "eth%u", ( unsigned ) xEMACIndex );
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	4a10      	ldr	r2, [pc, #64]	@ (8018930 <pxSTM32H_FillInterfaceDescriptor+0x50>)
 80188ee:	2111      	movs	r1, #17
 80188f0:	4810      	ldr	r0, [pc, #64]	@ (8018934 <pxSTM32H_FillInterfaceDescriptor+0x54>)
 80188f2:	f00a ff83 	bl	80237fc <snprintf>

    memset( pxInterface, '\0', sizeof( *pxInterface ) );
 80188f6:	2228      	movs	r2, #40	@ 0x28
 80188f8:	2100      	movs	r1, #0
 80188fa:	6838      	ldr	r0, [r7, #0]
 80188fc:	f00a fa7b 	bl	8022df6 <memset>
    pxInterface->pcName = pcName;                    /* Just for logging, debugging. */
 8018900:	683b      	ldr	r3, [r7, #0]
 8018902:	4a0c      	ldr	r2, [pc, #48]	@ (8018934 <pxSTM32H_FillInterfaceDescriptor+0x54>)
 8018904:	601a      	str	r2, [r3, #0]
    pxInterface->pvArgument = ( void * ) xEMACIndex; /* Has only meaning for the driver functions. */
 8018906:	687a      	ldr	r2, [r7, #4]
 8018908:	683b      	ldr	r3, [r7, #0]
 801890a:	605a      	str	r2, [r3, #4]
    pxInterface->pfInitialise = xSTM32H_NetworkInterfaceInitialise;
 801890c:	683b      	ldr	r3, [r7, #0]
 801890e:	4a0a      	ldr	r2, [pc, #40]	@ (8018938 <pxSTM32H_FillInterfaceDescriptor+0x58>)
 8018910:	609a      	str	r2, [r3, #8]
    pxInterface->pfOutput = xSTM32H_NetworkInterfaceOutput;
 8018912:	683b      	ldr	r3, [r7, #0]
 8018914:	4a09      	ldr	r2, [pc, #36]	@ (801893c <pxSTM32H_FillInterfaceDescriptor+0x5c>)
 8018916:	60da      	str	r2, [r3, #12]
    pxInterface->pfGetPhyLinkStatus = xSTM32H_GetPhyLinkStatus;
 8018918:	683b      	ldr	r3, [r7, #0]
 801891a:	4a09      	ldr	r2, [pc, #36]	@ (8018940 <pxSTM32H_FillInterfaceDescriptor+0x60>)
 801891c:	611a      	str	r2, [r3, #16]

    FreeRTOS_AddNetworkInterface( pxInterface );
 801891e:	6838      	ldr	r0, [r7, #0]
 8018920:	f7f5 f82e 	bl	800d980 <FreeRTOS_AddNetworkInterface>

    return pxInterface;
 8018924:	683b      	ldr	r3, [r7, #0]
}
 8018926:	4618      	mov	r0, r3
 8018928:	3708      	adds	r7, #8
 801892a:	46bd      	mov	sp, r7
 801892c:	bd80      	pop	{r7, pc}
 801892e:	bf00      	nop
 8018930:	08027d0c 	.word	0x08027d0c
 8018934:	2000256c 	.word	0x2000256c
 8018938:	08018621 	.word	0x08018621
 801893c:	08018945 	.word	0x08018945
 8018940:	080188b5 	.word	0x080188b5

08018944 <xSTM32H_NetworkInterfaceOutput>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_NetworkInterfaceOutput( NetworkInterface_t * pxInterface,
                                                  NetworkBufferDescriptor_t * const pxBuffer,
                                                  BaseType_t xReleaseAfterSend )
{
 8018944:	b580      	push	{r7, lr}
 8018946:	b08a      	sub	sp, #40	@ 0x28
 8018948:	af00      	add	r7, sp, #0
 801894a:	60f8      	str	r0, [r7, #12]
 801894c:	60b9      	str	r1, [r7, #8]
 801894e:	607a      	str	r2, [r7, #4]
    BaseType_t xResult = pdFAIL;
 8018950:	2300      	movs	r3, #0
 8018952:	627b      	str	r3, [r7, #36]	@ 0x24
    TickType_t xBlockTimeTicks = pdMS_TO_TICKS( 100U );
 8018954:	2364      	movs	r3, #100	@ 0x64
 8018956:	623b      	str	r3, [r7, #32]
    uint8_t * pucTXBuffer;

    if( xSTM32H_GetPhyLinkStatus( pxInterface ) == pdPASS )
 8018958:	68f8      	ldr	r0, [r7, #12]
 801895a:	f7ff ffab 	bl	80188b4 <xSTM32H_GetPhyLinkStatus>
 801895e:	4603      	mov	r3, r0
 8018960:	2b01      	cmp	r3, #1
 8018962:	d14c      	bne.n	80189fe <xSTM32H_NetworkInterfaceOutput+0xba>
    {
        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            /* Zero-copy method, pass the buffer. */
            pucTXBuffer = pxBuffer->pucEthernetBuffer;
 8018964:	68bb      	ldr	r3, [r7, #8]
 8018966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018968:	61fb      	str	r3, [r7, #28]

            /* As the buffer is passed to the driver, it must exist.
             * The library takes care of this. */
            configASSERT( xReleaseAfterSend != pdFALSE );
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	2b00      	cmp	r3, #0
 801896e:	d104      	bne.n	801897a <xSTM32H_NetworkInterfaceOutput+0x36>
 8018970:	f44f 7114 	mov.w	r1, #592	@ 0x250
 8018974:	4827      	ldr	r0, [pc, #156]	@ (8018a14 <xSTM32H_NetworkInterfaceOutput+0xd0>)
 8018976:	f7e9 f847 	bl	8001a08 <vAssertCalled>
            pucTXBuffer = Tx_Buff[ xEthHandle.TxDescList.CurTxDesc ];
            /* The copy method, left here for educational purposes. */
            configASSERT( pxBuffer->xDataLength <= sizeof( Tx_Buff[ 0 ] ) );
        #endif

        ETH_BufferTypeDef xTransmitBuffer =
 801897a:	69fb      	ldr	r3, [r7, #28]
 801897c:	613b      	str	r3, [r7, #16]
        {
            .buffer = pucTXBuffer,
            .len    = pxBuffer->xDataLength,
 801897e:	68bb      	ldr	r3, [r7, #8]
 8018980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        ETH_BufferTypeDef xTransmitBuffer =
 8018982:	617b      	str	r3, [r7, #20]
 8018984:	2300      	movs	r3, #0
 8018986:	61bb      	str	r3, [r7, #24]
            .next   = NULL /* FreeRTOS+TCP does not use linked buffers. */
        };
        /* This is the total length, which is equal to the buffer. */
        xTxConfig.Length = pxBuffer->xDataLength;
 8018988:	68bb      	ldr	r3, [r7, #8]
 801898a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801898c:	4a22      	ldr	r2, [pc, #136]	@ (8018a18 <xSTM32H_NetworkInterfaceOutput+0xd4>)
 801898e:	6053      	str	r3, [r2, #4]
        xTxConfig.TxBuffer = &( xTransmitBuffer );
 8018990:	4a21      	ldr	r2, [pc, #132]	@ (8018a18 <xSTM32H_NetworkInterfaceOutput+0xd4>)
 8018992:	f107 0310 	add.w	r3, r7, #16
 8018996:	6093      	str	r3, [r2, #8]

        /* This counting semaphore counts the number of free TX DMA descriptors. */
        if( xSemaphoreTake( xTXDescriptorSemaphore, xBlockTimeTicks ) != pdPASS )
 8018998:	4b20      	ldr	r3, [pc, #128]	@ (8018a1c <xSTM32H_NetworkInterfaceOutput+0xd8>)
 801899a:	681b      	ldr	r3, [r3, #0]
 801899c:	6a39      	ldr	r1, [r7, #32]
 801899e:	4618      	mov	r0, r3
 80189a0:	f7eb face 	bl	8003f40 <xQueueSemaphoreTake>
 80189a4:	4603      	mov	r3, r0
 80189a6:	2b01      	cmp	r3, #1
 80189a8:	d003      	beq.n	80189b2 <xSTM32H_NetworkInterfaceOutput+0x6e>
        {
            /* If the logging routine is using the network, the following message
             * may cause a new error message. */
            FreeRTOS_printf( ( "emacps_send_message: Time-out waiting for TX buffer\n" ) );
 80189aa:	481d      	ldr	r0, [pc, #116]	@ (8018a20 <xSTM32H_NetworkInterfaceOutput+0xdc>)
 80189ac:	f009 fefa 	bl	80227a4 <lUDPLoggingPrintf>
 80189b0:	e025      	b.n	80189fe <xSTM32H_NetworkInterfaceOutput+0xba>
  __ASM volatile ("dsb 0xF":::"memory");
 80189b2:	f3bf 8f4f 	dsb	sy
}
 80189b6:	bf00      	nop
            /* Memory barrier: Make sure that the data written to the packet buffer got written. */
            __DSB();

            /* Get exclusive access to the TX process.
             * Both the IP-task and the EMAC task will work on the TX process. */
            if( xSemaphoreTake( xTransmissionMutex, xBlockTimeTicks ) != pdFAIL )
 80189b8:	4b1a      	ldr	r3, [pc, #104]	@ (8018a24 <xSTM32H_NetworkInterfaceOutput+0xe0>)
 80189ba:	681b      	ldr	r3, [r3, #0]
 80189bc:	6a39      	ldr	r1, [r7, #32]
 80189be:	4618      	mov	r0, r3
 80189c0:	f7eb fabe 	bl	8003f40 <xQueueSemaphoreTake>
 80189c4:	4603      	mov	r3, r0
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	d019      	beq.n	80189fe <xSTM32H_NetworkInterfaceOutput+0xba>
            {
                #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    /* Do not release the buffer. */
                    xReleaseAfterSend = pdFALSE;
 80189ca:	2300      	movs	r3, #0
 80189cc:	607b      	str	r3, [r7, #4]
                     * to the physical memory. */
                    __DSB();
                }
                #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */

                if( HAL_ETH_Transmit_IT( &( xEthHandle ), &( xTxConfig ) ) == HAL_OK )
 80189ce:	4912      	ldr	r1, [pc, #72]	@ (8018a18 <xSTM32H_NetworkInterfaceOutput+0xd4>)
 80189d0:	4815      	ldr	r0, [pc, #84]	@ (8018a28 <xSTM32H_NetworkInterfaceOutput+0xe4>)
 80189d2:	f000 fcef 	bl	80193b4 <HAL_ETH_Transmit_IT>
 80189d6:	4603      	mov	r3, r0
 80189d8:	2b00      	cmp	r3, #0
 80189da:	d102      	bne.n	80189e2 <xSTM32H_NetworkInterfaceOutput+0x9e>
                {
                    xResult = pdPASS;
 80189dc:	2301      	movs	r3, #1
 80189de:	627b      	str	r3, [r7, #36]	@ 0x24
 80189e0:	e006      	b.n	80189f0 <xSTM32H_NetworkInterfaceOutput+0xac>
                }
                else
                {
                    /* As the transmission packet was not queued,
                     * the counting semaphore should be given. */
                    xSemaphoreGive( xTXDescriptorSemaphore );
 80189e2:	4b0e      	ldr	r3, [pc, #56]	@ (8018a1c <xSTM32H_NetworkInterfaceOutput+0xd8>)
 80189e4:	6818      	ldr	r0, [r3, #0]
 80189e6:	2300      	movs	r3, #0
 80189e8:	2200      	movs	r2, #0
 80189ea:	2100      	movs	r1, #0
 80189ec:	f7eb f8f0 	bl	8003bd0 <xQueueGenericSend>
                }

                /* And release the mutex. */
                xSemaphoreGive( xTransmissionMutex );
 80189f0:	4b0c      	ldr	r3, [pc, #48]	@ (8018a24 <xSTM32H_NetworkInterfaceOutput+0xe0>)
 80189f2:	6818      	ldr	r0, [r3, #0]
 80189f4:	2300      	movs	r3, #0
 80189f6:	2200      	movs	r2, #0
 80189f8:	2100      	movs	r1, #0
 80189fa:	f7eb f8e9 	bl	8003bd0 <xQueueGenericSend>
            /* Call the standard trace macro to log the send event. */
            iptraceNETWORK_INTERFACE_TRANSMIT();
        }
    }

    if( xReleaseAfterSend != pdFALSE )
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d002      	beq.n	8018a0a <xSTM32H_NetworkInterfaceOutput+0xc6>
    {
        vReleaseNetworkBufferAndDescriptor( pxBuffer );
 8018a04:	68b8      	ldr	r0, [r7, #8]
 8018a06:	f7ff f825 	bl	8017a54 <vReleaseNetworkBufferAndDescriptor>
    }

    return xResult;
 8018a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8018a0c:	4618      	mov	r0, r3
 8018a0e:	3728      	adds	r7, #40	@ 0x28
 8018a10:	46bd      	mov	sp, r7
 8018a12:	bd80      	pop	{r7, pc}
 8018a14:	08027c84 	.word	0x08027c84
 8018a18:	200024f0 	.word	0x200024f0
 8018a1c:	20002474 	.word	0x20002474
 8018a20:	08027d14 	.word	0x08027d14
 8018a24:	20002478 	.word	0x20002478
 8018a28:	2000247c 	.word	0x2000247c

08018a2c <prvMACBProbePhy>:
/*******************************************************************************
*                      Network Interface Static Functions
*******************************************************************************/

static void prvMACBProbePhy( void )
{
 8018a2c:	b580      	push	{r7, lr}
 8018a2e:	af00      	add	r7, sp, #0
    /* Bind the write and read access functions. */
    vPhyInitialise( &( xPhyObject ),
 8018a30:	4a06      	ldr	r2, [pc, #24]	@ (8018a4c <prvMACBProbePhy+0x20>)
 8018a32:	4907      	ldr	r1, [pc, #28]	@ (8018a50 <prvMACBProbePhy+0x24>)
 8018a34:	4807      	ldr	r0, [pc, #28]	@ (8018a54 <prvMACBProbePhy+0x28>)
 8018a36:	f7ff f8c5 	bl	8017bc4 <vPhyInitialise>
                    ( xApplicationPhyReadHook_t ) ETH_PHY_IO_ReadReg,
                    ( xApplicationPhyWriteHook_t ) ETH_PHY_IO_WriteReg );
    /* Poll the bus for all connected PHY's. */
    xPhyDiscover( &( xPhyObject ) );
 8018a3a:	4806      	ldr	r0, [pc, #24]	@ (8018a54 <prvMACBProbePhy+0x28>)
 8018a3c:	f7ff f8d8 	bl	8017bf0 <xPhyDiscover>
    /* Configure them using the properties provided. */
    xPhyConfigure( &( xPhyObject ), &( xPHYProperties ) );
 8018a40:	4905      	ldr	r1, [pc, #20]	@ (8018a58 <prvMACBProbePhy+0x2c>)
 8018a42:	4804      	ldr	r0, [pc, #16]	@ (8018a54 <prvMACBProbePhy+0x28>)
 8018a44:	f7ff f9d2 	bl	8017dec <xPhyConfigure>
}
 8018a48:	bf00      	nop
 8018a4a:	bd80      	pop	{r7, pc}
 8018a4c:	08018c4d 	.word	0x08018c4d
 8018a50:	08018c15 	.word	0x08018c15
 8018a54:	2000252c 	.word	0x2000252c
 8018a58:	0802801c 	.word	0x0802801c

08018a5c <prvEthernetUpdateConfig>:
/*-----------------------------------------------------------*/

static void prvEthernetUpdateConfig( BaseType_t xForce )
{
 8018a5c:	b580      	push	{r7, lr}
 8018a5e:	b09e      	sub	sp, #120	@ 0x78
 8018a60:	af00      	add	r7, sp, #0
 8018a62:	6078      	str	r0, [r7, #4]
    ETH_MACConfigTypeDef MACConf;
    uint32_t speed = 0, duplex = 0;
 8018a64:	2300      	movs	r3, #0
 8018a66:	677b      	str	r3, [r7, #116]	@ 0x74
 8018a68:	2300      	movs	r3, #0
 8018a6a:	673b      	str	r3, [r7, #112]	@ 0x70

    FreeRTOS_printf( ( "prvEthernetUpdateConfig: LS mask %02lX Force %d\n",
 8018a6c:	4b25      	ldr	r3, [pc, #148]	@ (8018b04 <prvEthernetUpdateConfig+0xa8>)
 8018a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018a70:	687a      	ldr	r2, [r7, #4]
 8018a72:	4619      	mov	r1, r3
 8018a74:	4824      	ldr	r0, [pc, #144]	@ (8018b08 <prvEthernetUpdateConfig+0xac>)
 8018a76:	f009 fe95 	bl	80227a4 <lUDPLoggingPrintf>
                       xPhyObject.ulLinkStatusMask,
                       ( int ) xForce ) );

    if( ( xForce != pdFALSE ) || ( xPhyObject.ulLinkStatusMask != 0 ) )
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d103      	bne.n	8018a88 <prvEthernetUpdateConfig+0x2c>
 8018a80:	4b20      	ldr	r3, [pc, #128]	@ (8018b04 <prvEthernetUpdateConfig+0xa8>)
 8018a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	d035      	beq.n	8018af4 <prvEthernetUpdateConfig+0x98>
    {
        /* Restart the auto-negotiation. */
        xPhyStartAutoNegotiation( &xPhyObject, xPhyGetMask( &( xPhyObject ) ) );
 8018a88:	4b1e      	ldr	r3, [pc, #120]	@ (8018b04 <prvEthernetUpdateConfig+0xa8>)
 8018a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018a8c:	2201      	movs	r2, #1
 8018a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8018a92:	3b01      	subs	r3, #1
 8018a94:	4619      	mov	r1, r3
 8018a96:	481b      	ldr	r0, [pc, #108]	@ (8018b04 <prvEthernetUpdateConfig+0xa8>)
 8018a98:	f7ff faae 	bl	8017ff8 <xPhyStartAutoNegotiation>

        /* Configure the MAC with the Duplex Mode fixed by the
         * auto-negotiation process. */
        if( xPhyObject.xPhyProperties.ucDuplex == PHY_DUPLEX_FULL )
 8018a9c:	4b19      	ldr	r3, [pc, #100]	@ (8018b04 <prvEthernetUpdateConfig+0xa8>)
 8018a9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8018aa2:	2b02      	cmp	r3, #2
 8018aa4:	d103      	bne.n	8018aae <prvEthernetUpdateConfig+0x52>
        {
            duplex = ETH_FULLDUPLEX_MODE;
 8018aa6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8018aaa:	673b      	str	r3, [r7, #112]	@ 0x70
 8018aac:	e001      	b.n	8018ab2 <prvEthernetUpdateConfig+0x56>
        }
        else
        {
            duplex = ETH_HALFDUPLEX_MODE;
 8018aae:	2300      	movs	r3, #0
 8018ab0:	673b      	str	r3, [r7, #112]	@ 0x70
        }

        /* Configure the MAC with the speed fixed by the
         * auto-negotiation process. */
        if( xPhyObject.xPhyProperties.ucSpeed == PHY_SPEED_10 )
 8018ab2:	4b14      	ldr	r3, [pc, #80]	@ (8018b04 <prvEthernetUpdateConfig+0xa8>)
 8018ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8018ab8:	2b01      	cmp	r3, #1
 8018aba:	d102      	bne.n	8018ac2 <prvEthernetUpdateConfig+0x66>
        {
            speed = ETH_SPEED_10M;
 8018abc:	2300      	movs	r3, #0
 8018abe:	677b      	str	r3, [r7, #116]	@ 0x74
 8018ac0:	e002      	b.n	8018ac8 <prvEthernetUpdateConfig+0x6c>
        }
        else
        {
            speed = ETH_SPEED_100M;
 8018ac2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8018ac6:	677b      	str	r3, [r7, #116]	@ 0x74
        }

        /* Get MAC and configure it */
        HAL_ETH_GetMACConfig( &( xEthHandle ), &( MACConf ) );
 8018ac8:	f107 030c 	add.w	r3, r7, #12
 8018acc:	4619      	mov	r1, r3
 8018ace:	480f      	ldr	r0, [pc, #60]	@ (8018b0c <prvEthernetUpdateConfig+0xb0>)
 8018ad0:	f000 ffcc 	bl	8019a6c <HAL_ETH_GetMACConfig>
        MACConf.DuplexMode = duplex;
 8018ad4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8018ad6:	627b      	str	r3, [r7, #36]	@ 0x24
        MACConf.Speed = speed;
 8018ad8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8018ada:	623b      	str	r3, [r7, #32]
        HAL_ETH_SetMACConfig( &( xEthHandle ), &( MACConf ) );
 8018adc:	f107 030c 	add.w	r3, r7, #12
 8018ae0:	4619      	mov	r1, r3
 8018ae2:	480a      	ldr	r0, [pc, #40]	@ (8018b0c <prvEthernetUpdateConfig+0xb0>)
 8018ae4:	f001 f996 	bl	8019e14 <HAL_ETH_SetMACConfig>
        #if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM != 0 )
        {
            MACConf.ChecksumOffload = ENABLE;
 8018ae8:	2301      	movs	r3, #1
 8018aea:	743b      	strb	r3, [r7, #16]
            MACConf.ChecksumOffload = DISABLE;
        }
        #endif /* ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM != 0 ) */

        /* Restart MAC interface */
        HAL_ETH_Start_IT( &( xEthHandle ) );
 8018aec:	4807      	ldr	r0, [pc, #28]	@ (8018b0c <prvEthernetUpdateConfig+0xb0>)
 8018aee:	f000 fb64 	bl	80191ba <HAL_ETH_Start_IT>
 8018af2:	e003      	b.n	8018afc <prvEthernetUpdateConfig+0xa0>
    }
    else
    {
        /* Stop MAC interface */
        HAL_ETH_Stop_IT( &( xEthHandle ) );
 8018af4:	4805      	ldr	r0, [pc, #20]	@ (8018b0c <prvEthernetUpdateConfig+0xb0>)
 8018af6:	f000 fbe5 	bl	80192c4 <HAL_ETH_Stop_IT>
    }
}
 8018afa:	bf00      	nop
 8018afc:	bf00      	nop
 8018afe:	3778      	adds	r7, #120	@ 0x78
 8018b00:	46bd      	mov	sp, r7
 8018b02:	bd80      	pop	{r7, pc}
 8018b04:	2000252c 	.word	0x2000252c
 8018b08:	08027d4c 	.word	0x08027d4c
 8018b0c:	2000247c 	.word	0x2000247c

08018b10 <prvNetworkInterfaceInput>:
/*-----------------------------------------------------------*/

static BaseType_t prvNetworkInterfaceInput( void )
{
 8018b10:	b580      	push	{r7, lr}
 8018b12:	b08c      	sub	sp, #48	@ 0x30
 8018b14:	af00      	add	r7, sp, #0
    BaseType_t xReturn = 0;
 8018b16:	2300      	movs	r3, #0
 8018b18:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* For as long as a packet is immediately available. */
    for( ; ; )
    {
        NetworkBufferDescriptor_t * pxBufferDescriptor;
        NetworkBufferDescriptor_t * pxReceivedBuffer = NULL;
 8018b1a:	2300      	movs	r3, #0
 8018b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
        ETH_BufferTypeDef data_buffer;
        size_t uxDataLength;
        size_t uxLength;

        uxDataLength = HAL_ETH_GetRxData( &( xEthHandle ), &( data_buffer ) );
 8018b1e:	f107 0308 	add.w	r3, r7, #8
 8018b22:	4619      	mov	r1, r3
 8018b24:	4838      	ldr	r0, [pc, #224]	@ (8018c08 <prvNetworkInterfaceInput+0xf8>)
 8018b26:	f000 fd19 	bl	801955c <HAL_ETH_GetRxData>
 8018b2a:	61f8      	str	r0, [r7, #28]

        if( uxDataLength == 0U )
 8018b2c:	69fb      	ldr	r3, [r7, #28]
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	d101      	bne.n	8018b36 <prvNetworkInterfaceInput+0x26>
                vReleaseNetworkBufferAndDescriptor( pxReceivedBuffer );
            }
        }
    }

    return xReturn;
 8018b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b34:	e064      	b.n	8018c00 <prvNetworkInterfaceInput+0xf0>
        xReturn++;
 8018b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b38:	3301      	adds	r3, #1
 8018b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uxLength = ETH_RX_BUF_SIZE;
 8018b3c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8018b40:	61bb      	str	r3, [r7, #24]
            if( data_buffer.buffer != NULL )
 8018b42:	68bb      	ldr	r3, [r7, #8]
 8018b44:	2b00      	cmp	r3, #0
 8018b46:	d004      	beq.n	8018b52 <prvNetworkInterfaceInput+0x42>
                pxReceivedBuffer = pxPacketBuffer_to_NetworkBuffer( data_buffer.buffer );
 8018b48:	68bb      	ldr	r3, [r7, #8]
 8018b4a:	4618      	mov	r0, r3
 8018b4c:	f7f1 ff8d 	bl	800aa6a <pxPacketBuffer_to_NetworkBuffer>
 8018b50:	62b8      	str	r0, [r7, #40]	@ 0x28
            if( pxReceivedBuffer == NULL )
 8018b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d102      	bne.n	8018b5e <prvNetworkInterfaceInput+0x4e>
                FreeRTOS_printf( ( "Strange: no descriptor received\n" ) );
 8018b58:	482c      	ldr	r0, [pc, #176]	@ (8018c0c <prvNetworkInterfaceInput+0xfc>)
 8018b5a:	f009 fe23 	bl	80227a4 <lUDPLoggingPrintf>
        pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxLength, 0u );
 8018b5e:	2100      	movs	r1, #0
 8018b60:	69b8      	ldr	r0, [r7, #24]
 8018b62:	f7fe ff0f 	bl	8017984 <pxGetNetworkBufferWithDescriptor>
 8018b66:	6178      	str	r0, [r7, #20]
            if( pxBufferDescriptor == NULL )
 8018b68:	697b      	ldr	r3, [r7, #20]
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	d102      	bne.n	8018b74 <prvNetworkInterfaceInput+0x64>
                pxReceivedBuffer = NULL;
 8018b6e:	2300      	movs	r3, #0
 8018b70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018b72:	e005      	b.n	8018b80 <prvNetworkInterfaceInput+0x70>
            else if( pxReceivedBuffer != NULL )
 8018b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d002      	beq.n	8018b80 <prvNetworkInterfaceInput+0x70>
                pxReceivedBuffer->xDataLength = uxDataLength;
 8018b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b7c:	69fa      	ldr	r2, [r7, #28]
 8018b7e:	629a      	str	r2, [r3, #40]	@ 0x28
            uint8_t * pucBuffer = NULL;
 8018b80:	2300      	movs	r3, #0
 8018b82:	627b      	str	r3, [r7, #36]	@ 0x24
            if( pxBufferDescriptor != NULL )
 8018b84:	697b      	ldr	r3, [r7, #20]
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d002      	beq.n	8018b90 <prvNetworkInterfaceInput+0x80>
                pucBuffer = pxBufferDescriptor->pucEthernetBuffer;
 8018b8a:	697b      	ldr	r3, [r7, #20]
 8018b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018b8e:	627b      	str	r3, [r7, #36]	@ 0x24
            HAL_ETH_BuildRxDescriptors( &( xEthHandle ), pucBuffer );
 8018b90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018b92:	481d      	ldr	r0, [pc, #116]	@ (8018c08 <prvNetworkInterfaceInput+0xf8>)
 8018b94:	f000 fd2a 	bl	80195ec <HAL_ETH_BuildRxDescriptors>
        if( pxReceivedBuffer != NULL )
 8018b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	d0bd      	beq.n	8018b1a <prvNetworkInterfaceInput+0xa>
            BaseType_t xDoRelease = pdFALSE;
 8018b9e:	2300      	movs	r3, #0
 8018ba0:	623b      	str	r3, [r7, #32]
            if( eConsiderFrameForProcessing( pxReceivedBuffer->pucEthernetBuffer ) != eProcessBuffer )
 8018ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018ba6:	4618      	mov	r0, r3
 8018ba8:	f7f1 f8c6 	bl	8009d38 <eConsiderFrameForProcessing>
 8018bac:	4603      	mov	r3, r0
 8018bae:	2b01      	cmp	r3, #1
 8018bb0:	d002      	beq.n	8018bb8 <prvNetworkInterfaceInput+0xa8>
                xDoRelease = pdTRUE;
 8018bb2:	2301      	movs	r3, #1
 8018bb4:	623b      	str	r3, [r7, #32]
 8018bb6:	e01c      	b.n	8018bf2 <prvNetworkInterfaceInput+0xe2>
                IPStackEvent_t xRxEvent =
 8018bb8:	2301      	movs	r3, #1
 8018bba:	703b      	strb	r3, [r7, #0]
 8018bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bbe:	607b      	str	r3, [r7, #4]
                pxReceivedBuffer->pxInterface = pxMyInterface;
 8018bc0:	4b13      	ldr	r3, [pc, #76]	@ (8018c10 <prvNetworkInterfaceInput+0x100>)
 8018bc2:	681a      	ldr	r2, [r3, #0]
 8018bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bc6:	62da      	str	r2, [r3, #44]	@ 0x2c
                pxReceivedBuffer->pxEndPoint = FreeRTOS_MatchingEndpoint( pxMyInterface, pxReceivedBuffer->pucEthernetBuffer );
 8018bc8:	4b11      	ldr	r3, [pc, #68]	@ (8018c10 <prvNetworkInterfaceInput+0x100>)
 8018bca:	681a      	ldr	r2, [r3, #0]
 8018bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018bd0:	4619      	mov	r1, r3
 8018bd2:	4610      	mov	r0, r2
 8018bd4:	f7f5 fa78 	bl	800e0c8 <FreeRTOS_MatchingEndpoint>
 8018bd8:	4602      	mov	r2, r0
 8018bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bdc:	631a      	str	r2, [r3, #48]	@ 0x30
                if( xSendEventStructToIPTask( &( xRxEvent ), 0 ) != pdFALSE )
 8018bde:	463b      	mov	r3, r7
 8018be0:	2100      	movs	r1, #0
 8018be2:	4618      	mov	r0, r3
 8018be4:	f7f1 f854 	bl	8009c90 <xSendEventStructToIPTask>
 8018be8:	4603      	mov	r3, r0
 8018bea:	2b00      	cmp	r3, #0
 8018bec:	d101      	bne.n	8018bf2 <prvNetworkInterfaceInput+0xe2>
                    xDoRelease = pdTRUE;
 8018bee:	2301      	movs	r3, #1
 8018bf0:	623b      	str	r3, [r7, #32]
            if( xDoRelease != pdFALSE )
 8018bf2:	6a3b      	ldr	r3, [r7, #32]
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	d090      	beq.n	8018b1a <prvNetworkInterfaceInput+0xa>
                vReleaseNetworkBufferAndDescriptor( pxReceivedBuffer );
 8018bf8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018bfa:	f7fe ff2b 	bl	8017a54 <vReleaseNetworkBufferAndDescriptor>
    {
 8018bfe:	e78c      	b.n	8018b1a <prvNetworkInterfaceInput+0xa>
}
 8018c00:	4618      	mov	r0, r3
 8018c02:	3730      	adds	r7, #48	@ 0x30
 8018c04:	46bd      	mov	sp, r7
 8018c06:	bd80      	pop	{r7, pc}
 8018c08:	2000247c 	.word	0x2000247c
 8018c0c:	08027d80 	.word	0x08027d80
 8018c10:	20002524 	.word	0x20002524

08018c14 <ETH_PHY_IO_ReadReg>:
 * @retval 0 if OK -1 if Error
 */
static int32_t ETH_PHY_IO_ReadReg( uint32_t ulDevAddr,
                                   uint32_t ulRegAddr,
                                   uint32_t * pulRegVal )
{
 8018c14:	b580      	push	{r7, lr}
 8018c16:	b086      	sub	sp, #24
 8018c18:	af00      	add	r7, sp, #0
 8018c1a:	60f8      	str	r0, [r7, #12]
 8018c1c:	60b9      	str	r1, [r7, #8]
 8018c1e:	607a      	str	r2, [r7, #4]
    int32_t iResult = -1;
 8018c20:	f04f 33ff 	mov.w	r3, #4294967295
 8018c24:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_ReadPHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	68ba      	ldr	r2, [r7, #8]
 8018c2a:	68f9      	ldr	r1, [r7, #12]
 8018c2c:	4806      	ldr	r0, [pc, #24]	@ (8018c48 <ETH_PHY_IO_ReadReg+0x34>)
 8018c2e:	f000 fe75 	bl	801991c <HAL_ETH_ReadPHYRegister>
 8018c32:	4603      	mov	r3, r0
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	d101      	bne.n	8018c3c <ETH_PHY_IO_ReadReg+0x28>
    {
        iResult = 0;
 8018c38:	2300      	movs	r3, #0
 8018c3a:	617b      	str	r3, [r7, #20]
    }

    return iResult;
 8018c3c:	697b      	ldr	r3, [r7, #20]
}
 8018c3e:	4618      	mov	r0, r3
 8018c40:	3718      	adds	r7, #24
 8018c42:	46bd      	mov	sp, r7
 8018c44:	bd80      	pop	{r7, pc}
 8018c46:	bf00      	nop
 8018c48:	2000247c 	.word	0x2000247c

08018c4c <ETH_PHY_IO_WriteReg>:
 * @retval 0 if OK -1 if Error
 */
static int32_t ETH_PHY_IO_WriteReg( uint32_t ulDevAddr,
                                    uint32_t ulRegAddr,
                                    uint32_t pulRegVal )
{
 8018c4c:	b580      	push	{r7, lr}
 8018c4e:	b086      	sub	sp, #24
 8018c50:	af00      	add	r7, sp, #0
 8018c52:	60f8      	str	r0, [r7, #12]
 8018c54:	60b9      	str	r1, [r7, #8]
 8018c56:	607a      	str	r2, [r7, #4]
    int32_t iResult = -1;
 8018c58:	f04f 33ff 	mov.w	r3, #4294967295
 8018c5c:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_WritePHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	68ba      	ldr	r2, [r7, #8]
 8018c62:	68f9      	ldr	r1, [r7, #12]
 8018c64:	4806      	ldr	r0, [pc, #24]	@ (8018c80 <ETH_PHY_IO_WriteReg+0x34>)
 8018c66:	f000 fead 	bl	80199c4 <HAL_ETH_WritePHYRegister>
 8018c6a:	4603      	mov	r3, r0
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	d101      	bne.n	8018c74 <ETH_PHY_IO_WriteReg+0x28>
    {
        iResult = 0;
 8018c70:	2300      	movs	r3, #0
 8018c72:	617b      	str	r3, [r7, #20]
    }

    return iResult;
 8018c74:	697b      	ldr	r3, [r7, #20]
}
 8018c76:	4618      	mov	r0, r3
 8018c78:	3718      	adds	r7, #24
 8018c7a:	46bd      	mov	sp, r7
 8018c7c:	bd80      	pop	{r7, pc}
 8018c7e:	bf00      	nop
 8018c80:	2000247c 	.word	0x2000247c

08018c84 <ETH_IRQHandler>:
/*******************************************************************************
*                   Ethernet Handling Functions
*******************************************************************************/

void ETH_IRQHandler( void )
{
 8018c84:	b580      	push	{r7, lr}
 8018c86:	af00      	add	r7, sp, #0
    HAL_ETH_IRQHandler( &( xEthHandle ) );
 8018c88:	4802      	ldr	r0, [pc, #8]	@ (8018c94 <ETH_IRQHandler+0x10>)
 8018c8a:	f000 fd27 	bl	80196dc <HAL_ETH_IRQHandler>
}
 8018c8e:	bf00      	nop
 8018c90:	bd80      	pop	{r7, pc}
 8018c92:	bf00      	nop
 8018c94:	2000247c 	.word	0x2000247c

08018c98 <prvSetFlagsAndNotify>:
/*-----------------------------------------------------------*/

static void prvSetFlagsAndNotify( uint32_t ulFlags )
{
 8018c98:	b580      	push	{r7, lr}
 8018c9a:	b084      	sub	sp, #16
 8018c9c:	af00      	add	r7, sp, #0
 8018c9e:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8018ca0:	2300      	movs	r3, #0
 8018ca2:	60fb      	str	r3, [r7, #12]

    /* Ethernet RX-Complete callback function, elsewhere declared as weak.
     * No critical section needed, this function is called from an ISR. */
    ulISREvents |= ulFlags;
 8018ca4:	4b10      	ldr	r3, [pc, #64]	@ (8018ce8 <prvSetFlagsAndNotify+0x50>)
 8018ca6:	681a      	ldr	r2, [r3, #0]
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	4313      	orrs	r3, r2
 8018cac:	4a0e      	ldr	r2, [pc, #56]	@ (8018ce8 <prvSetFlagsAndNotify+0x50>)
 8018cae:	6013      	str	r3, [r2, #0]

    /* Wakeup the prvEMACHandlerTask. */
    if( xEMACTaskHandle != NULL )
 8018cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8018cec <prvSetFlagsAndNotify+0x54>)
 8018cb2:	681b      	ldr	r3, [r3, #0]
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	d012      	beq.n	8018cde <prvSetFlagsAndNotify+0x46>
    {
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &( xHigherPriorityTaskWoken ) );
 8018cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8018cec <prvSetFlagsAndNotify+0x54>)
 8018cba:	681b      	ldr	r3, [r3, #0]
 8018cbc:	f107 020c 	add.w	r2, r7, #12
 8018cc0:	2100      	movs	r1, #0
 8018cc2:	4618      	mov	r0, r3
 8018cc4:	f7ed faba 	bl	800623c <vTaskGenericNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8018cc8:	68fb      	ldr	r3, [r7, #12]
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	d007      	beq.n	8018cde <prvSetFlagsAndNotify+0x46>
 8018cce:	4b08      	ldr	r3, [pc, #32]	@ (8018cf0 <prvSetFlagsAndNotify+0x58>)
 8018cd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018cd4:	601a      	str	r2, [r3, #0]
 8018cd6:	f3bf 8f4f 	dsb	sy
 8018cda:	f3bf 8f6f 	isb	sy
    }
}
 8018cde:	bf00      	nop
 8018ce0:	3710      	adds	r7, #16
 8018ce2:	46bd      	mov	sp, r7
 8018ce4:	bd80      	pop	{r7, pc}
 8018ce6:	bf00      	nop
 8018ce8:	2000246c 	.word	0x2000246c
 8018cec:	20002528 	.word	0x20002528
 8018cf0:	e000ed04 	.word	0xe000ed04

08018cf4 <HAL_ETH_TxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef * heth )
{
 8018cf4:	b580      	push	{r7, lr}
 8018cf6:	b082      	sub	sp, #8
 8018cf8:	af00      	add	r7, sp, #0
 8018cfa:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_TX_EVENT );
 8018cfc:	2002      	movs	r0, #2
 8018cfe:	f7ff ffcb 	bl	8018c98 <prvSetFlagsAndNotify>
}
 8018d02:	bf00      	nop
 8018d04:	3708      	adds	r7, #8
 8018d06:	46bd      	mov	sp, r7
 8018d08:	bd80      	pop	{r7, pc}

08018d0a <HAL_ETH_RxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef * heth )
{
 8018d0a:	b580      	push	{r7, lr}
 8018d0c:	b082      	sub	sp, #8
 8018d0e:	af00      	add	r7, sp, #0
 8018d10:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_RX_EVENT );
 8018d12:	2001      	movs	r0, #1
 8018d14:	f7ff ffc0 	bl	8018c98 <prvSetFlagsAndNotify>
}
 8018d18:	bf00      	nop
 8018d1a:	3708      	adds	r7, #8
 8018d1c:	46bd      	mov	sp, r7
 8018d1e:	bd80      	pop	{r7, pc}

08018d20 <HAL_ETH_DMAErrorCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_DMAErrorCallback( ETH_HandleTypeDef * heth )
{
 8018d20:	b580      	push	{r7, lr}
 8018d22:	b082      	sub	sp, #8
 8018d24:	af00      	add	r7, sp, #0
 8018d26:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_ERR_EVENT );
 8018d28:	2004      	movs	r0, #4
 8018d2a:	f7ff ffb5 	bl	8018c98 <prvSetFlagsAndNotify>
}
 8018d2e:	bf00      	nop
 8018d30:	3708      	adds	r7, #8
 8018d32:	46bd      	mov	sp, r7
 8018d34:	bd80      	pop	{r7, pc}
	...

08018d38 <vNetworkInterfaceAllocateRAMToBuffers>:
    __attribute__( ( section( ".ethernet_data" ) ) )
#endif /* ( ipconfigZERO_COPY_RX_DRIVER != 0 || ipconfigZERO_COPY_TX_DRIVER != 0 ) */
__attribute__( ( aligned( 32 ) ) );

void vNetworkInterfaceAllocateRAMToBuffers( NetworkBufferDescriptor_t pxNetworkBuffers[ ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ] )
{
 8018d38:	b480      	push	{r7}
 8018d3a:	b085      	sub	sp, #20
 8018d3c:	af00      	add	r7, sp, #0
 8018d3e:	6078      	str	r0, [r7, #4]
    uint8_t * ucRAMBuffer = ucNetworkPackets;
 8018d40:	4b15      	ldr	r3, [pc, #84]	@ (8018d98 <vNetworkInterfaceAllocateRAMToBuffers+0x60>)
 8018d42:	60fb      	str	r3, [r7, #12]
    uint32_t ul;

    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 8018d44:	2300      	movs	r3, #0
 8018d46:	60bb      	str	r3, [r7, #8]
 8018d48:	e01c      	b.n	8018d84 <vNetworkInterfaceAllocateRAMToBuffers+0x4c>
    {
        pxNetworkBuffers[ ul ].pucEthernetBuffer = ucRAMBuffer + ipBUFFER_PADDING;
 8018d4a:	68ba      	ldr	r2, [r7, #8]
 8018d4c:	4613      	mov	r3, r2
 8018d4e:	00db      	lsls	r3, r3, #3
 8018d50:	1a9b      	subs	r3, r3, r2
 8018d52:	00db      	lsls	r3, r3, #3
 8018d54:	461a      	mov	r2, r3
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	4413      	add	r3, r2
 8018d5a:	68fa      	ldr	r2, [r7, #12]
 8018d5c:	320a      	adds	r2, #10
 8018d5e:	625a      	str	r2, [r3, #36]	@ 0x24
        *( ( unsigned * ) ucRAMBuffer ) = ( unsigned ) ( &( pxNetworkBuffers[ ul ] ) );
 8018d60:	68ba      	ldr	r2, [r7, #8]
 8018d62:	4613      	mov	r3, r2
 8018d64:	00db      	lsls	r3, r3, #3
 8018d66:	1a9b      	subs	r3, r3, r2
 8018d68:	00db      	lsls	r3, r3, #3
 8018d6a:	461a      	mov	r2, r3
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	4413      	add	r3, r2
 8018d70:	461a      	mov	r2, r3
 8018d72:	68fb      	ldr	r3, [r7, #12]
 8018d74:	601a      	str	r2, [r3, #0]
        ucRAMBuffer += ETH_RX_BUF_SIZE;
 8018d76:	68fb      	ldr	r3, [r7, #12]
 8018d78:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8018d7c:	60fb      	str	r3, [r7, #12]
    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 8018d7e:	68bb      	ldr	r3, [r7, #8]
 8018d80:	3301      	adds	r3, #1
 8018d82:	60bb      	str	r3, [r7, #8]
 8018d84:	68bb      	ldr	r3, [r7, #8]
 8018d86:	2b3f      	cmp	r3, #63	@ 0x3f
 8018d88:	d9df      	bls.n	8018d4a <vNetworkInterfaceAllocateRAMToBuffers+0x12>
    }
}
 8018d8a:	bf00      	nop
 8018d8c:	bf00      	nop
 8018d8e:	3714      	adds	r7, #20
 8018d90:	46bd      	mov	sp, r7
 8018d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d96:	4770      	bx	lr
 8018d98:	240400c0 	.word	0x240400c0

08018d9c <vClearOptionBit>:
/*-----------------------------------------------------------*/

static void vClearOptionBit( volatile uint32_t * pulValue,
                             uint32_t ulValue )
{
 8018d9c:	b580      	push	{r7, lr}
 8018d9e:	b082      	sub	sp, #8
 8018da0:	af00      	add	r7, sp, #0
 8018da2:	6078      	str	r0, [r7, #4]
 8018da4:	6039      	str	r1, [r7, #0]
    portENTER_CRITICAL();
 8018da6:	f7ed fcfb 	bl	80067a0 <vPortEnterCritical>
    *( pulValue ) &= ~( ulValue );
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	681a      	ldr	r2, [r3, #0]
 8018dae:	683b      	ldr	r3, [r7, #0]
 8018db0:	43db      	mvns	r3, r3
 8018db2:	401a      	ands	r2, r3
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	601a      	str	r2, [r3, #0]
    portEXIT_CRITICAL();
 8018db8:	f7ed fd1e 	bl	80067f8 <vPortExitCritical>
}
 8018dbc:	bf00      	nop
 8018dbe:	3708      	adds	r7, #8
 8018dc0:	46bd      	mov	sp, r7
 8018dc2:	bd80      	pop	{r7, pc}

08018dc4 <uxGetOwnCount>:
/*-----------------------------------------------------------*/

#if ( ipconfigHAS_PRINTF != 0 )
    static size_t uxGetOwnCount( ETH_HandleTypeDef * heth )
    {
 8018dc4:	b480      	push	{r7}
 8018dc6:	b087      	sub	sp, #28
 8018dc8:	af00      	add	r7, sp, #0
 8018dca:	6078      	str	r0, [r7, #4]
        BaseType_t xIndex;
        BaseType_t xCount = 0;
 8018dcc:	2300      	movs	r3, #0
 8018dce:	613b      	str	r3, [r7, #16]
        ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	3330      	adds	r3, #48	@ 0x30
 8018dd4:	60fb      	str	r3, [r7, #12]

        /* Count the number of RX descriptors that are owned by DMA. */
        for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 8018dd6:	2300      	movs	r3, #0
 8018dd8:	617b      	str	r3, [r7, #20]
 8018dda:	e00e      	b.n	8018dfa <uxGetOwnCount+0x36>
        {
            __IO const ETH_DMADescTypeDef * dmarxdesc =
                ( __IO const ETH_DMADescTypeDef * )dmarxdesclist->RxDesc[ xIndex ];
 8018ddc:	68fb      	ldr	r3, [r7, #12]
 8018dde:	697a      	ldr	r2, [r7, #20]
 8018de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
            __IO const ETH_DMADescTypeDef * dmarxdesc =
 8018de4:	60bb      	str	r3, [r7, #8]

            if( ( dmarxdesc->DESC3 & ETH_DMARXNDESCWBF_OWN ) != 0U )
 8018de6:	68bb      	ldr	r3, [r7, #8]
 8018de8:	68db      	ldr	r3, [r3, #12]
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	da02      	bge.n	8018df4 <uxGetOwnCount+0x30>
            {
                xCount++;
 8018dee:	693b      	ldr	r3, [r7, #16]
 8018df0:	3301      	adds	r3, #1
 8018df2:	613b      	str	r3, [r7, #16]
        for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 8018df4:	697b      	ldr	r3, [r7, #20]
 8018df6:	3301      	adds	r3, #1
 8018df8:	617b      	str	r3, [r7, #20]
 8018dfa:	697b      	ldr	r3, [r7, #20]
 8018dfc:	2b03      	cmp	r3, #3
 8018dfe:	d9ed      	bls.n	8018ddc <uxGetOwnCount+0x18>
            }
        }

        return xCount;
 8018e00:	693b      	ldr	r3, [r7, #16]
    }
 8018e02:	4618      	mov	r0, r3
 8018e04:	371c      	adds	r7, #28
 8018e06:	46bd      	mov	sp, r7
 8018e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e0c:	4770      	bx	lr
	...

08018e10 <prvEMACHandlerTask>:
#endif /* if ( ipconfigHAS_PRINTF != 0 ) */
/*-----------------------------------------------------------*/

static void prvEMACHandlerTask( void * pvParameters )
{
 8018e10:	b580      	push	{r7, lr}
 8018e12:	b088      	sub	sp, #32
 8018e14:	af00      	add	r7, sp, #0
 8018e16:	6078      	str	r0, [r7, #4]
/* When sending a packet, all descriptors in the transmission channel may
 * be occupied.  In stat case, the program will wait (block) for the counting
 * semaphore. */
    const TickType_t ulMaxBlockTime = pdMS_TO_TICKS( 100U );
 8018e18:	2364      	movs	r3, #100	@ 0x64
 8018e1a:	613b      	str	r3, [r7, #16]

    #if ( ipconfigHAS_PRINTF != 0 )
        size_t uxTXDescriptorsUsed = 0U;
 8018e1c:	2300      	movs	r3, #0
 8018e1e:	61fb      	str	r3, [r7, #28]
        size_t uxRXDescriptorsUsed = ETH_RX_DESC_CNT;
 8018e20:	2304      	movs	r3, #4
 8018e22:	61bb      	str	r3, [r7, #24]

    ( void ) pvParameters;

    for( ; ; )
    {
        BaseType_t xResult = 0;
 8018e24:	2300      	movs	r3, #0
 8018e26:	617b      	str	r3, [r7, #20]
            size_t uxOwnCount;

            /* Call a function that monitors resources: the amount of free network
             * buffers and the amount of free space on the heap.  See FreeRTOS_IP.c
             * for more detailed comments. */
            vPrintResourceStats();
 8018e28:	f7f1 ffb8 	bl	800ad9c <vPrintResourceStats>

            /* Some more statistics: number of free descriptors. */
            uxUsed = ETH_TX_DESC_CNT - uxSemaphoreGetCount( xTXDescriptorSemaphore );
 8018e2c:	4b43      	ldr	r3, [pc, #268]	@ (8018f3c <prvEMACHandlerTask+0x12c>)
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	4618      	mov	r0, r3
 8018e32:	f7eb f973 	bl	800411c <uxQueueMessagesWaiting>
 8018e36:	4603      	mov	r3, r0
 8018e38:	f1c3 0304 	rsb	r3, r3, #4
 8018e3c:	60fb      	str	r3, [r7, #12]

            if( uxTXDescriptorsUsed < uxUsed )
 8018e3e:	69fa      	ldr	r2, [r7, #28]
 8018e40:	68fb      	ldr	r3, [r7, #12]
 8018e42:	429a      	cmp	r2, r3
 8018e44:	d206      	bcs.n	8018e54 <prvEMACHandlerTask+0x44>
            {
                uxTXDescriptorsUsed = uxUsed;
 8018e46:	68fb      	ldr	r3, [r7, #12]
 8018e48:	61fb      	str	r3, [r7, #28]
                FreeRTOS_printf( ( "TX descriptors %u/%u\n",
 8018e4a:	2204      	movs	r2, #4
 8018e4c:	69f9      	ldr	r1, [r7, #28]
 8018e4e:	483c      	ldr	r0, [pc, #240]	@ (8018f40 <prvEMACHandlerTask+0x130>)
 8018e50:	f009 fca8 	bl	80227a4 <lUDPLoggingPrintf>
                                   uxTXDescriptorsUsed,
                                   ETH_TX_DESC_CNT ) );
            }

            uxOwnCount = uxGetOwnCount( &( xEthHandle ) );
 8018e54:	483b      	ldr	r0, [pc, #236]	@ (8018f44 <prvEMACHandlerTask+0x134>)
 8018e56:	f7ff ffb5 	bl	8018dc4 <uxGetOwnCount>
 8018e5a:	60b8      	str	r0, [r7, #8]

            if( uxRXDescriptorsUsed > uxOwnCount )
 8018e5c:	69ba      	ldr	r2, [r7, #24]
 8018e5e:	68bb      	ldr	r3, [r7, #8]
 8018e60:	429a      	cmp	r2, r3
 8018e62:	d906      	bls.n	8018e72 <prvEMACHandlerTask+0x62>
            {
                uxRXDescriptorsUsed = uxOwnCount;
 8018e64:	68bb      	ldr	r3, [r7, #8]
 8018e66:	61bb      	str	r3, [r7, #24]
                FreeRTOS_printf( ( "RX descriptors %u/%u\n",
 8018e68:	2204      	movs	r2, #4
 8018e6a:	69b9      	ldr	r1, [r7, #24]
 8018e6c:	4836      	ldr	r0, [pc, #216]	@ (8018f48 <prvEMACHandlerTask+0x138>)
 8018e6e:	f009 fc99 	bl	80227a4 <lUDPLoggingPrintf>
                                   ETH_RX_DESC_CNT ) );
            }
        }
        #endif /* ( ipconfigHAS_PRINTF != 0 ) */

        ulTaskNotifyTake( pdFALSE, ulMaxBlockTime );
 8018e72:	693a      	ldr	r2, [r7, #16]
 8018e74:	2100      	movs	r1, #0
 8018e76:	2000      	movs	r0, #0
 8018e78:	f7ec fe70 	bl	8005b5c <ulTaskGenericNotifyTake>

        /* Wait for the Ethernet MAC interrupt to indicate that another packet
         * has been received. */
        if( ( ulISREvents & EMAC_IF_RX_EVENT ) != 0U )
 8018e7c:	4b33      	ldr	r3, [pc, #204]	@ (8018f4c <prvEMACHandlerTask+0x13c>)
 8018e7e:	681b      	ldr	r3, [r3, #0]
 8018e80:	f003 0301 	and.w	r3, r3, #1
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	d006      	beq.n	8018e96 <prvEMACHandlerTask+0x86>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_RX_EVENT );
 8018e88:	2101      	movs	r1, #1
 8018e8a:	4830      	ldr	r0, [pc, #192]	@ (8018f4c <prvEMACHandlerTask+0x13c>)
 8018e8c:	f7ff ff86 	bl	8018d9c <vClearOptionBit>
            xResult = prvNetworkInterfaceInput();
 8018e90:	f7ff fe3e 	bl	8018b10 <prvNetworkInterfaceInput>
 8018e94:	6178      	str	r0, [r7, #20]
        /* When a packet has been transmitted, the descriptor must be
         * prepared for a next transmission.
         * When using zero-copy, the network buffer must be released
         * ( i.e. returned to the pool of network buffers ). */

        if( ( ulISREvents & EMAC_IF_TX_EVENT ) != 0U )
 8018e96:	4b2d      	ldr	r3, [pc, #180]	@ (8018f4c <prvEMACHandlerTask+0x13c>)
 8018e98:	681b      	ldr	r3, [r3, #0]
 8018e9a:	f003 0302 	and.w	r3, r3, #2
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d017      	beq.n	8018ed2 <prvEMACHandlerTask+0xc2>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_TX_EVENT );
 8018ea2:	2102      	movs	r1, #2
 8018ea4:	4829      	ldr	r0, [pc, #164]	@ (8018f4c <prvEMACHandlerTask+0x13c>)
 8018ea6:	f7ff ff79 	bl	8018d9c <vClearOptionBit>

            if( xSemaphoreTake( xTransmissionMutex, 10000U ) != pdFAIL )
 8018eaa:	4b29      	ldr	r3, [pc, #164]	@ (8018f50 <prvEMACHandlerTask+0x140>)
 8018eac:	681b      	ldr	r3, [r3, #0]
 8018eae:	f242 7110 	movw	r1, #10000	@ 0x2710
 8018eb2:	4618      	mov	r0, r3
 8018eb4:	f7eb f844 	bl	8003f40 <xQueueSemaphoreTake>
 8018eb8:	4603      	mov	r3, r0
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	d009      	beq.n	8018ed2 <prvEMACHandlerTask+0xc2>
            {
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 8018ebe:	4821      	ldr	r0, [pc, #132]	@ (8018f44 <prvEMACHandlerTask+0x134>)
 8018ec0:	f001 fb04 	bl	801a4cc <ETH_Clear_Tx_Descriptors>
                xSemaphoreGive( xTransmissionMutex );
 8018ec4:	4b22      	ldr	r3, [pc, #136]	@ (8018f50 <prvEMACHandlerTask+0x140>)
 8018ec6:	6818      	ldr	r0, [r3, #0]
 8018ec8:	2300      	movs	r3, #0
 8018eca:	2200      	movs	r2, #0
 8018ecc:	2100      	movs	r1, #0
 8018ece:	f7ea fe7f 	bl	8003bd0 <xQueueGenericSend>
            }
        }

        /* Some error has occurred, possibly an overflow or an underflow. */
        if( ( ulISREvents & EMAC_IF_ERR_EVENT ) != 0U )
 8018ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8018f4c <prvEMACHandlerTask+0x13c>)
 8018ed4:	681b      	ldr	r3, [r3, #0]
 8018ed6:	f003 0304 	and.w	r3, r3, #4
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	d00f      	beq.n	8018efe <prvEMACHandlerTask+0xee>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_ERR_EVENT );
 8018ede:	2104      	movs	r1, #4
 8018ee0:	481a      	ldr	r0, [pc, #104]	@ (8018f4c <prvEMACHandlerTask+0x13c>)
 8018ee2:	f7ff ff5b 	bl	8018d9c <vClearOptionBit>

            xEthHandle.gState = HAL_ETH_STATE_READY;
 8018ee6:	4b17      	ldr	r3, [pc, #92]	@ (8018f44 <prvEMACHandlerTask+0x134>)
 8018ee8:	2210      	movs	r2, #16
 8018eea:	659a      	str	r2, [r3, #88]	@ 0x58
            /* Enable all interrupts */
            HAL_ETH_Start_IT( &( xEthHandle ) );
 8018eec:	4815      	ldr	r0, [pc, #84]	@ (8018f44 <prvEMACHandlerTask+0x134>)
 8018eee:	f000 f964 	bl	80191ba <HAL_ETH_Start_IT>
            xResult += prvNetworkInterfaceInput();
 8018ef2:	f7ff fe0d 	bl	8018b10 <prvNetworkInterfaceInput>
 8018ef6:	4602      	mov	r2, r0
 8018ef8:	697b      	ldr	r3, [r7, #20]
 8018efa:	4413      	add	r3, r2
 8018efc:	617b      	str	r3, [r7, #20]
        }

        if( xPhyCheckLinkStatus( &xPhyObject, xResult ) != pdFALSE )
 8018efe:	6979      	ldr	r1, [r7, #20]
 8018f00:	4814      	ldr	r0, [pc, #80]	@ (8018f54 <prvEMACHandlerTask+0x144>)
 8018f02:	f7ff fa25 	bl	8018350 <xPhyCheckLinkStatus>
 8018f06:	4603      	mov	r3, r0
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	d08b      	beq.n	8018e24 <prvEMACHandlerTask+0x14>
        {
            /*
             * The function xPhyCheckLinkStatus() returns pdTRUE if the
             * Link Status has changes since it was called the last time.
             */
            if( xSTM32H_GetPhyLinkStatus( pxMyInterface ) == pdFALSE )
 8018f0c:	4b12      	ldr	r3, [pc, #72]	@ (8018f58 <prvEMACHandlerTask+0x148>)
 8018f0e:	681b      	ldr	r3, [r3, #0]
 8018f10:	4618      	mov	r0, r3
 8018f12:	f7ff fccf 	bl	80188b4 <xSTM32H_GetPhyLinkStatus>
 8018f16:	4603      	mov	r3, r0
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d10b      	bne.n	8018f34 <prvEMACHandlerTask+0x124>
            {
                /* Stop the DMA transfer. */
                HAL_ETH_Stop_IT( &( xEthHandle ) );
 8018f1c:	4809      	ldr	r0, [pc, #36]	@ (8018f44 <prvEMACHandlerTask+0x134>)
 8018f1e:	f000 f9d1 	bl	80192c4 <HAL_ETH_Stop_IT>
                /* Clear the Transmit buffers. */
                memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 8018f22:	2260      	movs	r2, #96	@ 0x60
 8018f24:	2100      	movs	r1, #0
 8018f26:	480d      	ldr	r0, [pc, #52]	@ (8018f5c <prvEMACHandlerTask+0x14c>)
 8018f28:	f009 ff65 	bl	8022df6 <memset>
                /* Since the link is down, clear the descriptors. */
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 8018f2c:	4805      	ldr	r0, [pc, #20]	@ (8018f44 <prvEMACHandlerTask+0x134>)
 8018f2e:	f001 facd 	bl	801a4cc <ETH_Clear_Tx_Descriptors>
 8018f32:	e777      	b.n	8018e24 <prvEMACHandlerTask+0x14>
            }
            else
            {
                /* Something has changed to a Link Status, need re-check. */
                prvEthernetUpdateConfig( pdFALSE );
 8018f34:	2000      	movs	r0, #0
 8018f36:	f7ff fd91 	bl	8018a5c <prvEthernetUpdateConfig>
    {
 8018f3a:	e773      	b.n	8018e24 <prvEMACHandlerTask+0x14>
 8018f3c:	20002474 	.word	0x20002474
 8018f40:	08027da4 	.word	0x08027da4
 8018f44:	2000247c 	.word	0x2000247c
 8018f48:	08027dbc 	.word	0x08027dbc
 8018f4c:	2000246c 	.word	0x2000246c
 8018f50:	20002478 	.word	0x20002478
 8018f54:	2000252c 	.word	0x2000252c
 8018f58:	20002524 	.word	0x20002524
 8018f5c:	24040060 	.word	0x24040060

08018f60 <set_error_state>:
 */
#ifdef HAL_ETH_MODULE_ENABLED

    static void set_error_state( ETH_HandleTypeDef * heth,
                                 uint32_t ulState )
    {
 8018f60:	b480      	push	{r7}
 8018f62:	b083      	sub	sp, #12
 8018f64:	af00      	add	r7, sp, #0
 8018f66:	6078      	str	r0, [r7, #4]
 8018f68:	6039      	str	r1, [r7, #0]
        heth->gState = ulState;
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	683a      	ldr	r2, [r7, #0]
 8018f6e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
 8018f70:	bf00      	nop
 8018f72:	370c      	adds	r7, #12
 8018f74:	46bd      	mov	sp, r7
 8018f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f7a:	4770      	bx	lr

08018f7c <HAL_ETH_Init>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Init( ETH_HandleTypeDef * heth )
        {
 8018f7c:	b580      	push	{r7, lr}
 8018f7e:	b084      	sub	sp, #16
 8018f80:	af00      	add	r7, sp, #0
 8018f82:	6078      	str	r0, [r7, #4]
            uint32_t tickstart;

            if( heth == NULL )
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	2b00      	cmp	r3, #0
 8018f88:	d101      	bne.n	8018f8e <HAL_ETH_Init+0x12>
            {
                return HAL_ERROR;
 8018f8a:	2301      	movs	r3, #1
 8018f8c:	e0d4      	b.n	8019138 <HAL_ETH_Init+0x1bc>
                    /* Init the low level hardware */
                    heth->MspInitCallback( heth );
                }
            #else /* if ( USE_HAL_ETH_REGISTER_CALLBACKS == 1 ) */
                /* Check the ETH peripheral state */
                if( heth->gState == HAL_ETH_STATE_RESET )
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	d102      	bne.n	8018f9c <HAL_ETH_Init+0x20>
                {
                    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
                    HAL_ETH_MspInit( heth );
 8018f96:	6878      	ldr	r0, [r7, #4]
 8018f98:	f7e9 fa4c 	bl	8002434 <HAL_ETH_MspInit>
                }
            #endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

            heth->gState = HAL_ETH_STATE_BUSY;
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	2223      	movs	r2, #35	@ 0x23
 8018fa0:	659a      	str	r2, [r3, #88]	@ 0x58

            __HAL_RCC_SYSCFG_CLK_ENABLE();
 8018fa2:	4b67      	ldr	r3, [pc, #412]	@ (8019140 <HAL_ETH_Init+0x1c4>)
 8018fa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8018fa8:	4a65      	ldr	r2, [pc, #404]	@ (8019140 <HAL_ETH_Init+0x1c4>)
 8018faa:	f043 0302 	orr.w	r3, r3, #2
 8018fae:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8018fb2:	4b63      	ldr	r3, [pc, #396]	@ (8019140 <HAL_ETH_Init+0x1c4>)
 8018fb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8018fb8:	f003 0302 	and.w	r3, r3, #2
 8018fbc:	60bb      	str	r3, [r7, #8]
 8018fbe:	68bb      	ldr	r3, [r7, #8]

            if( heth->Init.MediaInterface == HAL_ETH_MII_MODE )
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	7a1b      	ldrb	r3, [r3, #8]
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	d103      	bne.n	8018fd0 <HAL_ETH_Init+0x54>
            {
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_MII );
 8018fc8:	2000      	movs	r0, #0
 8018fca:	f001 fc17 	bl	801a7fc <HAL_SYSCFG_ETHInterfaceSelect>
 8018fce:	e003      	b.n	8018fd8 <HAL_ETH_Init+0x5c>
            }
            else
            {
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_RMII );
 8018fd0:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8018fd4:	f001 fc12 	bl	801a7fc <HAL_SYSCFG_ETHInterfaceSelect>
            }

            /* Ethernet Software reset */
            /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
            /* After reset all the registers holds their respective reset values */
            SET_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR );
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	681b      	ldr	r3, [r3, #0]
 8018fdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018fe0:	681b      	ldr	r3, [r3, #0]
 8018fe2:	687a      	ldr	r2, [r7, #4]
 8018fe4:	6812      	ldr	r2, [r2, #0]
 8018fe6:	f043 0301 	orr.w	r3, r3, #1
 8018fea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018fee:	6013      	str	r3, [r2, #0]

            /* Get tick */
            tickstart = HAL_GetTick();
 8018ff0:	f001 fbc8 	bl	801a784 <HAL_GetTick>
 8018ff4:	60f8      	str	r0, [r7, #12]

            /* Wait for software reset */
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 8018ff6:	e010      	b.n	801901a <HAL_ETH_Init+0x9e>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT ) )
 8018ff8:	f001 fbc4 	bl	801a784 <HAL_GetTick>
 8018ffc:	4602      	mov	r2, r0
 8018ffe:	68fb      	ldr	r3, [r7, #12]
 8019000:	1ad3      	subs	r3, r2, r3
 8019002:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8019006:	d908      	bls.n	801901a <HAL_ETH_Init+0x9e>
                {
                    /* Set Error Code */
                    heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	2204      	movs	r2, #4
 801900c:	661a      	str	r2, [r3, #96]	@ 0x60
                    /* Set State as Error */
                    set_error_state( heth, HAL_ETH_STATE_ERROR );
 801900e:	21e0      	movs	r1, #224	@ 0xe0
 8019010:	6878      	ldr	r0, [r7, #4]
 8019012:	f7ff ffa5 	bl	8018f60 <set_error_state>
                    /* Return Error */
                    return HAL_ERROR;
 8019016:	2301      	movs	r3, #1
 8019018:	e08e      	b.n	8019138 <HAL_ETH_Init+0x1bc>
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	681b      	ldr	r3, [r3, #0]
 801901e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019022:	681b      	ldr	r3, [r3, #0]
 8019024:	f003 0301 	and.w	r3, r3, #1
 8019028:	2b00      	cmp	r3, #0
 801902a:	d1e5      	bne.n	8018ff8 <HAL_ETH_Init+0x7c>
                }
            }

            /*------------------ MDIO CSR Clock Range Configuration --------------------*/
            ETH_MAC_MDIO_ClkConfig( heth );
 801902c:	6878      	ldr	r0, [r7, #4]
 801902e:	f001 f94b 	bl	801a2c8 <ETH_MAC_MDIO_ClkConfig>

            /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
            WRITE_REG( heth->Instance->MAC1USTCR, ( ( ( uint32_t ) HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK ) - 1U ) );
 8019032:	f004 ff49 	bl	801dec8 <HAL_RCC_GetHCLKFreq>
 8019036:	4603      	mov	r3, r0
 8019038:	4a42      	ldr	r2, [pc, #264]	@ (8019144 <HAL_ETH_Init+0x1c8>)
 801903a:	fba2 2303 	umull	r2, r3, r2, r3
 801903e:	0c9a      	lsrs	r2, r3, #18
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	681b      	ldr	r3, [r3, #0]
 8019044:	3a01      	subs	r2, #1
 8019046:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

            /*------------------ MAC, MTL and DMA default Configuration ----------------*/
            ETH_MACDMAConfig( heth );
 801904a:	6878      	ldr	r0, [r7, #4]
 801904c:	f001 f89e 	bl	801a18c <ETH_MACDMAConfig>

            /* SET DSL to 64 bit */
            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT );
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	681b      	ldr	r3, [r3, #0]
 8019054:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019058:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 801905c:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8019060:	687a      	ldr	r2, [r7, #4]
 8019062:	6812      	ldr	r2, [r2, #0]
 8019064:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8019068:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801906c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

            /* Set Receive Buffers Length (must be a multiple of 4) */
            if( ( heth->Init.RxBuffLen % 0x4U ) != 0x0U )
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	695b      	ldr	r3, [r3, #20]
 8019074:	f003 0303 	and.w	r3, r3, #3
 8019078:	2b00      	cmp	r3, #0
 801907a:	d008      	beq.n	801908e <HAL_ETH_Init+0x112>
            {
                /* Set Error Code */
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	2201      	movs	r2, #1
 8019080:	661a      	str	r2, [r3, #96]	@ 0x60
                /* Set State as Error */
                set_error_state( heth, HAL_ETH_STATE_ERROR );
 8019082:	21e0      	movs	r1, #224	@ 0xe0
 8019084:	6878      	ldr	r0, [r7, #4]
 8019086:	f7ff ff6b 	bl	8018f60 <set_error_state>
                /* Return Error */
                return HAL_ERROR;
 801908a:	2301      	movs	r3, #1
 801908c:	e054      	b.n	8019138 <HAL_ETH_Init+0x1bc>
            }
            else
            {
                MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ( ( heth->Init.RxBuffLen ) << 1 ) );
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	681b      	ldr	r3, [r3, #0]
 8019092:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019096:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 801909a:	4b2b      	ldr	r3, [pc, #172]	@ (8019148 <HAL_ETH_Init+0x1cc>)
 801909c:	4013      	ands	r3, r2
 801909e:	687a      	ldr	r2, [r7, #4]
 80190a0:	6952      	ldr	r2, [r2, #20]
 80190a2:	0051      	lsls	r1, r2, #1
 80190a4:	687a      	ldr	r2, [r7, #4]
 80190a6:	6812      	ldr	r2, [r2, #0]
 80190a8:	430b      	orrs	r3, r1
 80190aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80190ae:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
            }

            /*------------------ DMA Tx Descriptors Configuration ----------------------*/
            ETH_DMATxDescListInit( heth );
 80190b2:	6878      	ldr	r0, [r7, #4]
 80190b4:	f001 f960 	bl	801a378 <ETH_DMATxDescListInit>

            /*------------------ DMA Rx Descriptors Configuration ----------------------*/
            ETH_DMARxDescListInit( heth );
 80190b8:	6878      	ldr	r0, [r7, #4]
 80190ba:	f001 f9a9 	bl	801a410 <ETH_DMARxDescListInit>

            /*--------------------- ETHERNET MAC Address Configuration ------------------*/
            /* Set MAC addr bits 32 to 47 */
            heth->Instance->MACA0HR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 5 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 4 ] );
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	685b      	ldr	r3, [r3, #4]
 80190c2:	3305      	adds	r3, #5
 80190c4:	781b      	ldrb	r3, [r3, #0]
 80190c6:	021a      	lsls	r2, r3, #8
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	685b      	ldr	r3, [r3, #4]
 80190cc:	3304      	adds	r3, #4
 80190ce:	781b      	ldrb	r3, [r3, #0]
 80190d0:	4619      	mov	r1, r3
 80190d2:	687b      	ldr	r3, [r7, #4]
 80190d4:	681b      	ldr	r3, [r3, #0]
 80190d6:	430a      	orrs	r2, r1
 80190d8:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
            /* Set MAC addr bits 0 to 31 */
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	685b      	ldr	r3, [r3, #4]
 80190e0:	3303      	adds	r3, #3
 80190e2:	781b      	ldrb	r3, [r3, #0]
 80190e4:	061a      	lsls	r2, r3, #24
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	685b      	ldr	r3, [r3, #4]
 80190ea:	3302      	adds	r3, #2
 80190ec:	781b      	ldrb	r3, [r3, #0]
 80190ee:	041b      	lsls	r3, r3, #16
 80190f0:	431a      	orrs	r2, r3
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	685b      	ldr	r3, [r3, #4]
 80190f6:	3301      	adds	r3, #1
 80190f8:	781b      	ldrb	r3, [r3, #0]
 80190fa:	021b      	lsls	r3, r3, #8
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 80190fc:	431a      	orrs	r2, r3
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 80190fe:	687b      	ldr	r3, [r7, #4]
 8019100:	685b      	ldr	r3, [r3, #4]
 8019102:	781b      	ldrb	r3, [r3, #0]
 8019104:	4619      	mov	r1, r3
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	681b      	ldr	r3, [r3, #0]
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 801910a:	430a      	orrs	r2, r1
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 801910c:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

            heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	2200      	movs	r2, #0
 8019114:	661a      	str	r2, [r3, #96]	@ 0x60
            heth->gState = HAL_ETH_STATE_READY;
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	2210      	movs	r2, #16
 801911a:	659a      	str	r2, [r3, #88]	@ 0x58
            heth->RxState = HAL_ETH_STATE_READY;
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	2210      	movs	r2, #16
 8019120:	65da      	str	r2, [r3, #92]	@ 0x5c
             * Disable the interrupts that are related to the MMC counters.
             * These interrupts are enabled by default. The interrupt can
             * only be acknowledged by reading the corresponding counter.
             */

            heth->Instance->MMCRIMR =
 8019122:	687b      	ldr	r3, [r7, #4]
 8019124:	681b      	ldr	r3, [r3, #0]
 8019126:	4a09      	ldr	r2, [pc, #36]	@ (801914c <HAL_ETH_Init+0x1d0>)
 8019128:	f8c3 270c 	str.w	r2, [r3, #1804]	@ 0x70c
                ETH_MMCRIMR_RXLPIUSCIM |  /* RXLPIUSC */
                ETH_MMCRIMR_RXUCGPIM |    /* RXUCASTG */
                ETH_MMCRIMR_RXALGNERPIM | /* RXALGNERR */
                ETH_MMCRIMR_RXCRCERPIM;   /* RXCRCERR */

            heth->Instance->MMCTIMR =
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	681b      	ldr	r3, [r3, #0]
 8019130:	4a07      	ldr	r2, [pc, #28]	@ (8019150 <HAL_ETH_Init+0x1d4>)
 8019132:	f8c3 2710 	str.w	r2, [r3, #1808]	@ 0x710
                ETH_MMCTIMR_TXLPIUSCIM | /* TXLPIUSC */
                ETH_MMCTIMR_TXGPKTIM |   /* TXPKTG */
                ETH_MMCTIMR_TXMCOLGPIM | /* TXMULTCOLG */
                ETH_MMCTIMR_TXSCOLGPIM;  /* TXSNGLCOLG */

            return HAL_OK;
 8019136:	2300      	movs	r3, #0
        }
 8019138:	4618      	mov	r0, r3
 801913a:	3710      	adds	r7, #16
 801913c:	46bd      	mov	sp, r7
 801913e:	bd80      	pop	{r7, pc}
 8019140:	58024400 	.word	0x58024400
 8019144:	431bde83 	.word	0x431bde83
 8019148:	ffff8001 	.word	0xffff8001
 801914c:	0c020060 	.word	0x0c020060
 8019150:	0c20c000 	.word	0x0c20c000

08019154 <HAL_ETH_DescAssignMemory>:
 */
        HAL_StatusTypeDef HAL_ETH_DescAssignMemory( ETH_HandleTypeDef * heth,
                                                    uint32_t Index,
                                                    uint8_t * pBuffer1,
                                                    uint8_t * pBuffer2 )
        {
 8019154:	b480      	push	{r7}
 8019156:	b087      	sub	sp, #28
 8019158:	af00      	add	r7, sp, #0
 801915a:	60f8      	str	r0, [r7, #12]
 801915c:	60b9      	str	r1, [r7, #8]
 801915e:	607a      	str	r2, [r7, #4]
 8019160:	603b      	str	r3, [r7, #0]
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ Index ];
 8019162:	68fb      	ldr	r3, [r7, #12]
 8019164:	68ba      	ldr	r2, [r7, #8]
 8019166:	320c      	adds	r2, #12
 8019168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801916c:	617b      	str	r3, [r7, #20]

            if( ( pBuffer1 == NULL ) || ( Index >= ( uint32_t ) ETH_RX_DESC_CNT ) )
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	2b00      	cmp	r3, #0
 8019172:	d002      	beq.n	801917a <HAL_ETH_DescAssignMemory+0x26>
 8019174:	68bb      	ldr	r3, [r7, #8]
 8019176:	2b03      	cmp	r3, #3
 8019178:	d904      	bls.n	8019184 <HAL_ETH_DescAssignMemory+0x30>
            {
                /* Set Error Code */
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 801917a:	68fb      	ldr	r3, [r7, #12]
 801917c:	2201      	movs	r2, #1
 801917e:	661a      	str	r2, [r3, #96]	@ 0x60
                /* Return Error */
                return HAL_ERROR;
 8019180:	2301      	movs	r3, #1
 8019182:	e014      	b.n	80191ae <HAL_ETH_DescAssignMemory+0x5a>
            }

            /* write buffer address to RDES0 */
            WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pBuffer1 );
 8019184:	687a      	ldr	r2, [r7, #4]
 8019186:	697b      	ldr	r3, [r7, #20]
 8019188:	601a      	str	r2, [r3, #0]
            /* store buffer address */
            WRITE_REG( dmarxdesc->BackupAddr0, ( uint32_t ) pBuffer1 );
 801918a:	687a      	ldr	r2, [r7, #4]
 801918c:	697b      	ldr	r3, [r7, #20]
 801918e:	611a      	str	r2, [r3, #16]
            /* set buffer address valid bit to RDES3 */
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V );
 8019190:	697b      	ldr	r3, [r7, #20]
 8019192:	68db      	ldr	r3, [r3, #12]
 8019194:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8019198:	697b      	ldr	r3, [r7, #20]
 801919a:	60da      	str	r2, [r3, #12]
/*		/ * set buffer 2 address valid bit to RDES3 * / */
/*		SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V); */
/*	} */

            /* set OWN bit to RDES3 */
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN );
 801919c:	697b      	ldr	r3, [r7, #20]
 801919e:	68db      	ldr	r3, [r3, #12]
 80191a0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80191a4:	697b      	ldr	r3, [r7, #20]
 80191a6:	60da      	str	r2, [r3, #12]
            ( void ) dmarxdesc->DESC3;
 80191a8:	697b      	ldr	r3, [r7, #20]
 80191aa:	68db      	ldr	r3, [r3, #12]

            return HAL_OK;
 80191ac:	2300      	movs	r3, #0
        }
 80191ae:	4618      	mov	r0, r3
 80191b0:	371c      	adds	r7, #28
 80191b2:	46bd      	mov	sp, r7
 80191b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191b8:	4770      	bx	lr

080191ba <HAL_ETH_Start_IT>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Start_IT( ETH_HandleTypeDef * heth )
        {
 80191ba:	b480      	push	{r7}
 80191bc:	b085      	sub	sp, #20
 80191be:	af00      	add	r7, sp, #0
 80191c0:	6078      	str	r0, [r7, #4]
            uint32_t desc_index;

            if( heth->gState == HAL_ETH_STATE_READY )
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80191c6:	2b10      	cmp	r3, #16
 80191c8:	d175      	bne.n	80192b6 <HAL_ETH_Start_IT+0xfc>
            {
                heth->gState = HAL_ETH_STATE_BUSY;
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	2223      	movs	r2, #35	@ 0x23
 80191ce:	659a      	str	r2, [r3, #88]	@ 0x58

                /* Set IOC bit (Interrupt Enabled on Completion) to all Rx descriptors */
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 80191d0:	2300      	movs	r3, #0
 80191d2:	60fb      	str	r3, [r7, #12]
 80191d4:	e00e      	b.n	80191f4 <HAL_ETH_Start_IT+0x3a>
                {
                    ETH_DMADescTypeDef * dma_rx_desc;

                    dma_rx_desc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ desc_index ];
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	68fa      	ldr	r2, [r7, #12]
 80191da:	320c      	adds	r2, #12
 80191dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80191e0:	60bb      	str	r3, [r7, #8]
                    SET_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCRF_IOC );
 80191e2:	68bb      	ldr	r3, [r7, #8]
 80191e4:	68db      	ldr	r3, [r3, #12]
 80191e6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80191ea:	68bb      	ldr	r3, [r7, #8]
 80191ec:	60da      	str	r2, [r3, #12]
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 80191ee:	68fb      	ldr	r3, [r7, #12]
 80191f0:	3301      	adds	r3, #1
 80191f2:	60fb      	str	r3, [r7, #12]
 80191f4:	68fb      	ldr	r3, [r7, #12]
 80191f6:	2b03      	cmp	r3, #3
 80191f8:	d9ed      	bls.n	80191d6 <HAL_ETH_Start_IT+0x1c>
                }

                /* save IT mode to ETH Handle */
                heth->RxDescList.ItMode = 1U;
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	2201      	movs	r2, #1
 80191fe:	651a      	str	r2, [r3, #80]	@ 0x50

                /* Enable the MAC transmission */
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	681b      	ldr	r3, [r3, #0]
 8019204:	681a      	ldr	r2, [r3, #0]
 8019206:	687b      	ldr	r3, [r7, #4]
 8019208:	681b      	ldr	r3, [r3, #0]
 801920a:	f042 0202 	orr.w	r2, r2, #2
 801920e:	601a      	str	r2, [r3, #0]

                /* Enable the MAC reception */
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	681b      	ldr	r3, [r3, #0]
 8019214:	681a      	ldr	r2, [r3, #0]
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	681b      	ldr	r3, [r3, #0]
 801921a:	f042 0201 	orr.w	r2, r2, #1
 801921e:	601a      	str	r2, [r3, #0]

                /* Set the Flush Transmit FIFO bit */
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	681b      	ldr	r3, [r3, #0]
 8019224:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	681b      	ldr	r3, [r3, #0]
 801922c:	f042 0201 	orr.w	r2, r2, #1
 8019230:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

                /* Enable the DMA transmission */
                SET_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801923c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8019240:	687a      	ldr	r2, [r7, #4]
 8019242:	6812      	ldr	r2, [r2, #0]
 8019244:	f043 0301 	orr.w	r3, r3, #1
 8019248:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801924c:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

                /* Enable the DMA reception */
                SET_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	681b      	ldr	r3, [r3, #0]
 8019254:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019258:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801925c:	687a      	ldr	r2, [r7, #4]
 801925e:	6812      	ldr	r2, [r2, #0]
 8019260:	f043 0301 	orr.w	r3, r3, #1
 8019264:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019268:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

                /* Clear Tx and Rx process stopped flags */
                heth->Instance->DMACSR |= ( ETH_DMACSR_TPS | ETH_DMACSR_RPS );
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	681b      	ldr	r3, [r3, #0]
 8019270:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019274:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8019278:	687a      	ldr	r2, [r7, #4]
 801927a:	6812      	ldr	r2, [r2, #0]
 801927c:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8019280:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019284:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                /* Enable ETH DMA interrupts:
                 * - Tx complete interrupt
                 * - Rx complete interrupt
                 * - Fatal bus interrupt
                 */
                __HAL_ETH_DMA_ENABLE_IT( heth,
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	681b      	ldr	r3, [r3, #0]
 801928c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019290:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	681a      	ldr	r2, [r3, #0]
 8019298:	f24d 0341 	movw	r3, #53313	@ 0xd041
 801929c:	430b      	orrs	r3, r1
 801929e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80192a2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                         ETH_DMACIER_RIE |  /* Receive Interrupt Enable */
                                         ETH_DMACIER_TIE |  /* Transmit Interrupt Enable */
                                         ETH_DMACIER_FBEE | /* Fatal Bus Error Enable */
                                         ETH_DMACIER_AIE ); /* Abnormal Interrupt Summary Enable */

                heth->gState = HAL_ETH_STATE_READY;
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	2210      	movs	r2, #16
 80192aa:	659a      	str	r2, [r3, #88]	@ 0x58
                heth->RxState = HAL_ETH_STATE_BUSY_RX;
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	2222      	movs	r2, #34	@ 0x22
 80192b0:	65da      	str	r2, [r3, #92]	@ 0x5c

                return HAL_OK;
 80192b2:	2300      	movs	r3, #0
 80192b4:	e000      	b.n	80192b8 <HAL_ETH_Start_IT+0xfe>
            }
            else
            {
                return HAL_ERROR;
 80192b6:	2301      	movs	r3, #1
            }
        }
 80192b8:	4618      	mov	r0, r3
 80192ba:	3714      	adds	r7, #20
 80192bc:	46bd      	mov	sp, r7
 80192be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192c2:	4770      	bx	lr

080192c4 <HAL_ETH_Stop_IT>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Stop_IT( ETH_HandleTypeDef * heth )
        {
 80192c4:	b480      	push	{r7}
 80192c6:	b085      	sub	sp, #20
 80192c8:	af00      	add	r7, sp, #0
 80192ca:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmarxdesc;
            uint32_t descindex;

            if( heth->gState != HAL_ETH_STATE_RESET )
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	d066      	beq.n	80193a2 <HAL_ETH_Stop_IT+0xde>
            {
                /* Set the ETH peripheral state to BUSY */
                heth->gState = HAL_ETH_STATE_BUSY;
 80192d4:	687b      	ldr	r3, [r7, #4]
 80192d6:	2223      	movs	r2, #35	@ 0x23
 80192d8:	659a      	str	r2, [r3, #88]	@ 0x58
                /* Disable interrupts:
                 * - Tx complete interrupt
                 * - Rx complete interrupt
                 * - Fatal bus interrupt
                 */
                __HAL_ETH_DMA_DISABLE_IT( heth, ( ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE |
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	681b      	ldr	r3, [r3, #0]
 80192de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80192e2:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	681a      	ldr	r2, [r3, #0]
 80192ea:	4b31      	ldr	r3, [pc, #196]	@ (80193b0 <HAL_ETH_Stop_IT+0xec>)
 80192ec:	400b      	ands	r3, r1
 80192ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80192f2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                                  ETH_DMACIER_FBEE | ETH_DMACIER_AIE ) );

                /* Disable the DMA transmission */
                CLEAR_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	681b      	ldr	r3, [r3, #0]
 80192fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80192fe:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8019302:	687a      	ldr	r2, [r7, #4]
 8019304:	6812      	ldr	r2, [r2, #0]
 8019306:	f023 0301 	bic.w	r3, r3, #1
 801930a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801930e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

                /* Disable the DMA reception */
                CLEAR_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	681b      	ldr	r3, [r3, #0]
 8019316:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801931a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801931e:	687a      	ldr	r2, [r7, #4]
 8019320:	6812      	ldr	r2, [r2, #0]
 8019322:	f023 0301 	bic.w	r3, r3, #1
 8019326:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801932a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

                /* Disable the MAC reception */
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	681b      	ldr	r3, [r3, #0]
 8019332:	681a      	ldr	r2, [r3, #0]
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	681b      	ldr	r3, [r3, #0]
 8019338:	f022 0201 	bic.w	r2, r2, #1
 801933c:	601a      	str	r2, [r3, #0]

                /* Set the Flush Transmit FIFO bit */
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	681b      	ldr	r3, [r3, #0]
 8019342:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	681b      	ldr	r3, [r3, #0]
 801934a:	f042 0201 	orr.w	r2, r2, #1
 801934e:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

                /* Disable the MAC transmission */
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	681b      	ldr	r3, [r3, #0]
 8019356:	681a      	ldr	r2, [r3, #0]
 8019358:	687b      	ldr	r3, [r7, #4]
 801935a:	681b      	ldr	r3, [r3, #0]
 801935c:	f022 0202 	bic.w	r2, r2, #2
 8019360:	601a      	str	r2, [r3, #0]

                /* Clear IOC bit (Interrupt Enabled on Completion) to all Rx descriptors */
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 8019362:	2300      	movs	r3, #0
 8019364:	60fb      	str	r3, [r7, #12]
 8019366:	e00e      	b.n	8019386 <HAL_ETH_Stop_IT+0xc2>
                {
                    dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ descindex ];
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	68fa      	ldr	r2, [r7, #12]
 801936c:	320c      	adds	r2, #12
 801936e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019372:	60bb      	str	r3, [r7, #8]
                    CLEAR_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC );
 8019374:	68bb      	ldr	r3, [r7, #8]
 8019376:	68db      	ldr	r3, [r3, #12]
 8019378:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 801937c:	68bb      	ldr	r3, [r7, #8]
 801937e:	60da      	str	r2, [r3, #12]
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 8019380:	68fb      	ldr	r3, [r7, #12]
 8019382:	3301      	adds	r3, #1
 8019384:	60fb      	str	r3, [r7, #12]
 8019386:	68fb      	ldr	r3, [r7, #12]
 8019388:	2b03      	cmp	r3, #3
 801938a:	d9ed      	bls.n	8019368 <HAL_ETH_Stop_IT+0xa4>
                }

                heth->RxDescList.ItMode = 0U;
 801938c:	687b      	ldr	r3, [r7, #4]
 801938e:	2200      	movs	r2, #0
 8019390:	651a      	str	r2, [r3, #80]	@ 0x50

                heth->gState = HAL_ETH_STATE_READY;
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	2210      	movs	r2, #16
 8019396:	659a      	str	r2, [r3, #88]	@ 0x58
                heth->RxState = HAL_ETH_STATE_READY;
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	2210      	movs	r2, #16
 801939c:	65da      	str	r2, [r3, #92]	@ 0x5c

                /* Return function status */
                return HAL_OK;
 801939e:	2300      	movs	r3, #0
 80193a0:	e000      	b.n	80193a4 <HAL_ETH_Stop_IT+0xe0>
            }
            else
            {
                return HAL_ERROR;
 80193a2:	2301      	movs	r3, #1
            }
        }
 80193a4:	4618      	mov	r0, r3
 80193a6:	3714      	adds	r7, #20
 80193a8:	46bd      	mov	sp, r7
 80193aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ae:	4770      	bx	lr
 80193b0:	ffff2fbe 	.word	0xffff2fbe

080193b4 <HAL_ETH_Transmit_IT>:
 * @param  pTxConfig: Hold the configuration of packet to be transmitted
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Transmit_IT( ETH_HandleTypeDef * heth,
                                               ETH_TxPacketConfig * pTxConfig )
        {
 80193b4:	b580      	push	{r7, lr}
 80193b6:	b082      	sub	sp, #8
 80193b8:	af00      	add	r7, sp, #0
 80193ba:	6078      	str	r0, [r7, #4]
 80193bc:	6039      	str	r1, [r7, #0]
            if( pTxConfig == NULL )
 80193be:	683b      	ldr	r3, [r7, #0]
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	d107      	bne.n	80193d4 <HAL_ETH_Transmit_IT+0x20>
            {
                heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80193c4:	687b      	ldr	r3, [r7, #4]
 80193c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80193c8:	f043 0201 	orr.w	r2, r3, #1
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	661a      	str	r2, [r3, #96]	@ 0x60
                return HAL_ERROR;
 80193d0:	2301      	movs	r3, #1
 80193d2:	e039      	b.n	8019448 <HAL_ETH_Transmit_IT+0x94>
            }

            if( heth->gState == HAL_ETH_STATE_READY )
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80193d8:	2b10      	cmp	r3, #16
 80193da:	d134      	bne.n	8019446 <HAL_ETH_Transmit_IT+0x92>
            {
                /* Config DMA Tx descriptor by Tx Packet info */
                if( ETH_Prepare_Tx_Descriptors( heth, pTxConfig, 1 ) != HAL_ETH_ERROR_NONE )
 80193dc:	2201      	movs	r2, #1
 80193de:	6839      	ldr	r1, [r7, #0]
 80193e0:	6878      	ldr	r0, [r7, #4]
 80193e2:	f001 f8c1 	bl	801a568 <ETH_Prepare_Tx_Descriptors>
 80193e6:	4603      	mov	r3, r0
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	d007      	beq.n	80193fc <HAL_ETH_Transmit_IT+0x48>
                {
                    heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80193f0:	f043 0202 	orr.w	r2, r3, #2
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	661a      	str	r2, [r3, #96]	@ 0x60
                    return HAL_ERROR;
 80193f8:	2301      	movs	r3, #1
 80193fa:	e025      	b.n	8019448 <HAL_ETH_Transmit_IT+0x94>
                }

                /* Incr current tx desc index */
                INCR_TX_DESC_INDEX( heth->TxDescList.CurTxDesc, 1U );
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019400:	1c5a      	adds	r2, r3, #1
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	629a      	str	r2, [r3, #40]	@ 0x28
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801940a:	2b03      	cmp	r3, #3
 801940c:	d904      	bls.n	8019418 <HAL_ETH_Transmit_IT+0x64>
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019412:	1f1a      	subs	r2, r3, #4
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	629a      	str	r2, [r3, #40]	@ 0x28
                 * DMACTDTPR: "Channel Tx descriptor tail pointer register (ETH_DMACTXDTPR)
                 * The hardware tries to transmit all packets referenced by the
                 * descriptors between the head and the tail pointer registers.
                 */

                WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) ( heth->TxDescList.TxDesc[ heth->TxDescList.CurTxDesc ] ) );
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	681a      	ldr	r2, [r3, #0]
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	3106      	adds	r1, #6
 8019424:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019428:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801942c:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
  __ASM volatile ("dsb 0xF":::"memory");
 8019430:	f3bf 8f4f 	dsb	sy
}
 8019434:	bf00      	nop
                /* Memory barrier. */
                __DSB();
                /* Read-back the value just written. */
                ( void ) heth->Instance->DMACTDTPR;
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	681b      	ldr	r3, [r3, #0]
 801943a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801943e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120

                return HAL_OK;
 8019442:	2300      	movs	r3, #0
 8019444:	e000      	b.n	8019448 <HAL_ETH_Transmit_IT+0x94>
            }
            else
            {
                return HAL_ERROR;
 8019446:	2301      	movs	r3, #1
            }
        }
 8019448:	4618      	mov	r0, r3
 801944a:	3708      	adds	r7, #8
 801944c:	46bd      	mov	sp, r7
 801944e:	bd80      	pop	{r7, pc}

08019450 <HAL_ETH_IsRxDataAvailable>:
 *         the configuration information for ETHERNET module
 * @retval  1: A Packet is received
 *          0: no Packet received
 */
        uint8_t HAL_ETH_IsRxDataAvailable( ETH_HandleTypeDef * heth )
        {
 8019450:	b580      	push	{r7, lr}
 8019452:	b08a      	sub	sp, #40	@ 0x28
 8019454:	af00      	add	r7, sp, #0
 8019456:	6078      	str	r0, [r7, #4]
            ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	3330      	adds	r3, #48	@ 0x30
 801945c:	61bb      	str	r3, [r7, #24]
            uint32_t desc_index = dmarxdesclist->CurRxDesc;
 801945e:	69bb      	ldr	r3, [r7, #24]
 8019460:	691b      	ldr	r3, [r3, #16]
 8019462:	627b      	str	r3, [r7, #36]	@ 0x24
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8019464:	69bb      	ldr	r3, [r7, #24]
 8019466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801946c:	617b      	str	r3, [r7, #20]
            uint32_t desc_scan_count = 0;
 801946e:	2300      	movs	r3, #0
 8019470:	623b      	str	r3, [r7, #32]
            uint32_t app_desc_count = 0;       /* Number of descriptors in received packet. */
 8019472:	2300      	movs	r3, #0
 8019474:	613b      	str	r3, [r7, #16]
            uint32_t first_app_desc_index = 0; /* Index of the first descriptor of received packet.. */
 8019476:	2300      	movs	r3, #0
 8019478:	61fb      	str	r3, [r7, #28]

            /* Check if descriptor is not owned by DMA */
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 801947a:	e055      	b.n	8019528 <HAL_ETH_IsRxDataAvailable+0xd8>
                   ( desc_scan_count < ( uint32_t ) ETH_RX_DESC_CNT ) )
            {
                uint32_t ulDesc3 = dmarxdesc->DESC3;
 801947c:	697b      	ldr	r3, [r7, #20]
 801947e:	68db      	ldr	r3, [r3, #12]
 8019480:	60fb      	str	r3, [r7, #12]
                desc_scan_count++;
 8019482:	6a3b      	ldr	r3, [r7, #32]
 8019484:	3301      	adds	r3, #1
 8019486:	623b      	str	r3, [r7, #32]

                /* FreeRTOS+TCP only handles packets that fit in 1 descriptor. */
                configASSERT( ( ( ulDesc3 & ETH_DMATXNDESCWBF_FD ) != 0U ) && ( ( ulDesc3 & ETH_DMATXNDESCWBF_LD ) != 0U ) );
 8019488:	68fb      	ldr	r3, [r7, #12]
 801948a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801948e:	2b00      	cmp	r3, #0
 8019490:	d006      	beq.n	80194a0 <HAL_ETH_IsRxDataAvailable+0x50>
 8019492:	68fb      	ldr	r3, [r7, #12]
 8019494:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8019498:	2b00      	cmp	r3, #0
 801949a:	d001      	beq.n	80194a0 <HAL_ETH_IsRxDataAvailable+0x50>
 801949c:	2301      	movs	r3, #1
 801949e:	e000      	b.n	80194a2 <HAL_ETH_IsRxDataAvailable+0x52>
 80194a0:	2300      	movs	r3, #0
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	d104      	bne.n	80194b0 <HAL_ETH_IsRxDataAvailable+0x60>
 80194a6:	f240 4195 	movw	r1, #1173	@ 0x495
 80194aa:	482b      	ldr	r0, [pc, #172]	@ (8019558 <HAL_ETH_IsRxDataAvailable+0x108>)
 80194ac:	f7e8 faac 	bl	8001a08 <vAssertCalled>

                /* Check if last descriptor */
                if( READ_BIT( ulDesc3, ETH_DMARXNDESCWBF_LD ) != ( uint32_t ) RESET )
 80194b0:	68fb      	ldr	r3, [r7, #12]
 80194b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	d036      	beq.n	8019528 <HAL_ETH_IsRxDataAvailable+0xd8>
                {
                    /* Increment the number of descriptors to be passed to the application */
                    app_desc_count += 1U;
 80194ba:	693b      	ldr	r3, [r7, #16]
 80194bc:	3301      	adds	r3, #1
 80194be:	613b      	str	r3, [r7, #16]

                    if( app_desc_count == 1U )
 80194c0:	693b      	ldr	r3, [r7, #16]
 80194c2:	2b01      	cmp	r3, #1
 80194c4:	d101      	bne.n	80194ca <HAL_ETH_IsRxDataAvailable+0x7a>
                    {
                        first_app_desc_index = desc_index;
 80194c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194c8:	61fb      	str	r3, [r7, #28]
                    }

                    /* Increment current rx descriptor index */
                    INCR_RX_DESC_INDEX( desc_index, 1U );
 80194ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194cc:	3301      	adds	r3, #1
 80194ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80194d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194d2:	2b03      	cmp	r3, #3
 80194d4:	d902      	bls.n	80194dc <HAL_ETH_IsRxDataAvailable+0x8c>
 80194d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194d8:	3b04      	subs	r3, #4
 80194da:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* Check for Context descriptor */
                    /* Get current descriptor address */
                    dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 80194dc:	69bb      	ldr	r3, [r7, #24]
 80194de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80194e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80194e4:	617b      	str	r3, [r7, #20]

                    if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET )
 80194e6:	697b      	ldr	r3, [r7, #20]
 80194e8:	68db      	ldr	r3, [r3, #12]
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	db11      	blt.n	8019512 <HAL_ETH_IsRxDataAvailable+0xc2>
                    {
                        /* If IEEE 1588 timestamp feature is enabled, the DMA stores the timestamp
                        * (if available). The DMA writes the context descriptor after the last
                        * descriptor for the current packet (in the next available descriptor). */
                        if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_CTXT ) != ( uint32_t ) RESET )
 80194ee:	697b      	ldr	r3, [r7, #20]
 80194f0:	68db      	ldr	r3, [r3, #12]
 80194f2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	d00b      	beq.n	8019512 <HAL_ETH_IsRxDataAvailable+0xc2>
                        {
                            /* Increment the number of descriptors to be passed to the application */
                            dmarxdesclist->AppContextDesc = 1;
 80194fa:	69bb      	ldr	r3, [r7, #24]
 80194fc:	2201      	movs	r2, #1
 80194fe:	61da      	str	r2, [r3, #28]
                            /* Increment current rx descriptor index */
                            INCR_RX_DESC_INDEX( desc_index, 1U );
 8019500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019502:	3301      	adds	r3, #1
 8019504:	627b      	str	r3, [r7, #36]	@ 0x24
 8019506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019508:	2b03      	cmp	r3, #3
 801950a:	d902      	bls.n	8019512 <HAL_ETH_IsRxDataAvailable+0xc2>
 801950c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801950e:	3b04      	subs	r3, #4
 8019510:	627b      	str	r3, [r7, #36]	@ 0x24
                        }
                    }

                    /* Fill information to Rx descriptors list */
                    dmarxdesclist->CurRxDesc = desc_index;
 8019512:	69bb      	ldr	r3, [r7, #24]
 8019514:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019516:	611a      	str	r2, [r3, #16]
                    dmarxdesclist->FirstAppDesc = first_app_desc_index;
 8019518:	69bb      	ldr	r3, [r7, #24]
 801951a:	69fa      	ldr	r2, [r7, #28]
 801951c:	615a      	str	r2, [r3, #20]
                    dmarxdesclist->AppDescNbr = app_desc_count;
 801951e:	69bb      	ldr	r3, [r7, #24]
 8019520:	693a      	ldr	r2, [r7, #16]
 8019522:	619a      	str	r2, [r3, #24]

                    /* Return function status */
                    return 1;
 8019524:	2301      	movs	r3, #1
 8019526:	e012      	b.n	801954e <HAL_ETH_IsRxDataAvailable+0xfe>
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 8019528:	697b      	ldr	r3, [r7, #20]
 801952a:	68db      	ldr	r3, [r3, #12]
 801952c:	2b00      	cmp	r3, #0
 801952e:	db02      	blt.n	8019536 <HAL_ETH_IsRxDataAvailable+0xe6>
 8019530:	6a3b      	ldr	r3, [r7, #32]
 8019532:	2b03      	cmp	r3, #3
 8019534:	d9a2      	bls.n	801947c <HAL_ETH_IsRxDataAvailable+0x2c>
/*			/ * Get current descriptor address * / */
/*			dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[desc_index]; */
/*		} */
            } /* while ( OWN == 0 ) */

            configASSERT( app_desc_count == 0 );
 8019536:	693b      	ldr	r3, [r7, #16]
 8019538:	2b00      	cmp	r3, #0
 801953a:	d004      	beq.n	8019546 <HAL_ETH_IsRxDataAvailable+0xf6>
 801953c:	f240 41db 	movw	r1, #1243	@ 0x4db
 8019540:	4805      	ldr	r0, [pc, #20]	@ (8019558 <HAL_ETH_IsRxDataAvailable+0x108>)
 8019542:	f7e8 fa61 	bl	8001a08 <vAssertCalled>
/*		/ * Set the Tail pointer address to the last rx descriptor hold by the app * / */
/*		WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc); */
/*	} */

            /* Fill information to Rx descriptors list: No received Packet */
            dmarxdesclist->AppDescNbr = 0U;
 8019546:	69bb      	ldr	r3, [r7, #24]
 8019548:	2200      	movs	r2, #0
 801954a:	619a      	str	r2, [r3, #24]

            return 0;
 801954c:	2300      	movs	r3, #0
        }
 801954e:	4618      	mov	r0, r3
 8019550:	3728      	adds	r7, #40	@ 0x28
 8019552:	46bd      	mov	sp, r7
 8019554:	bd80      	pop	{r7, pc}
 8019556:	bf00      	nop
 8019558:	08027dd4 	.word	0x08027dd4

0801955c <HAL_ETH_GetRxData>:
 * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
 * @retval HAL status
 */
        size_t HAL_ETH_GetRxData( ETH_HandleTypeDef * heth,
                                  ETH_BufferTypeDef * RxBuffer )
        {
 801955c:	b580      	push	{r7, lr}
 801955e:	b086      	sub	sp, #24
 8019560:	af00      	add	r7, sp, #0
 8019562:	6078      	str	r0, [r7, #4]
 8019564:	6039      	str	r1, [r7, #0]
            ETH_RxDescListTypeDef * dmarxdesclist = &( heth->RxDescList );
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	3330      	adds	r3, #48	@ 0x30
 801956a:	617b      	str	r3, [r7, #20]
            uint32_t desc_index;
            uint32_t packet_length;
            __IO const ETH_DMADescTypeDef * dma_rx_desc;

            configASSERT( RxBuffer != NULL );
 801956c:	683b      	ldr	r3, [r7, #0]
 801956e:	2b00      	cmp	r3, #0
 8019570:	d104      	bne.n	801957c <HAL_ETH_GetRxData+0x20>
 8019572:	f240 511f 	movw	r1, #1311	@ 0x51f
 8019576:	481c      	ldr	r0, [pc, #112]	@ (80195e8 <HAL_ETH_GetRxData+0x8c>)
 8019578:	f7e8 fa46 	bl	8001a08 <vAssertCalled>

            if( HAL_ETH_IsRxDataAvailable( heth ) == 0U )
 801957c:	6878      	ldr	r0, [r7, #4]
 801957e:	f7ff ff67 	bl	8019450 <HAL_ETH_IsRxDataAvailable>
 8019582:	4603      	mov	r3, r0
 8019584:	2b00      	cmp	r3, #0
 8019586:	d101      	bne.n	801958c <HAL_ETH_GetRxData+0x30>
            {
                /* No data to be transferred to the application */
                return 0U;
 8019588:	2300      	movs	r3, #0
 801958a:	e028      	b.n	80195de <HAL_ETH_GetRxData+0x82>
            }

            desc_index = dmarxdesclist->FirstAppDesc;
 801958c:	697b      	ldr	r3, [r7, #20]
 801958e:	695b      	ldr	r3, [r3, #20]
 8019590:	613b      	str	r3, [r7, #16]
            dma_rx_desc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8019592:	697b      	ldr	r3, [r7, #20]
 8019594:	693a      	ldr	r2, [r7, #16]
 8019596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801959a:	60fb      	str	r3, [r7, #12]

            configASSERT( dmarxdesclist->AppDescNbr == 1 );
 801959c:	697b      	ldr	r3, [r7, #20]
 801959e:	699b      	ldr	r3, [r3, #24]
 80195a0:	2b01      	cmp	r3, #1
 80195a2:	d004      	beq.n	80195ae <HAL_ETH_GetRxData+0x52>
 80195a4:	f240 512a 	movw	r1, #1322	@ 0x52a
 80195a8:	480f      	ldr	r0, [pc, #60]	@ (80195e8 <HAL_ETH_GetRxData+0x8c>)
 80195aa:	f7e8 fa2d 	bl	8001a08 <vAssertCalled>

            /* last descriptor data length */
            packet_length = READ_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCWBF_PL );
 80195ae:	68fb      	ldr	r3, [r7, #12]
 80195b0:	68db      	ldr	r3, [r3, #12]
 80195b2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80195b6:	60bb      	str	r3, [r7, #8]

            RxBuffer->buffer = ( uint8_t * ) dma_rx_desc->BackupAddr0;
 80195b8:	68fb      	ldr	r3, [r7, #12]
 80195ba:	691b      	ldr	r3, [r3, #16]
 80195bc:	461a      	mov	r2, r3
 80195be:	683b      	ldr	r3, [r7, #0]
 80195c0:	601a      	str	r2, [r3, #0]
            RxBuffer->len = packet_length;
 80195c2:	683b      	ldr	r3, [r7, #0]
 80195c4:	68ba      	ldr	r2, [r7, #8]
 80195c6:	605a      	str	r2, [r3, #4]

            /* data is in only one buffer */
            configASSERT( packet_length <= heth->Init.RxBuffLen );
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	695b      	ldr	r3, [r3, #20]
 80195cc:	68ba      	ldr	r2, [r7, #8]
 80195ce:	429a      	cmp	r2, r3
 80195d0:	d904      	bls.n	80195dc <HAL_ETH_GetRxData+0x80>
 80195d2:	f240 5133 	movw	r1, #1331	@ 0x533
 80195d6:	4804      	ldr	r0, [pc, #16]	@ (80195e8 <HAL_ETH_GetRxData+0x8c>)
 80195d8:	f7e8 fa16 	bl	8001a08 <vAssertCalled>

            return packet_length;
 80195dc:	68bb      	ldr	r3, [r7, #8]
        }
 80195de:	4618      	mov	r0, r3
 80195e0:	3718      	adds	r7, #24
 80195e2:	46bd      	mov	sp, r7
 80195e4:	bd80      	pop	{r7, pc}
 80195e6:	bf00      	nop
 80195e8:	08027dd4 	.word	0x08027dd4

080195ec <HAL_ETH_BuildRxDescriptors>:
 *         the configuration information for ETHERNET module
 * @retval HAL status.
 */
        HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors( ETH_HandleTypeDef * heth,
                                                      uint8_t * pucNewBuffer )
        {
 80195ec:	b480      	push	{r7}
 80195ee:	b08b      	sub	sp, #44	@ 0x2c
 80195f0:	af00      	add	r7, sp, #0
 80195f2:	6078      	str	r0, [r7, #4]
 80195f4:	6039      	str	r1, [r7, #0]
            ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	3330      	adds	r3, #48	@ 0x30
 80195fa:	60fb      	str	r3, [r7, #12]
            uint32_t desc_index = dmarxdesclist->FirstAppDesc;
 80195fc:	68fb      	ldr	r3, [r7, #12]
 80195fe:	695b      	ldr	r3, [r3, #20]
 8019600:	627b      	str	r3, [r7, #36]	@ 0x24
            __IO ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8019602:	68fb      	ldr	r3, [r7, #12]
 8019604:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801960a:	623b      	str	r3, [r7, #32]
            uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 801960c:	68fb      	ldr	r3, [r7, #12]
 801960e:	699b      	ldr	r3, [r3, #24]
 8019610:	61fb      	str	r3, [r7, #28]
            uint32_t descscan;

            if( dmarxdesclist->AppDescNbr == 0U )
 8019612:	68fb      	ldr	r3, [r7, #12]
 8019614:	699b      	ldr	r3, [r3, #24]
 8019616:	2b00      	cmp	r3, #0
 8019618:	d101      	bne.n	801961e <HAL_ETH_BuildRxDescriptors+0x32>
            {
                /* No Rx descriptors to build */
                return HAL_ERROR;
 801961a:	2301      	movs	r3, #1
 801961c:	e057      	b.n	80196ce <HAL_ETH_BuildRxDescriptors+0xe2>
            }

            if( dmarxdesclist->AppContextDesc != 0U )
 801961e:	68fb      	ldr	r3, [r7, #12]
 8019620:	69db      	ldr	r3, [r3, #28]
 8019622:	2b00      	cmp	r3, #0
 8019624:	d002      	beq.n	801962c <HAL_ETH_BuildRxDescriptors+0x40>
            {
                /* A context descriptor is available */
                totalappdescnbr += 1U;
 8019626:	69fb      	ldr	r3, [r7, #28]
 8019628:	3301      	adds	r3, #1
 801962a:	61fb      	str	r3, [r7, #28]
            }

            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 801962c:	2300      	movs	r3, #0
 801962e:	61bb      	str	r3, [r7, #24]
            {
                uint32_t DESC3;
                uint8_t * pucBuffer;

                if( pucNewBuffer != NULL )
 8019630:	683b      	ldr	r3, [r7, #0]
 8019632:	2b00      	cmp	r3, #0
 8019634:	d005      	beq.n	8019642 <HAL_ETH_BuildRxDescriptors+0x56>
                {
                    /* Earlier zero-copy RX only: buffer was passed to the application. */
                    pucBuffer = pucNewBuffer;
 8019636:	683b      	ldr	r3, [r7, #0]
 8019638:	613b      	str	r3, [r7, #16]
                    dmarxdesc->BackupAddr0 = ( uint32_t ) pucNewBuffer;
 801963a:	683a      	ldr	r2, [r7, #0]
 801963c:	6a3b      	ldr	r3, [r7, #32]
 801963e:	611a      	str	r2, [r3, #16]
 8019640:	e002      	b.n	8019648 <HAL_ETH_BuildRxDescriptors+0x5c>
                }
                else
                {
                    /* Keep on using the same buffer as before. */
                    pucBuffer = ( uint8_t * ) dmarxdesc->BackupAddr0;
 8019642:	6a3b      	ldr	r3, [r7, #32]
 8019644:	691b      	ldr	r3, [r3, #16]
 8019646:	613b      	str	r3, [r7, #16]
                }

                WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pucBuffer );
 8019648:	693a      	ldr	r2, [r7, #16]
 801964a:	6a3b      	ldr	r3, [r7, #32]
 801964c:	601a      	str	r2, [r3, #0]
                /* Buffer 1 Address Valid */

                DESC3 = READ_REG( dmarxdesc->DESC3 );
 801964e:	6a3b      	ldr	r3, [r7, #32]
 8019650:	68db      	ldr	r3, [r3, #12]
 8019652:	617b      	str	r3, [r7, #20]
                WRITE_REG( DESC3, ETH_DMARXNDESCRF_BUF1V );
 8019654:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8019658:	617b      	str	r3, [r7, #20]
/*		} */

                /* Should be the last change. */
/*		SET_BIT(DESC3, ETH_DMARXNDESCRF_OWN); */

                if( dmarxdesclist->ItMode != 0U )
 801965a:	68fb      	ldr	r3, [r7, #12]
 801965c:	6a1b      	ldr	r3, [r3, #32]
 801965e:	2b00      	cmp	r3, #0
 8019660:	d003      	beq.n	801966a <HAL_ETH_BuildRxDescriptors+0x7e>
                {
                    /* Interrupt Enabled on Completion */
                    SET_BIT( DESC3, ETH_DMARXNDESCRF_IOC );
 8019662:	697b      	ldr	r3, [r7, #20]
 8019664:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8019668:	617b      	str	r3, [r7, #20]
                }

                /* Now all is ready.. */
                SET_BIT( DESC3, ETH_DMARXNDESCRF_OWN );
 801966a:	697b      	ldr	r3, [r7, #20]
 801966c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8019670:	617b      	str	r3, [r7, #20]

                WRITE_REG( dmarxdesc->DESC3, DESC3 );
 8019672:	6a3b      	ldr	r3, [r7, #32]
 8019674:	697a      	ldr	r2, [r7, #20]
 8019676:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8019678:	f3bf 8f4f 	dsb	sy
}
 801967c:	bf00      	nop

                __DSB();

                /* And read it back. */
                ( void ) dmarxdesc->DESC3;
 801967e:	6a3b      	ldr	r3, [r7, #32]
 8019680:	68db      	ldr	r3, [r3, #12]

                if( descscan >= ( totalappdescnbr - 1U ) )
 8019682:	69fb      	ldr	r3, [r7, #28]
 8019684:	3b01      	subs	r3, #1
 8019686:	69ba      	ldr	r2, [r7, #24]
 8019688:	429a      	cmp	r2, r3
 801968a:	d211      	bcs.n	80196b0 <HAL_ETH_BuildRxDescriptors+0xc4>
                {
                    break;
                }

                /* Increment rx descriptor index */
                INCR_RX_DESC_INDEX( desc_index, 1U );
 801968c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801968e:	3301      	adds	r3, #1
 8019690:	627b      	str	r3, [r7, #36]	@ 0x24
 8019692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019694:	2b03      	cmp	r3, #3
 8019696:	d902      	bls.n	801969e <HAL_ETH_BuildRxDescriptors+0xb2>
 8019698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801969a:	3b04      	subs	r3, #4
 801969c:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Get descriptor address */
                dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 801969e:	68fb      	ldr	r3, [r7, #12]
 80196a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80196a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80196a6:	623b      	str	r3, [r7, #32]
            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 80196a8:	69bb      	ldr	r3, [r7, #24]
 80196aa:	3301      	adds	r3, #1
 80196ac:	61bb      	str	r3, [r7, #24]
            {
 80196ae:	e7bf      	b.n	8019630 <HAL_ETH_BuildRxDescriptors+0x44>
                    break;
 80196b0:	bf00      	nop
            }

            /* Set the Tail pointer address to the last rx descriptor hold by the app */
            WRITE_REG( heth->Instance->DMACRDTPR, ( uint32_t ) dmarxdesc );
 80196b2:	687b      	ldr	r3, [r7, #4]
 80196b4:	681a      	ldr	r2, [r3, #0]
 80196b6:	6a3b      	ldr	r3, [r7, #32]
 80196b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80196bc:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128

            /* reset the Application desc number */
            dmarxdesclist->AppDescNbr = 0;
 80196c0:	68fb      	ldr	r3, [r7, #12]
 80196c2:	2200      	movs	r2, #0
 80196c4:	619a      	str	r2, [r3, #24]

            /*  reset the application context descriptor */
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	2200      	movs	r2, #0
 80196ca:	64da      	str	r2, [r3, #76]	@ 0x4c

            return HAL_OK;
 80196cc:	2300      	movs	r3, #0
        }
 80196ce:	4618      	mov	r0, r3
 80196d0:	372c      	adds	r7, #44	@ 0x2c
 80196d2:	46bd      	mov	sp, r7
 80196d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196d8:	4770      	bx	lr
	...

080196dc <HAL_ETH_IRQHandler>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        void HAL_ETH_IRQHandler( ETH_HandleTypeDef * heth )
        {
 80196dc:	b580      	push	{r7, lr}
 80196de:	b082      	sub	sp, #8
 80196e0:	af00      	add	r7, sp, #0
 80196e2:	6078      	str	r0, [r7, #4]
            /* ETH interrupt. See heth->DMACSR for details.
             */

            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_RI ) )
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	681b      	ldr	r3, [r3, #0]
 80196e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80196ec:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80196f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80196f4:	2b40      	cmp	r3, #64	@ 0x40
 80196f6:	d115      	bne.n	8019724 <HAL_ETH_IRQHandler+0x48>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_RIE ) )
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	681b      	ldr	r3, [r3, #0]
 80196fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019700:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8019704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019708:	2b40      	cmp	r3, #64	@ 0x40
 801970a:	d10b      	bne.n	8019724 <HAL_ETH_IRQHandler+0x48>
                        heth->RxCpltCallback( heth );
                    }
                    #else
                    {
                        /* Receive complete callback */
                        HAL_ETH_RxCpltCallback( heth );
 801970c:	6878      	ldr	r0, [r7, #4]
 801970e:	f7ff fafc 	bl	8018d0a <HAL_ETH_RxCpltCallback>
                    }
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                    /* Clear the Eth DMA Rx IT pending bits */
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_RI | ETH_DMACSR_NIS );
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	681b      	ldr	r3, [r3, #0]
 8019716:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801971a:	461a      	mov	r2, r3
 801971c:	f248 0340 	movw	r3, #32832	@ 0x8040
 8019720:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                }
            }

            /* Packet transmitted */
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_TI ) )
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	681b      	ldr	r3, [r3, #0]
 8019728:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801972c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8019730:	f003 0301 	and.w	r3, r3, #1
 8019734:	2b01      	cmp	r3, #1
 8019736:	d115      	bne.n	8019764 <HAL_ETH_IRQHandler+0x88>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_TIE ) )
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	681b      	ldr	r3, [r3, #0]
 801973c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019740:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8019744:	f003 0301 	and.w	r3, r3, #1
 8019748:	2b01      	cmp	r3, #1
 801974a:	d10b      	bne.n	8019764 <HAL_ETH_IRQHandler+0x88>
                        heth->TxCpltCallback( heth );
                    }
                    #else
                    {
                        /* Transfer complete callback */
                        HAL_ETH_TxCpltCallback( heth );
 801974c:	6878      	ldr	r0, [r7, #4]
 801974e:	f7ff fad1 	bl	8018cf4 <HAL_ETH_TxCpltCallback>
                    }
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                    /* Clear the Eth DMA Tx IT pending bits */
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_TI | ETH_DMACSR_NIS );
 8019752:	687b      	ldr	r3, [r7, #4]
 8019754:	681b      	ldr	r3, [r3, #0]
 8019756:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801975a:	461a      	mov	r2, r3
 801975c:	f248 0301 	movw	r3, #32769	@ 0x8001
 8019760:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                }
            }

            /* ETH DMA Error */
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_AIS ) )
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	681b      	ldr	r3, [r3, #0]
 8019768:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801976c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8019770:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8019774:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8019778:	d14f      	bne.n	801981a <HAL_ETH_IRQHandler+0x13e>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_AIE ) )
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	681b      	ldr	r3, [r3, #0]
 801977e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019782:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8019786:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801978a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801978e:	d144      	bne.n	801981a <HAL_ETH_IRQHandler+0x13e>
                {
                    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019794:	f043 0208 	orr.w	r2, r3, #8
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	661a      	str	r2, [r3, #96]	@ 0x60

                    /* if fatal bus error occurred */
                    if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_FBE ) )
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	681b      	ldr	r3, [r3, #0]
 80197a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80197a4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80197a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80197ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80197b0:	d11d      	bne.n	80197ee <HAL_ETH_IRQHandler+0x112>
                    {
                        /* Get DMA error code  */
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS ) );
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	681b      	ldr	r3, [r3, #0]
 80197b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80197ba:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 80197be:	f241 1302 	movw	r3, #4354	@ 0x1102
 80197c2:	4013      	ands	r3, r2
 80197c4:	687a      	ldr	r2, [r7, #4]
 80197c6:	6653      	str	r3, [r2, #100]	@ 0x64

                        /* Disable all interrupts */
                        __HAL_ETH_DMA_DISABLE_IT( heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE );
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	681b      	ldr	r3, [r3, #0]
 80197cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80197d0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80197d4:	687a      	ldr	r2, [r7, #4]
 80197d6:	6812      	ldr	r2, [r2, #0]
 80197d8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80197dc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80197e0:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

                        /* Set HAL state to ERROR */
                        set_error_state( heth, HAL_ETH_STATE_ERROR );
 80197e4:	21e0      	movs	r1, #224	@ 0xe0
 80197e6:	6878      	ldr	r0, [r7, #4]
 80197e8:	f7ff fbba 	bl	8018f60 <set_error_state>
 80197ec:	e012      	b.n	8019814 <HAL_ETH_IRQHandler+0x138>
                    }
                    else
                    {
                        /* Get DMA error status  */
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	681b      	ldr	r3, [r3, #0]
 80197f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80197f6:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80197fa:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	665a      	str	r2, [r3, #100]	@ 0x64
                                                                                 ETH_DMACSR_RBU | ETH_DMACSR_AIS ) );

                        /* Clear the interrupt summary flag */
                        __HAL_ETH_DMA_CLEAR_IT( heth, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	681b      	ldr	r3, [r3, #0]
 8019806:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801980a:	461a      	mov	r2, r3
 801980c:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8019810:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                        heth->DMAErrorCallback( heth );
                    }
                    #else
                    {
                        /* Ethernet DMA Error callback */
                        HAL_ETH_DMAErrorCallback( heth );
 8019814:	6878      	ldr	r0, [r7, #4]
 8019816:	f7ff fa83 	bl	8018d20 <HAL_ETH_DMAErrorCallback>
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
                }
            }

            /* ETH MAC Error IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ( ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE ) ) )
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	681b      	ldr	r3, [r3, #0]
 801981e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8019822:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8019826:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801982a:	d10f      	bne.n	801984c <HAL_ETH_IRQHandler+0x170>
            {
                /* Get MAC Rx Tx status and clear Status register pending bit */
                heth->MACErrorCode = READ_REG( heth->Instance->MACRXTXSR );
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	669a      	str	r2, [r3, #104]	@ 0x68

                set_error_state( heth, HAL_ETH_STATE_ERROR );
 8019838:	21e0      	movs	r1, #224	@ 0xe0
 801983a:	6878      	ldr	r0, [r7, #4]
 801983c:	f7ff fb90 	bl	8018f60 <set_error_state>
                    heth->DMAErrorCallback( heth );
                }
                #else
                {
                    /* Ethernet MAC Error callback */
                    HAL_ETH_MACErrorCallback( heth );
 8019840:	6878      	ldr	r0, [r7, #4]
 8019842:	f000 f843 	bl	80198cc <HAL_ETH_MACErrorCallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACErrorCode = ( uint32_t ) ( 0x0U );
 8019846:	687b      	ldr	r3, [r7, #4]
 8019848:	2200      	movs	r2, #0
 801984a:	669a      	str	r2, [r3, #104]	@ 0x68
            }

            /* ETH PMT IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_PMT_IT ) )
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	681b      	ldr	r3, [r3, #0]
 8019850:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8019854:	f003 0310 	and.w	r3, r3, #16
 8019858:	2b10      	cmp	r3, #16
 801985a:	d10d      	bne.n	8019878 <HAL_ETH_IRQHandler+0x19c>
            {
                /* Get MAC Wake-up source and clear the status register pending bit */
                heth->MACWakeUpEvent = READ_BIT( heth->Instance->MACPCSR, ( ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD ) );
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	681b      	ldr	r3, [r3, #0]
 8019860:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8019864:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	66da      	str	r2, [r3, #108]	@ 0x6c
                    heth->PMTCallback( heth );
                }
                #else
                {
                    /* Ethernet PMT callback */
                    HAL_ETH_PMTCallback( heth );
 801986c:	6878      	ldr	r0, [r7, #4]
 801986e:	f000 f837 	bl	80198e0 <HAL_ETH_PMTCallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACWakeUpEvent = ( uint32_t ) ( 0x0U );
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	2200      	movs	r2, #0
 8019876:	66da      	str	r2, [r3, #108]	@ 0x6c
            }

            /* ETH EEE IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_LPI_IT ) )
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	681b      	ldr	r3, [r3, #0]
 801987c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8019880:	f003 0320 	and.w	r3, r3, #32
 8019884:	2b20      	cmp	r3, #32
 8019886:	d10d      	bne.n	80198a4 <HAL_ETH_IRQHandler+0x1c8>
            {
                /* Get MAC LPI interrupt source and clear the status register pending bit */
                heth->MACLPIEvent = READ_BIT( heth->Instance->MACPCSR, 0x0000000FU );
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	681b      	ldr	r3, [r3, #0]
 801988c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8019890:	f003 020f 	and.w	r2, r3, #15
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	671a      	str	r2, [r3, #112]	@ 0x70
                    heth->EEECallback( heth );
                }
                #else
                {
                    /* Ethernet EEE callback */
                    HAL_ETH_EEECallback( heth );
 8019898:	6878      	ldr	r0, [r7, #4]
 801989a:	f000 f82b 	bl	80198f4 <HAL_ETH_EEECallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACLPIEvent = ( uint32_t ) ( 0x0U );
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	2200      	movs	r2, #0
 80198a2:	671a      	str	r2, [r3, #112]	@ 0x70
                        #endif
                    }
                }
            #else /* #if defined(DUAL_CORE) */
                /* check ETH WAKEUP exti flag */
                if( __HAL_ETH_WAKEUP_EXTI_GET_FLAG( ETH_WAKEUP_EXTI_LINE ) != ( uint32_t ) RESET )
 80198a4:	4b08      	ldr	r3, [pc, #32]	@ (80198c8 <HAL_ETH_IRQHandler+0x1ec>)
 80198a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80198a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80198ac:	2b00      	cmp	r3, #0
 80198ae:	d006      	beq.n	80198be <HAL_ETH_IRQHandler+0x1e2>
                {
                    /* Clear ETH WAKEUP Exti pending bit */
                    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG( ETH_WAKEUP_EXTI_LINE );
 80198b0:	4b05      	ldr	r3, [pc, #20]	@ (80198c8 <HAL_ETH_IRQHandler+0x1ec>)
 80198b2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80198b6:	629a      	str	r2, [r3, #40]	@ 0x28
                        heth->WakeUpCallback( heth );
                    }
                    #else
                    {
                        /* ETH WAKEUP callback */
                        HAL_ETH_WakeUpCallback( heth );
 80198b8:	6878      	ldr	r0, [r7, #4]
 80198ba:	f000 f825 	bl	8019908 <HAL_ETH_WakeUpCallback>
                    }
                    #endif
                }
            #endif /* #if defined(DUAL_CORE) */
        }
 80198be:	bf00      	nop
 80198c0:	3708      	adds	r7, #8
 80198c2:	46bd      	mov	sp, r7
 80198c4:	bd80      	pop	{r7, pc}
 80198c6:	bf00      	nop
 80198c8:	58000080 	.word	0x58000080

080198cc <HAL_ETH_MACErrorCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_MACErrorCallback( ETH_HandleTypeDef * heth )
        {
 80198cc:	b480      	push	{r7}
 80198ce:	b083      	sub	sp, #12
 80198d0:	af00      	add	r7, sp, #0
 80198d2:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_MACErrorCallback could be implemented in the user file
             */
        }
 80198d4:	bf00      	nop
 80198d6:	370c      	adds	r7, #12
 80198d8:	46bd      	mov	sp, r7
 80198da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198de:	4770      	bx	lr

080198e0 <HAL_ETH_PMTCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_PMTCallback( ETH_HandleTypeDef * heth )
        {
 80198e0:	b480      	push	{r7}
 80198e2:	b083      	sub	sp, #12
 80198e4:	af00      	add	r7, sp, #0
 80198e6:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_PMTCallback could be implemented in the user file
             */
        }
 80198e8:	bf00      	nop
 80198ea:	370c      	adds	r7, #12
 80198ec:	46bd      	mov	sp, r7
 80198ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198f2:	4770      	bx	lr

080198f4 <HAL_ETH_EEECallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_EEECallback( ETH_HandleTypeDef * heth )
        {
 80198f4:	b480      	push	{r7}
 80198f6:	b083      	sub	sp, #12
 80198f8:	af00      	add	r7, sp, #0
 80198fa:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_EEECallback could be implemented in the user file
             */
        }
 80198fc:	bf00      	nop
 80198fe:	370c      	adds	r7, #12
 8019900:	46bd      	mov	sp, r7
 8019902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019906:	4770      	bx	lr

08019908 <HAL_ETH_WakeUpCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_WakeUpCallback( ETH_HandleTypeDef * heth )
        {
 8019908:	b480      	push	{r7}
 801990a:	b083      	sub	sp, #12
 801990c:	af00      	add	r7, sp, #0
 801990e:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             *        the HAL_ETH_WakeUpCallback could be implemented in the user file
             */
        }
 8019910:	bf00      	nop
 8019912:	370c      	adds	r7, #12
 8019914:	46bd      	mov	sp, r7
 8019916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801991a:	4770      	bx	lr

0801991c <HAL_ETH_ReadPHYRegister>:
 */
        HAL_StatusTypeDef HAL_ETH_ReadPHYRegister( ETH_HandleTypeDef * heth,
                                                   uint32_t PHYAddr,
                                                   uint32_t PHYReg,
                                                   uint32_t * pRegValue )
        {
 801991c:	b580      	push	{r7, lr}
 801991e:	b086      	sub	sp, #24
 8019920:	af00      	add	r7, sp, #0
 8019922:	60f8      	str	r0, [r7, #12]
 8019924:	60b9      	str	r1, [r7, #8]
 8019926:	607a      	str	r2, [r7, #4]
 8019928:	603b      	str	r3, [r7, #0]
            uint32_t tmpreg, tickstart;

            /* Check for the Busy flag */
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 801992a:	68fb      	ldr	r3, [r7, #12]
 801992c:	681b      	ldr	r3, [r3, #0]
 801992e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8019932:	f003 0301 	and.w	r3, r3, #1
 8019936:	2b00      	cmp	r3, #0
 8019938:	d001      	beq.n	801993e <HAL_ETH_ReadPHYRegister+0x22>
            {
                return HAL_ERROR;
 801993a:	2301      	movs	r3, #1
 801993c:	e03e      	b.n	80199bc <HAL_ETH_ReadPHYRegister+0xa0>
            }

            /* Get the  MACMDIOAR value */
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 801993e:	68fb      	ldr	r3, [r7, #12]
 8019940:	681b      	ldr	r3, [r3, #0]
 8019942:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8019946:	617b      	str	r3, [r7, #20]
             * - Set the PHY device address
             * - Set the PHY register address
             * - Set the read mode
             * - Set the MII Busy bit */

            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 8019948:	697b      	ldr	r3, [r7, #20]
 801994a:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 801994e:	68bb      	ldr	r3, [r7, #8]
 8019950:	055b      	lsls	r3, r3, #21
 8019952:	4313      	orrs	r3, r2
 8019954:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 8019956:	697b      	ldr	r3, [r7, #20]
 8019958:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	041b      	lsls	r3, r3, #16
 8019960:	4313      	orrs	r3, r2
 8019962:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD );
 8019964:	697b      	ldr	r3, [r7, #20]
 8019966:	f043 030c 	orr.w	r3, r3, #12
 801996a:	617b      	str	r3, [r7, #20]
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 801996c:	697b      	ldr	r3, [r7, #20]
 801996e:	f043 0301 	orr.w	r3, r3, #1
 8019972:	617b      	str	r3, [r7, #20]

            /* Write the result value into the MDII Address register */
            WRITE_REG( heth->Instance->MACMDIOAR, tmpreg );
 8019974:	68fb      	ldr	r3, [r7, #12]
 8019976:	681b      	ldr	r3, [r3, #0]
 8019978:	697a      	ldr	r2, [r7, #20]
 801997a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

            tickstart = HAL_GetTick();
 801997e:	f000 ff01 	bl	801a784 <HAL_GetTick>
 8019982:	6138      	str	r0, [r7, #16]

            /* Wait for the Busy flag */
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8019984:	e009      	b.n	801999a <HAL_ETH_ReadPHYRegister+0x7e>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 8019986:	f000 fefd 	bl	801a784 <HAL_GetTick>
 801998a:	4602      	mov	r2, r0
 801998c:	693b      	ldr	r3, [r7, #16]
 801998e:	1ad3      	subs	r3, r2, r3
 8019990:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8019994:	d901      	bls.n	801999a <HAL_ETH_ReadPHYRegister+0x7e>
                {
                    return HAL_ERROR;
 8019996:	2301      	movs	r3, #1
 8019998:	e010      	b.n	80199bc <HAL_ETH_ReadPHYRegister+0xa0>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 801999a:	68fb      	ldr	r3, [r7, #12]
 801999c:	681b      	ldr	r3, [r3, #0]
 801999e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80199a2:	f003 0301 	and.w	r3, r3, #1
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	d1ed      	bne.n	8019986 <HAL_ETH_ReadPHYRegister+0x6a>
                }
            }

            /* Get MACMIIDR value */
            WRITE_REG( *pRegValue, ( uint16_t ) heth->Instance->MACMDIODR );
 80199aa:	68fb      	ldr	r3, [r7, #12]
 80199ac:	681b      	ldr	r3, [r3, #0]
 80199ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80199b2:	b29b      	uxth	r3, r3
 80199b4:	461a      	mov	r2, r3
 80199b6:	683b      	ldr	r3, [r7, #0]
 80199b8:	601a      	str	r2, [r3, #0]

            return HAL_OK;
 80199ba:	2300      	movs	r3, #0
        }
 80199bc:	4618      	mov	r0, r3
 80199be:	3718      	adds	r7, #24
 80199c0:	46bd      	mov	sp, r7
 80199c2:	bd80      	pop	{r7, pc}

080199c4 <HAL_ETH_WritePHYRegister>:
 */
        HAL_StatusTypeDef HAL_ETH_WritePHYRegister( ETH_HandleTypeDef * heth,
                                                    uint32_t PHYAddr,
                                                    uint32_t PHYReg,
                                                    uint32_t RegValue )
        {
 80199c4:	b580      	push	{r7, lr}
 80199c6:	b086      	sub	sp, #24
 80199c8:	af00      	add	r7, sp, #0
 80199ca:	60f8      	str	r0, [r7, #12]
 80199cc:	60b9      	str	r1, [r7, #8]
 80199ce:	607a      	str	r2, [r7, #4]
 80199d0:	603b      	str	r3, [r7, #0]
            uint32_t tmpreg, tickstart;

            /* Check for the Busy flag */
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 80199d2:	68fb      	ldr	r3, [r7, #12]
 80199d4:	681b      	ldr	r3, [r3, #0]
 80199d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80199da:	f003 0301 	and.w	r3, r3, #1
 80199de:	2b00      	cmp	r3, #0
 80199e0:	d001      	beq.n	80199e6 <HAL_ETH_WritePHYRegister+0x22>
            {
                return HAL_ERROR;
 80199e2:	2301      	movs	r3, #1
 80199e4:	e03c      	b.n	8019a60 <HAL_ETH_WritePHYRegister+0x9c>
            }

            /* Get the  MACMDIOAR value */
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 80199e6:	68fb      	ldr	r3, [r7, #12]
 80199e8:	681b      	ldr	r3, [r3, #0]
 80199ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80199ee:	617b      	str	r3, [r7, #20]
             * - Set the PHY device address
             * - Set the PHY register address
             * - Set the write mode
             * - Set the MII Busy bit */

            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 80199f0:	697b      	ldr	r3, [r7, #20]
 80199f2:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80199f6:	68bb      	ldr	r3, [r7, #8]
 80199f8:	055b      	lsls	r3, r3, #21
 80199fa:	4313      	orrs	r3, r2
 80199fc:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 80199fe:	697b      	ldr	r3, [r7, #20]
 8019a00:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	041b      	lsls	r3, r3, #16
 8019a08:	4313      	orrs	r3, r2
 8019a0a:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR );
 8019a0c:	697b      	ldr	r3, [r7, #20]
 8019a0e:	f023 030c 	bic.w	r3, r3, #12
 8019a12:	f043 0304 	orr.w	r3, r3, #4
 8019a16:	617b      	str	r3, [r7, #20]
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 8019a18:	697b      	ldr	r3, [r7, #20]
 8019a1a:	f043 0301 	orr.w	r3, r3, #1
 8019a1e:	617b      	str	r3, [r7, #20]


            /* Give the value to the MII data register */
            WRITE_REG( ETH->MACMDIODR, ( uint16_t ) RegValue );
 8019a20:	683b      	ldr	r3, [r7, #0]
 8019a22:	b29a      	uxth	r2, r3
 8019a24:	4b10      	ldr	r3, [pc, #64]	@ (8019a68 <HAL_ETH_WritePHYRegister+0xa4>)
 8019a26:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

            /* Write the result value into the MII Address register */
            WRITE_REG( ETH->MACMDIOAR, tmpreg );
 8019a2a:	4a0f      	ldr	r2, [pc, #60]	@ (8019a68 <HAL_ETH_WritePHYRegister+0xa4>)
 8019a2c:	697b      	ldr	r3, [r7, #20]
 8019a2e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

            tickstart = HAL_GetTick();
 8019a32:	f000 fea7 	bl	801a784 <HAL_GetTick>
 8019a36:	6138      	str	r0, [r7, #16]

            /* Wait for the Busy flag */
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8019a38:	e009      	b.n	8019a4e <HAL_ETH_WritePHYRegister+0x8a>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 8019a3a:	f000 fea3 	bl	801a784 <HAL_GetTick>
 8019a3e:	4602      	mov	r2, r0
 8019a40:	693b      	ldr	r3, [r7, #16]
 8019a42:	1ad3      	subs	r3, r2, r3
 8019a44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8019a48:	d901      	bls.n	8019a4e <HAL_ETH_WritePHYRegister+0x8a>
                {
                    return HAL_ERROR;
 8019a4a:	2301      	movs	r3, #1
 8019a4c:	e008      	b.n	8019a60 <HAL_ETH_WritePHYRegister+0x9c>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8019a4e:	68fb      	ldr	r3, [r7, #12]
 8019a50:	681b      	ldr	r3, [r3, #0]
 8019a52:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8019a56:	f003 0301 	and.w	r3, r3, #1
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d1ed      	bne.n	8019a3a <HAL_ETH_WritePHYRegister+0x76>
                }
            }

            return HAL_OK;
 8019a5e:	2300      	movs	r3, #0
        }
 8019a60:	4618      	mov	r0, r3
 8019a62:	3718      	adds	r7, #24
 8019a64:	46bd      	mov	sp, r7
 8019a66:	bd80      	pop	{r7, pc}
 8019a68:	40028000 	.word	0x40028000

08019a6c <HAL_ETH_GetMACConfig>:
 *         the configuration of the MAC.
 * @retval HAL Status
 */
        HAL_StatusTypeDef HAL_ETH_GetMACConfig( ETH_HandleTypeDef * heth,
                                                ETH_MACConfigTypeDef * macconf )
        {
 8019a6c:	b480      	push	{r7}
 8019a6e:	b083      	sub	sp, #12
 8019a70:	af00      	add	r7, sp, #0
 8019a72:	6078      	str	r0, [r7, #4]
 8019a74:	6039      	str	r1, [r7, #0]
            if( macconf == NULL )
 8019a76:	683b      	ldr	r3, [r7, #0]
 8019a78:	2b00      	cmp	r3, #0
 8019a7a:	d101      	bne.n	8019a80 <HAL_ETH_GetMACConfig+0x14>
            {
                return HAL_ERROR;
 8019a7c:	2301      	movs	r3, #1
 8019a7e:	e1c3      	b.n	8019e08 <HAL_ETH_GetMACConfig+0x39c>
            }

            /* Get MAC parameters */
            macconf->PreambleLength = READ_BIT( heth->Instance->MACCR, ETH_MACCR_PRELEN );
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	681b      	ldr	r3, [r3, #0]
 8019a84:	681b      	ldr	r3, [r3, #0]
 8019a86:	f003 020c 	and.w	r2, r3, #12
 8019a8a:	683b      	ldr	r3, [r7, #0]
 8019a8c:	62da      	str	r2, [r3, #44]	@ 0x2c
            macconf->DeferralCheck = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DC ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 8019a8e:	687b      	ldr	r3, [r7, #4]
 8019a90:	681b      	ldr	r3, [r3, #0]
 8019a92:	681b      	ldr	r3, [r3, #0]
 8019a94:	f003 0310 	and.w	r3, r3, #16
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	bf14      	ite	ne
 8019a9c:	2301      	movne	r3, #1
 8019a9e:	2300      	moveq	r3, #0
 8019aa0:	b2db      	uxtb	r3, r3
 8019aa2:	461a      	mov	r2, r3
 8019aa4:	683b      	ldr	r3, [r7, #0]
 8019aa6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            macconf->BackOffLimit = READ_BIT( heth->Instance->MACCR, ETH_MACCR_BL );
 8019aaa:	687b      	ldr	r3, [r7, #4]
 8019aac:	681b      	ldr	r3, [r3, #0]
 8019aae:	681b      	ldr	r3, [r3, #0]
 8019ab0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8019ab4:	683b      	ldr	r3, [r7, #0]
 8019ab6:	625a      	str	r2, [r3, #36]	@ 0x24
            macconf->RetryTransmission = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DR ) >> 8 ) == 0U ) ? ENABLE : DISABLE;
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	681b      	ldr	r3, [r3, #0]
 8019abc:	681b      	ldr	r3, [r3, #0]
 8019abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	bf0c      	ite	eq
 8019ac6:	2301      	moveq	r3, #1
 8019ac8:	2300      	movne	r3, #0
 8019aca:	b2db      	uxtb	r3, r3
 8019acc:	461a      	mov	r2, r3
 8019ace:	683b      	ldr	r3, [r7, #0]
 8019ad0:	f883 2020 	strb.w	r2, [r3, #32]
            macconf->CarrierSenseDuringTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DCRS ) >> 9 ) > 0U ) ? ENABLE : DISABLE;
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	681b      	ldr	r3, [r3, #0]
 8019ad8:	681b      	ldr	r3, [r3, #0]
 8019ada:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	bf14      	ite	ne
 8019ae2:	2301      	movne	r3, #1
 8019ae4:	2300      	moveq	r3, #0
 8019ae6:	b2db      	uxtb	r3, r3
 8019ae8:	461a      	mov	r2, r3
 8019aea:	683b      	ldr	r3, [r7, #0]
 8019aec:	77da      	strb	r2, [r3, #31]
            macconf->ReceiveOwn = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DO ) >> 10 ) == 0U ) ? ENABLE : DISABLE;
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	681b      	ldr	r3, [r3, #0]
 8019af2:	681b      	ldr	r3, [r3, #0]
 8019af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8019af8:	2b00      	cmp	r3, #0
 8019afa:	bf0c      	ite	eq
 8019afc:	2301      	moveq	r3, #1
 8019afe:	2300      	movne	r3, #0
 8019b00:	b2db      	uxtb	r3, r3
 8019b02:	461a      	mov	r2, r3
 8019b04:	683b      	ldr	r3, [r7, #0]
 8019b06:	779a      	strb	r2, [r3, #30]
            macconf->CarrierSenseBeforeTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ECRSFD ) >> 11 ) > 0U ) ? ENABLE : DISABLE;
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	681b      	ldr	r3, [r3, #0]
 8019b0c:	681b      	ldr	r3, [r3, #0]
 8019b0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019b12:	2b00      	cmp	r3, #0
 8019b14:	bf14      	ite	ne
 8019b16:	2301      	movne	r3, #1
 8019b18:	2300      	moveq	r3, #0
 8019b1a:	b2db      	uxtb	r3, r3
 8019b1c:	461a      	mov	r2, r3
 8019b1e:	683b      	ldr	r3, [r7, #0]
 8019b20:	775a      	strb	r2, [r3, #29]
            macconf->LoopbackMode = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_LM ) >> 12 ) > 0U ) ? ENABLE : DISABLE;
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	681b      	ldr	r3, [r3, #0]
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8019b2c:	2b00      	cmp	r3, #0
 8019b2e:	bf14      	ite	ne
 8019b30:	2301      	movne	r3, #1
 8019b32:	2300      	moveq	r3, #0
 8019b34:	b2db      	uxtb	r3, r3
 8019b36:	461a      	mov	r2, r3
 8019b38:	683b      	ldr	r3, [r7, #0]
 8019b3a:	771a      	strb	r2, [r3, #28]
            macconf->DuplexMode = READ_BIT( heth->Instance->MACCR, ETH_MACCR_DM );
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	681b      	ldr	r3, [r3, #0]
 8019b40:	681b      	ldr	r3, [r3, #0]
 8019b42:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8019b46:	683b      	ldr	r3, [r7, #0]
 8019b48:	619a      	str	r2, [r3, #24]
            macconf->Speed = READ_BIT( heth->Instance->MACCR, ETH_MACCR_FES );
 8019b4a:	687b      	ldr	r3, [r7, #4]
 8019b4c:	681b      	ldr	r3, [r3, #0]
 8019b4e:	681b      	ldr	r3, [r3, #0]
 8019b50:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8019b54:	683b      	ldr	r3, [r7, #0]
 8019b56:	615a      	str	r2, [r3, #20]
            macconf->JumboPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JE ) >> 16 ) > 0U ) ? ENABLE : DISABLE;
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	681b      	ldr	r3, [r3, #0]
 8019b5c:	681b      	ldr	r3, [r3, #0]
 8019b5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8019b62:	2b00      	cmp	r3, #0
 8019b64:	bf14      	ite	ne
 8019b66:	2301      	movne	r3, #1
 8019b68:	2300      	moveq	r3, #0
 8019b6a:	b2db      	uxtb	r3, r3
 8019b6c:	461a      	mov	r2, r3
 8019b6e:	683b      	ldr	r3, [r7, #0]
 8019b70:	749a      	strb	r2, [r3, #18]
            macconf->Jabber = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JD ) >> 17 ) == 0U ) ? ENABLE : DISABLE;
 8019b72:	687b      	ldr	r3, [r7, #4]
 8019b74:	681b      	ldr	r3, [r3, #0]
 8019b76:	681b      	ldr	r3, [r3, #0]
 8019b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8019b7c:	2b00      	cmp	r3, #0
 8019b7e:	bf0c      	ite	eq
 8019b80:	2301      	moveq	r3, #1
 8019b82:	2300      	movne	r3, #0
 8019b84:	b2db      	uxtb	r3, r3
 8019b86:	461a      	mov	r2, r3
 8019b88:	683b      	ldr	r3, [r7, #0]
 8019b8a:	745a      	strb	r2, [r3, #17]
            macconf->Watchdog = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_WD ) >> 19 ) == 0U ) ? ENABLE : DISABLE;
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	681b      	ldr	r3, [r3, #0]
 8019b90:	681b      	ldr	r3, [r3, #0]
 8019b92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8019b96:	2b00      	cmp	r3, #0
 8019b98:	bf0c      	ite	eq
 8019b9a:	2301      	moveq	r3, #1
 8019b9c:	2300      	movne	r3, #0
 8019b9e:	b2db      	uxtb	r3, r3
 8019ba0:	461a      	mov	r2, r3
 8019ba2:	683b      	ldr	r3, [r7, #0]
 8019ba4:	741a      	strb	r2, [r3, #16]
            macconf->AutomaticPadCRCStrip = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ACS ) >> 20 ) > 0U ) ? ENABLE : DISABLE;
 8019ba6:	687b      	ldr	r3, [r7, #4]
 8019ba8:	681b      	ldr	r3, [r3, #0]
 8019baa:	681b      	ldr	r3, [r3, #0]
 8019bac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8019bb0:	2b00      	cmp	r3, #0
 8019bb2:	bf14      	ite	ne
 8019bb4:	2301      	movne	r3, #1
 8019bb6:	2300      	moveq	r3, #0
 8019bb8:	b2db      	uxtb	r3, r3
 8019bba:	461a      	mov	r2, r3
 8019bbc:	683b      	ldr	r3, [r7, #0]
 8019bbe:	73da      	strb	r2, [r3, #15]
            macconf->CRCStripTypePacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_CST ) >> 21 ) > 0U ) ? ENABLE : DISABLE;
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	681b      	ldr	r3, [r3, #0]
 8019bc4:	681b      	ldr	r3, [r3, #0]
 8019bc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	bf14      	ite	ne
 8019bce:	2301      	movne	r3, #1
 8019bd0:	2300      	moveq	r3, #0
 8019bd2:	b2db      	uxtb	r3, r3
 8019bd4:	461a      	mov	r2, r3
 8019bd6:	683b      	ldr	r3, [r7, #0]
 8019bd8:	739a      	strb	r2, [r3, #14]
            macconf->Support2KPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_S2KP ) >> 22 ) > 0U ) ? ENABLE : DISABLE;
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	681b      	ldr	r3, [r3, #0]
 8019bde:	681b      	ldr	r3, [r3, #0]
 8019be0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8019be4:	2b00      	cmp	r3, #0
 8019be6:	bf14      	ite	ne
 8019be8:	2301      	movne	r3, #1
 8019bea:	2300      	moveq	r3, #0
 8019bec:	b2db      	uxtb	r3, r3
 8019bee:	461a      	mov	r2, r3
 8019bf0:	683b      	ldr	r3, [r7, #0]
 8019bf2:	735a      	strb	r2, [r3, #13]
            macconf->GiantPacketSizeLimitControl = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_GPSLCE ) >> 23 ) > 0U ) ? ENABLE : DISABLE;
 8019bf4:	687b      	ldr	r3, [r7, #4]
 8019bf6:	681b      	ldr	r3, [r3, #0]
 8019bf8:	681b      	ldr	r3, [r3, #0]
 8019bfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	bf14      	ite	ne
 8019c02:	2301      	movne	r3, #1
 8019c04:	2300      	moveq	r3, #0
 8019c06:	b2db      	uxtb	r3, r3
 8019c08:	461a      	mov	r2, r3
 8019c0a:	683b      	ldr	r3, [r7, #0]
 8019c0c:	731a      	strb	r2, [r3, #12]
            macconf->InterPacketGapVal = READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPG );
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	681b      	ldr	r3, [r3, #0]
 8019c12:	681b      	ldr	r3, [r3, #0]
 8019c14:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8019c18:	683b      	ldr	r3, [r7, #0]
 8019c1a:	609a      	str	r2, [r3, #8]
            macconf->ChecksumOffload = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPC ) >> 27 ) > 0U ) ? ENABLE : DISABLE;
 8019c1c:	687b      	ldr	r3, [r7, #4]
 8019c1e:	681b      	ldr	r3, [r3, #0]
 8019c20:	681b      	ldr	r3, [r3, #0]
 8019c22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	bf14      	ite	ne
 8019c2a:	2301      	movne	r3, #1
 8019c2c:	2300      	moveq	r3, #0
 8019c2e:	b2db      	uxtb	r3, r3
 8019c30:	461a      	mov	r2, r3
 8019c32:	683b      	ldr	r3, [r7, #0]
 8019c34:	711a      	strb	r2, [r3, #4]
            macconf->SourceAddrControl = READ_BIT( heth->Instance->MACCR, ETH_MACCR_SARC );
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	681b      	ldr	r3, [r3, #0]
 8019c3a:	681b      	ldr	r3, [r3, #0]
 8019c3c:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8019c40:	683b      	ldr	r3, [r7, #0]
 8019c42:	601a      	str	r2, [r3, #0]

            macconf->GiantPacketSizeLimit = READ_BIT( heth->Instance->MACECR, ETH_MACECR_GPSL );
 8019c44:	687b      	ldr	r3, [r7, #4]
 8019c46:	681b      	ldr	r3, [r3, #0]
 8019c48:	685b      	ldr	r3, [r3, #4]
 8019c4a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8019c4e:	683b      	ldr	r3, [r7, #0]
 8019c50:	635a      	str	r2, [r3, #52]	@ 0x34
            macconf->CRCCheckingRxPackets = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_DCRCC ) >> 16 ) == 0U ) ? ENABLE : DISABLE;
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	681b      	ldr	r3, [r3, #0]
 8019c56:	685b      	ldr	r3, [r3, #4]
 8019c58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8019c5c:	2b00      	cmp	r3, #0
 8019c5e:	bf0c      	ite	eq
 8019c60:	2301      	moveq	r3, #1
 8019c62:	2300      	movne	r3, #0
 8019c64:	b2db      	uxtb	r3, r3
 8019c66:	461a      	mov	r2, r3
 8019c68:	683b      	ldr	r3, [r7, #0]
 8019c6a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
            macconf->SlowProtocolDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_SPEN ) >> 17 ) > 0U ) ? ENABLE : DISABLE;
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	681b      	ldr	r3, [r3, #0]
 8019c72:	685b      	ldr	r3, [r3, #4]
 8019c74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	bf14      	ite	ne
 8019c7c:	2301      	movne	r3, #1
 8019c7e:	2300      	moveq	r3, #0
 8019c80:	b2db      	uxtb	r3, r3
 8019c82:	461a      	mov	r2, r3
 8019c84:	683b      	ldr	r3, [r7, #0]
 8019c86:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
            macconf->UnicastSlowProtocolPacketDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_USP ) >> 18 ) > 0U ) ? ENABLE : DISABLE;
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	681b      	ldr	r3, [r3, #0]
 8019c8e:	685b      	ldr	r3, [r3, #4]
 8019c90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8019c94:	2b00      	cmp	r3, #0
 8019c96:	bf14      	ite	ne
 8019c98:	2301      	movne	r3, #1
 8019c9a:	2300      	moveq	r3, #0
 8019c9c:	b2db      	uxtb	r3, r3
 8019c9e:	461a      	mov	r2, r3
 8019ca0:	683b      	ldr	r3, [r7, #0]
 8019ca2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
            macconf->ExtendedInterPacketGap = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPGEN ) >> 24 ) > 0U ) ? ENABLE : DISABLE;
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	681b      	ldr	r3, [r3, #0]
 8019caa:	685b      	ldr	r3, [r3, #4]
 8019cac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	bf14      	ite	ne
 8019cb4:	2301      	movne	r3, #1
 8019cb6:	2300      	moveq	r3, #0
 8019cb8:	b2db      	uxtb	r3, r3
 8019cba:	461a      	mov	r2, r3
 8019cbc:	683b      	ldr	r3, [r7, #0]
 8019cbe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            macconf->ExtendedInterPacketGapVal = READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPG ) >> 25;
 8019cc2:	687b      	ldr	r3, [r7, #4]
 8019cc4:	681b      	ldr	r3, [r3, #0]
 8019cc6:	685b      	ldr	r3, [r3, #4]
 8019cc8:	0e5b      	lsrs	r3, r3, #25
 8019cca:	f003 021f 	and.w	r2, r3, #31
 8019cce:	683b      	ldr	r3, [r7, #0]
 8019cd0:	63da      	str	r2, [r3, #60]	@ 0x3c


            macconf->ProgrammableWatchdog = ( ( READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_PWE ) >> 8 ) > 0U ) ? ENABLE : DISABLE;
 8019cd2:	687b      	ldr	r3, [r7, #4]
 8019cd4:	681b      	ldr	r3, [r3, #0]
 8019cd6:	68db      	ldr	r3, [r3, #12]
 8019cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	bf14      	ite	ne
 8019ce0:	2301      	movne	r3, #1
 8019ce2:	2300      	moveq	r3, #0
 8019ce4:	b2db      	uxtb	r3, r3
 8019ce6:	461a      	mov	r2, r3
 8019ce8:	683b      	ldr	r3, [r7, #0]
 8019cea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            macconf->WatchdogTimeout = READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_WTO );
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	681b      	ldr	r3, [r3, #0]
 8019cf2:	68db      	ldr	r3, [r3, #12]
 8019cf4:	f003 020f 	and.w	r2, r3, #15
 8019cf8:	683b      	ldr	r3, [r7, #0]
 8019cfa:	645a      	str	r2, [r3, #68]	@ 0x44

            macconf->TransmitFlowControl = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_TFE ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	681b      	ldr	r3, [r3, #0]
 8019d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019d02:	f003 0302 	and.w	r3, r3, #2
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	bf14      	ite	ne
 8019d0a:	2301      	movne	r3, #1
 8019d0c:	2300      	moveq	r3, #0
 8019d0e:	b2db      	uxtb	r3, r3
 8019d10:	461a      	mov	r2, r3
 8019d12:	683b      	ldr	r3, [r7, #0]
 8019d14:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
            macconf->ZeroQuantaPause = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ ) >> 7 ) == 0U ) ? ENABLE : DISABLE;
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	681b      	ldr	r3, [r3, #0]
 8019d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019d22:	2b00      	cmp	r3, #0
 8019d24:	bf0c      	ite	eq
 8019d26:	2301      	moveq	r3, #1
 8019d28:	2300      	movne	r3, #0
 8019d2a:	b2db      	uxtb	r3, r3
 8019d2c:	461a      	mov	r2, r3
 8019d2e:	683b      	ldr	r3, [r7, #0]
 8019d30:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            macconf->PauseLowThreshold = READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PLT );
 8019d34:	687b      	ldr	r3, [r7, #4]
 8019d36:	681b      	ldr	r3, [r3, #0]
 8019d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019d3a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8019d3e:	683b      	ldr	r3, [r7, #0]
 8019d40:	651a      	str	r2, [r3, #80]	@ 0x50
            macconf->PauseTime = ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PT ) >> 16 );
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	681b      	ldr	r3, [r3, #0]
 8019d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019d48:	0c1b      	lsrs	r3, r3, #16
 8019d4a:	b29a      	uxth	r2, r3
 8019d4c:	683b      	ldr	r3, [r7, #0]
 8019d4e:	649a      	str	r2, [r3, #72]	@ 0x48


            macconf->ReceiveFlowControl = ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_RFE ) > 0U ) ? ENABLE : DISABLE;
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	681b      	ldr	r3, [r3, #0]
 8019d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019d58:	f003 0301 	and.w	r3, r3, #1
 8019d5c:	2b00      	cmp	r3, #0
 8019d5e:	bf14      	ite	ne
 8019d60:	2301      	movne	r3, #1
 8019d62:	2300      	moveq	r3, #0
 8019d64:	b2db      	uxtb	r3, r3
 8019d66:	461a      	mov	r2, r3
 8019d68:	683b      	ldr	r3, [r7, #0]
 8019d6a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
            macconf->UnicastPausePacketDetect = ( ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_UP ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	681b      	ldr	r3, [r3, #0]
 8019d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019d76:	f003 0302 	and.w	r3, r3, #2
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	bf14      	ite	ne
 8019d7e:	2301      	movne	r3, #1
 8019d80:	2300      	moveq	r3, #0
 8019d82:	b2db      	uxtb	r3, r3
 8019d84:	461a      	mov	r2, r3
 8019d86:	683b      	ldr	r3, [r7, #0]
 8019d88:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

            macconf->TransmitQueueMode = READ_BIT( heth->Instance->MTLTQOMR, ( ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF ) );
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	681b      	ldr	r3, [r3, #0]
 8019d90:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8019d94:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8019d98:	683b      	ldr	r3, [r7, #0]
 8019d9a:	659a      	str	r2, [r3, #88]	@ 0x58

            macconf->ReceiveQueueMode = READ_BIT( heth->Instance->MTLRQOMR, ( ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF ) );
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	681b      	ldr	r3, [r3, #0]
 8019da0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8019da4:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8019da8:	683b      	ldr	r3, [r7, #0]
 8019daa:	65da      	str	r2, [r3, #92]	@ 0x5c
            macconf->ForwardRxUndersizedGoodPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP ) >> 3 ) > 0U ) ? ENABLE : DISABLE;
 8019dac:	687b      	ldr	r3, [r7, #4]
 8019dae:	681b      	ldr	r3, [r3, #0]
 8019db0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8019db4:	f003 0308 	and.w	r3, r3, #8
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	bf14      	ite	ne
 8019dbc:	2301      	movne	r3, #1
 8019dbe:	2300      	moveq	r3, #0
 8019dc0:	b2db      	uxtb	r3, r3
 8019dc2:	461a      	mov	r2, r3
 8019dc4:	683b      	ldr	r3, [r7, #0]
 8019dc6:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
            macconf->ForwardRxErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 8019dca:	687b      	ldr	r3, [r7, #4]
 8019dcc:	681b      	ldr	r3, [r3, #0]
 8019dce:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8019dd2:	f003 0310 	and.w	r3, r3, #16
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	bf14      	ite	ne
 8019dda:	2301      	movne	r3, #1
 8019ddc:	2300      	moveq	r3, #0
 8019dde:	b2db      	uxtb	r3, r3
 8019de0:	461a      	mov	r2, r3
 8019de2:	683b      	ldr	r3, [r7, #0]
 8019de4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
            macconf->DropTCPIPChecksumErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF ) >> 6 ) == 0U ) ? ENABLE : DISABLE;
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	681b      	ldr	r3, [r3, #0]
 8019dec:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8019df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	bf0c      	ite	eq
 8019df8:	2301      	moveq	r3, #1
 8019dfa:	2300      	movne	r3, #0
 8019dfc:	b2db      	uxtb	r3, r3
 8019dfe:	461a      	mov	r2, r3
 8019e00:	683b      	ldr	r3, [r7, #0]
 8019e02:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

            return HAL_OK;
 8019e06:	2300      	movs	r3, #0
        }
 8019e08:	4618      	mov	r0, r3
 8019e0a:	370c      	adds	r7, #12
 8019e0c:	46bd      	mov	sp, r7
 8019e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e12:	4770      	bx	lr

08019e14 <HAL_ETH_SetMACConfig>:
 *         the configuration of the MAC.
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                                ETH_MACConfigTypeDef * macconf )
        {
 8019e14:	b580      	push	{r7, lr}
 8019e16:	b082      	sub	sp, #8
 8019e18:	af00      	add	r7, sp, #0
 8019e1a:	6078      	str	r0, [r7, #4]
 8019e1c:	6039      	str	r1, [r7, #0]
            if( macconf == NULL )
 8019e1e:	683b      	ldr	r3, [r7, #0]
 8019e20:	2b00      	cmp	r3, #0
 8019e22:	d101      	bne.n	8019e28 <HAL_ETH_SetMACConfig+0x14>
            {
                return HAL_ERROR;
 8019e24:	2301      	movs	r3, #1
 8019e26:	e00a      	b.n	8019e3e <HAL_ETH_SetMACConfig+0x2a>
            }

            if( heth->RxState == HAL_ETH_STATE_READY )
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019e2c:	2b10      	cmp	r3, #16
 8019e2e:	d105      	bne.n	8019e3c <HAL_ETH_SetMACConfig+0x28>
            {
                ETH_SetMACConfig( heth, macconf );
 8019e30:	6839      	ldr	r1, [r7, #0]
 8019e32:	6878      	ldr	r0, [r7, #4]
 8019e34:	f000 f808 	bl	8019e48 <ETH_SetMACConfig>

                return HAL_OK;
 8019e38:	2300      	movs	r3, #0
 8019e3a:	e000      	b.n	8019e3e <HAL_ETH_SetMACConfig+0x2a>
            }
            else
            {
                return HAL_ERROR;
 8019e3c:	2301      	movs	r3, #1
            }
        }
 8019e3e:	4618      	mov	r0, r3
 8019e40:	3708      	adds	r7, #8
 8019e42:	46bd      	mov	sp, r7
 8019e44:	bd80      	pop	{r7, pc}
	...

08019e48 <ETH_SetMACConfig>:
 * @{
 */

        static void ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                      ETH_MACConfigTypeDef * macconf )
        {
 8019e48:	b480      	push	{r7}
 8019e4a:	b085      	sub	sp, #20
 8019e4c:	af00      	add	r7, sp, #0
 8019e4e:	6078      	str	r0, [r7, #4]
 8019e50:	6039      	str	r1, [r7, #0]
            uint32_t macregval;

            /*------------------------ MACCR Configuration --------------------*/
            macregval = ( macconf->InterPacketGapVal |
 8019e52:	683b      	ldr	r3, [r7, #0]
 8019e54:	689a      	ldr	r2, [r3, #8]
                          macconf->SourceAddrControl |
 8019e56:	683b      	ldr	r3, [r7, #0]
 8019e58:	681b      	ldr	r3, [r3, #0]
            macregval = ( macconf->InterPacketGapVal |
 8019e5a:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 8019e5c:	683b      	ldr	r3, [r7, #0]
 8019e5e:	791b      	ldrb	r3, [r3, #4]
 8019e60:	06db      	lsls	r3, r3, #27
                          macconf->SourceAddrControl |
 8019e62:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 8019e64:	683b      	ldr	r3, [r7, #0]
 8019e66:	7b1b      	ldrb	r3, [r3, #12]
 8019e68:	05db      	lsls	r3, r3, #23
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 8019e6a:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 8019e6c:	683b      	ldr	r3, [r7, #0]
 8019e6e:	7b5b      	ldrb	r3, [r3, #13]
 8019e70:	059b      	lsls	r3, r3, #22
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 8019e72:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 8019e74:	683b      	ldr	r3, [r7, #0]
 8019e76:	7b9b      	ldrb	r3, [r3, #14]
 8019e78:	055b      	lsls	r3, r3, #21
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 8019e7a:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 8019e7c:	683b      	ldr	r3, [r7, #0]
 8019e7e:	7bdb      	ldrb	r3, [r3, #15]
 8019e80:	051b      	lsls	r3, r3, #20
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 8019e82:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 8019e84:	683a      	ldr	r2, [r7, #0]
 8019e86:	7c12      	ldrb	r2, [r2, #16]
 8019e88:	2a00      	cmp	r2, #0
 8019e8a:	d102      	bne.n	8019e92 <ETH_SetMACConfig+0x4a>
 8019e8c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8019e90:	e000      	b.n	8019e94 <ETH_SetMACConfig+0x4c>
 8019e92:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 8019e94:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 8019e96:	683a      	ldr	r2, [r7, #0]
 8019e98:	7c52      	ldrb	r2, [r2, #17]
 8019e9a:	2a00      	cmp	r2, #0
 8019e9c:	d102      	bne.n	8019ea4 <ETH_SetMACConfig+0x5c>
 8019e9e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8019ea2:	e000      	b.n	8019ea6 <ETH_SetMACConfig+0x5e>
 8019ea4:	2200      	movs	r2, #0
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 8019ea6:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 8019ea8:	683b      	ldr	r3, [r7, #0]
 8019eaa:	7c9b      	ldrb	r3, [r3, #18]
 8019eac:	041b      	lsls	r3, r3, #16
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 8019eae:	431a      	orrs	r2, r3
                          macconf->Speed |
 8019eb0:	683b      	ldr	r3, [r7, #0]
 8019eb2:	695b      	ldr	r3, [r3, #20]
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 8019eb4:	431a      	orrs	r2, r3
                          macconf->DuplexMode |
 8019eb6:	683b      	ldr	r3, [r7, #0]
 8019eb8:	699b      	ldr	r3, [r3, #24]
                          macconf->Speed |
 8019eba:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 8019ebc:	683b      	ldr	r3, [r7, #0]
 8019ebe:	7f1b      	ldrb	r3, [r3, #28]
 8019ec0:	031b      	lsls	r3, r3, #12
                          macconf->DuplexMode |
 8019ec2:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 8019ec4:	683b      	ldr	r3, [r7, #0]
 8019ec6:	7f5b      	ldrb	r3, [r3, #29]
 8019ec8:	02db      	lsls	r3, r3, #11
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 8019eca:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 8019ecc:	683a      	ldr	r2, [r7, #0]
 8019ece:	7f92      	ldrb	r2, [r2, #30]
 8019ed0:	2a00      	cmp	r2, #0
 8019ed2:	d102      	bne.n	8019eda <ETH_SetMACConfig+0x92>
 8019ed4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8019ed8:	e000      	b.n	8019edc <ETH_SetMACConfig+0x94>
 8019eda:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 8019edc:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 8019ede:	683b      	ldr	r3, [r7, #0]
 8019ee0:	7fdb      	ldrb	r3, [r3, #31]
 8019ee2:	025b      	lsls	r3, r3, #9
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 8019ee4:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 8019ee6:	683a      	ldr	r2, [r7, #0]
 8019ee8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8019eec:	2a00      	cmp	r2, #0
 8019eee:	d102      	bne.n	8019ef6 <ETH_SetMACConfig+0xae>
 8019ef0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8019ef4:	e000      	b.n	8019ef8 <ETH_SetMACConfig+0xb0>
 8019ef6:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 8019ef8:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8019efa:	683b      	ldr	r3, [r7, #0]
 8019efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 8019efe:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->DeferralCheck << 4 ) |
 8019f00:	683b      	ldr	r3, [r7, #0]
 8019f02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8019f06:	011b      	lsls	r3, r3, #4
                          macconf->BackOffLimit |
 8019f08:	431a      	orrs	r2, r3
                          macconf->PreambleLength );
 8019f0a:	683b      	ldr	r3, [r7, #0]
 8019f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            macregval = ( macconf->InterPacketGapVal |
 8019f0e:	4313      	orrs	r3, r2
 8019f10:	60fb      	str	r3, [r7, #12]

            /* Write to MACCR */
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	681b      	ldr	r3, [r3, #0]
 8019f16:	681a      	ldr	r2, [r3, #0]
 8019f18:	4b56      	ldr	r3, [pc, #344]	@ (801a074 <ETH_SetMACConfig+0x22c>)
 8019f1a:	4013      	ands	r3, r2
 8019f1c:	687a      	ldr	r2, [r7, #4]
 8019f1e:	6812      	ldr	r2, [r2, #0]
 8019f20:	68f9      	ldr	r1, [r7, #12]
 8019f22:	430b      	orrs	r3, r1
 8019f24:	6013      	str	r3, [r2, #0]

            /*------------------------ MACECR Configuration --------------------*/
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 8019f26:	683b      	ldr	r3, [r7, #0]
 8019f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019f2a:	065a      	lsls	r2, r3, #25
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 8019f2c:	683b      	ldr	r3, [r7, #0]
 8019f2e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8019f32:	061b      	lsls	r3, r3, #24
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 8019f34:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 8019f36:	683b      	ldr	r3, [r7, #0]
 8019f38:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019f3c:	049b      	lsls	r3, r3, #18
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 8019f3e:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 8019f40:	683b      	ldr	r3, [r7, #0]
 8019f42:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019f46:	045b      	lsls	r3, r3, #17
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 8019f48:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->CRCCheckingRxPackets == DISABLE ) ? 1U : 0U ) << 16 ) |
 8019f4a:	683a      	ldr	r2, [r7, #0]
 8019f4c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8019f50:	2a00      	cmp	r2, #0
 8019f52:	d102      	bne.n	8019f5a <ETH_SetMACConfig+0x112>
 8019f54:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8019f58:	e000      	b.n	8019f5c <ETH_SetMACConfig+0x114>
 8019f5a:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 8019f5c:	431a      	orrs	r2, r3
                          macconf->GiantPacketSizeLimit );
 8019f5e:	683b      	ldr	r3, [r7, #0]
 8019f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 8019f62:	4313      	orrs	r3, r2
 8019f64:	60fb      	str	r3, [r7, #12]

            /* Write to MACECR */
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	681b      	ldr	r3, [r3, #0]
 8019f6a:	685a      	ldr	r2, [r3, #4]
 8019f6c:	4b42      	ldr	r3, [pc, #264]	@ (801a078 <ETH_SetMACConfig+0x230>)
 8019f6e:	4013      	ands	r3, r2
 8019f70:	687a      	ldr	r2, [r7, #4]
 8019f72:	6812      	ldr	r2, [r2, #0]
 8019f74:	68f9      	ldr	r1, [r7, #12]
 8019f76:	430b      	orrs	r3, r1
 8019f78:	6053      	str	r3, [r2, #4]

            /*------------------------ MACWTR Configuration --------------------*/
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 8019f7a:	683b      	ldr	r3, [r7, #0]
 8019f7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8019f80:	021a      	lsls	r2, r3, #8
                          macconf->WatchdogTimeout );
 8019f82:	683b      	ldr	r3, [r7, #0]
 8019f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 8019f86:	4313      	orrs	r3, r2
 8019f88:	60fb      	str	r3, [r7, #12]

            /* Write to MACWTR */
            MODIFY_REG( heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval );
 8019f8a:	687b      	ldr	r3, [r7, #4]
 8019f8c:	681b      	ldr	r3, [r3, #0]
 8019f8e:	68da      	ldr	r2, [r3, #12]
 8019f90:	4b3a      	ldr	r3, [pc, #232]	@ (801a07c <ETH_SetMACConfig+0x234>)
 8019f92:	4013      	ands	r3, r2
 8019f94:	687a      	ldr	r2, [r7, #4]
 8019f96:	6812      	ldr	r2, [r2, #0]
 8019f98:	68f9      	ldr	r1, [r7, #12]
 8019f9a:	430b      	orrs	r3, r1
 8019f9c:	60d3      	str	r3, [r2, #12]

            /*------------------------ MACTFCR Configuration --------------------*/
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 8019f9e:	683b      	ldr	r3, [r7, #0]
 8019fa0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8019fa4:	005a      	lsls	r2, r3, #1
                          macconf->PauseLowThreshold |
 8019fa6:	683b      	ldr	r3, [r7, #0]
 8019fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 8019faa:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->ZeroQuantaPause == DISABLE ) ? 1U : 0U ) << 7 ) |
 8019fac:	683a      	ldr	r2, [r7, #0]
 8019fae:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8019fb2:	2a00      	cmp	r2, #0
 8019fb4:	d101      	bne.n	8019fba <ETH_SetMACConfig+0x172>
 8019fb6:	2280      	movs	r2, #128	@ 0x80
 8019fb8:	e000      	b.n	8019fbc <ETH_SetMACConfig+0x174>
 8019fba:	2200      	movs	r2, #0
                          macconf->PauseLowThreshold |
 8019fbc:	431a      	orrs	r2, r3
                          ( macconf->PauseTime << 16 ) );
 8019fbe:	683b      	ldr	r3, [r7, #0]
 8019fc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019fc2:	041b      	lsls	r3, r3, #16
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 8019fc4:	4313      	orrs	r3, r2
 8019fc6:	60fb      	str	r3, [r7, #12]

            /* Write to MACTFCR */
            MODIFY_REG( heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval );
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	681b      	ldr	r3, [r3, #0]
 8019fcc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8019fce:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8019fd2:	4013      	ands	r3, r2
 8019fd4:	687a      	ldr	r2, [r7, #4]
 8019fd6:	6812      	ldr	r2, [r2, #0]
 8019fd8:	68f9      	ldr	r1, [r7, #12]
 8019fda:	430b      	orrs	r3, r1
 8019fdc:	6713      	str	r3, [r2, #112]	@ 0x70

            /*------------------------ MACRFCR Configuration --------------------*/
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 8019fde:	683b      	ldr	r3, [r7, #0]
 8019fe0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019fe4:	461a      	mov	r2, r3
                          ( ( uint32_t ) macconf->UnicastPausePacketDetect << 1 ) );
 8019fe6:	683b      	ldr	r3, [r7, #0]
 8019fe8:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8019fec:	005b      	lsls	r3, r3, #1
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 8019fee:	4313      	orrs	r3, r2
 8019ff0:	60fb      	str	r3, [r7, #12]

            /* Write to MACRFCR */
            MODIFY_REG( heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval );
 8019ff2:	687b      	ldr	r3, [r7, #4]
 8019ff4:	681b      	ldr	r3, [r3, #0]
 8019ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019ffa:	f023 0103 	bic.w	r1, r3, #3
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	681b      	ldr	r3, [r3, #0]
 801a002:	68fa      	ldr	r2, [r7, #12]
 801a004:	430a      	orrs	r2, r1
 801a006:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

            /*------------------------ MTLTQOMR Configuration --------------------*/
            /* Write to MTLTQOMR */
            MODIFY_REG( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode );
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	681b      	ldr	r3, [r3, #0]
 801a00e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 801a012:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 801a016:	683b      	ldr	r3, [r7, #0]
 801a018:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	681b      	ldr	r3, [r3, #0]
 801a01e:	430a      	orrs	r2, r1
 801a020:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

            /*------------------------ MTLRQOMR Configuration --------------------*/
            macregval = ( macconf->ReceiveQueueMode |
 801a024:	683b      	ldr	r3, [r7, #0]
 801a026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 801a028:	683a      	ldr	r2, [r7, #0]
 801a02a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 801a02e:	2a00      	cmp	r2, #0
 801a030:	d101      	bne.n	801a036 <ETH_SetMACConfig+0x1ee>
 801a032:	2240      	movs	r2, #64	@ 0x40
 801a034:	e000      	b.n	801a038 <ETH_SetMACConfig+0x1f0>
 801a036:	2200      	movs	r2, #0
            macregval = ( macconf->ReceiveQueueMode |
 801a038:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ForwardRxErrorPacket << 4 ) |
 801a03a:	683b      	ldr	r3, [r7, #0]
 801a03c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 801a040:	011b      	lsls	r3, r3, #4
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 801a042:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ForwardRxUndersizedGoodPacket << 3 ) );
 801a044:	683b      	ldr	r3, [r7, #0]
 801a046:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 801a04a:	00db      	lsls	r3, r3, #3
            macregval = ( macconf->ReceiveQueueMode |
 801a04c:	4313      	orrs	r3, r2
 801a04e:	60fb      	str	r3, [r7, #12]

            /* Write to MTLRQOMR */
            MODIFY_REG( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval );
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	681b      	ldr	r3, [r3, #0]
 801a054:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 801a058:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 801a05c:	687b      	ldr	r3, [r7, #4]
 801a05e:	681b      	ldr	r3, [r3, #0]
 801a060:	68fa      	ldr	r2, [r7, #12]
 801a062:	430a      	orrs	r2, r1
 801a064:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
        }
 801a068:	bf00      	nop
 801a06a:	3714      	adds	r7, #20
 801a06c:	46bd      	mov	sp, r7
 801a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a072:	4770      	bx	lr
 801a074:	00048083 	.word	0x00048083
 801a078:	c0f88000 	.word	0xc0f88000
 801a07c:	fffffef0 	.word	0xfffffef0

0801a080 <ETH_SetDMAConfig>:

        static void ETH_SetDMAConfig( ETH_HandleTypeDef * heth,
                                      ETH_DMAConfigTypeDef * dmaconf )
        {
 801a080:	b480      	push	{r7}
 801a082:	b085      	sub	sp, #20
 801a084:	af00      	add	r7, sp, #0
 801a086:	6078      	str	r0, [r7, #4]
 801a088:	6039      	str	r1, [r7, #0]
            uint32_t dmaregval;

            /*------------------------ DMAMR Configuration --------------------*/
            MODIFY_REG( heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration );
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a092:	681a      	ldr	r2, [r3, #0]
 801a094:	4b38      	ldr	r3, [pc, #224]	@ (801a178 <ETH_SetDMAConfig+0xf8>)
 801a096:	4013      	ands	r3, r2
 801a098:	683a      	ldr	r2, [r7, #0]
 801a09a:	6811      	ldr	r1, [r2, #0]
 801a09c:	687a      	ldr	r2, [r7, #4]
 801a09e:	6812      	ldr	r2, [r2, #0]
 801a0a0:	430b      	orrs	r3, r1
 801a0a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a0a6:	6013      	str	r3, [r2, #0]

            /*------------------------ DMASBMR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 801a0a8:	683b      	ldr	r3, [r7, #0]
 801a0aa:	791b      	ldrb	r3, [r3, #4]
 801a0ac:	031a      	lsls	r2, r3, #12
                          dmaconf->BurstMode |
 801a0ae:	683b      	ldr	r3, [r7, #0]
 801a0b0:	689b      	ldr	r3, [r3, #8]
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 801a0b2:	431a      	orrs	r2, r3
                          ( ( uint32_t ) dmaconf->RebuildINCRxBurst << 15 ) );
 801a0b4:	683b      	ldr	r3, [r7, #0]
 801a0b6:	7b1b      	ldrb	r3, [r3, #12]
 801a0b8:	03db      	lsls	r3, r3, #15
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 801a0ba:	4313      	orrs	r3, r2
 801a0bc:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval );
 801a0be:	687b      	ldr	r3, [r7, #4]
 801a0c0:	681b      	ldr	r3, [r3, #0]
 801a0c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a0c6:	685a      	ldr	r2, [r3, #4]
 801a0c8:	4b2c      	ldr	r3, [pc, #176]	@ (801a17c <ETH_SetDMAConfig+0xfc>)
 801a0ca:	4013      	ands	r3, r2
 801a0cc:	687a      	ldr	r2, [r7, #4]
 801a0ce:	6812      	ldr	r2, [r2, #0]
 801a0d0:	68f9      	ldr	r1, [r7, #12]
 801a0d2:	430b      	orrs	r3, r1
 801a0d4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a0d8:	6053      	str	r3, [r2, #4]

            /*------------------------ DMACCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 801a0da:	683b      	ldr	r3, [r7, #0]
 801a0dc:	7b5b      	ldrb	r3, [r3, #13]
 801a0de:	041a      	lsls	r2, r3, #16
                          dmaconf->MaximumSegmentSize );
 801a0e0:	683b      	ldr	r3, [r7, #0]
 801a0e2:	6a1b      	ldr	r3, [r3, #32]
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 801a0e4:	4313      	orrs	r3, r2
 801a0e6:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval );
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	681b      	ldr	r3, [r3, #0]
 801a0ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a0f0:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 801a0f4:	4b22      	ldr	r3, [pc, #136]	@ (801a180 <ETH_SetDMAConfig+0x100>)
 801a0f6:	4013      	ands	r3, r2
 801a0f8:	687a      	ldr	r2, [r7, #4]
 801a0fa:	6812      	ldr	r2, [r2, #0]
 801a0fc:	68f9      	ldr	r1, [r7, #12]
 801a0fe:	430b      	orrs	r3, r1
 801a100:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a104:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

            /*------------------------ DMACTCR Configuration --------------------*/
            dmaregval = ( dmaconf->TxDMABurstLength |
 801a108:	683b      	ldr	r3, [r7, #0]
 801a10a:	691a      	ldr	r2, [r3, #16]
                          ( ( uint32_t ) dmaconf->SecondPacketOperate << 4 ) |
 801a10c:	683b      	ldr	r3, [r7, #0]
 801a10e:	7d1b      	ldrb	r3, [r3, #20]
 801a110:	011b      	lsls	r3, r3, #4
            dmaregval = ( dmaconf->TxDMABurstLength |
 801a112:	431a      	orrs	r2, r3
                          ( ( uint32_t ) dmaconf->TCPSegmentation << 12 ) );
 801a114:	683b      	ldr	r3, [r7, #0]
 801a116:	7f5b      	ldrb	r3, [r3, #29]
 801a118:	031b      	lsls	r3, r3, #12
            dmaregval = ( dmaconf->TxDMABurstLength |
 801a11a:	4313      	orrs	r3, r2
 801a11c:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval );
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	681b      	ldr	r3, [r3, #0]
 801a122:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a126:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 801a12a:	4b16      	ldr	r3, [pc, #88]	@ (801a184 <ETH_SetDMAConfig+0x104>)
 801a12c:	4013      	ands	r3, r2
 801a12e:	687a      	ldr	r2, [r7, #4]
 801a130:	6812      	ldr	r2, [r2, #0]
 801a132:	68f9      	ldr	r1, [r7, #12]
 801a134:	430b      	orrs	r3, r1
 801a136:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a13a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

            /*------------------------ DMACRCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 801a13e:	683b      	ldr	r3, [r7, #0]
 801a140:	7f1b      	ldrb	r3, [r3, #28]
 801a142:	07da      	lsls	r2, r3, #31
                          dmaconf->RxDMABurstLength );
 801a144:	683b      	ldr	r3, [r7, #0]
 801a146:	699b      	ldr	r3, [r3, #24]
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 801a148:	4313      	orrs	r3, r2
 801a14a:	60fb      	str	r3, [r7, #12]

            /* Write to DMACRCR */
            MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval );
 801a14c:	687b      	ldr	r3, [r7, #4]
 801a14e:	681b      	ldr	r3, [r3, #0]
 801a150:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a154:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 801a158:	4b0b      	ldr	r3, [pc, #44]	@ (801a188 <ETH_SetDMAConfig+0x108>)
 801a15a:	4013      	ands	r3, r2
 801a15c:	687a      	ldr	r2, [r7, #4]
 801a15e:	6812      	ldr	r2, [r2, #0]
 801a160:	68f9      	ldr	r1, [r7, #12]
 801a162:	430b      	orrs	r3, r1
 801a164:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a168:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
        }
 801a16c:	bf00      	nop
 801a16e:	3714      	adds	r7, #20
 801a170:	46bd      	mov	sp, r7
 801a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a176:	4770      	bx	lr
 801a178:	ffff87fd 	.word	0xffff87fd
 801a17c:	ffff2ffe 	.word	0xffff2ffe
 801a180:	fffec000 	.word	0xfffec000
 801a184:	ffc0efef 	.word	0xffc0efef
 801a188:	7fc0ffff 	.word	0x7fc0ffff

0801a18c <ETH_MACDMAConfig>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        static void ETH_MACDMAConfig( ETH_HandleTypeDef * heth )
        {
 801a18c:	b580      	push	{r7, lr}
 801a18e:	b0a4      	sub	sp, #144	@ 0x90
 801a190:	af00      	add	r7, sp, #0
 801a192:	6078      	str	r0, [r7, #4]
            ETH_MACConfigTypeDef macDefaultConf;
            ETH_DMAConfigTypeDef dmaDefaultConf;

            /*--------------- ETHERNET MAC registers default Configuration --------------*/
            macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 801a194:	2301      	movs	r3, #1
 801a196:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 801a19a:	2300      	movs	r3, #0
 801a19c:	653b      	str	r3, [r7, #80]	@ 0x50
            macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 801a19e:	2300      	movs	r3, #0
 801a1a0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
            macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 801a1a4:	2300      	movs	r3, #0
 801a1a6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            macDefaultConf.ChecksumOffload = ENABLE;
 801a1aa:	2301      	movs	r3, #1
 801a1ac:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
            macDefaultConf.CRCCheckingRxPackets = ENABLE;
 801a1b0:	2301      	movs	r3, #1
 801a1b2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            macDefaultConf.CRCStripTypePacket = ENABLE;
 801a1b6:	2301      	movs	r3, #1
 801a1b8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
            macDefaultConf.DeferralCheck = DISABLE;
 801a1bc:	2300      	movs	r3, #0
 801a1be:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
            macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 801a1c2:	2301      	movs	r3, #1
 801a1c4:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
            macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 801a1c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801a1cc:	647b      	str	r3, [r7, #68]	@ 0x44
            macDefaultConf.ExtendedInterPacketGap = DISABLE;
 801a1ce:	2300      	movs	r3, #0
 801a1d0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
            macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 801a1d4:	2300      	movs	r3, #0
 801a1d6:	66bb      	str	r3, [r7, #104]	@ 0x68
            macDefaultConf.ForwardRxErrorPacket = DISABLE;
 801a1d8:	2300      	movs	r3, #0
 801a1da:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
            macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 801a1de:	2300      	movs	r3, #0
 801a1e0:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
            macDefaultConf.GiantPacketSizeLimit = 0x618;
 801a1e4:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 801a1e8:	663b      	str	r3, [r7, #96]	@ 0x60
            macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 801a1ea:	2300      	movs	r3, #0
 801a1ec:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 801a1f0:	2300      	movs	r3, #0
 801a1f2:	637b      	str	r3, [r7, #52]	@ 0x34
            macDefaultConf.Jabber = ENABLE;
 801a1f4:	2301      	movs	r3, #1
 801a1f6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            macDefaultConf.JumboPacket = DISABLE;
 801a1fa:	2300      	movs	r3, #0
 801a1fc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            macDefaultConf.LoopbackMode = DISABLE;
 801a200:	2300      	movs	r3, #0
 801a202:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
            macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 801a206:	2300      	movs	r3, #0
 801a208:	67fb      	str	r3, [r7, #124]	@ 0x7c
            macDefaultConf.PauseTime = 0x0;
 801a20a:	2300      	movs	r3, #0
 801a20c:	677b      	str	r3, [r7, #116]	@ 0x74
            macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 801a20e:	2300      	movs	r3, #0
 801a210:	65bb      	str	r3, [r7, #88]	@ 0x58
            macDefaultConf.ProgrammableWatchdog = DISABLE;
 801a212:	2300      	movs	r3, #0
 801a214:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
            macDefaultConf.ReceiveFlowControl = DISABLE;
 801a218:	2300      	movs	r3, #0
 801a21a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
            macDefaultConf.ReceiveOwn = ENABLE;
 801a21e:	2301      	movs	r3, #1
 801a220:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
            macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 801a224:	2320      	movs	r3, #32
 801a226:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            macDefaultConf.RetryTransmission = ENABLE;
 801a22a:	2301      	movs	r3, #1
 801a22c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
            macDefaultConf.SlowProtocolDetect = DISABLE;
 801a230:	2300      	movs	r3, #0
 801a232:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
            macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 801a236:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 801a23a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            macDefaultConf.Speed = ETH_SPEED_100M;
 801a23c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801a240:	643b      	str	r3, [r7, #64]	@ 0x40
            macDefaultConf.Support2KPacket = DISABLE;
 801a242:	2300      	movs	r3, #0
 801a244:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
            macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 801a248:	2302      	movs	r3, #2
 801a24a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            macDefaultConf.TransmitFlowControl = DISABLE;
 801a24e:	2300      	movs	r3, #0
 801a250:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
            macDefaultConf.UnicastPausePacketDetect = DISABLE;
 801a254:	2300      	movs	r3, #0
 801a256:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
            macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 801a25a:	2300      	movs	r3, #0
 801a25c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
            macDefaultConf.Watchdog = ENABLE;
 801a260:	2301      	movs	r3, #1
 801a262:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            macDefaultConf.WatchdogTimeout = ETH_MACWTR_WTO_2KB;
 801a266:	2300      	movs	r3, #0
 801a268:	673b      	str	r3, [r7, #112]	@ 0x70
            macDefaultConf.ZeroQuantaPause = ENABLE;
 801a26a:	2301      	movs	r3, #1
 801a26c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

            /* MAC default configuration */
            ETH_SetMACConfig( heth, &macDefaultConf );
 801a270:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a274:	4619      	mov	r1, r3
 801a276:	6878      	ldr	r0, [r7, #4]
 801a278:	f7ff fde6 	bl	8019e48 <ETH_SetMACConfig>

            /*--------------- ETHERNET DMA registers default Configuration --------------*/
            dmaDefaultConf.AddressAlignedBeats = ENABLE;
 801a27c:	2301      	movs	r3, #1
 801a27e:	733b      	strb	r3, [r7, #12]
            dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 801a280:	2301      	movs	r3, #1
 801a282:	613b      	str	r3, [r7, #16]
            dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 801a284:	2300      	movs	r3, #0
 801a286:	60bb      	str	r3, [r7, #8]
            dmaDefaultConf.FlushRxPacket = DISABLE;
 801a288:	2300      	movs	r3, #0
 801a28a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            dmaDefaultConf.PBLx8Mode = DISABLE;
 801a28e:	2300      	movs	r3, #0
 801a290:	757b      	strb	r3, [r7, #21]
            dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 801a292:	2300      	movs	r3, #0
 801a294:	753b      	strb	r3, [r7, #20]
            dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 801a296:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801a29a:	623b      	str	r3, [r7, #32]
            dmaDefaultConf.SecondPacketOperate = DISABLE;
 801a29c:	2300      	movs	r3, #0
 801a29e:	773b      	strb	r3, [r7, #28]
            dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 801a2a0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801a2a4:	61bb      	str	r3, [r7, #24]
            dmaDefaultConf.TCPSegmentation = DISABLE;
 801a2a6:	2300      	movs	r3, #0
 801a2a8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            dmaDefaultConf.MaximumSegmentSize = 536;
 801a2ac:	f44f 7306 	mov.w	r3, #536	@ 0x218
 801a2b0:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* DMA default configuration */
            ETH_SetDMAConfig( heth, &dmaDefaultConf );
 801a2b2:	f107 0308 	add.w	r3, r7, #8
 801a2b6:	4619      	mov	r1, r3
 801a2b8:	6878      	ldr	r0, [r7, #4]
 801a2ba:	f7ff fee1 	bl	801a080 <ETH_SetDMAConfig>
        }
 801a2be:	bf00      	nop
 801a2c0:	3790      	adds	r7, #144	@ 0x90
 801a2c2:	46bd      	mov	sp, r7
 801a2c4:	bd80      	pop	{r7, pc}
	...

0801a2c8 <ETH_MAC_MDIO_ClkConfig>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MAC_MDIO_ClkConfig( ETH_HandleTypeDef * heth )
        {
 801a2c8:	b580      	push	{r7, lr}
 801a2ca:	b084      	sub	sp, #16
 801a2cc:	af00      	add	r7, sp, #0
 801a2ce:	6078      	str	r0, [r7, #4]
            uint32_t tmpreg, hclk;

            /* Get the ETHERNET MACMDIOAR value */
            tmpreg = ( heth->Instance )->MACMDIOAR;
 801a2d0:	687b      	ldr	r3, [r7, #4]
 801a2d2:	681b      	ldr	r3, [r3, #0]
 801a2d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801a2d8:	60fb      	str	r3, [r7, #12]

            /* Clear CSR Clock Range bits */
            tmpreg &= ~ETH_MACMDIOAR_CR;
 801a2da:	68fb      	ldr	r3, [r7, #12]
 801a2dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 801a2e0:	60fb      	str	r3, [r7, #12]

            /* Get hclk frequency value */
            hclk = HAL_RCC_GetHCLKFreq();
 801a2e2:	f003 fdf1 	bl	801dec8 <HAL_RCC_GetHCLKFreq>
 801a2e6:	60b8      	str	r0, [r7, #8]

            /* Set CR bits depending on hclk value */
            if( ( hclk >= 20000000U ) && ( hclk < 35000000U ) )
 801a2e8:	68bb      	ldr	r3, [r7, #8]
 801a2ea:	4a1e      	ldr	r2, [pc, #120]	@ (801a364 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 801a2ec:	4293      	cmp	r3, r2
 801a2ee:	d908      	bls.n	801a302 <ETH_MAC_MDIO_ClkConfig+0x3a>
 801a2f0:	68bb      	ldr	r3, [r7, #8]
 801a2f2:	4a1d      	ldr	r2, [pc, #116]	@ (801a368 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 801a2f4:	4293      	cmp	r3, r2
 801a2f6:	d804      	bhi.n	801a302 <ETH_MAC_MDIO_ClkConfig+0x3a>
            {
                /* CSR Clock Range between 20-35 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV16;
 801a2f8:	68fb      	ldr	r3, [r7, #12]
 801a2fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801a2fe:	60fb      	str	r3, [r7, #12]
 801a300:	e027      	b.n	801a352 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else if( ( hclk >= 35000000U ) && ( hclk < 60000000U ) )
 801a302:	68bb      	ldr	r3, [r7, #8]
 801a304:	4a18      	ldr	r2, [pc, #96]	@ (801a368 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 801a306:	4293      	cmp	r3, r2
 801a308:	d908      	bls.n	801a31c <ETH_MAC_MDIO_ClkConfig+0x54>
 801a30a:	68bb      	ldr	r3, [r7, #8]
 801a30c:	4a17      	ldr	r2, [pc, #92]	@ (801a36c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 801a30e:	4293      	cmp	r3, r2
 801a310:	d204      	bcs.n	801a31c <ETH_MAC_MDIO_ClkConfig+0x54>
            {
                /* CSR Clock Range between 35-60 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV26;
 801a312:	68fb      	ldr	r3, [r7, #12]
 801a314:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 801a318:	60fb      	str	r3, [r7, #12]
 801a31a:	e01a      	b.n	801a352 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else if( ( hclk >= 60000000U ) && ( hclk < 100000000U ) )
 801a31c:	68bb      	ldr	r3, [r7, #8]
 801a31e:	4a13      	ldr	r2, [pc, #76]	@ (801a36c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 801a320:	4293      	cmp	r3, r2
 801a322:	d303      	bcc.n	801a32c <ETH_MAC_MDIO_ClkConfig+0x64>
 801a324:	68bb      	ldr	r3, [r7, #8]
 801a326:	4a12      	ldr	r2, [pc, #72]	@ (801a370 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 801a328:	4293      	cmp	r3, r2
 801a32a:	d911      	bls.n	801a350 <ETH_MAC_MDIO_ClkConfig+0x88>
            {
                /* CSR Clock Range between 60-100 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
            }
            else if( ( hclk >= 100000000U ) && ( hclk < 150000000U ) )
 801a32c:	68bb      	ldr	r3, [r7, #8]
 801a32e:	4a10      	ldr	r2, [pc, #64]	@ (801a370 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 801a330:	4293      	cmp	r3, r2
 801a332:	d908      	bls.n	801a346 <ETH_MAC_MDIO_ClkConfig+0x7e>
 801a334:	68bb      	ldr	r3, [r7, #8]
 801a336:	4a0f      	ldr	r2, [pc, #60]	@ (801a374 <ETH_MAC_MDIO_ClkConfig+0xac>)
 801a338:	4293      	cmp	r3, r2
 801a33a:	d804      	bhi.n	801a346 <ETH_MAC_MDIO_ClkConfig+0x7e>
            {
                /* CSR Clock Range between 100-150 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV62;
 801a33c:	68fb      	ldr	r3, [r7, #12]
 801a33e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801a342:	60fb      	str	r3, [r7, #12]
 801a344:	e005      	b.n	801a352 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else /* (hclk >= 150000000)&&(hclk <= 200000000) */
            {
                /* CSR Clock Range between 150-200 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV102;
 801a346:	68fb      	ldr	r3, [r7, #12]
 801a348:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801a34c:	60fb      	str	r3, [r7, #12]
 801a34e:	e000      	b.n	801a352 <ETH_MAC_MDIO_ClkConfig+0x8a>
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
 801a350:	bf00      	nop
            }

            /* Configure the CSR Clock Range */
            ( heth->Instance )->MACMDIOAR = ( uint32_t ) tmpreg;
 801a352:	687b      	ldr	r3, [r7, #4]
 801a354:	681b      	ldr	r3, [r3, #0]
 801a356:	68fa      	ldr	r2, [r7, #12]
 801a358:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
        }
 801a35c:	bf00      	nop
 801a35e:	3710      	adds	r7, #16
 801a360:	46bd      	mov	sp, r7
 801a362:	bd80      	pop	{r7, pc}
 801a364:	01312cff 	.word	0x01312cff
 801a368:	02160ebf 	.word	0x02160ebf
 801a36c:	03938700 	.word	0x03938700
 801a370:	05f5e0ff 	.word	0x05f5e0ff
 801a374:	08f0d17f 	.word	0x08f0d17f

0801a378 <ETH_DMATxDescListInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMATxDescListInit( ETH_HandleTypeDef * heth )
        {
 801a378:	b480      	push	{r7}
 801a37a:	b085      	sub	sp, #20
 801a37c:	af00      	add	r7, sp, #0
 801a37e:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmatxdesc;
            uint32_t i;

            /* Fill each DMATxDesc descriptor with the right values */
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 801a380:	2300      	movs	r3, #0
 801a382:	60fb      	str	r3, [r7, #12]
 801a384:	e01d      	b.n	801a3c2 <ETH_DMATxDescListInit+0x4a>
            {
                dmatxdesc = heth->Init.TxDesc + i;
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	68d9      	ldr	r1, [r3, #12]
 801a38a:	68fa      	ldr	r2, [r7, #12]
 801a38c:	4613      	mov	r3, r2
 801a38e:	005b      	lsls	r3, r3, #1
 801a390:	4413      	add	r3, r2
 801a392:	00db      	lsls	r3, r3, #3
 801a394:	440b      	add	r3, r1
 801a396:	60bb      	str	r3, [r7, #8]

                WRITE_REG( dmatxdesc->DESC0, 0x0 );
 801a398:	68bb      	ldr	r3, [r7, #8]
 801a39a:	2200      	movs	r2, #0
 801a39c:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmatxdesc->DESC1, 0x0 );
 801a39e:	68bb      	ldr	r3, [r7, #8]
 801a3a0:	2200      	movs	r2, #0
 801a3a2:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmatxdesc->DESC2, 0x0 );
 801a3a4:	68bb      	ldr	r3, [r7, #8]
 801a3a6:	2200      	movs	r2, #0
 801a3a8:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmatxdesc->DESC3, 0x0 );
 801a3aa:	68bb      	ldr	r3, [r7, #8]
 801a3ac:	2200      	movs	r2, #0
 801a3ae:	60da      	str	r2, [r3, #12]

                WRITE_REG( heth->TxDescList.TxDesc[ i ], ( uint32_t ) dmatxdesc );
 801a3b0:	68b9      	ldr	r1, [r7, #8]
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	68fa      	ldr	r2, [r7, #12]
 801a3b6:	3206      	adds	r2, #6
 801a3b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 801a3bc:	68fb      	ldr	r3, [r7, #12]
 801a3be:	3301      	adds	r3, #1
 801a3c0:	60fb      	str	r3, [r7, #12]
 801a3c2:	68fb      	ldr	r3, [r7, #12]
 801a3c4:	2b03      	cmp	r3, #3
 801a3c6:	d9de      	bls.n	801a386 <ETH_DMATxDescListInit+0xe>
            }

            heth->TxDescList.CurTxDesc = 0;
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	2200      	movs	r2, #0
 801a3cc:	629a      	str	r2, [r3, #40]	@ 0x28
            heth->TxDescList.TailTxDesc = 0;
 801a3ce:	687b      	ldr	r3, [r7, #4]
 801a3d0:	2200      	movs	r2, #0
 801a3d2:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set Transmit Descriptor Ring Length */
            WRITE_REG( heth->Instance->DMACTDRLR, ( ETH_TX_DESC_CNT - 1 ) );
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a3dc:	461a      	mov	r2, r3
 801a3de:	2303      	movs	r3, #3
 801a3e0:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

            /* Set Transmit Descriptor List Address */
            /* Channel Tx descriptor list address register (ETH_DMACTXDLAR)). */
            WRITE_REG( heth->Instance->DMACTDLAR, ( uint32_t ) heth->Init.TxDesc );
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	68da      	ldr	r2, [r3, #12]
 801a3e8:	687b      	ldr	r3, [r7, #4]
 801a3ea:	681b      	ldr	r3, [r3, #0]
 801a3ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a3f0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

            /* Set Transmit Descriptor Tail pointer */
            WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) heth->Init.TxDesc );
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	68da      	ldr	r2, [r3, #12]
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	681b      	ldr	r3, [r3, #0]
 801a3fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a400:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
        }
 801a404:	bf00      	nop
 801a406:	3714      	adds	r7, #20
 801a408:	46bd      	mov	sp, r7
 801a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a40e:	4770      	bx	lr

0801a410 <ETH_DMARxDescListInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMARxDescListInit( ETH_HandleTypeDef * heth )
        {
 801a410:	b480      	push	{r7}
 801a412:	b085      	sub	sp, #20
 801a414:	af00      	add	r7, sp, #0
 801a416:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmarxdesc;
            uint32_t i;

            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 801a418:	2300      	movs	r3, #0
 801a41a:	60fb      	str	r3, [r7, #12]
 801a41c:	e023      	b.n	801a466 <ETH_DMARxDescListInit+0x56>
            {
                dmarxdesc = heth->Init.RxDesc + i;
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	6919      	ldr	r1, [r3, #16]
 801a422:	68fa      	ldr	r2, [r7, #12]
 801a424:	4613      	mov	r3, r2
 801a426:	005b      	lsls	r3, r3, #1
 801a428:	4413      	add	r3, r2
 801a42a:	00db      	lsls	r3, r3, #3
 801a42c:	440b      	add	r3, r1
 801a42e:	60bb      	str	r3, [r7, #8]

                WRITE_REG( dmarxdesc->DESC0, 0x0 );
 801a430:	68bb      	ldr	r3, [r7, #8]
 801a432:	2200      	movs	r2, #0
 801a434:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmarxdesc->DESC1, 0x0 );
 801a436:	68bb      	ldr	r3, [r7, #8]
 801a438:	2200      	movs	r2, #0
 801a43a:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmarxdesc->DESC2, 0x0 );
 801a43c:	68bb      	ldr	r3, [r7, #8]
 801a43e:	2200      	movs	r2, #0
 801a440:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmarxdesc->DESC3, 0x0 );
 801a442:	68bb      	ldr	r3, [r7, #8]
 801a444:	2200      	movs	r2, #0
 801a446:	60da      	str	r2, [r3, #12]
                WRITE_REG( dmarxdesc->BackupAddr0, 0x0 );
 801a448:	68bb      	ldr	r3, [r7, #8]
 801a44a:	2200      	movs	r2, #0
 801a44c:	611a      	str	r2, [r3, #16]
                WRITE_REG( dmarxdesc->BackupAddr1, 0x0 );
 801a44e:	68bb      	ldr	r3, [r7, #8]
 801a450:	2200      	movs	r2, #0
 801a452:	615a      	str	r2, [r3, #20]

                /* Set Rx descritors addresses */
                WRITE_REG( heth->RxDescList.RxDesc[ i ], ( uint32_t ) dmarxdesc );
 801a454:	68b9      	ldr	r1, [r7, #8]
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	68fa      	ldr	r2, [r7, #12]
 801a45a:	320c      	adds	r2, #12
 801a45c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 801a460:	68fb      	ldr	r3, [r7, #12]
 801a462:	3301      	adds	r3, #1
 801a464:	60fb      	str	r3, [r7, #12]
 801a466:	68fb      	ldr	r3, [r7, #12]
 801a468:	2b03      	cmp	r3, #3
 801a46a:	d9d8      	bls.n	801a41e <ETH_DMARxDescListInit+0xe>
            }

            WRITE_REG( heth->RxDescList.CurRxDesc, 0 );
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	2200      	movs	r2, #0
 801a470:	641a      	str	r2, [r3, #64]	@ 0x40
            WRITE_REG( heth->RxDescList.FirstAppDesc, 0 );
 801a472:	687b      	ldr	r3, [r7, #4]
 801a474:	2200      	movs	r2, #0
 801a476:	645a      	str	r2, [r3, #68]	@ 0x44
            WRITE_REG( heth->RxDescList.AppDescNbr, 0 );
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	2200      	movs	r2, #0
 801a47c:	649a      	str	r2, [r3, #72]	@ 0x48
            WRITE_REG( heth->RxDescList.ItMode, 0 );
 801a47e:	687b      	ldr	r3, [r7, #4]
 801a480:	2200      	movs	r2, #0
 801a482:	651a      	str	r2, [r3, #80]	@ 0x50
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	2200      	movs	r2, #0
 801a488:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Set Receive Descriptor Ring Length */
            WRITE_REG( heth->Instance->DMACRDRLR, ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) );
 801a48a:	687b      	ldr	r3, [r7, #4]
 801a48c:	681b      	ldr	r3, [r3, #0]
 801a48e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a492:	461a      	mov	r2, r3
 801a494:	2303      	movs	r3, #3
 801a496:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

            /* Set Receive Descriptor List Address */
            /* Channel Rx descriptor list address register (ETH_DMACRXDLAR)). */
            WRITE_REG( heth->Instance->DMACRDLAR, ( uint32_t ) heth->Init.RxDesc );
 801a49a:	687b      	ldr	r3, [r7, #4]
 801a49c:	691a      	ldr	r2, [r3, #16]
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	681b      	ldr	r3, [r3, #0]
 801a4a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a4a6:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

            /* Set Receive Descriptor Tail pointer Address */
            WRITE_REG( heth->Instance->DMACRDTPR, ( ( uint32_t ) ( heth->Init.RxDesc + ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) ) ) );
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	691b      	ldr	r3, [r3, #16]
 801a4ae:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 801a4b2:	687b      	ldr	r3, [r7, #4]
 801a4b4:	681b      	ldr	r3, [r3, #0]
 801a4b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a4ba:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
        }
 801a4be:	bf00      	nop
 801a4c0:	3714      	adds	r7, #20
 801a4c2:	46bd      	mov	sp, r7
 801a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4c8:	4770      	bx	lr
	...

0801a4cc <ETH_Clear_Tx_Descriptors>:

        void ETH_Clear_Tx_Descriptors( ETH_HandleTypeDef * heth )
        {
 801a4cc:	b580      	push	{r7, lr}
 801a4ce:	b086      	sub	sp, #24
 801a4d0:	af00      	add	r7, sp, #0
 801a4d2:	6078      	str	r0, [r7, #4]
            uint32_t ulTailTxDesc = heth->TxDescList.TailTxDesc;
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a4d8:	617b      	str	r3, [r7, #20]

            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 801a4da:	e032      	b.n	801a542 <ETH_Clear_Tx_Descriptors+0x76>
            {
                ETH_DMADescTypeDef * xDMATxDescriptor = ( ETH_DMADescTypeDef * ) heth->TxDescList.TxDesc[ ulTailTxDesc ];
 801a4dc:	687b      	ldr	r3, [r7, #4]
 801a4de:	697a      	ldr	r2, [r7, #20]
 801a4e0:	3206      	adds	r2, #6
 801a4e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a4e6:	613b      	str	r3, [r7, #16]

                if( ( xDMATxDescriptor->DESC3 & ETH_DMATXNDESCRF_OWN ) != 0 )
 801a4e8:	693b      	ldr	r3, [r7, #16]
 801a4ea:	68db      	ldr	r3, [r3, #12]
 801a4ec:	2b00      	cmp	r3, #0
 801a4ee:	db31      	blt.n	801a554 <ETH_Clear_Tx_Descriptors+0x88>
                #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    NetworkBufferDescriptor_t * pxNetworkBuffer;
                    uint8_t * ucPayLoad;

                    ucPayLoad = ( uint8_t * ) xDMATxDescriptor->DESC0;
 801a4f0:	693b      	ldr	r3, [r7, #16]
 801a4f2:	681b      	ldr	r3, [r3, #0]
 801a4f4:	60fb      	str	r3, [r7, #12]

                    if( ucPayLoad == NULL )
 801a4f6:	68fb      	ldr	r3, [r7, #12]
 801a4f8:	2b00      	cmp	r3, #0
 801a4fa:	d02d      	beq.n	801a558 <ETH_Clear_Tx_Descriptors+0x8c>
                    {
                        /* No buffer is assigned or DMA still OWNs this descriptor. */
                        break;
                    }

                    pxNetworkBuffer = pxPacketBuffer_to_NetworkBuffer( ucPayLoad );
 801a4fc:	68f8      	ldr	r0, [r7, #12]
 801a4fe:	f7f0 fab4 	bl	800aa6a <pxPacketBuffer_to_NetworkBuffer>
 801a502:	60b8      	str	r0, [r7, #8]

                    if( pxNetworkBuffer != NULL )
 801a504:	68bb      	ldr	r3, [r7, #8]
 801a506:	2b00      	cmp	r3, #0
 801a508:	d002      	beq.n	801a510 <ETH_Clear_Tx_Descriptors+0x44>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801a50a:	68b8      	ldr	r0, [r7, #8]
 801a50c:	f7fd faa2 	bl	8017a54 <vReleaseNetworkBufferAndDescriptor>
                    }
                }
                #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */

                xDMATxDescriptor->DESC0 = ( uint32_t ) 0u;
 801a510:	693b      	ldr	r3, [r7, #16]
 801a512:	2200      	movs	r2, #0
 801a514:	601a      	str	r2, [r3, #0]

                INCR_TX_DESC_INDEX( ulTailTxDesc, 1U );
 801a516:	697b      	ldr	r3, [r7, #20]
 801a518:	3301      	adds	r3, #1
 801a51a:	617b      	str	r3, [r7, #20]
 801a51c:	697b      	ldr	r3, [r7, #20]
 801a51e:	2b03      	cmp	r3, #3
 801a520:	d902      	bls.n	801a528 <ETH_Clear_Tx_Descriptors+0x5c>
 801a522:	697b      	ldr	r3, [r7, #20]
 801a524:	3b04      	subs	r3, #4
 801a526:	617b      	str	r3, [r7, #20]
                heth->TxDescList.TailTxDesc = ulTailTxDesc;
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	697a      	ldr	r2, [r7, #20]
 801a52c:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("dsb 0xF":::"memory");
 801a52e:	f3bf 8f4f 	dsb	sy
}
 801a532:	bf00      	nop

                __DSB();

                xSemaphoreGive( xTXDescriptorSemaphore );
 801a534:	4b0b      	ldr	r3, [pc, #44]	@ (801a564 <ETH_Clear_Tx_Descriptors+0x98>)
 801a536:	6818      	ldr	r0, [r3, #0]
 801a538:	2300      	movs	r3, #0
 801a53a:	2200      	movs	r2, #0
 801a53c:	2100      	movs	r1, #0
 801a53e:	f7e9 fb47 	bl	8003bd0 <xQueueGenericSend>
            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 801a542:	4b08      	ldr	r3, [pc, #32]	@ (801a564 <ETH_Clear_Tx_Descriptors+0x98>)
 801a544:	681b      	ldr	r3, [r3, #0]
 801a546:	4618      	mov	r0, r3
 801a548:	f7e9 fde8 	bl	800411c <uxQueueMessagesWaiting>
 801a54c:	4603      	mov	r3, r0
 801a54e:	2b04      	cmp	r3, #4
 801a550:	d1c4      	bne.n	801a4dc <ETH_Clear_Tx_Descriptors+0x10>
            }
        }
 801a552:	e002      	b.n	801a55a <ETH_Clear_Tx_Descriptors+0x8e>
                    break;
 801a554:	bf00      	nop
 801a556:	e000      	b.n	801a55a <ETH_Clear_Tx_Descriptors+0x8e>
                        break;
 801a558:	bf00      	nop
        }
 801a55a:	bf00      	nop
 801a55c:	3718      	adds	r7, #24
 801a55e:	46bd      	mov	sp, r7
 801a560:	bd80      	pop	{r7, pc}
 801a562:	bf00      	nop
 801a564:	20002474 	.word	0x20002474

0801a568 <ETH_Prepare_Tx_Descriptors>:
 * @retval Status
 */
        static uint32_t ETH_Prepare_Tx_Descriptors( ETH_HandleTypeDef * heth,
                                                    ETH_TxPacketConfig * pTxConfig,
                                                    uint32_t ItMode )
        {
 801a568:	b480      	push	{r7}
 801a56a:	b08b      	sub	sp, #44	@ 0x2c
 801a56c:	af00      	add	r7, sp, #0
 801a56e:	60f8      	str	r0, [r7, #12]
 801a570:	60b9      	str	r1, [r7, #8]
 801a572:	607a      	str	r2, [r7, #4]
            ETH_TxDescListTypeDef * dmatxdesclist = &heth->TxDescList;
 801a574:	68fb      	ldr	r3, [r7, #12]
 801a576:	3318      	adds	r3, #24
 801a578:	623b      	str	r3, [r7, #32]
            uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 801a57a:	6a3b      	ldr	r3, [r7, #32]
 801a57c:	691b      	ldr	r3, [r3, #16]
 801a57e:	61fb      	str	r3, [r7, #28]
            uint32_t DESC3;
            ETH_DMADescTypeDef * dmatxdesc = ( ETH_DMADescTypeDef * ) dmatxdesclist->TxDesc[ firstdescidx ];
 801a580:	6a3b      	ldr	r3, [r7, #32]
 801a582:	69fa      	ldr	r2, [r7, #28]
 801a584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a588:	61bb      	str	r3, [r7, #24]
            ETH_BufferTypeDef * txbuffer = pTxConfig->TxBuffer;
 801a58a:	68bb      	ldr	r3, [r7, #8]
 801a58c:	689b      	ldr	r3, [r3, #8]
 801a58e:	617b      	str	r3, [r7, #20]

            /* FreeRTOS+TCP doesn't support linked buffers. */
            txbuffer->next = NULL;
 801a590:	697b      	ldr	r3, [r7, #20]
 801a592:	2200      	movs	r2, #0
 801a594:	609a      	str	r2, [r3, #8]
            DESC3 = READ_REG( dmatxdesc->DESC3 );
 801a596:	69bb      	ldr	r3, [r7, #24]
 801a598:	68db      	ldr	r3, [r3, #12]
 801a59a:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Current TX Descriptor Owned by DMA: cannot be used by the application  */
            if( READ_BIT( DESC3, ETH_DMATXNDESCWBF_OWN ) != 0U )
 801a59c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a59e:	2b00      	cmp	r3, #0
 801a5a0:	da01      	bge.n	801a5a6 <ETH_Prepare_Tx_Descriptors+0x3e>
            {
                /* Should not get here because TX descriptors are protected by a counting semaphore. */
                return HAL_ETH_ERROR_BUSY;
 801a5a2:	2302      	movs	r3, #2
 801a5a4:	e05c      	b.n	801a660 <ETH_Prepare_Tx_Descriptors+0xf8>
            /***************************************************************************/
            /*****************    Normal descriptors configuration     *****************/
            /***************************************************************************/

            /* Set header or buffer 1 address */
            WRITE_REG( dmatxdesc->DESC0, ( uint32_t ) txbuffer->buffer );
 801a5a6:	697b      	ldr	r3, [r7, #20]
 801a5a8:	681b      	ldr	r3, [r3, #0]
 801a5aa:	461a      	mov	r2, r3
 801a5ac:	69bb      	ldr	r3, [r7, #24]
 801a5ae:	601a      	str	r2, [r3, #0]
            /* Set header or buffer 1 Length */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len );
 801a5b0:	69bb      	ldr	r3, [r7, #24]
 801a5b2:	689a      	ldr	r2, [r3, #8]
 801a5b4:	4b2d      	ldr	r3, [pc, #180]	@ (801a66c <ETH_Prepare_Tx_Descriptors+0x104>)
 801a5b6:	4013      	ands	r3, r2
 801a5b8:	697a      	ldr	r2, [r7, #20]
 801a5ba:	6852      	ldr	r2, [r2, #4]
 801a5bc:	431a      	orrs	r2, r3
 801a5be:	69bb      	ldr	r3, [r7, #24]
 801a5c0:	609a      	str	r2, [r3, #8]

            WRITE_REG( dmatxdesc->DESC1, 0x0 );
 801a5c2:	69bb      	ldr	r3, [r7, #24]
 801a5c4:	2200      	movs	r2, #0
 801a5c6:	605a      	str	r2, [r3, #4]
            /* Set buffer 2 Length to zero */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U );
 801a5c8:	69bb      	ldr	r3, [r7, #24]
 801a5ca:	689a      	ldr	r2, [r3, #8]
 801a5cc:	4b28      	ldr	r3, [pc, #160]	@ (801a670 <ETH_Prepare_Tx_Descriptors+0x108>)
 801a5ce:	4013      	ands	r3, r2
 801a5d0:	69ba      	ldr	r2, [r7, #24]
 801a5d2:	6093      	str	r3, [r2, #8]

            MODIFY_REG( DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length );
 801a5d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a5d6:	4b27      	ldr	r3, [pc, #156]	@ (801a674 <ETH_Prepare_Tx_Descriptors+0x10c>)
 801a5d8:	4013      	ands	r3, r2
 801a5da:	68ba      	ldr	r2, [r7, #8]
 801a5dc:	6852      	ldr	r2, [r2, #4]
 801a5de:	4313      	orrs	r3, r2
 801a5e0:	627b      	str	r3, [r7, #36]	@ 0x24

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM ) != 0U )
 801a5e2:	68bb      	ldr	r3, [r7, #8]
 801a5e4:	681b      	ldr	r3, [r3, #0]
 801a5e6:	f003 0301 	and.w	r3, r3, #1
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	d006      	beq.n	801a5fc <ETH_Prepare_Tx_Descriptors+0x94>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl );
 801a5ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 801a5f4:	68bb      	ldr	r3, [r7, #8]
 801a5f6:	695b      	ldr	r3, [r3, #20]
 801a5f8:	4313      	orrs	r3, r2
 801a5fa:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD ) != 0U )
 801a5fc:	68bb      	ldr	r3, [r7, #8]
 801a5fe:	681b      	ldr	r3, [r3, #0]
 801a600:	f003 0320 	and.w	r3, r3, #32
 801a604:	2b00      	cmp	r3, #0
 801a606:	d006      	beq.n	801a616 <ETH_Prepare_Tx_Descriptors+0xae>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl );
 801a608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a60a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 801a60e:	68bb      	ldr	r3, [r7, #8]
 801a610:	691b      	ldr	r3, [r3, #16]
 801a612:	4313      	orrs	r3, r2
 801a614:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Mark it as First and the last Descriptor */
            SET_BIT( DESC3, ETH_DMATXNDESCRF_FD | ETH_DMATXNDESCRF_LD );
 801a616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a618:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 801a61c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark it as NORMAL descriptor */
            CLEAR_BIT( DESC3, ETH_DMATXNDESCRF_CTXT );
 801a61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a620:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801a624:	627b      	str	r3, [r7, #36]	@ 0x24

            /* set OWN bit of FIRST descriptor */
            SET_BIT( DESC3, ETH_DMATXNDESCRF_OWN );
 801a626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a628:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801a62c:	627b      	str	r3, [r7, #36]	@ 0x24

            if( ItMode != ( ( uint32_t ) RESET ) )
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	2b00      	cmp	r3, #0
 801a632:	d006      	beq.n	801a642 <ETH_Prepare_Tx_Descriptors+0xda>
            {
                /* Set Interrupt on competition bit */
                SET_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 801a634:	69bb      	ldr	r3, [r7, #24]
 801a636:	689b      	ldr	r3, [r3, #8]
 801a638:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 801a63c:	69bb      	ldr	r3, [r7, #24]
 801a63e:	609a      	str	r2, [r3, #8]
 801a640:	e005      	b.n	801a64e <ETH_Prepare_Tx_Descriptors+0xe6>
            }
            else
            {
                /* Clear Interrupt on competition bit */
                CLEAR_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 801a642:	69bb      	ldr	r3, [r7, #24]
 801a644:	689b      	ldr	r3, [r3, #8]
 801a646:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801a64a:	69bb      	ldr	r3, [r7, #24]
 801a64c:	609a      	str	r2, [r3, #8]
            }

            WRITE_REG( dmatxdesc->DESC3, DESC3 );
 801a64e:	69bb      	ldr	r3, [r7, #24]
 801a650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a652:	60da      	str	r2, [r3, #12]

            /* Read back the value. */
            if( READ_REG( dmatxdesc->DESC3 ) )
 801a654:	69bb      	ldr	r3, [r7, #24]
 801a656:	68db      	ldr	r3, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801a658:	f3bf 8f4f 	dsb	sy
}
 801a65c:	bf00      	nop
            }

            __DSB();

            /* Return function status */
            return HAL_ETH_ERROR_NONE;
 801a65e:	2300      	movs	r3, #0
        }
 801a660:	4618      	mov	r0, r3
 801a662:	372c      	adds	r7, #44	@ 0x2c
 801a664:	46bd      	mov	sp, r7
 801a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a66a:	4770      	bx	lr
 801a66c:	ffffc000 	.word	0xffffc000
 801a670:	c000ffff 	.word	0xc000ffff
 801a674:	ffff8000 	.word	0xffff8000

0801a678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801a678:	b580      	push	{r7, lr}
 801a67a:	b082      	sub	sp, #8
 801a67c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801a67e:	2003      	movs	r0, #3
 801a680:	f000 f9a0 	bl	801a9c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801a684:	f003 faa6 	bl	801dbd4 <HAL_RCC_GetSysClockFreq>
 801a688:	4602      	mov	r2, r0
 801a68a:	4b15      	ldr	r3, [pc, #84]	@ (801a6e0 <HAL_Init+0x68>)
 801a68c:	699b      	ldr	r3, [r3, #24]
 801a68e:	0a1b      	lsrs	r3, r3, #8
 801a690:	f003 030f 	and.w	r3, r3, #15
 801a694:	4913      	ldr	r1, [pc, #76]	@ (801a6e4 <HAL_Init+0x6c>)
 801a696:	5ccb      	ldrb	r3, [r1, r3]
 801a698:	f003 031f 	and.w	r3, r3, #31
 801a69c:	fa22 f303 	lsr.w	r3, r2, r3
 801a6a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801a6a2:	4b0f      	ldr	r3, [pc, #60]	@ (801a6e0 <HAL_Init+0x68>)
 801a6a4:	699b      	ldr	r3, [r3, #24]
 801a6a6:	f003 030f 	and.w	r3, r3, #15
 801a6aa:	4a0e      	ldr	r2, [pc, #56]	@ (801a6e4 <HAL_Init+0x6c>)
 801a6ac:	5cd3      	ldrb	r3, [r2, r3]
 801a6ae:	f003 031f 	and.w	r3, r3, #31
 801a6b2:	687a      	ldr	r2, [r7, #4]
 801a6b4:	fa22 f303 	lsr.w	r3, r2, r3
 801a6b8:	4a0b      	ldr	r2, [pc, #44]	@ (801a6e8 <HAL_Init+0x70>)
 801a6ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801a6bc:	4a0b      	ldr	r2, [pc, #44]	@ (801a6ec <HAL_Init+0x74>)
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801a6c2:	200f      	movs	r0, #15
 801a6c4:	f000 f814 	bl	801a6f0 <HAL_InitTick>
 801a6c8:	4603      	mov	r3, r0
 801a6ca:	2b00      	cmp	r3, #0
 801a6cc:	d001      	beq.n	801a6d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 801a6ce:	2301      	movs	r3, #1
 801a6d0:	e002      	b.n	801a6d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 801a6d2:	f7e7 fe95 	bl	8002400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801a6d6:	2300      	movs	r3, #0
}
 801a6d8:	4618      	mov	r0, r3
 801a6da:	3708      	adds	r7, #8
 801a6dc:	46bd      	mov	sp, r7
 801a6de:	bd80      	pop	{r7, pc}
 801a6e0:	58024400 	.word	0x58024400
 801a6e4:	08027ee4 	.word	0x08027ee4
 801a6e8:	20000004 	.word	0x20000004
 801a6ec:	20000000 	.word	0x20000000

0801a6f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801a6f0:	b580      	push	{r7, lr}
 801a6f2:	b082      	sub	sp, #8
 801a6f4:	af00      	add	r7, sp, #0
 801a6f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 801a6f8:	4b15      	ldr	r3, [pc, #84]	@ (801a750 <HAL_InitTick+0x60>)
 801a6fa:	781b      	ldrb	r3, [r3, #0]
 801a6fc:	2b00      	cmp	r3, #0
 801a6fe:	d101      	bne.n	801a704 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 801a700:	2301      	movs	r3, #1
 801a702:	e021      	b.n	801a748 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 801a704:	4b13      	ldr	r3, [pc, #76]	@ (801a754 <HAL_InitTick+0x64>)
 801a706:	681a      	ldr	r2, [r3, #0]
 801a708:	4b11      	ldr	r3, [pc, #68]	@ (801a750 <HAL_InitTick+0x60>)
 801a70a:	781b      	ldrb	r3, [r3, #0]
 801a70c:	4619      	mov	r1, r3
 801a70e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801a712:	fbb3 f3f1 	udiv	r3, r3, r1
 801a716:	fbb2 f3f3 	udiv	r3, r2, r3
 801a71a:	4618      	mov	r0, r3
 801a71c:	f000 f985 	bl	801aa2a <HAL_SYSTICK_Config>
 801a720:	4603      	mov	r3, r0
 801a722:	2b00      	cmp	r3, #0
 801a724:	d001      	beq.n	801a72a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 801a726:	2301      	movs	r3, #1
 801a728:	e00e      	b.n	801a748 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801a72a:	687b      	ldr	r3, [r7, #4]
 801a72c:	2b0f      	cmp	r3, #15
 801a72e:	d80a      	bhi.n	801a746 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801a730:	2200      	movs	r2, #0
 801a732:	6879      	ldr	r1, [r7, #4]
 801a734:	f04f 30ff 	mov.w	r0, #4294967295
 801a738:	f000 f94f 	bl	801a9da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801a73c:	4a06      	ldr	r2, [pc, #24]	@ (801a758 <HAL_InitTick+0x68>)
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801a742:	2300      	movs	r3, #0
 801a744:	e000      	b.n	801a748 <HAL_InitTick+0x58>
    return HAL_ERROR;
 801a746:	2301      	movs	r3, #1
}
 801a748:	4618      	mov	r0, r3
 801a74a:	3708      	adds	r7, #8
 801a74c:	46bd      	mov	sp, r7
 801a74e:	bd80      	pop	{r7, pc}
 801a750:	20000024 	.word	0x20000024
 801a754:	20000000 	.word	0x20000000
 801a758:	20000020 	.word	0x20000020

0801a75c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801a75c:	b480      	push	{r7}
 801a75e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801a760:	4b06      	ldr	r3, [pc, #24]	@ (801a77c <HAL_IncTick+0x20>)
 801a762:	781b      	ldrb	r3, [r3, #0]
 801a764:	461a      	mov	r2, r3
 801a766:	4b06      	ldr	r3, [pc, #24]	@ (801a780 <HAL_IncTick+0x24>)
 801a768:	681b      	ldr	r3, [r3, #0]
 801a76a:	4413      	add	r3, r2
 801a76c:	4a04      	ldr	r2, [pc, #16]	@ (801a780 <HAL_IncTick+0x24>)
 801a76e:	6013      	str	r3, [r2, #0]
}
 801a770:	bf00      	nop
 801a772:	46bd      	mov	sp, r7
 801a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a778:	4770      	bx	lr
 801a77a:	bf00      	nop
 801a77c:	20000024 	.word	0x20000024
 801a780:	20002580 	.word	0x20002580

0801a784 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801a784:	b480      	push	{r7}
 801a786:	af00      	add	r7, sp, #0
  return uwTick;
 801a788:	4b03      	ldr	r3, [pc, #12]	@ (801a798 <HAL_GetTick+0x14>)
 801a78a:	681b      	ldr	r3, [r3, #0]
}
 801a78c:	4618      	mov	r0, r3
 801a78e:	46bd      	mov	sp, r7
 801a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a794:	4770      	bx	lr
 801a796:	bf00      	nop
 801a798:	20002580 	.word	0x20002580

0801a79c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801a79c:	b580      	push	{r7, lr}
 801a79e:	b084      	sub	sp, #16
 801a7a0:	af00      	add	r7, sp, #0
 801a7a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801a7a4:	f7ff ffee 	bl	801a784 <HAL_GetTick>
 801a7a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801a7aa:	687b      	ldr	r3, [r7, #4]
 801a7ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801a7ae:	68fb      	ldr	r3, [r7, #12]
 801a7b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a7b4:	d005      	beq.n	801a7c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801a7b6:	4b0a      	ldr	r3, [pc, #40]	@ (801a7e0 <HAL_Delay+0x44>)
 801a7b8:	781b      	ldrb	r3, [r3, #0]
 801a7ba:	461a      	mov	r2, r3
 801a7bc:	68fb      	ldr	r3, [r7, #12]
 801a7be:	4413      	add	r3, r2
 801a7c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801a7c2:	bf00      	nop
 801a7c4:	f7ff ffde 	bl	801a784 <HAL_GetTick>
 801a7c8:	4602      	mov	r2, r0
 801a7ca:	68bb      	ldr	r3, [r7, #8]
 801a7cc:	1ad3      	subs	r3, r2, r3
 801a7ce:	68fa      	ldr	r2, [r7, #12]
 801a7d0:	429a      	cmp	r2, r3
 801a7d2:	d8f7      	bhi.n	801a7c4 <HAL_Delay+0x28>
  {
  }
}
 801a7d4:	bf00      	nop
 801a7d6:	bf00      	nop
 801a7d8:	3710      	adds	r7, #16
 801a7da:	46bd      	mov	sp, r7
 801a7dc:	bd80      	pop	{r7, pc}
 801a7de:	bf00      	nop
 801a7e0:	20000024 	.word	0x20000024

0801a7e4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 801a7e4:	b480      	push	{r7}
 801a7e6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 801a7e8:	4b03      	ldr	r3, [pc, #12]	@ (801a7f8 <HAL_GetREVID+0x14>)
 801a7ea:	681b      	ldr	r3, [r3, #0]
 801a7ec:	0c1b      	lsrs	r3, r3, #16
}
 801a7ee:	4618      	mov	r0, r3
 801a7f0:	46bd      	mov	sp, r7
 801a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7f6:	4770      	bx	lr
 801a7f8:	5c001000 	.word	0x5c001000

0801a7fc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 801a7fc:	b480      	push	{r7}
 801a7fe:	b083      	sub	sp, #12
 801a800:	af00      	add	r7, sp, #0
 801a802:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 801a804:	4b06      	ldr	r3, [pc, #24]	@ (801a820 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 801a806:	685b      	ldr	r3, [r3, #4]
 801a808:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 801a80c:	4904      	ldr	r1, [pc, #16]	@ (801a820 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 801a80e:	687b      	ldr	r3, [r7, #4]
 801a810:	4313      	orrs	r3, r2
 801a812:	604b      	str	r3, [r1, #4]
}
 801a814:	bf00      	nop
 801a816:	370c      	adds	r7, #12
 801a818:	46bd      	mov	sp, r7
 801a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a81e:	4770      	bx	lr
 801a820:	58000400 	.word	0x58000400

0801a824 <__NVIC_SetPriorityGrouping>:
{
 801a824:	b480      	push	{r7}
 801a826:	b085      	sub	sp, #20
 801a828:	af00      	add	r7, sp, #0
 801a82a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	f003 0307 	and.w	r3, r3, #7
 801a832:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801a834:	4b0b      	ldr	r3, [pc, #44]	@ (801a864 <__NVIC_SetPriorityGrouping+0x40>)
 801a836:	68db      	ldr	r3, [r3, #12]
 801a838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801a83a:	68ba      	ldr	r2, [r7, #8]
 801a83c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 801a840:	4013      	ands	r3, r2
 801a842:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801a844:	68fb      	ldr	r3, [r7, #12]
 801a846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801a848:	68bb      	ldr	r3, [r7, #8]
 801a84a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 801a84c:	4b06      	ldr	r3, [pc, #24]	@ (801a868 <__NVIC_SetPriorityGrouping+0x44>)
 801a84e:	4313      	orrs	r3, r2
 801a850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801a852:	4a04      	ldr	r2, [pc, #16]	@ (801a864 <__NVIC_SetPriorityGrouping+0x40>)
 801a854:	68bb      	ldr	r3, [r7, #8]
 801a856:	60d3      	str	r3, [r2, #12]
}
 801a858:	bf00      	nop
 801a85a:	3714      	adds	r7, #20
 801a85c:	46bd      	mov	sp, r7
 801a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a862:	4770      	bx	lr
 801a864:	e000ed00 	.word	0xe000ed00
 801a868:	05fa0000 	.word	0x05fa0000

0801a86c <__NVIC_GetPriorityGrouping>:
{
 801a86c:	b480      	push	{r7}
 801a86e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801a870:	4b04      	ldr	r3, [pc, #16]	@ (801a884 <__NVIC_GetPriorityGrouping+0x18>)
 801a872:	68db      	ldr	r3, [r3, #12]
 801a874:	0a1b      	lsrs	r3, r3, #8
 801a876:	f003 0307 	and.w	r3, r3, #7
}
 801a87a:	4618      	mov	r0, r3
 801a87c:	46bd      	mov	sp, r7
 801a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a882:	4770      	bx	lr
 801a884:	e000ed00 	.word	0xe000ed00

0801a888 <__NVIC_EnableIRQ>:
{
 801a888:	b480      	push	{r7}
 801a88a:	b083      	sub	sp, #12
 801a88c:	af00      	add	r7, sp, #0
 801a88e:	4603      	mov	r3, r0
 801a890:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801a892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a896:	2b00      	cmp	r3, #0
 801a898:	db0b      	blt.n	801a8b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801a89a:	88fb      	ldrh	r3, [r7, #6]
 801a89c:	f003 021f 	and.w	r2, r3, #31
 801a8a0:	4907      	ldr	r1, [pc, #28]	@ (801a8c0 <__NVIC_EnableIRQ+0x38>)
 801a8a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a8a6:	095b      	lsrs	r3, r3, #5
 801a8a8:	2001      	movs	r0, #1
 801a8aa:	fa00 f202 	lsl.w	r2, r0, r2
 801a8ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801a8b2:	bf00      	nop
 801a8b4:	370c      	adds	r7, #12
 801a8b6:	46bd      	mov	sp, r7
 801a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8bc:	4770      	bx	lr
 801a8be:	bf00      	nop
 801a8c0:	e000e100 	.word	0xe000e100

0801a8c4 <__NVIC_SetPriority>:
{
 801a8c4:	b480      	push	{r7}
 801a8c6:	b083      	sub	sp, #12
 801a8c8:	af00      	add	r7, sp, #0
 801a8ca:	4603      	mov	r3, r0
 801a8cc:	6039      	str	r1, [r7, #0]
 801a8ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801a8d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a8d4:	2b00      	cmp	r3, #0
 801a8d6:	db0a      	blt.n	801a8ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a8d8:	683b      	ldr	r3, [r7, #0]
 801a8da:	b2da      	uxtb	r2, r3
 801a8dc:	490c      	ldr	r1, [pc, #48]	@ (801a910 <__NVIC_SetPriority+0x4c>)
 801a8de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a8e2:	0112      	lsls	r2, r2, #4
 801a8e4:	b2d2      	uxtb	r2, r2
 801a8e6:	440b      	add	r3, r1
 801a8e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 801a8ec:	e00a      	b.n	801a904 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a8ee:	683b      	ldr	r3, [r7, #0]
 801a8f0:	b2da      	uxtb	r2, r3
 801a8f2:	4908      	ldr	r1, [pc, #32]	@ (801a914 <__NVIC_SetPriority+0x50>)
 801a8f4:	88fb      	ldrh	r3, [r7, #6]
 801a8f6:	f003 030f 	and.w	r3, r3, #15
 801a8fa:	3b04      	subs	r3, #4
 801a8fc:	0112      	lsls	r2, r2, #4
 801a8fe:	b2d2      	uxtb	r2, r2
 801a900:	440b      	add	r3, r1
 801a902:	761a      	strb	r2, [r3, #24]
}
 801a904:	bf00      	nop
 801a906:	370c      	adds	r7, #12
 801a908:	46bd      	mov	sp, r7
 801a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a90e:	4770      	bx	lr
 801a910:	e000e100 	.word	0xe000e100
 801a914:	e000ed00 	.word	0xe000ed00

0801a918 <NVIC_EncodePriority>:
{
 801a918:	b480      	push	{r7}
 801a91a:	b089      	sub	sp, #36	@ 0x24
 801a91c:	af00      	add	r7, sp, #0
 801a91e:	60f8      	str	r0, [r7, #12]
 801a920:	60b9      	str	r1, [r7, #8]
 801a922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801a924:	68fb      	ldr	r3, [r7, #12]
 801a926:	f003 0307 	and.w	r3, r3, #7
 801a92a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801a92c:	69fb      	ldr	r3, [r7, #28]
 801a92e:	f1c3 0307 	rsb	r3, r3, #7
 801a932:	2b04      	cmp	r3, #4
 801a934:	bf28      	it	cs
 801a936:	2304      	movcs	r3, #4
 801a938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801a93a:	69fb      	ldr	r3, [r7, #28]
 801a93c:	3304      	adds	r3, #4
 801a93e:	2b06      	cmp	r3, #6
 801a940:	d902      	bls.n	801a948 <NVIC_EncodePriority+0x30>
 801a942:	69fb      	ldr	r3, [r7, #28]
 801a944:	3b03      	subs	r3, #3
 801a946:	e000      	b.n	801a94a <NVIC_EncodePriority+0x32>
 801a948:	2300      	movs	r3, #0
 801a94a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801a94c:	f04f 32ff 	mov.w	r2, #4294967295
 801a950:	69bb      	ldr	r3, [r7, #24]
 801a952:	fa02 f303 	lsl.w	r3, r2, r3
 801a956:	43da      	mvns	r2, r3
 801a958:	68bb      	ldr	r3, [r7, #8]
 801a95a:	401a      	ands	r2, r3
 801a95c:	697b      	ldr	r3, [r7, #20]
 801a95e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801a960:	f04f 31ff 	mov.w	r1, #4294967295
 801a964:	697b      	ldr	r3, [r7, #20]
 801a966:	fa01 f303 	lsl.w	r3, r1, r3
 801a96a:	43d9      	mvns	r1, r3
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801a970:	4313      	orrs	r3, r2
}
 801a972:	4618      	mov	r0, r3
 801a974:	3724      	adds	r7, #36	@ 0x24
 801a976:	46bd      	mov	sp, r7
 801a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a97c:	4770      	bx	lr
	...

0801a980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801a980:	b580      	push	{r7, lr}
 801a982:	b082      	sub	sp, #8
 801a984:	af00      	add	r7, sp, #0
 801a986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801a988:	687b      	ldr	r3, [r7, #4]
 801a98a:	3b01      	subs	r3, #1
 801a98c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801a990:	d301      	bcc.n	801a996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801a992:	2301      	movs	r3, #1
 801a994:	e00f      	b.n	801a9b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801a996:	4a0a      	ldr	r2, [pc, #40]	@ (801a9c0 <SysTick_Config+0x40>)
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	3b01      	subs	r3, #1
 801a99c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801a99e:	210f      	movs	r1, #15
 801a9a0:	f04f 30ff 	mov.w	r0, #4294967295
 801a9a4:	f7ff ff8e 	bl	801a8c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801a9a8:	4b05      	ldr	r3, [pc, #20]	@ (801a9c0 <SysTick_Config+0x40>)
 801a9aa:	2200      	movs	r2, #0
 801a9ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801a9ae:	4b04      	ldr	r3, [pc, #16]	@ (801a9c0 <SysTick_Config+0x40>)
 801a9b0:	2207      	movs	r2, #7
 801a9b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801a9b4:	2300      	movs	r3, #0
}
 801a9b6:	4618      	mov	r0, r3
 801a9b8:	3708      	adds	r7, #8
 801a9ba:	46bd      	mov	sp, r7
 801a9bc:	bd80      	pop	{r7, pc}
 801a9be:	bf00      	nop
 801a9c0:	e000e010 	.word	0xe000e010

0801a9c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801a9c4:	b580      	push	{r7, lr}
 801a9c6:	b082      	sub	sp, #8
 801a9c8:	af00      	add	r7, sp, #0
 801a9ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801a9cc:	6878      	ldr	r0, [r7, #4]
 801a9ce:	f7ff ff29 	bl	801a824 <__NVIC_SetPriorityGrouping>
}
 801a9d2:	bf00      	nop
 801a9d4:	3708      	adds	r7, #8
 801a9d6:	46bd      	mov	sp, r7
 801a9d8:	bd80      	pop	{r7, pc}

0801a9da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801a9da:	b580      	push	{r7, lr}
 801a9dc:	b086      	sub	sp, #24
 801a9de:	af00      	add	r7, sp, #0
 801a9e0:	4603      	mov	r3, r0
 801a9e2:	60b9      	str	r1, [r7, #8]
 801a9e4:	607a      	str	r2, [r7, #4]
 801a9e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801a9e8:	f7ff ff40 	bl	801a86c <__NVIC_GetPriorityGrouping>
 801a9ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801a9ee:	687a      	ldr	r2, [r7, #4]
 801a9f0:	68b9      	ldr	r1, [r7, #8]
 801a9f2:	6978      	ldr	r0, [r7, #20]
 801a9f4:	f7ff ff90 	bl	801a918 <NVIC_EncodePriority>
 801a9f8:	4602      	mov	r2, r0
 801a9fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a9fe:	4611      	mov	r1, r2
 801aa00:	4618      	mov	r0, r3
 801aa02:	f7ff ff5f 	bl	801a8c4 <__NVIC_SetPriority>
}
 801aa06:	bf00      	nop
 801aa08:	3718      	adds	r7, #24
 801aa0a:	46bd      	mov	sp, r7
 801aa0c:	bd80      	pop	{r7, pc}

0801aa0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801aa0e:	b580      	push	{r7, lr}
 801aa10:	b082      	sub	sp, #8
 801aa12:	af00      	add	r7, sp, #0
 801aa14:	4603      	mov	r3, r0
 801aa16:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801aa18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801aa1c:	4618      	mov	r0, r3
 801aa1e:	f7ff ff33 	bl	801a888 <__NVIC_EnableIRQ>
}
 801aa22:	bf00      	nop
 801aa24:	3708      	adds	r7, #8
 801aa26:	46bd      	mov	sp, r7
 801aa28:	bd80      	pop	{r7, pc}

0801aa2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801aa2a:	b580      	push	{r7, lr}
 801aa2c:	b082      	sub	sp, #8
 801aa2e:	af00      	add	r7, sp, #0
 801aa30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801aa32:	6878      	ldr	r0, [r7, #4]
 801aa34:	f7ff ffa4 	bl	801a980 <SysTick_Config>
 801aa38:	4603      	mov	r3, r0
}
 801aa3a:	4618      	mov	r0, r3
 801aa3c:	3708      	adds	r7, #8
 801aa3e:	46bd      	mov	sp, r7
 801aa40:	bd80      	pop	{r7, pc}
	...

0801aa44 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 801aa44:	b480      	push	{r7}
 801aa46:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 801aa48:	f3bf 8f5f 	dmb	sy
}
 801aa4c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 801aa4e:	4b07      	ldr	r3, [pc, #28]	@ (801aa6c <HAL_MPU_Disable+0x28>)
 801aa50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aa52:	4a06      	ldr	r2, [pc, #24]	@ (801aa6c <HAL_MPU_Disable+0x28>)
 801aa54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801aa58:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 801aa5a:	4b05      	ldr	r3, [pc, #20]	@ (801aa70 <HAL_MPU_Disable+0x2c>)
 801aa5c:	2200      	movs	r2, #0
 801aa5e:	605a      	str	r2, [r3, #4]
}
 801aa60:	bf00      	nop
 801aa62:	46bd      	mov	sp, r7
 801aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa68:	4770      	bx	lr
 801aa6a:	bf00      	nop
 801aa6c:	e000ed00 	.word	0xe000ed00
 801aa70:	e000ed90 	.word	0xe000ed90

0801aa74 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 801aa74:	b480      	push	{r7}
 801aa76:	b083      	sub	sp, #12
 801aa78:	af00      	add	r7, sp, #0
 801aa7a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 801aa7c:	4a0b      	ldr	r2, [pc, #44]	@ (801aaac <HAL_MPU_Enable+0x38>)
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	f043 0301 	orr.w	r3, r3, #1
 801aa84:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 801aa86:	4b0a      	ldr	r3, [pc, #40]	@ (801aab0 <HAL_MPU_Enable+0x3c>)
 801aa88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aa8a:	4a09      	ldr	r2, [pc, #36]	@ (801aab0 <HAL_MPU_Enable+0x3c>)
 801aa8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801aa90:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 801aa92:	f3bf 8f4f 	dsb	sy
}
 801aa96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801aa98:	f3bf 8f6f 	isb	sy
}
 801aa9c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 801aa9e:	bf00      	nop
 801aaa0:	370c      	adds	r7, #12
 801aaa2:	46bd      	mov	sp, r7
 801aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaa8:	4770      	bx	lr
 801aaaa:	bf00      	nop
 801aaac:	e000ed90 	.word	0xe000ed90
 801aab0:	e000ed00 	.word	0xe000ed00

0801aab4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 801aab4:	b480      	push	{r7}
 801aab6:	b083      	sub	sp, #12
 801aab8:	af00      	add	r7, sp, #0
 801aaba:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 801aabc:	687b      	ldr	r3, [r7, #4]
 801aabe:	785a      	ldrb	r2, [r3, #1]
 801aac0:	4b1b      	ldr	r3, [pc, #108]	@ (801ab30 <HAL_MPU_ConfigRegion+0x7c>)
 801aac2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 801aac4:	4b1a      	ldr	r3, [pc, #104]	@ (801ab30 <HAL_MPU_ConfigRegion+0x7c>)
 801aac6:	691b      	ldr	r3, [r3, #16]
 801aac8:	4a19      	ldr	r2, [pc, #100]	@ (801ab30 <HAL_MPU_ConfigRegion+0x7c>)
 801aaca:	f023 0301 	bic.w	r3, r3, #1
 801aace:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 801aad0:	4a17      	ldr	r2, [pc, #92]	@ (801ab30 <HAL_MPU_ConfigRegion+0x7c>)
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	685b      	ldr	r3, [r3, #4]
 801aad6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801aad8:	687b      	ldr	r3, [r7, #4]
 801aada:	7b1b      	ldrb	r3, [r3, #12]
 801aadc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801aade:	687b      	ldr	r3, [r7, #4]
 801aae0:	7adb      	ldrb	r3, [r3, #11]
 801aae2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801aae4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	7a9b      	ldrb	r3, [r3, #10]
 801aaea:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801aaec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801aaee:	687b      	ldr	r3, [r7, #4]
 801aaf0:	7b5b      	ldrb	r3, [r3, #13]
 801aaf2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801aaf4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801aaf6:	687b      	ldr	r3, [r7, #4]
 801aaf8:	7b9b      	ldrb	r3, [r3, #14]
 801aafa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801aafc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	7bdb      	ldrb	r3, [r3, #15]
 801ab02:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801ab04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	7a5b      	ldrb	r3, [r3, #9]
 801ab0a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801ab0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	7a1b      	ldrb	r3, [r3, #8]
 801ab12:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801ab14:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 801ab16:	687a      	ldr	r2, [r7, #4]
 801ab18:	7812      	ldrb	r2, [r2, #0]
 801ab1a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801ab1c:	4a04      	ldr	r2, [pc, #16]	@ (801ab30 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801ab1e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801ab20:	6113      	str	r3, [r2, #16]
}
 801ab22:	bf00      	nop
 801ab24:	370c      	adds	r7, #12
 801ab26:	46bd      	mov	sp, r7
 801ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab2c:	4770      	bx	lr
 801ab2e:	bf00      	nop
 801ab30:	e000ed90 	.word	0xe000ed90

0801ab34 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801ab34:	b580      	push	{r7, lr}
 801ab36:	b086      	sub	sp, #24
 801ab38:	af00      	add	r7, sp, #0
 801ab3a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 801ab3c:	f7ff fe22 	bl	801a784 <HAL_GetTick>
 801ab40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801ab42:	687b      	ldr	r3, [r7, #4]
 801ab44:	2b00      	cmp	r3, #0
 801ab46:	d101      	bne.n	801ab4c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 801ab48:	2301      	movs	r3, #1
 801ab4a:	e316      	b.n	801b17a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801ab4c:	687b      	ldr	r3, [r7, #4]
 801ab4e:	681b      	ldr	r3, [r3, #0]
 801ab50:	4a66      	ldr	r2, [pc, #408]	@ (801acec <HAL_DMA_Init+0x1b8>)
 801ab52:	4293      	cmp	r3, r2
 801ab54:	d04a      	beq.n	801abec <HAL_DMA_Init+0xb8>
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	681b      	ldr	r3, [r3, #0]
 801ab5a:	4a65      	ldr	r2, [pc, #404]	@ (801acf0 <HAL_DMA_Init+0x1bc>)
 801ab5c:	4293      	cmp	r3, r2
 801ab5e:	d045      	beq.n	801abec <HAL_DMA_Init+0xb8>
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	681b      	ldr	r3, [r3, #0]
 801ab64:	4a63      	ldr	r2, [pc, #396]	@ (801acf4 <HAL_DMA_Init+0x1c0>)
 801ab66:	4293      	cmp	r3, r2
 801ab68:	d040      	beq.n	801abec <HAL_DMA_Init+0xb8>
 801ab6a:	687b      	ldr	r3, [r7, #4]
 801ab6c:	681b      	ldr	r3, [r3, #0]
 801ab6e:	4a62      	ldr	r2, [pc, #392]	@ (801acf8 <HAL_DMA_Init+0x1c4>)
 801ab70:	4293      	cmp	r3, r2
 801ab72:	d03b      	beq.n	801abec <HAL_DMA_Init+0xb8>
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	681b      	ldr	r3, [r3, #0]
 801ab78:	4a60      	ldr	r2, [pc, #384]	@ (801acfc <HAL_DMA_Init+0x1c8>)
 801ab7a:	4293      	cmp	r3, r2
 801ab7c:	d036      	beq.n	801abec <HAL_DMA_Init+0xb8>
 801ab7e:	687b      	ldr	r3, [r7, #4]
 801ab80:	681b      	ldr	r3, [r3, #0]
 801ab82:	4a5f      	ldr	r2, [pc, #380]	@ (801ad00 <HAL_DMA_Init+0x1cc>)
 801ab84:	4293      	cmp	r3, r2
 801ab86:	d031      	beq.n	801abec <HAL_DMA_Init+0xb8>
 801ab88:	687b      	ldr	r3, [r7, #4]
 801ab8a:	681b      	ldr	r3, [r3, #0]
 801ab8c:	4a5d      	ldr	r2, [pc, #372]	@ (801ad04 <HAL_DMA_Init+0x1d0>)
 801ab8e:	4293      	cmp	r3, r2
 801ab90:	d02c      	beq.n	801abec <HAL_DMA_Init+0xb8>
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	681b      	ldr	r3, [r3, #0]
 801ab96:	4a5c      	ldr	r2, [pc, #368]	@ (801ad08 <HAL_DMA_Init+0x1d4>)
 801ab98:	4293      	cmp	r3, r2
 801ab9a:	d027      	beq.n	801abec <HAL_DMA_Init+0xb8>
 801ab9c:	687b      	ldr	r3, [r7, #4]
 801ab9e:	681b      	ldr	r3, [r3, #0]
 801aba0:	4a5a      	ldr	r2, [pc, #360]	@ (801ad0c <HAL_DMA_Init+0x1d8>)
 801aba2:	4293      	cmp	r3, r2
 801aba4:	d022      	beq.n	801abec <HAL_DMA_Init+0xb8>
 801aba6:	687b      	ldr	r3, [r7, #4]
 801aba8:	681b      	ldr	r3, [r3, #0]
 801abaa:	4a59      	ldr	r2, [pc, #356]	@ (801ad10 <HAL_DMA_Init+0x1dc>)
 801abac:	4293      	cmp	r3, r2
 801abae:	d01d      	beq.n	801abec <HAL_DMA_Init+0xb8>
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	681b      	ldr	r3, [r3, #0]
 801abb4:	4a57      	ldr	r2, [pc, #348]	@ (801ad14 <HAL_DMA_Init+0x1e0>)
 801abb6:	4293      	cmp	r3, r2
 801abb8:	d018      	beq.n	801abec <HAL_DMA_Init+0xb8>
 801abba:	687b      	ldr	r3, [r7, #4]
 801abbc:	681b      	ldr	r3, [r3, #0]
 801abbe:	4a56      	ldr	r2, [pc, #344]	@ (801ad18 <HAL_DMA_Init+0x1e4>)
 801abc0:	4293      	cmp	r3, r2
 801abc2:	d013      	beq.n	801abec <HAL_DMA_Init+0xb8>
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	681b      	ldr	r3, [r3, #0]
 801abc8:	4a54      	ldr	r2, [pc, #336]	@ (801ad1c <HAL_DMA_Init+0x1e8>)
 801abca:	4293      	cmp	r3, r2
 801abcc:	d00e      	beq.n	801abec <HAL_DMA_Init+0xb8>
 801abce:	687b      	ldr	r3, [r7, #4]
 801abd0:	681b      	ldr	r3, [r3, #0]
 801abd2:	4a53      	ldr	r2, [pc, #332]	@ (801ad20 <HAL_DMA_Init+0x1ec>)
 801abd4:	4293      	cmp	r3, r2
 801abd6:	d009      	beq.n	801abec <HAL_DMA_Init+0xb8>
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	4a51      	ldr	r2, [pc, #324]	@ (801ad24 <HAL_DMA_Init+0x1f0>)
 801abde:	4293      	cmp	r3, r2
 801abe0:	d004      	beq.n	801abec <HAL_DMA_Init+0xb8>
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	681b      	ldr	r3, [r3, #0]
 801abe6:	4a50      	ldr	r2, [pc, #320]	@ (801ad28 <HAL_DMA_Init+0x1f4>)
 801abe8:	4293      	cmp	r3, r2
 801abea:	d101      	bne.n	801abf0 <HAL_DMA_Init+0xbc>
 801abec:	2301      	movs	r3, #1
 801abee:	e000      	b.n	801abf2 <HAL_DMA_Init+0xbe>
 801abf0:	2300      	movs	r3, #0
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	f000 813b 	beq.w	801ae6e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	2202      	movs	r2, #2
 801abfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	2200      	movs	r2, #0
 801ac04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	681b      	ldr	r3, [r3, #0]
 801ac0c:	4a37      	ldr	r2, [pc, #220]	@ (801acec <HAL_DMA_Init+0x1b8>)
 801ac0e:	4293      	cmp	r3, r2
 801ac10:	d04a      	beq.n	801aca8 <HAL_DMA_Init+0x174>
 801ac12:	687b      	ldr	r3, [r7, #4]
 801ac14:	681b      	ldr	r3, [r3, #0]
 801ac16:	4a36      	ldr	r2, [pc, #216]	@ (801acf0 <HAL_DMA_Init+0x1bc>)
 801ac18:	4293      	cmp	r3, r2
 801ac1a:	d045      	beq.n	801aca8 <HAL_DMA_Init+0x174>
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	681b      	ldr	r3, [r3, #0]
 801ac20:	4a34      	ldr	r2, [pc, #208]	@ (801acf4 <HAL_DMA_Init+0x1c0>)
 801ac22:	4293      	cmp	r3, r2
 801ac24:	d040      	beq.n	801aca8 <HAL_DMA_Init+0x174>
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	681b      	ldr	r3, [r3, #0]
 801ac2a:	4a33      	ldr	r2, [pc, #204]	@ (801acf8 <HAL_DMA_Init+0x1c4>)
 801ac2c:	4293      	cmp	r3, r2
 801ac2e:	d03b      	beq.n	801aca8 <HAL_DMA_Init+0x174>
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	681b      	ldr	r3, [r3, #0]
 801ac34:	4a31      	ldr	r2, [pc, #196]	@ (801acfc <HAL_DMA_Init+0x1c8>)
 801ac36:	4293      	cmp	r3, r2
 801ac38:	d036      	beq.n	801aca8 <HAL_DMA_Init+0x174>
 801ac3a:	687b      	ldr	r3, [r7, #4]
 801ac3c:	681b      	ldr	r3, [r3, #0]
 801ac3e:	4a30      	ldr	r2, [pc, #192]	@ (801ad00 <HAL_DMA_Init+0x1cc>)
 801ac40:	4293      	cmp	r3, r2
 801ac42:	d031      	beq.n	801aca8 <HAL_DMA_Init+0x174>
 801ac44:	687b      	ldr	r3, [r7, #4]
 801ac46:	681b      	ldr	r3, [r3, #0]
 801ac48:	4a2e      	ldr	r2, [pc, #184]	@ (801ad04 <HAL_DMA_Init+0x1d0>)
 801ac4a:	4293      	cmp	r3, r2
 801ac4c:	d02c      	beq.n	801aca8 <HAL_DMA_Init+0x174>
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	681b      	ldr	r3, [r3, #0]
 801ac52:	4a2d      	ldr	r2, [pc, #180]	@ (801ad08 <HAL_DMA_Init+0x1d4>)
 801ac54:	4293      	cmp	r3, r2
 801ac56:	d027      	beq.n	801aca8 <HAL_DMA_Init+0x174>
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	681b      	ldr	r3, [r3, #0]
 801ac5c:	4a2b      	ldr	r2, [pc, #172]	@ (801ad0c <HAL_DMA_Init+0x1d8>)
 801ac5e:	4293      	cmp	r3, r2
 801ac60:	d022      	beq.n	801aca8 <HAL_DMA_Init+0x174>
 801ac62:	687b      	ldr	r3, [r7, #4]
 801ac64:	681b      	ldr	r3, [r3, #0]
 801ac66:	4a2a      	ldr	r2, [pc, #168]	@ (801ad10 <HAL_DMA_Init+0x1dc>)
 801ac68:	4293      	cmp	r3, r2
 801ac6a:	d01d      	beq.n	801aca8 <HAL_DMA_Init+0x174>
 801ac6c:	687b      	ldr	r3, [r7, #4]
 801ac6e:	681b      	ldr	r3, [r3, #0]
 801ac70:	4a28      	ldr	r2, [pc, #160]	@ (801ad14 <HAL_DMA_Init+0x1e0>)
 801ac72:	4293      	cmp	r3, r2
 801ac74:	d018      	beq.n	801aca8 <HAL_DMA_Init+0x174>
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	681b      	ldr	r3, [r3, #0]
 801ac7a:	4a27      	ldr	r2, [pc, #156]	@ (801ad18 <HAL_DMA_Init+0x1e4>)
 801ac7c:	4293      	cmp	r3, r2
 801ac7e:	d013      	beq.n	801aca8 <HAL_DMA_Init+0x174>
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	681b      	ldr	r3, [r3, #0]
 801ac84:	4a25      	ldr	r2, [pc, #148]	@ (801ad1c <HAL_DMA_Init+0x1e8>)
 801ac86:	4293      	cmp	r3, r2
 801ac88:	d00e      	beq.n	801aca8 <HAL_DMA_Init+0x174>
 801ac8a:	687b      	ldr	r3, [r7, #4]
 801ac8c:	681b      	ldr	r3, [r3, #0]
 801ac8e:	4a24      	ldr	r2, [pc, #144]	@ (801ad20 <HAL_DMA_Init+0x1ec>)
 801ac90:	4293      	cmp	r3, r2
 801ac92:	d009      	beq.n	801aca8 <HAL_DMA_Init+0x174>
 801ac94:	687b      	ldr	r3, [r7, #4]
 801ac96:	681b      	ldr	r3, [r3, #0]
 801ac98:	4a22      	ldr	r2, [pc, #136]	@ (801ad24 <HAL_DMA_Init+0x1f0>)
 801ac9a:	4293      	cmp	r3, r2
 801ac9c:	d004      	beq.n	801aca8 <HAL_DMA_Init+0x174>
 801ac9e:	687b      	ldr	r3, [r7, #4]
 801aca0:	681b      	ldr	r3, [r3, #0]
 801aca2:	4a21      	ldr	r2, [pc, #132]	@ (801ad28 <HAL_DMA_Init+0x1f4>)
 801aca4:	4293      	cmp	r3, r2
 801aca6:	d108      	bne.n	801acba <HAL_DMA_Init+0x186>
 801aca8:	687b      	ldr	r3, [r7, #4]
 801acaa:	681b      	ldr	r3, [r3, #0]
 801acac:	681a      	ldr	r2, [r3, #0]
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	681b      	ldr	r3, [r3, #0]
 801acb2:	f022 0201 	bic.w	r2, r2, #1
 801acb6:	601a      	str	r2, [r3, #0]
 801acb8:	e007      	b.n	801acca <HAL_DMA_Init+0x196>
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	681b      	ldr	r3, [r3, #0]
 801acbe:	681a      	ldr	r2, [r3, #0]
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	681b      	ldr	r3, [r3, #0]
 801acc4:	f022 0201 	bic.w	r2, r2, #1
 801acc8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801acca:	e02f      	b.n	801ad2c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801accc:	f7ff fd5a 	bl	801a784 <HAL_GetTick>
 801acd0:	4602      	mov	r2, r0
 801acd2:	693b      	ldr	r3, [r7, #16]
 801acd4:	1ad3      	subs	r3, r2, r3
 801acd6:	2b05      	cmp	r3, #5
 801acd8:	d928      	bls.n	801ad2c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	2220      	movs	r2, #32
 801acde:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	2203      	movs	r2, #3
 801ace4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 801ace8:	2301      	movs	r3, #1
 801acea:	e246      	b.n	801b17a <HAL_DMA_Init+0x646>
 801acec:	40020010 	.word	0x40020010
 801acf0:	40020028 	.word	0x40020028
 801acf4:	40020040 	.word	0x40020040
 801acf8:	40020058 	.word	0x40020058
 801acfc:	40020070 	.word	0x40020070
 801ad00:	40020088 	.word	0x40020088
 801ad04:	400200a0 	.word	0x400200a0
 801ad08:	400200b8 	.word	0x400200b8
 801ad0c:	40020410 	.word	0x40020410
 801ad10:	40020428 	.word	0x40020428
 801ad14:	40020440 	.word	0x40020440
 801ad18:	40020458 	.word	0x40020458
 801ad1c:	40020470 	.word	0x40020470
 801ad20:	40020488 	.word	0x40020488
 801ad24:	400204a0 	.word	0x400204a0
 801ad28:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	681b      	ldr	r3, [r3, #0]
 801ad30:	681b      	ldr	r3, [r3, #0]
 801ad32:	f003 0301 	and.w	r3, r3, #1
 801ad36:	2b00      	cmp	r3, #0
 801ad38:	d1c8      	bne.n	801accc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 801ad3a:	687b      	ldr	r3, [r7, #4]
 801ad3c:	681b      	ldr	r3, [r3, #0]
 801ad3e:	681b      	ldr	r3, [r3, #0]
 801ad40:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801ad42:	697a      	ldr	r2, [r7, #20]
 801ad44:	4b83      	ldr	r3, [pc, #524]	@ (801af54 <HAL_DMA_Init+0x420>)
 801ad46:	4013      	ands	r3, r2
 801ad48:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 801ad4a:	687b      	ldr	r3, [r7, #4]
 801ad4c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801ad4e:	687b      	ldr	r3, [r7, #4]
 801ad50:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 801ad52:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801ad54:	687b      	ldr	r3, [r7, #4]
 801ad56:	691b      	ldr	r3, [r3, #16]
 801ad58:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801ad5a:	687b      	ldr	r3, [r7, #4]
 801ad5c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801ad5e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801ad60:	687b      	ldr	r3, [r7, #4]
 801ad62:	699b      	ldr	r3, [r3, #24]
 801ad64:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 801ad66:	687b      	ldr	r3, [r7, #4]
 801ad68:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801ad6a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	6a1b      	ldr	r3, [r3, #32]
 801ad70:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 801ad72:	697a      	ldr	r2, [r7, #20]
 801ad74:	4313      	orrs	r3, r2
 801ad76:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ad7c:	2b04      	cmp	r3, #4
 801ad7e:	d107      	bne.n	801ad90 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801ad80:	687b      	ldr	r3, [r7, #4]
 801ad82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ad88:	4313      	orrs	r3, r2
 801ad8a:	697a      	ldr	r2, [r7, #20]
 801ad8c:	4313      	orrs	r3, r2
 801ad8e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 801ad90:	4b71      	ldr	r3, [pc, #452]	@ (801af58 <HAL_DMA_Init+0x424>)
 801ad92:	681a      	ldr	r2, [r3, #0]
 801ad94:	4b71      	ldr	r3, [pc, #452]	@ (801af5c <HAL_DMA_Init+0x428>)
 801ad96:	4013      	ands	r3, r2
 801ad98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801ad9c:	d328      	bcc.n	801adf0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 801ad9e:	687b      	ldr	r3, [r7, #4]
 801ada0:	685b      	ldr	r3, [r3, #4]
 801ada2:	2b28      	cmp	r3, #40	@ 0x28
 801ada4:	d903      	bls.n	801adae <HAL_DMA_Init+0x27a>
 801ada6:	687b      	ldr	r3, [r7, #4]
 801ada8:	685b      	ldr	r3, [r3, #4]
 801adaa:	2b2e      	cmp	r3, #46	@ 0x2e
 801adac:	d917      	bls.n	801adde <HAL_DMA_Init+0x2aa>
 801adae:	687b      	ldr	r3, [r7, #4]
 801adb0:	685b      	ldr	r3, [r3, #4]
 801adb2:	2b3e      	cmp	r3, #62	@ 0x3e
 801adb4:	d903      	bls.n	801adbe <HAL_DMA_Init+0x28a>
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	685b      	ldr	r3, [r3, #4]
 801adba:	2b42      	cmp	r3, #66	@ 0x42
 801adbc:	d90f      	bls.n	801adde <HAL_DMA_Init+0x2aa>
 801adbe:	687b      	ldr	r3, [r7, #4]
 801adc0:	685b      	ldr	r3, [r3, #4]
 801adc2:	2b46      	cmp	r3, #70	@ 0x46
 801adc4:	d903      	bls.n	801adce <HAL_DMA_Init+0x29a>
 801adc6:	687b      	ldr	r3, [r7, #4]
 801adc8:	685b      	ldr	r3, [r3, #4]
 801adca:	2b48      	cmp	r3, #72	@ 0x48
 801adcc:	d907      	bls.n	801adde <HAL_DMA_Init+0x2aa>
 801adce:	687b      	ldr	r3, [r7, #4]
 801add0:	685b      	ldr	r3, [r3, #4]
 801add2:	2b4e      	cmp	r3, #78	@ 0x4e
 801add4:	d905      	bls.n	801ade2 <HAL_DMA_Init+0x2ae>
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	685b      	ldr	r3, [r3, #4]
 801adda:	2b52      	cmp	r3, #82	@ 0x52
 801addc:	d801      	bhi.n	801ade2 <HAL_DMA_Init+0x2ae>
 801adde:	2301      	movs	r3, #1
 801ade0:	e000      	b.n	801ade4 <HAL_DMA_Init+0x2b0>
 801ade2:	2300      	movs	r3, #0
 801ade4:	2b00      	cmp	r3, #0
 801ade6:	d003      	beq.n	801adf0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 801ade8:	697b      	ldr	r3, [r7, #20]
 801adea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801adee:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 801adf0:	687b      	ldr	r3, [r7, #4]
 801adf2:	681b      	ldr	r3, [r3, #0]
 801adf4:	697a      	ldr	r2, [r7, #20]
 801adf6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 801adf8:	687b      	ldr	r3, [r7, #4]
 801adfa:	681b      	ldr	r3, [r3, #0]
 801adfc:	695b      	ldr	r3, [r3, #20]
 801adfe:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801ae00:	697b      	ldr	r3, [r7, #20]
 801ae02:	f023 0307 	bic.w	r3, r3, #7
 801ae06:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 801ae08:	687b      	ldr	r3, [r7, #4]
 801ae0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ae0c:	697a      	ldr	r2, [r7, #20]
 801ae0e:	4313      	orrs	r3, r2
 801ae10:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801ae12:	687b      	ldr	r3, [r7, #4]
 801ae14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ae16:	2b04      	cmp	r3, #4
 801ae18:	d117      	bne.n	801ae4a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 801ae1a:	687b      	ldr	r3, [r7, #4]
 801ae1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ae1e:	697a      	ldr	r2, [r7, #20]
 801ae20:	4313      	orrs	r3, r2
 801ae22:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801ae24:	687b      	ldr	r3, [r7, #4]
 801ae26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ae28:	2b00      	cmp	r3, #0
 801ae2a:	d00e      	beq.n	801ae4a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801ae2c:	6878      	ldr	r0, [r7, #4]
 801ae2e:	f001 fbff 	bl	801c630 <DMA_CheckFifoParam>
 801ae32:	4603      	mov	r3, r0
 801ae34:	2b00      	cmp	r3, #0
 801ae36:	d008      	beq.n	801ae4a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	2240      	movs	r2, #64	@ 0x40
 801ae3c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801ae3e:	687b      	ldr	r3, [r7, #4]
 801ae40:	2201      	movs	r2, #1
 801ae42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 801ae46:	2301      	movs	r3, #1
 801ae48:	e197      	b.n	801b17a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 801ae4a:	687b      	ldr	r3, [r7, #4]
 801ae4c:	681b      	ldr	r3, [r3, #0]
 801ae4e:	697a      	ldr	r2, [r7, #20]
 801ae50:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801ae52:	6878      	ldr	r0, [r7, #4]
 801ae54:	f001 fb3a 	bl	801c4cc <DMA_CalcBaseAndBitshift>
 801ae58:	4603      	mov	r3, r0
 801ae5a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801ae5c:	687b      	ldr	r3, [r7, #4]
 801ae5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ae60:	f003 031f 	and.w	r3, r3, #31
 801ae64:	223f      	movs	r2, #63	@ 0x3f
 801ae66:	409a      	lsls	r2, r3
 801ae68:	68bb      	ldr	r3, [r7, #8]
 801ae6a:	609a      	str	r2, [r3, #8]
 801ae6c:	e0cd      	b.n	801b00a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 801ae6e:	687b      	ldr	r3, [r7, #4]
 801ae70:	681b      	ldr	r3, [r3, #0]
 801ae72:	4a3b      	ldr	r2, [pc, #236]	@ (801af60 <HAL_DMA_Init+0x42c>)
 801ae74:	4293      	cmp	r3, r2
 801ae76:	d022      	beq.n	801aebe <HAL_DMA_Init+0x38a>
 801ae78:	687b      	ldr	r3, [r7, #4]
 801ae7a:	681b      	ldr	r3, [r3, #0]
 801ae7c:	4a39      	ldr	r2, [pc, #228]	@ (801af64 <HAL_DMA_Init+0x430>)
 801ae7e:	4293      	cmp	r3, r2
 801ae80:	d01d      	beq.n	801aebe <HAL_DMA_Init+0x38a>
 801ae82:	687b      	ldr	r3, [r7, #4]
 801ae84:	681b      	ldr	r3, [r3, #0]
 801ae86:	4a38      	ldr	r2, [pc, #224]	@ (801af68 <HAL_DMA_Init+0x434>)
 801ae88:	4293      	cmp	r3, r2
 801ae8a:	d018      	beq.n	801aebe <HAL_DMA_Init+0x38a>
 801ae8c:	687b      	ldr	r3, [r7, #4]
 801ae8e:	681b      	ldr	r3, [r3, #0]
 801ae90:	4a36      	ldr	r2, [pc, #216]	@ (801af6c <HAL_DMA_Init+0x438>)
 801ae92:	4293      	cmp	r3, r2
 801ae94:	d013      	beq.n	801aebe <HAL_DMA_Init+0x38a>
 801ae96:	687b      	ldr	r3, [r7, #4]
 801ae98:	681b      	ldr	r3, [r3, #0]
 801ae9a:	4a35      	ldr	r2, [pc, #212]	@ (801af70 <HAL_DMA_Init+0x43c>)
 801ae9c:	4293      	cmp	r3, r2
 801ae9e:	d00e      	beq.n	801aebe <HAL_DMA_Init+0x38a>
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	681b      	ldr	r3, [r3, #0]
 801aea4:	4a33      	ldr	r2, [pc, #204]	@ (801af74 <HAL_DMA_Init+0x440>)
 801aea6:	4293      	cmp	r3, r2
 801aea8:	d009      	beq.n	801aebe <HAL_DMA_Init+0x38a>
 801aeaa:	687b      	ldr	r3, [r7, #4]
 801aeac:	681b      	ldr	r3, [r3, #0]
 801aeae:	4a32      	ldr	r2, [pc, #200]	@ (801af78 <HAL_DMA_Init+0x444>)
 801aeb0:	4293      	cmp	r3, r2
 801aeb2:	d004      	beq.n	801aebe <HAL_DMA_Init+0x38a>
 801aeb4:	687b      	ldr	r3, [r7, #4]
 801aeb6:	681b      	ldr	r3, [r3, #0]
 801aeb8:	4a30      	ldr	r2, [pc, #192]	@ (801af7c <HAL_DMA_Init+0x448>)
 801aeba:	4293      	cmp	r3, r2
 801aebc:	d101      	bne.n	801aec2 <HAL_DMA_Init+0x38e>
 801aebe:	2301      	movs	r3, #1
 801aec0:	e000      	b.n	801aec4 <HAL_DMA_Init+0x390>
 801aec2:	2300      	movs	r3, #0
 801aec4:	2b00      	cmp	r3, #0
 801aec6:	f000 8097 	beq.w	801aff8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801aeca:	687b      	ldr	r3, [r7, #4]
 801aecc:	681b      	ldr	r3, [r3, #0]
 801aece:	4a24      	ldr	r2, [pc, #144]	@ (801af60 <HAL_DMA_Init+0x42c>)
 801aed0:	4293      	cmp	r3, r2
 801aed2:	d021      	beq.n	801af18 <HAL_DMA_Init+0x3e4>
 801aed4:	687b      	ldr	r3, [r7, #4]
 801aed6:	681b      	ldr	r3, [r3, #0]
 801aed8:	4a22      	ldr	r2, [pc, #136]	@ (801af64 <HAL_DMA_Init+0x430>)
 801aeda:	4293      	cmp	r3, r2
 801aedc:	d01c      	beq.n	801af18 <HAL_DMA_Init+0x3e4>
 801aede:	687b      	ldr	r3, [r7, #4]
 801aee0:	681b      	ldr	r3, [r3, #0]
 801aee2:	4a21      	ldr	r2, [pc, #132]	@ (801af68 <HAL_DMA_Init+0x434>)
 801aee4:	4293      	cmp	r3, r2
 801aee6:	d017      	beq.n	801af18 <HAL_DMA_Init+0x3e4>
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	681b      	ldr	r3, [r3, #0]
 801aeec:	4a1f      	ldr	r2, [pc, #124]	@ (801af6c <HAL_DMA_Init+0x438>)
 801aeee:	4293      	cmp	r3, r2
 801aef0:	d012      	beq.n	801af18 <HAL_DMA_Init+0x3e4>
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	681b      	ldr	r3, [r3, #0]
 801aef6:	4a1e      	ldr	r2, [pc, #120]	@ (801af70 <HAL_DMA_Init+0x43c>)
 801aef8:	4293      	cmp	r3, r2
 801aefa:	d00d      	beq.n	801af18 <HAL_DMA_Init+0x3e4>
 801aefc:	687b      	ldr	r3, [r7, #4]
 801aefe:	681b      	ldr	r3, [r3, #0]
 801af00:	4a1c      	ldr	r2, [pc, #112]	@ (801af74 <HAL_DMA_Init+0x440>)
 801af02:	4293      	cmp	r3, r2
 801af04:	d008      	beq.n	801af18 <HAL_DMA_Init+0x3e4>
 801af06:	687b      	ldr	r3, [r7, #4]
 801af08:	681b      	ldr	r3, [r3, #0]
 801af0a:	4a1b      	ldr	r2, [pc, #108]	@ (801af78 <HAL_DMA_Init+0x444>)
 801af0c:	4293      	cmp	r3, r2
 801af0e:	d003      	beq.n	801af18 <HAL_DMA_Init+0x3e4>
 801af10:	687b      	ldr	r3, [r7, #4]
 801af12:	681b      	ldr	r3, [r3, #0]
 801af14:	4a19      	ldr	r2, [pc, #100]	@ (801af7c <HAL_DMA_Init+0x448>)
 801af16:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801af18:	687b      	ldr	r3, [r7, #4]
 801af1a:	2202      	movs	r2, #2
 801af1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801af20:	687b      	ldr	r3, [r7, #4]
 801af22:	2200      	movs	r2, #0
 801af24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	681b      	ldr	r3, [r3, #0]
 801af2c:	681b      	ldr	r3, [r3, #0]
 801af2e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 801af30:	697a      	ldr	r2, [r7, #20]
 801af32:	4b13      	ldr	r3, [pc, #76]	@ (801af80 <HAL_DMA_Init+0x44c>)
 801af34:	4013      	ands	r3, r2
 801af36:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801af38:	687b      	ldr	r3, [r7, #4]
 801af3a:	689b      	ldr	r3, [r3, #8]
 801af3c:	2b40      	cmp	r3, #64	@ 0x40
 801af3e:	d021      	beq.n	801af84 <HAL_DMA_Init+0x450>
 801af40:	687b      	ldr	r3, [r7, #4]
 801af42:	689b      	ldr	r3, [r3, #8]
 801af44:	2b80      	cmp	r3, #128	@ 0x80
 801af46:	d102      	bne.n	801af4e <HAL_DMA_Init+0x41a>
 801af48:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801af4c:	e01b      	b.n	801af86 <HAL_DMA_Init+0x452>
 801af4e:	2300      	movs	r3, #0
 801af50:	e019      	b.n	801af86 <HAL_DMA_Init+0x452>
 801af52:	bf00      	nop
 801af54:	fe10803f 	.word	0xfe10803f
 801af58:	5c001000 	.word	0x5c001000
 801af5c:	ffff0000 	.word	0xffff0000
 801af60:	58025408 	.word	0x58025408
 801af64:	5802541c 	.word	0x5802541c
 801af68:	58025430 	.word	0x58025430
 801af6c:	58025444 	.word	0x58025444
 801af70:	58025458 	.word	0x58025458
 801af74:	5802546c 	.word	0x5802546c
 801af78:	58025480 	.word	0x58025480
 801af7c:	58025494 	.word	0x58025494
 801af80:	fffe000f 	.word	0xfffe000f
 801af84:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801af86:	687a      	ldr	r2, [r7, #4]
 801af88:	68d2      	ldr	r2, [r2, #12]
 801af8a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801af8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801af8e:	687b      	ldr	r3, [r7, #4]
 801af90:	691b      	ldr	r3, [r3, #16]
 801af92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801af94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801af96:	687b      	ldr	r3, [r7, #4]
 801af98:	695b      	ldr	r3, [r3, #20]
 801af9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801af9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	699b      	ldr	r3, [r3, #24]
 801afa2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801afa4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801afa6:	687b      	ldr	r3, [r7, #4]
 801afa8:	69db      	ldr	r3, [r3, #28]
 801afaa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801afac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 801afae:	687b      	ldr	r3, [r7, #4]
 801afb0:	6a1b      	ldr	r3, [r3, #32]
 801afb2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801afb4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801afb6:	697a      	ldr	r2, [r7, #20]
 801afb8:	4313      	orrs	r3, r2
 801afba:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	681b      	ldr	r3, [r3, #0]
 801afc0:	697a      	ldr	r2, [r7, #20]
 801afc2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	681b      	ldr	r3, [r3, #0]
 801afc8:	461a      	mov	r2, r3
 801afca:	4b6e      	ldr	r3, [pc, #440]	@ (801b184 <HAL_DMA_Init+0x650>)
 801afcc:	4413      	add	r3, r2
 801afce:	4a6e      	ldr	r2, [pc, #440]	@ (801b188 <HAL_DMA_Init+0x654>)
 801afd0:	fba2 2303 	umull	r2, r3, r2, r3
 801afd4:	091b      	lsrs	r3, r3, #4
 801afd6:	009a      	lsls	r2, r3, #2
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801afdc:	6878      	ldr	r0, [r7, #4]
 801afde:	f001 fa75 	bl	801c4cc <DMA_CalcBaseAndBitshift>
 801afe2:	4603      	mov	r3, r0
 801afe4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801afe6:	687b      	ldr	r3, [r7, #4]
 801afe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801afea:	f003 031f 	and.w	r3, r3, #31
 801afee:	2201      	movs	r2, #1
 801aff0:	409a      	lsls	r2, r3
 801aff2:	68fb      	ldr	r3, [r7, #12]
 801aff4:	605a      	str	r2, [r3, #4]
 801aff6:	e008      	b.n	801b00a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801aff8:	687b      	ldr	r3, [r7, #4]
 801affa:	2240      	movs	r2, #64	@ 0x40
 801affc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 801affe:	687b      	ldr	r3, [r7, #4]
 801b000:	2203      	movs	r2, #3
 801b002:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 801b006:	2301      	movs	r3, #1
 801b008:	e0b7      	b.n	801b17a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801b00a:	687b      	ldr	r3, [r7, #4]
 801b00c:	681b      	ldr	r3, [r3, #0]
 801b00e:	4a5f      	ldr	r2, [pc, #380]	@ (801b18c <HAL_DMA_Init+0x658>)
 801b010:	4293      	cmp	r3, r2
 801b012:	d072      	beq.n	801b0fa <HAL_DMA_Init+0x5c6>
 801b014:	687b      	ldr	r3, [r7, #4]
 801b016:	681b      	ldr	r3, [r3, #0]
 801b018:	4a5d      	ldr	r2, [pc, #372]	@ (801b190 <HAL_DMA_Init+0x65c>)
 801b01a:	4293      	cmp	r3, r2
 801b01c:	d06d      	beq.n	801b0fa <HAL_DMA_Init+0x5c6>
 801b01e:	687b      	ldr	r3, [r7, #4]
 801b020:	681b      	ldr	r3, [r3, #0]
 801b022:	4a5c      	ldr	r2, [pc, #368]	@ (801b194 <HAL_DMA_Init+0x660>)
 801b024:	4293      	cmp	r3, r2
 801b026:	d068      	beq.n	801b0fa <HAL_DMA_Init+0x5c6>
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	681b      	ldr	r3, [r3, #0]
 801b02c:	4a5a      	ldr	r2, [pc, #360]	@ (801b198 <HAL_DMA_Init+0x664>)
 801b02e:	4293      	cmp	r3, r2
 801b030:	d063      	beq.n	801b0fa <HAL_DMA_Init+0x5c6>
 801b032:	687b      	ldr	r3, [r7, #4]
 801b034:	681b      	ldr	r3, [r3, #0]
 801b036:	4a59      	ldr	r2, [pc, #356]	@ (801b19c <HAL_DMA_Init+0x668>)
 801b038:	4293      	cmp	r3, r2
 801b03a:	d05e      	beq.n	801b0fa <HAL_DMA_Init+0x5c6>
 801b03c:	687b      	ldr	r3, [r7, #4]
 801b03e:	681b      	ldr	r3, [r3, #0]
 801b040:	4a57      	ldr	r2, [pc, #348]	@ (801b1a0 <HAL_DMA_Init+0x66c>)
 801b042:	4293      	cmp	r3, r2
 801b044:	d059      	beq.n	801b0fa <HAL_DMA_Init+0x5c6>
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	681b      	ldr	r3, [r3, #0]
 801b04a:	4a56      	ldr	r2, [pc, #344]	@ (801b1a4 <HAL_DMA_Init+0x670>)
 801b04c:	4293      	cmp	r3, r2
 801b04e:	d054      	beq.n	801b0fa <HAL_DMA_Init+0x5c6>
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	681b      	ldr	r3, [r3, #0]
 801b054:	4a54      	ldr	r2, [pc, #336]	@ (801b1a8 <HAL_DMA_Init+0x674>)
 801b056:	4293      	cmp	r3, r2
 801b058:	d04f      	beq.n	801b0fa <HAL_DMA_Init+0x5c6>
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	681b      	ldr	r3, [r3, #0]
 801b05e:	4a53      	ldr	r2, [pc, #332]	@ (801b1ac <HAL_DMA_Init+0x678>)
 801b060:	4293      	cmp	r3, r2
 801b062:	d04a      	beq.n	801b0fa <HAL_DMA_Init+0x5c6>
 801b064:	687b      	ldr	r3, [r7, #4]
 801b066:	681b      	ldr	r3, [r3, #0]
 801b068:	4a51      	ldr	r2, [pc, #324]	@ (801b1b0 <HAL_DMA_Init+0x67c>)
 801b06a:	4293      	cmp	r3, r2
 801b06c:	d045      	beq.n	801b0fa <HAL_DMA_Init+0x5c6>
 801b06e:	687b      	ldr	r3, [r7, #4]
 801b070:	681b      	ldr	r3, [r3, #0]
 801b072:	4a50      	ldr	r2, [pc, #320]	@ (801b1b4 <HAL_DMA_Init+0x680>)
 801b074:	4293      	cmp	r3, r2
 801b076:	d040      	beq.n	801b0fa <HAL_DMA_Init+0x5c6>
 801b078:	687b      	ldr	r3, [r7, #4]
 801b07a:	681b      	ldr	r3, [r3, #0]
 801b07c:	4a4e      	ldr	r2, [pc, #312]	@ (801b1b8 <HAL_DMA_Init+0x684>)
 801b07e:	4293      	cmp	r3, r2
 801b080:	d03b      	beq.n	801b0fa <HAL_DMA_Init+0x5c6>
 801b082:	687b      	ldr	r3, [r7, #4]
 801b084:	681b      	ldr	r3, [r3, #0]
 801b086:	4a4d      	ldr	r2, [pc, #308]	@ (801b1bc <HAL_DMA_Init+0x688>)
 801b088:	4293      	cmp	r3, r2
 801b08a:	d036      	beq.n	801b0fa <HAL_DMA_Init+0x5c6>
 801b08c:	687b      	ldr	r3, [r7, #4]
 801b08e:	681b      	ldr	r3, [r3, #0]
 801b090:	4a4b      	ldr	r2, [pc, #300]	@ (801b1c0 <HAL_DMA_Init+0x68c>)
 801b092:	4293      	cmp	r3, r2
 801b094:	d031      	beq.n	801b0fa <HAL_DMA_Init+0x5c6>
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	681b      	ldr	r3, [r3, #0]
 801b09a:	4a4a      	ldr	r2, [pc, #296]	@ (801b1c4 <HAL_DMA_Init+0x690>)
 801b09c:	4293      	cmp	r3, r2
 801b09e:	d02c      	beq.n	801b0fa <HAL_DMA_Init+0x5c6>
 801b0a0:	687b      	ldr	r3, [r7, #4]
 801b0a2:	681b      	ldr	r3, [r3, #0]
 801b0a4:	4a48      	ldr	r2, [pc, #288]	@ (801b1c8 <HAL_DMA_Init+0x694>)
 801b0a6:	4293      	cmp	r3, r2
 801b0a8:	d027      	beq.n	801b0fa <HAL_DMA_Init+0x5c6>
 801b0aa:	687b      	ldr	r3, [r7, #4]
 801b0ac:	681b      	ldr	r3, [r3, #0]
 801b0ae:	4a47      	ldr	r2, [pc, #284]	@ (801b1cc <HAL_DMA_Init+0x698>)
 801b0b0:	4293      	cmp	r3, r2
 801b0b2:	d022      	beq.n	801b0fa <HAL_DMA_Init+0x5c6>
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	681b      	ldr	r3, [r3, #0]
 801b0b8:	4a45      	ldr	r2, [pc, #276]	@ (801b1d0 <HAL_DMA_Init+0x69c>)
 801b0ba:	4293      	cmp	r3, r2
 801b0bc:	d01d      	beq.n	801b0fa <HAL_DMA_Init+0x5c6>
 801b0be:	687b      	ldr	r3, [r7, #4]
 801b0c0:	681b      	ldr	r3, [r3, #0]
 801b0c2:	4a44      	ldr	r2, [pc, #272]	@ (801b1d4 <HAL_DMA_Init+0x6a0>)
 801b0c4:	4293      	cmp	r3, r2
 801b0c6:	d018      	beq.n	801b0fa <HAL_DMA_Init+0x5c6>
 801b0c8:	687b      	ldr	r3, [r7, #4]
 801b0ca:	681b      	ldr	r3, [r3, #0]
 801b0cc:	4a42      	ldr	r2, [pc, #264]	@ (801b1d8 <HAL_DMA_Init+0x6a4>)
 801b0ce:	4293      	cmp	r3, r2
 801b0d0:	d013      	beq.n	801b0fa <HAL_DMA_Init+0x5c6>
 801b0d2:	687b      	ldr	r3, [r7, #4]
 801b0d4:	681b      	ldr	r3, [r3, #0]
 801b0d6:	4a41      	ldr	r2, [pc, #260]	@ (801b1dc <HAL_DMA_Init+0x6a8>)
 801b0d8:	4293      	cmp	r3, r2
 801b0da:	d00e      	beq.n	801b0fa <HAL_DMA_Init+0x5c6>
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	681b      	ldr	r3, [r3, #0]
 801b0e0:	4a3f      	ldr	r2, [pc, #252]	@ (801b1e0 <HAL_DMA_Init+0x6ac>)
 801b0e2:	4293      	cmp	r3, r2
 801b0e4:	d009      	beq.n	801b0fa <HAL_DMA_Init+0x5c6>
 801b0e6:	687b      	ldr	r3, [r7, #4]
 801b0e8:	681b      	ldr	r3, [r3, #0]
 801b0ea:	4a3e      	ldr	r2, [pc, #248]	@ (801b1e4 <HAL_DMA_Init+0x6b0>)
 801b0ec:	4293      	cmp	r3, r2
 801b0ee:	d004      	beq.n	801b0fa <HAL_DMA_Init+0x5c6>
 801b0f0:	687b      	ldr	r3, [r7, #4]
 801b0f2:	681b      	ldr	r3, [r3, #0]
 801b0f4:	4a3c      	ldr	r2, [pc, #240]	@ (801b1e8 <HAL_DMA_Init+0x6b4>)
 801b0f6:	4293      	cmp	r3, r2
 801b0f8:	d101      	bne.n	801b0fe <HAL_DMA_Init+0x5ca>
 801b0fa:	2301      	movs	r3, #1
 801b0fc:	e000      	b.n	801b100 <HAL_DMA_Init+0x5cc>
 801b0fe:	2300      	movs	r3, #0
 801b100:	2b00      	cmp	r3, #0
 801b102:	d032      	beq.n	801b16a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801b104:	6878      	ldr	r0, [r7, #4]
 801b106:	f001 fb0f 	bl	801c728 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801b10a:	687b      	ldr	r3, [r7, #4]
 801b10c:	689b      	ldr	r3, [r3, #8]
 801b10e:	2b80      	cmp	r3, #128	@ 0x80
 801b110:	d102      	bne.n	801b118 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801b112:	687b      	ldr	r3, [r7, #4]
 801b114:	2200      	movs	r2, #0
 801b116:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	685a      	ldr	r2, [r3, #4]
 801b11c:	687b      	ldr	r3, [r7, #4]
 801b11e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b120:	b2d2      	uxtb	r2, r2
 801b122:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801b128:	687a      	ldr	r2, [r7, #4]
 801b12a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801b12c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 801b12e:	687b      	ldr	r3, [r7, #4]
 801b130:	685b      	ldr	r3, [r3, #4]
 801b132:	2b00      	cmp	r3, #0
 801b134:	d010      	beq.n	801b158 <HAL_DMA_Init+0x624>
 801b136:	687b      	ldr	r3, [r7, #4]
 801b138:	685b      	ldr	r3, [r3, #4]
 801b13a:	2b08      	cmp	r3, #8
 801b13c:	d80c      	bhi.n	801b158 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801b13e:	6878      	ldr	r0, [r7, #4]
 801b140:	f001 fb8c 	bl	801c85c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b148:	2200      	movs	r2, #0
 801b14a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b14c:	687b      	ldr	r3, [r7, #4]
 801b14e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b150:	687a      	ldr	r2, [r7, #4]
 801b152:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801b154:	605a      	str	r2, [r3, #4]
 801b156:	e008      	b.n	801b16a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 801b158:	687b      	ldr	r3, [r7, #4]
 801b15a:	2200      	movs	r2, #0
 801b15c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	2200      	movs	r2, #0
 801b162:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	2200      	movs	r2, #0
 801b168:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801b16a:	687b      	ldr	r3, [r7, #4]
 801b16c:	2200      	movs	r2, #0
 801b16e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801b170:	687b      	ldr	r3, [r7, #4]
 801b172:	2201      	movs	r2, #1
 801b174:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 801b178:	2300      	movs	r3, #0
}
 801b17a:	4618      	mov	r0, r3
 801b17c:	3718      	adds	r7, #24
 801b17e:	46bd      	mov	sp, r7
 801b180:	bd80      	pop	{r7, pc}
 801b182:	bf00      	nop
 801b184:	a7fdabf8 	.word	0xa7fdabf8
 801b188:	cccccccd 	.word	0xcccccccd
 801b18c:	40020010 	.word	0x40020010
 801b190:	40020028 	.word	0x40020028
 801b194:	40020040 	.word	0x40020040
 801b198:	40020058 	.word	0x40020058
 801b19c:	40020070 	.word	0x40020070
 801b1a0:	40020088 	.word	0x40020088
 801b1a4:	400200a0 	.word	0x400200a0
 801b1a8:	400200b8 	.word	0x400200b8
 801b1ac:	40020410 	.word	0x40020410
 801b1b0:	40020428 	.word	0x40020428
 801b1b4:	40020440 	.word	0x40020440
 801b1b8:	40020458 	.word	0x40020458
 801b1bc:	40020470 	.word	0x40020470
 801b1c0:	40020488 	.word	0x40020488
 801b1c4:	400204a0 	.word	0x400204a0
 801b1c8:	400204b8 	.word	0x400204b8
 801b1cc:	58025408 	.word	0x58025408
 801b1d0:	5802541c 	.word	0x5802541c
 801b1d4:	58025430 	.word	0x58025430
 801b1d8:	58025444 	.word	0x58025444
 801b1dc:	58025458 	.word	0x58025458
 801b1e0:	5802546c 	.word	0x5802546c
 801b1e4:	58025480 	.word	0x58025480
 801b1e8:	58025494 	.word	0x58025494

0801b1ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801b1ec:	b580      	push	{r7, lr}
 801b1ee:	b084      	sub	sp, #16
 801b1f0:	af00      	add	r7, sp, #0
 801b1f2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801b1f4:	687b      	ldr	r3, [r7, #4]
 801b1f6:	2b00      	cmp	r3, #0
 801b1f8:	d101      	bne.n	801b1fe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 801b1fa:	2301      	movs	r3, #1
 801b1fc:	e237      	b.n	801b66e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 801b1fe:	687b      	ldr	r3, [r7, #4]
 801b200:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801b204:	b2db      	uxtb	r3, r3
 801b206:	2b02      	cmp	r3, #2
 801b208:	d004      	beq.n	801b214 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801b20a:	687b      	ldr	r3, [r7, #4]
 801b20c:	2280      	movs	r2, #128	@ 0x80
 801b20e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 801b210:	2301      	movs	r3, #1
 801b212:	e22c      	b.n	801b66e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	681b      	ldr	r3, [r3, #0]
 801b218:	4a5c      	ldr	r2, [pc, #368]	@ (801b38c <HAL_DMA_Abort_IT+0x1a0>)
 801b21a:	4293      	cmp	r3, r2
 801b21c:	d04a      	beq.n	801b2b4 <HAL_DMA_Abort_IT+0xc8>
 801b21e:	687b      	ldr	r3, [r7, #4]
 801b220:	681b      	ldr	r3, [r3, #0]
 801b222:	4a5b      	ldr	r2, [pc, #364]	@ (801b390 <HAL_DMA_Abort_IT+0x1a4>)
 801b224:	4293      	cmp	r3, r2
 801b226:	d045      	beq.n	801b2b4 <HAL_DMA_Abort_IT+0xc8>
 801b228:	687b      	ldr	r3, [r7, #4]
 801b22a:	681b      	ldr	r3, [r3, #0]
 801b22c:	4a59      	ldr	r2, [pc, #356]	@ (801b394 <HAL_DMA_Abort_IT+0x1a8>)
 801b22e:	4293      	cmp	r3, r2
 801b230:	d040      	beq.n	801b2b4 <HAL_DMA_Abort_IT+0xc8>
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	681b      	ldr	r3, [r3, #0]
 801b236:	4a58      	ldr	r2, [pc, #352]	@ (801b398 <HAL_DMA_Abort_IT+0x1ac>)
 801b238:	4293      	cmp	r3, r2
 801b23a:	d03b      	beq.n	801b2b4 <HAL_DMA_Abort_IT+0xc8>
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	681b      	ldr	r3, [r3, #0]
 801b240:	4a56      	ldr	r2, [pc, #344]	@ (801b39c <HAL_DMA_Abort_IT+0x1b0>)
 801b242:	4293      	cmp	r3, r2
 801b244:	d036      	beq.n	801b2b4 <HAL_DMA_Abort_IT+0xc8>
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	681b      	ldr	r3, [r3, #0]
 801b24a:	4a55      	ldr	r2, [pc, #340]	@ (801b3a0 <HAL_DMA_Abort_IT+0x1b4>)
 801b24c:	4293      	cmp	r3, r2
 801b24e:	d031      	beq.n	801b2b4 <HAL_DMA_Abort_IT+0xc8>
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	681b      	ldr	r3, [r3, #0]
 801b254:	4a53      	ldr	r2, [pc, #332]	@ (801b3a4 <HAL_DMA_Abort_IT+0x1b8>)
 801b256:	4293      	cmp	r3, r2
 801b258:	d02c      	beq.n	801b2b4 <HAL_DMA_Abort_IT+0xc8>
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	681b      	ldr	r3, [r3, #0]
 801b25e:	4a52      	ldr	r2, [pc, #328]	@ (801b3a8 <HAL_DMA_Abort_IT+0x1bc>)
 801b260:	4293      	cmp	r3, r2
 801b262:	d027      	beq.n	801b2b4 <HAL_DMA_Abort_IT+0xc8>
 801b264:	687b      	ldr	r3, [r7, #4]
 801b266:	681b      	ldr	r3, [r3, #0]
 801b268:	4a50      	ldr	r2, [pc, #320]	@ (801b3ac <HAL_DMA_Abort_IT+0x1c0>)
 801b26a:	4293      	cmp	r3, r2
 801b26c:	d022      	beq.n	801b2b4 <HAL_DMA_Abort_IT+0xc8>
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	681b      	ldr	r3, [r3, #0]
 801b272:	4a4f      	ldr	r2, [pc, #316]	@ (801b3b0 <HAL_DMA_Abort_IT+0x1c4>)
 801b274:	4293      	cmp	r3, r2
 801b276:	d01d      	beq.n	801b2b4 <HAL_DMA_Abort_IT+0xc8>
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	681b      	ldr	r3, [r3, #0]
 801b27c:	4a4d      	ldr	r2, [pc, #308]	@ (801b3b4 <HAL_DMA_Abort_IT+0x1c8>)
 801b27e:	4293      	cmp	r3, r2
 801b280:	d018      	beq.n	801b2b4 <HAL_DMA_Abort_IT+0xc8>
 801b282:	687b      	ldr	r3, [r7, #4]
 801b284:	681b      	ldr	r3, [r3, #0]
 801b286:	4a4c      	ldr	r2, [pc, #304]	@ (801b3b8 <HAL_DMA_Abort_IT+0x1cc>)
 801b288:	4293      	cmp	r3, r2
 801b28a:	d013      	beq.n	801b2b4 <HAL_DMA_Abort_IT+0xc8>
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	681b      	ldr	r3, [r3, #0]
 801b290:	4a4a      	ldr	r2, [pc, #296]	@ (801b3bc <HAL_DMA_Abort_IT+0x1d0>)
 801b292:	4293      	cmp	r3, r2
 801b294:	d00e      	beq.n	801b2b4 <HAL_DMA_Abort_IT+0xc8>
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	681b      	ldr	r3, [r3, #0]
 801b29a:	4a49      	ldr	r2, [pc, #292]	@ (801b3c0 <HAL_DMA_Abort_IT+0x1d4>)
 801b29c:	4293      	cmp	r3, r2
 801b29e:	d009      	beq.n	801b2b4 <HAL_DMA_Abort_IT+0xc8>
 801b2a0:	687b      	ldr	r3, [r7, #4]
 801b2a2:	681b      	ldr	r3, [r3, #0]
 801b2a4:	4a47      	ldr	r2, [pc, #284]	@ (801b3c4 <HAL_DMA_Abort_IT+0x1d8>)
 801b2a6:	4293      	cmp	r3, r2
 801b2a8:	d004      	beq.n	801b2b4 <HAL_DMA_Abort_IT+0xc8>
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	681b      	ldr	r3, [r3, #0]
 801b2ae:	4a46      	ldr	r2, [pc, #280]	@ (801b3c8 <HAL_DMA_Abort_IT+0x1dc>)
 801b2b0:	4293      	cmp	r3, r2
 801b2b2:	d101      	bne.n	801b2b8 <HAL_DMA_Abort_IT+0xcc>
 801b2b4:	2301      	movs	r3, #1
 801b2b6:	e000      	b.n	801b2ba <HAL_DMA_Abort_IT+0xce>
 801b2b8:	2300      	movs	r3, #0
 801b2ba:	2b00      	cmp	r3, #0
 801b2bc:	f000 8086 	beq.w	801b3cc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	2204      	movs	r2, #4
 801b2c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801b2c8:	687b      	ldr	r3, [r7, #4]
 801b2ca:	681b      	ldr	r3, [r3, #0]
 801b2cc:	4a2f      	ldr	r2, [pc, #188]	@ (801b38c <HAL_DMA_Abort_IT+0x1a0>)
 801b2ce:	4293      	cmp	r3, r2
 801b2d0:	d04a      	beq.n	801b368 <HAL_DMA_Abort_IT+0x17c>
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	681b      	ldr	r3, [r3, #0]
 801b2d6:	4a2e      	ldr	r2, [pc, #184]	@ (801b390 <HAL_DMA_Abort_IT+0x1a4>)
 801b2d8:	4293      	cmp	r3, r2
 801b2da:	d045      	beq.n	801b368 <HAL_DMA_Abort_IT+0x17c>
 801b2dc:	687b      	ldr	r3, [r7, #4]
 801b2de:	681b      	ldr	r3, [r3, #0]
 801b2e0:	4a2c      	ldr	r2, [pc, #176]	@ (801b394 <HAL_DMA_Abort_IT+0x1a8>)
 801b2e2:	4293      	cmp	r3, r2
 801b2e4:	d040      	beq.n	801b368 <HAL_DMA_Abort_IT+0x17c>
 801b2e6:	687b      	ldr	r3, [r7, #4]
 801b2e8:	681b      	ldr	r3, [r3, #0]
 801b2ea:	4a2b      	ldr	r2, [pc, #172]	@ (801b398 <HAL_DMA_Abort_IT+0x1ac>)
 801b2ec:	4293      	cmp	r3, r2
 801b2ee:	d03b      	beq.n	801b368 <HAL_DMA_Abort_IT+0x17c>
 801b2f0:	687b      	ldr	r3, [r7, #4]
 801b2f2:	681b      	ldr	r3, [r3, #0]
 801b2f4:	4a29      	ldr	r2, [pc, #164]	@ (801b39c <HAL_DMA_Abort_IT+0x1b0>)
 801b2f6:	4293      	cmp	r3, r2
 801b2f8:	d036      	beq.n	801b368 <HAL_DMA_Abort_IT+0x17c>
 801b2fa:	687b      	ldr	r3, [r7, #4]
 801b2fc:	681b      	ldr	r3, [r3, #0]
 801b2fe:	4a28      	ldr	r2, [pc, #160]	@ (801b3a0 <HAL_DMA_Abort_IT+0x1b4>)
 801b300:	4293      	cmp	r3, r2
 801b302:	d031      	beq.n	801b368 <HAL_DMA_Abort_IT+0x17c>
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	681b      	ldr	r3, [r3, #0]
 801b308:	4a26      	ldr	r2, [pc, #152]	@ (801b3a4 <HAL_DMA_Abort_IT+0x1b8>)
 801b30a:	4293      	cmp	r3, r2
 801b30c:	d02c      	beq.n	801b368 <HAL_DMA_Abort_IT+0x17c>
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	681b      	ldr	r3, [r3, #0]
 801b312:	4a25      	ldr	r2, [pc, #148]	@ (801b3a8 <HAL_DMA_Abort_IT+0x1bc>)
 801b314:	4293      	cmp	r3, r2
 801b316:	d027      	beq.n	801b368 <HAL_DMA_Abort_IT+0x17c>
 801b318:	687b      	ldr	r3, [r7, #4]
 801b31a:	681b      	ldr	r3, [r3, #0]
 801b31c:	4a23      	ldr	r2, [pc, #140]	@ (801b3ac <HAL_DMA_Abort_IT+0x1c0>)
 801b31e:	4293      	cmp	r3, r2
 801b320:	d022      	beq.n	801b368 <HAL_DMA_Abort_IT+0x17c>
 801b322:	687b      	ldr	r3, [r7, #4]
 801b324:	681b      	ldr	r3, [r3, #0]
 801b326:	4a22      	ldr	r2, [pc, #136]	@ (801b3b0 <HAL_DMA_Abort_IT+0x1c4>)
 801b328:	4293      	cmp	r3, r2
 801b32a:	d01d      	beq.n	801b368 <HAL_DMA_Abort_IT+0x17c>
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	681b      	ldr	r3, [r3, #0]
 801b330:	4a20      	ldr	r2, [pc, #128]	@ (801b3b4 <HAL_DMA_Abort_IT+0x1c8>)
 801b332:	4293      	cmp	r3, r2
 801b334:	d018      	beq.n	801b368 <HAL_DMA_Abort_IT+0x17c>
 801b336:	687b      	ldr	r3, [r7, #4]
 801b338:	681b      	ldr	r3, [r3, #0]
 801b33a:	4a1f      	ldr	r2, [pc, #124]	@ (801b3b8 <HAL_DMA_Abort_IT+0x1cc>)
 801b33c:	4293      	cmp	r3, r2
 801b33e:	d013      	beq.n	801b368 <HAL_DMA_Abort_IT+0x17c>
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	681b      	ldr	r3, [r3, #0]
 801b344:	4a1d      	ldr	r2, [pc, #116]	@ (801b3bc <HAL_DMA_Abort_IT+0x1d0>)
 801b346:	4293      	cmp	r3, r2
 801b348:	d00e      	beq.n	801b368 <HAL_DMA_Abort_IT+0x17c>
 801b34a:	687b      	ldr	r3, [r7, #4]
 801b34c:	681b      	ldr	r3, [r3, #0]
 801b34e:	4a1c      	ldr	r2, [pc, #112]	@ (801b3c0 <HAL_DMA_Abort_IT+0x1d4>)
 801b350:	4293      	cmp	r3, r2
 801b352:	d009      	beq.n	801b368 <HAL_DMA_Abort_IT+0x17c>
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	681b      	ldr	r3, [r3, #0]
 801b358:	4a1a      	ldr	r2, [pc, #104]	@ (801b3c4 <HAL_DMA_Abort_IT+0x1d8>)
 801b35a:	4293      	cmp	r3, r2
 801b35c:	d004      	beq.n	801b368 <HAL_DMA_Abort_IT+0x17c>
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	681b      	ldr	r3, [r3, #0]
 801b362:	4a19      	ldr	r2, [pc, #100]	@ (801b3c8 <HAL_DMA_Abort_IT+0x1dc>)
 801b364:	4293      	cmp	r3, r2
 801b366:	d108      	bne.n	801b37a <HAL_DMA_Abort_IT+0x18e>
 801b368:	687b      	ldr	r3, [r7, #4]
 801b36a:	681b      	ldr	r3, [r3, #0]
 801b36c:	681a      	ldr	r2, [r3, #0]
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	681b      	ldr	r3, [r3, #0]
 801b372:	f022 0201 	bic.w	r2, r2, #1
 801b376:	601a      	str	r2, [r3, #0]
 801b378:	e178      	b.n	801b66c <HAL_DMA_Abort_IT+0x480>
 801b37a:	687b      	ldr	r3, [r7, #4]
 801b37c:	681b      	ldr	r3, [r3, #0]
 801b37e:	681a      	ldr	r2, [r3, #0]
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	681b      	ldr	r3, [r3, #0]
 801b384:	f022 0201 	bic.w	r2, r2, #1
 801b388:	601a      	str	r2, [r3, #0]
 801b38a:	e16f      	b.n	801b66c <HAL_DMA_Abort_IT+0x480>
 801b38c:	40020010 	.word	0x40020010
 801b390:	40020028 	.word	0x40020028
 801b394:	40020040 	.word	0x40020040
 801b398:	40020058 	.word	0x40020058
 801b39c:	40020070 	.word	0x40020070
 801b3a0:	40020088 	.word	0x40020088
 801b3a4:	400200a0 	.word	0x400200a0
 801b3a8:	400200b8 	.word	0x400200b8
 801b3ac:	40020410 	.word	0x40020410
 801b3b0:	40020428 	.word	0x40020428
 801b3b4:	40020440 	.word	0x40020440
 801b3b8:	40020458 	.word	0x40020458
 801b3bc:	40020470 	.word	0x40020470
 801b3c0:	40020488 	.word	0x40020488
 801b3c4:	400204a0 	.word	0x400204a0
 801b3c8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	681b      	ldr	r3, [r3, #0]
 801b3d0:	681a      	ldr	r2, [r3, #0]
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	681b      	ldr	r3, [r3, #0]
 801b3d6:	f022 020e 	bic.w	r2, r2, #14
 801b3da:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	681b      	ldr	r3, [r3, #0]
 801b3e0:	4a6c      	ldr	r2, [pc, #432]	@ (801b594 <HAL_DMA_Abort_IT+0x3a8>)
 801b3e2:	4293      	cmp	r3, r2
 801b3e4:	d04a      	beq.n	801b47c <HAL_DMA_Abort_IT+0x290>
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	681b      	ldr	r3, [r3, #0]
 801b3ea:	4a6b      	ldr	r2, [pc, #428]	@ (801b598 <HAL_DMA_Abort_IT+0x3ac>)
 801b3ec:	4293      	cmp	r3, r2
 801b3ee:	d045      	beq.n	801b47c <HAL_DMA_Abort_IT+0x290>
 801b3f0:	687b      	ldr	r3, [r7, #4]
 801b3f2:	681b      	ldr	r3, [r3, #0]
 801b3f4:	4a69      	ldr	r2, [pc, #420]	@ (801b59c <HAL_DMA_Abort_IT+0x3b0>)
 801b3f6:	4293      	cmp	r3, r2
 801b3f8:	d040      	beq.n	801b47c <HAL_DMA_Abort_IT+0x290>
 801b3fa:	687b      	ldr	r3, [r7, #4]
 801b3fc:	681b      	ldr	r3, [r3, #0]
 801b3fe:	4a68      	ldr	r2, [pc, #416]	@ (801b5a0 <HAL_DMA_Abort_IT+0x3b4>)
 801b400:	4293      	cmp	r3, r2
 801b402:	d03b      	beq.n	801b47c <HAL_DMA_Abort_IT+0x290>
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	681b      	ldr	r3, [r3, #0]
 801b408:	4a66      	ldr	r2, [pc, #408]	@ (801b5a4 <HAL_DMA_Abort_IT+0x3b8>)
 801b40a:	4293      	cmp	r3, r2
 801b40c:	d036      	beq.n	801b47c <HAL_DMA_Abort_IT+0x290>
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	681b      	ldr	r3, [r3, #0]
 801b412:	4a65      	ldr	r2, [pc, #404]	@ (801b5a8 <HAL_DMA_Abort_IT+0x3bc>)
 801b414:	4293      	cmp	r3, r2
 801b416:	d031      	beq.n	801b47c <HAL_DMA_Abort_IT+0x290>
 801b418:	687b      	ldr	r3, [r7, #4]
 801b41a:	681b      	ldr	r3, [r3, #0]
 801b41c:	4a63      	ldr	r2, [pc, #396]	@ (801b5ac <HAL_DMA_Abort_IT+0x3c0>)
 801b41e:	4293      	cmp	r3, r2
 801b420:	d02c      	beq.n	801b47c <HAL_DMA_Abort_IT+0x290>
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	681b      	ldr	r3, [r3, #0]
 801b426:	4a62      	ldr	r2, [pc, #392]	@ (801b5b0 <HAL_DMA_Abort_IT+0x3c4>)
 801b428:	4293      	cmp	r3, r2
 801b42a:	d027      	beq.n	801b47c <HAL_DMA_Abort_IT+0x290>
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	681b      	ldr	r3, [r3, #0]
 801b430:	4a60      	ldr	r2, [pc, #384]	@ (801b5b4 <HAL_DMA_Abort_IT+0x3c8>)
 801b432:	4293      	cmp	r3, r2
 801b434:	d022      	beq.n	801b47c <HAL_DMA_Abort_IT+0x290>
 801b436:	687b      	ldr	r3, [r7, #4]
 801b438:	681b      	ldr	r3, [r3, #0]
 801b43a:	4a5f      	ldr	r2, [pc, #380]	@ (801b5b8 <HAL_DMA_Abort_IT+0x3cc>)
 801b43c:	4293      	cmp	r3, r2
 801b43e:	d01d      	beq.n	801b47c <HAL_DMA_Abort_IT+0x290>
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	681b      	ldr	r3, [r3, #0]
 801b444:	4a5d      	ldr	r2, [pc, #372]	@ (801b5bc <HAL_DMA_Abort_IT+0x3d0>)
 801b446:	4293      	cmp	r3, r2
 801b448:	d018      	beq.n	801b47c <HAL_DMA_Abort_IT+0x290>
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	681b      	ldr	r3, [r3, #0]
 801b44e:	4a5c      	ldr	r2, [pc, #368]	@ (801b5c0 <HAL_DMA_Abort_IT+0x3d4>)
 801b450:	4293      	cmp	r3, r2
 801b452:	d013      	beq.n	801b47c <HAL_DMA_Abort_IT+0x290>
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	681b      	ldr	r3, [r3, #0]
 801b458:	4a5a      	ldr	r2, [pc, #360]	@ (801b5c4 <HAL_DMA_Abort_IT+0x3d8>)
 801b45a:	4293      	cmp	r3, r2
 801b45c:	d00e      	beq.n	801b47c <HAL_DMA_Abort_IT+0x290>
 801b45e:	687b      	ldr	r3, [r7, #4]
 801b460:	681b      	ldr	r3, [r3, #0]
 801b462:	4a59      	ldr	r2, [pc, #356]	@ (801b5c8 <HAL_DMA_Abort_IT+0x3dc>)
 801b464:	4293      	cmp	r3, r2
 801b466:	d009      	beq.n	801b47c <HAL_DMA_Abort_IT+0x290>
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	681b      	ldr	r3, [r3, #0]
 801b46c:	4a57      	ldr	r2, [pc, #348]	@ (801b5cc <HAL_DMA_Abort_IT+0x3e0>)
 801b46e:	4293      	cmp	r3, r2
 801b470:	d004      	beq.n	801b47c <HAL_DMA_Abort_IT+0x290>
 801b472:	687b      	ldr	r3, [r7, #4]
 801b474:	681b      	ldr	r3, [r3, #0]
 801b476:	4a56      	ldr	r2, [pc, #344]	@ (801b5d0 <HAL_DMA_Abort_IT+0x3e4>)
 801b478:	4293      	cmp	r3, r2
 801b47a:	d108      	bne.n	801b48e <HAL_DMA_Abort_IT+0x2a2>
 801b47c:	687b      	ldr	r3, [r7, #4]
 801b47e:	681b      	ldr	r3, [r3, #0]
 801b480:	681a      	ldr	r2, [r3, #0]
 801b482:	687b      	ldr	r3, [r7, #4]
 801b484:	681b      	ldr	r3, [r3, #0]
 801b486:	f022 0201 	bic.w	r2, r2, #1
 801b48a:	601a      	str	r2, [r3, #0]
 801b48c:	e007      	b.n	801b49e <HAL_DMA_Abort_IT+0x2b2>
 801b48e:	687b      	ldr	r3, [r7, #4]
 801b490:	681b      	ldr	r3, [r3, #0]
 801b492:	681a      	ldr	r2, [r3, #0]
 801b494:	687b      	ldr	r3, [r7, #4]
 801b496:	681b      	ldr	r3, [r3, #0]
 801b498:	f022 0201 	bic.w	r2, r2, #1
 801b49c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801b49e:	687b      	ldr	r3, [r7, #4]
 801b4a0:	681b      	ldr	r3, [r3, #0]
 801b4a2:	4a3c      	ldr	r2, [pc, #240]	@ (801b594 <HAL_DMA_Abort_IT+0x3a8>)
 801b4a4:	4293      	cmp	r3, r2
 801b4a6:	d072      	beq.n	801b58e <HAL_DMA_Abort_IT+0x3a2>
 801b4a8:	687b      	ldr	r3, [r7, #4]
 801b4aa:	681b      	ldr	r3, [r3, #0]
 801b4ac:	4a3a      	ldr	r2, [pc, #232]	@ (801b598 <HAL_DMA_Abort_IT+0x3ac>)
 801b4ae:	4293      	cmp	r3, r2
 801b4b0:	d06d      	beq.n	801b58e <HAL_DMA_Abort_IT+0x3a2>
 801b4b2:	687b      	ldr	r3, [r7, #4]
 801b4b4:	681b      	ldr	r3, [r3, #0]
 801b4b6:	4a39      	ldr	r2, [pc, #228]	@ (801b59c <HAL_DMA_Abort_IT+0x3b0>)
 801b4b8:	4293      	cmp	r3, r2
 801b4ba:	d068      	beq.n	801b58e <HAL_DMA_Abort_IT+0x3a2>
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	681b      	ldr	r3, [r3, #0]
 801b4c0:	4a37      	ldr	r2, [pc, #220]	@ (801b5a0 <HAL_DMA_Abort_IT+0x3b4>)
 801b4c2:	4293      	cmp	r3, r2
 801b4c4:	d063      	beq.n	801b58e <HAL_DMA_Abort_IT+0x3a2>
 801b4c6:	687b      	ldr	r3, [r7, #4]
 801b4c8:	681b      	ldr	r3, [r3, #0]
 801b4ca:	4a36      	ldr	r2, [pc, #216]	@ (801b5a4 <HAL_DMA_Abort_IT+0x3b8>)
 801b4cc:	4293      	cmp	r3, r2
 801b4ce:	d05e      	beq.n	801b58e <HAL_DMA_Abort_IT+0x3a2>
 801b4d0:	687b      	ldr	r3, [r7, #4]
 801b4d2:	681b      	ldr	r3, [r3, #0]
 801b4d4:	4a34      	ldr	r2, [pc, #208]	@ (801b5a8 <HAL_DMA_Abort_IT+0x3bc>)
 801b4d6:	4293      	cmp	r3, r2
 801b4d8:	d059      	beq.n	801b58e <HAL_DMA_Abort_IT+0x3a2>
 801b4da:	687b      	ldr	r3, [r7, #4]
 801b4dc:	681b      	ldr	r3, [r3, #0]
 801b4de:	4a33      	ldr	r2, [pc, #204]	@ (801b5ac <HAL_DMA_Abort_IT+0x3c0>)
 801b4e0:	4293      	cmp	r3, r2
 801b4e2:	d054      	beq.n	801b58e <HAL_DMA_Abort_IT+0x3a2>
 801b4e4:	687b      	ldr	r3, [r7, #4]
 801b4e6:	681b      	ldr	r3, [r3, #0]
 801b4e8:	4a31      	ldr	r2, [pc, #196]	@ (801b5b0 <HAL_DMA_Abort_IT+0x3c4>)
 801b4ea:	4293      	cmp	r3, r2
 801b4ec:	d04f      	beq.n	801b58e <HAL_DMA_Abort_IT+0x3a2>
 801b4ee:	687b      	ldr	r3, [r7, #4]
 801b4f0:	681b      	ldr	r3, [r3, #0]
 801b4f2:	4a30      	ldr	r2, [pc, #192]	@ (801b5b4 <HAL_DMA_Abort_IT+0x3c8>)
 801b4f4:	4293      	cmp	r3, r2
 801b4f6:	d04a      	beq.n	801b58e <HAL_DMA_Abort_IT+0x3a2>
 801b4f8:	687b      	ldr	r3, [r7, #4]
 801b4fa:	681b      	ldr	r3, [r3, #0]
 801b4fc:	4a2e      	ldr	r2, [pc, #184]	@ (801b5b8 <HAL_DMA_Abort_IT+0x3cc>)
 801b4fe:	4293      	cmp	r3, r2
 801b500:	d045      	beq.n	801b58e <HAL_DMA_Abort_IT+0x3a2>
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	681b      	ldr	r3, [r3, #0]
 801b506:	4a2d      	ldr	r2, [pc, #180]	@ (801b5bc <HAL_DMA_Abort_IT+0x3d0>)
 801b508:	4293      	cmp	r3, r2
 801b50a:	d040      	beq.n	801b58e <HAL_DMA_Abort_IT+0x3a2>
 801b50c:	687b      	ldr	r3, [r7, #4]
 801b50e:	681b      	ldr	r3, [r3, #0]
 801b510:	4a2b      	ldr	r2, [pc, #172]	@ (801b5c0 <HAL_DMA_Abort_IT+0x3d4>)
 801b512:	4293      	cmp	r3, r2
 801b514:	d03b      	beq.n	801b58e <HAL_DMA_Abort_IT+0x3a2>
 801b516:	687b      	ldr	r3, [r7, #4]
 801b518:	681b      	ldr	r3, [r3, #0]
 801b51a:	4a2a      	ldr	r2, [pc, #168]	@ (801b5c4 <HAL_DMA_Abort_IT+0x3d8>)
 801b51c:	4293      	cmp	r3, r2
 801b51e:	d036      	beq.n	801b58e <HAL_DMA_Abort_IT+0x3a2>
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	681b      	ldr	r3, [r3, #0]
 801b524:	4a28      	ldr	r2, [pc, #160]	@ (801b5c8 <HAL_DMA_Abort_IT+0x3dc>)
 801b526:	4293      	cmp	r3, r2
 801b528:	d031      	beq.n	801b58e <HAL_DMA_Abort_IT+0x3a2>
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	681b      	ldr	r3, [r3, #0]
 801b52e:	4a27      	ldr	r2, [pc, #156]	@ (801b5cc <HAL_DMA_Abort_IT+0x3e0>)
 801b530:	4293      	cmp	r3, r2
 801b532:	d02c      	beq.n	801b58e <HAL_DMA_Abort_IT+0x3a2>
 801b534:	687b      	ldr	r3, [r7, #4]
 801b536:	681b      	ldr	r3, [r3, #0]
 801b538:	4a25      	ldr	r2, [pc, #148]	@ (801b5d0 <HAL_DMA_Abort_IT+0x3e4>)
 801b53a:	4293      	cmp	r3, r2
 801b53c:	d027      	beq.n	801b58e <HAL_DMA_Abort_IT+0x3a2>
 801b53e:	687b      	ldr	r3, [r7, #4]
 801b540:	681b      	ldr	r3, [r3, #0]
 801b542:	4a24      	ldr	r2, [pc, #144]	@ (801b5d4 <HAL_DMA_Abort_IT+0x3e8>)
 801b544:	4293      	cmp	r3, r2
 801b546:	d022      	beq.n	801b58e <HAL_DMA_Abort_IT+0x3a2>
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	681b      	ldr	r3, [r3, #0]
 801b54c:	4a22      	ldr	r2, [pc, #136]	@ (801b5d8 <HAL_DMA_Abort_IT+0x3ec>)
 801b54e:	4293      	cmp	r3, r2
 801b550:	d01d      	beq.n	801b58e <HAL_DMA_Abort_IT+0x3a2>
 801b552:	687b      	ldr	r3, [r7, #4]
 801b554:	681b      	ldr	r3, [r3, #0]
 801b556:	4a21      	ldr	r2, [pc, #132]	@ (801b5dc <HAL_DMA_Abort_IT+0x3f0>)
 801b558:	4293      	cmp	r3, r2
 801b55a:	d018      	beq.n	801b58e <HAL_DMA_Abort_IT+0x3a2>
 801b55c:	687b      	ldr	r3, [r7, #4]
 801b55e:	681b      	ldr	r3, [r3, #0]
 801b560:	4a1f      	ldr	r2, [pc, #124]	@ (801b5e0 <HAL_DMA_Abort_IT+0x3f4>)
 801b562:	4293      	cmp	r3, r2
 801b564:	d013      	beq.n	801b58e <HAL_DMA_Abort_IT+0x3a2>
 801b566:	687b      	ldr	r3, [r7, #4]
 801b568:	681b      	ldr	r3, [r3, #0]
 801b56a:	4a1e      	ldr	r2, [pc, #120]	@ (801b5e4 <HAL_DMA_Abort_IT+0x3f8>)
 801b56c:	4293      	cmp	r3, r2
 801b56e:	d00e      	beq.n	801b58e <HAL_DMA_Abort_IT+0x3a2>
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	681b      	ldr	r3, [r3, #0]
 801b574:	4a1c      	ldr	r2, [pc, #112]	@ (801b5e8 <HAL_DMA_Abort_IT+0x3fc>)
 801b576:	4293      	cmp	r3, r2
 801b578:	d009      	beq.n	801b58e <HAL_DMA_Abort_IT+0x3a2>
 801b57a:	687b      	ldr	r3, [r7, #4]
 801b57c:	681b      	ldr	r3, [r3, #0]
 801b57e:	4a1b      	ldr	r2, [pc, #108]	@ (801b5ec <HAL_DMA_Abort_IT+0x400>)
 801b580:	4293      	cmp	r3, r2
 801b582:	d004      	beq.n	801b58e <HAL_DMA_Abort_IT+0x3a2>
 801b584:	687b      	ldr	r3, [r7, #4]
 801b586:	681b      	ldr	r3, [r3, #0]
 801b588:	4a19      	ldr	r2, [pc, #100]	@ (801b5f0 <HAL_DMA_Abort_IT+0x404>)
 801b58a:	4293      	cmp	r3, r2
 801b58c:	d132      	bne.n	801b5f4 <HAL_DMA_Abort_IT+0x408>
 801b58e:	2301      	movs	r3, #1
 801b590:	e031      	b.n	801b5f6 <HAL_DMA_Abort_IT+0x40a>
 801b592:	bf00      	nop
 801b594:	40020010 	.word	0x40020010
 801b598:	40020028 	.word	0x40020028
 801b59c:	40020040 	.word	0x40020040
 801b5a0:	40020058 	.word	0x40020058
 801b5a4:	40020070 	.word	0x40020070
 801b5a8:	40020088 	.word	0x40020088
 801b5ac:	400200a0 	.word	0x400200a0
 801b5b0:	400200b8 	.word	0x400200b8
 801b5b4:	40020410 	.word	0x40020410
 801b5b8:	40020428 	.word	0x40020428
 801b5bc:	40020440 	.word	0x40020440
 801b5c0:	40020458 	.word	0x40020458
 801b5c4:	40020470 	.word	0x40020470
 801b5c8:	40020488 	.word	0x40020488
 801b5cc:	400204a0 	.word	0x400204a0
 801b5d0:	400204b8 	.word	0x400204b8
 801b5d4:	58025408 	.word	0x58025408
 801b5d8:	5802541c 	.word	0x5802541c
 801b5dc:	58025430 	.word	0x58025430
 801b5e0:	58025444 	.word	0x58025444
 801b5e4:	58025458 	.word	0x58025458
 801b5e8:	5802546c 	.word	0x5802546c
 801b5ec:	58025480 	.word	0x58025480
 801b5f0:	58025494 	.word	0x58025494
 801b5f4:	2300      	movs	r3, #0
 801b5f6:	2b00      	cmp	r3, #0
 801b5f8:	d028      	beq.n	801b64c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801b5fa:	687b      	ldr	r3, [r7, #4]
 801b5fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b5fe:	681a      	ldr	r2, [r3, #0]
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b604:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801b608:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801b60a:	687b      	ldr	r3, [r7, #4]
 801b60c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b60e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801b610:	687b      	ldr	r3, [r7, #4]
 801b612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b614:	f003 031f 	and.w	r3, r3, #31
 801b618:	2201      	movs	r2, #1
 801b61a:	409a      	lsls	r2, r3
 801b61c:	68fb      	ldr	r3, [r7, #12]
 801b61e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801b624:	687a      	ldr	r2, [r7, #4]
 801b626:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801b628:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 801b62a:	687b      	ldr	r3, [r7, #4]
 801b62c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b62e:	2b00      	cmp	r3, #0
 801b630:	d00c      	beq.n	801b64c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801b632:	687b      	ldr	r3, [r7, #4]
 801b634:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b636:	681a      	ldr	r2, [r3, #0]
 801b638:	687b      	ldr	r3, [r7, #4]
 801b63a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b63c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801b640:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b642:	687b      	ldr	r3, [r7, #4]
 801b644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b646:	687a      	ldr	r2, [r7, #4]
 801b648:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801b64a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801b64c:	687b      	ldr	r3, [r7, #4]
 801b64e:	2201      	movs	r2, #1
 801b650:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	2200      	movs	r2, #0
 801b658:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b660:	2b00      	cmp	r3, #0
 801b662:	d003      	beq.n	801b66c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 801b664:	687b      	ldr	r3, [r7, #4]
 801b666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b668:	6878      	ldr	r0, [r7, #4]
 801b66a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 801b66c:	2300      	movs	r3, #0
}
 801b66e:	4618      	mov	r0, r3
 801b670:	3710      	adds	r7, #16
 801b672:	46bd      	mov	sp, r7
 801b674:	bd80      	pop	{r7, pc}
 801b676:	bf00      	nop

0801b678 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801b678:	b580      	push	{r7, lr}
 801b67a:	b08a      	sub	sp, #40	@ 0x28
 801b67c:	af00      	add	r7, sp, #0
 801b67e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 801b680:	2300      	movs	r3, #0
 801b682:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 801b684:	4b67      	ldr	r3, [pc, #412]	@ (801b824 <HAL_DMA_IRQHandler+0x1ac>)
 801b686:	681b      	ldr	r3, [r3, #0]
 801b688:	4a67      	ldr	r2, [pc, #412]	@ (801b828 <HAL_DMA_IRQHandler+0x1b0>)
 801b68a:	fba2 2303 	umull	r2, r3, r2, r3
 801b68e:	0a9b      	lsrs	r3, r3, #10
 801b690:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801b692:	687b      	ldr	r3, [r7, #4]
 801b694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b696:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801b698:	687b      	ldr	r3, [r7, #4]
 801b69a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b69c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 801b69e:	6a3b      	ldr	r3, [r7, #32]
 801b6a0:	681b      	ldr	r3, [r3, #0]
 801b6a2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 801b6a4:	69fb      	ldr	r3, [r7, #28]
 801b6a6:	681b      	ldr	r3, [r3, #0]
 801b6a8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 801b6aa:	687b      	ldr	r3, [r7, #4]
 801b6ac:	681b      	ldr	r3, [r3, #0]
 801b6ae:	4a5f      	ldr	r2, [pc, #380]	@ (801b82c <HAL_DMA_IRQHandler+0x1b4>)
 801b6b0:	4293      	cmp	r3, r2
 801b6b2:	d04a      	beq.n	801b74a <HAL_DMA_IRQHandler+0xd2>
 801b6b4:	687b      	ldr	r3, [r7, #4]
 801b6b6:	681b      	ldr	r3, [r3, #0]
 801b6b8:	4a5d      	ldr	r2, [pc, #372]	@ (801b830 <HAL_DMA_IRQHandler+0x1b8>)
 801b6ba:	4293      	cmp	r3, r2
 801b6bc:	d045      	beq.n	801b74a <HAL_DMA_IRQHandler+0xd2>
 801b6be:	687b      	ldr	r3, [r7, #4]
 801b6c0:	681b      	ldr	r3, [r3, #0]
 801b6c2:	4a5c      	ldr	r2, [pc, #368]	@ (801b834 <HAL_DMA_IRQHandler+0x1bc>)
 801b6c4:	4293      	cmp	r3, r2
 801b6c6:	d040      	beq.n	801b74a <HAL_DMA_IRQHandler+0xd2>
 801b6c8:	687b      	ldr	r3, [r7, #4]
 801b6ca:	681b      	ldr	r3, [r3, #0]
 801b6cc:	4a5a      	ldr	r2, [pc, #360]	@ (801b838 <HAL_DMA_IRQHandler+0x1c0>)
 801b6ce:	4293      	cmp	r3, r2
 801b6d0:	d03b      	beq.n	801b74a <HAL_DMA_IRQHandler+0xd2>
 801b6d2:	687b      	ldr	r3, [r7, #4]
 801b6d4:	681b      	ldr	r3, [r3, #0]
 801b6d6:	4a59      	ldr	r2, [pc, #356]	@ (801b83c <HAL_DMA_IRQHandler+0x1c4>)
 801b6d8:	4293      	cmp	r3, r2
 801b6da:	d036      	beq.n	801b74a <HAL_DMA_IRQHandler+0xd2>
 801b6dc:	687b      	ldr	r3, [r7, #4]
 801b6de:	681b      	ldr	r3, [r3, #0]
 801b6e0:	4a57      	ldr	r2, [pc, #348]	@ (801b840 <HAL_DMA_IRQHandler+0x1c8>)
 801b6e2:	4293      	cmp	r3, r2
 801b6e4:	d031      	beq.n	801b74a <HAL_DMA_IRQHandler+0xd2>
 801b6e6:	687b      	ldr	r3, [r7, #4]
 801b6e8:	681b      	ldr	r3, [r3, #0]
 801b6ea:	4a56      	ldr	r2, [pc, #344]	@ (801b844 <HAL_DMA_IRQHandler+0x1cc>)
 801b6ec:	4293      	cmp	r3, r2
 801b6ee:	d02c      	beq.n	801b74a <HAL_DMA_IRQHandler+0xd2>
 801b6f0:	687b      	ldr	r3, [r7, #4]
 801b6f2:	681b      	ldr	r3, [r3, #0]
 801b6f4:	4a54      	ldr	r2, [pc, #336]	@ (801b848 <HAL_DMA_IRQHandler+0x1d0>)
 801b6f6:	4293      	cmp	r3, r2
 801b6f8:	d027      	beq.n	801b74a <HAL_DMA_IRQHandler+0xd2>
 801b6fa:	687b      	ldr	r3, [r7, #4]
 801b6fc:	681b      	ldr	r3, [r3, #0]
 801b6fe:	4a53      	ldr	r2, [pc, #332]	@ (801b84c <HAL_DMA_IRQHandler+0x1d4>)
 801b700:	4293      	cmp	r3, r2
 801b702:	d022      	beq.n	801b74a <HAL_DMA_IRQHandler+0xd2>
 801b704:	687b      	ldr	r3, [r7, #4]
 801b706:	681b      	ldr	r3, [r3, #0]
 801b708:	4a51      	ldr	r2, [pc, #324]	@ (801b850 <HAL_DMA_IRQHandler+0x1d8>)
 801b70a:	4293      	cmp	r3, r2
 801b70c:	d01d      	beq.n	801b74a <HAL_DMA_IRQHandler+0xd2>
 801b70e:	687b      	ldr	r3, [r7, #4]
 801b710:	681b      	ldr	r3, [r3, #0]
 801b712:	4a50      	ldr	r2, [pc, #320]	@ (801b854 <HAL_DMA_IRQHandler+0x1dc>)
 801b714:	4293      	cmp	r3, r2
 801b716:	d018      	beq.n	801b74a <HAL_DMA_IRQHandler+0xd2>
 801b718:	687b      	ldr	r3, [r7, #4]
 801b71a:	681b      	ldr	r3, [r3, #0]
 801b71c:	4a4e      	ldr	r2, [pc, #312]	@ (801b858 <HAL_DMA_IRQHandler+0x1e0>)
 801b71e:	4293      	cmp	r3, r2
 801b720:	d013      	beq.n	801b74a <HAL_DMA_IRQHandler+0xd2>
 801b722:	687b      	ldr	r3, [r7, #4]
 801b724:	681b      	ldr	r3, [r3, #0]
 801b726:	4a4d      	ldr	r2, [pc, #308]	@ (801b85c <HAL_DMA_IRQHandler+0x1e4>)
 801b728:	4293      	cmp	r3, r2
 801b72a:	d00e      	beq.n	801b74a <HAL_DMA_IRQHandler+0xd2>
 801b72c:	687b      	ldr	r3, [r7, #4]
 801b72e:	681b      	ldr	r3, [r3, #0]
 801b730:	4a4b      	ldr	r2, [pc, #300]	@ (801b860 <HAL_DMA_IRQHandler+0x1e8>)
 801b732:	4293      	cmp	r3, r2
 801b734:	d009      	beq.n	801b74a <HAL_DMA_IRQHandler+0xd2>
 801b736:	687b      	ldr	r3, [r7, #4]
 801b738:	681b      	ldr	r3, [r3, #0]
 801b73a:	4a4a      	ldr	r2, [pc, #296]	@ (801b864 <HAL_DMA_IRQHandler+0x1ec>)
 801b73c:	4293      	cmp	r3, r2
 801b73e:	d004      	beq.n	801b74a <HAL_DMA_IRQHandler+0xd2>
 801b740:	687b      	ldr	r3, [r7, #4]
 801b742:	681b      	ldr	r3, [r3, #0]
 801b744:	4a48      	ldr	r2, [pc, #288]	@ (801b868 <HAL_DMA_IRQHandler+0x1f0>)
 801b746:	4293      	cmp	r3, r2
 801b748:	d101      	bne.n	801b74e <HAL_DMA_IRQHandler+0xd6>
 801b74a:	2301      	movs	r3, #1
 801b74c:	e000      	b.n	801b750 <HAL_DMA_IRQHandler+0xd8>
 801b74e:	2300      	movs	r3, #0
 801b750:	2b00      	cmp	r3, #0
 801b752:	f000 842b 	beq.w	801bfac <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b75a:	f003 031f 	and.w	r3, r3, #31
 801b75e:	2208      	movs	r2, #8
 801b760:	409a      	lsls	r2, r3
 801b762:	69bb      	ldr	r3, [r7, #24]
 801b764:	4013      	ands	r3, r2
 801b766:	2b00      	cmp	r3, #0
 801b768:	f000 80a2 	beq.w	801b8b0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	681b      	ldr	r3, [r3, #0]
 801b770:	4a2e      	ldr	r2, [pc, #184]	@ (801b82c <HAL_DMA_IRQHandler+0x1b4>)
 801b772:	4293      	cmp	r3, r2
 801b774:	d04a      	beq.n	801b80c <HAL_DMA_IRQHandler+0x194>
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	681b      	ldr	r3, [r3, #0]
 801b77a:	4a2d      	ldr	r2, [pc, #180]	@ (801b830 <HAL_DMA_IRQHandler+0x1b8>)
 801b77c:	4293      	cmp	r3, r2
 801b77e:	d045      	beq.n	801b80c <HAL_DMA_IRQHandler+0x194>
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	681b      	ldr	r3, [r3, #0]
 801b784:	4a2b      	ldr	r2, [pc, #172]	@ (801b834 <HAL_DMA_IRQHandler+0x1bc>)
 801b786:	4293      	cmp	r3, r2
 801b788:	d040      	beq.n	801b80c <HAL_DMA_IRQHandler+0x194>
 801b78a:	687b      	ldr	r3, [r7, #4]
 801b78c:	681b      	ldr	r3, [r3, #0]
 801b78e:	4a2a      	ldr	r2, [pc, #168]	@ (801b838 <HAL_DMA_IRQHandler+0x1c0>)
 801b790:	4293      	cmp	r3, r2
 801b792:	d03b      	beq.n	801b80c <HAL_DMA_IRQHandler+0x194>
 801b794:	687b      	ldr	r3, [r7, #4]
 801b796:	681b      	ldr	r3, [r3, #0]
 801b798:	4a28      	ldr	r2, [pc, #160]	@ (801b83c <HAL_DMA_IRQHandler+0x1c4>)
 801b79a:	4293      	cmp	r3, r2
 801b79c:	d036      	beq.n	801b80c <HAL_DMA_IRQHandler+0x194>
 801b79e:	687b      	ldr	r3, [r7, #4]
 801b7a0:	681b      	ldr	r3, [r3, #0]
 801b7a2:	4a27      	ldr	r2, [pc, #156]	@ (801b840 <HAL_DMA_IRQHandler+0x1c8>)
 801b7a4:	4293      	cmp	r3, r2
 801b7a6:	d031      	beq.n	801b80c <HAL_DMA_IRQHandler+0x194>
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	681b      	ldr	r3, [r3, #0]
 801b7ac:	4a25      	ldr	r2, [pc, #148]	@ (801b844 <HAL_DMA_IRQHandler+0x1cc>)
 801b7ae:	4293      	cmp	r3, r2
 801b7b0:	d02c      	beq.n	801b80c <HAL_DMA_IRQHandler+0x194>
 801b7b2:	687b      	ldr	r3, [r7, #4]
 801b7b4:	681b      	ldr	r3, [r3, #0]
 801b7b6:	4a24      	ldr	r2, [pc, #144]	@ (801b848 <HAL_DMA_IRQHandler+0x1d0>)
 801b7b8:	4293      	cmp	r3, r2
 801b7ba:	d027      	beq.n	801b80c <HAL_DMA_IRQHandler+0x194>
 801b7bc:	687b      	ldr	r3, [r7, #4]
 801b7be:	681b      	ldr	r3, [r3, #0]
 801b7c0:	4a22      	ldr	r2, [pc, #136]	@ (801b84c <HAL_DMA_IRQHandler+0x1d4>)
 801b7c2:	4293      	cmp	r3, r2
 801b7c4:	d022      	beq.n	801b80c <HAL_DMA_IRQHandler+0x194>
 801b7c6:	687b      	ldr	r3, [r7, #4]
 801b7c8:	681b      	ldr	r3, [r3, #0]
 801b7ca:	4a21      	ldr	r2, [pc, #132]	@ (801b850 <HAL_DMA_IRQHandler+0x1d8>)
 801b7cc:	4293      	cmp	r3, r2
 801b7ce:	d01d      	beq.n	801b80c <HAL_DMA_IRQHandler+0x194>
 801b7d0:	687b      	ldr	r3, [r7, #4]
 801b7d2:	681b      	ldr	r3, [r3, #0]
 801b7d4:	4a1f      	ldr	r2, [pc, #124]	@ (801b854 <HAL_DMA_IRQHandler+0x1dc>)
 801b7d6:	4293      	cmp	r3, r2
 801b7d8:	d018      	beq.n	801b80c <HAL_DMA_IRQHandler+0x194>
 801b7da:	687b      	ldr	r3, [r7, #4]
 801b7dc:	681b      	ldr	r3, [r3, #0]
 801b7de:	4a1e      	ldr	r2, [pc, #120]	@ (801b858 <HAL_DMA_IRQHandler+0x1e0>)
 801b7e0:	4293      	cmp	r3, r2
 801b7e2:	d013      	beq.n	801b80c <HAL_DMA_IRQHandler+0x194>
 801b7e4:	687b      	ldr	r3, [r7, #4]
 801b7e6:	681b      	ldr	r3, [r3, #0]
 801b7e8:	4a1c      	ldr	r2, [pc, #112]	@ (801b85c <HAL_DMA_IRQHandler+0x1e4>)
 801b7ea:	4293      	cmp	r3, r2
 801b7ec:	d00e      	beq.n	801b80c <HAL_DMA_IRQHandler+0x194>
 801b7ee:	687b      	ldr	r3, [r7, #4]
 801b7f0:	681b      	ldr	r3, [r3, #0]
 801b7f2:	4a1b      	ldr	r2, [pc, #108]	@ (801b860 <HAL_DMA_IRQHandler+0x1e8>)
 801b7f4:	4293      	cmp	r3, r2
 801b7f6:	d009      	beq.n	801b80c <HAL_DMA_IRQHandler+0x194>
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	681b      	ldr	r3, [r3, #0]
 801b7fc:	4a19      	ldr	r2, [pc, #100]	@ (801b864 <HAL_DMA_IRQHandler+0x1ec>)
 801b7fe:	4293      	cmp	r3, r2
 801b800:	d004      	beq.n	801b80c <HAL_DMA_IRQHandler+0x194>
 801b802:	687b      	ldr	r3, [r7, #4]
 801b804:	681b      	ldr	r3, [r3, #0]
 801b806:	4a18      	ldr	r2, [pc, #96]	@ (801b868 <HAL_DMA_IRQHandler+0x1f0>)
 801b808:	4293      	cmp	r3, r2
 801b80a:	d12f      	bne.n	801b86c <HAL_DMA_IRQHandler+0x1f4>
 801b80c:	687b      	ldr	r3, [r7, #4]
 801b80e:	681b      	ldr	r3, [r3, #0]
 801b810:	681b      	ldr	r3, [r3, #0]
 801b812:	f003 0304 	and.w	r3, r3, #4
 801b816:	2b00      	cmp	r3, #0
 801b818:	bf14      	ite	ne
 801b81a:	2301      	movne	r3, #1
 801b81c:	2300      	moveq	r3, #0
 801b81e:	b2db      	uxtb	r3, r3
 801b820:	e02e      	b.n	801b880 <HAL_DMA_IRQHandler+0x208>
 801b822:	bf00      	nop
 801b824:	20000000 	.word	0x20000000
 801b828:	1b4e81b5 	.word	0x1b4e81b5
 801b82c:	40020010 	.word	0x40020010
 801b830:	40020028 	.word	0x40020028
 801b834:	40020040 	.word	0x40020040
 801b838:	40020058 	.word	0x40020058
 801b83c:	40020070 	.word	0x40020070
 801b840:	40020088 	.word	0x40020088
 801b844:	400200a0 	.word	0x400200a0
 801b848:	400200b8 	.word	0x400200b8
 801b84c:	40020410 	.word	0x40020410
 801b850:	40020428 	.word	0x40020428
 801b854:	40020440 	.word	0x40020440
 801b858:	40020458 	.word	0x40020458
 801b85c:	40020470 	.word	0x40020470
 801b860:	40020488 	.word	0x40020488
 801b864:	400204a0 	.word	0x400204a0
 801b868:	400204b8 	.word	0x400204b8
 801b86c:	687b      	ldr	r3, [r7, #4]
 801b86e:	681b      	ldr	r3, [r3, #0]
 801b870:	681b      	ldr	r3, [r3, #0]
 801b872:	f003 0308 	and.w	r3, r3, #8
 801b876:	2b00      	cmp	r3, #0
 801b878:	bf14      	ite	ne
 801b87a:	2301      	movne	r3, #1
 801b87c:	2300      	moveq	r3, #0
 801b87e:	b2db      	uxtb	r3, r3
 801b880:	2b00      	cmp	r3, #0
 801b882:	d015      	beq.n	801b8b0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 801b884:	687b      	ldr	r3, [r7, #4]
 801b886:	681b      	ldr	r3, [r3, #0]
 801b888:	681a      	ldr	r2, [r3, #0]
 801b88a:	687b      	ldr	r3, [r7, #4]
 801b88c:	681b      	ldr	r3, [r3, #0]
 801b88e:	f022 0204 	bic.w	r2, r2, #4
 801b892:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801b894:	687b      	ldr	r3, [r7, #4]
 801b896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b898:	f003 031f 	and.w	r3, r3, #31
 801b89c:	2208      	movs	r2, #8
 801b89e:	409a      	lsls	r2, r3
 801b8a0:	6a3b      	ldr	r3, [r7, #32]
 801b8a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801b8a4:	687b      	ldr	r3, [r7, #4]
 801b8a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b8a8:	f043 0201 	orr.w	r2, r3, #1
 801b8ac:	687b      	ldr	r3, [r7, #4]
 801b8ae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801b8b0:	687b      	ldr	r3, [r7, #4]
 801b8b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b8b4:	f003 031f 	and.w	r3, r3, #31
 801b8b8:	69ba      	ldr	r2, [r7, #24]
 801b8ba:	fa22 f303 	lsr.w	r3, r2, r3
 801b8be:	f003 0301 	and.w	r3, r3, #1
 801b8c2:	2b00      	cmp	r3, #0
 801b8c4:	d06e      	beq.n	801b9a4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 801b8c6:	687b      	ldr	r3, [r7, #4]
 801b8c8:	681b      	ldr	r3, [r3, #0]
 801b8ca:	4a69      	ldr	r2, [pc, #420]	@ (801ba70 <HAL_DMA_IRQHandler+0x3f8>)
 801b8cc:	4293      	cmp	r3, r2
 801b8ce:	d04a      	beq.n	801b966 <HAL_DMA_IRQHandler+0x2ee>
 801b8d0:	687b      	ldr	r3, [r7, #4]
 801b8d2:	681b      	ldr	r3, [r3, #0]
 801b8d4:	4a67      	ldr	r2, [pc, #412]	@ (801ba74 <HAL_DMA_IRQHandler+0x3fc>)
 801b8d6:	4293      	cmp	r3, r2
 801b8d8:	d045      	beq.n	801b966 <HAL_DMA_IRQHandler+0x2ee>
 801b8da:	687b      	ldr	r3, [r7, #4]
 801b8dc:	681b      	ldr	r3, [r3, #0]
 801b8de:	4a66      	ldr	r2, [pc, #408]	@ (801ba78 <HAL_DMA_IRQHandler+0x400>)
 801b8e0:	4293      	cmp	r3, r2
 801b8e2:	d040      	beq.n	801b966 <HAL_DMA_IRQHandler+0x2ee>
 801b8e4:	687b      	ldr	r3, [r7, #4]
 801b8e6:	681b      	ldr	r3, [r3, #0]
 801b8e8:	4a64      	ldr	r2, [pc, #400]	@ (801ba7c <HAL_DMA_IRQHandler+0x404>)
 801b8ea:	4293      	cmp	r3, r2
 801b8ec:	d03b      	beq.n	801b966 <HAL_DMA_IRQHandler+0x2ee>
 801b8ee:	687b      	ldr	r3, [r7, #4]
 801b8f0:	681b      	ldr	r3, [r3, #0]
 801b8f2:	4a63      	ldr	r2, [pc, #396]	@ (801ba80 <HAL_DMA_IRQHandler+0x408>)
 801b8f4:	4293      	cmp	r3, r2
 801b8f6:	d036      	beq.n	801b966 <HAL_DMA_IRQHandler+0x2ee>
 801b8f8:	687b      	ldr	r3, [r7, #4]
 801b8fa:	681b      	ldr	r3, [r3, #0]
 801b8fc:	4a61      	ldr	r2, [pc, #388]	@ (801ba84 <HAL_DMA_IRQHandler+0x40c>)
 801b8fe:	4293      	cmp	r3, r2
 801b900:	d031      	beq.n	801b966 <HAL_DMA_IRQHandler+0x2ee>
 801b902:	687b      	ldr	r3, [r7, #4]
 801b904:	681b      	ldr	r3, [r3, #0]
 801b906:	4a60      	ldr	r2, [pc, #384]	@ (801ba88 <HAL_DMA_IRQHandler+0x410>)
 801b908:	4293      	cmp	r3, r2
 801b90a:	d02c      	beq.n	801b966 <HAL_DMA_IRQHandler+0x2ee>
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	681b      	ldr	r3, [r3, #0]
 801b910:	4a5e      	ldr	r2, [pc, #376]	@ (801ba8c <HAL_DMA_IRQHandler+0x414>)
 801b912:	4293      	cmp	r3, r2
 801b914:	d027      	beq.n	801b966 <HAL_DMA_IRQHandler+0x2ee>
 801b916:	687b      	ldr	r3, [r7, #4]
 801b918:	681b      	ldr	r3, [r3, #0]
 801b91a:	4a5d      	ldr	r2, [pc, #372]	@ (801ba90 <HAL_DMA_IRQHandler+0x418>)
 801b91c:	4293      	cmp	r3, r2
 801b91e:	d022      	beq.n	801b966 <HAL_DMA_IRQHandler+0x2ee>
 801b920:	687b      	ldr	r3, [r7, #4]
 801b922:	681b      	ldr	r3, [r3, #0]
 801b924:	4a5b      	ldr	r2, [pc, #364]	@ (801ba94 <HAL_DMA_IRQHandler+0x41c>)
 801b926:	4293      	cmp	r3, r2
 801b928:	d01d      	beq.n	801b966 <HAL_DMA_IRQHandler+0x2ee>
 801b92a:	687b      	ldr	r3, [r7, #4]
 801b92c:	681b      	ldr	r3, [r3, #0]
 801b92e:	4a5a      	ldr	r2, [pc, #360]	@ (801ba98 <HAL_DMA_IRQHandler+0x420>)
 801b930:	4293      	cmp	r3, r2
 801b932:	d018      	beq.n	801b966 <HAL_DMA_IRQHandler+0x2ee>
 801b934:	687b      	ldr	r3, [r7, #4]
 801b936:	681b      	ldr	r3, [r3, #0]
 801b938:	4a58      	ldr	r2, [pc, #352]	@ (801ba9c <HAL_DMA_IRQHandler+0x424>)
 801b93a:	4293      	cmp	r3, r2
 801b93c:	d013      	beq.n	801b966 <HAL_DMA_IRQHandler+0x2ee>
 801b93e:	687b      	ldr	r3, [r7, #4]
 801b940:	681b      	ldr	r3, [r3, #0]
 801b942:	4a57      	ldr	r2, [pc, #348]	@ (801baa0 <HAL_DMA_IRQHandler+0x428>)
 801b944:	4293      	cmp	r3, r2
 801b946:	d00e      	beq.n	801b966 <HAL_DMA_IRQHandler+0x2ee>
 801b948:	687b      	ldr	r3, [r7, #4]
 801b94a:	681b      	ldr	r3, [r3, #0]
 801b94c:	4a55      	ldr	r2, [pc, #340]	@ (801baa4 <HAL_DMA_IRQHandler+0x42c>)
 801b94e:	4293      	cmp	r3, r2
 801b950:	d009      	beq.n	801b966 <HAL_DMA_IRQHandler+0x2ee>
 801b952:	687b      	ldr	r3, [r7, #4]
 801b954:	681b      	ldr	r3, [r3, #0]
 801b956:	4a54      	ldr	r2, [pc, #336]	@ (801baa8 <HAL_DMA_IRQHandler+0x430>)
 801b958:	4293      	cmp	r3, r2
 801b95a:	d004      	beq.n	801b966 <HAL_DMA_IRQHandler+0x2ee>
 801b95c:	687b      	ldr	r3, [r7, #4]
 801b95e:	681b      	ldr	r3, [r3, #0]
 801b960:	4a52      	ldr	r2, [pc, #328]	@ (801baac <HAL_DMA_IRQHandler+0x434>)
 801b962:	4293      	cmp	r3, r2
 801b964:	d10a      	bne.n	801b97c <HAL_DMA_IRQHandler+0x304>
 801b966:	687b      	ldr	r3, [r7, #4]
 801b968:	681b      	ldr	r3, [r3, #0]
 801b96a:	695b      	ldr	r3, [r3, #20]
 801b96c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801b970:	2b00      	cmp	r3, #0
 801b972:	bf14      	ite	ne
 801b974:	2301      	movne	r3, #1
 801b976:	2300      	moveq	r3, #0
 801b978:	b2db      	uxtb	r3, r3
 801b97a:	e003      	b.n	801b984 <HAL_DMA_IRQHandler+0x30c>
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	681b      	ldr	r3, [r3, #0]
 801b980:	681b      	ldr	r3, [r3, #0]
 801b982:	2300      	movs	r3, #0
 801b984:	2b00      	cmp	r3, #0
 801b986:	d00d      	beq.n	801b9a4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801b988:	687b      	ldr	r3, [r7, #4]
 801b98a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b98c:	f003 031f 	and.w	r3, r3, #31
 801b990:	2201      	movs	r2, #1
 801b992:	409a      	lsls	r2, r3
 801b994:	6a3b      	ldr	r3, [r7, #32]
 801b996:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801b998:	687b      	ldr	r3, [r7, #4]
 801b99a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b99c:	f043 0202 	orr.w	r2, r3, #2
 801b9a0:	687b      	ldr	r3, [r7, #4]
 801b9a2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801b9a4:	687b      	ldr	r3, [r7, #4]
 801b9a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b9a8:	f003 031f 	and.w	r3, r3, #31
 801b9ac:	2204      	movs	r2, #4
 801b9ae:	409a      	lsls	r2, r3
 801b9b0:	69bb      	ldr	r3, [r7, #24]
 801b9b2:	4013      	ands	r3, r2
 801b9b4:	2b00      	cmp	r3, #0
 801b9b6:	f000 808f 	beq.w	801bad8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 801b9ba:	687b      	ldr	r3, [r7, #4]
 801b9bc:	681b      	ldr	r3, [r3, #0]
 801b9be:	4a2c      	ldr	r2, [pc, #176]	@ (801ba70 <HAL_DMA_IRQHandler+0x3f8>)
 801b9c0:	4293      	cmp	r3, r2
 801b9c2:	d04a      	beq.n	801ba5a <HAL_DMA_IRQHandler+0x3e2>
 801b9c4:	687b      	ldr	r3, [r7, #4]
 801b9c6:	681b      	ldr	r3, [r3, #0]
 801b9c8:	4a2a      	ldr	r2, [pc, #168]	@ (801ba74 <HAL_DMA_IRQHandler+0x3fc>)
 801b9ca:	4293      	cmp	r3, r2
 801b9cc:	d045      	beq.n	801ba5a <HAL_DMA_IRQHandler+0x3e2>
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	681b      	ldr	r3, [r3, #0]
 801b9d2:	4a29      	ldr	r2, [pc, #164]	@ (801ba78 <HAL_DMA_IRQHandler+0x400>)
 801b9d4:	4293      	cmp	r3, r2
 801b9d6:	d040      	beq.n	801ba5a <HAL_DMA_IRQHandler+0x3e2>
 801b9d8:	687b      	ldr	r3, [r7, #4]
 801b9da:	681b      	ldr	r3, [r3, #0]
 801b9dc:	4a27      	ldr	r2, [pc, #156]	@ (801ba7c <HAL_DMA_IRQHandler+0x404>)
 801b9de:	4293      	cmp	r3, r2
 801b9e0:	d03b      	beq.n	801ba5a <HAL_DMA_IRQHandler+0x3e2>
 801b9e2:	687b      	ldr	r3, [r7, #4]
 801b9e4:	681b      	ldr	r3, [r3, #0]
 801b9e6:	4a26      	ldr	r2, [pc, #152]	@ (801ba80 <HAL_DMA_IRQHandler+0x408>)
 801b9e8:	4293      	cmp	r3, r2
 801b9ea:	d036      	beq.n	801ba5a <HAL_DMA_IRQHandler+0x3e2>
 801b9ec:	687b      	ldr	r3, [r7, #4]
 801b9ee:	681b      	ldr	r3, [r3, #0]
 801b9f0:	4a24      	ldr	r2, [pc, #144]	@ (801ba84 <HAL_DMA_IRQHandler+0x40c>)
 801b9f2:	4293      	cmp	r3, r2
 801b9f4:	d031      	beq.n	801ba5a <HAL_DMA_IRQHandler+0x3e2>
 801b9f6:	687b      	ldr	r3, [r7, #4]
 801b9f8:	681b      	ldr	r3, [r3, #0]
 801b9fa:	4a23      	ldr	r2, [pc, #140]	@ (801ba88 <HAL_DMA_IRQHandler+0x410>)
 801b9fc:	4293      	cmp	r3, r2
 801b9fe:	d02c      	beq.n	801ba5a <HAL_DMA_IRQHandler+0x3e2>
 801ba00:	687b      	ldr	r3, [r7, #4]
 801ba02:	681b      	ldr	r3, [r3, #0]
 801ba04:	4a21      	ldr	r2, [pc, #132]	@ (801ba8c <HAL_DMA_IRQHandler+0x414>)
 801ba06:	4293      	cmp	r3, r2
 801ba08:	d027      	beq.n	801ba5a <HAL_DMA_IRQHandler+0x3e2>
 801ba0a:	687b      	ldr	r3, [r7, #4]
 801ba0c:	681b      	ldr	r3, [r3, #0]
 801ba0e:	4a20      	ldr	r2, [pc, #128]	@ (801ba90 <HAL_DMA_IRQHandler+0x418>)
 801ba10:	4293      	cmp	r3, r2
 801ba12:	d022      	beq.n	801ba5a <HAL_DMA_IRQHandler+0x3e2>
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	681b      	ldr	r3, [r3, #0]
 801ba18:	4a1e      	ldr	r2, [pc, #120]	@ (801ba94 <HAL_DMA_IRQHandler+0x41c>)
 801ba1a:	4293      	cmp	r3, r2
 801ba1c:	d01d      	beq.n	801ba5a <HAL_DMA_IRQHandler+0x3e2>
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	681b      	ldr	r3, [r3, #0]
 801ba22:	4a1d      	ldr	r2, [pc, #116]	@ (801ba98 <HAL_DMA_IRQHandler+0x420>)
 801ba24:	4293      	cmp	r3, r2
 801ba26:	d018      	beq.n	801ba5a <HAL_DMA_IRQHandler+0x3e2>
 801ba28:	687b      	ldr	r3, [r7, #4]
 801ba2a:	681b      	ldr	r3, [r3, #0]
 801ba2c:	4a1b      	ldr	r2, [pc, #108]	@ (801ba9c <HAL_DMA_IRQHandler+0x424>)
 801ba2e:	4293      	cmp	r3, r2
 801ba30:	d013      	beq.n	801ba5a <HAL_DMA_IRQHandler+0x3e2>
 801ba32:	687b      	ldr	r3, [r7, #4]
 801ba34:	681b      	ldr	r3, [r3, #0]
 801ba36:	4a1a      	ldr	r2, [pc, #104]	@ (801baa0 <HAL_DMA_IRQHandler+0x428>)
 801ba38:	4293      	cmp	r3, r2
 801ba3a:	d00e      	beq.n	801ba5a <HAL_DMA_IRQHandler+0x3e2>
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	681b      	ldr	r3, [r3, #0]
 801ba40:	4a18      	ldr	r2, [pc, #96]	@ (801baa4 <HAL_DMA_IRQHandler+0x42c>)
 801ba42:	4293      	cmp	r3, r2
 801ba44:	d009      	beq.n	801ba5a <HAL_DMA_IRQHandler+0x3e2>
 801ba46:	687b      	ldr	r3, [r7, #4]
 801ba48:	681b      	ldr	r3, [r3, #0]
 801ba4a:	4a17      	ldr	r2, [pc, #92]	@ (801baa8 <HAL_DMA_IRQHandler+0x430>)
 801ba4c:	4293      	cmp	r3, r2
 801ba4e:	d004      	beq.n	801ba5a <HAL_DMA_IRQHandler+0x3e2>
 801ba50:	687b      	ldr	r3, [r7, #4]
 801ba52:	681b      	ldr	r3, [r3, #0]
 801ba54:	4a15      	ldr	r2, [pc, #84]	@ (801baac <HAL_DMA_IRQHandler+0x434>)
 801ba56:	4293      	cmp	r3, r2
 801ba58:	d12a      	bne.n	801bab0 <HAL_DMA_IRQHandler+0x438>
 801ba5a:	687b      	ldr	r3, [r7, #4]
 801ba5c:	681b      	ldr	r3, [r3, #0]
 801ba5e:	681b      	ldr	r3, [r3, #0]
 801ba60:	f003 0302 	and.w	r3, r3, #2
 801ba64:	2b00      	cmp	r3, #0
 801ba66:	bf14      	ite	ne
 801ba68:	2301      	movne	r3, #1
 801ba6a:	2300      	moveq	r3, #0
 801ba6c:	b2db      	uxtb	r3, r3
 801ba6e:	e023      	b.n	801bab8 <HAL_DMA_IRQHandler+0x440>
 801ba70:	40020010 	.word	0x40020010
 801ba74:	40020028 	.word	0x40020028
 801ba78:	40020040 	.word	0x40020040
 801ba7c:	40020058 	.word	0x40020058
 801ba80:	40020070 	.word	0x40020070
 801ba84:	40020088 	.word	0x40020088
 801ba88:	400200a0 	.word	0x400200a0
 801ba8c:	400200b8 	.word	0x400200b8
 801ba90:	40020410 	.word	0x40020410
 801ba94:	40020428 	.word	0x40020428
 801ba98:	40020440 	.word	0x40020440
 801ba9c:	40020458 	.word	0x40020458
 801baa0:	40020470 	.word	0x40020470
 801baa4:	40020488 	.word	0x40020488
 801baa8:	400204a0 	.word	0x400204a0
 801baac:	400204b8 	.word	0x400204b8
 801bab0:	687b      	ldr	r3, [r7, #4]
 801bab2:	681b      	ldr	r3, [r3, #0]
 801bab4:	681b      	ldr	r3, [r3, #0]
 801bab6:	2300      	movs	r3, #0
 801bab8:	2b00      	cmp	r3, #0
 801baba:	d00d      	beq.n	801bad8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801babc:	687b      	ldr	r3, [r7, #4]
 801babe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bac0:	f003 031f 	and.w	r3, r3, #31
 801bac4:	2204      	movs	r2, #4
 801bac6:	409a      	lsls	r2, r3
 801bac8:	6a3b      	ldr	r3, [r7, #32]
 801baca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801bacc:	687b      	ldr	r3, [r7, #4]
 801bace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801bad0:	f043 0204 	orr.w	r2, r3, #4
 801bad4:	687b      	ldr	r3, [r7, #4]
 801bad6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801bad8:	687b      	ldr	r3, [r7, #4]
 801bada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801badc:	f003 031f 	and.w	r3, r3, #31
 801bae0:	2210      	movs	r2, #16
 801bae2:	409a      	lsls	r2, r3
 801bae4:	69bb      	ldr	r3, [r7, #24]
 801bae6:	4013      	ands	r3, r2
 801bae8:	2b00      	cmp	r3, #0
 801baea:	f000 80a6 	beq.w	801bc3a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 801baee:	687b      	ldr	r3, [r7, #4]
 801baf0:	681b      	ldr	r3, [r3, #0]
 801baf2:	4a85      	ldr	r2, [pc, #532]	@ (801bd08 <HAL_DMA_IRQHandler+0x690>)
 801baf4:	4293      	cmp	r3, r2
 801baf6:	d04a      	beq.n	801bb8e <HAL_DMA_IRQHandler+0x516>
 801baf8:	687b      	ldr	r3, [r7, #4]
 801bafa:	681b      	ldr	r3, [r3, #0]
 801bafc:	4a83      	ldr	r2, [pc, #524]	@ (801bd0c <HAL_DMA_IRQHandler+0x694>)
 801bafe:	4293      	cmp	r3, r2
 801bb00:	d045      	beq.n	801bb8e <HAL_DMA_IRQHandler+0x516>
 801bb02:	687b      	ldr	r3, [r7, #4]
 801bb04:	681b      	ldr	r3, [r3, #0]
 801bb06:	4a82      	ldr	r2, [pc, #520]	@ (801bd10 <HAL_DMA_IRQHandler+0x698>)
 801bb08:	4293      	cmp	r3, r2
 801bb0a:	d040      	beq.n	801bb8e <HAL_DMA_IRQHandler+0x516>
 801bb0c:	687b      	ldr	r3, [r7, #4]
 801bb0e:	681b      	ldr	r3, [r3, #0]
 801bb10:	4a80      	ldr	r2, [pc, #512]	@ (801bd14 <HAL_DMA_IRQHandler+0x69c>)
 801bb12:	4293      	cmp	r3, r2
 801bb14:	d03b      	beq.n	801bb8e <HAL_DMA_IRQHandler+0x516>
 801bb16:	687b      	ldr	r3, [r7, #4]
 801bb18:	681b      	ldr	r3, [r3, #0]
 801bb1a:	4a7f      	ldr	r2, [pc, #508]	@ (801bd18 <HAL_DMA_IRQHandler+0x6a0>)
 801bb1c:	4293      	cmp	r3, r2
 801bb1e:	d036      	beq.n	801bb8e <HAL_DMA_IRQHandler+0x516>
 801bb20:	687b      	ldr	r3, [r7, #4]
 801bb22:	681b      	ldr	r3, [r3, #0]
 801bb24:	4a7d      	ldr	r2, [pc, #500]	@ (801bd1c <HAL_DMA_IRQHandler+0x6a4>)
 801bb26:	4293      	cmp	r3, r2
 801bb28:	d031      	beq.n	801bb8e <HAL_DMA_IRQHandler+0x516>
 801bb2a:	687b      	ldr	r3, [r7, #4]
 801bb2c:	681b      	ldr	r3, [r3, #0]
 801bb2e:	4a7c      	ldr	r2, [pc, #496]	@ (801bd20 <HAL_DMA_IRQHandler+0x6a8>)
 801bb30:	4293      	cmp	r3, r2
 801bb32:	d02c      	beq.n	801bb8e <HAL_DMA_IRQHandler+0x516>
 801bb34:	687b      	ldr	r3, [r7, #4]
 801bb36:	681b      	ldr	r3, [r3, #0]
 801bb38:	4a7a      	ldr	r2, [pc, #488]	@ (801bd24 <HAL_DMA_IRQHandler+0x6ac>)
 801bb3a:	4293      	cmp	r3, r2
 801bb3c:	d027      	beq.n	801bb8e <HAL_DMA_IRQHandler+0x516>
 801bb3e:	687b      	ldr	r3, [r7, #4]
 801bb40:	681b      	ldr	r3, [r3, #0]
 801bb42:	4a79      	ldr	r2, [pc, #484]	@ (801bd28 <HAL_DMA_IRQHandler+0x6b0>)
 801bb44:	4293      	cmp	r3, r2
 801bb46:	d022      	beq.n	801bb8e <HAL_DMA_IRQHandler+0x516>
 801bb48:	687b      	ldr	r3, [r7, #4]
 801bb4a:	681b      	ldr	r3, [r3, #0]
 801bb4c:	4a77      	ldr	r2, [pc, #476]	@ (801bd2c <HAL_DMA_IRQHandler+0x6b4>)
 801bb4e:	4293      	cmp	r3, r2
 801bb50:	d01d      	beq.n	801bb8e <HAL_DMA_IRQHandler+0x516>
 801bb52:	687b      	ldr	r3, [r7, #4]
 801bb54:	681b      	ldr	r3, [r3, #0]
 801bb56:	4a76      	ldr	r2, [pc, #472]	@ (801bd30 <HAL_DMA_IRQHandler+0x6b8>)
 801bb58:	4293      	cmp	r3, r2
 801bb5a:	d018      	beq.n	801bb8e <HAL_DMA_IRQHandler+0x516>
 801bb5c:	687b      	ldr	r3, [r7, #4]
 801bb5e:	681b      	ldr	r3, [r3, #0]
 801bb60:	4a74      	ldr	r2, [pc, #464]	@ (801bd34 <HAL_DMA_IRQHandler+0x6bc>)
 801bb62:	4293      	cmp	r3, r2
 801bb64:	d013      	beq.n	801bb8e <HAL_DMA_IRQHandler+0x516>
 801bb66:	687b      	ldr	r3, [r7, #4]
 801bb68:	681b      	ldr	r3, [r3, #0]
 801bb6a:	4a73      	ldr	r2, [pc, #460]	@ (801bd38 <HAL_DMA_IRQHandler+0x6c0>)
 801bb6c:	4293      	cmp	r3, r2
 801bb6e:	d00e      	beq.n	801bb8e <HAL_DMA_IRQHandler+0x516>
 801bb70:	687b      	ldr	r3, [r7, #4]
 801bb72:	681b      	ldr	r3, [r3, #0]
 801bb74:	4a71      	ldr	r2, [pc, #452]	@ (801bd3c <HAL_DMA_IRQHandler+0x6c4>)
 801bb76:	4293      	cmp	r3, r2
 801bb78:	d009      	beq.n	801bb8e <HAL_DMA_IRQHandler+0x516>
 801bb7a:	687b      	ldr	r3, [r7, #4]
 801bb7c:	681b      	ldr	r3, [r3, #0]
 801bb7e:	4a70      	ldr	r2, [pc, #448]	@ (801bd40 <HAL_DMA_IRQHandler+0x6c8>)
 801bb80:	4293      	cmp	r3, r2
 801bb82:	d004      	beq.n	801bb8e <HAL_DMA_IRQHandler+0x516>
 801bb84:	687b      	ldr	r3, [r7, #4]
 801bb86:	681b      	ldr	r3, [r3, #0]
 801bb88:	4a6e      	ldr	r2, [pc, #440]	@ (801bd44 <HAL_DMA_IRQHandler+0x6cc>)
 801bb8a:	4293      	cmp	r3, r2
 801bb8c:	d10a      	bne.n	801bba4 <HAL_DMA_IRQHandler+0x52c>
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	681b      	ldr	r3, [r3, #0]
 801bb92:	681b      	ldr	r3, [r3, #0]
 801bb94:	f003 0308 	and.w	r3, r3, #8
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	bf14      	ite	ne
 801bb9c:	2301      	movne	r3, #1
 801bb9e:	2300      	moveq	r3, #0
 801bba0:	b2db      	uxtb	r3, r3
 801bba2:	e009      	b.n	801bbb8 <HAL_DMA_IRQHandler+0x540>
 801bba4:	687b      	ldr	r3, [r7, #4]
 801bba6:	681b      	ldr	r3, [r3, #0]
 801bba8:	681b      	ldr	r3, [r3, #0]
 801bbaa:	f003 0304 	and.w	r3, r3, #4
 801bbae:	2b00      	cmp	r3, #0
 801bbb0:	bf14      	ite	ne
 801bbb2:	2301      	movne	r3, #1
 801bbb4:	2300      	moveq	r3, #0
 801bbb6:	b2db      	uxtb	r3, r3
 801bbb8:	2b00      	cmp	r3, #0
 801bbba:	d03e      	beq.n	801bc3a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 801bbbc:	687b      	ldr	r3, [r7, #4]
 801bbbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bbc0:	f003 031f 	and.w	r3, r3, #31
 801bbc4:	2210      	movs	r2, #16
 801bbc6:	409a      	lsls	r2, r3
 801bbc8:	6a3b      	ldr	r3, [r7, #32]
 801bbca:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801bbcc:	687b      	ldr	r3, [r7, #4]
 801bbce:	681b      	ldr	r3, [r3, #0]
 801bbd0:	681b      	ldr	r3, [r3, #0]
 801bbd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801bbd6:	2b00      	cmp	r3, #0
 801bbd8:	d018      	beq.n	801bc0c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801bbda:	687b      	ldr	r3, [r7, #4]
 801bbdc:	681b      	ldr	r3, [r3, #0]
 801bbde:	681b      	ldr	r3, [r3, #0]
 801bbe0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801bbe4:	2b00      	cmp	r3, #0
 801bbe6:	d108      	bne.n	801bbfa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 801bbe8:	687b      	ldr	r3, [r7, #4]
 801bbea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bbec:	2b00      	cmp	r3, #0
 801bbee:	d024      	beq.n	801bc3a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 801bbf0:	687b      	ldr	r3, [r7, #4]
 801bbf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bbf4:	6878      	ldr	r0, [r7, #4]
 801bbf6:	4798      	blx	r3
 801bbf8:	e01f      	b.n	801bc3a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 801bbfa:	687b      	ldr	r3, [r7, #4]
 801bbfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bbfe:	2b00      	cmp	r3, #0
 801bc00:	d01b      	beq.n	801bc3a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 801bc02:	687b      	ldr	r3, [r7, #4]
 801bc04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bc06:	6878      	ldr	r0, [r7, #4]
 801bc08:	4798      	blx	r3
 801bc0a:	e016      	b.n	801bc3a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801bc0c:	687b      	ldr	r3, [r7, #4]
 801bc0e:	681b      	ldr	r3, [r3, #0]
 801bc10:	681b      	ldr	r3, [r3, #0]
 801bc12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bc16:	2b00      	cmp	r3, #0
 801bc18:	d107      	bne.n	801bc2a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801bc1a:	687b      	ldr	r3, [r7, #4]
 801bc1c:	681b      	ldr	r3, [r3, #0]
 801bc1e:	681a      	ldr	r2, [r3, #0]
 801bc20:	687b      	ldr	r3, [r7, #4]
 801bc22:	681b      	ldr	r3, [r3, #0]
 801bc24:	f022 0208 	bic.w	r2, r2, #8
 801bc28:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 801bc2a:	687b      	ldr	r3, [r7, #4]
 801bc2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bc2e:	2b00      	cmp	r3, #0
 801bc30:	d003      	beq.n	801bc3a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801bc32:	687b      	ldr	r3, [r7, #4]
 801bc34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bc36:	6878      	ldr	r0, [r7, #4]
 801bc38:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bc3e:	f003 031f 	and.w	r3, r3, #31
 801bc42:	2220      	movs	r2, #32
 801bc44:	409a      	lsls	r2, r3
 801bc46:	69bb      	ldr	r3, [r7, #24]
 801bc48:	4013      	ands	r3, r2
 801bc4a:	2b00      	cmp	r3, #0
 801bc4c:	f000 8110 	beq.w	801be70 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 801bc50:	687b      	ldr	r3, [r7, #4]
 801bc52:	681b      	ldr	r3, [r3, #0]
 801bc54:	4a2c      	ldr	r2, [pc, #176]	@ (801bd08 <HAL_DMA_IRQHandler+0x690>)
 801bc56:	4293      	cmp	r3, r2
 801bc58:	d04a      	beq.n	801bcf0 <HAL_DMA_IRQHandler+0x678>
 801bc5a:	687b      	ldr	r3, [r7, #4]
 801bc5c:	681b      	ldr	r3, [r3, #0]
 801bc5e:	4a2b      	ldr	r2, [pc, #172]	@ (801bd0c <HAL_DMA_IRQHandler+0x694>)
 801bc60:	4293      	cmp	r3, r2
 801bc62:	d045      	beq.n	801bcf0 <HAL_DMA_IRQHandler+0x678>
 801bc64:	687b      	ldr	r3, [r7, #4]
 801bc66:	681b      	ldr	r3, [r3, #0]
 801bc68:	4a29      	ldr	r2, [pc, #164]	@ (801bd10 <HAL_DMA_IRQHandler+0x698>)
 801bc6a:	4293      	cmp	r3, r2
 801bc6c:	d040      	beq.n	801bcf0 <HAL_DMA_IRQHandler+0x678>
 801bc6e:	687b      	ldr	r3, [r7, #4]
 801bc70:	681b      	ldr	r3, [r3, #0]
 801bc72:	4a28      	ldr	r2, [pc, #160]	@ (801bd14 <HAL_DMA_IRQHandler+0x69c>)
 801bc74:	4293      	cmp	r3, r2
 801bc76:	d03b      	beq.n	801bcf0 <HAL_DMA_IRQHandler+0x678>
 801bc78:	687b      	ldr	r3, [r7, #4]
 801bc7a:	681b      	ldr	r3, [r3, #0]
 801bc7c:	4a26      	ldr	r2, [pc, #152]	@ (801bd18 <HAL_DMA_IRQHandler+0x6a0>)
 801bc7e:	4293      	cmp	r3, r2
 801bc80:	d036      	beq.n	801bcf0 <HAL_DMA_IRQHandler+0x678>
 801bc82:	687b      	ldr	r3, [r7, #4]
 801bc84:	681b      	ldr	r3, [r3, #0]
 801bc86:	4a25      	ldr	r2, [pc, #148]	@ (801bd1c <HAL_DMA_IRQHandler+0x6a4>)
 801bc88:	4293      	cmp	r3, r2
 801bc8a:	d031      	beq.n	801bcf0 <HAL_DMA_IRQHandler+0x678>
 801bc8c:	687b      	ldr	r3, [r7, #4]
 801bc8e:	681b      	ldr	r3, [r3, #0]
 801bc90:	4a23      	ldr	r2, [pc, #140]	@ (801bd20 <HAL_DMA_IRQHandler+0x6a8>)
 801bc92:	4293      	cmp	r3, r2
 801bc94:	d02c      	beq.n	801bcf0 <HAL_DMA_IRQHandler+0x678>
 801bc96:	687b      	ldr	r3, [r7, #4]
 801bc98:	681b      	ldr	r3, [r3, #0]
 801bc9a:	4a22      	ldr	r2, [pc, #136]	@ (801bd24 <HAL_DMA_IRQHandler+0x6ac>)
 801bc9c:	4293      	cmp	r3, r2
 801bc9e:	d027      	beq.n	801bcf0 <HAL_DMA_IRQHandler+0x678>
 801bca0:	687b      	ldr	r3, [r7, #4]
 801bca2:	681b      	ldr	r3, [r3, #0]
 801bca4:	4a20      	ldr	r2, [pc, #128]	@ (801bd28 <HAL_DMA_IRQHandler+0x6b0>)
 801bca6:	4293      	cmp	r3, r2
 801bca8:	d022      	beq.n	801bcf0 <HAL_DMA_IRQHandler+0x678>
 801bcaa:	687b      	ldr	r3, [r7, #4]
 801bcac:	681b      	ldr	r3, [r3, #0]
 801bcae:	4a1f      	ldr	r2, [pc, #124]	@ (801bd2c <HAL_DMA_IRQHandler+0x6b4>)
 801bcb0:	4293      	cmp	r3, r2
 801bcb2:	d01d      	beq.n	801bcf0 <HAL_DMA_IRQHandler+0x678>
 801bcb4:	687b      	ldr	r3, [r7, #4]
 801bcb6:	681b      	ldr	r3, [r3, #0]
 801bcb8:	4a1d      	ldr	r2, [pc, #116]	@ (801bd30 <HAL_DMA_IRQHandler+0x6b8>)
 801bcba:	4293      	cmp	r3, r2
 801bcbc:	d018      	beq.n	801bcf0 <HAL_DMA_IRQHandler+0x678>
 801bcbe:	687b      	ldr	r3, [r7, #4]
 801bcc0:	681b      	ldr	r3, [r3, #0]
 801bcc2:	4a1c      	ldr	r2, [pc, #112]	@ (801bd34 <HAL_DMA_IRQHandler+0x6bc>)
 801bcc4:	4293      	cmp	r3, r2
 801bcc6:	d013      	beq.n	801bcf0 <HAL_DMA_IRQHandler+0x678>
 801bcc8:	687b      	ldr	r3, [r7, #4]
 801bcca:	681b      	ldr	r3, [r3, #0]
 801bccc:	4a1a      	ldr	r2, [pc, #104]	@ (801bd38 <HAL_DMA_IRQHandler+0x6c0>)
 801bcce:	4293      	cmp	r3, r2
 801bcd0:	d00e      	beq.n	801bcf0 <HAL_DMA_IRQHandler+0x678>
 801bcd2:	687b      	ldr	r3, [r7, #4]
 801bcd4:	681b      	ldr	r3, [r3, #0]
 801bcd6:	4a19      	ldr	r2, [pc, #100]	@ (801bd3c <HAL_DMA_IRQHandler+0x6c4>)
 801bcd8:	4293      	cmp	r3, r2
 801bcda:	d009      	beq.n	801bcf0 <HAL_DMA_IRQHandler+0x678>
 801bcdc:	687b      	ldr	r3, [r7, #4]
 801bcde:	681b      	ldr	r3, [r3, #0]
 801bce0:	4a17      	ldr	r2, [pc, #92]	@ (801bd40 <HAL_DMA_IRQHandler+0x6c8>)
 801bce2:	4293      	cmp	r3, r2
 801bce4:	d004      	beq.n	801bcf0 <HAL_DMA_IRQHandler+0x678>
 801bce6:	687b      	ldr	r3, [r7, #4]
 801bce8:	681b      	ldr	r3, [r3, #0]
 801bcea:	4a16      	ldr	r2, [pc, #88]	@ (801bd44 <HAL_DMA_IRQHandler+0x6cc>)
 801bcec:	4293      	cmp	r3, r2
 801bcee:	d12b      	bne.n	801bd48 <HAL_DMA_IRQHandler+0x6d0>
 801bcf0:	687b      	ldr	r3, [r7, #4]
 801bcf2:	681b      	ldr	r3, [r3, #0]
 801bcf4:	681b      	ldr	r3, [r3, #0]
 801bcf6:	f003 0310 	and.w	r3, r3, #16
 801bcfa:	2b00      	cmp	r3, #0
 801bcfc:	bf14      	ite	ne
 801bcfe:	2301      	movne	r3, #1
 801bd00:	2300      	moveq	r3, #0
 801bd02:	b2db      	uxtb	r3, r3
 801bd04:	e02a      	b.n	801bd5c <HAL_DMA_IRQHandler+0x6e4>
 801bd06:	bf00      	nop
 801bd08:	40020010 	.word	0x40020010
 801bd0c:	40020028 	.word	0x40020028
 801bd10:	40020040 	.word	0x40020040
 801bd14:	40020058 	.word	0x40020058
 801bd18:	40020070 	.word	0x40020070
 801bd1c:	40020088 	.word	0x40020088
 801bd20:	400200a0 	.word	0x400200a0
 801bd24:	400200b8 	.word	0x400200b8
 801bd28:	40020410 	.word	0x40020410
 801bd2c:	40020428 	.word	0x40020428
 801bd30:	40020440 	.word	0x40020440
 801bd34:	40020458 	.word	0x40020458
 801bd38:	40020470 	.word	0x40020470
 801bd3c:	40020488 	.word	0x40020488
 801bd40:	400204a0 	.word	0x400204a0
 801bd44:	400204b8 	.word	0x400204b8
 801bd48:	687b      	ldr	r3, [r7, #4]
 801bd4a:	681b      	ldr	r3, [r3, #0]
 801bd4c:	681b      	ldr	r3, [r3, #0]
 801bd4e:	f003 0302 	and.w	r3, r3, #2
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	bf14      	ite	ne
 801bd56:	2301      	movne	r3, #1
 801bd58:	2300      	moveq	r3, #0
 801bd5a:	b2db      	uxtb	r3, r3
 801bd5c:	2b00      	cmp	r3, #0
 801bd5e:	f000 8087 	beq.w	801be70 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 801bd62:	687b      	ldr	r3, [r7, #4]
 801bd64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bd66:	f003 031f 	and.w	r3, r3, #31
 801bd6a:	2220      	movs	r2, #32
 801bd6c:	409a      	lsls	r2, r3
 801bd6e:	6a3b      	ldr	r3, [r7, #32]
 801bd70:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 801bd72:	687b      	ldr	r3, [r7, #4]
 801bd74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801bd78:	b2db      	uxtb	r3, r3
 801bd7a:	2b04      	cmp	r3, #4
 801bd7c:	d139      	bne.n	801bdf2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801bd7e:	687b      	ldr	r3, [r7, #4]
 801bd80:	681b      	ldr	r3, [r3, #0]
 801bd82:	681a      	ldr	r2, [r3, #0]
 801bd84:	687b      	ldr	r3, [r7, #4]
 801bd86:	681b      	ldr	r3, [r3, #0]
 801bd88:	f022 0216 	bic.w	r2, r2, #22
 801bd8c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 801bd8e:	687b      	ldr	r3, [r7, #4]
 801bd90:	681b      	ldr	r3, [r3, #0]
 801bd92:	695a      	ldr	r2, [r3, #20]
 801bd94:	687b      	ldr	r3, [r7, #4]
 801bd96:	681b      	ldr	r3, [r3, #0]
 801bd98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801bd9c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801bd9e:	687b      	ldr	r3, [r7, #4]
 801bda0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bda2:	2b00      	cmp	r3, #0
 801bda4:	d103      	bne.n	801bdae <HAL_DMA_IRQHandler+0x736>
 801bda6:	687b      	ldr	r3, [r7, #4]
 801bda8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bdaa:	2b00      	cmp	r3, #0
 801bdac:	d007      	beq.n	801bdbe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801bdae:	687b      	ldr	r3, [r7, #4]
 801bdb0:	681b      	ldr	r3, [r3, #0]
 801bdb2:	681a      	ldr	r2, [r3, #0]
 801bdb4:	687b      	ldr	r3, [r7, #4]
 801bdb6:	681b      	ldr	r3, [r3, #0]
 801bdb8:	f022 0208 	bic.w	r2, r2, #8
 801bdbc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801bdbe:	687b      	ldr	r3, [r7, #4]
 801bdc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bdc2:	f003 031f 	and.w	r3, r3, #31
 801bdc6:	223f      	movs	r2, #63	@ 0x3f
 801bdc8:	409a      	lsls	r2, r3
 801bdca:	6a3b      	ldr	r3, [r7, #32]
 801bdcc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801bdce:	687b      	ldr	r3, [r7, #4]
 801bdd0:	2201      	movs	r2, #1
 801bdd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801bdd6:	687b      	ldr	r3, [r7, #4]
 801bdd8:	2200      	movs	r2, #0
 801bdda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 801bdde:	687b      	ldr	r3, [r7, #4]
 801bde0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bde2:	2b00      	cmp	r3, #0
 801bde4:	f000 834a 	beq.w	801c47c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 801bde8:	687b      	ldr	r3, [r7, #4]
 801bdea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bdec:	6878      	ldr	r0, [r7, #4]
 801bdee:	4798      	blx	r3
          }
          return;
 801bdf0:	e344      	b.n	801c47c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801bdf2:	687b      	ldr	r3, [r7, #4]
 801bdf4:	681b      	ldr	r3, [r3, #0]
 801bdf6:	681b      	ldr	r3, [r3, #0]
 801bdf8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801bdfc:	2b00      	cmp	r3, #0
 801bdfe:	d018      	beq.n	801be32 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801be00:	687b      	ldr	r3, [r7, #4]
 801be02:	681b      	ldr	r3, [r3, #0]
 801be04:	681b      	ldr	r3, [r3, #0]
 801be06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801be0a:	2b00      	cmp	r3, #0
 801be0c:	d108      	bne.n	801be20 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 801be0e:	687b      	ldr	r3, [r7, #4]
 801be10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801be12:	2b00      	cmp	r3, #0
 801be14:	d02c      	beq.n	801be70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 801be16:	687b      	ldr	r3, [r7, #4]
 801be18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801be1a:	6878      	ldr	r0, [r7, #4]
 801be1c:	4798      	blx	r3
 801be1e:	e027      	b.n	801be70 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 801be20:	687b      	ldr	r3, [r7, #4]
 801be22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801be24:	2b00      	cmp	r3, #0
 801be26:	d023      	beq.n	801be70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 801be28:	687b      	ldr	r3, [r7, #4]
 801be2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801be2c:	6878      	ldr	r0, [r7, #4]
 801be2e:	4798      	blx	r3
 801be30:	e01e      	b.n	801be70 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801be32:	687b      	ldr	r3, [r7, #4]
 801be34:	681b      	ldr	r3, [r3, #0]
 801be36:	681b      	ldr	r3, [r3, #0]
 801be38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801be3c:	2b00      	cmp	r3, #0
 801be3e:	d10f      	bne.n	801be60 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 801be40:	687b      	ldr	r3, [r7, #4]
 801be42:	681b      	ldr	r3, [r3, #0]
 801be44:	681a      	ldr	r2, [r3, #0]
 801be46:	687b      	ldr	r3, [r7, #4]
 801be48:	681b      	ldr	r3, [r3, #0]
 801be4a:	f022 0210 	bic.w	r2, r2, #16
 801be4e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 801be50:	687b      	ldr	r3, [r7, #4]
 801be52:	2201      	movs	r2, #1
 801be54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 801be58:	687b      	ldr	r3, [r7, #4]
 801be5a:	2200      	movs	r2, #0
 801be5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801be64:	2b00      	cmp	r3, #0
 801be66:	d003      	beq.n	801be70 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 801be68:	687b      	ldr	r3, [r7, #4]
 801be6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801be6c:	6878      	ldr	r0, [r7, #4]
 801be6e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801be70:	687b      	ldr	r3, [r7, #4]
 801be72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801be74:	2b00      	cmp	r3, #0
 801be76:	f000 8306 	beq.w	801c486 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801be7e:	f003 0301 	and.w	r3, r3, #1
 801be82:	2b00      	cmp	r3, #0
 801be84:	f000 8088 	beq.w	801bf98 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 801be88:	687b      	ldr	r3, [r7, #4]
 801be8a:	2204      	movs	r2, #4
 801be8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 801be90:	687b      	ldr	r3, [r7, #4]
 801be92:	681b      	ldr	r3, [r3, #0]
 801be94:	4a7a      	ldr	r2, [pc, #488]	@ (801c080 <HAL_DMA_IRQHandler+0xa08>)
 801be96:	4293      	cmp	r3, r2
 801be98:	d04a      	beq.n	801bf30 <HAL_DMA_IRQHandler+0x8b8>
 801be9a:	687b      	ldr	r3, [r7, #4]
 801be9c:	681b      	ldr	r3, [r3, #0]
 801be9e:	4a79      	ldr	r2, [pc, #484]	@ (801c084 <HAL_DMA_IRQHandler+0xa0c>)
 801bea0:	4293      	cmp	r3, r2
 801bea2:	d045      	beq.n	801bf30 <HAL_DMA_IRQHandler+0x8b8>
 801bea4:	687b      	ldr	r3, [r7, #4]
 801bea6:	681b      	ldr	r3, [r3, #0]
 801bea8:	4a77      	ldr	r2, [pc, #476]	@ (801c088 <HAL_DMA_IRQHandler+0xa10>)
 801beaa:	4293      	cmp	r3, r2
 801beac:	d040      	beq.n	801bf30 <HAL_DMA_IRQHandler+0x8b8>
 801beae:	687b      	ldr	r3, [r7, #4]
 801beb0:	681b      	ldr	r3, [r3, #0]
 801beb2:	4a76      	ldr	r2, [pc, #472]	@ (801c08c <HAL_DMA_IRQHandler+0xa14>)
 801beb4:	4293      	cmp	r3, r2
 801beb6:	d03b      	beq.n	801bf30 <HAL_DMA_IRQHandler+0x8b8>
 801beb8:	687b      	ldr	r3, [r7, #4]
 801beba:	681b      	ldr	r3, [r3, #0]
 801bebc:	4a74      	ldr	r2, [pc, #464]	@ (801c090 <HAL_DMA_IRQHandler+0xa18>)
 801bebe:	4293      	cmp	r3, r2
 801bec0:	d036      	beq.n	801bf30 <HAL_DMA_IRQHandler+0x8b8>
 801bec2:	687b      	ldr	r3, [r7, #4]
 801bec4:	681b      	ldr	r3, [r3, #0]
 801bec6:	4a73      	ldr	r2, [pc, #460]	@ (801c094 <HAL_DMA_IRQHandler+0xa1c>)
 801bec8:	4293      	cmp	r3, r2
 801beca:	d031      	beq.n	801bf30 <HAL_DMA_IRQHandler+0x8b8>
 801becc:	687b      	ldr	r3, [r7, #4]
 801bece:	681b      	ldr	r3, [r3, #0]
 801bed0:	4a71      	ldr	r2, [pc, #452]	@ (801c098 <HAL_DMA_IRQHandler+0xa20>)
 801bed2:	4293      	cmp	r3, r2
 801bed4:	d02c      	beq.n	801bf30 <HAL_DMA_IRQHandler+0x8b8>
 801bed6:	687b      	ldr	r3, [r7, #4]
 801bed8:	681b      	ldr	r3, [r3, #0]
 801beda:	4a70      	ldr	r2, [pc, #448]	@ (801c09c <HAL_DMA_IRQHandler+0xa24>)
 801bedc:	4293      	cmp	r3, r2
 801bede:	d027      	beq.n	801bf30 <HAL_DMA_IRQHandler+0x8b8>
 801bee0:	687b      	ldr	r3, [r7, #4]
 801bee2:	681b      	ldr	r3, [r3, #0]
 801bee4:	4a6e      	ldr	r2, [pc, #440]	@ (801c0a0 <HAL_DMA_IRQHandler+0xa28>)
 801bee6:	4293      	cmp	r3, r2
 801bee8:	d022      	beq.n	801bf30 <HAL_DMA_IRQHandler+0x8b8>
 801beea:	687b      	ldr	r3, [r7, #4]
 801beec:	681b      	ldr	r3, [r3, #0]
 801beee:	4a6d      	ldr	r2, [pc, #436]	@ (801c0a4 <HAL_DMA_IRQHandler+0xa2c>)
 801bef0:	4293      	cmp	r3, r2
 801bef2:	d01d      	beq.n	801bf30 <HAL_DMA_IRQHandler+0x8b8>
 801bef4:	687b      	ldr	r3, [r7, #4]
 801bef6:	681b      	ldr	r3, [r3, #0]
 801bef8:	4a6b      	ldr	r2, [pc, #428]	@ (801c0a8 <HAL_DMA_IRQHandler+0xa30>)
 801befa:	4293      	cmp	r3, r2
 801befc:	d018      	beq.n	801bf30 <HAL_DMA_IRQHandler+0x8b8>
 801befe:	687b      	ldr	r3, [r7, #4]
 801bf00:	681b      	ldr	r3, [r3, #0]
 801bf02:	4a6a      	ldr	r2, [pc, #424]	@ (801c0ac <HAL_DMA_IRQHandler+0xa34>)
 801bf04:	4293      	cmp	r3, r2
 801bf06:	d013      	beq.n	801bf30 <HAL_DMA_IRQHandler+0x8b8>
 801bf08:	687b      	ldr	r3, [r7, #4]
 801bf0a:	681b      	ldr	r3, [r3, #0]
 801bf0c:	4a68      	ldr	r2, [pc, #416]	@ (801c0b0 <HAL_DMA_IRQHandler+0xa38>)
 801bf0e:	4293      	cmp	r3, r2
 801bf10:	d00e      	beq.n	801bf30 <HAL_DMA_IRQHandler+0x8b8>
 801bf12:	687b      	ldr	r3, [r7, #4]
 801bf14:	681b      	ldr	r3, [r3, #0]
 801bf16:	4a67      	ldr	r2, [pc, #412]	@ (801c0b4 <HAL_DMA_IRQHandler+0xa3c>)
 801bf18:	4293      	cmp	r3, r2
 801bf1a:	d009      	beq.n	801bf30 <HAL_DMA_IRQHandler+0x8b8>
 801bf1c:	687b      	ldr	r3, [r7, #4]
 801bf1e:	681b      	ldr	r3, [r3, #0]
 801bf20:	4a65      	ldr	r2, [pc, #404]	@ (801c0b8 <HAL_DMA_IRQHandler+0xa40>)
 801bf22:	4293      	cmp	r3, r2
 801bf24:	d004      	beq.n	801bf30 <HAL_DMA_IRQHandler+0x8b8>
 801bf26:	687b      	ldr	r3, [r7, #4]
 801bf28:	681b      	ldr	r3, [r3, #0]
 801bf2a:	4a64      	ldr	r2, [pc, #400]	@ (801c0bc <HAL_DMA_IRQHandler+0xa44>)
 801bf2c:	4293      	cmp	r3, r2
 801bf2e:	d108      	bne.n	801bf42 <HAL_DMA_IRQHandler+0x8ca>
 801bf30:	687b      	ldr	r3, [r7, #4]
 801bf32:	681b      	ldr	r3, [r3, #0]
 801bf34:	681a      	ldr	r2, [r3, #0]
 801bf36:	687b      	ldr	r3, [r7, #4]
 801bf38:	681b      	ldr	r3, [r3, #0]
 801bf3a:	f022 0201 	bic.w	r2, r2, #1
 801bf3e:	601a      	str	r2, [r3, #0]
 801bf40:	e007      	b.n	801bf52 <HAL_DMA_IRQHandler+0x8da>
 801bf42:	687b      	ldr	r3, [r7, #4]
 801bf44:	681b      	ldr	r3, [r3, #0]
 801bf46:	681a      	ldr	r2, [r3, #0]
 801bf48:	687b      	ldr	r3, [r7, #4]
 801bf4a:	681b      	ldr	r3, [r3, #0]
 801bf4c:	f022 0201 	bic.w	r2, r2, #1
 801bf50:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 801bf52:	68fb      	ldr	r3, [r7, #12]
 801bf54:	3301      	adds	r3, #1
 801bf56:	60fb      	str	r3, [r7, #12]
 801bf58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bf5a:	429a      	cmp	r2, r3
 801bf5c:	d307      	bcc.n	801bf6e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 801bf5e:	687b      	ldr	r3, [r7, #4]
 801bf60:	681b      	ldr	r3, [r3, #0]
 801bf62:	681b      	ldr	r3, [r3, #0]
 801bf64:	f003 0301 	and.w	r3, r3, #1
 801bf68:	2b00      	cmp	r3, #0
 801bf6a:	d1f2      	bne.n	801bf52 <HAL_DMA_IRQHandler+0x8da>
 801bf6c:	e000      	b.n	801bf70 <HAL_DMA_IRQHandler+0x8f8>
            break;
 801bf6e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801bf70:	687b      	ldr	r3, [r7, #4]
 801bf72:	681b      	ldr	r3, [r3, #0]
 801bf74:	681b      	ldr	r3, [r3, #0]
 801bf76:	f003 0301 	and.w	r3, r3, #1
 801bf7a:	2b00      	cmp	r3, #0
 801bf7c:	d004      	beq.n	801bf88 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 801bf7e:	687b      	ldr	r3, [r7, #4]
 801bf80:	2203      	movs	r2, #3
 801bf82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 801bf86:	e003      	b.n	801bf90 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 801bf88:	687b      	ldr	r3, [r7, #4]
 801bf8a:	2201      	movs	r2, #1
 801bf8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801bf90:	687b      	ldr	r3, [r7, #4]
 801bf92:	2200      	movs	r2, #0
 801bf94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 801bf98:	687b      	ldr	r3, [r7, #4]
 801bf9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	f000 8272 	beq.w	801c486 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bfa6:	6878      	ldr	r0, [r7, #4]
 801bfa8:	4798      	blx	r3
 801bfaa:	e26c      	b.n	801c486 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 801bfac:	687b      	ldr	r3, [r7, #4]
 801bfae:	681b      	ldr	r3, [r3, #0]
 801bfb0:	4a43      	ldr	r2, [pc, #268]	@ (801c0c0 <HAL_DMA_IRQHandler+0xa48>)
 801bfb2:	4293      	cmp	r3, r2
 801bfb4:	d022      	beq.n	801bffc <HAL_DMA_IRQHandler+0x984>
 801bfb6:	687b      	ldr	r3, [r7, #4]
 801bfb8:	681b      	ldr	r3, [r3, #0]
 801bfba:	4a42      	ldr	r2, [pc, #264]	@ (801c0c4 <HAL_DMA_IRQHandler+0xa4c>)
 801bfbc:	4293      	cmp	r3, r2
 801bfbe:	d01d      	beq.n	801bffc <HAL_DMA_IRQHandler+0x984>
 801bfc0:	687b      	ldr	r3, [r7, #4]
 801bfc2:	681b      	ldr	r3, [r3, #0]
 801bfc4:	4a40      	ldr	r2, [pc, #256]	@ (801c0c8 <HAL_DMA_IRQHandler+0xa50>)
 801bfc6:	4293      	cmp	r3, r2
 801bfc8:	d018      	beq.n	801bffc <HAL_DMA_IRQHandler+0x984>
 801bfca:	687b      	ldr	r3, [r7, #4]
 801bfcc:	681b      	ldr	r3, [r3, #0]
 801bfce:	4a3f      	ldr	r2, [pc, #252]	@ (801c0cc <HAL_DMA_IRQHandler+0xa54>)
 801bfd0:	4293      	cmp	r3, r2
 801bfd2:	d013      	beq.n	801bffc <HAL_DMA_IRQHandler+0x984>
 801bfd4:	687b      	ldr	r3, [r7, #4]
 801bfd6:	681b      	ldr	r3, [r3, #0]
 801bfd8:	4a3d      	ldr	r2, [pc, #244]	@ (801c0d0 <HAL_DMA_IRQHandler+0xa58>)
 801bfda:	4293      	cmp	r3, r2
 801bfdc:	d00e      	beq.n	801bffc <HAL_DMA_IRQHandler+0x984>
 801bfde:	687b      	ldr	r3, [r7, #4]
 801bfe0:	681b      	ldr	r3, [r3, #0]
 801bfe2:	4a3c      	ldr	r2, [pc, #240]	@ (801c0d4 <HAL_DMA_IRQHandler+0xa5c>)
 801bfe4:	4293      	cmp	r3, r2
 801bfe6:	d009      	beq.n	801bffc <HAL_DMA_IRQHandler+0x984>
 801bfe8:	687b      	ldr	r3, [r7, #4]
 801bfea:	681b      	ldr	r3, [r3, #0]
 801bfec:	4a3a      	ldr	r2, [pc, #232]	@ (801c0d8 <HAL_DMA_IRQHandler+0xa60>)
 801bfee:	4293      	cmp	r3, r2
 801bff0:	d004      	beq.n	801bffc <HAL_DMA_IRQHandler+0x984>
 801bff2:	687b      	ldr	r3, [r7, #4]
 801bff4:	681b      	ldr	r3, [r3, #0]
 801bff6:	4a39      	ldr	r2, [pc, #228]	@ (801c0dc <HAL_DMA_IRQHandler+0xa64>)
 801bff8:	4293      	cmp	r3, r2
 801bffa:	d101      	bne.n	801c000 <HAL_DMA_IRQHandler+0x988>
 801bffc:	2301      	movs	r3, #1
 801bffe:	e000      	b.n	801c002 <HAL_DMA_IRQHandler+0x98a>
 801c000:	2300      	movs	r3, #0
 801c002:	2b00      	cmp	r3, #0
 801c004:	f000 823f 	beq.w	801c486 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 801c008:	687b      	ldr	r3, [r7, #4]
 801c00a:	681b      	ldr	r3, [r3, #0]
 801c00c:	681b      	ldr	r3, [r3, #0]
 801c00e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 801c010:	687b      	ldr	r3, [r7, #4]
 801c012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c014:	f003 031f 	and.w	r3, r3, #31
 801c018:	2204      	movs	r2, #4
 801c01a:	409a      	lsls	r2, r3
 801c01c:	697b      	ldr	r3, [r7, #20]
 801c01e:	4013      	ands	r3, r2
 801c020:	2b00      	cmp	r3, #0
 801c022:	f000 80cd 	beq.w	801c1c0 <HAL_DMA_IRQHandler+0xb48>
 801c026:	693b      	ldr	r3, [r7, #16]
 801c028:	f003 0304 	and.w	r3, r3, #4
 801c02c:	2b00      	cmp	r3, #0
 801c02e:	f000 80c7 	beq.w	801c1c0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 801c032:	687b      	ldr	r3, [r7, #4]
 801c034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c036:	f003 031f 	and.w	r3, r3, #31
 801c03a:	2204      	movs	r2, #4
 801c03c:	409a      	lsls	r2, r3
 801c03e:	69fb      	ldr	r3, [r7, #28]
 801c040:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c042:	693b      	ldr	r3, [r7, #16]
 801c044:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801c048:	2b00      	cmp	r3, #0
 801c04a:	d049      	beq.n	801c0e0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801c04c:	693b      	ldr	r3, [r7, #16]
 801c04e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c052:	2b00      	cmp	r3, #0
 801c054:	d109      	bne.n	801c06a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801c056:	687b      	ldr	r3, [r7, #4]
 801c058:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c05a:	2b00      	cmp	r3, #0
 801c05c:	f000 8210 	beq.w	801c480 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 801c060:	687b      	ldr	r3, [r7, #4]
 801c062:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c064:	6878      	ldr	r0, [r7, #4]
 801c066:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c068:	e20a      	b.n	801c480 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801c06a:	687b      	ldr	r3, [r7, #4]
 801c06c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c06e:	2b00      	cmp	r3, #0
 801c070:	f000 8206 	beq.w	801c480 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 801c074:	687b      	ldr	r3, [r7, #4]
 801c076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c078:	6878      	ldr	r0, [r7, #4]
 801c07a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c07c:	e200      	b.n	801c480 <HAL_DMA_IRQHandler+0xe08>
 801c07e:	bf00      	nop
 801c080:	40020010 	.word	0x40020010
 801c084:	40020028 	.word	0x40020028
 801c088:	40020040 	.word	0x40020040
 801c08c:	40020058 	.word	0x40020058
 801c090:	40020070 	.word	0x40020070
 801c094:	40020088 	.word	0x40020088
 801c098:	400200a0 	.word	0x400200a0
 801c09c:	400200b8 	.word	0x400200b8
 801c0a0:	40020410 	.word	0x40020410
 801c0a4:	40020428 	.word	0x40020428
 801c0a8:	40020440 	.word	0x40020440
 801c0ac:	40020458 	.word	0x40020458
 801c0b0:	40020470 	.word	0x40020470
 801c0b4:	40020488 	.word	0x40020488
 801c0b8:	400204a0 	.word	0x400204a0
 801c0bc:	400204b8 	.word	0x400204b8
 801c0c0:	58025408 	.word	0x58025408
 801c0c4:	5802541c 	.word	0x5802541c
 801c0c8:	58025430 	.word	0x58025430
 801c0cc:	58025444 	.word	0x58025444
 801c0d0:	58025458 	.word	0x58025458
 801c0d4:	5802546c 	.word	0x5802546c
 801c0d8:	58025480 	.word	0x58025480
 801c0dc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801c0e0:	693b      	ldr	r3, [r7, #16]
 801c0e2:	f003 0320 	and.w	r3, r3, #32
 801c0e6:	2b00      	cmp	r3, #0
 801c0e8:	d160      	bne.n	801c1ac <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801c0ea:	687b      	ldr	r3, [r7, #4]
 801c0ec:	681b      	ldr	r3, [r3, #0]
 801c0ee:	4a7f      	ldr	r2, [pc, #508]	@ (801c2ec <HAL_DMA_IRQHandler+0xc74>)
 801c0f0:	4293      	cmp	r3, r2
 801c0f2:	d04a      	beq.n	801c18a <HAL_DMA_IRQHandler+0xb12>
 801c0f4:	687b      	ldr	r3, [r7, #4]
 801c0f6:	681b      	ldr	r3, [r3, #0]
 801c0f8:	4a7d      	ldr	r2, [pc, #500]	@ (801c2f0 <HAL_DMA_IRQHandler+0xc78>)
 801c0fa:	4293      	cmp	r3, r2
 801c0fc:	d045      	beq.n	801c18a <HAL_DMA_IRQHandler+0xb12>
 801c0fe:	687b      	ldr	r3, [r7, #4]
 801c100:	681b      	ldr	r3, [r3, #0]
 801c102:	4a7c      	ldr	r2, [pc, #496]	@ (801c2f4 <HAL_DMA_IRQHandler+0xc7c>)
 801c104:	4293      	cmp	r3, r2
 801c106:	d040      	beq.n	801c18a <HAL_DMA_IRQHandler+0xb12>
 801c108:	687b      	ldr	r3, [r7, #4]
 801c10a:	681b      	ldr	r3, [r3, #0]
 801c10c:	4a7a      	ldr	r2, [pc, #488]	@ (801c2f8 <HAL_DMA_IRQHandler+0xc80>)
 801c10e:	4293      	cmp	r3, r2
 801c110:	d03b      	beq.n	801c18a <HAL_DMA_IRQHandler+0xb12>
 801c112:	687b      	ldr	r3, [r7, #4]
 801c114:	681b      	ldr	r3, [r3, #0]
 801c116:	4a79      	ldr	r2, [pc, #484]	@ (801c2fc <HAL_DMA_IRQHandler+0xc84>)
 801c118:	4293      	cmp	r3, r2
 801c11a:	d036      	beq.n	801c18a <HAL_DMA_IRQHandler+0xb12>
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	681b      	ldr	r3, [r3, #0]
 801c120:	4a77      	ldr	r2, [pc, #476]	@ (801c300 <HAL_DMA_IRQHandler+0xc88>)
 801c122:	4293      	cmp	r3, r2
 801c124:	d031      	beq.n	801c18a <HAL_DMA_IRQHandler+0xb12>
 801c126:	687b      	ldr	r3, [r7, #4]
 801c128:	681b      	ldr	r3, [r3, #0]
 801c12a:	4a76      	ldr	r2, [pc, #472]	@ (801c304 <HAL_DMA_IRQHandler+0xc8c>)
 801c12c:	4293      	cmp	r3, r2
 801c12e:	d02c      	beq.n	801c18a <HAL_DMA_IRQHandler+0xb12>
 801c130:	687b      	ldr	r3, [r7, #4]
 801c132:	681b      	ldr	r3, [r3, #0]
 801c134:	4a74      	ldr	r2, [pc, #464]	@ (801c308 <HAL_DMA_IRQHandler+0xc90>)
 801c136:	4293      	cmp	r3, r2
 801c138:	d027      	beq.n	801c18a <HAL_DMA_IRQHandler+0xb12>
 801c13a:	687b      	ldr	r3, [r7, #4]
 801c13c:	681b      	ldr	r3, [r3, #0]
 801c13e:	4a73      	ldr	r2, [pc, #460]	@ (801c30c <HAL_DMA_IRQHandler+0xc94>)
 801c140:	4293      	cmp	r3, r2
 801c142:	d022      	beq.n	801c18a <HAL_DMA_IRQHandler+0xb12>
 801c144:	687b      	ldr	r3, [r7, #4]
 801c146:	681b      	ldr	r3, [r3, #0]
 801c148:	4a71      	ldr	r2, [pc, #452]	@ (801c310 <HAL_DMA_IRQHandler+0xc98>)
 801c14a:	4293      	cmp	r3, r2
 801c14c:	d01d      	beq.n	801c18a <HAL_DMA_IRQHandler+0xb12>
 801c14e:	687b      	ldr	r3, [r7, #4]
 801c150:	681b      	ldr	r3, [r3, #0]
 801c152:	4a70      	ldr	r2, [pc, #448]	@ (801c314 <HAL_DMA_IRQHandler+0xc9c>)
 801c154:	4293      	cmp	r3, r2
 801c156:	d018      	beq.n	801c18a <HAL_DMA_IRQHandler+0xb12>
 801c158:	687b      	ldr	r3, [r7, #4]
 801c15a:	681b      	ldr	r3, [r3, #0]
 801c15c:	4a6e      	ldr	r2, [pc, #440]	@ (801c318 <HAL_DMA_IRQHandler+0xca0>)
 801c15e:	4293      	cmp	r3, r2
 801c160:	d013      	beq.n	801c18a <HAL_DMA_IRQHandler+0xb12>
 801c162:	687b      	ldr	r3, [r7, #4]
 801c164:	681b      	ldr	r3, [r3, #0]
 801c166:	4a6d      	ldr	r2, [pc, #436]	@ (801c31c <HAL_DMA_IRQHandler+0xca4>)
 801c168:	4293      	cmp	r3, r2
 801c16a:	d00e      	beq.n	801c18a <HAL_DMA_IRQHandler+0xb12>
 801c16c:	687b      	ldr	r3, [r7, #4]
 801c16e:	681b      	ldr	r3, [r3, #0]
 801c170:	4a6b      	ldr	r2, [pc, #428]	@ (801c320 <HAL_DMA_IRQHandler+0xca8>)
 801c172:	4293      	cmp	r3, r2
 801c174:	d009      	beq.n	801c18a <HAL_DMA_IRQHandler+0xb12>
 801c176:	687b      	ldr	r3, [r7, #4]
 801c178:	681b      	ldr	r3, [r3, #0]
 801c17a:	4a6a      	ldr	r2, [pc, #424]	@ (801c324 <HAL_DMA_IRQHandler+0xcac>)
 801c17c:	4293      	cmp	r3, r2
 801c17e:	d004      	beq.n	801c18a <HAL_DMA_IRQHandler+0xb12>
 801c180:	687b      	ldr	r3, [r7, #4]
 801c182:	681b      	ldr	r3, [r3, #0]
 801c184:	4a68      	ldr	r2, [pc, #416]	@ (801c328 <HAL_DMA_IRQHandler+0xcb0>)
 801c186:	4293      	cmp	r3, r2
 801c188:	d108      	bne.n	801c19c <HAL_DMA_IRQHandler+0xb24>
 801c18a:	687b      	ldr	r3, [r7, #4]
 801c18c:	681b      	ldr	r3, [r3, #0]
 801c18e:	681a      	ldr	r2, [r3, #0]
 801c190:	687b      	ldr	r3, [r7, #4]
 801c192:	681b      	ldr	r3, [r3, #0]
 801c194:	f022 0208 	bic.w	r2, r2, #8
 801c198:	601a      	str	r2, [r3, #0]
 801c19a:	e007      	b.n	801c1ac <HAL_DMA_IRQHandler+0xb34>
 801c19c:	687b      	ldr	r3, [r7, #4]
 801c19e:	681b      	ldr	r3, [r3, #0]
 801c1a0:	681a      	ldr	r2, [r3, #0]
 801c1a2:	687b      	ldr	r3, [r7, #4]
 801c1a4:	681b      	ldr	r3, [r3, #0]
 801c1a6:	f022 0204 	bic.w	r2, r2, #4
 801c1aa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 801c1ac:	687b      	ldr	r3, [r7, #4]
 801c1ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c1b0:	2b00      	cmp	r3, #0
 801c1b2:	f000 8165 	beq.w	801c480 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801c1b6:	687b      	ldr	r3, [r7, #4]
 801c1b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c1ba:	6878      	ldr	r0, [r7, #4]
 801c1bc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c1be:	e15f      	b.n	801c480 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c1c4:	f003 031f 	and.w	r3, r3, #31
 801c1c8:	2202      	movs	r2, #2
 801c1ca:	409a      	lsls	r2, r3
 801c1cc:	697b      	ldr	r3, [r7, #20]
 801c1ce:	4013      	ands	r3, r2
 801c1d0:	2b00      	cmp	r3, #0
 801c1d2:	f000 80c5 	beq.w	801c360 <HAL_DMA_IRQHandler+0xce8>
 801c1d6:	693b      	ldr	r3, [r7, #16]
 801c1d8:	f003 0302 	and.w	r3, r3, #2
 801c1dc:	2b00      	cmp	r3, #0
 801c1de:	f000 80bf 	beq.w	801c360 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 801c1e2:	687b      	ldr	r3, [r7, #4]
 801c1e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c1e6:	f003 031f 	and.w	r3, r3, #31
 801c1ea:	2202      	movs	r2, #2
 801c1ec:	409a      	lsls	r2, r3
 801c1ee:	69fb      	ldr	r3, [r7, #28]
 801c1f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c1f2:	693b      	ldr	r3, [r7, #16]
 801c1f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801c1f8:	2b00      	cmp	r3, #0
 801c1fa:	d018      	beq.n	801c22e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801c1fc:	693b      	ldr	r3, [r7, #16]
 801c1fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c202:	2b00      	cmp	r3, #0
 801c204:	d109      	bne.n	801c21a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801c206:	687b      	ldr	r3, [r7, #4]
 801c208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c20a:	2b00      	cmp	r3, #0
 801c20c:	f000 813a 	beq.w	801c484 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 801c210:	687b      	ldr	r3, [r7, #4]
 801c212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c214:	6878      	ldr	r0, [r7, #4]
 801c216:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c218:	e134      	b.n	801c484 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801c21a:	687b      	ldr	r3, [r7, #4]
 801c21c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c21e:	2b00      	cmp	r3, #0
 801c220:	f000 8130 	beq.w	801c484 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 801c224:	687b      	ldr	r3, [r7, #4]
 801c226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c228:	6878      	ldr	r0, [r7, #4]
 801c22a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c22c:	e12a      	b.n	801c484 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801c22e:	693b      	ldr	r3, [r7, #16]
 801c230:	f003 0320 	and.w	r3, r3, #32
 801c234:	2b00      	cmp	r3, #0
 801c236:	f040 8089 	bne.w	801c34c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801c23a:	687b      	ldr	r3, [r7, #4]
 801c23c:	681b      	ldr	r3, [r3, #0]
 801c23e:	4a2b      	ldr	r2, [pc, #172]	@ (801c2ec <HAL_DMA_IRQHandler+0xc74>)
 801c240:	4293      	cmp	r3, r2
 801c242:	d04a      	beq.n	801c2da <HAL_DMA_IRQHandler+0xc62>
 801c244:	687b      	ldr	r3, [r7, #4]
 801c246:	681b      	ldr	r3, [r3, #0]
 801c248:	4a29      	ldr	r2, [pc, #164]	@ (801c2f0 <HAL_DMA_IRQHandler+0xc78>)
 801c24a:	4293      	cmp	r3, r2
 801c24c:	d045      	beq.n	801c2da <HAL_DMA_IRQHandler+0xc62>
 801c24e:	687b      	ldr	r3, [r7, #4]
 801c250:	681b      	ldr	r3, [r3, #0]
 801c252:	4a28      	ldr	r2, [pc, #160]	@ (801c2f4 <HAL_DMA_IRQHandler+0xc7c>)
 801c254:	4293      	cmp	r3, r2
 801c256:	d040      	beq.n	801c2da <HAL_DMA_IRQHandler+0xc62>
 801c258:	687b      	ldr	r3, [r7, #4]
 801c25a:	681b      	ldr	r3, [r3, #0]
 801c25c:	4a26      	ldr	r2, [pc, #152]	@ (801c2f8 <HAL_DMA_IRQHandler+0xc80>)
 801c25e:	4293      	cmp	r3, r2
 801c260:	d03b      	beq.n	801c2da <HAL_DMA_IRQHandler+0xc62>
 801c262:	687b      	ldr	r3, [r7, #4]
 801c264:	681b      	ldr	r3, [r3, #0]
 801c266:	4a25      	ldr	r2, [pc, #148]	@ (801c2fc <HAL_DMA_IRQHandler+0xc84>)
 801c268:	4293      	cmp	r3, r2
 801c26a:	d036      	beq.n	801c2da <HAL_DMA_IRQHandler+0xc62>
 801c26c:	687b      	ldr	r3, [r7, #4]
 801c26e:	681b      	ldr	r3, [r3, #0]
 801c270:	4a23      	ldr	r2, [pc, #140]	@ (801c300 <HAL_DMA_IRQHandler+0xc88>)
 801c272:	4293      	cmp	r3, r2
 801c274:	d031      	beq.n	801c2da <HAL_DMA_IRQHandler+0xc62>
 801c276:	687b      	ldr	r3, [r7, #4]
 801c278:	681b      	ldr	r3, [r3, #0]
 801c27a:	4a22      	ldr	r2, [pc, #136]	@ (801c304 <HAL_DMA_IRQHandler+0xc8c>)
 801c27c:	4293      	cmp	r3, r2
 801c27e:	d02c      	beq.n	801c2da <HAL_DMA_IRQHandler+0xc62>
 801c280:	687b      	ldr	r3, [r7, #4]
 801c282:	681b      	ldr	r3, [r3, #0]
 801c284:	4a20      	ldr	r2, [pc, #128]	@ (801c308 <HAL_DMA_IRQHandler+0xc90>)
 801c286:	4293      	cmp	r3, r2
 801c288:	d027      	beq.n	801c2da <HAL_DMA_IRQHandler+0xc62>
 801c28a:	687b      	ldr	r3, [r7, #4]
 801c28c:	681b      	ldr	r3, [r3, #0]
 801c28e:	4a1f      	ldr	r2, [pc, #124]	@ (801c30c <HAL_DMA_IRQHandler+0xc94>)
 801c290:	4293      	cmp	r3, r2
 801c292:	d022      	beq.n	801c2da <HAL_DMA_IRQHandler+0xc62>
 801c294:	687b      	ldr	r3, [r7, #4]
 801c296:	681b      	ldr	r3, [r3, #0]
 801c298:	4a1d      	ldr	r2, [pc, #116]	@ (801c310 <HAL_DMA_IRQHandler+0xc98>)
 801c29a:	4293      	cmp	r3, r2
 801c29c:	d01d      	beq.n	801c2da <HAL_DMA_IRQHandler+0xc62>
 801c29e:	687b      	ldr	r3, [r7, #4]
 801c2a0:	681b      	ldr	r3, [r3, #0]
 801c2a2:	4a1c      	ldr	r2, [pc, #112]	@ (801c314 <HAL_DMA_IRQHandler+0xc9c>)
 801c2a4:	4293      	cmp	r3, r2
 801c2a6:	d018      	beq.n	801c2da <HAL_DMA_IRQHandler+0xc62>
 801c2a8:	687b      	ldr	r3, [r7, #4]
 801c2aa:	681b      	ldr	r3, [r3, #0]
 801c2ac:	4a1a      	ldr	r2, [pc, #104]	@ (801c318 <HAL_DMA_IRQHandler+0xca0>)
 801c2ae:	4293      	cmp	r3, r2
 801c2b0:	d013      	beq.n	801c2da <HAL_DMA_IRQHandler+0xc62>
 801c2b2:	687b      	ldr	r3, [r7, #4]
 801c2b4:	681b      	ldr	r3, [r3, #0]
 801c2b6:	4a19      	ldr	r2, [pc, #100]	@ (801c31c <HAL_DMA_IRQHandler+0xca4>)
 801c2b8:	4293      	cmp	r3, r2
 801c2ba:	d00e      	beq.n	801c2da <HAL_DMA_IRQHandler+0xc62>
 801c2bc:	687b      	ldr	r3, [r7, #4]
 801c2be:	681b      	ldr	r3, [r3, #0]
 801c2c0:	4a17      	ldr	r2, [pc, #92]	@ (801c320 <HAL_DMA_IRQHandler+0xca8>)
 801c2c2:	4293      	cmp	r3, r2
 801c2c4:	d009      	beq.n	801c2da <HAL_DMA_IRQHandler+0xc62>
 801c2c6:	687b      	ldr	r3, [r7, #4]
 801c2c8:	681b      	ldr	r3, [r3, #0]
 801c2ca:	4a16      	ldr	r2, [pc, #88]	@ (801c324 <HAL_DMA_IRQHandler+0xcac>)
 801c2cc:	4293      	cmp	r3, r2
 801c2ce:	d004      	beq.n	801c2da <HAL_DMA_IRQHandler+0xc62>
 801c2d0:	687b      	ldr	r3, [r7, #4]
 801c2d2:	681b      	ldr	r3, [r3, #0]
 801c2d4:	4a14      	ldr	r2, [pc, #80]	@ (801c328 <HAL_DMA_IRQHandler+0xcb0>)
 801c2d6:	4293      	cmp	r3, r2
 801c2d8:	d128      	bne.n	801c32c <HAL_DMA_IRQHandler+0xcb4>
 801c2da:	687b      	ldr	r3, [r7, #4]
 801c2dc:	681b      	ldr	r3, [r3, #0]
 801c2de:	681a      	ldr	r2, [r3, #0]
 801c2e0:	687b      	ldr	r3, [r7, #4]
 801c2e2:	681b      	ldr	r3, [r3, #0]
 801c2e4:	f022 0214 	bic.w	r2, r2, #20
 801c2e8:	601a      	str	r2, [r3, #0]
 801c2ea:	e027      	b.n	801c33c <HAL_DMA_IRQHandler+0xcc4>
 801c2ec:	40020010 	.word	0x40020010
 801c2f0:	40020028 	.word	0x40020028
 801c2f4:	40020040 	.word	0x40020040
 801c2f8:	40020058 	.word	0x40020058
 801c2fc:	40020070 	.word	0x40020070
 801c300:	40020088 	.word	0x40020088
 801c304:	400200a0 	.word	0x400200a0
 801c308:	400200b8 	.word	0x400200b8
 801c30c:	40020410 	.word	0x40020410
 801c310:	40020428 	.word	0x40020428
 801c314:	40020440 	.word	0x40020440
 801c318:	40020458 	.word	0x40020458
 801c31c:	40020470 	.word	0x40020470
 801c320:	40020488 	.word	0x40020488
 801c324:	400204a0 	.word	0x400204a0
 801c328:	400204b8 	.word	0x400204b8
 801c32c:	687b      	ldr	r3, [r7, #4]
 801c32e:	681b      	ldr	r3, [r3, #0]
 801c330:	681a      	ldr	r2, [r3, #0]
 801c332:	687b      	ldr	r3, [r7, #4]
 801c334:	681b      	ldr	r3, [r3, #0]
 801c336:	f022 020a 	bic.w	r2, r2, #10
 801c33a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801c33c:	687b      	ldr	r3, [r7, #4]
 801c33e:	2201      	movs	r2, #1
 801c340:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801c344:	687b      	ldr	r3, [r7, #4]
 801c346:	2200      	movs	r2, #0
 801c348:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801c34c:	687b      	ldr	r3, [r7, #4]
 801c34e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c350:	2b00      	cmp	r3, #0
 801c352:	f000 8097 	beq.w	801c484 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801c356:	687b      	ldr	r3, [r7, #4]
 801c358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c35a:	6878      	ldr	r0, [r7, #4]
 801c35c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c35e:	e091      	b.n	801c484 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 801c360:	687b      	ldr	r3, [r7, #4]
 801c362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c364:	f003 031f 	and.w	r3, r3, #31
 801c368:	2208      	movs	r2, #8
 801c36a:	409a      	lsls	r2, r3
 801c36c:	697b      	ldr	r3, [r7, #20]
 801c36e:	4013      	ands	r3, r2
 801c370:	2b00      	cmp	r3, #0
 801c372:	f000 8088 	beq.w	801c486 <HAL_DMA_IRQHandler+0xe0e>
 801c376:	693b      	ldr	r3, [r7, #16]
 801c378:	f003 0308 	and.w	r3, r3, #8
 801c37c:	2b00      	cmp	r3, #0
 801c37e:	f000 8082 	beq.w	801c486 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801c382:	687b      	ldr	r3, [r7, #4]
 801c384:	681b      	ldr	r3, [r3, #0]
 801c386:	4a41      	ldr	r2, [pc, #260]	@ (801c48c <HAL_DMA_IRQHandler+0xe14>)
 801c388:	4293      	cmp	r3, r2
 801c38a:	d04a      	beq.n	801c422 <HAL_DMA_IRQHandler+0xdaa>
 801c38c:	687b      	ldr	r3, [r7, #4]
 801c38e:	681b      	ldr	r3, [r3, #0]
 801c390:	4a3f      	ldr	r2, [pc, #252]	@ (801c490 <HAL_DMA_IRQHandler+0xe18>)
 801c392:	4293      	cmp	r3, r2
 801c394:	d045      	beq.n	801c422 <HAL_DMA_IRQHandler+0xdaa>
 801c396:	687b      	ldr	r3, [r7, #4]
 801c398:	681b      	ldr	r3, [r3, #0]
 801c39a:	4a3e      	ldr	r2, [pc, #248]	@ (801c494 <HAL_DMA_IRQHandler+0xe1c>)
 801c39c:	4293      	cmp	r3, r2
 801c39e:	d040      	beq.n	801c422 <HAL_DMA_IRQHandler+0xdaa>
 801c3a0:	687b      	ldr	r3, [r7, #4]
 801c3a2:	681b      	ldr	r3, [r3, #0]
 801c3a4:	4a3c      	ldr	r2, [pc, #240]	@ (801c498 <HAL_DMA_IRQHandler+0xe20>)
 801c3a6:	4293      	cmp	r3, r2
 801c3a8:	d03b      	beq.n	801c422 <HAL_DMA_IRQHandler+0xdaa>
 801c3aa:	687b      	ldr	r3, [r7, #4]
 801c3ac:	681b      	ldr	r3, [r3, #0]
 801c3ae:	4a3b      	ldr	r2, [pc, #236]	@ (801c49c <HAL_DMA_IRQHandler+0xe24>)
 801c3b0:	4293      	cmp	r3, r2
 801c3b2:	d036      	beq.n	801c422 <HAL_DMA_IRQHandler+0xdaa>
 801c3b4:	687b      	ldr	r3, [r7, #4]
 801c3b6:	681b      	ldr	r3, [r3, #0]
 801c3b8:	4a39      	ldr	r2, [pc, #228]	@ (801c4a0 <HAL_DMA_IRQHandler+0xe28>)
 801c3ba:	4293      	cmp	r3, r2
 801c3bc:	d031      	beq.n	801c422 <HAL_DMA_IRQHandler+0xdaa>
 801c3be:	687b      	ldr	r3, [r7, #4]
 801c3c0:	681b      	ldr	r3, [r3, #0]
 801c3c2:	4a38      	ldr	r2, [pc, #224]	@ (801c4a4 <HAL_DMA_IRQHandler+0xe2c>)
 801c3c4:	4293      	cmp	r3, r2
 801c3c6:	d02c      	beq.n	801c422 <HAL_DMA_IRQHandler+0xdaa>
 801c3c8:	687b      	ldr	r3, [r7, #4]
 801c3ca:	681b      	ldr	r3, [r3, #0]
 801c3cc:	4a36      	ldr	r2, [pc, #216]	@ (801c4a8 <HAL_DMA_IRQHandler+0xe30>)
 801c3ce:	4293      	cmp	r3, r2
 801c3d0:	d027      	beq.n	801c422 <HAL_DMA_IRQHandler+0xdaa>
 801c3d2:	687b      	ldr	r3, [r7, #4]
 801c3d4:	681b      	ldr	r3, [r3, #0]
 801c3d6:	4a35      	ldr	r2, [pc, #212]	@ (801c4ac <HAL_DMA_IRQHandler+0xe34>)
 801c3d8:	4293      	cmp	r3, r2
 801c3da:	d022      	beq.n	801c422 <HAL_DMA_IRQHandler+0xdaa>
 801c3dc:	687b      	ldr	r3, [r7, #4]
 801c3de:	681b      	ldr	r3, [r3, #0]
 801c3e0:	4a33      	ldr	r2, [pc, #204]	@ (801c4b0 <HAL_DMA_IRQHandler+0xe38>)
 801c3e2:	4293      	cmp	r3, r2
 801c3e4:	d01d      	beq.n	801c422 <HAL_DMA_IRQHandler+0xdaa>
 801c3e6:	687b      	ldr	r3, [r7, #4]
 801c3e8:	681b      	ldr	r3, [r3, #0]
 801c3ea:	4a32      	ldr	r2, [pc, #200]	@ (801c4b4 <HAL_DMA_IRQHandler+0xe3c>)
 801c3ec:	4293      	cmp	r3, r2
 801c3ee:	d018      	beq.n	801c422 <HAL_DMA_IRQHandler+0xdaa>
 801c3f0:	687b      	ldr	r3, [r7, #4]
 801c3f2:	681b      	ldr	r3, [r3, #0]
 801c3f4:	4a30      	ldr	r2, [pc, #192]	@ (801c4b8 <HAL_DMA_IRQHandler+0xe40>)
 801c3f6:	4293      	cmp	r3, r2
 801c3f8:	d013      	beq.n	801c422 <HAL_DMA_IRQHandler+0xdaa>
 801c3fa:	687b      	ldr	r3, [r7, #4]
 801c3fc:	681b      	ldr	r3, [r3, #0]
 801c3fe:	4a2f      	ldr	r2, [pc, #188]	@ (801c4bc <HAL_DMA_IRQHandler+0xe44>)
 801c400:	4293      	cmp	r3, r2
 801c402:	d00e      	beq.n	801c422 <HAL_DMA_IRQHandler+0xdaa>
 801c404:	687b      	ldr	r3, [r7, #4]
 801c406:	681b      	ldr	r3, [r3, #0]
 801c408:	4a2d      	ldr	r2, [pc, #180]	@ (801c4c0 <HAL_DMA_IRQHandler+0xe48>)
 801c40a:	4293      	cmp	r3, r2
 801c40c:	d009      	beq.n	801c422 <HAL_DMA_IRQHandler+0xdaa>
 801c40e:	687b      	ldr	r3, [r7, #4]
 801c410:	681b      	ldr	r3, [r3, #0]
 801c412:	4a2c      	ldr	r2, [pc, #176]	@ (801c4c4 <HAL_DMA_IRQHandler+0xe4c>)
 801c414:	4293      	cmp	r3, r2
 801c416:	d004      	beq.n	801c422 <HAL_DMA_IRQHandler+0xdaa>
 801c418:	687b      	ldr	r3, [r7, #4]
 801c41a:	681b      	ldr	r3, [r3, #0]
 801c41c:	4a2a      	ldr	r2, [pc, #168]	@ (801c4c8 <HAL_DMA_IRQHandler+0xe50>)
 801c41e:	4293      	cmp	r3, r2
 801c420:	d108      	bne.n	801c434 <HAL_DMA_IRQHandler+0xdbc>
 801c422:	687b      	ldr	r3, [r7, #4]
 801c424:	681b      	ldr	r3, [r3, #0]
 801c426:	681a      	ldr	r2, [r3, #0]
 801c428:	687b      	ldr	r3, [r7, #4]
 801c42a:	681b      	ldr	r3, [r3, #0]
 801c42c:	f022 021c 	bic.w	r2, r2, #28
 801c430:	601a      	str	r2, [r3, #0]
 801c432:	e007      	b.n	801c444 <HAL_DMA_IRQHandler+0xdcc>
 801c434:	687b      	ldr	r3, [r7, #4]
 801c436:	681b      	ldr	r3, [r3, #0]
 801c438:	681a      	ldr	r2, [r3, #0]
 801c43a:	687b      	ldr	r3, [r7, #4]
 801c43c:	681b      	ldr	r3, [r3, #0]
 801c43e:	f022 020e 	bic.w	r2, r2, #14
 801c442:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 801c444:	687b      	ldr	r3, [r7, #4]
 801c446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c448:	f003 031f 	and.w	r3, r3, #31
 801c44c:	2201      	movs	r2, #1
 801c44e:	409a      	lsls	r2, r3
 801c450:	69fb      	ldr	r3, [r7, #28]
 801c452:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801c454:	687b      	ldr	r3, [r7, #4]
 801c456:	2201      	movs	r2, #1
 801c458:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801c45a:	687b      	ldr	r3, [r7, #4]
 801c45c:	2201      	movs	r2, #1
 801c45e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801c462:	687b      	ldr	r3, [r7, #4]
 801c464:	2200      	movs	r2, #0
 801c466:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 801c46a:	687b      	ldr	r3, [r7, #4]
 801c46c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c46e:	2b00      	cmp	r3, #0
 801c470:	d009      	beq.n	801c486 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801c472:	687b      	ldr	r3, [r7, #4]
 801c474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c476:	6878      	ldr	r0, [r7, #4]
 801c478:	4798      	blx	r3
 801c47a:	e004      	b.n	801c486 <HAL_DMA_IRQHandler+0xe0e>
          return;
 801c47c:	bf00      	nop
 801c47e:	e002      	b.n	801c486 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c480:	bf00      	nop
 801c482:	e000      	b.n	801c486 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c484:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 801c486:	3728      	adds	r7, #40	@ 0x28
 801c488:	46bd      	mov	sp, r7
 801c48a:	bd80      	pop	{r7, pc}
 801c48c:	40020010 	.word	0x40020010
 801c490:	40020028 	.word	0x40020028
 801c494:	40020040 	.word	0x40020040
 801c498:	40020058 	.word	0x40020058
 801c49c:	40020070 	.word	0x40020070
 801c4a0:	40020088 	.word	0x40020088
 801c4a4:	400200a0 	.word	0x400200a0
 801c4a8:	400200b8 	.word	0x400200b8
 801c4ac:	40020410 	.word	0x40020410
 801c4b0:	40020428 	.word	0x40020428
 801c4b4:	40020440 	.word	0x40020440
 801c4b8:	40020458 	.word	0x40020458
 801c4bc:	40020470 	.word	0x40020470
 801c4c0:	40020488 	.word	0x40020488
 801c4c4:	400204a0 	.word	0x400204a0
 801c4c8:	400204b8 	.word	0x400204b8

0801c4cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801c4cc:	b480      	push	{r7}
 801c4ce:	b085      	sub	sp, #20
 801c4d0:	af00      	add	r7, sp, #0
 801c4d2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801c4d4:	687b      	ldr	r3, [r7, #4]
 801c4d6:	681b      	ldr	r3, [r3, #0]
 801c4d8:	4a42      	ldr	r2, [pc, #264]	@ (801c5e4 <DMA_CalcBaseAndBitshift+0x118>)
 801c4da:	4293      	cmp	r3, r2
 801c4dc:	d04a      	beq.n	801c574 <DMA_CalcBaseAndBitshift+0xa8>
 801c4de:	687b      	ldr	r3, [r7, #4]
 801c4e0:	681b      	ldr	r3, [r3, #0]
 801c4e2:	4a41      	ldr	r2, [pc, #260]	@ (801c5e8 <DMA_CalcBaseAndBitshift+0x11c>)
 801c4e4:	4293      	cmp	r3, r2
 801c4e6:	d045      	beq.n	801c574 <DMA_CalcBaseAndBitshift+0xa8>
 801c4e8:	687b      	ldr	r3, [r7, #4]
 801c4ea:	681b      	ldr	r3, [r3, #0]
 801c4ec:	4a3f      	ldr	r2, [pc, #252]	@ (801c5ec <DMA_CalcBaseAndBitshift+0x120>)
 801c4ee:	4293      	cmp	r3, r2
 801c4f0:	d040      	beq.n	801c574 <DMA_CalcBaseAndBitshift+0xa8>
 801c4f2:	687b      	ldr	r3, [r7, #4]
 801c4f4:	681b      	ldr	r3, [r3, #0]
 801c4f6:	4a3e      	ldr	r2, [pc, #248]	@ (801c5f0 <DMA_CalcBaseAndBitshift+0x124>)
 801c4f8:	4293      	cmp	r3, r2
 801c4fa:	d03b      	beq.n	801c574 <DMA_CalcBaseAndBitshift+0xa8>
 801c4fc:	687b      	ldr	r3, [r7, #4]
 801c4fe:	681b      	ldr	r3, [r3, #0]
 801c500:	4a3c      	ldr	r2, [pc, #240]	@ (801c5f4 <DMA_CalcBaseAndBitshift+0x128>)
 801c502:	4293      	cmp	r3, r2
 801c504:	d036      	beq.n	801c574 <DMA_CalcBaseAndBitshift+0xa8>
 801c506:	687b      	ldr	r3, [r7, #4]
 801c508:	681b      	ldr	r3, [r3, #0]
 801c50a:	4a3b      	ldr	r2, [pc, #236]	@ (801c5f8 <DMA_CalcBaseAndBitshift+0x12c>)
 801c50c:	4293      	cmp	r3, r2
 801c50e:	d031      	beq.n	801c574 <DMA_CalcBaseAndBitshift+0xa8>
 801c510:	687b      	ldr	r3, [r7, #4]
 801c512:	681b      	ldr	r3, [r3, #0]
 801c514:	4a39      	ldr	r2, [pc, #228]	@ (801c5fc <DMA_CalcBaseAndBitshift+0x130>)
 801c516:	4293      	cmp	r3, r2
 801c518:	d02c      	beq.n	801c574 <DMA_CalcBaseAndBitshift+0xa8>
 801c51a:	687b      	ldr	r3, [r7, #4]
 801c51c:	681b      	ldr	r3, [r3, #0]
 801c51e:	4a38      	ldr	r2, [pc, #224]	@ (801c600 <DMA_CalcBaseAndBitshift+0x134>)
 801c520:	4293      	cmp	r3, r2
 801c522:	d027      	beq.n	801c574 <DMA_CalcBaseAndBitshift+0xa8>
 801c524:	687b      	ldr	r3, [r7, #4]
 801c526:	681b      	ldr	r3, [r3, #0]
 801c528:	4a36      	ldr	r2, [pc, #216]	@ (801c604 <DMA_CalcBaseAndBitshift+0x138>)
 801c52a:	4293      	cmp	r3, r2
 801c52c:	d022      	beq.n	801c574 <DMA_CalcBaseAndBitshift+0xa8>
 801c52e:	687b      	ldr	r3, [r7, #4]
 801c530:	681b      	ldr	r3, [r3, #0]
 801c532:	4a35      	ldr	r2, [pc, #212]	@ (801c608 <DMA_CalcBaseAndBitshift+0x13c>)
 801c534:	4293      	cmp	r3, r2
 801c536:	d01d      	beq.n	801c574 <DMA_CalcBaseAndBitshift+0xa8>
 801c538:	687b      	ldr	r3, [r7, #4]
 801c53a:	681b      	ldr	r3, [r3, #0]
 801c53c:	4a33      	ldr	r2, [pc, #204]	@ (801c60c <DMA_CalcBaseAndBitshift+0x140>)
 801c53e:	4293      	cmp	r3, r2
 801c540:	d018      	beq.n	801c574 <DMA_CalcBaseAndBitshift+0xa8>
 801c542:	687b      	ldr	r3, [r7, #4]
 801c544:	681b      	ldr	r3, [r3, #0]
 801c546:	4a32      	ldr	r2, [pc, #200]	@ (801c610 <DMA_CalcBaseAndBitshift+0x144>)
 801c548:	4293      	cmp	r3, r2
 801c54a:	d013      	beq.n	801c574 <DMA_CalcBaseAndBitshift+0xa8>
 801c54c:	687b      	ldr	r3, [r7, #4]
 801c54e:	681b      	ldr	r3, [r3, #0]
 801c550:	4a30      	ldr	r2, [pc, #192]	@ (801c614 <DMA_CalcBaseAndBitshift+0x148>)
 801c552:	4293      	cmp	r3, r2
 801c554:	d00e      	beq.n	801c574 <DMA_CalcBaseAndBitshift+0xa8>
 801c556:	687b      	ldr	r3, [r7, #4]
 801c558:	681b      	ldr	r3, [r3, #0]
 801c55a:	4a2f      	ldr	r2, [pc, #188]	@ (801c618 <DMA_CalcBaseAndBitshift+0x14c>)
 801c55c:	4293      	cmp	r3, r2
 801c55e:	d009      	beq.n	801c574 <DMA_CalcBaseAndBitshift+0xa8>
 801c560:	687b      	ldr	r3, [r7, #4]
 801c562:	681b      	ldr	r3, [r3, #0]
 801c564:	4a2d      	ldr	r2, [pc, #180]	@ (801c61c <DMA_CalcBaseAndBitshift+0x150>)
 801c566:	4293      	cmp	r3, r2
 801c568:	d004      	beq.n	801c574 <DMA_CalcBaseAndBitshift+0xa8>
 801c56a:	687b      	ldr	r3, [r7, #4]
 801c56c:	681b      	ldr	r3, [r3, #0]
 801c56e:	4a2c      	ldr	r2, [pc, #176]	@ (801c620 <DMA_CalcBaseAndBitshift+0x154>)
 801c570:	4293      	cmp	r3, r2
 801c572:	d101      	bne.n	801c578 <DMA_CalcBaseAndBitshift+0xac>
 801c574:	2301      	movs	r3, #1
 801c576:	e000      	b.n	801c57a <DMA_CalcBaseAndBitshift+0xae>
 801c578:	2300      	movs	r3, #0
 801c57a:	2b00      	cmp	r3, #0
 801c57c:	d024      	beq.n	801c5c8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801c57e:	687b      	ldr	r3, [r7, #4]
 801c580:	681b      	ldr	r3, [r3, #0]
 801c582:	b2db      	uxtb	r3, r3
 801c584:	3b10      	subs	r3, #16
 801c586:	4a27      	ldr	r2, [pc, #156]	@ (801c624 <DMA_CalcBaseAndBitshift+0x158>)
 801c588:	fba2 2303 	umull	r2, r3, r2, r3
 801c58c:	091b      	lsrs	r3, r3, #4
 801c58e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 801c590:	68fb      	ldr	r3, [r7, #12]
 801c592:	f003 0307 	and.w	r3, r3, #7
 801c596:	4a24      	ldr	r2, [pc, #144]	@ (801c628 <DMA_CalcBaseAndBitshift+0x15c>)
 801c598:	5cd3      	ldrb	r3, [r2, r3]
 801c59a:	461a      	mov	r2, r3
 801c59c:	687b      	ldr	r3, [r7, #4]
 801c59e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 801c5a0:	68fb      	ldr	r3, [r7, #12]
 801c5a2:	2b03      	cmp	r3, #3
 801c5a4:	d908      	bls.n	801c5b8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 801c5a6:	687b      	ldr	r3, [r7, #4]
 801c5a8:	681b      	ldr	r3, [r3, #0]
 801c5aa:	461a      	mov	r2, r3
 801c5ac:	4b1f      	ldr	r3, [pc, #124]	@ (801c62c <DMA_CalcBaseAndBitshift+0x160>)
 801c5ae:	4013      	ands	r3, r2
 801c5b0:	1d1a      	adds	r2, r3, #4
 801c5b2:	687b      	ldr	r3, [r7, #4]
 801c5b4:	659a      	str	r2, [r3, #88]	@ 0x58
 801c5b6:	e00d      	b.n	801c5d4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 801c5b8:	687b      	ldr	r3, [r7, #4]
 801c5ba:	681b      	ldr	r3, [r3, #0]
 801c5bc:	461a      	mov	r2, r3
 801c5be:	4b1b      	ldr	r3, [pc, #108]	@ (801c62c <DMA_CalcBaseAndBitshift+0x160>)
 801c5c0:	4013      	ands	r3, r2
 801c5c2:	687a      	ldr	r2, [r7, #4]
 801c5c4:	6593      	str	r3, [r2, #88]	@ 0x58
 801c5c6:	e005      	b.n	801c5d4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 801c5c8:	687b      	ldr	r3, [r7, #4]
 801c5ca:	681b      	ldr	r3, [r3, #0]
 801c5cc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801c5d0:	687b      	ldr	r3, [r7, #4]
 801c5d2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 801c5d4:	687b      	ldr	r3, [r7, #4]
 801c5d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 801c5d8:	4618      	mov	r0, r3
 801c5da:	3714      	adds	r7, #20
 801c5dc:	46bd      	mov	sp, r7
 801c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5e2:	4770      	bx	lr
 801c5e4:	40020010 	.word	0x40020010
 801c5e8:	40020028 	.word	0x40020028
 801c5ec:	40020040 	.word	0x40020040
 801c5f0:	40020058 	.word	0x40020058
 801c5f4:	40020070 	.word	0x40020070
 801c5f8:	40020088 	.word	0x40020088
 801c5fc:	400200a0 	.word	0x400200a0
 801c600:	400200b8 	.word	0x400200b8
 801c604:	40020410 	.word	0x40020410
 801c608:	40020428 	.word	0x40020428
 801c60c:	40020440 	.word	0x40020440
 801c610:	40020458 	.word	0x40020458
 801c614:	40020470 	.word	0x40020470
 801c618:	40020488 	.word	0x40020488
 801c61c:	400204a0 	.word	0x400204a0
 801c620:	400204b8 	.word	0x400204b8
 801c624:	aaaaaaab 	.word	0xaaaaaaab
 801c628:	08028020 	.word	0x08028020
 801c62c:	fffffc00 	.word	0xfffffc00

0801c630 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801c630:	b480      	push	{r7}
 801c632:	b085      	sub	sp, #20
 801c634:	af00      	add	r7, sp, #0
 801c636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801c638:	2300      	movs	r3, #0
 801c63a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801c63c:	687b      	ldr	r3, [r7, #4]
 801c63e:	699b      	ldr	r3, [r3, #24]
 801c640:	2b00      	cmp	r3, #0
 801c642:	d120      	bne.n	801c686 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 801c644:	687b      	ldr	r3, [r7, #4]
 801c646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c648:	2b03      	cmp	r3, #3
 801c64a:	d858      	bhi.n	801c6fe <DMA_CheckFifoParam+0xce>
 801c64c:	a201      	add	r2, pc, #4	@ (adr r2, 801c654 <DMA_CheckFifoParam+0x24>)
 801c64e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c652:	bf00      	nop
 801c654:	0801c665 	.word	0x0801c665
 801c658:	0801c677 	.word	0x0801c677
 801c65c:	0801c665 	.word	0x0801c665
 801c660:	0801c6ff 	.word	0x0801c6ff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801c664:	687b      	ldr	r3, [r7, #4]
 801c666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c668:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801c66c:	2b00      	cmp	r3, #0
 801c66e:	d048      	beq.n	801c702 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 801c670:	2301      	movs	r3, #1
 801c672:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801c674:	e045      	b.n	801c702 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801c676:	687b      	ldr	r3, [r7, #4]
 801c678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c67a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801c67e:	d142      	bne.n	801c706 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 801c680:	2301      	movs	r3, #1
 801c682:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801c684:	e03f      	b.n	801c706 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801c686:	687b      	ldr	r3, [r7, #4]
 801c688:	699b      	ldr	r3, [r3, #24]
 801c68a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801c68e:	d123      	bne.n	801c6d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 801c690:	687b      	ldr	r3, [r7, #4]
 801c692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c694:	2b03      	cmp	r3, #3
 801c696:	d838      	bhi.n	801c70a <DMA_CheckFifoParam+0xda>
 801c698:	a201      	add	r2, pc, #4	@ (adr r2, 801c6a0 <DMA_CheckFifoParam+0x70>)
 801c69a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c69e:	bf00      	nop
 801c6a0:	0801c6b1 	.word	0x0801c6b1
 801c6a4:	0801c6b7 	.word	0x0801c6b7
 801c6a8:	0801c6b1 	.word	0x0801c6b1
 801c6ac:	0801c6c9 	.word	0x0801c6c9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 801c6b0:	2301      	movs	r3, #1
 801c6b2:	73fb      	strb	r3, [r7, #15]
        break;
 801c6b4:	e030      	b.n	801c718 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801c6b6:	687b      	ldr	r3, [r7, #4]
 801c6b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c6ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801c6be:	2b00      	cmp	r3, #0
 801c6c0:	d025      	beq.n	801c70e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 801c6c2:	2301      	movs	r3, #1
 801c6c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801c6c6:	e022      	b.n	801c70e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801c6c8:	687b      	ldr	r3, [r7, #4]
 801c6ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c6cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801c6d0:	d11f      	bne.n	801c712 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 801c6d2:	2301      	movs	r3, #1
 801c6d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801c6d6:	e01c      	b.n	801c712 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 801c6d8:	687b      	ldr	r3, [r7, #4]
 801c6da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c6dc:	2b02      	cmp	r3, #2
 801c6de:	d902      	bls.n	801c6e6 <DMA_CheckFifoParam+0xb6>
 801c6e0:	2b03      	cmp	r3, #3
 801c6e2:	d003      	beq.n	801c6ec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 801c6e4:	e018      	b.n	801c718 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 801c6e6:	2301      	movs	r3, #1
 801c6e8:	73fb      	strb	r3, [r7, #15]
        break;
 801c6ea:	e015      	b.n	801c718 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801c6ec:	687b      	ldr	r3, [r7, #4]
 801c6ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c6f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801c6f4:	2b00      	cmp	r3, #0
 801c6f6:	d00e      	beq.n	801c716 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 801c6f8:	2301      	movs	r3, #1
 801c6fa:	73fb      	strb	r3, [r7, #15]
    break;
 801c6fc:	e00b      	b.n	801c716 <DMA_CheckFifoParam+0xe6>
        break;
 801c6fe:	bf00      	nop
 801c700:	e00a      	b.n	801c718 <DMA_CheckFifoParam+0xe8>
        break;
 801c702:	bf00      	nop
 801c704:	e008      	b.n	801c718 <DMA_CheckFifoParam+0xe8>
        break;
 801c706:	bf00      	nop
 801c708:	e006      	b.n	801c718 <DMA_CheckFifoParam+0xe8>
        break;
 801c70a:	bf00      	nop
 801c70c:	e004      	b.n	801c718 <DMA_CheckFifoParam+0xe8>
        break;
 801c70e:	bf00      	nop
 801c710:	e002      	b.n	801c718 <DMA_CheckFifoParam+0xe8>
        break;
 801c712:	bf00      	nop
 801c714:	e000      	b.n	801c718 <DMA_CheckFifoParam+0xe8>
    break;
 801c716:	bf00      	nop
    }
  }

  return status;
 801c718:	7bfb      	ldrb	r3, [r7, #15]
}
 801c71a:	4618      	mov	r0, r3
 801c71c:	3714      	adds	r7, #20
 801c71e:	46bd      	mov	sp, r7
 801c720:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c724:	4770      	bx	lr
 801c726:	bf00      	nop

0801c728 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801c728:	b480      	push	{r7}
 801c72a:	b085      	sub	sp, #20
 801c72c:	af00      	add	r7, sp, #0
 801c72e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 801c730:	687b      	ldr	r3, [r7, #4]
 801c732:	681b      	ldr	r3, [r3, #0]
 801c734:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801c736:	687b      	ldr	r3, [r7, #4]
 801c738:	681b      	ldr	r3, [r3, #0]
 801c73a:	4a38      	ldr	r2, [pc, #224]	@ (801c81c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 801c73c:	4293      	cmp	r3, r2
 801c73e:	d022      	beq.n	801c786 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c740:	687b      	ldr	r3, [r7, #4]
 801c742:	681b      	ldr	r3, [r3, #0]
 801c744:	4a36      	ldr	r2, [pc, #216]	@ (801c820 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 801c746:	4293      	cmp	r3, r2
 801c748:	d01d      	beq.n	801c786 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c74a:	687b      	ldr	r3, [r7, #4]
 801c74c:	681b      	ldr	r3, [r3, #0]
 801c74e:	4a35      	ldr	r2, [pc, #212]	@ (801c824 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 801c750:	4293      	cmp	r3, r2
 801c752:	d018      	beq.n	801c786 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c754:	687b      	ldr	r3, [r7, #4]
 801c756:	681b      	ldr	r3, [r3, #0]
 801c758:	4a33      	ldr	r2, [pc, #204]	@ (801c828 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 801c75a:	4293      	cmp	r3, r2
 801c75c:	d013      	beq.n	801c786 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c75e:	687b      	ldr	r3, [r7, #4]
 801c760:	681b      	ldr	r3, [r3, #0]
 801c762:	4a32      	ldr	r2, [pc, #200]	@ (801c82c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 801c764:	4293      	cmp	r3, r2
 801c766:	d00e      	beq.n	801c786 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c768:	687b      	ldr	r3, [r7, #4]
 801c76a:	681b      	ldr	r3, [r3, #0]
 801c76c:	4a30      	ldr	r2, [pc, #192]	@ (801c830 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 801c76e:	4293      	cmp	r3, r2
 801c770:	d009      	beq.n	801c786 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c772:	687b      	ldr	r3, [r7, #4]
 801c774:	681b      	ldr	r3, [r3, #0]
 801c776:	4a2f      	ldr	r2, [pc, #188]	@ (801c834 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 801c778:	4293      	cmp	r3, r2
 801c77a:	d004      	beq.n	801c786 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c77c:	687b      	ldr	r3, [r7, #4]
 801c77e:	681b      	ldr	r3, [r3, #0]
 801c780:	4a2d      	ldr	r2, [pc, #180]	@ (801c838 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 801c782:	4293      	cmp	r3, r2
 801c784:	d101      	bne.n	801c78a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 801c786:	2301      	movs	r3, #1
 801c788:	e000      	b.n	801c78c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 801c78a:	2300      	movs	r3, #0
 801c78c:	2b00      	cmp	r3, #0
 801c78e:	d01a      	beq.n	801c7c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 801c790:	687b      	ldr	r3, [r7, #4]
 801c792:	681b      	ldr	r3, [r3, #0]
 801c794:	b2db      	uxtb	r3, r3
 801c796:	3b08      	subs	r3, #8
 801c798:	4a28      	ldr	r2, [pc, #160]	@ (801c83c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 801c79a:	fba2 2303 	umull	r2, r3, r2, r3
 801c79e:	091b      	lsrs	r3, r3, #4
 801c7a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 801c7a2:	68fa      	ldr	r2, [r7, #12]
 801c7a4:	4b26      	ldr	r3, [pc, #152]	@ (801c840 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 801c7a6:	4413      	add	r3, r2
 801c7a8:	009b      	lsls	r3, r3, #2
 801c7aa:	461a      	mov	r2, r3
 801c7ac:	687b      	ldr	r3, [r7, #4]
 801c7ae:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 801c7b0:	687b      	ldr	r3, [r7, #4]
 801c7b2:	4a24      	ldr	r2, [pc, #144]	@ (801c844 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 801c7b4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801c7b6:	68fb      	ldr	r3, [r7, #12]
 801c7b8:	f003 031f 	and.w	r3, r3, #31
 801c7bc:	2201      	movs	r2, #1
 801c7be:	409a      	lsls	r2, r3
 801c7c0:	687b      	ldr	r3, [r7, #4]
 801c7c2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 801c7c4:	e024      	b.n	801c810 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801c7c6:	687b      	ldr	r3, [r7, #4]
 801c7c8:	681b      	ldr	r3, [r3, #0]
 801c7ca:	b2db      	uxtb	r3, r3
 801c7cc:	3b10      	subs	r3, #16
 801c7ce:	4a1e      	ldr	r2, [pc, #120]	@ (801c848 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 801c7d0:	fba2 2303 	umull	r2, r3, r2, r3
 801c7d4:	091b      	lsrs	r3, r3, #4
 801c7d6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 801c7d8:	68bb      	ldr	r3, [r7, #8]
 801c7da:	4a1c      	ldr	r2, [pc, #112]	@ (801c84c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 801c7dc:	4293      	cmp	r3, r2
 801c7de:	d806      	bhi.n	801c7ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 801c7e0:	68bb      	ldr	r3, [r7, #8]
 801c7e2:	4a1b      	ldr	r2, [pc, #108]	@ (801c850 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 801c7e4:	4293      	cmp	r3, r2
 801c7e6:	d902      	bls.n	801c7ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 801c7e8:	68fb      	ldr	r3, [r7, #12]
 801c7ea:	3308      	adds	r3, #8
 801c7ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 801c7ee:	68fa      	ldr	r2, [r7, #12]
 801c7f0:	4b18      	ldr	r3, [pc, #96]	@ (801c854 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 801c7f2:	4413      	add	r3, r2
 801c7f4:	009b      	lsls	r3, r3, #2
 801c7f6:	461a      	mov	r2, r3
 801c7f8:	687b      	ldr	r3, [r7, #4]
 801c7fa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801c7fc:	687b      	ldr	r3, [r7, #4]
 801c7fe:	4a16      	ldr	r2, [pc, #88]	@ (801c858 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 801c800:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801c802:	68fb      	ldr	r3, [r7, #12]
 801c804:	f003 031f 	and.w	r3, r3, #31
 801c808:	2201      	movs	r2, #1
 801c80a:	409a      	lsls	r2, r3
 801c80c:	687b      	ldr	r3, [r7, #4]
 801c80e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801c810:	bf00      	nop
 801c812:	3714      	adds	r7, #20
 801c814:	46bd      	mov	sp, r7
 801c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c81a:	4770      	bx	lr
 801c81c:	58025408 	.word	0x58025408
 801c820:	5802541c 	.word	0x5802541c
 801c824:	58025430 	.word	0x58025430
 801c828:	58025444 	.word	0x58025444
 801c82c:	58025458 	.word	0x58025458
 801c830:	5802546c 	.word	0x5802546c
 801c834:	58025480 	.word	0x58025480
 801c838:	58025494 	.word	0x58025494
 801c83c:	cccccccd 	.word	0xcccccccd
 801c840:	16009600 	.word	0x16009600
 801c844:	58025880 	.word	0x58025880
 801c848:	aaaaaaab 	.word	0xaaaaaaab
 801c84c:	400204b8 	.word	0x400204b8
 801c850:	4002040f 	.word	0x4002040f
 801c854:	10008200 	.word	0x10008200
 801c858:	40020880 	.word	0x40020880

0801c85c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801c85c:	b480      	push	{r7}
 801c85e:	b085      	sub	sp, #20
 801c860:	af00      	add	r7, sp, #0
 801c862:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801c864:	687b      	ldr	r3, [r7, #4]
 801c866:	685b      	ldr	r3, [r3, #4]
 801c868:	b2db      	uxtb	r3, r3
 801c86a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 801c86c:	68fb      	ldr	r3, [r7, #12]
 801c86e:	2b00      	cmp	r3, #0
 801c870:	d04a      	beq.n	801c908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 801c872:	68fb      	ldr	r3, [r7, #12]
 801c874:	2b08      	cmp	r3, #8
 801c876:	d847      	bhi.n	801c908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	681b      	ldr	r3, [r3, #0]
 801c87c:	4a25      	ldr	r2, [pc, #148]	@ (801c914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 801c87e:	4293      	cmp	r3, r2
 801c880:	d022      	beq.n	801c8c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c882:	687b      	ldr	r3, [r7, #4]
 801c884:	681b      	ldr	r3, [r3, #0]
 801c886:	4a24      	ldr	r2, [pc, #144]	@ (801c918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 801c888:	4293      	cmp	r3, r2
 801c88a:	d01d      	beq.n	801c8c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c88c:	687b      	ldr	r3, [r7, #4]
 801c88e:	681b      	ldr	r3, [r3, #0]
 801c890:	4a22      	ldr	r2, [pc, #136]	@ (801c91c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 801c892:	4293      	cmp	r3, r2
 801c894:	d018      	beq.n	801c8c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c896:	687b      	ldr	r3, [r7, #4]
 801c898:	681b      	ldr	r3, [r3, #0]
 801c89a:	4a21      	ldr	r2, [pc, #132]	@ (801c920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 801c89c:	4293      	cmp	r3, r2
 801c89e:	d013      	beq.n	801c8c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c8a0:	687b      	ldr	r3, [r7, #4]
 801c8a2:	681b      	ldr	r3, [r3, #0]
 801c8a4:	4a1f      	ldr	r2, [pc, #124]	@ (801c924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 801c8a6:	4293      	cmp	r3, r2
 801c8a8:	d00e      	beq.n	801c8c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c8aa:	687b      	ldr	r3, [r7, #4]
 801c8ac:	681b      	ldr	r3, [r3, #0]
 801c8ae:	4a1e      	ldr	r2, [pc, #120]	@ (801c928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 801c8b0:	4293      	cmp	r3, r2
 801c8b2:	d009      	beq.n	801c8c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c8b4:	687b      	ldr	r3, [r7, #4]
 801c8b6:	681b      	ldr	r3, [r3, #0]
 801c8b8:	4a1c      	ldr	r2, [pc, #112]	@ (801c92c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 801c8ba:	4293      	cmp	r3, r2
 801c8bc:	d004      	beq.n	801c8c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c8be:	687b      	ldr	r3, [r7, #4]
 801c8c0:	681b      	ldr	r3, [r3, #0]
 801c8c2:	4a1b      	ldr	r2, [pc, #108]	@ (801c930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 801c8c4:	4293      	cmp	r3, r2
 801c8c6:	d101      	bne.n	801c8cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 801c8c8:	2301      	movs	r3, #1
 801c8ca:	e000      	b.n	801c8ce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 801c8cc:	2300      	movs	r3, #0
 801c8ce:	2b00      	cmp	r3, #0
 801c8d0:	d00a      	beq.n	801c8e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 801c8d2:	68fa      	ldr	r2, [r7, #12]
 801c8d4:	4b17      	ldr	r3, [pc, #92]	@ (801c934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 801c8d6:	4413      	add	r3, r2
 801c8d8:	009b      	lsls	r3, r3, #2
 801c8da:	461a      	mov	r2, r3
 801c8dc:	687b      	ldr	r3, [r7, #4]
 801c8de:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 801c8e0:	687b      	ldr	r3, [r7, #4]
 801c8e2:	4a15      	ldr	r2, [pc, #84]	@ (801c938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 801c8e4:	671a      	str	r2, [r3, #112]	@ 0x70
 801c8e6:	e009      	b.n	801c8fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801c8e8:	68fa      	ldr	r2, [r7, #12]
 801c8ea:	4b14      	ldr	r3, [pc, #80]	@ (801c93c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 801c8ec:	4413      	add	r3, r2
 801c8ee:	009b      	lsls	r3, r3, #2
 801c8f0:	461a      	mov	r2, r3
 801c8f2:	687b      	ldr	r3, [r7, #4]
 801c8f4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801c8f6:	687b      	ldr	r3, [r7, #4]
 801c8f8:	4a11      	ldr	r2, [pc, #68]	@ (801c940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 801c8fa:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 801c8fc:	68fb      	ldr	r3, [r7, #12]
 801c8fe:	3b01      	subs	r3, #1
 801c900:	2201      	movs	r2, #1
 801c902:	409a      	lsls	r2, r3
 801c904:	687b      	ldr	r3, [r7, #4]
 801c906:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 801c908:	bf00      	nop
 801c90a:	3714      	adds	r7, #20
 801c90c:	46bd      	mov	sp, r7
 801c90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c912:	4770      	bx	lr
 801c914:	58025408 	.word	0x58025408
 801c918:	5802541c 	.word	0x5802541c
 801c91c:	58025430 	.word	0x58025430
 801c920:	58025444 	.word	0x58025444
 801c924:	58025458 	.word	0x58025458
 801c928:	5802546c 	.word	0x5802546c
 801c92c:	58025480 	.word	0x58025480
 801c930:	58025494 	.word	0x58025494
 801c934:	1600963f 	.word	0x1600963f
 801c938:	58025940 	.word	0x58025940
 801c93c:	1000823f 	.word	0x1000823f
 801c940:	40020940 	.word	0x40020940

0801c944 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801c944:	b480      	push	{r7}
 801c946:	b089      	sub	sp, #36	@ 0x24
 801c948:	af00      	add	r7, sp, #0
 801c94a:	6078      	str	r0, [r7, #4]
 801c94c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801c94e:	2300      	movs	r3, #0
 801c950:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801c952:	4b89      	ldr	r3, [pc, #548]	@ (801cb78 <HAL_GPIO_Init+0x234>)
 801c954:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801c956:	e194      	b.n	801cc82 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801c958:	683b      	ldr	r3, [r7, #0]
 801c95a:	681a      	ldr	r2, [r3, #0]
 801c95c:	2101      	movs	r1, #1
 801c95e:	69fb      	ldr	r3, [r7, #28]
 801c960:	fa01 f303 	lsl.w	r3, r1, r3
 801c964:	4013      	ands	r3, r2
 801c966:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801c968:	693b      	ldr	r3, [r7, #16]
 801c96a:	2b00      	cmp	r3, #0
 801c96c:	f000 8186 	beq.w	801cc7c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801c970:	683b      	ldr	r3, [r7, #0]
 801c972:	685b      	ldr	r3, [r3, #4]
 801c974:	f003 0303 	and.w	r3, r3, #3
 801c978:	2b01      	cmp	r3, #1
 801c97a:	d005      	beq.n	801c988 <HAL_GPIO_Init+0x44>
 801c97c:	683b      	ldr	r3, [r7, #0]
 801c97e:	685b      	ldr	r3, [r3, #4]
 801c980:	f003 0303 	and.w	r3, r3, #3
 801c984:	2b02      	cmp	r3, #2
 801c986:	d130      	bne.n	801c9ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801c988:	687b      	ldr	r3, [r7, #4]
 801c98a:	689b      	ldr	r3, [r3, #8]
 801c98c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801c98e:	69fb      	ldr	r3, [r7, #28]
 801c990:	005b      	lsls	r3, r3, #1
 801c992:	2203      	movs	r2, #3
 801c994:	fa02 f303 	lsl.w	r3, r2, r3
 801c998:	43db      	mvns	r3, r3
 801c99a:	69ba      	ldr	r2, [r7, #24]
 801c99c:	4013      	ands	r3, r2
 801c99e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801c9a0:	683b      	ldr	r3, [r7, #0]
 801c9a2:	68da      	ldr	r2, [r3, #12]
 801c9a4:	69fb      	ldr	r3, [r7, #28]
 801c9a6:	005b      	lsls	r3, r3, #1
 801c9a8:	fa02 f303 	lsl.w	r3, r2, r3
 801c9ac:	69ba      	ldr	r2, [r7, #24]
 801c9ae:	4313      	orrs	r3, r2
 801c9b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801c9b2:	687b      	ldr	r3, [r7, #4]
 801c9b4:	69ba      	ldr	r2, [r7, #24]
 801c9b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801c9b8:	687b      	ldr	r3, [r7, #4]
 801c9ba:	685b      	ldr	r3, [r3, #4]
 801c9bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801c9be:	2201      	movs	r2, #1
 801c9c0:	69fb      	ldr	r3, [r7, #28]
 801c9c2:	fa02 f303 	lsl.w	r3, r2, r3
 801c9c6:	43db      	mvns	r3, r3
 801c9c8:	69ba      	ldr	r2, [r7, #24]
 801c9ca:	4013      	ands	r3, r2
 801c9cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801c9ce:	683b      	ldr	r3, [r7, #0]
 801c9d0:	685b      	ldr	r3, [r3, #4]
 801c9d2:	091b      	lsrs	r3, r3, #4
 801c9d4:	f003 0201 	and.w	r2, r3, #1
 801c9d8:	69fb      	ldr	r3, [r7, #28]
 801c9da:	fa02 f303 	lsl.w	r3, r2, r3
 801c9de:	69ba      	ldr	r2, [r7, #24]
 801c9e0:	4313      	orrs	r3, r2
 801c9e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801c9e4:	687b      	ldr	r3, [r7, #4]
 801c9e6:	69ba      	ldr	r2, [r7, #24]
 801c9e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801c9ea:	683b      	ldr	r3, [r7, #0]
 801c9ec:	685b      	ldr	r3, [r3, #4]
 801c9ee:	f003 0303 	and.w	r3, r3, #3
 801c9f2:	2b03      	cmp	r3, #3
 801c9f4:	d017      	beq.n	801ca26 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801c9f6:	687b      	ldr	r3, [r7, #4]
 801c9f8:	68db      	ldr	r3, [r3, #12]
 801c9fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801c9fc:	69fb      	ldr	r3, [r7, #28]
 801c9fe:	005b      	lsls	r3, r3, #1
 801ca00:	2203      	movs	r2, #3
 801ca02:	fa02 f303 	lsl.w	r3, r2, r3
 801ca06:	43db      	mvns	r3, r3
 801ca08:	69ba      	ldr	r2, [r7, #24]
 801ca0a:	4013      	ands	r3, r2
 801ca0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801ca0e:	683b      	ldr	r3, [r7, #0]
 801ca10:	689a      	ldr	r2, [r3, #8]
 801ca12:	69fb      	ldr	r3, [r7, #28]
 801ca14:	005b      	lsls	r3, r3, #1
 801ca16:	fa02 f303 	lsl.w	r3, r2, r3
 801ca1a:	69ba      	ldr	r2, [r7, #24]
 801ca1c:	4313      	orrs	r3, r2
 801ca1e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801ca20:	687b      	ldr	r3, [r7, #4]
 801ca22:	69ba      	ldr	r2, [r7, #24]
 801ca24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801ca26:	683b      	ldr	r3, [r7, #0]
 801ca28:	685b      	ldr	r3, [r3, #4]
 801ca2a:	f003 0303 	and.w	r3, r3, #3
 801ca2e:	2b02      	cmp	r3, #2
 801ca30:	d123      	bne.n	801ca7a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801ca32:	69fb      	ldr	r3, [r7, #28]
 801ca34:	08da      	lsrs	r2, r3, #3
 801ca36:	687b      	ldr	r3, [r7, #4]
 801ca38:	3208      	adds	r2, #8
 801ca3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ca3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801ca40:	69fb      	ldr	r3, [r7, #28]
 801ca42:	f003 0307 	and.w	r3, r3, #7
 801ca46:	009b      	lsls	r3, r3, #2
 801ca48:	220f      	movs	r2, #15
 801ca4a:	fa02 f303 	lsl.w	r3, r2, r3
 801ca4e:	43db      	mvns	r3, r3
 801ca50:	69ba      	ldr	r2, [r7, #24]
 801ca52:	4013      	ands	r3, r2
 801ca54:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801ca56:	683b      	ldr	r3, [r7, #0]
 801ca58:	691a      	ldr	r2, [r3, #16]
 801ca5a:	69fb      	ldr	r3, [r7, #28]
 801ca5c:	f003 0307 	and.w	r3, r3, #7
 801ca60:	009b      	lsls	r3, r3, #2
 801ca62:	fa02 f303 	lsl.w	r3, r2, r3
 801ca66:	69ba      	ldr	r2, [r7, #24]
 801ca68:	4313      	orrs	r3, r2
 801ca6a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801ca6c:	69fb      	ldr	r3, [r7, #28]
 801ca6e:	08da      	lsrs	r2, r3, #3
 801ca70:	687b      	ldr	r3, [r7, #4]
 801ca72:	3208      	adds	r2, #8
 801ca74:	69b9      	ldr	r1, [r7, #24]
 801ca76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801ca7a:	687b      	ldr	r3, [r7, #4]
 801ca7c:	681b      	ldr	r3, [r3, #0]
 801ca7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801ca80:	69fb      	ldr	r3, [r7, #28]
 801ca82:	005b      	lsls	r3, r3, #1
 801ca84:	2203      	movs	r2, #3
 801ca86:	fa02 f303 	lsl.w	r3, r2, r3
 801ca8a:	43db      	mvns	r3, r3
 801ca8c:	69ba      	ldr	r2, [r7, #24]
 801ca8e:	4013      	ands	r3, r2
 801ca90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801ca92:	683b      	ldr	r3, [r7, #0]
 801ca94:	685b      	ldr	r3, [r3, #4]
 801ca96:	f003 0203 	and.w	r2, r3, #3
 801ca9a:	69fb      	ldr	r3, [r7, #28]
 801ca9c:	005b      	lsls	r3, r3, #1
 801ca9e:	fa02 f303 	lsl.w	r3, r2, r3
 801caa2:	69ba      	ldr	r2, [r7, #24]
 801caa4:	4313      	orrs	r3, r2
 801caa6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801caa8:	687b      	ldr	r3, [r7, #4]
 801caaa:	69ba      	ldr	r2, [r7, #24]
 801caac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801caae:	683b      	ldr	r3, [r7, #0]
 801cab0:	685b      	ldr	r3, [r3, #4]
 801cab2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801cab6:	2b00      	cmp	r3, #0
 801cab8:	f000 80e0 	beq.w	801cc7c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801cabc:	4b2f      	ldr	r3, [pc, #188]	@ (801cb7c <HAL_GPIO_Init+0x238>)
 801cabe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801cac2:	4a2e      	ldr	r2, [pc, #184]	@ (801cb7c <HAL_GPIO_Init+0x238>)
 801cac4:	f043 0302 	orr.w	r3, r3, #2
 801cac8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 801cacc:	4b2b      	ldr	r3, [pc, #172]	@ (801cb7c <HAL_GPIO_Init+0x238>)
 801cace:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801cad2:	f003 0302 	and.w	r3, r3, #2
 801cad6:	60fb      	str	r3, [r7, #12]
 801cad8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801cada:	4a29      	ldr	r2, [pc, #164]	@ (801cb80 <HAL_GPIO_Init+0x23c>)
 801cadc:	69fb      	ldr	r3, [r7, #28]
 801cade:	089b      	lsrs	r3, r3, #2
 801cae0:	3302      	adds	r3, #2
 801cae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801cae8:	69fb      	ldr	r3, [r7, #28]
 801caea:	f003 0303 	and.w	r3, r3, #3
 801caee:	009b      	lsls	r3, r3, #2
 801caf0:	220f      	movs	r2, #15
 801caf2:	fa02 f303 	lsl.w	r3, r2, r3
 801caf6:	43db      	mvns	r3, r3
 801caf8:	69ba      	ldr	r2, [r7, #24]
 801cafa:	4013      	ands	r3, r2
 801cafc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801cafe:	687b      	ldr	r3, [r7, #4]
 801cb00:	4a20      	ldr	r2, [pc, #128]	@ (801cb84 <HAL_GPIO_Init+0x240>)
 801cb02:	4293      	cmp	r3, r2
 801cb04:	d052      	beq.n	801cbac <HAL_GPIO_Init+0x268>
 801cb06:	687b      	ldr	r3, [r7, #4]
 801cb08:	4a1f      	ldr	r2, [pc, #124]	@ (801cb88 <HAL_GPIO_Init+0x244>)
 801cb0a:	4293      	cmp	r3, r2
 801cb0c:	d031      	beq.n	801cb72 <HAL_GPIO_Init+0x22e>
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	4a1e      	ldr	r2, [pc, #120]	@ (801cb8c <HAL_GPIO_Init+0x248>)
 801cb12:	4293      	cmp	r3, r2
 801cb14:	d02b      	beq.n	801cb6e <HAL_GPIO_Init+0x22a>
 801cb16:	687b      	ldr	r3, [r7, #4]
 801cb18:	4a1d      	ldr	r2, [pc, #116]	@ (801cb90 <HAL_GPIO_Init+0x24c>)
 801cb1a:	4293      	cmp	r3, r2
 801cb1c:	d025      	beq.n	801cb6a <HAL_GPIO_Init+0x226>
 801cb1e:	687b      	ldr	r3, [r7, #4]
 801cb20:	4a1c      	ldr	r2, [pc, #112]	@ (801cb94 <HAL_GPIO_Init+0x250>)
 801cb22:	4293      	cmp	r3, r2
 801cb24:	d01f      	beq.n	801cb66 <HAL_GPIO_Init+0x222>
 801cb26:	687b      	ldr	r3, [r7, #4]
 801cb28:	4a1b      	ldr	r2, [pc, #108]	@ (801cb98 <HAL_GPIO_Init+0x254>)
 801cb2a:	4293      	cmp	r3, r2
 801cb2c:	d019      	beq.n	801cb62 <HAL_GPIO_Init+0x21e>
 801cb2e:	687b      	ldr	r3, [r7, #4]
 801cb30:	4a1a      	ldr	r2, [pc, #104]	@ (801cb9c <HAL_GPIO_Init+0x258>)
 801cb32:	4293      	cmp	r3, r2
 801cb34:	d013      	beq.n	801cb5e <HAL_GPIO_Init+0x21a>
 801cb36:	687b      	ldr	r3, [r7, #4]
 801cb38:	4a19      	ldr	r2, [pc, #100]	@ (801cba0 <HAL_GPIO_Init+0x25c>)
 801cb3a:	4293      	cmp	r3, r2
 801cb3c:	d00d      	beq.n	801cb5a <HAL_GPIO_Init+0x216>
 801cb3e:	687b      	ldr	r3, [r7, #4]
 801cb40:	4a18      	ldr	r2, [pc, #96]	@ (801cba4 <HAL_GPIO_Init+0x260>)
 801cb42:	4293      	cmp	r3, r2
 801cb44:	d007      	beq.n	801cb56 <HAL_GPIO_Init+0x212>
 801cb46:	687b      	ldr	r3, [r7, #4]
 801cb48:	4a17      	ldr	r2, [pc, #92]	@ (801cba8 <HAL_GPIO_Init+0x264>)
 801cb4a:	4293      	cmp	r3, r2
 801cb4c:	d101      	bne.n	801cb52 <HAL_GPIO_Init+0x20e>
 801cb4e:	2309      	movs	r3, #9
 801cb50:	e02d      	b.n	801cbae <HAL_GPIO_Init+0x26a>
 801cb52:	230a      	movs	r3, #10
 801cb54:	e02b      	b.n	801cbae <HAL_GPIO_Init+0x26a>
 801cb56:	2308      	movs	r3, #8
 801cb58:	e029      	b.n	801cbae <HAL_GPIO_Init+0x26a>
 801cb5a:	2307      	movs	r3, #7
 801cb5c:	e027      	b.n	801cbae <HAL_GPIO_Init+0x26a>
 801cb5e:	2306      	movs	r3, #6
 801cb60:	e025      	b.n	801cbae <HAL_GPIO_Init+0x26a>
 801cb62:	2305      	movs	r3, #5
 801cb64:	e023      	b.n	801cbae <HAL_GPIO_Init+0x26a>
 801cb66:	2304      	movs	r3, #4
 801cb68:	e021      	b.n	801cbae <HAL_GPIO_Init+0x26a>
 801cb6a:	2303      	movs	r3, #3
 801cb6c:	e01f      	b.n	801cbae <HAL_GPIO_Init+0x26a>
 801cb6e:	2302      	movs	r3, #2
 801cb70:	e01d      	b.n	801cbae <HAL_GPIO_Init+0x26a>
 801cb72:	2301      	movs	r3, #1
 801cb74:	e01b      	b.n	801cbae <HAL_GPIO_Init+0x26a>
 801cb76:	bf00      	nop
 801cb78:	58000080 	.word	0x58000080
 801cb7c:	58024400 	.word	0x58024400
 801cb80:	58000400 	.word	0x58000400
 801cb84:	58020000 	.word	0x58020000
 801cb88:	58020400 	.word	0x58020400
 801cb8c:	58020800 	.word	0x58020800
 801cb90:	58020c00 	.word	0x58020c00
 801cb94:	58021000 	.word	0x58021000
 801cb98:	58021400 	.word	0x58021400
 801cb9c:	58021800 	.word	0x58021800
 801cba0:	58021c00 	.word	0x58021c00
 801cba4:	58022000 	.word	0x58022000
 801cba8:	58022400 	.word	0x58022400
 801cbac:	2300      	movs	r3, #0
 801cbae:	69fa      	ldr	r2, [r7, #28]
 801cbb0:	f002 0203 	and.w	r2, r2, #3
 801cbb4:	0092      	lsls	r2, r2, #2
 801cbb6:	4093      	lsls	r3, r2
 801cbb8:	69ba      	ldr	r2, [r7, #24]
 801cbba:	4313      	orrs	r3, r2
 801cbbc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801cbbe:	4938      	ldr	r1, [pc, #224]	@ (801cca0 <HAL_GPIO_Init+0x35c>)
 801cbc0:	69fb      	ldr	r3, [r7, #28]
 801cbc2:	089b      	lsrs	r3, r3, #2
 801cbc4:	3302      	adds	r3, #2
 801cbc6:	69ba      	ldr	r2, [r7, #24]
 801cbc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801cbcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801cbd0:	681b      	ldr	r3, [r3, #0]
 801cbd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801cbd4:	693b      	ldr	r3, [r7, #16]
 801cbd6:	43db      	mvns	r3, r3
 801cbd8:	69ba      	ldr	r2, [r7, #24]
 801cbda:	4013      	ands	r3, r2
 801cbdc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801cbde:	683b      	ldr	r3, [r7, #0]
 801cbe0:	685b      	ldr	r3, [r3, #4]
 801cbe2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801cbe6:	2b00      	cmp	r3, #0
 801cbe8:	d003      	beq.n	801cbf2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801cbea:	69ba      	ldr	r2, [r7, #24]
 801cbec:	693b      	ldr	r3, [r7, #16]
 801cbee:	4313      	orrs	r3, r2
 801cbf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801cbf2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801cbf6:	69bb      	ldr	r3, [r7, #24]
 801cbf8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801cbfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801cbfe:	685b      	ldr	r3, [r3, #4]
 801cc00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801cc02:	693b      	ldr	r3, [r7, #16]
 801cc04:	43db      	mvns	r3, r3
 801cc06:	69ba      	ldr	r2, [r7, #24]
 801cc08:	4013      	ands	r3, r2
 801cc0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801cc0c:	683b      	ldr	r3, [r7, #0]
 801cc0e:	685b      	ldr	r3, [r3, #4]
 801cc10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801cc14:	2b00      	cmp	r3, #0
 801cc16:	d003      	beq.n	801cc20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 801cc18:	69ba      	ldr	r2, [r7, #24]
 801cc1a:	693b      	ldr	r3, [r7, #16]
 801cc1c:	4313      	orrs	r3, r2
 801cc1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801cc20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801cc24:	69bb      	ldr	r3, [r7, #24]
 801cc26:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801cc28:	697b      	ldr	r3, [r7, #20]
 801cc2a:	685b      	ldr	r3, [r3, #4]
 801cc2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801cc2e:	693b      	ldr	r3, [r7, #16]
 801cc30:	43db      	mvns	r3, r3
 801cc32:	69ba      	ldr	r2, [r7, #24]
 801cc34:	4013      	ands	r3, r2
 801cc36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801cc38:	683b      	ldr	r3, [r7, #0]
 801cc3a:	685b      	ldr	r3, [r3, #4]
 801cc3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801cc40:	2b00      	cmp	r3, #0
 801cc42:	d003      	beq.n	801cc4c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 801cc44:	69ba      	ldr	r2, [r7, #24]
 801cc46:	693b      	ldr	r3, [r7, #16]
 801cc48:	4313      	orrs	r3, r2
 801cc4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801cc4c:	697b      	ldr	r3, [r7, #20]
 801cc4e:	69ba      	ldr	r2, [r7, #24]
 801cc50:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801cc52:	697b      	ldr	r3, [r7, #20]
 801cc54:	681b      	ldr	r3, [r3, #0]
 801cc56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801cc58:	693b      	ldr	r3, [r7, #16]
 801cc5a:	43db      	mvns	r3, r3
 801cc5c:	69ba      	ldr	r2, [r7, #24]
 801cc5e:	4013      	ands	r3, r2
 801cc60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801cc62:	683b      	ldr	r3, [r7, #0]
 801cc64:	685b      	ldr	r3, [r3, #4]
 801cc66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801cc6a:	2b00      	cmp	r3, #0
 801cc6c:	d003      	beq.n	801cc76 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 801cc6e:	69ba      	ldr	r2, [r7, #24]
 801cc70:	693b      	ldr	r3, [r7, #16]
 801cc72:	4313      	orrs	r3, r2
 801cc74:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801cc76:	697b      	ldr	r3, [r7, #20]
 801cc78:	69ba      	ldr	r2, [r7, #24]
 801cc7a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801cc7c:	69fb      	ldr	r3, [r7, #28]
 801cc7e:	3301      	adds	r3, #1
 801cc80:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801cc82:	683b      	ldr	r3, [r7, #0]
 801cc84:	681a      	ldr	r2, [r3, #0]
 801cc86:	69fb      	ldr	r3, [r7, #28]
 801cc88:	fa22 f303 	lsr.w	r3, r2, r3
 801cc8c:	2b00      	cmp	r3, #0
 801cc8e:	f47f ae63 	bne.w	801c958 <HAL_GPIO_Init+0x14>
  }
}
 801cc92:	bf00      	nop
 801cc94:	bf00      	nop
 801cc96:	3724      	adds	r7, #36	@ 0x24
 801cc98:	46bd      	mov	sp, r7
 801cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc9e:	4770      	bx	lr
 801cca0:	58000400 	.word	0x58000400

0801cca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801cca4:	b480      	push	{r7}
 801cca6:	b083      	sub	sp, #12
 801cca8:	af00      	add	r7, sp, #0
 801ccaa:	6078      	str	r0, [r7, #4]
 801ccac:	460b      	mov	r3, r1
 801ccae:	807b      	strh	r3, [r7, #2]
 801ccb0:	4613      	mov	r3, r2
 801ccb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801ccb4:	787b      	ldrb	r3, [r7, #1]
 801ccb6:	2b00      	cmp	r3, #0
 801ccb8:	d003      	beq.n	801ccc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801ccba:	887a      	ldrh	r2, [r7, #2]
 801ccbc:	687b      	ldr	r3, [r7, #4]
 801ccbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 801ccc0:	e003      	b.n	801ccca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801ccc2:	887b      	ldrh	r3, [r7, #2]
 801ccc4:	041a      	lsls	r2, r3, #16
 801ccc6:	687b      	ldr	r3, [r7, #4]
 801ccc8:	619a      	str	r2, [r3, #24]
}
 801ccca:	bf00      	nop
 801cccc:	370c      	adds	r7, #12
 801ccce:	46bd      	mov	sp, r7
 801ccd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ccd4:	4770      	bx	lr
	...

0801ccd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801ccd8:	b580      	push	{r7, lr}
 801ccda:	b082      	sub	sp, #8
 801ccdc:	af00      	add	r7, sp, #0
 801ccde:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801cce0:	687b      	ldr	r3, [r7, #4]
 801cce2:	2b00      	cmp	r3, #0
 801cce4:	d101      	bne.n	801ccea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801cce6:	2301      	movs	r3, #1
 801cce8:	e08b      	b.n	801ce02 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801ccea:	687b      	ldr	r3, [r7, #4]
 801ccec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801ccf0:	b2db      	uxtb	r3, r3
 801ccf2:	2b00      	cmp	r3, #0
 801ccf4:	d106      	bne.n	801cd04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801ccf6:	687b      	ldr	r3, [r7, #4]
 801ccf8:	2200      	movs	r2, #0
 801ccfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801ccfe:	6878      	ldr	r0, [r7, #4]
 801cd00:	f7e5 fc74 	bl	80025ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801cd04:	687b      	ldr	r3, [r7, #4]
 801cd06:	2224      	movs	r2, #36	@ 0x24
 801cd08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801cd0c:	687b      	ldr	r3, [r7, #4]
 801cd0e:	681b      	ldr	r3, [r3, #0]
 801cd10:	681a      	ldr	r2, [r3, #0]
 801cd12:	687b      	ldr	r3, [r7, #4]
 801cd14:	681b      	ldr	r3, [r3, #0]
 801cd16:	f022 0201 	bic.w	r2, r2, #1
 801cd1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801cd1c:	687b      	ldr	r3, [r7, #4]
 801cd1e:	685a      	ldr	r2, [r3, #4]
 801cd20:	687b      	ldr	r3, [r7, #4]
 801cd22:	681b      	ldr	r3, [r3, #0]
 801cd24:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 801cd28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801cd2a:	687b      	ldr	r3, [r7, #4]
 801cd2c:	681b      	ldr	r3, [r3, #0]
 801cd2e:	689a      	ldr	r2, [r3, #8]
 801cd30:	687b      	ldr	r3, [r7, #4]
 801cd32:	681b      	ldr	r3, [r3, #0]
 801cd34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801cd38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801cd3a:	687b      	ldr	r3, [r7, #4]
 801cd3c:	68db      	ldr	r3, [r3, #12]
 801cd3e:	2b01      	cmp	r3, #1
 801cd40:	d107      	bne.n	801cd52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801cd42:	687b      	ldr	r3, [r7, #4]
 801cd44:	689a      	ldr	r2, [r3, #8]
 801cd46:	687b      	ldr	r3, [r7, #4]
 801cd48:	681b      	ldr	r3, [r3, #0]
 801cd4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801cd4e:	609a      	str	r2, [r3, #8]
 801cd50:	e006      	b.n	801cd60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801cd52:	687b      	ldr	r3, [r7, #4]
 801cd54:	689a      	ldr	r2, [r3, #8]
 801cd56:	687b      	ldr	r3, [r7, #4]
 801cd58:	681b      	ldr	r3, [r3, #0]
 801cd5a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 801cd5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801cd60:	687b      	ldr	r3, [r7, #4]
 801cd62:	68db      	ldr	r3, [r3, #12]
 801cd64:	2b02      	cmp	r3, #2
 801cd66:	d108      	bne.n	801cd7a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801cd68:	687b      	ldr	r3, [r7, #4]
 801cd6a:	681b      	ldr	r3, [r3, #0]
 801cd6c:	685a      	ldr	r2, [r3, #4]
 801cd6e:	687b      	ldr	r3, [r7, #4]
 801cd70:	681b      	ldr	r3, [r3, #0]
 801cd72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801cd76:	605a      	str	r2, [r3, #4]
 801cd78:	e007      	b.n	801cd8a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801cd7a:	687b      	ldr	r3, [r7, #4]
 801cd7c:	681b      	ldr	r3, [r3, #0]
 801cd7e:	685a      	ldr	r2, [r3, #4]
 801cd80:	687b      	ldr	r3, [r7, #4]
 801cd82:	681b      	ldr	r3, [r3, #0]
 801cd84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801cd88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801cd8a:	687b      	ldr	r3, [r7, #4]
 801cd8c:	681b      	ldr	r3, [r3, #0]
 801cd8e:	6859      	ldr	r1, [r3, #4]
 801cd90:	687b      	ldr	r3, [r7, #4]
 801cd92:	681a      	ldr	r2, [r3, #0]
 801cd94:	4b1d      	ldr	r3, [pc, #116]	@ (801ce0c <HAL_I2C_Init+0x134>)
 801cd96:	430b      	orrs	r3, r1
 801cd98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801cd9a:	687b      	ldr	r3, [r7, #4]
 801cd9c:	681b      	ldr	r3, [r3, #0]
 801cd9e:	68da      	ldr	r2, [r3, #12]
 801cda0:	687b      	ldr	r3, [r7, #4]
 801cda2:	681b      	ldr	r3, [r3, #0]
 801cda4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801cda8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801cdaa:	687b      	ldr	r3, [r7, #4]
 801cdac:	691a      	ldr	r2, [r3, #16]
 801cdae:	687b      	ldr	r3, [r7, #4]
 801cdb0:	695b      	ldr	r3, [r3, #20]
 801cdb2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801cdb6:	687b      	ldr	r3, [r7, #4]
 801cdb8:	699b      	ldr	r3, [r3, #24]
 801cdba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801cdbc:	687b      	ldr	r3, [r7, #4]
 801cdbe:	681b      	ldr	r3, [r3, #0]
 801cdc0:	430a      	orrs	r2, r1
 801cdc2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801cdc4:	687b      	ldr	r3, [r7, #4]
 801cdc6:	69d9      	ldr	r1, [r3, #28]
 801cdc8:	687b      	ldr	r3, [r7, #4]
 801cdca:	6a1a      	ldr	r2, [r3, #32]
 801cdcc:	687b      	ldr	r3, [r7, #4]
 801cdce:	681b      	ldr	r3, [r3, #0]
 801cdd0:	430a      	orrs	r2, r1
 801cdd2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801cdd4:	687b      	ldr	r3, [r7, #4]
 801cdd6:	681b      	ldr	r3, [r3, #0]
 801cdd8:	681a      	ldr	r2, [r3, #0]
 801cdda:	687b      	ldr	r3, [r7, #4]
 801cddc:	681b      	ldr	r3, [r3, #0]
 801cdde:	f042 0201 	orr.w	r2, r2, #1
 801cde2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801cde4:	687b      	ldr	r3, [r7, #4]
 801cde6:	2200      	movs	r2, #0
 801cde8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801cdea:	687b      	ldr	r3, [r7, #4]
 801cdec:	2220      	movs	r2, #32
 801cdee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801cdf2:	687b      	ldr	r3, [r7, #4]
 801cdf4:	2200      	movs	r2, #0
 801cdf6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801cdf8:	687b      	ldr	r3, [r7, #4]
 801cdfa:	2200      	movs	r2, #0
 801cdfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 801ce00:	2300      	movs	r3, #0
}
 801ce02:	4618      	mov	r0, r3
 801ce04:	3708      	adds	r7, #8
 801ce06:	46bd      	mov	sp, r7
 801ce08:	bd80      	pop	{r7, pc}
 801ce0a:	bf00      	nop
 801ce0c:	02008000 	.word	0x02008000

0801ce10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801ce10:	b480      	push	{r7}
 801ce12:	b083      	sub	sp, #12
 801ce14:	af00      	add	r7, sp, #0
 801ce16:	6078      	str	r0, [r7, #4]
 801ce18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801ce1a:	687b      	ldr	r3, [r7, #4]
 801ce1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801ce20:	b2db      	uxtb	r3, r3
 801ce22:	2b20      	cmp	r3, #32
 801ce24:	d138      	bne.n	801ce98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801ce26:	687b      	ldr	r3, [r7, #4]
 801ce28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801ce2c:	2b01      	cmp	r3, #1
 801ce2e:	d101      	bne.n	801ce34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801ce30:	2302      	movs	r3, #2
 801ce32:	e032      	b.n	801ce9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801ce34:	687b      	ldr	r3, [r7, #4]
 801ce36:	2201      	movs	r2, #1
 801ce38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801ce3c:	687b      	ldr	r3, [r7, #4]
 801ce3e:	2224      	movs	r2, #36	@ 0x24
 801ce40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801ce44:	687b      	ldr	r3, [r7, #4]
 801ce46:	681b      	ldr	r3, [r3, #0]
 801ce48:	681a      	ldr	r2, [r3, #0]
 801ce4a:	687b      	ldr	r3, [r7, #4]
 801ce4c:	681b      	ldr	r3, [r3, #0]
 801ce4e:	f022 0201 	bic.w	r2, r2, #1
 801ce52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801ce54:	687b      	ldr	r3, [r7, #4]
 801ce56:	681b      	ldr	r3, [r3, #0]
 801ce58:	681a      	ldr	r2, [r3, #0]
 801ce5a:	687b      	ldr	r3, [r7, #4]
 801ce5c:	681b      	ldr	r3, [r3, #0]
 801ce5e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 801ce62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801ce64:	687b      	ldr	r3, [r7, #4]
 801ce66:	681b      	ldr	r3, [r3, #0]
 801ce68:	6819      	ldr	r1, [r3, #0]
 801ce6a:	687b      	ldr	r3, [r7, #4]
 801ce6c:	681b      	ldr	r3, [r3, #0]
 801ce6e:	683a      	ldr	r2, [r7, #0]
 801ce70:	430a      	orrs	r2, r1
 801ce72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	681b      	ldr	r3, [r3, #0]
 801ce78:	681a      	ldr	r2, [r3, #0]
 801ce7a:	687b      	ldr	r3, [r7, #4]
 801ce7c:	681b      	ldr	r3, [r3, #0]
 801ce7e:	f042 0201 	orr.w	r2, r2, #1
 801ce82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801ce84:	687b      	ldr	r3, [r7, #4]
 801ce86:	2220      	movs	r2, #32
 801ce88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801ce8c:	687b      	ldr	r3, [r7, #4]
 801ce8e:	2200      	movs	r2, #0
 801ce90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801ce94:	2300      	movs	r3, #0
 801ce96:	e000      	b.n	801ce9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801ce98:	2302      	movs	r3, #2
  }
}
 801ce9a:	4618      	mov	r0, r3
 801ce9c:	370c      	adds	r7, #12
 801ce9e:	46bd      	mov	sp, r7
 801cea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cea4:	4770      	bx	lr

0801cea6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801cea6:	b480      	push	{r7}
 801cea8:	b085      	sub	sp, #20
 801ceaa:	af00      	add	r7, sp, #0
 801ceac:	6078      	str	r0, [r7, #4]
 801ceae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801ceb0:	687b      	ldr	r3, [r7, #4]
 801ceb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801ceb6:	b2db      	uxtb	r3, r3
 801ceb8:	2b20      	cmp	r3, #32
 801ceba:	d139      	bne.n	801cf30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801cebc:	687b      	ldr	r3, [r7, #4]
 801cebe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801cec2:	2b01      	cmp	r3, #1
 801cec4:	d101      	bne.n	801ceca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801cec6:	2302      	movs	r3, #2
 801cec8:	e033      	b.n	801cf32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801ceca:	687b      	ldr	r3, [r7, #4]
 801cecc:	2201      	movs	r2, #1
 801cece:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801ced2:	687b      	ldr	r3, [r7, #4]
 801ced4:	2224      	movs	r2, #36	@ 0x24
 801ced6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801ceda:	687b      	ldr	r3, [r7, #4]
 801cedc:	681b      	ldr	r3, [r3, #0]
 801cede:	681a      	ldr	r2, [r3, #0]
 801cee0:	687b      	ldr	r3, [r7, #4]
 801cee2:	681b      	ldr	r3, [r3, #0]
 801cee4:	f022 0201 	bic.w	r2, r2, #1
 801cee8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801ceea:	687b      	ldr	r3, [r7, #4]
 801ceec:	681b      	ldr	r3, [r3, #0]
 801ceee:	681b      	ldr	r3, [r3, #0]
 801cef0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801cef2:	68fb      	ldr	r3, [r7, #12]
 801cef4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 801cef8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801cefa:	683b      	ldr	r3, [r7, #0]
 801cefc:	021b      	lsls	r3, r3, #8
 801cefe:	68fa      	ldr	r2, [r7, #12]
 801cf00:	4313      	orrs	r3, r2
 801cf02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801cf04:	687b      	ldr	r3, [r7, #4]
 801cf06:	681b      	ldr	r3, [r3, #0]
 801cf08:	68fa      	ldr	r2, [r7, #12]
 801cf0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801cf0c:	687b      	ldr	r3, [r7, #4]
 801cf0e:	681b      	ldr	r3, [r3, #0]
 801cf10:	681a      	ldr	r2, [r3, #0]
 801cf12:	687b      	ldr	r3, [r7, #4]
 801cf14:	681b      	ldr	r3, [r3, #0]
 801cf16:	f042 0201 	orr.w	r2, r2, #1
 801cf1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801cf1c:	687b      	ldr	r3, [r7, #4]
 801cf1e:	2220      	movs	r2, #32
 801cf20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801cf24:	687b      	ldr	r3, [r7, #4]
 801cf26:	2200      	movs	r2, #0
 801cf28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801cf2c:	2300      	movs	r3, #0
 801cf2e:	e000      	b.n	801cf32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801cf30:	2302      	movs	r3, #2
  }
}
 801cf32:	4618      	mov	r0, r3
 801cf34:	3714      	adds	r7, #20
 801cf36:	46bd      	mov	sp, r7
 801cf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf3c:	4770      	bx	lr
	...

0801cf40 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801cf40:	b580      	push	{r7, lr}
 801cf42:	b084      	sub	sp, #16
 801cf44:	af00      	add	r7, sp, #0
 801cf46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801cf48:	4b19      	ldr	r3, [pc, #100]	@ (801cfb0 <HAL_PWREx_ConfigSupply+0x70>)
 801cf4a:	68db      	ldr	r3, [r3, #12]
 801cf4c:	f003 0304 	and.w	r3, r3, #4
 801cf50:	2b04      	cmp	r3, #4
 801cf52:	d00a      	beq.n	801cf6a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801cf54:	4b16      	ldr	r3, [pc, #88]	@ (801cfb0 <HAL_PWREx_ConfigSupply+0x70>)
 801cf56:	68db      	ldr	r3, [r3, #12]
 801cf58:	f003 0307 	and.w	r3, r3, #7
 801cf5c:	687a      	ldr	r2, [r7, #4]
 801cf5e:	429a      	cmp	r2, r3
 801cf60:	d001      	beq.n	801cf66 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801cf62:	2301      	movs	r3, #1
 801cf64:	e01f      	b.n	801cfa6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801cf66:	2300      	movs	r3, #0
 801cf68:	e01d      	b.n	801cfa6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801cf6a:	4b11      	ldr	r3, [pc, #68]	@ (801cfb0 <HAL_PWREx_ConfigSupply+0x70>)
 801cf6c:	68db      	ldr	r3, [r3, #12]
 801cf6e:	f023 0207 	bic.w	r2, r3, #7
 801cf72:	490f      	ldr	r1, [pc, #60]	@ (801cfb0 <HAL_PWREx_ConfigSupply+0x70>)
 801cf74:	687b      	ldr	r3, [r7, #4]
 801cf76:	4313      	orrs	r3, r2
 801cf78:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801cf7a:	f7fd fc03 	bl	801a784 <HAL_GetTick>
 801cf7e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801cf80:	e009      	b.n	801cf96 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801cf82:	f7fd fbff 	bl	801a784 <HAL_GetTick>
 801cf86:	4602      	mov	r2, r0
 801cf88:	68fb      	ldr	r3, [r7, #12]
 801cf8a:	1ad3      	subs	r3, r2, r3
 801cf8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801cf90:	d901      	bls.n	801cf96 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801cf92:	2301      	movs	r3, #1
 801cf94:	e007      	b.n	801cfa6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801cf96:	4b06      	ldr	r3, [pc, #24]	@ (801cfb0 <HAL_PWREx_ConfigSupply+0x70>)
 801cf98:	685b      	ldr	r3, [r3, #4]
 801cf9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801cf9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801cfa2:	d1ee      	bne.n	801cf82 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801cfa4:	2300      	movs	r3, #0
}
 801cfa6:	4618      	mov	r0, r3
 801cfa8:	3710      	adds	r7, #16
 801cfaa:	46bd      	mov	sp, r7
 801cfac:	bd80      	pop	{r7, pc}
 801cfae:	bf00      	nop
 801cfb0:	58024800 	.word	0x58024800

0801cfb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801cfb4:	b580      	push	{r7, lr}
 801cfb6:	b08c      	sub	sp, #48	@ 0x30
 801cfb8:	af00      	add	r7, sp, #0
 801cfba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801cfbc:	687b      	ldr	r3, [r7, #4]
 801cfbe:	2b00      	cmp	r3, #0
 801cfc0:	d102      	bne.n	801cfc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801cfc2:	2301      	movs	r3, #1
 801cfc4:	f000 bc48 	b.w	801d858 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801cfc8:	687b      	ldr	r3, [r7, #4]
 801cfca:	681b      	ldr	r3, [r3, #0]
 801cfcc:	f003 0301 	and.w	r3, r3, #1
 801cfd0:	2b00      	cmp	r3, #0
 801cfd2:	f000 8088 	beq.w	801d0e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801cfd6:	4b99      	ldr	r3, [pc, #612]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801cfd8:	691b      	ldr	r3, [r3, #16]
 801cfda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801cfde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801cfe0:	4b96      	ldr	r3, [pc, #600]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801cfe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cfe4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801cfe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cfe8:	2b10      	cmp	r3, #16
 801cfea:	d007      	beq.n	801cffc <HAL_RCC_OscConfig+0x48>
 801cfec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cfee:	2b18      	cmp	r3, #24
 801cff0:	d111      	bne.n	801d016 <HAL_RCC_OscConfig+0x62>
 801cff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cff4:	f003 0303 	and.w	r3, r3, #3
 801cff8:	2b02      	cmp	r3, #2
 801cffa:	d10c      	bne.n	801d016 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801cffc:	4b8f      	ldr	r3, [pc, #572]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801cffe:	681b      	ldr	r3, [r3, #0]
 801d000:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801d004:	2b00      	cmp	r3, #0
 801d006:	d06d      	beq.n	801d0e4 <HAL_RCC_OscConfig+0x130>
 801d008:	687b      	ldr	r3, [r7, #4]
 801d00a:	685b      	ldr	r3, [r3, #4]
 801d00c:	2b00      	cmp	r3, #0
 801d00e:	d169      	bne.n	801d0e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801d010:	2301      	movs	r3, #1
 801d012:	f000 bc21 	b.w	801d858 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801d016:	687b      	ldr	r3, [r7, #4]
 801d018:	685b      	ldr	r3, [r3, #4]
 801d01a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d01e:	d106      	bne.n	801d02e <HAL_RCC_OscConfig+0x7a>
 801d020:	4b86      	ldr	r3, [pc, #536]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d022:	681b      	ldr	r3, [r3, #0]
 801d024:	4a85      	ldr	r2, [pc, #532]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d026:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801d02a:	6013      	str	r3, [r2, #0]
 801d02c:	e02e      	b.n	801d08c <HAL_RCC_OscConfig+0xd8>
 801d02e:	687b      	ldr	r3, [r7, #4]
 801d030:	685b      	ldr	r3, [r3, #4]
 801d032:	2b00      	cmp	r3, #0
 801d034:	d10c      	bne.n	801d050 <HAL_RCC_OscConfig+0x9c>
 801d036:	4b81      	ldr	r3, [pc, #516]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d038:	681b      	ldr	r3, [r3, #0]
 801d03a:	4a80      	ldr	r2, [pc, #512]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d03c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801d040:	6013      	str	r3, [r2, #0]
 801d042:	4b7e      	ldr	r3, [pc, #504]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d044:	681b      	ldr	r3, [r3, #0]
 801d046:	4a7d      	ldr	r2, [pc, #500]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d048:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801d04c:	6013      	str	r3, [r2, #0]
 801d04e:	e01d      	b.n	801d08c <HAL_RCC_OscConfig+0xd8>
 801d050:	687b      	ldr	r3, [r7, #4]
 801d052:	685b      	ldr	r3, [r3, #4]
 801d054:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801d058:	d10c      	bne.n	801d074 <HAL_RCC_OscConfig+0xc0>
 801d05a:	4b78      	ldr	r3, [pc, #480]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d05c:	681b      	ldr	r3, [r3, #0]
 801d05e:	4a77      	ldr	r2, [pc, #476]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d060:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801d064:	6013      	str	r3, [r2, #0]
 801d066:	4b75      	ldr	r3, [pc, #468]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d068:	681b      	ldr	r3, [r3, #0]
 801d06a:	4a74      	ldr	r2, [pc, #464]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d06c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801d070:	6013      	str	r3, [r2, #0]
 801d072:	e00b      	b.n	801d08c <HAL_RCC_OscConfig+0xd8>
 801d074:	4b71      	ldr	r3, [pc, #452]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d076:	681b      	ldr	r3, [r3, #0]
 801d078:	4a70      	ldr	r2, [pc, #448]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d07a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801d07e:	6013      	str	r3, [r2, #0]
 801d080:	4b6e      	ldr	r3, [pc, #440]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d082:	681b      	ldr	r3, [r3, #0]
 801d084:	4a6d      	ldr	r2, [pc, #436]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d086:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801d08a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801d08c:	687b      	ldr	r3, [r7, #4]
 801d08e:	685b      	ldr	r3, [r3, #4]
 801d090:	2b00      	cmp	r3, #0
 801d092:	d013      	beq.n	801d0bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d094:	f7fd fb76 	bl	801a784 <HAL_GetTick>
 801d098:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801d09a:	e008      	b.n	801d0ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801d09c:	f7fd fb72 	bl	801a784 <HAL_GetTick>
 801d0a0:	4602      	mov	r2, r0
 801d0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d0a4:	1ad3      	subs	r3, r2, r3
 801d0a6:	2b64      	cmp	r3, #100	@ 0x64
 801d0a8:	d901      	bls.n	801d0ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801d0aa:	2303      	movs	r3, #3
 801d0ac:	e3d4      	b.n	801d858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801d0ae:	4b63      	ldr	r3, [pc, #396]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d0b0:	681b      	ldr	r3, [r3, #0]
 801d0b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801d0b6:	2b00      	cmp	r3, #0
 801d0b8:	d0f0      	beq.n	801d09c <HAL_RCC_OscConfig+0xe8>
 801d0ba:	e014      	b.n	801d0e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d0bc:	f7fd fb62 	bl	801a784 <HAL_GetTick>
 801d0c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801d0c2:	e008      	b.n	801d0d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801d0c4:	f7fd fb5e 	bl	801a784 <HAL_GetTick>
 801d0c8:	4602      	mov	r2, r0
 801d0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d0cc:	1ad3      	subs	r3, r2, r3
 801d0ce:	2b64      	cmp	r3, #100	@ 0x64
 801d0d0:	d901      	bls.n	801d0d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801d0d2:	2303      	movs	r3, #3
 801d0d4:	e3c0      	b.n	801d858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801d0d6:	4b59      	ldr	r3, [pc, #356]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d0d8:	681b      	ldr	r3, [r3, #0]
 801d0da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801d0de:	2b00      	cmp	r3, #0
 801d0e0:	d1f0      	bne.n	801d0c4 <HAL_RCC_OscConfig+0x110>
 801d0e2:	e000      	b.n	801d0e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801d0e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801d0e6:	687b      	ldr	r3, [r7, #4]
 801d0e8:	681b      	ldr	r3, [r3, #0]
 801d0ea:	f003 0302 	and.w	r3, r3, #2
 801d0ee:	2b00      	cmp	r3, #0
 801d0f0:	f000 80ca 	beq.w	801d288 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801d0f4:	4b51      	ldr	r3, [pc, #324]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d0f6:	691b      	ldr	r3, [r3, #16]
 801d0f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801d0fc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801d0fe:	4b4f      	ldr	r3, [pc, #316]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d102:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801d104:	6a3b      	ldr	r3, [r7, #32]
 801d106:	2b00      	cmp	r3, #0
 801d108:	d007      	beq.n	801d11a <HAL_RCC_OscConfig+0x166>
 801d10a:	6a3b      	ldr	r3, [r7, #32]
 801d10c:	2b18      	cmp	r3, #24
 801d10e:	d156      	bne.n	801d1be <HAL_RCC_OscConfig+0x20a>
 801d110:	69fb      	ldr	r3, [r7, #28]
 801d112:	f003 0303 	and.w	r3, r3, #3
 801d116:	2b00      	cmp	r3, #0
 801d118:	d151      	bne.n	801d1be <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801d11a:	4b48      	ldr	r3, [pc, #288]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d11c:	681b      	ldr	r3, [r3, #0]
 801d11e:	f003 0304 	and.w	r3, r3, #4
 801d122:	2b00      	cmp	r3, #0
 801d124:	d005      	beq.n	801d132 <HAL_RCC_OscConfig+0x17e>
 801d126:	687b      	ldr	r3, [r7, #4]
 801d128:	68db      	ldr	r3, [r3, #12]
 801d12a:	2b00      	cmp	r3, #0
 801d12c:	d101      	bne.n	801d132 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801d12e:	2301      	movs	r3, #1
 801d130:	e392      	b.n	801d858 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801d132:	4b42      	ldr	r3, [pc, #264]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d134:	681b      	ldr	r3, [r3, #0]
 801d136:	f023 0219 	bic.w	r2, r3, #25
 801d13a:	687b      	ldr	r3, [r7, #4]
 801d13c:	68db      	ldr	r3, [r3, #12]
 801d13e:	493f      	ldr	r1, [pc, #252]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d140:	4313      	orrs	r3, r2
 801d142:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d144:	f7fd fb1e 	bl	801a784 <HAL_GetTick>
 801d148:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801d14a:	e008      	b.n	801d15e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801d14c:	f7fd fb1a 	bl	801a784 <HAL_GetTick>
 801d150:	4602      	mov	r2, r0
 801d152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d154:	1ad3      	subs	r3, r2, r3
 801d156:	2b02      	cmp	r3, #2
 801d158:	d901      	bls.n	801d15e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801d15a:	2303      	movs	r3, #3
 801d15c:	e37c      	b.n	801d858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801d15e:	4b37      	ldr	r3, [pc, #220]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d160:	681b      	ldr	r3, [r3, #0]
 801d162:	f003 0304 	and.w	r3, r3, #4
 801d166:	2b00      	cmp	r3, #0
 801d168:	d0f0      	beq.n	801d14c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801d16a:	f7fd fb3b 	bl	801a7e4 <HAL_GetREVID>
 801d16e:	4603      	mov	r3, r0
 801d170:	f241 0203 	movw	r2, #4099	@ 0x1003
 801d174:	4293      	cmp	r3, r2
 801d176:	d817      	bhi.n	801d1a8 <HAL_RCC_OscConfig+0x1f4>
 801d178:	687b      	ldr	r3, [r7, #4]
 801d17a:	691b      	ldr	r3, [r3, #16]
 801d17c:	2b40      	cmp	r3, #64	@ 0x40
 801d17e:	d108      	bne.n	801d192 <HAL_RCC_OscConfig+0x1de>
 801d180:	4b2e      	ldr	r3, [pc, #184]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d182:	685b      	ldr	r3, [r3, #4]
 801d184:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801d188:	4a2c      	ldr	r2, [pc, #176]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d18a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d18e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801d190:	e07a      	b.n	801d288 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801d192:	4b2a      	ldr	r3, [pc, #168]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d194:	685b      	ldr	r3, [r3, #4]
 801d196:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801d19a:	687b      	ldr	r3, [r7, #4]
 801d19c:	691b      	ldr	r3, [r3, #16]
 801d19e:	031b      	lsls	r3, r3, #12
 801d1a0:	4926      	ldr	r1, [pc, #152]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d1a2:	4313      	orrs	r3, r2
 801d1a4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801d1a6:	e06f      	b.n	801d288 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801d1a8:	4b24      	ldr	r3, [pc, #144]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d1aa:	685b      	ldr	r3, [r3, #4]
 801d1ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801d1b0:	687b      	ldr	r3, [r7, #4]
 801d1b2:	691b      	ldr	r3, [r3, #16]
 801d1b4:	061b      	lsls	r3, r3, #24
 801d1b6:	4921      	ldr	r1, [pc, #132]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d1b8:	4313      	orrs	r3, r2
 801d1ba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801d1bc:	e064      	b.n	801d288 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801d1be:	687b      	ldr	r3, [r7, #4]
 801d1c0:	68db      	ldr	r3, [r3, #12]
 801d1c2:	2b00      	cmp	r3, #0
 801d1c4:	d047      	beq.n	801d256 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801d1c6:	4b1d      	ldr	r3, [pc, #116]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d1c8:	681b      	ldr	r3, [r3, #0]
 801d1ca:	f023 0219 	bic.w	r2, r3, #25
 801d1ce:	687b      	ldr	r3, [r7, #4]
 801d1d0:	68db      	ldr	r3, [r3, #12]
 801d1d2:	491a      	ldr	r1, [pc, #104]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d1d4:	4313      	orrs	r3, r2
 801d1d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d1d8:	f7fd fad4 	bl	801a784 <HAL_GetTick>
 801d1dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801d1de:	e008      	b.n	801d1f2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801d1e0:	f7fd fad0 	bl	801a784 <HAL_GetTick>
 801d1e4:	4602      	mov	r2, r0
 801d1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d1e8:	1ad3      	subs	r3, r2, r3
 801d1ea:	2b02      	cmp	r3, #2
 801d1ec:	d901      	bls.n	801d1f2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801d1ee:	2303      	movs	r3, #3
 801d1f0:	e332      	b.n	801d858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801d1f2:	4b12      	ldr	r3, [pc, #72]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d1f4:	681b      	ldr	r3, [r3, #0]
 801d1f6:	f003 0304 	and.w	r3, r3, #4
 801d1fa:	2b00      	cmp	r3, #0
 801d1fc:	d0f0      	beq.n	801d1e0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801d1fe:	f7fd faf1 	bl	801a7e4 <HAL_GetREVID>
 801d202:	4603      	mov	r3, r0
 801d204:	f241 0203 	movw	r2, #4099	@ 0x1003
 801d208:	4293      	cmp	r3, r2
 801d20a:	d819      	bhi.n	801d240 <HAL_RCC_OscConfig+0x28c>
 801d20c:	687b      	ldr	r3, [r7, #4]
 801d20e:	691b      	ldr	r3, [r3, #16]
 801d210:	2b40      	cmp	r3, #64	@ 0x40
 801d212:	d108      	bne.n	801d226 <HAL_RCC_OscConfig+0x272>
 801d214:	4b09      	ldr	r3, [pc, #36]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d216:	685b      	ldr	r3, [r3, #4]
 801d218:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801d21c:	4a07      	ldr	r2, [pc, #28]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d21e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d222:	6053      	str	r3, [r2, #4]
 801d224:	e030      	b.n	801d288 <HAL_RCC_OscConfig+0x2d4>
 801d226:	4b05      	ldr	r3, [pc, #20]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d228:	685b      	ldr	r3, [r3, #4]
 801d22a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801d22e:	687b      	ldr	r3, [r7, #4]
 801d230:	691b      	ldr	r3, [r3, #16]
 801d232:	031b      	lsls	r3, r3, #12
 801d234:	4901      	ldr	r1, [pc, #4]	@ (801d23c <HAL_RCC_OscConfig+0x288>)
 801d236:	4313      	orrs	r3, r2
 801d238:	604b      	str	r3, [r1, #4]
 801d23a:	e025      	b.n	801d288 <HAL_RCC_OscConfig+0x2d4>
 801d23c:	58024400 	.word	0x58024400
 801d240:	4b9a      	ldr	r3, [pc, #616]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d242:	685b      	ldr	r3, [r3, #4]
 801d244:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801d248:	687b      	ldr	r3, [r7, #4]
 801d24a:	691b      	ldr	r3, [r3, #16]
 801d24c:	061b      	lsls	r3, r3, #24
 801d24e:	4997      	ldr	r1, [pc, #604]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d250:	4313      	orrs	r3, r2
 801d252:	604b      	str	r3, [r1, #4]
 801d254:	e018      	b.n	801d288 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801d256:	4b95      	ldr	r3, [pc, #596]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d258:	681b      	ldr	r3, [r3, #0]
 801d25a:	4a94      	ldr	r2, [pc, #592]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d25c:	f023 0301 	bic.w	r3, r3, #1
 801d260:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d262:	f7fd fa8f 	bl	801a784 <HAL_GetTick>
 801d266:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801d268:	e008      	b.n	801d27c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801d26a:	f7fd fa8b 	bl	801a784 <HAL_GetTick>
 801d26e:	4602      	mov	r2, r0
 801d270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d272:	1ad3      	subs	r3, r2, r3
 801d274:	2b02      	cmp	r3, #2
 801d276:	d901      	bls.n	801d27c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 801d278:	2303      	movs	r3, #3
 801d27a:	e2ed      	b.n	801d858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801d27c:	4b8b      	ldr	r3, [pc, #556]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d27e:	681b      	ldr	r3, [r3, #0]
 801d280:	f003 0304 	and.w	r3, r3, #4
 801d284:	2b00      	cmp	r3, #0
 801d286:	d1f0      	bne.n	801d26a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801d288:	687b      	ldr	r3, [r7, #4]
 801d28a:	681b      	ldr	r3, [r3, #0]
 801d28c:	f003 0310 	and.w	r3, r3, #16
 801d290:	2b00      	cmp	r3, #0
 801d292:	f000 80a9 	beq.w	801d3e8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801d296:	4b85      	ldr	r3, [pc, #532]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d298:	691b      	ldr	r3, [r3, #16]
 801d29a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801d29e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801d2a0:	4b82      	ldr	r3, [pc, #520]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d2a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d2a4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801d2a6:	69bb      	ldr	r3, [r7, #24]
 801d2a8:	2b08      	cmp	r3, #8
 801d2aa:	d007      	beq.n	801d2bc <HAL_RCC_OscConfig+0x308>
 801d2ac:	69bb      	ldr	r3, [r7, #24]
 801d2ae:	2b18      	cmp	r3, #24
 801d2b0:	d13a      	bne.n	801d328 <HAL_RCC_OscConfig+0x374>
 801d2b2:	697b      	ldr	r3, [r7, #20]
 801d2b4:	f003 0303 	and.w	r3, r3, #3
 801d2b8:	2b01      	cmp	r3, #1
 801d2ba:	d135      	bne.n	801d328 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801d2bc:	4b7b      	ldr	r3, [pc, #492]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d2be:	681b      	ldr	r3, [r3, #0]
 801d2c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d2c4:	2b00      	cmp	r3, #0
 801d2c6:	d005      	beq.n	801d2d4 <HAL_RCC_OscConfig+0x320>
 801d2c8:	687b      	ldr	r3, [r7, #4]
 801d2ca:	69db      	ldr	r3, [r3, #28]
 801d2cc:	2b80      	cmp	r3, #128	@ 0x80
 801d2ce:	d001      	beq.n	801d2d4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 801d2d0:	2301      	movs	r3, #1
 801d2d2:	e2c1      	b.n	801d858 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801d2d4:	f7fd fa86 	bl	801a7e4 <HAL_GetREVID>
 801d2d8:	4603      	mov	r3, r0
 801d2da:	f241 0203 	movw	r2, #4099	@ 0x1003
 801d2de:	4293      	cmp	r3, r2
 801d2e0:	d817      	bhi.n	801d312 <HAL_RCC_OscConfig+0x35e>
 801d2e2:	687b      	ldr	r3, [r7, #4]
 801d2e4:	6a1b      	ldr	r3, [r3, #32]
 801d2e6:	2b20      	cmp	r3, #32
 801d2e8:	d108      	bne.n	801d2fc <HAL_RCC_OscConfig+0x348>
 801d2ea:	4b70      	ldr	r3, [pc, #448]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d2ec:	685b      	ldr	r3, [r3, #4]
 801d2ee:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801d2f2:	4a6e      	ldr	r2, [pc, #440]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d2f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801d2f8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801d2fa:	e075      	b.n	801d3e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801d2fc:	4b6b      	ldr	r3, [pc, #428]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d2fe:	685b      	ldr	r3, [r3, #4]
 801d300:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801d304:	687b      	ldr	r3, [r7, #4]
 801d306:	6a1b      	ldr	r3, [r3, #32]
 801d308:	069b      	lsls	r3, r3, #26
 801d30a:	4968      	ldr	r1, [pc, #416]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d30c:	4313      	orrs	r3, r2
 801d30e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801d310:	e06a      	b.n	801d3e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801d312:	4b66      	ldr	r3, [pc, #408]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d314:	68db      	ldr	r3, [r3, #12]
 801d316:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801d31a:	687b      	ldr	r3, [r7, #4]
 801d31c:	6a1b      	ldr	r3, [r3, #32]
 801d31e:	061b      	lsls	r3, r3, #24
 801d320:	4962      	ldr	r1, [pc, #392]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d322:	4313      	orrs	r3, r2
 801d324:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801d326:	e05f      	b.n	801d3e8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801d328:	687b      	ldr	r3, [r7, #4]
 801d32a:	69db      	ldr	r3, [r3, #28]
 801d32c:	2b00      	cmp	r3, #0
 801d32e:	d042      	beq.n	801d3b6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801d330:	4b5e      	ldr	r3, [pc, #376]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d332:	681b      	ldr	r3, [r3, #0]
 801d334:	4a5d      	ldr	r2, [pc, #372]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d33a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d33c:	f7fd fa22 	bl	801a784 <HAL_GetTick>
 801d340:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801d342:	e008      	b.n	801d356 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801d344:	f7fd fa1e 	bl	801a784 <HAL_GetTick>
 801d348:	4602      	mov	r2, r0
 801d34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d34c:	1ad3      	subs	r3, r2, r3
 801d34e:	2b02      	cmp	r3, #2
 801d350:	d901      	bls.n	801d356 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 801d352:	2303      	movs	r3, #3
 801d354:	e280      	b.n	801d858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801d356:	4b55      	ldr	r3, [pc, #340]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d358:	681b      	ldr	r3, [r3, #0]
 801d35a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d35e:	2b00      	cmp	r3, #0
 801d360:	d0f0      	beq.n	801d344 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801d362:	f7fd fa3f 	bl	801a7e4 <HAL_GetREVID>
 801d366:	4603      	mov	r3, r0
 801d368:	f241 0203 	movw	r2, #4099	@ 0x1003
 801d36c:	4293      	cmp	r3, r2
 801d36e:	d817      	bhi.n	801d3a0 <HAL_RCC_OscConfig+0x3ec>
 801d370:	687b      	ldr	r3, [r7, #4]
 801d372:	6a1b      	ldr	r3, [r3, #32]
 801d374:	2b20      	cmp	r3, #32
 801d376:	d108      	bne.n	801d38a <HAL_RCC_OscConfig+0x3d6>
 801d378:	4b4c      	ldr	r3, [pc, #304]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d37a:	685b      	ldr	r3, [r3, #4]
 801d37c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801d380:	4a4a      	ldr	r2, [pc, #296]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d382:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801d386:	6053      	str	r3, [r2, #4]
 801d388:	e02e      	b.n	801d3e8 <HAL_RCC_OscConfig+0x434>
 801d38a:	4b48      	ldr	r3, [pc, #288]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d38c:	685b      	ldr	r3, [r3, #4]
 801d38e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801d392:	687b      	ldr	r3, [r7, #4]
 801d394:	6a1b      	ldr	r3, [r3, #32]
 801d396:	069b      	lsls	r3, r3, #26
 801d398:	4944      	ldr	r1, [pc, #272]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d39a:	4313      	orrs	r3, r2
 801d39c:	604b      	str	r3, [r1, #4]
 801d39e:	e023      	b.n	801d3e8 <HAL_RCC_OscConfig+0x434>
 801d3a0:	4b42      	ldr	r3, [pc, #264]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d3a2:	68db      	ldr	r3, [r3, #12]
 801d3a4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801d3a8:	687b      	ldr	r3, [r7, #4]
 801d3aa:	6a1b      	ldr	r3, [r3, #32]
 801d3ac:	061b      	lsls	r3, r3, #24
 801d3ae:	493f      	ldr	r1, [pc, #252]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d3b0:	4313      	orrs	r3, r2
 801d3b2:	60cb      	str	r3, [r1, #12]
 801d3b4:	e018      	b.n	801d3e8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801d3b6:	4b3d      	ldr	r3, [pc, #244]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d3b8:	681b      	ldr	r3, [r3, #0]
 801d3ba:	4a3c      	ldr	r2, [pc, #240]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d3bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801d3c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d3c2:	f7fd f9df 	bl	801a784 <HAL_GetTick>
 801d3c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801d3c8:	e008      	b.n	801d3dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801d3ca:	f7fd f9db 	bl	801a784 <HAL_GetTick>
 801d3ce:	4602      	mov	r2, r0
 801d3d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d3d2:	1ad3      	subs	r3, r2, r3
 801d3d4:	2b02      	cmp	r3, #2
 801d3d6:	d901      	bls.n	801d3dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801d3d8:	2303      	movs	r3, #3
 801d3da:	e23d      	b.n	801d858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801d3dc:	4b33      	ldr	r3, [pc, #204]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d3de:	681b      	ldr	r3, [r3, #0]
 801d3e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d3e4:	2b00      	cmp	r3, #0
 801d3e6:	d1f0      	bne.n	801d3ca <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801d3e8:	687b      	ldr	r3, [r7, #4]
 801d3ea:	681b      	ldr	r3, [r3, #0]
 801d3ec:	f003 0308 	and.w	r3, r3, #8
 801d3f0:	2b00      	cmp	r3, #0
 801d3f2:	d036      	beq.n	801d462 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801d3f4:	687b      	ldr	r3, [r7, #4]
 801d3f6:	695b      	ldr	r3, [r3, #20]
 801d3f8:	2b00      	cmp	r3, #0
 801d3fa:	d019      	beq.n	801d430 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801d3fc:	4b2b      	ldr	r3, [pc, #172]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d3fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d400:	4a2a      	ldr	r2, [pc, #168]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d402:	f043 0301 	orr.w	r3, r3, #1
 801d406:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d408:	f7fd f9bc 	bl	801a784 <HAL_GetTick>
 801d40c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801d40e:	e008      	b.n	801d422 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801d410:	f7fd f9b8 	bl	801a784 <HAL_GetTick>
 801d414:	4602      	mov	r2, r0
 801d416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d418:	1ad3      	subs	r3, r2, r3
 801d41a:	2b02      	cmp	r3, #2
 801d41c:	d901      	bls.n	801d422 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801d41e:	2303      	movs	r3, #3
 801d420:	e21a      	b.n	801d858 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801d422:	4b22      	ldr	r3, [pc, #136]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d426:	f003 0302 	and.w	r3, r3, #2
 801d42a:	2b00      	cmp	r3, #0
 801d42c:	d0f0      	beq.n	801d410 <HAL_RCC_OscConfig+0x45c>
 801d42e:	e018      	b.n	801d462 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801d430:	4b1e      	ldr	r3, [pc, #120]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d432:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d434:	4a1d      	ldr	r2, [pc, #116]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d436:	f023 0301 	bic.w	r3, r3, #1
 801d43a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d43c:	f7fd f9a2 	bl	801a784 <HAL_GetTick>
 801d440:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801d442:	e008      	b.n	801d456 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801d444:	f7fd f99e 	bl	801a784 <HAL_GetTick>
 801d448:	4602      	mov	r2, r0
 801d44a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d44c:	1ad3      	subs	r3, r2, r3
 801d44e:	2b02      	cmp	r3, #2
 801d450:	d901      	bls.n	801d456 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 801d452:	2303      	movs	r3, #3
 801d454:	e200      	b.n	801d858 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801d456:	4b15      	ldr	r3, [pc, #84]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d45a:	f003 0302 	and.w	r3, r3, #2
 801d45e:	2b00      	cmp	r3, #0
 801d460:	d1f0      	bne.n	801d444 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801d462:	687b      	ldr	r3, [r7, #4]
 801d464:	681b      	ldr	r3, [r3, #0]
 801d466:	f003 0320 	and.w	r3, r3, #32
 801d46a:	2b00      	cmp	r3, #0
 801d46c:	d039      	beq.n	801d4e2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801d46e:	687b      	ldr	r3, [r7, #4]
 801d470:	699b      	ldr	r3, [r3, #24]
 801d472:	2b00      	cmp	r3, #0
 801d474:	d01c      	beq.n	801d4b0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801d476:	4b0d      	ldr	r3, [pc, #52]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d478:	681b      	ldr	r3, [r3, #0]
 801d47a:	4a0c      	ldr	r2, [pc, #48]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d47c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801d480:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801d482:	f7fd f97f 	bl	801a784 <HAL_GetTick>
 801d486:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801d488:	e008      	b.n	801d49c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801d48a:	f7fd f97b 	bl	801a784 <HAL_GetTick>
 801d48e:	4602      	mov	r2, r0
 801d490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d492:	1ad3      	subs	r3, r2, r3
 801d494:	2b02      	cmp	r3, #2
 801d496:	d901      	bls.n	801d49c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 801d498:	2303      	movs	r3, #3
 801d49a:	e1dd      	b.n	801d858 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801d49c:	4b03      	ldr	r3, [pc, #12]	@ (801d4ac <HAL_RCC_OscConfig+0x4f8>)
 801d49e:	681b      	ldr	r3, [r3, #0]
 801d4a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801d4a4:	2b00      	cmp	r3, #0
 801d4a6:	d0f0      	beq.n	801d48a <HAL_RCC_OscConfig+0x4d6>
 801d4a8:	e01b      	b.n	801d4e2 <HAL_RCC_OscConfig+0x52e>
 801d4aa:	bf00      	nop
 801d4ac:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801d4b0:	4b9b      	ldr	r3, [pc, #620]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d4b2:	681b      	ldr	r3, [r3, #0]
 801d4b4:	4a9a      	ldr	r2, [pc, #616]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d4b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d4ba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801d4bc:	f7fd f962 	bl	801a784 <HAL_GetTick>
 801d4c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801d4c2:	e008      	b.n	801d4d6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801d4c4:	f7fd f95e 	bl	801a784 <HAL_GetTick>
 801d4c8:	4602      	mov	r2, r0
 801d4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d4cc:	1ad3      	subs	r3, r2, r3
 801d4ce:	2b02      	cmp	r3, #2
 801d4d0:	d901      	bls.n	801d4d6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 801d4d2:	2303      	movs	r3, #3
 801d4d4:	e1c0      	b.n	801d858 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801d4d6:	4b92      	ldr	r3, [pc, #584]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d4d8:	681b      	ldr	r3, [r3, #0]
 801d4da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801d4de:	2b00      	cmp	r3, #0
 801d4e0:	d1f0      	bne.n	801d4c4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801d4e2:	687b      	ldr	r3, [r7, #4]
 801d4e4:	681b      	ldr	r3, [r3, #0]
 801d4e6:	f003 0304 	and.w	r3, r3, #4
 801d4ea:	2b00      	cmp	r3, #0
 801d4ec:	f000 8081 	beq.w	801d5f2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801d4f0:	4b8c      	ldr	r3, [pc, #560]	@ (801d724 <HAL_RCC_OscConfig+0x770>)
 801d4f2:	681b      	ldr	r3, [r3, #0]
 801d4f4:	4a8b      	ldr	r2, [pc, #556]	@ (801d724 <HAL_RCC_OscConfig+0x770>)
 801d4f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801d4fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801d4fc:	f7fd f942 	bl	801a784 <HAL_GetTick>
 801d500:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d502:	e008      	b.n	801d516 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801d504:	f7fd f93e 	bl	801a784 <HAL_GetTick>
 801d508:	4602      	mov	r2, r0
 801d50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d50c:	1ad3      	subs	r3, r2, r3
 801d50e:	2b64      	cmp	r3, #100	@ 0x64
 801d510:	d901      	bls.n	801d516 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 801d512:	2303      	movs	r3, #3
 801d514:	e1a0      	b.n	801d858 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d516:	4b83      	ldr	r3, [pc, #524]	@ (801d724 <HAL_RCC_OscConfig+0x770>)
 801d518:	681b      	ldr	r3, [r3, #0]
 801d51a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d51e:	2b00      	cmp	r3, #0
 801d520:	d0f0      	beq.n	801d504 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801d522:	687b      	ldr	r3, [r7, #4]
 801d524:	689b      	ldr	r3, [r3, #8]
 801d526:	2b01      	cmp	r3, #1
 801d528:	d106      	bne.n	801d538 <HAL_RCC_OscConfig+0x584>
 801d52a:	4b7d      	ldr	r3, [pc, #500]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d52c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d52e:	4a7c      	ldr	r2, [pc, #496]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d530:	f043 0301 	orr.w	r3, r3, #1
 801d534:	6713      	str	r3, [r2, #112]	@ 0x70
 801d536:	e02d      	b.n	801d594 <HAL_RCC_OscConfig+0x5e0>
 801d538:	687b      	ldr	r3, [r7, #4]
 801d53a:	689b      	ldr	r3, [r3, #8]
 801d53c:	2b00      	cmp	r3, #0
 801d53e:	d10c      	bne.n	801d55a <HAL_RCC_OscConfig+0x5a6>
 801d540:	4b77      	ldr	r3, [pc, #476]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d544:	4a76      	ldr	r2, [pc, #472]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d546:	f023 0301 	bic.w	r3, r3, #1
 801d54a:	6713      	str	r3, [r2, #112]	@ 0x70
 801d54c:	4b74      	ldr	r3, [pc, #464]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d54e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d550:	4a73      	ldr	r2, [pc, #460]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d552:	f023 0304 	bic.w	r3, r3, #4
 801d556:	6713      	str	r3, [r2, #112]	@ 0x70
 801d558:	e01c      	b.n	801d594 <HAL_RCC_OscConfig+0x5e0>
 801d55a:	687b      	ldr	r3, [r7, #4]
 801d55c:	689b      	ldr	r3, [r3, #8]
 801d55e:	2b05      	cmp	r3, #5
 801d560:	d10c      	bne.n	801d57c <HAL_RCC_OscConfig+0x5c8>
 801d562:	4b6f      	ldr	r3, [pc, #444]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d566:	4a6e      	ldr	r2, [pc, #440]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d568:	f043 0304 	orr.w	r3, r3, #4
 801d56c:	6713      	str	r3, [r2, #112]	@ 0x70
 801d56e:	4b6c      	ldr	r3, [pc, #432]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d572:	4a6b      	ldr	r2, [pc, #428]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d574:	f043 0301 	orr.w	r3, r3, #1
 801d578:	6713      	str	r3, [r2, #112]	@ 0x70
 801d57a:	e00b      	b.n	801d594 <HAL_RCC_OscConfig+0x5e0>
 801d57c:	4b68      	ldr	r3, [pc, #416]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d57e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d580:	4a67      	ldr	r2, [pc, #412]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d582:	f023 0301 	bic.w	r3, r3, #1
 801d586:	6713      	str	r3, [r2, #112]	@ 0x70
 801d588:	4b65      	ldr	r3, [pc, #404]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d58a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d58c:	4a64      	ldr	r2, [pc, #400]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d58e:	f023 0304 	bic.w	r3, r3, #4
 801d592:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801d594:	687b      	ldr	r3, [r7, #4]
 801d596:	689b      	ldr	r3, [r3, #8]
 801d598:	2b00      	cmp	r3, #0
 801d59a:	d015      	beq.n	801d5c8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d59c:	f7fd f8f2 	bl	801a784 <HAL_GetTick>
 801d5a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801d5a2:	e00a      	b.n	801d5ba <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d5a4:	f7fd f8ee 	bl	801a784 <HAL_GetTick>
 801d5a8:	4602      	mov	r2, r0
 801d5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d5ac:	1ad3      	subs	r3, r2, r3
 801d5ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 801d5b2:	4293      	cmp	r3, r2
 801d5b4:	d901      	bls.n	801d5ba <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 801d5b6:	2303      	movs	r3, #3
 801d5b8:	e14e      	b.n	801d858 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801d5ba:	4b59      	ldr	r3, [pc, #356]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d5bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d5be:	f003 0302 	and.w	r3, r3, #2
 801d5c2:	2b00      	cmp	r3, #0
 801d5c4:	d0ee      	beq.n	801d5a4 <HAL_RCC_OscConfig+0x5f0>
 801d5c6:	e014      	b.n	801d5f2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d5c8:	f7fd f8dc 	bl	801a784 <HAL_GetTick>
 801d5cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801d5ce:	e00a      	b.n	801d5e6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d5d0:	f7fd f8d8 	bl	801a784 <HAL_GetTick>
 801d5d4:	4602      	mov	r2, r0
 801d5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d5d8:	1ad3      	subs	r3, r2, r3
 801d5da:	f241 3288 	movw	r2, #5000	@ 0x1388
 801d5de:	4293      	cmp	r3, r2
 801d5e0:	d901      	bls.n	801d5e6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 801d5e2:	2303      	movs	r3, #3
 801d5e4:	e138      	b.n	801d858 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801d5e6:	4b4e      	ldr	r3, [pc, #312]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d5e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d5ea:	f003 0302 	and.w	r3, r3, #2
 801d5ee:	2b00      	cmp	r3, #0
 801d5f0:	d1ee      	bne.n	801d5d0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801d5f2:	687b      	ldr	r3, [r7, #4]
 801d5f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d5f6:	2b00      	cmp	r3, #0
 801d5f8:	f000 812d 	beq.w	801d856 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801d5fc:	4b48      	ldr	r3, [pc, #288]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d5fe:	691b      	ldr	r3, [r3, #16]
 801d600:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801d604:	2b18      	cmp	r3, #24
 801d606:	f000 80bd 	beq.w	801d784 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801d60a:	687b      	ldr	r3, [r7, #4]
 801d60c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d60e:	2b02      	cmp	r3, #2
 801d610:	f040 809e 	bne.w	801d750 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801d614:	4b42      	ldr	r3, [pc, #264]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d616:	681b      	ldr	r3, [r3, #0]
 801d618:	4a41      	ldr	r2, [pc, #260]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d61a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801d61e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d620:	f7fd f8b0 	bl	801a784 <HAL_GetTick>
 801d624:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801d626:	e008      	b.n	801d63a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d628:	f7fd f8ac 	bl	801a784 <HAL_GetTick>
 801d62c:	4602      	mov	r2, r0
 801d62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d630:	1ad3      	subs	r3, r2, r3
 801d632:	2b02      	cmp	r3, #2
 801d634:	d901      	bls.n	801d63a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 801d636:	2303      	movs	r3, #3
 801d638:	e10e      	b.n	801d858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801d63a:	4b39      	ldr	r3, [pc, #228]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d63c:	681b      	ldr	r3, [r3, #0]
 801d63e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d642:	2b00      	cmp	r3, #0
 801d644:	d1f0      	bne.n	801d628 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801d646:	4b36      	ldr	r3, [pc, #216]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d648:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801d64a:	4b37      	ldr	r3, [pc, #220]	@ (801d728 <HAL_RCC_OscConfig+0x774>)
 801d64c:	4013      	ands	r3, r2
 801d64e:	687a      	ldr	r2, [r7, #4]
 801d650:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801d652:	687a      	ldr	r2, [r7, #4]
 801d654:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801d656:	0112      	lsls	r2, r2, #4
 801d658:	430a      	orrs	r2, r1
 801d65a:	4931      	ldr	r1, [pc, #196]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d65c:	4313      	orrs	r3, r2
 801d65e:	628b      	str	r3, [r1, #40]	@ 0x28
 801d660:	687b      	ldr	r3, [r7, #4]
 801d662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d664:	3b01      	subs	r3, #1
 801d666:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801d66a:	687b      	ldr	r3, [r7, #4]
 801d66c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d66e:	3b01      	subs	r3, #1
 801d670:	025b      	lsls	r3, r3, #9
 801d672:	b29b      	uxth	r3, r3
 801d674:	431a      	orrs	r2, r3
 801d676:	687b      	ldr	r3, [r7, #4]
 801d678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d67a:	3b01      	subs	r3, #1
 801d67c:	041b      	lsls	r3, r3, #16
 801d67e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801d682:	431a      	orrs	r2, r3
 801d684:	687b      	ldr	r3, [r7, #4]
 801d686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d688:	3b01      	subs	r3, #1
 801d68a:	061b      	lsls	r3, r3, #24
 801d68c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801d690:	4923      	ldr	r1, [pc, #140]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d692:	4313      	orrs	r3, r2
 801d694:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801d696:	4b22      	ldr	r3, [pc, #136]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d69a:	4a21      	ldr	r2, [pc, #132]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d69c:	f023 0301 	bic.w	r3, r3, #1
 801d6a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801d6a2:	4b1f      	ldr	r3, [pc, #124]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d6a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d6a6:	4b21      	ldr	r3, [pc, #132]	@ (801d72c <HAL_RCC_OscConfig+0x778>)
 801d6a8:	4013      	ands	r3, r2
 801d6aa:	687a      	ldr	r2, [r7, #4]
 801d6ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801d6ae:	00d2      	lsls	r2, r2, #3
 801d6b0:	491b      	ldr	r1, [pc, #108]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d6b2:	4313      	orrs	r3, r2
 801d6b4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801d6b6:	4b1a      	ldr	r3, [pc, #104]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d6b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d6ba:	f023 020c 	bic.w	r2, r3, #12
 801d6be:	687b      	ldr	r3, [r7, #4]
 801d6c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d6c2:	4917      	ldr	r1, [pc, #92]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d6c4:	4313      	orrs	r3, r2
 801d6c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801d6c8:	4b15      	ldr	r3, [pc, #84]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d6ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d6cc:	f023 0202 	bic.w	r2, r3, #2
 801d6d0:	687b      	ldr	r3, [r7, #4]
 801d6d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d6d4:	4912      	ldr	r1, [pc, #72]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d6d6:	4313      	orrs	r3, r2
 801d6d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801d6da:	4b11      	ldr	r3, [pc, #68]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d6dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d6de:	4a10      	ldr	r2, [pc, #64]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d6e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801d6e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d6e6:	4b0e      	ldr	r3, [pc, #56]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d6e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d6ea:	4a0d      	ldr	r2, [pc, #52]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d6ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d6f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801d6f2:	4b0b      	ldr	r3, [pc, #44]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d6f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d6f6:	4a0a      	ldr	r2, [pc, #40]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d6f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801d6fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801d6fe:	4b08      	ldr	r3, [pc, #32]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d702:	4a07      	ldr	r2, [pc, #28]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d704:	f043 0301 	orr.w	r3, r3, #1
 801d708:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801d70a:	4b05      	ldr	r3, [pc, #20]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d70c:	681b      	ldr	r3, [r3, #0]
 801d70e:	4a04      	ldr	r2, [pc, #16]	@ (801d720 <HAL_RCC_OscConfig+0x76c>)
 801d710:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801d714:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d716:	f7fd f835 	bl	801a784 <HAL_GetTick>
 801d71a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801d71c:	e011      	b.n	801d742 <HAL_RCC_OscConfig+0x78e>
 801d71e:	bf00      	nop
 801d720:	58024400 	.word	0x58024400
 801d724:	58024800 	.word	0x58024800
 801d728:	fffffc0c 	.word	0xfffffc0c
 801d72c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d730:	f7fd f828 	bl	801a784 <HAL_GetTick>
 801d734:	4602      	mov	r2, r0
 801d736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d738:	1ad3      	subs	r3, r2, r3
 801d73a:	2b02      	cmp	r3, #2
 801d73c:	d901      	bls.n	801d742 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801d73e:	2303      	movs	r3, #3
 801d740:	e08a      	b.n	801d858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801d742:	4b47      	ldr	r3, [pc, #284]	@ (801d860 <HAL_RCC_OscConfig+0x8ac>)
 801d744:	681b      	ldr	r3, [r3, #0]
 801d746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d74a:	2b00      	cmp	r3, #0
 801d74c:	d0f0      	beq.n	801d730 <HAL_RCC_OscConfig+0x77c>
 801d74e:	e082      	b.n	801d856 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801d750:	4b43      	ldr	r3, [pc, #268]	@ (801d860 <HAL_RCC_OscConfig+0x8ac>)
 801d752:	681b      	ldr	r3, [r3, #0]
 801d754:	4a42      	ldr	r2, [pc, #264]	@ (801d860 <HAL_RCC_OscConfig+0x8ac>)
 801d756:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801d75a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d75c:	f7fd f812 	bl	801a784 <HAL_GetTick>
 801d760:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801d762:	e008      	b.n	801d776 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d764:	f7fd f80e 	bl	801a784 <HAL_GetTick>
 801d768:	4602      	mov	r2, r0
 801d76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d76c:	1ad3      	subs	r3, r2, r3
 801d76e:	2b02      	cmp	r3, #2
 801d770:	d901      	bls.n	801d776 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 801d772:	2303      	movs	r3, #3
 801d774:	e070      	b.n	801d858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801d776:	4b3a      	ldr	r3, [pc, #232]	@ (801d860 <HAL_RCC_OscConfig+0x8ac>)
 801d778:	681b      	ldr	r3, [r3, #0]
 801d77a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d77e:	2b00      	cmp	r3, #0
 801d780:	d1f0      	bne.n	801d764 <HAL_RCC_OscConfig+0x7b0>
 801d782:	e068      	b.n	801d856 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801d784:	4b36      	ldr	r3, [pc, #216]	@ (801d860 <HAL_RCC_OscConfig+0x8ac>)
 801d786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d788:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801d78a:	4b35      	ldr	r3, [pc, #212]	@ (801d860 <HAL_RCC_OscConfig+0x8ac>)
 801d78c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d78e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801d790:	687b      	ldr	r3, [r7, #4]
 801d792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d794:	2b01      	cmp	r3, #1
 801d796:	d031      	beq.n	801d7fc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801d798:	693b      	ldr	r3, [r7, #16]
 801d79a:	f003 0203 	and.w	r2, r3, #3
 801d79e:	687b      	ldr	r3, [r7, #4]
 801d7a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801d7a2:	429a      	cmp	r2, r3
 801d7a4:	d12a      	bne.n	801d7fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801d7a6:	693b      	ldr	r3, [r7, #16]
 801d7a8:	091b      	lsrs	r3, r3, #4
 801d7aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801d7ae:	687b      	ldr	r3, [r7, #4]
 801d7b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801d7b2:	429a      	cmp	r2, r3
 801d7b4:	d122      	bne.n	801d7fc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801d7b6:	68fb      	ldr	r3, [r7, #12]
 801d7b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801d7bc:	687b      	ldr	r3, [r7, #4]
 801d7be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d7c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801d7c2:	429a      	cmp	r2, r3
 801d7c4:	d11a      	bne.n	801d7fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801d7c6:	68fb      	ldr	r3, [r7, #12]
 801d7c8:	0a5b      	lsrs	r3, r3, #9
 801d7ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d7ce:	687b      	ldr	r3, [r7, #4]
 801d7d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d7d2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801d7d4:	429a      	cmp	r2, r3
 801d7d6:	d111      	bne.n	801d7fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801d7d8:	68fb      	ldr	r3, [r7, #12]
 801d7da:	0c1b      	lsrs	r3, r3, #16
 801d7dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d7e0:	687b      	ldr	r3, [r7, #4]
 801d7e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d7e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801d7e6:	429a      	cmp	r2, r3
 801d7e8:	d108      	bne.n	801d7fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801d7ea:	68fb      	ldr	r3, [r7, #12]
 801d7ec:	0e1b      	lsrs	r3, r3, #24
 801d7ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d7f2:	687b      	ldr	r3, [r7, #4]
 801d7f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d7f6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801d7f8:	429a      	cmp	r2, r3
 801d7fa:	d001      	beq.n	801d800 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 801d7fc:	2301      	movs	r3, #1
 801d7fe:	e02b      	b.n	801d858 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801d800:	4b17      	ldr	r3, [pc, #92]	@ (801d860 <HAL_RCC_OscConfig+0x8ac>)
 801d802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d804:	08db      	lsrs	r3, r3, #3
 801d806:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d80a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801d80c:	687b      	ldr	r3, [r7, #4]
 801d80e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d810:	693a      	ldr	r2, [r7, #16]
 801d812:	429a      	cmp	r2, r3
 801d814:	d01f      	beq.n	801d856 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801d816:	4b12      	ldr	r3, [pc, #72]	@ (801d860 <HAL_RCC_OscConfig+0x8ac>)
 801d818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d81a:	4a11      	ldr	r2, [pc, #68]	@ (801d860 <HAL_RCC_OscConfig+0x8ac>)
 801d81c:	f023 0301 	bic.w	r3, r3, #1
 801d820:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801d822:	f7fc ffaf 	bl	801a784 <HAL_GetTick>
 801d826:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801d828:	bf00      	nop
 801d82a:	f7fc ffab 	bl	801a784 <HAL_GetTick>
 801d82e:	4602      	mov	r2, r0
 801d830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d832:	4293      	cmp	r3, r2
 801d834:	d0f9      	beq.n	801d82a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801d836:	4b0a      	ldr	r3, [pc, #40]	@ (801d860 <HAL_RCC_OscConfig+0x8ac>)
 801d838:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d83a:	4b0a      	ldr	r3, [pc, #40]	@ (801d864 <HAL_RCC_OscConfig+0x8b0>)
 801d83c:	4013      	ands	r3, r2
 801d83e:	687a      	ldr	r2, [r7, #4]
 801d840:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801d842:	00d2      	lsls	r2, r2, #3
 801d844:	4906      	ldr	r1, [pc, #24]	@ (801d860 <HAL_RCC_OscConfig+0x8ac>)
 801d846:	4313      	orrs	r3, r2
 801d848:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801d84a:	4b05      	ldr	r3, [pc, #20]	@ (801d860 <HAL_RCC_OscConfig+0x8ac>)
 801d84c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d84e:	4a04      	ldr	r2, [pc, #16]	@ (801d860 <HAL_RCC_OscConfig+0x8ac>)
 801d850:	f043 0301 	orr.w	r3, r3, #1
 801d854:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801d856:	2300      	movs	r3, #0
}
 801d858:	4618      	mov	r0, r3
 801d85a:	3730      	adds	r7, #48	@ 0x30
 801d85c:	46bd      	mov	sp, r7
 801d85e:	bd80      	pop	{r7, pc}
 801d860:	58024400 	.word	0x58024400
 801d864:	ffff0007 	.word	0xffff0007

0801d868 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801d868:	b580      	push	{r7, lr}
 801d86a:	b086      	sub	sp, #24
 801d86c:	af00      	add	r7, sp, #0
 801d86e:	6078      	str	r0, [r7, #4]
 801d870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801d872:	687b      	ldr	r3, [r7, #4]
 801d874:	2b00      	cmp	r3, #0
 801d876:	d101      	bne.n	801d87c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801d878:	2301      	movs	r3, #1
 801d87a:	e19c      	b.n	801dbb6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801d87c:	4b8a      	ldr	r3, [pc, #552]	@ (801daa8 <HAL_RCC_ClockConfig+0x240>)
 801d87e:	681b      	ldr	r3, [r3, #0]
 801d880:	f003 030f 	and.w	r3, r3, #15
 801d884:	683a      	ldr	r2, [r7, #0]
 801d886:	429a      	cmp	r2, r3
 801d888:	d910      	bls.n	801d8ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801d88a:	4b87      	ldr	r3, [pc, #540]	@ (801daa8 <HAL_RCC_ClockConfig+0x240>)
 801d88c:	681b      	ldr	r3, [r3, #0]
 801d88e:	f023 020f 	bic.w	r2, r3, #15
 801d892:	4985      	ldr	r1, [pc, #532]	@ (801daa8 <HAL_RCC_ClockConfig+0x240>)
 801d894:	683b      	ldr	r3, [r7, #0]
 801d896:	4313      	orrs	r3, r2
 801d898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801d89a:	4b83      	ldr	r3, [pc, #524]	@ (801daa8 <HAL_RCC_ClockConfig+0x240>)
 801d89c:	681b      	ldr	r3, [r3, #0]
 801d89e:	f003 030f 	and.w	r3, r3, #15
 801d8a2:	683a      	ldr	r2, [r7, #0]
 801d8a4:	429a      	cmp	r2, r3
 801d8a6:	d001      	beq.n	801d8ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801d8a8:	2301      	movs	r3, #1
 801d8aa:	e184      	b.n	801dbb6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801d8ac:	687b      	ldr	r3, [r7, #4]
 801d8ae:	681b      	ldr	r3, [r3, #0]
 801d8b0:	f003 0304 	and.w	r3, r3, #4
 801d8b4:	2b00      	cmp	r3, #0
 801d8b6:	d010      	beq.n	801d8da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801d8b8:	687b      	ldr	r3, [r7, #4]
 801d8ba:	691a      	ldr	r2, [r3, #16]
 801d8bc:	4b7b      	ldr	r3, [pc, #492]	@ (801daac <HAL_RCC_ClockConfig+0x244>)
 801d8be:	699b      	ldr	r3, [r3, #24]
 801d8c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d8c4:	429a      	cmp	r2, r3
 801d8c6:	d908      	bls.n	801d8da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801d8c8:	4b78      	ldr	r3, [pc, #480]	@ (801daac <HAL_RCC_ClockConfig+0x244>)
 801d8ca:	699b      	ldr	r3, [r3, #24]
 801d8cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d8d0:	687b      	ldr	r3, [r7, #4]
 801d8d2:	691b      	ldr	r3, [r3, #16]
 801d8d4:	4975      	ldr	r1, [pc, #468]	@ (801daac <HAL_RCC_ClockConfig+0x244>)
 801d8d6:	4313      	orrs	r3, r2
 801d8d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801d8da:	687b      	ldr	r3, [r7, #4]
 801d8dc:	681b      	ldr	r3, [r3, #0]
 801d8de:	f003 0308 	and.w	r3, r3, #8
 801d8e2:	2b00      	cmp	r3, #0
 801d8e4:	d010      	beq.n	801d908 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801d8e6:	687b      	ldr	r3, [r7, #4]
 801d8e8:	695a      	ldr	r2, [r3, #20]
 801d8ea:	4b70      	ldr	r3, [pc, #448]	@ (801daac <HAL_RCC_ClockConfig+0x244>)
 801d8ec:	69db      	ldr	r3, [r3, #28]
 801d8ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d8f2:	429a      	cmp	r2, r3
 801d8f4:	d908      	bls.n	801d908 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801d8f6:	4b6d      	ldr	r3, [pc, #436]	@ (801daac <HAL_RCC_ClockConfig+0x244>)
 801d8f8:	69db      	ldr	r3, [r3, #28]
 801d8fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d8fe:	687b      	ldr	r3, [r7, #4]
 801d900:	695b      	ldr	r3, [r3, #20]
 801d902:	496a      	ldr	r1, [pc, #424]	@ (801daac <HAL_RCC_ClockConfig+0x244>)
 801d904:	4313      	orrs	r3, r2
 801d906:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801d908:	687b      	ldr	r3, [r7, #4]
 801d90a:	681b      	ldr	r3, [r3, #0]
 801d90c:	f003 0310 	and.w	r3, r3, #16
 801d910:	2b00      	cmp	r3, #0
 801d912:	d010      	beq.n	801d936 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801d914:	687b      	ldr	r3, [r7, #4]
 801d916:	699a      	ldr	r2, [r3, #24]
 801d918:	4b64      	ldr	r3, [pc, #400]	@ (801daac <HAL_RCC_ClockConfig+0x244>)
 801d91a:	69db      	ldr	r3, [r3, #28]
 801d91c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801d920:	429a      	cmp	r2, r3
 801d922:	d908      	bls.n	801d936 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801d924:	4b61      	ldr	r3, [pc, #388]	@ (801daac <HAL_RCC_ClockConfig+0x244>)
 801d926:	69db      	ldr	r3, [r3, #28]
 801d928:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801d92c:	687b      	ldr	r3, [r7, #4]
 801d92e:	699b      	ldr	r3, [r3, #24]
 801d930:	495e      	ldr	r1, [pc, #376]	@ (801daac <HAL_RCC_ClockConfig+0x244>)
 801d932:	4313      	orrs	r3, r2
 801d934:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801d936:	687b      	ldr	r3, [r7, #4]
 801d938:	681b      	ldr	r3, [r3, #0]
 801d93a:	f003 0320 	and.w	r3, r3, #32
 801d93e:	2b00      	cmp	r3, #0
 801d940:	d010      	beq.n	801d964 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801d942:	687b      	ldr	r3, [r7, #4]
 801d944:	69da      	ldr	r2, [r3, #28]
 801d946:	4b59      	ldr	r3, [pc, #356]	@ (801daac <HAL_RCC_ClockConfig+0x244>)
 801d948:	6a1b      	ldr	r3, [r3, #32]
 801d94a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d94e:	429a      	cmp	r2, r3
 801d950:	d908      	bls.n	801d964 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801d952:	4b56      	ldr	r3, [pc, #344]	@ (801daac <HAL_RCC_ClockConfig+0x244>)
 801d954:	6a1b      	ldr	r3, [r3, #32]
 801d956:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d95a:	687b      	ldr	r3, [r7, #4]
 801d95c:	69db      	ldr	r3, [r3, #28]
 801d95e:	4953      	ldr	r1, [pc, #332]	@ (801daac <HAL_RCC_ClockConfig+0x244>)
 801d960:	4313      	orrs	r3, r2
 801d962:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801d964:	687b      	ldr	r3, [r7, #4]
 801d966:	681b      	ldr	r3, [r3, #0]
 801d968:	f003 0302 	and.w	r3, r3, #2
 801d96c:	2b00      	cmp	r3, #0
 801d96e:	d010      	beq.n	801d992 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801d970:	687b      	ldr	r3, [r7, #4]
 801d972:	68da      	ldr	r2, [r3, #12]
 801d974:	4b4d      	ldr	r3, [pc, #308]	@ (801daac <HAL_RCC_ClockConfig+0x244>)
 801d976:	699b      	ldr	r3, [r3, #24]
 801d978:	f003 030f 	and.w	r3, r3, #15
 801d97c:	429a      	cmp	r2, r3
 801d97e:	d908      	bls.n	801d992 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801d980:	4b4a      	ldr	r3, [pc, #296]	@ (801daac <HAL_RCC_ClockConfig+0x244>)
 801d982:	699b      	ldr	r3, [r3, #24]
 801d984:	f023 020f 	bic.w	r2, r3, #15
 801d988:	687b      	ldr	r3, [r7, #4]
 801d98a:	68db      	ldr	r3, [r3, #12]
 801d98c:	4947      	ldr	r1, [pc, #284]	@ (801daac <HAL_RCC_ClockConfig+0x244>)
 801d98e:	4313      	orrs	r3, r2
 801d990:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801d992:	687b      	ldr	r3, [r7, #4]
 801d994:	681b      	ldr	r3, [r3, #0]
 801d996:	f003 0301 	and.w	r3, r3, #1
 801d99a:	2b00      	cmp	r3, #0
 801d99c:	d055      	beq.n	801da4a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801d99e:	4b43      	ldr	r3, [pc, #268]	@ (801daac <HAL_RCC_ClockConfig+0x244>)
 801d9a0:	699b      	ldr	r3, [r3, #24]
 801d9a2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801d9a6:	687b      	ldr	r3, [r7, #4]
 801d9a8:	689b      	ldr	r3, [r3, #8]
 801d9aa:	4940      	ldr	r1, [pc, #256]	@ (801daac <HAL_RCC_ClockConfig+0x244>)
 801d9ac:	4313      	orrs	r3, r2
 801d9ae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801d9b0:	687b      	ldr	r3, [r7, #4]
 801d9b2:	685b      	ldr	r3, [r3, #4]
 801d9b4:	2b02      	cmp	r3, #2
 801d9b6:	d107      	bne.n	801d9c8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801d9b8:	4b3c      	ldr	r3, [pc, #240]	@ (801daac <HAL_RCC_ClockConfig+0x244>)
 801d9ba:	681b      	ldr	r3, [r3, #0]
 801d9bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801d9c0:	2b00      	cmp	r3, #0
 801d9c2:	d121      	bne.n	801da08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801d9c4:	2301      	movs	r3, #1
 801d9c6:	e0f6      	b.n	801dbb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801d9c8:	687b      	ldr	r3, [r7, #4]
 801d9ca:	685b      	ldr	r3, [r3, #4]
 801d9cc:	2b03      	cmp	r3, #3
 801d9ce:	d107      	bne.n	801d9e0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801d9d0:	4b36      	ldr	r3, [pc, #216]	@ (801daac <HAL_RCC_ClockConfig+0x244>)
 801d9d2:	681b      	ldr	r3, [r3, #0]
 801d9d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d9d8:	2b00      	cmp	r3, #0
 801d9da:	d115      	bne.n	801da08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801d9dc:	2301      	movs	r3, #1
 801d9de:	e0ea      	b.n	801dbb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801d9e0:	687b      	ldr	r3, [r7, #4]
 801d9e2:	685b      	ldr	r3, [r3, #4]
 801d9e4:	2b01      	cmp	r3, #1
 801d9e6:	d107      	bne.n	801d9f8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801d9e8:	4b30      	ldr	r3, [pc, #192]	@ (801daac <HAL_RCC_ClockConfig+0x244>)
 801d9ea:	681b      	ldr	r3, [r3, #0]
 801d9ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d9f0:	2b00      	cmp	r3, #0
 801d9f2:	d109      	bne.n	801da08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801d9f4:	2301      	movs	r3, #1
 801d9f6:	e0de      	b.n	801dbb6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801d9f8:	4b2c      	ldr	r3, [pc, #176]	@ (801daac <HAL_RCC_ClockConfig+0x244>)
 801d9fa:	681b      	ldr	r3, [r3, #0]
 801d9fc:	f003 0304 	and.w	r3, r3, #4
 801da00:	2b00      	cmp	r3, #0
 801da02:	d101      	bne.n	801da08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801da04:	2301      	movs	r3, #1
 801da06:	e0d6      	b.n	801dbb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801da08:	4b28      	ldr	r3, [pc, #160]	@ (801daac <HAL_RCC_ClockConfig+0x244>)
 801da0a:	691b      	ldr	r3, [r3, #16]
 801da0c:	f023 0207 	bic.w	r2, r3, #7
 801da10:	687b      	ldr	r3, [r7, #4]
 801da12:	685b      	ldr	r3, [r3, #4]
 801da14:	4925      	ldr	r1, [pc, #148]	@ (801daac <HAL_RCC_ClockConfig+0x244>)
 801da16:	4313      	orrs	r3, r2
 801da18:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801da1a:	f7fc feb3 	bl	801a784 <HAL_GetTick>
 801da1e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801da20:	e00a      	b.n	801da38 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801da22:	f7fc feaf 	bl	801a784 <HAL_GetTick>
 801da26:	4602      	mov	r2, r0
 801da28:	697b      	ldr	r3, [r7, #20]
 801da2a:	1ad3      	subs	r3, r2, r3
 801da2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 801da30:	4293      	cmp	r3, r2
 801da32:	d901      	bls.n	801da38 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801da34:	2303      	movs	r3, #3
 801da36:	e0be      	b.n	801dbb6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801da38:	4b1c      	ldr	r3, [pc, #112]	@ (801daac <HAL_RCC_ClockConfig+0x244>)
 801da3a:	691b      	ldr	r3, [r3, #16]
 801da3c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 801da40:	687b      	ldr	r3, [r7, #4]
 801da42:	685b      	ldr	r3, [r3, #4]
 801da44:	00db      	lsls	r3, r3, #3
 801da46:	429a      	cmp	r2, r3
 801da48:	d1eb      	bne.n	801da22 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801da4a:	687b      	ldr	r3, [r7, #4]
 801da4c:	681b      	ldr	r3, [r3, #0]
 801da4e:	f003 0302 	and.w	r3, r3, #2
 801da52:	2b00      	cmp	r3, #0
 801da54:	d010      	beq.n	801da78 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801da56:	687b      	ldr	r3, [r7, #4]
 801da58:	68da      	ldr	r2, [r3, #12]
 801da5a:	4b14      	ldr	r3, [pc, #80]	@ (801daac <HAL_RCC_ClockConfig+0x244>)
 801da5c:	699b      	ldr	r3, [r3, #24]
 801da5e:	f003 030f 	and.w	r3, r3, #15
 801da62:	429a      	cmp	r2, r3
 801da64:	d208      	bcs.n	801da78 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801da66:	4b11      	ldr	r3, [pc, #68]	@ (801daac <HAL_RCC_ClockConfig+0x244>)
 801da68:	699b      	ldr	r3, [r3, #24]
 801da6a:	f023 020f 	bic.w	r2, r3, #15
 801da6e:	687b      	ldr	r3, [r7, #4]
 801da70:	68db      	ldr	r3, [r3, #12]
 801da72:	490e      	ldr	r1, [pc, #56]	@ (801daac <HAL_RCC_ClockConfig+0x244>)
 801da74:	4313      	orrs	r3, r2
 801da76:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801da78:	4b0b      	ldr	r3, [pc, #44]	@ (801daa8 <HAL_RCC_ClockConfig+0x240>)
 801da7a:	681b      	ldr	r3, [r3, #0]
 801da7c:	f003 030f 	and.w	r3, r3, #15
 801da80:	683a      	ldr	r2, [r7, #0]
 801da82:	429a      	cmp	r2, r3
 801da84:	d214      	bcs.n	801dab0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801da86:	4b08      	ldr	r3, [pc, #32]	@ (801daa8 <HAL_RCC_ClockConfig+0x240>)
 801da88:	681b      	ldr	r3, [r3, #0]
 801da8a:	f023 020f 	bic.w	r2, r3, #15
 801da8e:	4906      	ldr	r1, [pc, #24]	@ (801daa8 <HAL_RCC_ClockConfig+0x240>)
 801da90:	683b      	ldr	r3, [r7, #0]
 801da92:	4313      	orrs	r3, r2
 801da94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801da96:	4b04      	ldr	r3, [pc, #16]	@ (801daa8 <HAL_RCC_ClockConfig+0x240>)
 801da98:	681b      	ldr	r3, [r3, #0]
 801da9a:	f003 030f 	and.w	r3, r3, #15
 801da9e:	683a      	ldr	r2, [r7, #0]
 801daa0:	429a      	cmp	r2, r3
 801daa2:	d005      	beq.n	801dab0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801daa4:	2301      	movs	r3, #1
 801daa6:	e086      	b.n	801dbb6 <HAL_RCC_ClockConfig+0x34e>
 801daa8:	52002000 	.word	0x52002000
 801daac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801dab0:	687b      	ldr	r3, [r7, #4]
 801dab2:	681b      	ldr	r3, [r3, #0]
 801dab4:	f003 0304 	and.w	r3, r3, #4
 801dab8:	2b00      	cmp	r3, #0
 801daba:	d010      	beq.n	801dade <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801dabc:	687b      	ldr	r3, [r7, #4]
 801dabe:	691a      	ldr	r2, [r3, #16]
 801dac0:	4b3f      	ldr	r3, [pc, #252]	@ (801dbc0 <HAL_RCC_ClockConfig+0x358>)
 801dac2:	699b      	ldr	r3, [r3, #24]
 801dac4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801dac8:	429a      	cmp	r2, r3
 801daca:	d208      	bcs.n	801dade <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801dacc:	4b3c      	ldr	r3, [pc, #240]	@ (801dbc0 <HAL_RCC_ClockConfig+0x358>)
 801dace:	699b      	ldr	r3, [r3, #24]
 801dad0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801dad4:	687b      	ldr	r3, [r7, #4]
 801dad6:	691b      	ldr	r3, [r3, #16]
 801dad8:	4939      	ldr	r1, [pc, #228]	@ (801dbc0 <HAL_RCC_ClockConfig+0x358>)
 801dada:	4313      	orrs	r3, r2
 801dadc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801dade:	687b      	ldr	r3, [r7, #4]
 801dae0:	681b      	ldr	r3, [r3, #0]
 801dae2:	f003 0308 	and.w	r3, r3, #8
 801dae6:	2b00      	cmp	r3, #0
 801dae8:	d010      	beq.n	801db0c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801daea:	687b      	ldr	r3, [r7, #4]
 801daec:	695a      	ldr	r2, [r3, #20]
 801daee:	4b34      	ldr	r3, [pc, #208]	@ (801dbc0 <HAL_RCC_ClockConfig+0x358>)
 801daf0:	69db      	ldr	r3, [r3, #28]
 801daf2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801daf6:	429a      	cmp	r2, r3
 801daf8:	d208      	bcs.n	801db0c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801dafa:	4b31      	ldr	r3, [pc, #196]	@ (801dbc0 <HAL_RCC_ClockConfig+0x358>)
 801dafc:	69db      	ldr	r3, [r3, #28]
 801dafe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801db02:	687b      	ldr	r3, [r7, #4]
 801db04:	695b      	ldr	r3, [r3, #20]
 801db06:	492e      	ldr	r1, [pc, #184]	@ (801dbc0 <HAL_RCC_ClockConfig+0x358>)
 801db08:	4313      	orrs	r3, r2
 801db0a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801db0c:	687b      	ldr	r3, [r7, #4]
 801db0e:	681b      	ldr	r3, [r3, #0]
 801db10:	f003 0310 	and.w	r3, r3, #16
 801db14:	2b00      	cmp	r3, #0
 801db16:	d010      	beq.n	801db3a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801db18:	687b      	ldr	r3, [r7, #4]
 801db1a:	699a      	ldr	r2, [r3, #24]
 801db1c:	4b28      	ldr	r3, [pc, #160]	@ (801dbc0 <HAL_RCC_ClockConfig+0x358>)
 801db1e:	69db      	ldr	r3, [r3, #28]
 801db20:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801db24:	429a      	cmp	r2, r3
 801db26:	d208      	bcs.n	801db3a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801db28:	4b25      	ldr	r3, [pc, #148]	@ (801dbc0 <HAL_RCC_ClockConfig+0x358>)
 801db2a:	69db      	ldr	r3, [r3, #28]
 801db2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801db30:	687b      	ldr	r3, [r7, #4]
 801db32:	699b      	ldr	r3, [r3, #24]
 801db34:	4922      	ldr	r1, [pc, #136]	@ (801dbc0 <HAL_RCC_ClockConfig+0x358>)
 801db36:	4313      	orrs	r3, r2
 801db38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801db3a:	687b      	ldr	r3, [r7, #4]
 801db3c:	681b      	ldr	r3, [r3, #0]
 801db3e:	f003 0320 	and.w	r3, r3, #32
 801db42:	2b00      	cmp	r3, #0
 801db44:	d010      	beq.n	801db68 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801db46:	687b      	ldr	r3, [r7, #4]
 801db48:	69da      	ldr	r2, [r3, #28]
 801db4a:	4b1d      	ldr	r3, [pc, #116]	@ (801dbc0 <HAL_RCC_ClockConfig+0x358>)
 801db4c:	6a1b      	ldr	r3, [r3, #32]
 801db4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801db52:	429a      	cmp	r2, r3
 801db54:	d208      	bcs.n	801db68 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801db56:	4b1a      	ldr	r3, [pc, #104]	@ (801dbc0 <HAL_RCC_ClockConfig+0x358>)
 801db58:	6a1b      	ldr	r3, [r3, #32]
 801db5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801db5e:	687b      	ldr	r3, [r7, #4]
 801db60:	69db      	ldr	r3, [r3, #28]
 801db62:	4917      	ldr	r1, [pc, #92]	@ (801dbc0 <HAL_RCC_ClockConfig+0x358>)
 801db64:	4313      	orrs	r3, r2
 801db66:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801db68:	f000 f834 	bl	801dbd4 <HAL_RCC_GetSysClockFreq>
 801db6c:	4602      	mov	r2, r0
 801db6e:	4b14      	ldr	r3, [pc, #80]	@ (801dbc0 <HAL_RCC_ClockConfig+0x358>)
 801db70:	699b      	ldr	r3, [r3, #24]
 801db72:	0a1b      	lsrs	r3, r3, #8
 801db74:	f003 030f 	and.w	r3, r3, #15
 801db78:	4912      	ldr	r1, [pc, #72]	@ (801dbc4 <HAL_RCC_ClockConfig+0x35c>)
 801db7a:	5ccb      	ldrb	r3, [r1, r3]
 801db7c:	f003 031f 	and.w	r3, r3, #31
 801db80:	fa22 f303 	lsr.w	r3, r2, r3
 801db84:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801db86:	4b0e      	ldr	r3, [pc, #56]	@ (801dbc0 <HAL_RCC_ClockConfig+0x358>)
 801db88:	699b      	ldr	r3, [r3, #24]
 801db8a:	f003 030f 	and.w	r3, r3, #15
 801db8e:	4a0d      	ldr	r2, [pc, #52]	@ (801dbc4 <HAL_RCC_ClockConfig+0x35c>)
 801db90:	5cd3      	ldrb	r3, [r2, r3]
 801db92:	f003 031f 	and.w	r3, r3, #31
 801db96:	693a      	ldr	r2, [r7, #16]
 801db98:	fa22 f303 	lsr.w	r3, r2, r3
 801db9c:	4a0a      	ldr	r2, [pc, #40]	@ (801dbc8 <HAL_RCC_ClockConfig+0x360>)
 801db9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801dba0:	4a0a      	ldr	r2, [pc, #40]	@ (801dbcc <HAL_RCC_ClockConfig+0x364>)
 801dba2:	693b      	ldr	r3, [r7, #16]
 801dba4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801dba6:	4b0a      	ldr	r3, [pc, #40]	@ (801dbd0 <HAL_RCC_ClockConfig+0x368>)
 801dba8:	681b      	ldr	r3, [r3, #0]
 801dbaa:	4618      	mov	r0, r3
 801dbac:	f7fc fda0 	bl	801a6f0 <HAL_InitTick>
 801dbb0:	4603      	mov	r3, r0
 801dbb2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801dbb4:	7bfb      	ldrb	r3, [r7, #15]
}
 801dbb6:	4618      	mov	r0, r3
 801dbb8:	3718      	adds	r7, #24
 801dbba:	46bd      	mov	sp, r7
 801dbbc:	bd80      	pop	{r7, pc}
 801dbbe:	bf00      	nop
 801dbc0:	58024400 	.word	0x58024400
 801dbc4:	08027ee4 	.word	0x08027ee4
 801dbc8:	20000004 	.word	0x20000004
 801dbcc:	20000000 	.word	0x20000000
 801dbd0:	20000020 	.word	0x20000020

0801dbd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801dbd4:	b480      	push	{r7}
 801dbd6:	b089      	sub	sp, #36	@ 0x24
 801dbd8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801dbda:	4bb3      	ldr	r3, [pc, #716]	@ (801dea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dbdc:	691b      	ldr	r3, [r3, #16]
 801dbde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801dbe2:	2b18      	cmp	r3, #24
 801dbe4:	f200 8155 	bhi.w	801de92 <HAL_RCC_GetSysClockFreq+0x2be>
 801dbe8:	a201      	add	r2, pc, #4	@ (adr r2, 801dbf0 <HAL_RCC_GetSysClockFreq+0x1c>)
 801dbea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dbee:	bf00      	nop
 801dbf0:	0801dc55 	.word	0x0801dc55
 801dbf4:	0801de93 	.word	0x0801de93
 801dbf8:	0801de93 	.word	0x0801de93
 801dbfc:	0801de93 	.word	0x0801de93
 801dc00:	0801de93 	.word	0x0801de93
 801dc04:	0801de93 	.word	0x0801de93
 801dc08:	0801de93 	.word	0x0801de93
 801dc0c:	0801de93 	.word	0x0801de93
 801dc10:	0801dc7b 	.word	0x0801dc7b
 801dc14:	0801de93 	.word	0x0801de93
 801dc18:	0801de93 	.word	0x0801de93
 801dc1c:	0801de93 	.word	0x0801de93
 801dc20:	0801de93 	.word	0x0801de93
 801dc24:	0801de93 	.word	0x0801de93
 801dc28:	0801de93 	.word	0x0801de93
 801dc2c:	0801de93 	.word	0x0801de93
 801dc30:	0801dc81 	.word	0x0801dc81
 801dc34:	0801de93 	.word	0x0801de93
 801dc38:	0801de93 	.word	0x0801de93
 801dc3c:	0801de93 	.word	0x0801de93
 801dc40:	0801de93 	.word	0x0801de93
 801dc44:	0801de93 	.word	0x0801de93
 801dc48:	0801de93 	.word	0x0801de93
 801dc4c:	0801de93 	.word	0x0801de93
 801dc50:	0801dc87 	.word	0x0801dc87
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801dc54:	4b94      	ldr	r3, [pc, #592]	@ (801dea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dc56:	681b      	ldr	r3, [r3, #0]
 801dc58:	f003 0320 	and.w	r3, r3, #32
 801dc5c:	2b00      	cmp	r3, #0
 801dc5e:	d009      	beq.n	801dc74 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801dc60:	4b91      	ldr	r3, [pc, #580]	@ (801dea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dc62:	681b      	ldr	r3, [r3, #0]
 801dc64:	08db      	lsrs	r3, r3, #3
 801dc66:	f003 0303 	and.w	r3, r3, #3
 801dc6a:	4a90      	ldr	r2, [pc, #576]	@ (801deac <HAL_RCC_GetSysClockFreq+0x2d8>)
 801dc6c:	fa22 f303 	lsr.w	r3, r2, r3
 801dc70:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801dc72:	e111      	b.n	801de98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801dc74:	4b8d      	ldr	r3, [pc, #564]	@ (801deac <HAL_RCC_GetSysClockFreq+0x2d8>)
 801dc76:	61bb      	str	r3, [r7, #24]
      break;
 801dc78:	e10e      	b.n	801de98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801dc7a:	4b8d      	ldr	r3, [pc, #564]	@ (801deb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801dc7c:	61bb      	str	r3, [r7, #24]
      break;
 801dc7e:	e10b      	b.n	801de98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801dc80:	4b8c      	ldr	r3, [pc, #560]	@ (801deb4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801dc82:	61bb      	str	r3, [r7, #24]
      break;
 801dc84:	e108      	b.n	801de98 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801dc86:	4b88      	ldr	r3, [pc, #544]	@ (801dea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dc88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dc8a:	f003 0303 	and.w	r3, r3, #3
 801dc8e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801dc90:	4b85      	ldr	r3, [pc, #532]	@ (801dea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dc92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dc94:	091b      	lsrs	r3, r3, #4
 801dc96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801dc9a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801dc9c:	4b82      	ldr	r3, [pc, #520]	@ (801dea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dc9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dca0:	f003 0301 	and.w	r3, r3, #1
 801dca4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801dca6:	4b80      	ldr	r3, [pc, #512]	@ (801dea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801dcaa:	08db      	lsrs	r3, r3, #3
 801dcac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dcb0:	68fa      	ldr	r2, [r7, #12]
 801dcb2:	fb02 f303 	mul.w	r3, r2, r3
 801dcb6:	ee07 3a90 	vmov	s15, r3
 801dcba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dcbe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801dcc2:	693b      	ldr	r3, [r7, #16]
 801dcc4:	2b00      	cmp	r3, #0
 801dcc6:	f000 80e1 	beq.w	801de8c <HAL_RCC_GetSysClockFreq+0x2b8>
 801dcca:	697b      	ldr	r3, [r7, #20]
 801dccc:	2b02      	cmp	r3, #2
 801dcce:	f000 8083 	beq.w	801ddd8 <HAL_RCC_GetSysClockFreq+0x204>
 801dcd2:	697b      	ldr	r3, [r7, #20]
 801dcd4:	2b02      	cmp	r3, #2
 801dcd6:	f200 80a1 	bhi.w	801de1c <HAL_RCC_GetSysClockFreq+0x248>
 801dcda:	697b      	ldr	r3, [r7, #20]
 801dcdc:	2b00      	cmp	r3, #0
 801dcde:	d003      	beq.n	801dce8 <HAL_RCC_GetSysClockFreq+0x114>
 801dce0:	697b      	ldr	r3, [r7, #20]
 801dce2:	2b01      	cmp	r3, #1
 801dce4:	d056      	beq.n	801dd94 <HAL_RCC_GetSysClockFreq+0x1c0>
 801dce6:	e099      	b.n	801de1c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801dce8:	4b6f      	ldr	r3, [pc, #444]	@ (801dea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dcea:	681b      	ldr	r3, [r3, #0]
 801dcec:	f003 0320 	and.w	r3, r3, #32
 801dcf0:	2b00      	cmp	r3, #0
 801dcf2:	d02d      	beq.n	801dd50 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801dcf4:	4b6c      	ldr	r3, [pc, #432]	@ (801dea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dcf6:	681b      	ldr	r3, [r3, #0]
 801dcf8:	08db      	lsrs	r3, r3, #3
 801dcfa:	f003 0303 	and.w	r3, r3, #3
 801dcfe:	4a6b      	ldr	r2, [pc, #428]	@ (801deac <HAL_RCC_GetSysClockFreq+0x2d8>)
 801dd00:	fa22 f303 	lsr.w	r3, r2, r3
 801dd04:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801dd06:	687b      	ldr	r3, [r7, #4]
 801dd08:	ee07 3a90 	vmov	s15, r3
 801dd0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dd10:	693b      	ldr	r3, [r7, #16]
 801dd12:	ee07 3a90 	vmov	s15, r3
 801dd16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dd1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dd1e:	4b62      	ldr	r3, [pc, #392]	@ (801dea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dd20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801dd22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dd26:	ee07 3a90 	vmov	s15, r3
 801dd2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dd2e:	ed97 6a02 	vldr	s12, [r7, #8]
 801dd32:	eddf 5a61 	vldr	s11, [pc, #388]	@ 801deb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 801dd36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dd3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dd3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801dd42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dd46:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dd4a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801dd4e:	e087      	b.n	801de60 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801dd50:	693b      	ldr	r3, [r7, #16]
 801dd52:	ee07 3a90 	vmov	s15, r3
 801dd56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dd5a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 801debc <HAL_RCC_GetSysClockFreq+0x2e8>
 801dd5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dd62:	4b51      	ldr	r3, [pc, #324]	@ (801dea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dd64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801dd66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dd6a:	ee07 3a90 	vmov	s15, r3
 801dd6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dd72:	ed97 6a02 	vldr	s12, [r7, #8]
 801dd76:	eddf 5a50 	vldr	s11, [pc, #320]	@ 801deb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 801dd7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dd7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dd82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801dd86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dd8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dd8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801dd92:	e065      	b.n	801de60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801dd94:	693b      	ldr	r3, [r7, #16]
 801dd96:	ee07 3a90 	vmov	s15, r3
 801dd9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dd9e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 801dec0 <HAL_RCC_GetSysClockFreq+0x2ec>
 801dda2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dda6:	4b40      	ldr	r3, [pc, #256]	@ (801dea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dda8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ddaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ddae:	ee07 3a90 	vmov	s15, r3
 801ddb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ddb6:	ed97 6a02 	vldr	s12, [r7, #8]
 801ddba:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801deb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 801ddbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ddc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ddc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ddca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ddce:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ddd2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801ddd6:	e043      	b.n	801de60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801ddd8:	693b      	ldr	r3, [r7, #16]
 801ddda:	ee07 3a90 	vmov	s15, r3
 801ddde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dde2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 801dec4 <HAL_RCC_GetSysClockFreq+0x2f0>
 801dde6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ddea:	4b2f      	ldr	r3, [pc, #188]	@ (801dea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ddec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ddee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ddf2:	ee07 3a90 	vmov	s15, r3
 801ddf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ddfa:	ed97 6a02 	vldr	s12, [r7, #8]
 801ddfe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801deb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 801de02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801de06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801de0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801de0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801de12:	ee67 7a27 	vmul.f32	s15, s14, s15
 801de16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801de1a:	e021      	b.n	801de60 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801de1c:	693b      	ldr	r3, [r7, #16]
 801de1e:	ee07 3a90 	vmov	s15, r3
 801de22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801de26:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801dec0 <HAL_RCC_GetSysClockFreq+0x2ec>
 801de2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801de2e:	4b1e      	ldr	r3, [pc, #120]	@ (801dea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801de30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801de32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801de36:	ee07 3a90 	vmov	s15, r3
 801de3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801de3e:	ed97 6a02 	vldr	s12, [r7, #8]
 801de42:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 801deb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 801de46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801de4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801de4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801de52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801de56:	ee67 7a27 	vmul.f32	s15, s14, s15
 801de5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801de5e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801de60:	4b11      	ldr	r3, [pc, #68]	@ (801dea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801de62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801de64:	0a5b      	lsrs	r3, r3, #9
 801de66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801de6a:	3301      	adds	r3, #1
 801de6c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801de6e:	683b      	ldr	r3, [r7, #0]
 801de70:	ee07 3a90 	vmov	s15, r3
 801de74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801de78:	edd7 6a07 	vldr	s13, [r7, #28]
 801de7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801de80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801de84:	ee17 3a90 	vmov	r3, s15
 801de88:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801de8a:	e005      	b.n	801de98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801de8c:	2300      	movs	r3, #0
 801de8e:	61bb      	str	r3, [r7, #24]
      break;
 801de90:	e002      	b.n	801de98 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801de92:	4b07      	ldr	r3, [pc, #28]	@ (801deb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801de94:	61bb      	str	r3, [r7, #24]
      break;
 801de96:	bf00      	nop
  }

  return sysclockfreq;
 801de98:	69bb      	ldr	r3, [r7, #24]
}
 801de9a:	4618      	mov	r0, r3
 801de9c:	3724      	adds	r7, #36	@ 0x24
 801de9e:	46bd      	mov	sp, r7
 801dea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dea4:	4770      	bx	lr
 801dea6:	bf00      	nop
 801dea8:	58024400 	.word	0x58024400
 801deac:	03d09000 	.word	0x03d09000
 801deb0:	003d0900 	.word	0x003d0900
 801deb4:	017d7840 	.word	0x017d7840
 801deb8:	46000000 	.word	0x46000000
 801debc:	4c742400 	.word	0x4c742400
 801dec0:	4a742400 	.word	0x4a742400
 801dec4:	4bbebc20 	.word	0x4bbebc20

0801dec8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801dec8:	b580      	push	{r7, lr}
 801deca:	b082      	sub	sp, #8
 801decc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801dece:	f7ff fe81 	bl	801dbd4 <HAL_RCC_GetSysClockFreq>
 801ded2:	4602      	mov	r2, r0
 801ded4:	4b10      	ldr	r3, [pc, #64]	@ (801df18 <HAL_RCC_GetHCLKFreq+0x50>)
 801ded6:	699b      	ldr	r3, [r3, #24]
 801ded8:	0a1b      	lsrs	r3, r3, #8
 801deda:	f003 030f 	and.w	r3, r3, #15
 801dede:	490f      	ldr	r1, [pc, #60]	@ (801df1c <HAL_RCC_GetHCLKFreq+0x54>)
 801dee0:	5ccb      	ldrb	r3, [r1, r3]
 801dee2:	f003 031f 	and.w	r3, r3, #31
 801dee6:	fa22 f303 	lsr.w	r3, r2, r3
 801deea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801deec:	4b0a      	ldr	r3, [pc, #40]	@ (801df18 <HAL_RCC_GetHCLKFreq+0x50>)
 801deee:	699b      	ldr	r3, [r3, #24]
 801def0:	f003 030f 	and.w	r3, r3, #15
 801def4:	4a09      	ldr	r2, [pc, #36]	@ (801df1c <HAL_RCC_GetHCLKFreq+0x54>)
 801def6:	5cd3      	ldrb	r3, [r2, r3]
 801def8:	f003 031f 	and.w	r3, r3, #31
 801defc:	687a      	ldr	r2, [r7, #4]
 801defe:	fa22 f303 	lsr.w	r3, r2, r3
 801df02:	4a07      	ldr	r2, [pc, #28]	@ (801df20 <HAL_RCC_GetHCLKFreq+0x58>)
 801df04:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801df06:	4a07      	ldr	r2, [pc, #28]	@ (801df24 <HAL_RCC_GetHCLKFreq+0x5c>)
 801df08:	687b      	ldr	r3, [r7, #4]
 801df0a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801df0c:	4b04      	ldr	r3, [pc, #16]	@ (801df20 <HAL_RCC_GetHCLKFreq+0x58>)
 801df0e:	681b      	ldr	r3, [r3, #0]
}
 801df10:	4618      	mov	r0, r3
 801df12:	3708      	adds	r7, #8
 801df14:	46bd      	mov	sp, r7
 801df16:	bd80      	pop	{r7, pc}
 801df18:	58024400 	.word	0x58024400
 801df1c:	08027ee4 	.word	0x08027ee4
 801df20:	20000004 	.word	0x20000004
 801df24:	20000000 	.word	0x20000000

0801df28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801df28:	b580      	push	{r7, lr}
 801df2a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801df2c:	f7ff ffcc 	bl	801dec8 <HAL_RCC_GetHCLKFreq>
 801df30:	4602      	mov	r2, r0
 801df32:	4b06      	ldr	r3, [pc, #24]	@ (801df4c <HAL_RCC_GetPCLK1Freq+0x24>)
 801df34:	69db      	ldr	r3, [r3, #28]
 801df36:	091b      	lsrs	r3, r3, #4
 801df38:	f003 0307 	and.w	r3, r3, #7
 801df3c:	4904      	ldr	r1, [pc, #16]	@ (801df50 <HAL_RCC_GetPCLK1Freq+0x28>)
 801df3e:	5ccb      	ldrb	r3, [r1, r3]
 801df40:	f003 031f 	and.w	r3, r3, #31
 801df44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801df48:	4618      	mov	r0, r3
 801df4a:	bd80      	pop	{r7, pc}
 801df4c:	58024400 	.word	0x58024400
 801df50:	08027ee4 	.word	0x08027ee4

0801df54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801df54:	b580      	push	{r7, lr}
 801df56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801df58:	f7ff ffb6 	bl	801dec8 <HAL_RCC_GetHCLKFreq>
 801df5c:	4602      	mov	r2, r0
 801df5e:	4b06      	ldr	r3, [pc, #24]	@ (801df78 <HAL_RCC_GetPCLK2Freq+0x24>)
 801df60:	69db      	ldr	r3, [r3, #28]
 801df62:	0a1b      	lsrs	r3, r3, #8
 801df64:	f003 0307 	and.w	r3, r3, #7
 801df68:	4904      	ldr	r1, [pc, #16]	@ (801df7c <HAL_RCC_GetPCLK2Freq+0x28>)
 801df6a:	5ccb      	ldrb	r3, [r1, r3]
 801df6c:	f003 031f 	and.w	r3, r3, #31
 801df70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801df74:	4618      	mov	r0, r3
 801df76:	bd80      	pop	{r7, pc}
 801df78:	58024400 	.word	0x58024400
 801df7c:	08027ee4 	.word	0x08027ee4

0801df80 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801df80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801df84:	b0ca      	sub	sp, #296	@ 0x128
 801df86:	af00      	add	r7, sp, #0
 801df88:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801df8c:	2300      	movs	r3, #0
 801df8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801df92:	2300      	movs	r3, #0
 801df94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801df98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dfa0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 801dfa4:	2500      	movs	r5, #0
 801dfa6:	ea54 0305 	orrs.w	r3, r4, r5
 801dfaa:	d049      	beq.n	801e040 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801dfac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801dfb2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801dfb6:	d02f      	beq.n	801e018 <HAL_RCCEx_PeriphCLKConfig+0x98>
 801dfb8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801dfbc:	d828      	bhi.n	801e010 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801dfbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801dfc2:	d01a      	beq.n	801dffa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801dfc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801dfc8:	d822      	bhi.n	801e010 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801dfca:	2b00      	cmp	r3, #0
 801dfcc:	d003      	beq.n	801dfd6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 801dfce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801dfd2:	d007      	beq.n	801dfe4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801dfd4:	e01c      	b.n	801e010 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801dfd6:	4bb8      	ldr	r3, [pc, #736]	@ (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801dfd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dfda:	4ab7      	ldr	r2, [pc, #732]	@ (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801dfdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801dfe0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801dfe2:	e01a      	b.n	801e01a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801dfe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfe8:	3308      	adds	r3, #8
 801dfea:	2102      	movs	r1, #2
 801dfec:	4618      	mov	r0, r3
 801dfee:	f001 fc8f 	bl	801f910 <RCCEx_PLL2_Config>
 801dff2:	4603      	mov	r3, r0
 801dff4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801dff8:	e00f      	b.n	801e01a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801dffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dffe:	3328      	adds	r3, #40	@ 0x28
 801e000:	2102      	movs	r1, #2
 801e002:	4618      	mov	r0, r3
 801e004:	f001 fd36 	bl	801fa74 <RCCEx_PLL3_Config>
 801e008:	4603      	mov	r3, r0
 801e00a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801e00e:	e004      	b.n	801e01a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e010:	2301      	movs	r3, #1
 801e012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e016:	e000      	b.n	801e01a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801e018:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e01a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e01e:	2b00      	cmp	r3, #0
 801e020:	d10a      	bne.n	801e038 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801e022:	4ba5      	ldr	r3, [pc, #660]	@ (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e024:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e026:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801e02a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e02e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e030:	4aa1      	ldr	r2, [pc, #644]	@ (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e032:	430b      	orrs	r3, r1
 801e034:	6513      	str	r3, [r2, #80]	@ 0x50
 801e036:	e003      	b.n	801e040 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e038:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e03c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801e040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e044:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e048:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 801e04c:	f04f 0900 	mov.w	r9, #0
 801e050:	ea58 0309 	orrs.w	r3, r8, r9
 801e054:	d047      	beq.n	801e0e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801e056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e05a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e05c:	2b04      	cmp	r3, #4
 801e05e:	d82a      	bhi.n	801e0b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 801e060:	a201      	add	r2, pc, #4	@ (adr r2, 801e068 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801e062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e066:	bf00      	nop
 801e068:	0801e07d 	.word	0x0801e07d
 801e06c:	0801e08b 	.word	0x0801e08b
 801e070:	0801e0a1 	.word	0x0801e0a1
 801e074:	0801e0bf 	.word	0x0801e0bf
 801e078:	0801e0bf 	.word	0x0801e0bf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e07c:	4b8e      	ldr	r3, [pc, #568]	@ (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e07e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e080:	4a8d      	ldr	r2, [pc, #564]	@ (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e082:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e086:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801e088:	e01a      	b.n	801e0c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e08a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e08e:	3308      	adds	r3, #8
 801e090:	2100      	movs	r1, #0
 801e092:	4618      	mov	r0, r3
 801e094:	f001 fc3c 	bl	801f910 <RCCEx_PLL2_Config>
 801e098:	4603      	mov	r3, r0
 801e09a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801e09e:	e00f      	b.n	801e0c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801e0a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0a4:	3328      	adds	r3, #40	@ 0x28
 801e0a6:	2100      	movs	r1, #0
 801e0a8:	4618      	mov	r0, r3
 801e0aa:	f001 fce3 	bl	801fa74 <RCCEx_PLL3_Config>
 801e0ae:	4603      	mov	r3, r0
 801e0b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801e0b4:	e004      	b.n	801e0c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e0b6:	2301      	movs	r3, #1
 801e0b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e0bc:	e000      	b.n	801e0c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801e0be:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e0c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e0c4:	2b00      	cmp	r3, #0
 801e0c6:	d10a      	bne.n	801e0de <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801e0c8:	4b7b      	ldr	r3, [pc, #492]	@ (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e0ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e0cc:	f023 0107 	bic.w	r1, r3, #7
 801e0d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e0d6:	4a78      	ldr	r2, [pc, #480]	@ (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e0d8:	430b      	orrs	r3, r1
 801e0da:	6513      	str	r3, [r2, #80]	@ 0x50
 801e0dc:	e003      	b.n	801e0e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e0de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e0e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801e0e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0ee:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 801e0f2:	f04f 0b00 	mov.w	fp, #0
 801e0f6:	ea5a 030b 	orrs.w	r3, sl, fp
 801e0fa:	d04c      	beq.n	801e196 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 801e0fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e102:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e106:	d030      	beq.n	801e16a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 801e108:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e10c:	d829      	bhi.n	801e162 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801e10e:	2bc0      	cmp	r3, #192	@ 0xc0
 801e110:	d02d      	beq.n	801e16e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801e112:	2bc0      	cmp	r3, #192	@ 0xc0
 801e114:	d825      	bhi.n	801e162 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801e116:	2b80      	cmp	r3, #128	@ 0x80
 801e118:	d018      	beq.n	801e14c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801e11a:	2b80      	cmp	r3, #128	@ 0x80
 801e11c:	d821      	bhi.n	801e162 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801e11e:	2b00      	cmp	r3, #0
 801e120:	d002      	beq.n	801e128 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801e122:	2b40      	cmp	r3, #64	@ 0x40
 801e124:	d007      	beq.n	801e136 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 801e126:	e01c      	b.n	801e162 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e128:	4b63      	ldr	r3, [pc, #396]	@ (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e12a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e12c:	4a62      	ldr	r2, [pc, #392]	@ (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e12e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e132:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801e134:	e01c      	b.n	801e170 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e13a:	3308      	adds	r3, #8
 801e13c:	2100      	movs	r1, #0
 801e13e:	4618      	mov	r0, r3
 801e140:	f001 fbe6 	bl	801f910 <RCCEx_PLL2_Config>
 801e144:	4603      	mov	r3, r0
 801e146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801e14a:	e011      	b.n	801e170 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801e14c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e150:	3328      	adds	r3, #40	@ 0x28
 801e152:	2100      	movs	r1, #0
 801e154:	4618      	mov	r0, r3
 801e156:	f001 fc8d 	bl	801fa74 <RCCEx_PLL3_Config>
 801e15a:	4603      	mov	r3, r0
 801e15c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801e160:	e006      	b.n	801e170 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e162:	2301      	movs	r3, #1
 801e164:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e168:	e002      	b.n	801e170 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801e16a:	bf00      	nop
 801e16c:	e000      	b.n	801e170 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801e16e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e170:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e174:	2b00      	cmp	r3, #0
 801e176:	d10a      	bne.n	801e18e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801e178:	4b4f      	ldr	r3, [pc, #316]	@ (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e17a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e17c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 801e180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e186:	4a4c      	ldr	r2, [pc, #304]	@ (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e188:	430b      	orrs	r3, r1
 801e18a:	6513      	str	r3, [r2, #80]	@ 0x50
 801e18c:	e003      	b.n	801e196 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e18e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e192:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801e196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e19e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 801e1a2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801e1a6:	2300      	movs	r3, #0
 801e1a8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 801e1ac:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 801e1b0:	460b      	mov	r3, r1
 801e1b2:	4313      	orrs	r3, r2
 801e1b4:	d053      	beq.n	801e25e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801e1b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801e1be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801e1c2:	d035      	beq.n	801e230 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801e1c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801e1c8:	d82e      	bhi.n	801e228 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801e1ca:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801e1ce:	d031      	beq.n	801e234 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801e1d0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801e1d4:	d828      	bhi.n	801e228 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801e1d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801e1da:	d01a      	beq.n	801e212 <HAL_RCCEx_PeriphCLKConfig+0x292>
 801e1dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801e1e0:	d822      	bhi.n	801e228 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801e1e2:	2b00      	cmp	r3, #0
 801e1e4:	d003      	beq.n	801e1ee <HAL_RCCEx_PeriphCLKConfig+0x26e>
 801e1e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801e1ea:	d007      	beq.n	801e1fc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 801e1ec:	e01c      	b.n	801e228 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e1ee:	4b32      	ldr	r3, [pc, #200]	@ (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e1f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e1f2:	4a31      	ldr	r2, [pc, #196]	@ (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e1f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e1f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801e1fa:	e01c      	b.n	801e236 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e1fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e200:	3308      	adds	r3, #8
 801e202:	2100      	movs	r1, #0
 801e204:	4618      	mov	r0, r3
 801e206:	f001 fb83 	bl	801f910 <RCCEx_PLL2_Config>
 801e20a:	4603      	mov	r3, r0
 801e20c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801e210:	e011      	b.n	801e236 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801e212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e216:	3328      	adds	r3, #40	@ 0x28
 801e218:	2100      	movs	r1, #0
 801e21a:	4618      	mov	r0, r3
 801e21c:	f001 fc2a 	bl	801fa74 <RCCEx_PLL3_Config>
 801e220:	4603      	mov	r3, r0
 801e222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801e226:	e006      	b.n	801e236 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801e228:	2301      	movs	r3, #1
 801e22a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e22e:	e002      	b.n	801e236 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801e230:	bf00      	nop
 801e232:	e000      	b.n	801e236 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801e234:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e236:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e23a:	2b00      	cmp	r3, #0
 801e23c:	d10b      	bne.n	801e256 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801e23e:	4b1e      	ldr	r3, [pc, #120]	@ (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e242:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801e246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e24a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801e24e:	4a1a      	ldr	r2, [pc, #104]	@ (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e250:	430b      	orrs	r3, r1
 801e252:	6593      	str	r3, [r2, #88]	@ 0x58
 801e254:	e003      	b.n	801e25e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e256:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e25a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801e25e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e262:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e266:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801e26a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801e26e:	2300      	movs	r3, #0
 801e270:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801e274:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 801e278:	460b      	mov	r3, r1
 801e27a:	4313      	orrs	r3, r2
 801e27c:	d056      	beq.n	801e32c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801e27e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e282:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801e286:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801e28a:	d038      	beq.n	801e2fe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801e28c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801e290:	d831      	bhi.n	801e2f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801e292:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801e296:	d034      	beq.n	801e302 <HAL_RCCEx_PeriphCLKConfig+0x382>
 801e298:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801e29c:	d82b      	bhi.n	801e2f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801e29e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801e2a2:	d01d      	beq.n	801e2e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 801e2a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801e2a8:	d825      	bhi.n	801e2f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801e2aa:	2b00      	cmp	r3, #0
 801e2ac:	d006      	beq.n	801e2bc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801e2ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801e2b2:	d00a      	beq.n	801e2ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801e2b4:	e01f      	b.n	801e2f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801e2b6:	bf00      	nop
 801e2b8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e2bc:	4ba2      	ldr	r3, [pc, #648]	@ (801e548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e2be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e2c0:	4aa1      	ldr	r2, [pc, #644]	@ (801e548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e2c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e2c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801e2c8:	e01c      	b.n	801e304 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e2ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2ce:	3308      	adds	r3, #8
 801e2d0:	2100      	movs	r1, #0
 801e2d2:	4618      	mov	r0, r3
 801e2d4:	f001 fb1c 	bl	801f910 <RCCEx_PLL2_Config>
 801e2d8:	4603      	mov	r3, r0
 801e2da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801e2de:	e011      	b.n	801e304 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801e2e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2e4:	3328      	adds	r3, #40	@ 0x28
 801e2e6:	2100      	movs	r1, #0
 801e2e8:	4618      	mov	r0, r3
 801e2ea:	f001 fbc3 	bl	801fa74 <RCCEx_PLL3_Config>
 801e2ee:	4603      	mov	r3, r0
 801e2f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801e2f4:	e006      	b.n	801e304 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801e2f6:	2301      	movs	r3, #1
 801e2f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e2fc:	e002      	b.n	801e304 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801e2fe:	bf00      	nop
 801e300:	e000      	b.n	801e304 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801e302:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e304:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e308:	2b00      	cmp	r3, #0
 801e30a:	d10b      	bne.n	801e324 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801e30c:	4b8e      	ldr	r3, [pc, #568]	@ (801e548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e30e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e310:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801e314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e318:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801e31c:	4a8a      	ldr	r2, [pc, #552]	@ (801e548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e31e:	430b      	orrs	r3, r1
 801e320:	6593      	str	r3, [r2, #88]	@ 0x58
 801e322:	e003      	b.n	801e32c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e324:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e328:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801e32c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e330:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e334:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801e338:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801e33c:	2300      	movs	r3, #0
 801e33e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801e342:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801e346:	460b      	mov	r3, r1
 801e348:	4313      	orrs	r3, r2
 801e34a:	d03a      	beq.n	801e3c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 801e34c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e352:	2b30      	cmp	r3, #48	@ 0x30
 801e354:	d01f      	beq.n	801e396 <HAL_RCCEx_PeriphCLKConfig+0x416>
 801e356:	2b30      	cmp	r3, #48	@ 0x30
 801e358:	d819      	bhi.n	801e38e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801e35a:	2b20      	cmp	r3, #32
 801e35c:	d00c      	beq.n	801e378 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801e35e:	2b20      	cmp	r3, #32
 801e360:	d815      	bhi.n	801e38e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801e362:	2b00      	cmp	r3, #0
 801e364:	d019      	beq.n	801e39a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801e366:	2b10      	cmp	r3, #16
 801e368:	d111      	bne.n	801e38e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e36a:	4b77      	ldr	r3, [pc, #476]	@ (801e548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e36c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e36e:	4a76      	ldr	r2, [pc, #472]	@ (801e548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e370:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e374:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801e376:	e011      	b.n	801e39c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801e378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e37c:	3308      	adds	r3, #8
 801e37e:	2102      	movs	r1, #2
 801e380:	4618      	mov	r0, r3
 801e382:	f001 fac5 	bl	801f910 <RCCEx_PLL2_Config>
 801e386:	4603      	mov	r3, r0
 801e388:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801e38c:	e006      	b.n	801e39c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801e38e:	2301      	movs	r3, #1
 801e390:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e394:	e002      	b.n	801e39c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801e396:	bf00      	nop
 801e398:	e000      	b.n	801e39c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801e39a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e39c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e3a0:	2b00      	cmp	r3, #0
 801e3a2:	d10a      	bne.n	801e3ba <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801e3a4:	4b68      	ldr	r3, [pc, #416]	@ (801e548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e3a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e3a8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801e3ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e3b2:	4a65      	ldr	r2, [pc, #404]	@ (801e548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e3b4:	430b      	orrs	r3, r1
 801e3b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801e3b8:	e003      	b.n	801e3c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e3ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e3be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801e3c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3ca:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801e3ce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801e3d2:	2300      	movs	r3, #0
 801e3d4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801e3d8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801e3dc:	460b      	mov	r3, r1
 801e3de:	4313      	orrs	r3, r2
 801e3e0:	d051      	beq.n	801e486 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801e3e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e3e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801e3ec:	d035      	beq.n	801e45a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801e3ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801e3f2:	d82e      	bhi.n	801e452 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801e3f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801e3f8:	d031      	beq.n	801e45e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801e3fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801e3fe:	d828      	bhi.n	801e452 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801e400:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801e404:	d01a      	beq.n	801e43c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801e406:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801e40a:	d822      	bhi.n	801e452 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801e40c:	2b00      	cmp	r3, #0
 801e40e:	d003      	beq.n	801e418 <HAL_RCCEx_PeriphCLKConfig+0x498>
 801e410:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e414:	d007      	beq.n	801e426 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801e416:	e01c      	b.n	801e452 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e418:	4b4b      	ldr	r3, [pc, #300]	@ (801e548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e41a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e41c:	4a4a      	ldr	r2, [pc, #296]	@ (801e548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e41e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e422:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801e424:	e01c      	b.n	801e460 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e42a:	3308      	adds	r3, #8
 801e42c:	2100      	movs	r1, #0
 801e42e:	4618      	mov	r0, r3
 801e430:	f001 fa6e 	bl	801f910 <RCCEx_PLL2_Config>
 801e434:	4603      	mov	r3, r0
 801e436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801e43a:	e011      	b.n	801e460 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801e43c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e440:	3328      	adds	r3, #40	@ 0x28
 801e442:	2100      	movs	r1, #0
 801e444:	4618      	mov	r0, r3
 801e446:	f001 fb15 	bl	801fa74 <RCCEx_PLL3_Config>
 801e44a:	4603      	mov	r3, r0
 801e44c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801e450:	e006      	b.n	801e460 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e452:	2301      	movs	r3, #1
 801e454:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e458:	e002      	b.n	801e460 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801e45a:	bf00      	nop
 801e45c:	e000      	b.n	801e460 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801e45e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e460:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e464:	2b00      	cmp	r3, #0
 801e466:	d10a      	bne.n	801e47e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801e468:	4b37      	ldr	r3, [pc, #220]	@ (801e548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e46a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e46c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801e470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e476:	4a34      	ldr	r2, [pc, #208]	@ (801e548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e478:	430b      	orrs	r3, r1
 801e47a:	6513      	str	r3, [r2, #80]	@ 0x50
 801e47c:	e003      	b.n	801e486 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e47e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e482:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801e486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e48e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801e492:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801e496:	2300      	movs	r3, #0
 801e498:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801e49c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 801e4a0:	460b      	mov	r3, r1
 801e4a2:	4313      	orrs	r3, r2
 801e4a4:	d056      	beq.n	801e554 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801e4a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e4aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e4ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801e4b0:	d033      	beq.n	801e51a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 801e4b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801e4b6:	d82c      	bhi.n	801e512 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801e4b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801e4bc:	d02f      	beq.n	801e51e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801e4be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801e4c2:	d826      	bhi.n	801e512 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801e4c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801e4c8:	d02b      	beq.n	801e522 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 801e4ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801e4ce:	d820      	bhi.n	801e512 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801e4d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e4d4:	d012      	beq.n	801e4fc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 801e4d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e4da:	d81a      	bhi.n	801e512 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801e4dc:	2b00      	cmp	r3, #0
 801e4de:	d022      	beq.n	801e526 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 801e4e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e4e4:	d115      	bne.n	801e512 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e4e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e4ea:	3308      	adds	r3, #8
 801e4ec:	2101      	movs	r1, #1
 801e4ee:	4618      	mov	r0, r3
 801e4f0:	f001 fa0e 	bl	801f910 <RCCEx_PLL2_Config>
 801e4f4:	4603      	mov	r3, r0
 801e4f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801e4fa:	e015      	b.n	801e528 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e4fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e500:	3328      	adds	r3, #40	@ 0x28
 801e502:	2101      	movs	r1, #1
 801e504:	4618      	mov	r0, r3
 801e506:	f001 fab5 	bl	801fa74 <RCCEx_PLL3_Config>
 801e50a:	4603      	mov	r3, r0
 801e50c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801e510:	e00a      	b.n	801e528 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e512:	2301      	movs	r3, #1
 801e514:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e518:	e006      	b.n	801e528 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801e51a:	bf00      	nop
 801e51c:	e004      	b.n	801e528 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801e51e:	bf00      	nop
 801e520:	e002      	b.n	801e528 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801e522:	bf00      	nop
 801e524:	e000      	b.n	801e528 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801e526:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e528:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e52c:	2b00      	cmp	r3, #0
 801e52e:	d10d      	bne.n	801e54c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801e530:	4b05      	ldr	r3, [pc, #20]	@ (801e548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e534:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801e538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e53c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e53e:	4a02      	ldr	r2, [pc, #8]	@ (801e548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e540:	430b      	orrs	r3, r1
 801e542:	6513      	str	r3, [r2, #80]	@ 0x50
 801e544:	e006      	b.n	801e554 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801e546:	bf00      	nop
 801e548:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e54c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e550:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801e554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e55c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 801e560:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801e564:	2300      	movs	r3, #0
 801e566:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801e56a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801e56e:	460b      	mov	r3, r1
 801e570:	4313      	orrs	r3, r2
 801e572:	d055      	beq.n	801e620 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801e574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e578:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801e57c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801e580:	d033      	beq.n	801e5ea <HAL_RCCEx_PeriphCLKConfig+0x66a>
 801e582:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801e586:	d82c      	bhi.n	801e5e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801e588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e58c:	d02f      	beq.n	801e5ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
 801e58e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e592:	d826      	bhi.n	801e5e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801e594:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801e598:	d02b      	beq.n	801e5f2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 801e59a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801e59e:	d820      	bhi.n	801e5e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801e5a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e5a4:	d012      	beq.n	801e5cc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 801e5a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e5aa:	d81a      	bhi.n	801e5e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801e5ac:	2b00      	cmp	r3, #0
 801e5ae:	d022      	beq.n	801e5f6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 801e5b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e5b4:	d115      	bne.n	801e5e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e5b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5ba:	3308      	adds	r3, #8
 801e5bc:	2101      	movs	r1, #1
 801e5be:	4618      	mov	r0, r3
 801e5c0:	f001 f9a6 	bl	801f910 <RCCEx_PLL2_Config>
 801e5c4:	4603      	mov	r3, r0
 801e5c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801e5ca:	e015      	b.n	801e5f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e5cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5d0:	3328      	adds	r3, #40	@ 0x28
 801e5d2:	2101      	movs	r1, #1
 801e5d4:	4618      	mov	r0, r3
 801e5d6:	f001 fa4d 	bl	801fa74 <RCCEx_PLL3_Config>
 801e5da:	4603      	mov	r3, r0
 801e5dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801e5e0:	e00a      	b.n	801e5f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801e5e2:	2301      	movs	r3, #1
 801e5e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e5e8:	e006      	b.n	801e5f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801e5ea:	bf00      	nop
 801e5ec:	e004      	b.n	801e5f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801e5ee:	bf00      	nop
 801e5f0:	e002      	b.n	801e5f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801e5f2:	bf00      	nop
 801e5f4:	e000      	b.n	801e5f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801e5f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e5f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e5fc:	2b00      	cmp	r3, #0
 801e5fe:	d10b      	bne.n	801e618 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801e600:	4ba3      	ldr	r3, [pc, #652]	@ (801e890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e604:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801e608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e60c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801e610:	4a9f      	ldr	r2, [pc, #636]	@ (801e890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e612:	430b      	orrs	r3, r1
 801e614:	6593      	str	r3, [r2, #88]	@ 0x58
 801e616:	e003      	b.n	801e620 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e618:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e61c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801e620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e624:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e628:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 801e62c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801e630:	2300      	movs	r3, #0
 801e632:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801e636:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801e63a:	460b      	mov	r3, r1
 801e63c:	4313      	orrs	r3, r2
 801e63e:	d037      	beq.n	801e6b0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801e640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e646:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e64a:	d00e      	beq.n	801e66a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 801e64c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e650:	d816      	bhi.n	801e680 <HAL_RCCEx_PeriphCLKConfig+0x700>
 801e652:	2b00      	cmp	r3, #0
 801e654:	d018      	beq.n	801e688 <HAL_RCCEx_PeriphCLKConfig+0x708>
 801e656:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e65a:	d111      	bne.n	801e680 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e65c:	4b8c      	ldr	r3, [pc, #560]	@ (801e890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e65e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e660:	4a8b      	ldr	r2, [pc, #556]	@ (801e890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e662:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e666:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801e668:	e00f      	b.n	801e68a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e66a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e66e:	3308      	adds	r3, #8
 801e670:	2101      	movs	r1, #1
 801e672:	4618      	mov	r0, r3
 801e674:	f001 f94c 	bl	801f910 <RCCEx_PLL2_Config>
 801e678:	4603      	mov	r3, r0
 801e67a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801e67e:	e004      	b.n	801e68a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e680:	2301      	movs	r3, #1
 801e682:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e686:	e000      	b.n	801e68a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 801e688:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e68a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e68e:	2b00      	cmp	r3, #0
 801e690:	d10a      	bne.n	801e6a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801e692:	4b7f      	ldr	r3, [pc, #508]	@ (801e890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e694:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e696:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801e69a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e69e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e6a0:	4a7b      	ldr	r2, [pc, #492]	@ (801e890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e6a2:	430b      	orrs	r3, r1
 801e6a4:	6513      	str	r3, [r2, #80]	@ 0x50
 801e6a6:	e003      	b.n	801e6b0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e6a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e6ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801e6b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6b8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 801e6bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801e6c0:	2300      	movs	r3, #0
 801e6c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801e6c6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801e6ca:	460b      	mov	r3, r1
 801e6cc:	4313      	orrs	r3, r2
 801e6ce:	d039      	beq.n	801e744 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801e6d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e6d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e6d6:	2b03      	cmp	r3, #3
 801e6d8:	d81c      	bhi.n	801e714 <HAL_RCCEx_PeriphCLKConfig+0x794>
 801e6da:	a201      	add	r2, pc, #4	@ (adr r2, 801e6e0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 801e6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e6e0:	0801e71d 	.word	0x0801e71d
 801e6e4:	0801e6f1 	.word	0x0801e6f1
 801e6e8:	0801e6ff 	.word	0x0801e6ff
 801e6ec:	0801e71d 	.word	0x0801e71d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e6f0:	4b67      	ldr	r3, [pc, #412]	@ (801e890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e6f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e6f4:	4a66      	ldr	r2, [pc, #408]	@ (801e890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e6f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e6fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801e6fc:	e00f      	b.n	801e71e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801e6fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e702:	3308      	adds	r3, #8
 801e704:	2102      	movs	r1, #2
 801e706:	4618      	mov	r0, r3
 801e708:	f001 f902 	bl	801f910 <RCCEx_PLL2_Config>
 801e70c:	4603      	mov	r3, r0
 801e70e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 801e712:	e004      	b.n	801e71e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801e714:	2301      	movs	r3, #1
 801e716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e71a:	e000      	b.n	801e71e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 801e71c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e71e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e722:	2b00      	cmp	r3, #0
 801e724:	d10a      	bne.n	801e73c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801e726:	4b5a      	ldr	r3, [pc, #360]	@ (801e890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e72a:	f023 0103 	bic.w	r1, r3, #3
 801e72e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e732:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e734:	4a56      	ldr	r2, [pc, #344]	@ (801e890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e736:	430b      	orrs	r3, r1
 801e738:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801e73a:	e003      	b.n	801e744 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e73c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e740:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801e744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e74c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 801e750:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801e754:	2300      	movs	r3, #0
 801e756:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801e75a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801e75e:	460b      	mov	r3, r1
 801e760:	4313      	orrs	r3, r2
 801e762:	f000 809f 	beq.w	801e8a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801e766:	4b4b      	ldr	r3, [pc, #300]	@ (801e894 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801e768:	681b      	ldr	r3, [r3, #0]
 801e76a:	4a4a      	ldr	r2, [pc, #296]	@ (801e894 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801e76c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801e770:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801e772:	f7fc f807 	bl	801a784 <HAL_GetTick>
 801e776:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801e77a:	e00b      	b.n	801e794 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801e77c:	f7fc f802 	bl	801a784 <HAL_GetTick>
 801e780:	4602      	mov	r2, r0
 801e782:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801e786:	1ad3      	subs	r3, r2, r3
 801e788:	2b64      	cmp	r3, #100	@ 0x64
 801e78a:	d903      	bls.n	801e794 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 801e78c:	2303      	movs	r3, #3
 801e78e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e792:	e005      	b.n	801e7a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801e794:	4b3f      	ldr	r3, [pc, #252]	@ (801e894 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801e796:	681b      	ldr	r3, [r3, #0]
 801e798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e79c:	2b00      	cmp	r3, #0
 801e79e:	d0ed      	beq.n	801e77c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 801e7a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e7a4:	2b00      	cmp	r3, #0
 801e7a6:	d179      	bne.n	801e89c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801e7a8:	4b39      	ldr	r3, [pc, #228]	@ (801e890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e7aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801e7ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e7b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e7b4:	4053      	eors	r3, r2
 801e7b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801e7ba:	2b00      	cmp	r3, #0
 801e7bc:	d015      	beq.n	801e7ea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801e7be:	4b34      	ldr	r3, [pc, #208]	@ (801e890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e7c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e7c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801e7c6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801e7ca:	4b31      	ldr	r3, [pc, #196]	@ (801e890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e7cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e7ce:	4a30      	ldr	r2, [pc, #192]	@ (801e890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e7d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801e7d4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801e7d6:	4b2e      	ldr	r3, [pc, #184]	@ (801e890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e7d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e7da:	4a2d      	ldr	r2, [pc, #180]	@ (801e890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e7dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801e7e0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801e7e2:	4a2b      	ldr	r2, [pc, #172]	@ (801e890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e7e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801e7e8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801e7ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e7ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e7f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e7f6:	d118      	bne.n	801e82a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801e7f8:	f7fb ffc4 	bl	801a784 <HAL_GetTick>
 801e7fc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801e800:	e00d      	b.n	801e81e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801e802:	f7fb ffbf 	bl	801a784 <HAL_GetTick>
 801e806:	4602      	mov	r2, r0
 801e808:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801e80c:	1ad2      	subs	r2, r2, r3
 801e80e:	f241 3388 	movw	r3, #5000	@ 0x1388
 801e812:	429a      	cmp	r2, r3
 801e814:	d903      	bls.n	801e81e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 801e816:	2303      	movs	r3, #3
 801e818:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 801e81c:	e005      	b.n	801e82a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801e81e:	4b1c      	ldr	r3, [pc, #112]	@ (801e890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e822:	f003 0302 	and.w	r3, r3, #2
 801e826:	2b00      	cmp	r3, #0
 801e828:	d0eb      	beq.n	801e802 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 801e82a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e82e:	2b00      	cmp	r3, #0
 801e830:	d129      	bne.n	801e886 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801e832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e836:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e83a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801e83e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801e842:	d10e      	bne.n	801e862 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 801e844:	4b12      	ldr	r3, [pc, #72]	@ (801e890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e846:	691b      	ldr	r3, [r3, #16]
 801e848:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801e84c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e850:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e854:	091a      	lsrs	r2, r3, #4
 801e856:	4b10      	ldr	r3, [pc, #64]	@ (801e898 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 801e858:	4013      	ands	r3, r2
 801e85a:	4a0d      	ldr	r2, [pc, #52]	@ (801e890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e85c:	430b      	orrs	r3, r1
 801e85e:	6113      	str	r3, [r2, #16]
 801e860:	e005      	b.n	801e86e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 801e862:	4b0b      	ldr	r3, [pc, #44]	@ (801e890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e864:	691b      	ldr	r3, [r3, #16]
 801e866:	4a0a      	ldr	r2, [pc, #40]	@ (801e890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e868:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801e86c:	6113      	str	r3, [r2, #16]
 801e86e:	4b08      	ldr	r3, [pc, #32]	@ (801e890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e870:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801e872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e876:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e87a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801e87e:	4a04      	ldr	r2, [pc, #16]	@ (801e890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e880:	430b      	orrs	r3, r1
 801e882:	6713      	str	r3, [r2, #112]	@ 0x70
 801e884:	e00e      	b.n	801e8a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801e886:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e88a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801e88e:	e009      	b.n	801e8a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 801e890:	58024400 	.word	0x58024400
 801e894:	58024800 	.word	0x58024800
 801e898:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e89c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e8a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801e8a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8ac:	f002 0301 	and.w	r3, r2, #1
 801e8b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801e8b4:	2300      	movs	r3, #0
 801e8b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801e8ba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801e8be:	460b      	mov	r3, r1
 801e8c0:	4313      	orrs	r3, r2
 801e8c2:	f000 8089 	beq.w	801e9d8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801e8c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e8ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e8cc:	2b28      	cmp	r3, #40	@ 0x28
 801e8ce:	d86b      	bhi.n	801e9a8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 801e8d0:	a201      	add	r2, pc, #4	@ (adr r2, 801e8d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801e8d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e8d6:	bf00      	nop
 801e8d8:	0801e9b1 	.word	0x0801e9b1
 801e8dc:	0801e9a9 	.word	0x0801e9a9
 801e8e0:	0801e9a9 	.word	0x0801e9a9
 801e8e4:	0801e9a9 	.word	0x0801e9a9
 801e8e8:	0801e9a9 	.word	0x0801e9a9
 801e8ec:	0801e9a9 	.word	0x0801e9a9
 801e8f0:	0801e9a9 	.word	0x0801e9a9
 801e8f4:	0801e9a9 	.word	0x0801e9a9
 801e8f8:	0801e97d 	.word	0x0801e97d
 801e8fc:	0801e9a9 	.word	0x0801e9a9
 801e900:	0801e9a9 	.word	0x0801e9a9
 801e904:	0801e9a9 	.word	0x0801e9a9
 801e908:	0801e9a9 	.word	0x0801e9a9
 801e90c:	0801e9a9 	.word	0x0801e9a9
 801e910:	0801e9a9 	.word	0x0801e9a9
 801e914:	0801e9a9 	.word	0x0801e9a9
 801e918:	0801e993 	.word	0x0801e993
 801e91c:	0801e9a9 	.word	0x0801e9a9
 801e920:	0801e9a9 	.word	0x0801e9a9
 801e924:	0801e9a9 	.word	0x0801e9a9
 801e928:	0801e9a9 	.word	0x0801e9a9
 801e92c:	0801e9a9 	.word	0x0801e9a9
 801e930:	0801e9a9 	.word	0x0801e9a9
 801e934:	0801e9a9 	.word	0x0801e9a9
 801e938:	0801e9b1 	.word	0x0801e9b1
 801e93c:	0801e9a9 	.word	0x0801e9a9
 801e940:	0801e9a9 	.word	0x0801e9a9
 801e944:	0801e9a9 	.word	0x0801e9a9
 801e948:	0801e9a9 	.word	0x0801e9a9
 801e94c:	0801e9a9 	.word	0x0801e9a9
 801e950:	0801e9a9 	.word	0x0801e9a9
 801e954:	0801e9a9 	.word	0x0801e9a9
 801e958:	0801e9b1 	.word	0x0801e9b1
 801e95c:	0801e9a9 	.word	0x0801e9a9
 801e960:	0801e9a9 	.word	0x0801e9a9
 801e964:	0801e9a9 	.word	0x0801e9a9
 801e968:	0801e9a9 	.word	0x0801e9a9
 801e96c:	0801e9a9 	.word	0x0801e9a9
 801e970:	0801e9a9 	.word	0x0801e9a9
 801e974:	0801e9a9 	.word	0x0801e9a9
 801e978:	0801e9b1 	.word	0x0801e9b1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e97c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e980:	3308      	adds	r3, #8
 801e982:	2101      	movs	r1, #1
 801e984:	4618      	mov	r0, r3
 801e986:	f000 ffc3 	bl	801f910 <RCCEx_PLL2_Config>
 801e98a:	4603      	mov	r3, r0
 801e98c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801e990:	e00f      	b.n	801e9b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e996:	3328      	adds	r3, #40	@ 0x28
 801e998:	2101      	movs	r1, #1
 801e99a:	4618      	mov	r0, r3
 801e99c:	f001 f86a 	bl	801fa74 <RCCEx_PLL3_Config>
 801e9a0:	4603      	mov	r3, r0
 801e9a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801e9a6:	e004      	b.n	801e9b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e9a8:	2301      	movs	r3, #1
 801e9aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e9ae:	e000      	b.n	801e9b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 801e9b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e9b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e9b6:	2b00      	cmp	r3, #0
 801e9b8:	d10a      	bne.n	801e9d0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801e9ba:	4bbf      	ldr	r3, [pc, #764]	@ (801ecb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e9bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e9be:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801e9c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e9c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e9c8:	4abb      	ldr	r2, [pc, #748]	@ (801ecb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e9ca:	430b      	orrs	r3, r1
 801e9cc:	6553      	str	r3, [r2, #84]	@ 0x54
 801e9ce:	e003      	b.n	801e9d8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e9d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e9d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801e9d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9e0:	f002 0302 	and.w	r3, r2, #2
 801e9e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801e9e8:	2300      	movs	r3, #0
 801e9ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801e9ee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801e9f2:	460b      	mov	r3, r1
 801e9f4:	4313      	orrs	r3, r2
 801e9f6:	d041      	beq.n	801ea7c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801e9f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e9fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801e9fe:	2b05      	cmp	r3, #5
 801ea00:	d824      	bhi.n	801ea4c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 801ea02:	a201      	add	r2, pc, #4	@ (adr r2, 801ea08 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 801ea04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ea08:	0801ea55 	.word	0x0801ea55
 801ea0c:	0801ea21 	.word	0x0801ea21
 801ea10:	0801ea37 	.word	0x0801ea37
 801ea14:	0801ea55 	.word	0x0801ea55
 801ea18:	0801ea55 	.word	0x0801ea55
 801ea1c:	0801ea55 	.word	0x0801ea55
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801ea20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea24:	3308      	adds	r3, #8
 801ea26:	2101      	movs	r1, #1
 801ea28:	4618      	mov	r0, r3
 801ea2a:	f000 ff71 	bl	801f910 <RCCEx_PLL2_Config>
 801ea2e:	4603      	mov	r3, r0
 801ea30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801ea34:	e00f      	b.n	801ea56 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801ea36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea3a:	3328      	adds	r3, #40	@ 0x28
 801ea3c:	2101      	movs	r1, #1
 801ea3e:	4618      	mov	r0, r3
 801ea40:	f001 f818 	bl	801fa74 <RCCEx_PLL3_Config>
 801ea44:	4603      	mov	r3, r0
 801ea46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801ea4a:	e004      	b.n	801ea56 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ea4c:	2301      	movs	r3, #1
 801ea4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ea52:	e000      	b.n	801ea56 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 801ea54:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ea56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ea5a:	2b00      	cmp	r3, #0
 801ea5c:	d10a      	bne.n	801ea74 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801ea5e:	4b96      	ldr	r3, [pc, #600]	@ (801ecb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801ea60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ea62:	f023 0107 	bic.w	r1, r3, #7
 801ea66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801ea6c:	4a92      	ldr	r2, [pc, #584]	@ (801ecb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801ea6e:	430b      	orrs	r3, r1
 801ea70:	6553      	str	r3, [r2, #84]	@ 0x54
 801ea72:	e003      	b.n	801ea7c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ea74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ea78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801ea7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea84:	f002 0304 	and.w	r3, r2, #4
 801ea88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801ea8c:	2300      	movs	r3, #0
 801ea8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801ea92:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 801ea96:	460b      	mov	r3, r1
 801ea98:	4313      	orrs	r3, r2
 801ea9a:	d044      	beq.n	801eb26 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801ea9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eaa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801eaa4:	2b05      	cmp	r3, #5
 801eaa6:	d825      	bhi.n	801eaf4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 801eaa8:	a201      	add	r2, pc, #4	@ (adr r2, 801eab0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 801eaaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801eaae:	bf00      	nop
 801eab0:	0801eafd 	.word	0x0801eafd
 801eab4:	0801eac9 	.word	0x0801eac9
 801eab8:	0801eadf 	.word	0x0801eadf
 801eabc:	0801eafd 	.word	0x0801eafd
 801eac0:	0801eafd 	.word	0x0801eafd
 801eac4:	0801eafd 	.word	0x0801eafd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801eac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eacc:	3308      	adds	r3, #8
 801eace:	2101      	movs	r1, #1
 801ead0:	4618      	mov	r0, r3
 801ead2:	f000 ff1d 	bl	801f910 <RCCEx_PLL2_Config>
 801ead6:	4603      	mov	r3, r0
 801ead8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801eadc:	e00f      	b.n	801eafe <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801eade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eae2:	3328      	adds	r3, #40	@ 0x28
 801eae4:	2101      	movs	r1, #1
 801eae6:	4618      	mov	r0, r3
 801eae8:	f000 ffc4 	bl	801fa74 <RCCEx_PLL3_Config>
 801eaec:	4603      	mov	r3, r0
 801eaee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801eaf2:	e004      	b.n	801eafe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801eaf4:	2301      	movs	r3, #1
 801eaf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801eafa:	e000      	b.n	801eafe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 801eafc:	bf00      	nop
    }

    if (ret == HAL_OK)
 801eafe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801eb02:	2b00      	cmp	r3, #0
 801eb04:	d10b      	bne.n	801eb1e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801eb06:	4b6c      	ldr	r3, [pc, #432]	@ (801ecb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801eb08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801eb0a:	f023 0107 	bic.w	r1, r3, #7
 801eb0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eb12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801eb16:	4a68      	ldr	r2, [pc, #416]	@ (801ecb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801eb18:	430b      	orrs	r3, r1
 801eb1a:	6593      	str	r3, [r2, #88]	@ 0x58
 801eb1c:	e003      	b.n	801eb26 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801eb1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801eb22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801eb26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb2e:	f002 0320 	and.w	r3, r2, #32
 801eb32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801eb36:	2300      	movs	r3, #0
 801eb38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801eb3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801eb40:	460b      	mov	r3, r1
 801eb42:	4313      	orrs	r3, r2
 801eb44:	d055      	beq.n	801ebf2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801eb46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eb4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801eb4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801eb52:	d033      	beq.n	801ebbc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 801eb54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801eb58:	d82c      	bhi.n	801ebb4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801eb5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801eb5e:	d02f      	beq.n	801ebc0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 801eb60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801eb64:	d826      	bhi.n	801ebb4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801eb66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801eb6a:	d02b      	beq.n	801ebc4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 801eb6c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801eb70:	d820      	bhi.n	801ebb4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801eb72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801eb76:	d012      	beq.n	801eb9e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 801eb78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801eb7c:	d81a      	bhi.n	801ebb4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801eb7e:	2b00      	cmp	r3, #0
 801eb80:	d022      	beq.n	801ebc8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 801eb82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801eb86:	d115      	bne.n	801ebb4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801eb88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eb8c:	3308      	adds	r3, #8
 801eb8e:	2100      	movs	r1, #0
 801eb90:	4618      	mov	r0, r3
 801eb92:	f000 febd 	bl	801f910 <RCCEx_PLL2_Config>
 801eb96:	4603      	mov	r3, r0
 801eb98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801eb9c:	e015      	b.n	801ebca <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801eb9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eba2:	3328      	adds	r3, #40	@ 0x28
 801eba4:	2102      	movs	r1, #2
 801eba6:	4618      	mov	r0, r3
 801eba8:	f000 ff64 	bl	801fa74 <RCCEx_PLL3_Config>
 801ebac:	4603      	mov	r3, r0
 801ebae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801ebb2:	e00a      	b.n	801ebca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ebb4:	2301      	movs	r3, #1
 801ebb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ebba:	e006      	b.n	801ebca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801ebbc:	bf00      	nop
 801ebbe:	e004      	b.n	801ebca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801ebc0:	bf00      	nop
 801ebc2:	e002      	b.n	801ebca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801ebc4:	bf00      	nop
 801ebc6:	e000      	b.n	801ebca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801ebc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ebca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ebce:	2b00      	cmp	r3, #0
 801ebd0:	d10b      	bne.n	801ebea <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801ebd2:	4b39      	ldr	r3, [pc, #228]	@ (801ecb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801ebd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ebd6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801ebda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ebde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801ebe2:	4a35      	ldr	r2, [pc, #212]	@ (801ecb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801ebe4:	430b      	orrs	r3, r1
 801ebe6:	6553      	str	r3, [r2, #84]	@ 0x54
 801ebe8:	e003      	b.n	801ebf2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ebea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ebee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801ebf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ebf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebfa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 801ebfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801ec02:	2300      	movs	r3, #0
 801ec04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801ec08:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801ec0c:	460b      	mov	r3, r1
 801ec0e:	4313      	orrs	r3, r2
 801ec10:	d058      	beq.n	801ecc4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801ec12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ec16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801ec1a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801ec1e:	d033      	beq.n	801ec88 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 801ec20:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801ec24:	d82c      	bhi.n	801ec80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801ec26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ec2a:	d02f      	beq.n	801ec8c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 801ec2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ec30:	d826      	bhi.n	801ec80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801ec32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801ec36:	d02b      	beq.n	801ec90 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 801ec38:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801ec3c:	d820      	bhi.n	801ec80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801ec3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801ec42:	d012      	beq.n	801ec6a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 801ec44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801ec48:	d81a      	bhi.n	801ec80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801ec4a:	2b00      	cmp	r3, #0
 801ec4c:	d022      	beq.n	801ec94 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 801ec4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801ec52:	d115      	bne.n	801ec80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801ec54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ec58:	3308      	adds	r3, #8
 801ec5a:	2100      	movs	r1, #0
 801ec5c:	4618      	mov	r0, r3
 801ec5e:	f000 fe57 	bl	801f910 <RCCEx_PLL2_Config>
 801ec62:	4603      	mov	r3, r0
 801ec64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801ec68:	e015      	b.n	801ec96 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801ec6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ec6e:	3328      	adds	r3, #40	@ 0x28
 801ec70:	2102      	movs	r1, #2
 801ec72:	4618      	mov	r0, r3
 801ec74:	f000 fefe 	bl	801fa74 <RCCEx_PLL3_Config>
 801ec78:	4603      	mov	r3, r0
 801ec7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801ec7e:	e00a      	b.n	801ec96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ec80:	2301      	movs	r3, #1
 801ec82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ec86:	e006      	b.n	801ec96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801ec88:	bf00      	nop
 801ec8a:	e004      	b.n	801ec96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801ec8c:	bf00      	nop
 801ec8e:	e002      	b.n	801ec96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801ec90:	bf00      	nop
 801ec92:	e000      	b.n	801ec96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801ec94:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ec96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ec9a:	2b00      	cmp	r3, #0
 801ec9c:	d10e      	bne.n	801ecbc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801ec9e:	4b06      	ldr	r3, [pc, #24]	@ (801ecb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801eca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801eca2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 801eca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ecaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801ecae:	4a02      	ldr	r2, [pc, #8]	@ (801ecb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801ecb0:	430b      	orrs	r3, r1
 801ecb2:	6593      	str	r3, [r2, #88]	@ 0x58
 801ecb4:	e006      	b.n	801ecc4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 801ecb6:	bf00      	nop
 801ecb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ecbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ecc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801ecc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ecc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eccc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 801ecd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801ecd4:	2300      	movs	r3, #0
 801ecd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801ecda:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 801ecde:	460b      	mov	r3, r1
 801ece0:	4313      	orrs	r3, r2
 801ece2:	d055      	beq.n	801ed90 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801ece4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ece8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801ecec:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801ecf0:	d033      	beq.n	801ed5a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 801ecf2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801ecf6:	d82c      	bhi.n	801ed52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801ecf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801ecfc:	d02f      	beq.n	801ed5e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 801ecfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801ed02:	d826      	bhi.n	801ed52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801ed04:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801ed08:	d02b      	beq.n	801ed62 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 801ed0a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801ed0e:	d820      	bhi.n	801ed52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801ed10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801ed14:	d012      	beq.n	801ed3c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 801ed16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801ed1a:	d81a      	bhi.n	801ed52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801ed1c:	2b00      	cmp	r3, #0
 801ed1e:	d022      	beq.n	801ed66 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 801ed20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ed24:	d115      	bne.n	801ed52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801ed26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ed2a:	3308      	adds	r3, #8
 801ed2c:	2100      	movs	r1, #0
 801ed2e:	4618      	mov	r0, r3
 801ed30:	f000 fdee 	bl	801f910 <RCCEx_PLL2_Config>
 801ed34:	4603      	mov	r3, r0
 801ed36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801ed3a:	e015      	b.n	801ed68 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801ed3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ed40:	3328      	adds	r3, #40	@ 0x28
 801ed42:	2102      	movs	r1, #2
 801ed44:	4618      	mov	r0, r3
 801ed46:	f000 fe95 	bl	801fa74 <RCCEx_PLL3_Config>
 801ed4a:	4603      	mov	r3, r0
 801ed4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801ed50:	e00a      	b.n	801ed68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ed52:	2301      	movs	r3, #1
 801ed54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ed58:	e006      	b.n	801ed68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801ed5a:	bf00      	nop
 801ed5c:	e004      	b.n	801ed68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801ed5e:	bf00      	nop
 801ed60:	e002      	b.n	801ed68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801ed62:	bf00      	nop
 801ed64:	e000      	b.n	801ed68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801ed66:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ed68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ed6c:	2b00      	cmp	r3, #0
 801ed6e:	d10b      	bne.n	801ed88 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801ed70:	4ba1      	ldr	r3, [pc, #644]	@ (801eff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ed72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ed74:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 801ed78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ed7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801ed80:	4a9d      	ldr	r2, [pc, #628]	@ (801eff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ed82:	430b      	orrs	r3, r1
 801ed84:	6593      	str	r3, [r2, #88]	@ 0x58
 801ed86:	e003      	b.n	801ed90 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ed88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ed8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801ed90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ed94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed98:	f002 0308 	and.w	r3, r2, #8
 801ed9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801eda0:	2300      	movs	r3, #0
 801eda2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801eda6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 801edaa:	460b      	mov	r3, r1
 801edac:	4313      	orrs	r3, r2
 801edae:	d01e      	beq.n	801edee <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 801edb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801edb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801edb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801edbc:	d10c      	bne.n	801edd8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801edbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801edc2:	3328      	adds	r3, #40	@ 0x28
 801edc4:	2102      	movs	r1, #2
 801edc6:	4618      	mov	r0, r3
 801edc8:	f000 fe54 	bl	801fa74 <RCCEx_PLL3_Config>
 801edcc:	4603      	mov	r3, r0
 801edce:	2b00      	cmp	r3, #0
 801edd0:	d002      	beq.n	801edd8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 801edd2:	2301      	movs	r3, #1
 801edd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801edd8:	4b87      	ldr	r3, [pc, #540]	@ (801eff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801edda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801eddc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801ede0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ede4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801ede8:	4a83      	ldr	r2, [pc, #524]	@ (801eff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801edea:	430b      	orrs	r3, r1
 801edec:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801edee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801edf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edf6:	f002 0310 	and.w	r3, r2, #16
 801edfa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801edfe:	2300      	movs	r3, #0
 801ee00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801ee04:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 801ee08:	460b      	mov	r3, r1
 801ee0a:	4313      	orrs	r3, r2
 801ee0c:	d01e      	beq.n	801ee4c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801ee0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801ee16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ee1a:	d10c      	bne.n	801ee36 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801ee1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee20:	3328      	adds	r3, #40	@ 0x28
 801ee22:	2102      	movs	r1, #2
 801ee24:	4618      	mov	r0, r3
 801ee26:	f000 fe25 	bl	801fa74 <RCCEx_PLL3_Config>
 801ee2a:	4603      	mov	r3, r0
 801ee2c:	2b00      	cmp	r3, #0
 801ee2e:	d002      	beq.n	801ee36 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 801ee30:	2301      	movs	r3, #1
 801ee32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801ee36:	4b70      	ldr	r3, [pc, #448]	@ (801eff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ee38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ee3a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801ee3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801ee46:	4a6c      	ldr	r2, [pc, #432]	@ (801eff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ee48:	430b      	orrs	r3, r1
 801ee4a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801ee4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee54:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 801ee58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801ee5c:	2300      	movs	r3, #0
 801ee5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801ee62:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 801ee66:	460b      	mov	r3, r1
 801ee68:	4313      	orrs	r3, r2
 801ee6a:	d03e      	beq.n	801eeea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801ee6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801ee74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801ee78:	d022      	beq.n	801eec0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 801ee7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801ee7e:	d81b      	bhi.n	801eeb8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 801ee80:	2b00      	cmp	r3, #0
 801ee82:	d003      	beq.n	801ee8c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 801ee84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ee88:	d00b      	beq.n	801eea2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 801ee8a:	e015      	b.n	801eeb8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801ee8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee90:	3308      	adds	r3, #8
 801ee92:	2100      	movs	r1, #0
 801ee94:	4618      	mov	r0, r3
 801ee96:	f000 fd3b 	bl	801f910 <RCCEx_PLL2_Config>
 801ee9a:	4603      	mov	r3, r0
 801ee9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801eea0:	e00f      	b.n	801eec2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801eea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eea6:	3328      	adds	r3, #40	@ 0x28
 801eea8:	2102      	movs	r1, #2
 801eeaa:	4618      	mov	r0, r3
 801eeac:	f000 fde2 	bl	801fa74 <RCCEx_PLL3_Config>
 801eeb0:	4603      	mov	r3, r0
 801eeb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801eeb6:	e004      	b.n	801eec2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801eeb8:	2301      	movs	r3, #1
 801eeba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801eebe:	e000      	b.n	801eec2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 801eec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 801eec2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801eec6:	2b00      	cmp	r3, #0
 801eec8:	d10b      	bne.n	801eee2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801eeca:	4b4b      	ldr	r3, [pc, #300]	@ (801eff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801eecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801eece:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 801eed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eed6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801eeda:	4a47      	ldr	r2, [pc, #284]	@ (801eff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801eedc:	430b      	orrs	r3, r1
 801eede:	6593      	str	r3, [r2, #88]	@ 0x58
 801eee0:	e003      	b.n	801eeea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801eee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801eee6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801eeea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eeee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eef2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 801eef6:	67bb      	str	r3, [r7, #120]	@ 0x78
 801eef8:	2300      	movs	r3, #0
 801eefa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801eefc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 801ef00:	460b      	mov	r3, r1
 801ef02:	4313      	orrs	r3, r2
 801ef04:	d03b      	beq.n	801ef7e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801ef06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ef0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801ef0e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801ef12:	d01f      	beq.n	801ef54 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 801ef14:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801ef18:	d818      	bhi.n	801ef4c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 801ef1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801ef1e:	d003      	beq.n	801ef28 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 801ef20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801ef24:	d007      	beq.n	801ef36 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 801ef26:	e011      	b.n	801ef4c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ef28:	4b33      	ldr	r3, [pc, #204]	@ (801eff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ef2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ef2c:	4a32      	ldr	r2, [pc, #200]	@ (801eff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ef2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801ef32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801ef34:	e00f      	b.n	801ef56 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801ef36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ef3a:	3328      	adds	r3, #40	@ 0x28
 801ef3c:	2101      	movs	r1, #1
 801ef3e:	4618      	mov	r0, r3
 801ef40:	f000 fd98 	bl	801fa74 <RCCEx_PLL3_Config>
 801ef44:	4603      	mov	r3, r0
 801ef46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 801ef4a:	e004      	b.n	801ef56 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ef4c:	2301      	movs	r3, #1
 801ef4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ef52:	e000      	b.n	801ef56 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 801ef54:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ef56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ef5a:	2b00      	cmp	r3, #0
 801ef5c:	d10b      	bne.n	801ef76 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801ef5e:	4b26      	ldr	r3, [pc, #152]	@ (801eff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ef60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ef62:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801ef66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ef6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801ef6e:	4a22      	ldr	r2, [pc, #136]	@ (801eff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ef70:	430b      	orrs	r3, r1
 801ef72:	6553      	str	r3, [r2, #84]	@ 0x54
 801ef74:	e003      	b.n	801ef7e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ef76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ef7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801ef7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ef82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef86:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801ef8a:	673b      	str	r3, [r7, #112]	@ 0x70
 801ef8c:	2300      	movs	r3, #0
 801ef8e:	677b      	str	r3, [r7, #116]	@ 0x74
 801ef90:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 801ef94:	460b      	mov	r3, r1
 801ef96:	4313      	orrs	r3, r2
 801ef98:	d034      	beq.n	801f004 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801ef9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ef9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801efa0:	2b00      	cmp	r3, #0
 801efa2:	d003      	beq.n	801efac <HAL_RCCEx_PeriphCLKConfig+0x102c>
 801efa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801efa8:	d007      	beq.n	801efba <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801efaa:	e011      	b.n	801efd0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801efac:	4b12      	ldr	r3, [pc, #72]	@ (801eff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801efae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801efb0:	4a11      	ldr	r2, [pc, #68]	@ (801eff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801efb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801efb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801efb8:	e00e      	b.n	801efd8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801efba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801efbe:	3308      	adds	r3, #8
 801efc0:	2102      	movs	r1, #2
 801efc2:	4618      	mov	r0, r3
 801efc4:	f000 fca4 	bl	801f910 <RCCEx_PLL2_Config>
 801efc8:	4603      	mov	r3, r0
 801efca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801efce:	e003      	b.n	801efd8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 801efd0:	2301      	movs	r3, #1
 801efd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801efd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 801efd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801efdc:	2b00      	cmp	r3, #0
 801efde:	d10d      	bne.n	801effc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801efe0:	4b05      	ldr	r3, [pc, #20]	@ (801eff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801efe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801efe4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801efe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801efec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801efee:	4a02      	ldr	r2, [pc, #8]	@ (801eff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801eff0:	430b      	orrs	r3, r1
 801eff2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801eff4:	e006      	b.n	801f004 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 801eff6:	bf00      	nop
 801eff8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801effc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f000:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801f004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f00c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 801f010:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f012:	2300      	movs	r3, #0
 801f014:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801f016:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 801f01a:	460b      	mov	r3, r1
 801f01c:	4313      	orrs	r3, r2
 801f01e:	d00c      	beq.n	801f03a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801f020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f024:	3328      	adds	r3, #40	@ 0x28
 801f026:	2102      	movs	r1, #2
 801f028:	4618      	mov	r0, r3
 801f02a:	f000 fd23 	bl	801fa74 <RCCEx_PLL3_Config>
 801f02e:	4603      	mov	r3, r0
 801f030:	2b00      	cmp	r3, #0
 801f032:	d002      	beq.n	801f03a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 801f034:	2301      	movs	r3, #1
 801f036:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801f03a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f042:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801f046:	663b      	str	r3, [r7, #96]	@ 0x60
 801f048:	2300      	movs	r3, #0
 801f04a:	667b      	str	r3, [r7, #100]	@ 0x64
 801f04c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 801f050:	460b      	mov	r3, r1
 801f052:	4313      	orrs	r3, r2
 801f054:	d038      	beq.n	801f0c8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 801f056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f05a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801f05e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801f062:	d018      	beq.n	801f096 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 801f064:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801f068:	d811      	bhi.n	801f08e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801f06a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801f06e:	d014      	beq.n	801f09a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 801f070:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801f074:	d80b      	bhi.n	801f08e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801f076:	2b00      	cmp	r3, #0
 801f078:	d011      	beq.n	801f09e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801f07a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801f07e:	d106      	bne.n	801f08e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801f080:	4bc3      	ldr	r3, [pc, #780]	@ (801f390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f084:	4ac2      	ldr	r2, [pc, #776]	@ (801f390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f086:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801f08a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801f08c:	e008      	b.n	801f0a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801f08e:	2301      	movs	r3, #1
 801f090:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801f094:	e004      	b.n	801f0a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801f096:	bf00      	nop
 801f098:	e002      	b.n	801f0a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801f09a:	bf00      	nop
 801f09c:	e000      	b.n	801f0a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801f09e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801f0a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f0a4:	2b00      	cmp	r3, #0
 801f0a6:	d10b      	bne.n	801f0c0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801f0a8:	4bb9      	ldr	r3, [pc, #740]	@ (801f390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f0aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f0ac:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801f0b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f0b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801f0b8:	4ab5      	ldr	r2, [pc, #724]	@ (801f390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f0ba:	430b      	orrs	r3, r1
 801f0bc:	6553      	str	r3, [r2, #84]	@ 0x54
 801f0be:	e003      	b.n	801f0c8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f0c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f0c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801f0c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0d0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 801f0d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 801f0d6:	2300      	movs	r3, #0
 801f0d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801f0da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 801f0de:	460b      	mov	r3, r1
 801f0e0:	4313      	orrs	r3, r2
 801f0e2:	d009      	beq.n	801f0f8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801f0e4:	4baa      	ldr	r3, [pc, #680]	@ (801f390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f0e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801f0e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801f0ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f0f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f0f2:	4aa7      	ldr	r2, [pc, #668]	@ (801f390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f0f4:	430b      	orrs	r3, r1
 801f0f6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 801f0f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f100:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 801f104:	653b      	str	r3, [r7, #80]	@ 0x50
 801f106:	2300      	movs	r3, #0
 801f108:	657b      	str	r3, [r7, #84]	@ 0x54
 801f10a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801f10e:	460b      	mov	r3, r1
 801f110:	4313      	orrs	r3, r2
 801f112:	d00a      	beq.n	801f12a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801f114:	4b9e      	ldr	r3, [pc, #632]	@ (801f390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f116:	691b      	ldr	r3, [r3, #16]
 801f118:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 801f11c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f120:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801f124:	4a9a      	ldr	r2, [pc, #616]	@ (801f390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f126:	430b      	orrs	r3, r1
 801f128:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801f12a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f132:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 801f136:	64bb      	str	r3, [r7, #72]	@ 0x48
 801f138:	2300      	movs	r3, #0
 801f13a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801f13c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801f140:	460b      	mov	r3, r1
 801f142:	4313      	orrs	r3, r2
 801f144:	d009      	beq.n	801f15a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801f146:	4b92      	ldr	r3, [pc, #584]	@ (801f390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801f14a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 801f14e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f152:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f154:	4a8e      	ldr	r2, [pc, #568]	@ (801f390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f156:	430b      	orrs	r3, r1
 801f158:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801f15a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f162:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 801f166:	643b      	str	r3, [r7, #64]	@ 0x40
 801f168:	2300      	movs	r3, #0
 801f16a:	647b      	str	r3, [r7, #68]	@ 0x44
 801f16c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801f170:	460b      	mov	r3, r1
 801f172:	4313      	orrs	r3, r2
 801f174:	d00e      	beq.n	801f194 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801f176:	4b86      	ldr	r3, [pc, #536]	@ (801f390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f178:	691b      	ldr	r3, [r3, #16]
 801f17a:	4a85      	ldr	r2, [pc, #532]	@ (801f390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f17c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801f180:	6113      	str	r3, [r2, #16]
 801f182:	4b83      	ldr	r3, [pc, #524]	@ (801f390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f184:	6919      	ldr	r1, [r3, #16]
 801f186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f18a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801f18e:	4a80      	ldr	r2, [pc, #512]	@ (801f390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f190:	430b      	orrs	r3, r1
 801f192:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801f194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f19c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 801f1a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 801f1a2:	2300      	movs	r3, #0
 801f1a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801f1a6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801f1aa:	460b      	mov	r3, r1
 801f1ac:	4313      	orrs	r3, r2
 801f1ae:	d009      	beq.n	801f1c4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801f1b0:	4b77      	ldr	r3, [pc, #476]	@ (801f390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f1b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801f1b4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801f1b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f1bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f1be:	4a74      	ldr	r2, [pc, #464]	@ (801f390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f1c0:	430b      	orrs	r3, r1
 801f1c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801f1c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1cc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801f1d0:	633b      	str	r3, [r7, #48]	@ 0x30
 801f1d2:	2300      	movs	r3, #0
 801f1d4:	637b      	str	r3, [r7, #52]	@ 0x34
 801f1d6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801f1da:	460b      	mov	r3, r1
 801f1dc:	4313      	orrs	r3, r2
 801f1de:	d00a      	beq.n	801f1f6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801f1e0:	4b6b      	ldr	r3, [pc, #428]	@ (801f390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f1e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f1e4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 801f1e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f1ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801f1f0:	4a67      	ldr	r2, [pc, #412]	@ (801f390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f1f2:	430b      	orrs	r3, r1
 801f1f4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801f1f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1fe:	2100      	movs	r1, #0
 801f200:	62b9      	str	r1, [r7, #40]	@ 0x28
 801f202:	f003 0301 	and.w	r3, r3, #1
 801f206:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f208:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801f20c:	460b      	mov	r3, r1
 801f20e:	4313      	orrs	r3, r2
 801f210:	d011      	beq.n	801f236 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801f212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f216:	3308      	adds	r3, #8
 801f218:	2100      	movs	r1, #0
 801f21a:	4618      	mov	r0, r3
 801f21c:	f000 fb78 	bl	801f910 <RCCEx_PLL2_Config>
 801f220:	4603      	mov	r3, r0
 801f222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801f226:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f22a:	2b00      	cmp	r3, #0
 801f22c:	d003      	beq.n	801f236 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f22e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f232:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801f236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f23e:	2100      	movs	r1, #0
 801f240:	6239      	str	r1, [r7, #32]
 801f242:	f003 0302 	and.w	r3, r3, #2
 801f246:	627b      	str	r3, [r7, #36]	@ 0x24
 801f248:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801f24c:	460b      	mov	r3, r1
 801f24e:	4313      	orrs	r3, r2
 801f250:	d011      	beq.n	801f276 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801f252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f256:	3308      	adds	r3, #8
 801f258:	2101      	movs	r1, #1
 801f25a:	4618      	mov	r0, r3
 801f25c:	f000 fb58 	bl	801f910 <RCCEx_PLL2_Config>
 801f260:	4603      	mov	r3, r0
 801f262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801f266:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f26a:	2b00      	cmp	r3, #0
 801f26c:	d003      	beq.n	801f276 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f26e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f272:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801f276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f27e:	2100      	movs	r1, #0
 801f280:	61b9      	str	r1, [r7, #24]
 801f282:	f003 0304 	and.w	r3, r3, #4
 801f286:	61fb      	str	r3, [r7, #28]
 801f288:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801f28c:	460b      	mov	r3, r1
 801f28e:	4313      	orrs	r3, r2
 801f290:	d011      	beq.n	801f2b6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801f292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f296:	3308      	adds	r3, #8
 801f298:	2102      	movs	r1, #2
 801f29a:	4618      	mov	r0, r3
 801f29c:	f000 fb38 	bl	801f910 <RCCEx_PLL2_Config>
 801f2a0:	4603      	mov	r3, r0
 801f2a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801f2a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f2aa:	2b00      	cmp	r3, #0
 801f2ac:	d003      	beq.n	801f2b6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f2ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f2b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801f2b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2be:	2100      	movs	r1, #0
 801f2c0:	6139      	str	r1, [r7, #16]
 801f2c2:	f003 0308 	and.w	r3, r3, #8
 801f2c6:	617b      	str	r3, [r7, #20]
 801f2c8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801f2cc:	460b      	mov	r3, r1
 801f2ce:	4313      	orrs	r3, r2
 801f2d0:	d011      	beq.n	801f2f6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801f2d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f2d6:	3328      	adds	r3, #40	@ 0x28
 801f2d8:	2100      	movs	r1, #0
 801f2da:	4618      	mov	r0, r3
 801f2dc:	f000 fbca 	bl	801fa74 <RCCEx_PLL3_Config>
 801f2e0:	4603      	mov	r3, r0
 801f2e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 801f2e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f2ea:	2b00      	cmp	r3, #0
 801f2ec:	d003      	beq.n	801f2f6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f2ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f2f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801f2f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2fe:	2100      	movs	r1, #0
 801f300:	60b9      	str	r1, [r7, #8]
 801f302:	f003 0310 	and.w	r3, r3, #16
 801f306:	60fb      	str	r3, [r7, #12]
 801f308:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801f30c:	460b      	mov	r3, r1
 801f30e:	4313      	orrs	r3, r2
 801f310:	d011      	beq.n	801f336 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801f312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f316:	3328      	adds	r3, #40	@ 0x28
 801f318:	2101      	movs	r1, #1
 801f31a:	4618      	mov	r0, r3
 801f31c:	f000 fbaa 	bl	801fa74 <RCCEx_PLL3_Config>
 801f320:	4603      	mov	r3, r0
 801f322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801f326:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f32a:	2b00      	cmp	r3, #0
 801f32c:	d003      	beq.n	801f336 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f32e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f332:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801f336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f33e:	2100      	movs	r1, #0
 801f340:	6039      	str	r1, [r7, #0]
 801f342:	f003 0320 	and.w	r3, r3, #32
 801f346:	607b      	str	r3, [r7, #4]
 801f348:	e9d7 1200 	ldrd	r1, r2, [r7]
 801f34c:	460b      	mov	r3, r1
 801f34e:	4313      	orrs	r3, r2
 801f350:	d011      	beq.n	801f376 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801f352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f356:	3328      	adds	r3, #40	@ 0x28
 801f358:	2102      	movs	r1, #2
 801f35a:	4618      	mov	r0, r3
 801f35c:	f000 fb8a 	bl	801fa74 <RCCEx_PLL3_Config>
 801f360:	4603      	mov	r3, r0
 801f362:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801f366:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f36a:	2b00      	cmp	r3, #0
 801f36c:	d003      	beq.n	801f376 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f36e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f372:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 801f376:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801f37a:	2b00      	cmp	r3, #0
 801f37c:	d101      	bne.n	801f382 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 801f37e:	2300      	movs	r3, #0
 801f380:	e000      	b.n	801f384 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 801f382:	2301      	movs	r3, #1
}
 801f384:	4618      	mov	r0, r3
 801f386:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801f38a:	46bd      	mov	sp, r7
 801f38c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801f390:	58024400 	.word	0x58024400

0801f394 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801f394:	b580      	push	{r7, lr}
 801f396:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801f398:	f7fe fd96 	bl	801dec8 <HAL_RCC_GetHCLKFreq>
 801f39c:	4602      	mov	r2, r0
 801f39e:	4b06      	ldr	r3, [pc, #24]	@ (801f3b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801f3a0:	6a1b      	ldr	r3, [r3, #32]
 801f3a2:	091b      	lsrs	r3, r3, #4
 801f3a4:	f003 0307 	and.w	r3, r3, #7
 801f3a8:	4904      	ldr	r1, [pc, #16]	@ (801f3bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801f3aa:	5ccb      	ldrb	r3, [r1, r3]
 801f3ac:	f003 031f 	and.w	r3, r3, #31
 801f3b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801f3b4:	4618      	mov	r0, r3
 801f3b6:	bd80      	pop	{r7, pc}
 801f3b8:	58024400 	.word	0x58024400
 801f3bc:	08027ee4 	.word	0x08027ee4

0801f3c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801f3c0:	b480      	push	{r7}
 801f3c2:	b089      	sub	sp, #36	@ 0x24
 801f3c4:	af00      	add	r7, sp, #0
 801f3c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801f3c8:	4ba1      	ldr	r3, [pc, #644]	@ (801f650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f3ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f3cc:	f003 0303 	and.w	r3, r3, #3
 801f3d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801f3d2:	4b9f      	ldr	r3, [pc, #636]	@ (801f650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f3d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f3d6:	0b1b      	lsrs	r3, r3, #12
 801f3d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801f3dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801f3de:	4b9c      	ldr	r3, [pc, #624]	@ (801f650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f3e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f3e2:	091b      	lsrs	r3, r3, #4
 801f3e4:	f003 0301 	and.w	r3, r3, #1
 801f3e8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801f3ea:	4b99      	ldr	r3, [pc, #612]	@ (801f650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f3ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f3ee:	08db      	lsrs	r3, r3, #3
 801f3f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f3f4:	693a      	ldr	r2, [r7, #16]
 801f3f6:	fb02 f303 	mul.w	r3, r2, r3
 801f3fa:	ee07 3a90 	vmov	s15, r3
 801f3fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f402:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801f406:	697b      	ldr	r3, [r7, #20]
 801f408:	2b00      	cmp	r3, #0
 801f40a:	f000 8111 	beq.w	801f630 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801f40e:	69bb      	ldr	r3, [r7, #24]
 801f410:	2b02      	cmp	r3, #2
 801f412:	f000 8083 	beq.w	801f51c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801f416:	69bb      	ldr	r3, [r7, #24]
 801f418:	2b02      	cmp	r3, #2
 801f41a:	f200 80a1 	bhi.w	801f560 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801f41e:	69bb      	ldr	r3, [r7, #24]
 801f420:	2b00      	cmp	r3, #0
 801f422:	d003      	beq.n	801f42c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801f424:	69bb      	ldr	r3, [r7, #24]
 801f426:	2b01      	cmp	r3, #1
 801f428:	d056      	beq.n	801f4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801f42a:	e099      	b.n	801f560 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801f42c:	4b88      	ldr	r3, [pc, #544]	@ (801f650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f42e:	681b      	ldr	r3, [r3, #0]
 801f430:	f003 0320 	and.w	r3, r3, #32
 801f434:	2b00      	cmp	r3, #0
 801f436:	d02d      	beq.n	801f494 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801f438:	4b85      	ldr	r3, [pc, #532]	@ (801f650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f43a:	681b      	ldr	r3, [r3, #0]
 801f43c:	08db      	lsrs	r3, r3, #3
 801f43e:	f003 0303 	and.w	r3, r3, #3
 801f442:	4a84      	ldr	r2, [pc, #528]	@ (801f654 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801f444:	fa22 f303 	lsr.w	r3, r2, r3
 801f448:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f44a:	68bb      	ldr	r3, [r7, #8]
 801f44c:	ee07 3a90 	vmov	s15, r3
 801f450:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f454:	697b      	ldr	r3, [r7, #20]
 801f456:	ee07 3a90 	vmov	s15, r3
 801f45a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f45e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f462:	4b7b      	ldr	r3, [pc, #492]	@ (801f650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f46a:	ee07 3a90 	vmov	s15, r3
 801f46e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f472:	ed97 6a03 	vldr	s12, [r7, #12]
 801f476:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801f658 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f47a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f47e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f482:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f48a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f48e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801f492:	e087      	b.n	801f5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f494:	697b      	ldr	r3, [r7, #20]
 801f496:	ee07 3a90 	vmov	s15, r3
 801f49a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f49e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801f65c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801f4a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f4a6:	4b6a      	ldr	r3, [pc, #424]	@ (801f650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f4a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f4aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f4ae:	ee07 3a90 	vmov	s15, r3
 801f4b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f4b6:	ed97 6a03 	vldr	s12, [r7, #12]
 801f4ba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801f658 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f4be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f4c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f4c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f4ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f4ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f4d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f4d6:	e065      	b.n	801f5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f4d8:	697b      	ldr	r3, [r7, #20]
 801f4da:	ee07 3a90 	vmov	s15, r3
 801f4de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f4e2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801f660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801f4e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f4ea:	4b59      	ldr	r3, [pc, #356]	@ (801f650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f4ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f4ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f4f2:	ee07 3a90 	vmov	s15, r3
 801f4f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f4fa:	ed97 6a03 	vldr	s12, [r7, #12]
 801f4fe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801f658 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f50a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f50e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f512:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f516:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f51a:	e043      	b.n	801f5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f51c:	697b      	ldr	r3, [r7, #20]
 801f51e:	ee07 3a90 	vmov	s15, r3
 801f522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f526:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801f664 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801f52a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f52e:	4b48      	ldr	r3, [pc, #288]	@ (801f650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f536:	ee07 3a90 	vmov	s15, r3
 801f53a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f53e:	ed97 6a03 	vldr	s12, [r7, #12]
 801f542:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801f658 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f54a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f54e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f556:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f55a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f55e:	e021      	b.n	801f5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f560:	697b      	ldr	r3, [r7, #20]
 801f562:	ee07 3a90 	vmov	s15, r3
 801f566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f56a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801f660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801f56e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f572:	4b37      	ldr	r3, [pc, #220]	@ (801f650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f57a:	ee07 3a90 	vmov	s15, r3
 801f57e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f582:	ed97 6a03 	vldr	s12, [r7, #12]
 801f586:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801f658 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f58a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f58e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f592:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f59a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f59e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f5a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801f5a4:	4b2a      	ldr	r3, [pc, #168]	@ (801f650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f5a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f5a8:	0a5b      	lsrs	r3, r3, #9
 801f5aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f5ae:	ee07 3a90 	vmov	s15, r3
 801f5b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f5b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f5ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f5be:	edd7 6a07 	vldr	s13, [r7, #28]
 801f5c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f5c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f5ca:	ee17 2a90 	vmov	r2, s15
 801f5ce:	687b      	ldr	r3, [r7, #4]
 801f5d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801f5d2:	4b1f      	ldr	r3, [pc, #124]	@ (801f650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f5d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f5d6:	0c1b      	lsrs	r3, r3, #16
 801f5d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f5dc:	ee07 3a90 	vmov	s15, r3
 801f5e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f5e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f5e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f5ec:	edd7 6a07 	vldr	s13, [r7, #28]
 801f5f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f5f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f5f8:	ee17 2a90 	vmov	r2, s15
 801f5fc:	687b      	ldr	r3, [r7, #4]
 801f5fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801f600:	4b13      	ldr	r3, [pc, #76]	@ (801f650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f604:	0e1b      	lsrs	r3, r3, #24
 801f606:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f60a:	ee07 3a90 	vmov	s15, r3
 801f60e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f612:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f616:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f61a:	edd7 6a07 	vldr	s13, [r7, #28]
 801f61e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f622:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f626:	ee17 2a90 	vmov	r2, s15
 801f62a:	687b      	ldr	r3, [r7, #4]
 801f62c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801f62e:	e008      	b.n	801f642 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801f630:	687b      	ldr	r3, [r7, #4]
 801f632:	2200      	movs	r2, #0
 801f634:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801f636:	687b      	ldr	r3, [r7, #4]
 801f638:	2200      	movs	r2, #0
 801f63a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801f63c:	687b      	ldr	r3, [r7, #4]
 801f63e:	2200      	movs	r2, #0
 801f640:	609a      	str	r2, [r3, #8]
}
 801f642:	bf00      	nop
 801f644:	3724      	adds	r7, #36	@ 0x24
 801f646:	46bd      	mov	sp, r7
 801f648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f64c:	4770      	bx	lr
 801f64e:	bf00      	nop
 801f650:	58024400 	.word	0x58024400
 801f654:	03d09000 	.word	0x03d09000
 801f658:	46000000 	.word	0x46000000
 801f65c:	4c742400 	.word	0x4c742400
 801f660:	4a742400 	.word	0x4a742400
 801f664:	4bbebc20 	.word	0x4bbebc20

0801f668 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801f668:	b480      	push	{r7}
 801f66a:	b089      	sub	sp, #36	@ 0x24
 801f66c:	af00      	add	r7, sp, #0
 801f66e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801f670:	4ba1      	ldr	r3, [pc, #644]	@ (801f8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f674:	f003 0303 	and.w	r3, r3, #3
 801f678:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801f67a:	4b9f      	ldr	r3, [pc, #636]	@ (801f8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f67c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f67e:	0d1b      	lsrs	r3, r3, #20
 801f680:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801f684:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801f686:	4b9c      	ldr	r3, [pc, #624]	@ (801f8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f68a:	0a1b      	lsrs	r3, r3, #8
 801f68c:	f003 0301 	and.w	r3, r3, #1
 801f690:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801f692:	4b99      	ldr	r3, [pc, #612]	@ (801f8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f696:	08db      	lsrs	r3, r3, #3
 801f698:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f69c:	693a      	ldr	r2, [r7, #16]
 801f69e:	fb02 f303 	mul.w	r3, r2, r3
 801f6a2:	ee07 3a90 	vmov	s15, r3
 801f6a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f6aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801f6ae:	697b      	ldr	r3, [r7, #20]
 801f6b0:	2b00      	cmp	r3, #0
 801f6b2:	f000 8111 	beq.w	801f8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801f6b6:	69bb      	ldr	r3, [r7, #24]
 801f6b8:	2b02      	cmp	r3, #2
 801f6ba:	f000 8083 	beq.w	801f7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801f6be:	69bb      	ldr	r3, [r7, #24]
 801f6c0:	2b02      	cmp	r3, #2
 801f6c2:	f200 80a1 	bhi.w	801f808 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801f6c6:	69bb      	ldr	r3, [r7, #24]
 801f6c8:	2b00      	cmp	r3, #0
 801f6ca:	d003      	beq.n	801f6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801f6cc:	69bb      	ldr	r3, [r7, #24]
 801f6ce:	2b01      	cmp	r3, #1
 801f6d0:	d056      	beq.n	801f780 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801f6d2:	e099      	b.n	801f808 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801f6d4:	4b88      	ldr	r3, [pc, #544]	@ (801f8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f6d6:	681b      	ldr	r3, [r3, #0]
 801f6d8:	f003 0320 	and.w	r3, r3, #32
 801f6dc:	2b00      	cmp	r3, #0
 801f6de:	d02d      	beq.n	801f73c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801f6e0:	4b85      	ldr	r3, [pc, #532]	@ (801f8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f6e2:	681b      	ldr	r3, [r3, #0]
 801f6e4:	08db      	lsrs	r3, r3, #3
 801f6e6:	f003 0303 	and.w	r3, r3, #3
 801f6ea:	4a84      	ldr	r2, [pc, #528]	@ (801f8fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801f6ec:	fa22 f303 	lsr.w	r3, r2, r3
 801f6f0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f6f2:	68bb      	ldr	r3, [r7, #8]
 801f6f4:	ee07 3a90 	vmov	s15, r3
 801f6f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f6fc:	697b      	ldr	r3, [r7, #20]
 801f6fe:	ee07 3a90 	vmov	s15, r3
 801f702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f70a:	4b7b      	ldr	r3, [pc, #492]	@ (801f8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f70c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f70e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f712:	ee07 3a90 	vmov	s15, r3
 801f716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f71a:	ed97 6a03 	vldr	s12, [r7, #12]
 801f71e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801f900 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f72a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f72e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f732:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f736:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801f73a:	e087      	b.n	801f84c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f73c:	697b      	ldr	r3, [r7, #20]
 801f73e:	ee07 3a90 	vmov	s15, r3
 801f742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f746:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801f904 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801f74a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f74e:	4b6a      	ldr	r3, [pc, #424]	@ (801f8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f756:	ee07 3a90 	vmov	s15, r3
 801f75a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f75e:	ed97 6a03 	vldr	s12, [r7, #12]
 801f762:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801f900 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f76a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f76e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f776:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f77a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f77e:	e065      	b.n	801f84c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f780:	697b      	ldr	r3, [r7, #20]
 801f782:	ee07 3a90 	vmov	s15, r3
 801f786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f78a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801f908 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801f78e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f792:	4b59      	ldr	r3, [pc, #356]	@ (801f8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f79a:	ee07 3a90 	vmov	s15, r3
 801f79e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f7a2:	ed97 6a03 	vldr	s12, [r7, #12]
 801f7a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801f900 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f7aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f7ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f7b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f7b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f7ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f7be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f7c2:	e043      	b.n	801f84c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f7c4:	697b      	ldr	r3, [r7, #20]
 801f7c6:	ee07 3a90 	vmov	s15, r3
 801f7ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f7ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801f90c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801f7d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f7d6:	4b48      	ldr	r3, [pc, #288]	@ (801f8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f7d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f7da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f7de:	ee07 3a90 	vmov	s15, r3
 801f7e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f7e6:	ed97 6a03 	vldr	s12, [r7, #12]
 801f7ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801f900 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f7ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f7f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f7f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f7fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f7fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f802:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f806:	e021      	b.n	801f84c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f808:	697b      	ldr	r3, [r7, #20]
 801f80a:	ee07 3a90 	vmov	s15, r3
 801f80e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f812:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801f908 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801f816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f81a:	4b37      	ldr	r3, [pc, #220]	@ (801f8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f81c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f81e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f822:	ee07 3a90 	vmov	s15, r3
 801f826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f82a:	ed97 6a03 	vldr	s12, [r7, #12]
 801f82e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801f900 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f83a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f83e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f842:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f846:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f84a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801f84c:	4b2a      	ldr	r3, [pc, #168]	@ (801f8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f84e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f850:	0a5b      	lsrs	r3, r3, #9
 801f852:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f856:	ee07 3a90 	vmov	s15, r3
 801f85a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f85e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f862:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f866:	edd7 6a07 	vldr	s13, [r7, #28]
 801f86a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f86e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f872:	ee17 2a90 	vmov	r2, s15
 801f876:	687b      	ldr	r3, [r7, #4]
 801f878:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801f87a:	4b1f      	ldr	r3, [pc, #124]	@ (801f8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f87c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f87e:	0c1b      	lsrs	r3, r3, #16
 801f880:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f884:	ee07 3a90 	vmov	s15, r3
 801f888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f88c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f890:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f894:	edd7 6a07 	vldr	s13, [r7, #28]
 801f898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f89c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f8a0:	ee17 2a90 	vmov	r2, s15
 801f8a4:	687b      	ldr	r3, [r7, #4]
 801f8a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801f8a8:	4b13      	ldr	r3, [pc, #76]	@ (801f8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f8aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f8ac:	0e1b      	lsrs	r3, r3, #24
 801f8ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f8b2:	ee07 3a90 	vmov	s15, r3
 801f8b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f8ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f8be:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f8c2:	edd7 6a07 	vldr	s13, [r7, #28]
 801f8c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f8ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f8ce:	ee17 2a90 	vmov	r2, s15
 801f8d2:	687b      	ldr	r3, [r7, #4]
 801f8d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801f8d6:	e008      	b.n	801f8ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801f8d8:	687b      	ldr	r3, [r7, #4]
 801f8da:	2200      	movs	r2, #0
 801f8dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801f8de:	687b      	ldr	r3, [r7, #4]
 801f8e0:	2200      	movs	r2, #0
 801f8e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801f8e4:	687b      	ldr	r3, [r7, #4]
 801f8e6:	2200      	movs	r2, #0
 801f8e8:	609a      	str	r2, [r3, #8]
}
 801f8ea:	bf00      	nop
 801f8ec:	3724      	adds	r7, #36	@ 0x24
 801f8ee:	46bd      	mov	sp, r7
 801f8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8f4:	4770      	bx	lr
 801f8f6:	bf00      	nop
 801f8f8:	58024400 	.word	0x58024400
 801f8fc:	03d09000 	.word	0x03d09000
 801f900:	46000000 	.word	0x46000000
 801f904:	4c742400 	.word	0x4c742400
 801f908:	4a742400 	.word	0x4a742400
 801f90c:	4bbebc20 	.word	0x4bbebc20

0801f910 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801f910:	b580      	push	{r7, lr}
 801f912:	b084      	sub	sp, #16
 801f914:	af00      	add	r7, sp, #0
 801f916:	6078      	str	r0, [r7, #4]
 801f918:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801f91a:	2300      	movs	r3, #0
 801f91c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801f91e:	4b53      	ldr	r3, [pc, #332]	@ (801fa6c <RCCEx_PLL2_Config+0x15c>)
 801f920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f922:	f003 0303 	and.w	r3, r3, #3
 801f926:	2b03      	cmp	r3, #3
 801f928:	d101      	bne.n	801f92e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801f92a:	2301      	movs	r3, #1
 801f92c:	e099      	b.n	801fa62 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801f92e:	4b4f      	ldr	r3, [pc, #316]	@ (801fa6c <RCCEx_PLL2_Config+0x15c>)
 801f930:	681b      	ldr	r3, [r3, #0]
 801f932:	4a4e      	ldr	r2, [pc, #312]	@ (801fa6c <RCCEx_PLL2_Config+0x15c>)
 801f934:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801f938:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f93a:	f7fa ff23 	bl	801a784 <HAL_GetTick>
 801f93e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801f940:	e008      	b.n	801f954 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801f942:	f7fa ff1f 	bl	801a784 <HAL_GetTick>
 801f946:	4602      	mov	r2, r0
 801f948:	68bb      	ldr	r3, [r7, #8]
 801f94a:	1ad3      	subs	r3, r2, r3
 801f94c:	2b02      	cmp	r3, #2
 801f94e:	d901      	bls.n	801f954 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801f950:	2303      	movs	r3, #3
 801f952:	e086      	b.n	801fa62 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801f954:	4b45      	ldr	r3, [pc, #276]	@ (801fa6c <RCCEx_PLL2_Config+0x15c>)
 801f956:	681b      	ldr	r3, [r3, #0]
 801f958:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801f95c:	2b00      	cmp	r3, #0
 801f95e:	d1f0      	bne.n	801f942 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801f960:	4b42      	ldr	r3, [pc, #264]	@ (801fa6c <RCCEx_PLL2_Config+0x15c>)
 801f962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f964:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801f968:	687b      	ldr	r3, [r7, #4]
 801f96a:	681b      	ldr	r3, [r3, #0]
 801f96c:	031b      	lsls	r3, r3, #12
 801f96e:	493f      	ldr	r1, [pc, #252]	@ (801fa6c <RCCEx_PLL2_Config+0x15c>)
 801f970:	4313      	orrs	r3, r2
 801f972:	628b      	str	r3, [r1, #40]	@ 0x28
 801f974:	687b      	ldr	r3, [r7, #4]
 801f976:	685b      	ldr	r3, [r3, #4]
 801f978:	3b01      	subs	r3, #1
 801f97a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801f97e:	687b      	ldr	r3, [r7, #4]
 801f980:	689b      	ldr	r3, [r3, #8]
 801f982:	3b01      	subs	r3, #1
 801f984:	025b      	lsls	r3, r3, #9
 801f986:	b29b      	uxth	r3, r3
 801f988:	431a      	orrs	r2, r3
 801f98a:	687b      	ldr	r3, [r7, #4]
 801f98c:	68db      	ldr	r3, [r3, #12]
 801f98e:	3b01      	subs	r3, #1
 801f990:	041b      	lsls	r3, r3, #16
 801f992:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801f996:	431a      	orrs	r2, r3
 801f998:	687b      	ldr	r3, [r7, #4]
 801f99a:	691b      	ldr	r3, [r3, #16]
 801f99c:	3b01      	subs	r3, #1
 801f99e:	061b      	lsls	r3, r3, #24
 801f9a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801f9a4:	4931      	ldr	r1, [pc, #196]	@ (801fa6c <RCCEx_PLL2_Config+0x15c>)
 801f9a6:	4313      	orrs	r3, r2
 801f9a8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801f9aa:	4b30      	ldr	r3, [pc, #192]	@ (801fa6c <RCCEx_PLL2_Config+0x15c>)
 801f9ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f9ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801f9b2:	687b      	ldr	r3, [r7, #4]
 801f9b4:	695b      	ldr	r3, [r3, #20]
 801f9b6:	492d      	ldr	r1, [pc, #180]	@ (801fa6c <RCCEx_PLL2_Config+0x15c>)
 801f9b8:	4313      	orrs	r3, r2
 801f9ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801f9bc:	4b2b      	ldr	r3, [pc, #172]	@ (801fa6c <RCCEx_PLL2_Config+0x15c>)
 801f9be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f9c0:	f023 0220 	bic.w	r2, r3, #32
 801f9c4:	687b      	ldr	r3, [r7, #4]
 801f9c6:	699b      	ldr	r3, [r3, #24]
 801f9c8:	4928      	ldr	r1, [pc, #160]	@ (801fa6c <RCCEx_PLL2_Config+0x15c>)
 801f9ca:	4313      	orrs	r3, r2
 801f9cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801f9ce:	4b27      	ldr	r3, [pc, #156]	@ (801fa6c <RCCEx_PLL2_Config+0x15c>)
 801f9d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f9d2:	4a26      	ldr	r2, [pc, #152]	@ (801fa6c <RCCEx_PLL2_Config+0x15c>)
 801f9d4:	f023 0310 	bic.w	r3, r3, #16
 801f9d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801f9da:	4b24      	ldr	r3, [pc, #144]	@ (801fa6c <RCCEx_PLL2_Config+0x15c>)
 801f9dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801f9de:	4b24      	ldr	r3, [pc, #144]	@ (801fa70 <RCCEx_PLL2_Config+0x160>)
 801f9e0:	4013      	ands	r3, r2
 801f9e2:	687a      	ldr	r2, [r7, #4]
 801f9e4:	69d2      	ldr	r2, [r2, #28]
 801f9e6:	00d2      	lsls	r2, r2, #3
 801f9e8:	4920      	ldr	r1, [pc, #128]	@ (801fa6c <RCCEx_PLL2_Config+0x15c>)
 801f9ea:	4313      	orrs	r3, r2
 801f9ec:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801f9ee:	4b1f      	ldr	r3, [pc, #124]	@ (801fa6c <RCCEx_PLL2_Config+0x15c>)
 801f9f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f9f2:	4a1e      	ldr	r2, [pc, #120]	@ (801fa6c <RCCEx_PLL2_Config+0x15c>)
 801f9f4:	f043 0310 	orr.w	r3, r3, #16
 801f9f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801f9fa:	683b      	ldr	r3, [r7, #0]
 801f9fc:	2b00      	cmp	r3, #0
 801f9fe:	d106      	bne.n	801fa0e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801fa00:	4b1a      	ldr	r3, [pc, #104]	@ (801fa6c <RCCEx_PLL2_Config+0x15c>)
 801fa02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fa04:	4a19      	ldr	r2, [pc, #100]	@ (801fa6c <RCCEx_PLL2_Config+0x15c>)
 801fa06:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801fa0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801fa0c:	e00f      	b.n	801fa2e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801fa0e:	683b      	ldr	r3, [r7, #0]
 801fa10:	2b01      	cmp	r3, #1
 801fa12:	d106      	bne.n	801fa22 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801fa14:	4b15      	ldr	r3, [pc, #84]	@ (801fa6c <RCCEx_PLL2_Config+0x15c>)
 801fa16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fa18:	4a14      	ldr	r2, [pc, #80]	@ (801fa6c <RCCEx_PLL2_Config+0x15c>)
 801fa1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801fa1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801fa20:	e005      	b.n	801fa2e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801fa22:	4b12      	ldr	r3, [pc, #72]	@ (801fa6c <RCCEx_PLL2_Config+0x15c>)
 801fa24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fa26:	4a11      	ldr	r2, [pc, #68]	@ (801fa6c <RCCEx_PLL2_Config+0x15c>)
 801fa28:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801fa2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801fa2e:	4b0f      	ldr	r3, [pc, #60]	@ (801fa6c <RCCEx_PLL2_Config+0x15c>)
 801fa30:	681b      	ldr	r3, [r3, #0]
 801fa32:	4a0e      	ldr	r2, [pc, #56]	@ (801fa6c <RCCEx_PLL2_Config+0x15c>)
 801fa34:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801fa38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801fa3a:	f7fa fea3 	bl	801a784 <HAL_GetTick>
 801fa3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801fa40:	e008      	b.n	801fa54 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801fa42:	f7fa fe9f 	bl	801a784 <HAL_GetTick>
 801fa46:	4602      	mov	r2, r0
 801fa48:	68bb      	ldr	r3, [r7, #8]
 801fa4a:	1ad3      	subs	r3, r2, r3
 801fa4c:	2b02      	cmp	r3, #2
 801fa4e:	d901      	bls.n	801fa54 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801fa50:	2303      	movs	r3, #3
 801fa52:	e006      	b.n	801fa62 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801fa54:	4b05      	ldr	r3, [pc, #20]	@ (801fa6c <RCCEx_PLL2_Config+0x15c>)
 801fa56:	681b      	ldr	r3, [r3, #0]
 801fa58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801fa5c:	2b00      	cmp	r3, #0
 801fa5e:	d0f0      	beq.n	801fa42 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801fa60:	7bfb      	ldrb	r3, [r7, #15]
}
 801fa62:	4618      	mov	r0, r3
 801fa64:	3710      	adds	r7, #16
 801fa66:	46bd      	mov	sp, r7
 801fa68:	bd80      	pop	{r7, pc}
 801fa6a:	bf00      	nop
 801fa6c:	58024400 	.word	0x58024400
 801fa70:	ffff0007 	.word	0xffff0007

0801fa74 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801fa74:	b580      	push	{r7, lr}
 801fa76:	b084      	sub	sp, #16
 801fa78:	af00      	add	r7, sp, #0
 801fa7a:	6078      	str	r0, [r7, #4]
 801fa7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801fa7e:	2300      	movs	r3, #0
 801fa80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801fa82:	4b53      	ldr	r3, [pc, #332]	@ (801fbd0 <RCCEx_PLL3_Config+0x15c>)
 801fa84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fa86:	f003 0303 	and.w	r3, r3, #3
 801fa8a:	2b03      	cmp	r3, #3
 801fa8c:	d101      	bne.n	801fa92 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801fa8e:	2301      	movs	r3, #1
 801fa90:	e099      	b.n	801fbc6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801fa92:	4b4f      	ldr	r3, [pc, #316]	@ (801fbd0 <RCCEx_PLL3_Config+0x15c>)
 801fa94:	681b      	ldr	r3, [r3, #0]
 801fa96:	4a4e      	ldr	r2, [pc, #312]	@ (801fbd0 <RCCEx_PLL3_Config+0x15c>)
 801fa98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801fa9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801fa9e:	f7fa fe71 	bl	801a784 <HAL_GetTick>
 801faa2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801faa4:	e008      	b.n	801fab8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801faa6:	f7fa fe6d 	bl	801a784 <HAL_GetTick>
 801faaa:	4602      	mov	r2, r0
 801faac:	68bb      	ldr	r3, [r7, #8]
 801faae:	1ad3      	subs	r3, r2, r3
 801fab0:	2b02      	cmp	r3, #2
 801fab2:	d901      	bls.n	801fab8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801fab4:	2303      	movs	r3, #3
 801fab6:	e086      	b.n	801fbc6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801fab8:	4b45      	ldr	r3, [pc, #276]	@ (801fbd0 <RCCEx_PLL3_Config+0x15c>)
 801faba:	681b      	ldr	r3, [r3, #0]
 801fabc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801fac0:	2b00      	cmp	r3, #0
 801fac2:	d1f0      	bne.n	801faa6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801fac4:	4b42      	ldr	r3, [pc, #264]	@ (801fbd0 <RCCEx_PLL3_Config+0x15c>)
 801fac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fac8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 801facc:	687b      	ldr	r3, [r7, #4]
 801face:	681b      	ldr	r3, [r3, #0]
 801fad0:	051b      	lsls	r3, r3, #20
 801fad2:	493f      	ldr	r1, [pc, #252]	@ (801fbd0 <RCCEx_PLL3_Config+0x15c>)
 801fad4:	4313      	orrs	r3, r2
 801fad6:	628b      	str	r3, [r1, #40]	@ 0x28
 801fad8:	687b      	ldr	r3, [r7, #4]
 801fada:	685b      	ldr	r3, [r3, #4]
 801fadc:	3b01      	subs	r3, #1
 801fade:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801fae2:	687b      	ldr	r3, [r7, #4]
 801fae4:	689b      	ldr	r3, [r3, #8]
 801fae6:	3b01      	subs	r3, #1
 801fae8:	025b      	lsls	r3, r3, #9
 801faea:	b29b      	uxth	r3, r3
 801faec:	431a      	orrs	r2, r3
 801faee:	687b      	ldr	r3, [r7, #4]
 801faf0:	68db      	ldr	r3, [r3, #12]
 801faf2:	3b01      	subs	r3, #1
 801faf4:	041b      	lsls	r3, r3, #16
 801faf6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801fafa:	431a      	orrs	r2, r3
 801fafc:	687b      	ldr	r3, [r7, #4]
 801fafe:	691b      	ldr	r3, [r3, #16]
 801fb00:	3b01      	subs	r3, #1
 801fb02:	061b      	lsls	r3, r3, #24
 801fb04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801fb08:	4931      	ldr	r1, [pc, #196]	@ (801fbd0 <RCCEx_PLL3_Config+0x15c>)
 801fb0a:	4313      	orrs	r3, r2
 801fb0c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801fb0e:	4b30      	ldr	r3, [pc, #192]	@ (801fbd0 <RCCEx_PLL3_Config+0x15c>)
 801fb10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fb12:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801fb16:	687b      	ldr	r3, [r7, #4]
 801fb18:	695b      	ldr	r3, [r3, #20]
 801fb1a:	492d      	ldr	r1, [pc, #180]	@ (801fbd0 <RCCEx_PLL3_Config+0x15c>)
 801fb1c:	4313      	orrs	r3, r2
 801fb1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801fb20:	4b2b      	ldr	r3, [pc, #172]	@ (801fbd0 <RCCEx_PLL3_Config+0x15c>)
 801fb22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fb24:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801fb28:	687b      	ldr	r3, [r7, #4]
 801fb2a:	699b      	ldr	r3, [r3, #24]
 801fb2c:	4928      	ldr	r1, [pc, #160]	@ (801fbd0 <RCCEx_PLL3_Config+0x15c>)
 801fb2e:	4313      	orrs	r3, r2
 801fb30:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801fb32:	4b27      	ldr	r3, [pc, #156]	@ (801fbd0 <RCCEx_PLL3_Config+0x15c>)
 801fb34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fb36:	4a26      	ldr	r2, [pc, #152]	@ (801fbd0 <RCCEx_PLL3_Config+0x15c>)
 801fb38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801fb3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801fb3e:	4b24      	ldr	r3, [pc, #144]	@ (801fbd0 <RCCEx_PLL3_Config+0x15c>)
 801fb40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801fb42:	4b24      	ldr	r3, [pc, #144]	@ (801fbd4 <RCCEx_PLL3_Config+0x160>)
 801fb44:	4013      	ands	r3, r2
 801fb46:	687a      	ldr	r2, [r7, #4]
 801fb48:	69d2      	ldr	r2, [r2, #28]
 801fb4a:	00d2      	lsls	r2, r2, #3
 801fb4c:	4920      	ldr	r1, [pc, #128]	@ (801fbd0 <RCCEx_PLL3_Config+0x15c>)
 801fb4e:	4313      	orrs	r3, r2
 801fb50:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801fb52:	4b1f      	ldr	r3, [pc, #124]	@ (801fbd0 <RCCEx_PLL3_Config+0x15c>)
 801fb54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fb56:	4a1e      	ldr	r2, [pc, #120]	@ (801fbd0 <RCCEx_PLL3_Config+0x15c>)
 801fb58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801fb5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801fb5e:	683b      	ldr	r3, [r7, #0]
 801fb60:	2b00      	cmp	r3, #0
 801fb62:	d106      	bne.n	801fb72 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801fb64:	4b1a      	ldr	r3, [pc, #104]	@ (801fbd0 <RCCEx_PLL3_Config+0x15c>)
 801fb66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fb68:	4a19      	ldr	r2, [pc, #100]	@ (801fbd0 <RCCEx_PLL3_Config+0x15c>)
 801fb6a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801fb6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801fb70:	e00f      	b.n	801fb92 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801fb72:	683b      	ldr	r3, [r7, #0]
 801fb74:	2b01      	cmp	r3, #1
 801fb76:	d106      	bne.n	801fb86 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801fb78:	4b15      	ldr	r3, [pc, #84]	@ (801fbd0 <RCCEx_PLL3_Config+0x15c>)
 801fb7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fb7c:	4a14      	ldr	r2, [pc, #80]	@ (801fbd0 <RCCEx_PLL3_Config+0x15c>)
 801fb7e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801fb82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801fb84:	e005      	b.n	801fb92 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801fb86:	4b12      	ldr	r3, [pc, #72]	@ (801fbd0 <RCCEx_PLL3_Config+0x15c>)
 801fb88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fb8a:	4a11      	ldr	r2, [pc, #68]	@ (801fbd0 <RCCEx_PLL3_Config+0x15c>)
 801fb8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801fb90:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801fb92:	4b0f      	ldr	r3, [pc, #60]	@ (801fbd0 <RCCEx_PLL3_Config+0x15c>)
 801fb94:	681b      	ldr	r3, [r3, #0]
 801fb96:	4a0e      	ldr	r2, [pc, #56]	@ (801fbd0 <RCCEx_PLL3_Config+0x15c>)
 801fb98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801fb9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801fb9e:	f7fa fdf1 	bl	801a784 <HAL_GetTick>
 801fba2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801fba4:	e008      	b.n	801fbb8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801fba6:	f7fa fded 	bl	801a784 <HAL_GetTick>
 801fbaa:	4602      	mov	r2, r0
 801fbac:	68bb      	ldr	r3, [r7, #8]
 801fbae:	1ad3      	subs	r3, r2, r3
 801fbb0:	2b02      	cmp	r3, #2
 801fbb2:	d901      	bls.n	801fbb8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801fbb4:	2303      	movs	r3, #3
 801fbb6:	e006      	b.n	801fbc6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801fbb8:	4b05      	ldr	r3, [pc, #20]	@ (801fbd0 <RCCEx_PLL3_Config+0x15c>)
 801fbba:	681b      	ldr	r3, [r3, #0]
 801fbbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801fbc0:	2b00      	cmp	r3, #0
 801fbc2:	d0f0      	beq.n	801fba6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801fbc4:	7bfb      	ldrb	r3, [r7, #15]
}
 801fbc6:	4618      	mov	r0, r3
 801fbc8:	3710      	adds	r7, #16
 801fbca:	46bd      	mov	sp, r7
 801fbcc:	bd80      	pop	{r7, pc}
 801fbce:	bf00      	nop
 801fbd0:	58024400 	.word	0x58024400
 801fbd4:	ffff0007 	.word	0xffff0007

0801fbd8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801fbd8:	b580      	push	{r7, lr}
 801fbda:	b084      	sub	sp, #16
 801fbdc:	af00      	add	r7, sp, #0
 801fbde:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801fbe0:	687b      	ldr	r3, [r7, #4]
 801fbe2:	2b00      	cmp	r3, #0
 801fbe4:	d101      	bne.n	801fbea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801fbe6:	2301      	movs	r3, #1
 801fbe8:	e10f      	b.n	801fe0a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801fbea:	687b      	ldr	r3, [r7, #4]
 801fbec:	2200      	movs	r2, #0
 801fbee:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801fbf0:	687b      	ldr	r3, [r7, #4]
 801fbf2:	681b      	ldr	r3, [r3, #0]
 801fbf4:	4a87      	ldr	r2, [pc, #540]	@ (801fe14 <HAL_SPI_Init+0x23c>)
 801fbf6:	4293      	cmp	r3, r2
 801fbf8:	d00f      	beq.n	801fc1a <HAL_SPI_Init+0x42>
 801fbfa:	687b      	ldr	r3, [r7, #4]
 801fbfc:	681b      	ldr	r3, [r3, #0]
 801fbfe:	4a86      	ldr	r2, [pc, #536]	@ (801fe18 <HAL_SPI_Init+0x240>)
 801fc00:	4293      	cmp	r3, r2
 801fc02:	d00a      	beq.n	801fc1a <HAL_SPI_Init+0x42>
 801fc04:	687b      	ldr	r3, [r7, #4]
 801fc06:	681b      	ldr	r3, [r3, #0]
 801fc08:	4a84      	ldr	r2, [pc, #528]	@ (801fe1c <HAL_SPI_Init+0x244>)
 801fc0a:	4293      	cmp	r3, r2
 801fc0c:	d005      	beq.n	801fc1a <HAL_SPI_Init+0x42>
 801fc0e:	687b      	ldr	r3, [r7, #4]
 801fc10:	68db      	ldr	r3, [r3, #12]
 801fc12:	2b0f      	cmp	r3, #15
 801fc14:	d901      	bls.n	801fc1a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801fc16:	2301      	movs	r3, #1
 801fc18:	e0f7      	b.n	801fe0a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801fc1a:	6878      	ldr	r0, [r7, #4]
 801fc1c:	f000 fbba 	bl	8020394 <SPI_GetPacketSize>
 801fc20:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801fc22:	687b      	ldr	r3, [r7, #4]
 801fc24:	681b      	ldr	r3, [r3, #0]
 801fc26:	4a7b      	ldr	r2, [pc, #492]	@ (801fe14 <HAL_SPI_Init+0x23c>)
 801fc28:	4293      	cmp	r3, r2
 801fc2a:	d00c      	beq.n	801fc46 <HAL_SPI_Init+0x6e>
 801fc2c:	687b      	ldr	r3, [r7, #4]
 801fc2e:	681b      	ldr	r3, [r3, #0]
 801fc30:	4a79      	ldr	r2, [pc, #484]	@ (801fe18 <HAL_SPI_Init+0x240>)
 801fc32:	4293      	cmp	r3, r2
 801fc34:	d007      	beq.n	801fc46 <HAL_SPI_Init+0x6e>
 801fc36:	687b      	ldr	r3, [r7, #4]
 801fc38:	681b      	ldr	r3, [r3, #0]
 801fc3a:	4a78      	ldr	r2, [pc, #480]	@ (801fe1c <HAL_SPI_Init+0x244>)
 801fc3c:	4293      	cmp	r3, r2
 801fc3e:	d002      	beq.n	801fc46 <HAL_SPI_Init+0x6e>
 801fc40:	68fb      	ldr	r3, [r7, #12]
 801fc42:	2b08      	cmp	r3, #8
 801fc44:	d811      	bhi.n	801fc6a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801fc46:	687b      	ldr	r3, [r7, #4]
 801fc48:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801fc4a:	4a72      	ldr	r2, [pc, #456]	@ (801fe14 <HAL_SPI_Init+0x23c>)
 801fc4c:	4293      	cmp	r3, r2
 801fc4e:	d009      	beq.n	801fc64 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801fc50:	687b      	ldr	r3, [r7, #4]
 801fc52:	681b      	ldr	r3, [r3, #0]
 801fc54:	4a70      	ldr	r2, [pc, #448]	@ (801fe18 <HAL_SPI_Init+0x240>)
 801fc56:	4293      	cmp	r3, r2
 801fc58:	d004      	beq.n	801fc64 <HAL_SPI_Init+0x8c>
 801fc5a:	687b      	ldr	r3, [r7, #4]
 801fc5c:	681b      	ldr	r3, [r3, #0]
 801fc5e:	4a6f      	ldr	r2, [pc, #444]	@ (801fe1c <HAL_SPI_Init+0x244>)
 801fc60:	4293      	cmp	r3, r2
 801fc62:	d104      	bne.n	801fc6e <HAL_SPI_Init+0x96>
 801fc64:	68fb      	ldr	r3, [r7, #12]
 801fc66:	2b10      	cmp	r3, #16
 801fc68:	d901      	bls.n	801fc6e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801fc6a:	2301      	movs	r3, #1
 801fc6c:	e0cd      	b.n	801fe0a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801fc6e:	687b      	ldr	r3, [r7, #4]
 801fc70:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801fc74:	b2db      	uxtb	r3, r3
 801fc76:	2b00      	cmp	r3, #0
 801fc78:	d106      	bne.n	801fc88 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801fc7a:	687b      	ldr	r3, [r7, #4]
 801fc7c:	2200      	movs	r2, #0
 801fc7e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801fc82:	6878      	ldr	r0, [r7, #4]
 801fc84:	f7e2 fd1c 	bl	80026c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801fc88:	687b      	ldr	r3, [r7, #4]
 801fc8a:	2202      	movs	r2, #2
 801fc8c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801fc90:	687b      	ldr	r3, [r7, #4]
 801fc92:	681b      	ldr	r3, [r3, #0]
 801fc94:	681a      	ldr	r2, [r3, #0]
 801fc96:	687b      	ldr	r3, [r7, #4]
 801fc98:	681b      	ldr	r3, [r3, #0]
 801fc9a:	f022 0201 	bic.w	r2, r2, #1
 801fc9e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 801fca0:	687b      	ldr	r3, [r7, #4]
 801fca2:	681b      	ldr	r3, [r3, #0]
 801fca4:	689b      	ldr	r3, [r3, #8]
 801fca6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 801fcaa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801fcac:	687b      	ldr	r3, [r7, #4]
 801fcae:	699b      	ldr	r3, [r3, #24]
 801fcb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801fcb4:	d119      	bne.n	801fcea <HAL_SPI_Init+0x112>
 801fcb6:	687b      	ldr	r3, [r7, #4]
 801fcb8:	685b      	ldr	r3, [r3, #4]
 801fcba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801fcbe:	d103      	bne.n	801fcc8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801fcc0:	687b      	ldr	r3, [r7, #4]
 801fcc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801fcc4:	2b00      	cmp	r3, #0
 801fcc6:	d008      	beq.n	801fcda <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801fcc8:	687b      	ldr	r3, [r7, #4]
 801fcca:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801fccc:	2b00      	cmp	r3, #0
 801fcce:	d10c      	bne.n	801fcea <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 801fcd0:	687b      	ldr	r3, [r7, #4]
 801fcd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801fcd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801fcd8:	d107      	bne.n	801fcea <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801fcda:	687b      	ldr	r3, [r7, #4]
 801fcdc:	681b      	ldr	r3, [r3, #0]
 801fcde:	681a      	ldr	r2, [r3, #0]
 801fce0:	687b      	ldr	r3, [r7, #4]
 801fce2:	681b      	ldr	r3, [r3, #0]
 801fce4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801fce8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801fcea:	687b      	ldr	r3, [r7, #4]
 801fcec:	685b      	ldr	r3, [r3, #4]
 801fcee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801fcf2:	2b00      	cmp	r3, #0
 801fcf4:	d00f      	beq.n	801fd16 <HAL_SPI_Init+0x13e>
 801fcf6:	687b      	ldr	r3, [r7, #4]
 801fcf8:	68db      	ldr	r3, [r3, #12]
 801fcfa:	2b06      	cmp	r3, #6
 801fcfc:	d90b      	bls.n	801fd16 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801fcfe:	687b      	ldr	r3, [r7, #4]
 801fd00:	681b      	ldr	r3, [r3, #0]
 801fd02:	681b      	ldr	r3, [r3, #0]
 801fd04:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 801fd08:	687b      	ldr	r3, [r7, #4]
 801fd0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801fd0c:	687b      	ldr	r3, [r7, #4]
 801fd0e:	681b      	ldr	r3, [r3, #0]
 801fd10:	430a      	orrs	r2, r1
 801fd12:	601a      	str	r2, [r3, #0]
 801fd14:	e007      	b.n	801fd26 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801fd16:	687b      	ldr	r3, [r7, #4]
 801fd18:	681b      	ldr	r3, [r3, #0]
 801fd1a:	681a      	ldr	r2, [r3, #0]
 801fd1c:	687b      	ldr	r3, [r7, #4]
 801fd1e:	681b      	ldr	r3, [r3, #0]
 801fd20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801fd24:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801fd26:	687b      	ldr	r3, [r7, #4]
 801fd28:	69da      	ldr	r2, [r3, #28]
 801fd2a:	687b      	ldr	r3, [r7, #4]
 801fd2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fd2e:	431a      	orrs	r2, r3
 801fd30:	68bb      	ldr	r3, [r7, #8]
 801fd32:	431a      	orrs	r2, r3
 801fd34:	687b      	ldr	r3, [r7, #4]
 801fd36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801fd38:	ea42 0103 	orr.w	r1, r2, r3
 801fd3c:	687b      	ldr	r3, [r7, #4]
 801fd3e:	68da      	ldr	r2, [r3, #12]
 801fd40:	687b      	ldr	r3, [r7, #4]
 801fd42:	681b      	ldr	r3, [r3, #0]
 801fd44:	430a      	orrs	r2, r1
 801fd46:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801fd48:	687b      	ldr	r3, [r7, #4]
 801fd4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801fd4c:	687b      	ldr	r3, [r7, #4]
 801fd4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fd50:	431a      	orrs	r2, r3
 801fd52:	687b      	ldr	r3, [r7, #4]
 801fd54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801fd56:	431a      	orrs	r2, r3
 801fd58:	687b      	ldr	r3, [r7, #4]
 801fd5a:	699b      	ldr	r3, [r3, #24]
 801fd5c:	431a      	orrs	r2, r3
 801fd5e:	687b      	ldr	r3, [r7, #4]
 801fd60:	691b      	ldr	r3, [r3, #16]
 801fd62:	431a      	orrs	r2, r3
 801fd64:	687b      	ldr	r3, [r7, #4]
 801fd66:	695b      	ldr	r3, [r3, #20]
 801fd68:	431a      	orrs	r2, r3
 801fd6a:	687b      	ldr	r3, [r7, #4]
 801fd6c:	6a1b      	ldr	r3, [r3, #32]
 801fd6e:	431a      	orrs	r2, r3
 801fd70:	687b      	ldr	r3, [r7, #4]
 801fd72:	685b      	ldr	r3, [r3, #4]
 801fd74:	431a      	orrs	r2, r3
 801fd76:	687b      	ldr	r3, [r7, #4]
 801fd78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801fd7a:	431a      	orrs	r2, r3
 801fd7c:	687b      	ldr	r3, [r7, #4]
 801fd7e:	689b      	ldr	r3, [r3, #8]
 801fd80:	431a      	orrs	r2, r3
 801fd82:	687b      	ldr	r3, [r7, #4]
 801fd84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801fd86:	ea42 0103 	orr.w	r1, r2, r3
 801fd8a:	687b      	ldr	r3, [r7, #4]
 801fd8c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801fd8e:	687b      	ldr	r3, [r7, #4]
 801fd90:	681b      	ldr	r3, [r3, #0]
 801fd92:	430a      	orrs	r2, r1
 801fd94:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801fd96:	687b      	ldr	r3, [r7, #4]
 801fd98:	685b      	ldr	r3, [r3, #4]
 801fd9a:	2b00      	cmp	r3, #0
 801fd9c:	d113      	bne.n	801fdc6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801fd9e:	687b      	ldr	r3, [r7, #4]
 801fda0:	681b      	ldr	r3, [r3, #0]
 801fda2:	689b      	ldr	r3, [r3, #8]
 801fda4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 801fda8:	687b      	ldr	r3, [r7, #4]
 801fdaa:	681b      	ldr	r3, [r3, #0]
 801fdac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801fdb0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801fdb2:	687b      	ldr	r3, [r7, #4]
 801fdb4:	681b      	ldr	r3, [r3, #0]
 801fdb6:	689b      	ldr	r3, [r3, #8]
 801fdb8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 801fdbc:	687b      	ldr	r3, [r7, #4]
 801fdbe:	681b      	ldr	r3, [r3, #0]
 801fdc0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801fdc4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801fdc6:	687b      	ldr	r3, [r7, #4]
 801fdc8:	681b      	ldr	r3, [r3, #0]
 801fdca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801fdcc:	687b      	ldr	r3, [r7, #4]
 801fdce:	681b      	ldr	r3, [r3, #0]
 801fdd0:	f022 0201 	bic.w	r2, r2, #1
 801fdd4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801fdd6:	687b      	ldr	r3, [r7, #4]
 801fdd8:	685b      	ldr	r3, [r3, #4]
 801fdda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801fdde:	2b00      	cmp	r3, #0
 801fde0:	d00a      	beq.n	801fdf8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801fde2:	687b      	ldr	r3, [r7, #4]
 801fde4:	681b      	ldr	r3, [r3, #0]
 801fde6:	68db      	ldr	r3, [r3, #12]
 801fde8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801fdec:	687b      	ldr	r3, [r7, #4]
 801fdee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801fdf0:	687b      	ldr	r3, [r7, #4]
 801fdf2:	681b      	ldr	r3, [r3, #0]
 801fdf4:	430a      	orrs	r2, r1
 801fdf6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801fdf8:	687b      	ldr	r3, [r7, #4]
 801fdfa:	2200      	movs	r2, #0
 801fdfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 801fe00:	687b      	ldr	r3, [r7, #4]
 801fe02:	2201      	movs	r2, #1
 801fe04:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 801fe08:	2300      	movs	r3, #0
}
 801fe0a:	4618      	mov	r0, r3
 801fe0c:	3710      	adds	r7, #16
 801fe0e:	46bd      	mov	sp, r7
 801fe10:	bd80      	pop	{r7, pc}
 801fe12:	bf00      	nop
 801fe14:	40013000 	.word	0x40013000
 801fe18:	40003800 	.word	0x40003800
 801fe1c:	40003c00 	.word	0x40003c00

0801fe20 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801fe20:	b580      	push	{r7, lr}
 801fe22:	b08a      	sub	sp, #40	@ 0x28
 801fe24:	af00      	add	r7, sp, #0
 801fe26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 801fe28:	687b      	ldr	r3, [r7, #4]
 801fe2a:	681b      	ldr	r3, [r3, #0]
 801fe2c:	691b      	ldr	r3, [r3, #16]
 801fe2e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 801fe30:	687b      	ldr	r3, [r7, #4]
 801fe32:	681b      	ldr	r3, [r3, #0]
 801fe34:	695b      	ldr	r3, [r3, #20]
 801fe36:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 801fe38:	6a3a      	ldr	r2, [r7, #32]
 801fe3a:	69fb      	ldr	r3, [r7, #28]
 801fe3c:	4013      	ands	r3, r2
 801fe3e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 801fe40:	687b      	ldr	r3, [r7, #4]
 801fe42:	681b      	ldr	r3, [r3, #0]
 801fe44:	689b      	ldr	r3, [r3, #8]
 801fe46:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 801fe48:	2300      	movs	r3, #0
 801fe4a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 801fe4c:	687b      	ldr	r3, [r7, #4]
 801fe4e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801fe52:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801fe54:	687b      	ldr	r3, [r7, #4]
 801fe56:	681b      	ldr	r3, [r3, #0]
 801fe58:	3330      	adds	r3, #48	@ 0x30
 801fe5a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 801fe5c:	69fb      	ldr	r3, [r7, #28]
 801fe5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801fe62:	2b00      	cmp	r3, #0
 801fe64:	d010      	beq.n	801fe88 <HAL_SPI_IRQHandler+0x68>
 801fe66:	6a3b      	ldr	r3, [r7, #32]
 801fe68:	f003 0308 	and.w	r3, r3, #8
 801fe6c:	2b00      	cmp	r3, #0
 801fe6e:	d00b      	beq.n	801fe88 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801fe70:	687b      	ldr	r3, [r7, #4]
 801fe72:	681b      	ldr	r3, [r3, #0]
 801fe74:	699a      	ldr	r2, [r3, #24]
 801fe76:	687b      	ldr	r3, [r7, #4]
 801fe78:	681b      	ldr	r3, [r3, #0]
 801fe7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801fe7e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 801fe80:	6878      	ldr	r0, [r7, #4]
 801fe82:	f000 f9c3 	bl	802020c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 801fe86:	e192      	b.n	80201ae <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801fe88:	69bb      	ldr	r3, [r7, #24]
 801fe8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801fe8e:	2b00      	cmp	r3, #0
 801fe90:	d113      	bne.n	801feba <HAL_SPI_IRQHandler+0x9a>
 801fe92:	69bb      	ldr	r3, [r7, #24]
 801fe94:	f003 0320 	and.w	r3, r3, #32
 801fe98:	2b00      	cmp	r3, #0
 801fe9a:	d10e      	bne.n	801feba <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 801fe9c:	69bb      	ldr	r3, [r7, #24]
 801fe9e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801fea2:	2b00      	cmp	r3, #0
 801fea4:	d009      	beq.n	801feba <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 801fea6:	687b      	ldr	r3, [r7, #4]
 801fea8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801feaa:	6878      	ldr	r0, [r7, #4]
 801feac:	4798      	blx	r3
    hspi->RxISR(hspi);
 801feae:	687b      	ldr	r3, [r7, #4]
 801feb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801feb2:	6878      	ldr	r0, [r7, #4]
 801feb4:	4798      	blx	r3
    handled = 1UL;
 801feb6:	2301      	movs	r3, #1
 801feb8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801feba:	69bb      	ldr	r3, [r7, #24]
 801febc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801fec0:	2b00      	cmp	r3, #0
 801fec2:	d10f      	bne.n	801fee4 <HAL_SPI_IRQHandler+0xc4>
 801fec4:	69bb      	ldr	r3, [r7, #24]
 801fec6:	f003 0301 	and.w	r3, r3, #1
 801feca:	2b00      	cmp	r3, #0
 801fecc:	d00a      	beq.n	801fee4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801fece:	69bb      	ldr	r3, [r7, #24]
 801fed0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801fed4:	2b00      	cmp	r3, #0
 801fed6:	d105      	bne.n	801fee4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 801fed8:	687b      	ldr	r3, [r7, #4]
 801feda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fedc:	6878      	ldr	r0, [r7, #4]
 801fede:	4798      	blx	r3
    handled = 1UL;
 801fee0:	2301      	movs	r3, #1
 801fee2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801fee4:	69bb      	ldr	r3, [r7, #24]
 801fee6:	f003 0320 	and.w	r3, r3, #32
 801feea:	2b00      	cmp	r3, #0
 801feec:	d10f      	bne.n	801ff0e <HAL_SPI_IRQHandler+0xee>
 801feee:	69bb      	ldr	r3, [r7, #24]
 801fef0:	f003 0302 	and.w	r3, r3, #2
 801fef4:	2b00      	cmp	r3, #0
 801fef6:	d00a      	beq.n	801ff0e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801fef8:	69bb      	ldr	r3, [r7, #24]
 801fefa:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801fefe:	2b00      	cmp	r3, #0
 801ff00:	d105      	bne.n	801ff0e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 801ff02:	687b      	ldr	r3, [r7, #4]
 801ff04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ff06:	6878      	ldr	r0, [r7, #4]
 801ff08:	4798      	blx	r3
    handled = 1UL;
 801ff0a:	2301      	movs	r3, #1
 801ff0c:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 801ff0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff10:	2b00      	cmp	r3, #0
 801ff12:	f040 8147 	bne.w	80201a4 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 801ff16:	69bb      	ldr	r3, [r7, #24]
 801ff18:	f003 0308 	and.w	r3, r3, #8
 801ff1c:	2b00      	cmp	r3, #0
 801ff1e:	f000 808b 	beq.w	8020038 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801ff22:	687b      	ldr	r3, [r7, #4]
 801ff24:	681b      	ldr	r3, [r3, #0]
 801ff26:	699a      	ldr	r2, [r3, #24]
 801ff28:	687b      	ldr	r3, [r7, #4]
 801ff2a:	681b      	ldr	r3, [r3, #0]
 801ff2c:	f042 0208 	orr.w	r2, r2, #8
 801ff30:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801ff32:	687b      	ldr	r3, [r7, #4]
 801ff34:	681b      	ldr	r3, [r3, #0]
 801ff36:	699a      	ldr	r2, [r3, #24]
 801ff38:	687b      	ldr	r3, [r7, #4]
 801ff3a:	681b      	ldr	r3, [r3, #0]
 801ff3c:	f042 0210 	orr.w	r2, r2, #16
 801ff40:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801ff42:	687b      	ldr	r3, [r7, #4]
 801ff44:	681b      	ldr	r3, [r3, #0]
 801ff46:	699a      	ldr	r2, [r3, #24]
 801ff48:	687b      	ldr	r3, [r7, #4]
 801ff4a:	681b      	ldr	r3, [r3, #0]
 801ff4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801ff50:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 801ff52:	687b      	ldr	r3, [r7, #4]
 801ff54:	681b      	ldr	r3, [r3, #0]
 801ff56:	691a      	ldr	r2, [r3, #16]
 801ff58:	687b      	ldr	r3, [r7, #4]
 801ff5a:	681b      	ldr	r3, [r3, #0]
 801ff5c:	f022 0208 	bic.w	r2, r2, #8
 801ff60:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801ff62:	687b      	ldr	r3, [r7, #4]
 801ff64:	681b      	ldr	r3, [r3, #0]
 801ff66:	689b      	ldr	r3, [r3, #8]
 801ff68:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801ff6c:	2b00      	cmp	r3, #0
 801ff6e:	d13d      	bne.n	801ffec <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 801ff70:	e036      	b.n	801ffe0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801ff72:	687b      	ldr	r3, [r7, #4]
 801ff74:	68db      	ldr	r3, [r3, #12]
 801ff76:	2b0f      	cmp	r3, #15
 801ff78:	d90b      	bls.n	801ff92 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801ff7a:	687b      	ldr	r3, [r7, #4]
 801ff7c:	681a      	ldr	r2, [r3, #0]
 801ff7e:	687b      	ldr	r3, [r7, #4]
 801ff80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ff82:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801ff84:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801ff86:	687b      	ldr	r3, [r7, #4]
 801ff88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ff8a:	1d1a      	adds	r2, r3, #4
 801ff8c:	687b      	ldr	r3, [r7, #4]
 801ff8e:	665a      	str	r2, [r3, #100]	@ 0x64
 801ff90:	e01d      	b.n	801ffce <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801ff92:	687b      	ldr	r3, [r7, #4]
 801ff94:	68db      	ldr	r3, [r3, #12]
 801ff96:	2b07      	cmp	r3, #7
 801ff98:	d90b      	bls.n	801ffb2 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801ff9a:	687b      	ldr	r3, [r7, #4]
 801ff9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ff9e:	68fa      	ldr	r2, [r7, #12]
 801ffa0:	8812      	ldrh	r2, [r2, #0]
 801ffa2:	b292      	uxth	r2, r2
 801ffa4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801ffa6:	687b      	ldr	r3, [r7, #4]
 801ffa8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ffaa:	1c9a      	adds	r2, r3, #2
 801ffac:	687b      	ldr	r3, [r7, #4]
 801ffae:	665a      	str	r2, [r3, #100]	@ 0x64
 801ffb0:	e00d      	b.n	801ffce <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801ffb2:	687b      	ldr	r3, [r7, #4]
 801ffb4:	681b      	ldr	r3, [r3, #0]
 801ffb6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801ffba:	687b      	ldr	r3, [r7, #4]
 801ffbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ffbe:	7812      	ldrb	r2, [r2, #0]
 801ffc0:	b2d2      	uxtb	r2, r2
 801ffc2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801ffc4:	687b      	ldr	r3, [r7, #4]
 801ffc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ffc8:	1c5a      	adds	r2, r3, #1
 801ffca:	687b      	ldr	r3, [r7, #4]
 801ffcc:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 801ffce:	687b      	ldr	r3, [r7, #4]
 801ffd0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801ffd4:	b29b      	uxth	r3, r3
 801ffd6:	3b01      	subs	r3, #1
 801ffd8:	b29a      	uxth	r2, r3
 801ffda:	687b      	ldr	r3, [r7, #4]
 801ffdc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 801ffe0:	687b      	ldr	r3, [r7, #4]
 801ffe2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801ffe6:	b29b      	uxth	r3, r3
 801ffe8:	2b00      	cmp	r3, #0
 801ffea:	d1c2      	bne.n	801ff72 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 801ffec:	6878      	ldr	r0, [r7, #4]
 801ffee:	f000 f931 	bl	8020254 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 801fff2:	687b      	ldr	r3, [r7, #4]
 801fff4:	2201      	movs	r2, #1
 801fff6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801fffa:	687b      	ldr	r3, [r7, #4]
 801fffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8020000:	2b00      	cmp	r3, #0
 8020002:	d003      	beq.n	802000c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8020004:	6878      	ldr	r0, [r7, #4]
 8020006:	f000 f8f7 	bl	80201f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 802000a:	e0d0      	b.n	80201ae <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 802000c:	7cfb      	ldrb	r3, [r7, #19]
 802000e:	2b05      	cmp	r3, #5
 8020010:	d103      	bne.n	802001a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8020012:	6878      	ldr	r0, [r7, #4]
 8020014:	f000 f8e6 	bl	80201e4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8020018:	e0c6      	b.n	80201a8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 802001a:	7cfb      	ldrb	r3, [r7, #19]
 802001c:	2b04      	cmp	r3, #4
 802001e:	d103      	bne.n	8020028 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8020020:	6878      	ldr	r0, [r7, #4]
 8020022:	f000 f8d5 	bl	80201d0 <HAL_SPI_RxCpltCallback>
    return;
 8020026:	e0bf      	b.n	80201a8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8020028:	7cfb      	ldrb	r3, [r7, #19]
 802002a:	2b03      	cmp	r3, #3
 802002c:	f040 80bc 	bne.w	80201a8 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8020030:	6878      	ldr	r0, [r7, #4]
 8020032:	f000 f8c3 	bl	80201bc <HAL_SPI_TxCpltCallback>
    return;
 8020036:	e0b7      	b.n	80201a8 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8020038:	69bb      	ldr	r3, [r7, #24]
 802003a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 802003e:	2b00      	cmp	r3, #0
 8020040:	f000 80b5 	beq.w	80201ae <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8020044:	69bb      	ldr	r3, [r7, #24]
 8020046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802004a:	2b00      	cmp	r3, #0
 802004c:	d00f      	beq.n	802006e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 802004e:	687b      	ldr	r3, [r7, #4]
 8020050:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8020054:	f043 0204 	orr.w	r2, r3, #4
 8020058:	687b      	ldr	r3, [r7, #4]
 802005a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802005e:	687b      	ldr	r3, [r7, #4]
 8020060:	681b      	ldr	r3, [r3, #0]
 8020062:	699a      	ldr	r2, [r3, #24]
 8020064:	687b      	ldr	r3, [r7, #4]
 8020066:	681b      	ldr	r3, [r3, #0]
 8020068:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 802006c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 802006e:	69bb      	ldr	r3, [r7, #24]
 8020070:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8020074:	2b00      	cmp	r3, #0
 8020076:	d00f      	beq.n	8020098 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8020078:	687b      	ldr	r3, [r7, #4]
 802007a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 802007e:	f043 0201 	orr.w	r2, r3, #1
 8020082:	687b      	ldr	r3, [r7, #4]
 8020084:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8020088:	687b      	ldr	r3, [r7, #4]
 802008a:	681b      	ldr	r3, [r3, #0]
 802008c:	699a      	ldr	r2, [r3, #24]
 802008e:	687b      	ldr	r3, [r7, #4]
 8020090:	681b      	ldr	r3, [r3, #0]
 8020092:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8020096:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8020098:	69bb      	ldr	r3, [r7, #24]
 802009a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802009e:	2b00      	cmp	r3, #0
 80200a0:	d00f      	beq.n	80200c2 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80200a2:	687b      	ldr	r3, [r7, #4]
 80200a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80200a8:	f043 0208 	orr.w	r2, r3, #8
 80200ac:	687b      	ldr	r3, [r7, #4]
 80200ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80200b2:	687b      	ldr	r3, [r7, #4]
 80200b4:	681b      	ldr	r3, [r3, #0]
 80200b6:	699a      	ldr	r2, [r3, #24]
 80200b8:	687b      	ldr	r3, [r7, #4]
 80200ba:	681b      	ldr	r3, [r3, #0]
 80200bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80200c0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80200c2:	69bb      	ldr	r3, [r7, #24]
 80200c4:	f003 0320 	and.w	r3, r3, #32
 80200c8:	2b00      	cmp	r3, #0
 80200ca:	d00f      	beq.n	80200ec <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80200cc:	687b      	ldr	r3, [r7, #4]
 80200ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80200d2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80200d6:	687b      	ldr	r3, [r7, #4]
 80200d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80200dc:	687b      	ldr	r3, [r7, #4]
 80200de:	681b      	ldr	r3, [r3, #0]
 80200e0:	699a      	ldr	r2, [r3, #24]
 80200e2:	687b      	ldr	r3, [r7, #4]
 80200e4:	681b      	ldr	r3, [r3, #0]
 80200e6:	f042 0220 	orr.w	r2, r2, #32
 80200ea:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80200ec:	687b      	ldr	r3, [r7, #4]
 80200ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80200f2:	2b00      	cmp	r3, #0
 80200f4:	d05a      	beq.n	80201ac <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80200f6:	687b      	ldr	r3, [r7, #4]
 80200f8:	681b      	ldr	r3, [r3, #0]
 80200fa:	681a      	ldr	r2, [r3, #0]
 80200fc:	687b      	ldr	r3, [r7, #4]
 80200fe:	681b      	ldr	r3, [r3, #0]
 8020100:	f022 0201 	bic.w	r2, r2, #1
 8020104:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8020106:	687b      	ldr	r3, [r7, #4]
 8020108:	681b      	ldr	r3, [r3, #0]
 802010a:	6919      	ldr	r1, [r3, #16]
 802010c:	687b      	ldr	r3, [r7, #4]
 802010e:	681a      	ldr	r2, [r3, #0]
 8020110:	4b28      	ldr	r3, [pc, #160]	@ (80201b4 <HAL_SPI_IRQHandler+0x394>)
 8020112:	400b      	ands	r3, r1
 8020114:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8020116:	697b      	ldr	r3, [r7, #20]
 8020118:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 802011c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8020120:	d138      	bne.n	8020194 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8020122:	687b      	ldr	r3, [r7, #4]
 8020124:	681b      	ldr	r3, [r3, #0]
 8020126:	689a      	ldr	r2, [r3, #8]
 8020128:	687b      	ldr	r3, [r7, #4]
 802012a:	681b      	ldr	r3, [r3, #0]
 802012c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8020130:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8020132:	687b      	ldr	r3, [r7, #4]
 8020134:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8020136:	2b00      	cmp	r3, #0
 8020138:	d013      	beq.n	8020162 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 802013a:	687b      	ldr	r3, [r7, #4]
 802013c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 802013e:	4a1e      	ldr	r2, [pc, #120]	@ (80201b8 <HAL_SPI_IRQHandler+0x398>)
 8020140:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8020142:	687b      	ldr	r3, [r7, #4]
 8020144:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8020146:	4618      	mov	r0, r3
 8020148:	f7fb f850 	bl	801b1ec <HAL_DMA_Abort_IT>
 802014c:	4603      	mov	r3, r0
 802014e:	2b00      	cmp	r3, #0
 8020150:	d007      	beq.n	8020162 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8020152:	687b      	ldr	r3, [r7, #4]
 8020154:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8020158:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 802015c:	687b      	ldr	r3, [r7, #4]
 802015e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8020162:	687b      	ldr	r3, [r7, #4]
 8020164:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8020166:	2b00      	cmp	r3, #0
 8020168:	d020      	beq.n	80201ac <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 802016a:	687b      	ldr	r3, [r7, #4]
 802016c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 802016e:	4a12      	ldr	r2, [pc, #72]	@ (80201b8 <HAL_SPI_IRQHandler+0x398>)
 8020170:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8020172:	687b      	ldr	r3, [r7, #4]
 8020174:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8020176:	4618      	mov	r0, r3
 8020178:	f7fb f838 	bl	801b1ec <HAL_DMA_Abort_IT>
 802017c:	4603      	mov	r3, r0
 802017e:	2b00      	cmp	r3, #0
 8020180:	d014      	beq.n	80201ac <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8020182:	687b      	ldr	r3, [r7, #4]
 8020184:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8020188:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 802018c:	687b      	ldr	r3, [r7, #4]
 802018e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8020192:	e00b      	b.n	80201ac <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8020194:	687b      	ldr	r3, [r7, #4]
 8020196:	2201      	movs	r2, #1
 8020198:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 802019c:	6878      	ldr	r0, [r7, #4]
 802019e:	f000 f82b 	bl	80201f8 <HAL_SPI_ErrorCallback>
    return;
 80201a2:	e003      	b.n	80201ac <HAL_SPI_IRQHandler+0x38c>
    return;
 80201a4:	bf00      	nop
 80201a6:	e002      	b.n	80201ae <HAL_SPI_IRQHandler+0x38e>
    return;
 80201a8:	bf00      	nop
 80201aa:	e000      	b.n	80201ae <HAL_SPI_IRQHandler+0x38e>
    return;
 80201ac:	bf00      	nop
  }
}
 80201ae:	3728      	adds	r7, #40	@ 0x28
 80201b0:	46bd      	mov	sp, r7
 80201b2:	bd80      	pop	{r7, pc}
 80201b4:	fffffc94 	.word	0xfffffc94
 80201b8:	08020221 	.word	0x08020221

080201bc <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80201bc:	b480      	push	{r7}
 80201be:	b083      	sub	sp, #12
 80201c0:	af00      	add	r7, sp, #0
 80201c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80201c4:	bf00      	nop
 80201c6:	370c      	adds	r7, #12
 80201c8:	46bd      	mov	sp, r7
 80201ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201ce:	4770      	bx	lr

080201d0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80201d0:	b480      	push	{r7}
 80201d2:	b083      	sub	sp, #12
 80201d4:	af00      	add	r7, sp, #0
 80201d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80201d8:	bf00      	nop
 80201da:	370c      	adds	r7, #12
 80201dc:	46bd      	mov	sp, r7
 80201de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201e2:	4770      	bx	lr

080201e4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80201e4:	b480      	push	{r7}
 80201e6:	b083      	sub	sp, #12
 80201e8:	af00      	add	r7, sp, #0
 80201ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80201ec:	bf00      	nop
 80201ee:	370c      	adds	r7, #12
 80201f0:	46bd      	mov	sp, r7
 80201f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201f6:	4770      	bx	lr

080201f8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80201f8:	b480      	push	{r7}
 80201fa:	b083      	sub	sp, #12
 80201fc:	af00      	add	r7, sp, #0
 80201fe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8020200:	bf00      	nop
 8020202:	370c      	adds	r7, #12
 8020204:	46bd      	mov	sp, r7
 8020206:	f85d 7b04 	ldr.w	r7, [sp], #4
 802020a:	4770      	bx	lr

0802020c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 802020c:	b480      	push	{r7}
 802020e:	b083      	sub	sp, #12
 8020210:	af00      	add	r7, sp, #0
 8020212:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8020214:	bf00      	nop
 8020216:	370c      	adds	r7, #12
 8020218:	46bd      	mov	sp, r7
 802021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802021e:	4770      	bx	lr

08020220 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8020220:	b580      	push	{r7, lr}
 8020222:	b084      	sub	sp, #16
 8020224:	af00      	add	r7, sp, #0
 8020226:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8020228:	687b      	ldr	r3, [r7, #4]
 802022a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802022c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 802022e:	68fb      	ldr	r3, [r7, #12]
 8020230:	2200      	movs	r2, #0
 8020232:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8020236:	68fb      	ldr	r3, [r7, #12]
 8020238:	2200      	movs	r2, #0
 802023a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 802023e:	68fb      	ldr	r3, [r7, #12]
 8020240:	2201      	movs	r2, #1
 8020242:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8020246:	68f8      	ldr	r0, [r7, #12]
 8020248:	f7ff ffd6 	bl	80201f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 802024c:	bf00      	nop
 802024e:	3710      	adds	r7, #16
 8020250:	46bd      	mov	sp, r7
 8020252:	bd80      	pop	{r7, pc}

08020254 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8020254:	b480      	push	{r7}
 8020256:	b085      	sub	sp, #20
 8020258:	af00      	add	r7, sp, #0
 802025a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 802025c:	687b      	ldr	r3, [r7, #4]
 802025e:	681b      	ldr	r3, [r3, #0]
 8020260:	695b      	ldr	r3, [r3, #20]
 8020262:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8020264:	687b      	ldr	r3, [r7, #4]
 8020266:	681b      	ldr	r3, [r3, #0]
 8020268:	699a      	ldr	r2, [r3, #24]
 802026a:	687b      	ldr	r3, [r7, #4]
 802026c:	681b      	ldr	r3, [r3, #0]
 802026e:	f042 0208 	orr.w	r2, r2, #8
 8020272:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8020274:	687b      	ldr	r3, [r7, #4]
 8020276:	681b      	ldr	r3, [r3, #0]
 8020278:	699a      	ldr	r2, [r3, #24]
 802027a:	687b      	ldr	r3, [r7, #4]
 802027c:	681b      	ldr	r3, [r3, #0]
 802027e:	f042 0210 	orr.w	r2, r2, #16
 8020282:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8020284:	687b      	ldr	r3, [r7, #4]
 8020286:	681b      	ldr	r3, [r3, #0]
 8020288:	681a      	ldr	r2, [r3, #0]
 802028a:	687b      	ldr	r3, [r7, #4]
 802028c:	681b      	ldr	r3, [r3, #0]
 802028e:	f022 0201 	bic.w	r2, r2, #1
 8020292:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8020294:	687b      	ldr	r3, [r7, #4]
 8020296:	681b      	ldr	r3, [r3, #0]
 8020298:	6919      	ldr	r1, [r3, #16]
 802029a:	687b      	ldr	r3, [r7, #4]
 802029c:	681a      	ldr	r2, [r3, #0]
 802029e:	4b3c      	ldr	r3, [pc, #240]	@ (8020390 <SPI_CloseTransfer+0x13c>)
 80202a0:	400b      	ands	r3, r1
 80202a2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80202a4:	687b      	ldr	r3, [r7, #4]
 80202a6:	681b      	ldr	r3, [r3, #0]
 80202a8:	689a      	ldr	r2, [r3, #8]
 80202aa:	687b      	ldr	r3, [r7, #4]
 80202ac:	681b      	ldr	r3, [r3, #0]
 80202ae:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80202b2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80202b4:	687b      	ldr	r3, [r7, #4]
 80202b6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80202ba:	b2db      	uxtb	r3, r3
 80202bc:	2b04      	cmp	r3, #4
 80202be:	d014      	beq.n	80202ea <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80202c0:	68fb      	ldr	r3, [r7, #12]
 80202c2:	f003 0320 	and.w	r3, r3, #32
 80202c6:	2b00      	cmp	r3, #0
 80202c8:	d00f      	beq.n	80202ea <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80202ca:	687b      	ldr	r3, [r7, #4]
 80202cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80202d0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80202d4:	687b      	ldr	r3, [r7, #4]
 80202d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80202da:	687b      	ldr	r3, [r7, #4]
 80202dc:	681b      	ldr	r3, [r3, #0]
 80202de:	699a      	ldr	r2, [r3, #24]
 80202e0:	687b      	ldr	r3, [r7, #4]
 80202e2:	681b      	ldr	r3, [r3, #0]
 80202e4:	f042 0220 	orr.w	r2, r2, #32
 80202e8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80202ea:	687b      	ldr	r3, [r7, #4]
 80202ec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80202f0:	b2db      	uxtb	r3, r3
 80202f2:	2b03      	cmp	r3, #3
 80202f4:	d014      	beq.n	8020320 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80202f6:	68fb      	ldr	r3, [r7, #12]
 80202f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80202fc:	2b00      	cmp	r3, #0
 80202fe:	d00f      	beq.n	8020320 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8020300:	687b      	ldr	r3, [r7, #4]
 8020302:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8020306:	f043 0204 	orr.w	r2, r3, #4
 802030a:	687b      	ldr	r3, [r7, #4]
 802030c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8020310:	687b      	ldr	r3, [r7, #4]
 8020312:	681b      	ldr	r3, [r3, #0]
 8020314:	699a      	ldr	r2, [r3, #24]
 8020316:	687b      	ldr	r3, [r7, #4]
 8020318:	681b      	ldr	r3, [r3, #0]
 802031a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 802031e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8020320:	68fb      	ldr	r3, [r7, #12]
 8020322:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8020326:	2b00      	cmp	r3, #0
 8020328:	d00f      	beq.n	802034a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 802032a:	687b      	ldr	r3, [r7, #4]
 802032c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8020330:	f043 0201 	orr.w	r2, r3, #1
 8020334:	687b      	ldr	r3, [r7, #4]
 8020336:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 802033a:	687b      	ldr	r3, [r7, #4]
 802033c:	681b      	ldr	r3, [r3, #0]
 802033e:	699a      	ldr	r2, [r3, #24]
 8020340:	687b      	ldr	r3, [r7, #4]
 8020342:	681b      	ldr	r3, [r3, #0]
 8020344:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8020348:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 802034a:	68fb      	ldr	r3, [r7, #12]
 802034c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8020350:	2b00      	cmp	r3, #0
 8020352:	d00f      	beq.n	8020374 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8020354:	687b      	ldr	r3, [r7, #4]
 8020356:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 802035a:	f043 0208 	orr.w	r2, r3, #8
 802035e:	687b      	ldr	r3, [r7, #4]
 8020360:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8020364:	687b      	ldr	r3, [r7, #4]
 8020366:	681b      	ldr	r3, [r3, #0]
 8020368:	699a      	ldr	r2, [r3, #24]
 802036a:	687b      	ldr	r3, [r7, #4]
 802036c:	681b      	ldr	r3, [r3, #0]
 802036e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8020372:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8020374:	687b      	ldr	r3, [r7, #4]
 8020376:	2200      	movs	r2, #0
 8020378:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 802037c:	687b      	ldr	r3, [r7, #4]
 802037e:	2200      	movs	r2, #0
 8020380:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8020384:	bf00      	nop
 8020386:	3714      	adds	r7, #20
 8020388:	46bd      	mov	sp, r7
 802038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802038e:	4770      	bx	lr
 8020390:	fffffc90 	.word	0xfffffc90

08020394 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8020394:	b480      	push	{r7}
 8020396:	b085      	sub	sp, #20
 8020398:	af00      	add	r7, sp, #0
 802039a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 802039c:	687b      	ldr	r3, [r7, #4]
 802039e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80203a0:	095b      	lsrs	r3, r3, #5
 80203a2:	3301      	adds	r3, #1
 80203a4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80203a6:	687b      	ldr	r3, [r7, #4]
 80203a8:	68db      	ldr	r3, [r3, #12]
 80203aa:	3301      	adds	r3, #1
 80203ac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80203ae:	68bb      	ldr	r3, [r7, #8]
 80203b0:	3307      	adds	r3, #7
 80203b2:	08db      	lsrs	r3, r3, #3
 80203b4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80203b6:	68bb      	ldr	r3, [r7, #8]
 80203b8:	68fa      	ldr	r2, [r7, #12]
 80203ba:	fb02 f303 	mul.w	r3, r2, r3
}
 80203be:	4618      	mov	r0, r3
 80203c0:	3714      	adds	r7, #20
 80203c2:	46bd      	mov	sp, r7
 80203c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203c8:	4770      	bx	lr

080203ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80203ca:	b580      	push	{r7, lr}
 80203cc:	b082      	sub	sp, #8
 80203ce:	af00      	add	r7, sp, #0
 80203d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80203d2:	687b      	ldr	r3, [r7, #4]
 80203d4:	2b00      	cmp	r3, #0
 80203d6:	d101      	bne.n	80203dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80203d8:	2301      	movs	r3, #1
 80203da:	e049      	b.n	8020470 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80203dc:	687b      	ldr	r3, [r7, #4]
 80203de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80203e2:	b2db      	uxtb	r3, r3
 80203e4:	2b00      	cmp	r3, #0
 80203e6:	d106      	bne.n	80203f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80203e8:	687b      	ldr	r3, [r7, #4]
 80203ea:	2200      	movs	r2, #0
 80203ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80203f0:	6878      	ldr	r0, [r7, #4]
 80203f2:	f7e2 fb31 	bl	8002a58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80203f6:	687b      	ldr	r3, [r7, #4]
 80203f8:	2202      	movs	r2, #2
 80203fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80203fe:	687b      	ldr	r3, [r7, #4]
 8020400:	681a      	ldr	r2, [r3, #0]
 8020402:	687b      	ldr	r3, [r7, #4]
 8020404:	3304      	adds	r3, #4
 8020406:	4619      	mov	r1, r3
 8020408:	4610      	mov	r0, r2
 802040a:	f000 fb1b 	bl	8020a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 802040e:	687b      	ldr	r3, [r7, #4]
 8020410:	2201      	movs	r2, #1
 8020412:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8020416:	687b      	ldr	r3, [r7, #4]
 8020418:	2201      	movs	r2, #1
 802041a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 802041e:	687b      	ldr	r3, [r7, #4]
 8020420:	2201      	movs	r2, #1
 8020422:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8020426:	687b      	ldr	r3, [r7, #4]
 8020428:	2201      	movs	r2, #1
 802042a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 802042e:	687b      	ldr	r3, [r7, #4]
 8020430:	2201      	movs	r2, #1
 8020432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8020436:	687b      	ldr	r3, [r7, #4]
 8020438:	2201      	movs	r2, #1
 802043a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 802043e:	687b      	ldr	r3, [r7, #4]
 8020440:	2201      	movs	r2, #1
 8020442:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8020446:	687b      	ldr	r3, [r7, #4]
 8020448:	2201      	movs	r2, #1
 802044a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 802044e:	687b      	ldr	r3, [r7, #4]
 8020450:	2201      	movs	r2, #1
 8020452:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8020456:	687b      	ldr	r3, [r7, #4]
 8020458:	2201      	movs	r2, #1
 802045a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 802045e:	687b      	ldr	r3, [r7, #4]
 8020460:	2201      	movs	r2, #1
 8020462:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8020466:	687b      	ldr	r3, [r7, #4]
 8020468:	2201      	movs	r2, #1
 802046a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 802046e:	2300      	movs	r3, #0
}
 8020470:	4618      	mov	r0, r3
 8020472:	3708      	adds	r7, #8
 8020474:	46bd      	mov	sp, r7
 8020476:	bd80      	pop	{r7, pc}

08020478 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8020478:	b480      	push	{r7}
 802047a:	b085      	sub	sp, #20
 802047c:	af00      	add	r7, sp, #0
 802047e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8020480:	687b      	ldr	r3, [r7, #4]
 8020482:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8020486:	b2db      	uxtb	r3, r3
 8020488:	2b01      	cmp	r3, #1
 802048a:	d001      	beq.n	8020490 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 802048c:	2301      	movs	r3, #1
 802048e:	e054      	b.n	802053a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8020490:	687b      	ldr	r3, [r7, #4]
 8020492:	2202      	movs	r2, #2
 8020494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8020498:	687b      	ldr	r3, [r7, #4]
 802049a:	681b      	ldr	r3, [r3, #0]
 802049c:	68da      	ldr	r2, [r3, #12]
 802049e:	687b      	ldr	r3, [r7, #4]
 80204a0:	681b      	ldr	r3, [r3, #0]
 80204a2:	f042 0201 	orr.w	r2, r2, #1
 80204a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80204a8:	687b      	ldr	r3, [r7, #4]
 80204aa:	681b      	ldr	r3, [r3, #0]
 80204ac:	4a26      	ldr	r2, [pc, #152]	@ (8020548 <HAL_TIM_Base_Start_IT+0xd0>)
 80204ae:	4293      	cmp	r3, r2
 80204b0:	d022      	beq.n	80204f8 <HAL_TIM_Base_Start_IT+0x80>
 80204b2:	687b      	ldr	r3, [r7, #4]
 80204b4:	681b      	ldr	r3, [r3, #0]
 80204b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80204ba:	d01d      	beq.n	80204f8 <HAL_TIM_Base_Start_IT+0x80>
 80204bc:	687b      	ldr	r3, [r7, #4]
 80204be:	681b      	ldr	r3, [r3, #0]
 80204c0:	4a22      	ldr	r2, [pc, #136]	@ (802054c <HAL_TIM_Base_Start_IT+0xd4>)
 80204c2:	4293      	cmp	r3, r2
 80204c4:	d018      	beq.n	80204f8 <HAL_TIM_Base_Start_IT+0x80>
 80204c6:	687b      	ldr	r3, [r7, #4]
 80204c8:	681b      	ldr	r3, [r3, #0]
 80204ca:	4a21      	ldr	r2, [pc, #132]	@ (8020550 <HAL_TIM_Base_Start_IT+0xd8>)
 80204cc:	4293      	cmp	r3, r2
 80204ce:	d013      	beq.n	80204f8 <HAL_TIM_Base_Start_IT+0x80>
 80204d0:	687b      	ldr	r3, [r7, #4]
 80204d2:	681b      	ldr	r3, [r3, #0]
 80204d4:	4a1f      	ldr	r2, [pc, #124]	@ (8020554 <HAL_TIM_Base_Start_IT+0xdc>)
 80204d6:	4293      	cmp	r3, r2
 80204d8:	d00e      	beq.n	80204f8 <HAL_TIM_Base_Start_IT+0x80>
 80204da:	687b      	ldr	r3, [r7, #4]
 80204dc:	681b      	ldr	r3, [r3, #0]
 80204de:	4a1e      	ldr	r2, [pc, #120]	@ (8020558 <HAL_TIM_Base_Start_IT+0xe0>)
 80204e0:	4293      	cmp	r3, r2
 80204e2:	d009      	beq.n	80204f8 <HAL_TIM_Base_Start_IT+0x80>
 80204e4:	687b      	ldr	r3, [r7, #4]
 80204e6:	681b      	ldr	r3, [r3, #0]
 80204e8:	4a1c      	ldr	r2, [pc, #112]	@ (802055c <HAL_TIM_Base_Start_IT+0xe4>)
 80204ea:	4293      	cmp	r3, r2
 80204ec:	d004      	beq.n	80204f8 <HAL_TIM_Base_Start_IT+0x80>
 80204ee:	687b      	ldr	r3, [r7, #4]
 80204f0:	681b      	ldr	r3, [r3, #0]
 80204f2:	4a1b      	ldr	r2, [pc, #108]	@ (8020560 <HAL_TIM_Base_Start_IT+0xe8>)
 80204f4:	4293      	cmp	r3, r2
 80204f6:	d115      	bne.n	8020524 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80204f8:	687b      	ldr	r3, [r7, #4]
 80204fa:	681b      	ldr	r3, [r3, #0]
 80204fc:	689a      	ldr	r2, [r3, #8]
 80204fe:	4b19      	ldr	r3, [pc, #100]	@ (8020564 <HAL_TIM_Base_Start_IT+0xec>)
 8020500:	4013      	ands	r3, r2
 8020502:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8020504:	68fb      	ldr	r3, [r7, #12]
 8020506:	2b06      	cmp	r3, #6
 8020508:	d015      	beq.n	8020536 <HAL_TIM_Base_Start_IT+0xbe>
 802050a:	68fb      	ldr	r3, [r7, #12]
 802050c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8020510:	d011      	beq.n	8020536 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8020512:	687b      	ldr	r3, [r7, #4]
 8020514:	681b      	ldr	r3, [r3, #0]
 8020516:	681a      	ldr	r2, [r3, #0]
 8020518:	687b      	ldr	r3, [r7, #4]
 802051a:	681b      	ldr	r3, [r3, #0]
 802051c:	f042 0201 	orr.w	r2, r2, #1
 8020520:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8020522:	e008      	b.n	8020536 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8020524:	687b      	ldr	r3, [r7, #4]
 8020526:	681b      	ldr	r3, [r3, #0]
 8020528:	681a      	ldr	r2, [r3, #0]
 802052a:	687b      	ldr	r3, [r7, #4]
 802052c:	681b      	ldr	r3, [r3, #0]
 802052e:	f042 0201 	orr.w	r2, r2, #1
 8020532:	601a      	str	r2, [r3, #0]
 8020534:	e000      	b.n	8020538 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8020536:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8020538:	2300      	movs	r3, #0
}
 802053a:	4618      	mov	r0, r3
 802053c:	3714      	adds	r7, #20
 802053e:	46bd      	mov	sp, r7
 8020540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020544:	4770      	bx	lr
 8020546:	bf00      	nop
 8020548:	40010000 	.word	0x40010000
 802054c:	40000400 	.word	0x40000400
 8020550:	40000800 	.word	0x40000800
 8020554:	40000c00 	.word	0x40000c00
 8020558:	40010400 	.word	0x40010400
 802055c:	40001800 	.word	0x40001800
 8020560:	40014000 	.word	0x40014000
 8020564:	00010007 	.word	0x00010007

08020568 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8020568:	b580      	push	{r7, lr}
 802056a:	b082      	sub	sp, #8
 802056c:	af00      	add	r7, sp, #0
 802056e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8020570:	687b      	ldr	r3, [r7, #4]
 8020572:	2b00      	cmp	r3, #0
 8020574:	d101      	bne.n	802057a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8020576:	2301      	movs	r3, #1
 8020578:	e049      	b.n	802060e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 802057a:	687b      	ldr	r3, [r7, #4]
 802057c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8020580:	b2db      	uxtb	r3, r3
 8020582:	2b00      	cmp	r3, #0
 8020584:	d106      	bne.n	8020594 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8020586:	687b      	ldr	r3, [r7, #4]
 8020588:	2200      	movs	r2, #0
 802058a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 802058e:	6878      	ldr	r0, [r7, #4]
 8020590:	f000 f841 	bl	8020616 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8020594:	687b      	ldr	r3, [r7, #4]
 8020596:	2202      	movs	r2, #2
 8020598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802059c:	687b      	ldr	r3, [r7, #4]
 802059e:	681a      	ldr	r2, [r3, #0]
 80205a0:	687b      	ldr	r3, [r7, #4]
 80205a2:	3304      	adds	r3, #4
 80205a4:	4619      	mov	r1, r3
 80205a6:	4610      	mov	r0, r2
 80205a8:	f000 fa4c 	bl	8020a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80205ac:	687b      	ldr	r3, [r7, #4]
 80205ae:	2201      	movs	r2, #1
 80205b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80205b4:	687b      	ldr	r3, [r7, #4]
 80205b6:	2201      	movs	r2, #1
 80205b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80205bc:	687b      	ldr	r3, [r7, #4]
 80205be:	2201      	movs	r2, #1
 80205c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80205c4:	687b      	ldr	r3, [r7, #4]
 80205c6:	2201      	movs	r2, #1
 80205c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80205cc:	687b      	ldr	r3, [r7, #4]
 80205ce:	2201      	movs	r2, #1
 80205d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80205d4:	687b      	ldr	r3, [r7, #4]
 80205d6:	2201      	movs	r2, #1
 80205d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80205dc:	687b      	ldr	r3, [r7, #4]
 80205de:	2201      	movs	r2, #1
 80205e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80205e4:	687b      	ldr	r3, [r7, #4]
 80205e6:	2201      	movs	r2, #1
 80205e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80205ec:	687b      	ldr	r3, [r7, #4]
 80205ee:	2201      	movs	r2, #1
 80205f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80205f4:	687b      	ldr	r3, [r7, #4]
 80205f6:	2201      	movs	r2, #1
 80205f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80205fc:	687b      	ldr	r3, [r7, #4]
 80205fe:	2201      	movs	r2, #1
 8020600:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8020604:	687b      	ldr	r3, [r7, #4]
 8020606:	2201      	movs	r2, #1
 8020608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 802060c:	2300      	movs	r3, #0
}
 802060e:	4618      	mov	r0, r3
 8020610:	3708      	adds	r7, #8
 8020612:	46bd      	mov	sp, r7
 8020614:	bd80      	pop	{r7, pc}

08020616 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8020616:	b480      	push	{r7}
 8020618:	b083      	sub	sp, #12
 802061a:	af00      	add	r7, sp, #0
 802061c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 802061e:	bf00      	nop
 8020620:	370c      	adds	r7, #12
 8020622:	46bd      	mov	sp, r7
 8020624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020628:	4770      	bx	lr
	...

0802062c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 802062c:	b580      	push	{r7, lr}
 802062e:	b086      	sub	sp, #24
 8020630:	af00      	add	r7, sp, #0
 8020632:	60f8      	str	r0, [r7, #12]
 8020634:	60b9      	str	r1, [r7, #8]
 8020636:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8020638:	2300      	movs	r3, #0
 802063a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 802063c:	68fb      	ldr	r3, [r7, #12]
 802063e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8020642:	2b01      	cmp	r3, #1
 8020644:	d101      	bne.n	802064a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8020646:	2302      	movs	r3, #2
 8020648:	e0ff      	b.n	802084a <HAL_TIM_PWM_ConfigChannel+0x21e>
 802064a:	68fb      	ldr	r3, [r7, #12]
 802064c:	2201      	movs	r2, #1
 802064e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8020652:	687b      	ldr	r3, [r7, #4]
 8020654:	2b14      	cmp	r3, #20
 8020656:	f200 80f0 	bhi.w	802083a <HAL_TIM_PWM_ConfigChannel+0x20e>
 802065a:	a201      	add	r2, pc, #4	@ (adr r2, 8020660 <HAL_TIM_PWM_ConfigChannel+0x34>)
 802065c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020660:	080206b5 	.word	0x080206b5
 8020664:	0802083b 	.word	0x0802083b
 8020668:	0802083b 	.word	0x0802083b
 802066c:	0802083b 	.word	0x0802083b
 8020670:	080206f5 	.word	0x080206f5
 8020674:	0802083b 	.word	0x0802083b
 8020678:	0802083b 	.word	0x0802083b
 802067c:	0802083b 	.word	0x0802083b
 8020680:	08020737 	.word	0x08020737
 8020684:	0802083b 	.word	0x0802083b
 8020688:	0802083b 	.word	0x0802083b
 802068c:	0802083b 	.word	0x0802083b
 8020690:	08020777 	.word	0x08020777
 8020694:	0802083b 	.word	0x0802083b
 8020698:	0802083b 	.word	0x0802083b
 802069c:	0802083b 	.word	0x0802083b
 80206a0:	080207b9 	.word	0x080207b9
 80206a4:	0802083b 	.word	0x0802083b
 80206a8:	0802083b 	.word	0x0802083b
 80206ac:	0802083b 	.word	0x0802083b
 80206b0:	080207f9 	.word	0x080207f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80206b4:	68fb      	ldr	r3, [r7, #12]
 80206b6:	681b      	ldr	r3, [r3, #0]
 80206b8:	68b9      	ldr	r1, [r7, #8]
 80206ba:	4618      	mov	r0, r3
 80206bc:	f000 fa68 	bl	8020b90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80206c0:	68fb      	ldr	r3, [r7, #12]
 80206c2:	681b      	ldr	r3, [r3, #0]
 80206c4:	699a      	ldr	r2, [r3, #24]
 80206c6:	68fb      	ldr	r3, [r7, #12]
 80206c8:	681b      	ldr	r3, [r3, #0]
 80206ca:	f042 0208 	orr.w	r2, r2, #8
 80206ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80206d0:	68fb      	ldr	r3, [r7, #12]
 80206d2:	681b      	ldr	r3, [r3, #0]
 80206d4:	699a      	ldr	r2, [r3, #24]
 80206d6:	68fb      	ldr	r3, [r7, #12]
 80206d8:	681b      	ldr	r3, [r3, #0]
 80206da:	f022 0204 	bic.w	r2, r2, #4
 80206de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80206e0:	68fb      	ldr	r3, [r7, #12]
 80206e2:	681b      	ldr	r3, [r3, #0]
 80206e4:	6999      	ldr	r1, [r3, #24]
 80206e6:	68bb      	ldr	r3, [r7, #8]
 80206e8:	691a      	ldr	r2, [r3, #16]
 80206ea:	68fb      	ldr	r3, [r7, #12]
 80206ec:	681b      	ldr	r3, [r3, #0]
 80206ee:	430a      	orrs	r2, r1
 80206f0:	619a      	str	r2, [r3, #24]
      break;
 80206f2:	e0a5      	b.n	8020840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80206f4:	68fb      	ldr	r3, [r7, #12]
 80206f6:	681b      	ldr	r3, [r3, #0]
 80206f8:	68b9      	ldr	r1, [r7, #8]
 80206fa:	4618      	mov	r0, r3
 80206fc:	f000 fad8 	bl	8020cb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8020700:	68fb      	ldr	r3, [r7, #12]
 8020702:	681b      	ldr	r3, [r3, #0]
 8020704:	699a      	ldr	r2, [r3, #24]
 8020706:	68fb      	ldr	r3, [r7, #12]
 8020708:	681b      	ldr	r3, [r3, #0]
 802070a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 802070e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8020710:	68fb      	ldr	r3, [r7, #12]
 8020712:	681b      	ldr	r3, [r3, #0]
 8020714:	699a      	ldr	r2, [r3, #24]
 8020716:	68fb      	ldr	r3, [r7, #12]
 8020718:	681b      	ldr	r3, [r3, #0]
 802071a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 802071e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8020720:	68fb      	ldr	r3, [r7, #12]
 8020722:	681b      	ldr	r3, [r3, #0]
 8020724:	6999      	ldr	r1, [r3, #24]
 8020726:	68bb      	ldr	r3, [r7, #8]
 8020728:	691b      	ldr	r3, [r3, #16]
 802072a:	021a      	lsls	r2, r3, #8
 802072c:	68fb      	ldr	r3, [r7, #12]
 802072e:	681b      	ldr	r3, [r3, #0]
 8020730:	430a      	orrs	r2, r1
 8020732:	619a      	str	r2, [r3, #24]
      break;
 8020734:	e084      	b.n	8020840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8020736:	68fb      	ldr	r3, [r7, #12]
 8020738:	681b      	ldr	r3, [r3, #0]
 802073a:	68b9      	ldr	r1, [r7, #8]
 802073c:	4618      	mov	r0, r3
 802073e:	f000 fb41 	bl	8020dc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8020742:	68fb      	ldr	r3, [r7, #12]
 8020744:	681b      	ldr	r3, [r3, #0]
 8020746:	69da      	ldr	r2, [r3, #28]
 8020748:	68fb      	ldr	r3, [r7, #12]
 802074a:	681b      	ldr	r3, [r3, #0]
 802074c:	f042 0208 	orr.w	r2, r2, #8
 8020750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8020752:	68fb      	ldr	r3, [r7, #12]
 8020754:	681b      	ldr	r3, [r3, #0]
 8020756:	69da      	ldr	r2, [r3, #28]
 8020758:	68fb      	ldr	r3, [r7, #12]
 802075a:	681b      	ldr	r3, [r3, #0]
 802075c:	f022 0204 	bic.w	r2, r2, #4
 8020760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8020762:	68fb      	ldr	r3, [r7, #12]
 8020764:	681b      	ldr	r3, [r3, #0]
 8020766:	69d9      	ldr	r1, [r3, #28]
 8020768:	68bb      	ldr	r3, [r7, #8]
 802076a:	691a      	ldr	r2, [r3, #16]
 802076c:	68fb      	ldr	r3, [r7, #12]
 802076e:	681b      	ldr	r3, [r3, #0]
 8020770:	430a      	orrs	r2, r1
 8020772:	61da      	str	r2, [r3, #28]
      break;
 8020774:	e064      	b.n	8020840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8020776:	68fb      	ldr	r3, [r7, #12]
 8020778:	681b      	ldr	r3, [r3, #0]
 802077a:	68b9      	ldr	r1, [r7, #8]
 802077c:	4618      	mov	r0, r3
 802077e:	f000 fba9 	bl	8020ed4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8020782:	68fb      	ldr	r3, [r7, #12]
 8020784:	681b      	ldr	r3, [r3, #0]
 8020786:	69da      	ldr	r2, [r3, #28]
 8020788:	68fb      	ldr	r3, [r7, #12]
 802078a:	681b      	ldr	r3, [r3, #0]
 802078c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8020790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8020792:	68fb      	ldr	r3, [r7, #12]
 8020794:	681b      	ldr	r3, [r3, #0]
 8020796:	69da      	ldr	r2, [r3, #28]
 8020798:	68fb      	ldr	r3, [r7, #12]
 802079a:	681b      	ldr	r3, [r3, #0]
 802079c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80207a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80207a2:	68fb      	ldr	r3, [r7, #12]
 80207a4:	681b      	ldr	r3, [r3, #0]
 80207a6:	69d9      	ldr	r1, [r3, #28]
 80207a8:	68bb      	ldr	r3, [r7, #8]
 80207aa:	691b      	ldr	r3, [r3, #16]
 80207ac:	021a      	lsls	r2, r3, #8
 80207ae:	68fb      	ldr	r3, [r7, #12]
 80207b0:	681b      	ldr	r3, [r3, #0]
 80207b2:	430a      	orrs	r2, r1
 80207b4:	61da      	str	r2, [r3, #28]
      break;
 80207b6:	e043      	b.n	8020840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80207b8:	68fb      	ldr	r3, [r7, #12]
 80207ba:	681b      	ldr	r3, [r3, #0]
 80207bc:	68b9      	ldr	r1, [r7, #8]
 80207be:	4618      	mov	r0, r3
 80207c0:	f000 fbf2 	bl	8020fa8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80207c4:	68fb      	ldr	r3, [r7, #12]
 80207c6:	681b      	ldr	r3, [r3, #0]
 80207c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80207ca:	68fb      	ldr	r3, [r7, #12]
 80207cc:	681b      	ldr	r3, [r3, #0]
 80207ce:	f042 0208 	orr.w	r2, r2, #8
 80207d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80207d4:	68fb      	ldr	r3, [r7, #12]
 80207d6:	681b      	ldr	r3, [r3, #0]
 80207d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80207da:	68fb      	ldr	r3, [r7, #12]
 80207dc:	681b      	ldr	r3, [r3, #0]
 80207de:	f022 0204 	bic.w	r2, r2, #4
 80207e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80207e4:	68fb      	ldr	r3, [r7, #12]
 80207e6:	681b      	ldr	r3, [r3, #0]
 80207e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80207ea:	68bb      	ldr	r3, [r7, #8]
 80207ec:	691a      	ldr	r2, [r3, #16]
 80207ee:	68fb      	ldr	r3, [r7, #12]
 80207f0:	681b      	ldr	r3, [r3, #0]
 80207f2:	430a      	orrs	r2, r1
 80207f4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80207f6:	e023      	b.n	8020840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80207f8:	68fb      	ldr	r3, [r7, #12]
 80207fa:	681b      	ldr	r3, [r3, #0]
 80207fc:	68b9      	ldr	r1, [r7, #8]
 80207fe:	4618      	mov	r0, r3
 8020800:	f000 fc36 	bl	8021070 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8020804:	68fb      	ldr	r3, [r7, #12]
 8020806:	681b      	ldr	r3, [r3, #0]
 8020808:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 802080a:	68fb      	ldr	r3, [r7, #12]
 802080c:	681b      	ldr	r3, [r3, #0]
 802080e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8020812:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8020814:	68fb      	ldr	r3, [r7, #12]
 8020816:	681b      	ldr	r3, [r3, #0]
 8020818:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 802081a:	68fb      	ldr	r3, [r7, #12]
 802081c:	681b      	ldr	r3, [r3, #0]
 802081e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8020822:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8020824:	68fb      	ldr	r3, [r7, #12]
 8020826:	681b      	ldr	r3, [r3, #0]
 8020828:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 802082a:	68bb      	ldr	r3, [r7, #8]
 802082c:	691b      	ldr	r3, [r3, #16]
 802082e:	021a      	lsls	r2, r3, #8
 8020830:	68fb      	ldr	r3, [r7, #12]
 8020832:	681b      	ldr	r3, [r3, #0]
 8020834:	430a      	orrs	r2, r1
 8020836:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8020838:	e002      	b.n	8020840 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 802083a:	2301      	movs	r3, #1
 802083c:	75fb      	strb	r3, [r7, #23]
      break;
 802083e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8020840:	68fb      	ldr	r3, [r7, #12]
 8020842:	2200      	movs	r2, #0
 8020844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8020848:	7dfb      	ldrb	r3, [r7, #23]
}
 802084a:	4618      	mov	r0, r3
 802084c:	3718      	adds	r7, #24
 802084e:	46bd      	mov	sp, r7
 8020850:	bd80      	pop	{r7, pc}
 8020852:	bf00      	nop

08020854 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8020854:	b580      	push	{r7, lr}
 8020856:	b084      	sub	sp, #16
 8020858:	af00      	add	r7, sp, #0
 802085a:	6078      	str	r0, [r7, #4]
 802085c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802085e:	2300      	movs	r3, #0
 8020860:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8020862:	687b      	ldr	r3, [r7, #4]
 8020864:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8020868:	2b01      	cmp	r3, #1
 802086a:	d101      	bne.n	8020870 <HAL_TIM_ConfigClockSource+0x1c>
 802086c:	2302      	movs	r3, #2
 802086e:	e0dc      	b.n	8020a2a <HAL_TIM_ConfigClockSource+0x1d6>
 8020870:	687b      	ldr	r3, [r7, #4]
 8020872:	2201      	movs	r2, #1
 8020874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8020878:	687b      	ldr	r3, [r7, #4]
 802087a:	2202      	movs	r2, #2
 802087c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8020880:	687b      	ldr	r3, [r7, #4]
 8020882:	681b      	ldr	r3, [r3, #0]
 8020884:	689b      	ldr	r3, [r3, #8]
 8020886:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8020888:	68ba      	ldr	r2, [r7, #8]
 802088a:	4b6a      	ldr	r3, [pc, #424]	@ (8020a34 <HAL_TIM_ConfigClockSource+0x1e0>)
 802088c:	4013      	ands	r3, r2
 802088e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8020890:	68bb      	ldr	r3, [r7, #8]
 8020892:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8020896:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8020898:	687b      	ldr	r3, [r7, #4]
 802089a:	681b      	ldr	r3, [r3, #0]
 802089c:	68ba      	ldr	r2, [r7, #8]
 802089e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80208a0:	683b      	ldr	r3, [r7, #0]
 80208a2:	681b      	ldr	r3, [r3, #0]
 80208a4:	4a64      	ldr	r2, [pc, #400]	@ (8020a38 <HAL_TIM_ConfigClockSource+0x1e4>)
 80208a6:	4293      	cmp	r3, r2
 80208a8:	f000 80a9 	beq.w	80209fe <HAL_TIM_ConfigClockSource+0x1aa>
 80208ac:	4a62      	ldr	r2, [pc, #392]	@ (8020a38 <HAL_TIM_ConfigClockSource+0x1e4>)
 80208ae:	4293      	cmp	r3, r2
 80208b0:	f200 80ae 	bhi.w	8020a10 <HAL_TIM_ConfigClockSource+0x1bc>
 80208b4:	4a61      	ldr	r2, [pc, #388]	@ (8020a3c <HAL_TIM_ConfigClockSource+0x1e8>)
 80208b6:	4293      	cmp	r3, r2
 80208b8:	f000 80a1 	beq.w	80209fe <HAL_TIM_ConfigClockSource+0x1aa>
 80208bc:	4a5f      	ldr	r2, [pc, #380]	@ (8020a3c <HAL_TIM_ConfigClockSource+0x1e8>)
 80208be:	4293      	cmp	r3, r2
 80208c0:	f200 80a6 	bhi.w	8020a10 <HAL_TIM_ConfigClockSource+0x1bc>
 80208c4:	4a5e      	ldr	r2, [pc, #376]	@ (8020a40 <HAL_TIM_ConfigClockSource+0x1ec>)
 80208c6:	4293      	cmp	r3, r2
 80208c8:	f000 8099 	beq.w	80209fe <HAL_TIM_ConfigClockSource+0x1aa>
 80208cc:	4a5c      	ldr	r2, [pc, #368]	@ (8020a40 <HAL_TIM_ConfigClockSource+0x1ec>)
 80208ce:	4293      	cmp	r3, r2
 80208d0:	f200 809e 	bhi.w	8020a10 <HAL_TIM_ConfigClockSource+0x1bc>
 80208d4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80208d8:	f000 8091 	beq.w	80209fe <HAL_TIM_ConfigClockSource+0x1aa>
 80208dc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80208e0:	f200 8096 	bhi.w	8020a10 <HAL_TIM_ConfigClockSource+0x1bc>
 80208e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80208e8:	f000 8089 	beq.w	80209fe <HAL_TIM_ConfigClockSource+0x1aa>
 80208ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80208f0:	f200 808e 	bhi.w	8020a10 <HAL_TIM_ConfigClockSource+0x1bc>
 80208f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80208f8:	d03e      	beq.n	8020978 <HAL_TIM_ConfigClockSource+0x124>
 80208fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80208fe:	f200 8087 	bhi.w	8020a10 <HAL_TIM_ConfigClockSource+0x1bc>
 8020902:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8020906:	f000 8086 	beq.w	8020a16 <HAL_TIM_ConfigClockSource+0x1c2>
 802090a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802090e:	d87f      	bhi.n	8020a10 <HAL_TIM_ConfigClockSource+0x1bc>
 8020910:	2b70      	cmp	r3, #112	@ 0x70
 8020912:	d01a      	beq.n	802094a <HAL_TIM_ConfigClockSource+0xf6>
 8020914:	2b70      	cmp	r3, #112	@ 0x70
 8020916:	d87b      	bhi.n	8020a10 <HAL_TIM_ConfigClockSource+0x1bc>
 8020918:	2b60      	cmp	r3, #96	@ 0x60
 802091a:	d050      	beq.n	80209be <HAL_TIM_ConfigClockSource+0x16a>
 802091c:	2b60      	cmp	r3, #96	@ 0x60
 802091e:	d877      	bhi.n	8020a10 <HAL_TIM_ConfigClockSource+0x1bc>
 8020920:	2b50      	cmp	r3, #80	@ 0x50
 8020922:	d03c      	beq.n	802099e <HAL_TIM_ConfigClockSource+0x14a>
 8020924:	2b50      	cmp	r3, #80	@ 0x50
 8020926:	d873      	bhi.n	8020a10 <HAL_TIM_ConfigClockSource+0x1bc>
 8020928:	2b40      	cmp	r3, #64	@ 0x40
 802092a:	d058      	beq.n	80209de <HAL_TIM_ConfigClockSource+0x18a>
 802092c:	2b40      	cmp	r3, #64	@ 0x40
 802092e:	d86f      	bhi.n	8020a10 <HAL_TIM_ConfigClockSource+0x1bc>
 8020930:	2b30      	cmp	r3, #48	@ 0x30
 8020932:	d064      	beq.n	80209fe <HAL_TIM_ConfigClockSource+0x1aa>
 8020934:	2b30      	cmp	r3, #48	@ 0x30
 8020936:	d86b      	bhi.n	8020a10 <HAL_TIM_ConfigClockSource+0x1bc>
 8020938:	2b20      	cmp	r3, #32
 802093a:	d060      	beq.n	80209fe <HAL_TIM_ConfigClockSource+0x1aa>
 802093c:	2b20      	cmp	r3, #32
 802093e:	d867      	bhi.n	8020a10 <HAL_TIM_ConfigClockSource+0x1bc>
 8020940:	2b00      	cmp	r3, #0
 8020942:	d05c      	beq.n	80209fe <HAL_TIM_ConfigClockSource+0x1aa>
 8020944:	2b10      	cmp	r3, #16
 8020946:	d05a      	beq.n	80209fe <HAL_TIM_ConfigClockSource+0x1aa>
 8020948:	e062      	b.n	8020a10 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 802094a:	687b      	ldr	r3, [r7, #4]
 802094c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 802094e:	683b      	ldr	r3, [r7, #0]
 8020950:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8020952:	683b      	ldr	r3, [r7, #0]
 8020954:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8020956:	683b      	ldr	r3, [r7, #0]
 8020958:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 802095a:	f000 fc6d 	bl	8021238 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 802095e:	687b      	ldr	r3, [r7, #4]
 8020960:	681b      	ldr	r3, [r3, #0]
 8020962:	689b      	ldr	r3, [r3, #8]
 8020964:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8020966:	68bb      	ldr	r3, [r7, #8]
 8020968:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 802096c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 802096e:	687b      	ldr	r3, [r7, #4]
 8020970:	681b      	ldr	r3, [r3, #0]
 8020972:	68ba      	ldr	r2, [r7, #8]
 8020974:	609a      	str	r2, [r3, #8]
      break;
 8020976:	e04f      	b.n	8020a18 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8020978:	687b      	ldr	r3, [r7, #4]
 802097a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 802097c:	683b      	ldr	r3, [r7, #0]
 802097e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8020980:	683b      	ldr	r3, [r7, #0]
 8020982:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8020984:	683b      	ldr	r3, [r7, #0]
 8020986:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8020988:	f000 fc56 	bl	8021238 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 802098c:	687b      	ldr	r3, [r7, #4]
 802098e:	681b      	ldr	r3, [r3, #0]
 8020990:	689a      	ldr	r2, [r3, #8]
 8020992:	687b      	ldr	r3, [r7, #4]
 8020994:	681b      	ldr	r3, [r3, #0]
 8020996:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 802099a:	609a      	str	r2, [r3, #8]
      break;
 802099c:	e03c      	b.n	8020a18 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 802099e:	687b      	ldr	r3, [r7, #4]
 80209a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80209a2:	683b      	ldr	r3, [r7, #0]
 80209a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80209a6:	683b      	ldr	r3, [r7, #0]
 80209a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80209aa:	461a      	mov	r2, r3
 80209ac:	f000 fbc6 	bl	802113c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80209b0:	687b      	ldr	r3, [r7, #4]
 80209b2:	681b      	ldr	r3, [r3, #0]
 80209b4:	2150      	movs	r1, #80	@ 0x50
 80209b6:	4618      	mov	r0, r3
 80209b8:	f000 fc20 	bl	80211fc <TIM_ITRx_SetConfig>
      break;
 80209bc:	e02c      	b.n	8020a18 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80209be:	687b      	ldr	r3, [r7, #4]
 80209c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80209c2:	683b      	ldr	r3, [r7, #0]
 80209c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80209c6:	683b      	ldr	r3, [r7, #0]
 80209c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80209ca:	461a      	mov	r2, r3
 80209cc:	f000 fbe5 	bl	802119a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80209d0:	687b      	ldr	r3, [r7, #4]
 80209d2:	681b      	ldr	r3, [r3, #0]
 80209d4:	2160      	movs	r1, #96	@ 0x60
 80209d6:	4618      	mov	r0, r3
 80209d8:	f000 fc10 	bl	80211fc <TIM_ITRx_SetConfig>
      break;
 80209dc:	e01c      	b.n	8020a18 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80209de:	687b      	ldr	r3, [r7, #4]
 80209e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80209e2:	683b      	ldr	r3, [r7, #0]
 80209e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80209e6:	683b      	ldr	r3, [r7, #0]
 80209e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80209ea:	461a      	mov	r2, r3
 80209ec:	f000 fba6 	bl	802113c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80209f0:	687b      	ldr	r3, [r7, #4]
 80209f2:	681b      	ldr	r3, [r3, #0]
 80209f4:	2140      	movs	r1, #64	@ 0x40
 80209f6:	4618      	mov	r0, r3
 80209f8:	f000 fc00 	bl	80211fc <TIM_ITRx_SetConfig>
      break;
 80209fc:	e00c      	b.n	8020a18 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80209fe:	687b      	ldr	r3, [r7, #4]
 8020a00:	681a      	ldr	r2, [r3, #0]
 8020a02:	683b      	ldr	r3, [r7, #0]
 8020a04:	681b      	ldr	r3, [r3, #0]
 8020a06:	4619      	mov	r1, r3
 8020a08:	4610      	mov	r0, r2
 8020a0a:	f000 fbf7 	bl	80211fc <TIM_ITRx_SetConfig>
      break;
 8020a0e:	e003      	b.n	8020a18 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8020a10:	2301      	movs	r3, #1
 8020a12:	73fb      	strb	r3, [r7, #15]
      break;
 8020a14:	e000      	b.n	8020a18 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8020a16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8020a18:	687b      	ldr	r3, [r7, #4]
 8020a1a:	2201      	movs	r2, #1
 8020a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8020a20:	687b      	ldr	r3, [r7, #4]
 8020a22:	2200      	movs	r2, #0
 8020a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8020a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8020a2a:	4618      	mov	r0, r3
 8020a2c:	3710      	adds	r7, #16
 8020a2e:	46bd      	mov	sp, r7
 8020a30:	bd80      	pop	{r7, pc}
 8020a32:	bf00      	nop
 8020a34:	ffceff88 	.word	0xffceff88
 8020a38:	00100040 	.word	0x00100040
 8020a3c:	00100030 	.word	0x00100030
 8020a40:	00100020 	.word	0x00100020

08020a44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8020a44:	b480      	push	{r7}
 8020a46:	b085      	sub	sp, #20
 8020a48:	af00      	add	r7, sp, #0
 8020a4a:	6078      	str	r0, [r7, #4]
 8020a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8020a4e:	687b      	ldr	r3, [r7, #4]
 8020a50:	681b      	ldr	r3, [r3, #0]
 8020a52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8020a54:	687b      	ldr	r3, [r7, #4]
 8020a56:	4a46      	ldr	r2, [pc, #280]	@ (8020b70 <TIM_Base_SetConfig+0x12c>)
 8020a58:	4293      	cmp	r3, r2
 8020a5a:	d013      	beq.n	8020a84 <TIM_Base_SetConfig+0x40>
 8020a5c:	687b      	ldr	r3, [r7, #4]
 8020a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8020a62:	d00f      	beq.n	8020a84 <TIM_Base_SetConfig+0x40>
 8020a64:	687b      	ldr	r3, [r7, #4]
 8020a66:	4a43      	ldr	r2, [pc, #268]	@ (8020b74 <TIM_Base_SetConfig+0x130>)
 8020a68:	4293      	cmp	r3, r2
 8020a6a:	d00b      	beq.n	8020a84 <TIM_Base_SetConfig+0x40>
 8020a6c:	687b      	ldr	r3, [r7, #4]
 8020a6e:	4a42      	ldr	r2, [pc, #264]	@ (8020b78 <TIM_Base_SetConfig+0x134>)
 8020a70:	4293      	cmp	r3, r2
 8020a72:	d007      	beq.n	8020a84 <TIM_Base_SetConfig+0x40>
 8020a74:	687b      	ldr	r3, [r7, #4]
 8020a76:	4a41      	ldr	r2, [pc, #260]	@ (8020b7c <TIM_Base_SetConfig+0x138>)
 8020a78:	4293      	cmp	r3, r2
 8020a7a:	d003      	beq.n	8020a84 <TIM_Base_SetConfig+0x40>
 8020a7c:	687b      	ldr	r3, [r7, #4]
 8020a7e:	4a40      	ldr	r2, [pc, #256]	@ (8020b80 <TIM_Base_SetConfig+0x13c>)
 8020a80:	4293      	cmp	r3, r2
 8020a82:	d108      	bne.n	8020a96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8020a84:	68fb      	ldr	r3, [r7, #12]
 8020a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8020a8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8020a8c:	683b      	ldr	r3, [r7, #0]
 8020a8e:	685b      	ldr	r3, [r3, #4]
 8020a90:	68fa      	ldr	r2, [r7, #12]
 8020a92:	4313      	orrs	r3, r2
 8020a94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8020a96:	687b      	ldr	r3, [r7, #4]
 8020a98:	4a35      	ldr	r2, [pc, #212]	@ (8020b70 <TIM_Base_SetConfig+0x12c>)
 8020a9a:	4293      	cmp	r3, r2
 8020a9c:	d01f      	beq.n	8020ade <TIM_Base_SetConfig+0x9a>
 8020a9e:	687b      	ldr	r3, [r7, #4]
 8020aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8020aa4:	d01b      	beq.n	8020ade <TIM_Base_SetConfig+0x9a>
 8020aa6:	687b      	ldr	r3, [r7, #4]
 8020aa8:	4a32      	ldr	r2, [pc, #200]	@ (8020b74 <TIM_Base_SetConfig+0x130>)
 8020aaa:	4293      	cmp	r3, r2
 8020aac:	d017      	beq.n	8020ade <TIM_Base_SetConfig+0x9a>
 8020aae:	687b      	ldr	r3, [r7, #4]
 8020ab0:	4a31      	ldr	r2, [pc, #196]	@ (8020b78 <TIM_Base_SetConfig+0x134>)
 8020ab2:	4293      	cmp	r3, r2
 8020ab4:	d013      	beq.n	8020ade <TIM_Base_SetConfig+0x9a>
 8020ab6:	687b      	ldr	r3, [r7, #4]
 8020ab8:	4a30      	ldr	r2, [pc, #192]	@ (8020b7c <TIM_Base_SetConfig+0x138>)
 8020aba:	4293      	cmp	r3, r2
 8020abc:	d00f      	beq.n	8020ade <TIM_Base_SetConfig+0x9a>
 8020abe:	687b      	ldr	r3, [r7, #4]
 8020ac0:	4a2f      	ldr	r2, [pc, #188]	@ (8020b80 <TIM_Base_SetConfig+0x13c>)
 8020ac2:	4293      	cmp	r3, r2
 8020ac4:	d00b      	beq.n	8020ade <TIM_Base_SetConfig+0x9a>
 8020ac6:	687b      	ldr	r3, [r7, #4]
 8020ac8:	4a2e      	ldr	r2, [pc, #184]	@ (8020b84 <TIM_Base_SetConfig+0x140>)
 8020aca:	4293      	cmp	r3, r2
 8020acc:	d007      	beq.n	8020ade <TIM_Base_SetConfig+0x9a>
 8020ace:	687b      	ldr	r3, [r7, #4]
 8020ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8020b88 <TIM_Base_SetConfig+0x144>)
 8020ad2:	4293      	cmp	r3, r2
 8020ad4:	d003      	beq.n	8020ade <TIM_Base_SetConfig+0x9a>
 8020ad6:	687b      	ldr	r3, [r7, #4]
 8020ad8:	4a2c      	ldr	r2, [pc, #176]	@ (8020b8c <TIM_Base_SetConfig+0x148>)
 8020ada:	4293      	cmp	r3, r2
 8020adc:	d108      	bne.n	8020af0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8020ade:	68fb      	ldr	r3, [r7, #12]
 8020ae0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8020ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8020ae6:	683b      	ldr	r3, [r7, #0]
 8020ae8:	68db      	ldr	r3, [r3, #12]
 8020aea:	68fa      	ldr	r2, [r7, #12]
 8020aec:	4313      	orrs	r3, r2
 8020aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8020af0:	68fb      	ldr	r3, [r7, #12]
 8020af2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8020af6:	683b      	ldr	r3, [r7, #0]
 8020af8:	695b      	ldr	r3, [r3, #20]
 8020afa:	4313      	orrs	r3, r2
 8020afc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8020afe:	687b      	ldr	r3, [r7, #4]
 8020b00:	68fa      	ldr	r2, [r7, #12]
 8020b02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8020b04:	683b      	ldr	r3, [r7, #0]
 8020b06:	689a      	ldr	r2, [r3, #8]
 8020b08:	687b      	ldr	r3, [r7, #4]
 8020b0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8020b0c:	683b      	ldr	r3, [r7, #0]
 8020b0e:	681a      	ldr	r2, [r3, #0]
 8020b10:	687b      	ldr	r3, [r7, #4]
 8020b12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8020b14:	687b      	ldr	r3, [r7, #4]
 8020b16:	4a16      	ldr	r2, [pc, #88]	@ (8020b70 <TIM_Base_SetConfig+0x12c>)
 8020b18:	4293      	cmp	r3, r2
 8020b1a:	d00f      	beq.n	8020b3c <TIM_Base_SetConfig+0xf8>
 8020b1c:	687b      	ldr	r3, [r7, #4]
 8020b1e:	4a18      	ldr	r2, [pc, #96]	@ (8020b80 <TIM_Base_SetConfig+0x13c>)
 8020b20:	4293      	cmp	r3, r2
 8020b22:	d00b      	beq.n	8020b3c <TIM_Base_SetConfig+0xf8>
 8020b24:	687b      	ldr	r3, [r7, #4]
 8020b26:	4a17      	ldr	r2, [pc, #92]	@ (8020b84 <TIM_Base_SetConfig+0x140>)
 8020b28:	4293      	cmp	r3, r2
 8020b2a:	d007      	beq.n	8020b3c <TIM_Base_SetConfig+0xf8>
 8020b2c:	687b      	ldr	r3, [r7, #4]
 8020b2e:	4a16      	ldr	r2, [pc, #88]	@ (8020b88 <TIM_Base_SetConfig+0x144>)
 8020b30:	4293      	cmp	r3, r2
 8020b32:	d003      	beq.n	8020b3c <TIM_Base_SetConfig+0xf8>
 8020b34:	687b      	ldr	r3, [r7, #4]
 8020b36:	4a15      	ldr	r2, [pc, #84]	@ (8020b8c <TIM_Base_SetConfig+0x148>)
 8020b38:	4293      	cmp	r3, r2
 8020b3a:	d103      	bne.n	8020b44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8020b3c:	683b      	ldr	r3, [r7, #0]
 8020b3e:	691a      	ldr	r2, [r3, #16]
 8020b40:	687b      	ldr	r3, [r7, #4]
 8020b42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8020b44:	687b      	ldr	r3, [r7, #4]
 8020b46:	2201      	movs	r2, #1
 8020b48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8020b4a:	687b      	ldr	r3, [r7, #4]
 8020b4c:	691b      	ldr	r3, [r3, #16]
 8020b4e:	f003 0301 	and.w	r3, r3, #1
 8020b52:	2b01      	cmp	r3, #1
 8020b54:	d105      	bne.n	8020b62 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8020b56:	687b      	ldr	r3, [r7, #4]
 8020b58:	691b      	ldr	r3, [r3, #16]
 8020b5a:	f023 0201 	bic.w	r2, r3, #1
 8020b5e:	687b      	ldr	r3, [r7, #4]
 8020b60:	611a      	str	r2, [r3, #16]
  }
}
 8020b62:	bf00      	nop
 8020b64:	3714      	adds	r7, #20
 8020b66:	46bd      	mov	sp, r7
 8020b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b6c:	4770      	bx	lr
 8020b6e:	bf00      	nop
 8020b70:	40010000 	.word	0x40010000
 8020b74:	40000400 	.word	0x40000400
 8020b78:	40000800 	.word	0x40000800
 8020b7c:	40000c00 	.word	0x40000c00
 8020b80:	40010400 	.word	0x40010400
 8020b84:	40014000 	.word	0x40014000
 8020b88:	40014400 	.word	0x40014400
 8020b8c:	40014800 	.word	0x40014800

08020b90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8020b90:	b480      	push	{r7}
 8020b92:	b087      	sub	sp, #28
 8020b94:	af00      	add	r7, sp, #0
 8020b96:	6078      	str	r0, [r7, #4]
 8020b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020b9a:	687b      	ldr	r3, [r7, #4]
 8020b9c:	6a1b      	ldr	r3, [r3, #32]
 8020b9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8020ba0:	687b      	ldr	r3, [r7, #4]
 8020ba2:	6a1b      	ldr	r3, [r3, #32]
 8020ba4:	f023 0201 	bic.w	r2, r3, #1
 8020ba8:	687b      	ldr	r3, [r7, #4]
 8020baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020bac:	687b      	ldr	r3, [r7, #4]
 8020bae:	685b      	ldr	r3, [r3, #4]
 8020bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8020bb2:	687b      	ldr	r3, [r7, #4]
 8020bb4:	699b      	ldr	r3, [r3, #24]
 8020bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8020bb8:	68fa      	ldr	r2, [r7, #12]
 8020bba:	4b37      	ldr	r3, [pc, #220]	@ (8020c98 <TIM_OC1_SetConfig+0x108>)
 8020bbc:	4013      	ands	r3, r2
 8020bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8020bc0:	68fb      	ldr	r3, [r7, #12]
 8020bc2:	f023 0303 	bic.w	r3, r3, #3
 8020bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020bc8:	683b      	ldr	r3, [r7, #0]
 8020bca:	681b      	ldr	r3, [r3, #0]
 8020bcc:	68fa      	ldr	r2, [r7, #12]
 8020bce:	4313      	orrs	r3, r2
 8020bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8020bd2:	697b      	ldr	r3, [r7, #20]
 8020bd4:	f023 0302 	bic.w	r3, r3, #2
 8020bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8020bda:	683b      	ldr	r3, [r7, #0]
 8020bdc:	689b      	ldr	r3, [r3, #8]
 8020bde:	697a      	ldr	r2, [r7, #20]
 8020be0:	4313      	orrs	r3, r2
 8020be2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8020be4:	687b      	ldr	r3, [r7, #4]
 8020be6:	4a2d      	ldr	r2, [pc, #180]	@ (8020c9c <TIM_OC1_SetConfig+0x10c>)
 8020be8:	4293      	cmp	r3, r2
 8020bea:	d00f      	beq.n	8020c0c <TIM_OC1_SetConfig+0x7c>
 8020bec:	687b      	ldr	r3, [r7, #4]
 8020bee:	4a2c      	ldr	r2, [pc, #176]	@ (8020ca0 <TIM_OC1_SetConfig+0x110>)
 8020bf0:	4293      	cmp	r3, r2
 8020bf2:	d00b      	beq.n	8020c0c <TIM_OC1_SetConfig+0x7c>
 8020bf4:	687b      	ldr	r3, [r7, #4]
 8020bf6:	4a2b      	ldr	r2, [pc, #172]	@ (8020ca4 <TIM_OC1_SetConfig+0x114>)
 8020bf8:	4293      	cmp	r3, r2
 8020bfa:	d007      	beq.n	8020c0c <TIM_OC1_SetConfig+0x7c>
 8020bfc:	687b      	ldr	r3, [r7, #4]
 8020bfe:	4a2a      	ldr	r2, [pc, #168]	@ (8020ca8 <TIM_OC1_SetConfig+0x118>)
 8020c00:	4293      	cmp	r3, r2
 8020c02:	d003      	beq.n	8020c0c <TIM_OC1_SetConfig+0x7c>
 8020c04:	687b      	ldr	r3, [r7, #4]
 8020c06:	4a29      	ldr	r2, [pc, #164]	@ (8020cac <TIM_OC1_SetConfig+0x11c>)
 8020c08:	4293      	cmp	r3, r2
 8020c0a:	d10c      	bne.n	8020c26 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8020c0c:	697b      	ldr	r3, [r7, #20]
 8020c0e:	f023 0308 	bic.w	r3, r3, #8
 8020c12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8020c14:	683b      	ldr	r3, [r7, #0]
 8020c16:	68db      	ldr	r3, [r3, #12]
 8020c18:	697a      	ldr	r2, [r7, #20]
 8020c1a:	4313      	orrs	r3, r2
 8020c1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8020c1e:	697b      	ldr	r3, [r7, #20]
 8020c20:	f023 0304 	bic.w	r3, r3, #4
 8020c24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020c26:	687b      	ldr	r3, [r7, #4]
 8020c28:	4a1c      	ldr	r2, [pc, #112]	@ (8020c9c <TIM_OC1_SetConfig+0x10c>)
 8020c2a:	4293      	cmp	r3, r2
 8020c2c:	d00f      	beq.n	8020c4e <TIM_OC1_SetConfig+0xbe>
 8020c2e:	687b      	ldr	r3, [r7, #4]
 8020c30:	4a1b      	ldr	r2, [pc, #108]	@ (8020ca0 <TIM_OC1_SetConfig+0x110>)
 8020c32:	4293      	cmp	r3, r2
 8020c34:	d00b      	beq.n	8020c4e <TIM_OC1_SetConfig+0xbe>
 8020c36:	687b      	ldr	r3, [r7, #4]
 8020c38:	4a1a      	ldr	r2, [pc, #104]	@ (8020ca4 <TIM_OC1_SetConfig+0x114>)
 8020c3a:	4293      	cmp	r3, r2
 8020c3c:	d007      	beq.n	8020c4e <TIM_OC1_SetConfig+0xbe>
 8020c3e:	687b      	ldr	r3, [r7, #4]
 8020c40:	4a19      	ldr	r2, [pc, #100]	@ (8020ca8 <TIM_OC1_SetConfig+0x118>)
 8020c42:	4293      	cmp	r3, r2
 8020c44:	d003      	beq.n	8020c4e <TIM_OC1_SetConfig+0xbe>
 8020c46:	687b      	ldr	r3, [r7, #4]
 8020c48:	4a18      	ldr	r2, [pc, #96]	@ (8020cac <TIM_OC1_SetConfig+0x11c>)
 8020c4a:	4293      	cmp	r3, r2
 8020c4c:	d111      	bne.n	8020c72 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8020c4e:	693b      	ldr	r3, [r7, #16]
 8020c50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8020c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8020c56:	693b      	ldr	r3, [r7, #16]
 8020c58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8020c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8020c5e:	683b      	ldr	r3, [r7, #0]
 8020c60:	695b      	ldr	r3, [r3, #20]
 8020c62:	693a      	ldr	r2, [r7, #16]
 8020c64:	4313      	orrs	r3, r2
 8020c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8020c68:	683b      	ldr	r3, [r7, #0]
 8020c6a:	699b      	ldr	r3, [r3, #24]
 8020c6c:	693a      	ldr	r2, [r7, #16]
 8020c6e:	4313      	orrs	r3, r2
 8020c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020c72:	687b      	ldr	r3, [r7, #4]
 8020c74:	693a      	ldr	r2, [r7, #16]
 8020c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8020c78:	687b      	ldr	r3, [r7, #4]
 8020c7a:	68fa      	ldr	r2, [r7, #12]
 8020c7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8020c7e:	683b      	ldr	r3, [r7, #0]
 8020c80:	685a      	ldr	r2, [r3, #4]
 8020c82:	687b      	ldr	r3, [r7, #4]
 8020c84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020c86:	687b      	ldr	r3, [r7, #4]
 8020c88:	697a      	ldr	r2, [r7, #20]
 8020c8a:	621a      	str	r2, [r3, #32]
}
 8020c8c:	bf00      	nop
 8020c8e:	371c      	adds	r7, #28
 8020c90:	46bd      	mov	sp, r7
 8020c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c96:	4770      	bx	lr
 8020c98:	fffeff8f 	.word	0xfffeff8f
 8020c9c:	40010000 	.word	0x40010000
 8020ca0:	40010400 	.word	0x40010400
 8020ca4:	40014000 	.word	0x40014000
 8020ca8:	40014400 	.word	0x40014400
 8020cac:	40014800 	.word	0x40014800

08020cb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8020cb0:	b480      	push	{r7}
 8020cb2:	b087      	sub	sp, #28
 8020cb4:	af00      	add	r7, sp, #0
 8020cb6:	6078      	str	r0, [r7, #4]
 8020cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020cba:	687b      	ldr	r3, [r7, #4]
 8020cbc:	6a1b      	ldr	r3, [r3, #32]
 8020cbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8020cc0:	687b      	ldr	r3, [r7, #4]
 8020cc2:	6a1b      	ldr	r3, [r3, #32]
 8020cc4:	f023 0210 	bic.w	r2, r3, #16
 8020cc8:	687b      	ldr	r3, [r7, #4]
 8020cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020ccc:	687b      	ldr	r3, [r7, #4]
 8020cce:	685b      	ldr	r3, [r3, #4]
 8020cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8020cd2:	687b      	ldr	r3, [r7, #4]
 8020cd4:	699b      	ldr	r3, [r3, #24]
 8020cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8020cd8:	68fa      	ldr	r2, [r7, #12]
 8020cda:	4b34      	ldr	r3, [pc, #208]	@ (8020dac <TIM_OC2_SetConfig+0xfc>)
 8020cdc:	4013      	ands	r3, r2
 8020cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8020ce0:	68fb      	ldr	r3, [r7, #12]
 8020ce2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8020ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020ce8:	683b      	ldr	r3, [r7, #0]
 8020cea:	681b      	ldr	r3, [r3, #0]
 8020cec:	021b      	lsls	r3, r3, #8
 8020cee:	68fa      	ldr	r2, [r7, #12]
 8020cf0:	4313      	orrs	r3, r2
 8020cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8020cf4:	697b      	ldr	r3, [r7, #20]
 8020cf6:	f023 0320 	bic.w	r3, r3, #32
 8020cfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8020cfc:	683b      	ldr	r3, [r7, #0]
 8020cfe:	689b      	ldr	r3, [r3, #8]
 8020d00:	011b      	lsls	r3, r3, #4
 8020d02:	697a      	ldr	r2, [r7, #20]
 8020d04:	4313      	orrs	r3, r2
 8020d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8020d08:	687b      	ldr	r3, [r7, #4]
 8020d0a:	4a29      	ldr	r2, [pc, #164]	@ (8020db0 <TIM_OC2_SetConfig+0x100>)
 8020d0c:	4293      	cmp	r3, r2
 8020d0e:	d003      	beq.n	8020d18 <TIM_OC2_SetConfig+0x68>
 8020d10:	687b      	ldr	r3, [r7, #4]
 8020d12:	4a28      	ldr	r2, [pc, #160]	@ (8020db4 <TIM_OC2_SetConfig+0x104>)
 8020d14:	4293      	cmp	r3, r2
 8020d16:	d10d      	bne.n	8020d34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8020d18:	697b      	ldr	r3, [r7, #20]
 8020d1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8020d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8020d20:	683b      	ldr	r3, [r7, #0]
 8020d22:	68db      	ldr	r3, [r3, #12]
 8020d24:	011b      	lsls	r3, r3, #4
 8020d26:	697a      	ldr	r2, [r7, #20]
 8020d28:	4313      	orrs	r3, r2
 8020d2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8020d2c:	697b      	ldr	r3, [r7, #20]
 8020d2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8020d32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020d34:	687b      	ldr	r3, [r7, #4]
 8020d36:	4a1e      	ldr	r2, [pc, #120]	@ (8020db0 <TIM_OC2_SetConfig+0x100>)
 8020d38:	4293      	cmp	r3, r2
 8020d3a:	d00f      	beq.n	8020d5c <TIM_OC2_SetConfig+0xac>
 8020d3c:	687b      	ldr	r3, [r7, #4]
 8020d3e:	4a1d      	ldr	r2, [pc, #116]	@ (8020db4 <TIM_OC2_SetConfig+0x104>)
 8020d40:	4293      	cmp	r3, r2
 8020d42:	d00b      	beq.n	8020d5c <TIM_OC2_SetConfig+0xac>
 8020d44:	687b      	ldr	r3, [r7, #4]
 8020d46:	4a1c      	ldr	r2, [pc, #112]	@ (8020db8 <TIM_OC2_SetConfig+0x108>)
 8020d48:	4293      	cmp	r3, r2
 8020d4a:	d007      	beq.n	8020d5c <TIM_OC2_SetConfig+0xac>
 8020d4c:	687b      	ldr	r3, [r7, #4]
 8020d4e:	4a1b      	ldr	r2, [pc, #108]	@ (8020dbc <TIM_OC2_SetConfig+0x10c>)
 8020d50:	4293      	cmp	r3, r2
 8020d52:	d003      	beq.n	8020d5c <TIM_OC2_SetConfig+0xac>
 8020d54:	687b      	ldr	r3, [r7, #4]
 8020d56:	4a1a      	ldr	r2, [pc, #104]	@ (8020dc0 <TIM_OC2_SetConfig+0x110>)
 8020d58:	4293      	cmp	r3, r2
 8020d5a:	d113      	bne.n	8020d84 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8020d5c:	693b      	ldr	r3, [r7, #16]
 8020d5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8020d62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8020d64:	693b      	ldr	r3, [r7, #16]
 8020d66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8020d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8020d6c:	683b      	ldr	r3, [r7, #0]
 8020d6e:	695b      	ldr	r3, [r3, #20]
 8020d70:	009b      	lsls	r3, r3, #2
 8020d72:	693a      	ldr	r2, [r7, #16]
 8020d74:	4313      	orrs	r3, r2
 8020d76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8020d78:	683b      	ldr	r3, [r7, #0]
 8020d7a:	699b      	ldr	r3, [r3, #24]
 8020d7c:	009b      	lsls	r3, r3, #2
 8020d7e:	693a      	ldr	r2, [r7, #16]
 8020d80:	4313      	orrs	r3, r2
 8020d82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020d84:	687b      	ldr	r3, [r7, #4]
 8020d86:	693a      	ldr	r2, [r7, #16]
 8020d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8020d8a:	687b      	ldr	r3, [r7, #4]
 8020d8c:	68fa      	ldr	r2, [r7, #12]
 8020d8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8020d90:	683b      	ldr	r3, [r7, #0]
 8020d92:	685a      	ldr	r2, [r3, #4]
 8020d94:	687b      	ldr	r3, [r7, #4]
 8020d96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020d98:	687b      	ldr	r3, [r7, #4]
 8020d9a:	697a      	ldr	r2, [r7, #20]
 8020d9c:	621a      	str	r2, [r3, #32]
}
 8020d9e:	bf00      	nop
 8020da0:	371c      	adds	r7, #28
 8020da2:	46bd      	mov	sp, r7
 8020da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020da8:	4770      	bx	lr
 8020daa:	bf00      	nop
 8020dac:	feff8fff 	.word	0xfeff8fff
 8020db0:	40010000 	.word	0x40010000
 8020db4:	40010400 	.word	0x40010400
 8020db8:	40014000 	.word	0x40014000
 8020dbc:	40014400 	.word	0x40014400
 8020dc0:	40014800 	.word	0x40014800

08020dc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8020dc4:	b480      	push	{r7}
 8020dc6:	b087      	sub	sp, #28
 8020dc8:	af00      	add	r7, sp, #0
 8020dca:	6078      	str	r0, [r7, #4]
 8020dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020dce:	687b      	ldr	r3, [r7, #4]
 8020dd0:	6a1b      	ldr	r3, [r3, #32]
 8020dd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8020dd4:	687b      	ldr	r3, [r7, #4]
 8020dd6:	6a1b      	ldr	r3, [r3, #32]
 8020dd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8020ddc:	687b      	ldr	r3, [r7, #4]
 8020dde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020de0:	687b      	ldr	r3, [r7, #4]
 8020de2:	685b      	ldr	r3, [r3, #4]
 8020de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8020de6:	687b      	ldr	r3, [r7, #4]
 8020de8:	69db      	ldr	r3, [r3, #28]
 8020dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8020dec:	68fa      	ldr	r2, [r7, #12]
 8020dee:	4b33      	ldr	r3, [pc, #204]	@ (8020ebc <TIM_OC3_SetConfig+0xf8>)
 8020df0:	4013      	ands	r3, r2
 8020df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8020df4:	68fb      	ldr	r3, [r7, #12]
 8020df6:	f023 0303 	bic.w	r3, r3, #3
 8020dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020dfc:	683b      	ldr	r3, [r7, #0]
 8020dfe:	681b      	ldr	r3, [r3, #0]
 8020e00:	68fa      	ldr	r2, [r7, #12]
 8020e02:	4313      	orrs	r3, r2
 8020e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8020e06:	697b      	ldr	r3, [r7, #20]
 8020e08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8020e0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8020e0e:	683b      	ldr	r3, [r7, #0]
 8020e10:	689b      	ldr	r3, [r3, #8]
 8020e12:	021b      	lsls	r3, r3, #8
 8020e14:	697a      	ldr	r2, [r7, #20]
 8020e16:	4313      	orrs	r3, r2
 8020e18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8020e1a:	687b      	ldr	r3, [r7, #4]
 8020e1c:	4a28      	ldr	r2, [pc, #160]	@ (8020ec0 <TIM_OC3_SetConfig+0xfc>)
 8020e1e:	4293      	cmp	r3, r2
 8020e20:	d003      	beq.n	8020e2a <TIM_OC3_SetConfig+0x66>
 8020e22:	687b      	ldr	r3, [r7, #4]
 8020e24:	4a27      	ldr	r2, [pc, #156]	@ (8020ec4 <TIM_OC3_SetConfig+0x100>)
 8020e26:	4293      	cmp	r3, r2
 8020e28:	d10d      	bne.n	8020e46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8020e2a:	697b      	ldr	r3, [r7, #20]
 8020e2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8020e30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8020e32:	683b      	ldr	r3, [r7, #0]
 8020e34:	68db      	ldr	r3, [r3, #12]
 8020e36:	021b      	lsls	r3, r3, #8
 8020e38:	697a      	ldr	r2, [r7, #20]
 8020e3a:	4313      	orrs	r3, r2
 8020e3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8020e3e:	697b      	ldr	r3, [r7, #20]
 8020e40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8020e44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020e46:	687b      	ldr	r3, [r7, #4]
 8020e48:	4a1d      	ldr	r2, [pc, #116]	@ (8020ec0 <TIM_OC3_SetConfig+0xfc>)
 8020e4a:	4293      	cmp	r3, r2
 8020e4c:	d00f      	beq.n	8020e6e <TIM_OC3_SetConfig+0xaa>
 8020e4e:	687b      	ldr	r3, [r7, #4]
 8020e50:	4a1c      	ldr	r2, [pc, #112]	@ (8020ec4 <TIM_OC3_SetConfig+0x100>)
 8020e52:	4293      	cmp	r3, r2
 8020e54:	d00b      	beq.n	8020e6e <TIM_OC3_SetConfig+0xaa>
 8020e56:	687b      	ldr	r3, [r7, #4]
 8020e58:	4a1b      	ldr	r2, [pc, #108]	@ (8020ec8 <TIM_OC3_SetConfig+0x104>)
 8020e5a:	4293      	cmp	r3, r2
 8020e5c:	d007      	beq.n	8020e6e <TIM_OC3_SetConfig+0xaa>
 8020e5e:	687b      	ldr	r3, [r7, #4]
 8020e60:	4a1a      	ldr	r2, [pc, #104]	@ (8020ecc <TIM_OC3_SetConfig+0x108>)
 8020e62:	4293      	cmp	r3, r2
 8020e64:	d003      	beq.n	8020e6e <TIM_OC3_SetConfig+0xaa>
 8020e66:	687b      	ldr	r3, [r7, #4]
 8020e68:	4a19      	ldr	r2, [pc, #100]	@ (8020ed0 <TIM_OC3_SetConfig+0x10c>)
 8020e6a:	4293      	cmp	r3, r2
 8020e6c:	d113      	bne.n	8020e96 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8020e6e:	693b      	ldr	r3, [r7, #16]
 8020e70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8020e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8020e76:	693b      	ldr	r3, [r7, #16]
 8020e78:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8020e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8020e7e:	683b      	ldr	r3, [r7, #0]
 8020e80:	695b      	ldr	r3, [r3, #20]
 8020e82:	011b      	lsls	r3, r3, #4
 8020e84:	693a      	ldr	r2, [r7, #16]
 8020e86:	4313      	orrs	r3, r2
 8020e88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8020e8a:	683b      	ldr	r3, [r7, #0]
 8020e8c:	699b      	ldr	r3, [r3, #24]
 8020e8e:	011b      	lsls	r3, r3, #4
 8020e90:	693a      	ldr	r2, [r7, #16]
 8020e92:	4313      	orrs	r3, r2
 8020e94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020e96:	687b      	ldr	r3, [r7, #4]
 8020e98:	693a      	ldr	r2, [r7, #16]
 8020e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8020e9c:	687b      	ldr	r3, [r7, #4]
 8020e9e:	68fa      	ldr	r2, [r7, #12]
 8020ea0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8020ea2:	683b      	ldr	r3, [r7, #0]
 8020ea4:	685a      	ldr	r2, [r3, #4]
 8020ea6:	687b      	ldr	r3, [r7, #4]
 8020ea8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020eaa:	687b      	ldr	r3, [r7, #4]
 8020eac:	697a      	ldr	r2, [r7, #20]
 8020eae:	621a      	str	r2, [r3, #32]
}
 8020eb0:	bf00      	nop
 8020eb2:	371c      	adds	r7, #28
 8020eb4:	46bd      	mov	sp, r7
 8020eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020eba:	4770      	bx	lr
 8020ebc:	fffeff8f 	.word	0xfffeff8f
 8020ec0:	40010000 	.word	0x40010000
 8020ec4:	40010400 	.word	0x40010400
 8020ec8:	40014000 	.word	0x40014000
 8020ecc:	40014400 	.word	0x40014400
 8020ed0:	40014800 	.word	0x40014800

08020ed4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8020ed4:	b480      	push	{r7}
 8020ed6:	b087      	sub	sp, #28
 8020ed8:	af00      	add	r7, sp, #0
 8020eda:	6078      	str	r0, [r7, #4]
 8020edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020ede:	687b      	ldr	r3, [r7, #4]
 8020ee0:	6a1b      	ldr	r3, [r3, #32]
 8020ee2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8020ee4:	687b      	ldr	r3, [r7, #4]
 8020ee6:	6a1b      	ldr	r3, [r3, #32]
 8020ee8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8020eec:	687b      	ldr	r3, [r7, #4]
 8020eee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020ef0:	687b      	ldr	r3, [r7, #4]
 8020ef2:	685b      	ldr	r3, [r3, #4]
 8020ef4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8020ef6:	687b      	ldr	r3, [r7, #4]
 8020ef8:	69db      	ldr	r3, [r3, #28]
 8020efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8020efc:	68fa      	ldr	r2, [r7, #12]
 8020efe:	4b24      	ldr	r3, [pc, #144]	@ (8020f90 <TIM_OC4_SetConfig+0xbc>)
 8020f00:	4013      	ands	r3, r2
 8020f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8020f04:	68fb      	ldr	r3, [r7, #12]
 8020f06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8020f0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020f0c:	683b      	ldr	r3, [r7, #0]
 8020f0e:	681b      	ldr	r3, [r3, #0]
 8020f10:	021b      	lsls	r3, r3, #8
 8020f12:	68fa      	ldr	r2, [r7, #12]
 8020f14:	4313      	orrs	r3, r2
 8020f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8020f18:	693b      	ldr	r3, [r7, #16]
 8020f1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8020f1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8020f20:	683b      	ldr	r3, [r7, #0]
 8020f22:	689b      	ldr	r3, [r3, #8]
 8020f24:	031b      	lsls	r3, r3, #12
 8020f26:	693a      	ldr	r2, [r7, #16]
 8020f28:	4313      	orrs	r3, r2
 8020f2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020f2c:	687b      	ldr	r3, [r7, #4]
 8020f2e:	4a19      	ldr	r2, [pc, #100]	@ (8020f94 <TIM_OC4_SetConfig+0xc0>)
 8020f30:	4293      	cmp	r3, r2
 8020f32:	d00f      	beq.n	8020f54 <TIM_OC4_SetConfig+0x80>
 8020f34:	687b      	ldr	r3, [r7, #4]
 8020f36:	4a18      	ldr	r2, [pc, #96]	@ (8020f98 <TIM_OC4_SetConfig+0xc4>)
 8020f38:	4293      	cmp	r3, r2
 8020f3a:	d00b      	beq.n	8020f54 <TIM_OC4_SetConfig+0x80>
 8020f3c:	687b      	ldr	r3, [r7, #4]
 8020f3e:	4a17      	ldr	r2, [pc, #92]	@ (8020f9c <TIM_OC4_SetConfig+0xc8>)
 8020f40:	4293      	cmp	r3, r2
 8020f42:	d007      	beq.n	8020f54 <TIM_OC4_SetConfig+0x80>
 8020f44:	687b      	ldr	r3, [r7, #4]
 8020f46:	4a16      	ldr	r2, [pc, #88]	@ (8020fa0 <TIM_OC4_SetConfig+0xcc>)
 8020f48:	4293      	cmp	r3, r2
 8020f4a:	d003      	beq.n	8020f54 <TIM_OC4_SetConfig+0x80>
 8020f4c:	687b      	ldr	r3, [r7, #4]
 8020f4e:	4a15      	ldr	r2, [pc, #84]	@ (8020fa4 <TIM_OC4_SetConfig+0xd0>)
 8020f50:	4293      	cmp	r3, r2
 8020f52:	d109      	bne.n	8020f68 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8020f54:	697b      	ldr	r3, [r7, #20]
 8020f56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8020f5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8020f5c:	683b      	ldr	r3, [r7, #0]
 8020f5e:	695b      	ldr	r3, [r3, #20]
 8020f60:	019b      	lsls	r3, r3, #6
 8020f62:	697a      	ldr	r2, [r7, #20]
 8020f64:	4313      	orrs	r3, r2
 8020f66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020f68:	687b      	ldr	r3, [r7, #4]
 8020f6a:	697a      	ldr	r2, [r7, #20]
 8020f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8020f6e:	687b      	ldr	r3, [r7, #4]
 8020f70:	68fa      	ldr	r2, [r7, #12]
 8020f72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8020f74:	683b      	ldr	r3, [r7, #0]
 8020f76:	685a      	ldr	r2, [r3, #4]
 8020f78:	687b      	ldr	r3, [r7, #4]
 8020f7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020f7c:	687b      	ldr	r3, [r7, #4]
 8020f7e:	693a      	ldr	r2, [r7, #16]
 8020f80:	621a      	str	r2, [r3, #32]
}
 8020f82:	bf00      	nop
 8020f84:	371c      	adds	r7, #28
 8020f86:	46bd      	mov	sp, r7
 8020f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f8c:	4770      	bx	lr
 8020f8e:	bf00      	nop
 8020f90:	feff8fff 	.word	0xfeff8fff
 8020f94:	40010000 	.word	0x40010000
 8020f98:	40010400 	.word	0x40010400
 8020f9c:	40014000 	.word	0x40014000
 8020fa0:	40014400 	.word	0x40014400
 8020fa4:	40014800 	.word	0x40014800

08020fa8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8020fa8:	b480      	push	{r7}
 8020faa:	b087      	sub	sp, #28
 8020fac:	af00      	add	r7, sp, #0
 8020fae:	6078      	str	r0, [r7, #4]
 8020fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020fb2:	687b      	ldr	r3, [r7, #4]
 8020fb4:	6a1b      	ldr	r3, [r3, #32]
 8020fb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8020fb8:	687b      	ldr	r3, [r7, #4]
 8020fba:	6a1b      	ldr	r3, [r3, #32]
 8020fbc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8020fc0:	687b      	ldr	r3, [r7, #4]
 8020fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020fc4:	687b      	ldr	r3, [r7, #4]
 8020fc6:	685b      	ldr	r3, [r3, #4]
 8020fc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8020fca:	687b      	ldr	r3, [r7, #4]
 8020fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8020fd0:	68fa      	ldr	r2, [r7, #12]
 8020fd2:	4b21      	ldr	r3, [pc, #132]	@ (8021058 <TIM_OC5_SetConfig+0xb0>)
 8020fd4:	4013      	ands	r3, r2
 8020fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020fd8:	683b      	ldr	r3, [r7, #0]
 8020fda:	681b      	ldr	r3, [r3, #0]
 8020fdc:	68fa      	ldr	r2, [r7, #12]
 8020fde:	4313      	orrs	r3, r2
 8020fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8020fe2:	693b      	ldr	r3, [r7, #16]
 8020fe4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8020fe8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8020fea:	683b      	ldr	r3, [r7, #0]
 8020fec:	689b      	ldr	r3, [r3, #8]
 8020fee:	041b      	lsls	r3, r3, #16
 8020ff0:	693a      	ldr	r2, [r7, #16]
 8020ff2:	4313      	orrs	r3, r2
 8020ff4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020ff6:	687b      	ldr	r3, [r7, #4]
 8020ff8:	4a18      	ldr	r2, [pc, #96]	@ (802105c <TIM_OC5_SetConfig+0xb4>)
 8020ffa:	4293      	cmp	r3, r2
 8020ffc:	d00f      	beq.n	802101e <TIM_OC5_SetConfig+0x76>
 8020ffe:	687b      	ldr	r3, [r7, #4]
 8021000:	4a17      	ldr	r2, [pc, #92]	@ (8021060 <TIM_OC5_SetConfig+0xb8>)
 8021002:	4293      	cmp	r3, r2
 8021004:	d00b      	beq.n	802101e <TIM_OC5_SetConfig+0x76>
 8021006:	687b      	ldr	r3, [r7, #4]
 8021008:	4a16      	ldr	r2, [pc, #88]	@ (8021064 <TIM_OC5_SetConfig+0xbc>)
 802100a:	4293      	cmp	r3, r2
 802100c:	d007      	beq.n	802101e <TIM_OC5_SetConfig+0x76>
 802100e:	687b      	ldr	r3, [r7, #4]
 8021010:	4a15      	ldr	r2, [pc, #84]	@ (8021068 <TIM_OC5_SetConfig+0xc0>)
 8021012:	4293      	cmp	r3, r2
 8021014:	d003      	beq.n	802101e <TIM_OC5_SetConfig+0x76>
 8021016:	687b      	ldr	r3, [r7, #4]
 8021018:	4a14      	ldr	r2, [pc, #80]	@ (802106c <TIM_OC5_SetConfig+0xc4>)
 802101a:	4293      	cmp	r3, r2
 802101c:	d109      	bne.n	8021032 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 802101e:	697b      	ldr	r3, [r7, #20]
 8021020:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8021024:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8021026:	683b      	ldr	r3, [r7, #0]
 8021028:	695b      	ldr	r3, [r3, #20]
 802102a:	021b      	lsls	r3, r3, #8
 802102c:	697a      	ldr	r2, [r7, #20]
 802102e:	4313      	orrs	r3, r2
 8021030:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8021032:	687b      	ldr	r3, [r7, #4]
 8021034:	697a      	ldr	r2, [r7, #20]
 8021036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8021038:	687b      	ldr	r3, [r7, #4]
 802103a:	68fa      	ldr	r2, [r7, #12]
 802103c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 802103e:	683b      	ldr	r3, [r7, #0]
 8021040:	685a      	ldr	r2, [r3, #4]
 8021042:	687b      	ldr	r3, [r7, #4]
 8021044:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8021046:	687b      	ldr	r3, [r7, #4]
 8021048:	693a      	ldr	r2, [r7, #16]
 802104a:	621a      	str	r2, [r3, #32]
}
 802104c:	bf00      	nop
 802104e:	371c      	adds	r7, #28
 8021050:	46bd      	mov	sp, r7
 8021052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021056:	4770      	bx	lr
 8021058:	fffeff8f 	.word	0xfffeff8f
 802105c:	40010000 	.word	0x40010000
 8021060:	40010400 	.word	0x40010400
 8021064:	40014000 	.word	0x40014000
 8021068:	40014400 	.word	0x40014400
 802106c:	40014800 	.word	0x40014800

08021070 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8021070:	b480      	push	{r7}
 8021072:	b087      	sub	sp, #28
 8021074:	af00      	add	r7, sp, #0
 8021076:	6078      	str	r0, [r7, #4]
 8021078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802107a:	687b      	ldr	r3, [r7, #4]
 802107c:	6a1b      	ldr	r3, [r3, #32]
 802107e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8021080:	687b      	ldr	r3, [r7, #4]
 8021082:	6a1b      	ldr	r3, [r3, #32]
 8021084:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8021088:	687b      	ldr	r3, [r7, #4]
 802108a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802108c:	687b      	ldr	r3, [r7, #4]
 802108e:	685b      	ldr	r3, [r3, #4]
 8021090:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8021092:	687b      	ldr	r3, [r7, #4]
 8021094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8021098:	68fa      	ldr	r2, [r7, #12]
 802109a:	4b22      	ldr	r3, [pc, #136]	@ (8021124 <TIM_OC6_SetConfig+0xb4>)
 802109c:	4013      	ands	r3, r2
 802109e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80210a0:	683b      	ldr	r3, [r7, #0]
 80210a2:	681b      	ldr	r3, [r3, #0]
 80210a4:	021b      	lsls	r3, r3, #8
 80210a6:	68fa      	ldr	r2, [r7, #12]
 80210a8:	4313      	orrs	r3, r2
 80210aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80210ac:	693b      	ldr	r3, [r7, #16]
 80210ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80210b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80210b4:	683b      	ldr	r3, [r7, #0]
 80210b6:	689b      	ldr	r3, [r3, #8]
 80210b8:	051b      	lsls	r3, r3, #20
 80210ba:	693a      	ldr	r2, [r7, #16]
 80210bc:	4313      	orrs	r3, r2
 80210be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80210c0:	687b      	ldr	r3, [r7, #4]
 80210c2:	4a19      	ldr	r2, [pc, #100]	@ (8021128 <TIM_OC6_SetConfig+0xb8>)
 80210c4:	4293      	cmp	r3, r2
 80210c6:	d00f      	beq.n	80210e8 <TIM_OC6_SetConfig+0x78>
 80210c8:	687b      	ldr	r3, [r7, #4]
 80210ca:	4a18      	ldr	r2, [pc, #96]	@ (802112c <TIM_OC6_SetConfig+0xbc>)
 80210cc:	4293      	cmp	r3, r2
 80210ce:	d00b      	beq.n	80210e8 <TIM_OC6_SetConfig+0x78>
 80210d0:	687b      	ldr	r3, [r7, #4]
 80210d2:	4a17      	ldr	r2, [pc, #92]	@ (8021130 <TIM_OC6_SetConfig+0xc0>)
 80210d4:	4293      	cmp	r3, r2
 80210d6:	d007      	beq.n	80210e8 <TIM_OC6_SetConfig+0x78>
 80210d8:	687b      	ldr	r3, [r7, #4]
 80210da:	4a16      	ldr	r2, [pc, #88]	@ (8021134 <TIM_OC6_SetConfig+0xc4>)
 80210dc:	4293      	cmp	r3, r2
 80210de:	d003      	beq.n	80210e8 <TIM_OC6_SetConfig+0x78>
 80210e0:	687b      	ldr	r3, [r7, #4]
 80210e2:	4a15      	ldr	r2, [pc, #84]	@ (8021138 <TIM_OC6_SetConfig+0xc8>)
 80210e4:	4293      	cmp	r3, r2
 80210e6:	d109      	bne.n	80210fc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80210e8:	697b      	ldr	r3, [r7, #20]
 80210ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80210ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80210f0:	683b      	ldr	r3, [r7, #0]
 80210f2:	695b      	ldr	r3, [r3, #20]
 80210f4:	029b      	lsls	r3, r3, #10
 80210f6:	697a      	ldr	r2, [r7, #20]
 80210f8:	4313      	orrs	r3, r2
 80210fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80210fc:	687b      	ldr	r3, [r7, #4]
 80210fe:	697a      	ldr	r2, [r7, #20]
 8021100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8021102:	687b      	ldr	r3, [r7, #4]
 8021104:	68fa      	ldr	r2, [r7, #12]
 8021106:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8021108:	683b      	ldr	r3, [r7, #0]
 802110a:	685a      	ldr	r2, [r3, #4]
 802110c:	687b      	ldr	r3, [r7, #4]
 802110e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8021110:	687b      	ldr	r3, [r7, #4]
 8021112:	693a      	ldr	r2, [r7, #16]
 8021114:	621a      	str	r2, [r3, #32]
}
 8021116:	bf00      	nop
 8021118:	371c      	adds	r7, #28
 802111a:	46bd      	mov	sp, r7
 802111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021120:	4770      	bx	lr
 8021122:	bf00      	nop
 8021124:	feff8fff 	.word	0xfeff8fff
 8021128:	40010000 	.word	0x40010000
 802112c:	40010400 	.word	0x40010400
 8021130:	40014000 	.word	0x40014000
 8021134:	40014400 	.word	0x40014400
 8021138:	40014800 	.word	0x40014800

0802113c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802113c:	b480      	push	{r7}
 802113e:	b087      	sub	sp, #28
 8021140:	af00      	add	r7, sp, #0
 8021142:	60f8      	str	r0, [r7, #12]
 8021144:	60b9      	str	r1, [r7, #8]
 8021146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8021148:	68fb      	ldr	r3, [r7, #12]
 802114a:	6a1b      	ldr	r3, [r3, #32]
 802114c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802114e:	68fb      	ldr	r3, [r7, #12]
 8021150:	6a1b      	ldr	r3, [r3, #32]
 8021152:	f023 0201 	bic.w	r2, r3, #1
 8021156:	68fb      	ldr	r3, [r7, #12]
 8021158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802115a:	68fb      	ldr	r3, [r7, #12]
 802115c:	699b      	ldr	r3, [r3, #24]
 802115e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8021160:	693b      	ldr	r3, [r7, #16]
 8021162:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8021166:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8021168:	687b      	ldr	r3, [r7, #4]
 802116a:	011b      	lsls	r3, r3, #4
 802116c:	693a      	ldr	r2, [r7, #16]
 802116e:	4313      	orrs	r3, r2
 8021170:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8021172:	697b      	ldr	r3, [r7, #20]
 8021174:	f023 030a 	bic.w	r3, r3, #10
 8021178:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 802117a:	697a      	ldr	r2, [r7, #20]
 802117c:	68bb      	ldr	r3, [r7, #8]
 802117e:	4313      	orrs	r3, r2
 8021180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8021182:	68fb      	ldr	r3, [r7, #12]
 8021184:	693a      	ldr	r2, [r7, #16]
 8021186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8021188:	68fb      	ldr	r3, [r7, #12]
 802118a:	697a      	ldr	r2, [r7, #20]
 802118c:	621a      	str	r2, [r3, #32]
}
 802118e:	bf00      	nop
 8021190:	371c      	adds	r7, #28
 8021192:	46bd      	mov	sp, r7
 8021194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021198:	4770      	bx	lr

0802119a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802119a:	b480      	push	{r7}
 802119c:	b087      	sub	sp, #28
 802119e:	af00      	add	r7, sp, #0
 80211a0:	60f8      	str	r0, [r7, #12]
 80211a2:	60b9      	str	r1, [r7, #8]
 80211a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80211a6:	68fb      	ldr	r3, [r7, #12]
 80211a8:	6a1b      	ldr	r3, [r3, #32]
 80211aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80211ac:	68fb      	ldr	r3, [r7, #12]
 80211ae:	6a1b      	ldr	r3, [r3, #32]
 80211b0:	f023 0210 	bic.w	r2, r3, #16
 80211b4:	68fb      	ldr	r3, [r7, #12]
 80211b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80211b8:	68fb      	ldr	r3, [r7, #12]
 80211ba:	699b      	ldr	r3, [r3, #24]
 80211bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80211be:	693b      	ldr	r3, [r7, #16]
 80211c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80211c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80211c6:	687b      	ldr	r3, [r7, #4]
 80211c8:	031b      	lsls	r3, r3, #12
 80211ca:	693a      	ldr	r2, [r7, #16]
 80211cc:	4313      	orrs	r3, r2
 80211ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80211d0:	697b      	ldr	r3, [r7, #20]
 80211d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80211d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80211d8:	68bb      	ldr	r3, [r7, #8]
 80211da:	011b      	lsls	r3, r3, #4
 80211dc:	697a      	ldr	r2, [r7, #20]
 80211de:	4313      	orrs	r3, r2
 80211e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80211e2:	68fb      	ldr	r3, [r7, #12]
 80211e4:	693a      	ldr	r2, [r7, #16]
 80211e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80211e8:	68fb      	ldr	r3, [r7, #12]
 80211ea:	697a      	ldr	r2, [r7, #20]
 80211ec:	621a      	str	r2, [r3, #32]
}
 80211ee:	bf00      	nop
 80211f0:	371c      	adds	r7, #28
 80211f2:	46bd      	mov	sp, r7
 80211f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211f8:	4770      	bx	lr
	...

080211fc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80211fc:	b480      	push	{r7}
 80211fe:	b085      	sub	sp, #20
 8021200:	af00      	add	r7, sp, #0
 8021202:	6078      	str	r0, [r7, #4]
 8021204:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8021206:	687b      	ldr	r3, [r7, #4]
 8021208:	689b      	ldr	r3, [r3, #8]
 802120a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 802120c:	68fa      	ldr	r2, [r7, #12]
 802120e:	4b09      	ldr	r3, [pc, #36]	@ (8021234 <TIM_ITRx_SetConfig+0x38>)
 8021210:	4013      	ands	r3, r2
 8021212:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8021214:	683a      	ldr	r2, [r7, #0]
 8021216:	68fb      	ldr	r3, [r7, #12]
 8021218:	4313      	orrs	r3, r2
 802121a:	f043 0307 	orr.w	r3, r3, #7
 802121e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8021220:	687b      	ldr	r3, [r7, #4]
 8021222:	68fa      	ldr	r2, [r7, #12]
 8021224:	609a      	str	r2, [r3, #8]
}
 8021226:	bf00      	nop
 8021228:	3714      	adds	r7, #20
 802122a:	46bd      	mov	sp, r7
 802122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021230:	4770      	bx	lr
 8021232:	bf00      	nop
 8021234:	ffcfff8f 	.word	0xffcfff8f

08021238 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8021238:	b480      	push	{r7}
 802123a:	b087      	sub	sp, #28
 802123c:	af00      	add	r7, sp, #0
 802123e:	60f8      	str	r0, [r7, #12]
 8021240:	60b9      	str	r1, [r7, #8]
 8021242:	607a      	str	r2, [r7, #4]
 8021244:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8021246:	68fb      	ldr	r3, [r7, #12]
 8021248:	689b      	ldr	r3, [r3, #8]
 802124a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802124c:	697b      	ldr	r3, [r7, #20]
 802124e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8021252:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8021254:	683b      	ldr	r3, [r7, #0]
 8021256:	021a      	lsls	r2, r3, #8
 8021258:	687b      	ldr	r3, [r7, #4]
 802125a:	431a      	orrs	r2, r3
 802125c:	68bb      	ldr	r3, [r7, #8]
 802125e:	4313      	orrs	r3, r2
 8021260:	697a      	ldr	r2, [r7, #20]
 8021262:	4313      	orrs	r3, r2
 8021264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8021266:	68fb      	ldr	r3, [r7, #12]
 8021268:	697a      	ldr	r2, [r7, #20]
 802126a:	609a      	str	r2, [r3, #8]
}
 802126c:	bf00      	nop
 802126e:	371c      	adds	r7, #28
 8021270:	46bd      	mov	sp, r7
 8021272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021276:	4770      	bx	lr

08021278 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8021278:	b480      	push	{r7}
 802127a:	b085      	sub	sp, #20
 802127c:	af00      	add	r7, sp, #0
 802127e:	6078      	str	r0, [r7, #4]
 8021280:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8021282:	687b      	ldr	r3, [r7, #4]
 8021284:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8021288:	2b01      	cmp	r3, #1
 802128a:	d101      	bne.n	8021290 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 802128c:	2302      	movs	r3, #2
 802128e:	e06d      	b.n	802136c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8021290:	687b      	ldr	r3, [r7, #4]
 8021292:	2201      	movs	r2, #1
 8021294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8021298:	687b      	ldr	r3, [r7, #4]
 802129a:	2202      	movs	r2, #2
 802129c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80212a0:	687b      	ldr	r3, [r7, #4]
 80212a2:	681b      	ldr	r3, [r3, #0]
 80212a4:	685b      	ldr	r3, [r3, #4]
 80212a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80212a8:	687b      	ldr	r3, [r7, #4]
 80212aa:	681b      	ldr	r3, [r3, #0]
 80212ac:	689b      	ldr	r3, [r3, #8]
 80212ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80212b0:	687b      	ldr	r3, [r7, #4]
 80212b2:	681b      	ldr	r3, [r3, #0]
 80212b4:	4a30      	ldr	r2, [pc, #192]	@ (8021378 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80212b6:	4293      	cmp	r3, r2
 80212b8:	d004      	beq.n	80212c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80212ba:	687b      	ldr	r3, [r7, #4]
 80212bc:	681b      	ldr	r3, [r3, #0]
 80212be:	4a2f      	ldr	r2, [pc, #188]	@ (802137c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80212c0:	4293      	cmp	r3, r2
 80212c2:	d108      	bne.n	80212d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80212c4:	68fb      	ldr	r3, [r7, #12]
 80212c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80212ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80212cc:	683b      	ldr	r3, [r7, #0]
 80212ce:	685b      	ldr	r3, [r3, #4]
 80212d0:	68fa      	ldr	r2, [r7, #12]
 80212d2:	4313      	orrs	r3, r2
 80212d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80212d6:	68fb      	ldr	r3, [r7, #12]
 80212d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80212dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80212de:	683b      	ldr	r3, [r7, #0]
 80212e0:	681b      	ldr	r3, [r3, #0]
 80212e2:	68fa      	ldr	r2, [r7, #12]
 80212e4:	4313      	orrs	r3, r2
 80212e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80212e8:	687b      	ldr	r3, [r7, #4]
 80212ea:	681b      	ldr	r3, [r3, #0]
 80212ec:	68fa      	ldr	r2, [r7, #12]
 80212ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80212f0:	687b      	ldr	r3, [r7, #4]
 80212f2:	681b      	ldr	r3, [r3, #0]
 80212f4:	4a20      	ldr	r2, [pc, #128]	@ (8021378 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80212f6:	4293      	cmp	r3, r2
 80212f8:	d022      	beq.n	8021340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80212fa:	687b      	ldr	r3, [r7, #4]
 80212fc:	681b      	ldr	r3, [r3, #0]
 80212fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8021302:	d01d      	beq.n	8021340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8021304:	687b      	ldr	r3, [r7, #4]
 8021306:	681b      	ldr	r3, [r3, #0]
 8021308:	4a1d      	ldr	r2, [pc, #116]	@ (8021380 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 802130a:	4293      	cmp	r3, r2
 802130c:	d018      	beq.n	8021340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802130e:	687b      	ldr	r3, [r7, #4]
 8021310:	681b      	ldr	r3, [r3, #0]
 8021312:	4a1c      	ldr	r2, [pc, #112]	@ (8021384 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8021314:	4293      	cmp	r3, r2
 8021316:	d013      	beq.n	8021340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8021318:	687b      	ldr	r3, [r7, #4]
 802131a:	681b      	ldr	r3, [r3, #0]
 802131c:	4a1a      	ldr	r2, [pc, #104]	@ (8021388 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 802131e:	4293      	cmp	r3, r2
 8021320:	d00e      	beq.n	8021340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8021322:	687b      	ldr	r3, [r7, #4]
 8021324:	681b      	ldr	r3, [r3, #0]
 8021326:	4a15      	ldr	r2, [pc, #84]	@ (802137c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8021328:	4293      	cmp	r3, r2
 802132a:	d009      	beq.n	8021340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802132c:	687b      	ldr	r3, [r7, #4]
 802132e:	681b      	ldr	r3, [r3, #0]
 8021330:	4a16      	ldr	r2, [pc, #88]	@ (802138c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8021332:	4293      	cmp	r3, r2
 8021334:	d004      	beq.n	8021340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8021336:	687b      	ldr	r3, [r7, #4]
 8021338:	681b      	ldr	r3, [r3, #0]
 802133a:	4a15      	ldr	r2, [pc, #84]	@ (8021390 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 802133c:	4293      	cmp	r3, r2
 802133e:	d10c      	bne.n	802135a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8021340:	68bb      	ldr	r3, [r7, #8]
 8021342:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8021346:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8021348:	683b      	ldr	r3, [r7, #0]
 802134a:	689b      	ldr	r3, [r3, #8]
 802134c:	68ba      	ldr	r2, [r7, #8]
 802134e:	4313      	orrs	r3, r2
 8021350:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8021352:	687b      	ldr	r3, [r7, #4]
 8021354:	681b      	ldr	r3, [r3, #0]
 8021356:	68ba      	ldr	r2, [r7, #8]
 8021358:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802135a:	687b      	ldr	r3, [r7, #4]
 802135c:	2201      	movs	r2, #1
 802135e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8021362:	687b      	ldr	r3, [r7, #4]
 8021364:	2200      	movs	r2, #0
 8021366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 802136a:	2300      	movs	r3, #0
}
 802136c:	4618      	mov	r0, r3
 802136e:	3714      	adds	r7, #20
 8021370:	46bd      	mov	sp, r7
 8021372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021376:	4770      	bx	lr
 8021378:	40010000 	.word	0x40010000
 802137c:	40010400 	.word	0x40010400
 8021380:	40000400 	.word	0x40000400
 8021384:	40000800 	.word	0x40000800
 8021388:	40000c00 	.word	0x40000c00
 802138c:	40001800 	.word	0x40001800
 8021390:	40014000 	.word	0x40014000

08021394 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8021394:	b580      	push	{r7, lr}
 8021396:	b082      	sub	sp, #8
 8021398:	af00      	add	r7, sp, #0
 802139a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802139c:	687b      	ldr	r3, [r7, #4]
 802139e:	2b00      	cmp	r3, #0
 80213a0:	d101      	bne.n	80213a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80213a2:	2301      	movs	r3, #1
 80213a4:	e042      	b.n	802142c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80213a6:	687b      	ldr	r3, [r7, #4]
 80213a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80213ac:	2b00      	cmp	r3, #0
 80213ae:	d106      	bne.n	80213be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80213b0:	687b      	ldr	r3, [r7, #4]
 80213b2:	2200      	movs	r2, #0
 80213b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80213b8:	6878      	ldr	r0, [r7, #4]
 80213ba:	f7e1 fd05 	bl	8002dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80213be:	687b      	ldr	r3, [r7, #4]
 80213c0:	2224      	movs	r2, #36	@ 0x24
 80213c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80213c6:	687b      	ldr	r3, [r7, #4]
 80213c8:	681b      	ldr	r3, [r3, #0]
 80213ca:	681a      	ldr	r2, [r3, #0]
 80213cc:	687b      	ldr	r3, [r7, #4]
 80213ce:	681b      	ldr	r3, [r3, #0]
 80213d0:	f022 0201 	bic.w	r2, r2, #1
 80213d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80213d6:	687b      	ldr	r3, [r7, #4]
 80213d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80213da:	2b00      	cmp	r3, #0
 80213dc:	d002      	beq.n	80213e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80213de:	6878      	ldr	r0, [r7, #4]
 80213e0:	f000 fd90 	bl	8021f04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80213e4:	6878      	ldr	r0, [r7, #4]
 80213e6:	f000 f825 	bl	8021434 <UART_SetConfig>
 80213ea:	4603      	mov	r3, r0
 80213ec:	2b01      	cmp	r3, #1
 80213ee:	d101      	bne.n	80213f4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80213f0:	2301      	movs	r3, #1
 80213f2:	e01b      	b.n	802142c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80213f4:	687b      	ldr	r3, [r7, #4]
 80213f6:	681b      	ldr	r3, [r3, #0]
 80213f8:	685a      	ldr	r2, [r3, #4]
 80213fa:	687b      	ldr	r3, [r7, #4]
 80213fc:	681b      	ldr	r3, [r3, #0]
 80213fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8021402:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8021404:	687b      	ldr	r3, [r7, #4]
 8021406:	681b      	ldr	r3, [r3, #0]
 8021408:	689a      	ldr	r2, [r3, #8]
 802140a:	687b      	ldr	r3, [r7, #4]
 802140c:	681b      	ldr	r3, [r3, #0]
 802140e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8021412:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8021414:	687b      	ldr	r3, [r7, #4]
 8021416:	681b      	ldr	r3, [r3, #0]
 8021418:	681a      	ldr	r2, [r3, #0]
 802141a:	687b      	ldr	r3, [r7, #4]
 802141c:	681b      	ldr	r3, [r3, #0]
 802141e:	f042 0201 	orr.w	r2, r2, #1
 8021422:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8021424:	6878      	ldr	r0, [r7, #4]
 8021426:	f000 fe0f 	bl	8022048 <UART_CheckIdleState>
 802142a:	4603      	mov	r3, r0
}
 802142c:	4618      	mov	r0, r3
 802142e:	3708      	adds	r7, #8
 8021430:	46bd      	mov	sp, r7
 8021432:	bd80      	pop	{r7, pc}

08021434 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8021434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8021438:	b092      	sub	sp, #72	@ 0x48
 802143a:	af00      	add	r7, sp, #0
 802143c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 802143e:	2300      	movs	r3, #0
 8021440:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8021444:	697b      	ldr	r3, [r7, #20]
 8021446:	689a      	ldr	r2, [r3, #8]
 8021448:	697b      	ldr	r3, [r7, #20]
 802144a:	691b      	ldr	r3, [r3, #16]
 802144c:	431a      	orrs	r2, r3
 802144e:	697b      	ldr	r3, [r7, #20]
 8021450:	695b      	ldr	r3, [r3, #20]
 8021452:	431a      	orrs	r2, r3
 8021454:	697b      	ldr	r3, [r7, #20]
 8021456:	69db      	ldr	r3, [r3, #28]
 8021458:	4313      	orrs	r3, r2
 802145a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 802145c:	697b      	ldr	r3, [r7, #20]
 802145e:	681b      	ldr	r3, [r3, #0]
 8021460:	681a      	ldr	r2, [r3, #0]
 8021462:	4bbe      	ldr	r3, [pc, #760]	@ (802175c <UART_SetConfig+0x328>)
 8021464:	4013      	ands	r3, r2
 8021466:	697a      	ldr	r2, [r7, #20]
 8021468:	6812      	ldr	r2, [r2, #0]
 802146a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 802146c:	430b      	orrs	r3, r1
 802146e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8021470:	697b      	ldr	r3, [r7, #20]
 8021472:	681b      	ldr	r3, [r3, #0]
 8021474:	685b      	ldr	r3, [r3, #4]
 8021476:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 802147a:	697b      	ldr	r3, [r7, #20]
 802147c:	68da      	ldr	r2, [r3, #12]
 802147e:	697b      	ldr	r3, [r7, #20]
 8021480:	681b      	ldr	r3, [r3, #0]
 8021482:	430a      	orrs	r2, r1
 8021484:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8021486:	697b      	ldr	r3, [r7, #20]
 8021488:	699b      	ldr	r3, [r3, #24]
 802148a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 802148c:	697b      	ldr	r3, [r7, #20]
 802148e:	681b      	ldr	r3, [r3, #0]
 8021490:	4ab3      	ldr	r2, [pc, #716]	@ (8021760 <UART_SetConfig+0x32c>)
 8021492:	4293      	cmp	r3, r2
 8021494:	d004      	beq.n	80214a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8021496:	697b      	ldr	r3, [r7, #20]
 8021498:	6a1b      	ldr	r3, [r3, #32]
 802149a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802149c:	4313      	orrs	r3, r2
 802149e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80214a0:	697b      	ldr	r3, [r7, #20]
 80214a2:	681b      	ldr	r3, [r3, #0]
 80214a4:	689a      	ldr	r2, [r3, #8]
 80214a6:	4baf      	ldr	r3, [pc, #700]	@ (8021764 <UART_SetConfig+0x330>)
 80214a8:	4013      	ands	r3, r2
 80214aa:	697a      	ldr	r2, [r7, #20]
 80214ac:	6812      	ldr	r2, [r2, #0]
 80214ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80214b0:	430b      	orrs	r3, r1
 80214b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80214b4:	697b      	ldr	r3, [r7, #20]
 80214b6:	681b      	ldr	r3, [r3, #0]
 80214b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80214ba:	f023 010f 	bic.w	r1, r3, #15
 80214be:	697b      	ldr	r3, [r7, #20]
 80214c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80214c2:	697b      	ldr	r3, [r7, #20]
 80214c4:	681b      	ldr	r3, [r3, #0]
 80214c6:	430a      	orrs	r2, r1
 80214c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80214ca:	697b      	ldr	r3, [r7, #20]
 80214cc:	681b      	ldr	r3, [r3, #0]
 80214ce:	4aa6      	ldr	r2, [pc, #664]	@ (8021768 <UART_SetConfig+0x334>)
 80214d0:	4293      	cmp	r3, r2
 80214d2:	d177      	bne.n	80215c4 <UART_SetConfig+0x190>
 80214d4:	4ba5      	ldr	r3, [pc, #660]	@ (802176c <UART_SetConfig+0x338>)
 80214d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80214d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80214dc:	2b28      	cmp	r3, #40	@ 0x28
 80214de:	d86d      	bhi.n	80215bc <UART_SetConfig+0x188>
 80214e0:	a201      	add	r2, pc, #4	@ (adr r2, 80214e8 <UART_SetConfig+0xb4>)
 80214e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80214e6:	bf00      	nop
 80214e8:	0802158d 	.word	0x0802158d
 80214ec:	080215bd 	.word	0x080215bd
 80214f0:	080215bd 	.word	0x080215bd
 80214f4:	080215bd 	.word	0x080215bd
 80214f8:	080215bd 	.word	0x080215bd
 80214fc:	080215bd 	.word	0x080215bd
 8021500:	080215bd 	.word	0x080215bd
 8021504:	080215bd 	.word	0x080215bd
 8021508:	08021595 	.word	0x08021595
 802150c:	080215bd 	.word	0x080215bd
 8021510:	080215bd 	.word	0x080215bd
 8021514:	080215bd 	.word	0x080215bd
 8021518:	080215bd 	.word	0x080215bd
 802151c:	080215bd 	.word	0x080215bd
 8021520:	080215bd 	.word	0x080215bd
 8021524:	080215bd 	.word	0x080215bd
 8021528:	0802159d 	.word	0x0802159d
 802152c:	080215bd 	.word	0x080215bd
 8021530:	080215bd 	.word	0x080215bd
 8021534:	080215bd 	.word	0x080215bd
 8021538:	080215bd 	.word	0x080215bd
 802153c:	080215bd 	.word	0x080215bd
 8021540:	080215bd 	.word	0x080215bd
 8021544:	080215bd 	.word	0x080215bd
 8021548:	080215a5 	.word	0x080215a5
 802154c:	080215bd 	.word	0x080215bd
 8021550:	080215bd 	.word	0x080215bd
 8021554:	080215bd 	.word	0x080215bd
 8021558:	080215bd 	.word	0x080215bd
 802155c:	080215bd 	.word	0x080215bd
 8021560:	080215bd 	.word	0x080215bd
 8021564:	080215bd 	.word	0x080215bd
 8021568:	080215ad 	.word	0x080215ad
 802156c:	080215bd 	.word	0x080215bd
 8021570:	080215bd 	.word	0x080215bd
 8021574:	080215bd 	.word	0x080215bd
 8021578:	080215bd 	.word	0x080215bd
 802157c:	080215bd 	.word	0x080215bd
 8021580:	080215bd 	.word	0x080215bd
 8021584:	080215bd 	.word	0x080215bd
 8021588:	080215b5 	.word	0x080215b5
 802158c:	2301      	movs	r3, #1
 802158e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021592:	e222      	b.n	80219da <UART_SetConfig+0x5a6>
 8021594:	2304      	movs	r3, #4
 8021596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802159a:	e21e      	b.n	80219da <UART_SetConfig+0x5a6>
 802159c:	2308      	movs	r3, #8
 802159e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80215a2:	e21a      	b.n	80219da <UART_SetConfig+0x5a6>
 80215a4:	2310      	movs	r3, #16
 80215a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80215aa:	e216      	b.n	80219da <UART_SetConfig+0x5a6>
 80215ac:	2320      	movs	r3, #32
 80215ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80215b2:	e212      	b.n	80219da <UART_SetConfig+0x5a6>
 80215b4:	2340      	movs	r3, #64	@ 0x40
 80215b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80215ba:	e20e      	b.n	80219da <UART_SetConfig+0x5a6>
 80215bc:	2380      	movs	r3, #128	@ 0x80
 80215be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80215c2:	e20a      	b.n	80219da <UART_SetConfig+0x5a6>
 80215c4:	697b      	ldr	r3, [r7, #20]
 80215c6:	681b      	ldr	r3, [r3, #0]
 80215c8:	4a69      	ldr	r2, [pc, #420]	@ (8021770 <UART_SetConfig+0x33c>)
 80215ca:	4293      	cmp	r3, r2
 80215cc:	d130      	bne.n	8021630 <UART_SetConfig+0x1fc>
 80215ce:	4b67      	ldr	r3, [pc, #412]	@ (802176c <UART_SetConfig+0x338>)
 80215d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80215d2:	f003 0307 	and.w	r3, r3, #7
 80215d6:	2b05      	cmp	r3, #5
 80215d8:	d826      	bhi.n	8021628 <UART_SetConfig+0x1f4>
 80215da:	a201      	add	r2, pc, #4	@ (adr r2, 80215e0 <UART_SetConfig+0x1ac>)
 80215dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80215e0:	080215f9 	.word	0x080215f9
 80215e4:	08021601 	.word	0x08021601
 80215e8:	08021609 	.word	0x08021609
 80215ec:	08021611 	.word	0x08021611
 80215f0:	08021619 	.word	0x08021619
 80215f4:	08021621 	.word	0x08021621
 80215f8:	2300      	movs	r3, #0
 80215fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80215fe:	e1ec      	b.n	80219da <UART_SetConfig+0x5a6>
 8021600:	2304      	movs	r3, #4
 8021602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021606:	e1e8      	b.n	80219da <UART_SetConfig+0x5a6>
 8021608:	2308      	movs	r3, #8
 802160a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802160e:	e1e4      	b.n	80219da <UART_SetConfig+0x5a6>
 8021610:	2310      	movs	r3, #16
 8021612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021616:	e1e0      	b.n	80219da <UART_SetConfig+0x5a6>
 8021618:	2320      	movs	r3, #32
 802161a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802161e:	e1dc      	b.n	80219da <UART_SetConfig+0x5a6>
 8021620:	2340      	movs	r3, #64	@ 0x40
 8021622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021626:	e1d8      	b.n	80219da <UART_SetConfig+0x5a6>
 8021628:	2380      	movs	r3, #128	@ 0x80
 802162a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802162e:	e1d4      	b.n	80219da <UART_SetConfig+0x5a6>
 8021630:	697b      	ldr	r3, [r7, #20]
 8021632:	681b      	ldr	r3, [r3, #0]
 8021634:	4a4f      	ldr	r2, [pc, #316]	@ (8021774 <UART_SetConfig+0x340>)
 8021636:	4293      	cmp	r3, r2
 8021638:	d130      	bne.n	802169c <UART_SetConfig+0x268>
 802163a:	4b4c      	ldr	r3, [pc, #304]	@ (802176c <UART_SetConfig+0x338>)
 802163c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802163e:	f003 0307 	and.w	r3, r3, #7
 8021642:	2b05      	cmp	r3, #5
 8021644:	d826      	bhi.n	8021694 <UART_SetConfig+0x260>
 8021646:	a201      	add	r2, pc, #4	@ (adr r2, 802164c <UART_SetConfig+0x218>)
 8021648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802164c:	08021665 	.word	0x08021665
 8021650:	0802166d 	.word	0x0802166d
 8021654:	08021675 	.word	0x08021675
 8021658:	0802167d 	.word	0x0802167d
 802165c:	08021685 	.word	0x08021685
 8021660:	0802168d 	.word	0x0802168d
 8021664:	2300      	movs	r3, #0
 8021666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802166a:	e1b6      	b.n	80219da <UART_SetConfig+0x5a6>
 802166c:	2304      	movs	r3, #4
 802166e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021672:	e1b2      	b.n	80219da <UART_SetConfig+0x5a6>
 8021674:	2308      	movs	r3, #8
 8021676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802167a:	e1ae      	b.n	80219da <UART_SetConfig+0x5a6>
 802167c:	2310      	movs	r3, #16
 802167e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021682:	e1aa      	b.n	80219da <UART_SetConfig+0x5a6>
 8021684:	2320      	movs	r3, #32
 8021686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802168a:	e1a6      	b.n	80219da <UART_SetConfig+0x5a6>
 802168c:	2340      	movs	r3, #64	@ 0x40
 802168e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021692:	e1a2      	b.n	80219da <UART_SetConfig+0x5a6>
 8021694:	2380      	movs	r3, #128	@ 0x80
 8021696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802169a:	e19e      	b.n	80219da <UART_SetConfig+0x5a6>
 802169c:	697b      	ldr	r3, [r7, #20]
 802169e:	681b      	ldr	r3, [r3, #0]
 80216a0:	4a35      	ldr	r2, [pc, #212]	@ (8021778 <UART_SetConfig+0x344>)
 80216a2:	4293      	cmp	r3, r2
 80216a4:	d130      	bne.n	8021708 <UART_SetConfig+0x2d4>
 80216a6:	4b31      	ldr	r3, [pc, #196]	@ (802176c <UART_SetConfig+0x338>)
 80216a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80216aa:	f003 0307 	and.w	r3, r3, #7
 80216ae:	2b05      	cmp	r3, #5
 80216b0:	d826      	bhi.n	8021700 <UART_SetConfig+0x2cc>
 80216b2:	a201      	add	r2, pc, #4	@ (adr r2, 80216b8 <UART_SetConfig+0x284>)
 80216b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80216b8:	080216d1 	.word	0x080216d1
 80216bc:	080216d9 	.word	0x080216d9
 80216c0:	080216e1 	.word	0x080216e1
 80216c4:	080216e9 	.word	0x080216e9
 80216c8:	080216f1 	.word	0x080216f1
 80216cc:	080216f9 	.word	0x080216f9
 80216d0:	2300      	movs	r3, #0
 80216d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80216d6:	e180      	b.n	80219da <UART_SetConfig+0x5a6>
 80216d8:	2304      	movs	r3, #4
 80216da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80216de:	e17c      	b.n	80219da <UART_SetConfig+0x5a6>
 80216e0:	2308      	movs	r3, #8
 80216e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80216e6:	e178      	b.n	80219da <UART_SetConfig+0x5a6>
 80216e8:	2310      	movs	r3, #16
 80216ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80216ee:	e174      	b.n	80219da <UART_SetConfig+0x5a6>
 80216f0:	2320      	movs	r3, #32
 80216f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80216f6:	e170      	b.n	80219da <UART_SetConfig+0x5a6>
 80216f8:	2340      	movs	r3, #64	@ 0x40
 80216fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80216fe:	e16c      	b.n	80219da <UART_SetConfig+0x5a6>
 8021700:	2380      	movs	r3, #128	@ 0x80
 8021702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021706:	e168      	b.n	80219da <UART_SetConfig+0x5a6>
 8021708:	697b      	ldr	r3, [r7, #20]
 802170a:	681b      	ldr	r3, [r3, #0]
 802170c:	4a1b      	ldr	r2, [pc, #108]	@ (802177c <UART_SetConfig+0x348>)
 802170e:	4293      	cmp	r3, r2
 8021710:	d142      	bne.n	8021798 <UART_SetConfig+0x364>
 8021712:	4b16      	ldr	r3, [pc, #88]	@ (802176c <UART_SetConfig+0x338>)
 8021714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021716:	f003 0307 	and.w	r3, r3, #7
 802171a:	2b05      	cmp	r3, #5
 802171c:	d838      	bhi.n	8021790 <UART_SetConfig+0x35c>
 802171e:	a201      	add	r2, pc, #4	@ (adr r2, 8021724 <UART_SetConfig+0x2f0>)
 8021720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021724:	0802173d 	.word	0x0802173d
 8021728:	08021745 	.word	0x08021745
 802172c:	0802174d 	.word	0x0802174d
 8021730:	08021755 	.word	0x08021755
 8021734:	08021781 	.word	0x08021781
 8021738:	08021789 	.word	0x08021789
 802173c:	2300      	movs	r3, #0
 802173e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021742:	e14a      	b.n	80219da <UART_SetConfig+0x5a6>
 8021744:	2304      	movs	r3, #4
 8021746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802174a:	e146      	b.n	80219da <UART_SetConfig+0x5a6>
 802174c:	2308      	movs	r3, #8
 802174e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021752:	e142      	b.n	80219da <UART_SetConfig+0x5a6>
 8021754:	2310      	movs	r3, #16
 8021756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802175a:	e13e      	b.n	80219da <UART_SetConfig+0x5a6>
 802175c:	cfff69f3 	.word	0xcfff69f3
 8021760:	58000c00 	.word	0x58000c00
 8021764:	11fff4ff 	.word	0x11fff4ff
 8021768:	40011000 	.word	0x40011000
 802176c:	58024400 	.word	0x58024400
 8021770:	40004400 	.word	0x40004400
 8021774:	40004800 	.word	0x40004800
 8021778:	40004c00 	.word	0x40004c00
 802177c:	40005000 	.word	0x40005000
 8021780:	2320      	movs	r3, #32
 8021782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021786:	e128      	b.n	80219da <UART_SetConfig+0x5a6>
 8021788:	2340      	movs	r3, #64	@ 0x40
 802178a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802178e:	e124      	b.n	80219da <UART_SetConfig+0x5a6>
 8021790:	2380      	movs	r3, #128	@ 0x80
 8021792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021796:	e120      	b.n	80219da <UART_SetConfig+0x5a6>
 8021798:	697b      	ldr	r3, [r7, #20]
 802179a:	681b      	ldr	r3, [r3, #0]
 802179c:	4acb      	ldr	r2, [pc, #812]	@ (8021acc <UART_SetConfig+0x698>)
 802179e:	4293      	cmp	r3, r2
 80217a0:	d176      	bne.n	8021890 <UART_SetConfig+0x45c>
 80217a2:	4bcb      	ldr	r3, [pc, #812]	@ (8021ad0 <UART_SetConfig+0x69c>)
 80217a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80217a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80217aa:	2b28      	cmp	r3, #40	@ 0x28
 80217ac:	d86c      	bhi.n	8021888 <UART_SetConfig+0x454>
 80217ae:	a201      	add	r2, pc, #4	@ (adr r2, 80217b4 <UART_SetConfig+0x380>)
 80217b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80217b4:	08021859 	.word	0x08021859
 80217b8:	08021889 	.word	0x08021889
 80217bc:	08021889 	.word	0x08021889
 80217c0:	08021889 	.word	0x08021889
 80217c4:	08021889 	.word	0x08021889
 80217c8:	08021889 	.word	0x08021889
 80217cc:	08021889 	.word	0x08021889
 80217d0:	08021889 	.word	0x08021889
 80217d4:	08021861 	.word	0x08021861
 80217d8:	08021889 	.word	0x08021889
 80217dc:	08021889 	.word	0x08021889
 80217e0:	08021889 	.word	0x08021889
 80217e4:	08021889 	.word	0x08021889
 80217e8:	08021889 	.word	0x08021889
 80217ec:	08021889 	.word	0x08021889
 80217f0:	08021889 	.word	0x08021889
 80217f4:	08021869 	.word	0x08021869
 80217f8:	08021889 	.word	0x08021889
 80217fc:	08021889 	.word	0x08021889
 8021800:	08021889 	.word	0x08021889
 8021804:	08021889 	.word	0x08021889
 8021808:	08021889 	.word	0x08021889
 802180c:	08021889 	.word	0x08021889
 8021810:	08021889 	.word	0x08021889
 8021814:	08021871 	.word	0x08021871
 8021818:	08021889 	.word	0x08021889
 802181c:	08021889 	.word	0x08021889
 8021820:	08021889 	.word	0x08021889
 8021824:	08021889 	.word	0x08021889
 8021828:	08021889 	.word	0x08021889
 802182c:	08021889 	.word	0x08021889
 8021830:	08021889 	.word	0x08021889
 8021834:	08021879 	.word	0x08021879
 8021838:	08021889 	.word	0x08021889
 802183c:	08021889 	.word	0x08021889
 8021840:	08021889 	.word	0x08021889
 8021844:	08021889 	.word	0x08021889
 8021848:	08021889 	.word	0x08021889
 802184c:	08021889 	.word	0x08021889
 8021850:	08021889 	.word	0x08021889
 8021854:	08021881 	.word	0x08021881
 8021858:	2301      	movs	r3, #1
 802185a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802185e:	e0bc      	b.n	80219da <UART_SetConfig+0x5a6>
 8021860:	2304      	movs	r3, #4
 8021862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021866:	e0b8      	b.n	80219da <UART_SetConfig+0x5a6>
 8021868:	2308      	movs	r3, #8
 802186a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802186e:	e0b4      	b.n	80219da <UART_SetConfig+0x5a6>
 8021870:	2310      	movs	r3, #16
 8021872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021876:	e0b0      	b.n	80219da <UART_SetConfig+0x5a6>
 8021878:	2320      	movs	r3, #32
 802187a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802187e:	e0ac      	b.n	80219da <UART_SetConfig+0x5a6>
 8021880:	2340      	movs	r3, #64	@ 0x40
 8021882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021886:	e0a8      	b.n	80219da <UART_SetConfig+0x5a6>
 8021888:	2380      	movs	r3, #128	@ 0x80
 802188a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802188e:	e0a4      	b.n	80219da <UART_SetConfig+0x5a6>
 8021890:	697b      	ldr	r3, [r7, #20]
 8021892:	681b      	ldr	r3, [r3, #0]
 8021894:	4a8f      	ldr	r2, [pc, #572]	@ (8021ad4 <UART_SetConfig+0x6a0>)
 8021896:	4293      	cmp	r3, r2
 8021898:	d130      	bne.n	80218fc <UART_SetConfig+0x4c8>
 802189a:	4b8d      	ldr	r3, [pc, #564]	@ (8021ad0 <UART_SetConfig+0x69c>)
 802189c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802189e:	f003 0307 	and.w	r3, r3, #7
 80218a2:	2b05      	cmp	r3, #5
 80218a4:	d826      	bhi.n	80218f4 <UART_SetConfig+0x4c0>
 80218a6:	a201      	add	r2, pc, #4	@ (adr r2, 80218ac <UART_SetConfig+0x478>)
 80218a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80218ac:	080218c5 	.word	0x080218c5
 80218b0:	080218cd 	.word	0x080218cd
 80218b4:	080218d5 	.word	0x080218d5
 80218b8:	080218dd 	.word	0x080218dd
 80218bc:	080218e5 	.word	0x080218e5
 80218c0:	080218ed 	.word	0x080218ed
 80218c4:	2300      	movs	r3, #0
 80218c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80218ca:	e086      	b.n	80219da <UART_SetConfig+0x5a6>
 80218cc:	2304      	movs	r3, #4
 80218ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80218d2:	e082      	b.n	80219da <UART_SetConfig+0x5a6>
 80218d4:	2308      	movs	r3, #8
 80218d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80218da:	e07e      	b.n	80219da <UART_SetConfig+0x5a6>
 80218dc:	2310      	movs	r3, #16
 80218de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80218e2:	e07a      	b.n	80219da <UART_SetConfig+0x5a6>
 80218e4:	2320      	movs	r3, #32
 80218e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80218ea:	e076      	b.n	80219da <UART_SetConfig+0x5a6>
 80218ec:	2340      	movs	r3, #64	@ 0x40
 80218ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80218f2:	e072      	b.n	80219da <UART_SetConfig+0x5a6>
 80218f4:	2380      	movs	r3, #128	@ 0x80
 80218f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80218fa:	e06e      	b.n	80219da <UART_SetConfig+0x5a6>
 80218fc:	697b      	ldr	r3, [r7, #20]
 80218fe:	681b      	ldr	r3, [r3, #0]
 8021900:	4a75      	ldr	r2, [pc, #468]	@ (8021ad8 <UART_SetConfig+0x6a4>)
 8021902:	4293      	cmp	r3, r2
 8021904:	d130      	bne.n	8021968 <UART_SetConfig+0x534>
 8021906:	4b72      	ldr	r3, [pc, #456]	@ (8021ad0 <UART_SetConfig+0x69c>)
 8021908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802190a:	f003 0307 	and.w	r3, r3, #7
 802190e:	2b05      	cmp	r3, #5
 8021910:	d826      	bhi.n	8021960 <UART_SetConfig+0x52c>
 8021912:	a201      	add	r2, pc, #4	@ (adr r2, 8021918 <UART_SetConfig+0x4e4>)
 8021914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021918:	08021931 	.word	0x08021931
 802191c:	08021939 	.word	0x08021939
 8021920:	08021941 	.word	0x08021941
 8021924:	08021949 	.word	0x08021949
 8021928:	08021951 	.word	0x08021951
 802192c:	08021959 	.word	0x08021959
 8021930:	2300      	movs	r3, #0
 8021932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021936:	e050      	b.n	80219da <UART_SetConfig+0x5a6>
 8021938:	2304      	movs	r3, #4
 802193a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802193e:	e04c      	b.n	80219da <UART_SetConfig+0x5a6>
 8021940:	2308      	movs	r3, #8
 8021942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021946:	e048      	b.n	80219da <UART_SetConfig+0x5a6>
 8021948:	2310      	movs	r3, #16
 802194a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802194e:	e044      	b.n	80219da <UART_SetConfig+0x5a6>
 8021950:	2320      	movs	r3, #32
 8021952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021956:	e040      	b.n	80219da <UART_SetConfig+0x5a6>
 8021958:	2340      	movs	r3, #64	@ 0x40
 802195a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802195e:	e03c      	b.n	80219da <UART_SetConfig+0x5a6>
 8021960:	2380      	movs	r3, #128	@ 0x80
 8021962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021966:	e038      	b.n	80219da <UART_SetConfig+0x5a6>
 8021968:	697b      	ldr	r3, [r7, #20]
 802196a:	681b      	ldr	r3, [r3, #0]
 802196c:	4a5b      	ldr	r2, [pc, #364]	@ (8021adc <UART_SetConfig+0x6a8>)
 802196e:	4293      	cmp	r3, r2
 8021970:	d130      	bne.n	80219d4 <UART_SetConfig+0x5a0>
 8021972:	4b57      	ldr	r3, [pc, #348]	@ (8021ad0 <UART_SetConfig+0x69c>)
 8021974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021976:	f003 0307 	and.w	r3, r3, #7
 802197a:	2b05      	cmp	r3, #5
 802197c:	d826      	bhi.n	80219cc <UART_SetConfig+0x598>
 802197e:	a201      	add	r2, pc, #4	@ (adr r2, 8021984 <UART_SetConfig+0x550>)
 8021980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021984:	0802199d 	.word	0x0802199d
 8021988:	080219a5 	.word	0x080219a5
 802198c:	080219ad 	.word	0x080219ad
 8021990:	080219b5 	.word	0x080219b5
 8021994:	080219bd 	.word	0x080219bd
 8021998:	080219c5 	.word	0x080219c5
 802199c:	2302      	movs	r3, #2
 802199e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80219a2:	e01a      	b.n	80219da <UART_SetConfig+0x5a6>
 80219a4:	2304      	movs	r3, #4
 80219a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80219aa:	e016      	b.n	80219da <UART_SetConfig+0x5a6>
 80219ac:	2308      	movs	r3, #8
 80219ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80219b2:	e012      	b.n	80219da <UART_SetConfig+0x5a6>
 80219b4:	2310      	movs	r3, #16
 80219b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80219ba:	e00e      	b.n	80219da <UART_SetConfig+0x5a6>
 80219bc:	2320      	movs	r3, #32
 80219be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80219c2:	e00a      	b.n	80219da <UART_SetConfig+0x5a6>
 80219c4:	2340      	movs	r3, #64	@ 0x40
 80219c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80219ca:	e006      	b.n	80219da <UART_SetConfig+0x5a6>
 80219cc:	2380      	movs	r3, #128	@ 0x80
 80219ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80219d2:	e002      	b.n	80219da <UART_SetConfig+0x5a6>
 80219d4:	2380      	movs	r3, #128	@ 0x80
 80219d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80219da:	697b      	ldr	r3, [r7, #20]
 80219dc:	681b      	ldr	r3, [r3, #0]
 80219de:	4a3f      	ldr	r2, [pc, #252]	@ (8021adc <UART_SetConfig+0x6a8>)
 80219e0:	4293      	cmp	r3, r2
 80219e2:	f040 80f8 	bne.w	8021bd6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80219e6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80219ea:	2b20      	cmp	r3, #32
 80219ec:	dc46      	bgt.n	8021a7c <UART_SetConfig+0x648>
 80219ee:	2b02      	cmp	r3, #2
 80219f0:	f2c0 8082 	blt.w	8021af8 <UART_SetConfig+0x6c4>
 80219f4:	3b02      	subs	r3, #2
 80219f6:	2b1e      	cmp	r3, #30
 80219f8:	d87e      	bhi.n	8021af8 <UART_SetConfig+0x6c4>
 80219fa:	a201      	add	r2, pc, #4	@ (adr r2, 8021a00 <UART_SetConfig+0x5cc>)
 80219fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021a00:	08021a83 	.word	0x08021a83
 8021a04:	08021af9 	.word	0x08021af9
 8021a08:	08021a8b 	.word	0x08021a8b
 8021a0c:	08021af9 	.word	0x08021af9
 8021a10:	08021af9 	.word	0x08021af9
 8021a14:	08021af9 	.word	0x08021af9
 8021a18:	08021a9b 	.word	0x08021a9b
 8021a1c:	08021af9 	.word	0x08021af9
 8021a20:	08021af9 	.word	0x08021af9
 8021a24:	08021af9 	.word	0x08021af9
 8021a28:	08021af9 	.word	0x08021af9
 8021a2c:	08021af9 	.word	0x08021af9
 8021a30:	08021af9 	.word	0x08021af9
 8021a34:	08021af9 	.word	0x08021af9
 8021a38:	08021aab 	.word	0x08021aab
 8021a3c:	08021af9 	.word	0x08021af9
 8021a40:	08021af9 	.word	0x08021af9
 8021a44:	08021af9 	.word	0x08021af9
 8021a48:	08021af9 	.word	0x08021af9
 8021a4c:	08021af9 	.word	0x08021af9
 8021a50:	08021af9 	.word	0x08021af9
 8021a54:	08021af9 	.word	0x08021af9
 8021a58:	08021af9 	.word	0x08021af9
 8021a5c:	08021af9 	.word	0x08021af9
 8021a60:	08021af9 	.word	0x08021af9
 8021a64:	08021af9 	.word	0x08021af9
 8021a68:	08021af9 	.word	0x08021af9
 8021a6c:	08021af9 	.word	0x08021af9
 8021a70:	08021af9 	.word	0x08021af9
 8021a74:	08021af9 	.word	0x08021af9
 8021a78:	08021aeb 	.word	0x08021aeb
 8021a7c:	2b40      	cmp	r3, #64	@ 0x40
 8021a7e:	d037      	beq.n	8021af0 <UART_SetConfig+0x6bc>
 8021a80:	e03a      	b.n	8021af8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8021a82:	f7fd fc87 	bl	801f394 <HAL_RCCEx_GetD3PCLK1Freq>
 8021a86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8021a88:	e03c      	b.n	8021b04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021a8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021a8e:	4618      	mov	r0, r3
 8021a90:	f7fd fc96 	bl	801f3c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8021a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021a98:	e034      	b.n	8021b04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8021a9a:	f107 0318 	add.w	r3, r7, #24
 8021a9e:	4618      	mov	r0, r3
 8021aa0:	f7fd fde2 	bl	801f668 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8021aa4:	69fb      	ldr	r3, [r7, #28]
 8021aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021aa8:	e02c      	b.n	8021b04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8021aaa:	4b09      	ldr	r3, [pc, #36]	@ (8021ad0 <UART_SetConfig+0x69c>)
 8021aac:	681b      	ldr	r3, [r3, #0]
 8021aae:	f003 0320 	and.w	r3, r3, #32
 8021ab2:	2b00      	cmp	r3, #0
 8021ab4:	d016      	beq.n	8021ae4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8021ab6:	4b06      	ldr	r3, [pc, #24]	@ (8021ad0 <UART_SetConfig+0x69c>)
 8021ab8:	681b      	ldr	r3, [r3, #0]
 8021aba:	08db      	lsrs	r3, r3, #3
 8021abc:	f003 0303 	and.w	r3, r3, #3
 8021ac0:	4a07      	ldr	r2, [pc, #28]	@ (8021ae0 <UART_SetConfig+0x6ac>)
 8021ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8021ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8021ac8:	e01c      	b.n	8021b04 <UART_SetConfig+0x6d0>
 8021aca:	bf00      	nop
 8021acc:	40011400 	.word	0x40011400
 8021ad0:	58024400 	.word	0x58024400
 8021ad4:	40007800 	.word	0x40007800
 8021ad8:	40007c00 	.word	0x40007c00
 8021adc:	58000c00 	.word	0x58000c00
 8021ae0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8021ae4:	4b9d      	ldr	r3, [pc, #628]	@ (8021d5c <UART_SetConfig+0x928>)
 8021ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021ae8:	e00c      	b.n	8021b04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8021aea:	4b9d      	ldr	r3, [pc, #628]	@ (8021d60 <UART_SetConfig+0x92c>)
 8021aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021aee:	e009      	b.n	8021b04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8021af0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8021af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021af6:	e005      	b.n	8021b04 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8021af8:	2300      	movs	r3, #0
 8021afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8021afc:	2301      	movs	r3, #1
 8021afe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8021b02:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8021b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021b06:	2b00      	cmp	r3, #0
 8021b08:	f000 81de 	beq.w	8021ec8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8021b0c:	697b      	ldr	r3, [r7, #20]
 8021b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021b10:	4a94      	ldr	r2, [pc, #592]	@ (8021d64 <UART_SetConfig+0x930>)
 8021b12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021b16:	461a      	mov	r2, r3
 8021b18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021b1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8021b1e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8021b20:	697b      	ldr	r3, [r7, #20]
 8021b22:	685a      	ldr	r2, [r3, #4]
 8021b24:	4613      	mov	r3, r2
 8021b26:	005b      	lsls	r3, r3, #1
 8021b28:	4413      	add	r3, r2
 8021b2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8021b2c:	429a      	cmp	r2, r3
 8021b2e:	d305      	bcc.n	8021b3c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8021b30:	697b      	ldr	r3, [r7, #20]
 8021b32:	685b      	ldr	r3, [r3, #4]
 8021b34:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8021b36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8021b38:	429a      	cmp	r2, r3
 8021b3a:	d903      	bls.n	8021b44 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8021b3c:	2301      	movs	r3, #1
 8021b3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8021b42:	e1c1      	b.n	8021ec8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8021b44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021b46:	2200      	movs	r2, #0
 8021b48:	60bb      	str	r3, [r7, #8]
 8021b4a:	60fa      	str	r2, [r7, #12]
 8021b4c:	697b      	ldr	r3, [r7, #20]
 8021b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021b50:	4a84      	ldr	r2, [pc, #528]	@ (8021d64 <UART_SetConfig+0x930>)
 8021b52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021b56:	b29b      	uxth	r3, r3
 8021b58:	2200      	movs	r2, #0
 8021b5a:	603b      	str	r3, [r7, #0]
 8021b5c:	607a      	str	r2, [r7, #4]
 8021b5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021b62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8021b66:	f7de fc23 	bl	80003b0 <__aeabi_uldivmod>
 8021b6a:	4602      	mov	r2, r0
 8021b6c:	460b      	mov	r3, r1
 8021b6e:	4610      	mov	r0, r2
 8021b70:	4619      	mov	r1, r3
 8021b72:	f04f 0200 	mov.w	r2, #0
 8021b76:	f04f 0300 	mov.w	r3, #0
 8021b7a:	020b      	lsls	r3, r1, #8
 8021b7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8021b80:	0202      	lsls	r2, r0, #8
 8021b82:	6979      	ldr	r1, [r7, #20]
 8021b84:	6849      	ldr	r1, [r1, #4]
 8021b86:	0849      	lsrs	r1, r1, #1
 8021b88:	2000      	movs	r0, #0
 8021b8a:	460c      	mov	r4, r1
 8021b8c:	4605      	mov	r5, r0
 8021b8e:	eb12 0804 	adds.w	r8, r2, r4
 8021b92:	eb43 0905 	adc.w	r9, r3, r5
 8021b96:	697b      	ldr	r3, [r7, #20]
 8021b98:	685b      	ldr	r3, [r3, #4]
 8021b9a:	2200      	movs	r2, #0
 8021b9c:	469a      	mov	sl, r3
 8021b9e:	4693      	mov	fp, r2
 8021ba0:	4652      	mov	r2, sl
 8021ba2:	465b      	mov	r3, fp
 8021ba4:	4640      	mov	r0, r8
 8021ba6:	4649      	mov	r1, r9
 8021ba8:	f7de fc02 	bl	80003b0 <__aeabi_uldivmod>
 8021bac:	4602      	mov	r2, r0
 8021bae:	460b      	mov	r3, r1
 8021bb0:	4613      	mov	r3, r2
 8021bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8021bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021bb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8021bba:	d308      	bcc.n	8021bce <UART_SetConfig+0x79a>
 8021bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021bbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8021bc2:	d204      	bcs.n	8021bce <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8021bc4:	697b      	ldr	r3, [r7, #20]
 8021bc6:	681b      	ldr	r3, [r3, #0]
 8021bc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8021bca:	60da      	str	r2, [r3, #12]
 8021bcc:	e17c      	b.n	8021ec8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8021bce:	2301      	movs	r3, #1
 8021bd0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8021bd4:	e178      	b.n	8021ec8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8021bd6:	697b      	ldr	r3, [r7, #20]
 8021bd8:	69db      	ldr	r3, [r3, #28]
 8021bda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8021bde:	f040 80c5 	bne.w	8021d6c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8021be2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8021be6:	2b20      	cmp	r3, #32
 8021be8:	dc48      	bgt.n	8021c7c <UART_SetConfig+0x848>
 8021bea:	2b00      	cmp	r3, #0
 8021bec:	db7b      	blt.n	8021ce6 <UART_SetConfig+0x8b2>
 8021bee:	2b20      	cmp	r3, #32
 8021bf0:	d879      	bhi.n	8021ce6 <UART_SetConfig+0x8b2>
 8021bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8021bf8 <UART_SetConfig+0x7c4>)
 8021bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021bf8:	08021c83 	.word	0x08021c83
 8021bfc:	08021c8b 	.word	0x08021c8b
 8021c00:	08021ce7 	.word	0x08021ce7
 8021c04:	08021ce7 	.word	0x08021ce7
 8021c08:	08021c93 	.word	0x08021c93
 8021c0c:	08021ce7 	.word	0x08021ce7
 8021c10:	08021ce7 	.word	0x08021ce7
 8021c14:	08021ce7 	.word	0x08021ce7
 8021c18:	08021ca3 	.word	0x08021ca3
 8021c1c:	08021ce7 	.word	0x08021ce7
 8021c20:	08021ce7 	.word	0x08021ce7
 8021c24:	08021ce7 	.word	0x08021ce7
 8021c28:	08021ce7 	.word	0x08021ce7
 8021c2c:	08021ce7 	.word	0x08021ce7
 8021c30:	08021ce7 	.word	0x08021ce7
 8021c34:	08021ce7 	.word	0x08021ce7
 8021c38:	08021cb3 	.word	0x08021cb3
 8021c3c:	08021ce7 	.word	0x08021ce7
 8021c40:	08021ce7 	.word	0x08021ce7
 8021c44:	08021ce7 	.word	0x08021ce7
 8021c48:	08021ce7 	.word	0x08021ce7
 8021c4c:	08021ce7 	.word	0x08021ce7
 8021c50:	08021ce7 	.word	0x08021ce7
 8021c54:	08021ce7 	.word	0x08021ce7
 8021c58:	08021ce7 	.word	0x08021ce7
 8021c5c:	08021ce7 	.word	0x08021ce7
 8021c60:	08021ce7 	.word	0x08021ce7
 8021c64:	08021ce7 	.word	0x08021ce7
 8021c68:	08021ce7 	.word	0x08021ce7
 8021c6c:	08021ce7 	.word	0x08021ce7
 8021c70:	08021ce7 	.word	0x08021ce7
 8021c74:	08021ce7 	.word	0x08021ce7
 8021c78:	08021cd9 	.word	0x08021cd9
 8021c7c:	2b40      	cmp	r3, #64	@ 0x40
 8021c7e:	d02e      	beq.n	8021cde <UART_SetConfig+0x8aa>
 8021c80:	e031      	b.n	8021ce6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8021c82:	f7fc f951 	bl	801df28 <HAL_RCC_GetPCLK1Freq>
 8021c86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8021c88:	e033      	b.n	8021cf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8021c8a:	f7fc f963 	bl	801df54 <HAL_RCC_GetPCLK2Freq>
 8021c8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8021c90:	e02f      	b.n	8021cf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021c92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021c96:	4618      	mov	r0, r3
 8021c98:	f7fd fb92 	bl	801f3c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8021c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021ca0:	e027      	b.n	8021cf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8021ca2:	f107 0318 	add.w	r3, r7, #24
 8021ca6:	4618      	mov	r0, r3
 8021ca8:	f7fd fcde 	bl	801f668 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8021cac:	69fb      	ldr	r3, [r7, #28]
 8021cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021cb0:	e01f      	b.n	8021cf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8021cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8021d68 <UART_SetConfig+0x934>)
 8021cb4:	681b      	ldr	r3, [r3, #0]
 8021cb6:	f003 0320 	and.w	r3, r3, #32
 8021cba:	2b00      	cmp	r3, #0
 8021cbc:	d009      	beq.n	8021cd2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8021cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8021d68 <UART_SetConfig+0x934>)
 8021cc0:	681b      	ldr	r3, [r3, #0]
 8021cc2:	08db      	lsrs	r3, r3, #3
 8021cc4:	f003 0303 	and.w	r3, r3, #3
 8021cc8:	4a24      	ldr	r2, [pc, #144]	@ (8021d5c <UART_SetConfig+0x928>)
 8021cca:	fa22 f303 	lsr.w	r3, r2, r3
 8021cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8021cd0:	e00f      	b.n	8021cf2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8021cd2:	4b22      	ldr	r3, [pc, #136]	@ (8021d5c <UART_SetConfig+0x928>)
 8021cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021cd6:	e00c      	b.n	8021cf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8021cd8:	4b21      	ldr	r3, [pc, #132]	@ (8021d60 <UART_SetConfig+0x92c>)
 8021cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021cdc:	e009      	b.n	8021cf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8021cde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8021ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021ce4:	e005      	b.n	8021cf2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8021ce6:	2300      	movs	r3, #0
 8021ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8021cea:	2301      	movs	r3, #1
 8021cec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8021cf0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8021cf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021cf4:	2b00      	cmp	r3, #0
 8021cf6:	f000 80e7 	beq.w	8021ec8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8021cfa:	697b      	ldr	r3, [r7, #20]
 8021cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021cfe:	4a19      	ldr	r2, [pc, #100]	@ (8021d64 <UART_SetConfig+0x930>)
 8021d00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021d04:	461a      	mov	r2, r3
 8021d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021d08:	fbb3 f3f2 	udiv	r3, r3, r2
 8021d0c:	005a      	lsls	r2, r3, #1
 8021d0e:	697b      	ldr	r3, [r7, #20]
 8021d10:	685b      	ldr	r3, [r3, #4]
 8021d12:	085b      	lsrs	r3, r3, #1
 8021d14:	441a      	add	r2, r3
 8021d16:	697b      	ldr	r3, [r7, #20]
 8021d18:	685b      	ldr	r3, [r3, #4]
 8021d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8021d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8021d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021d22:	2b0f      	cmp	r3, #15
 8021d24:	d916      	bls.n	8021d54 <UART_SetConfig+0x920>
 8021d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8021d2c:	d212      	bcs.n	8021d54 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8021d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021d30:	b29b      	uxth	r3, r3
 8021d32:	f023 030f 	bic.w	r3, r3, #15
 8021d36:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8021d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021d3a:	085b      	lsrs	r3, r3, #1
 8021d3c:	b29b      	uxth	r3, r3
 8021d3e:	f003 0307 	and.w	r3, r3, #7
 8021d42:	b29a      	uxth	r2, r3
 8021d44:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8021d46:	4313      	orrs	r3, r2
 8021d48:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8021d4a:	697b      	ldr	r3, [r7, #20]
 8021d4c:	681b      	ldr	r3, [r3, #0]
 8021d4e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8021d50:	60da      	str	r2, [r3, #12]
 8021d52:	e0b9      	b.n	8021ec8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8021d54:	2301      	movs	r3, #1
 8021d56:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8021d5a:	e0b5      	b.n	8021ec8 <UART_SetConfig+0xa94>
 8021d5c:	03d09000 	.word	0x03d09000
 8021d60:	003d0900 	.word	0x003d0900
 8021d64:	08028028 	.word	0x08028028
 8021d68:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8021d6c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8021d70:	2b20      	cmp	r3, #32
 8021d72:	dc49      	bgt.n	8021e08 <UART_SetConfig+0x9d4>
 8021d74:	2b00      	cmp	r3, #0
 8021d76:	db7c      	blt.n	8021e72 <UART_SetConfig+0xa3e>
 8021d78:	2b20      	cmp	r3, #32
 8021d7a:	d87a      	bhi.n	8021e72 <UART_SetConfig+0xa3e>
 8021d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8021d84 <UART_SetConfig+0x950>)
 8021d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021d82:	bf00      	nop
 8021d84:	08021e0f 	.word	0x08021e0f
 8021d88:	08021e17 	.word	0x08021e17
 8021d8c:	08021e73 	.word	0x08021e73
 8021d90:	08021e73 	.word	0x08021e73
 8021d94:	08021e1f 	.word	0x08021e1f
 8021d98:	08021e73 	.word	0x08021e73
 8021d9c:	08021e73 	.word	0x08021e73
 8021da0:	08021e73 	.word	0x08021e73
 8021da4:	08021e2f 	.word	0x08021e2f
 8021da8:	08021e73 	.word	0x08021e73
 8021dac:	08021e73 	.word	0x08021e73
 8021db0:	08021e73 	.word	0x08021e73
 8021db4:	08021e73 	.word	0x08021e73
 8021db8:	08021e73 	.word	0x08021e73
 8021dbc:	08021e73 	.word	0x08021e73
 8021dc0:	08021e73 	.word	0x08021e73
 8021dc4:	08021e3f 	.word	0x08021e3f
 8021dc8:	08021e73 	.word	0x08021e73
 8021dcc:	08021e73 	.word	0x08021e73
 8021dd0:	08021e73 	.word	0x08021e73
 8021dd4:	08021e73 	.word	0x08021e73
 8021dd8:	08021e73 	.word	0x08021e73
 8021ddc:	08021e73 	.word	0x08021e73
 8021de0:	08021e73 	.word	0x08021e73
 8021de4:	08021e73 	.word	0x08021e73
 8021de8:	08021e73 	.word	0x08021e73
 8021dec:	08021e73 	.word	0x08021e73
 8021df0:	08021e73 	.word	0x08021e73
 8021df4:	08021e73 	.word	0x08021e73
 8021df8:	08021e73 	.word	0x08021e73
 8021dfc:	08021e73 	.word	0x08021e73
 8021e00:	08021e73 	.word	0x08021e73
 8021e04:	08021e65 	.word	0x08021e65
 8021e08:	2b40      	cmp	r3, #64	@ 0x40
 8021e0a:	d02e      	beq.n	8021e6a <UART_SetConfig+0xa36>
 8021e0c:	e031      	b.n	8021e72 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8021e0e:	f7fc f88b 	bl	801df28 <HAL_RCC_GetPCLK1Freq>
 8021e12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8021e14:	e033      	b.n	8021e7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8021e16:	f7fc f89d 	bl	801df54 <HAL_RCC_GetPCLK2Freq>
 8021e1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8021e1c:	e02f      	b.n	8021e7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021e1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021e22:	4618      	mov	r0, r3
 8021e24:	f7fd facc 	bl	801f3c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8021e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021e2c:	e027      	b.n	8021e7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8021e2e:	f107 0318 	add.w	r3, r7, #24
 8021e32:	4618      	mov	r0, r3
 8021e34:	f7fd fc18 	bl	801f668 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8021e38:	69fb      	ldr	r3, [r7, #28]
 8021e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021e3c:	e01f      	b.n	8021e7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8021e3e:	4b2d      	ldr	r3, [pc, #180]	@ (8021ef4 <UART_SetConfig+0xac0>)
 8021e40:	681b      	ldr	r3, [r3, #0]
 8021e42:	f003 0320 	and.w	r3, r3, #32
 8021e46:	2b00      	cmp	r3, #0
 8021e48:	d009      	beq.n	8021e5e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8021e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8021ef4 <UART_SetConfig+0xac0>)
 8021e4c:	681b      	ldr	r3, [r3, #0]
 8021e4e:	08db      	lsrs	r3, r3, #3
 8021e50:	f003 0303 	and.w	r3, r3, #3
 8021e54:	4a28      	ldr	r2, [pc, #160]	@ (8021ef8 <UART_SetConfig+0xac4>)
 8021e56:	fa22 f303 	lsr.w	r3, r2, r3
 8021e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8021e5c:	e00f      	b.n	8021e7e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8021e5e:	4b26      	ldr	r3, [pc, #152]	@ (8021ef8 <UART_SetConfig+0xac4>)
 8021e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021e62:	e00c      	b.n	8021e7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8021e64:	4b25      	ldr	r3, [pc, #148]	@ (8021efc <UART_SetConfig+0xac8>)
 8021e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021e68:	e009      	b.n	8021e7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8021e6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8021e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021e70:	e005      	b.n	8021e7e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8021e72:	2300      	movs	r3, #0
 8021e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8021e76:	2301      	movs	r3, #1
 8021e78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8021e7c:	bf00      	nop
    }

    if (pclk != 0U)
 8021e7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021e80:	2b00      	cmp	r3, #0
 8021e82:	d021      	beq.n	8021ec8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8021e84:	697b      	ldr	r3, [r7, #20]
 8021e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021e88:	4a1d      	ldr	r2, [pc, #116]	@ (8021f00 <UART_SetConfig+0xacc>)
 8021e8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021e8e:	461a      	mov	r2, r3
 8021e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021e92:	fbb3 f2f2 	udiv	r2, r3, r2
 8021e96:	697b      	ldr	r3, [r7, #20]
 8021e98:	685b      	ldr	r3, [r3, #4]
 8021e9a:	085b      	lsrs	r3, r3, #1
 8021e9c:	441a      	add	r2, r3
 8021e9e:	697b      	ldr	r3, [r7, #20]
 8021ea0:	685b      	ldr	r3, [r3, #4]
 8021ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8021ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8021ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021eaa:	2b0f      	cmp	r3, #15
 8021eac:	d909      	bls.n	8021ec2 <UART_SetConfig+0xa8e>
 8021eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8021eb4:	d205      	bcs.n	8021ec2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8021eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021eb8:	b29a      	uxth	r2, r3
 8021eba:	697b      	ldr	r3, [r7, #20]
 8021ebc:	681b      	ldr	r3, [r3, #0]
 8021ebe:	60da      	str	r2, [r3, #12]
 8021ec0:	e002      	b.n	8021ec8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8021ec2:	2301      	movs	r3, #1
 8021ec4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8021ec8:	697b      	ldr	r3, [r7, #20]
 8021eca:	2201      	movs	r2, #1
 8021ecc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8021ed0:	697b      	ldr	r3, [r7, #20]
 8021ed2:	2201      	movs	r2, #1
 8021ed4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8021ed8:	697b      	ldr	r3, [r7, #20]
 8021eda:	2200      	movs	r2, #0
 8021edc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8021ede:	697b      	ldr	r3, [r7, #20]
 8021ee0:	2200      	movs	r2, #0
 8021ee2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8021ee4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8021ee8:	4618      	mov	r0, r3
 8021eea:	3748      	adds	r7, #72	@ 0x48
 8021eec:	46bd      	mov	sp, r7
 8021eee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8021ef2:	bf00      	nop
 8021ef4:	58024400 	.word	0x58024400
 8021ef8:	03d09000 	.word	0x03d09000
 8021efc:	003d0900 	.word	0x003d0900
 8021f00:	08028028 	.word	0x08028028

08021f04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8021f04:	b480      	push	{r7}
 8021f06:	b083      	sub	sp, #12
 8021f08:	af00      	add	r7, sp, #0
 8021f0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8021f0c:	687b      	ldr	r3, [r7, #4]
 8021f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021f10:	f003 0308 	and.w	r3, r3, #8
 8021f14:	2b00      	cmp	r3, #0
 8021f16:	d00a      	beq.n	8021f2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8021f18:	687b      	ldr	r3, [r7, #4]
 8021f1a:	681b      	ldr	r3, [r3, #0]
 8021f1c:	685b      	ldr	r3, [r3, #4]
 8021f1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8021f22:	687b      	ldr	r3, [r7, #4]
 8021f24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8021f26:	687b      	ldr	r3, [r7, #4]
 8021f28:	681b      	ldr	r3, [r3, #0]
 8021f2a:	430a      	orrs	r2, r1
 8021f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8021f2e:	687b      	ldr	r3, [r7, #4]
 8021f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021f32:	f003 0301 	and.w	r3, r3, #1
 8021f36:	2b00      	cmp	r3, #0
 8021f38:	d00a      	beq.n	8021f50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8021f3a:	687b      	ldr	r3, [r7, #4]
 8021f3c:	681b      	ldr	r3, [r3, #0]
 8021f3e:	685b      	ldr	r3, [r3, #4]
 8021f40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8021f44:	687b      	ldr	r3, [r7, #4]
 8021f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8021f48:	687b      	ldr	r3, [r7, #4]
 8021f4a:	681b      	ldr	r3, [r3, #0]
 8021f4c:	430a      	orrs	r2, r1
 8021f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8021f50:	687b      	ldr	r3, [r7, #4]
 8021f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021f54:	f003 0302 	and.w	r3, r3, #2
 8021f58:	2b00      	cmp	r3, #0
 8021f5a:	d00a      	beq.n	8021f72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8021f5c:	687b      	ldr	r3, [r7, #4]
 8021f5e:	681b      	ldr	r3, [r3, #0]
 8021f60:	685b      	ldr	r3, [r3, #4]
 8021f62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8021f66:	687b      	ldr	r3, [r7, #4]
 8021f68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8021f6a:	687b      	ldr	r3, [r7, #4]
 8021f6c:	681b      	ldr	r3, [r3, #0]
 8021f6e:	430a      	orrs	r2, r1
 8021f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8021f72:	687b      	ldr	r3, [r7, #4]
 8021f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021f76:	f003 0304 	and.w	r3, r3, #4
 8021f7a:	2b00      	cmp	r3, #0
 8021f7c:	d00a      	beq.n	8021f94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8021f7e:	687b      	ldr	r3, [r7, #4]
 8021f80:	681b      	ldr	r3, [r3, #0]
 8021f82:	685b      	ldr	r3, [r3, #4]
 8021f84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8021f88:	687b      	ldr	r3, [r7, #4]
 8021f8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8021f8c:	687b      	ldr	r3, [r7, #4]
 8021f8e:	681b      	ldr	r3, [r3, #0]
 8021f90:	430a      	orrs	r2, r1
 8021f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8021f94:	687b      	ldr	r3, [r7, #4]
 8021f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021f98:	f003 0310 	and.w	r3, r3, #16
 8021f9c:	2b00      	cmp	r3, #0
 8021f9e:	d00a      	beq.n	8021fb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8021fa0:	687b      	ldr	r3, [r7, #4]
 8021fa2:	681b      	ldr	r3, [r3, #0]
 8021fa4:	689b      	ldr	r3, [r3, #8]
 8021fa6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8021faa:	687b      	ldr	r3, [r7, #4]
 8021fac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8021fae:	687b      	ldr	r3, [r7, #4]
 8021fb0:	681b      	ldr	r3, [r3, #0]
 8021fb2:	430a      	orrs	r2, r1
 8021fb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8021fb6:	687b      	ldr	r3, [r7, #4]
 8021fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021fba:	f003 0320 	and.w	r3, r3, #32
 8021fbe:	2b00      	cmp	r3, #0
 8021fc0:	d00a      	beq.n	8021fd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8021fc2:	687b      	ldr	r3, [r7, #4]
 8021fc4:	681b      	ldr	r3, [r3, #0]
 8021fc6:	689b      	ldr	r3, [r3, #8]
 8021fc8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8021fcc:	687b      	ldr	r3, [r7, #4]
 8021fce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8021fd0:	687b      	ldr	r3, [r7, #4]
 8021fd2:	681b      	ldr	r3, [r3, #0]
 8021fd4:	430a      	orrs	r2, r1
 8021fd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8021fd8:	687b      	ldr	r3, [r7, #4]
 8021fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8021fe0:	2b00      	cmp	r3, #0
 8021fe2:	d01a      	beq.n	802201a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8021fe4:	687b      	ldr	r3, [r7, #4]
 8021fe6:	681b      	ldr	r3, [r3, #0]
 8021fe8:	685b      	ldr	r3, [r3, #4]
 8021fea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8021fee:	687b      	ldr	r3, [r7, #4]
 8021ff0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8021ff2:	687b      	ldr	r3, [r7, #4]
 8021ff4:	681b      	ldr	r3, [r3, #0]
 8021ff6:	430a      	orrs	r2, r1
 8021ff8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8021ffa:	687b      	ldr	r3, [r7, #4]
 8021ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8021ffe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8022002:	d10a      	bne.n	802201a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8022004:	687b      	ldr	r3, [r7, #4]
 8022006:	681b      	ldr	r3, [r3, #0]
 8022008:	685b      	ldr	r3, [r3, #4]
 802200a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 802200e:	687b      	ldr	r3, [r7, #4]
 8022010:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8022012:	687b      	ldr	r3, [r7, #4]
 8022014:	681b      	ldr	r3, [r3, #0]
 8022016:	430a      	orrs	r2, r1
 8022018:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 802201a:	687b      	ldr	r3, [r7, #4]
 802201c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802201e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8022022:	2b00      	cmp	r3, #0
 8022024:	d00a      	beq.n	802203c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8022026:	687b      	ldr	r3, [r7, #4]
 8022028:	681b      	ldr	r3, [r3, #0]
 802202a:	685b      	ldr	r3, [r3, #4]
 802202c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8022030:	687b      	ldr	r3, [r7, #4]
 8022032:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8022034:	687b      	ldr	r3, [r7, #4]
 8022036:	681b      	ldr	r3, [r3, #0]
 8022038:	430a      	orrs	r2, r1
 802203a:	605a      	str	r2, [r3, #4]
  }
}
 802203c:	bf00      	nop
 802203e:	370c      	adds	r7, #12
 8022040:	46bd      	mov	sp, r7
 8022042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022046:	4770      	bx	lr

08022048 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8022048:	b580      	push	{r7, lr}
 802204a:	b098      	sub	sp, #96	@ 0x60
 802204c:	af02      	add	r7, sp, #8
 802204e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022050:	687b      	ldr	r3, [r7, #4]
 8022052:	2200      	movs	r2, #0
 8022054:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8022058:	f7f8 fb94 	bl	801a784 <HAL_GetTick>
 802205c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 802205e:	687b      	ldr	r3, [r7, #4]
 8022060:	681b      	ldr	r3, [r3, #0]
 8022062:	681b      	ldr	r3, [r3, #0]
 8022064:	f003 0308 	and.w	r3, r3, #8
 8022068:	2b08      	cmp	r3, #8
 802206a:	d12f      	bne.n	80220cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 802206c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8022070:	9300      	str	r3, [sp, #0]
 8022072:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8022074:	2200      	movs	r2, #0
 8022076:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 802207a:	6878      	ldr	r0, [r7, #4]
 802207c:	f000 f88e 	bl	802219c <UART_WaitOnFlagUntilTimeout>
 8022080:	4603      	mov	r3, r0
 8022082:	2b00      	cmp	r3, #0
 8022084:	d022      	beq.n	80220cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8022086:	687b      	ldr	r3, [r7, #4]
 8022088:	681b      	ldr	r3, [r3, #0]
 802208a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802208c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802208e:	e853 3f00 	ldrex	r3, [r3]
 8022092:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8022094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022096:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 802209a:	653b      	str	r3, [r7, #80]	@ 0x50
 802209c:	687b      	ldr	r3, [r7, #4]
 802209e:	681b      	ldr	r3, [r3, #0]
 80220a0:	461a      	mov	r2, r3
 80220a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80220a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80220a6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80220a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80220aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80220ac:	e841 2300 	strex	r3, r2, [r1]
 80220b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80220b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80220b4:	2b00      	cmp	r3, #0
 80220b6:	d1e6      	bne.n	8022086 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80220b8:	687b      	ldr	r3, [r7, #4]
 80220ba:	2220      	movs	r2, #32
 80220bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80220c0:	687b      	ldr	r3, [r7, #4]
 80220c2:	2200      	movs	r2, #0
 80220c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80220c8:	2303      	movs	r3, #3
 80220ca:	e063      	b.n	8022194 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80220cc:	687b      	ldr	r3, [r7, #4]
 80220ce:	681b      	ldr	r3, [r3, #0]
 80220d0:	681b      	ldr	r3, [r3, #0]
 80220d2:	f003 0304 	and.w	r3, r3, #4
 80220d6:	2b04      	cmp	r3, #4
 80220d8:	d149      	bne.n	802216e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80220da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80220de:	9300      	str	r3, [sp, #0]
 80220e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80220e2:	2200      	movs	r2, #0
 80220e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80220e8:	6878      	ldr	r0, [r7, #4]
 80220ea:	f000 f857 	bl	802219c <UART_WaitOnFlagUntilTimeout>
 80220ee:	4603      	mov	r3, r0
 80220f0:	2b00      	cmp	r3, #0
 80220f2:	d03c      	beq.n	802216e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80220f4:	687b      	ldr	r3, [r7, #4]
 80220f6:	681b      	ldr	r3, [r3, #0]
 80220f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80220fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80220fc:	e853 3f00 	ldrex	r3, [r3]
 8022100:	623b      	str	r3, [r7, #32]
   return(result);
 8022102:	6a3b      	ldr	r3, [r7, #32]
 8022104:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8022108:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802210a:	687b      	ldr	r3, [r7, #4]
 802210c:	681b      	ldr	r3, [r3, #0]
 802210e:	461a      	mov	r2, r3
 8022110:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022112:	633b      	str	r3, [r7, #48]	@ 0x30
 8022114:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022116:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8022118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802211a:	e841 2300 	strex	r3, r2, [r1]
 802211e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8022120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022122:	2b00      	cmp	r3, #0
 8022124:	d1e6      	bne.n	80220f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8022126:	687b      	ldr	r3, [r7, #4]
 8022128:	681b      	ldr	r3, [r3, #0]
 802212a:	3308      	adds	r3, #8
 802212c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802212e:	693b      	ldr	r3, [r7, #16]
 8022130:	e853 3f00 	ldrex	r3, [r3]
 8022134:	60fb      	str	r3, [r7, #12]
   return(result);
 8022136:	68fb      	ldr	r3, [r7, #12]
 8022138:	f023 0301 	bic.w	r3, r3, #1
 802213c:	64bb      	str	r3, [r7, #72]	@ 0x48
 802213e:	687b      	ldr	r3, [r7, #4]
 8022140:	681b      	ldr	r3, [r3, #0]
 8022142:	3308      	adds	r3, #8
 8022144:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8022146:	61fa      	str	r2, [r7, #28]
 8022148:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802214a:	69b9      	ldr	r1, [r7, #24]
 802214c:	69fa      	ldr	r2, [r7, #28]
 802214e:	e841 2300 	strex	r3, r2, [r1]
 8022152:	617b      	str	r3, [r7, #20]
   return(result);
 8022154:	697b      	ldr	r3, [r7, #20]
 8022156:	2b00      	cmp	r3, #0
 8022158:	d1e5      	bne.n	8022126 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 802215a:	687b      	ldr	r3, [r7, #4]
 802215c:	2220      	movs	r2, #32
 802215e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8022162:	687b      	ldr	r3, [r7, #4]
 8022164:	2200      	movs	r2, #0
 8022166:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 802216a:	2303      	movs	r3, #3
 802216c:	e012      	b.n	8022194 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 802216e:	687b      	ldr	r3, [r7, #4]
 8022170:	2220      	movs	r2, #32
 8022172:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8022176:	687b      	ldr	r3, [r7, #4]
 8022178:	2220      	movs	r2, #32
 802217a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802217e:	687b      	ldr	r3, [r7, #4]
 8022180:	2200      	movs	r2, #0
 8022182:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8022184:	687b      	ldr	r3, [r7, #4]
 8022186:	2200      	movs	r2, #0
 8022188:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 802218a:	687b      	ldr	r3, [r7, #4]
 802218c:	2200      	movs	r2, #0
 802218e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8022192:	2300      	movs	r3, #0
}
 8022194:	4618      	mov	r0, r3
 8022196:	3758      	adds	r7, #88	@ 0x58
 8022198:	46bd      	mov	sp, r7
 802219a:	bd80      	pop	{r7, pc}

0802219c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 802219c:	b580      	push	{r7, lr}
 802219e:	b084      	sub	sp, #16
 80221a0:	af00      	add	r7, sp, #0
 80221a2:	60f8      	str	r0, [r7, #12]
 80221a4:	60b9      	str	r1, [r7, #8]
 80221a6:	603b      	str	r3, [r7, #0]
 80221a8:	4613      	mov	r3, r2
 80221aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80221ac:	e04f      	b.n	802224e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80221ae:	69bb      	ldr	r3, [r7, #24]
 80221b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80221b4:	d04b      	beq.n	802224e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80221b6:	f7f8 fae5 	bl	801a784 <HAL_GetTick>
 80221ba:	4602      	mov	r2, r0
 80221bc:	683b      	ldr	r3, [r7, #0]
 80221be:	1ad3      	subs	r3, r2, r3
 80221c0:	69ba      	ldr	r2, [r7, #24]
 80221c2:	429a      	cmp	r2, r3
 80221c4:	d302      	bcc.n	80221cc <UART_WaitOnFlagUntilTimeout+0x30>
 80221c6:	69bb      	ldr	r3, [r7, #24]
 80221c8:	2b00      	cmp	r3, #0
 80221ca:	d101      	bne.n	80221d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80221cc:	2303      	movs	r3, #3
 80221ce:	e04e      	b.n	802226e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80221d0:	68fb      	ldr	r3, [r7, #12]
 80221d2:	681b      	ldr	r3, [r3, #0]
 80221d4:	681b      	ldr	r3, [r3, #0]
 80221d6:	f003 0304 	and.w	r3, r3, #4
 80221da:	2b00      	cmp	r3, #0
 80221dc:	d037      	beq.n	802224e <UART_WaitOnFlagUntilTimeout+0xb2>
 80221de:	68bb      	ldr	r3, [r7, #8]
 80221e0:	2b80      	cmp	r3, #128	@ 0x80
 80221e2:	d034      	beq.n	802224e <UART_WaitOnFlagUntilTimeout+0xb2>
 80221e4:	68bb      	ldr	r3, [r7, #8]
 80221e6:	2b40      	cmp	r3, #64	@ 0x40
 80221e8:	d031      	beq.n	802224e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80221ea:	68fb      	ldr	r3, [r7, #12]
 80221ec:	681b      	ldr	r3, [r3, #0]
 80221ee:	69db      	ldr	r3, [r3, #28]
 80221f0:	f003 0308 	and.w	r3, r3, #8
 80221f4:	2b08      	cmp	r3, #8
 80221f6:	d110      	bne.n	802221a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80221f8:	68fb      	ldr	r3, [r7, #12]
 80221fa:	681b      	ldr	r3, [r3, #0]
 80221fc:	2208      	movs	r2, #8
 80221fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8022200:	68f8      	ldr	r0, [r7, #12]
 8022202:	f000 f839 	bl	8022278 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8022206:	68fb      	ldr	r3, [r7, #12]
 8022208:	2208      	movs	r2, #8
 802220a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 802220e:	68fb      	ldr	r3, [r7, #12]
 8022210:	2200      	movs	r2, #0
 8022212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8022216:	2301      	movs	r3, #1
 8022218:	e029      	b.n	802226e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 802221a:	68fb      	ldr	r3, [r7, #12]
 802221c:	681b      	ldr	r3, [r3, #0]
 802221e:	69db      	ldr	r3, [r3, #28]
 8022220:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8022224:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8022228:	d111      	bne.n	802224e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 802222a:	68fb      	ldr	r3, [r7, #12]
 802222c:	681b      	ldr	r3, [r3, #0]
 802222e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8022232:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8022234:	68f8      	ldr	r0, [r7, #12]
 8022236:	f000 f81f 	bl	8022278 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 802223a:	68fb      	ldr	r3, [r7, #12]
 802223c:	2220      	movs	r2, #32
 802223e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8022242:	68fb      	ldr	r3, [r7, #12]
 8022244:	2200      	movs	r2, #0
 8022246:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 802224a:	2303      	movs	r3, #3
 802224c:	e00f      	b.n	802226e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802224e:	68fb      	ldr	r3, [r7, #12]
 8022250:	681b      	ldr	r3, [r3, #0]
 8022252:	69da      	ldr	r2, [r3, #28]
 8022254:	68bb      	ldr	r3, [r7, #8]
 8022256:	4013      	ands	r3, r2
 8022258:	68ba      	ldr	r2, [r7, #8]
 802225a:	429a      	cmp	r2, r3
 802225c:	bf0c      	ite	eq
 802225e:	2301      	moveq	r3, #1
 8022260:	2300      	movne	r3, #0
 8022262:	b2db      	uxtb	r3, r3
 8022264:	461a      	mov	r2, r3
 8022266:	79fb      	ldrb	r3, [r7, #7]
 8022268:	429a      	cmp	r2, r3
 802226a:	d0a0      	beq.n	80221ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 802226c:	2300      	movs	r3, #0
}
 802226e:	4618      	mov	r0, r3
 8022270:	3710      	adds	r7, #16
 8022272:	46bd      	mov	sp, r7
 8022274:	bd80      	pop	{r7, pc}
	...

08022278 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8022278:	b480      	push	{r7}
 802227a:	b095      	sub	sp, #84	@ 0x54
 802227c:	af00      	add	r7, sp, #0
 802227e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8022280:	687b      	ldr	r3, [r7, #4]
 8022282:	681b      	ldr	r3, [r3, #0]
 8022284:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022288:	e853 3f00 	ldrex	r3, [r3]
 802228c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 802228e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022290:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8022294:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8022296:	687b      	ldr	r3, [r7, #4]
 8022298:	681b      	ldr	r3, [r3, #0]
 802229a:	461a      	mov	r2, r3
 802229c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802229e:	643b      	str	r3, [r7, #64]	@ 0x40
 80222a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80222a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80222a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80222a6:	e841 2300 	strex	r3, r2, [r1]
 80222aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80222ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80222ae:	2b00      	cmp	r3, #0
 80222b0:	d1e6      	bne.n	8022280 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80222b2:	687b      	ldr	r3, [r7, #4]
 80222b4:	681b      	ldr	r3, [r3, #0]
 80222b6:	3308      	adds	r3, #8
 80222b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80222ba:	6a3b      	ldr	r3, [r7, #32]
 80222bc:	e853 3f00 	ldrex	r3, [r3]
 80222c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80222c2:	69fa      	ldr	r2, [r7, #28]
 80222c4:	4b1e      	ldr	r3, [pc, #120]	@ (8022340 <UART_EndRxTransfer+0xc8>)
 80222c6:	4013      	ands	r3, r2
 80222c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80222ca:	687b      	ldr	r3, [r7, #4]
 80222cc:	681b      	ldr	r3, [r3, #0]
 80222ce:	3308      	adds	r3, #8
 80222d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80222d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80222d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80222d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80222d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80222da:	e841 2300 	strex	r3, r2, [r1]
 80222de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80222e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80222e2:	2b00      	cmp	r3, #0
 80222e4:	d1e5      	bne.n	80222b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80222e6:	687b      	ldr	r3, [r7, #4]
 80222e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80222ea:	2b01      	cmp	r3, #1
 80222ec:	d118      	bne.n	8022320 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80222ee:	687b      	ldr	r3, [r7, #4]
 80222f0:	681b      	ldr	r3, [r3, #0]
 80222f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80222f4:	68fb      	ldr	r3, [r7, #12]
 80222f6:	e853 3f00 	ldrex	r3, [r3]
 80222fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80222fc:	68bb      	ldr	r3, [r7, #8]
 80222fe:	f023 0310 	bic.w	r3, r3, #16
 8022302:	647b      	str	r3, [r7, #68]	@ 0x44
 8022304:	687b      	ldr	r3, [r7, #4]
 8022306:	681b      	ldr	r3, [r3, #0]
 8022308:	461a      	mov	r2, r3
 802230a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802230c:	61bb      	str	r3, [r7, #24]
 802230e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022310:	6979      	ldr	r1, [r7, #20]
 8022312:	69ba      	ldr	r2, [r7, #24]
 8022314:	e841 2300 	strex	r3, r2, [r1]
 8022318:	613b      	str	r3, [r7, #16]
   return(result);
 802231a:	693b      	ldr	r3, [r7, #16]
 802231c:	2b00      	cmp	r3, #0
 802231e:	d1e6      	bne.n	80222ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8022320:	687b      	ldr	r3, [r7, #4]
 8022322:	2220      	movs	r2, #32
 8022324:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022328:	687b      	ldr	r3, [r7, #4]
 802232a:	2200      	movs	r2, #0
 802232c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 802232e:	687b      	ldr	r3, [r7, #4]
 8022330:	2200      	movs	r2, #0
 8022332:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8022334:	bf00      	nop
 8022336:	3754      	adds	r7, #84	@ 0x54
 8022338:	46bd      	mov	sp, r7
 802233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802233e:	4770      	bx	lr
 8022340:	effffffe 	.word	0xeffffffe

08022344 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8022344:	b480      	push	{r7}
 8022346:	b085      	sub	sp, #20
 8022348:	af00      	add	r7, sp, #0
 802234a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 802234c:	687b      	ldr	r3, [r7, #4]
 802234e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8022352:	2b01      	cmp	r3, #1
 8022354:	d101      	bne.n	802235a <HAL_UARTEx_DisableFifoMode+0x16>
 8022356:	2302      	movs	r3, #2
 8022358:	e027      	b.n	80223aa <HAL_UARTEx_DisableFifoMode+0x66>
 802235a:	687b      	ldr	r3, [r7, #4]
 802235c:	2201      	movs	r2, #1
 802235e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8022362:	687b      	ldr	r3, [r7, #4]
 8022364:	2224      	movs	r2, #36	@ 0x24
 8022366:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802236a:	687b      	ldr	r3, [r7, #4]
 802236c:	681b      	ldr	r3, [r3, #0]
 802236e:	681b      	ldr	r3, [r3, #0]
 8022370:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8022372:	687b      	ldr	r3, [r7, #4]
 8022374:	681b      	ldr	r3, [r3, #0]
 8022376:	681a      	ldr	r2, [r3, #0]
 8022378:	687b      	ldr	r3, [r7, #4]
 802237a:	681b      	ldr	r3, [r3, #0]
 802237c:	f022 0201 	bic.w	r2, r2, #1
 8022380:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8022382:	68fb      	ldr	r3, [r7, #12]
 8022384:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8022388:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 802238a:	687b      	ldr	r3, [r7, #4]
 802238c:	2200      	movs	r2, #0
 802238e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8022390:	687b      	ldr	r3, [r7, #4]
 8022392:	681b      	ldr	r3, [r3, #0]
 8022394:	68fa      	ldr	r2, [r7, #12]
 8022396:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8022398:	687b      	ldr	r3, [r7, #4]
 802239a:	2220      	movs	r2, #32
 802239c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80223a0:	687b      	ldr	r3, [r7, #4]
 80223a2:	2200      	movs	r2, #0
 80223a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80223a8:	2300      	movs	r3, #0
}
 80223aa:	4618      	mov	r0, r3
 80223ac:	3714      	adds	r7, #20
 80223ae:	46bd      	mov	sp, r7
 80223b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223b4:	4770      	bx	lr

080223b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80223b6:	b580      	push	{r7, lr}
 80223b8:	b084      	sub	sp, #16
 80223ba:	af00      	add	r7, sp, #0
 80223bc:	6078      	str	r0, [r7, #4]
 80223be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80223c0:	687b      	ldr	r3, [r7, #4]
 80223c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80223c6:	2b01      	cmp	r3, #1
 80223c8:	d101      	bne.n	80223ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80223ca:	2302      	movs	r3, #2
 80223cc:	e02d      	b.n	802242a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80223ce:	687b      	ldr	r3, [r7, #4]
 80223d0:	2201      	movs	r2, #1
 80223d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80223d6:	687b      	ldr	r3, [r7, #4]
 80223d8:	2224      	movs	r2, #36	@ 0x24
 80223da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80223de:	687b      	ldr	r3, [r7, #4]
 80223e0:	681b      	ldr	r3, [r3, #0]
 80223e2:	681b      	ldr	r3, [r3, #0]
 80223e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80223e6:	687b      	ldr	r3, [r7, #4]
 80223e8:	681b      	ldr	r3, [r3, #0]
 80223ea:	681a      	ldr	r2, [r3, #0]
 80223ec:	687b      	ldr	r3, [r7, #4]
 80223ee:	681b      	ldr	r3, [r3, #0]
 80223f0:	f022 0201 	bic.w	r2, r2, #1
 80223f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80223f6:	687b      	ldr	r3, [r7, #4]
 80223f8:	681b      	ldr	r3, [r3, #0]
 80223fa:	689b      	ldr	r3, [r3, #8]
 80223fc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8022400:	687b      	ldr	r3, [r7, #4]
 8022402:	681b      	ldr	r3, [r3, #0]
 8022404:	683a      	ldr	r2, [r7, #0]
 8022406:	430a      	orrs	r2, r1
 8022408:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 802240a:	6878      	ldr	r0, [r7, #4]
 802240c:	f000 f850 	bl	80224b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8022410:	687b      	ldr	r3, [r7, #4]
 8022412:	681b      	ldr	r3, [r3, #0]
 8022414:	68fa      	ldr	r2, [r7, #12]
 8022416:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8022418:	687b      	ldr	r3, [r7, #4]
 802241a:	2220      	movs	r2, #32
 802241c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8022420:	687b      	ldr	r3, [r7, #4]
 8022422:	2200      	movs	r2, #0
 8022424:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8022428:	2300      	movs	r3, #0
}
 802242a:	4618      	mov	r0, r3
 802242c:	3710      	adds	r7, #16
 802242e:	46bd      	mov	sp, r7
 8022430:	bd80      	pop	{r7, pc}

08022432 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8022432:	b580      	push	{r7, lr}
 8022434:	b084      	sub	sp, #16
 8022436:	af00      	add	r7, sp, #0
 8022438:	6078      	str	r0, [r7, #4]
 802243a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 802243c:	687b      	ldr	r3, [r7, #4]
 802243e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8022442:	2b01      	cmp	r3, #1
 8022444:	d101      	bne.n	802244a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8022446:	2302      	movs	r3, #2
 8022448:	e02d      	b.n	80224a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 802244a:	687b      	ldr	r3, [r7, #4]
 802244c:	2201      	movs	r2, #1
 802244e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8022452:	687b      	ldr	r3, [r7, #4]
 8022454:	2224      	movs	r2, #36	@ 0x24
 8022456:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802245a:	687b      	ldr	r3, [r7, #4]
 802245c:	681b      	ldr	r3, [r3, #0]
 802245e:	681b      	ldr	r3, [r3, #0]
 8022460:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8022462:	687b      	ldr	r3, [r7, #4]
 8022464:	681b      	ldr	r3, [r3, #0]
 8022466:	681a      	ldr	r2, [r3, #0]
 8022468:	687b      	ldr	r3, [r7, #4]
 802246a:	681b      	ldr	r3, [r3, #0]
 802246c:	f022 0201 	bic.w	r2, r2, #1
 8022470:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8022472:	687b      	ldr	r3, [r7, #4]
 8022474:	681b      	ldr	r3, [r3, #0]
 8022476:	689b      	ldr	r3, [r3, #8]
 8022478:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 802247c:	687b      	ldr	r3, [r7, #4]
 802247e:	681b      	ldr	r3, [r3, #0]
 8022480:	683a      	ldr	r2, [r7, #0]
 8022482:	430a      	orrs	r2, r1
 8022484:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8022486:	6878      	ldr	r0, [r7, #4]
 8022488:	f000 f812 	bl	80224b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802248c:	687b      	ldr	r3, [r7, #4]
 802248e:	681b      	ldr	r3, [r3, #0]
 8022490:	68fa      	ldr	r2, [r7, #12]
 8022492:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8022494:	687b      	ldr	r3, [r7, #4]
 8022496:	2220      	movs	r2, #32
 8022498:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802249c:	687b      	ldr	r3, [r7, #4]
 802249e:	2200      	movs	r2, #0
 80224a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80224a4:	2300      	movs	r3, #0
}
 80224a6:	4618      	mov	r0, r3
 80224a8:	3710      	adds	r7, #16
 80224aa:	46bd      	mov	sp, r7
 80224ac:	bd80      	pop	{r7, pc}
	...

080224b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80224b0:	b480      	push	{r7}
 80224b2:	b085      	sub	sp, #20
 80224b4:	af00      	add	r7, sp, #0
 80224b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80224b8:	687b      	ldr	r3, [r7, #4]
 80224ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80224bc:	2b00      	cmp	r3, #0
 80224be:	d108      	bne.n	80224d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80224c0:	687b      	ldr	r3, [r7, #4]
 80224c2:	2201      	movs	r2, #1
 80224c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80224c8:	687b      	ldr	r3, [r7, #4]
 80224ca:	2201      	movs	r2, #1
 80224cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80224d0:	e031      	b.n	8022536 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80224d2:	2310      	movs	r3, #16
 80224d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80224d6:	2310      	movs	r3, #16
 80224d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80224da:	687b      	ldr	r3, [r7, #4]
 80224dc:	681b      	ldr	r3, [r3, #0]
 80224de:	689b      	ldr	r3, [r3, #8]
 80224e0:	0e5b      	lsrs	r3, r3, #25
 80224e2:	b2db      	uxtb	r3, r3
 80224e4:	f003 0307 	and.w	r3, r3, #7
 80224e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80224ea:	687b      	ldr	r3, [r7, #4]
 80224ec:	681b      	ldr	r3, [r3, #0]
 80224ee:	689b      	ldr	r3, [r3, #8]
 80224f0:	0f5b      	lsrs	r3, r3, #29
 80224f2:	b2db      	uxtb	r3, r3
 80224f4:	f003 0307 	and.w	r3, r3, #7
 80224f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80224fa:	7bbb      	ldrb	r3, [r7, #14]
 80224fc:	7b3a      	ldrb	r2, [r7, #12]
 80224fe:	4911      	ldr	r1, [pc, #68]	@ (8022544 <UARTEx_SetNbDataToProcess+0x94>)
 8022500:	5c8a      	ldrb	r2, [r1, r2]
 8022502:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8022506:	7b3a      	ldrb	r2, [r7, #12]
 8022508:	490f      	ldr	r1, [pc, #60]	@ (8022548 <UARTEx_SetNbDataToProcess+0x98>)
 802250a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 802250c:	fb93 f3f2 	sdiv	r3, r3, r2
 8022510:	b29a      	uxth	r2, r3
 8022512:	687b      	ldr	r3, [r7, #4]
 8022514:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8022518:	7bfb      	ldrb	r3, [r7, #15]
 802251a:	7b7a      	ldrb	r2, [r7, #13]
 802251c:	4909      	ldr	r1, [pc, #36]	@ (8022544 <UARTEx_SetNbDataToProcess+0x94>)
 802251e:	5c8a      	ldrb	r2, [r1, r2]
 8022520:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8022524:	7b7a      	ldrb	r2, [r7, #13]
 8022526:	4908      	ldr	r1, [pc, #32]	@ (8022548 <UARTEx_SetNbDataToProcess+0x98>)
 8022528:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802252a:	fb93 f3f2 	sdiv	r3, r3, r2
 802252e:	b29a      	uxth	r2, r3
 8022530:	687b      	ldr	r3, [r7, #4]
 8022532:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8022536:	bf00      	nop
 8022538:	3714      	adds	r7, #20
 802253a:	46bd      	mov	sp, r7
 802253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022540:	4770      	bx	lr
 8022542:	bf00      	nop
 8022544:	08028040 	.word	0x08028040
 8022548:	08028048 	.word	0x08028048

0802254c <prvInitialiseLogging>:

extern NetworkInterface_t xInterfaces[ 1 ];
/*-----------------------------------------------------------*/

static BaseType_t prvInitialiseLogging( void )
{
 802254c:	b580      	push	{r7, lr}
 802254e:	b082      	sub	sp, #8
 8022550:	af00      	add	r7, sp, #0
size_t xSize;
static BaseType_t xLoggingInitialised = pdFALSE;

	if( xLoggingInitialised == pdFALSE )
 8022552:	4b15      	ldr	r3, [pc, #84]	@ (80225a8 <prvInitialiseLogging+0x5c>)
 8022554:	681b      	ldr	r3, [r3, #0]
 8022556:	2b00      	cmp	r3, #0
 8022558:	d120      	bne.n	802259c <prvInitialiseLogging+0x50>
	{
		/* Don't attempt to log unless the scheduler is running. */
		if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 802255a:	f7e3 f8c5 	bl	80056e8 <xTaskGetSchedulerState>
 802255e:	4603      	mov	r3, r0
 8022560:	2b02      	cmp	r3, #2
 8022562:	d11b      	bne.n	802259c <prvInitialiseLogging+0x50>
		{
			/* Create a stream buffer large enough for the maximum number of
			bytes + 1. */ /*_RB_ Why is the size of pxStreamBuffer->ucArray
			subtracted here? */
			xSize = sizeof( StreamBuffer_t ) - sizeof( pxStreamBuffer->ucArray ) + logMESSAGE_BUFFER_SIZE_BYTES + 1;
 8022564:	f640 73b5 	movw	r3, #4021	@ 0xfb5
 8022568:	607b      	str	r3, [r7, #4]
			pxStreamBuffer = pvPortMalloc( xSize );
 802256a:	6878      	ldr	r0, [r7, #4]
 802256c:	f7e4 fa1a 	bl	80069a4 <pvPortMalloc>
 8022570:	4603      	mov	r3, r0
 8022572:	4a0e      	ldr	r2, [pc, #56]	@ (80225ac <prvInitialiseLogging+0x60>)
 8022574:	6013      	str	r3, [r2, #0]

			if( pxStreamBuffer != NULL )
 8022576:	4b0d      	ldr	r3, [pc, #52]	@ (80225ac <prvInitialiseLogging+0x60>)
 8022578:	681b      	ldr	r3, [r3, #0]
 802257a:	2b00      	cmp	r3, #0
 802257c:	d00e      	beq.n	802259c <prvInitialiseLogging+0x50>
			{
				memset( pxStreamBuffer, '\0', xSize );
 802257e:	4b0b      	ldr	r3, [pc, #44]	@ (80225ac <prvInitialiseLogging+0x60>)
 8022580:	681b      	ldr	r3, [r3, #0]
 8022582:	687a      	ldr	r2, [r7, #4]
 8022584:	2100      	movs	r1, #0
 8022586:	4618      	mov	r0, r3
 8022588:	f000 fc35 	bl	8022df6 <memset>
				pxStreamBuffer->LENGTH = logMESSAGE_BUFFER_SIZE_BYTES + 1;
 802258c:	4b07      	ldr	r3, [pc, #28]	@ (80225ac <prvInitialiseLogging+0x60>)
 802258e:	681b      	ldr	r3, [r3, #0]
 8022590:	f640 72a1 	movw	r2, #4001	@ 0xfa1
 8022594:	611a      	str	r2, [r3, #16]

				xLoggingInitialised = pdTRUE;
 8022596:	4b04      	ldr	r3, [pc, #16]	@ (80225a8 <prvInitialiseLogging+0x5c>)
 8022598:	2201      	movs	r2, #1
 802259a:	601a      	str	r2, [r3, #0]
			}
		}
	}

	return xLoggingInitialised;
 802259c:	4b02      	ldr	r3, [pc, #8]	@ (80225a8 <prvInitialiseLogging+0x5c>)
 802259e:	681b      	ldr	r3, [r3, #0]
}
 80225a0:	4618      	mov	r0, r3
 80225a2:	3708      	adds	r7, #8
 80225a4:	46bd      	mov	sp, r7
 80225a6:	bd80      	pop	{r7, pc}
 80225a8:	20002668 	.word	0x20002668
 80225ac:	20002658 	.word	0x20002658

080225b0 <prvGetMessageFromStreamBuffer>:
/*-----------------------------------------------------------*/

static size_t prvGetMessageFromStreamBuffer( char* pcBuffer, size_t xBufferLength )
{
 80225b0:	b580      	push	{r7, lr}
 80225b2:	b086      	sub	sp, #24
 80225b4:	af02      	add	r7, sp, #8
 80225b6:	6078      	str	r0, [r7, #4]
 80225b8:	6039      	str	r1, [r7, #0]
size_t uxLength;
size_t xMessageLength = 0;
 80225ba:	2300      	movs	r3, #0
 80225bc:	60bb      	str	r3, [r7, #8]

	if( pxStreamBuffer != NULL )
 80225be:	4b24      	ldr	r3, [pc, #144]	@ (8022650 <prvGetMessageFromStreamBuffer+0xa0>)
 80225c0:	681b      	ldr	r3, [r3, #0]
 80225c2:	2b00      	cmp	r3, #0
 80225c4:	d03f      	beq.n	8022646 <prvGetMessageFromStreamBuffer+0x96>
	{
		/* Is there data in the stream buffer? */
		uxLength = uxStreamBufferGetSize( pxStreamBuffer );
 80225c6:	4b22      	ldr	r3, [pc, #136]	@ (8022650 <prvGetMessageFromStreamBuffer+0xa0>)
 80225c8:	681b      	ldr	r3, [r3, #0]
 80225ca:	4618      	mov	r0, r3
 80225cc:	f7ee fe19 	bl	8011202 <uxStreamBufferGetSize>
 80225d0:	60f8      	str	r0, [r7, #12]
		if( uxLength > sizeof( size_t ) )
 80225d2:	68fb      	ldr	r3, [r7, #12]
 80225d4:	2b04      	cmp	r3, #4
 80225d6:	d936      	bls.n	8022646 <prvGetMessageFromStreamBuffer+0x96>
		{
			/* Avoid concurrent access to the buffer. */
			vTaskSuspendAll();
 80225d8:	f7e2 fa68 	bl	8004aac <vTaskSuspendAll>
			{
				/* Every message is stored as a length followed by the string.
				Obtain the length of the data first. */
				uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) &xMessageLength, sizeof( xMessageLength ), pdFALSE );
 80225dc:	4b1c      	ldr	r3, [pc, #112]	@ (8022650 <prvGetMessageFromStreamBuffer+0xa0>)
 80225de:	6818      	ldr	r0, [r3, #0]
 80225e0:	f107 0208 	add.w	r2, r7, #8
 80225e4:	2300      	movs	r3, #0
 80225e6:	9300      	str	r3, [sp, #0]
 80225e8:	2304      	movs	r3, #4
 80225ea:	2100      	movs	r1, #0
 80225ec:	f7ee ff27 	bl	801143e <uxStreamBufferGet>

				if( xBufferLength < xMessageLength )
 80225f0:	68bb      	ldr	r3, [r7, #8]
 80225f2:	683a      	ldr	r2, [r7, #0]
 80225f4:	429a      	cmp	r2, r3
 80225f6:	d216      	bcs.n	8022626 <prvGetMessageFromStreamBuffer+0x76>
				{
					/* The 'pcBuffer' provided by the caller is too small.  Load
					the message first into 'xLogEntry.message', and then copy
					as much as possible to 'pcBuffer'. */
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) xLogEntry.cMessage, xMessageLength, pdFALSE );
 80225f8:	4b15      	ldr	r3, [pc, #84]	@ (8022650 <prvGetMessageFromStreamBuffer+0xa0>)
 80225fa:	6818      	ldr	r0, [r3, #0]
 80225fc:	68bb      	ldr	r3, [r7, #8]
 80225fe:	2200      	movs	r2, #0
 8022600:	9200      	str	r2, [sp, #0]
 8022602:	4a14      	ldr	r2, [pc, #80]	@ (8022654 <prvGetMessageFromStreamBuffer+0xa4>)
 8022604:	2100      	movs	r1, #0
 8022606:	f7ee ff1a 	bl	801143e <uxStreamBufferGet>
					memcpy( pcBuffer, xLogEntry.cMessage, xBufferLength );
 802260a:	683a      	ldr	r2, [r7, #0]
 802260c:	4911      	ldr	r1, [pc, #68]	@ (8022654 <prvGetMessageFromStreamBuffer+0xa4>)
 802260e:	6878      	ldr	r0, [r7, #4]
 8022610:	f000 fae4 	bl	8022bdc <memcpy>
					xMessageLength = xBufferLength;
 8022614:	683b      	ldr	r3, [r7, #0]
 8022616:	60bb      	str	r3, [r7, #8]

					/* Terminate the string at the very end of the buffer. */
					pcBuffer[ xBufferLength - 1 ] = 0x00;
 8022618:	683b      	ldr	r3, [r7, #0]
 802261a:	3b01      	subs	r3, #1
 802261c:	687a      	ldr	r2, [r7, #4]
 802261e:	4413      	add	r3, r2
 8022620:	2200      	movs	r2, #0
 8022622:	701a      	strb	r2, [r3, #0]
 8022624:	e00d      	b.n	8022642 <prvGetMessageFromStreamBuffer+0x92>
				}
				else
				{
					/* The 'pcBuffer' provided by the caller is big enough. */
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) pcBuffer, xMessageLength, pdFALSE );
 8022626:	4b0a      	ldr	r3, [pc, #40]	@ (8022650 <prvGetMessageFromStreamBuffer+0xa0>)
 8022628:	6818      	ldr	r0, [r3, #0]
 802262a:	68bb      	ldr	r3, [r7, #8]
 802262c:	2200      	movs	r2, #0
 802262e:	9200      	str	r2, [sp, #0]
 8022630:	687a      	ldr	r2, [r7, #4]
 8022632:	2100      	movs	r1, #0
 8022634:	f7ee ff03 	bl	801143e <uxStreamBufferGet>

					/* Terminate the string after the string's last character. */
					pcBuffer[ xMessageLength ] = 0x00;
 8022638:	68bb      	ldr	r3, [r7, #8]
 802263a:	687a      	ldr	r2, [r7, #4]
 802263c:	4413      	add	r3, r2
 802263e:	2200      	movs	r2, #0
 8022640:	701a      	strb	r2, [r3, #0]
				}
			}
			xTaskResumeAll();
 8022642:	f7e2 fa41 	bl	8004ac8 <xTaskResumeAll>
		}
	}

	return xMessageLength;
 8022646:	68bb      	ldr	r3, [r7, #8]
}
 8022648:	4618      	mov	r0, r3
 802264a:	3710      	adds	r7, #16
 802264c:	46bd      	mov	sp, r7
 802264e:	bd80      	pop	{r7, pc}
 8022650:	20002658 	.word	0x20002658
 8022654:	20002590 	.word	0x20002590

08022658 <prvBufferFormattedString>:
/*-----------------------------------------------------------*/

static size_t prvBufferFormattedString( const char *pcFormatString, va_list xArgs )
{
 8022658:	b580      	push	{r7, lr}
 802265a:	b08e      	sub	sp, #56	@ 0x38
 802265c:	af04      	add	r7, sp, #16
 802265e:	6078      	str	r0, [r7, #4]
 8022660:	6039      	str	r1, [r7, #0]
size_t xLength, xSpace;
uint64_t ullCurrentTime;
uint32_t ulSeconds, ulMilliSeconds, ulMicroSeconds;

	/* Sanity check. */
	configASSERT( pxStreamBuffer );
 8022662:	4b49      	ldr	r3, [pc, #292]	@ (8022788 <prvBufferFormattedString+0x130>)
 8022664:	681b      	ldr	r3, [r3, #0]
 8022666:	2b00      	cmp	r3, #0
 8022668:	d104      	bne.n	8022674 <prvBufferFormattedString+0x1c>
 802266a:	f44f 7199 	mov.w	r1, #306	@ 0x132
 802266e:	4847      	ldr	r0, [pc, #284]	@ (802278c <prvBufferFormattedString+0x134>)
 8022670:	f7df f9ca 	bl	8001a08 <vAssertCalled>

	vTaskSuspendAll();
 8022674:	f7e2 fa1a 	bl	8004aac <vTaskSuspendAll>
	{
		ullCurrentTime = ullGetHighResolutionTime();
 8022678:	f000 fa2a 	bl	8022ad0 <ullGetHighResolutionTime>
 802267c:	e9c7 0108 	strd	r0, r1, [r7, #32]
		ulSeconds = ( uint32_t ) ( ullCurrentTime / 1000000ull );
 8022680:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022684:	4a42      	ldr	r2, [pc, #264]	@ (8022790 <prvBufferFormattedString+0x138>)
 8022686:	f04f 0300 	mov.w	r3, #0
 802268a:	f7dd fe91 	bl	80003b0 <__aeabi_uldivmod>
 802268e:	4602      	mov	r2, r0
 8022690:	460b      	mov	r3, r1
 8022692:	4613      	mov	r3, r2
 8022694:	61fb      	str	r3, [r7, #28]
		ullCurrentTime = ullCurrentTime % 1000000ull;
 8022696:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802269a:	4a3d      	ldr	r2, [pc, #244]	@ (8022790 <prvBufferFormattedString+0x138>)
 802269c:	f04f 0300 	mov.w	r3, #0
 80226a0:	f7dd fe86 	bl	80003b0 <__aeabi_uldivmod>
 80226a4:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ulMilliSeconds = ( uint32_t ) ( ullCurrentTime / 1000ull );
 80226a8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80226ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80226b0:	f04f 0300 	mov.w	r3, #0
 80226b4:	f7dd fe7c 	bl	80003b0 <__aeabi_uldivmod>
 80226b8:	4602      	mov	r2, r0
 80226ba:	460b      	mov	r3, r1
 80226bc:	4613      	mov	r3, r2
 80226be:	61bb      	str	r3, [r7, #24]
		ulMicroSeconds = ( uint32_t ) ( ullCurrentTime % 1000ull );
 80226c0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80226c4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80226c8:	f04f 0300 	mov.w	r3, #0
 80226cc:	f7dd fe70 	bl	80003b0 <__aeabi_uldivmod>
 80226d0:	4613      	mov	r3, r2
 80226d2:	617b      	str	r3, [r7, #20]

		xLength = ( size_t ) snprintf( xLogEntry.cMessage, sizeof( xLogEntry.cMessage ), "%4u.%03u.%03u [%-10s] ",
 80226d4:	2000      	movs	r0, #0
 80226d6:	f7e2 fb0b 	bl	8004cf0 <pcTaskGetName>
 80226da:	4603      	mov	r3, r0
 80226dc:	9302      	str	r3, [sp, #8]
 80226de:	697b      	ldr	r3, [r7, #20]
 80226e0:	9301      	str	r3, [sp, #4]
 80226e2:	69bb      	ldr	r3, [r7, #24]
 80226e4:	9300      	str	r3, [sp, #0]
 80226e6:	69fb      	ldr	r3, [r7, #28]
 80226e8:	4a2a      	ldr	r2, [pc, #168]	@ (8022794 <prvBufferFormattedString+0x13c>)
 80226ea:	21c8      	movs	r1, #200	@ 0xc8
 80226ec:	482a      	ldr	r0, [pc, #168]	@ (8022798 <prvBufferFormattedString+0x140>)
 80226ee:	f001 f885 	bl	80237fc <snprintf>
 80226f2:	4603      	mov	r3, r0
 80226f4:	60fb      	str	r3, [r7, #12]
			( unsigned int ) ulSeconds, ( unsigned int ) ulMilliSeconds, ( unsigned int ) ulMicroSeconds, pcTaskGetTaskName( NULL ) );
		xLength += ( size_t ) vsnprintf( xLogEntry.cMessage + xLength, sizeof( xLogEntry.cMessage ) - xLength, pcFormatString, xArgs );
 80226f6:	68fb      	ldr	r3, [r7, #12]
 80226f8:	4a27      	ldr	r2, [pc, #156]	@ (8022798 <prvBufferFormattedString+0x140>)
 80226fa:	1898      	adds	r0, r3, r2
 80226fc:	68fb      	ldr	r3, [r7, #12]
 80226fe:	f1c3 01c8 	rsb	r1, r3, #200	@ 0xc8
 8022702:	683b      	ldr	r3, [r7, #0]
 8022704:	687a      	ldr	r2, [r7, #4]
 8022706:	f001 f85d 	bl	80237c4 <vsnprintf>
 802270a:	4603      	mov	r3, r0
 802270c:	461a      	mov	r2, r3
 802270e:	68fb      	ldr	r3, [r7, #12]
 8022710:	4413      	add	r3, r2
 8022712:	60fb      	str	r3, [r7, #12]

		xSpace = uxStreamBufferGetSpace( pxStreamBuffer );
 8022714:	4b1c      	ldr	r3, [pc, #112]	@ (8022788 <prvBufferFormattedString+0x130>)
 8022716:	681b      	ldr	r3, [r3, #0]
 8022718:	4618      	mov	r0, r3
 802271a:	f7ee fd50 	bl	80111be <uxStreamBufferGetSpace>
 802271e:	6138      	str	r0, [r7, #16]

		if( xSpace > ( xLength + sizeof( BaseType_t ) ) )
 8022720:	68fb      	ldr	r3, [r7, #12]
 8022722:	3304      	adds	r3, #4
 8022724:	693a      	ldr	r2, [r7, #16]
 8022726:	429a      	cmp	r2, r3
 8022728:	d90e      	bls.n	8022748 <prvBufferFormattedString+0xf0>
		{
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) &xLength, sizeof( xLength ) );
 802272a:	4b17      	ldr	r3, [pc, #92]	@ (8022788 <prvBufferFormattedString+0x130>)
 802272c:	6818      	ldr	r0, [r3, #0]
 802272e:	f107 020c 	add.w	r2, r7, #12
 8022732:	2304      	movs	r3, #4
 8022734:	2100      	movs	r1, #0
 8022736:	f7ee fe02 	bl	801133e <uxStreamBufferAdd>
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) ( xLogEntry.cMessage ), xLength );
 802273a:	4b13      	ldr	r3, [pc, #76]	@ (8022788 <prvBufferFormattedString+0x130>)
 802273c:	6818      	ldr	r0, [r3, #0]
 802273e:	68fb      	ldr	r3, [r7, #12]
 8022740:	4a15      	ldr	r2, [pc, #84]	@ (8022798 <prvBufferFormattedString+0x140>)
 8022742:	2100      	movs	r1, #0
 8022744:	f7ee fdfb 	bl	801133e <uxStreamBufferAdd>
		}
	}
	xTaskResumeAll();
 8022748:	f7e2 f9be 	bl	8004ac8 <xTaskResumeAll>

	if( xLoggingTask == NULL )
 802274c:	4b13      	ldr	r3, [pc, #76]	@ (802279c <prvBufferFormattedString+0x144>)
 802274e:	681b      	ldr	r3, [r3, #0]
 8022750:	2b00      	cmp	r3, #0
 8022752:	d10a      	bne.n	802276a <prvBufferFormattedString+0x112>
	{
		/* The task isn't running yet, call the hook directly. */
		vUDPLoggingHook( xLogEntry.cMessage, xLength );
 8022754:	68fb      	ldr	r3, [r7, #12]
 8022756:	4619      	mov	r1, r3
 8022758:	480f      	ldr	r0, [pc, #60]	@ (8022798 <prvBufferFormattedString+0x140>)
 802275a:	f000 f85b 	bl	8022814 <vUDPLoggingHook>
		uxSkipCount++;
 802275e:	4b10      	ldr	r3, [pc, #64]	@ (80227a0 <prvBufferFormattedString+0x148>)
 8022760:	681b      	ldr	r3, [r3, #0]
 8022762:	3301      	adds	r3, #1
 8022764:	4a0e      	ldr	r2, [pc, #56]	@ (80227a0 <prvBufferFormattedString+0x148>)
 8022766:	6013      	str	r3, [r2, #0]
 8022768:	e008      	b.n	802277c <prvBufferFormattedString+0x124>
	}
	else
	{
		/* Unblock the logging task so it can output the message. */
		xTaskNotifyGive( xLoggingTask );
 802276a:	4b0c      	ldr	r3, [pc, #48]	@ (802279c <prvBufferFormattedString+0x144>)
 802276c:	6818      	ldr	r0, [r3, #0]
 802276e:	2300      	movs	r3, #0
 8022770:	9300      	str	r3, [sp, #0]
 8022772:	2302      	movs	r3, #2
 8022774:	2200      	movs	r2, #0
 8022776:	2100      	movs	r1, #0
 8022778:	f7e3 fafc 	bl	8005d74 <xTaskGenericNotify>
	}

	return xLength;
 802277c:	68fb      	ldr	r3, [r7, #12]
}
 802277e:	4618      	mov	r0, r3
 8022780:	3728      	adds	r7, #40	@ 0x28
 8022782:	46bd      	mov	sp, r7
 8022784:	bd80      	pop	{r7, pc}
 8022786:	bf00      	nop
 8022788:	20002658 	.word	0x20002658
 802278c:	08027e28 	.word	0x08027e28
 8022790:	000f4240 	.word	0x000f4240
 8022794:	08027e50 	.word	0x08027e50
 8022798:	20002590 	.word	0x20002590
 802279c:	2000265c 	.word	0x2000265c
 80227a0:	20002660 	.word	0x20002660

080227a4 <lUDPLoggingPrintf>:
/*-----------------------------------------------------------*/

int lUDPLoggingPrintf( const char *pcFormatString, ... )
{
 80227a4:	b40f      	push	{r0, r1, r2, r3}
 80227a6:	b580      	push	{r7, lr}
 80227a8:	b082      	sub	sp, #8
 80227aa:	af00      	add	r7, sp, #0
size_t xLength;

	if( prvInitialiseLogging() != pdFALSE )
 80227ac:	f7ff fece 	bl	802254c <prvInitialiseLogging>
 80227b0:	4603      	mov	r3, r0
 80227b2:	2b00      	cmp	r3, #0
 80227b4:	d008      	beq.n	80227c8 <lUDPLoggingPrintf+0x24>
	{
		va_list args;
		va_start (args, pcFormatString);
 80227b6:	f107 0314 	add.w	r3, r7, #20
 80227ba:	603b      	str	r3, [r7, #0]
		xLength = prvBufferFormattedString (pcFormatString, args);
 80227bc:	6839      	ldr	r1, [r7, #0]
 80227be:	6938      	ldr	r0, [r7, #16]
 80227c0:	f7ff ff4a 	bl	8022658 <prvBufferFormattedString>
 80227c4:	6078      	str	r0, [r7, #4]
 80227c6:	e001      	b.n	80227cc <lUDPLoggingPrintf+0x28>
		va_end (args);
	}
	else
	{
		xLength = 0;
 80227c8:	2300      	movs	r3, #0
 80227ca:	607b      	str	r3, [r7, #4]
	}

	return ( int ) xLength;
 80227cc:	687b      	ldr	r3, [r7, #4]
}
 80227ce:	4618      	mov	r0, r3
 80227d0:	3708      	adds	r7, #8
 80227d2:	46bd      	mov	sp, r7
 80227d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80227d8:	b004      	add	sp, #16
 80227da:	4770      	bx	lr

080227dc <vUDPLoggingTaskCreate>:
/*-----------------------------------------------------------*/

BaseType_t rc_create;

void vUDPLoggingTaskCreate( void )
{
 80227dc:	b580      	push	{r7, lr}
 80227de:	b082      	sub	sp, #8
 80227e0:	af02      	add	r7, sp, #8
	/* Start a task which will send out the logging lines to a UDP address. */
	rc_create = xTaskCreate( prvLoggingTask, "LogTask", configUDP_LOGGING_TASK_STACK_SIZE, NULL, configUDP_LOGGING_TASK_PRIORITY, &xLoggingTask );
 80227e2:	4b08      	ldr	r3, [pc, #32]	@ (8022804 <vUDPLoggingTaskCreate+0x28>)
 80227e4:	9301      	str	r3, [sp, #4]
 80227e6:	2302      	movs	r3, #2
 80227e8:	9300      	str	r3, [sp, #0]
 80227ea:	2300      	movs	r3, #0
 80227ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80227f0:	4905      	ldr	r1, [pc, #20]	@ (8022808 <vUDPLoggingTaskCreate+0x2c>)
 80227f2:	4806      	ldr	r0, [pc, #24]	@ (802280c <vUDPLoggingTaskCreate+0x30>)
 80227f4:	f7e1 fec4 	bl	8004580 <xTaskCreate>
 80227f8:	4603      	mov	r3, r0
 80227fa:	4a05      	ldr	r2, [pc, #20]	@ (8022810 <vUDPLoggingTaskCreate+0x34>)
 80227fc:	6013      	str	r3, [r2, #0]
}
 80227fe:	bf00      	nop
 8022800:	46bd      	mov	sp, r7
 8022802:	bd80      	pop	{r7, pc}
 8022804:	2000265c 	.word	0x2000265c
 8022808:	08027e68 	.word	0x08027e68
 802280c:	0802282d 	.word	0x0802282d
 8022810:	20002664 	.word	0x20002664

08022814 <vUDPLoggingHook>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void __attribute__((weak)) vUDPLoggingHook( const char *pcMessage, BaseType_t xLength )
{
 8022814:	b480      	push	{r7}
 8022816:	b083      	sub	sp, #12
 8022818:	af00      	add	r7, sp, #0
 802281a:	6078      	str	r0, [r7, #4]
 802281c:	6039      	str	r1, [r7, #0]
	( void ) pcMessage;
	( void ) xLength;
}
 802281e:	bf00      	nop
 8022820:	370c      	adds	r7, #12
 8022822:	46bd      	mov	sp, r7
 8022824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022828:	4770      	bx	lr
	...

0802282c <prvLoggingTask>:
#if( ipconfigOLD_MULTI != 0 )
	#define ENDPOINT_IS_IPv4( pxEndPoint )	( 1 )
#endif

static void prvLoggingTask( void *pvParameters )
{
 802282c:	b580      	push	{r7, lr}
 802282e:	b098      	sub	sp, #96	@ 0x60
 8022830:	af02      	add	r7, sp, #8
 8022832:	6078      	str	r0, [r7, #4]
TickType_t xBlockingTime = pdMS_TO_TICKS( logUDP_LOGGING_BLOCK_TIME_MS );
 8022834:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8022838:	64bb      	str	r3, [r7, #72]	@ 0x48

	#if( ipconfigMULTI_INTERFACE != 0 )
	{
		for( ;; )
		{
			for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 802283a:	2000      	movs	r0, #0
 802283c:	f7eb f974 	bl	800db28 <FreeRTOS_FirstEndPoint>
 8022840:	6538      	str	r0, [r7, #80]	@ 0x50
 8022842:	e01c      	b.n	802287e <prvLoggingTask+0x52>
				pxEndPoint != NULL;
				pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
			{
				if( ( pxEndPoint->bits.bEndPointUp ) && ( ENDPOINT_IS_IPv4( pxEndPoint ) != pdFALSE) )
 8022844:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022846:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 802284a:	f003 0310 	and.w	r3, r3, #16
 802284e:	b2db      	uxtb	r3, r3
 8022850:	2b00      	cmp	r3, #0
 8022852:	d00f      	beq.n	8022874 <prvLoggingTask+0x48>
 8022854:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022856:	2b00      	cmp	r3, #0
 8022858:	d009      	beq.n	802286e <prvLoggingTask+0x42>
 802285a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802285c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8022860:	f003 0304 	and.w	r3, r3, #4
 8022864:	b2db      	uxtb	r3, r3
 8022866:	2b00      	cmp	r3, #0
 8022868:	d101      	bne.n	802286e <prvLoggingTask+0x42>
 802286a:	2301      	movs	r3, #1
 802286c:	e000      	b.n	8022870 <prvLoggingTask+0x44>
 802286e:	2300      	movs	r3, #0
 8022870:	2b00      	cmp	r3, #0
 8022872:	d108      	bne.n	8022886 <prvLoggingTask+0x5a>
				pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8022874:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8022876:	2000      	movs	r0, #0
 8022878:	f7eb f978 	bl	800db6c <FreeRTOS_NextEndPoint>
 802287c:	6538      	str	r0, [r7, #80]	@ 0x50
				pxEndPoint != NULL;
 802287e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022880:	2b00      	cmp	r3, #0
 8022882:	d1df      	bne.n	8022844 <prvLoggingTask+0x18>
 8022884:	e000      	b.n	8022888 <prvLoggingTask+0x5c>
				{
					break;
 8022886:	bf00      	nop
				}
			}
			if( pxEndPoint != pdFALSE )
 8022888:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802288a:	2b00      	cmp	r3, #0
 802288c:	d000      	beq.n	8022890 <prvLoggingTask+0x64>
			{
				break;
 802288e:	e004      	b.n	802289a <prvLoggingTask+0x6e>
			}
			vTaskDelay( 1000 );
 8022890:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8022894:	f7e2 f852 	bl	800493c <vTaskDelay>
			for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8022898:	e7cf      	b.n	802283a <prvLoggingTask+0xe>
	#endif	/* ( ipconfigMULTI_INTERFACE != 0 ) */

	/* Loop until a socket is created. */
	do
	{
		vTaskDelay( xBlockingTime );
 802289a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 802289c:	f7e2 f84e 	bl	800493c <vTaskDelay>
		xUDPLoggingSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 80228a0:	2211      	movs	r2, #17
 80228a2:	2102      	movs	r1, #2
 80228a4:	2002      	movs	r0, #2
 80228a6:	f7eb febb 	bl	800e620 <FreeRTOS_socket>
 80228aa:	4603      	mov	r3, r0
 80228ac:	4a4c      	ldr	r2, [pc, #304]	@ (80229e0 <prvLoggingTask+0x1b4>)
 80228ae:	6013      	str	r3, [r2, #0]
	} while( xUDPLoggingSocket == FREERTOS_INVALID_SOCKET );
 80228b0:	4b4b      	ldr	r3, [pc, #300]	@ (80229e0 <prvLoggingTask+0x1b4>)
 80228b2:	681b      	ldr	r3, [r3, #0]
 80228b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80228b8:	d0ef      	beq.n	802289a <prvLoggingTask+0x6e>

	#if( ipconfigMULTI_INTERFACE != 0 )
	{
//		pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
		configASSERT( pxEndPoint != NULL );
 80228ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80228bc:	2b00      	cmp	r3, #0
 80228be:	d104      	bne.n	80228ca <prvLoggingTask+0x9e>
 80228c0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80228c4:	4847      	ldr	r0, [pc, #284]	@ (80229e4 <prvLoggingTask+0x1b8>)
 80228c6:	f7df f89f 	bl	8001a08 <vAssertCalled>
		configASSERT( pxEndPoint->pxNetworkInterface != NULL );
 80228ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80228cc:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80228d0:	2b00      	cmp	r3, #0
 80228d2:	d104      	bne.n	80228de <prvLoggingTask+0xb2>
 80228d4:	f240 11df 	movw	r1, #479	@ 0x1df
 80228d8:	4842      	ldr	r0, [pc, #264]	@ (80229e4 <prvLoggingTask+0x1b8>)
 80228da:	f7df f895 	bl	8001a08 <vAssertCalled>
		pxNetworkInterface = pxEndPoint->pxNetworkInterface;
 80228de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80228e0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80228e4:	647b      	str	r3, [r7, #68]	@ 0x44
		//xRemoteAddress.sin_addr = FREERTOS_INADDR_ANY;
	}
	#endif

	xLocalAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_LOCAL );
 80228e6:	f246 2309 	movw	r3, #25097	@ 0x6209
 80228ea:	857b      	strh	r3, [r7, #42]	@ 0x2a
	{
		xLocalAddress.sin_addr = pxEndPoint->ulIPAddress;
	}
	#else
	{
		xLocalAddress.sin_addr = pxEndPoint->ipv4_settings.ulIPAddress;
 80228ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80228ee:	681b      	ldr	r3, [r3, #0]
 80228f0:	633b      	str	r3, [r7, #48]	@ 0x30
	#endif
#else
	xLocalAddress.sin_addr = FreeRTOS_GetIPAddress();
#endif

	FreeRTOS_bind( xUDPLoggingSocket, &xLocalAddress, sizeof( xLocalAddress ) );
 80228f2:	4b3b      	ldr	r3, [pc, #236]	@ (80229e0 <prvLoggingTask+0x1b4>)
 80228f4:	681b      	ldr	r3, [r3, #0]
 80228f6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80228fa:	2218      	movs	r2, #24
 80228fc:	4618      	mov	r0, r3
 80228fe:	f7ec f87f 	bl	800ea00 <FreeRTOS_bind>

	xSendTimeOut = xBlockingTime;
 8022902:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8022904:	627b      	str	r3, [r7, #36]	@ 0x24
	FreeRTOS_setsockopt( xUDPLoggingSocket, 0, FREERTOS_SO_SNDTIMEO, &xSendTimeOut, sizeof( xSendTimeOut ) );
 8022906:	4b36      	ldr	r3, [pc, #216]	@ (80229e0 <prvLoggingTask+0x1b4>)
 8022908:	6818      	ldr	r0, [r3, #0]
 802290a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802290e:	2204      	movs	r2, #4
 8022910:	9200      	str	r2, [sp, #0]
 8022912:	2201      	movs	r2, #1
 8022914:	2100      	movs	r1, #0
 8022916:	f7ec fe3d 	bl	800f594 <FreeRTOS_setsockopt>

	for( ;; )
	{
		/* Wait for another message to be placed into the stream buffer. */
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 802291a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802291c:	2101      	movs	r1, #1
 802291e:	2000      	movs	r0, #0
 8022920:	f7e3 f91c 	bl	8005b5c <ulTaskGenericNotifyTake>

	#if( ipconfigMULTI_INTERFACE != 0 )
		if( pxNetworkInterface->pfGetPhyLinkStatus( pxNetworkInterface ) != pdFALSE )
 8022924:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8022926:	691b      	ldr	r3, [r3, #16]
 8022928:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 802292a:	4798      	blx	r3
 802292c:	4603      	mov	r3, r0
 802292e:	2b00      	cmp	r3, #0
 8022930:	d0f3      	beq.n	802291a <prvLoggingTask+0xee>
	#else
		if( xSTM32H_GetPhyLinkStatus(&( xInterfaces[ 0 ] )) != pdFALSE )
	#endif
		{
			/* Check for messages in the buffer. */
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
 8022932:	2300      	movs	r3, #0
 8022934:	657b      	str	r3, [r7, #84]	@ 0x54
 8022936:	e04c      	b.n	80229d2 <prvLoggingTask+0x1a6>
			{
				xCount = prvGetMessageFromStreamBuffer ( cLoggingLine, sizeof( cLoggingLine ) );
 8022938:	21c8      	movs	r1, #200	@ 0xc8
 802293a:	482b      	ldr	r0, [pc, #172]	@ (80229e8 <prvLoggingTask+0x1bc>)
 802293c:	f7ff fe38 	bl	80225b0 <prvGetMessageFromStreamBuffer>
 8022940:	6438      	str	r0, [r7, #64]	@ 0x40

				if( xCount <= 0 )
 8022942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8022944:	2b00      	cmp	r3, #0
 8022946:	d048      	beq.n	80229da <prvLoggingTask+0x1ae>
				#if( ipconfigMULTI_INTERFACE != 0 )
				{
				struct freertos_sockaddr xAddress;
				NetworkEndPoint_t *pxEndPoint;

					for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8022948:	2000      	movs	r0, #0
 802294a:	f7eb f8ed 	bl	800db28 <FreeRTOS_FirstEndPoint>
 802294e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8022950:	e02a      	b.n	80229a8 <prvLoggingTask+0x17c>
						pxEndPoint != NULL;
						)
					{
						if( ENDPOINT_IS_IPv4( pxEndPoint ) )
 8022952:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022954:	2b00      	cmp	r3, #0
 8022956:	d022      	beq.n	802299e <prvLoggingTask+0x172>
 8022958:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802295a:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 802295e:	f003 0304 	and.w	r3, r3, #4
 8022962:	b2db      	uxtb	r3, r3
 8022964:	2b00      	cmp	r3, #0
 8022966:	d11a      	bne.n	802299e <prvLoggingTask+0x172>
						{
							xAddress.sin_len = sizeof( xAddress );		/* length of this structure. */
 8022968:	2318      	movs	r3, #24
 802296a:	733b      	strb	r3, [r7, #12]
							xAddress.sin_family = FREERTOS_AF_INET;
 802296c:	2302      	movs	r3, #2
 802296e:	737b      	strb	r3, [r7, #13]
							{
								xAddress.sin_addr = pxEndPoint->ulIPAddress | ~( pxEndPoint->ulNetMask );
							}
							#else
							{
								xAddress.sin_addr = pxEndPoint->ipv4_settings.ulIPAddress | ~( pxEndPoint->ipv4_settings.ulNetMask );
 8022970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022972:	681a      	ldr	r2, [r3, #0]
 8022974:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022976:	685b      	ldr	r3, [r3, #4]
 8022978:	43db      	mvns	r3, r3
 802297a:	4313      	orrs	r3, r2
 802297c:	617b      	str	r3, [r7, #20]
							}
							#endif
							xAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_REMOTE );
 802297e:	f246 3309 	movw	r3, #25353	@ 0x6309
 8022982:	81fb      	strh	r3, [r7, #14]
							//if( pxNextEndPoint == NULL )
							{
								FreeRTOS_sendto( xUDPLoggingSocket, ( void * ) cLoggingLine, xCount, 0, &xAddress, sizeof( xAddress ) );
 8022984:	4b16      	ldr	r3, [pc, #88]	@ (80229e0 <prvLoggingTask+0x1b4>)
 8022986:	6818      	ldr	r0, [r3, #0]
 8022988:	2318      	movs	r3, #24
 802298a:	9301      	str	r3, [sp, #4]
 802298c:	f107 030c 	add.w	r3, r7, #12
 8022990:	9300      	str	r3, [sp, #0]
 8022992:	2300      	movs	r3, #0
 8022994:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8022996:	4914      	ldr	r1, [pc, #80]	@ (80229e8 <prvLoggingTask+0x1bc>)
 8022998:	f7eb ffc2 	bl	800e920 <FreeRTOS_sendto>
							}
							break;
 802299c:	e007      	b.n	80229ae <prvLoggingTask+0x182>
						}
						pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint );
 802299e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80229a0:	2000      	movs	r0, #0
 80229a2:	f7eb f8e3 	bl	800db6c <FreeRTOS_NextEndPoint>
 80229a6:	64f8      	str	r0, [r7, #76]	@ 0x4c
						pxEndPoint != NULL;
 80229a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80229aa:	2b00      	cmp	r3, #0
 80229ac:	d1d1      	bne.n	8022952 <prvLoggingTask+0x126>
				{
//#warning Do not send logging as a test
					FreeRTOS_sendto( xUDPLoggingSocket, ( void * ) cLoggingLine, xCount, 0, &xRemoteAddress, sizeof( xRemoteAddress ) );
				}
				#endif
				if( uxSkipCount != ( size_t )0u )
 80229ae:	4b0f      	ldr	r3, [pc, #60]	@ (80229ec <prvLoggingTask+0x1c0>)
 80229b0:	681b      	ldr	r3, [r3, #0]
 80229b2:	2b00      	cmp	r3, #0
 80229b4:	d005      	beq.n	80229c2 <prvLoggingTask+0x196>
				{
					uxSkipCount--;
 80229b6:	4b0d      	ldr	r3, [pc, #52]	@ (80229ec <prvLoggingTask+0x1c0>)
 80229b8:	681b      	ldr	r3, [r3, #0]
 80229ba:	3b01      	subs	r3, #1
 80229bc:	4a0b      	ldr	r2, [pc, #44]	@ (80229ec <prvLoggingTask+0x1c0>)
 80229be:	6013      	str	r3, [r2, #0]
 80229c0:	e004      	b.n	80229cc <prvLoggingTask+0x1a0>
				}
				else
				{
					vUDPLoggingHook( cLoggingLine, xCount );
 80229c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80229c4:	4619      	mov	r1, r3
 80229c6:	4808      	ldr	r0, [pc, #32]	@ (80229e8 <prvLoggingTask+0x1bc>)
 80229c8:	f7ff ff24 	bl	8022814 <vUDPLoggingHook>
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
 80229cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80229ce:	3301      	adds	r3, #1
 80229d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80229d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80229d4:	2b13      	cmp	r3, #19
 80229d6:	ddaf      	ble.n	8022938 <prvLoggingTask+0x10c>
 80229d8:	e79f      	b.n	802291a <prvLoggingTask+0xee>
					break;
 80229da:	bf00      	nop
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 80229dc:	e79d      	b.n	802291a <prvLoggingTask+0xee>
 80229de:	bf00      	nop
 80229e0:	20000028 	.word	0x20000028
 80229e4:	08027e28 	.word	0x08027e28
 80229e8:	2000266c 	.word	0x2000266c
 80229ec:	20002660 	.word	0x20002660

080229f0 <TIM2_IRQHandler>:

static uint32_t ulInterruptCount = 0;

uint32_t ulTimer2Flags;
void TIM2_IRQHandler(void)
{
 80229f0:	b480      	push	{r7}
 80229f2:	af00      	add	r7, sp, #0
	ulTimer2Flags = htim2.Instance->SR;
 80229f4:	4b0c      	ldr	r3, [pc, #48]	@ (8022a28 <TIM2_IRQHandler+0x38>)
 80229f6:	681b      	ldr	r3, [r3, #0]
 80229f8:	691b      	ldr	r3, [r3, #16]
 80229fa:	4a0c      	ldr	r2, [pc, #48]	@ (8022a2c <TIM2_IRQHandler+0x3c>)
 80229fc:	6013      	str	r3, [r2, #0]
	if( ( ulTimer2Flags & TIM_FLAG_UPDATE ) != 0 )
 80229fe:	4b0b      	ldr	r3, [pc, #44]	@ (8022a2c <TIM2_IRQHandler+0x3c>)
 8022a00:	681b      	ldr	r3, [r3, #0]
 8022a02:	f003 0301 	and.w	r3, r3, #1
 8022a06:	2b00      	cmp	r3, #0
 8022a08:	d009      	beq.n	8022a1e <TIM2_IRQHandler+0x2e>
	{
		__HAL_TIM_CLEAR_FLAG( &htim2, TIM_FLAG_UPDATE );
 8022a0a:	4b07      	ldr	r3, [pc, #28]	@ (8022a28 <TIM2_IRQHandler+0x38>)
 8022a0c:	681b      	ldr	r3, [r3, #0]
 8022a0e:	f06f 0201 	mvn.w	r2, #1
 8022a12:	611a      	str	r2, [r3, #16]
		ulInterruptCount++;
 8022a14:	4b06      	ldr	r3, [pc, #24]	@ (8022a30 <TIM2_IRQHandler+0x40>)
 8022a16:	681b      	ldr	r3, [r3, #0]
 8022a18:	3301      	adds	r3, #1
 8022a1a:	4a05      	ldr	r2, [pc, #20]	@ (8022a30 <TIM2_IRQHandler+0x40>)
 8022a1c:	6013      	str	r3, [r2, #0]
	}
}
 8022a1e:	bf00      	nop
 8022a20:	46bd      	mov	sp, r7
 8022a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a26:	4770      	bx	lr
 8022a28:	20000444 	.word	0x20000444
 8022a2c:	20002738 	.word	0x20002738
 8022a30:	20002734 	.word	0x20002734

08022a34 <vStartHighResolutionTimer>:


/* Timer2 initialization function */
void vStartHighResolutionTimer( void )
{
 8022a34:	b580      	push	{r7, lr}
 8022a36:	b082      	sub	sp, #8
 8022a38:	af00      	add	r7, sp, #0
	/* TIM2 clock enable */
	__HAL_RCC_TIM2_CLK_ENABLE();
 8022a3a:	4b20      	ldr	r3, [pc, #128]	@ (8022abc <vStartHighResolutionTimer+0x88>)
 8022a3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8022a40:	4a1e      	ldr	r2, [pc, #120]	@ (8022abc <vStartHighResolutionTimer+0x88>)
 8022a42:	f043 0301 	orr.w	r3, r3, #1
 8022a46:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8022a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8022abc <vStartHighResolutionTimer+0x88>)
 8022a4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8022a50:	f003 0301 	and.w	r3, r3, #1
 8022a54:	607b      	str	r3, [r7, #4]
 8022a56:	687b      	ldr	r3, [r7, #4]

	htim2.Instance = TIM2;     /* Register base address             */
 8022a58:	4b19      	ldr	r3, [pc, #100]	@ (8022ac0 <vStartHighResolutionTimer+0x8c>)
 8022a5a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8022a5e:	601a      	str	r2, [r3, #0]

	htim2.Init.Prescaler = ( ulPrescale - 1ul );			/* Specifies the prescaler value used to divide the TIM clock. */
 8022a60:	23c8      	movs	r3, #200	@ 0xc8
 8022a62:	3b01      	subs	r3, #1
 8022a64:	4a16      	ldr	r2, [pc, #88]	@ (8022ac0 <vStartHighResolutionTimer+0x8c>)
 8022a66:	6053      	str	r3, [r2, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;			/* Specifies the counter mode. */
 8022a68:	4b15      	ldr	r3, [pc, #84]	@ (8022ac0 <vStartHighResolutionTimer+0x8c>)
 8022a6a:	2200      	movs	r2, #0
 8022a6c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = ( ulReloadCount - 1ul );			/* Specifies the period value to be loaded into the active. */
 8022a6e:	4b15      	ldr	r3, [pc, #84]	@ (8022ac4 <vStartHighResolutionTimer+0x90>)
 8022a70:	3b01      	subs	r3, #1
 8022a72:	4a13      	ldr	r2, [pc, #76]	@ (8022ac0 <vStartHighResolutionTimer+0x8c>)
 8022a74:	60d3      	str	r3, [r2, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;	/* Specifies the clock division. */
 8022a76:	4b12      	ldr	r3, [pc, #72]	@ (8022ac0 <vStartHighResolutionTimer+0x8c>)
 8022a78:	2200      	movs	r2, #0
 8022a7a:	611a      	str	r2, [r3, #16]
	htim2.Init.RepetitionCounter = 0ul;					/* Specifies the repetition counter value. */
 8022a7c:	4b10      	ldr	r3, [pc, #64]	@ (8022ac0 <vStartHighResolutionTimer+0x8c>)
 8022a7e:	2200      	movs	r2, #0
 8022a80:	615a      	str	r2, [r3, #20]
	htim2.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8022a82:	4b0f      	ldr	r3, [pc, #60]	@ (8022ac0 <vStartHighResolutionTimer+0x8c>)
 8022a84:	2201      	movs	r2, #1
 8022a86:	771a      	strb	r2, [r3, #28]

	/* NVIC configuration for DMA transfer complete interrupt */
	HAL_NVIC_SetPriority( TIM2_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1, 0 );
 8022a88:	2200      	movs	r2, #0
 8022a8a:	2105      	movs	r1, #5
 8022a8c:	201c      	movs	r0, #28
 8022a8e:	f7f7 ffa4 	bl	801a9da <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ( TIM2_IRQn );
 8022a92:	201c      	movs	r0, #28
 8022a94:	f7f7 ffbb 	bl	801aa0e <HAL_NVIC_EnableIRQ>


	HAL_TIM_Base_Init( &htim2 );
 8022a98:	4809      	ldr	r0, [pc, #36]	@ (8022ac0 <vStartHighResolutionTimer+0x8c>)
 8022a9a:	f7fd fc96 	bl	80203ca <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT( &htim2 );
 8022a9e:	4808      	ldr	r0, [pc, #32]	@ (8022ac0 <vStartHighResolutionTimer+0x8c>)
 8022aa0:	f7fd fcea 	bl	8020478 <HAL_TIM_Base_Start_IT>
	ulTimer2Flags = htim2.Instance->SR;
 8022aa4:	4b06      	ldr	r3, [pc, #24]	@ (8022ac0 <vStartHighResolutionTimer+0x8c>)
 8022aa6:	681b      	ldr	r3, [r3, #0]
 8022aa8:	691b      	ldr	r3, [r3, #16]
 8022aaa:	4a07      	ldr	r2, [pc, #28]	@ (8022ac8 <vStartHighResolutionTimer+0x94>)
 8022aac:	6013      	str	r3, [r2, #0]
	/* Ignore the initial interrupt which sets ulInterruptCount = 1.*/
	ulInterruptCount = 0ul;
 8022aae:	4b07      	ldr	r3, [pc, #28]	@ (8022acc <vStartHighResolutionTimer+0x98>)
 8022ab0:	2200      	movs	r2, #0
 8022ab2:	601a      	str	r2, [r3, #0]
}
 8022ab4:	bf00      	nop
 8022ab6:	3708      	adds	r7, #8
 8022ab8:	46bd      	mov	sp, r7
 8022aba:	bd80      	pop	{r7, pc}
 8022abc:	58024400 	.word	0x58024400
 8022ac0:	20000444 	.word	0x20000444
 8022ac4:	00989680 	.word	0x00989680
 8022ac8:	20002738 	.word	0x20002738
 8022acc:	20002734 	.word	0x20002734

08022ad0 <ullGetHighResolutionTime>:

uint64_t ullGetHighResolutionTime()
{
 8022ad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8022ad4:	b08e      	sub	sp, #56	@ 0x38
 8022ad6:	af00      	add	r7, sp, #0
uint64_t ullReturn;
	if( htim2.Instance == NULL )
 8022ad8:	493d      	ldr	r1, [pc, #244]	@ (8022bd0 <ullGetHighResolutionTime+0x100>)
 8022ada:	6809      	ldr	r1, [r1, #0]
 8022adc:	2900      	cmp	r1, #0
 8022ade:	d132      	bne.n	8022b46 <ullGetHighResolutionTime+0x76>
	{
		ullReturn = 1000ull * xTaskGetTickCount();
 8022ae0:	f7e2 f8f6 	bl	8004cd0 <xTaskGetTickCount>
 8022ae4:	4603      	mov	r3, r0
 8022ae6:	2200      	movs	r2, #0
 8022ae8:	469a      	mov	sl, r3
 8022aea:	4693      	mov	fp, r2
 8022aec:	4652      	mov	r2, sl
 8022aee:	465b      	mov	r3, fp
 8022af0:	f04f 0000 	mov.w	r0, #0
 8022af4:	f04f 0100 	mov.w	r1, #0
 8022af8:	0159      	lsls	r1, r3, #5
 8022afa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8022afe:	0150      	lsls	r0, r2, #5
 8022b00:	4602      	mov	r2, r0
 8022b02:	460b      	mov	r3, r1
 8022b04:	ebb2 040a 	subs.w	r4, r2, sl
 8022b08:	eb63 050b 	sbc.w	r5, r3, fp
 8022b0c:	f04f 0200 	mov.w	r2, #0
 8022b10:	f04f 0300 	mov.w	r3, #0
 8022b14:	00ab      	lsls	r3, r5, #2
 8022b16:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8022b1a:	00a2      	lsls	r2, r4, #2
 8022b1c:	4614      	mov	r4, r2
 8022b1e:	461d      	mov	r5, r3
 8022b20:	eb14 080a 	adds.w	r8, r4, sl
 8022b24:	eb45 090b 	adc.w	r9, r5, fp
 8022b28:	f04f 0200 	mov.w	r2, #0
 8022b2c:	f04f 0300 	mov.w	r3, #0
 8022b30:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8022b34:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8022b38:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8022b3c:	4690      	mov	r8, r2
 8022b3e:	4699      	mov	r9, r3
 8022b40:	e9c7 890c 	strd	r8, r9, [r7, #48]	@ 0x30
 8022b44:	e03c      	b.n	8022bc0 <ullGetHighResolutionTime+0xf0>
	uint32_t ulCounts[2];
	uint32_t ulSlowCount;

		for( ;; )
		{
			ulCounts[ 0 ] = htim2.Instance->CNT;
 8022b46:	4922      	ldr	r1, [pc, #136]	@ (8022bd0 <ullGetHighResolutionTime+0x100>)
 8022b48:	6809      	ldr	r1, [r1, #0]
 8022b4a:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8022b4c:	6279      	str	r1, [r7, #36]	@ 0x24
			ulSlowCount = ulInterruptCount;
 8022b4e:	4921      	ldr	r1, [pc, #132]	@ (8022bd4 <ullGetHighResolutionTime+0x104>)
 8022b50:	6809      	ldr	r1, [r1, #0]
 8022b52:	62f9      	str	r1, [r7, #44]	@ 0x2c
			ulCounts[ 1 ] = htim2.Instance->CNT;
 8022b54:	491e      	ldr	r1, [pc, #120]	@ (8022bd0 <ullGetHighResolutionTime+0x100>)
 8022b56:	6809      	ldr	r1, [r1, #0]
 8022b58:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8022b5a:	62b9      	str	r1, [r7, #40]	@ 0x28
			if( ulCounts[ 1 ] >= ulCounts[ 0 ] )
 8022b5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8022b5e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8022b60:	4288      	cmp	r0, r1
 8022b62:	d200      	bcs.n	8022b66 <ullGetHighResolutionTime+0x96>
			ulCounts[ 0 ] = htim2.Instance->CNT;
 8022b64:	e7ef      	b.n	8022b46 <ullGetHighResolutionTime+0x76>
			{
				/* TIM2_IRQHandler() has not occurred in between. */
				break;
 8022b66:	bf00      	nop
			}
		}
		ullReturn = ( uint64_t )ulSlowCount * ulReloadCount + ulCounts[ 1 ];
 8022b68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8022b6a:	2000      	movs	r0, #0
 8022b6c:	61b9      	str	r1, [r7, #24]
 8022b6e:	61f8      	str	r0, [r7, #28]
 8022b70:	4819      	ldr	r0, [pc, #100]	@ (8022bd8 <ullGetHighResolutionTime+0x108>)
 8022b72:	2100      	movs	r1, #0
 8022b74:	6138      	str	r0, [r7, #16]
 8022b76:	6179      	str	r1, [r7, #20]
 8022b78:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8022b7c:	4649      	mov	r1, r9
 8022b7e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8022b82:	4650      	mov	r0, sl
 8022b84:	fb00 f001 	mul.w	r0, r0, r1
 8022b88:	4659      	mov	r1, fp
 8022b8a:	4644      	mov	r4, r8
 8022b8c:	fb04 f101 	mul.w	r1, r4, r1
 8022b90:	4401      	add	r1, r0
 8022b92:	4640      	mov	r0, r8
 8022b94:	4654      	mov	r4, sl
 8022b96:	fba0 2304 	umull	r2, r3, r0, r4
 8022b9a:	4419      	add	r1, r3
 8022b9c:	460b      	mov	r3, r1
 8022b9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8022ba0:	2000      	movs	r0, #0
 8022ba2:	60b9      	str	r1, [r7, #8]
 8022ba4:	60f8      	str	r0, [r7, #12]
 8022ba6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8022baa:	4621      	mov	r1, r4
 8022bac:	1851      	adds	r1, r2, r1
 8022bae:	6039      	str	r1, [r7, #0]
 8022bb0:	4629      	mov	r1, r5
 8022bb2:	eb43 0101 	adc.w	r1, r3, r1
 8022bb6:	6079      	str	r1, [r7, #4]
 8022bb8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8022bbc:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
	}

	return ullReturn;
 8022bc0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
}
 8022bc4:	4610      	mov	r0, r2
 8022bc6:	4619      	mov	r1, r3
 8022bc8:	3738      	adds	r7, #56	@ 0x38
 8022bca:	46bd      	mov	sp, r7
 8022bcc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8022bd0:	20000444 	.word	0x20000444
 8022bd4:	20002734 	.word	0x20002734
 8022bd8:	00989680 	.word	0x00989680

08022bdc <memcpy>:
	uint32_t uint32;
};

#if( SIMPLE_MEMCPY == 0 )
void *memcpy( void *pvDest, const void *pvSource, size_t ulBytes )
{
 8022bdc:	b480      	push	{r7}
 8022bde:	b08d      	sub	sp, #52	@ 0x34
 8022be0:	af00      	add	r7, sp, #0
 8022be2:	60f8      	str	r0, [r7, #12]
 8022be4:	60b9      	str	r1, [r7, #8]
 8022be6:	607a      	str	r2, [r7, #4]
union xPointer pxDestination;
union xPointer pxSource;
union xPointer pxLastSource;
uint32_t ulAlignBits;

	pxDestination.u8 = ( uint8_t * ) pvDest;
 8022be8:	68fb      	ldr	r3, [r7, #12]
 8022bea:	61bb      	str	r3, [r7, #24]
	pxSource.u8 = ( uint8_t * ) pvSource;
 8022bec:	68bb      	ldr	r3, [r7, #8]
 8022bee:	617b      	str	r3, [r7, #20]
	pxLastSource.u8 = pxSource.u8 + ulBytes;
 8022bf0:	697a      	ldr	r2, [r7, #20]
 8022bf2:	687b      	ldr	r3, [r7, #4]
 8022bf4:	4413      	add	r3, r2
 8022bf6:	613b      	str	r3, [r7, #16]

	ulAlignBits = ( pxDestination.uint32 & 0x03 ) ^ ( pxSource.uint32 & 0x03 );
 8022bf8:	69ba      	ldr	r2, [r7, #24]
 8022bfa:	697b      	ldr	r3, [r7, #20]
 8022bfc:	4053      	eors	r3, r2
 8022bfe:	f003 0303 	and.w	r3, r3, #3
 8022c02:	627b      	str	r3, [r7, #36]	@ 0x24

	if( ( ulAlignBits & 0x01 ) == 0 )
 8022c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022c06:	f003 0301 	and.w	r3, r3, #1
 8022c0a:	2b00      	cmp	r3, #0
 8022c0c:	f040 80a1 	bne.w	8022d52 <memcpy+0x176>
	{
		if( ( ( pxSource.uint32 & 1 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 ) )
 8022c10:	697b      	ldr	r3, [r7, #20]
 8022c12:	f003 0301 	and.w	r3, r3, #1
 8022c16:	2b00      	cmp	r3, #0
 8022c18:	d00b      	beq.n	8022c32 <memcpy+0x56>
 8022c1a:	697a      	ldr	r2, [r7, #20]
 8022c1c:	693b      	ldr	r3, [r7, #16]
 8022c1e:	429a      	cmp	r2, r3
 8022c20:	d207      	bcs.n	8022c32 <memcpy+0x56>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++) ;
 8022c22:	697a      	ldr	r2, [r7, #20]
 8022c24:	1c53      	adds	r3, r2, #1
 8022c26:	617b      	str	r3, [r7, #20]
 8022c28:	69bb      	ldr	r3, [r7, #24]
 8022c2a:	1c59      	adds	r1, r3, #1
 8022c2c:	61b9      	str	r1, [r7, #24]
 8022c2e:	7812      	ldrb	r2, [r2, #0]
 8022c30:	701a      	strb	r2, [r3, #0]
		}
		/* 16-bit aligned here */
		if( ( ulAlignBits & 0x02 ) != 0 )
 8022c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022c34:	f003 0302 	and.w	r3, r3, #2
 8022c38:	2b00      	cmp	r3, #0
 8022c3a:	d01f      	beq.n	8022c7c <memcpy+0xa0>
		{
			uint32_t extra = pxLastSource.uint32 & 0x01ul;
 8022c3c:	693b      	ldr	r3, [r7, #16]
 8022c3e:	f003 0301 	and.w	r3, r3, #1
 8022c42:	61fb      	str	r3, [r7, #28]

			pxLastSource.uint32 &= ~0x01ul;
 8022c44:	693b      	ldr	r3, [r7, #16]
 8022c46:	f023 0301 	bic.w	r3, r3, #1
 8022c4a:	613b      	str	r3, [r7, #16]

			#if( MEMCPY_USES_LOOP_COUNTER != 0 )
			{
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 8022c4c:	e00a      	b.n	8022c64 <memcpy+0x88>
				{
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 8022c4e:	697a      	ldr	r2, [r7, #20]
 8022c50:	1c93      	adds	r3, r2, #2
 8022c52:	617b      	str	r3, [r7, #20]
 8022c54:	69bb      	ldr	r3, [r7, #24]
 8022c56:	1c99      	adds	r1, r3, #2
 8022c58:	61b9      	str	r1, [r7, #24]
 8022c5a:	8812      	ldrh	r2, [r2, #0]
 8022c5c:	801a      	strh	r2, [r3, #0]
					ulBytes -= 2;
 8022c5e:	687b      	ldr	r3, [r7, #4]
 8022c60:	3b02      	subs	r3, #2
 8022c62:	607b      	str	r3, [r7, #4]
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 8022c64:	697a      	ldr	r2, [r7, #20]
 8022c66:	693b      	ldr	r3, [r7, #16]
 8022c68:	429a      	cmp	r2, r3
 8022c6a:	d202      	bcs.n	8022c72 <memcpy+0x96>
 8022c6c:	687b      	ldr	r3, [r7, #4]
 8022c6e:	2b00      	cmp	r3, #0
 8022c70:	d1ed      	bne.n	8022c4e <memcpy+0x72>
				{
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
				}
			}
			#endif
			pxLastSource.uint32 |= extra;
 8022c72:	693a      	ldr	r2, [r7, #16]
 8022c74:	69fb      	ldr	r3, [r7, #28]
 8022c76:	4313      	orrs	r3, r2
 8022c78:	613b      	str	r3, [r7, #16]
 8022c7a:	e0ae      	b.n	8022dda <memcpy+0x1fe>
		else
		{
			int iCount;
			uint32_t extra;

			if( ( ( pxSource.uint32 & 2 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 - 1 ) )
 8022c7c:	697b      	ldr	r3, [r7, #20]
 8022c7e:	f003 0302 	and.w	r3, r3, #2
 8022c82:	2b00      	cmp	r3, #0
 8022c84:	d00c      	beq.n	8022ca0 <memcpy+0xc4>
 8022c86:	697a      	ldr	r2, [r7, #20]
 8022c88:	693b      	ldr	r3, [r7, #16]
 8022c8a:	3b01      	subs	r3, #1
 8022c8c:	429a      	cmp	r2, r3
 8022c8e:	d207      	bcs.n	8022ca0 <memcpy+0xc4>
			{
				*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 8022c90:	697a      	ldr	r2, [r7, #20]
 8022c92:	1c93      	adds	r3, r2, #2
 8022c94:	617b      	str	r3, [r7, #20]
 8022c96:	69bb      	ldr	r3, [r7, #24]
 8022c98:	1c99      	adds	r1, r3, #2
 8022c9a:	61b9      	str	r1, [r7, #24]
 8022c9c:	8812      	ldrh	r2, [r2, #0]
 8022c9e:	801a      	strh	r2, [r3, #0]
			}
			// 32-bit aligned
			extra = pxLastSource.uint32 & 0x03ul;
 8022ca0:	693b      	ldr	r3, [r7, #16]
 8022ca2:	f003 0303 	and.w	r3, r3, #3
 8022ca6:	623b      	str	r3, [r7, #32]

			pxLastSource.uint32 &= ~0x03ul;
 8022ca8:	693b      	ldr	r3, [r7, #16]
 8022caa:	f023 0303 	bic.w	r3, r3, #3
 8022cae:	613b      	str	r3, [r7, #16]
			iCount = pxLastSource.u32 - pxSource.u32;
 8022cb0:	693a      	ldr	r2, [r7, #16]
 8022cb2:	697b      	ldr	r3, [r7, #20]
 8022cb4:	1ad3      	subs	r3, r2, r3
 8022cb6:	109b      	asrs	r3, r3, #2
 8022cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			while( iCount > 8 )
 8022cba:	e02f      	b.n	8022d1c <memcpy+0x140>
			{
				/* Copy 32 bytes */
				/* Normally it doesn't make sense to make this list much longer because
				the indexes will get too big, and therefore longer instructions are needed. */
				pxDestination.u32[ 0 ] = pxSource.u32[ 0 ];
 8022cbc:	697a      	ldr	r2, [r7, #20]
 8022cbe:	69bb      	ldr	r3, [r7, #24]
 8022cc0:	6812      	ldr	r2, [r2, #0]
 8022cc2:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 1 ] = pxSource.u32[ 1 ];
 8022cc4:	697a      	ldr	r2, [r7, #20]
 8022cc6:	69bb      	ldr	r3, [r7, #24]
 8022cc8:	3304      	adds	r3, #4
 8022cca:	6852      	ldr	r2, [r2, #4]
 8022ccc:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 2 ] = pxSource.u32[ 2 ];
 8022cce:	697a      	ldr	r2, [r7, #20]
 8022cd0:	69bb      	ldr	r3, [r7, #24]
 8022cd2:	3308      	adds	r3, #8
 8022cd4:	6892      	ldr	r2, [r2, #8]
 8022cd6:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 3 ] = pxSource.u32[ 3 ];
 8022cd8:	697a      	ldr	r2, [r7, #20]
 8022cda:	69bb      	ldr	r3, [r7, #24]
 8022cdc:	330c      	adds	r3, #12
 8022cde:	68d2      	ldr	r2, [r2, #12]
 8022ce0:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 4 ] = pxSource.u32[ 4 ];
 8022ce2:	697a      	ldr	r2, [r7, #20]
 8022ce4:	69bb      	ldr	r3, [r7, #24]
 8022ce6:	3310      	adds	r3, #16
 8022ce8:	6912      	ldr	r2, [r2, #16]
 8022cea:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 5 ] = pxSource.u32[ 5 ];
 8022cec:	697a      	ldr	r2, [r7, #20]
 8022cee:	69bb      	ldr	r3, [r7, #24]
 8022cf0:	3314      	adds	r3, #20
 8022cf2:	6952      	ldr	r2, [r2, #20]
 8022cf4:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 6 ] = pxSource.u32[ 6 ];
 8022cf6:	697a      	ldr	r2, [r7, #20]
 8022cf8:	69bb      	ldr	r3, [r7, #24]
 8022cfa:	3318      	adds	r3, #24
 8022cfc:	6992      	ldr	r2, [r2, #24]
 8022cfe:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 7 ] = pxSource.u32[ 7 ];
 8022d00:	697a      	ldr	r2, [r7, #20]
 8022d02:	69bb      	ldr	r3, [r7, #24]
 8022d04:	331c      	adds	r3, #28
 8022d06:	69d2      	ldr	r2, [r2, #28]
 8022d08:	601a      	str	r2, [r3, #0]
				pxDestination.u32 += 8;
 8022d0a:	69bb      	ldr	r3, [r7, #24]
 8022d0c:	3320      	adds	r3, #32
 8022d0e:	61bb      	str	r3, [r7, #24]
				pxSource.u32 += 8;
 8022d10:	697b      	ldr	r3, [r7, #20]
 8022d12:	3320      	adds	r3, #32
 8022d14:	617b      	str	r3, [r7, #20]
				iCount -= 8;
 8022d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022d18:	3b08      	subs	r3, #8
 8022d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
			while( iCount > 8 )
 8022d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022d1e:	2b08      	cmp	r3, #8
 8022d20:	dccc      	bgt.n	8022cbc <memcpy+0xe0>
			}

			#if( MEMCPY_USES_LOOP_COUNTER != 0 )
			{
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 8022d22:	e00a      	b.n	8022d3a <memcpy+0x15e>
				{
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
 8022d24:	697a      	ldr	r2, [r7, #20]
 8022d26:	1d13      	adds	r3, r2, #4
 8022d28:	617b      	str	r3, [r7, #20]
 8022d2a:	69bb      	ldr	r3, [r7, #24]
 8022d2c:	1d19      	adds	r1, r3, #4
 8022d2e:	61b9      	str	r1, [r7, #24]
 8022d30:	6812      	ldr	r2, [r2, #0]
 8022d32:	601a      	str	r2, [r3, #0]
					ulBytes -= 4;
 8022d34:	687b      	ldr	r3, [r7, #4]
 8022d36:	3b04      	subs	r3, #4
 8022d38:	607b      	str	r3, [r7, #4]
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 8022d3a:	697a      	ldr	r2, [r7, #20]
 8022d3c:	693b      	ldr	r3, [r7, #16]
 8022d3e:	429a      	cmp	r2, r3
 8022d40:	d202      	bcs.n	8022d48 <memcpy+0x16c>
 8022d42:	687b      	ldr	r3, [r7, #4]
 8022d44:	2b00      	cmp	r3, #0
 8022d46:	d1ed      	bne.n	8022d24 <memcpy+0x148>
				{
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
				}
			}
			#endif
			pxLastSource.uint32 |= extra;
 8022d48:	693a      	ldr	r2, [r7, #16]
 8022d4a:	6a3b      	ldr	r3, [r7, #32]
 8022d4c:	4313      	orrs	r3, r2
 8022d4e:	613b      	str	r3, [r7, #16]
 8022d50:	e043      	b.n	8022dda <memcpy+0x1fe>
	}
	else
	{
		/* This it the worst alignment, e.g. 0x80000 and 0xA0001,
		only 8-bits copying is possible. */
		int iCount = pxLastSource.u8 - pxSource.u8;
 8022d52:	693a      	ldr	r2, [r7, #16]
 8022d54:	697b      	ldr	r3, [r7, #20]
 8022d56:	1ad3      	subs	r3, r2, r3
 8022d58:	62bb      	str	r3, [r7, #40]	@ 0x28
		while( iCount > 8 )
 8022d5a:	e02f      	b.n	8022dbc <memcpy+0x1e0>
		{
			/* Copy 8 bytes the hard way */
			pxDestination.u8[ 0 ] = pxSource.u8[ 0 ];
 8022d5c:	697a      	ldr	r2, [r7, #20]
 8022d5e:	69bb      	ldr	r3, [r7, #24]
 8022d60:	7812      	ldrb	r2, [r2, #0]
 8022d62:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 1 ] = pxSource.u8[ 1 ];
 8022d64:	697a      	ldr	r2, [r7, #20]
 8022d66:	69bb      	ldr	r3, [r7, #24]
 8022d68:	3301      	adds	r3, #1
 8022d6a:	7852      	ldrb	r2, [r2, #1]
 8022d6c:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 2 ] = pxSource.u8[ 2 ];
 8022d6e:	697a      	ldr	r2, [r7, #20]
 8022d70:	69bb      	ldr	r3, [r7, #24]
 8022d72:	3302      	adds	r3, #2
 8022d74:	7892      	ldrb	r2, [r2, #2]
 8022d76:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 3 ] = pxSource.u8[ 3 ];
 8022d78:	697a      	ldr	r2, [r7, #20]
 8022d7a:	69bb      	ldr	r3, [r7, #24]
 8022d7c:	3303      	adds	r3, #3
 8022d7e:	78d2      	ldrb	r2, [r2, #3]
 8022d80:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 4 ] = pxSource.u8[ 4 ];
 8022d82:	697a      	ldr	r2, [r7, #20]
 8022d84:	69bb      	ldr	r3, [r7, #24]
 8022d86:	3304      	adds	r3, #4
 8022d88:	7912      	ldrb	r2, [r2, #4]
 8022d8a:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 5 ] = pxSource.u8[ 5 ];
 8022d8c:	697a      	ldr	r2, [r7, #20]
 8022d8e:	69bb      	ldr	r3, [r7, #24]
 8022d90:	3305      	adds	r3, #5
 8022d92:	7952      	ldrb	r2, [r2, #5]
 8022d94:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 6 ] = pxSource.u8[ 6 ];
 8022d96:	697a      	ldr	r2, [r7, #20]
 8022d98:	69bb      	ldr	r3, [r7, #24]
 8022d9a:	3306      	adds	r3, #6
 8022d9c:	7992      	ldrb	r2, [r2, #6]
 8022d9e:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 7 ] = pxSource.u8[ 7 ];
 8022da0:	697a      	ldr	r2, [r7, #20]
 8022da2:	69bb      	ldr	r3, [r7, #24]
 8022da4:	3307      	adds	r3, #7
 8022da6:	79d2      	ldrb	r2, [r2, #7]
 8022da8:	701a      	strb	r2, [r3, #0]
			pxDestination.u8 += 8;
 8022daa:	69bb      	ldr	r3, [r7, #24]
 8022dac:	3308      	adds	r3, #8
 8022dae:	61bb      	str	r3, [r7, #24]
			pxSource.u8 += 8;
 8022db0:	697b      	ldr	r3, [r7, #20]
 8022db2:	3308      	adds	r3, #8
 8022db4:	617b      	str	r3, [r7, #20]
			iCount -= 8;
 8022db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022db8:	3b08      	subs	r3, #8
 8022dba:	62bb      	str	r3, [r7, #40]	@ 0x28
		while( iCount > 8 )
 8022dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022dbe:	2b08      	cmp	r3, #8
 8022dc0:	dccc      	bgt.n	8022d5c <memcpy+0x180>
		}
	}
	#if( MEMCPY_USES_LOOP_COUNTER != 0 )
	{
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 8022dc2:	e00a      	b.n	8022dda <memcpy+0x1fe>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++ );
 8022dc4:	697a      	ldr	r2, [r7, #20]
 8022dc6:	1c53      	adds	r3, r2, #1
 8022dc8:	617b      	str	r3, [r7, #20]
 8022dca:	69bb      	ldr	r3, [r7, #24]
 8022dcc:	1c59      	adds	r1, r3, #1
 8022dce:	61b9      	str	r1, [r7, #24]
 8022dd0:	7812      	ldrb	r2, [r2, #0]
 8022dd2:	701a      	strb	r2, [r3, #0]
			ulBytes--;
 8022dd4:	687b      	ldr	r3, [r7, #4]
 8022dd6:	3b01      	subs	r3, #1
 8022dd8:	607b      	str	r3, [r7, #4]
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 8022dda:	697a      	ldr	r2, [r7, #20]
 8022ddc:	693b      	ldr	r3, [r7, #16]
 8022dde:	429a      	cmp	r2, r3
 8022de0:	d202      	bcs.n	8022de8 <memcpy+0x20c>
 8022de2:	687b      	ldr	r3, [r7, #4]
 8022de4:	2b00      	cmp	r3, #0
 8022de6:	d1ed      	bne.n	8022dc4 <memcpy+0x1e8>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++ );
		}
	}
	#endif
	return pvDest;
 8022de8:	68fb      	ldr	r3, [r7, #12]
}
 8022dea:	4618      	mov	r0, r3
 8022dec:	3734      	adds	r7, #52	@ 0x34
 8022dee:	46bd      	mov	sp, r7
 8022df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022df4:	4770      	bx	lr

08022df6 <memset>:
/*-----------------------------------------------------------*/


#if( SIMPLE_MEMSET == 0 )
void *memset(void *pvDest, int iValue, size_t ulBytes)
{
 8022df6:	b480      	push	{r7}
 8022df8:	b08b      	sub	sp, #44	@ 0x2c
 8022dfa:	af00      	add	r7, sp, #0
 8022dfc:	60f8      	str	r0, [r7, #12]
 8022dfe:	60b9      	str	r1, [r7, #8]
 8022e00:	607a      	str	r2, [r7, #4]
union xPointer pxDestination;
union xPointer pxLast;
uint32_t ulPattern;

	pxDestination.u8 = ( uint8_t * ) pvDest;
 8022e02:	68fb      	ldr	r3, [r7, #12]
 8022e04:	617b      	str	r3, [r7, #20]
	pxLast.u8 = pxDestination.u8 + ulBytes;
 8022e06:	697a      	ldr	r2, [r7, #20]
 8022e08:	687b      	ldr	r3, [r7, #4]
 8022e0a:	4413      	add	r3, r2
 8022e0c:	613b      	str	r3, [r7, #16]

	if( ulBytes >= 8 )
 8022e0e:	687b      	ldr	r3, [r7, #4]
 8022e10:	2b07      	cmp	r3, #7
 8022e12:	d97b      	bls.n	8022f0c <memset+0x116>
	{
	uint32_t ulAlignBits;
	uint32_t ulExtra;
	int iCount;

		ulPattern = iValue & 0xff;
 8022e14:	68bb      	ldr	r3, [r7, #8]
 8022e16:	b2db      	uxtb	r3, r3
 8022e18:	61fb      	str	r3, [r7, #28]
		ulPattern |= ( ulPattern << 8 ) | ( ulPattern << 16 ) | ( ulPattern << 24 );
 8022e1a:	69fb      	ldr	r3, [r7, #28]
 8022e1c:	021a      	lsls	r2, r3, #8
 8022e1e:	69fb      	ldr	r3, [r7, #28]
 8022e20:	041b      	lsls	r3, r3, #16
 8022e22:	431a      	orrs	r2, r3
 8022e24:	69fb      	ldr	r3, [r7, #28]
 8022e26:	061b      	lsls	r3, r3, #24
 8022e28:	4313      	orrs	r3, r2
 8022e2a:	69fa      	ldr	r2, [r7, #28]
 8022e2c:	4313      	orrs	r3, r2
 8022e2e:	61fb      	str	r3, [r7, #28]
		ulAlignBits = ( pxDestination.uint32 & 0x03 );
 8022e30:	697b      	ldr	r3, [r7, #20]
 8022e32:	f003 0303 	and.w	r3, r3, #3
 8022e36:	627b      	str	r3, [r7, #36]	@ 0x24
		if( ulAlignBits != 0 )
 8022e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022e3a:	2b00      	cmp	r3, #0
 8022e3c:	d010      	beq.n	8022e60 <memset+0x6a>
		{
			ulAlignBits = 4 - ulAlignBits;
 8022e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022e40:	f1c3 0304 	rsb	r3, r3, #4
 8022e44:	627b      	str	r3, [r7, #36]	@ 0x24
			while( ulAlignBits-- > 0 )
 8022e46:	e006      	b.n	8022e56 <memset+0x60>
			{
				pxDestination.u8[ 0 ] = ( uint8_t )iValue;
 8022e48:	697b      	ldr	r3, [r7, #20]
 8022e4a:	68ba      	ldr	r2, [r7, #8]
 8022e4c:	b2d2      	uxtb	r2, r2
 8022e4e:	701a      	strb	r2, [r3, #0]
				pxDestination.u8++;
 8022e50:	697b      	ldr	r3, [r7, #20]
 8022e52:	3301      	adds	r3, #1
 8022e54:	617b      	str	r3, [r7, #20]
			while( ulAlignBits-- > 0 )
 8022e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022e58:	1e5a      	subs	r2, r3, #1
 8022e5a:	627a      	str	r2, [r7, #36]	@ 0x24
 8022e5c:	2b00      	cmp	r3, #0
 8022e5e:	d1f3      	bne.n	8022e48 <memset+0x52>
			}
		}
		/* Strip-off the last 1 up-to 3 bytes because they can not be set in a 32-bit
		memory instruction. */
		ulExtra = pxLast.uint32 & 0x03ul;
 8022e60:	693b      	ldr	r3, [r7, #16]
 8022e62:	f003 0303 	and.w	r3, r3, #3
 8022e66:	61bb      	str	r3, [r7, #24]

		pxLast.uint32 &= ~0x03ul;
 8022e68:	693b      	ldr	r3, [r7, #16]
 8022e6a:	f023 0303 	bic.w	r3, r3, #3
 8022e6e:	613b      	str	r3, [r7, #16]
		iCount = ( int ) ( pxLast.u32 - pxDestination.u32 );
 8022e70:	693a      	ldr	r2, [r7, #16]
 8022e72:	697b      	ldr	r3, [r7, #20]
 8022e74:	1ad3      	subs	r3, r2, r3
 8022e76:	109b      	asrs	r3, r3, #2
 8022e78:	623b      	str	r3, [r7, #32]
		while( iCount > 8 )
 8022e7a:	e024      	b.n	8022ec6 <memset+0xd0>
		{
			/* Set 8 * 4 bytes and save some increments */
			/* It won't make sense to make this list much longer than 8 assignments. */
			pxDestination.u32[ 0 ] = ulPattern;
 8022e7c:	697b      	ldr	r3, [r7, #20]
 8022e7e:	69fa      	ldr	r2, [r7, #28]
 8022e80:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 1 ] = ulPattern;
 8022e82:	697b      	ldr	r3, [r7, #20]
 8022e84:	3304      	adds	r3, #4
 8022e86:	69fa      	ldr	r2, [r7, #28]
 8022e88:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 2 ] = ulPattern;
 8022e8a:	697b      	ldr	r3, [r7, #20]
 8022e8c:	3308      	adds	r3, #8
 8022e8e:	69fa      	ldr	r2, [r7, #28]
 8022e90:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 3 ] = ulPattern;
 8022e92:	697b      	ldr	r3, [r7, #20]
 8022e94:	330c      	adds	r3, #12
 8022e96:	69fa      	ldr	r2, [r7, #28]
 8022e98:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 4 ] = ulPattern;
 8022e9a:	697b      	ldr	r3, [r7, #20]
 8022e9c:	3310      	adds	r3, #16
 8022e9e:	69fa      	ldr	r2, [r7, #28]
 8022ea0:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 5 ] = ulPattern;
 8022ea2:	697b      	ldr	r3, [r7, #20]
 8022ea4:	3314      	adds	r3, #20
 8022ea6:	69fa      	ldr	r2, [r7, #28]
 8022ea8:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 6 ] = ulPattern;
 8022eaa:	697b      	ldr	r3, [r7, #20]
 8022eac:	3318      	adds	r3, #24
 8022eae:	69fa      	ldr	r2, [r7, #28]
 8022eb0:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 7 ] = ulPattern;
 8022eb2:	697b      	ldr	r3, [r7, #20]
 8022eb4:	331c      	adds	r3, #28
 8022eb6:	69fa      	ldr	r2, [r7, #28]
 8022eb8:	601a      	str	r2, [r3, #0]
			pxDestination.u32 += 8;
 8022eba:	697b      	ldr	r3, [r7, #20]
 8022ebc:	3320      	adds	r3, #32
 8022ebe:	617b      	str	r3, [r7, #20]
			iCount -= 8;
 8022ec0:	6a3b      	ldr	r3, [r7, #32]
 8022ec2:	3b08      	subs	r3, #8
 8022ec4:	623b      	str	r3, [r7, #32]
		while( iCount > 8 )
 8022ec6:	6a3b      	ldr	r3, [r7, #32]
 8022ec8:	2b08      	cmp	r3, #8
 8022eca:	dcd7      	bgt.n	8022e7c <memset+0x86>
		}

		#if( MEMCPY_USES_LOOP_COUNTER != 0 )
		{
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 8022ecc:	e008      	b.n	8022ee0 <memset+0xea>
			{
				pxDestination.u32[0] = ulPattern;
 8022ece:	697b      	ldr	r3, [r7, #20]
 8022ed0:	69fa      	ldr	r2, [r7, #28]
 8022ed2:	601a      	str	r2, [r3, #0]
				pxDestination.u32++;
 8022ed4:	697b      	ldr	r3, [r7, #20]
 8022ed6:	3304      	adds	r3, #4
 8022ed8:	617b      	str	r3, [r7, #20]
				ulBytes += 4;
 8022eda:	687b      	ldr	r3, [r7, #4]
 8022edc:	3304      	adds	r3, #4
 8022ede:	607b      	str	r3, [r7, #4]
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 8022ee0:	697a      	ldr	r2, [r7, #20]
 8022ee2:	693b      	ldr	r3, [r7, #16]
 8022ee4:	429a      	cmp	r2, r3
 8022ee6:	d202      	bcs.n	8022eee <memset+0xf8>
 8022ee8:	687b      	ldr	r3, [r7, #4]
 8022eea:	2b00      	cmp	r3, #0
 8022eec:	d1ef      	bne.n	8022ece <memset+0xd8>
				pxDestination.u32[0] = ulPattern;
				pxDestination.u32++;
			}
		}
		#endif
		pxLast.uint32 |= ulExtra;
 8022eee:	693a      	ldr	r2, [r7, #16]
 8022ef0:	69bb      	ldr	r3, [r7, #24]
 8022ef2:	4313      	orrs	r3, r2
 8022ef4:	613b      	str	r3, [r7, #16]
	}

	#if( MEMCPY_USES_LOOP_COUNTER != 0 )
	{
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 8022ef6:	e009      	b.n	8022f0c <memset+0x116>
		{
			pxDestination.u8[ 0 ] = ( uint8_t ) iValue;
 8022ef8:	697b      	ldr	r3, [r7, #20]
 8022efa:	68ba      	ldr	r2, [r7, #8]
 8022efc:	b2d2      	uxtb	r2, r2
 8022efe:	701a      	strb	r2, [r3, #0]
			pxDestination.u8++;
 8022f00:	697b      	ldr	r3, [r7, #20]
 8022f02:	3301      	adds	r3, #1
 8022f04:	617b      	str	r3, [r7, #20]
			ulBytes++;
 8022f06:	687b      	ldr	r3, [r7, #4]
 8022f08:	3301      	adds	r3, #1
 8022f0a:	607b      	str	r3, [r7, #4]
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 8022f0c:	697a      	ldr	r2, [r7, #20]
 8022f0e:	693b      	ldr	r3, [r7, #16]
 8022f10:	429a      	cmp	r2, r3
 8022f12:	d202      	bcs.n	8022f1a <memset+0x124>
 8022f14:	687b      	ldr	r3, [r7, #4]
 8022f16:	2b00      	cmp	r3, #0
 8022f18:	d1ee      	bne.n	8022ef8 <memset+0x102>
			pxDestination.u8[ 0 ] = ( uint8_t ) iValue;
			pxDestination.u8++;
		}
	}
	#endif
	return pvDest;
 8022f1a:	68fb      	ldr	r3, [r7, #12]
}
 8022f1c:	4618      	mov	r0, r3
 8022f1e:	372c      	adds	r7, #44	@ 0x2c
 8022f20:	46bd      	mov	sp, r7
 8022f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f26:	4770      	bx	lr

08022f28 <xApplicationMemoryPermissions>:
extern void vOutputChar( const char cChar, const TickType_t xTicksToWait  );

#ifdef __GNUC__

__attribute__((weak)) BaseType_t xApplicationMemoryPermissions( uint32_t aAddress )
{
 8022f28:	b480      	push	{r7}
 8022f2a:	b083      	sub	sp, #12
 8022f2c:	af00      	add	r7, sp, #0
 8022f2e:	6078      	str	r0, [r7, #4]
	( void ) aAddress;
	/* Return 1 for readable, 2 for writeable, 3 for both. */
	return 0x03;
 8022f30:	2303      	movs	r3, #3
}
 8022f32:	4618      	mov	r0, r3
 8022f34:	370c      	adds	r7, #12
 8022f36:	46bd      	mov	sp, r7
 8022f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f3c:	4770      	bx	lr

08022f3e <vOutputChar>:


__attribute__((weak)) void vOutputChar( const char cChar, const TickType_t xTicksToWait  )
{
 8022f3e:	b480      	push	{r7}
 8022f40:	b083      	sub	sp, #12
 8022f42:	af00      	add	r7, sp, #0
 8022f44:	4603      	mov	r3, r0
 8022f46:	6039      	str	r1, [r7, #0]
 8022f48:	71fb      	strb	r3, [r7, #7]
	( void ) cChar;
	( void ) xTicksToWait;
	/* Do nothing. */
}
 8022f4a:	bf00      	nop
 8022f4c:	370c      	adds	r7, #12
 8022f4e:	46bd      	mov	sp, r7
 8022f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f54:	4770      	bx	lr

08022f56 <strbuf_init>:
#else
	static const _U32 u32 = { 0, 1, 2, 3 };
#endif

static void strbuf_init( struct SStringBuf *apStr, char *apBuf, const char *apMaxStr )
{
 8022f56:	b580      	push	{r7, lr}
 8022f58:	b084      	sub	sp, #16
 8022f5a:	af00      	add	r7, sp, #0
 8022f5c:	60f8      	str	r0, [r7, #12]
 8022f5e:	60b9      	str	r1, [r7, #8]
 8022f60:	607a      	str	r2, [r7, #4]
	apStr->str = apBuf;
 8022f62:	68fb      	ldr	r3, [r7, #12]
 8022f64:	68ba      	ldr	r2, [r7, #8]
 8022f66:	601a      	str	r2, [r3, #0]
	apStr->orgStr = apBuf;
 8022f68:	68fb      	ldr	r3, [r7, #12]
 8022f6a:	68ba      	ldr	r2, [r7, #8]
 8022f6c:	605a      	str	r2, [r3, #4]
	apStr->nulPos = apMaxStr-1;
 8022f6e:	687b      	ldr	r3, [r7, #4]
 8022f70:	1e5a      	subs	r2, r3, #1
 8022f72:	68fb      	ldr	r3, [r7, #12]
 8022f74:	609a      	str	r2, [r3, #8]
	apStr->curLen = 0;
 8022f76:	68fb      	ldr	r3, [r7, #12]
 8022f78:	2200      	movs	r2, #0
 8022f7a:	60da      	str	r2, [r3, #12]

	memset( &apStr->flags, '\0', sizeof apStr->flags );
 8022f7c:	68fb      	ldr	r3, [r7, #12]
 8022f7e:	3310      	adds	r3, #16
 8022f80:	2210      	movs	r2, #16
 8022f82:	2100      	movs	r1, #0
 8022f84:	4618      	mov	r0, r3
 8022f86:	f7ff ff36 	bl	8022df6 <memset>
}
 8022f8a:	bf00      	nop
 8022f8c:	3710      	adds	r7, #16
 8022f8e:	46bd      	mov	sp, r7
 8022f90:	bd80      	pop	{r7, pc}

08022f92 <strbuf_printchar>:
/*-----------------------------------------------------------*/

static BaseType_t strbuf_printchar( struct SStringBuf *apStr, int c )
{
 8022f92:	b580      	push	{r7, lr}
 8022f94:	b082      	sub	sp, #8
 8022f96:	af00      	add	r7, sp, #0
 8022f98:	6078      	str	r0, [r7, #4]
 8022f9a:	6039      	str	r1, [r7, #0]
	if( apStr->str == NULL )
 8022f9c:	687b      	ldr	r3, [r7, #4]
 8022f9e:	681b      	ldr	r3, [r3, #0]
 8022fa0:	2b00      	cmp	r3, #0
 8022fa2:	d10d      	bne.n	8022fc0 <strbuf_printchar+0x2e>
	{
		vOutputChar( ( char ) c, xTicksToWait );
 8022fa4:	683b      	ldr	r3, [r7, #0]
 8022fa6:	b2db      	uxtb	r3, r3
 8022fa8:	2214      	movs	r2, #20
 8022faa:	4611      	mov	r1, r2
 8022fac:	4618      	mov	r0, r3
 8022fae:	f7ff ffc6 	bl	8022f3e <vOutputChar>
		apStr->curLen++;
 8022fb2:	687b      	ldr	r3, [r7, #4]
 8022fb4:	68db      	ldr	r3, [r3, #12]
 8022fb6:	1c5a      	adds	r2, r3, #1
 8022fb8:	687b      	ldr	r3, [r7, #4]
 8022fba:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8022fbc:	2301      	movs	r3, #1
 8022fbe:	e022      	b.n	8023006 <strbuf_printchar+0x74>
	}
	if( apStr->str < apStr->nulPos )
 8022fc0:	687b      	ldr	r3, [r7, #4]
 8022fc2:	681a      	ldr	r2, [r3, #0]
 8022fc4:	687b      	ldr	r3, [r7, #4]
 8022fc6:	689b      	ldr	r3, [r3, #8]
 8022fc8:	429a      	cmp	r2, r3
 8022fca:	d20e      	bcs.n	8022fea <strbuf_printchar+0x58>
	{
		*( apStr->str++ ) = c;
 8022fcc:	687b      	ldr	r3, [r7, #4]
 8022fce:	681b      	ldr	r3, [r3, #0]
 8022fd0:	1c59      	adds	r1, r3, #1
 8022fd2:	687a      	ldr	r2, [r7, #4]
 8022fd4:	6011      	str	r1, [r2, #0]
 8022fd6:	683a      	ldr	r2, [r7, #0]
 8022fd8:	b2d2      	uxtb	r2, r2
 8022fda:	701a      	strb	r2, [r3, #0]
		apStr->curLen++;
 8022fdc:	687b      	ldr	r3, [r7, #4]
 8022fde:	68db      	ldr	r3, [r3, #12]
 8022fe0:	1c5a      	adds	r2, r3, #1
 8022fe2:	687b      	ldr	r3, [r7, #4]
 8022fe4:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8022fe6:	2301      	movs	r3, #1
 8022fe8:	e00d      	b.n	8023006 <strbuf_printchar+0x74>
	}
	if( apStr->str == apStr->nulPos )
 8022fea:	687b      	ldr	r3, [r7, #4]
 8022fec:	681a      	ldr	r2, [r3, #0]
 8022fee:	687b      	ldr	r3, [r7, #4]
 8022ff0:	689b      	ldr	r3, [r3, #8]
 8022ff2:	429a      	cmp	r2, r3
 8022ff4:	d106      	bne.n	8023004 <strbuf_printchar+0x72>
	{
		*( apStr->str++ ) = '\0';
 8022ff6:	687b      	ldr	r3, [r7, #4]
 8022ff8:	681b      	ldr	r3, [r3, #0]
 8022ffa:	1c59      	adds	r1, r3, #1
 8022ffc:	687a      	ldr	r2, [r7, #4]
 8022ffe:	6011      	str	r1, [r2, #0]
 8023000:	2200      	movs	r2, #0
 8023002:	701a      	strb	r2, [r3, #0]
	}
	return pdFALSE;
 8023004:	2300      	movs	r3, #0
}
 8023006:	4618      	mov	r0, r3
 8023008:	3708      	adds	r7, #8
 802300a:	46bd      	mov	sp, r7
 802300c:	bd80      	pop	{r7, pc}

0802300e <strbuf_printchar_inline>:
/*-----------------------------------------------------------*/

static __inline BaseType_t strbuf_printchar_inline( struct SStringBuf *apStr, int c )
{
 802300e:	b580      	push	{r7, lr}
 8023010:	b082      	sub	sp, #8
 8023012:	af00      	add	r7, sp, #0
 8023014:	6078      	str	r0, [r7, #4]
 8023016:	6039      	str	r1, [r7, #0]
	if( apStr->str == NULL )
 8023018:	687b      	ldr	r3, [r7, #4]
 802301a:	681b      	ldr	r3, [r3, #0]
 802301c:	2b00      	cmp	r3, #0
 802301e:	d112      	bne.n	8023046 <strbuf_printchar_inline+0x38>
	{
		vOutputChar( ( char ) c, xTicksToWait );
 8023020:	683b      	ldr	r3, [r7, #0]
 8023022:	b2db      	uxtb	r3, r3
 8023024:	2214      	movs	r2, #20
 8023026:	4611      	mov	r1, r2
 8023028:	4618      	mov	r0, r3
 802302a:	f7ff ff88 	bl	8022f3e <vOutputChar>
		if( c == 0 )
 802302e:	683b      	ldr	r3, [r7, #0]
 8023030:	2b00      	cmp	r3, #0
 8023032:	d101      	bne.n	8023038 <strbuf_printchar_inline+0x2a>
		{
			return pdFALSE;
 8023034:	2300      	movs	r3, #0
 8023036:	e02e      	b.n	8023096 <strbuf_printchar_inline+0x88>
		}
		apStr->curLen++;
 8023038:	687b      	ldr	r3, [r7, #4]
 802303a:	68db      	ldr	r3, [r3, #12]
 802303c:	1c5a      	adds	r2, r3, #1
 802303e:	687b      	ldr	r3, [r7, #4]
 8023040:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8023042:	2301      	movs	r3, #1
 8023044:	e027      	b.n	8023096 <strbuf_printchar_inline+0x88>
	}
	if( apStr->str < apStr->nulPos )
 8023046:	687b      	ldr	r3, [r7, #4]
 8023048:	681a      	ldr	r2, [r3, #0]
 802304a:	687b      	ldr	r3, [r7, #4]
 802304c:	689b      	ldr	r3, [r3, #8]
 802304e:	429a      	cmp	r2, r3
 8023050:	d213      	bcs.n	802307a <strbuf_printchar_inline+0x6c>
	{
		*(apStr->str++) = c;
 8023052:	687b      	ldr	r3, [r7, #4]
 8023054:	681b      	ldr	r3, [r3, #0]
 8023056:	1c59      	adds	r1, r3, #1
 8023058:	687a      	ldr	r2, [r7, #4]
 802305a:	6011      	str	r1, [r2, #0]
 802305c:	683a      	ldr	r2, [r7, #0]
 802305e:	b2d2      	uxtb	r2, r2
 8023060:	701a      	strb	r2, [r3, #0]
		if( c == 0 )
 8023062:	683b      	ldr	r3, [r7, #0]
 8023064:	2b00      	cmp	r3, #0
 8023066:	d101      	bne.n	802306c <strbuf_printchar_inline+0x5e>
		{
			return pdFALSE;
 8023068:	2300      	movs	r3, #0
 802306a:	e014      	b.n	8023096 <strbuf_printchar_inline+0x88>
		}
		apStr->curLen++;
 802306c:	687b      	ldr	r3, [r7, #4]
 802306e:	68db      	ldr	r3, [r3, #12]
 8023070:	1c5a      	adds	r2, r3, #1
 8023072:	687b      	ldr	r3, [r7, #4]
 8023074:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8023076:	2301      	movs	r3, #1
 8023078:	e00d      	b.n	8023096 <strbuf_printchar_inline+0x88>
	}
	if( apStr->str == apStr->nulPos )
 802307a:	687b      	ldr	r3, [r7, #4]
 802307c:	681a      	ldr	r2, [r3, #0]
 802307e:	687b      	ldr	r3, [r7, #4]
 8023080:	689b      	ldr	r3, [r3, #8]
 8023082:	429a      	cmp	r2, r3
 8023084:	d106      	bne.n	8023094 <strbuf_printchar_inline+0x86>
	{
		*( apStr->str++ ) = '\0';
 8023086:	687b      	ldr	r3, [r7, #4]
 8023088:	681b      	ldr	r3, [r3, #0]
 802308a:	1c59      	adds	r1, r3, #1
 802308c:	687a      	ldr	r2, [r7, #4]
 802308e:	6011      	str	r1, [r2, #0]
 8023090:	2200      	movs	r2, #0
 8023092:	701a      	strb	r2, [r3, #0]
	}
	return pdFALSE;
 8023094:	2300      	movs	r3, #0
}
 8023096:	4618      	mov	r0, r3
 8023098:	3708      	adds	r7, #8
 802309a:	46bd      	mov	sp, r7
 802309c:	bd80      	pop	{r7, pc}
	...

080230a0 <prints>:
	return iResult;
}
/*-----------------------------------------------------------*/

static BaseType_t prints(struct SStringBuf *apBuf, const char *apString )
{
 80230a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80230a2:	b085      	sub	sp, #20
 80230a4:	af00      	add	r7, sp, #0
 80230a6:	6078      	str	r0, [r7, #4]
 80230a8:	6039      	str	r1, [r7, #0]
	register int padchar = ' ';
 80230aa:	2620      	movs	r6, #32
	int i,len;

	if( xApplicationMemoryPermissions( ( uint32_t )apString ) == 0 )
 80230ac:	683b      	ldr	r3, [r7, #0]
 80230ae:	4618      	mov	r0, r3
 80230b0:	f7ff ff3a 	bl	8022f28 <xApplicationMemoryPermissions>
 80230b4:	4603      	mov	r3, r0
 80230b6:	2b00      	cmp	r3, #0
 80230b8:	d101      	bne.n	80230be <prints+0x1e>
	{
		/* The user has probably made a mistake with the parameter
		for '%s', the memory is not readbale. */
		apString = "INV_MEM";
 80230ba:	4b4c      	ldr	r3, [pc, #304]	@ (80231ec <prints+0x14c>)
 80230bc:	603b      	str	r3, [r7, #0]
	}

	if( apBuf->flags.width > 0 )
 80230be:	687b      	ldr	r3, [r7, #4]
 80230c0:	695b      	ldr	r3, [r3, #20]
 80230c2:	2b00      	cmp	r3, #0
 80230c4:	dd1b      	ble.n	80230fe <prints+0x5e>
	{
		register int count = 0;
 80230c6:	2400      	movs	r4, #0
		register const char *ptr;
		for( ptr = apString; *ptr; ++ptr )
 80230c8:	683d      	ldr	r5, [r7, #0]
 80230ca:	e001      	b.n	80230d0 <prints+0x30>
		{
			++count;
 80230cc:	3401      	adds	r4, #1
		for( ptr = apString; *ptr; ++ptr )
 80230ce:	3501      	adds	r5, #1
 80230d0:	782b      	ldrb	r3, [r5, #0]
 80230d2:	2b00      	cmp	r3, #0
 80230d4:	d1fa      	bne.n	80230cc <prints+0x2c>
		}

		if( count >= apBuf->flags.width )
 80230d6:	687b      	ldr	r3, [r7, #4]
 80230d8:	695b      	ldr	r3, [r3, #20]
 80230da:	429c      	cmp	r4, r3
 80230dc:	db03      	blt.n	80230e6 <prints+0x46>
		{
			apBuf->flags.width = 0;
 80230de:	687b      	ldr	r3, [r7, #4]
 80230e0:	2200      	movs	r2, #0
 80230e2:	615a      	str	r2, [r3, #20]
 80230e4:	e004      	b.n	80230f0 <prints+0x50>
		}
		else
		{
			apBuf->flags.width -= count;
 80230e6:	687b      	ldr	r3, [r7, #4]
 80230e8:	695b      	ldr	r3, [r3, #20]
 80230ea:	1b1a      	subs	r2, r3, r4
 80230ec:	687b      	ldr	r3, [r7, #4]
 80230ee:	615a      	str	r2, [r3, #20]
		}

		if( apBuf->flags.pad & PAD_ZERO )
 80230f0:	687b      	ldr	r3, [r7, #4]
 80230f2:	7f1b      	ldrb	r3, [r3, #28]
 80230f4:	f003 0302 	and.w	r3, r3, #2
 80230f8:	2b00      	cmp	r3, #0
 80230fa:	d000      	beq.n	80230fe <prints+0x5e>
		{
			padchar = '0';
 80230fc:	2630      	movs	r6, #48	@ 0x30
		}
	}
	if( ( apBuf->flags.pad & PAD_RIGHT ) == 0 )
 80230fe:	687b      	ldr	r3, [r7, #4]
 8023100:	7f1b      	ldrb	r3, [r3, #28]
 8023102:	f003 0301 	and.w	r3, r3, #1
 8023106:	2b00      	cmp	r3, #0
 8023108:	d112      	bne.n	8023130 <prints+0x90>
	{
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 802310a:	e00d      	b.n	8023128 <prints+0x88>
		{
			if( strbuf_printchar( apBuf, padchar ) == 0 )
 802310c:	4631      	mov	r1, r6
 802310e:	6878      	ldr	r0, [r7, #4]
 8023110:	f7ff ff3f 	bl	8022f92 <strbuf_printchar>
 8023114:	4603      	mov	r3, r0
 8023116:	2b00      	cmp	r3, #0
 8023118:	d101      	bne.n	802311e <prints+0x7e>
			{
				return pdFALSE;
 802311a:	2300      	movs	r3, #0
 802311c:	e062      	b.n	80231e4 <prints+0x144>
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 802311e:	687b      	ldr	r3, [r7, #4]
 8023120:	695b      	ldr	r3, [r3, #20]
 8023122:	1e5a      	subs	r2, r3, #1
 8023124:	687b      	ldr	r3, [r7, #4]
 8023126:	615a      	str	r2, [r3, #20]
 8023128:	687b      	ldr	r3, [r7, #4]
 802312a:	695b      	ldr	r3, [r3, #20]
 802312c:	2b00      	cmp	r3, #0
 802312e:	dced      	bgt.n	802310c <prints+0x6c>
			}
		}
	}
	if( ( apBuf->flags.isNumber == pdTRUE ) && ( apBuf->flags.pad == pdTRUE ) )
 8023130:	687b      	ldr	r3, [r7, #4]
 8023132:	7f9b      	ldrb	r3, [r3, #30]
 8023134:	f003 0302 	and.w	r3, r3, #2
 8023138:	b2db      	uxtb	r3, r3
 802313a:	2b00      	cmp	r3, #0
 802313c:	d036      	beq.n	80231ac <prints+0x10c>
 802313e:	687b      	ldr	r3, [r7, #4]
 8023140:	7f1b      	ldrb	r3, [r3, #28]
 8023142:	2b01      	cmp	r3, #1
 8023144:	d132      	bne.n	80231ac <prints+0x10c>
		/* The string to print represents an integer number.
		 * In this case, printLimit is the min number of digits to print
		 * If the length of the number to print is less than the min nb of i
		 * digits to display, we add 0 before printing the number
		 */
		len = strlen( apString );
 8023146:	6838      	ldr	r0, [r7, #0]
 8023148:	f7dd f8d4 	bl	80002f4 <strlen>
 802314c:	4603      	mov	r3, r0
 802314e:	60bb      	str	r3, [r7, #8]

		if( len < apBuf->flags.printLimit )
 8023150:	687b      	ldr	r3, [r7, #4]
 8023152:	699b      	ldr	r3, [r3, #24]
 8023154:	68ba      	ldr	r2, [r7, #8]
 8023156:	429a      	cmp	r2, r3
 8023158:	da28      	bge.n	80231ac <prints+0x10c>
		{
			i = apBuf->flags.printLimit - len;
 802315a:	687b      	ldr	r3, [r7, #4]
 802315c:	699a      	ldr	r2, [r3, #24]
 802315e:	68bb      	ldr	r3, [r7, #8]
 8023160:	1ad3      	subs	r3, r2, r3
 8023162:	60fb      	str	r3, [r7, #12]
			for( ; i; i-- )
 8023164:	e00b      	b.n	802317e <prints+0xde>
			{
				if( strbuf_printchar( apBuf, '0' )  == 0 )
 8023166:	2130      	movs	r1, #48	@ 0x30
 8023168:	6878      	ldr	r0, [r7, #4]
 802316a:	f7ff ff12 	bl	8022f92 <strbuf_printchar>
 802316e:	4603      	mov	r3, r0
 8023170:	2b00      	cmp	r3, #0
 8023172:	d101      	bne.n	8023178 <prints+0xd8>
				{
					return pdFALSE;
 8023174:	2300      	movs	r3, #0
 8023176:	e035      	b.n	80231e4 <prints+0x144>
			for( ; i; i-- )
 8023178:	68fb      	ldr	r3, [r7, #12]
 802317a:	3b01      	subs	r3, #1
 802317c:	60fb      	str	r3, [r7, #12]
 802317e:	68fb      	ldr	r3, [r7, #12]
 8023180:	2b00      	cmp	r3, #0
 8023182:	d1f0      	bne.n	8023166 <prints+0xc6>
		}
	}
	/* The string to print is not the result of a number conversion to ascii.
	 * For a string, printLimit is the max number of characters to display
	 */
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 8023184:	e012      	b.n	80231ac <prints+0x10c>
	{
		if( !strbuf_printchar( apBuf, *apString ) )
 8023186:	683b      	ldr	r3, [r7, #0]
 8023188:	781b      	ldrb	r3, [r3, #0]
 802318a:	4619      	mov	r1, r3
 802318c:	6878      	ldr	r0, [r7, #4]
 802318e:	f7ff ff00 	bl	8022f92 <strbuf_printchar>
 8023192:	4603      	mov	r3, r0
 8023194:	2b00      	cmp	r3, #0
 8023196:	d101      	bne.n	802319c <prints+0xfc>
		{
			return pdFALSE;
 8023198:	2300      	movs	r3, #0
 802319a:	e023      	b.n	80231e4 <prints+0x144>
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 802319c:	683b      	ldr	r3, [r7, #0]
 802319e:	3301      	adds	r3, #1
 80231a0:	603b      	str	r3, [r7, #0]
 80231a2:	687b      	ldr	r3, [r7, #4]
 80231a4:	699b      	ldr	r3, [r3, #24]
 80231a6:	1e5a      	subs	r2, r3, #1
 80231a8:	687b      	ldr	r3, [r7, #4]
 80231aa:	619a      	str	r2, [r3, #24]
 80231ac:	687b      	ldr	r3, [r7, #4]
 80231ae:	699b      	ldr	r3, [r3, #24]
 80231b0:	2b00      	cmp	r3, #0
 80231b2:	d012      	beq.n	80231da <prints+0x13a>
 80231b4:	683b      	ldr	r3, [r7, #0]
 80231b6:	781b      	ldrb	r3, [r3, #0]
 80231b8:	2b00      	cmp	r3, #0
 80231ba:	d1e4      	bne.n	8023186 <prints+0xe6>
		}
	}

	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 80231bc:	e00d      	b.n	80231da <prints+0x13a>
	{
		if( !strbuf_printchar( apBuf, padchar ) )
 80231be:	4631      	mov	r1, r6
 80231c0:	6878      	ldr	r0, [r7, #4]
 80231c2:	f7ff fee6 	bl	8022f92 <strbuf_printchar>
 80231c6:	4603      	mov	r3, r0
 80231c8:	2b00      	cmp	r3, #0
 80231ca:	d101      	bne.n	80231d0 <prints+0x130>
		{
			return pdFALSE;
 80231cc:	2300      	movs	r3, #0
 80231ce:	e009      	b.n	80231e4 <prints+0x144>
	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 80231d0:	687b      	ldr	r3, [r7, #4]
 80231d2:	695b      	ldr	r3, [r3, #20]
 80231d4:	1e5a      	subs	r2, r3, #1
 80231d6:	687b      	ldr	r3, [r7, #4]
 80231d8:	615a      	str	r2, [r3, #20]
 80231da:	687b      	ldr	r3, [r7, #4]
 80231dc:	695b      	ldr	r3, [r3, #20]
 80231de:	2b00      	cmp	r3, #0
 80231e0:	dced      	bgt.n	80231be <prints+0x11e>
		}
	}

	return pdTRUE;
 80231e2:	2301      	movs	r3, #1
}
 80231e4:	4618      	mov	r0, r3
 80231e6:	3714      	adds	r7, #20
 80231e8:	46bd      	mov	sp, r7
 80231ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80231ec:	08027e70 	.word	0x08027e70

080231f0 <printi>:
}
#endif	/* SPRINTF_LONG_LONG */
/*-----------------------------------------------------------*/

static BaseType_t printi( struct SStringBuf *apBuf, int i )
{
 80231f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80231f4:	b087      	sub	sp, #28
 80231f6:	af00      	add	r7, sp, #0
 80231f8:	6078      	str	r0, [r7, #4]
 80231fa:	6039      	str	r1, [r7, #0]
	char print_buf[ PRINT_BUF_LEN ];
	register char *s;
	register int t, neg = 0;
 80231fc:	f04f 0900 	mov.w	r9, #0
	register unsigned int u = i;
 8023200:	683d      	ldr	r5, [r7, #0]
	register unsigned base = apBuf->flags.base;
 8023202:	687b      	ldr	r3, [r7, #4]
 8023204:	691b      	ldr	r3, [r3, #16]
 8023206:	461e      	mov	r6, r3

	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 8023208:	687a      	ldr	r2, [r7, #4]
 802320a:	7f93      	ldrb	r3, [r2, #30]
 802320c:	f043 0302 	orr.w	r3, r3, #2
 8023210:	7793      	strb	r3, [r2, #30]

	if( i == 0 )
 8023212:	683b      	ldr	r3, [r7, #0]
 8023214:	2b00      	cmp	r3, #0
 8023216:	d10b      	bne.n	8023230 <printi+0x40>
	{
		print_buf[ 0 ] = '0';
 8023218:	2330      	movs	r3, #48	@ 0x30
 802321a:	733b      	strb	r3, [r7, #12]
		print_buf[ 1 ] = '\0';
 802321c:	2300      	movs	r3, #0
 802321e:	737b      	strb	r3, [r7, #13]
		return prints( apBuf, print_buf );
 8023220:	f107 030c 	add.w	r3, r7, #12
 8023224:	4619      	mov	r1, r3
 8023226:	6878      	ldr	r0, [r7, #4]
 8023228:	f7ff ff3a 	bl	80230a0 <prints>
 802322c:	4603      	mov	r3, r0
 802322e:	e067      	b.n	8023300 <printi+0x110>
	}

	if( ( apBuf->flags.isSigned == pdTRUE ) && ( base == 10 ) && ( i < 0 ) )
 8023230:	687b      	ldr	r3, [r7, #4]
 8023232:	7f9b      	ldrb	r3, [r3, #30]
 8023234:	f003 0301 	and.w	r3, r3, #1
 8023238:	b2db      	uxtb	r3, r3
 802323a:	2b00      	cmp	r3, #0
 802323c:	d009      	beq.n	8023252 <printi+0x62>
 802323e:	2e0a      	cmp	r6, #10
 8023240:	d107      	bne.n	8023252 <printi+0x62>
 8023242:	683b      	ldr	r3, [r7, #0]
 8023244:	2b00      	cmp	r3, #0
 8023246:	da04      	bge.n	8023252 <printi+0x62>
	{
		neg = 1;
 8023248:	f04f 0901 	mov.w	r9, #1
		u = -i;
 802324c:	683b      	ldr	r3, [r7, #0]
 802324e:	425b      	negs	r3, r3
 8023250:	461d      	mov	r5, r3
	}

	s = print_buf + sizeof print_buf - 1;
 8023252:	f107 040c 	add.w	r4, r7, #12
 8023256:	340b      	adds	r4, #11

	*s = '\0';
 8023258:	2300      	movs	r3, #0
 802325a:	7023      	strb	r3, [r4, #0]
	switch( base )
 802325c:	2e10      	cmp	r6, #16
 802325e:	d017      	beq.n	8023290 <printi+0xa0>
 8023260:	2e10      	cmp	r6, #16
 8023262:	d829      	bhi.n	80232b8 <printi+0xc8>
 8023264:	2e08      	cmp	r6, #8
 8023266:	d024      	beq.n	80232b2 <printi+0xc2>
 8023268:	2e0a      	cmp	r6, #10
 802326a:	d022      	beq.n	80232b2 <printi+0xc2>
 802326c:	e024      	b.n	80232b8 <printi+0xc8>
	{
	case 16:
		while( u != 0 )
		{
			t = u & 0xF;
 802326e:	462b      	mov	r3, r5
 8023270:	f003 080f 	and.w	r8, r3, #15
			if( t >= 10 )
 8023274:	f1b8 0f09 	cmp.w	r8, #9
 8023278:	dd03      	ble.n	8023282 <printi+0x92>
			{
				t += apBuf->flags.letBase - '0' - 10;
 802327a:	687b      	ldr	r3, [r7, #4]
 802327c:	7f5b      	ldrb	r3, [r3, #29]
 802327e:	3b3a      	subs	r3, #58	@ 0x3a
 8023280:	4498      	add	r8, r3
			}
			*( --s ) = t + '0';
 8023282:	fa5f f388 	uxtb.w	r3, r8
 8023286:	3c01      	subs	r4, #1
 8023288:	3330      	adds	r3, #48	@ 0x30
 802328a:	b2db      	uxtb	r3, r3
 802328c:	7023      	strb	r3, [r4, #0]
			u >>= 4;
 802328e:	092d      	lsrs	r5, r5, #4
		while( u != 0 )
 8023290:	2d00      	cmp	r5, #0
 8023292:	d1ec      	bne.n	802326e <printi+0x7e>
		}
		break;
 8023294:	e010      	b.n	80232b8 <printi+0xc8>
	case 8:
	case 10:
		/* GCC compiles very efficient */
		while( u )
		{
			t = u % base;
 8023296:	fbb5 f3f6 	udiv	r3, r5, r6
 802329a:	fb06 f303 	mul.w	r3, r6, r3
 802329e:	1aeb      	subs	r3, r5, r3
 80232a0:	4698      	mov	r8, r3
			*( --s ) = t + '0';
 80232a2:	fa5f f388 	uxtb.w	r3, r8
 80232a6:	3c01      	subs	r4, #1
 80232a8:	3330      	adds	r3, #48	@ 0x30
 80232aa:	b2db      	uxtb	r3, r3
 80232ac:	7023      	strb	r3, [r4, #0]
			u /= base;
 80232ae:	fbb5 f5f6 	udiv	r5, r5, r6
		while( u )
 80232b2:	2d00      	cmp	r5, #0
 80232b4:	d1ef      	bne.n	8023296 <printi+0xa6>
		}
		break;
 80232b6:	bf00      	nop
		}
		break;
*/
	}

	if( neg != 0 )
 80232b8:	f1b9 0f00 	cmp.w	r9, #0
 80232bc:	d01b      	beq.n	80232f6 <printi+0x106>
	{
		if( apBuf->flags.width && (apBuf->flags.pad & PAD_ZERO ) )
 80232be:	687b      	ldr	r3, [r7, #4]
 80232c0:	695b      	ldr	r3, [r3, #20]
 80232c2:	2b00      	cmp	r3, #0
 80232c4:	d014      	beq.n	80232f0 <printi+0x100>
 80232c6:	687b      	ldr	r3, [r7, #4]
 80232c8:	7f1b      	ldrb	r3, [r3, #28]
 80232ca:	f003 0302 	and.w	r3, r3, #2
 80232ce:	2b00      	cmp	r3, #0
 80232d0:	d00e      	beq.n	80232f0 <printi+0x100>
		{
			if( strbuf_printchar( apBuf, '-' ) == 0 )
 80232d2:	212d      	movs	r1, #45	@ 0x2d
 80232d4:	6878      	ldr	r0, [r7, #4]
 80232d6:	f7ff fe5c 	bl	8022f92 <strbuf_printchar>
 80232da:	4603      	mov	r3, r0
 80232dc:	2b00      	cmp	r3, #0
 80232de:	d101      	bne.n	80232e4 <printi+0xf4>
			{
				return pdFALSE;
 80232e0:	2300      	movs	r3, #0
 80232e2:	e00d      	b.n	8023300 <printi+0x110>
			}
			--apBuf->flags.width;
 80232e4:	687b      	ldr	r3, [r7, #4]
 80232e6:	695b      	ldr	r3, [r3, #20]
 80232e8:	1e5a      	subs	r2, r3, #1
 80232ea:	687b      	ldr	r3, [r7, #4]
 80232ec:	615a      	str	r2, [r3, #20]
 80232ee:	e002      	b.n	80232f6 <printi+0x106>
		}
		else
		{
			*( --s ) = '-';
 80232f0:	3c01      	subs	r4, #1
 80232f2:	232d      	movs	r3, #45	@ 0x2d
 80232f4:	7023      	strb	r3, [r4, #0]
		}
	}

	return prints( apBuf, s );
 80232f6:	4621      	mov	r1, r4
 80232f8:	6878      	ldr	r0, [r7, #4]
 80232fa:	f7ff fed1 	bl	80230a0 <prints>
 80232fe:	4603      	mov	r3, r0
}
 8023300:	4618      	mov	r0, r3
 8023302:	371c      	adds	r7, #28
 8023304:	46bd      	mov	sp, r7
 8023306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0802330c <printIp>:
/*-----------------------------------------------------------*/

static BaseType_t printIp(struct SStringBuf *apBuf, unsigned i )
{
 802330c:	b590      	push	{r4, r7, lr}
 802330e:	b089      	sub	sp, #36	@ 0x24
 8023310:	af02      	add	r7, sp, #8
 8023312:	6078      	str	r0, [r7, #4]
 8023314:	6039      	str	r1, [r7, #0]
	char print_buf[16];

	sprintf( print_buf, "%u.%u.%u.%u",
 8023316:	683b      	ldr	r3, [r7, #0]
 8023318:	0e19      	lsrs	r1, r3, #24
		i >> 24,
		( i >> 16 ) & 0xff,
 802331a:	683b      	ldr	r3, [r7, #0]
 802331c:	0c1b      	lsrs	r3, r3, #16
	sprintf( print_buf, "%u.%u.%u.%u",
 802331e:	b2dc      	uxtb	r4, r3
		( i >> 8 ) & 0xff,
 8023320:	683b      	ldr	r3, [r7, #0]
 8023322:	0a1b      	lsrs	r3, r3, #8
	sprintf( print_buf, "%u.%u.%u.%u",
 8023324:	b2db      	uxtb	r3, r3
 8023326:	683a      	ldr	r2, [r7, #0]
 8023328:	b2d2      	uxtb	r2, r2
 802332a:	f107 0008 	add.w	r0, r7, #8
 802332e:	9201      	str	r2, [sp, #4]
 8023330:	9300      	str	r3, [sp, #0]
 8023332:	4623      	mov	r3, r4
 8023334:	460a      	mov	r2, r1
 8023336:	4909      	ldr	r1, [pc, #36]	@ (802335c <printIp+0x50>)
 8023338:	f000 fa81 	bl	802383e <sprintf>
		i & 0xff );
	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 802333c:	687a      	ldr	r2, [r7, #4]
 802333e:	7f93      	ldrb	r3, [r2, #30]
 8023340:	f043 0302 	orr.w	r3, r3, #2
 8023344:	7793      	strb	r3, [r2, #30]
	prints( apBuf, print_buf );
 8023346:	f107 0308 	add.w	r3, r7, #8
 802334a:	4619      	mov	r1, r3
 802334c:	6878      	ldr	r0, [r7, #4]
 802334e:	f7ff fea7 	bl	80230a0 <prints>

	return pdTRUE;
 8023352:	2301      	movs	r3, #1
}
 8023354:	4618      	mov	r0, r3
 8023356:	371c      	adds	r7, #28
 8023358:	46bd      	mov	sp, r7
 802335a:	bd90      	pop	{r4, r7, pc}
 802335c:	08027e78 	.word	0x08027e78

08023360 <usNetToHost>:
/*-----------------------------------------------------------*/

static uint16_t usNetToHost( uint16_t usValue )
{
 8023360:	b480      	push	{r7}
 8023362:	b083      	sub	sp, #12
 8023364:	af00      	add	r7, sp, #0
 8023366:	4603      	mov	r3, r0
 8023368:	80fb      	strh	r3, [r7, #6]
	if( u32.ulWords[ 0 ] == 0x00010203 )
 802336a:	4a0b      	ldr	r2, [pc, #44]	@ (8023398 <usNetToHost+0x38>)
 802336c:	4b0b      	ldr	r3, [pc, #44]	@ (802339c <usNetToHost+0x3c>)
 802336e:	429a      	cmp	r2, r3
 8023370:	d101      	bne.n	8023376 <usNetToHost+0x16>
	{
		return usValue;
 8023372:	88fb      	ldrh	r3, [r7, #6]
 8023374:	e009      	b.n	802338a <usNetToHost+0x2a>
	}
	else
	{
		return ( usValue << 8 ) | ( usValue >> 8 );
 8023376:	88fb      	ldrh	r3, [r7, #6]
 8023378:	021b      	lsls	r3, r3, #8
 802337a:	b21a      	sxth	r2, r3
 802337c:	88fb      	ldrh	r3, [r7, #6]
 802337e:	0a1b      	lsrs	r3, r3, #8
 8023380:	b29b      	uxth	r3, r3
 8023382:	b21b      	sxth	r3, r3
 8023384:	4313      	orrs	r3, r2
 8023386:	b21b      	sxth	r3, r3
 8023388:	b29b      	uxth	r3, r3
	}
}
 802338a:	4618      	mov	r0, r3
 802338c:	370c      	adds	r7, #12
 802338e:	46bd      	mov	sp, r7
 8023390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023394:	4770      	bx	lr
 8023396:	bf00      	nop
 8023398:	03020100 	.word	0x03020100
 802339c:	00010203 	.word	0x00010203

080233a0 <printIPv6>:

static BaseType_t printIPv6( struct SStringBuf *apBuf, uint16_t *pusAddress )
{
 80233a0:	b580      	push	{r7, lr}
 80233a2:	b088      	sub	sp, #32
 80233a4:	af00      	add	r7, sp, #0
 80233a6:	6078      	str	r0, [r7, #4]
 80233a8:	6039      	str	r1, [r7, #0]
	int iIndex;
	int iZeroStart = -1;
 80233aa:	f04f 33ff 	mov.w	r3, #4294967295
 80233ae:	61bb      	str	r3, [r7, #24]
	int iZeroLength = 0;
 80233b0:	2300      	movs	r3, #0
 80233b2:	617b      	str	r3, [r7, #20]
	int iCurStart = 0;
 80233b4:	2300      	movs	r3, #0
 80233b6:	613b      	str	r3, [r7, #16]
	int iCurLength = 0;
 80233b8:	2300      	movs	r3, #0
 80233ba:	60fb      	str	r3, [r7, #12]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 80233bc:	2300      	movs	r3, #0
 80233be:	61fb      	str	r3, [r7, #28]
 80233c0:	e026      	b.n	8023410 <printIPv6+0x70>
	{
	uint16_t usValue = pusAddress[ iIndex ];
 80233c2:	69fb      	ldr	r3, [r7, #28]
 80233c4:	005b      	lsls	r3, r3, #1
 80233c6:	683a      	ldr	r2, [r7, #0]
 80233c8:	4413      	add	r3, r2
 80233ca:	881b      	ldrh	r3, [r3, #0]
 80233cc:	817b      	strh	r3, [r7, #10]
		if( usValue == 0 )
 80233ce:	897b      	ldrh	r3, [r7, #10]
 80233d0:	2b00      	cmp	r3, #0
 80233d2:	d107      	bne.n	80233e4 <printIPv6+0x44>
		{
			if( iCurLength == 0 )
 80233d4:	68fb      	ldr	r3, [r7, #12]
 80233d6:	2b00      	cmp	r3, #0
 80233d8:	d101      	bne.n	80233de <printIPv6+0x3e>
			{
				iCurStart = iIndex;
 80233da:	69fb      	ldr	r3, [r7, #28]
 80233dc:	613b      	str	r3, [r7, #16]
			}
			iCurLength++;
 80233de:	68fb      	ldr	r3, [r7, #12]
 80233e0:	3301      	adds	r3, #1
 80233e2:	60fb      	str	r3, [r7, #12]
		}
		if( ( usValue != 0 ) || ( iIndex == 7 ) )
 80233e4:	897b      	ldrh	r3, [r7, #10]
 80233e6:	2b00      	cmp	r3, #0
 80233e8:	d102      	bne.n	80233f0 <printIPv6+0x50>
 80233ea:	69fb      	ldr	r3, [r7, #28]
 80233ec:	2b07      	cmp	r3, #7
 80233ee:	d10c      	bne.n	802340a <printIPv6+0x6a>
		{
			if( ( iCurLength > 1 ) && ( iZeroLength < iCurLength ) )
 80233f0:	68fb      	ldr	r3, [r7, #12]
 80233f2:	2b01      	cmp	r3, #1
 80233f4:	dd07      	ble.n	8023406 <printIPv6+0x66>
 80233f6:	697a      	ldr	r2, [r7, #20]
 80233f8:	68fb      	ldr	r3, [r7, #12]
 80233fa:	429a      	cmp	r2, r3
 80233fc:	da03      	bge.n	8023406 <printIPv6+0x66>
			{
				iZeroLength = iCurLength;
 80233fe:	68fb      	ldr	r3, [r7, #12]
 8023400:	617b      	str	r3, [r7, #20]
				iZeroStart = iCurStart;
 8023402:	693b      	ldr	r3, [r7, #16]
 8023404:	61bb      	str	r3, [r7, #24]
			}
			iCurLength = 0;
 8023406:	2300      	movs	r3, #0
 8023408:	60fb      	str	r3, [r7, #12]
	for( iIndex = 0; iIndex < 8; iIndex++ )
 802340a:	69fb      	ldr	r3, [r7, #28]
 802340c:	3301      	adds	r3, #1
 802340e:	61fb      	str	r3, [r7, #28]
 8023410:	69fb      	ldr	r3, [r7, #28]
 8023412:	2b07      	cmp	r3, #7
 8023414:	ddd5      	ble.n	80233c2 <printIPv6+0x22>
		}
	}

	apBuf->flags.base = 16;
 8023416:	687b      	ldr	r3, [r7, #4]
 8023418:	2210      	movs	r2, #16
 802341a:	611a      	str	r2, [r3, #16]
	apBuf->flags.letBase = 'a'; /* use lower-case letters 'a' to 'f' */
 802341c:	687b      	ldr	r3, [r7, #4]
 802341e:	2261      	movs	r2, #97	@ 0x61
 8023420:	775a      	strb	r2, [r3, #29]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 8023422:	2300      	movs	r3, #0
 8023424:	61fb      	str	r3, [r7, #28]
 8023426:	e02b      	b.n	8023480 <printIPv6+0xe0>
	{
		if( iIndex == iZeroStart )
 8023428:	69fa      	ldr	r2, [r7, #28]
 802342a:	69bb      	ldr	r3, [r7, #24]
 802342c:	429a      	cmp	r2, r3
 802342e:	d110      	bne.n	8023452 <printIPv6+0xb2>
		{
			iIndex += iZeroLength - 1;
 8023430:	697b      	ldr	r3, [r7, #20]
 8023432:	3b01      	subs	r3, #1
 8023434:	69fa      	ldr	r2, [r7, #28]
 8023436:	4413      	add	r3, r2
 8023438:	61fb      	str	r3, [r7, #28]
			strbuf_printchar( apBuf, ':' );
 802343a:	213a      	movs	r1, #58	@ 0x3a
 802343c:	6878      	ldr	r0, [r7, #4]
 802343e:	f7ff fda8 	bl	8022f92 <strbuf_printchar>
			if( iIndex == 7 )
 8023442:	69fb      	ldr	r3, [r7, #28]
 8023444:	2b07      	cmp	r3, #7
 8023446:	d118      	bne.n	802347a <printIPv6+0xda>
			{
				strbuf_printchar( apBuf, ':' );
 8023448:	213a      	movs	r1, #58	@ 0x3a
 802344a:	6878      	ldr	r0, [r7, #4]
 802344c:	f7ff fda1 	bl	8022f92 <strbuf_printchar>
 8023450:	e013      	b.n	802347a <printIPv6+0xda>
			}
		}
		else
		{
			if( iIndex > 0 )
 8023452:	69fb      	ldr	r3, [r7, #28]
 8023454:	2b00      	cmp	r3, #0
 8023456:	dd03      	ble.n	8023460 <printIPv6+0xc0>
			{
				strbuf_printchar( apBuf, ':' );
 8023458:	213a      	movs	r1, #58	@ 0x3a
 802345a:	6878      	ldr	r0, [r7, #4]
 802345c:	f7ff fd99 	bl	8022f92 <strbuf_printchar>
			}
			printi( apBuf, ( int ) ( ( uint32_t ) usNetToHost( pusAddress[ iIndex ] ) ) );
 8023460:	69fb      	ldr	r3, [r7, #28]
 8023462:	005b      	lsls	r3, r3, #1
 8023464:	683a      	ldr	r2, [r7, #0]
 8023466:	4413      	add	r3, r2
 8023468:	881b      	ldrh	r3, [r3, #0]
 802346a:	4618      	mov	r0, r3
 802346c:	f7ff ff78 	bl	8023360 <usNetToHost>
 8023470:	4603      	mov	r3, r0
 8023472:	4619      	mov	r1, r3
 8023474:	6878      	ldr	r0, [r7, #4]
 8023476:	f7ff febb 	bl	80231f0 <printi>
	for( iIndex = 0; iIndex < 8; iIndex++ )
 802347a:	69fb      	ldr	r3, [r7, #28]
 802347c:	3301      	adds	r3, #1
 802347e:	61fb      	str	r3, [r7, #28]
 8023480:	69fb      	ldr	r3, [r7, #28]
 8023482:	2b07      	cmp	r3, #7
 8023484:	ddd0      	ble.n	8023428 <printIPv6+0x88>
		}
	}

	return pdTRUE;
 8023486:	2301      	movs	r3, #1
}
 8023488:	4618      	mov	r0, r3
 802348a:	3720      	adds	r7, #32
 802348c:	46bd      	mov	sp, r7
 802348e:	bd80      	pop	{r7, pc}

08023490 <tiny_print>:
/*-----------------------------------------------------------*/

static void tiny_print( struct SStringBuf *apBuf, const char *format, va_list args )
{
 8023490:	b590      	push	{r4, r7, lr}
 8023492:	b087      	sub	sp, #28
 8023494:	af00      	add	r7, sp, #0
 8023496:	60f8      	str	r0, [r7, #12]
 8023498:	60b9      	str	r1, [r7, #8]
 802349a:	607a      	str	r2, [r7, #4]
	char scr[2];

	for( ; ; )
	{
		int ch = *( format++ );
 802349c:	68bb      	ldr	r3, [r7, #8]
 802349e:	1c5a      	adds	r2, r3, #1
 80234a0:	60ba      	str	r2, [r7, #8]
 80234a2:	781b      	ldrb	r3, [r3, #0]
 80234a4:	617b      	str	r3, [r7, #20]

		if( ch != '%' )
 80234a6:	697b      	ldr	r3, [r7, #20]
 80234a8:	2b25      	cmp	r3, #37	@ 0x25
 80234aa:	d00f      	beq.n	80234cc <tiny_print+0x3c>
		{
			do
			{
				/* Put the most like flow in a small loop */
				if( strbuf_printchar_inline( apBuf, ch ) == 0 )
 80234ac:	6979      	ldr	r1, [r7, #20]
 80234ae:	68f8      	ldr	r0, [r7, #12]
 80234b0:	f7ff fdad 	bl	802300e <strbuf_printchar_inline>
 80234b4:	4603      	mov	r3, r0
 80234b6:	2b00      	cmp	r3, #0
 80234b8:	f000 817e 	beq.w	80237b8 <tiny_print+0x328>
				{
					return;
				}
				ch = *( format++ );
 80234bc:	68bb      	ldr	r3, [r7, #8]
 80234be:	1c5a      	adds	r2, r3, #1
 80234c0:	60ba      	str	r2, [r7, #8]
 80234c2:	781b      	ldrb	r3, [r3, #0]
 80234c4:	617b      	str	r3, [r7, #20]
			} while( ch != '%' );
 80234c6:	697b      	ldr	r3, [r7, #20]
 80234c8:	2b25      	cmp	r3, #37	@ 0x25
 80234ca:	d1ef      	bne.n	80234ac <tiny_print+0x1c>
		}
		ch = *( format++ );
 80234cc:	68bb      	ldr	r3, [r7, #8]
 80234ce:	1c5a      	adds	r2, r3, #1
 80234d0:	60ba      	str	r2, [r7, #8]
 80234d2:	781b      	ldrb	r3, [r3, #0]
 80234d4:	617b      	str	r3, [r7, #20]
		/* Now ch has character after '%', format pointing to next */

		if( ch == '\0' )
 80234d6:	697b      	ldr	r3, [r7, #20]
 80234d8:	2b00      	cmp	r3, #0
 80234da:	f000 8165 	beq.w	80237a8 <tiny_print+0x318>
		{
			break;
		}
		if( ch == '%' )
 80234de:	697b      	ldr	r3, [r7, #20]
 80234e0:	2b25      	cmp	r3, #37	@ 0x25
 80234e2:	d108      	bne.n	80234f6 <tiny_print+0x66>
		{
			if( strbuf_printchar( apBuf, ch ) == 0 )
 80234e4:	6979      	ldr	r1, [r7, #20]
 80234e6:	68f8      	ldr	r0, [r7, #12]
 80234e8:	f7ff fd53 	bl	8022f92 <strbuf_printchar>
 80234ec:	4603      	mov	r3, r0
 80234ee:	2b00      	cmp	r3, #0
 80234f0:	f040 814e 	bne.w	8023790 <tiny_print+0x300>
			{
				return;
 80234f4:	e161      	b.n	80237ba <tiny_print+0x32a>
			}
			continue;
		}
		memset( &apBuf->flags, '\0', sizeof apBuf->flags );
 80234f6:	68fb      	ldr	r3, [r7, #12]
 80234f8:	3310      	adds	r3, #16
 80234fa:	2210      	movs	r2, #16
 80234fc:	2100      	movs	r1, #0
 80234fe:	4618      	mov	r0, r3
 8023500:	f7ff fc79 	bl	8022df6 <memset>

		if( ch == '-' )
 8023504:	697b      	ldr	r3, [r7, #20]
 8023506:	2b2d      	cmp	r3, #45	@ 0x2d
 8023508:	d114      	bne.n	8023534 <tiny_print+0xa4>
		{
			ch = *( format++ );
 802350a:	68bb      	ldr	r3, [r7, #8]
 802350c:	1c5a      	adds	r2, r3, #1
 802350e:	60ba      	str	r2, [r7, #8]
 8023510:	781b      	ldrb	r3, [r3, #0]
 8023512:	617b      	str	r3, [r7, #20]
			apBuf->flags.pad = PAD_RIGHT;
 8023514:	68fb      	ldr	r3, [r7, #12]
 8023516:	2201      	movs	r2, #1
 8023518:	771a      	strb	r2, [r3, #28]
		}
		while( ch == '0' )
 802351a:	e00b      	b.n	8023534 <tiny_print+0xa4>
		{
			ch = *( format++ );
 802351c:	68bb      	ldr	r3, [r7, #8]
 802351e:	1c5a      	adds	r2, r3, #1
 8023520:	60ba      	str	r2, [r7, #8]
 8023522:	781b      	ldrb	r3, [r3, #0]
 8023524:	617b      	str	r3, [r7, #20]
			apBuf->flags.pad |= PAD_ZERO;
 8023526:	68fb      	ldr	r3, [r7, #12]
 8023528:	7f1b      	ldrb	r3, [r3, #28]
 802352a:	f043 0302 	orr.w	r3, r3, #2
 802352e:	b2da      	uxtb	r2, r3
 8023530:	68fb      	ldr	r3, [r7, #12]
 8023532:	771a      	strb	r2, [r3, #28]
		while( ch == '0' )
 8023534:	697b      	ldr	r3, [r7, #20]
 8023536:	2b30      	cmp	r3, #48	@ 0x30
 8023538:	d0f0      	beq.n	802351c <tiny_print+0x8c>
		}
		if( ch == '*' )
 802353a:	697b      	ldr	r3, [r7, #20]
 802353c:	2b2a      	cmp	r3, #42	@ 0x2a
 802353e:	d120      	bne.n	8023582 <tiny_print+0xf2>
		{
			ch = *( format++ );
 8023540:	68bb      	ldr	r3, [r7, #8]
 8023542:	1c5a      	adds	r2, r3, #1
 8023544:	60ba      	str	r2, [r7, #8]
 8023546:	781b      	ldrb	r3, [r3, #0]
 8023548:	617b      	str	r3, [r7, #20]
			apBuf->flags.width = va_arg( args, int );
 802354a:	687b      	ldr	r3, [r7, #4]
 802354c:	1d1a      	adds	r2, r3, #4
 802354e:	607a      	str	r2, [r7, #4]
 8023550:	681a      	ldr	r2, [r3, #0]
 8023552:	68fb      	ldr	r3, [r7, #12]
 8023554:	615a      	str	r2, [r3, #20]
 8023556:	e01a      	b.n	802358e <tiny_print+0xfe>
		}
		else
		{
			while( ch >= '0' && ch <= '9' )
			{
				apBuf->flags.width *= 10;
 8023558:	68fb      	ldr	r3, [r7, #12]
 802355a:	695a      	ldr	r2, [r3, #20]
 802355c:	4613      	mov	r3, r2
 802355e:	009b      	lsls	r3, r3, #2
 8023560:	4413      	add	r3, r2
 8023562:	005b      	lsls	r3, r3, #1
 8023564:	461a      	mov	r2, r3
 8023566:	68fb      	ldr	r3, [r7, #12]
 8023568:	615a      	str	r2, [r3, #20]
				apBuf->flags.width += ch - '0';
 802356a:	68fb      	ldr	r3, [r7, #12]
 802356c:	695a      	ldr	r2, [r3, #20]
 802356e:	697b      	ldr	r3, [r7, #20]
 8023570:	3b30      	subs	r3, #48	@ 0x30
 8023572:	441a      	add	r2, r3
 8023574:	68fb      	ldr	r3, [r7, #12]
 8023576:	615a      	str	r2, [r3, #20]
				ch = *( format++ );
 8023578:	68bb      	ldr	r3, [r7, #8]
 802357a:	1c5a      	adds	r2, r3, #1
 802357c:	60ba      	str	r2, [r7, #8]
 802357e:	781b      	ldrb	r3, [r3, #0]
 8023580:	617b      	str	r3, [r7, #20]
			while( ch >= '0' && ch <= '9' )
 8023582:	697b      	ldr	r3, [r7, #20]
 8023584:	2b2f      	cmp	r3, #47	@ 0x2f
 8023586:	dd02      	ble.n	802358e <tiny_print+0xfe>
 8023588:	697b      	ldr	r3, [r7, #20]
 802358a:	2b39      	cmp	r3, #57	@ 0x39
 802358c:	dde4      	ble.n	8023558 <tiny_print+0xc8>
			}
		}
		if( ch == '.' )
 802358e:	697b      	ldr	r3, [r7, #20]
 8023590:	2b2e      	cmp	r3, #46	@ 0x2e
 8023592:	d12e      	bne.n	80235f2 <tiny_print+0x162>
		{
			ch = *( format++ );
 8023594:	68bb      	ldr	r3, [r7, #8]
 8023596:	1c5a      	adds	r2, r3, #1
 8023598:	60ba      	str	r2, [r7, #8]
 802359a:	781b      	ldrb	r3, [r3, #0]
 802359c:	617b      	str	r3, [r7, #20]
			if( ch == '*' )
 802359e:	697b      	ldr	r3, [r7, #20]
 80235a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80235a2:	d120      	bne.n	80235e6 <tiny_print+0x156>
			{
				apBuf->flags.printLimit = va_arg( args, int );
 80235a4:	687b      	ldr	r3, [r7, #4]
 80235a6:	1d1a      	adds	r2, r3, #4
 80235a8:	607a      	str	r2, [r7, #4]
 80235aa:	681a      	ldr	r2, [r3, #0]
 80235ac:	68fb      	ldr	r3, [r7, #12]
 80235ae:	619a      	str	r2, [r3, #24]
				ch = *( format++ );
 80235b0:	68bb      	ldr	r3, [r7, #8]
 80235b2:	1c5a      	adds	r2, r3, #1
 80235b4:	60ba      	str	r2, [r7, #8]
 80235b6:	781b      	ldrb	r3, [r3, #0]
 80235b8:	617b      	str	r3, [r7, #20]
 80235ba:	e01a      	b.n	80235f2 <tiny_print+0x162>
			}
			else
			{
				while( ch >= '0' && ch <= '9' )
				{
					apBuf->flags.printLimit *= 10;
 80235bc:	68fb      	ldr	r3, [r7, #12]
 80235be:	699a      	ldr	r2, [r3, #24]
 80235c0:	4613      	mov	r3, r2
 80235c2:	009b      	lsls	r3, r3, #2
 80235c4:	4413      	add	r3, r2
 80235c6:	005b      	lsls	r3, r3, #1
 80235c8:	461a      	mov	r2, r3
 80235ca:	68fb      	ldr	r3, [r7, #12]
 80235cc:	619a      	str	r2, [r3, #24]
					apBuf->flags.printLimit += ch - '0';
 80235ce:	68fb      	ldr	r3, [r7, #12]
 80235d0:	699a      	ldr	r2, [r3, #24]
 80235d2:	697b      	ldr	r3, [r7, #20]
 80235d4:	3b30      	subs	r3, #48	@ 0x30
 80235d6:	441a      	add	r2, r3
 80235d8:	68fb      	ldr	r3, [r7, #12]
 80235da:	619a      	str	r2, [r3, #24]
					ch = *( format++ );
 80235dc:	68bb      	ldr	r3, [r7, #8]
 80235de:	1c5a      	adds	r2, r3, #1
 80235e0:	60ba      	str	r2, [r7, #8]
 80235e2:	781b      	ldrb	r3, [r3, #0]
 80235e4:	617b      	str	r3, [r7, #20]
				while( ch >= '0' && ch <= '9' )
 80235e6:	697b      	ldr	r3, [r7, #20]
 80235e8:	2b2f      	cmp	r3, #47	@ 0x2f
 80235ea:	dd02      	ble.n	80235f2 <tiny_print+0x162>
 80235ec:	697b      	ldr	r3, [r7, #20]
 80235ee:	2b39      	cmp	r3, #57	@ 0x39
 80235f0:	dde4      	ble.n	80235bc <tiny_print+0x12c>
				}
			}
		}
		if( apBuf->flags.printLimit == 0 )
 80235f2:	68fb      	ldr	r3, [r7, #12]
 80235f4:	699b      	ldr	r3, [r3, #24]
 80235f6:	2b00      	cmp	r3, #0
 80235f8:	d104      	bne.n	8023604 <tiny_print+0x174>
		{
			apBuf->flags.printLimit--;  /* -1: make it unlimited */
 80235fa:	68fb      	ldr	r3, [r7, #12]
 80235fc:	699b      	ldr	r3, [r3, #24]
 80235fe:	1e5a      	subs	r2, r3, #1
 8023600:	68fb      	ldr	r3, [r7, #12]
 8023602:	619a      	str	r2, [r3, #24]
		}
		if( ch == 'p' )
 8023604:	697b      	ldr	r3, [r7, #20]
 8023606:	2b70      	cmp	r3, #112	@ 0x70
 8023608:	d118      	bne.n	802363c <tiny_print+0x1ac>
		{
			if( format[0] == 'i' && format[1] == 'p' )
 802360a:	68bb      	ldr	r3, [r7, #8]
 802360c:	781b      	ldrb	r3, [r3, #0]
 802360e:	2b69      	cmp	r3, #105	@ 0x69
 8023610:	d114      	bne.n	802363c <tiny_print+0x1ac>
 8023612:	68bb      	ldr	r3, [r7, #8]
 8023614:	3301      	adds	r3, #1
 8023616:	781b      	ldrb	r3, [r3, #0]
 8023618:	2b70      	cmp	r3, #112	@ 0x70
 802361a:	d10f      	bne.n	802363c <tiny_print+0x1ac>
			{
				format += 2;	/* eat the "pi" of "pip" */
 802361c:	68bb      	ldr	r3, [r7, #8]
 802361e:	3302      	adds	r3, #2
 8023620:	60bb      	str	r3, [r7, #8]
				/* Print a IPv6 address */
				if( printIPv6( apBuf, va_arg( args, uint16_t* ) ) == 0 )
 8023622:	687b      	ldr	r3, [r7, #4]
 8023624:	1d1a      	adds	r2, r3, #4
 8023626:	607a      	str	r2, [r7, #4]
 8023628:	681b      	ldr	r3, [r3, #0]
 802362a:	4619      	mov	r1, r3
 802362c:	68f8      	ldr	r0, [r7, #12]
 802362e:	f7ff feb7 	bl	80233a0 <printIPv6>
 8023632:	4603      	mov	r3, r0
 8023634:	2b00      	cmp	r3, #0
 8023636:	f040 80ad 	bne.w	8023794 <tiny_print+0x304>
				{
					break;
 802363a:	e0b8      	b.n	80237ae <tiny_print+0x31e>
				}
				continue;
			}
		}
		if( ch == 's' )
 802363c:	697b      	ldr	r3, [r7, #20]
 802363e:	2b73      	cmp	r3, #115	@ 0x73
 8023640:	d112      	bne.n	8023668 <tiny_print+0x1d8>
		{
			register char *s = ( char * )va_arg( args, int );
 8023642:	687b      	ldr	r3, [r7, #4]
 8023644:	1d1a      	adds	r2, r3, #4
 8023646:	607a      	str	r2, [r7, #4]
 8023648:	681b      	ldr	r3, [r3, #0]
 802364a:	461c      	mov	r4, r3
			if( prints( apBuf, s ? s : "(null)" ) == 0 )
 802364c:	2c00      	cmp	r4, #0
 802364e:	d001      	beq.n	8023654 <tiny_print+0x1c4>
 8023650:	4623      	mov	r3, r4
 8023652:	e000      	b.n	8023656 <tiny_print+0x1c6>
 8023654:	4b5a      	ldr	r3, [pc, #360]	@ (80237c0 <tiny_print+0x330>)
 8023656:	4619      	mov	r1, r3
 8023658:	68f8      	ldr	r0, [r7, #12]
 802365a:	f7ff fd21 	bl	80230a0 <prints>
 802365e:	4603      	mov	r3, r0
 8023660:	2b00      	cmp	r3, #0
 8023662:	f040 8099 	bne.w	8023798 <tiny_print+0x308>
			{
				break;
 8023666:	e0a2      	b.n	80237ae <tiny_print+0x31e>
			}
			continue;
		}
		if( ch == 'c' )
 8023668:	697b      	ldr	r3, [r7, #20]
 802366a:	2b63      	cmp	r3, #99	@ 0x63
 802366c:	d10f      	bne.n	802368e <tiny_print+0x1fe>
		{
			/* char are converted to int then pushed on the stack */
			scr[0] = ( char ) va_arg( args, int );
 802366e:	687b      	ldr	r3, [r7, #4]
 8023670:	1d1a      	adds	r2, r3, #4
 8023672:	607a      	str	r2, [r7, #4]
 8023674:	681b      	ldr	r3, [r3, #0]
 8023676:	b2db      	uxtb	r3, r3
 8023678:	743b      	strb	r3, [r7, #16]

			if( strbuf_printchar( apBuf, scr[0] )  == 0 )
 802367a:	7c3b      	ldrb	r3, [r7, #16]
 802367c:	4619      	mov	r1, r3
 802367e:	68f8      	ldr	r0, [r7, #12]
 8023680:	f7ff fc87 	bl	8022f92 <strbuf_printchar>
 8023684:	4603      	mov	r3, r0
 8023686:	2b00      	cmp	r3, #0
 8023688:	f040 8088 	bne.w	802379c <tiny_print+0x30c>
			{
				return;
 802368c:	e095      	b.n	80237ba <tiny_print+0x32a>
			}

			continue;
		}
		if( ch == 'l' )
 802368e:	697b      	ldr	r3, [r7, #20]
 8023690:	2b6c      	cmp	r3, #108	@ 0x6c
 8023692:	d109      	bne.n	80236a8 <tiny_print+0x218>
		{
			ch = *( format++ );
 8023694:	68bb      	ldr	r3, [r7, #8]
 8023696:	1c5a      	adds	r2, r3, #1
 8023698:	60ba      	str	r2, [r7, #8]
 802369a:	781b      	ldrb	r3, [r3, #0]
 802369c:	617b      	str	r3, [r7, #20]
			apBuf->flags.long32 = 1;
 802369e:	68fa      	ldr	r2, [r7, #12]
 80236a0:	7f93      	ldrb	r3, [r2, #30]
 80236a2:	f043 0304 	orr.w	r3, r3, #4
 80236a6:	7793      	strb	r3, [r2, #30]
			/* Makes not difference as u32 == long */
		}
		if( ch == 'L' )
 80236a8:	697b      	ldr	r3, [r7, #20]
 80236aa:	2b4c      	cmp	r3, #76	@ 0x4c
 80236ac:	d109      	bne.n	80236c2 <tiny_print+0x232>
		{
			ch = *( format++ );
 80236ae:	68bb      	ldr	r3, [r7, #8]
 80236b0:	1c5a      	adds	r2, r3, #1
 80236b2:	60ba      	str	r2, [r7, #8]
 80236b4:	781b      	ldrb	r3, [r3, #0]
 80236b6:	617b      	str	r3, [r7, #20]
			apBuf->flags.long64 = 1;
 80236b8:	68fa      	ldr	r2, [r7, #12]
 80236ba:	7f93      	ldrb	r3, [r2, #30]
 80236bc:	f043 0308 	orr.w	r3, r3, #8
 80236c0:	7793      	strb	r3, [r2, #30]
			/* Does make a difference */
		}
		apBuf->flags.base = 10;
 80236c2:	68fb      	ldr	r3, [r7, #12]
 80236c4:	220a      	movs	r2, #10
 80236c6:	611a      	str	r2, [r3, #16]
		apBuf->flags.letBase = 'a';
 80236c8:	68fb      	ldr	r3, [r7, #12]
 80236ca:	2261      	movs	r2, #97	@ 0x61
 80236cc:	775a      	strb	r2, [r3, #29]

		if( ch == 'd' || ch == 'u' )
 80236ce:	697b      	ldr	r3, [r7, #20]
 80236d0:	2b64      	cmp	r3, #100	@ 0x64
 80236d2:	d002      	beq.n	80236da <tiny_print+0x24a>
 80236d4:	697b      	ldr	r3, [r7, #20]
 80236d6:	2b75      	cmp	r3, #117	@ 0x75
 80236d8:	d116      	bne.n	8023708 <tiny_print+0x278>
		{
			apBuf->flags.isSigned = ( ch == 'd' );
 80236da:	697b      	ldr	r3, [r7, #20]
 80236dc:	2b64      	cmp	r3, #100	@ 0x64
 80236de:	bf0c      	ite	eq
 80236e0:	2301      	moveq	r3, #1
 80236e2:	2300      	movne	r3, #0
 80236e4:	b2d9      	uxtb	r1, r3
 80236e6:	68fa      	ldr	r2, [r7, #12]
 80236e8:	7f93      	ldrb	r3, [r2, #30]
 80236ea:	f361 0300 	bfi	r3, r1, #0, #1
 80236ee:	7793      	strb	r3, [r2, #30]
				{
					break;
				}
			} else
#endif	/* SPRINTF_LONG_LONG */
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 80236f0:	687b      	ldr	r3, [r7, #4]
 80236f2:	1d1a      	adds	r2, r3, #4
 80236f4:	607a      	str	r2, [r7, #4]
 80236f6:	681b      	ldr	r3, [r3, #0]
 80236f8:	4619      	mov	r1, r3
 80236fa:	68f8      	ldr	r0, [r7, #12]
 80236fc:	f7ff fd78 	bl	80231f0 <printi>
 8023700:	4603      	mov	r3, r0
 8023702:	2b00      	cmp	r3, #0
 8023704:	d14c      	bne.n	80237a0 <tiny_print+0x310>
			{
				break;
 8023706:	e052      	b.n	80237ae <tiny_print+0x31e>
			}
			continue;
		}

		apBuf->flags.base = 16;		/* From here all hexadecimal */
 8023708:	68fb      	ldr	r3, [r7, #12]
 802370a:	2210      	movs	r2, #16
 802370c:	611a      	str	r2, [r3, #16]

		if( ch == 'x' && format[0] == 'i' && format[1] == 'p' )
 802370e:	697b      	ldr	r3, [r7, #20]
 8023710:	2b78      	cmp	r3, #120	@ 0x78
 8023712:	d117      	bne.n	8023744 <tiny_print+0x2b4>
 8023714:	68bb      	ldr	r3, [r7, #8]
 8023716:	781b      	ldrb	r3, [r3, #0]
 8023718:	2b69      	cmp	r3, #105	@ 0x69
 802371a:	d113      	bne.n	8023744 <tiny_print+0x2b4>
 802371c:	68bb      	ldr	r3, [r7, #8]
 802371e:	3301      	adds	r3, #1
 8023720:	781b      	ldrb	r3, [r3, #0]
 8023722:	2b70      	cmp	r3, #112	@ 0x70
 8023724:	d10e      	bne.n	8023744 <tiny_print+0x2b4>
		{
			format += 2;	/* eat the "xi" of "xip" */
 8023726:	68bb      	ldr	r3, [r7, #8]
 8023728:	3302      	adds	r3, #2
 802372a:	60bb      	str	r3, [r7, #8]
			/* Will use base 10 again */
			if( printIp( apBuf, va_arg( args, int ) ) == 0 )
 802372c:	687b      	ldr	r3, [r7, #4]
 802372e:	1d1a      	adds	r2, r3, #4
 8023730:	607a      	str	r2, [r7, #4]
 8023732:	681b      	ldr	r3, [r3, #0]
 8023734:	4619      	mov	r1, r3
 8023736:	68f8      	ldr	r0, [r7, #12]
 8023738:	f7ff fde8 	bl	802330c <printIp>
 802373c:	4603      	mov	r3, r0
 802373e:	2b00      	cmp	r3, #0
 8023740:	d130      	bne.n	80237a4 <tiny_print+0x314>
			{
				break;
 8023742:	e034      	b.n	80237ae <tiny_print+0x31e>
			}
			continue;
		}
		if( ch == 'x' || ch == 'X' || ch == 'p' || ch == 'o' )
 8023744:	697b      	ldr	r3, [r7, #20]
 8023746:	2b78      	cmp	r3, #120	@ 0x78
 8023748:	d009      	beq.n	802375e <tiny_print+0x2ce>
 802374a:	697b      	ldr	r3, [r7, #20]
 802374c:	2b58      	cmp	r3, #88	@ 0x58
 802374e:	d006      	beq.n	802375e <tiny_print+0x2ce>
 8023750:	697b      	ldr	r3, [r7, #20]
 8023752:	2b70      	cmp	r3, #112	@ 0x70
 8023754:	d003      	beq.n	802375e <tiny_print+0x2ce>
 8023756:	697b      	ldr	r3, [r7, #20]
 8023758:	2b6f      	cmp	r3, #111	@ 0x6f
 802375a:	f47f ae9f 	bne.w	802349c <tiny_print+0xc>
		{
			if( ch == 'X' )
 802375e:	697b      	ldr	r3, [r7, #20]
 8023760:	2b58      	cmp	r3, #88	@ 0x58
 8023762:	d103      	bne.n	802376c <tiny_print+0x2dc>
			{
				apBuf->flags.letBase = 'A';
 8023764:	68fb      	ldr	r3, [r7, #12]
 8023766:	2241      	movs	r2, #65	@ 0x41
 8023768:	775a      	strb	r2, [r3, #29]
 802376a:	e005      	b.n	8023778 <tiny_print+0x2e8>
			}
			else if( ch == 'o' )
 802376c:	697b      	ldr	r3, [r7, #20]
 802376e:	2b6f      	cmp	r3, #111	@ 0x6f
 8023770:	d102      	bne.n	8023778 <tiny_print+0x2e8>
			{
				apBuf->flags.base = 8;
 8023772:	68fb      	ldr	r3, [r7, #12]
 8023774:	2208      	movs	r2, #8
 8023776:	611a      	str	r2, [r3, #16]
				{
					break;
				}
			} else
#endif	/* SPRINTF_LONG_LONG */
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 8023778:	687b      	ldr	r3, [r7, #4]
 802377a:	1d1a      	adds	r2, r3, #4
 802377c:	607a      	str	r2, [r7, #4]
 802377e:	681b      	ldr	r3, [r3, #0]
 8023780:	4619      	mov	r1, r3
 8023782:	68f8      	ldr	r0, [r7, #12]
 8023784:	f7ff fd34 	bl	80231f0 <printi>
 8023788:	4603      	mov	r3, r0
 802378a:	2b00      	cmp	r3, #0
 802378c:	d00e      	beq.n	80237ac <tiny_print+0x31c>
			{
				break;
			}
			continue;
 802378e:	e00a      	b.n	80237a6 <tiny_print+0x316>
			continue;
 8023790:	bf00      	nop
 8023792:	e683      	b.n	802349c <tiny_print+0xc>
				continue;
 8023794:	bf00      	nop
 8023796:	e681      	b.n	802349c <tiny_print+0xc>
			continue;
 8023798:	bf00      	nop
 802379a:	e67f      	b.n	802349c <tiny_print+0xc>
			continue;
 802379c:	bf00      	nop
 802379e:	e67d      	b.n	802349c <tiny_print+0xc>
			continue;
 80237a0:	bf00      	nop
 80237a2:	e67b      	b.n	802349c <tiny_print+0xc>
			continue;
 80237a4:	bf00      	nop
	{
 80237a6:	e679      	b.n	802349c <tiny_print+0xc>
			break;
 80237a8:	bf00      	nop
 80237aa:	e000      	b.n	80237ae <tiny_print+0x31e>
				break;
 80237ac:	bf00      	nop
		}
	}
	strbuf_printchar( apBuf, '\0' );
 80237ae:	2100      	movs	r1, #0
 80237b0:	68f8      	ldr	r0, [r7, #12]
 80237b2:	f7ff fbee 	bl	8022f92 <strbuf_printchar>
 80237b6:	e000      	b.n	80237ba <tiny_print+0x32a>
					return;
 80237b8:	bf00      	nop
}
 80237ba:	371c      	adds	r7, #28
 80237bc:	46bd      	mov	sp, r7
 80237be:	bd90      	pop	{r4, r7, pc}
 80237c0:	08027e84 	.word	0x08027e84

080237c4 <vsnprintf>:
	return strBuf.curLen;
}
/*-----------------------------------------------------------*/

int vsnprintf( char *apBuf, size_t aMaxLen, const char *apFmt, va_list args )
{
 80237c4:	b580      	push	{r7, lr}
 80237c6:	b08c      	sub	sp, #48	@ 0x30
 80237c8:	af00      	add	r7, sp, #0
 80237ca:	60f8      	str	r0, [r7, #12]
 80237cc:	60b9      	str	r1, [r7, #8]
 80237ce:	607a      	str	r2, [r7, #4]
 80237d0:	603b      	str	r3, [r7, #0]
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 80237d2:	68fa      	ldr	r2, [r7, #12]
 80237d4:	68bb      	ldr	r3, [r7, #8]
 80237d6:	441a      	add	r2, r3
 80237d8:	f107 0310 	add.w	r3, r7, #16
 80237dc:	68f9      	ldr	r1, [r7, #12]
 80237de:	4618      	mov	r0, r3
 80237e0:	f7ff fbb9 	bl	8022f56 <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 80237e4:	f107 0310 	add.w	r3, r7, #16
 80237e8:	683a      	ldr	r2, [r7, #0]
 80237ea:	6879      	ldr	r1, [r7, #4]
 80237ec:	4618      	mov	r0, r3
 80237ee:	f7ff fe4f 	bl	8023490 <tiny_print>

	return strBuf.curLen;
 80237f2:	69fb      	ldr	r3, [r7, #28]
}
 80237f4:	4618      	mov	r0, r3
 80237f6:	3730      	adds	r7, #48	@ 0x30
 80237f8:	46bd      	mov	sp, r7
 80237fa:	bd80      	pop	{r7, pc}

080237fc <snprintf>:
/*-----------------------------------------------------------*/

int snprintf( char *apBuf, size_t aMaxLen, const char *apFmt, ... )
{
 80237fc:	b40c      	push	{r2, r3}
 80237fe:	b580      	push	{r7, lr}
 8023800:	b08c      	sub	sp, #48	@ 0x30
 8023802:	af00      	add	r7, sp, #0
 8023804:	6078      	str	r0, [r7, #4]
 8023806:	6039      	str	r1, [r7, #0]
	va_list args;

	va_start( args,  apFmt );
 8023808:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 802380c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 802380e:	687a      	ldr	r2, [r7, #4]
 8023810:	683b      	ldr	r3, [r7, #0]
 8023812:	441a      	add	r2, r3
 8023814:	f107 030c 	add.w	r3, r7, #12
 8023818:	6879      	ldr	r1, [r7, #4]
 802381a:	4618      	mov	r0, r3
 802381c:	f7ff fb9b 	bl	8022f56 <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8023820:	f107 030c 	add.w	r3, r7, #12
 8023824:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8023826:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8023828:	4618      	mov	r0, r3
 802382a:	f7ff fe31 	bl	8023490 <tiny_print>
	va_end( args );

	return strBuf.curLen;
 802382e:	69bb      	ldr	r3, [r7, #24]
}
 8023830:	4618      	mov	r0, r3
 8023832:	3730      	adds	r7, #48	@ 0x30
 8023834:	46bd      	mov	sp, r7
 8023836:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802383a:	b002      	add	sp, #8
 802383c:	4770      	bx	lr

0802383e <sprintf>:
/*-----------------------------------------------------------*/

int sprintf( char *apBuf, const char *apFmt, ... )
{
 802383e:	b40e      	push	{r1, r2, r3}
 8023840:	b580      	push	{r7, lr}
 8023842:	b08d      	sub	sp, #52	@ 0x34
 8023844:	af00      	add	r7, sp, #0
 8023846:	6078      	str	r0, [r7, #4]
	va_list args;

	va_start( args,  apFmt );
 8023848:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 802384c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char * )apBuf + 1024 );
 802384e:	687b      	ldr	r3, [r7, #4]
 8023850:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8023854:	f107 030c 	add.w	r3, r7, #12
 8023858:	6879      	ldr	r1, [r7, #4]
 802385a:	4618      	mov	r0, r3
 802385c:	f7ff fb7b 	bl	8022f56 <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8023860:	f107 030c 	add.w	r3, r7, #12
 8023864:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8023866:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8023868:	4618      	mov	r0, r3
 802386a:	f7ff fe11 	bl	8023490 <tiny_print>
	va_end( args );

	return strBuf.curLen;
 802386e:	69bb      	ldr	r3, [r7, #24]
}
 8023870:	4618      	mov	r0, r3
 8023872:	3734      	adds	r7, #52	@ 0x34
 8023874:	46bd      	mov	sp, r7
 8023876:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802387a:	b003      	add	sp, #12
 802387c:	4770      	bx	lr
	...

08023880 <rand>:
 8023880:	4b16      	ldr	r3, [pc, #88]	@ (80238dc <rand+0x5c>)
 8023882:	b510      	push	{r4, lr}
 8023884:	681c      	ldr	r4, [r3, #0]
 8023886:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8023888:	b9b3      	cbnz	r3, 80238b8 <rand+0x38>
 802388a:	2018      	movs	r0, #24
 802388c:	f000 fa82 	bl	8023d94 <malloc>
 8023890:	4602      	mov	r2, r0
 8023892:	6320      	str	r0, [r4, #48]	@ 0x30
 8023894:	b920      	cbnz	r0, 80238a0 <rand+0x20>
 8023896:	4b12      	ldr	r3, [pc, #72]	@ (80238e0 <rand+0x60>)
 8023898:	4812      	ldr	r0, [pc, #72]	@ (80238e4 <rand+0x64>)
 802389a:	2152      	movs	r1, #82	@ 0x52
 802389c:	f000 fa12 	bl	8023cc4 <__assert_func>
 80238a0:	4911      	ldr	r1, [pc, #68]	@ (80238e8 <rand+0x68>)
 80238a2:	4b12      	ldr	r3, [pc, #72]	@ (80238ec <rand+0x6c>)
 80238a4:	e9c0 1300 	strd	r1, r3, [r0]
 80238a8:	4b11      	ldr	r3, [pc, #68]	@ (80238f0 <rand+0x70>)
 80238aa:	6083      	str	r3, [r0, #8]
 80238ac:	230b      	movs	r3, #11
 80238ae:	8183      	strh	r3, [r0, #12]
 80238b0:	2100      	movs	r1, #0
 80238b2:	2001      	movs	r0, #1
 80238b4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80238b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80238ba:	480e      	ldr	r0, [pc, #56]	@ (80238f4 <rand+0x74>)
 80238bc:	690b      	ldr	r3, [r1, #16]
 80238be:	694c      	ldr	r4, [r1, #20]
 80238c0:	4a0d      	ldr	r2, [pc, #52]	@ (80238f8 <rand+0x78>)
 80238c2:	4358      	muls	r0, r3
 80238c4:	fb02 0004 	mla	r0, r2, r4, r0
 80238c8:	fba3 3202 	umull	r3, r2, r3, r2
 80238cc:	3301      	adds	r3, #1
 80238ce:	eb40 0002 	adc.w	r0, r0, r2
 80238d2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80238d6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80238da:	bd10      	pop	{r4, pc}
 80238dc:	20000038 	.word	0x20000038
 80238e0:	08028050 	.word	0x08028050
 80238e4:	08028067 	.word	0x08028067
 80238e8:	abcd330e 	.word	0xabcd330e
 80238ec:	e66d1234 	.word	0xe66d1234
 80238f0:	0005deec 	.word	0x0005deec
 80238f4:	5851f42d 	.word	0x5851f42d
 80238f8:	4c957f2d 	.word	0x4c957f2d

080238fc <std>:
 80238fc:	2300      	movs	r3, #0
 80238fe:	b510      	push	{r4, lr}
 8023900:	4604      	mov	r4, r0
 8023902:	e9c0 3300 	strd	r3, r3, [r0]
 8023906:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802390a:	6083      	str	r3, [r0, #8]
 802390c:	8181      	strh	r1, [r0, #12]
 802390e:	6643      	str	r3, [r0, #100]	@ 0x64
 8023910:	81c2      	strh	r2, [r0, #14]
 8023912:	6183      	str	r3, [r0, #24]
 8023914:	4619      	mov	r1, r3
 8023916:	2208      	movs	r2, #8
 8023918:	305c      	adds	r0, #92	@ 0x5c
 802391a:	f7ff fa6c 	bl	8022df6 <memset>
 802391e:	4b0d      	ldr	r3, [pc, #52]	@ (8023954 <std+0x58>)
 8023920:	6263      	str	r3, [r4, #36]	@ 0x24
 8023922:	4b0d      	ldr	r3, [pc, #52]	@ (8023958 <std+0x5c>)
 8023924:	62a3      	str	r3, [r4, #40]	@ 0x28
 8023926:	4b0d      	ldr	r3, [pc, #52]	@ (802395c <std+0x60>)
 8023928:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802392a:	4b0d      	ldr	r3, [pc, #52]	@ (8023960 <std+0x64>)
 802392c:	6323      	str	r3, [r4, #48]	@ 0x30
 802392e:	4b0d      	ldr	r3, [pc, #52]	@ (8023964 <std+0x68>)
 8023930:	6224      	str	r4, [r4, #32]
 8023932:	429c      	cmp	r4, r3
 8023934:	d006      	beq.n	8023944 <std+0x48>
 8023936:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802393a:	4294      	cmp	r4, r2
 802393c:	d002      	beq.n	8023944 <std+0x48>
 802393e:	33d0      	adds	r3, #208	@ 0xd0
 8023940:	429c      	cmp	r4, r3
 8023942:	d105      	bne.n	8023950 <std+0x54>
 8023944:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8023948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802394c:	f000 b9b6 	b.w	8023cbc <__retarget_lock_init_recursive>
 8023950:	bd10      	pop	{r4, pc}
 8023952:	bf00      	nop
 8023954:	08023a81 	.word	0x08023a81
 8023958:	08023aa3 	.word	0x08023aa3
 802395c:	08023adb 	.word	0x08023adb
 8023960:	08023aff 	.word	0x08023aff
 8023964:	2000273c 	.word	0x2000273c

08023968 <stdio_exit_handler>:
 8023968:	4a02      	ldr	r2, [pc, #8]	@ (8023974 <stdio_exit_handler+0xc>)
 802396a:	4903      	ldr	r1, [pc, #12]	@ (8023978 <stdio_exit_handler+0x10>)
 802396c:	4803      	ldr	r0, [pc, #12]	@ (802397c <stdio_exit_handler+0x14>)
 802396e:	f000 b869 	b.w	8023a44 <_fwalk_sglue>
 8023972:	bf00      	nop
 8023974:	2000002c 	.word	0x2000002c
 8023978:	08024009 	.word	0x08024009
 802397c:	2000003c 	.word	0x2000003c

08023980 <cleanup_stdio>:
 8023980:	6841      	ldr	r1, [r0, #4]
 8023982:	4b0c      	ldr	r3, [pc, #48]	@ (80239b4 <cleanup_stdio+0x34>)
 8023984:	4299      	cmp	r1, r3
 8023986:	b510      	push	{r4, lr}
 8023988:	4604      	mov	r4, r0
 802398a:	d001      	beq.n	8023990 <cleanup_stdio+0x10>
 802398c:	f000 fb3c 	bl	8024008 <_fflush_r>
 8023990:	68a1      	ldr	r1, [r4, #8]
 8023992:	4b09      	ldr	r3, [pc, #36]	@ (80239b8 <cleanup_stdio+0x38>)
 8023994:	4299      	cmp	r1, r3
 8023996:	d002      	beq.n	802399e <cleanup_stdio+0x1e>
 8023998:	4620      	mov	r0, r4
 802399a:	f000 fb35 	bl	8024008 <_fflush_r>
 802399e:	68e1      	ldr	r1, [r4, #12]
 80239a0:	4b06      	ldr	r3, [pc, #24]	@ (80239bc <cleanup_stdio+0x3c>)
 80239a2:	4299      	cmp	r1, r3
 80239a4:	d004      	beq.n	80239b0 <cleanup_stdio+0x30>
 80239a6:	4620      	mov	r0, r4
 80239a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80239ac:	f000 bb2c 	b.w	8024008 <_fflush_r>
 80239b0:	bd10      	pop	{r4, pc}
 80239b2:	bf00      	nop
 80239b4:	2000273c 	.word	0x2000273c
 80239b8:	200027a4 	.word	0x200027a4
 80239bc:	2000280c 	.word	0x2000280c

080239c0 <global_stdio_init.part.0>:
 80239c0:	b510      	push	{r4, lr}
 80239c2:	4b0b      	ldr	r3, [pc, #44]	@ (80239f0 <global_stdio_init.part.0+0x30>)
 80239c4:	4c0b      	ldr	r4, [pc, #44]	@ (80239f4 <global_stdio_init.part.0+0x34>)
 80239c6:	4a0c      	ldr	r2, [pc, #48]	@ (80239f8 <global_stdio_init.part.0+0x38>)
 80239c8:	601a      	str	r2, [r3, #0]
 80239ca:	4620      	mov	r0, r4
 80239cc:	2200      	movs	r2, #0
 80239ce:	2104      	movs	r1, #4
 80239d0:	f7ff ff94 	bl	80238fc <std>
 80239d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80239d8:	2201      	movs	r2, #1
 80239da:	2109      	movs	r1, #9
 80239dc:	f7ff ff8e 	bl	80238fc <std>
 80239e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80239e4:	2202      	movs	r2, #2
 80239e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80239ea:	2112      	movs	r1, #18
 80239ec:	f7ff bf86 	b.w	80238fc <std>
 80239f0:	20002874 	.word	0x20002874
 80239f4:	2000273c 	.word	0x2000273c
 80239f8:	08023969 	.word	0x08023969

080239fc <__sfp_lock_acquire>:
 80239fc:	4801      	ldr	r0, [pc, #4]	@ (8023a04 <__sfp_lock_acquire+0x8>)
 80239fe:	f000 b95e 	b.w	8023cbe <__retarget_lock_acquire_recursive>
 8023a02:	bf00      	nop
 8023a04:	2000287d 	.word	0x2000287d

08023a08 <__sfp_lock_release>:
 8023a08:	4801      	ldr	r0, [pc, #4]	@ (8023a10 <__sfp_lock_release+0x8>)
 8023a0a:	f000 b959 	b.w	8023cc0 <__retarget_lock_release_recursive>
 8023a0e:	bf00      	nop
 8023a10:	2000287d 	.word	0x2000287d

08023a14 <__sinit>:
 8023a14:	b510      	push	{r4, lr}
 8023a16:	4604      	mov	r4, r0
 8023a18:	f7ff fff0 	bl	80239fc <__sfp_lock_acquire>
 8023a1c:	6a23      	ldr	r3, [r4, #32]
 8023a1e:	b11b      	cbz	r3, 8023a28 <__sinit+0x14>
 8023a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023a24:	f7ff bff0 	b.w	8023a08 <__sfp_lock_release>
 8023a28:	4b04      	ldr	r3, [pc, #16]	@ (8023a3c <__sinit+0x28>)
 8023a2a:	6223      	str	r3, [r4, #32]
 8023a2c:	4b04      	ldr	r3, [pc, #16]	@ (8023a40 <__sinit+0x2c>)
 8023a2e:	681b      	ldr	r3, [r3, #0]
 8023a30:	2b00      	cmp	r3, #0
 8023a32:	d1f5      	bne.n	8023a20 <__sinit+0xc>
 8023a34:	f7ff ffc4 	bl	80239c0 <global_stdio_init.part.0>
 8023a38:	e7f2      	b.n	8023a20 <__sinit+0xc>
 8023a3a:	bf00      	nop
 8023a3c:	08023981 	.word	0x08023981
 8023a40:	20002874 	.word	0x20002874

08023a44 <_fwalk_sglue>:
 8023a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023a48:	4607      	mov	r7, r0
 8023a4a:	4688      	mov	r8, r1
 8023a4c:	4614      	mov	r4, r2
 8023a4e:	2600      	movs	r6, #0
 8023a50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023a54:	f1b9 0901 	subs.w	r9, r9, #1
 8023a58:	d505      	bpl.n	8023a66 <_fwalk_sglue+0x22>
 8023a5a:	6824      	ldr	r4, [r4, #0]
 8023a5c:	2c00      	cmp	r4, #0
 8023a5e:	d1f7      	bne.n	8023a50 <_fwalk_sglue+0xc>
 8023a60:	4630      	mov	r0, r6
 8023a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023a66:	89ab      	ldrh	r3, [r5, #12]
 8023a68:	2b01      	cmp	r3, #1
 8023a6a:	d907      	bls.n	8023a7c <_fwalk_sglue+0x38>
 8023a6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023a70:	3301      	adds	r3, #1
 8023a72:	d003      	beq.n	8023a7c <_fwalk_sglue+0x38>
 8023a74:	4629      	mov	r1, r5
 8023a76:	4638      	mov	r0, r7
 8023a78:	47c0      	blx	r8
 8023a7a:	4306      	orrs	r6, r0
 8023a7c:	3568      	adds	r5, #104	@ 0x68
 8023a7e:	e7e9      	b.n	8023a54 <_fwalk_sglue+0x10>

08023a80 <__sread>:
 8023a80:	b510      	push	{r4, lr}
 8023a82:	460c      	mov	r4, r1
 8023a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023a88:	f000 f8ca 	bl	8023c20 <_read_r>
 8023a8c:	2800      	cmp	r0, #0
 8023a8e:	bfab      	itete	ge
 8023a90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8023a92:	89a3      	ldrhlt	r3, [r4, #12]
 8023a94:	181b      	addge	r3, r3, r0
 8023a96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8023a9a:	bfac      	ite	ge
 8023a9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8023a9e:	81a3      	strhlt	r3, [r4, #12]
 8023aa0:	bd10      	pop	{r4, pc}

08023aa2 <__swrite>:
 8023aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023aa6:	461f      	mov	r7, r3
 8023aa8:	898b      	ldrh	r3, [r1, #12]
 8023aaa:	05db      	lsls	r3, r3, #23
 8023aac:	4605      	mov	r5, r0
 8023aae:	460c      	mov	r4, r1
 8023ab0:	4616      	mov	r6, r2
 8023ab2:	d505      	bpl.n	8023ac0 <__swrite+0x1e>
 8023ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023ab8:	2302      	movs	r3, #2
 8023aba:	2200      	movs	r2, #0
 8023abc:	f000 f89e 	bl	8023bfc <_lseek_r>
 8023ac0:	89a3      	ldrh	r3, [r4, #12]
 8023ac2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023ac6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8023aca:	81a3      	strh	r3, [r4, #12]
 8023acc:	4632      	mov	r2, r6
 8023ace:	463b      	mov	r3, r7
 8023ad0:	4628      	mov	r0, r5
 8023ad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023ad6:	f000 b8b5 	b.w	8023c44 <_write_r>

08023ada <__sseek>:
 8023ada:	b510      	push	{r4, lr}
 8023adc:	460c      	mov	r4, r1
 8023ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023ae2:	f000 f88b 	bl	8023bfc <_lseek_r>
 8023ae6:	1c43      	adds	r3, r0, #1
 8023ae8:	89a3      	ldrh	r3, [r4, #12]
 8023aea:	bf15      	itete	ne
 8023aec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8023aee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8023af2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8023af6:	81a3      	strheq	r3, [r4, #12]
 8023af8:	bf18      	it	ne
 8023afa:	81a3      	strhne	r3, [r4, #12]
 8023afc:	bd10      	pop	{r4, pc}

08023afe <__sclose>:
 8023afe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023b02:	f000 b86b 	b.w	8023bdc <_close_r>

08023b06 <memcmp>:
 8023b06:	b510      	push	{r4, lr}
 8023b08:	3901      	subs	r1, #1
 8023b0a:	4402      	add	r2, r0
 8023b0c:	4290      	cmp	r0, r2
 8023b0e:	d101      	bne.n	8023b14 <memcmp+0xe>
 8023b10:	2000      	movs	r0, #0
 8023b12:	e005      	b.n	8023b20 <memcmp+0x1a>
 8023b14:	7803      	ldrb	r3, [r0, #0]
 8023b16:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023b1a:	42a3      	cmp	r3, r4
 8023b1c:	d001      	beq.n	8023b22 <memcmp+0x1c>
 8023b1e:	1b18      	subs	r0, r3, r4
 8023b20:	bd10      	pop	{r4, pc}
 8023b22:	3001      	adds	r0, #1
 8023b24:	e7f2      	b.n	8023b0c <memcmp+0x6>

08023b26 <memmove>:
 8023b26:	4288      	cmp	r0, r1
 8023b28:	b510      	push	{r4, lr}
 8023b2a:	eb01 0402 	add.w	r4, r1, r2
 8023b2e:	d902      	bls.n	8023b36 <memmove+0x10>
 8023b30:	4284      	cmp	r4, r0
 8023b32:	4623      	mov	r3, r4
 8023b34:	d807      	bhi.n	8023b46 <memmove+0x20>
 8023b36:	1e43      	subs	r3, r0, #1
 8023b38:	42a1      	cmp	r1, r4
 8023b3a:	d008      	beq.n	8023b4e <memmove+0x28>
 8023b3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023b40:	f803 2f01 	strb.w	r2, [r3, #1]!
 8023b44:	e7f8      	b.n	8023b38 <memmove+0x12>
 8023b46:	4402      	add	r2, r0
 8023b48:	4601      	mov	r1, r0
 8023b4a:	428a      	cmp	r2, r1
 8023b4c:	d100      	bne.n	8023b50 <memmove+0x2a>
 8023b4e:	bd10      	pop	{r4, pc}
 8023b50:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8023b54:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8023b58:	e7f7      	b.n	8023b4a <memmove+0x24>
	...

08023b5c <strcasecmp>:
 8023b5c:	b530      	push	{r4, r5, lr}
 8023b5e:	4d0b      	ldr	r5, [pc, #44]	@ (8023b8c <strcasecmp+0x30>)
 8023b60:	4604      	mov	r4, r0
 8023b62:	f814 3b01 	ldrb.w	r3, [r4], #1
 8023b66:	5cea      	ldrb	r2, [r5, r3]
 8023b68:	f002 0203 	and.w	r2, r2, #3
 8023b6c:	2a01      	cmp	r2, #1
 8023b6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023b72:	5ca8      	ldrb	r0, [r5, r2]
 8023b74:	f000 0003 	and.w	r0, r0, #3
 8023b78:	bf08      	it	eq
 8023b7a:	3320      	addeq	r3, #32
 8023b7c:	2801      	cmp	r0, #1
 8023b7e:	bf08      	it	eq
 8023b80:	3220      	addeq	r2, #32
 8023b82:	1a98      	subs	r0, r3, r2
 8023b84:	d101      	bne.n	8023b8a <strcasecmp+0x2e>
 8023b86:	2a00      	cmp	r2, #0
 8023b88:	d1eb      	bne.n	8023b62 <strcasecmp+0x6>
 8023b8a:	bd30      	pop	{r4, r5, pc}
 8023b8c:	080280fc 	.word	0x080280fc

08023b90 <strncmp>:
 8023b90:	b510      	push	{r4, lr}
 8023b92:	b16a      	cbz	r2, 8023bb0 <strncmp+0x20>
 8023b94:	3901      	subs	r1, #1
 8023b96:	1884      	adds	r4, r0, r2
 8023b98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023b9c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8023ba0:	429a      	cmp	r2, r3
 8023ba2:	d103      	bne.n	8023bac <strncmp+0x1c>
 8023ba4:	42a0      	cmp	r0, r4
 8023ba6:	d001      	beq.n	8023bac <strncmp+0x1c>
 8023ba8:	2a00      	cmp	r2, #0
 8023baa:	d1f5      	bne.n	8023b98 <strncmp+0x8>
 8023bac:	1ad0      	subs	r0, r2, r3
 8023bae:	bd10      	pop	{r4, pc}
 8023bb0:	4610      	mov	r0, r2
 8023bb2:	e7fc      	b.n	8023bae <strncmp+0x1e>

08023bb4 <strncpy>:
 8023bb4:	b510      	push	{r4, lr}
 8023bb6:	3901      	subs	r1, #1
 8023bb8:	4603      	mov	r3, r0
 8023bba:	b132      	cbz	r2, 8023bca <strncpy+0x16>
 8023bbc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023bc0:	f803 4b01 	strb.w	r4, [r3], #1
 8023bc4:	3a01      	subs	r2, #1
 8023bc6:	2c00      	cmp	r4, #0
 8023bc8:	d1f7      	bne.n	8023bba <strncpy+0x6>
 8023bca:	441a      	add	r2, r3
 8023bcc:	2100      	movs	r1, #0
 8023bce:	4293      	cmp	r3, r2
 8023bd0:	d100      	bne.n	8023bd4 <strncpy+0x20>
 8023bd2:	bd10      	pop	{r4, pc}
 8023bd4:	f803 1b01 	strb.w	r1, [r3], #1
 8023bd8:	e7f9      	b.n	8023bce <strncpy+0x1a>
	...

08023bdc <_close_r>:
 8023bdc:	b538      	push	{r3, r4, r5, lr}
 8023bde:	4d06      	ldr	r5, [pc, #24]	@ (8023bf8 <_close_r+0x1c>)
 8023be0:	2300      	movs	r3, #0
 8023be2:	4604      	mov	r4, r0
 8023be4:	4608      	mov	r0, r1
 8023be6:	602b      	str	r3, [r5, #0]
 8023be8:	f7df faee 	bl	80031c8 <_close>
 8023bec:	1c43      	adds	r3, r0, #1
 8023bee:	d102      	bne.n	8023bf6 <_close_r+0x1a>
 8023bf0:	682b      	ldr	r3, [r5, #0]
 8023bf2:	b103      	cbz	r3, 8023bf6 <_close_r+0x1a>
 8023bf4:	6023      	str	r3, [r4, #0]
 8023bf6:	bd38      	pop	{r3, r4, r5, pc}
 8023bf8:	20002878 	.word	0x20002878

08023bfc <_lseek_r>:
 8023bfc:	b538      	push	{r3, r4, r5, lr}
 8023bfe:	4d07      	ldr	r5, [pc, #28]	@ (8023c1c <_lseek_r+0x20>)
 8023c00:	4604      	mov	r4, r0
 8023c02:	4608      	mov	r0, r1
 8023c04:	4611      	mov	r1, r2
 8023c06:	2200      	movs	r2, #0
 8023c08:	602a      	str	r2, [r5, #0]
 8023c0a:	461a      	mov	r2, r3
 8023c0c:	f7df fb03 	bl	8003216 <_lseek>
 8023c10:	1c43      	adds	r3, r0, #1
 8023c12:	d102      	bne.n	8023c1a <_lseek_r+0x1e>
 8023c14:	682b      	ldr	r3, [r5, #0]
 8023c16:	b103      	cbz	r3, 8023c1a <_lseek_r+0x1e>
 8023c18:	6023      	str	r3, [r4, #0]
 8023c1a:	bd38      	pop	{r3, r4, r5, pc}
 8023c1c:	20002878 	.word	0x20002878

08023c20 <_read_r>:
 8023c20:	b538      	push	{r3, r4, r5, lr}
 8023c22:	4d07      	ldr	r5, [pc, #28]	@ (8023c40 <_read_r+0x20>)
 8023c24:	4604      	mov	r4, r0
 8023c26:	4608      	mov	r0, r1
 8023c28:	4611      	mov	r1, r2
 8023c2a:	2200      	movs	r2, #0
 8023c2c:	602a      	str	r2, [r5, #0]
 8023c2e:	461a      	mov	r2, r3
 8023c30:	f7df fa91 	bl	8003156 <_read>
 8023c34:	1c43      	adds	r3, r0, #1
 8023c36:	d102      	bne.n	8023c3e <_read_r+0x1e>
 8023c38:	682b      	ldr	r3, [r5, #0]
 8023c3a:	b103      	cbz	r3, 8023c3e <_read_r+0x1e>
 8023c3c:	6023      	str	r3, [r4, #0]
 8023c3e:	bd38      	pop	{r3, r4, r5, pc}
 8023c40:	20002878 	.word	0x20002878

08023c44 <_write_r>:
 8023c44:	b538      	push	{r3, r4, r5, lr}
 8023c46:	4d07      	ldr	r5, [pc, #28]	@ (8023c64 <_write_r+0x20>)
 8023c48:	4604      	mov	r4, r0
 8023c4a:	4608      	mov	r0, r1
 8023c4c:	4611      	mov	r1, r2
 8023c4e:	2200      	movs	r2, #0
 8023c50:	602a      	str	r2, [r5, #0]
 8023c52:	461a      	mov	r2, r3
 8023c54:	f7df fa9c 	bl	8003190 <_write>
 8023c58:	1c43      	adds	r3, r0, #1
 8023c5a:	d102      	bne.n	8023c62 <_write_r+0x1e>
 8023c5c:	682b      	ldr	r3, [r5, #0]
 8023c5e:	b103      	cbz	r3, 8023c62 <_write_r+0x1e>
 8023c60:	6023      	str	r3, [r4, #0]
 8023c62:	bd38      	pop	{r3, r4, r5, pc}
 8023c64:	20002878 	.word	0x20002878

08023c68 <__errno>:
 8023c68:	4b01      	ldr	r3, [pc, #4]	@ (8023c70 <__errno+0x8>)
 8023c6a:	6818      	ldr	r0, [r3, #0]
 8023c6c:	4770      	bx	lr
 8023c6e:	bf00      	nop
 8023c70:	20000038 	.word	0x20000038

08023c74 <__libc_init_array>:
 8023c74:	b570      	push	{r4, r5, r6, lr}
 8023c76:	4d0d      	ldr	r5, [pc, #52]	@ (8023cac <__libc_init_array+0x38>)
 8023c78:	4c0d      	ldr	r4, [pc, #52]	@ (8023cb0 <__libc_init_array+0x3c>)
 8023c7a:	1b64      	subs	r4, r4, r5
 8023c7c:	10a4      	asrs	r4, r4, #2
 8023c7e:	2600      	movs	r6, #0
 8023c80:	42a6      	cmp	r6, r4
 8023c82:	d109      	bne.n	8023c98 <__libc_init_array+0x24>
 8023c84:	4d0b      	ldr	r5, [pc, #44]	@ (8023cb4 <__libc_init_array+0x40>)
 8023c86:	4c0c      	ldr	r4, [pc, #48]	@ (8023cb8 <__libc_init_array+0x44>)
 8023c88:	f000 fe3a 	bl	8024900 <_init>
 8023c8c:	1b64      	subs	r4, r4, r5
 8023c8e:	10a4      	asrs	r4, r4, #2
 8023c90:	2600      	movs	r6, #0
 8023c92:	42a6      	cmp	r6, r4
 8023c94:	d105      	bne.n	8023ca2 <__libc_init_array+0x2e>
 8023c96:	bd70      	pop	{r4, r5, r6, pc}
 8023c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8023c9c:	4798      	blx	r3
 8023c9e:	3601      	adds	r6, #1
 8023ca0:	e7ee      	b.n	8023c80 <__libc_init_array+0xc>
 8023ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8023ca6:	4798      	blx	r3
 8023ca8:	3601      	adds	r6, #1
 8023caa:	e7f2      	b.n	8023c92 <__libc_init_array+0x1e>
 8023cac:	08028238 	.word	0x08028238
 8023cb0:	08028238 	.word	0x08028238
 8023cb4:	08028238 	.word	0x08028238
 8023cb8:	0802823c 	.word	0x0802823c

08023cbc <__retarget_lock_init_recursive>:
 8023cbc:	4770      	bx	lr

08023cbe <__retarget_lock_acquire_recursive>:
 8023cbe:	4770      	bx	lr

08023cc0 <__retarget_lock_release_recursive>:
 8023cc0:	4770      	bx	lr
	...

08023cc4 <__assert_func>:
 8023cc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023cc6:	4614      	mov	r4, r2
 8023cc8:	461a      	mov	r2, r3
 8023cca:	4b09      	ldr	r3, [pc, #36]	@ (8023cf0 <__assert_func+0x2c>)
 8023ccc:	681b      	ldr	r3, [r3, #0]
 8023cce:	4605      	mov	r5, r0
 8023cd0:	68d8      	ldr	r0, [r3, #12]
 8023cd2:	b954      	cbnz	r4, 8023cea <__assert_func+0x26>
 8023cd4:	4b07      	ldr	r3, [pc, #28]	@ (8023cf4 <__assert_func+0x30>)
 8023cd6:	461c      	mov	r4, r3
 8023cd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8023cdc:	9100      	str	r1, [sp, #0]
 8023cde:	462b      	mov	r3, r5
 8023ce0:	4905      	ldr	r1, [pc, #20]	@ (8023cf8 <__assert_func+0x34>)
 8023ce2:	f000 f9b9 	bl	8024058 <fiprintf>
 8023ce6:	f000 f9d9 	bl	802409c <abort>
 8023cea:	4b04      	ldr	r3, [pc, #16]	@ (8023cfc <__assert_func+0x38>)
 8023cec:	e7f4      	b.n	8023cd8 <__assert_func+0x14>
 8023cee:	bf00      	nop
 8023cf0:	20000038 	.word	0x20000038
 8023cf4:	080280fa 	.word	0x080280fa
 8023cf8:	080280cc 	.word	0x080280cc
 8023cfc:	080280bf 	.word	0x080280bf

08023d00 <_free_r>:
 8023d00:	b538      	push	{r3, r4, r5, lr}
 8023d02:	4605      	mov	r5, r0
 8023d04:	2900      	cmp	r1, #0
 8023d06:	d041      	beq.n	8023d8c <_free_r+0x8c>
 8023d08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023d0c:	1f0c      	subs	r4, r1, #4
 8023d0e:	2b00      	cmp	r3, #0
 8023d10:	bfb8      	it	lt
 8023d12:	18e4      	addlt	r4, r4, r3
 8023d14:	f000 f8e8 	bl	8023ee8 <__malloc_lock>
 8023d18:	4a1d      	ldr	r2, [pc, #116]	@ (8023d90 <_free_r+0x90>)
 8023d1a:	6813      	ldr	r3, [r2, #0]
 8023d1c:	b933      	cbnz	r3, 8023d2c <_free_r+0x2c>
 8023d1e:	6063      	str	r3, [r4, #4]
 8023d20:	6014      	str	r4, [r2, #0]
 8023d22:	4628      	mov	r0, r5
 8023d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023d28:	f000 b8e4 	b.w	8023ef4 <__malloc_unlock>
 8023d2c:	42a3      	cmp	r3, r4
 8023d2e:	d908      	bls.n	8023d42 <_free_r+0x42>
 8023d30:	6820      	ldr	r0, [r4, #0]
 8023d32:	1821      	adds	r1, r4, r0
 8023d34:	428b      	cmp	r3, r1
 8023d36:	bf01      	itttt	eq
 8023d38:	6819      	ldreq	r1, [r3, #0]
 8023d3a:	685b      	ldreq	r3, [r3, #4]
 8023d3c:	1809      	addeq	r1, r1, r0
 8023d3e:	6021      	streq	r1, [r4, #0]
 8023d40:	e7ed      	b.n	8023d1e <_free_r+0x1e>
 8023d42:	461a      	mov	r2, r3
 8023d44:	685b      	ldr	r3, [r3, #4]
 8023d46:	b10b      	cbz	r3, 8023d4c <_free_r+0x4c>
 8023d48:	42a3      	cmp	r3, r4
 8023d4a:	d9fa      	bls.n	8023d42 <_free_r+0x42>
 8023d4c:	6811      	ldr	r1, [r2, #0]
 8023d4e:	1850      	adds	r0, r2, r1
 8023d50:	42a0      	cmp	r0, r4
 8023d52:	d10b      	bne.n	8023d6c <_free_r+0x6c>
 8023d54:	6820      	ldr	r0, [r4, #0]
 8023d56:	4401      	add	r1, r0
 8023d58:	1850      	adds	r0, r2, r1
 8023d5a:	4283      	cmp	r3, r0
 8023d5c:	6011      	str	r1, [r2, #0]
 8023d5e:	d1e0      	bne.n	8023d22 <_free_r+0x22>
 8023d60:	6818      	ldr	r0, [r3, #0]
 8023d62:	685b      	ldr	r3, [r3, #4]
 8023d64:	6053      	str	r3, [r2, #4]
 8023d66:	4408      	add	r0, r1
 8023d68:	6010      	str	r0, [r2, #0]
 8023d6a:	e7da      	b.n	8023d22 <_free_r+0x22>
 8023d6c:	d902      	bls.n	8023d74 <_free_r+0x74>
 8023d6e:	230c      	movs	r3, #12
 8023d70:	602b      	str	r3, [r5, #0]
 8023d72:	e7d6      	b.n	8023d22 <_free_r+0x22>
 8023d74:	6820      	ldr	r0, [r4, #0]
 8023d76:	1821      	adds	r1, r4, r0
 8023d78:	428b      	cmp	r3, r1
 8023d7a:	bf04      	itt	eq
 8023d7c:	6819      	ldreq	r1, [r3, #0]
 8023d7e:	685b      	ldreq	r3, [r3, #4]
 8023d80:	6063      	str	r3, [r4, #4]
 8023d82:	bf04      	itt	eq
 8023d84:	1809      	addeq	r1, r1, r0
 8023d86:	6021      	streq	r1, [r4, #0]
 8023d88:	6054      	str	r4, [r2, #4]
 8023d8a:	e7ca      	b.n	8023d22 <_free_r+0x22>
 8023d8c:	bd38      	pop	{r3, r4, r5, pc}
 8023d8e:	bf00      	nop
 8023d90:	20002884 	.word	0x20002884

08023d94 <malloc>:
 8023d94:	4b02      	ldr	r3, [pc, #8]	@ (8023da0 <malloc+0xc>)
 8023d96:	4601      	mov	r1, r0
 8023d98:	6818      	ldr	r0, [r3, #0]
 8023d9a:	f000 b825 	b.w	8023de8 <_malloc_r>
 8023d9e:	bf00      	nop
 8023da0:	20000038 	.word	0x20000038

08023da4 <sbrk_aligned>:
 8023da4:	b570      	push	{r4, r5, r6, lr}
 8023da6:	4e0f      	ldr	r6, [pc, #60]	@ (8023de4 <sbrk_aligned+0x40>)
 8023da8:	460c      	mov	r4, r1
 8023daa:	6831      	ldr	r1, [r6, #0]
 8023dac:	4605      	mov	r5, r0
 8023dae:	b911      	cbnz	r1, 8023db6 <sbrk_aligned+0x12>
 8023db0:	f000 f964 	bl	802407c <_sbrk_r>
 8023db4:	6030      	str	r0, [r6, #0]
 8023db6:	4621      	mov	r1, r4
 8023db8:	4628      	mov	r0, r5
 8023dba:	f000 f95f 	bl	802407c <_sbrk_r>
 8023dbe:	1c43      	adds	r3, r0, #1
 8023dc0:	d103      	bne.n	8023dca <sbrk_aligned+0x26>
 8023dc2:	f04f 34ff 	mov.w	r4, #4294967295
 8023dc6:	4620      	mov	r0, r4
 8023dc8:	bd70      	pop	{r4, r5, r6, pc}
 8023dca:	1cc4      	adds	r4, r0, #3
 8023dcc:	f024 0403 	bic.w	r4, r4, #3
 8023dd0:	42a0      	cmp	r0, r4
 8023dd2:	d0f8      	beq.n	8023dc6 <sbrk_aligned+0x22>
 8023dd4:	1a21      	subs	r1, r4, r0
 8023dd6:	4628      	mov	r0, r5
 8023dd8:	f000 f950 	bl	802407c <_sbrk_r>
 8023ddc:	3001      	adds	r0, #1
 8023dde:	d1f2      	bne.n	8023dc6 <sbrk_aligned+0x22>
 8023de0:	e7ef      	b.n	8023dc2 <sbrk_aligned+0x1e>
 8023de2:	bf00      	nop
 8023de4:	20002880 	.word	0x20002880

08023de8 <_malloc_r>:
 8023de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023dec:	1ccd      	adds	r5, r1, #3
 8023dee:	f025 0503 	bic.w	r5, r5, #3
 8023df2:	3508      	adds	r5, #8
 8023df4:	2d0c      	cmp	r5, #12
 8023df6:	bf38      	it	cc
 8023df8:	250c      	movcc	r5, #12
 8023dfa:	2d00      	cmp	r5, #0
 8023dfc:	4606      	mov	r6, r0
 8023dfe:	db01      	blt.n	8023e04 <_malloc_r+0x1c>
 8023e00:	42a9      	cmp	r1, r5
 8023e02:	d904      	bls.n	8023e0e <_malloc_r+0x26>
 8023e04:	230c      	movs	r3, #12
 8023e06:	6033      	str	r3, [r6, #0]
 8023e08:	2000      	movs	r0, #0
 8023e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023e0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8023ee4 <_malloc_r+0xfc>
 8023e12:	f000 f869 	bl	8023ee8 <__malloc_lock>
 8023e16:	f8d8 3000 	ldr.w	r3, [r8]
 8023e1a:	461c      	mov	r4, r3
 8023e1c:	bb44      	cbnz	r4, 8023e70 <_malloc_r+0x88>
 8023e1e:	4629      	mov	r1, r5
 8023e20:	4630      	mov	r0, r6
 8023e22:	f7ff ffbf 	bl	8023da4 <sbrk_aligned>
 8023e26:	1c43      	adds	r3, r0, #1
 8023e28:	4604      	mov	r4, r0
 8023e2a:	d158      	bne.n	8023ede <_malloc_r+0xf6>
 8023e2c:	f8d8 4000 	ldr.w	r4, [r8]
 8023e30:	4627      	mov	r7, r4
 8023e32:	2f00      	cmp	r7, #0
 8023e34:	d143      	bne.n	8023ebe <_malloc_r+0xd6>
 8023e36:	2c00      	cmp	r4, #0
 8023e38:	d04b      	beq.n	8023ed2 <_malloc_r+0xea>
 8023e3a:	6823      	ldr	r3, [r4, #0]
 8023e3c:	4639      	mov	r1, r7
 8023e3e:	4630      	mov	r0, r6
 8023e40:	eb04 0903 	add.w	r9, r4, r3
 8023e44:	f000 f91a 	bl	802407c <_sbrk_r>
 8023e48:	4581      	cmp	r9, r0
 8023e4a:	d142      	bne.n	8023ed2 <_malloc_r+0xea>
 8023e4c:	6821      	ldr	r1, [r4, #0]
 8023e4e:	1a6d      	subs	r5, r5, r1
 8023e50:	4629      	mov	r1, r5
 8023e52:	4630      	mov	r0, r6
 8023e54:	f7ff ffa6 	bl	8023da4 <sbrk_aligned>
 8023e58:	3001      	adds	r0, #1
 8023e5a:	d03a      	beq.n	8023ed2 <_malloc_r+0xea>
 8023e5c:	6823      	ldr	r3, [r4, #0]
 8023e5e:	442b      	add	r3, r5
 8023e60:	6023      	str	r3, [r4, #0]
 8023e62:	f8d8 3000 	ldr.w	r3, [r8]
 8023e66:	685a      	ldr	r2, [r3, #4]
 8023e68:	bb62      	cbnz	r2, 8023ec4 <_malloc_r+0xdc>
 8023e6a:	f8c8 7000 	str.w	r7, [r8]
 8023e6e:	e00f      	b.n	8023e90 <_malloc_r+0xa8>
 8023e70:	6822      	ldr	r2, [r4, #0]
 8023e72:	1b52      	subs	r2, r2, r5
 8023e74:	d420      	bmi.n	8023eb8 <_malloc_r+0xd0>
 8023e76:	2a0b      	cmp	r2, #11
 8023e78:	d917      	bls.n	8023eaa <_malloc_r+0xc2>
 8023e7a:	1961      	adds	r1, r4, r5
 8023e7c:	42a3      	cmp	r3, r4
 8023e7e:	6025      	str	r5, [r4, #0]
 8023e80:	bf18      	it	ne
 8023e82:	6059      	strne	r1, [r3, #4]
 8023e84:	6863      	ldr	r3, [r4, #4]
 8023e86:	bf08      	it	eq
 8023e88:	f8c8 1000 	streq.w	r1, [r8]
 8023e8c:	5162      	str	r2, [r4, r5]
 8023e8e:	604b      	str	r3, [r1, #4]
 8023e90:	4630      	mov	r0, r6
 8023e92:	f000 f82f 	bl	8023ef4 <__malloc_unlock>
 8023e96:	f104 000b 	add.w	r0, r4, #11
 8023e9a:	1d23      	adds	r3, r4, #4
 8023e9c:	f020 0007 	bic.w	r0, r0, #7
 8023ea0:	1ac2      	subs	r2, r0, r3
 8023ea2:	bf1c      	itt	ne
 8023ea4:	1a1b      	subne	r3, r3, r0
 8023ea6:	50a3      	strne	r3, [r4, r2]
 8023ea8:	e7af      	b.n	8023e0a <_malloc_r+0x22>
 8023eaa:	6862      	ldr	r2, [r4, #4]
 8023eac:	42a3      	cmp	r3, r4
 8023eae:	bf0c      	ite	eq
 8023eb0:	f8c8 2000 	streq.w	r2, [r8]
 8023eb4:	605a      	strne	r2, [r3, #4]
 8023eb6:	e7eb      	b.n	8023e90 <_malloc_r+0xa8>
 8023eb8:	4623      	mov	r3, r4
 8023eba:	6864      	ldr	r4, [r4, #4]
 8023ebc:	e7ae      	b.n	8023e1c <_malloc_r+0x34>
 8023ebe:	463c      	mov	r4, r7
 8023ec0:	687f      	ldr	r7, [r7, #4]
 8023ec2:	e7b6      	b.n	8023e32 <_malloc_r+0x4a>
 8023ec4:	461a      	mov	r2, r3
 8023ec6:	685b      	ldr	r3, [r3, #4]
 8023ec8:	42a3      	cmp	r3, r4
 8023eca:	d1fb      	bne.n	8023ec4 <_malloc_r+0xdc>
 8023ecc:	2300      	movs	r3, #0
 8023ece:	6053      	str	r3, [r2, #4]
 8023ed0:	e7de      	b.n	8023e90 <_malloc_r+0xa8>
 8023ed2:	230c      	movs	r3, #12
 8023ed4:	6033      	str	r3, [r6, #0]
 8023ed6:	4630      	mov	r0, r6
 8023ed8:	f000 f80c 	bl	8023ef4 <__malloc_unlock>
 8023edc:	e794      	b.n	8023e08 <_malloc_r+0x20>
 8023ede:	6005      	str	r5, [r0, #0]
 8023ee0:	e7d6      	b.n	8023e90 <_malloc_r+0xa8>
 8023ee2:	bf00      	nop
 8023ee4:	20002884 	.word	0x20002884

08023ee8 <__malloc_lock>:
 8023ee8:	4801      	ldr	r0, [pc, #4]	@ (8023ef0 <__malloc_lock+0x8>)
 8023eea:	f7ff bee8 	b.w	8023cbe <__retarget_lock_acquire_recursive>
 8023eee:	bf00      	nop
 8023ef0:	2000287c 	.word	0x2000287c

08023ef4 <__malloc_unlock>:
 8023ef4:	4801      	ldr	r0, [pc, #4]	@ (8023efc <__malloc_unlock+0x8>)
 8023ef6:	f7ff bee3 	b.w	8023cc0 <__retarget_lock_release_recursive>
 8023efa:	bf00      	nop
 8023efc:	2000287c 	.word	0x2000287c

08023f00 <__sflush_r>:
 8023f00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8023f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023f08:	0716      	lsls	r6, r2, #28
 8023f0a:	4605      	mov	r5, r0
 8023f0c:	460c      	mov	r4, r1
 8023f0e:	d454      	bmi.n	8023fba <__sflush_r+0xba>
 8023f10:	684b      	ldr	r3, [r1, #4]
 8023f12:	2b00      	cmp	r3, #0
 8023f14:	dc02      	bgt.n	8023f1c <__sflush_r+0x1c>
 8023f16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8023f18:	2b00      	cmp	r3, #0
 8023f1a:	dd48      	ble.n	8023fae <__sflush_r+0xae>
 8023f1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023f1e:	2e00      	cmp	r6, #0
 8023f20:	d045      	beq.n	8023fae <__sflush_r+0xae>
 8023f22:	2300      	movs	r3, #0
 8023f24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8023f28:	682f      	ldr	r7, [r5, #0]
 8023f2a:	6a21      	ldr	r1, [r4, #32]
 8023f2c:	602b      	str	r3, [r5, #0]
 8023f2e:	d030      	beq.n	8023f92 <__sflush_r+0x92>
 8023f30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8023f32:	89a3      	ldrh	r3, [r4, #12]
 8023f34:	0759      	lsls	r1, r3, #29
 8023f36:	d505      	bpl.n	8023f44 <__sflush_r+0x44>
 8023f38:	6863      	ldr	r3, [r4, #4]
 8023f3a:	1ad2      	subs	r2, r2, r3
 8023f3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8023f3e:	b10b      	cbz	r3, 8023f44 <__sflush_r+0x44>
 8023f40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8023f42:	1ad2      	subs	r2, r2, r3
 8023f44:	2300      	movs	r3, #0
 8023f46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023f48:	6a21      	ldr	r1, [r4, #32]
 8023f4a:	4628      	mov	r0, r5
 8023f4c:	47b0      	blx	r6
 8023f4e:	1c43      	adds	r3, r0, #1
 8023f50:	89a3      	ldrh	r3, [r4, #12]
 8023f52:	d106      	bne.n	8023f62 <__sflush_r+0x62>
 8023f54:	6829      	ldr	r1, [r5, #0]
 8023f56:	291d      	cmp	r1, #29
 8023f58:	d82b      	bhi.n	8023fb2 <__sflush_r+0xb2>
 8023f5a:	4a2a      	ldr	r2, [pc, #168]	@ (8024004 <__sflush_r+0x104>)
 8023f5c:	410a      	asrs	r2, r1
 8023f5e:	07d6      	lsls	r6, r2, #31
 8023f60:	d427      	bmi.n	8023fb2 <__sflush_r+0xb2>
 8023f62:	2200      	movs	r2, #0
 8023f64:	6062      	str	r2, [r4, #4]
 8023f66:	04d9      	lsls	r1, r3, #19
 8023f68:	6922      	ldr	r2, [r4, #16]
 8023f6a:	6022      	str	r2, [r4, #0]
 8023f6c:	d504      	bpl.n	8023f78 <__sflush_r+0x78>
 8023f6e:	1c42      	adds	r2, r0, #1
 8023f70:	d101      	bne.n	8023f76 <__sflush_r+0x76>
 8023f72:	682b      	ldr	r3, [r5, #0]
 8023f74:	b903      	cbnz	r3, 8023f78 <__sflush_r+0x78>
 8023f76:	6560      	str	r0, [r4, #84]	@ 0x54
 8023f78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8023f7a:	602f      	str	r7, [r5, #0]
 8023f7c:	b1b9      	cbz	r1, 8023fae <__sflush_r+0xae>
 8023f7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8023f82:	4299      	cmp	r1, r3
 8023f84:	d002      	beq.n	8023f8c <__sflush_r+0x8c>
 8023f86:	4628      	mov	r0, r5
 8023f88:	f7ff feba 	bl	8023d00 <_free_r>
 8023f8c:	2300      	movs	r3, #0
 8023f8e:	6363      	str	r3, [r4, #52]	@ 0x34
 8023f90:	e00d      	b.n	8023fae <__sflush_r+0xae>
 8023f92:	2301      	movs	r3, #1
 8023f94:	4628      	mov	r0, r5
 8023f96:	47b0      	blx	r6
 8023f98:	4602      	mov	r2, r0
 8023f9a:	1c50      	adds	r0, r2, #1
 8023f9c:	d1c9      	bne.n	8023f32 <__sflush_r+0x32>
 8023f9e:	682b      	ldr	r3, [r5, #0]
 8023fa0:	2b00      	cmp	r3, #0
 8023fa2:	d0c6      	beq.n	8023f32 <__sflush_r+0x32>
 8023fa4:	2b1d      	cmp	r3, #29
 8023fa6:	d001      	beq.n	8023fac <__sflush_r+0xac>
 8023fa8:	2b16      	cmp	r3, #22
 8023faa:	d11e      	bne.n	8023fea <__sflush_r+0xea>
 8023fac:	602f      	str	r7, [r5, #0]
 8023fae:	2000      	movs	r0, #0
 8023fb0:	e022      	b.n	8023ff8 <__sflush_r+0xf8>
 8023fb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023fb6:	b21b      	sxth	r3, r3
 8023fb8:	e01b      	b.n	8023ff2 <__sflush_r+0xf2>
 8023fba:	690f      	ldr	r7, [r1, #16]
 8023fbc:	2f00      	cmp	r7, #0
 8023fbe:	d0f6      	beq.n	8023fae <__sflush_r+0xae>
 8023fc0:	0793      	lsls	r3, r2, #30
 8023fc2:	680e      	ldr	r6, [r1, #0]
 8023fc4:	bf08      	it	eq
 8023fc6:	694b      	ldreq	r3, [r1, #20]
 8023fc8:	600f      	str	r7, [r1, #0]
 8023fca:	bf18      	it	ne
 8023fcc:	2300      	movne	r3, #0
 8023fce:	eba6 0807 	sub.w	r8, r6, r7
 8023fd2:	608b      	str	r3, [r1, #8]
 8023fd4:	f1b8 0f00 	cmp.w	r8, #0
 8023fd8:	dde9      	ble.n	8023fae <__sflush_r+0xae>
 8023fda:	6a21      	ldr	r1, [r4, #32]
 8023fdc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8023fde:	4643      	mov	r3, r8
 8023fe0:	463a      	mov	r2, r7
 8023fe2:	4628      	mov	r0, r5
 8023fe4:	47b0      	blx	r6
 8023fe6:	2800      	cmp	r0, #0
 8023fe8:	dc08      	bgt.n	8023ffc <__sflush_r+0xfc>
 8023fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023fee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023ff2:	81a3      	strh	r3, [r4, #12]
 8023ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8023ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023ffc:	4407      	add	r7, r0
 8023ffe:	eba8 0800 	sub.w	r8, r8, r0
 8024002:	e7e7      	b.n	8023fd4 <__sflush_r+0xd4>
 8024004:	dfbffffe 	.word	0xdfbffffe

08024008 <_fflush_r>:
 8024008:	b538      	push	{r3, r4, r5, lr}
 802400a:	690b      	ldr	r3, [r1, #16]
 802400c:	4605      	mov	r5, r0
 802400e:	460c      	mov	r4, r1
 8024010:	b913      	cbnz	r3, 8024018 <_fflush_r+0x10>
 8024012:	2500      	movs	r5, #0
 8024014:	4628      	mov	r0, r5
 8024016:	bd38      	pop	{r3, r4, r5, pc}
 8024018:	b118      	cbz	r0, 8024022 <_fflush_r+0x1a>
 802401a:	6a03      	ldr	r3, [r0, #32]
 802401c:	b90b      	cbnz	r3, 8024022 <_fflush_r+0x1a>
 802401e:	f7ff fcf9 	bl	8023a14 <__sinit>
 8024022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024026:	2b00      	cmp	r3, #0
 8024028:	d0f3      	beq.n	8024012 <_fflush_r+0xa>
 802402a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802402c:	07d0      	lsls	r0, r2, #31
 802402e:	d404      	bmi.n	802403a <_fflush_r+0x32>
 8024030:	0599      	lsls	r1, r3, #22
 8024032:	d402      	bmi.n	802403a <_fflush_r+0x32>
 8024034:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024036:	f7ff fe42 	bl	8023cbe <__retarget_lock_acquire_recursive>
 802403a:	4628      	mov	r0, r5
 802403c:	4621      	mov	r1, r4
 802403e:	f7ff ff5f 	bl	8023f00 <__sflush_r>
 8024042:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8024044:	07da      	lsls	r2, r3, #31
 8024046:	4605      	mov	r5, r0
 8024048:	d4e4      	bmi.n	8024014 <_fflush_r+0xc>
 802404a:	89a3      	ldrh	r3, [r4, #12]
 802404c:	059b      	lsls	r3, r3, #22
 802404e:	d4e1      	bmi.n	8024014 <_fflush_r+0xc>
 8024050:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024052:	f7ff fe35 	bl	8023cc0 <__retarget_lock_release_recursive>
 8024056:	e7dd      	b.n	8024014 <_fflush_r+0xc>

08024058 <fiprintf>:
 8024058:	b40e      	push	{r1, r2, r3}
 802405a:	b503      	push	{r0, r1, lr}
 802405c:	4601      	mov	r1, r0
 802405e:	ab03      	add	r3, sp, #12
 8024060:	4805      	ldr	r0, [pc, #20]	@ (8024078 <fiprintf+0x20>)
 8024062:	f853 2b04 	ldr.w	r2, [r3], #4
 8024066:	6800      	ldr	r0, [r0, #0]
 8024068:	9301      	str	r3, [sp, #4]
 802406a:	f000 f847 	bl	80240fc <_vfiprintf_r>
 802406e:	b002      	add	sp, #8
 8024070:	f85d eb04 	ldr.w	lr, [sp], #4
 8024074:	b003      	add	sp, #12
 8024076:	4770      	bx	lr
 8024078:	20000038 	.word	0x20000038

0802407c <_sbrk_r>:
 802407c:	b538      	push	{r3, r4, r5, lr}
 802407e:	4d06      	ldr	r5, [pc, #24]	@ (8024098 <_sbrk_r+0x1c>)
 8024080:	2300      	movs	r3, #0
 8024082:	4604      	mov	r4, r0
 8024084:	4608      	mov	r0, r1
 8024086:	602b      	str	r3, [r5, #0]
 8024088:	f7df f8d2 	bl	8003230 <_sbrk>
 802408c:	1c43      	adds	r3, r0, #1
 802408e:	d102      	bne.n	8024096 <_sbrk_r+0x1a>
 8024090:	682b      	ldr	r3, [r5, #0]
 8024092:	b103      	cbz	r3, 8024096 <_sbrk_r+0x1a>
 8024094:	6023      	str	r3, [r4, #0]
 8024096:	bd38      	pop	{r3, r4, r5, pc}
 8024098:	20002878 	.word	0x20002878

0802409c <abort>:
 802409c:	b508      	push	{r3, lr}
 802409e:	2006      	movs	r0, #6
 80240a0:	f000 fb8e 	bl	80247c0 <raise>
 80240a4:	2001      	movs	r0, #1
 80240a6:	f7df f84b 	bl	8003140 <_exit>

080240aa <__sfputc_r>:
 80240aa:	6893      	ldr	r3, [r2, #8]
 80240ac:	3b01      	subs	r3, #1
 80240ae:	2b00      	cmp	r3, #0
 80240b0:	b410      	push	{r4}
 80240b2:	6093      	str	r3, [r2, #8]
 80240b4:	da08      	bge.n	80240c8 <__sfputc_r+0x1e>
 80240b6:	6994      	ldr	r4, [r2, #24]
 80240b8:	42a3      	cmp	r3, r4
 80240ba:	db01      	blt.n	80240c0 <__sfputc_r+0x16>
 80240bc:	290a      	cmp	r1, #10
 80240be:	d103      	bne.n	80240c8 <__sfputc_r+0x1e>
 80240c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80240c4:	f000 bac0 	b.w	8024648 <__swbuf_r>
 80240c8:	6813      	ldr	r3, [r2, #0]
 80240ca:	1c58      	adds	r0, r3, #1
 80240cc:	6010      	str	r0, [r2, #0]
 80240ce:	7019      	strb	r1, [r3, #0]
 80240d0:	4608      	mov	r0, r1
 80240d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80240d6:	4770      	bx	lr

080240d8 <__sfputs_r>:
 80240d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80240da:	4606      	mov	r6, r0
 80240dc:	460f      	mov	r7, r1
 80240de:	4614      	mov	r4, r2
 80240e0:	18d5      	adds	r5, r2, r3
 80240e2:	42ac      	cmp	r4, r5
 80240e4:	d101      	bne.n	80240ea <__sfputs_r+0x12>
 80240e6:	2000      	movs	r0, #0
 80240e8:	e007      	b.n	80240fa <__sfputs_r+0x22>
 80240ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80240ee:	463a      	mov	r2, r7
 80240f0:	4630      	mov	r0, r6
 80240f2:	f7ff ffda 	bl	80240aa <__sfputc_r>
 80240f6:	1c43      	adds	r3, r0, #1
 80240f8:	d1f3      	bne.n	80240e2 <__sfputs_r+0xa>
 80240fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080240fc <_vfiprintf_r>:
 80240fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024100:	460d      	mov	r5, r1
 8024102:	b09d      	sub	sp, #116	@ 0x74
 8024104:	4614      	mov	r4, r2
 8024106:	4698      	mov	r8, r3
 8024108:	4606      	mov	r6, r0
 802410a:	b118      	cbz	r0, 8024114 <_vfiprintf_r+0x18>
 802410c:	6a03      	ldr	r3, [r0, #32]
 802410e:	b90b      	cbnz	r3, 8024114 <_vfiprintf_r+0x18>
 8024110:	f7ff fc80 	bl	8023a14 <__sinit>
 8024114:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8024116:	07d9      	lsls	r1, r3, #31
 8024118:	d405      	bmi.n	8024126 <_vfiprintf_r+0x2a>
 802411a:	89ab      	ldrh	r3, [r5, #12]
 802411c:	059a      	lsls	r2, r3, #22
 802411e:	d402      	bmi.n	8024126 <_vfiprintf_r+0x2a>
 8024120:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8024122:	f7ff fdcc 	bl	8023cbe <__retarget_lock_acquire_recursive>
 8024126:	89ab      	ldrh	r3, [r5, #12]
 8024128:	071b      	lsls	r3, r3, #28
 802412a:	d501      	bpl.n	8024130 <_vfiprintf_r+0x34>
 802412c:	692b      	ldr	r3, [r5, #16]
 802412e:	b99b      	cbnz	r3, 8024158 <_vfiprintf_r+0x5c>
 8024130:	4629      	mov	r1, r5
 8024132:	4630      	mov	r0, r6
 8024134:	f000 fac6 	bl	80246c4 <__swsetup_r>
 8024138:	b170      	cbz	r0, 8024158 <_vfiprintf_r+0x5c>
 802413a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802413c:	07dc      	lsls	r4, r3, #31
 802413e:	d504      	bpl.n	802414a <_vfiprintf_r+0x4e>
 8024140:	f04f 30ff 	mov.w	r0, #4294967295
 8024144:	b01d      	add	sp, #116	@ 0x74
 8024146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802414a:	89ab      	ldrh	r3, [r5, #12]
 802414c:	0598      	lsls	r0, r3, #22
 802414e:	d4f7      	bmi.n	8024140 <_vfiprintf_r+0x44>
 8024150:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8024152:	f7ff fdb5 	bl	8023cc0 <__retarget_lock_release_recursive>
 8024156:	e7f3      	b.n	8024140 <_vfiprintf_r+0x44>
 8024158:	2300      	movs	r3, #0
 802415a:	9309      	str	r3, [sp, #36]	@ 0x24
 802415c:	2320      	movs	r3, #32
 802415e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8024162:	f8cd 800c 	str.w	r8, [sp, #12]
 8024166:	2330      	movs	r3, #48	@ 0x30
 8024168:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8024318 <_vfiprintf_r+0x21c>
 802416c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8024170:	f04f 0901 	mov.w	r9, #1
 8024174:	4623      	mov	r3, r4
 8024176:	469a      	mov	sl, r3
 8024178:	f813 2b01 	ldrb.w	r2, [r3], #1
 802417c:	b10a      	cbz	r2, 8024182 <_vfiprintf_r+0x86>
 802417e:	2a25      	cmp	r2, #37	@ 0x25
 8024180:	d1f9      	bne.n	8024176 <_vfiprintf_r+0x7a>
 8024182:	ebba 0b04 	subs.w	fp, sl, r4
 8024186:	d00b      	beq.n	80241a0 <_vfiprintf_r+0xa4>
 8024188:	465b      	mov	r3, fp
 802418a:	4622      	mov	r2, r4
 802418c:	4629      	mov	r1, r5
 802418e:	4630      	mov	r0, r6
 8024190:	f7ff ffa2 	bl	80240d8 <__sfputs_r>
 8024194:	3001      	adds	r0, #1
 8024196:	f000 80a7 	beq.w	80242e8 <_vfiprintf_r+0x1ec>
 802419a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802419c:	445a      	add	r2, fp
 802419e:	9209      	str	r2, [sp, #36]	@ 0x24
 80241a0:	f89a 3000 	ldrb.w	r3, [sl]
 80241a4:	2b00      	cmp	r3, #0
 80241a6:	f000 809f 	beq.w	80242e8 <_vfiprintf_r+0x1ec>
 80241aa:	2300      	movs	r3, #0
 80241ac:	f04f 32ff 	mov.w	r2, #4294967295
 80241b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80241b4:	f10a 0a01 	add.w	sl, sl, #1
 80241b8:	9304      	str	r3, [sp, #16]
 80241ba:	9307      	str	r3, [sp, #28]
 80241bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80241c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80241c2:	4654      	mov	r4, sl
 80241c4:	2205      	movs	r2, #5
 80241c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80241ca:	4853      	ldr	r0, [pc, #332]	@ (8024318 <_vfiprintf_r+0x21c>)
 80241cc:	f7dc f8a0 	bl	8000310 <memchr>
 80241d0:	9a04      	ldr	r2, [sp, #16]
 80241d2:	b9d8      	cbnz	r0, 802420c <_vfiprintf_r+0x110>
 80241d4:	06d1      	lsls	r1, r2, #27
 80241d6:	bf44      	itt	mi
 80241d8:	2320      	movmi	r3, #32
 80241da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80241de:	0713      	lsls	r3, r2, #28
 80241e0:	bf44      	itt	mi
 80241e2:	232b      	movmi	r3, #43	@ 0x2b
 80241e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80241e8:	f89a 3000 	ldrb.w	r3, [sl]
 80241ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80241ee:	d015      	beq.n	802421c <_vfiprintf_r+0x120>
 80241f0:	9a07      	ldr	r2, [sp, #28]
 80241f2:	4654      	mov	r4, sl
 80241f4:	2000      	movs	r0, #0
 80241f6:	f04f 0c0a 	mov.w	ip, #10
 80241fa:	4621      	mov	r1, r4
 80241fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024200:	3b30      	subs	r3, #48	@ 0x30
 8024202:	2b09      	cmp	r3, #9
 8024204:	d94b      	bls.n	802429e <_vfiprintf_r+0x1a2>
 8024206:	b1b0      	cbz	r0, 8024236 <_vfiprintf_r+0x13a>
 8024208:	9207      	str	r2, [sp, #28]
 802420a:	e014      	b.n	8024236 <_vfiprintf_r+0x13a>
 802420c:	eba0 0308 	sub.w	r3, r0, r8
 8024210:	fa09 f303 	lsl.w	r3, r9, r3
 8024214:	4313      	orrs	r3, r2
 8024216:	9304      	str	r3, [sp, #16]
 8024218:	46a2      	mov	sl, r4
 802421a:	e7d2      	b.n	80241c2 <_vfiprintf_r+0xc6>
 802421c:	9b03      	ldr	r3, [sp, #12]
 802421e:	1d19      	adds	r1, r3, #4
 8024220:	681b      	ldr	r3, [r3, #0]
 8024222:	9103      	str	r1, [sp, #12]
 8024224:	2b00      	cmp	r3, #0
 8024226:	bfbb      	ittet	lt
 8024228:	425b      	neglt	r3, r3
 802422a:	f042 0202 	orrlt.w	r2, r2, #2
 802422e:	9307      	strge	r3, [sp, #28]
 8024230:	9307      	strlt	r3, [sp, #28]
 8024232:	bfb8      	it	lt
 8024234:	9204      	strlt	r2, [sp, #16]
 8024236:	7823      	ldrb	r3, [r4, #0]
 8024238:	2b2e      	cmp	r3, #46	@ 0x2e
 802423a:	d10a      	bne.n	8024252 <_vfiprintf_r+0x156>
 802423c:	7863      	ldrb	r3, [r4, #1]
 802423e:	2b2a      	cmp	r3, #42	@ 0x2a
 8024240:	d132      	bne.n	80242a8 <_vfiprintf_r+0x1ac>
 8024242:	9b03      	ldr	r3, [sp, #12]
 8024244:	1d1a      	adds	r2, r3, #4
 8024246:	681b      	ldr	r3, [r3, #0]
 8024248:	9203      	str	r2, [sp, #12]
 802424a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802424e:	3402      	adds	r4, #2
 8024250:	9305      	str	r3, [sp, #20]
 8024252:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8024328 <_vfiprintf_r+0x22c>
 8024256:	7821      	ldrb	r1, [r4, #0]
 8024258:	2203      	movs	r2, #3
 802425a:	4650      	mov	r0, sl
 802425c:	f7dc f858 	bl	8000310 <memchr>
 8024260:	b138      	cbz	r0, 8024272 <_vfiprintf_r+0x176>
 8024262:	9b04      	ldr	r3, [sp, #16]
 8024264:	eba0 000a 	sub.w	r0, r0, sl
 8024268:	2240      	movs	r2, #64	@ 0x40
 802426a:	4082      	lsls	r2, r0
 802426c:	4313      	orrs	r3, r2
 802426e:	3401      	adds	r4, #1
 8024270:	9304      	str	r3, [sp, #16]
 8024272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024276:	4829      	ldr	r0, [pc, #164]	@ (802431c <_vfiprintf_r+0x220>)
 8024278:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802427c:	2206      	movs	r2, #6
 802427e:	f7dc f847 	bl	8000310 <memchr>
 8024282:	2800      	cmp	r0, #0
 8024284:	d03f      	beq.n	8024306 <_vfiprintf_r+0x20a>
 8024286:	4b26      	ldr	r3, [pc, #152]	@ (8024320 <_vfiprintf_r+0x224>)
 8024288:	bb1b      	cbnz	r3, 80242d2 <_vfiprintf_r+0x1d6>
 802428a:	9b03      	ldr	r3, [sp, #12]
 802428c:	3307      	adds	r3, #7
 802428e:	f023 0307 	bic.w	r3, r3, #7
 8024292:	3308      	adds	r3, #8
 8024294:	9303      	str	r3, [sp, #12]
 8024296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024298:	443b      	add	r3, r7
 802429a:	9309      	str	r3, [sp, #36]	@ 0x24
 802429c:	e76a      	b.n	8024174 <_vfiprintf_r+0x78>
 802429e:	fb0c 3202 	mla	r2, ip, r2, r3
 80242a2:	460c      	mov	r4, r1
 80242a4:	2001      	movs	r0, #1
 80242a6:	e7a8      	b.n	80241fa <_vfiprintf_r+0xfe>
 80242a8:	2300      	movs	r3, #0
 80242aa:	3401      	adds	r4, #1
 80242ac:	9305      	str	r3, [sp, #20]
 80242ae:	4619      	mov	r1, r3
 80242b0:	f04f 0c0a 	mov.w	ip, #10
 80242b4:	4620      	mov	r0, r4
 80242b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80242ba:	3a30      	subs	r2, #48	@ 0x30
 80242bc:	2a09      	cmp	r2, #9
 80242be:	d903      	bls.n	80242c8 <_vfiprintf_r+0x1cc>
 80242c0:	2b00      	cmp	r3, #0
 80242c2:	d0c6      	beq.n	8024252 <_vfiprintf_r+0x156>
 80242c4:	9105      	str	r1, [sp, #20]
 80242c6:	e7c4      	b.n	8024252 <_vfiprintf_r+0x156>
 80242c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80242cc:	4604      	mov	r4, r0
 80242ce:	2301      	movs	r3, #1
 80242d0:	e7f0      	b.n	80242b4 <_vfiprintf_r+0x1b8>
 80242d2:	ab03      	add	r3, sp, #12
 80242d4:	9300      	str	r3, [sp, #0]
 80242d6:	462a      	mov	r2, r5
 80242d8:	4b12      	ldr	r3, [pc, #72]	@ (8024324 <_vfiprintf_r+0x228>)
 80242da:	a904      	add	r1, sp, #16
 80242dc:	4630      	mov	r0, r6
 80242de:	f3af 8000 	nop.w
 80242e2:	4607      	mov	r7, r0
 80242e4:	1c78      	adds	r0, r7, #1
 80242e6:	d1d6      	bne.n	8024296 <_vfiprintf_r+0x19a>
 80242e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80242ea:	07d9      	lsls	r1, r3, #31
 80242ec:	d405      	bmi.n	80242fa <_vfiprintf_r+0x1fe>
 80242ee:	89ab      	ldrh	r3, [r5, #12]
 80242f0:	059a      	lsls	r2, r3, #22
 80242f2:	d402      	bmi.n	80242fa <_vfiprintf_r+0x1fe>
 80242f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80242f6:	f7ff fce3 	bl	8023cc0 <__retarget_lock_release_recursive>
 80242fa:	89ab      	ldrh	r3, [r5, #12]
 80242fc:	065b      	lsls	r3, r3, #25
 80242fe:	f53f af1f 	bmi.w	8024140 <_vfiprintf_r+0x44>
 8024302:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024304:	e71e      	b.n	8024144 <_vfiprintf_r+0x48>
 8024306:	ab03      	add	r3, sp, #12
 8024308:	9300      	str	r3, [sp, #0]
 802430a:	462a      	mov	r2, r5
 802430c:	4b05      	ldr	r3, [pc, #20]	@ (8024324 <_vfiprintf_r+0x228>)
 802430e:	a904      	add	r1, sp, #16
 8024310:	4630      	mov	r0, r6
 8024312:	f000 f879 	bl	8024408 <_printf_i>
 8024316:	e7e4      	b.n	80242e2 <_vfiprintf_r+0x1e6>
 8024318:	080281fc 	.word	0x080281fc
 802431c:	08028206 	.word	0x08028206
 8024320:	00000000 	.word	0x00000000
 8024324:	080240d9 	.word	0x080240d9
 8024328:	08028202 	.word	0x08028202

0802432c <_printf_common>:
 802432c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024330:	4616      	mov	r6, r2
 8024332:	4698      	mov	r8, r3
 8024334:	688a      	ldr	r2, [r1, #8]
 8024336:	690b      	ldr	r3, [r1, #16]
 8024338:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802433c:	4293      	cmp	r3, r2
 802433e:	bfb8      	it	lt
 8024340:	4613      	movlt	r3, r2
 8024342:	6033      	str	r3, [r6, #0]
 8024344:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8024348:	4607      	mov	r7, r0
 802434a:	460c      	mov	r4, r1
 802434c:	b10a      	cbz	r2, 8024352 <_printf_common+0x26>
 802434e:	3301      	adds	r3, #1
 8024350:	6033      	str	r3, [r6, #0]
 8024352:	6823      	ldr	r3, [r4, #0]
 8024354:	0699      	lsls	r1, r3, #26
 8024356:	bf42      	ittt	mi
 8024358:	6833      	ldrmi	r3, [r6, #0]
 802435a:	3302      	addmi	r3, #2
 802435c:	6033      	strmi	r3, [r6, #0]
 802435e:	6825      	ldr	r5, [r4, #0]
 8024360:	f015 0506 	ands.w	r5, r5, #6
 8024364:	d106      	bne.n	8024374 <_printf_common+0x48>
 8024366:	f104 0a19 	add.w	sl, r4, #25
 802436a:	68e3      	ldr	r3, [r4, #12]
 802436c:	6832      	ldr	r2, [r6, #0]
 802436e:	1a9b      	subs	r3, r3, r2
 8024370:	42ab      	cmp	r3, r5
 8024372:	dc26      	bgt.n	80243c2 <_printf_common+0x96>
 8024374:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8024378:	6822      	ldr	r2, [r4, #0]
 802437a:	3b00      	subs	r3, #0
 802437c:	bf18      	it	ne
 802437e:	2301      	movne	r3, #1
 8024380:	0692      	lsls	r2, r2, #26
 8024382:	d42b      	bmi.n	80243dc <_printf_common+0xb0>
 8024384:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8024388:	4641      	mov	r1, r8
 802438a:	4638      	mov	r0, r7
 802438c:	47c8      	blx	r9
 802438e:	3001      	adds	r0, #1
 8024390:	d01e      	beq.n	80243d0 <_printf_common+0xa4>
 8024392:	6823      	ldr	r3, [r4, #0]
 8024394:	6922      	ldr	r2, [r4, #16]
 8024396:	f003 0306 	and.w	r3, r3, #6
 802439a:	2b04      	cmp	r3, #4
 802439c:	bf02      	ittt	eq
 802439e:	68e5      	ldreq	r5, [r4, #12]
 80243a0:	6833      	ldreq	r3, [r6, #0]
 80243a2:	1aed      	subeq	r5, r5, r3
 80243a4:	68a3      	ldr	r3, [r4, #8]
 80243a6:	bf0c      	ite	eq
 80243a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80243ac:	2500      	movne	r5, #0
 80243ae:	4293      	cmp	r3, r2
 80243b0:	bfc4      	itt	gt
 80243b2:	1a9b      	subgt	r3, r3, r2
 80243b4:	18ed      	addgt	r5, r5, r3
 80243b6:	2600      	movs	r6, #0
 80243b8:	341a      	adds	r4, #26
 80243ba:	42b5      	cmp	r5, r6
 80243bc:	d11a      	bne.n	80243f4 <_printf_common+0xc8>
 80243be:	2000      	movs	r0, #0
 80243c0:	e008      	b.n	80243d4 <_printf_common+0xa8>
 80243c2:	2301      	movs	r3, #1
 80243c4:	4652      	mov	r2, sl
 80243c6:	4641      	mov	r1, r8
 80243c8:	4638      	mov	r0, r7
 80243ca:	47c8      	blx	r9
 80243cc:	3001      	adds	r0, #1
 80243ce:	d103      	bne.n	80243d8 <_printf_common+0xac>
 80243d0:	f04f 30ff 	mov.w	r0, #4294967295
 80243d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80243d8:	3501      	adds	r5, #1
 80243da:	e7c6      	b.n	802436a <_printf_common+0x3e>
 80243dc:	18e1      	adds	r1, r4, r3
 80243de:	1c5a      	adds	r2, r3, #1
 80243e0:	2030      	movs	r0, #48	@ 0x30
 80243e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80243e6:	4422      	add	r2, r4
 80243e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80243ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80243f0:	3302      	adds	r3, #2
 80243f2:	e7c7      	b.n	8024384 <_printf_common+0x58>
 80243f4:	2301      	movs	r3, #1
 80243f6:	4622      	mov	r2, r4
 80243f8:	4641      	mov	r1, r8
 80243fa:	4638      	mov	r0, r7
 80243fc:	47c8      	blx	r9
 80243fe:	3001      	adds	r0, #1
 8024400:	d0e6      	beq.n	80243d0 <_printf_common+0xa4>
 8024402:	3601      	adds	r6, #1
 8024404:	e7d9      	b.n	80243ba <_printf_common+0x8e>
	...

08024408 <_printf_i>:
 8024408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802440c:	7e0f      	ldrb	r7, [r1, #24]
 802440e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8024410:	2f78      	cmp	r7, #120	@ 0x78
 8024412:	4691      	mov	r9, r2
 8024414:	4680      	mov	r8, r0
 8024416:	460c      	mov	r4, r1
 8024418:	469a      	mov	sl, r3
 802441a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802441e:	d807      	bhi.n	8024430 <_printf_i+0x28>
 8024420:	2f62      	cmp	r7, #98	@ 0x62
 8024422:	d80a      	bhi.n	802443a <_printf_i+0x32>
 8024424:	2f00      	cmp	r7, #0
 8024426:	f000 80d2 	beq.w	80245ce <_printf_i+0x1c6>
 802442a:	2f58      	cmp	r7, #88	@ 0x58
 802442c:	f000 80b9 	beq.w	80245a2 <_printf_i+0x19a>
 8024430:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8024434:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8024438:	e03a      	b.n	80244b0 <_printf_i+0xa8>
 802443a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802443e:	2b15      	cmp	r3, #21
 8024440:	d8f6      	bhi.n	8024430 <_printf_i+0x28>
 8024442:	a101      	add	r1, pc, #4	@ (adr r1, 8024448 <_printf_i+0x40>)
 8024444:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8024448:	080244a1 	.word	0x080244a1
 802444c:	080244b5 	.word	0x080244b5
 8024450:	08024431 	.word	0x08024431
 8024454:	08024431 	.word	0x08024431
 8024458:	08024431 	.word	0x08024431
 802445c:	08024431 	.word	0x08024431
 8024460:	080244b5 	.word	0x080244b5
 8024464:	08024431 	.word	0x08024431
 8024468:	08024431 	.word	0x08024431
 802446c:	08024431 	.word	0x08024431
 8024470:	08024431 	.word	0x08024431
 8024474:	080245b5 	.word	0x080245b5
 8024478:	080244df 	.word	0x080244df
 802447c:	0802456f 	.word	0x0802456f
 8024480:	08024431 	.word	0x08024431
 8024484:	08024431 	.word	0x08024431
 8024488:	080245d7 	.word	0x080245d7
 802448c:	08024431 	.word	0x08024431
 8024490:	080244df 	.word	0x080244df
 8024494:	08024431 	.word	0x08024431
 8024498:	08024431 	.word	0x08024431
 802449c:	08024577 	.word	0x08024577
 80244a0:	6833      	ldr	r3, [r6, #0]
 80244a2:	1d1a      	adds	r2, r3, #4
 80244a4:	681b      	ldr	r3, [r3, #0]
 80244a6:	6032      	str	r2, [r6, #0]
 80244a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80244ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80244b0:	2301      	movs	r3, #1
 80244b2:	e09d      	b.n	80245f0 <_printf_i+0x1e8>
 80244b4:	6833      	ldr	r3, [r6, #0]
 80244b6:	6820      	ldr	r0, [r4, #0]
 80244b8:	1d19      	adds	r1, r3, #4
 80244ba:	6031      	str	r1, [r6, #0]
 80244bc:	0606      	lsls	r6, r0, #24
 80244be:	d501      	bpl.n	80244c4 <_printf_i+0xbc>
 80244c0:	681d      	ldr	r5, [r3, #0]
 80244c2:	e003      	b.n	80244cc <_printf_i+0xc4>
 80244c4:	0645      	lsls	r5, r0, #25
 80244c6:	d5fb      	bpl.n	80244c0 <_printf_i+0xb8>
 80244c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80244cc:	2d00      	cmp	r5, #0
 80244ce:	da03      	bge.n	80244d8 <_printf_i+0xd0>
 80244d0:	232d      	movs	r3, #45	@ 0x2d
 80244d2:	426d      	negs	r5, r5
 80244d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80244d8:	4859      	ldr	r0, [pc, #356]	@ (8024640 <_printf_i+0x238>)
 80244da:	230a      	movs	r3, #10
 80244dc:	e011      	b.n	8024502 <_printf_i+0xfa>
 80244de:	6821      	ldr	r1, [r4, #0]
 80244e0:	6833      	ldr	r3, [r6, #0]
 80244e2:	0608      	lsls	r0, r1, #24
 80244e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80244e8:	d402      	bmi.n	80244f0 <_printf_i+0xe8>
 80244ea:	0649      	lsls	r1, r1, #25
 80244ec:	bf48      	it	mi
 80244ee:	b2ad      	uxthmi	r5, r5
 80244f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80244f2:	4853      	ldr	r0, [pc, #332]	@ (8024640 <_printf_i+0x238>)
 80244f4:	6033      	str	r3, [r6, #0]
 80244f6:	bf14      	ite	ne
 80244f8:	230a      	movne	r3, #10
 80244fa:	2308      	moveq	r3, #8
 80244fc:	2100      	movs	r1, #0
 80244fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8024502:	6866      	ldr	r6, [r4, #4]
 8024504:	60a6      	str	r6, [r4, #8]
 8024506:	2e00      	cmp	r6, #0
 8024508:	bfa2      	ittt	ge
 802450a:	6821      	ldrge	r1, [r4, #0]
 802450c:	f021 0104 	bicge.w	r1, r1, #4
 8024510:	6021      	strge	r1, [r4, #0]
 8024512:	b90d      	cbnz	r5, 8024518 <_printf_i+0x110>
 8024514:	2e00      	cmp	r6, #0
 8024516:	d04b      	beq.n	80245b0 <_printf_i+0x1a8>
 8024518:	4616      	mov	r6, r2
 802451a:	fbb5 f1f3 	udiv	r1, r5, r3
 802451e:	fb03 5711 	mls	r7, r3, r1, r5
 8024522:	5dc7      	ldrb	r7, [r0, r7]
 8024524:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8024528:	462f      	mov	r7, r5
 802452a:	42bb      	cmp	r3, r7
 802452c:	460d      	mov	r5, r1
 802452e:	d9f4      	bls.n	802451a <_printf_i+0x112>
 8024530:	2b08      	cmp	r3, #8
 8024532:	d10b      	bne.n	802454c <_printf_i+0x144>
 8024534:	6823      	ldr	r3, [r4, #0]
 8024536:	07df      	lsls	r7, r3, #31
 8024538:	d508      	bpl.n	802454c <_printf_i+0x144>
 802453a:	6923      	ldr	r3, [r4, #16]
 802453c:	6861      	ldr	r1, [r4, #4]
 802453e:	4299      	cmp	r1, r3
 8024540:	bfde      	ittt	le
 8024542:	2330      	movle	r3, #48	@ 0x30
 8024544:	f806 3c01 	strble.w	r3, [r6, #-1]
 8024548:	f106 36ff 	addle.w	r6, r6, #4294967295
 802454c:	1b92      	subs	r2, r2, r6
 802454e:	6122      	str	r2, [r4, #16]
 8024550:	f8cd a000 	str.w	sl, [sp]
 8024554:	464b      	mov	r3, r9
 8024556:	aa03      	add	r2, sp, #12
 8024558:	4621      	mov	r1, r4
 802455a:	4640      	mov	r0, r8
 802455c:	f7ff fee6 	bl	802432c <_printf_common>
 8024560:	3001      	adds	r0, #1
 8024562:	d14a      	bne.n	80245fa <_printf_i+0x1f2>
 8024564:	f04f 30ff 	mov.w	r0, #4294967295
 8024568:	b004      	add	sp, #16
 802456a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802456e:	6823      	ldr	r3, [r4, #0]
 8024570:	f043 0320 	orr.w	r3, r3, #32
 8024574:	6023      	str	r3, [r4, #0]
 8024576:	4833      	ldr	r0, [pc, #204]	@ (8024644 <_printf_i+0x23c>)
 8024578:	2778      	movs	r7, #120	@ 0x78
 802457a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802457e:	6823      	ldr	r3, [r4, #0]
 8024580:	6831      	ldr	r1, [r6, #0]
 8024582:	061f      	lsls	r7, r3, #24
 8024584:	f851 5b04 	ldr.w	r5, [r1], #4
 8024588:	d402      	bmi.n	8024590 <_printf_i+0x188>
 802458a:	065f      	lsls	r7, r3, #25
 802458c:	bf48      	it	mi
 802458e:	b2ad      	uxthmi	r5, r5
 8024590:	6031      	str	r1, [r6, #0]
 8024592:	07d9      	lsls	r1, r3, #31
 8024594:	bf44      	itt	mi
 8024596:	f043 0320 	orrmi.w	r3, r3, #32
 802459a:	6023      	strmi	r3, [r4, #0]
 802459c:	b11d      	cbz	r5, 80245a6 <_printf_i+0x19e>
 802459e:	2310      	movs	r3, #16
 80245a0:	e7ac      	b.n	80244fc <_printf_i+0xf4>
 80245a2:	4827      	ldr	r0, [pc, #156]	@ (8024640 <_printf_i+0x238>)
 80245a4:	e7e9      	b.n	802457a <_printf_i+0x172>
 80245a6:	6823      	ldr	r3, [r4, #0]
 80245a8:	f023 0320 	bic.w	r3, r3, #32
 80245ac:	6023      	str	r3, [r4, #0]
 80245ae:	e7f6      	b.n	802459e <_printf_i+0x196>
 80245b0:	4616      	mov	r6, r2
 80245b2:	e7bd      	b.n	8024530 <_printf_i+0x128>
 80245b4:	6833      	ldr	r3, [r6, #0]
 80245b6:	6825      	ldr	r5, [r4, #0]
 80245b8:	6961      	ldr	r1, [r4, #20]
 80245ba:	1d18      	adds	r0, r3, #4
 80245bc:	6030      	str	r0, [r6, #0]
 80245be:	062e      	lsls	r6, r5, #24
 80245c0:	681b      	ldr	r3, [r3, #0]
 80245c2:	d501      	bpl.n	80245c8 <_printf_i+0x1c0>
 80245c4:	6019      	str	r1, [r3, #0]
 80245c6:	e002      	b.n	80245ce <_printf_i+0x1c6>
 80245c8:	0668      	lsls	r0, r5, #25
 80245ca:	d5fb      	bpl.n	80245c4 <_printf_i+0x1bc>
 80245cc:	8019      	strh	r1, [r3, #0]
 80245ce:	2300      	movs	r3, #0
 80245d0:	6123      	str	r3, [r4, #16]
 80245d2:	4616      	mov	r6, r2
 80245d4:	e7bc      	b.n	8024550 <_printf_i+0x148>
 80245d6:	6833      	ldr	r3, [r6, #0]
 80245d8:	1d1a      	adds	r2, r3, #4
 80245da:	6032      	str	r2, [r6, #0]
 80245dc:	681e      	ldr	r6, [r3, #0]
 80245de:	6862      	ldr	r2, [r4, #4]
 80245e0:	2100      	movs	r1, #0
 80245e2:	4630      	mov	r0, r6
 80245e4:	f7db fe94 	bl	8000310 <memchr>
 80245e8:	b108      	cbz	r0, 80245ee <_printf_i+0x1e6>
 80245ea:	1b80      	subs	r0, r0, r6
 80245ec:	6060      	str	r0, [r4, #4]
 80245ee:	6863      	ldr	r3, [r4, #4]
 80245f0:	6123      	str	r3, [r4, #16]
 80245f2:	2300      	movs	r3, #0
 80245f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80245f8:	e7aa      	b.n	8024550 <_printf_i+0x148>
 80245fa:	6923      	ldr	r3, [r4, #16]
 80245fc:	4632      	mov	r2, r6
 80245fe:	4649      	mov	r1, r9
 8024600:	4640      	mov	r0, r8
 8024602:	47d0      	blx	sl
 8024604:	3001      	adds	r0, #1
 8024606:	d0ad      	beq.n	8024564 <_printf_i+0x15c>
 8024608:	6823      	ldr	r3, [r4, #0]
 802460a:	079b      	lsls	r3, r3, #30
 802460c:	d413      	bmi.n	8024636 <_printf_i+0x22e>
 802460e:	68e0      	ldr	r0, [r4, #12]
 8024610:	9b03      	ldr	r3, [sp, #12]
 8024612:	4298      	cmp	r0, r3
 8024614:	bfb8      	it	lt
 8024616:	4618      	movlt	r0, r3
 8024618:	e7a6      	b.n	8024568 <_printf_i+0x160>
 802461a:	2301      	movs	r3, #1
 802461c:	4632      	mov	r2, r6
 802461e:	4649      	mov	r1, r9
 8024620:	4640      	mov	r0, r8
 8024622:	47d0      	blx	sl
 8024624:	3001      	adds	r0, #1
 8024626:	d09d      	beq.n	8024564 <_printf_i+0x15c>
 8024628:	3501      	adds	r5, #1
 802462a:	68e3      	ldr	r3, [r4, #12]
 802462c:	9903      	ldr	r1, [sp, #12]
 802462e:	1a5b      	subs	r3, r3, r1
 8024630:	42ab      	cmp	r3, r5
 8024632:	dcf2      	bgt.n	802461a <_printf_i+0x212>
 8024634:	e7eb      	b.n	802460e <_printf_i+0x206>
 8024636:	2500      	movs	r5, #0
 8024638:	f104 0619 	add.w	r6, r4, #25
 802463c:	e7f5      	b.n	802462a <_printf_i+0x222>
 802463e:	bf00      	nop
 8024640:	0802820d 	.word	0x0802820d
 8024644:	0802821e 	.word	0x0802821e

08024648 <__swbuf_r>:
 8024648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802464a:	460e      	mov	r6, r1
 802464c:	4614      	mov	r4, r2
 802464e:	4605      	mov	r5, r0
 8024650:	b118      	cbz	r0, 802465a <__swbuf_r+0x12>
 8024652:	6a03      	ldr	r3, [r0, #32]
 8024654:	b90b      	cbnz	r3, 802465a <__swbuf_r+0x12>
 8024656:	f7ff f9dd 	bl	8023a14 <__sinit>
 802465a:	69a3      	ldr	r3, [r4, #24]
 802465c:	60a3      	str	r3, [r4, #8]
 802465e:	89a3      	ldrh	r3, [r4, #12]
 8024660:	071a      	lsls	r2, r3, #28
 8024662:	d501      	bpl.n	8024668 <__swbuf_r+0x20>
 8024664:	6923      	ldr	r3, [r4, #16]
 8024666:	b943      	cbnz	r3, 802467a <__swbuf_r+0x32>
 8024668:	4621      	mov	r1, r4
 802466a:	4628      	mov	r0, r5
 802466c:	f000 f82a 	bl	80246c4 <__swsetup_r>
 8024670:	b118      	cbz	r0, 802467a <__swbuf_r+0x32>
 8024672:	f04f 37ff 	mov.w	r7, #4294967295
 8024676:	4638      	mov	r0, r7
 8024678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802467a:	6823      	ldr	r3, [r4, #0]
 802467c:	6922      	ldr	r2, [r4, #16]
 802467e:	1a98      	subs	r0, r3, r2
 8024680:	6963      	ldr	r3, [r4, #20]
 8024682:	b2f6      	uxtb	r6, r6
 8024684:	4283      	cmp	r3, r0
 8024686:	4637      	mov	r7, r6
 8024688:	dc05      	bgt.n	8024696 <__swbuf_r+0x4e>
 802468a:	4621      	mov	r1, r4
 802468c:	4628      	mov	r0, r5
 802468e:	f7ff fcbb 	bl	8024008 <_fflush_r>
 8024692:	2800      	cmp	r0, #0
 8024694:	d1ed      	bne.n	8024672 <__swbuf_r+0x2a>
 8024696:	68a3      	ldr	r3, [r4, #8]
 8024698:	3b01      	subs	r3, #1
 802469a:	60a3      	str	r3, [r4, #8]
 802469c:	6823      	ldr	r3, [r4, #0]
 802469e:	1c5a      	adds	r2, r3, #1
 80246a0:	6022      	str	r2, [r4, #0]
 80246a2:	701e      	strb	r6, [r3, #0]
 80246a4:	6962      	ldr	r2, [r4, #20]
 80246a6:	1c43      	adds	r3, r0, #1
 80246a8:	429a      	cmp	r2, r3
 80246aa:	d004      	beq.n	80246b6 <__swbuf_r+0x6e>
 80246ac:	89a3      	ldrh	r3, [r4, #12]
 80246ae:	07db      	lsls	r3, r3, #31
 80246b0:	d5e1      	bpl.n	8024676 <__swbuf_r+0x2e>
 80246b2:	2e0a      	cmp	r6, #10
 80246b4:	d1df      	bne.n	8024676 <__swbuf_r+0x2e>
 80246b6:	4621      	mov	r1, r4
 80246b8:	4628      	mov	r0, r5
 80246ba:	f7ff fca5 	bl	8024008 <_fflush_r>
 80246be:	2800      	cmp	r0, #0
 80246c0:	d0d9      	beq.n	8024676 <__swbuf_r+0x2e>
 80246c2:	e7d6      	b.n	8024672 <__swbuf_r+0x2a>

080246c4 <__swsetup_r>:
 80246c4:	b538      	push	{r3, r4, r5, lr}
 80246c6:	4b29      	ldr	r3, [pc, #164]	@ (802476c <__swsetup_r+0xa8>)
 80246c8:	4605      	mov	r5, r0
 80246ca:	6818      	ldr	r0, [r3, #0]
 80246cc:	460c      	mov	r4, r1
 80246ce:	b118      	cbz	r0, 80246d8 <__swsetup_r+0x14>
 80246d0:	6a03      	ldr	r3, [r0, #32]
 80246d2:	b90b      	cbnz	r3, 80246d8 <__swsetup_r+0x14>
 80246d4:	f7ff f99e 	bl	8023a14 <__sinit>
 80246d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80246dc:	0719      	lsls	r1, r3, #28
 80246de:	d422      	bmi.n	8024726 <__swsetup_r+0x62>
 80246e0:	06da      	lsls	r2, r3, #27
 80246e2:	d407      	bmi.n	80246f4 <__swsetup_r+0x30>
 80246e4:	2209      	movs	r2, #9
 80246e6:	602a      	str	r2, [r5, #0]
 80246e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80246ec:	81a3      	strh	r3, [r4, #12]
 80246ee:	f04f 30ff 	mov.w	r0, #4294967295
 80246f2:	e033      	b.n	802475c <__swsetup_r+0x98>
 80246f4:	0758      	lsls	r0, r3, #29
 80246f6:	d512      	bpl.n	802471e <__swsetup_r+0x5a>
 80246f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80246fa:	b141      	cbz	r1, 802470e <__swsetup_r+0x4a>
 80246fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8024700:	4299      	cmp	r1, r3
 8024702:	d002      	beq.n	802470a <__swsetup_r+0x46>
 8024704:	4628      	mov	r0, r5
 8024706:	f7ff fafb 	bl	8023d00 <_free_r>
 802470a:	2300      	movs	r3, #0
 802470c:	6363      	str	r3, [r4, #52]	@ 0x34
 802470e:	89a3      	ldrh	r3, [r4, #12]
 8024710:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8024714:	81a3      	strh	r3, [r4, #12]
 8024716:	2300      	movs	r3, #0
 8024718:	6063      	str	r3, [r4, #4]
 802471a:	6923      	ldr	r3, [r4, #16]
 802471c:	6023      	str	r3, [r4, #0]
 802471e:	89a3      	ldrh	r3, [r4, #12]
 8024720:	f043 0308 	orr.w	r3, r3, #8
 8024724:	81a3      	strh	r3, [r4, #12]
 8024726:	6923      	ldr	r3, [r4, #16]
 8024728:	b94b      	cbnz	r3, 802473e <__swsetup_r+0x7a>
 802472a:	89a3      	ldrh	r3, [r4, #12]
 802472c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8024730:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8024734:	d003      	beq.n	802473e <__swsetup_r+0x7a>
 8024736:	4621      	mov	r1, r4
 8024738:	4628      	mov	r0, r5
 802473a:	f000 f883 	bl	8024844 <__smakebuf_r>
 802473e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024742:	f013 0201 	ands.w	r2, r3, #1
 8024746:	d00a      	beq.n	802475e <__swsetup_r+0x9a>
 8024748:	2200      	movs	r2, #0
 802474a:	60a2      	str	r2, [r4, #8]
 802474c:	6962      	ldr	r2, [r4, #20]
 802474e:	4252      	negs	r2, r2
 8024750:	61a2      	str	r2, [r4, #24]
 8024752:	6922      	ldr	r2, [r4, #16]
 8024754:	b942      	cbnz	r2, 8024768 <__swsetup_r+0xa4>
 8024756:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802475a:	d1c5      	bne.n	80246e8 <__swsetup_r+0x24>
 802475c:	bd38      	pop	{r3, r4, r5, pc}
 802475e:	0799      	lsls	r1, r3, #30
 8024760:	bf58      	it	pl
 8024762:	6962      	ldrpl	r2, [r4, #20]
 8024764:	60a2      	str	r2, [r4, #8]
 8024766:	e7f4      	b.n	8024752 <__swsetup_r+0x8e>
 8024768:	2000      	movs	r0, #0
 802476a:	e7f7      	b.n	802475c <__swsetup_r+0x98>
 802476c:	20000038 	.word	0x20000038

08024770 <_raise_r>:
 8024770:	291f      	cmp	r1, #31
 8024772:	b538      	push	{r3, r4, r5, lr}
 8024774:	4605      	mov	r5, r0
 8024776:	460c      	mov	r4, r1
 8024778:	d904      	bls.n	8024784 <_raise_r+0x14>
 802477a:	2316      	movs	r3, #22
 802477c:	6003      	str	r3, [r0, #0]
 802477e:	f04f 30ff 	mov.w	r0, #4294967295
 8024782:	bd38      	pop	{r3, r4, r5, pc}
 8024784:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8024786:	b112      	cbz	r2, 802478e <_raise_r+0x1e>
 8024788:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802478c:	b94b      	cbnz	r3, 80247a2 <_raise_r+0x32>
 802478e:	4628      	mov	r0, r5
 8024790:	f000 f830 	bl	80247f4 <_getpid_r>
 8024794:	4622      	mov	r2, r4
 8024796:	4601      	mov	r1, r0
 8024798:	4628      	mov	r0, r5
 802479a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802479e:	f000 b817 	b.w	80247d0 <_kill_r>
 80247a2:	2b01      	cmp	r3, #1
 80247a4:	d00a      	beq.n	80247bc <_raise_r+0x4c>
 80247a6:	1c59      	adds	r1, r3, #1
 80247a8:	d103      	bne.n	80247b2 <_raise_r+0x42>
 80247aa:	2316      	movs	r3, #22
 80247ac:	6003      	str	r3, [r0, #0]
 80247ae:	2001      	movs	r0, #1
 80247b0:	e7e7      	b.n	8024782 <_raise_r+0x12>
 80247b2:	2100      	movs	r1, #0
 80247b4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80247b8:	4620      	mov	r0, r4
 80247ba:	4798      	blx	r3
 80247bc:	2000      	movs	r0, #0
 80247be:	e7e0      	b.n	8024782 <_raise_r+0x12>

080247c0 <raise>:
 80247c0:	4b02      	ldr	r3, [pc, #8]	@ (80247cc <raise+0xc>)
 80247c2:	4601      	mov	r1, r0
 80247c4:	6818      	ldr	r0, [r3, #0]
 80247c6:	f7ff bfd3 	b.w	8024770 <_raise_r>
 80247ca:	bf00      	nop
 80247cc:	20000038 	.word	0x20000038

080247d0 <_kill_r>:
 80247d0:	b538      	push	{r3, r4, r5, lr}
 80247d2:	4d07      	ldr	r5, [pc, #28]	@ (80247f0 <_kill_r+0x20>)
 80247d4:	2300      	movs	r3, #0
 80247d6:	4604      	mov	r4, r0
 80247d8:	4608      	mov	r0, r1
 80247da:	4611      	mov	r1, r2
 80247dc:	602b      	str	r3, [r5, #0]
 80247de:	f7de fc9f 	bl	8003120 <_kill>
 80247e2:	1c43      	adds	r3, r0, #1
 80247e4:	d102      	bne.n	80247ec <_kill_r+0x1c>
 80247e6:	682b      	ldr	r3, [r5, #0]
 80247e8:	b103      	cbz	r3, 80247ec <_kill_r+0x1c>
 80247ea:	6023      	str	r3, [r4, #0]
 80247ec:	bd38      	pop	{r3, r4, r5, pc}
 80247ee:	bf00      	nop
 80247f0:	20002878 	.word	0x20002878

080247f4 <_getpid_r>:
 80247f4:	f7de bc8c 	b.w	8003110 <_getpid>

080247f8 <__swhatbuf_r>:
 80247f8:	b570      	push	{r4, r5, r6, lr}
 80247fa:	460c      	mov	r4, r1
 80247fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024800:	2900      	cmp	r1, #0
 8024802:	b096      	sub	sp, #88	@ 0x58
 8024804:	4615      	mov	r5, r2
 8024806:	461e      	mov	r6, r3
 8024808:	da0d      	bge.n	8024826 <__swhatbuf_r+0x2e>
 802480a:	89a3      	ldrh	r3, [r4, #12]
 802480c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8024810:	f04f 0100 	mov.w	r1, #0
 8024814:	bf14      	ite	ne
 8024816:	2340      	movne	r3, #64	@ 0x40
 8024818:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802481c:	2000      	movs	r0, #0
 802481e:	6031      	str	r1, [r6, #0]
 8024820:	602b      	str	r3, [r5, #0]
 8024822:	b016      	add	sp, #88	@ 0x58
 8024824:	bd70      	pop	{r4, r5, r6, pc}
 8024826:	466a      	mov	r2, sp
 8024828:	f000 f848 	bl	80248bc <_fstat_r>
 802482c:	2800      	cmp	r0, #0
 802482e:	dbec      	blt.n	802480a <__swhatbuf_r+0x12>
 8024830:	9901      	ldr	r1, [sp, #4]
 8024832:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8024836:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802483a:	4259      	negs	r1, r3
 802483c:	4159      	adcs	r1, r3
 802483e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8024842:	e7eb      	b.n	802481c <__swhatbuf_r+0x24>

08024844 <__smakebuf_r>:
 8024844:	898b      	ldrh	r3, [r1, #12]
 8024846:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024848:	079d      	lsls	r5, r3, #30
 802484a:	4606      	mov	r6, r0
 802484c:	460c      	mov	r4, r1
 802484e:	d507      	bpl.n	8024860 <__smakebuf_r+0x1c>
 8024850:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8024854:	6023      	str	r3, [r4, #0]
 8024856:	6123      	str	r3, [r4, #16]
 8024858:	2301      	movs	r3, #1
 802485a:	6163      	str	r3, [r4, #20]
 802485c:	b003      	add	sp, #12
 802485e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024860:	ab01      	add	r3, sp, #4
 8024862:	466a      	mov	r2, sp
 8024864:	f7ff ffc8 	bl	80247f8 <__swhatbuf_r>
 8024868:	9f00      	ldr	r7, [sp, #0]
 802486a:	4605      	mov	r5, r0
 802486c:	4639      	mov	r1, r7
 802486e:	4630      	mov	r0, r6
 8024870:	f7ff faba 	bl	8023de8 <_malloc_r>
 8024874:	b948      	cbnz	r0, 802488a <__smakebuf_r+0x46>
 8024876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802487a:	059a      	lsls	r2, r3, #22
 802487c:	d4ee      	bmi.n	802485c <__smakebuf_r+0x18>
 802487e:	f023 0303 	bic.w	r3, r3, #3
 8024882:	f043 0302 	orr.w	r3, r3, #2
 8024886:	81a3      	strh	r3, [r4, #12]
 8024888:	e7e2      	b.n	8024850 <__smakebuf_r+0xc>
 802488a:	89a3      	ldrh	r3, [r4, #12]
 802488c:	6020      	str	r0, [r4, #0]
 802488e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8024892:	81a3      	strh	r3, [r4, #12]
 8024894:	9b01      	ldr	r3, [sp, #4]
 8024896:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802489a:	b15b      	cbz	r3, 80248b4 <__smakebuf_r+0x70>
 802489c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80248a0:	4630      	mov	r0, r6
 80248a2:	f000 f81d 	bl	80248e0 <_isatty_r>
 80248a6:	b128      	cbz	r0, 80248b4 <__smakebuf_r+0x70>
 80248a8:	89a3      	ldrh	r3, [r4, #12]
 80248aa:	f023 0303 	bic.w	r3, r3, #3
 80248ae:	f043 0301 	orr.w	r3, r3, #1
 80248b2:	81a3      	strh	r3, [r4, #12]
 80248b4:	89a3      	ldrh	r3, [r4, #12]
 80248b6:	431d      	orrs	r5, r3
 80248b8:	81a5      	strh	r5, [r4, #12]
 80248ba:	e7cf      	b.n	802485c <__smakebuf_r+0x18>

080248bc <_fstat_r>:
 80248bc:	b538      	push	{r3, r4, r5, lr}
 80248be:	4d07      	ldr	r5, [pc, #28]	@ (80248dc <_fstat_r+0x20>)
 80248c0:	2300      	movs	r3, #0
 80248c2:	4604      	mov	r4, r0
 80248c4:	4608      	mov	r0, r1
 80248c6:	4611      	mov	r1, r2
 80248c8:	602b      	str	r3, [r5, #0]
 80248ca:	f7de fc89 	bl	80031e0 <_fstat>
 80248ce:	1c43      	adds	r3, r0, #1
 80248d0:	d102      	bne.n	80248d8 <_fstat_r+0x1c>
 80248d2:	682b      	ldr	r3, [r5, #0]
 80248d4:	b103      	cbz	r3, 80248d8 <_fstat_r+0x1c>
 80248d6:	6023      	str	r3, [r4, #0]
 80248d8:	bd38      	pop	{r3, r4, r5, pc}
 80248da:	bf00      	nop
 80248dc:	20002878 	.word	0x20002878

080248e0 <_isatty_r>:
 80248e0:	b538      	push	{r3, r4, r5, lr}
 80248e2:	4d06      	ldr	r5, [pc, #24]	@ (80248fc <_isatty_r+0x1c>)
 80248e4:	2300      	movs	r3, #0
 80248e6:	4604      	mov	r4, r0
 80248e8:	4608      	mov	r0, r1
 80248ea:	602b      	str	r3, [r5, #0]
 80248ec:	f7de fc88 	bl	8003200 <_isatty>
 80248f0:	1c43      	adds	r3, r0, #1
 80248f2:	d102      	bne.n	80248fa <_isatty_r+0x1a>
 80248f4:	682b      	ldr	r3, [r5, #0]
 80248f6:	b103      	cbz	r3, 80248fa <_isatty_r+0x1a>
 80248f8:	6023      	str	r3, [r4, #0]
 80248fa:	bd38      	pop	{r3, r4, r5, pc}
 80248fc:	20002878 	.word	0x20002878

08024900 <_init>:
 8024900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024902:	bf00      	nop
 8024904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024906:	bc08      	pop	{r3}
 8024908:	469e      	mov	lr, r3
 802490a:	4770      	bx	lr

0802490c <_fini>:
 802490c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802490e:	bf00      	nop
 8024910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024912:	bc08      	pop	{r3}
 8024914:	469e      	mov	lr, r3
 8024916:	4770      	bx	lr
