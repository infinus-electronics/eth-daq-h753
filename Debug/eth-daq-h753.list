
eth-daq-h753.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000223dc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000384c  0802267c  0802267c  0002367c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08025ec8  08025ec8  00026ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08025ed0  08025ed0  00026ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08025ed4  08025ed4  00026ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  20000000  08025ed8  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000024a8  20000088  08025f60  00027088  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002530  08025f60  00027530  2**0
                  ALLOC
  9 .dtcm_data    00018000  20002b30  08025f60  00027b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ethernet_data 000580c0  24000000  24000000  00040000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ram2_data    00024000  30000000  30000000  00099000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ram3_data    00008004  38000000  38000000  000bd000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ARM.attributes 0000002e  00000000  00000000  000c5004  2**0
                  CONTENTS, READONLY
 14 .debug_info   0005f669  00000000  00000000  000c5032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000bbd5  00000000  00000000  0012469b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002e58  00000000  00000000  00130270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002516  00000000  00000000  001330c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004ef0d  00000000  00000000  001355de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00057710  00000000  00000000  001844eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00190a09  00000000  00000000  001dbbfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0036c604  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000c914  00000000  00000000  0036c648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000068  00000000  00000000  00378f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000088 	.word	0x20000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08022664 	.word	0x08022664

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000008c 	.word	0x2000008c
 80002dc:	08022664 	.word	0x08022664

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006a6:	f000 ff1f 	bl	80014e8 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006aa:	4b31      	ldr	r3, [pc, #196]	@ (8000770 <main+0xd0>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d11b      	bne.n	80006ee <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006b6:	f3bf 8f4f 	dsb	sy
}
 80006ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006bc:	f3bf 8f6f 	isb	sy
}
 80006c0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000770 <main+0xd0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006ca:	f3bf 8f4f 	dsb	sy
}
 80006ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d0:	f3bf 8f6f 	isb	sy
}
 80006d4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <main+0xd0>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	4a25      	ldr	r2, [pc, #148]	@ (8000770 <main+0xd0>)
 80006dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006e2:	f3bf 8f4f 	dsb	sy
}
 80006e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006e8:	f3bf 8f6f 	isb	sy
}
 80006ec:	e000      	b.n	80006f0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006ee:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <main+0xd0>)
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d13b      	bne.n	8000774 <main+0xd4>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <main+0xd0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000704:	f3bf 8f4f 	dsb	sy
}
 8000708:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800070a:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <main+0xd0>)
 800070c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000710:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	0b5b      	lsrs	r3, r3, #13
 8000716:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800071a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	08db      	lsrs	r3, r3, #3
 8000720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000724:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	015a      	lsls	r2, r3, #5
 800072a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800072e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000734:	490e      	ldr	r1, [pc, #56]	@ (8000770 <main+0xd0>)
 8000736:	4313      	orrs	r3, r2
 8000738:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	1e5a      	subs	r2, r3, #1
 8000740:	607a      	str	r2, [r7, #4]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1ef      	bne.n	8000726 <main+0x86>
    } while(sets-- != 0U);
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	1e5a      	subs	r2, r3, #1
 800074a:	60ba      	str	r2, [r7, #8]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d1e5      	bne.n	800071c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000750:	f3bf 8f4f 	dsb	sy
}
 8000754:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <main+0xd0>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a05      	ldr	r2, [pc, #20]	@ (8000770 <main+0xd0>)
 800075c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000760:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000762:	f3bf 8f4f 	dsb	sy
}
 8000766:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000768:	f3bf 8f6f 	isb	sy
}
 800076c:	e003      	b.n	8000776 <main+0xd6>
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000774:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000776:	f018 fc01 	bl	8018f7c <HAL_Init>

  /* USER CODE BEGIN Init */
  memset(usADCDataMock0, 0x41, sizeof(usADCDataMock0));
 800077a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800077e:	2141      	movs	r1, #65	@ 0x41
 8000780:	488b      	ldr	r0, [pc, #556]	@ (80009b0 <main+0x310>)
 8000782:	f020 f9fc 	bl	8020b7e <memset>
  memset(usADCDataMock1, 0x42, sizeof(usADCDataMock1));
 8000786:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800078a:	2142      	movs	r1, #66	@ 0x42
 800078c:	4889      	ldr	r0, [pc, #548]	@ (80009b4 <main+0x314>)
 800078e:	f020 f9f6 	bl	8020b7e <memset>
  memset(usAuxADCDataMock0, 0x43, sizeof(usAuxADCDataMock0));
 8000792:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000796:	2143      	movs	r1, #67	@ 0x43
 8000798:	4887      	ldr	r0, [pc, #540]	@ (80009b8 <main+0x318>)
 800079a:	f020 f9f0 	bl	8020b7e <memset>
  memset(usAuxADCDataMock1, 0x44, sizeof(usAuxADCDataMock1));
 800079e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007a2:	2144      	movs	r1, #68	@ 0x44
 80007a4:	4885      	ldr	r0, [pc, #532]	@ (80009bc <main+0x31c>)
 80007a6:	f020 f9ea 	bl	8020b7e <memset>
  __ASM volatile ("dsb 0xF":::"memory");
 80007aa:	f3bf 8f4f 	dsb	sy
}
 80007ae:	bf00      	nop
  __DSB();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b0:	f000 f93a 	bl	8000a28 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007b4:	f000 f9e6 	bl	8000b84 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  vHeapInit();
 80007b8:	f000 fc90 	bl	80010dc <vHeapInit>
  vStartHighResolutionTimer();
 80007bc:	f01f fffe 	bl	80207bc <vStartHighResolutionTimer>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c0:	f000 fc36 	bl	8001030 <MX_GPIO_Init>
  MX_DMA_Init();
 80007c4:	f000 fbfc 	bl	8000fc0 <MX_DMA_Init>
//  MX_ETH_Init();s
  MX_USART3_UART_Init();
 80007c8:	f000 fbae 	bl	8000f28 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80007cc:	f000 fa0a 	bl	8000be4 <MX_SPI1_Init>
  MX_SPI2_Init();
 80007d0:	f000 fa5e 	bl	8000c90 <MX_SPI2_Init>
  MX_SPI3_Init();
 80007d4:	f000 fab2 	bl	8000d3c <MX_SPI3_Init>
  MX_TIM1_Init();
 80007d8:	f000 fb06 	bl	8000de8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80007dc:	f000 fb56 	bl	8000e8c <MX_TIM3_Init>
//  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */

  //SPI1 RX Stream
  DMA1_Stream0->M0AR = usADCDataMock0;
 80007e0:	4b77      	ldr	r3, [pc, #476]	@ (80009c0 <main+0x320>)
 80007e2:	4a73      	ldr	r2, [pc, #460]	@ (80009b0 <main+0x310>)
 80007e4:	60da      	str	r2, [r3, #12]
  DMA1_Stream0->M1AR = usADCDataMock1;
 80007e6:	4b76      	ldr	r3, [pc, #472]	@ (80009c0 <main+0x320>)
 80007e8:	4a72      	ldr	r2, [pc, #456]	@ (80009b4 <main+0x314>)
 80007ea:	611a      	str	r2, [r3, #16]
  DMA1_Stream0->PAR = &(SPI1->RXDR);
 80007ec:	4b74      	ldr	r3, [pc, #464]	@ (80009c0 <main+0x320>)
 80007ee:	4a75      	ldr	r2, [pc, #468]	@ (80009c4 <main+0x324>)
 80007f0:	609a      	str	r2, [r3, #8]
  DMA1_Stream0->CR |= DMA_DOUBLE_BUFFER_M0;
 80007f2:	4b73      	ldr	r3, [pc, #460]	@ (80009c0 <main+0x320>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a72      	ldr	r2, [pc, #456]	@ (80009c0 <main+0x320>)
 80007f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007fc:	6013      	str	r3, [r2, #0]
  DMA1_Stream0->NDTR = ADC_BUFFER_HALF_SIZE;
 80007fe:	4b70      	ldr	r3, [pc, #448]	@ (80009c0 <main+0x320>)
 8000800:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000804:	605a      	str	r2, [r3, #4]
//  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
  DMA1_Stream0->CR |= DMA_SxCR_TCIE;
 8000806:	4b6e      	ldr	r3, [pc, #440]	@ (80009c0 <main+0x320>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a6d      	ldr	r2, [pc, #436]	@ (80009c0 <main+0x320>)
 800080c:	f043 0310 	orr.w	r3, r3, #16
 8000810:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000812:	f3bf 8f4f 	dsb	sy
}
 8000816:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream0->CR |= DMA_SxCR_EN;
 8000818:	4b69      	ldr	r3, [pc, #420]	@ (80009c0 <main+0x320>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a68      	ldr	r2, [pc, #416]	@ (80009c0 <main+0x320>)
 800081e:	f043 0301 	orr.w	r3, r3, #1
 8000822:	6013      	str	r3, [r2, #0]

  //SPI2 RX Stream
  DMA1_Stream1->M0AR = usAuxADCDataMock0;
 8000824:	4b68      	ldr	r3, [pc, #416]	@ (80009c8 <main+0x328>)
 8000826:	4a64      	ldr	r2, [pc, #400]	@ (80009b8 <main+0x318>)
 8000828:	60da      	str	r2, [r3, #12]
  DMA1_Stream1->M1AR = usAuxADCDataMock1;
 800082a:	4b67      	ldr	r3, [pc, #412]	@ (80009c8 <main+0x328>)
 800082c:	4a63      	ldr	r2, [pc, #396]	@ (80009bc <main+0x31c>)
 800082e:	611a      	str	r2, [r3, #16]
  DMA1_Stream1->PAR = &(SPI2->RXDR);
 8000830:	4b65      	ldr	r3, [pc, #404]	@ (80009c8 <main+0x328>)
 8000832:	4a66      	ldr	r2, [pc, #408]	@ (80009cc <main+0x32c>)
 8000834:	609a      	str	r2, [r3, #8]
  DMA1_Stream1->CR |= DMA_DOUBLE_BUFFER_M0;
 8000836:	4b64      	ldr	r3, [pc, #400]	@ (80009c8 <main+0x328>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a63      	ldr	r2, [pc, #396]	@ (80009c8 <main+0x328>)
 800083c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000840:	6013      	str	r3, [r2, #0]
  DMA1_Stream1->NDTR = AUX_ADC_BUFFER_HALF_SIZE;
 8000842:	4b61      	ldr	r3, [pc, #388]	@ (80009c8 <main+0x328>)
 8000844:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000848:	605a      	str	r2, [r3, #4]
//  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
  DMA1_Stream1->CR |= DMA_SxCR_TCIE;
 800084a:	4b5f      	ldr	r3, [pc, #380]	@ (80009c8 <main+0x328>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a5e      	ldr	r2, [pc, #376]	@ (80009c8 <main+0x328>)
 8000850:	f043 0310 	orr.w	r3, r3, #16
 8000854:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000856:	f3bf 8f4f 	dsb	sy
}
 800085a:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream1->CR |= DMA_SxCR_EN;
 800085c:	4b5a      	ldr	r3, [pc, #360]	@ (80009c8 <main+0x328>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a59      	ldr	r2, [pc, #356]	@ (80009c8 <main+0x328>)
 8000862:	f043 0301 	orr.w	r3, r3, #1
 8000866:	6013      	str	r3, [r2, #0]

  //TIM1 UP DMA
  DMA1_Stream2->M0AR = &usZero;
 8000868:	4b59      	ldr	r3, [pc, #356]	@ (80009d0 <main+0x330>)
 800086a:	4a5a      	ldr	r2, [pc, #360]	@ (80009d4 <main+0x334>)
 800086c:	60da      	str	r2, [r3, #12]
  DMA1_Stream2->PAR = &(SPI1->TXDR);
 800086e:	4b58      	ldr	r3, [pc, #352]	@ (80009d0 <main+0x330>)
 8000870:	4a59      	ldr	r2, [pc, #356]	@ (80009d8 <main+0x338>)
 8000872:	609a      	str	r2, [r3, #8]
  DMA1_Stream2->NDTR = 1;
 8000874:	4b56      	ldr	r3, [pc, #344]	@ (80009d0 <main+0x330>)
 8000876:	2201      	movs	r2, #1
 8000878:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 800087a:	f3bf 8f4f 	dsb	sy
}
 800087e:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream2->CR |= DMA_SxCR_EN;
 8000880:	4b53      	ldr	r3, [pc, #332]	@ (80009d0 <main+0x330>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a52      	ldr	r2, [pc, #328]	@ (80009d0 <main+0x330>)
 8000886:	f043 0301 	orr.w	r3, r3, #1
 800088a:	6013      	str	r3, [r2, #0]

  //TIM3 UP DMA
  DMA1_Stream3->M0AR = &usZero;
 800088c:	4b53      	ldr	r3, [pc, #332]	@ (80009dc <main+0x33c>)
 800088e:	4a51      	ldr	r2, [pc, #324]	@ (80009d4 <main+0x334>)
 8000890:	60da      	str	r2, [r3, #12]
  DMA1_Stream3->PAR = &(SPI2->TXDR);
 8000892:	4b52      	ldr	r3, [pc, #328]	@ (80009dc <main+0x33c>)
 8000894:	4a52      	ldr	r2, [pc, #328]	@ (80009e0 <main+0x340>)
 8000896:	609a      	str	r2, [r3, #8]
  DMA1_Stream3->NDTR = 1;
 8000898:	4b50      	ldr	r3, [pc, #320]	@ (80009dc <main+0x33c>)
 800089a:	2201      	movs	r2, #1
 800089c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 800089e:	f3bf 8f4f 	dsb	sy
}
 80008a2:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream3->CR |= DMA_SxCR_EN;
 80008a4:	4b4d      	ldr	r3, [pc, #308]	@ (80009dc <main+0x33c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a4c      	ldr	r2, [pc, #304]	@ (80009dc <main+0x33c>)
 80008aa:	f043 0301 	orr.w	r3, r3, #1
 80008ae:	6013      	str	r3, [r2, #0]

  //Enable SPI1
  SPI1->CFG1 |= SPI_CFG1_RXDMAEN;
 80008b0:	4b4c      	ldr	r3, [pc, #304]	@ (80009e4 <main+0x344>)
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	4a4b      	ldr	r2, [pc, #300]	@ (80009e4 <main+0x344>)
 80008b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008ba:	6093      	str	r3, [r2, #8]
  SPI1->CR1 |= SPI_CR1_SPE;
 80008bc:	4b49      	ldr	r3, [pc, #292]	@ (80009e4 <main+0x344>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a48      	ldr	r2, [pc, #288]	@ (80009e4 <main+0x344>)
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_CSTART;
 80008c8:	4b46      	ldr	r3, [pc, #280]	@ (80009e4 <main+0x344>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a45      	ldr	r2, [pc, #276]	@ (80009e4 <main+0x344>)
 80008ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008d2:	6013      	str	r3, [r2, #0]

  //Enable SPI2
  SPI2->CFG1 |= SPI_CFG1_RXDMAEN;
 80008d4:	4b44      	ldr	r3, [pc, #272]	@ (80009e8 <main+0x348>)
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	4a43      	ldr	r2, [pc, #268]	@ (80009e8 <main+0x348>)
 80008da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008de:	6093      	str	r3, [r2, #8]
  SPI2->CR1 |= SPI_CR1_SPE;
 80008e0:	4b41      	ldr	r3, [pc, #260]	@ (80009e8 <main+0x348>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a40      	ldr	r2, [pc, #256]	@ (80009e8 <main+0x348>)
 80008e6:	f043 0301 	orr.w	r3, r3, #1
 80008ea:	6013      	str	r3, [r2, #0]
  SPI2->CR1 |= SPI_CR1_CSTART;
 80008ec:	4b3e      	ldr	r3, [pc, #248]	@ (80009e8 <main+0x348>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a3d      	ldr	r2, [pc, #244]	@ (80009e8 <main+0x348>)
 80008f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008f6:	6013      	str	r3, [r2, #0]

  //Enable TIM1 (SPI1)
  TIM1->CR1 |= TIM_CR1_URS;
 80008f8:	4b3c      	ldr	r3, [pc, #240]	@ (80009ec <main+0x34c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a3b      	ldr	r2, [pc, #236]	@ (80009ec <main+0x34c>)
 80008fe:	f043 0304 	orr.w	r3, r3, #4
 8000902:	6013      	str	r3, [r2, #0]
  TIM1->CR1 &= ~TIM_CR1_UDIS;
 8000904:	4b39      	ldr	r3, [pc, #228]	@ (80009ec <main+0x34c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a38      	ldr	r2, [pc, #224]	@ (80009ec <main+0x34c>)
 800090a:	f023 0302 	bic.w	r3, r3, #2
 800090e:	6013      	str	r3, [r2, #0]
  TIM1->DIER |= TIM_DMA_UPDATE;
 8000910:	4b36      	ldr	r3, [pc, #216]	@ (80009ec <main+0x34c>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	4a35      	ldr	r2, [pc, #212]	@ (80009ec <main+0x34c>)
 8000916:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800091a:	60d3      	str	r3, [r2, #12]
  TIM1->EGR |= TIM_EGR_UG;
 800091c:	4b33      	ldr	r3, [pc, #204]	@ (80009ec <main+0x34c>)
 800091e:	695b      	ldr	r3, [r3, #20]
 8000920:	4a32      	ldr	r2, [pc, #200]	@ (80009ec <main+0x34c>)
 8000922:	f043 0301 	orr.w	r3, r3, #1
 8000926:	6153      	str	r3, [r2, #20]
//  TIM1->CR1 |= TIM_CR1_CEN;

  //Enable TIM3 (SPI2)
  TIM3->CR1 |= TIM_CR1_URS;
 8000928:	4b31      	ldr	r3, [pc, #196]	@ (80009f0 <main+0x350>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a30      	ldr	r2, [pc, #192]	@ (80009f0 <main+0x350>)
 800092e:	f043 0304 	orr.w	r3, r3, #4
 8000932:	6013      	str	r3, [r2, #0]
  TIM3->CR1 &= ~TIM_CR1_UDIS;
 8000934:	4b2e      	ldr	r3, [pc, #184]	@ (80009f0 <main+0x350>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a2d      	ldr	r2, [pc, #180]	@ (80009f0 <main+0x350>)
 800093a:	f023 0302 	bic.w	r3, r3, #2
 800093e:	6013      	str	r3, [r2, #0]
  TIM3->DIER |= TIM_DMA_UPDATE;
 8000940:	4b2b      	ldr	r3, [pc, #172]	@ (80009f0 <main+0x350>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	4a2a      	ldr	r2, [pc, #168]	@ (80009f0 <main+0x350>)
 8000946:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800094a:	60d3      	str	r3, [r2, #12]
  TIM3->EGR |= TIM_EGR_UG;
 800094c:	4b28      	ldr	r3, [pc, #160]	@ (80009f0 <main+0x350>)
 800094e:	695b      	ldr	r3, [r3, #20]
 8000950:	4a27      	ldr	r2, [pc, #156]	@ (80009f0 <main+0x350>)
 8000952:	f043 0301 	orr.w	r3, r3, #1
 8000956:	6153      	str	r3, [r2, #20]
//  TIM3->CR1 |= TIM_CR1_CEN;

  /* Initialise the interface descriptor for WinPCap for example. */
     pxSTM32H_FillInterfaceDescriptor( 0, &( xInterfaces[ 0 ] ) );
 8000958:	4926      	ldr	r1, [pc, #152]	@ (80009f4 <main+0x354>)
 800095a:	2000      	movs	r0, #0
 800095c:	f016 fc42 	bl	80171e4 <pxSTM32H_FillInterfaceDescriptor>

     FreeRTOS_FillEndPoint( &( xInterfaces[ 0 ] ), &( xEndPoints[ 0 ] ), ucIPAddress,
 8000960:	4b25      	ldr	r3, [pc, #148]	@ (80009f8 <main+0x358>)
 8000962:	9302      	str	r3, [sp, #8]
 8000964:	4b25      	ldr	r3, [pc, #148]	@ (80009fc <main+0x35c>)
 8000966:	9301      	str	r3, [sp, #4]
 8000968:	4b25      	ldr	r3, [pc, #148]	@ (8000a00 <main+0x360>)
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	4b25      	ldr	r3, [pc, #148]	@ (8000a04 <main+0x364>)
 800096e:	4a26      	ldr	r2, [pc, #152]	@ (8000a08 <main+0x368>)
 8000970:	4926      	ldr	r1, [pc, #152]	@ (8000a0c <main+0x36c>)
 8000972:	4820      	ldr	r0, [pc, #128]	@ (80009f4 <main+0x354>)
 8000974:	f00b fd14 	bl	800c3a0 <FreeRTOS_FillEndPoint>
     #endif /* ( ipconfigUSE_DHCP != 0 ) */

     /* Initialise the RTOS's TCP/IP stack.  The tasks that use the network
        are created in the vApplicationIPNetworkEventHook() hook function
        below.  The hook function is called when the network connects. */
      FreeRTOS_IPInit_Multi();
 8000978:	f007 fe62 	bl	8008640 <FreeRTOS_IPInit_Multi>


      xTaskCreate( prvServerWorkTask, "SvrWork", mainTCP_SERVER_STACK_SIZE, NULL, 0, &xServerWorkTaskHandle );
 800097c:	4b24      	ldr	r3, [pc, #144]	@ (8000a10 <main+0x370>)
 800097e:	9301      	str	r3, [sp, #4]
 8000980:	2300      	movs	r3, #0
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	2300      	movs	r3, #0
 8000986:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800098a:	4922      	ldr	r1, [pc, #136]	@ (8000a14 <main+0x374>)
 800098c:	4822      	ldr	r0, [pc, #136]	@ (8000a18 <main+0x378>)
 800098e:	f002 fc33 	bl	80031f8 <xTaskCreate>
//      xTaskCreate ( vNotifierTask, "Notif", 200, NULL, 0, &vNotifierTaskHandle);
      xTaskCreate ( vADCTCPTask, "ADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vADCTCPTaskHandle);
 8000992:	4b22      	ldr	r3, [pc, #136]	@ (8000a1c <main+0x37c>)
 8000994:	9301      	str	r3, [sp, #4]
 8000996:	2301      	movs	r3, #1
 8000998:	9300      	str	r3, [sp, #0]
 800099a:	2300      	movs	r3, #0
 800099c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80009a0:	491f      	ldr	r1, [pc, #124]	@ (8000a20 <main+0x380>)
 80009a2:	4820      	ldr	r0, [pc, #128]	@ (8000a24 <main+0x384>)
 80009a4:	f002 fc28 	bl	80031f8 <xTaskCreate>
//      xTaskCreate ( vAuxADCTCPTask, "AuxADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vAuxADCTCPTaskHandle);
      vTaskStartScheduler();
 80009a8:	f002 fde2 	bl	8003570 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <main+0x30c>
 80009b0:	30000000 	.word	0x30000000
 80009b4:	30010000 	.word	0x30010000
 80009b8:	30020000 	.word	0x30020000
 80009bc:	30022000 	.word	0x30022000
 80009c0:	40020010 	.word	0x40020010
 80009c4:	40013030 	.word	0x40013030
 80009c8:	40020028 	.word	0x40020028
 80009cc:	40003830 	.word	0x40003830
 80009d0:	40020040 	.word	0x40020040
 80009d4:	38000000 	.word	0x38000000
 80009d8:	40013020 	.word	0x40013020
 80009dc:	40020058 	.word	0x40020058
 80009e0:	40003820 	.word	0x40003820
 80009e4:	40013000 	.word	0x40013000
 80009e8:	40003800 	.word	0x40003800
 80009ec:	40010000 	.word	0x40010000
 80009f0:	40000400 	.word	0x40000400
 80009f4:	20000594 	.word	0x20000594
 80009f8:	08025b70 	.word	0x08025b70
 80009fc:	08025b6c 	.word	0x08025b6c
 8000a00:	08025b68 	.word	0x08025b68
 8000a04:	08025b64 	.word	0x08025b64
 8000a08:	08025b60 	.word	0x08025b60
 8000a0c:	200005bc 	.word	0x200005bc
 8000a10:	20000a64 	.word	0x20000a64
 8000a14:	0802267c 	.word	0x0802267c
 8000a18:	08001309 	.word	0x08001309
 8000a1c:	20000a68 	.word	0x20000a68
 8000a20:	08022684 	.word	0x08022684
 8000a24:	08001331 	.word	0x08001331

08000a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b09e      	sub	sp, #120	@ 0x78
 8000a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a32:	224c      	movs	r2, #76	@ 0x4c
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f020 f8a1 	bl	8020b7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	2220      	movs	r2, #32
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f020 f89a 	bl	8020b7e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a4a:	2002      	movs	r0, #2
 8000a4c:	f01a fd88 	bl	801b560 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	4b48      	ldr	r3, [pc, #288]	@ (8000b78 <SystemClock_Config+0x150>)
 8000a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a58:	4a47      	ldr	r2, [pc, #284]	@ (8000b78 <SystemClock_Config+0x150>)
 8000a5a:	f023 0301 	bic.w	r3, r3, #1
 8000a5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a60:	4b45      	ldr	r3, [pc, #276]	@ (8000b78 <SystemClock_Config+0x150>)
 8000a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a64:	f003 0301 	and.w	r3, r3, #1
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	4b44      	ldr	r3, [pc, #272]	@ (8000b7c <SystemClock_Config+0x154>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	4a43      	ldr	r2, [pc, #268]	@ (8000b7c <SystemClock_Config+0x154>)
 8000a70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a74:	6193      	str	r3, [r2, #24]
 8000a76:	4b41      	ldr	r3, [pc, #260]	@ (8000b7c <SystemClock_Config+0x154>)
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a82:	bf00      	nop
 8000a84:	4b3d      	ldr	r3, [pc, #244]	@ (8000b7c <SystemClock_Config+0x154>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a90:	d1f8      	bne.n	8000a84 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a92:	4b3b      	ldr	r3, [pc, #236]	@ (8000b80 <SystemClock_Config+0x158>)
 8000a94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a98:	4a39      	ldr	r2, [pc, #228]	@ (8000b80 <SystemClock_Config+0x158>)
 8000a9a:	f043 0302 	orr.w	r3, r3, #2
 8000a9e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000aa2:	4b37      	ldr	r3, [pc, #220]	@ (8000b80 <SystemClock_Config+0x158>)
 8000aa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000aa8:	f003 0302 	and.w	r3, r3, #2
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	4b31      	ldr	r3, [pc, #196]	@ (8000b7c <SystemClock_Config+0x154>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a30      	ldr	r2, [pc, #192]	@ (8000b7c <SystemClock_Config+0x154>)
 8000aba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b7c <SystemClock_Config+0x154>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	4b2b      	ldr	r3, [pc, #172]	@ (8000b78 <SystemClock_Config+0x150>)
 8000acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ace:	4a2a      	ldr	r2, [pc, #168]	@ (8000b78 <SystemClock_Config+0x150>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000ad6:	4b28      	ldr	r3, [pc, #160]	@ (8000b78 <SystemClock_Config+0x150>)
 8000ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ae2:	bf00      	nop
 8000ae4:	4b25      	ldr	r3, [pc, #148]	@ (8000b7c <SystemClock_Config+0x154>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000aec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000af0:	d1f8      	bne.n	8000ae4 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000af2:	2301      	movs	r3, #1
 8000af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000af6:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000afa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000afc:	2302      	movs	r3, #2
 8000afe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b00:	2302      	movs	r3, #2
 8000b02:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000b04:	2302      	movs	r3, #2
 8000b06:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000b08:	2340      	movs	r3, #64	@ 0x40
 8000b0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b14:	2302      	movs	r3, #2
 8000b16:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b18:	230c      	movs	r3, #12
 8000b1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f01a fd53 	bl	801b5d4 <HAL_RCC_OscConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000b34:	f000 fd05 	bl	8001542 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b38:	233f      	movs	r3, #63	@ 0x3f
 8000b3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b44:	2308      	movs	r3, #8
 8000b46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b48:	2340      	movs	r3, #64	@ 0x40
 8000b4a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b4c:	2340      	movs	r3, #64	@ 0x40
 8000b4e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b54:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b56:	2340      	movs	r3, #64	@ 0x40
 8000b58:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	2102      	movs	r1, #2
 8000b60:	4618      	mov	r0, r3
 8000b62:	f01b f991 	bl	801be88 <HAL_RCC_ClockConfig>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000b6c:	f000 fce9 	bl	8001542 <Error_Handler>
  }
}
 8000b70:	bf00      	nop
 8000b72:	3778      	adds	r7, #120	@ 0x78
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	58000400 	.word	0x58000400
 8000b7c:	58024800 	.word	0x58024800
 8000b80:	58024400 	.word	0x58024400

08000b84 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b0b0      	sub	sp, #192	@ 0xc0
 8000b88:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	22c0      	movs	r2, #192	@ 0xc0
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4618      	mov	r0, r3
 8000b92:	f01f fff4 	bl	8020b7e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI2
 8000b96:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b9a:	f04f 0300 	mov.w	r3, #0
 8000b9e:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 8;
 8000ba2:	2308      	movs	r3, #8
 8000ba4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 64;
 8000ba6:	2340      	movs	r3, #64	@ 0x40
 8000ba8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000baa:	2302      	movs	r3, #2
 8000bac:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000bb6:	2340      	movs	r3, #64	@ 0x40
 8000bb8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000bc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bc6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc8:	463b      	mov	r3, r7
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f01b fce8 	bl	801c5a0 <HAL_RCCEx_PeriphCLKConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000bd6:	f000 fcb4 	bl	8001542 <Error_Handler>
  }
}
 8000bda:	bf00      	nop
 8000bdc:	37c0      	adds	r7, #192	@ 0xc0
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000be8:	4b27      	ldr	r3, [pc, #156]	@ (8000c88 <MX_SPI1_Init+0xa4>)
 8000bea:	4a28      	ldr	r2, [pc, #160]	@ (8000c8c <MX_SPI1_Init+0xa8>)
 8000bec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bee:	4b26      	ldr	r3, [pc, #152]	@ (8000c88 <MX_SPI1_Init+0xa4>)
 8000bf0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000bf4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bf6:	4b24      	ldr	r3, [pc, #144]	@ (8000c88 <MX_SPI1_Init+0xa4>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000bfc:	4b22      	ldr	r3, [pc, #136]	@ (8000c88 <MX_SPI1_Init+0xa4>)
 8000bfe:	220f      	movs	r2, #15
 8000c00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c02:	4b21      	ldr	r3, [pc, #132]	@ (8000c88 <MX_SPI1_Init+0xa4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c08:	4b1f      	ldr	r3, [pc, #124]	@ (8000c88 <MX_SPI1_Init+0xa4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c88 <MX_SPI1_Init+0xa4>)
 8000c10:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000c14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c16:	4b1c      	ldr	r3, [pc, #112]	@ (8000c88 <MX_SPI1_Init+0xa4>)
 8000c18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c1c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c88 <MX_SPI1_Init+0xa4>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c24:	4b18      	ldr	r3, [pc, #96]	@ (8000c88 <MX_SPI1_Init+0xa4>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c2a:	4b17      	ldr	r3, [pc, #92]	@ (8000c88 <MX_SPI1_Init+0xa4>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000c30:	4b15      	ldr	r3, [pc, #84]	@ (8000c88 <MX_SPI1_Init+0xa4>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c36:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <MX_SPI1_Init+0xa4>)
 8000c38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c3c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c3e:	4b12      	ldr	r3, [pc, #72]	@ (8000c88 <MX_SPI1_Init+0xa4>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c44:	4b10      	ldr	r3, [pc, #64]	@ (8000c88 <MX_SPI1_Init+0xa4>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <MX_SPI1_Init+0xa4>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c50:	4b0d      	ldr	r3, [pc, #52]	@ (8000c88 <MX_SPI1_Init+0xa4>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_03CYCLE;
 8000c56:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <MX_SPI1_Init+0xa4>)
 8000c58:	2203      	movs	r2, #3
 8000c5a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_03CYCLE;
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <MX_SPI1_Init+0xa4>)
 8000c5e:	2230      	movs	r2, #48	@ 0x30
 8000c60:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c62:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <MX_SPI1_Init+0xa4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c68:	4b07      	ldr	r3, [pc, #28]	@ (8000c88 <MX_SPI1_Init+0xa4>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c6e:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <MX_SPI1_Init+0xa4>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c74:	4804      	ldr	r0, [pc, #16]	@ (8000c88 <MX_SPI1_Init+0xa4>)
 8000c76:	f01d fabf 	bl	801e1f8 <HAL_SPI_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000c80:	f000 fc5f 	bl	8001542 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	200000a4 	.word	0x200000a4
 8000c8c:	40013000 	.word	0x40013000

08000c90 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c94:	4b27      	ldr	r3, [pc, #156]	@ (8000d34 <MX_SPI2_Init+0xa4>)
 8000c96:	4a28      	ldr	r2, [pc, #160]	@ (8000d38 <MX_SPI2_Init+0xa8>)
 8000c98:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c9a:	4b26      	ldr	r3, [pc, #152]	@ (8000d34 <MX_SPI2_Init+0xa4>)
 8000c9c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ca0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ca2:	4b24      	ldr	r3, [pc, #144]	@ (8000d34 <MX_SPI2_Init+0xa4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000ca8:	4b22      	ldr	r3, [pc, #136]	@ (8000d34 <MX_SPI2_Init+0xa4>)
 8000caa:	220f      	movs	r2, #15
 8000cac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cae:	4b21      	ldr	r3, [pc, #132]	@ (8000d34 <MX_SPI2_Init+0xa4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d34 <MX_SPI2_Init+0xa4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000cba:	4b1e      	ldr	r3, [pc, #120]	@ (8000d34 <MX_SPI2_Init+0xa4>)
 8000cbc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000cc0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d34 <MX_SPI2_Init+0xa4>)
 8000cc4:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8000cc8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	@ (8000d34 <MX_SPI2_Init+0xa4>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cd0:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <MX_SPI2_Init+0xa4>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cd6:	4b17      	ldr	r3, [pc, #92]	@ (8000d34 <MX_SPI2_Init+0xa4>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000cdc:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <MX_SPI2_Init+0xa4>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ce2:	4b14      	ldr	r3, [pc, #80]	@ (8000d34 <MX_SPI2_Init+0xa4>)
 8000ce4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ce8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000cea:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <MX_SPI2_Init+0xa4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000cf0:	4b10      	ldr	r3, [pc, #64]	@ (8000d34 <MX_SPI2_Init+0xa4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d34 <MX_SPI2_Init+0xa4>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8000d34 <MX_SPI2_Init+0xa4>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_03CYCLE;
 8000d02:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <MX_SPI2_Init+0xa4>)
 8000d04:	2203      	movs	r2, #3
 8000d06:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_03CYCLE;
 8000d08:	4b0a      	ldr	r3, [pc, #40]	@ (8000d34 <MX_SPI2_Init+0xa4>)
 8000d0a:	2230      	movs	r2, #48	@ 0x30
 8000d0c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d0e:	4b09      	ldr	r3, [pc, #36]	@ (8000d34 <MX_SPI2_Init+0xa4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d14:	4b07      	ldr	r3, [pc, #28]	@ (8000d34 <MX_SPI2_Init+0xa4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d1a:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <MX_SPI2_Init+0xa4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d20:	4804      	ldr	r0, [pc, #16]	@ (8000d34 <MX_SPI2_Init+0xa4>)
 8000d22:	f01d fa69 	bl	801e1f8 <HAL_SPI_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8000d2c:	f000 fc09 	bl	8001542 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	2000012c 	.word	0x2000012c
 8000d38:	40003800 	.word	0x40003800

08000d3c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000d40:	4b27      	ldr	r3, [pc, #156]	@ (8000de0 <MX_SPI3_Init+0xa4>)
 8000d42:	4a28      	ldr	r2, [pc, #160]	@ (8000de4 <MX_SPI3_Init+0xa8>)
 8000d44:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d46:	4b26      	ldr	r3, [pc, #152]	@ (8000de0 <MX_SPI3_Init+0xa4>)
 8000d48:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000d4c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d4e:	4b24      	ldr	r3, [pc, #144]	@ (8000de0 <MX_SPI3_Init+0xa4>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d54:	4b22      	ldr	r3, [pc, #136]	@ (8000de0 <MX_SPI3_Init+0xa4>)
 8000d56:	2203      	movs	r2, #3
 8000d58:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d5a:	4b21      	ldr	r3, [pc, #132]	@ (8000de0 <MX_SPI3_Init+0xa4>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d60:	4b1f      	ldr	r3, [pc, #124]	@ (8000de0 <MX_SPI3_Init+0xa4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d66:	4b1e      	ldr	r3, [pc, #120]	@ (8000de0 <MX_SPI3_Init+0xa4>)
 8000d68:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000d6c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000de0 <MX_SPI3_Init+0xa4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d74:	4b1a      	ldr	r3, [pc, #104]	@ (8000de0 <MX_SPI3_Init+0xa4>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d7a:	4b19      	ldr	r3, [pc, #100]	@ (8000de0 <MX_SPI3_Init+0xa4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d80:	4b17      	ldr	r3, [pc, #92]	@ (8000de0 <MX_SPI3_Init+0xa4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000d86:	4b16      	ldr	r3, [pc, #88]	@ (8000de0 <MX_SPI3_Init+0xa4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d8c:	4b14      	ldr	r3, [pc, #80]	@ (8000de0 <MX_SPI3_Init+0xa4>)
 8000d8e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d92:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d94:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <MX_SPI3_Init+0xa4>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d9a:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <MX_SPI3_Init+0xa4>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	@ (8000de0 <MX_SPI3_Init+0xa4>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <MX_SPI3_Init+0xa4>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000dac:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <MX_SPI3_Init+0xa4>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	@ (8000de0 <MX_SPI3_Init+0xa4>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000db8:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <MX_SPI3_Init+0xa4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000dbe:	4b08      	ldr	r3, [pc, #32]	@ (8000de0 <MX_SPI3_Init+0xa4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <MX_SPI3_Init+0xa4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000dca:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <MX_SPI3_Init+0xa4>)
 8000dcc:	f01d fa14 	bl	801e1f8 <HAL_SPI_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000dd6:	f000 fbb4 	bl	8001542 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200001b4 	.word	0x200001b4
 8000de4:	40003c00 	.word	0x40003c00

08000de8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dee:	f107 0310 	add.w	r3, r7, #16
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e06:	4b1f      	ldr	r3, [pc, #124]	@ (8000e84 <MX_TIM1_Init+0x9c>)
 8000e08:	4a1f      	ldr	r2, [pc, #124]	@ (8000e88 <MX_TIM1_Init+0xa0>)
 8000e0a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e84 <MX_TIM1_Init+0x9c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e12:	4b1c      	ldr	r3, [pc, #112]	@ (8000e84 <MX_TIM1_Init+0x9c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8000e18:	4b1a      	ldr	r3, [pc, #104]	@ (8000e84 <MX_TIM1_Init+0x9c>)
 8000e1a:	22ff      	movs	r2, #255	@ 0xff
 8000e1c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1e:	4b19      	ldr	r3, [pc, #100]	@ (8000e84 <MX_TIM1_Init+0x9c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e24:	4b17      	ldr	r3, [pc, #92]	@ (8000e84 <MX_TIM1_Init+0x9c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2a:	4b16      	ldr	r3, [pc, #88]	@ (8000e84 <MX_TIM1_Init+0x9c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e30:	4814      	ldr	r0, [pc, #80]	@ (8000e84 <MX_TIM1_Init+0x9c>)
 8000e32:	f01d fdda 	bl	801e9ea <HAL_TIM_Base_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000e3c:	f000 fb81 	bl	8001542 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	480d      	ldr	r0, [pc, #52]	@ (8000e84 <MX_TIM1_Init+0x9c>)
 8000e4e:	f01d fe9b 	bl	801eb88 <HAL_TIM_ConfigClockSource>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000e58:	f000 fb73 	bl	8001542 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e5c:	2320      	movs	r3, #32
 8000e5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4805      	ldr	r0, [pc, #20]	@ (8000e84 <MX_TIM1_Init+0x9c>)
 8000e6e:	f01e f8c7 	bl	801f000 <HAL_TIMEx_MasterConfigSynchronization>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000e78:	f000 fb63 	bl	8001542 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e7c:	bf00      	nop
 8000e7e:	3720      	adds	r7, #32
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2000032c 	.word	0x2000032c
 8000e88:	40010000 	.word	0x40010000

08000e8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e92:	f107 0310 	add.w	r3, r7, #16
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8000f20 <MX_TIM3_Init+0x94>)
 8000eac:	4a1d      	ldr	r2, [pc, #116]	@ (8000f24 <MX_TIM3_Init+0x98>)
 8000eae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 199;
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f20 <MX_TIM3_Init+0x94>)
 8000eb2:	22c7      	movs	r2, #199	@ 0xc7
 8000eb4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f20 <MX_TIM3_Init+0x94>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8000ebc:	4b18      	ldr	r3, [pc, #96]	@ (8000f20 <MX_TIM3_Init+0x94>)
 8000ebe:	2209      	movs	r2, #9
 8000ec0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec2:	4b17      	ldr	r3, [pc, #92]	@ (8000f20 <MX_TIM3_Init+0x94>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec8:	4b15      	ldr	r3, [pc, #84]	@ (8000f20 <MX_TIM3_Init+0x94>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ece:	4814      	ldr	r0, [pc, #80]	@ (8000f20 <MX_TIM3_Init+0x94>)
 8000ed0:	f01d fd8b 	bl	801e9ea <HAL_TIM_Base_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000eda:	f000 fb32 	bl	8001542 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ede:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ee2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	4619      	mov	r1, r3
 8000eea:	480d      	ldr	r0, [pc, #52]	@ (8000f20 <MX_TIM3_Init+0x94>)
 8000eec:	f01d fe4c 	bl	801eb88 <HAL_TIM_ConfigClockSource>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000ef6:	f000 fb24 	bl	8001542 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	4619      	mov	r1, r3
 8000f06:	4806      	ldr	r0, [pc, #24]	@ (8000f20 <MX_TIM3_Init+0x94>)
 8000f08:	f01e f87a 	bl	801f000 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000f12:	f000 fb16 	bl	8001542 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	3720      	adds	r7, #32
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200003c4 	.word	0x200003c4
 8000f24:	40000400 	.word	0x40000400

08000f28 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f2c:	4b22      	ldr	r3, [pc, #136]	@ (8000fb8 <MX_USART3_UART_Init+0x90>)
 8000f2e:	4a23      	ldr	r2, [pc, #140]	@ (8000fbc <MX_USART3_UART_Init+0x94>)
 8000f30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f32:	4b21      	ldr	r3, [pc, #132]	@ (8000fb8 <MX_USART3_UART_Init+0x90>)
 8000f34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb8 <MX_USART3_UART_Init+0x90>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f40:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb8 <MX_USART3_UART_Init+0x90>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f46:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb8 <MX_USART3_UART_Init+0x90>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb8 <MX_USART3_UART_Init+0x90>)
 8000f4e:	220c      	movs	r2, #12
 8000f50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f52:	4b19      	ldr	r3, [pc, #100]	@ (8000fb8 <MX_USART3_UART_Init+0x90>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f58:	4b17      	ldr	r3, [pc, #92]	@ (8000fb8 <MX_USART3_UART_Init+0x90>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f5e:	4b16      	ldr	r3, [pc, #88]	@ (8000fb8 <MX_USART3_UART_Init+0x90>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f64:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <MX_USART3_UART_Init+0x90>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f6a:	4b13      	ldr	r3, [pc, #76]	@ (8000fb8 <MX_USART3_UART_Init+0x90>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f70:	4811      	ldr	r0, [pc, #68]	@ (8000fb8 <MX_USART3_UART_Init+0x90>)
 8000f72:	f01e f8d3 	bl	801f11c <HAL_UART_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f7c:	f000 fae1 	bl	8001542 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f80:	2100      	movs	r1, #0
 8000f82:	480d      	ldr	r0, [pc, #52]	@ (8000fb8 <MX_USART3_UART_Init+0x90>)
 8000f84:	f01f f8db 	bl	802013e <HAL_UARTEx_SetTxFifoThreshold>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f8e:	f000 fad8 	bl	8001542 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f92:	2100      	movs	r1, #0
 8000f94:	4808      	ldr	r0, [pc, #32]	@ (8000fb8 <MX_USART3_UART_Init+0x90>)
 8000f96:	f01f f910 	bl	80201ba <HAL_UARTEx_SetRxFifoThreshold>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000fa0:	f000 facf 	bl	8001542 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000fa4:	4804      	ldr	r0, [pc, #16]	@ (8000fb8 <MX_USART3_UART_Init+0x90>)
 8000fa6:	f01f f891 	bl	80200cc <HAL_UARTEx_DisableFifoMode>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000fb0:	f000 fac7 	bl	8001542 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000500 	.word	0x20000500
 8000fbc:	40004800 	.word	0x40004800

08000fc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fc6:	4b19      	ldr	r3, [pc, #100]	@ (800102c <MX_DMA_Init+0x6c>)
 8000fc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fcc:	4a17      	ldr	r2, [pc, #92]	@ (800102c <MX_DMA_Init+0x6c>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000fd6:	4b15      	ldr	r3, [pc, #84]	@ (800102c <MX_DMA_Init+0x6c>)
 8000fd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2106      	movs	r1, #6
 8000fe8:	200b      	movs	r0, #11
 8000fea:	f018 f954 	bl	8019296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000fee:	200b      	movs	r0, #11
 8000ff0:	f018 f96b 	bl	80192ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2106      	movs	r1, #6
 8000ff8:	200c      	movs	r0, #12
 8000ffa:	f018 f94c 	bl	8019296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ffe:	200c      	movs	r0, #12
 8001000:	f018 f963 	bl	80192ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 7, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	2107      	movs	r1, #7
 8001008:	200d      	movs	r0, #13
 800100a:	f018 f944 	bl	8019296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800100e:	200d      	movs	r0, #13
 8001010:	f018 f95b 	bl	80192ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 7, 0);
 8001014:	2200      	movs	r2, #0
 8001016:	2107      	movs	r1, #7
 8001018:	200e      	movs	r0, #14
 800101a:	f018 f93c 	bl	8019296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800101e:	200e      	movs	r0, #14
 8001020:	f018 f953 	bl	80192ca <HAL_NVIC_EnableIRQ>

}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	58024400 	.word	0x58024400

08001030 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001030:	b480      	push	{r7}
 8001032:	b087      	sub	sp, #28
 8001034:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001036:	4b28      	ldr	r3, [pc, #160]	@ (80010d8 <MX_GPIO_Init+0xa8>)
 8001038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103c:	4a26      	ldr	r2, [pc, #152]	@ (80010d8 <MX_GPIO_Init+0xa8>)
 800103e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001042:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001046:	4b24      	ldr	r3, [pc, #144]	@ (80010d8 <MX_GPIO_Init+0xa8>)
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800104c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001050:	617b      	str	r3, [r7, #20]
 8001052:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001054:	4b20      	ldr	r3, [pc, #128]	@ (80010d8 <MX_GPIO_Init+0xa8>)
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105a:	4a1f      	ldr	r2, [pc, #124]	@ (80010d8 <MX_GPIO_Init+0xa8>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001064:	4b1c      	ldr	r3, [pc, #112]	@ (80010d8 <MX_GPIO_Init+0xa8>)
 8001066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b19      	ldr	r3, [pc, #100]	@ (80010d8 <MX_GPIO_Init+0xa8>)
 8001074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001078:	4a17      	ldr	r2, [pc, #92]	@ (80010d8 <MX_GPIO_Init+0xa8>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001082:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <MX_GPIO_Init+0xa8>)
 8001084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001090:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <MX_GPIO_Init+0xa8>)
 8001092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001096:	4a10      	ldr	r2, [pc, #64]	@ (80010d8 <MX_GPIO_Init+0xa8>)
 8001098:	f043 0302 	orr.w	r3, r3, #2
 800109c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010a0:	4b0d      	ldr	r3, [pc, #52]	@ (80010d8 <MX_GPIO_Init+0xa8>)
 80010a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ae:	4b0a      	ldr	r3, [pc, #40]	@ (80010d8 <MX_GPIO_Init+0xa8>)
 80010b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b4:	4a08      	ldr	r2, [pc, #32]	@ (80010d8 <MX_GPIO_Init+0xa8>)
 80010b6:	f043 0308 	orr.w	r3, r3, #8
 80010ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010be:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <MX_GPIO_Init+0xa8>)
 80010c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010cc:	bf00      	nop
 80010ce:	371c      	adds	r7, #28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	58024400 	.word	0x58024400

080010dc <vHeapInit>:
static uint8_t ucRAM_3 [ 32 * 1024] __attribute__( ( section( ".ram3_data" ) ) );

#define mainMEM_REGION( REGION )   REGION, sizeof( REGION )

static void vHeapInit( )
{
 80010dc:	b5b0      	push	{r4, r5, r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0
	/* Note: the memories must be sorted on their physical address. */
	HeapRegion_t xHeapRegions[] = {
 80010e2:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <vHeapInit+0x28>)
 80010e4:	463c      	mov	r4, r7
 80010e6:	461d      	mov	r5, r3
 80010e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80010f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//		{ mainMEM_REGION( ucRAM_2 ) },
		{ mainMEM_REGION( ucRAM_3 ) },
		{ NULL, 0 }
		};

	vPortDefineHeapRegions( xHeapRegions );
 80010f4:	463b      	mov	r3, r7
 80010f6:	4618      	mov	r0, r3
 80010f8:	f004 fb8c 	bl	8005814 <vPortDefineHeapRegions>
}
 80010fc:	bf00      	nop
 80010fe:	3720      	adds	r7, #32
 8001100:	46bd      	mov	sp, r7
 8001102:	bdb0      	pop	{r4, r5, r7, pc}
 8001104:	0802268c 	.word	0x0802268c

08001108 <ulGetRunTimeCounterValue>:


// helper functions

uint32_t ulGetRunTimeCounterValue()
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
	return 0U;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <vAssertCalled>:

void vAssertCalled( const char *pcFile, uint32_t ulLine )
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
volatile unsigned long ul = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]

	( void ) pcFile;
	( void ) ulLine;

	taskENTER_CRITICAL();
 8001126:	f004 f8db 	bl	80052e0 <vPortEnterCritical>
	{
		/* Set ul to a non-zero value using the debugger to step out of this
		function. */
		while( ul == 0 )
 800112a:	e000      	b.n	800112e <vAssertCalled+0x16>
		{
			__NOP();
 800112c:	bf00      	nop
		while( ul == 0 )
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0fb      	beq.n	800112c <vAssertCalled+0x14>
		}
	}
	taskEXIT_CRITICAL();
 8001134:	f004 f900 	bl	8005338 <vPortExitCritical>
}
 8001138:	bf00      	nop
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook( void )
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

	/* Force an assert. */
	configASSERT( ( volatile void * ) NULL );
 8001144:	f44f 7162 	mov.w	r1, #904	@ 0x388
 8001148:	4802      	ldr	r0, [pc, #8]	@ (8001154 <vApplicationMallocFailedHook+0x14>)
 800114a:	f7ff ffe5 	bl	8001118 <vAssertCalled>
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	080226ac 	.word	0x080226ac

08001158 <ulApplicationGetNextSequenceNumber>:
uint32_t ulApplicationGetNextSequenceNumber(
    uint32_t ulSourceAddress,
    uint16_t usSourcePort,
    uint32_t ulDestinationAddress,
    uint16_t usDestinationPort )
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	461a      	mov	r2, r3
 8001164:	460b      	mov	r3, r1
 8001166:	817b      	strh	r3, [r7, #10]
 8001168:	4613      	mov	r3, r2
 800116a:	813b      	strh	r3, [r7, #8]
	uint32_t ulReturn;
	( void ) ulSourceAddress;
	( void ) usSourcePort;
	( void ) ulDestinationAddress;
	( void ) usDestinationPort;
	xApplicationGetRandomNumber( &ulReturn );
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	4618      	mov	r0, r3
 8001172:	f000 f89b 	bl	80012ac <xApplicationGetRandomNumber>

	return ulReturn;
 8001176:	697b      	ldr	r3, [r7, #20]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <vApplicationIPNetworkEventHook>:

void vApplicationIPNetworkEventHook( eIPCallbackEvent_t eNetworkEvent )
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	@ 0x28
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
	/* If the network has just come up...*/
	if( eNetworkEvent == eNetworkUp )
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d147      	bne.n	8001220 <vApplicationIPNetworkEventHook+0xa0>
	uint32_t ulIPAddress, ulNetMask, ulGatewayAddress, ulDNSServerAddress;
	char cBuffer[ 16 ];

		/* Create the tasks that use the IP stack if they have not already been
		created. */
		if( xTasksAlreadyCreated == pdFALSE )
 8001190:	4b25      	ldr	r3, [pc, #148]	@ (8001228 <vApplicationIPNetworkEventHook+0xa8>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d105      	bne.n	80011a4 <vApplicationIPNetworkEventHook+0x24>
		{
			xTasksAlreadyCreated = pdTRUE;
 8001198:	4b23      	ldr	r3, [pc, #140]	@ (8001228 <vApplicationIPNetworkEventHook+0xa8>)
 800119a:	2201      	movs	r2, #1
 800119c:	601a      	str	r2, [r3, #0]
			/* Sockets, and tasks that use the TCP/IP stack can be created here. */
//
			xDoCreateSockets = pdTRUE;
 800119e:	4b23      	ldr	r3, [pc, #140]	@ (800122c <vApplicationIPNetworkEventHook+0xac>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	601a      	str	r2, [r3, #0]
		}
		/* Print out the network configuration, which may have come from a DHCP
		server. */
		FreeRTOS_GetAddressConfiguration( &ulIPAddress, &ulNetMask, &ulGatewayAddress, &ulDNSServerAddress );
 80011a4:	f107 0318 	add.w	r3, r7, #24
 80011a8:	f107 021c 	add.w	r2, r7, #28
 80011ac:	f107 0120 	add.w	r1, r7, #32
 80011b0:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80011b4:	f007 fadc 	bl	8008770 <FreeRTOS_GetAddressConfiguration>
		FreeRTOS_inet_ntoa( ulIPAddress, cBuffer );
 80011b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ba:	f107 0208 	add.w	r2, r7, #8
 80011be:	4611      	mov	r1, r2
 80011c0:	4618      	mov	r0, r3
 80011c2:	f00d f8d9 	bl	800e378 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "IP Address: %s\n", cBuffer ) );
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	4619      	mov	r1, r3
 80011cc:	4818      	ldr	r0, [pc, #96]	@ (8001230 <vApplicationIPNetworkEventHook+0xb0>)
 80011ce:	f01f f9ad 	bl	802052c <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulNetMask, cBuffer );
 80011d2:	6a3b      	ldr	r3, [r7, #32]
 80011d4:	f107 0208 	add.w	r2, r7, #8
 80011d8:	4611      	mov	r1, r2
 80011da:	4618      	mov	r0, r3
 80011dc:	f00d f8cc 	bl	800e378 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "Subnet Mask: %s\n", cBuffer ) );
 80011e0:	f107 0308 	add.w	r3, r7, #8
 80011e4:	4619      	mov	r1, r3
 80011e6:	4813      	ldr	r0, [pc, #76]	@ (8001234 <vApplicationIPNetworkEventHook+0xb4>)
 80011e8:	f01f f9a0 	bl	802052c <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulGatewayAddress, cBuffer );
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f107 0208 	add.w	r2, r7, #8
 80011f2:	4611      	mov	r1, r2
 80011f4:	4618      	mov	r0, r3
 80011f6:	f00d f8bf 	bl	800e378 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "Gateway Address: %s\n", cBuffer ) );
 80011fa:	f107 0308 	add.w	r3, r7, #8
 80011fe:	4619      	mov	r1, r3
 8001200:	480d      	ldr	r0, [pc, #52]	@ (8001238 <vApplicationIPNetworkEventHook+0xb8>)
 8001202:	f01f f993 	bl	802052c <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulDNSServerAddress, cBuffer );
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	f107 0208 	add.w	r2, r7, #8
 800120c:	4611      	mov	r1, r2
 800120e:	4618      	mov	r0, r3
 8001210:	f00d f8b2 	bl	800e378 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "DNS Server Address: %s\n", cBuffer ) );
 8001214:	f107 0308 	add.w	r3, r7, #8
 8001218:	4619      	mov	r1, r3
 800121a:	4808      	ldr	r0, [pc, #32]	@ (800123c <vApplicationIPNetworkEventHook+0xbc>)
 800121c:	f01f f986 	bl	802052c <lUDPLoggingPrintf>
	}
}
 8001220:	bf00      	nop
 8001222:	3728      	adds	r7, #40	@ 0x28
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000a5c 	.word	0x20000a5c
 800122c:	20000a60 	.word	0x20000a60
 8001230:	080226c0 	.word	0x080226c0
 8001234:	080226d0 	.word	0x080226d0
 8001238:	080226e4 	.word	0x080226e4
 800123c:	080226fc 	.word	0x080226fc

08001240 <xApplicationDNSQueryHook>:
/*-----------------------------------------------------------*/

BaseType_t xApplicationDNSQueryHook( const char *pcName )
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFAIL;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]

	/* Determine if a name lookup is for this node.  Two names are given
	to this node: that returned by pcApplicationHostnameHook() and that set
	by mainDEVICE_NICK_NAME. */
	if( strcasecmp( pcName, pcApplicationHostnameHook() ) == 0 )
 800124c:	f000 f810 	bl	8001270 <pcApplicationHostnameHook>
 8001250:	4603      	mov	r3, r0
 8001252:	4619      	mov	r1, r3
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f020 fb45 	bl	80218e4 <strcasecmp>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <xApplicationDNSQueryHook+0x24>
	{
		xReturn = pdPASS;
 8001260:	2301      	movs	r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
	}
	return xReturn;
 8001264:	68fb      	ldr	r3, [r7, #12]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <pcApplicationHostnameHook>:
/*-----------------------------------------------------------*/

const char *pcApplicationHostnameHook( void )
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
	/* Assign the name "STM32H7" to this network node.  This function will be
	called during the DHCP: the machine will be registered with an IP address
	plus this name. */
	return "STM32H7";
 8001274:	4b02      	ldr	r3, [pc, #8]	@ (8001280 <pcApplicationHostnameHook+0x10>)
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	08022714 	.word	0x08022714

08001284 <vApplicationPingReplyHook>:
/*-----------------------------------------------------------*/

#if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
	void vApplicationPingReplyHook( ePingReplyStatus_t eStatus, uint16_t usIdentifier )
	{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	460a      	mov	r2, r1
 800128e:	71fb      	strb	r3, [r7, #7]
 8001290:	4613      	mov	r3, r2
 8001292:	80bb      	strh	r3, [r7, #4]
		FreeRTOS_printf( ( "Received ping ID %04X\n", usIdentifier ) );
 8001294:	88bb      	ldrh	r3, [r7, #4]
 8001296:	4619      	mov	r1, r3
 8001298:	4803      	ldr	r0, [pc, #12]	@ (80012a8 <vApplicationPingReplyHook+0x24>)
 800129a:	f01f f947 	bl	802052c <lUDPLoggingPrintf>
	}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	0802271c 	.word	0x0802271c

080012ac <xApplicationGetRandomNumber>:
#endif

/*-----------------------------------------------------------*/

BaseType_t xApplicationGetRandomNumber( uint32_t *pulNumber ){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	*pulNumber = rand();
 80012b4:	f020 f9a8 	bl	8021608 <rand>
 80012b8:	4603      	mov	r3, r0
 80012ba:	461a      	mov	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	601a      	str	r2, [r3, #0]
	return pdTRUE;
 80012c0:	2301      	movs	r3, #1
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <prvGetRegistersFromStack>:
};

volatile struct xREGISTER_STACK *pxRegisterStack = NULL;

void prvGetRegistersFromStack( uint32_t * pulFaultStackAddress )
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	/* When the debuggger stops here, you can inspect the registeers of the
	application by looking at *pxRegisterStack. */
	pxRegisterStack = ( volatile struct xREGISTER_STACK * )
		( pulFaultStackAddress - ARRAY_SIZE( pxRegisterStack->spare0 ) );
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b20      	subs	r3, #32
	pxRegisterStack = ( volatile struct xREGISTER_STACK * )
 80012d8:	4a01      	ldr	r2, [pc, #4]	@ (80012e0 <prvGetRegistersFromStack+0x14>)
 80012da:	6013      	str	r3, [r2, #0]

	/* When the following line is hit, the variables contain the register values. */
	for( ;; );
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <prvGetRegistersFromStack+0x10>
 80012e0:	20000a6c 	.word	0x20000a6c

080012e4 <HardFault_Handler>:
}

void HardFault_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
	__asm volatile
 80012e8:	f01e 0f04 	tst.w	lr, #4
 80012ec:	bf0c      	ite	eq
 80012ee:	f3ef 8008 	mrseq	r0, MSP
 80012f2:	f3ef 8009 	mrsne	r0, PSP
 80012f6:	6981      	ldr	r1, [r0, #24]
 80012f8:	f7ff ffe8 	bl	80012cc <prvGetRegistersFromStack>
		" mrseq r0, msp                                             \n"
		" mrsne r0, psp                                             \n"
		" ldr r1, [r0, #24]                                         \n"
		" bl prvGetRegistersFromStack                               \n"
	);
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <prvServerWorkTask>:



static void prvServerWorkTask( void *pvParameters )
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	TickType_t uxBlockTimeTicks = ipMS_TO_MIN_TICKS( 100U );
#endif	/* ( CONTINUOUS_PING != 0 ) */

	for( ;; )
	{
		vTaskDelay( 10U );
 8001310:	200a      	movs	r0, #10
 8001312:	f002 f8b1 	bl	8003478 <vTaskDelay>
		if( xDoCreateSockets != pdFALSE )
 8001316:	4b05      	ldr	r3, [pc, #20]	@ (800132c <prvServerWorkTask+0x24>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f8      	beq.n	8001310 <prvServerWorkTask+0x8>
		{
			xDoCreateSockets = pdFALSE;
 800131e:	4b03      	ldr	r3, [pc, #12]	@ (800132c <prvServerWorkTask+0x24>)
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
			/* Start a new task to fetch logging lines and send them out.
			See FreeRTOSConfig.h for the configuration of UDP logging. */
			vUDPLoggingTaskCreate();
 8001324:	f01f f91e 	bl	8020564 <vUDPLoggingTaskCreate>
		vTaskDelay( 10U );
 8001328:	e7f2      	b.n	8001310 <prvServerWorkTask+0x8>
 800132a:	bf00      	nop
 800132c:	20000a60 	.word	0x20000a60

08001330 <vADCTCPTask>:

}



static void vADCTCPTask(void *pvParameters) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b098      	sub	sp, #96	@ 0x60
 8001334:	af02      	add	r7, sp, #8
 8001336:	6078      	str	r0, [r7, #4]
    Socket_t xSocket;
    static const TickType_t xTimeOut = pdMS_TO_TICKS( 500 );
    struct freertos_sockaddr xRemoteAddress;
    BaseType_t xAlreadyTransmitted, xBytesSent;
    char *pcBufferToTransmit;
    const size_t xTotalLengthToSend = sizeof(usADCDataMock0);
 8001338:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800133c:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint32_t ulCurrBuf;

    /* Remote address setup */
    memset(&xRemoteAddress, 0, sizeof(xRemoteAddress));
 800133e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001342:	2218      	movs	r2, #24
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f01f fc19 	bl	8020b7e <memset>
    xRemoteAddress.sin_port = FreeRTOS_htons(usADCPort);
 800134c:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	b21a      	sxth	r2, r3
 8001354:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 8001358:	0a1b      	lsrs	r3, r3, #8
 800135a:	b29b      	uxth	r3, r3
 800135c:	b21b      	sxth	r3, r3
 800135e:	4313      	orrs	r3, r2
 8001360:	b21b      	sxth	r3, r3
 8001362:	b29b      	uxth	r3, r3
 8001364:	84fb      	strh	r3, [r7, #38]	@ 0x26
    xRemoteAddress.sin_address.ulIP_IPv4 = FreeRTOS_inet_addr_quick(ucServerIPAddress[0], ucServerIPAddress[1], ucServerIPAddress[2], ucServerIPAddress[3]);
 8001366:	2303      	movs	r3, #3
 8001368:	061a      	lsls	r2, r3, #24
 800136a:	2301      	movs	r3, #1
 800136c:	041b      	lsls	r3, r3, #16
 800136e:	431a      	orrs	r2, r3
 8001370:	23a8      	movs	r3, #168	@ 0xa8
 8001372:	021b      	lsls	r3, r3, #8
 8001374:	4313      	orrs	r3, r2
 8001376:	22c0      	movs	r2, #192	@ 0xc0
 8001378:	4313      	orrs	r3, r2
 800137a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    xRemoteAddress.sin_family = FREERTOS_AF_INET4;
 800137c:	2302      	movs	r3, #2
 800137e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    for(;;) {
        /* Create new socket for each transmission */
	xSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 8001382:	2206      	movs	r2, #6
 8001384:	2101      	movs	r1, #1
 8001386:	2002      	movs	r0, #2
 8001388:	f00b feea 	bl	800d160 <FreeRTOS_socket>
 800138c:	6478      	str	r0, [r7, #68]	@ 0x44
	  WinProperties_t xWinProperties;

	  memset(&xWinProperties, '\0', sizeof xWinProperties);
 800138e:	f107 0310 	add.w	r3, r7, #16
 8001392:	2210      	movs	r2, #16
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f01f fbf1 	bl	8020b7e <memset>

	  xWinProperties.lTxBufSize   = ipconfigIPERF_TX_BUFSIZE;	/* Units of bytes. */
 800139c:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 80013a0:	613b      	str	r3, [r7, #16]
	  xWinProperties.lTxWinSize   = ipconfigIPERF_TX_WINSIZE;	/* Size in units of MSS */
 80013a2:	230c      	movs	r3, #12
 80013a4:	617b      	str	r3, [r7, #20]
	  xWinProperties.lRxBufSize   = ipconfigIPERF_RX_BUFSIZE;	/* Units of bytes. */
 80013a6:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 80013aa:	61bb      	str	r3, [r7, #24]
	  xWinProperties.lRxWinSize   = ipconfigIPERF_RX_WINSIZE; /* Size in units of MSS */
 80013ac:	230c      	movs	r3, #12
 80013ae:	61fb      	str	r3, [r7, #28]

	  /* Set send and receive time outs. */
	  FreeRTOS_setsockopt( xSocket,
 80013b0:	2304      	movs	r3, #4
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	4b48      	ldr	r3, [pc, #288]	@ (80014d8 <vADCTCPTask+0x1a8>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80013bc:	f00c fe8a 	bl	800e0d4 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_RCVTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket,
 80013c0:	2304      	movs	r3, #4
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	4b44      	ldr	r3, [pc, #272]	@ (80014d8 <vADCTCPTask+0x1a8>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	2100      	movs	r1, #0
 80013ca:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80013cc:	f00c fe82 	bl	800e0d4 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_SNDTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_WIN_PROPERTIES, ( void * ) &xWinProperties, sizeof( xWinProperties ) );
 80013d0:	f107 0310 	add.w	r3, r7, #16
 80013d4:	2210      	movs	r2, #16
 80013d6:	9200      	str	r2, [sp, #0]
 80013d8:	220d      	movs	r2, #13
 80013da:	2100      	movs	r1, #0
 80013dc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80013de:	f00c fe79 	bl	800e0d4 <FreeRTOS_setsockopt>


        configASSERT(xSocket != FREERTOS_INVALID_SOCKET);
 80013e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e8:	d104      	bne.n	80013f4 <vADCTCPTask+0xc4>
 80013ea:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 80013ee:	483b      	ldr	r0, [pc, #236]	@ (80014dc <vADCTCPTask+0x1ac>)
 80013f0:	f7ff fe92 	bl	8001118 <vAssertCalled>
        /* Block indefinitely (without a timeout, so no need to check the function's
	   return value) to wait for a notification. NOTE! Real applications
	   should not block indefinitely, but instead time out occasionally in order
	   to handle error conditions that may prevent the interrupt from sending
	   any more notifications. */
	xTaskNotifyWait( 0x00,               /* Don't clear any bits on entry. */
 80013f4:	f107 0320 	add.w	r3, r7, #32
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295
 80013fc:	9200      	str	r2, [sp, #0]
 80013fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001402:	2100      	movs	r1, #0
 8001404:	2000      	movs	r0, #0
 8001406:	f003 f9c1 	bl	800478c <xTaskGenericNotifyWait>
			 0xffffffff,          /* Clear all bits on exit. */
			&ulCurrBuf, /* Receives the notification value. */
			portMAX_DELAY );    /* Block indefinitely. */
	if ((ulCurrBuf & 1) != 0){
 800140a:	6a3b      	ldr	r3, [r7, #32]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	2b00      	cmp	r3, #0
 8001412:	d002      	beq.n	800141a <vADCTCPTask+0xea>
	    pcBufferToTransmit = usADCDataMock1;
 8001414:	4b32      	ldr	r3, [pc, #200]	@ (80014e0 <vADCTCPTask+0x1b0>)
 8001416:	653b      	str	r3, [r7, #80]	@ 0x50
 8001418:	e001      	b.n	800141e <vADCTCPTask+0xee>
	} else {
	    pcBufferToTransmit = usADCDataMock0;
 800141a:	4b32      	ldr	r3, [pc, #200]	@ (80014e4 <vADCTCPTask+0x1b4>)
 800141c:	653b      	str	r3, [r7, #80]	@ 0x50
	}
//        HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
        xAlreadyTransmitted = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	657b      	str	r3, [r7, #84]	@ 0x54
        xBytesSent = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	643b      	str	r3, [r7, #64]	@ 0x40
//        FreeRTOS_printf(("Start Mock Transmission \n"));

        if(FreeRTOS_connect(xSocket, &xRemoteAddress, sizeof(xRemoteAddress)) == 0) {
 8001426:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800142a:	2218      	movs	r2, #24
 800142c:	4619      	mov	r1, r3
 800142e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001430:	f00d f9ee 	bl	800e810 <FreeRTOS_connect>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d139      	bne.n	80014ae <vADCTCPTask+0x17e>
        while( xAlreadyTransmitted < xTotalLengthToSend )
 800143a:	e030      	b.n	800149e <vADCTCPTask+0x16e>
                {
                    BaseType_t xAvlSpace = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
                    BaseType_t xBytesToSend = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       buffer that is passed into, rather than copied into, the FreeRTOS_send()
                       function. */

                    /* Obtain the pointer to the current head of sockets TX stream buffer
                       using FreeRTOS_get_tx_head */
                    pucTCPZeroCopyStrmBuffer = FreeRTOS_get_tx_head( xSocket, &xAvlSpace );
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	4619      	mov	r1, r3
 800144a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800144c:	f00d fbc9 	bl	800ebe2 <FreeRTOS_get_tx_head>
 8001450:	63f8      	str	r0, [r7, #60]	@ 0x3c
//                    FreeRTOS_printf(("xSocket Available Space: %d \n", xAvlSpace));

                    if(pucTCPZeroCopyStrmBuffer)
 8001452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001454:	2b00      	cmp	r3, #0
 8001456:	d027      	beq.n	80014a8 <vADCTCPTask+0x178>
                    {
                        /* Check if there is enough space in the stream buffer to place
                           the entire data. */
                        if((xTotalLengthToSend - xAlreadyTransmitted) > xAvlSpace)
 8001458:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800145a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	4293      	cmp	r3, r2
 8001462:	d902      	bls.n	800146a <vADCTCPTask+0x13a>
                        {
                            xBytesToSend = xAvlSpace;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001468:	e003      	b.n	8001472 <vADCTCPTask+0x142>
                        }
                        else
                        {
                            xBytesToSend = (xTotalLengthToSend - xAlreadyTransmitted);
 800146a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800146c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        }
                        memcpy( pucTCPZeroCopyStrmBuffer,
 8001472:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001474:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001476:	4413      	add	r3, r2
 8001478:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800147a:	4619      	mov	r1, r3
 800147c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800147e:	f01f fa71 	bl	8020964 <memcpy>
                        break;
                    }

                    /* Call the FreeRTOS_send with buffer as NULL indicating to the stack
                       that its a zero copy */
                    xBytesSent = FreeRTOS_send( /* The socket being sent to. */
 8001482:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001484:	2300      	movs	r3, #0
 8001486:	2100      	movs	r1, #0
 8001488:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800148a:	f00d fcb5 	bl	800edf8 <FreeRTOS_send>
 800148e:	6438      	str	r0, [r7, #64]	@ 0x40
                                                /* The remaining length of data to send. */
                                                xBytesToSend,
                                                /* ulFlags. */
                                                0 );

                    if( xBytesSent >= 0 )
 8001490:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001492:	2b00      	cmp	r3, #0
 8001494:	db0a      	blt.n	80014ac <vADCTCPTask+0x17c>
                    {
                        /* Data was sent successfully. */
                        xAlreadyTransmitted += xBytesSent;
 8001496:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001498:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800149a:	4413      	add	r3, r2
 800149c:	657b      	str	r3, [r7, #84]	@ 0x54
        while( xAlreadyTransmitted < xTotalLengthToSend )
 800149e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d8ca      	bhi.n	800143c <vADCTCPTask+0x10c>
 80014a6:	e002      	b.n	80014ae <vADCTCPTask+0x17e>
                        break;
 80014a8:	bf00      	nop
 80014aa:	e000      	b.n	80014ae <vADCTCPTask+0x17e>
                    }
                    else
                    {
                        /* Error - break out of the loop for graceful socket close. */
                        break;
 80014ac:	bf00      	nop
                }
        }


        /* Cleanup after each transmission */
        FreeRTOS_shutdown(xSocket, FREERTOS_SHUT_RDWR);
 80014ae:	2102      	movs	r1, #2
 80014b0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80014b2:	f00d fd50 	bl	800ef56 <FreeRTOS_shutdown>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 80014b6:	e002      	b.n	80014be <vADCTCPTask+0x18e>
            vTaskDelay(pdMS_TO_TICKS(1));
 80014b8:	2001      	movs	r0, #1
 80014ba:	f001 ffdd 	bl	8003478 <vTaskDelay>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 80014be:	2300      	movs	r3, #0
 80014c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80014c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80014c4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80014c6:	f00d faf7 	bl	800eab8 <FreeRTOS_recv>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	daf3      	bge.n	80014b8 <vADCTCPTask+0x188>
        }
        FreeRTOS_closesocket(xSocket);
 80014d0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80014d2:	f00c fa09 	bl	800d8e8 <FreeRTOS_closesocket>
    for(;;) {
 80014d6:	e754      	b.n	8001382 <vADCTCPTask+0x52>
 80014d8:	08025b78 	.word	0x08025b78
 80014dc:	080226ac 	.word	0x080226ac
 80014e0:	30010000 	.word	0x30010000
 80014e4:	30000000 	.word	0x30000000

080014e8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80014ee:	463b      	mov	r3, r7
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80014fa:	f017 ff01 	bl	8019300 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80014fe:	2301      	movs	r3, #1
 8001500:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001502:	2300      	movs	r3, #0
 8001504:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8001506:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 800150a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 800150c:	2312      	movs	r3, #18
 800150e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001510:	2300      	movs	r3, #0
 8001512:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001514:	2301      	movs	r3, #1
 8001516:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001518:	2303      	movs	r3, #3
 800151a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001520:	2301      	movs	r3, #1
 8001522:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001528:	2300      	movs	r3, #0
 800152a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800152c:	463b      	mov	r3, r7
 800152e:	4618      	mov	r0, r3
 8001530:	f017 ff1e 	bl	8019370 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001534:	2004      	movs	r0, #4
 8001536:	f017 fefb 	bl	8019330 <HAL_MPU_Enable>

}
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001546:	b672      	cpsid	i
}
 8001548:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800154a:	bf00      	nop
 800154c:	e7fd      	b.n	800154a <Error_Handler+0x8>
	...

08001550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001556:	4b0a      	ldr	r3, [pc, #40]	@ (8001580 <HAL_MspInit+0x30>)
 8001558:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800155c:	4a08      	ldr	r2, [pc, #32]	@ (8001580 <HAL_MspInit+0x30>)
 800155e:	f043 0302 	orr.w	r3, r3, #2
 8001562:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001566:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <HAL_MspInit+0x30>)
 8001568:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	607b      	str	r3, [r7, #4]
 8001572:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	58024400 	.word	0x58024400

08001584 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08e      	sub	sp, #56	@ 0x38
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a51      	ldr	r2, [pc, #324]	@ (80016e8 <HAL_ETH_MspInit+0x164>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	f040 809b 	bne.w	80016de <HAL_ETH_MspInit+0x15a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80015a8:	4b50      	ldr	r3, [pc, #320]	@ (80016ec <HAL_ETH_MspInit+0x168>)
 80015aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015ae:	4a4f      	ldr	r2, [pc, #316]	@ (80016ec <HAL_ETH_MspInit+0x168>)
 80015b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015b4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80015b8:	4b4c      	ldr	r3, [pc, #304]	@ (80016ec <HAL_ETH_MspInit+0x168>)
 80015ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015c2:	623b      	str	r3, [r7, #32]
 80015c4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80015c6:	4b49      	ldr	r3, [pc, #292]	@ (80016ec <HAL_ETH_MspInit+0x168>)
 80015c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015cc:	4a47      	ldr	r2, [pc, #284]	@ (80016ec <HAL_ETH_MspInit+0x168>)
 80015ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015d2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80015d6:	4b45      	ldr	r3, [pc, #276]	@ (80016ec <HAL_ETH_MspInit+0x168>)
 80015d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015e0:	61fb      	str	r3, [r7, #28]
 80015e2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80015e4:	4b41      	ldr	r3, [pc, #260]	@ (80016ec <HAL_ETH_MspInit+0x168>)
 80015e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015ea:	4a40      	ldr	r2, [pc, #256]	@ (80016ec <HAL_ETH_MspInit+0x168>)
 80015ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015f0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80015f4:	4b3d      	ldr	r3, [pc, #244]	@ (80016ec <HAL_ETH_MspInit+0x168>)
 80015f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fe:	61bb      	str	r3, [r7, #24]
 8001600:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001602:	4b3a      	ldr	r3, [pc, #232]	@ (80016ec <HAL_ETH_MspInit+0x168>)
 8001604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001608:	4a38      	ldr	r2, [pc, #224]	@ (80016ec <HAL_ETH_MspInit+0x168>)
 800160a:	f043 0304 	orr.w	r3, r3, #4
 800160e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001612:	4b36      	ldr	r3, [pc, #216]	@ (80016ec <HAL_ETH_MspInit+0x168>)
 8001614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001620:	4b32      	ldr	r3, [pc, #200]	@ (80016ec <HAL_ETH_MspInit+0x168>)
 8001622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001626:	4a31      	ldr	r2, [pc, #196]	@ (80016ec <HAL_ETH_MspInit+0x168>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001630:	4b2e      	ldr	r3, [pc, #184]	@ (80016ec <HAL_ETH_MspInit+0x168>)
 8001632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163e:	4b2b      	ldr	r3, [pc, #172]	@ (80016ec <HAL_ETH_MspInit+0x168>)
 8001640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001644:	4a29      	ldr	r2, [pc, #164]	@ (80016ec <HAL_ETH_MspInit+0x168>)
 8001646:	f043 0302 	orr.w	r3, r3, #2
 800164a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800164e:	4b27      	ldr	r3, [pc, #156]	@ (80016ec <HAL_ETH_MspInit+0x168>)
 8001650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800165c:	2332      	movs	r3, #50	@ 0x32
 800165e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800166c:	230b      	movs	r3, #11
 800166e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001670:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001674:	4619      	mov	r1, r3
 8001676:	481e      	ldr	r0, [pc, #120]	@ (80016f0 <HAL_ETH_MspInit+0x16c>)
 8001678:	f019 fdc2 	bl	801b200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800167c:	2386      	movs	r3, #134	@ 0x86
 800167e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	2302      	movs	r3, #2
 8001682:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001688:	2300      	movs	r3, #0
 800168a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800168c:	230b      	movs	r3, #11
 800168e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001690:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001694:	4619      	mov	r1, r3
 8001696:	4817      	ldr	r0, [pc, #92]	@ (80016f4 <HAL_ETH_MspInit+0x170>)
 8001698:	f019 fdb2 	bl	801b200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800169c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80016a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2300      	movs	r3, #0
 80016ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016ae:	230b      	movs	r3, #11
 80016b0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016b6:	4619      	mov	r1, r3
 80016b8:	480f      	ldr	r0, [pc, #60]	@ (80016f8 <HAL_ETH_MspInit+0x174>)
 80016ba:	f019 fda1 	bl	801b200 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2105      	movs	r1, #5
 80016c2:	203d      	movs	r0, #61	@ 0x3d
 80016c4:	f017 fde7 	bl	8019296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80016c8:	203d      	movs	r0, #61	@ 0x3d
 80016ca:	f017 fdfe 	bl	80192ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2105      	movs	r1, #5
 80016d2:	203e      	movs	r0, #62	@ 0x3e
 80016d4:	f017 fddf 	bl	8019296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 80016d8:	203e      	movs	r0, #62	@ 0x3e
 80016da:	f017 fdf6 	bl	80192ca <HAL_NVIC_EnableIRQ>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 80016de:	bf00      	nop
 80016e0:	3738      	adds	r7, #56	@ 0x38
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40028000 	.word	0x40028000
 80016ec:	58024400 	.word	0x58024400
 80016f0:	58020800 	.word	0x58020800
 80016f4:	58020000 	.word	0x58020000
 80016f8:	58020400 	.word	0x58020400

080016fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b090      	sub	sp, #64	@ 0x40
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a88      	ldr	r2, [pc, #544]	@ (800193c <HAL_SPI_MspInit+0x240>)
 800171a:	4293      	cmp	r3, r2
 800171c:	f040 8083 	bne.w	8001826 <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001720:	4b87      	ldr	r3, [pc, #540]	@ (8001940 <HAL_SPI_MspInit+0x244>)
 8001722:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001726:	4a86      	ldr	r2, [pc, #536]	@ (8001940 <HAL_SPI_MspInit+0x244>)
 8001728:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800172c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001730:	4b83      	ldr	r3, [pc, #524]	@ (8001940 <HAL_SPI_MspInit+0x244>)
 8001732:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001736:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800173a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800173c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173e:	4b80      	ldr	r3, [pc, #512]	@ (8001940 <HAL_SPI_MspInit+0x244>)
 8001740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001744:	4a7e      	ldr	r2, [pc, #504]	@ (8001940 <HAL_SPI_MspInit+0x244>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800174e:	4b7c      	ldr	r3, [pc, #496]	@ (8001940 <HAL_SPI_MspInit+0x244>)
 8001750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	627b      	str	r3, [r7, #36]	@ 0x24
 800175a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800175c:	4b78      	ldr	r3, [pc, #480]	@ (8001940 <HAL_SPI_MspInit+0x244>)
 800175e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001762:	4a77      	ldr	r2, [pc, #476]	@ (8001940 <HAL_SPI_MspInit+0x244>)
 8001764:	f043 0302 	orr.w	r3, r3, #2
 8001768:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800176c:	4b74      	ldr	r3, [pc, #464]	@ (8001940 <HAL_SPI_MspInit+0x244>)
 800176e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	623b      	str	r3, [r7, #32]
 8001778:	6a3b      	ldr	r3, [r7, #32]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800177a:	2370      	movs	r3, #112	@ 0x70
 800177c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177e:	2302      	movs	r3, #2
 8001780:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800178a:	2305      	movs	r3, #5
 800178c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001792:	4619      	mov	r1, r3
 8001794:	486b      	ldr	r0, [pc, #428]	@ (8001944 <HAL_SPI_MspInit+0x248>)
 8001796:	f019 fd33 	bl	801b200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800179a:	2320      	movs	r3, #32
 800179c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017aa:	2305      	movs	r3, #5
 80017ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017b2:	4619      	mov	r1, r3
 80017b4:	4864      	ldr	r0, [pc, #400]	@ (8001948 <HAL_SPI_MspInit+0x24c>)
 80017b6:	f019 fd23 	bl	801b200 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 80017ba:	4b64      	ldr	r3, [pc, #400]	@ (800194c <HAL_SPI_MspInit+0x250>)
 80017bc:	4a64      	ldr	r2, [pc, #400]	@ (8001950 <HAL_SPI_MspInit+0x254>)
 80017be:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80017c0:	4b62      	ldr	r3, [pc, #392]	@ (800194c <HAL_SPI_MspInit+0x250>)
 80017c2:	2225      	movs	r2, #37	@ 0x25
 80017c4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017c6:	4b61      	ldr	r3, [pc, #388]	@ (800194c <HAL_SPI_MspInit+0x250>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017cc:	4b5f      	ldr	r3, [pc, #380]	@ (800194c <HAL_SPI_MspInit+0x250>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017d2:	4b5e      	ldr	r3, [pc, #376]	@ (800194c <HAL_SPI_MspInit+0x250>)
 80017d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017d8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017da:	4b5c      	ldr	r3, [pc, #368]	@ (800194c <HAL_SPI_MspInit+0x250>)
 80017dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80017e0:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017e2:	4b5a      	ldr	r3, [pc, #360]	@ (800194c <HAL_SPI_MspInit+0x250>)
 80017e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017e8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80017ea:	4b58      	ldr	r3, [pc, #352]	@ (800194c <HAL_SPI_MspInit+0x250>)
 80017ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017f0:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017f2:	4b56      	ldr	r3, [pc, #344]	@ (800194c <HAL_SPI_MspInit+0x250>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017f8:	4b54      	ldr	r3, [pc, #336]	@ (800194c <HAL_SPI_MspInit+0x250>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80017fe:	4853      	ldr	r0, [pc, #332]	@ (800194c <HAL_SPI_MspInit+0x250>)
 8001800:	f017 fdf6 	bl	80193f0 <HAL_DMA_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 800180a:	f7ff fe9a 	bl	8001542 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a4e      	ldr	r2, [pc, #312]	@ (800194c <HAL_SPI_MspInit+0x250>)
 8001812:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001814:	4a4d      	ldr	r2, [pc, #308]	@ (800194c <HAL_SPI_MspInit+0x250>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2100      	movs	r1, #0
 800181e:	2023      	movs	r0, #35	@ 0x23
 8001820:	f017 fd39 	bl	8019296 <HAL_NVIC_SetPriority>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001824:	e0f0      	b.n	8001a08 <HAL_SPI_MspInit+0x30c>
  else if(hspi->Instance==SPI2)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a4a      	ldr	r2, [pc, #296]	@ (8001954 <HAL_SPI_MspInit+0x258>)
 800182c:	4293      	cmp	r3, r2
 800182e:	f040 8097 	bne.w	8001960 <HAL_SPI_MspInit+0x264>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001832:	4b43      	ldr	r3, [pc, #268]	@ (8001940 <HAL_SPI_MspInit+0x244>)
 8001834:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001838:	4a41      	ldr	r2, [pc, #260]	@ (8001940 <HAL_SPI_MspInit+0x244>)
 800183a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800183e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001842:	4b3f      	ldr	r3, [pc, #252]	@ (8001940 <HAL_SPI_MspInit+0x244>)
 8001844:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001848:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800184c:	61fb      	str	r3, [r7, #28]
 800184e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001850:	4b3b      	ldr	r3, [pc, #236]	@ (8001940 <HAL_SPI_MspInit+0x244>)
 8001852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001856:	4a3a      	ldr	r2, [pc, #232]	@ (8001940 <HAL_SPI_MspInit+0x244>)
 8001858:	f043 0302 	orr.w	r3, r3, #2
 800185c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001860:	4b37      	ldr	r3, [pc, #220]	@ (8001940 <HAL_SPI_MspInit+0x244>)
 8001862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	61bb      	str	r3, [r7, #24]
 800186c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	4b34      	ldr	r3, [pc, #208]	@ (8001940 <HAL_SPI_MspInit+0x244>)
 8001870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001874:	4a32      	ldr	r2, [pc, #200]	@ (8001940 <HAL_SPI_MspInit+0x244>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800187e:	4b30      	ldr	r3, [pc, #192]	@ (8001940 <HAL_SPI_MspInit+0x244>)
 8001880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800188c:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001890:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	2300      	movs	r3, #0
 800189c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800189e:	2305      	movs	r3, #5
 80018a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018a6:	4619      	mov	r1, r3
 80018a8:	4827      	ldr	r0, [pc, #156]	@ (8001948 <HAL_SPI_MspInit+0x24c>)
 80018aa:	f019 fca9 	bl	801b200 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80018ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80018b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b4:	2302      	movs	r3, #2
 80018b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2300      	movs	r3, #0
 80018be:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018c0:	2305      	movs	r3, #5
 80018c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018c8:	4619      	mov	r1, r3
 80018ca:	481e      	ldr	r0, [pc, #120]	@ (8001944 <HAL_SPI_MspInit+0x248>)
 80018cc:	f019 fc98 	bl	801b200 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream1;
 80018d0:	4b21      	ldr	r3, [pc, #132]	@ (8001958 <HAL_SPI_MspInit+0x25c>)
 80018d2:	4a22      	ldr	r2, [pc, #136]	@ (800195c <HAL_SPI_MspInit+0x260>)
 80018d4:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80018d6:	4b20      	ldr	r3, [pc, #128]	@ (8001958 <HAL_SPI_MspInit+0x25c>)
 80018d8:	2227      	movs	r2, #39	@ 0x27
 80018da:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001958 <HAL_SPI_MspInit+0x25c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001958 <HAL_SPI_MspInit+0x25c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001958 <HAL_SPI_MspInit+0x25c>)
 80018ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018ee:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018f0:	4b19      	ldr	r3, [pc, #100]	@ (8001958 <HAL_SPI_MspInit+0x25c>)
 80018f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80018f6:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018f8:	4b17      	ldr	r3, [pc, #92]	@ (8001958 <HAL_SPI_MspInit+0x25c>)
 80018fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018fe:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001900:	4b15      	ldr	r3, [pc, #84]	@ (8001958 <HAL_SPI_MspInit+0x25c>)
 8001902:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001906:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001908:	4b13      	ldr	r3, [pc, #76]	@ (8001958 <HAL_SPI_MspInit+0x25c>)
 800190a:	2200      	movs	r2, #0
 800190c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800190e:	4b12      	ldr	r3, [pc, #72]	@ (8001958 <HAL_SPI_MspInit+0x25c>)
 8001910:	2200      	movs	r2, #0
 8001912:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001914:	4810      	ldr	r0, [pc, #64]	@ (8001958 <HAL_SPI_MspInit+0x25c>)
 8001916:	f017 fd6b 	bl	80193f0 <HAL_DMA_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <HAL_SPI_MspInit+0x228>
      Error_Handler();
 8001920:	f7ff fe0f 	bl	8001542 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a0c      	ldr	r2, [pc, #48]	@ (8001958 <HAL_SPI_MspInit+0x25c>)
 8001928:	67da      	str	r2, [r3, #124]	@ 0x7c
 800192a:	4a0b      	ldr	r2, [pc, #44]	@ (8001958 <HAL_SPI_MspInit+0x25c>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001930:	2200      	movs	r2, #0
 8001932:	2100      	movs	r1, #0
 8001934:	2024      	movs	r0, #36	@ 0x24
 8001936:	f017 fcae 	bl	8019296 <HAL_NVIC_SetPriority>
}
 800193a:	e065      	b.n	8001a08 <HAL_SPI_MspInit+0x30c>
 800193c:	40013000 	.word	0x40013000
 8001940:	58024400 	.word	0x58024400
 8001944:	58020000 	.word	0x58020000
 8001948:	58020400 	.word	0x58020400
 800194c:	2000023c 	.word	0x2000023c
 8001950:	40020010 	.word	0x40020010
 8001954:	40003800 	.word	0x40003800
 8001958:	200002b4 	.word	0x200002b4
 800195c:	40020028 	.word	0x40020028
  else if(hspi->Instance==SPI3)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a2a      	ldr	r2, [pc, #168]	@ (8001a10 <HAL_SPI_MspInit+0x314>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d14e      	bne.n	8001a08 <HAL_SPI_MspInit+0x30c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800196a:	4b2a      	ldr	r3, [pc, #168]	@ (8001a14 <HAL_SPI_MspInit+0x318>)
 800196c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001970:	4a28      	ldr	r2, [pc, #160]	@ (8001a14 <HAL_SPI_MspInit+0x318>)
 8001972:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001976:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800197a:	4b26      	ldr	r3, [pc, #152]	@ (8001a14 <HAL_SPI_MspInit+0x318>)
 800197c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001980:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001988:	4b22      	ldr	r3, [pc, #136]	@ (8001a14 <HAL_SPI_MspInit+0x318>)
 800198a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800198e:	4a21      	ldr	r2, [pc, #132]	@ (8001a14 <HAL_SPI_MspInit+0x318>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001998:	4b1e      	ldr	r3, [pc, #120]	@ (8001a14 <HAL_SPI_MspInit+0x318>)
 800199a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a14 <HAL_SPI_MspInit+0x318>)
 80019a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019ac:	4a19      	ldr	r2, [pc, #100]	@ (8001a14 <HAL_SPI_MspInit+0x318>)
 80019ae:	f043 0304 	orr.w	r3, r3, #4
 80019b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019b6:	4b17      	ldr	r3, [pc, #92]	@ (8001a14 <HAL_SPI_MspInit+0x318>)
 80019b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80019c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2300      	movs	r3, #0
 80019d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019d6:	2306      	movs	r3, #6
 80019d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019de:	4619      	mov	r1, r3
 80019e0:	480d      	ldr	r0, [pc, #52]	@ (8001a18 <HAL_SPI_MspInit+0x31c>)
 80019e2:	f019 fc0d 	bl	801b200 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80019e6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80019ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ec:	2302      	movs	r3, #2
 80019ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f4:	2300      	movs	r3, #0
 80019f6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019f8:	2306      	movs	r3, #6
 80019fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a00:	4619      	mov	r1, r3
 8001a02:	4806      	ldr	r0, [pc, #24]	@ (8001a1c <HAL_SPI_MspInit+0x320>)
 8001a04:	f019 fbfc 	bl	801b200 <HAL_GPIO_Init>
}
 8001a08:	bf00      	nop
 8001a0a:	3740      	adds	r7, #64	@ 0x40
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40003c00 	.word	0x40003c00
 8001a14:	58024400 	.word	0x58024400
 8001a18:	58020000 	.word	0x58020000
 8001a1c:	58020800 	.word	0x58020800

08001a20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a4e      	ldr	r2, [pc, #312]	@ (8001b68 <HAL_TIM_Base_MspInit+0x148>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d13e      	bne.n	8001ab0 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a32:	4b4e      	ldr	r3, [pc, #312]	@ (8001b6c <HAL_TIM_Base_MspInit+0x14c>)
 8001a34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a38:	4a4c      	ldr	r2, [pc, #304]	@ (8001b6c <HAL_TIM_Base_MspInit+0x14c>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001a42:	4b4a      	ldr	r3, [pc, #296]	@ (8001b6c <HAL_TIM_Base_MspInit+0x14c>)
 8001a44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Stream2;
 8001a50:	4b47      	ldr	r3, [pc, #284]	@ (8001b70 <HAL_TIM_Base_MspInit+0x150>)
 8001a52:	4a48      	ldr	r2, [pc, #288]	@ (8001b74 <HAL_TIM_Base_MspInit+0x154>)
 8001a54:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Request = DMA_REQUEST_TIM1_UP;
 8001a56:	4b46      	ldr	r3, [pc, #280]	@ (8001b70 <HAL_TIM_Base_MspInit+0x150>)
 8001a58:	220f      	movs	r2, #15
 8001a5a:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a5c:	4b44      	ldr	r3, [pc, #272]	@ (8001b70 <HAL_TIM_Base_MspInit+0x150>)
 8001a5e:	2240      	movs	r2, #64	@ 0x40
 8001a60:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a62:	4b43      	ldr	r3, [pc, #268]	@ (8001b70 <HAL_TIM_Base_MspInit+0x150>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_DISABLE;
 8001a68:	4b41      	ldr	r3, [pc, #260]	@ (8001b70 <HAL_TIM_Base_MspInit+0x150>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a6e:	4b40      	ldr	r3, [pc, #256]	@ (8001b70 <HAL_TIM_Base_MspInit+0x150>)
 8001a70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a74:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a76:	4b3e      	ldr	r3, [pc, #248]	@ (8001b70 <HAL_TIM_Base_MspInit+0x150>)
 8001a78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a7c:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8001a7e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b70 <HAL_TIM_Base_MspInit+0x150>)
 8001a80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a84:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8001a86:	4b3a      	ldr	r3, [pc, #232]	@ (8001b70 <HAL_TIM_Base_MspInit+0x150>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a8c:	4b38      	ldr	r3, [pc, #224]	@ (8001b70 <HAL_TIM_Base_MspInit+0x150>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8001a92:	4837      	ldr	r0, [pc, #220]	@ (8001b70 <HAL_TIM_Base_MspInit+0x150>)
 8001a94:	f017 fcac 	bl	80193f0 <HAL_DMA_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001a9e:	f7ff fd50 	bl	8001542 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a32      	ldr	r2, [pc, #200]	@ (8001b70 <HAL_TIM_Base_MspInit+0x150>)
 8001aa6:	621a      	str	r2, [r3, #32]
 8001aa8:	4a31      	ldr	r2, [pc, #196]	@ (8001b70 <HAL_TIM_Base_MspInit+0x150>)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001aae:	e057      	b.n	8001b60 <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM2)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ab8:	d10f      	bne.n	8001ada <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aba:	4b2c      	ldr	r3, [pc, #176]	@ (8001b6c <HAL_TIM_Base_MspInit+0x14c>)
 8001abc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ac0:	4a2a      	ldr	r2, [pc, #168]	@ (8001b6c <HAL_TIM_Base_MspInit+0x14c>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001aca:	4b28      	ldr	r3, [pc, #160]	@ (8001b6c <HAL_TIM_Base_MspInit+0x14c>)
 8001acc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	693b      	ldr	r3, [r7, #16]
}
 8001ad8:	e042      	b.n	8001b60 <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM3)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a26      	ldr	r2, [pc, #152]	@ (8001b78 <HAL_TIM_Base_MspInit+0x158>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d13d      	bne.n	8001b60 <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ae4:	4b21      	ldr	r3, [pc, #132]	@ (8001b6c <HAL_TIM_Base_MspInit+0x14c>)
 8001ae6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001aea:	4a20      	ldr	r2, [pc, #128]	@ (8001b6c <HAL_TIM_Base_MspInit+0x14c>)
 8001aec:	f043 0302 	orr.w	r3, r3, #2
 8001af0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001af4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b6c <HAL_TIM_Base_MspInit+0x14c>)
 8001af6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
    hdma_tim3_up.Instance = DMA1_Stream3;
 8001b02:	4b1e      	ldr	r3, [pc, #120]	@ (8001b7c <HAL_TIM_Base_MspInit+0x15c>)
 8001b04:	4a1e      	ldr	r2, [pc, #120]	@ (8001b80 <HAL_TIM_Base_MspInit+0x160>)
 8001b06:	601a      	str	r2, [r3, #0]
    hdma_tim3_up.Init.Request = DMA_REQUEST_TIM3_UP;
 8001b08:	4b1c      	ldr	r3, [pc, #112]	@ (8001b7c <HAL_TIM_Base_MspInit+0x15c>)
 8001b0a:	221b      	movs	r2, #27
 8001b0c:	605a      	str	r2, [r3, #4]
    hdma_tim3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001b7c <HAL_TIM_Base_MspInit+0x15c>)
 8001b10:	2240      	movs	r2, #64	@ 0x40
 8001b12:	609a      	str	r2, [r3, #8]
    hdma_tim3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b14:	4b19      	ldr	r3, [pc, #100]	@ (8001b7c <HAL_TIM_Base_MspInit+0x15c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
    hdma_tim3_up.Init.MemInc = DMA_MINC_DISABLE;
 8001b1a:	4b18      	ldr	r3, [pc, #96]	@ (8001b7c <HAL_TIM_Base_MspInit+0x15c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
    hdma_tim3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b20:	4b16      	ldr	r3, [pc, #88]	@ (8001b7c <HAL_TIM_Base_MspInit+0x15c>)
 8001b22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b26:	615a      	str	r2, [r3, #20]
    hdma_tim3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b28:	4b14      	ldr	r3, [pc, #80]	@ (8001b7c <HAL_TIM_Base_MspInit+0x15c>)
 8001b2a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b2e:	619a      	str	r2, [r3, #24]
    hdma_tim3_up.Init.Mode = DMA_CIRCULAR;
 8001b30:	4b12      	ldr	r3, [pc, #72]	@ (8001b7c <HAL_TIM_Base_MspInit+0x15c>)
 8001b32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b36:	61da      	str	r2, [r3, #28]
    hdma_tim3_up.Init.Priority = DMA_PRIORITY_LOW;
 8001b38:	4b10      	ldr	r3, [pc, #64]	@ (8001b7c <HAL_TIM_Base_MspInit+0x15c>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	621a      	str	r2, [r3, #32]
    hdma_tim3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b7c <HAL_TIM_Base_MspInit+0x15c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_up) != HAL_OK)
 8001b44:	480d      	ldr	r0, [pc, #52]	@ (8001b7c <HAL_TIM_Base_MspInit+0x15c>)
 8001b46:	f017 fc53 	bl	80193f0 <HAL_DMA_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <HAL_TIM_Base_MspInit+0x134>
      Error_Handler();
 8001b50:	f7ff fcf7 	bl	8001542 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_up);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a09      	ldr	r2, [pc, #36]	@ (8001b7c <HAL_TIM_Base_MspInit+0x15c>)
 8001b58:	621a      	str	r2, [r3, #32]
 8001b5a:	4a08      	ldr	r2, [pc, #32]	@ (8001b7c <HAL_TIM_Base_MspInit+0x15c>)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001b60:	bf00      	nop
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40010000 	.word	0x40010000
 8001b6c:	58024400 	.word	0x58024400
 8001b70:	20000410 	.word	0x20000410
 8001b74:	40020040 	.word	0x40020040
 8001b78:	40000400 	.word	0x40000400
 8001b7c:	20000488 	.word	0x20000488
 8001b80:	40020058 	.word	0x40020058

08001b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b0ba      	sub	sp, #232	@ 0xe8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b9c:	f107 0310 	add.w	r3, r7, #16
 8001ba0:	22c0      	movs	r2, #192	@ 0xc0
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f01e ffea 	bl	8020b7e <memset>
  if(huart->Instance==USART3)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a27      	ldr	r2, [pc, #156]	@ (8001c4c <HAL_UART_MspInit+0xc8>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d146      	bne.n	8001c42 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001bb4:	f04f 0202 	mov.w	r2, #2
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bc6:	f107 0310 	add.w	r3, r7, #16
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f01a fce8 	bl	801c5a0 <HAL_RCCEx_PeriphCLKConfig>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001bd6:	f7ff fcb4 	bl	8001542 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bda:	4b1d      	ldr	r3, [pc, #116]	@ (8001c50 <HAL_UART_MspInit+0xcc>)
 8001bdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001be0:	4a1b      	ldr	r2, [pc, #108]	@ (8001c50 <HAL_UART_MspInit+0xcc>)
 8001be2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001be6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001bea:	4b19      	ldr	r3, [pc, #100]	@ (8001c50 <HAL_UART_MspInit+0xcc>)
 8001bec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bf0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bf8:	4b15      	ldr	r3, [pc, #84]	@ (8001c50 <HAL_UART_MspInit+0xcc>)
 8001bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bfe:	4a14      	ldr	r2, [pc, #80]	@ (8001c50 <HAL_UART_MspInit+0xcc>)
 8001c00:	f043 0308 	orr.w	r3, r3, #8
 8001c04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c08:	4b11      	ldr	r3, [pc, #68]	@ (8001c50 <HAL_UART_MspInit+0xcc>)
 8001c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	60bb      	str	r3, [r7, #8]
 8001c14:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c16:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c30:	2307      	movs	r3, #7
 8001c32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c36:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4805      	ldr	r0, [pc, #20]	@ (8001c54 <HAL_UART_MspInit+0xd0>)
 8001c3e:	f019 fadf 	bl	801b200 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001c42:	bf00      	nop
 8001c44:	37e8      	adds	r7, #232	@ 0xe8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40004800 	.word	0x40004800
 8001c50:	58024400 	.word	0x58024400
 8001c54:	58020c00 	.word	0x58020c00

08001c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c5c:	bf00      	nop
 8001c5e:	e7fd      	b.n	8001c5c <NMI_Handler+0x4>

08001c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c64:	bf00      	nop
 8001c66:	e7fd      	b.n	8001c64 <MemManage_Handler+0x4>

08001c68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c6c:	bf00      	nop
 8001c6e:	e7fd      	b.n	8001c6c <BusFault_Handler+0x4>

08001c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c74:	bf00      	nop
 8001c76:	e7fd      	b.n	8001c74 <UsageFault_Handler+0x4>

08001c78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c8a:	f017 f9e9 	bl	8019060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001c8e:	f002 fac9 	bl	8004224 <xTaskGetSchedulerState>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d101      	bne.n	8001c9c <SysTick_Handler+0x16>
      {
    	xPortSysTickHandler();
 8001c98:	f003 fba6 	bl	80053e8 <xPortSysTickHandler>
      }
  /* USER CODE END SysTick_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken;
  uint32_t ulCurrBuf = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
  //SPI1 Stream
  if (DMA1->LISR & DMA_FLAG_TCIF0_4){
 8001caa:	4b19      	ldr	r3, [pc, #100]	@ (8001d10 <DMA1_Stream0_IRQHandler+0x70>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0320 	and.w	r3, r3, #32
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00c      	beq.n	8001cd0 <DMA1_Stream0_IRQHandler+0x30>
      uint32_t status = DMA1_Stream0->CR;
 8001cb6:	4b17      	ldr	r3, [pc, #92]	@ (8001d14 <DMA1_Stream0_IRQHandler+0x74>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	60bb      	str	r3, [r7, #8]
        if ((status & DMA_SxCR_CT_Msk)!=0){ //current Transmittable Buffer
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <DMA1_Stream0_IRQHandler+0x2c>
  	  ulCurrBuf = 0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	e001      	b.n	8001cd0 <DMA1_Stream0_IRQHandler+0x30>
        } else {
  	  ulCurrBuf = 1;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	60fb      	str	r3, [r7, #12]
        }

    }
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001cd0:	4811      	ldr	r0, [pc, #68]	@ (8001d18 <DMA1_Stream0_IRQHandler+0x78>)
 8001cd2:	f018 f92f 	bl	8019f34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
  /* xHigherPriorityTaskWoken must be initialised to pdFALSE. If calling
     xTaskNotifyFromISR() unblocks the handling task, and the priority of
     the handling task is higher than the priority of the currently running task,
     then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
  xHigherPriorityTaskWoken = pdFALSE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	607b      	str	r3, [r7, #4]
  /* Unblock the handling task so the task can perform any processing necessitated
     by the interrupt. xHandlingTask is the task's handle, which was obtained
     when the task was created. The handling task's 0th notification value
     is bitwise ORed with the interrupt status - ensuring bits that are already
     set are not overwritten. */
  xTaskNotifyFromISR( vADCTCPTaskHandle,
 8001cda:	4b10      	ldr	r3, [pc, #64]	@ (8001d1c <DMA1_Stream0_IRQHandler+0x7c>)
 8001cdc:	6818      	ldr	r0, [r3, #0]
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	9301      	str	r3, [sp, #4]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	2100      	movs	r1, #0
 8001cec:	f002 fef2 	bl	8004ad4 <xTaskGenericNotifyFromISR>
			     &xHigherPriorityTaskWoken );

  /* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
     The macro used to do this is dependent on the port and may be called
     portEND_SWITCHING_ISR. */
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d007      	beq.n	8001d06 <DMA1_Stream0_IRQHandler+0x66>
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d20 <DMA1_Stream0_IRQHandler+0x80>)
 8001cf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	f3bf 8f4f 	dsb	sy
 8001d02:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40020000 	.word	0x40020000
 8001d14:	40020010 	.word	0x40020010
 8001d18:	2000023c 	.word	0x2000023c
 8001d1c:	20000a68 	.word	0x20000a68
 8001d20:	e000ed04 	.word	0xe000ed04

08001d24 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001d28:	4802      	ldr	r0, [pc, #8]	@ (8001d34 <DMA1_Stream1_IRQHandler+0x10>)
 8001d2a:	f018 f903 	bl	8019f34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200002b4 	.word	0x200002b4

08001d38 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8001d3c:	4802      	ldr	r0, [pc, #8]	@ (8001d48 <DMA1_Stream2_IRQHandler+0x10>)
 8001d3e:	f018 f8f9 	bl	8019f34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000410 	.word	0x20000410

08001d4c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_up);
 8001d50:	4802      	ldr	r0, [pc, #8]	@ (8001d5c <DMA1_Stream3_IRQHandler+0x10>)
 8001d52:	f018 f8ef 	bl	8019f34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000488 	.word	0x20000488

08001d60 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001d64:	4802      	ldr	r0, [pc, #8]	@ (8001d70 <SPI1_IRQHandler+0x10>)
 8001d66:	f01c fb6b 	bl	801e440 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200000a4 	.word	0x200000a4

08001d74 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001d78:	4802      	ldr	r0, [pc, #8]	@ (8001d84 <SPI2_IRQHandler+0x10>)
 8001d7a:	f01c fb61 	bl	801e440 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	2000012c 	.word	0x2000012c

08001d88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return 1;
 8001d8c:	2301      	movs	r3, #1
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <_kill>:

int _kill(int pid, int sig)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001da2:	f01f fe13 	bl	80219cc <__errno>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2216      	movs	r2, #22
 8001daa:	601a      	str	r2, [r3, #0]
  return -1;
 8001dac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <_exit>:

void _exit (int status)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff ffe7 	bl	8001d98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dca:	bf00      	nop
 8001dcc:	e7fd      	b.n	8001dca <_exit+0x12>

08001dce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b086      	sub	sp, #24
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	60f8      	str	r0, [r7, #12]
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	e00a      	b.n	8001df6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001de0:	f3af 8000 	nop.w
 8001de4:	4601      	mov	r1, r0
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	60ba      	str	r2, [r7, #8]
 8001dec:	b2ca      	uxtb	r2, r1
 8001dee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	3301      	adds	r3, #1
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	dbf0      	blt.n	8001de0 <_read+0x12>
  }

  return len;
 8001dfe:	687b      	ldr	r3, [r7, #4]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	e009      	b.n	8001e2e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	1c5a      	adds	r2, r3, #1
 8001e1e:	60ba      	str	r2, [r7, #8]
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	dbf1      	blt.n	8001e1a <_write+0x12>
  }
  return len;
 8001e36:	687b      	ldr	r3, [r7, #4]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <_close>:

int _close(int file)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e68:	605a      	str	r2, [r3, #4]
  return 0;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <_isatty>:

int _isatty(int file)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e80:	2301      	movs	r3, #1
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b085      	sub	sp, #20
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	60f8      	str	r0, [r7, #12]
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eb0:	4a14      	ldr	r2, [pc, #80]	@ (8001f04 <_sbrk+0x5c>)
 8001eb2:	4b15      	ldr	r3, [pc, #84]	@ (8001f08 <_sbrk+0x60>)
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ebc:	4b13      	ldr	r3, [pc, #76]	@ (8001f0c <_sbrk+0x64>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d102      	bne.n	8001eca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ec4:	4b11      	ldr	r3, [pc, #68]	@ (8001f0c <_sbrk+0x64>)
 8001ec6:	4a12      	ldr	r2, [pc, #72]	@ (8001f10 <_sbrk+0x68>)
 8001ec8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eca:	4b10      	ldr	r3, [pc, #64]	@ (8001f0c <_sbrk+0x64>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d207      	bcs.n	8001ee8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ed8:	f01f fd78 	bl	80219cc <__errno>
 8001edc:	4603      	mov	r3, r0
 8001ede:	220c      	movs	r2, #12
 8001ee0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee6:	e009      	b.n	8001efc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ee8:	4b08      	ldr	r3, [pc, #32]	@ (8001f0c <_sbrk+0x64>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eee:	4b07      	ldr	r3, [pc, #28]	@ (8001f0c <_sbrk+0x64>)
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	4a05      	ldr	r2, [pc, #20]	@ (8001f0c <_sbrk+0x64>)
 8001ef8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001efa:	68fb      	ldr	r3, [r7, #12]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	24080000 	.word	0x24080000
 8001f08:	00000400 	.word	0x00000400
 8001f0c:	20000a70 	.word	0x20000a70
 8001f10:	20002530 	.word	0x20002530

08001f14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f1a:	4b3f      	ldr	r3, [pc, #252]	@ (8002018 <SystemInit+0x104>)
 8001f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f20:	4a3d      	ldr	r2, [pc, #244]	@ (8002018 <SystemInit+0x104>)
 8001f22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f26:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f2a:	4b3c      	ldr	r3, [pc, #240]	@ (800201c <SystemInit+0x108>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	2b06      	cmp	r3, #6
 8001f34:	d807      	bhi.n	8001f46 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f36:	4b39      	ldr	r3, [pc, #228]	@ (800201c <SystemInit+0x108>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f023 030f 	bic.w	r3, r3, #15
 8001f3e:	4a37      	ldr	r2, [pc, #220]	@ (800201c <SystemInit+0x108>)
 8001f40:	f043 0307 	orr.w	r3, r3, #7
 8001f44:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001f46:	4b36      	ldr	r3, [pc, #216]	@ (8002020 <SystemInit+0x10c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a35      	ldr	r2, [pc, #212]	@ (8002020 <SystemInit+0x10c>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f52:	4b33      	ldr	r3, [pc, #204]	@ (8002020 <SystemInit+0x10c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001f58:	4b31      	ldr	r3, [pc, #196]	@ (8002020 <SystemInit+0x10c>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4930      	ldr	r1, [pc, #192]	@ (8002020 <SystemInit+0x10c>)
 8001f5e:	4b31      	ldr	r3, [pc, #196]	@ (8002024 <SystemInit+0x110>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f64:	4b2d      	ldr	r3, [pc, #180]	@ (800201c <SystemInit+0x108>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d007      	beq.n	8001f80 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f70:	4b2a      	ldr	r3, [pc, #168]	@ (800201c <SystemInit+0x108>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f023 030f 	bic.w	r3, r3, #15
 8001f78:	4a28      	ldr	r2, [pc, #160]	@ (800201c <SystemInit+0x108>)
 8001f7a:	f043 0307 	orr.w	r3, r3, #7
 8001f7e:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001f80:	4b27      	ldr	r3, [pc, #156]	@ (8002020 <SystemInit+0x10c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001f86:	4b26      	ldr	r3, [pc, #152]	@ (8002020 <SystemInit+0x10c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001f8c:	4b24      	ldr	r3, [pc, #144]	@ (8002020 <SystemInit+0x10c>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001f92:	4b23      	ldr	r3, [pc, #140]	@ (8002020 <SystemInit+0x10c>)
 8001f94:	4a24      	ldr	r2, [pc, #144]	@ (8002028 <SystemInit+0x114>)
 8001f96:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001f98:	4b21      	ldr	r3, [pc, #132]	@ (8002020 <SystemInit+0x10c>)
 8001f9a:	4a24      	ldr	r2, [pc, #144]	@ (800202c <SystemInit+0x118>)
 8001f9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001f9e:	4b20      	ldr	r3, [pc, #128]	@ (8002020 <SystemInit+0x10c>)
 8001fa0:	4a23      	ldr	r2, [pc, #140]	@ (8002030 <SystemInit+0x11c>)
 8001fa2:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8002020 <SystemInit+0x10c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001faa:	4b1d      	ldr	r3, [pc, #116]	@ (8002020 <SystemInit+0x10c>)
 8001fac:	4a20      	ldr	r2, [pc, #128]	@ (8002030 <SystemInit+0x11c>)
 8001fae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8002020 <SystemInit+0x10c>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8002020 <SystemInit+0x10c>)
 8001fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8002030 <SystemInit+0x11c>)
 8001fba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001fbc:	4b18      	ldr	r3, [pc, #96]	@ (8002020 <SystemInit+0x10c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001fc2:	4b17      	ldr	r3, [pc, #92]	@ (8002020 <SystemInit+0x10c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a16      	ldr	r2, [pc, #88]	@ (8002020 <SystemInit+0x10c>)
 8001fc8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fcc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001fce:	4b14      	ldr	r3, [pc, #80]	@ (8002020 <SystemInit+0x10c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001fd4:	4b17      	ldr	r3, [pc, #92]	@ (8002034 <SystemInit+0x120>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4b17      	ldr	r3, [pc, #92]	@ (8002038 <SystemInit+0x124>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001fe0:	d202      	bcs.n	8001fe8 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001fe2:	4b16      	ldr	r3, [pc, #88]	@ (800203c <SystemInit+0x128>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8001fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8002020 <SystemInit+0x10c>)
 8001fea:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001fee:	4a0c      	ldr	r2, [pc, #48]	@ (8002020 <SystemInit+0x10c>)
 8001ff0:	f043 4360 	orr.w	r3, r3, #3758096384	@ 0xe0000000
 8001ff4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8001ff8:	4b09      	ldr	r3, [pc, #36]	@ (8002020 <SystemInit+0x10c>)
 8001ffa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001ffe:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8002000:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002002:	4b0f      	ldr	r3, [pc, #60]	@ (8002040 <SystemInit+0x12c>)
 8002004:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002008:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000ed00 	.word	0xe000ed00
 800201c:	52002000 	.word	0x52002000
 8002020:	58024400 	.word	0x58024400
 8002024:	eaf6ed7f 	.word	0xeaf6ed7f
 8002028:	02020200 	.word	0x02020200
 800202c:	01ff0000 	.word	0x01ff0000
 8002030:	01010280 	.word	0x01010280
 8002034:	5c001000 	.word	0x5c001000
 8002038:	ffff0000 	.word	0xffff0000
 800203c:	51008108 	.word	0x51008108
 8002040:	52004000 	.word	0x52004000

08002044 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002044:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800207c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002048:	f7ff ff64 	bl	8001f14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800204c:	480c      	ldr	r0, [pc, #48]	@ (8002080 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800204e:	490d      	ldr	r1, [pc, #52]	@ (8002084 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002050:	4a0d      	ldr	r2, [pc, #52]	@ (8002088 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002054:	e002      	b.n	800205c <LoopCopyDataInit>

08002056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800205a:	3304      	adds	r3, #4

0800205c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800205c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800205e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002060:	d3f9      	bcc.n	8002056 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002062:	4a0a      	ldr	r2, [pc, #40]	@ (800208c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002064:	4c0a      	ldr	r4, [pc, #40]	@ (8002090 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002068:	e001      	b.n	800206e <LoopFillZerobss>

0800206a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800206a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800206c:	3204      	adds	r2, #4

0800206e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800206e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002070:	d3fb      	bcc.n	800206a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002072:	f01f fcb1 	bl	80219d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002076:	f7fe fb13 	bl	80006a0 <main>
  bx  lr
 800207a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800207c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002084:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002088:	08025ed8 	.word	0x08025ed8
  ldr r2, =_sbss
 800208c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002090:	20002530 	.word	0x20002530

08002094 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002094:	e7fe      	b.n	8002094 <ADC3_IRQHandler>

08002096 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

        EventGroupHandle_t xEventGroupCreate( void )
        {
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
            traceENTER_xEventGroupCreate();

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 800209c:	201c      	movs	r0, #28
 800209e:	f003 fa21 	bl	80054e4 <pvPortMalloc>
 80020a2:	6078      	str	r0, [r7, #4]

            if( pxEventBits != NULL )
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d007      	beq.n	80020ba <xEventGroupCreate+0x24>
            {
                pxEventBits->uxEventBits = 0;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
                vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3304      	adds	r3, #4
 80020b4:	4618      	mov	r0, r3
 80020b6:	f000 f9c3 	bl	8002440 <vListInitialise>
                traceEVENT_GROUP_CREATE_FAILED();
            }

            traceRETURN_xEventGroupCreate( pxEventBits );

            return pxEventBits;
 80020ba:	687b      	ldr	r3, [r7, #4]
        }
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <xEventGroupWaitBits>:
    EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                     const EventBits_t uxBitsToWaitFor,
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait )
    {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08c      	sub	sp, #48	@ 0x30
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
 80020d0:	603b      	str	r3, [r7, #0]
        EventGroup_t * pxEventBits = xEventGroup;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	627b      	str	r3, [r7, #36]	@ 0x24
        EventBits_t uxReturn, uxControlBits = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	62bb      	str	r3, [r7, #40]	@ 0x28
        BaseType_t xWaitConditionMet, xAlreadyYielded;
        BaseType_t xTimeoutOccurred = pdFALSE;
 80020da:	2300      	movs	r3, #0
 80020dc:	623b      	str	r3, [r7, #32]

        traceENTER_xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait );

        /* Check the user is not attempting to wait on the bits used by the kernel
         * itself, and that at least one bit is being requested. */
        configASSERT( xEventGroup );
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d104      	bne.n	80020ee <xEventGroupWaitBits+0x2a>
 80020e4:	f240 1147 	movw	r1, #327	@ 0x147
 80020e8:	4850      	ldr	r0, [pc, #320]	@ (800222c <xEventGroupWaitBits+0x168>)
 80020ea:	f7ff f815 	bl	8001118 <vAssertCalled>
        configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020f4:	d304      	bcc.n	8002100 <xEventGroupWaitBits+0x3c>
 80020f6:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 80020fa:	484c      	ldr	r0, [pc, #304]	@ (800222c <xEventGroupWaitBits+0x168>)
 80020fc:	f7ff f80c 	bl	8001118 <vAssertCalled>
        configASSERT( uxBitsToWaitFor != 0 );
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d104      	bne.n	8002110 <xEventGroupWaitBits+0x4c>
 8002106:	f240 1149 	movw	r1, #329	@ 0x149
 800210a:	4848      	ldr	r0, [pc, #288]	@ (800222c <xEventGroupWaitBits+0x168>)
 800210c:	f7ff f804 	bl	8001118 <vAssertCalled>
        #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002110:	f002 f888 	bl	8004224 <xTaskGetSchedulerState>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d102      	bne.n	8002120 <xEventGroupWaitBits+0x5c>
 800211a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <xEventGroupWaitBits+0x60>
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <xEventGroupWaitBits+0x62>
 8002124:	2300      	movs	r3, #0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d104      	bne.n	8002134 <xEventGroupWaitBits+0x70>
 800212a:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 800212e:	483f      	ldr	r0, [pc, #252]	@ (800222c <xEventGroupWaitBits+0x168>)
 8002130:	f7fe fff2 	bl	8001118 <vAssertCalled>
        }
        #endif

        vTaskSuspendAll();
 8002134:	f001 fa58 	bl	80035e8 <vTaskSuspendAll>
        {
            const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8002138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	61fb      	str	r3, [r7, #28]

            /* Check to see if the wait condition is already met or not. */
            xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	68b9      	ldr	r1, [r7, #8]
 8002142:	69f8      	ldr	r0, [r7, #28]
 8002144:	f000 f95a 	bl	80023fc <prvTestWaitCondition>
 8002148:	61b8      	str	r0, [r7, #24]

            if( xWaitConditionMet != pdFALSE )
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00e      	beq.n	800216e <xEventGroupWaitBits+0xaa>
            {
                /* The wait condition has already been met so there is no need to
                 * block. */
                uxReturn = uxCurrentEventBits;
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	62fb      	str	r3, [r7, #44]	@ 0x2c
                xTicksToWait = ( TickType_t ) 0;
 8002154:	2300      	movs	r3, #0
 8002156:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Clear the wait bits if requested to do so. */
                if( xClearOnExit != pdFALSE )
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d028      	beq.n	80021b0 <xEventGroupWaitBits+0xec>
                {
                    pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800215e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	43db      	mvns	r3, r3
 8002166:	401a      	ands	r2, r3
 8002168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	e020      	b.n	80021b0 <xEventGroupWaitBits+0xec>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( xTicksToWait == ( TickType_t ) 0 )
 800216e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002170:	2b00      	cmp	r3, #0
 8002172:	d104      	bne.n	800217e <xEventGroupWaitBits+0xba>
            {
                /* The wait condition has not been met, but no block time was
                 * specified, so just return the current value. */
                uxReturn = uxCurrentEventBits;
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	62fb      	str	r3, [r7, #44]	@ 0x2c
                xTimeoutOccurred = pdTRUE;
 8002178:	2301      	movs	r3, #1
 800217a:	623b      	str	r3, [r7, #32]
 800217c:	e018      	b.n	80021b0 <xEventGroupWaitBits+0xec>
            {
                /* The task is going to block to wait for its required bits to be
                 * set.  uxControlBits are used to remember the specified behaviour of
                 * this call to xEventGroupWaitBits() - for use when the event bits
                 * unblock the task. */
                if( xClearOnExit != pdFALSE )
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d003      	beq.n	800218c <xEventGroupWaitBits+0xc8>
                {
                    uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8002184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002186:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800218a:	62bb      	str	r3, [r7, #40]	@ 0x28
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xWaitForAllBits != pdFALSE )
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <xEventGroupWaitBits+0xd6>
                {
                    uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8002192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002194:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002198:	62bb      	str	r3, [r7, #40]	@ 0x28
                }

                /* Store the bits that the calling task is waiting for in the
                 * task's event list item so the kernel knows when a match is
                 * found.  Then enter the blocked state. */
                vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219c:	1d18      	adds	r0, r3, #4
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021a2:	4313      	orrs	r3, r2
 80021a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80021a6:	4619      	mov	r1, r3
 80021a8:	f001 fd06 	bl	8003bb8 <vTaskPlaceOnUnorderedEventList>

                /* This is obsolete as it will get set after the task unblocks, but
                 * some compilers mistakenly generate a warning about the variable
                 * being returned without being set if it is not done. */
                uxReturn = 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

                traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80021b0:	f001 fa28 	bl	8003604 <xTaskResumeAll>
 80021b4:	6178      	str	r0, [r7, #20]

        if( xTicksToWait != ( TickType_t ) 0 )
 80021b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d031      	beq.n	8002220 <xEventGroupWaitBits+0x15c>
        {
            if( xAlreadyYielded == pdFALSE )
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d107      	bne.n	80021d2 <xEventGroupWaitBits+0x10e>
            {
                taskYIELD_WITHIN_API();
 80021c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002230 <xEventGroupWaitBits+0x16c>)
 80021c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	f3bf 8f4f 	dsb	sy
 80021ce:	f3bf 8f6f 	isb	sy

            /* The task blocked to wait for its required bits to be set - at this
             * point either the required bits were set or the block time expired.  If
             * the required bits were set they will have been stored in the task's
             * event list item, and they should now be retrieved then cleared. */
            uxReturn = uxTaskResetEventItemValue();
 80021d2:	f002 fa31 	bl	8004638 <uxTaskResetEventItemValue>
 80021d6:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80021d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d11a      	bne.n	8002218 <xEventGroupWaitBits+0x154>
            {
                taskENTER_CRITICAL();
 80021e2:	f003 f87d 	bl	80052e0 <vPortEnterCritical>
                {
                    /* The task timed out, just return the current event bit value. */
                    uxReturn = pxEventBits->uxEventBits;
 80021e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* It is possible that the event bits were updated between this
                     * task leaving the Blocked state and running again. */
                    if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	68b9      	ldr	r1, [r7, #8]
 80021f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021f2:	f000 f903 	bl	80023fc <prvTestWaitCondition>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d009      	beq.n	8002210 <xEventGroupWaitBits+0x14c>
                    {
                        if( xClearOnExit != pdFALSE )
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d006      	beq.n	8002210 <xEventGroupWaitBits+0x14c>
                        {
                            pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	43db      	mvns	r3, r3
 800220a:	401a      	ands	r2, r3
 800220c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220e:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xTimeoutOccurred = pdTRUE;
 8002210:	2301      	movs	r3, #1
 8002212:	623b      	str	r3, [r7, #32]
                }
                taskEXIT_CRITICAL();
 8002214:	f003 f890 	bl	8005338 <vPortExitCritical>
            {
                /* The task unblocked because the bits were set. */
            }

            /* The task blocked so control bits may have been set. */
            uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800221a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800221e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xTimeoutOccurred;

        traceRETURN_xEventGroupWaitBits( uxReturn );

        return uxReturn;
 8002220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8002222:	4618      	mov	r0, r3
 8002224:	3730      	adds	r7, #48	@ 0x30
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	08022734 	.word	0x08022734
 8002230:	e000ed04 	.word	0xe000ed04

08002234 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                      const EventBits_t uxBitsToClear )
    {
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
        EventGroup_t * pxEventBits = xEventGroup;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	60fb      	str	r3, [r7, #12]

        traceENTER_xEventGroupClearBits( xEventGroup, uxBitsToClear );

        /* Check the user is not attempting to clear the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d104      	bne.n	8002252 <xEventGroupClearBits+0x1e>
 8002248:	f44f 71f1 	mov.w	r1, #482	@ 0x1e2
 800224c:	480f      	ldr	r0, [pc, #60]	@ (800228c <xEventGroupClearBits+0x58>)
 800224e:	f7fe ff63 	bl	8001118 <vAssertCalled>
        configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002258:	d304      	bcc.n	8002264 <xEventGroupClearBits+0x30>
 800225a:	f240 11e3 	movw	r1, #483	@ 0x1e3
 800225e:	480b      	ldr	r0, [pc, #44]	@ (800228c <xEventGroupClearBits+0x58>)
 8002260:	f7fe ff5a 	bl	8001118 <vAssertCalled>

        taskENTER_CRITICAL();
 8002264:	f003 f83c 	bl	80052e0 <vPortEnterCritical>
        {
            traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

            /* The value returned is the event group value prior to the bits being
             * cleared. */
            uxReturn = pxEventBits->uxEventBits;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	60bb      	str	r3, [r7, #8]

            /* Clear the bits. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	43db      	mvns	r3, r3
 8002276:	401a      	ands	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	601a      	str	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800227c:	f003 f85c 	bl	8005338 <vPortExitCritical>

        traceRETURN_xEventGroupClearBits( uxReturn );

        return uxReturn;
 8002280:	68bb      	ldr	r3, [r7, #8]
    }
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	08022734 	.word	0x08022734

08002290 <xEventGroupSetBits>:
    }
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet )
    {
 8002290:	b580      	push	{r7, lr}
 8002292:	b08c      	sub	sp, #48	@ 0x30
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
        ListItem_t * pxListItem;
        ListItem_t * pxNext;
        ListItem_t const * pxListEnd;
        List_t const * pxList;
        EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800229a:	2300      	movs	r3, #0
 800229c:	62bb      	str	r3, [r7, #40]	@ 0x28
        EventGroup_t * pxEventBits = xEventGroup;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	623b      	str	r3, [r7, #32]
        BaseType_t xMatchFound = pdFALSE;
 80022a2:	2300      	movs	r3, #0
 80022a4:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xEventGroupSetBits( xEventGroup, uxBitsToSet );

        /* Check the user is not attempting to set the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d104      	bne.n	80022b6 <xEventGroupSetBits+0x26>
 80022ac:	f240 2132 	movw	r1, #562	@ 0x232
 80022b0:	4836      	ldr	r0, [pc, #216]	@ (800238c <xEventGroupSetBits+0xfc>)
 80022b2:	f7fe ff31 	bl	8001118 <vAssertCalled>
        configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022bc:	d304      	bcc.n	80022c8 <xEventGroupSetBits+0x38>
 80022be:	f240 2133 	movw	r1, #563	@ 0x233
 80022c2:	4832      	ldr	r0, [pc, #200]	@ (800238c <xEventGroupSetBits+0xfc>)
 80022c4:	f7fe ff28 	bl	8001118 <vAssertCalled>

        pxList = &( pxEventBits->xTasksWaitingForBits );
 80022c8:	6a3b      	ldr	r3, [r7, #32]
 80022ca:	3304      	adds	r3, #4
 80022cc:	61fb      	str	r3, [r7, #28]
        pxListEnd = listGET_END_MARKER( pxList );
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3308      	adds	r3, #8
 80022d2:	61bb      	str	r3, [r7, #24]
        vTaskSuspendAll();
 80022d4:	f001 f988 	bl	80035e8 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

            pxListItem = listGET_HEAD_ENTRY( pxList );
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Set the bits. */
            pxEventBits->uxEventBits |= uxBitsToSet;
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	431a      	orrs	r2, r3
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	601a      	str	r2, [r3, #0]

            /* See if the new bit value should unblock any tasks. */
            while( pxListItem != pxListEnd )
 80022ea:	e03c      	b.n	8002366 <xEventGroupSetBits+0xd6>
            {
                pxNext = listGET_NEXT( pxListItem );
 80022ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	617b      	str	r3, [r7, #20]
                uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80022f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	613b      	str	r3, [r7, #16]
                xMatchFound = pdFALSE;
 80022f8:	2300      	movs	r3, #0
 80022fa:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Split the bits waited for from the control bits. */
                uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002302:	60fb      	str	r3, [r7, #12]
                uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800230a:	613b      	str	r3, [r7, #16]

                if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d108      	bne.n	8002328 <xEventGroupSetBits+0x98>
                {
                    /* Just looking for single bit being set. */
                    if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4013      	ands	r3, r2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00b      	beq.n	800233a <xEventGroupSetBits+0xaa>
                    {
                        xMatchFound = pdTRUE;
 8002322:	2301      	movs	r3, #1
 8002324:	627b      	str	r3, [r7, #36]	@ 0x24
 8002326:	e008      	b.n	800233a <xEventGroupSetBits+0xaa>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4013      	ands	r3, r2
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	429a      	cmp	r2, r3
 8002334:	d101      	bne.n	800233a <xEventGroupSetBits+0xaa>
                {
                    /* All bits are set. */
                    xMatchFound = pdTRUE;
 8002336:	2301      	movs	r3, #1
 8002338:	627b      	str	r3, [r7, #36]	@ 0x24
                else
                {
                    /* Need all bits to be set, but not all the bits were set. */
                }

                if( xMatchFound != pdFALSE )
 800233a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233c:	2b00      	cmp	r3, #0
 800233e:	d010      	beq.n	8002362 <xEventGroupSetBits+0xd2>
                {
                    /* The bits match.  Should the bits be cleared on exit? */
                    if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <xEventGroupSetBits+0xc2>
                    {
                        uxBitsToClear |= uxBitsWaitedFor;
 800234a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4313      	orrs	r3, r2
 8002350:	62bb      	str	r3, [r7, #40]	@ 0x28
                    /* Store the actual event flag value in the task's event list
                     * item before removing the task from the event list.  The
                     * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                     * that is was unblocked due to its required bits matching, rather
                     * than because it timed out. */
                    vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800235a:	4619      	mov	r1, r3
 800235c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800235e:	f001 fd49 	bl	8003df4 <vTaskRemoveFromUnorderedEventList>
                }

                /* Move onto the next list item.  Note pxListItem->pxNext is not
                 * used here as the list item may have been removed from the event list
                 * and inserted into the ready/pending reading list. */
                pxListItem = pxNext;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while( pxListItem != pxListEnd )
 8002366:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	429a      	cmp	r2, r3
 800236c:	d1be      	bne.n	80022ec <xEventGroupSetBits+0x5c>
            }

            /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
             * bit was set in the control word. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002374:	43db      	mvns	r3, r3
 8002376:	401a      	ands	r2, r3
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	601a      	str	r2, [r3, #0]
        }
        ( void ) xTaskResumeAll();
 800237c:	f001 f942 	bl	8003604 <xTaskResumeAll>

        traceRETURN_xEventGroupSetBits( pxEventBits->uxEventBits );

        return pxEventBits->uxEventBits;
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	681b      	ldr	r3, [r3, #0]
    }
 8002384:	4618      	mov	r0, r3
 8002386:	3730      	adds	r7, #48	@ 0x30
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	08022734 	.word	0x08022734

08002390 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

    void vEventGroupDelete( EventGroupHandle_t xEventGroup )
    {
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
        EventGroup_t * pxEventBits = xEventGroup;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	60fb      	str	r3, [r7, #12]
        const List_t * pxTasksWaitingForBits;

        traceENTER_vEventGroupDelete( xEventGroup );

        configASSERT( pxEventBits );
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d104      	bne.n	80023ac <vEventGroupDelete+0x1c>
 80023a2:	f240 218e 	movw	r1, #654	@ 0x28e
 80023a6:	4814      	ldr	r0, [pc, #80]	@ (80023f8 <vEventGroupDelete+0x68>)
 80023a8:	f7fe feb6 	bl	8001118 <vAssertCalled>

        pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	3304      	adds	r3, #4
 80023b0:	60bb      	str	r3, [r7, #8]

        vTaskSuspendAll();
 80023b2:	f001 f919 	bl	80035e8 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_DELETE( xEventGroup );

            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 80023b6:	e011      	b.n	80023dc <vEventGroupDelete+0x4c>
            {
                /* Unblock the task, returning 0 as the event list is being deleted
                 * and cannot therefore have any bits set. */
                configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	3308      	adds	r3, #8
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d104      	bne.n	80023ce <vEventGroupDelete+0x3e>
 80023c4:	f240 219a 	movw	r1, #666	@ 0x29a
 80023c8:	480b      	ldr	r0, [pc, #44]	@ (80023f8 <vEventGroupDelete+0x68>)
 80023ca:	f7fe fea5 	bl	8001118 <vAssertCalled>
                vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80023d6:	4618      	mov	r0, r3
 80023d8:	f001 fd0c 	bl	8003df4 <vTaskRemoveFromUnorderedEventList>
            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1e9      	bne.n	80023b8 <vEventGroupDelete+0x28>
            }
        }
        ( void ) xTaskResumeAll();
 80023e4:	f001 f90e 	bl	8003604 <xTaskResumeAll>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
        {
            /* The event group can only have been allocated dynamically - free
             * it again. */
            vPortFree( pxEventBits );
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f003 f94f 	bl	800568c <vPortFree>
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

        traceRETURN_vEventGroupDelete();
    }
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	08022734 	.word	0x08022734

080023fc <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

    static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                            const EventBits_t uxBitsToWaitFor,
                                            const BaseType_t xWaitForAllBits )
    {
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
        BaseType_t xWaitConditionMet = pdFALSE;
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]

        if( xWaitForAllBits == pdFALSE )
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d107      	bne.n	8002422 <prvTestWaitCondition+0x26>
        {
            /* Task only has to wait for one bit within uxBitsToWaitFor to be
             * set.  Is one already set? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	4013      	ands	r3, r2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00a      	beq.n	8002432 <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 800241c:	2301      	movs	r3, #1
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	e007      	b.n	8002432 <prvTestWaitCondition+0x36>
        }
        else
        {
            /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
             * Are they set already? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	4013      	ands	r3, r2
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	429a      	cmp	r2, r3
 800242c:	d101      	bne.n	8002432 <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 800242e:	2301      	movs	r3, #1
 8002430:	617b      	str	r3, [r7, #20]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        return xWaitConditionMet;
 8002432:	697b      	ldr	r3, [r7, #20]
    }
 8002434:	4618      	mov	r0, r3
 8002436:	371c      	adds	r7, #28
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f103 0208 	add.w	r2, r3, #8
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f04f 32ff 	mov.w	r2, #4294967295
 8002458:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f103 0208 	add.w	r2, r3, #8
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f103 0208 	add.w	r2, r3, #8
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800249a:	b480      	push	{r7}
 800249c:	b085      	sub	sp, #20
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 80024d6:	bf00      	nop
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80024e2:	b480      	push	{r7}
 80024e4:	b085      	sub	sp, #20
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f8:	d103      	bne.n	8002502 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	e00c      	b.n	800251c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3308      	adds	r3, #8
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	e002      	b.n	8002510 <vListInsert+0x2e>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	429a      	cmp	r2, r3
 800251a:	d2f6      	bcs.n	800250a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8002548:	bf00      	nop
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6892      	ldr	r2, [r2, #8]
 800256a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6852      	ldr	r2, [r2, #4]
 8002574:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	429a      	cmp	r2, r3
 800257e:	d103      	bne.n	8002588 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	1e5a      	subs	r2, r3, #1
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80025b2:	2301      	movs	r3, #1
 80025b4:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	60bb      	str	r3, [r7, #8]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d104      	bne.n	80025ca <xQueueGenericReset+0x22>
 80025c0:	f240 1137 	movw	r1, #311	@ 0x137
 80025c4:	4839      	ldr	r0, [pc, #228]	@ (80026ac <xQueueGenericReset+0x104>)
 80025c6:	f7fe fda7 	bl	8001118 <vAssertCalled>

    if( ( pxQueue != NULL ) &&
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d05d      	beq.n	800268c <xQueueGenericReset+0xe4>
        ( pxQueue->uxLength >= 1U ) &&
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d059      	beq.n	800268c <xQueueGenericReset+0xe4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025e0:	2100      	movs	r1, #0
 80025e2:	fba3 2302 	umull	r2, r3, r3, r2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d000      	beq.n	80025ec <xQueueGenericReset+0x44>
 80025ea:	2101      	movs	r1, #1
 80025ec:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d14c      	bne.n	800268c <xQueueGenericReset+0xe4>
    {
        taskENTER_CRITICAL();
 80025f2:	f002 fe75 	bl	80052e0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025fe:	68b9      	ldr	r1, [r7, #8]
 8002600:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002602:	fb01 f303 	mul.w	r3, r1, r3
 8002606:	441a      	add	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2200      	movs	r2, #0
 8002610:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002622:	3b01      	subs	r3, #1
 8002624:	68b9      	ldr	r1, [r7, #8]
 8002626:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002628:	fb01 f303 	mul.w	r3, r1, r3
 800262c:	441a      	add	r2, r3
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	22ff      	movs	r2, #255	@ 0xff
 8002636:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	22ff      	movs	r2, #255	@ 0xff
 800263e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d114      	bne.n	8002672 <xQueueGenericReset+0xca>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d01a      	beq.n	8002686 <xQueueGenericReset+0xde>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	3310      	adds	r3, #16
 8002654:	4618      	mov	r0, r3
 8002656:	f001 fafb 	bl	8003c50 <xTaskRemoveFromEventList>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d012      	beq.n	8002686 <xQueueGenericReset+0xde>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002660:	4b13      	ldr	r3, [pc, #76]	@ (80026b0 <xQueueGenericReset+0x108>)
 8002662:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	f3bf 8f4f 	dsb	sy
 800266c:	f3bf 8f6f 	isb	sy
 8002670:	e009      	b.n	8002686 <xQueueGenericReset+0xde>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	3310      	adds	r3, #16
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff fee2 	bl	8002440 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	3324      	adds	r3, #36	@ 0x24
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff fedd 	bl	8002440 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002686:	f002 fe57 	bl	8005338 <vPortExitCritical>
 800268a:	e001      	b.n	8002690 <xQueueGenericReset+0xe8>
    }
    else
    {
        xReturn = pdFAIL;
 800268c:	2300      	movs	r3, #0
 800268e:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d104      	bne.n	80026a0 <xQueueGenericReset+0xf8>
 8002696:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 800269a:	4804      	ldr	r0, [pc, #16]	@ (80026ac <xQueueGenericReset+0x104>)
 800269c:	f7fe fd3c 	bl	8001118 <vAssertCalled>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 80026a0:	68fb      	ldr	r3, [r7, #12]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	08022760 	.word	0x08022760
 80026b0:	e000ed04 	.word	0xe000ed04

080026b4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08a      	sub	sp, #40	@ 0x28
 80026b8:	af02      	add	r7, sp, #8
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	4613      	mov	r3, r2
 80026c0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d02e      	beq.n	800272a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80026cc:	2100      	movs	r1, #0
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	fba3 2302 	umull	r2, r3, r3, r2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d000      	beq.n	80026dc <xQueueGenericCreate+0x28>
 80026da:	2101      	movs	r1, #1
 80026dc:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d123      	bne.n	800272a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80026ea:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80026ee:	d81c      	bhi.n	800272a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	fb02 f303 	mul.w	r3, r2, r3
 80026f8:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	3350      	adds	r3, #80	@ 0x50
 80026fe:	4618      	mov	r0, r3
 8002700:	f002 fef0 	bl	80054e4 <pvPortMalloc>
 8002704:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d016      	beq.n	800273a <xQueueGenericCreate+0x86>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	3350      	adds	r3, #80	@ 0x50
 8002714:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002716:	79fa      	ldrb	r2, [r7, #7]
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	4613      	mov	r3, r2
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f810 	bl	8002748 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002728:	e007      	b.n	800273a <xQueueGenericCreate+0x86>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d104      	bne.n	800273a <xQueueGenericCreate+0x86>
 8002730:	f240 212a 	movw	r1, #554	@ 0x22a
 8002734:	4803      	ldr	r0, [pc, #12]	@ (8002744 <xQueueGenericCreate+0x90>)
 8002736:	f7fe fcef 	bl	8001118 <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 800273a:	69fb      	ldr	r3, [r7, #28]
    }
 800273c:	4618      	mov	r0, r3
 800273e:	3720      	adds	r7, #32
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	08022760 	.word	0x08022760

08002748 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
 8002754:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d103      	bne.n	8002764 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	e002      	b.n	800276a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002776:	2101      	movs	r1, #1
 8002778:	69b8      	ldr	r0, [r7, #24]
 800277a:	f7ff ff15 	bl	80025a8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	78fa      	ldrb	r2, [r7, #3]
 8002782:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002786:	bf00      	nop
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00e      	beq.n	80027ba <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80027ae:	2300      	movs	r3, #0
 80027b0:	2200      	movs	r2, #0
 80027b2:	2100      	movs	r1, #0
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f847 	bl	8002848 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b086      	sub	sp, #24
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	4603      	mov	r3, r0
 80027ca:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80027cc:	2301      	movs	r3, #1
 80027ce:	617b      	str	r3, [r7, #20]
 80027d0:	2300      	movs	r3, #0
 80027d2:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueCreateMutex( ucQueueType );

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	461a      	mov	r2, r3
 80027d8:	6939      	ldr	r1, [r7, #16]
 80027da:	6978      	ldr	r0, [r7, #20]
 80027dc:	f7ff ff6a 	bl	80026b4 <xQueueGenericCreate>
 80027e0:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f7ff ffd3 	bl	800278e <prvInitialiseMutex>

        traceRETURN_xQueueCreateMutex( xNewQueue );

        return xNewQueue;
 80027e8:	68fb      	ldr	r3, [r7, #12]
    }
 80027ea:	4618      	mov	r0, r3
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
	...

080027f4 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]

        traceENTER_xQueueCreateCountingSemaphore( uxMaxCount, uxInitialCount );

        if( ( uxMaxCount != 0U ) &&
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d010      	beq.n	800282a <xQueueCreateCountingSemaphore+0x36>
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	429a      	cmp	r2, r3
 800280e:	d80c      	bhi.n	800282a <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002810:	2202      	movs	r2, #2
 8002812:	2100      	movs	r1, #0
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff ff4d 	bl	80026b4 <xQueueGenericCreate>
 800281a:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00b      	beq.n	800283a <xQueueCreateCountingSemaphore+0x46>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 8002828:	e007      	b.n	800283a <xQueueCreateCountingSemaphore+0x46>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d104      	bne.n	800283a <xQueueCreateCountingSemaphore+0x46>
 8002830:	f240 319f 	movw	r1, #927	@ 0x39f
 8002834:	4803      	ldr	r0, [pc, #12]	@ (8002844 <xQueueCreateCountingSemaphore+0x50>)
 8002836:	f7fe fc6f 	bl	8001118 <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueCreateCountingSemaphore( xHandle );

        return xHandle;
 800283a:	68fb      	ldr	r3, [r7, #12]
    }
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	08022760 	.word	0x08022760

08002848 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08a      	sub	sp, #40	@ 0x28
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
 8002854:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002856:	2300      	movs	r3, #0
 8002858:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	623b      	str	r3, [r7, #32]

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 800285e:	6a3b      	ldr	r3, [r7, #32]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d104      	bne.n	800286e <xQueueGenericSend+0x26>
 8002864:	f240 31b6 	movw	r1, #950	@ 0x3b6
 8002868:	4869      	ldr	r0, [pc, #420]	@ (8002a10 <xQueueGenericSend+0x1c8>)
 800286a:	f7fe fc55 	bl	8001118 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d103      	bne.n	800287c <xQueueGenericSend+0x34>
 8002874:	6a3b      	ldr	r3, [r7, #32]
 8002876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <xQueueGenericSend+0x38>
 800287c:	2301      	movs	r3, #1
 800287e:	e000      	b.n	8002882 <xQueueGenericSend+0x3a>
 8002880:	2300      	movs	r3, #0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d104      	bne.n	8002890 <xQueueGenericSend+0x48>
 8002886:	f240 31b7 	movw	r1, #951	@ 0x3b7
 800288a:	4861      	ldr	r0, [pc, #388]	@ (8002a10 <xQueueGenericSend+0x1c8>)
 800288c:	f7fe fc44 	bl	8001118 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	2b02      	cmp	r3, #2
 8002894:	d103      	bne.n	800289e <xQueueGenericSend+0x56>
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <xQueueGenericSend+0x5a>
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <xQueueGenericSend+0x5c>
 80028a2:	2300      	movs	r3, #0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d104      	bne.n	80028b2 <xQueueGenericSend+0x6a>
 80028a8:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
 80028ac:	4858      	ldr	r0, [pc, #352]	@ (8002a10 <xQueueGenericSend+0x1c8>)
 80028ae:	f7fe fc33 	bl	8001118 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028b2:	f001 fcb7 	bl	8004224 <xTaskGetSchedulerState>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d102      	bne.n	80028c2 <xQueueGenericSend+0x7a>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <xQueueGenericSend+0x7e>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <xQueueGenericSend+0x80>
 80028c6:	2300      	movs	r3, #0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d104      	bne.n	80028d6 <xQueueGenericSend+0x8e>
 80028cc:	f240 31bb 	movw	r1, #955	@ 0x3bb
 80028d0:	484f      	ldr	r0, [pc, #316]	@ (8002a10 <xQueueGenericSend+0x1c8>)
 80028d2:	f7fe fc21 	bl	8001118 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80028d6:	f002 fd03 	bl	80052e0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d302      	bcc.n	80028ec <xQueueGenericSend+0xa4>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d129      	bne.n	8002940 <xQueueGenericSend+0xf8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	68b9      	ldr	r1, [r7, #8]
 80028f0:	6a38      	ldr	r0, [r7, #32]
 80028f2:	f000 fabb 	bl	8002e6c <prvCopyDataToQueue>
 80028f6:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d010      	beq.n	8002922 <xQueueGenericSend+0xda>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	3324      	adds	r3, #36	@ 0x24
 8002904:	4618      	mov	r0, r3
 8002906:	f001 f9a3 	bl	8003c50 <xTaskRemoveFromEventList>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d013      	beq.n	8002938 <xQueueGenericSend+0xf0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002910:	4b40      	ldr	r3, [pc, #256]	@ (8002a14 <xQueueGenericSend+0x1cc>)
 8002912:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	f3bf 8f4f 	dsb	sy
 800291c:	f3bf 8f6f 	isb	sy
 8002920:	e00a      	b.n	8002938 <xQueueGenericSend+0xf0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d007      	beq.n	8002938 <xQueueGenericSend+0xf0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8002928:	4b3a      	ldr	r3, [pc, #232]	@ (8002a14 <xQueueGenericSend+0x1cc>)
 800292a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002938:	f002 fcfe 	bl	8005338 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 800293c:	2301      	movs	r3, #1
 800293e:	e063      	b.n	8002a08 <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d103      	bne.n	800294e <xQueueGenericSend+0x106>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002946:	f002 fcf7 	bl	8005338 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 800294a:	2300      	movs	r3, #0
 800294c:	e05c      	b.n	8002a08 <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800294e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002950:	2b00      	cmp	r3, #0
 8002952:	d106      	bne.n	8002962 <xQueueGenericSend+0x11a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002954:	f107 0314 	add.w	r3, r7, #20
 8002958:	4618      	mov	r0, r3
 800295a:	f001 fb23 	bl	8003fa4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800295e:	2301      	movs	r3, #1
 8002960:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002962:	f002 fce9 	bl	8005338 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002966:	f000 fe3f 	bl	80035e8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800296a:	f002 fcb9 	bl	80052e0 <vPortEnterCritical>
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002974:	b25b      	sxtb	r3, r3
 8002976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297a:	d103      	bne.n	8002984 <xQueueGenericSend+0x13c>
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800298a:	b25b      	sxtb	r3, r3
 800298c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002990:	d103      	bne.n	800299a <xQueueGenericSend+0x152>
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800299a:	f002 fccd 	bl	8005338 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800299e:	1d3a      	adds	r2, r7, #4
 80029a0:	f107 0314 	add.w	r3, r7, #20
 80029a4:	4611      	mov	r1, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f001 fb12 	bl	8003fd0 <xTaskCheckForTimeOut>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d124      	bne.n	80029fc <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80029b2:	6a38      	ldr	r0, [r7, #32]
 80029b4:	f000 fb52 	bl	800305c <prvIsQueueFull>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d018      	beq.n	80029f0 <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	3310      	adds	r3, #16
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	4611      	mov	r1, r2
 80029c6:	4618      	mov	r0, r3
 80029c8:	f001 f8d6 	bl	8003b78 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80029cc:	6a38      	ldr	r0, [r7, #32]
 80029ce:	f000 fadd 	bl	8002f8c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80029d2:	f000 fe17 	bl	8003604 <xTaskResumeAll>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f47f af7c 	bne.w	80028d6 <xQueueGenericSend+0x8e>
                {
                    taskYIELD_WITHIN_API();
 80029de:	4b0d      	ldr	r3, [pc, #52]	@ (8002a14 <xQueueGenericSend+0x1cc>)
 80029e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	f3bf 8f4f 	dsb	sy
 80029ea:	f3bf 8f6f 	isb	sy
 80029ee:	e772      	b.n	80028d6 <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80029f0:	6a38      	ldr	r0, [r7, #32]
 80029f2:	f000 facb 	bl	8002f8c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80029f6:	f000 fe05 	bl	8003604 <xTaskResumeAll>
 80029fa:	e76c      	b.n	80028d6 <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80029fc:	6a38      	ldr	r0, [r7, #32]
 80029fe:	f000 fac5 	bl	8002f8c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002a02:	f000 fdff 	bl	8003604 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8002a06:	2300      	movs	r3, #0
        }
    }
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3728      	adds	r7, #40	@ 0x28
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	08022760 	.word	0x08022760
 8002a14:	e000ed04 	.word	0xe000ed04

08002a18 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08a      	sub	sp, #40	@ 0x28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002a24:	2300      	movs	r3, #0
 8002a26:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	623b      	str	r3, [r7, #32]

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d104      	bne.n	8002a3c <xQueueReceive+0x24>
 8002a32:	f240 51e9 	movw	r1, #1513	@ 0x5e9
 8002a36:	485e      	ldr	r0, [pc, #376]	@ (8002bb0 <xQueueReceive+0x198>)
 8002a38:	f7fe fb6e 	bl	8001118 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d103      	bne.n	8002a4a <xQueueReceive+0x32>
 8002a42:	6a3b      	ldr	r3, [r7, #32]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <xQueueReceive+0x36>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <xQueueReceive+0x38>
 8002a4e:	2300      	movs	r3, #0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d104      	bne.n	8002a5e <xQueueReceive+0x46>
 8002a54:	f240 51ed 	movw	r1, #1517	@ 0x5ed
 8002a58:	4855      	ldr	r0, [pc, #340]	@ (8002bb0 <xQueueReceive+0x198>)
 8002a5a:	f7fe fb5d 	bl	8001118 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a5e:	f001 fbe1 	bl	8004224 <xTaskGetSchedulerState>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d102      	bne.n	8002a6e <xQueueReceive+0x56>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <xQueueReceive+0x5a>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <xQueueReceive+0x5c>
 8002a72:	2300      	movs	r3, #0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d104      	bne.n	8002a82 <xQueueReceive+0x6a>
 8002a78:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 8002a7c:	484c      	ldr	r0, [pc, #304]	@ (8002bb0 <xQueueReceive+0x198>)
 8002a7e:	f7fe fb4b 	bl	8001118 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002a82:	f002 fc2d 	bl	80052e0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a8a:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d01f      	beq.n	8002ad2 <xQueueReceive+0xba>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a92:	68b9      	ldr	r1, [r7, #8]
 8002a94:	6a38      	ldr	r0, [r7, #32]
 8002a96:	f000 fa53 	bl	8002f40 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	1e5a      	subs	r2, r3, #1
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00f      	beq.n	8002aca <xQueueReceive+0xb2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	3310      	adds	r3, #16
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f001 f8ce 	bl	8003c50 <xTaskRemoveFromEventList>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d007      	beq.n	8002aca <xQueueReceive+0xb2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002aba:	4b3e      	ldr	r3, [pc, #248]	@ (8002bb4 <xQueueReceive+0x19c>)
 8002abc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	f3bf 8f4f 	dsb	sy
 8002ac6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002aca:	f002 fc35 	bl	8005338 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e069      	b.n	8002ba6 <xQueueReceive+0x18e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d103      	bne.n	8002ae0 <xQueueReceive+0xc8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002ad8:	f002 fc2e 	bl	8005338 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8002adc:	2300      	movs	r3, #0
 8002ade:	e062      	b.n	8002ba6 <xQueueReceive+0x18e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d106      	bne.n	8002af4 <xQueueReceive+0xdc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002ae6:	f107 0314 	add.w	r3, r7, #20
 8002aea:	4618      	mov	r0, r3
 8002aec:	f001 fa5a 	bl	8003fa4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002af0:	2301      	movs	r3, #1
 8002af2:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002af4:	f002 fc20 	bl	8005338 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002af8:	f000 fd76 	bl	80035e8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002afc:	f002 fbf0 	bl	80052e0 <vPortEnterCritical>
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b06:	b25b      	sxtb	r3, r3
 8002b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0c:	d103      	bne.n	8002b16 <xQueueReceive+0xfe>
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b1c:	b25b      	sxtb	r3, r3
 8002b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b22:	d103      	bne.n	8002b2c <xQueueReceive+0x114>
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b2c:	f002 fc04 	bl	8005338 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b30:	1d3a      	adds	r2, r7, #4
 8002b32:	f107 0314 	add.w	r3, r7, #20
 8002b36:	4611      	mov	r1, r2
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f001 fa49 	bl	8003fd0 <xTaskCheckForTimeOut>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d123      	bne.n	8002b8c <xQueueReceive+0x174>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b44:	6a38      	ldr	r0, [r7, #32]
 8002b46:	f000 fa73 	bl	8003030 <prvIsQueueEmpty>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d017      	beq.n	8002b80 <xQueueReceive+0x168>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	3324      	adds	r3, #36	@ 0x24
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	4611      	mov	r1, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f001 f80d 	bl	8003b78 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002b5e:	6a38      	ldr	r0, [r7, #32]
 8002b60:	f000 fa14 	bl	8002f8c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002b64:	f000 fd4e 	bl	8003604 <xTaskResumeAll>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d189      	bne.n	8002a82 <xQueueReceive+0x6a>
                {
                    taskYIELD_WITHIN_API();
 8002b6e:	4b11      	ldr	r3, [pc, #68]	@ (8002bb4 <xQueueReceive+0x19c>)
 8002b70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	f3bf 8f4f 	dsb	sy
 8002b7a:	f3bf 8f6f 	isb	sy
 8002b7e:	e780      	b.n	8002a82 <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002b80:	6a38      	ldr	r0, [r7, #32]
 8002b82:	f000 fa03 	bl	8002f8c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002b86:	f000 fd3d 	bl	8003604 <xTaskResumeAll>
 8002b8a:	e77a      	b.n	8002a82 <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002b8c:	6a38      	ldr	r0, [r7, #32]
 8002b8e:	f000 f9fd 	bl	8002f8c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002b92:	f000 fd37 	bl	8003604 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b96:	6a38      	ldr	r0, [r7, #32]
 8002b98:	f000 fa4a 	bl	8003030 <prvIsQueueEmpty>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f43f af6f 	beq.w	8002a82 <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8002ba4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3728      	adds	r7, #40	@ 0x28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	08022760 	.word	0x08022760
 8002bb4:	e000ed04 	.word	0xe000ed04

08002bb8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08a      	sub	sp, #40	@ 0x28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	623b      	str	r3, [r7, #32]
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d104      	bne.n	8002bde <xQueueSemaphoreTake+0x26>
 8002bd4:	f240 6182 	movw	r1, #1666	@ 0x682
 8002bd8:	486c      	ldr	r0, [pc, #432]	@ (8002d8c <xQueueSemaphoreTake+0x1d4>)
 8002bda:	f7fe fa9d 	bl	8001118 <vAssertCalled>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d004      	beq.n	8002bf0 <xQueueSemaphoreTake+0x38>
 8002be6:	f240 6186 	movw	r1, #1670	@ 0x686
 8002bea:	4868      	ldr	r0, [pc, #416]	@ (8002d8c <xQueueSemaphoreTake+0x1d4>)
 8002bec:	f7fe fa94 	bl	8001118 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bf0:	f001 fb18 	bl	8004224 <xTaskGetSchedulerState>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d102      	bne.n	8002c00 <xQueueSemaphoreTake+0x48>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <xQueueSemaphoreTake+0x4c>
 8002c00:	2301      	movs	r3, #1
 8002c02:	e000      	b.n	8002c06 <xQueueSemaphoreTake+0x4e>
 8002c04:	2300      	movs	r3, #0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d104      	bne.n	8002c14 <xQueueSemaphoreTake+0x5c>
 8002c0a:	f240 618b 	movw	r1, #1675	@ 0x68b
 8002c0e:	485f      	ldr	r0, [pc, #380]	@ (8002d8c <xQueueSemaphoreTake+0x1d4>)
 8002c10:	f7fe fa82 	bl	8001118 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002c14:	f002 fb64 	bl	80052e0 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c1c:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d024      	beq.n	8002c6e <xQueueSemaphoreTake+0xb6>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	1e5a      	subs	r2, r3, #1
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d104      	bne.n	8002c3e <xQueueSemaphoreTake+0x86>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002c34:	f001 fd18 	bl	8004668 <pvTaskIncrementMutexHeldCount>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00f      	beq.n	8002c66 <xQueueSemaphoreTake+0xae>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3310      	adds	r3, #16
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f001 f800 	bl	8003c50 <xTaskRemoveFromEventList>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d007      	beq.n	8002c66 <xQueueSemaphoreTake+0xae>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002c56:	4b4e      	ldr	r3, [pc, #312]	@ (8002d90 <xQueueSemaphoreTake+0x1d8>)
 8002c58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	f3bf 8f4f 	dsb	sy
 8002c62:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002c66:	f002 fb67 	bl	8005338 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e089      	b.n	8002d82 <xQueueSemaphoreTake+0x1ca>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d103      	bne.n	8002c7c <xQueueSemaphoreTake+0xc4>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8002c74:	f002 fb60 	bl	8005338 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	e082      	b.n	8002d82 <xQueueSemaphoreTake+0x1ca>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d106      	bne.n	8002c90 <xQueueSemaphoreTake+0xd8>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002c82:	f107 030c 	add.w	r3, r7, #12
 8002c86:	4618      	mov	r0, r3
 8002c88:	f001 f98c 	bl	8003fa4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002c90:	f002 fb52 	bl	8005338 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002c94:	f000 fca8 	bl	80035e8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002c98:	f002 fb22 	bl	80052e0 <vPortEnterCritical>
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ca2:	b25b      	sxtb	r3, r3
 8002ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca8:	d103      	bne.n	8002cb2 <xQueueSemaphoreTake+0xfa>
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002cb8:	b25b      	sxtb	r3, r3
 8002cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbe:	d103      	bne.n	8002cc8 <xQueueSemaphoreTake+0x110>
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002cc8:	f002 fb36 	bl	8005338 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ccc:	463a      	mov	r2, r7
 8002cce:	f107 030c 	add.w	r3, r7, #12
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f001 f97b 	bl	8003fd0 <xTaskCheckForTimeOut>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d132      	bne.n	8002d46 <xQueueSemaphoreTake+0x18e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ce0:	69f8      	ldr	r0, [r7, #28]
 8002ce2:	f000 f9a5 	bl	8003030 <prvIsQueueEmpty>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d026      	beq.n	8002d3a <xQueueSemaphoreTake+0x182>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d109      	bne.n	8002d08 <xQueueSemaphoreTake+0x150>
                    {
                        taskENTER_CRITICAL();
 8002cf4:	f002 faf4 	bl	80052e0 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f001 faaf 	bl	8004260 <xTaskPriorityInherit>
 8002d02:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 8002d04:	f002 fb18 	bl	8005338 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	3324      	adds	r3, #36	@ 0x24
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	4611      	mov	r1, r2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 ff31 	bl	8003b78 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002d16:	69f8      	ldr	r0, [r7, #28]
 8002d18:	f000 f938 	bl	8002f8c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002d1c:	f000 fc72 	bl	8003604 <xTaskResumeAll>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f47f af76 	bne.w	8002c14 <xQueueSemaphoreTake+0x5c>
                {
                    taskYIELD_WITHIN_API();
 8002d28:	4b19      	ldr	r3, [pc, #100]	@ (8002d90 <xQueueSemaphoreTake+0x1d8>)
 8002d2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	f3bf 8f4f 	dsb	sy
 8002d34:	f3bf 8f6f 	isb	sy
 8002d38:	e76c      	b.n	8002c14 <xQueueSemaphoreTake+0x5c>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8002d3a:	69f8      	ldr	r0, [r7, #28]
 8002d3c:	f000 f926 	bl	8002f8c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002d40:	f000 fc60 	bl	8003604 <xTaskResumeAll>
 8002d44:	e766      	b.n	8002c14 <xQueueSemaphoreTake+0x5c>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8002d46:	69f8      	ldr	r0, [r7, #28]
 8002d48:	f000 f920 	bl	8002f8c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002d4c:	f000 fc5a 	bl	8003604 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d50:	69f8      	ldr	r0, [r7, #28]
 8002d52:	f000 f96d 	bl	8003030 <prvIsQueueEmpty>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f43f af5b 	beq.w	8002c14 <xQueueSemaphoreTake+0x5c>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00d      	beq.n	8002d80 <xQueueSemaphoreTake+0x1c8>
                    {
                        taskENTER_CRITICAL();
 8002d64:	f002 fabc 	bl	80052e0 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002d68:	69f8      	ldr	r0, [r7, #28]
 8002d6a:	f000 f867 	bl	8002e3c <prvGetDisinheritPriorityAfterTimeout>
 8002d6e:	6178      	str	r0, [r7, #20]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	6979      	ldr	r1, [r7, #20]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f001 fbae 	bl	80044d8 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8002d7c:	f002 fadc 	bl	8005338 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8002d80:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3728      	adds	r7, #40	@ 0x28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	08022760 	.word	0x08022760
 8002d90:	e000ed04 	.word	0xe000ed04

08002d94 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    traceENTER_uxQueueMessagesWaiting( xQueue );

    configASSERT( xQueue );
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d104      	bne.n	8002dac <uxQueueMessagesWaiting+0x18>
 8002da2:	f640 019b 	movw	r1, #2203	@ 0x89b
 8002da6:	4807      	ldr	r0, [pc, #28]	@ (8002dc4 <uxQueueMessagesWaiting+0x30>)
 8002da8:	f7fe f9b6 	bl	8001118 <vAssertCalled>

    taskENTER_CRITICAL();
 8002dac:	f002 fa98 	bl	80052e0 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db4:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8002db6:	f002 fabf 	bl	8005338 <vPortExitCritical>

    traceRETURN_uxQueueMessagesWaiting( uxReturn );

    return uxReturn;
 8002dba:	68fb      	ldr	r3, [r7, #12]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	08022760 	.word	0x08022760

08002dc8 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	60fb      	str	r3, [r7, #12]

    traceENTER_uxQueueSpacesAvailable( xQueue );

    configASSERT( pxQueue );
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d104      	bne.n	8002de4 <uxQueueSpacesAvailable+0x1c>
 8002dda:	f44f 610b 	mov.w	r1, #2224	@ 0x8b0
 8002dde:	4809      	ldr	r0, [pc, #36]	@ (8002e04 <uxQueueSpacesAvailable+0x3c>)
 8002de0:	f7fe f99a 	bl	8001118 <vAssertCalled>

    taskENTER_CRITICAL();
 8002de4:	f002 fa7c 	bl	80052e0 <vPortEnterCritical>
    {
        uxReturn = ( UBaseType_t ) ( pxQueue->uxLength - pxQueue->uxMessagesWaiting );
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	60bb      	str	r3, [r7, #8]
    }
    taskEXIT_CRITICAL();
 8002df4:	f002 faa0 	bl	8005338 <vPortExitCritical>

    traceRETURN_uxQueueSpacesAvailable( uxReturn );

    return uxReturn;
 8002df8:	68bb      	ldr	r3, [r7, #8]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	08022760 	.word	0x08022760

08002e08 <vQueueDelete>:
    return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	60fb      	str	r3, [r7, #12]

    traceENTER_vQueueDelete( xQueue );

    configASSERT( pxQueue );
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d104      	bne.n	8002e24 <vQueueDelete+0x1c>
 8002e1a:	f640 01d4 	movw	r1, #2260	@ 0x8d4
 8002e1e:	4806      	ldr	r0, [pc, #24]	@ (8002e38 <vQueueDelete+0x30>)
 8002e20:	f7fe f97a 	bl	8001118 <vAssertCalled>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 f979 	bl	800311c <vQueueUnregisterQueue>

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
    {
        /* The queue can only have been allocated dynamically - free it
         * again. */
        vPortFree( pxQueue );
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f002 fc2e 	bl	800568c <vPortFree>
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

    traceRETURN_vQueueDelete();
}
 8002e30:	bf00      	nop
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	08022760 	.word	0x08022760

08002e3c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d006      	beq.n	8002e5a <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f1c3 0307 	rsb	r3, r3, #7
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	e001      	b.n	8002e5e <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
    }
 8002e60:	4618      	mov	r0, r3
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e80:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10d      	bne.n	8002ea6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d14d      	bne.n	8002f2e <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f001 fa82 	bl	80043a0 <xTaskPriorityDisinherit>
 8002e9c:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	e043      	b.n	8002f2e <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d119      	bne.n	8002ee0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6858      	ldr	r0, [r3, #4]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	68b9      	ldr	r1, [r7, #8]
 8002eb8:	f01d fd54 	bl	8020964 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec4:	441a      	add	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d32b      	bcc.n	8002f2e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	e026      	b.n	8002f2e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	68d8      	ldr	r0, [r3, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee8:	461a      	mov	r2, r3
 8002eea:	68b9      	ldr	r1, [r7, #8]
 8002eec:	f01d fd3a 	bl	8020964 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef8:	425b      	negs	r3, r3
 8002efa:	441a      	add	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d207      	bcs.n	8002f1c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f14:	425b      	negs	r3, r3
 8002f16:	441a      	add	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d105      	bne.n	8002f2e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d002      	beq.n	8002f2e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8002f36:	697b      	ldr	r3, [r7, #20]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d018      	beq.n	8002f84 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5a:	441a      	add	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d303      	bcc.n	8002f74 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68d9      	ldr	r1, [r3, #12]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	6838      	ldr	r0, [r7, #0]
 8002f80:	f01d fcf0 	bl	8020964 <memcpy>
    }
}
 8002f84:	bf00      	nop
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002f94:	f002 f9a4 	bl	80052e0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f9e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002fa0:	e011      	b.n	8002fc6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d012      	beq.n	8002fd0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3324      	adds	r3, #36	@ 0x24
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 fe4e 	bl	8003c50 <xTaskRemoveFromEventList>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002fba:	f001 f865 	bl	8004088 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	dce9      	bgt.n	8002fa2 <prvUnlockQueue+0x16>
 8002fce:	e000      	b.n	8002fd2 <prvUnlockQueue+0x46>
                    break;
 8002fd0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	22ff      	movs	r2, #255	@ 0xff
 8002fd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002fda:	f002 f9ad 	bl	8005338 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002fde:	f002 f97f 	bl	80052e0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002fe8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fea:	e011      	b.n	8003010 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d012      	beq.n	800301a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3310      	adds	r3, #16
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 fe29 	bl	8003c50 <xTaskRemoveFromEventList>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003004:	f001 f840 	bl	8004088 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003008:	7bbb      	ldrb	r3, [r7, #14]
 800300a:	3b01      	subs	r3, #1
 800300c:	b2db      	uxtb	r3, r3
 800300e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003010:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003014:	2b00      	cmp	r3, #0
 8003016:	dce9      	bgt.n	8002fec <prvUnlockQueue+0x60>
 8003018:	e000      	b.n	800301c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800301a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	22ff      	movs	r2, #255	@ 0xff
 8003020:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8003024:	f002 f988 	bl	8005338 <vPortExitCritical>
}
 8003028:	bf00      	nop
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003038:	f002 f952 	bl	80052e0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003040:	2b00      	cmp	r3, #0
 8003042:	d102      	bne.n	800304a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003044:	2301      	movs	r3, #1
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	e001      	b.n	800304e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800304e:	f002 f973 	bl	8005338 <vPortExitCritical>

    return xReturn;
 8003052:	68fb      	ldr	r3, [r7, #12]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003064:	f002 f93c 	bl	80052e0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003070:	429a      	cmp	r2, r3
 8003072:	d102      	bne.n	800307a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003074:	2301      	movs	r3, #1
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	e001      	b.n	800307e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800307a:	2300      	movs	r3, #0
 800307c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800307e:	f002 f95b 	bl	8005338 <vPortExitCritical>

    return xReturn;
 8003082:	68fb      	ldr	r3, [r7, #12]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003096:	2300      	movs	r3, #0
 8003098:	60bb      	str	r3, [r7, #8]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d104      	bne.n	80030aa <vQueueAddToRegistry+0x1e>
 80030a0:	f640 31c9 	movw	r1, #3017	@ 0xbc9
 80030a4:	481b      	ldr	r0, [pc, #108]	@ (8003114 <vQueueAddToRegistry+0x88>)
 80030a6:	f7fe f837 	bl	8001118 <vAssertCalled>

        if( pcQueueName != NULL )
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d024      	beq.n	80030fa <vQueueAddToRegistry+0x6e>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80030b0:	2300      	movs	r3, #0
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	e01e      	b.n	80030f4 <vQueueAddToRegistry+0x68>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80030b6:	4a18      	ldr	r2, [pc, #96]	@ (8003118 <vQueueAddToRegistry+0x8c>)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	4413      	add	r3, r2
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d105      	bne.n	80030d2 <vQueueAddToRegistry+0x46>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	4a13      	ldr	r2, [pc, #76]	@ (8003118 <vQueueAddToRegistry+0x8c>)
 80030cc:	4413      	add	r3, r2
 80030ce:	60bb      	str	r3, [r7, #8]
                    break;
 80030d0:	e013      	b.n	80030fa <vQueueAddToRegistry+0x6e>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10a      	bne.n	80030ee <vQueueAddToRegistry+0x62>
 80030d8:	4a0f      	ldr	r2, [pc, #60]	@ (8003118 <vQueueAddToRegistry+0x8c>)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d104      	bne.n	80030ee <vQueueAddToRegistry+0x62>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4a0b      	ldr	r2, [pc, #44]	@ (8003118 <vQueueAddToRegistry+0x8c>)
 80030ea:	4413      	add	r3, r2
 80030ec:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	3301      	adds	r3, #1
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2b07      	cmp	r3, #7
 80030f8:	d9dd      	bls.n	80030b6 <vQueueAddToRegistry+0x2a>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <vQueueAddToRegistry+0x80>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 800310c:	bf00      	nop
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	08022760 	.word	0x08022760
 8003118:	20000a74 	.word	0x20000a74

0800311c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        traceENTER_vQueueUnregisterQueue( xQueue );

        configASSERT( xQueue );
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d104      	bne.n	8003134 <vQueueUnregisterQueue+0x18>
 800312a:	f640 411d 	movw	r1, #3101	@ 0xc1d
 800312e:	4812      	ldr	r0, [pc, #72]	@ (8003178 <vQueueUnregisterQueue+0x5c>)
 8003130:	f7fd fff2 	bl	8001118 <vAssertCalled>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003134:	2300      	movs	r3, #0
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	e016      	b.n	8003168 <vQueueUnregisterQueue+0x4c>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 800313a:	4a10      	ldr	r2, [pc, #64]	@ (800317c <vQueueUnregisterQueue+0x60>)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4413      	add	r3, r2
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	429a      	cmp	r2, r3
 8003148:	d10b      	bne.n	8003162 <vQueueUnregisterQueue+0x46>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 800314a:	4a0c      	ldr	r2, [pc, #48]	@ (800317c <vQueueUnregisterQueue+0x60>)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2100      	movs	r1, #0
 8003150:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003154:	4a09      	ldr	r2, [pc, #36]	@ (800317c <vQueueUnregisterQueue+0x60>)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	4413      	add	r3, r2
 800315c:	2200      	movs	r2, #0
 800315e:	605a      	str	r2, [r3, #4]
                break;
 8003160:	e006      	b.n	8003170 <vQueueUnregisterQueue+0x54>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	3301      	adds	r3, #1
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2b07      	cmp	r3, #7
 800316c:	d9e5      	bls.n	800313a <vQueueUnregisterQueue+0x1e>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        traceRETURN_vQueueUnregisterQueue();
    }
 800316e:	bf00      	nop
 8003170:	bf00      	nop
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	08022760 	.word	0x08022760
 800317c:	20000a74 	.word	0x20000a74

08003180 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8003180:	b580      	push	{r7, lr}
 8003182:	b08a      	sub	sp, #40	@ 0x28
 8003184:	af04      	add	r7, sp, #16
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
 800318c:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4618      	mov	r0, r3
 8003194:	f002 f9a6 	bl	80054e4 <pvPortMalloc>
 8003198:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d013      	beq.n	80031c8 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80031a0:	206c      	movs	r0, #108	@ 0x6c
 80031a2:	f002 f99f 	bl	80054e4 <pvPortMalloc>
 80031a6:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d008      	beq.n	80031c0 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80031ae:	226c      	movs	r2, #108	@ 0x6c
 80031b0:	2100      	movs	r1, #0
 80031b2:	6978      	ldr	r0, [r7, #20]
 80031b4:	f01d fce3 	bl	8020b7e <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80031be:	e005      	b.n	80031cc <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80031c0:	6938      	ldr	r0, [r7, #16]
 80031c2:	f002 fa63 	bl	800568c <vPortFree>
 80031c6:	e001      	b.n	80031cc <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00d      	beq.n	80031ee <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80031d2:	2300      	movs	r3, #0
 80031d4:	9303      	str	r3, [sp, #12]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	9302      	str	r3, [sp, #8]
 80031da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031dc:	9301      	str	r3, [sp, #4]
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	68b9      	ldr	r1, [r7, #8]
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 f829 	bl	8003240 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 80031ee:	697b      	ldr	r3, [r7, #20]
    }
 80031f0:	4618      	mov	r0, r3
 80031f2:	3718      	adds	r7, #24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b088      	sub	sp, #32
 80031fc:	af02      	add	r7, sp, #8
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8003206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003208:	9301      	str	r3, [sp, #4]
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	68b9      	ldr	r1, [r7, #8]
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f7ff ffb3 	bl	8003180 <prvCreateTask>
 800321a:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d005      	beq.n	800322e <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8003222:	6938      	ldr	r0, [r7, #16]
 8003224:	f000 f890 	bl	8003348 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003228:	2301      	movs	r3, #1
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	e002      	b.n	8003234 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800322e:	f04f 33ff 	mov.w	r3, #4294967295
 8003232:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8003234:	697b      	ldr	r3, [r7, #20]
    }
 8003236:	4618      	mov	r0, r3
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
	...

08003240 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
 800324c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800324e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003250:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	461a      	mov	r2, r3
 8003258:	21a5      	movs	r1, #165	@ 0xa5
 800325a:	f01d fc90 	bl	8020b7e <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800325e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003260:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8003268:	440b      	add	r3, r1
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	f023 0307 	bic.w	r3, r3, #7
 8003276:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	2b00      	cmp	r3, #0
 8003280:	d004      	beq.n	800328c <prvInitialiseNewTask+0x4c>
 8003282:	f240 712e 	movw	r1, #1838	@ 0x72e
 8003286:	482f      	ldr	r0, [pc, #188]	@ (8003344 <prvInitialiseNewTask+0x104>)
 8003288:	f7fd ff46 	bl	8001118 <vAssertCalled>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d01e      	beq.n	80032d0 <prvInitialiseNewTask+0x90>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003292:	2300      	movs	r3, #0
 8003294:	617b      	str	r3, [r7, #20]
 8003296:	e012      	b.n	80032be <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	4413      	add	r3, r2
 800329e:	7819      	ldrb	r1, [r3, #0]
 80032a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	4413      	add	r3, r2
 80032a6:	3334      	adds	r3, #52	@ 0x34
 80032a8:	460a      	mov	r2, r1
 80032aa:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	4413      	add	r3, r2
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d006      	beq.n	80032c6 <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	3301      	adds	r3, #1
 80032bc:	617b      	str	r3, [r7, #20]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2b0f      	cmp	r3, #15
 80032c2:	d9e9      	bls.n	8003298 <prvInitialiseNewTask+0x58>
 80032c4:	e000      	b.n	80032c8 <prvInitialiseNewTask+0x88>
            {
                break;
 80032c6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80032c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	2b06      	cmp	r3, #6
 80032d4:	d904      	bls.n	80032e0 <prvInitialiseNewTask+0xa0>
 80032d6:	f240 7164 	movw	r1, #1892	@ 0x764
 80032da:	481a      	ldr	r0, [pc, #104]	@ (8003344 <prvInitialiseNewTask+0x104>)
 80032dc:	f7fd ff1c 	bl	8001118 <vAssertCalled>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	2b06      	cmp	r3, #6
 80032e4:	d901      	bls.n	80032ea <prvInitialiseNewTask+0xaa>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80032e6:	2306      	movs	r3, #6
 80032e8:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80032ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ec:	6a3a      	ldr	r2, [r7, #32]
 80032ee:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80032f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f2:	6a3a      	ldr	r2, [r7, #32]
 80032f4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80032f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f8:	3304      	adds	r3, #4
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff f8c0 	bl	8002480 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003302:	3318      	adds	r3, #24
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff f8bb 	bl	8002480 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800330a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800330c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800330e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	f1c3 0207 	rsb	r2, r3, #7
 8003316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003318:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800331a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800331c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800331e:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	68f9      	ldr	r1, [r7, #12]
 8003324:	6938      	ldr	r0, [r7, #16]
 8003326:	f001 fea5 	bl	8005074 <pxPortInitialiseStack>
 800332a:	4602      	mov	r2, r0
 800332c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800332e:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8003330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003332:	2b00      	cmp	r3, #0
 8003334:	d002      	beq.n	800333c <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003338:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800333a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800333c:	bf00      	nop
 800333e:	3718      	adds	r7, #24
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	08022784 	.word	0x08022784

08003348 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8003350:	f001 ffc6 	bl	80052e0 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8003354:	4b41      	ldr	r3, [pc, #260]	@ (800345c <prvAddNewTaskToReadyList+0x114>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	3301      	adds	r3, #1
 800335a:	4a40      	ldr	r2, [pc, #256]	@ (800345c <prvAddNewTaskToReadyList+0x114>)
 800335c:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800335e:	4b40      	ldr	r3, [pc, #256]	@ (8003460 <prvAddNewTaskToReadyList+0x118>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d109      	bne.n	800337a <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8003366:	4a3e      	ldr	r2, [pc, #248]	@ (8003460 <prvAddNewTaskToReadyList+0x118>)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800336c:	4b3b      	ldr	r3, [pc, #236]	@ (800345c <prvAddNewTaskToReadyList+0x114>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d110      	bne.n	8003396 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8003374:	f000 feac 	bl	80040d0 <prvInitialiseTaskLists>
 8003378:	e00d      	b.n	8003396 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800337a:	4b3a      	ldr	r3, [pc, #232]	@ (8003464 <prvAddNewTaskToReadyList+0x11c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d109      	bne.n	8003396 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003382:	4b37      	ldr	r3, [pc, #220]	@ (8003460 <prvAddNewTaskToReadyList+0x118>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338c:	429a      	cmp	r2, r3
 800338e:	d802      	bhi.n	8003396 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8003390:	4a33      	ldr	r2, [pc, #204]	@ (8003460 <prvAddNewTaskToReadyList+0x118>)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8003396:	4b34      	ldr	r3, [pc, #208]	@ (8003468 <prvAddNewTaskToReadyList+0x120>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	3301      	adds	r3, #1
 800339c:	4a32      	ldr	r2, [pc, #200]	@ (8003468 <prvAddNewTaskToReadyList+0x120>)
 800339e:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80033a0:	4b31      	ldr	r3, [pc, #196]	@ (8003468 <prvAddNewTaskToReadyList+0x120>)
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ac:	2201      	movs	r2, #1
 80033ae:	409a      	lsls	r2, r3
 80033b0:	4b2e      	ldr	r3, [pc, #184]	@ (800346c <prvAddNewTaskToReadyList+0x124>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	4a2d      	ldr	r2, [pc, #180]	@ (800346c <prvAddNewTaskToReadyList+0x124>)
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033be:	492c      	ldr	r1, [pc, #176]	@ (8003470 <prvAddNewTaskToReadyList+0x128>)
 80033c0:	4613      	mov	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	3304      	adds	r3, #4
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	609a      	str	r2, [r3, #8]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	60da      	str	r2, [r3, #12]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	3204      	adds	r2, #4
 80033e6:	605a      	str	r2, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	1d1a      	adds	r2, r3, #4
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	609a      	str	r2, [r3, #8]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033f4:	4613      	mov	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4a1c      	ldr	r2, [pc, #112]	@ (8003470 <prvAddNewTaskToReadyList+0x128>)
 80033fe:	441a      	add	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	615a      	str	r2, [r3, #20]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003408:	4919      	ldr	r1, [pc, #100]	@ (8003470 <prvAddNewTaskToReadyList+0x128>)
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800341a:	1c59      	adds	r1, r3, #1
 800341c:	4814      	ldr	r0, [pc, #80]	@ (8003470 <prvAddNewTaskToReadyList+0x128>)
 800341e:	4613      	mov	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4403      	add	r3, r0
 8003428:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800342a:	f001 ff85 	bl	8005338 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800342e:	4b0d      	ldr	r3, [pc, #52]	@ (8003464 <prvAddNewTaskToReadyList+0x11c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00e      	beq.n	8003454 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8003436:	4b0a      	ldr	r3, [pc, #40]	@ (8003460 <prvAddNewTaskToReadyList+0x118>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003440:	429a      	cmp	r2, r3
 8003442:	d207      	bcs.n	8003454 <prvAddNewTaskToReadyList+0x10c>
 8003444:	4b0b      	ldr	r3, [pc, #44]	@ (8003474 <prvAddNewTaskToReadyList+0x12c>)
 8003446:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003454:	bf00      	nop
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	20000bb4 	.word	0x20000bb4
 8003460:	20000ab4 	.word	0x20000ab4
 8003464:	20000bc0 	.word	0x20000bc0
 8003468:	20000bd0 	.word	0x20000bd0
 800346c:	20000bbc 	.word	0x20000bbc
 8003470:	20000ab8 	.word	0x20000ab8
 8003474:	e000ed04 	.word	0xe000ed04

08003478 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d011      	beq.n	80034ae <vTaskDelay+0x36>
        {
            vTaskSuspendAll();
 800348a:	f000 f8ad 	bl	80035e8 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 800348e:	4b0f      	ldr	r3, [pc, #60]	@ (80034cc <vTaskDelay+0x54>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d004      	beq.n	80034a0 <vTaskDelay+0x28>
 8003496:	f640 118e 	movw	r1, #2446	@ 0x98e
 800349a:	480d      	ldr	r0, [pc, #52]	@ (80034d0 <vTaskDelay+0x58>)
 800349c:	f7fd fe3c 	bl	8001118 <vAssertCalled>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80034a0:	2100      	movs	r1, #0
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f001 fd64 	bl	8004f70 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80034a8:	f000 f8ac 	bl	8003604 <xTaskResumeAll>
 80034ac:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d107      	bne.n	80034c4 <vTaskDelay+0x4c>
        {
            taskYIELD_WITHIN_API();
 80034b4:	4b07      	ldr	r3, [pc, #28]	@ (80034d4 <vTaskDelay+0x5c>)
 80034b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	f3bf 8f4f 	dsb	sy
 80034c0:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 80034c4:	bf00      	nop
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	20000bdc 	.word	0x20000bdc
 80034d0:	08022784 	.word	0x08022784
 80034d4:	e000ed04 	.word	0xe000ed04

080034d8 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08a      	sub	sp, #40	@ 0x28
 80034dc:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 80034de:	2301      	movs	r3, #1
 80034e0:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80034e6:	2300      	movs	r3, #0
 80034e8:	617b      	str	r3, [r7, #20]
 80034ea:	e011      	b.n	8003510 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80034ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003564 <prvCreateIdleTasks+0x8c>)
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	4413      	add	r3, r2
 80034f2:	7819      	ldrb	r1, [r3, #0]
 80034f4:	463a      	mov	r2, r7
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	4413      	add	r3, r2
 80034fa:	460a      	mov	r2, r1
 80034fc:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80034fe:	463a      	mov	r2, r7
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	4413      	add	r3, r2
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d006      	beq.n	8003518 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	3301      	adds	r3, #1
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2b0f      	cmp	r3, #15
 8003514:	ddea      	ble.n	80034ec <prvCreateIdleTasks+0x14>
 8003516:	e000      	b.n	800351a <prvCreateIdleTasks+0x42>
        {
            break;
 8003518:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800351a:	2300      	movs	r3, #0
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	e016      	b.n	800354e <prvCreateIdleTasks+0x76>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8003520:	4b11      	ldr	r3, [pc, #68]	@ (8003568 <prvCreateIdleTasks+0x90>)
 8003522:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4a10      	ldr	r2, [pc, #64]	@ (800356c <prvCreateIdleTasks+0x94>)
 800352a:	4413      	add	r3, r2
 800352c:	4639      	mov	r1, r7
 800352e:	9301      	str	r3, [sp, #4]
 8003530:	2300      	movs	r3, #0
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	2300      	movs	r3, #0
 8003536:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800353a:	6938      	ldr	r0, [r7, #16]
 800353c:	f7ff fe5c 	bl	80031f8 <xTaskCreate>
 8003540:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d006      	beq.n	8003556 <prvCreateIdleTasks+0x7e>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	3301      	adds	r3, #1
 800354c:	61bb      	str	r3, [r7, #24]
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	2b00      	cmp	r3, #0
 8003552:	dde5      	ble.n	8003520 <prvCreateIdleTasks+0x48>
 8003554:	e000      	b.n	8003558 <prvCreateIdleTasks+0x80>
        {
            break;
 8003556:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8003558:	69fb      	ldr	r3, [r7, #28]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3720      	adds	r7, #32
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	080227a8 	.word	0x080227a8
 8003568:	080040a1 	.word	0x080040a1
 800356c:	20000bd8 	.word	0x20000bd8

08003570 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8003576:	f7ff ffaf 	bl	80034d8 <prvCreateIdleTasks>
 800357a:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d118      	bne.n	80035b4 <vTaskStartScheduler+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8003582:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003586:	b672      	cpsid	i
 8003588:	f383 8811 	msr	BASEPRI, r3
 800358c:	f3bf 8f6f 	isb	sy
 8003590:	f3bf 8f4f 	dsb	sy
 8003594:	b662      	cpsie	i
 8003596:	603b      	str	r3, [r7, #0]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8003598:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800359a:	4b0e      	ldr	r3, [pc, #56]	@ (80035d4 <vTaskStartScheduler+0x64>)
 800359c:	f04f 32ff 	mov.w	r2, #4294967295
 80035a0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80035a2:	4b0d      	ldr	r3, [pc, #52]	@ (80035d8 <vTaskStartScheduler+0x68>)
 80035a4:	2201      	movs	r2, #1
 80035a6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80035a8:	4b0c      	ldr	r3, [pc, #48]	@ (80035dc <vTaskStartScheduler+0x6c>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 80035ae:	f001 fde9 	bl	8005184 <xPortStartScheduler>
 80035b2:	e008      	b.n	80035c6 <vTaskStartScheduler+0x56>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ba:	d104      	bne.n	80035c6 <vTaskStartScheduler+0x56>
 80035bc:	f640 61a9 	movw	r1, #3753	@ 0xea9
 80035c0:	4807      	ldr	r0, [pc, #28]	@ (80035e0 <vTaskStartScheduler+0x70>)
 80035c2:	f7fd fda9 	bl	8001118 <vAssertCalled>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80035c6:	4b07      	ldr	r3, [pc, #28]	@ (80035e4 <vTaskStartScheduler+0x74>)
 80035c8:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 80035ca:	bf00      	nop
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000bd4 	.word	0x20000bd4
 80035d8:	20000bc0 	.word	0x20000bc0
 80035dc:	20000bb8 	.word	0x20000bb8
 80035e0:	08022784 	.word	0x08022784
 80035e4:	20000008 	.word	0x20000008

080035e8 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80035ec:	4b04      	ldr	r3, [pc, #16]	@ (8003600 <vTaskSuspendAll+0x18>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	3301      	adds	r3, #1
 80035f2:	4a03      	ldr	r2, [pc, #12]	@ (8003600 <vTaskSuspendAll+0x18>)
 80035f4:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 80035f6:	bf00      	nop
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	20000bdc 	.word	0x20000bdc

08003604 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b088      	sub	sp, #32
 8003608:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800360a:	2300      	movs	r3, #0
 800360c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800360e:	2300      	movs	r3, #0
 8003610:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8003612:	f001 fe65 	bl	80052e0 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8003616:	2300      	movs	r3, #0
 8003618:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800361a:	4b72      	ldr	r3, [pc, #456]	@ (80037e4 <xTaskResumeAll+0x1e0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d104      	bne.n	800362c <xTaskResumeAll+0x28>
 8003622:	f640 718b 	movw	r1, #3979	@ 0xf8b
 8003626:	4870      	ldr	r0, [pc, #448]	@ (80037e8 <xTaskResumeAll+0x1e4>)
 8003628:	f7fd fd76 	bl	8001118 <vAssertCalled>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800362c:	4b6d      	ldr	r3, [pc, #436]	@ (80037e4 <xTaskResumeAll+0x1e0>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	3b01      	subs	r3, #1
 8003632:	4a6c      	ldr	r2, [pc, #432]	@ (80037e4 <xTaskResumeAll+0x1e0>)
 8003634:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003636:	4b6b      	ldr	r3, [pc, #428]	@ (80037e4 <xTaskResumeAll+0x1e0>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	f040 80ca 	bne.w	80037d4 <xTaskResumeAll+0x1d0>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003640:	4b6a      	ldr	r3, [pc, #424]	@ (80037ec <xTaskResumeAll+0x1e8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80c5 	beq.w	80037d4 <xTaskResumeAll+0x1d0>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800364a:	e08e      	b.n	800376a <xTaskResumeAll+0x166>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800364c:	4b68      	ldr	r3, [pc, #416]	@ (80037f0 <xTaskResumeAll+0x1ec>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	69fa      	ldr	r2, [r7, #28]
 8003660:	6a12      	ldr	r2, [r2, #32]
 8003662:	609a      	str	r2, [r3, #8]
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	69fa      	ldr	r2, [r7, #28]
 800366a:	69d2      	ldr	r2, [r2, #28]
 800366c:	605a      	str	r2, [r3, #4]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	3318      	adds	r3, #24
 8003676:	429a      	cmp	r2, r3
 8003678:	d103      	bne.n	8003682 <xTaskResumeAll+0x7e>
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	6a1a      	ldr	r2, [r3, #32]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	605a      	str	r2, [r3, #4]
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	2200      	movs	r2, #0
 8003686:	629a      	str	r2, [r3, #40]	@ 0x28
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	1e5a      	subs	r2, r3, #1
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	60bb      	str	r3, [r7, #8]
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	68d2      	ldr	r2, [r2, #12]
 80036a0:	609a      	str	r2, [r3, #8]
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	69fa      	ldr	r2, [r7, #28]
 80036a8:	6892      	ldr	r2, [r2, #8]
 80036aa:	605a      	str	r2, [r3, #4]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	3304      	adds	r3, #4
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d103      	bne.n	80036c0 <xTaskResumeAll+0xbc>
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	605a      	str	r2, [r3, #4]
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	2200      	movs	r2, #0
 80036c4:	615a      	str	r2, [r3, #20]
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	1e5a      	subs	r2, r3, #1
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d4:	2201      	movs	r2, #1
 80036d6:	409a      	lsls	r2, r3
 80036d8:	4b46      	ldr	r3, [pc, #280]	@ (80037f4 <xTaskResumeAll+0x1f0>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4313      	orrs	r3, r2
 80036de:	4a45      	ldr	r2, [pc, #276]	@ (80037f4 <xTaskResumeAll+0x1f0>)
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036e6:	4944      	ldr	r1, [pc, #272]	@ (80037f8 <xTaskResumeAll+0x1f4>)
 80036e8:	4613      	mov	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	3304      	adds	r3, #4
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	607b      	str	r3, [r7, #4]
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	609a      	str	r2, [r3, #8]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689a      	ldr	r2, [r3, #8]
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	60da      	str	r2, [r3, #12]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	69fa      	ldr	r2, [r7, #28]
 800370c:	3204      	adds	r2, #4
 800370e:	605a      	str	r2, [r3, #4]
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	1d1a      	adds	r2, r3, #4
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	609a      	str	r2, [r3, #8]
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800371c:	4613      	mov	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4a34      	ldr	r2, [pc, #208]	@ (80037f8 <xTaskResumeAll+0x1f4>)
 8003726:	441a      	add	r2, r3
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	615a      	str	r2, [r3, #20]
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003730:	4931      	ldr	r1, [pc, #196]	@ (80037f8 <xTaskResumeAll+0x1f4>)
 8003732:	4613      	mov	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	440b      	add	r3, r1
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69fa      	ldr	r2, [r7, #28]
 8003740:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003742:	1c59      	adds	r1, r3, #1
 8003744:	482c      	ldr	r0, [pc, #176]	@ (80037f8 <xTaskResumeAll+0x1f4>)
 8003746:	4613      	mov	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4413      	add	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4403      	add	r3, r0
 8003750:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003756:	4b29      	ldr	r3, [pc, #164]	@ (80037fc <xTaskResumeAll+0x1f8>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375c:	429a      	cmp	r2, r3
 800375e:	d904      	bls.n	800376a <xTaskResumeAll+0x166>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8003760:	4a27      	ldr	r2, [pc, #156]	@ (8003800 <xTaskResumeAll+0x1fc>)
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	2101      	movs	r1, #1
 8003766:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800376a:	4b21      	ldr	r3, [pc, #132]	@ (80037f0 <xTaskResumeAll+0x1ec>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	f47f af6c 	bne.w	800364c <xTaskResumeAll+0x48>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <xTaskResumeAll+0x17a>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 800377a:	f000 fd27 	bl	80041cc <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800377e:	4b21      	ldr	r3, [pc, #132]	@ (8003804 <xTaskResumeAll+0x200>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d012      	beq.n	80037b0 <xTaskResumeAll+0x1ac>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 800378a:	f000 f86d 	bl	8003868 <xTaskIncrementTick>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d004      	beq.n	800379e <xTaskResumeAll+0x19a>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8003794:	4a1a      	ldr	r2, [pc, #104]	@ (8003800 <xTaskResumeAll+0x1fc>)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2101      	movs	r1, #1
 800379a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	3b01      	subs	r3, #1
 80037a2:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1ef      	bne.n	800378a <xTaskResumeAll+0x186>

                            xPendedTicks = 0;
 80037aa:	4b16      	ldr	r3, [pc, #88]	@ (8003804 <xTaskResumeAll+0x200>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 80037b0:	4a13      	ldr	r2, [pc, #76]	@ (8003800 <xTaskResumeAll+0x1fc>)
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00b      	beq.n	80037d4 <xTaskResumeAll+0x1d0>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80037bc:	2301      	movs	r3, #1
 80037be:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80037c0:	4b0e      	ldr	r3, [pc, #56]	@ (80037fc <xTaskResumeAll+0x1f8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4b10      	ldr	r3, [pc, #64]	@ (8003808 <xTaskResumeAll+0x204>)
 80037c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	f3bf 8f4f 	dsb	sy
 80037d0:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80037d4:	f001 fdb0 	bl	8005338 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 80037d8:	69bb      	ldr	r3, [r7, #24]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3720      	adds	r7, #32
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20000bdc 	.word	0x20000bdc
 80037e8:	08022784 	.word	0x08022784
 80037ec:	20000bb4 	.word	0x20000bb4
 80037f0:	20000b74 	.word	0x20000b74
 80037f4:	20000bbc 	.word	0x20000bbc
 80037f8:	20000ab8 	.word	0x20000ab8
 80037fc:	20000ab4 	.word	0x20000ab4
 8003800:	20000bc8 	.word	0x20000bc8
 8003804:	20000bc4 	.word	0x20000bc4
 8003808:	e000ed04 	.word	0xe000ed04

0800380c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003812:	4b05      	ldr	r3, [pc, #20]	@ (8003828 <xTaskGetTickCount+0x1c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8003818:	687b      	ldr	r3, [r7, #4]
}
 800381a:	4618      	mov	r0, r3
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	20000bb8 	.word	0x20000bb8

0800382c <pcTaskGetName>:
    return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char * pcTaskGetName( TaskHandle_t xTaskToQuery )
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]

    traceENTER_pcTaskGetName( xTaskToQuery );

    /* If null is passed in here then the name of the calling task is being
     * queried. */
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d102      	bne.n	8003840 <pcTaskGetName+0x14>
 800383a:	4b09      	ldr	r3, [pc, #36]	@ (8003860 <pcTaskGetName+0x34>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	e000      	b.n	8003842 <pcTaskGetName+0x16>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	60fb      	str	r3, [r7, #12]
    configASSERT( pxTCB );
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d104      	bne.n	8003854 <pcTaskGetName+0x28>
 800384a:	f241 0155 	movw	r1, #4181	@ 0x1055
 800384e:	4805      	ldr	r0, [pc, #20]	@ (8003864 <pcTaskGetName+0x38>)
 8003850:	f7fd fc62 	bl	8001118 <vAssertCalled>

    traceRETURN_pcTaskGetName( &( pxTCB->pcTaskName[ 0 ] ) );

    return &( pxTCB->pcTaskName[ 0 ] );
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	3334      	adds	r3, #52	@ 0x34
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	20000ab4 	.word	0x20000ab4
 8003864:	08022784 	.word	0x08022784

08003868 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800386e:	2300      	movs	r3, #0
 8003870:	61fb      	str	r3, [r7, #28]

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003872:	4b7b      	ldr	r3, [pc, #492]	@ (8003a60 <xTaskIncrementTick+0x1f8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	f040 80e8 	bne.w	8003a4c <xTaskIncrementTick+0x1e4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800387c:	4b79      	ldr	r3, [pc, #484]	@ (8003a64 <xTaskIncrementTick+0x1fc>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	3301      	adds	r3, #1
 8003882:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003884:	4a77      	ldr	r2, [pc, #476]	@ (8003a64 <xTaskIncrementTick+0x1fc>)
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d11a      	bne.n	80038c6 <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 8003890:	4b75      	ldr	r3, [pc, #468]	@ (8003a68 <xTaskIncrementTick+0x200>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d004      	beq.n	80038a4 <xTaskIncrementTick+0x3c>
 800389a:	f241 215f 	movw	r1, #4703	@ 0x125f
 800389e:	4873      	ldr	r0, [pc, #460]	@ (8003a6c <xTaskIncrementTick+0x204>)
 80038a0:	f7fd fc3a 	bl	8001118 <vAssertCalled>
 80038a4:	4b70      	ldr	r3, [pc, #448]	@ (8003a68 <xTaskIncrementTick+0x200>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	4b71      	ldr	r3, [pc, #452]	@ (8003a70 <xTaskIncrementTick+0x208>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a6e      	ldr	r2, [pc, #440]	@ (8003a68 <xTaskIncrementTick+0x200>)
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	4a6f      	ldr	r2, [pc, #444]	@ (8003a70 <xTaskIncrementTick+0x208>)
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	6013      	str	r3, [r2, #0]
 80038b8:	4b6e      	ldr	r3, [pc, #440]	@ (8003a74 <xTaskIncrementTick+0x20c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	3301      	adds	r3, #1
 80038be:	4a6d      	ldr	r2, [pc, #436]	@ (8003a74 <xTaskIncrementTick+0x20c>)
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	f000 fc83 	bl	80041cc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80038c6:	4b6c      	ldr	r3, [pc, #432]	@ (8003a78 <xTaskIncrementTick+0x210>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	f0c0 80a8 	bcc.w	8003a22 <xTaskIncrementTick+0x1ba>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038d2:	4b65      	ldr	r3, [pc, #404]	@ (8003a68 <xTaskIncrementTick+0x200>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d104      	bne.n	80038e6 <xTaskIncrementTick+0x7e>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 80038dc:	4b66      	ldr	r3, [pc, #408]	@ (8003a78 <xTaskIncrementTick+0x210>)
 80038de:	f04f 32ff 	mov.w	r2, #4294967295
 80038e2:	601a      	str	r2, [r3, #0]
                    break;
 80038e4:	e09d      	b.n	8003a22 <xTaskIncrementTick+0x1ba>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80038e6:	4b60      	ldr	r3, [pc, #384]	@ (8003a68 <xTaskIncrementTick+0x200>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d203      	bcs.n	8003906 <xTaskIncrementTick+0x9e>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80038fe:	4a5e      	ldr	r2, [pc, #376]	@ (8003a78 <xTaskIncrementTick+0x210>)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6013      	str	r3, [r2, #0]
                        break;
 8003904:	e08d      	b.n	8003a22 <xTaskIncrementTick+0x1ba>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	60bb      	str	r3, [r7, #8]
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	68d2      	ldr	r2, [r2, #12]
 8003914:	609a      	str	r2, [r3, #8]
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	6892      	ldr	r2, [r2, #8]
 800391e:	605a      	str	r2, [r3, #4]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	3304      	adds	r3, #4
 8003928:	429a      	cmp	r2, r3
 800392a:	d103      	bne.n	8003934 <xTaskIncrementTick+0xcc>
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	605a      	str	r2, [r3, #4]
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	2200      	movs	r2, #0
 8003938:	615a      	str	r2, [r3, #20]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	1e5a      	subs	r2, r3, #1
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003948:	2b00      	cmp	r3, #0
 800394a:	d01e      	beq.n	800398a <xTaskIncrementTick+0x122>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003950:	607b      	str	r3, [r7, #4]
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	6a12      	ldr	r2, [r2, #32]
 800395a:	609a      	str	r2, [r3, #8]
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	69d2      	ldr	r2, [r2, #28]
 8003964:	605a      	str	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	3318      	adds	r3, #24
 800396e:	429a      	cmp	r2, r3
 8003970:	d103      	bne.n	800397a <xTaskIncrementTick+0x112>
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	6a1a      	ldr	r2, [r3, #32]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	605a      	str	r2, [r3, #4]
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	2200      	movs	r2, #0
 800397e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	1e5a      	subs	r2, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398e:	2201      	movs	r2, #1
 8003990:	409a      	lsls	r2, r3
 8003992:	4b3a      	ldr	r3, [pc, #232]	@ (8003a7c <xTaskIncrementTick+0x214>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4313      	orrs	r3, r2
 8003998:	4a38      	ldr	r2, [pc, #224]	@ (8003a7c <xTaskIncrementTick+0x214>)
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039a0:	4937      	ldr	r1, [pc, #220]	@ (8003a80 <xTaskIncrementTick+0x218>)
 80039a2:	4613      	mov	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4413      	add	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	3304      	adds	r3, #4
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	603b      	str	r3, [r7, #0]
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	609a      	str	r2, [r3, #8]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	60da      	str	r2, [r3, #12]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	3204      	adds	r2, #4
 80039c8:	605a      	str	r2, [r3, #4]
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1d1a      	adds	r2, r3, #4
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	609a      	str	r2, [r3, #8]
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039d6:	4613      	mov	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4a28      	ldr	r2, [pc, #160]	@ (8003a80 <xTaskIncrementTick+0x218>)
 80039e0:	441a      	add	r2, r3
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	615a      	str	r2, [r3, #20]
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039ea:	4925      	ldr	r1, [pc, #148]	@ (8003a80 <xTaskIncrementTick+0x218>)
 80039ec:	4613      	mov	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80039fc:	1c59      	adds	r1, r3, #1
 80039fe:	4820      	ldr	r0, [pc, #128]	@ (8003a80 <xTaskIncrementTick+0x218>)
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4403      	add	r3, r0
 8003a0a:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a10:	4b1c      	ldr	r3, [pc, #112]	@ (8003a84 <xTaskIncrementTick+0x21c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a16:	429a      	cmp	r2, r3
 8003a18:	f67f af5b 	bls.w	80038d2 <xTaskIncrementTick+0x6a>
                            {
                                xSwitchRequired = pdTRUE;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a20:	e757      	b.n	80038d2 <xTaskIncrementTick+0x6a>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8003a22:	4b18      	ldr	r3, [pc, #96]	@ (8003a84 <xTaskIncrementTick+0x21c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a28:	4915      	ldr	r1, [pc, #84]	@ (8003a80 <xTaskIncrementTick+0x218>)
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	440b      	add	r3, r1
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d901      	bls.n	8003a3e <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	61fb      	str	r3, [r7, #28]
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8003a3e:	4b12      	ldr	r3, [pc, #72]	@ (8003a88 <xTaskIncrementTick+0x220>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d007      	beq.n	8003a56 <xTaskIncrementTick+0x1ee>
                {
                    xSwitchRequired = pdTRUE;
 8003a46:	2301      	movs	r3, #1
 8003a48:	61fb      	str	r3, [r7, #28]
 8003a4a:	e004      	b.n	8003a56 <xTaskIncrementTick+0x1ee>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8003a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8003a8c <xTaskIncrementTick+0x224>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	3301      	adds	r3, #1
 8003a52:	4a0e      	ldr	r2, [pc, #56]	@ (8003a8c <xTaskIncrementTick+0x224>)
 8003a54:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8003a56:	69fb      	ldr	r3, [r7, #28]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3720      	adds	r7, #32
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	20000bdc 	.word	0x20000bdc
 8003a64:	20000bb8 	.word	0x20000bb8
 8003a68:	20000b6c 	.word	0x20000b6c
 8003a6c:	08022784 	.word	0x08022784
 8003a70:	20000b70 	.word	0x20000b70
 8003a74:	20000bcc 	.word	0x20000bcc
 8003a78:	20000bd4 	.word	0x20000bd4
 8003a7c:	20000bbc 	.word	0x20000bbc
 8003a80:	20000ab8 	.word	0x20000ab8
 8003a84:	20000ab4 	.word	0x20000ab4
 8003a88:	20000bc8 	.word	0x20000bc8
 8003a8c:	20000bc4 	.word	0x20000bc4

08003a90 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8003a96:	4b30      	ldr	r3, [pc, #192]	@ (8003b58 <vTaskSwitchContext+0xc8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003a9e:	4b2f      	ldr	r3, [pc, #188]	@ (8003b5c <vTaskSwitchContext+0xcc>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8003aa4:	e053      	b.n	8003b4e <vTaskSwitchContext+0xbe>
            xYieldPendings[ 0 ] = pdFALSE;
 8003aa6:	4b2d      	ldr	r3, [pc, #180]	@ (8003b5c <vTaskSwitchContext+0xcc>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime[ 0 ] = portGET_RUN_TIME_COUNTER_VALUE();
 8003aac:	f7fd fb2c 	bl	8001108 <ulGetRunTimeCounterValue>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	4a2b      	ldr	r2, [pc, #172]	@ (8003b60 <vTaskSwitchContext+0xd0>)
 8003ab4:	6013      	str	r3, [r2, #0]
                if( ulTotalRunTime[ 0 ] > ulTaskSwitchedInTime[ 0 ] )
 8003ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8003b60 <vTaskSwitchContext+0xd0>)
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	4b2a      	ldr	r3, [pc, #168]	@ (8003b64 <vTaskSwitchContext+0xd4>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d909      	bls.n	8003ad6 <vTaskSwitchContext+0x46>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime[ 0 ] - ulTaskSwitchedInTime[ 0 ] );
 8003ac2:	4b27      	ldr	r3, [pc, #156]	@ (8003b60 <vTaskSwitchContext+0xd0>)
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	4b27      	ldr	r3, [pc, #156]	@ (8003b64 <vTaskSwitchContext+0xd4>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	1ad1      	subs	r1, r2, r3
 8003acc:	4b26      	ldr	r3, [pc, #152]	@ (8003b68 <vTaskSwitchContext+0xd8>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003ad2:	440a      	add	r2, r1
 8003ad4:	661a      	str	r2, [r3, #96]	@ 0x60
                ulTaskSwitchedInTime[ 0 ] = ulTotalRunTime[ 0 ];
 8003ad6:	4b22      	ldr	r3, [pc, #136]	@ (8003b60 <vTaskSwitchContext+0xd0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a22      	ldr	r2, [pc, #136]	@ (8003b64 <vTaskSwitchContext+0xd4>)
 8003adc:	6013      	str	r3, [r2, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8003ade:	4b23      	ldr	r3, [pc, #140]	@ (8003b6c <vTaskSwitchContext+0xdc>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	607b      	str	r3, [r7, #4]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	fab3 f383 	clz	r3, r3
 8003aea:	70fb      	strb	r3, [r7, #3]
        return ucReturn;
 8003aec:	78fb      	ldrb	r3, [r7, #3]
 8003aee:	f1c3 031f 	rsb	r3, r3, #31
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	491e      	ldr	r1, [pc, #120]	@ (8003b70 <vTaskSwitchContext+0xe0>)
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d104      	bne.n	8003b12 <vTaskSwitchContext+0x82>
 8003b08:	f241 31fa 	movw	r1, #5114	@ 0x13fa
 8003b0c:	4819      	ldr	r0, [pc, #100]	@ (8003b74 <vTaskSwitchContext+0xe4>)
 8003b0e:	f7fd fb03 	bl	8001118 <vAssertCalled>
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4a14      	ldr	r2, [pc, #80]	@ (8003b70 <vTaskSwitchContext+0xe0>)
 8003b1e:	4413      	add	r3, r2
 8003b20:	60bb      	str	r3, [r7, #8]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	605a      	str	r2, [r3, #4]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	3308      	adds	r3, #8
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d103      	bne.n	8003b40 <vTaskSwitchContext+0xb0>
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	68da      	ldr	r2, [r3, #12]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	605a      	str	r2, [r3, #4]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	4a08      	ldr	r2, [pc, #32]	@ (8003b68 <vTaskSwitchContext+0xd8>)
 8003b48:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8003b4a:	4b07      	ldr	r3, [pc, #28]	@ (8003b68 <vTaskSwitchContext+0xd8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
    }
 8003b4e:	bf00      	nop
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20000bdc 	.word	0x20000bdc
 8003b5c:	20000bc8 	.word	0x20000bc8
 8003b60:	20000be4 	.word	0x20000be4
 8003b64:	20000be0 	.word	0x20000be0
 8003b68:	20000ab4 	.word	0x20000ab4
 8003b6c:	20000bbc 	.word	0x20000bbc
 8003b70:	20000ab8 	.word	0x20000ab8
 8003b74:	08022784 	.word	0x08022784

08003b78 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d104      	bne.n	8003b92 <vTaskPlaceOnEventList+0x1a>
 8003b88:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 8003b8c:	4808      	ldr	r0, [pc, #32]	@ (8003bb0 <vTaskPlaceOnEventList+0x38>)
 8003b8e:	f7fd fac3 	bl	8001118 <vAssertCalled>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b92:	4b08      	ldr	r3, [pc, #32]	@ (8003bb4 <vTaskPlaceOnEventList+0x3c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3318      	adds	r3, #24
 8003b98:	4619      	mov	r1, r3
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7fe fca1 	bl	80024e2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	6838      	ldr	r0, [r7, #0]
 8003ba4:	f001 f9e4 	bl	8004f70 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8003ba8:	bf00      	nop
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	08022784 	.word	0x08022784
 8003bb4:	20000ab4 	.word	0x20000ab4

08003bb8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
    traceENTER_vTaskPlaceOnUnorderedEventList( pxEventList, xItemValue, xTicksToWait );

    configASSERT( pxEventList );
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d104      	bne.n	8003bd4 <vTaskPlaceOnUnorderedEventList+0x1c>
 8003bca:	f241 419e 	movw	r1, #5278	@ 0x149e
 8003bce:	481d      	ldr	r0, [pc, #116]	@ (8003c44 <vTaskPlaceOnUnorderedEventList+0x8c>)
 8003bd0:	f7fd faa2 	bl	8001118 <vAssertCalled>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8003bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8003c48 <vTaskPlaceOnUnorderedEventList+0x90>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d104      	bne.n	8003be6 <vTaskPlaceOnUnorderedEventList+0x2e>
 8003bdc:	f241 41a2 	movw	r1, #5282	@ 0x14a2
 8003be0:	4818      	ldr	r0, [pc, #96]	@ (8003c44 <vTaskPlaceOnUnorderedEventList+0x8c>)
 8003be2:	f7fd fa99 	bl	8001118 <vAssertCalled>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003be6:	4b19      	ldr	r3, [pc, #100]	@ (8003c4c <vTaskPlaceOnUnorderedEventList+0x94>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003bf0:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	4b14      	ldr	r3, [pc, #80]	@ (8003c4c <vTaskPlaceOnUnorderedEventList+0x94>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	61da      	str	r2, [r3, #28]
 8003c00:	4b12      	ldr	r3, [pc, #72]	@ (8003c4c <vTaskPlaceOnUnorderedEventList+0x94>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	6892      	ldr	r2, [r2, #8]
 8003c08:	621a      	str	r2, [r3, #32]
 8003c0a:	4b10      	ldr	r3, [pc, #64]	@ (8003c4c <vTaskPlaceOnUnorderedEventList+0x94>)
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	3218      	adds	r2, #24
 8003c14:	605a      	str	r2, [r3, #4]
 8003c16:	4b0d      	ldr	r3, [pc, #52]	@ (8003c4c <vTaskPlaceOnUnorderedEventList+0x94>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f103 0218 	add.w	r2, r3, #24
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	609a      	str	r2, [r3, #8]
 8003c22:	4b0a      	ldr	r3, [pc, #40]	@ (8003c4c <vTaskPlaceOnUnorderedEventList+0x94>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	601a      	str	r2, [r3, #0]

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c34:	2101      	movs	r1, #1
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f001 f99a 	bl	8004f70 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnUnorderedEventList();
}
 8003c3c:	bf00      	nop
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	08022784 	.word	0x08022784
 8003c48:	20000bdc 	.word	0x20000bdc
 8003c4c:	20000ab4 	.word	0x20000ab4

08003c50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b088      	sub	sp, #32
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d104      	bne.n	8003c70 <xTaskRemoveFromEventList+0x20>
 8003c66:	f241 41f5 	movw	r1, #5365	@ 0x14f5
 8003c6a:	485b      	ldr	r0, [pc, #364]	@ (8003dd8 <xTaskRemoveFromEventList+0x188>)
 8003c6c:	f7fd fa54 	bl	8001118 <vAssertCalled>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c74:	617b      	str	r3, [r7, #20]
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	6a12      	ldr	r2, [r2, #32]
 8003c7e:	609a      	str	r2, [r3, #8]
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	69d2      	ldr	r2, [r2, #28]
 8003c88:	605a      	str	r2, [r3, #4]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	3318      	adds	r3, #24
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d103      	bne.n	8003c9e <xTaskRemoveFromEventList+0x4e>
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	6a1a      	ldr	r2, [r3, #32]
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	605a      	str	r2, [r3, #4]
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	1e5a      	subs	r2, r3, #1
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003cae:	4b4b      	ldr	r3, [pc, #300]	@ (8003ddc <xTaskRemoveFromEventList+0x18c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d160      	bne.n	8003d78 <xTaskRemoveFromEventList+0x128>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	68d2      	ldr	r2, [r2, #12]
 8003cc4:	609a      	str	r2, [r3, #8]
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	6892      	ldr	r2, [r2, #8]
 8003cce:	605a      	str	r2, [r3, #4]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d103      	bne.n	8003ce4 <xTaskRemoveFromEventList+0x94>
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	605a      	str	r2, [r3, #4]
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	615a      	str	r2, [r3, #20]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	1e5a      	subs	r2, r3, #1
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	409a      	lsls	r2, r3
 8003cfc:	4b38      	ldr	r3, [pc, #224]	@ (8003de0 <xTaskRemoveFromEventList+0x190>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	4a37      	ldr	r2, [pc, #220]	@ (8003de0 <xTaskRemoveFromEventList+0x190>)
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d0a:	4936      	ldr	r1, [pc, #216]	@ (8003de4 <xTaskRemoveFromEventList+0x194>)
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	3304      	adds	r3, #4
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	60bb      	str	r3, [r7, #8]
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	609a      	str	r2, [r3, #8]
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	60da      	str	r2, [r3, #12]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	3204      	adds	r2, #4
 8003d32:	605a      	str	r2, [r3, #4]
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	1d1a      	adds	r2, r3, #4
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	609a      	str	r2, [r3, #8]
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d40:	4613      	mov	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4a26      	ldr	r2, [pc, #152]	@ (8003de4 <xTaskRemoveFromEventList+0x194>)
 8003d4a:	441a      	add	r2, r3
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	615a      	str	r2, [r3, #20]
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d54:	4923      	ldr	r1, [pc, #140]	@ (8003de4 <xTaskRemoveFromEventList+0x194>)
 8003d56:	4613      	mov	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4413      	add	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003d66:	1c59      	adds	r1, r3, #1
 8003d68:	481e      	ldr	r0, [pc, #120]	@ (8003de4 <xTaskRemoveFromEventList+0x194>)
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4413      	add	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4403      	add	r3, r0
 8003d74:	6019      	str	r1, [r3, #0]
 8003d76:	e01b      	b.n	8003db0 <xTaskRemoveFromEventList+0x160>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d78:	4b1b      	ldr	r3, [pc, #108]	@ (8003de8 <xTaskRemoveFromEventList+0x198>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	613b      	str	r3, [r7, #16]
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	61da      	str	r2, [r3, #28]
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	621a      	str	r2, [r3, #32]
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	3218      	adds	r2, #24
 8003d94:	605a      	str	r2, [r3, #4]
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	f103 0218 	add.w	r2, r3, #24
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	609a      	str	r2, [r3, #8]
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	4a11      	ldr	r2, [pc, #68]	@ (8003de8 <xTaskRemoveFromEventList+0x198>)
 8003da4:	629a      	str	r2, [r3, #40]	@ 0x28
 8003da6:	4b10      	ldr	r3, [pc, #64]	@ (8003de8 <xTaskRemoveFromEventList+0x198>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3301      	adds	r3, #1
 8003dac:	4a0e      	ldr	r2, [pc, #56]	@ (8003de8 <xTaskRemoveFromEventList+0x198>)
 8003dae:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003db4:	4b0d      	ldr	r3, [pc, #52]	@ (8003dec <xTaskRemoveFromEventList+0x19c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d905      	bls.n	8003dca <xTaskRemoveFromEventList+0x17a>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	61fb      	str	r3, [r7, #28]

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8003df0 <xTaskRemoveFromEventList+0x1a0>)
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	e001      	b.n	8003dce <xTaskRemoveFromEventList+0x17e>
        }
        else
        {
            xReturn = pdFALSE;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61fb      	str	r3, [r7, #28]
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8003dce:	69fb      	ldr	r3, [r7, #28]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3720      	adds	r7, #32
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	08022784 	.word	0x08022784
 8003ddc:	20000bdc 	.word	0x20000bdc
 8003de0:	20000bbc 	.word	0x20000bbc
 8003de4:	20000ab8 	.word	0x20000ab8
 8003de8:	20000b74 	.word	0x20000b74
 8003dec:	20000ab4 	.word	0x20000ab4
 8003df0:	20000bc8 	.word	0x20000bc8

08003df4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]

    traceENTER_vTaskRemoveFromUnorderedEventList( pxEventListItem, xItemValue );

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8003dfe:	4b52      	ldr	r3, [pc, #328]	@ (8003f48 <vTaskRemoveFromUnorderedEventList+0x154>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d104      	bne.n	8003e10 <vTaskRemoveFromUnorderedEventList+0x1c>
 8003e06:	f241 5143 	movw	r1, #5443	@ 0x1543
 8003e0a:	4850      	ldr	r0, [pc, #320]	@ (8003f4c <vTaskRemoveFromUnorderedEventList+0x158>)
 8003e0c:	f7fd f984 	bl	8001118 <vAssertCalled>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	601a      	str	r2, [r3, #0]
    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem );
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	617b      	str	r3, [r7, #20]
    configASSERT( pxUnblockedTCB );
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d104      	bne.n	8003e30 <vTaskRemoveFromUnorderedEventList+0x3c>
 8003e26:	f241 514e 	movw	r1, #5454	@ 0x154e
 8003e2a:	4848      	ldr	r0, [pc, #288]	@ (8003f4c <vTaskRemoveFromUnorderedEventList+0x158>)
 8003e2c:	f7fd f974 	bl	8001118 <vAssertCalled>
    listREMOVE_ITEM( pxEventListItem );
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	613b      	str	r3, [r7, #16]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6892      	ldr	r2, [r2, #8]
 8003e3e:	609a      	str	r2, [r3, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6852      	ldr	r2, [r2, #4]
 8003e48:	605a      	str	r2, [r3, #4]
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d103      	bne.n	8003e5c <vTaskRemoveFromUnorderedEventList+0x68>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	605a      	str	r2, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	611a      	str	r2, [r3, #16]
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	1e5a      	subs	r2, r3, #1
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	601a      	str	r2, [r3, #0]
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	68d2      	ldr	r2, [r2, #12]
 8003e7a:	609a      	str	r2, [r3, #8]
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	6892      	ldr	r2, [r2, #8]
 8003e84:	605a      	str	r2, [r3, #4]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d103      	bne.n	8003e9a <vTaskRemoveFromUnorderedEventList+0xa6>
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	605a      	str	r2, [r3, #4]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	615a      	str	r2, [r3, #20]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	1e5a      	subs	r2, r3, #1
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eae:	2201      	movs	r2, #1
 8003eb0:	409a      	lsls	r2, r3
 8003eb2:	4b27      	ldr	r3, [pc, #156]	@ (8003f50 <vTaskRemoveFromUnorderedEventList+0x15c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	4a25      	ldr	r2, [pc, #148]	@ (8003f50 <vTaskRemoveFromUnorderedEventList+0x15c>)
 8003eba:	6013      	str	r3, [r2, #0]
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ec0:	4924      	ldr	r1, [pc, #144]	@ (8003f54 <vTaskRemoveFromUnorderedEventList+0x160>)
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	440b      	add	r3, r1
 8003ecc:	3304      	adds	r3, #4
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	60bb      	str	r3, [r7, #8]
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	609a      	str	r2, [r3, #8]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	60da      	str	r2, [r3, #12]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	3204      	adds	r2, #4
 8003ee8:	605a      	str	r2, [r3, #4]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	1d1a      	adds	r2, r3, #4
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	609a      	str	r2, [r3, #8]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4a15      	ldr	r2, [pc, #84]	@ (8003f54 <vTaskRemoveFromUnorderedEventList+0x160>)
 8003f00:	441a      	add	r2, r3
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	615a      	str	r2, [r3, #20]
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f0a:	4912      	ldr	r1, [pc, #72]	@ (8003f54 <vTaskRemoveFromUnorderedEventList+0x160>)
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f1c:	1c59      	adds	r1, r3, #1
 8003f1e:	480d      	ldr	r0, [pc, #52]	@ (8003f54 <vTaskRemoveFromUnorderedEventList+0x160>)
 8003f20:	4613      	mov	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4403      	add	r3, r0
 8003f2a:	6019      	str	r1, [r3, #0]

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f30:	4b09      	ldr	r3, [pc, #36]	@ (8003f58 <vTaskRemoveFromUnorderedEventList+0x164>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d902      	bls.n	8003f40 <vTaskRemoveFromUnorderedEventList+0x14c>
        {
            /* The unblocked task has a priority above that of the calling task, so
             * a context switch is required.  This function is called with the
             * scheduler suspended so xYieldPending is set so the context switch
             * occurs immediately that the scheduler is resumed (unsuspended). */
            xYieldPendings[ 0 ] = pdTRUE;
 8003f3a:	4b08      	ldr	r3, [pc, #32]	@ (8003f5c <vTaskRemoveFromUnorderedEventList+0x168>)
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]
        #endif
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskRemoveFromUnorderedEventList();
}
 8003f40:	bf00      	nop
 8003f42:	3718      	adds	r7, #24
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	20000bdc 	.word	0x20000bdc
 8003f4c:	08022784 	.word	0x08022784
 8003f50:	20000bbc 	.word	0x20000bbc
 8003f54:	20000ab8 	.word	0x20000ab8
 8003f58:	20000ab4 	.word	0x20000ab4
 8003f5c:	20000bc8 	.word	0x20000bc8

08003f60 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskSetTimeOutState( pxTimeOut );

    configASSERT( pxTimeOut );
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d104      	bne.n	8003f78 <vTaskSetTimeOutState+0x18>
 8003f6e:	f241 5186 	movw	r1, #5510	@ 0x1586
 8003f72:	4809      	ldr	r0, [pc, #36]	@ (8003f98 <vTaskSetTimeOutState+0x38>)
 8003f74:	f7fd f8d0 	bl	8001118 <vAssertCalled>
    taskENTER_CRITICAL();
 8003f78:	f001 f9b2 	bl	80052e0 <vPortEnterCritical>
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f7c:	4b07      	ldr	r3, [pc, #28]	@ (8003f9c <vTaskSetTimeOutState+0x3c>)
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	601a      	str	r2, [r3, #0]
        pxTimeOut->xTimeOnEntering = xTickCount;
 8003f84:	4b06      	ldr	r3, [pc, #24]	@ (8003fa0 <vTaskSetTimeOutState+0x40>)
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	605a      	str	r2, [r3, #4]
    }
    taskEXIT_CRITICAL();
 8003f8c:	f001 f9d4 	bl	8005338 <vPortExitCritical>

    traceRETURN_vTaskSetTimeOutState();
}
 8003f90:	bf00      	nop
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	08022784 	.word	0x08022784
 8003f9c:	20000bcc 	.word	0x20000bcc
 8003fa0:	20000bb8 	.word	0x20000bb8

08003fa4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003fac:	4b06      	ldr	r3, [pc, #24]	@ (8003fc8 <vTaskInternalSetTimeOutState+0x24>)
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003fb4:	4b05      	ldr	r3, [pc, #20]	@ (8003fcc <vTaskInternalSetTimeOutState+0x28>)
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	20000bcc 	.word	0x20000bcc
 8003fcc:	20000bb8 	.word	0x20000bb8

08003fd0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d104      	bne.n	8003fea <xTaskCheckForTimeOut+0x1a>
 8003fe0:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 8003fe4:	4825      	ldr	r0, [pc, #148]	@ (800407c <xTaskCheckForTimeOut+0xac>)
 8003fe6:	f7fd f897 	bl	8001118 <vAssertCalled>
    configASSERT( pxTicksToWait );
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d104      	bne.n	8003ffa <xTaskCheckForTimeOut+0x2a>
 8003ff0:	f241 51a6 	movw	r1, #5542	@ 0x15a6
 8003ff4:	4821      	ldr	r0, [pc, #132]	@ (800407c <xTaskCheckForTimeOut+0xac>)
 8003ff6:	f7fd f88f 	bl	8001118 <vAssertCalled>

    taskENTER_CRITICAL();
 8003ffa:	f001 f971 	bl	80052e0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003ffe:	4b20      	ldr	r3, [pc, #128]	@ (8004080 <xTaskCheckForTimeOut+0xb0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004016:	d102      	bne.n	800401e <xTaskCheckForTimeOut+0x4e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	e026      	b.n	800406c <xTaskCheckForTimeOut+0x9c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	4b18      	ldr	r3, [pc, #96]	@ (8004084 <xTaskCheckForTimeOut+0xb4>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d00a      	beq.n	8004040 <xTaskCheckForTimeOut+0x70>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	429a      	cmp	r2, r3
 8004032:	d305      	bcc.n	8004040 <xTaskCheckForTimeOut+0x70>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004034:	2301      	movs	r3, #1
 8004036:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	e015      	b.n	800406c <xTaskCheckForTimeOut+0x9c>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	429a      	cmp	r2, r3
 8004048:	d20b      	bcs.n	8004062 <xTaskCheckForTimeOut+0x92>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	1ad2      	subs	r2, r2, r3
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7ff ffa4 	bl	8003fa4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800405c:	2300      	movs	r3, #0
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	e004      	b.n	800406c <xTaskCheckForTimeOut+0x9c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004068:	2301      	movs	r3, #1
 800406a:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800406c:	f001 f964 	bl	8005338 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8004070:	697b      	ldr	r3, [r7, #20]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	08022784 	.word	0x08022784
 8004080:	20000bb8 	.word	0x20000bb8
 8004084:	20000bcc 	.word	0x20000bcc

08004088 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 800408c:	4b03      	ldr	r3, [pc, #12]	@ (800409c <vTaskMissedYield+0x14>)
 800408e:	2201      	movs	r2, #1
 8004090:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8004092:	bf00      	nop
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	20000bc8 	.word	0x20000bc8

080040a0 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80040a8:	f000 f852 	bl	8004150 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 80040ac:	4b06      	ldr	r3, [pc, #24]	@ (80040c8 <prvIdleTask+0x28>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d9f9      	bls.n	80040a8 <prvIdleTask+0x8>
            {
                taskYIELD();
 80040b4:	4b05      	ldr	r3, [pc, #20]	@ (80040cc <prvIdleTask+0x2c>)
 80040b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80040c4:	e7f0      	b.n	80040a8 <prvIdleTask+0x8>
 80040c6:	bf00      	nop
 80040c8:	20000ab8 	.word	0x20000ab8
 80040cc:	e000ed04 	.word	0xe000ed04

080040d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040d6:	2300      	movs	r3, #0
 80040d8:	607b      	str	r3, [r7, #4]
 80040da:	e00c      	b.n	80040f6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	4613      	mov	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4a12      	ldr	r2, [pc, #72]	@ (8004130 <prvInitialiseTaskLists+0x60>)
 80040e8:	4413      	add	r3, r2
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fe f9a8 	bl	8002440 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	3301      	adds	r3, #1
 80040f4:	607b      	str	r3, [r7, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b06      	cmp	r3, #6
 80040fa:	d9ef      	bls.n	80040dc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80040fc:	480d      	ldr	r0, [pc, #52]	@ (8004134 <prvInitialiseTaskLists+0x64>)
 80040fe:	f7fe f99f 	bl	8002440 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004102:	480d      	ldr	r0, [pc, #52]	@ (8004138 <prvInitialiseTaskLists+0x68>)
 8004104:	f7fe f99c 	bl	8002440 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004108:	480c      	ldr	r0, [pc, #48]	@ (800413c <prvInitialiseTaskLists+0x6c>)
 800410a:	f7fe f999 	bl	8002440 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800410e:	480c      	ldr	r0, [pc, #48]	@ (8004140 <prvInitialiseTaskLists+0x70>)
 8004110:	f7fe f996 	bl	8002440 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004114:	480b      	ldr	r0, [pc, #44]	@ (8004144 <prvInitialiseTaskLists+0x74>)
 8004116:	f7fe f993 	bl	8002440 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800411a:	4b0b      	ldr	r3, [pc, #44]	@ (8004148 <prvInitialiseTaskLists+0x78>)
 800411c:	4a05      	ldr	r2, [pc, #20]	@ (8004134 <prvInitialiseTaskLists+0x64>)
 800411e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004120:	4b0a      	ldr	r3, [pc, #40]	@ (800414c <prvInitialiseTaskLists+0x7c>)
 8004122:	4a05      	ldr	r2, [pc, #20]	@ (8004138 <prvInitialiseTaskLists+0x68>)
 8004124:	601a      	str	r2, [r3, #0]
}
 8004126:	bf00      	nop
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	20000ab8 	.word	0x20000ab8
 8004134:	20000b44 	.word	0x20000b44
 8004138:	20000b58 	.word	0x20000b58
 800413c:	20000b74 	.word	0x20000b74
 8004140:	20000b88 	.word	0x20000b88
 8004144:	20000ba0 	.word	0x20000ba0
 8004148:	20000b6c 	.word	0x20000b6c
 800414c:	20000b70 	.word	0x20000b70

08004150 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004156:	e019      	b.n	800418c <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8004158:	f001 f8c2 	bl	80052e0 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800415c:	4b10      	ldr	r3, [pc, #64]	@ (80041a0 <prvCheckTasksWaitingTermination+0x50>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3304      	adds	r3, #4
 8004168:	4618      	mov	r0, r3
 800416a:	f7fe f9f3 	bl	8002554 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800416e:	4b0d      	ldr	r3, [pc, #52]	@ (80041a4 <prvCheckTasksWaitingTermination+0x54>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3b01      	subs	r3, #1
 8004174:	4a0b      	ldr	r2, [pc, #44]	@ (80041a4 <prvCheckTasksWaitingTermination+0x54>)
 8004176:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8004178:	4b0b      	ldr	r3, [pc, #44]	@ (80041a8 <prvCheckTasksWaitingTermination+0x58>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	3b01      	subs	r3, #1
 800417e:	4a0a      	ldr	r2, [pc, #40]	@ (80041a8 <prvCheckTasksWaitingTermination+0x58>)
 8004180:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8004182:	f001 f8d9 	bl	8005338 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f810 	bl	80041ac <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800418c:	4b06      	ldr	r3, [pc, #24]	@ (80041a8 <prvCheckTasksWaitingTermination+0x58>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1e1      	bne.n	8004158 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004194:	bf00      	nop
 8004196:	bf00      	nop
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	20000b88 	.word	0x20000b88
 80041a4:	20000bb4 	.word	0x20000bb4
 80041a8:	20000b9c 	.word	0x20000b9c

080041ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b8:	4618      	mov	r0, r3
 80041ba:	f001 fa67 	bl	800568c <vPortFree>
            vPortFree( pxTCB );
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f001 fa64 	bl	800568c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80041c4:	bf00      	nop
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041d0:	4b0a      	ldr	r3, [pc, #40]	@ (80041fc <prvResetNextTaskUnblockTime+0x30>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d104      	bne.n	80041e4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80041da:	4b09      	ldr	r3, [pc, #36]	@ (8004200 <prvResetNextTaskUnblockTime+0x34>)
 80041dc:	f04f 32ff 	mov.w	r2, #4294967295
 80041e0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80041e2:	e005      	b.n	80041f0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80041e4:	4b05      	ldr	r3, [pc, #20]	@ (80041fc <prvResetNextTaskUnblockTime+0x30>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a04      	ldr	r2, [pc, #16]	@ (8004200 <prvResetNextTaskUnblockTime+0x34>)
 80041ee:	6013      	str	r3, [r2, #0]
}
 80041f0:	bf00      	nop
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	20000b6c 	.word	0x20000b6c
 8004200:	20000bd4 	.word	0x20000bd4

08004204 <xTaskGetCurrentTaskHandle>:

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) || ( configNUMBER_OF_CORES > 1 )

    #if ( configNUMBER_OF_CORES == 1 )
        TaskHandle_t xTaskGetCurrentTaskHandle( void )
        {
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
 800420a:	4b05      	ldr	r3, [pc, #20]	@ (8004220 <xTaskGetCurrentTaskHandle+0x1c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	607b      	str	r3, [r7, #4]

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
 8004210:	687b      	ldr	r3, [r7, #4]
        }
 8004212:	4618      	mov	r0, r3
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	20000ab4 	.word	0x20000ab4

08004224 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 800422a:	4b0b      	ldr	r3, [pc, #44]	@ (8004258 <xTaskGetSchedulerState+0x34>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d102      	bne.n	8004238 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004232:	2301      	movs	r3, #1
 8004234:	607b      	str	r3, [r7, #4]
 8004236:	e008      	b.n	800424a <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004238:	4b08      	ldr	r3, [pc, #32]	@ (800425c <xTaskGetSchedulerState+0x38>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d102      	bne.n	8004246 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8004240:	2302      	movs	r3, #2
 8004242:	607b      	str	r3, [r7, #4]
 8004244:	e001      	b.n	800424a <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8004246:	2300      	movs	r3, #0
 8004248:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 800424a:	687b      	ldr	r3, [r7, #4]
    }
 800424c:	4618      	mov	r0, r3
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	20000bc0 	.word	0x20000bc0
 800425c:	20000bdc 	.word	0x20000bdc

08004260 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 8089 	beq.w	800438a <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800427c:	4b45      	ldr	r3, [pc, #276]	@ (8004394 <xTaskPriorityInherit+0x134>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004282:	429a      	cmp	r2, r3
 8004284:	d278      	bcs.n	8004378 <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	2b00      	cmp	r3, #0
 800428c:	db06      	blt.n	800429c <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 800428e:	4b41      	ldr	r3, [pc, #260]	@ (8004394 <xTaskPriorityInherit+0x134>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004294:	f1c3 0207 	rsb	r2, r3, #7
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	6959      	ldr	r1, [r3, #20]
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042a4:	4613      	mov	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4a3a      	ldr	r2, [pc, #232]	@ (8004398 <xTaskPriorityInherit+0x138>)
 80042ae:	4413      	add	r3, r2
 80042b0:	4299      	cmp	r1, r3
 80042b2:	d159      	bne.n	8004368 <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	3304      	adds	r3, #4
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fe f94b 	bl	8002554 <uxListRemove>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10a      	bne.n	80042da <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c8:	2201      	movs	r2, #1
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	43da      	mvns	r2, r3
 80042d0:	4b32      	ldr	r3, [pc, #200]	@ (800439c <xTaskPriorityInherit+0x13c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4013      	ands	r3, r2
 80042d6:	4a31      	ldr	r2, [pc, #196]	@ (800439c <xTaskPriorityInherit+0x13c>)
 80042d8:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80042da:	4b2e      	ldr	r3, [pc, #184]	@ (8004394 <xTaskPriorityInherit+0x134>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e8:	2201      	movs	r2, #1
 80042ea:	409a      	lsls	r2, r3
 80042ec:	4b2b      	ldr	r3, [pc, #172]	@ (800439c <xTaskPriorityInherit+0x13c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	4a2a      	ldr	r2, [pc, #168]	@ (800439c <xTaskPriorityInherit+0x13c>)
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042fa:	4927      	ldr	r1, [pc, #156]	@ (8004398 <xTaskPriorityInherit+0x138>)
 80042fc:	4613      	mov	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	3304      	adds	r3, #4
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	609a      	str	r2, [r3, #8]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	60da      	str	r2, [r3, #12]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	3204      	adds	r2, #4
 8004322:	605a      	str	r2, [r3, #4]
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1d1a      	adds	r2, r3, #4
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	609a      	str	r2, [r3, #8]
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004330:	4613      	mov	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4a17      	ldr	r2, [pc, #92]	@ (8004398 <xTaskPriorityInherit+0x138>)
 800433a:	441a      	add	r2, r3
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	615a      	str	r2, [r3, #20]
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004344:	4914      	ldr	r1, [pc, #80]	@ (8004398 <xTaskPriorityInherit+0x138>)
 8004346:	4613      	mov	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	440b      	add	r3, r1
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004356:	1c59      	adds	r1, r3, #1
 8004358:	480f      	ldr	r0, [pc, #60]	@ (8004398 <xTaskPriorityInherit+0x138>)
 800435a:	4613      	mov	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4403      	add	r3, r0
 8004364:	6019      	str	r1, [r3, #0]
 8004366:	e004      	b.n	8004372 <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004368:	4b0a      	ldr	r3, [pc, #40]	@ (8004394 <xTaskPriorityInherit+0x134>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004372:	2301      	movs	r3, #1
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	e008      	b.n	800438a <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800437c:	4b05      	ldr	r3, [pc, #20]	@ (8004394 <xTaskPriorityInherit+0x134>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004382:	429a      	cmp	r2, r3
 8004384:	d201      	bcs.n	800438a <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004386:	2301      	movs	r3, #1
 8004388:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 800438a:	697b      	ldr	r3, [r7, #20]
    }
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	20000ab4 	.word	0x20000ab4
 8004398:	20000ab8 	.word	0x20000ab8
 800439c:	20000bbc 	.word	0x20000bbc

080043a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 8082 	beq.w	80044bc <xTaskPriorityDisinherit+0x11c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80043b8:	4b43      	ldr	r3, [pc, #268]	@ (80044c8 <xTaskPriorityDisinherit+0x128>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d004      	beq.n	80043cc <xTaskPriorityDisinherit+0x2c>
 80043c2:	f641 2128 	movw	r1, #6696	@ 0x1a28
 80043c6:	4841      	ldr	r0, [pc, #260]	@ (80044cc <xTaskPriorityDisinherit+0x12c>)
 80043c8:	f7fc fea6 	bl	8001118 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d104      	bne.n	80043de <xTaskPriorityDisinherit+0x3e>
 80043d4:	f641 2129 	movw	r1, #6697	@ 0x1a29
 80043d8:	483c      	ldr	r0, [pc, #240]	@ (80044cc <xTaskPriorityDisinherit+0x12c>)
 80043da:	f7fc fe9d 	bl	8001118 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043e2:	1e5a      	subs	r2, r3, #1
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d063      	beq.n	80044bc <xTaskPriorityDisinherit+0x11c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d15f      	bne.n	80044bc <xTaskPriorityDisinherit+0x11c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	3304      	adds	r3, #4
 8004400:	4618      	mov	r0, r3
 8004402:	f7fe f8a7 	bl	8002554 <uxListRemove>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10a      	bne.n	8004422 <xTaskPriorityDisinherit+0x82>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004410:	2201      	movs	r2, #1
 8004412:	fa02 f303 	lsl.w	r3, r2, r3
 8004416:	43da      	mvns	r2, r3
 8004418:	4b2d      	ldr	r3, [pc, #180]	@ (80044d0 <xTaskPriorityDisinherit+0x130>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4013      	ands	r3, r2
 800441e:	4a2c      	ldr	r2, [pc, #176]	@ (80044d0 <xTaskPriorityDisinherit+0x130>)
 8004420:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442e:	f1c3 0207 	rsb	r2, r3, #7
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443a:	2201      	movs	r2, #1
 800443c:	409a      	lsls	r2, r3
 800443e:	4b24      	ldr	r3, [pc, #144]	@ (80044d0 <xTaskPriorityDisinherit+0x130>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4313      	orrs	r3, r2
 8004444:	4a22      	ldr	r2, [pc, #136]	@ (80044d0 <xTaskPriorityDisinherit+0x130>)
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800444c:	4921      	ldr	r1, [pc, #132]	@ (80044d4 <xTaskPriorityDisinherit+0x134>)
 800444e:	4613      	mov	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	440b      	add	r3, r1
 8004458:	3304      	adds	r3, #4
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	609a      	str	r2, [r3, #8]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	60da      	str	r2, [r3, #12]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	3204      	adds	r2, #4
 8004474:	605a      	str	r2, [r3, #4]
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1d1a      	adds	r2, r3, #4
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	609a      	str	r2, [r3, #8]
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004482:	4613      	mov	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4a12      	ldr	r2, [pc, #72]	@ (80044d4 <xTaskPriorityDisinherit+0x134>)
 800448c:	441a      	add	r2, r3
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	615a      	str	r2, [r3, #20]
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004496:	490f      	ldr	r1, [pc, #60]	@ (80044d4 <xTaskPriorityDisinherit+0x134>)
 8004498:	4613      	mov	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80044a8:	1c59      	adds	r1, r3, #1
 80044aa:	480a      	ldr	r0, [pc, #40]	@ (80044d4 <xTaskPriorityDisinherit+0x134>)
 80044ac:	4613      	mov	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4403      	add	r3, r0
 80044b6:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80044b8:	2301      	movs	r3, #1
 80044ba:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 80044bc:	697b      	ldr	r3, [r7, #20]
    }
 80044be:	4618      	mov	r0, r3
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	20000ab4 	.word	0x20000ab4
 80044cc:	08022784 	.word	0x08022784
 80044d0:	20000bbc 	.word	0x20000bbc
 80044d4:	20000ab8 	.word	0x20000ab8

080044d8 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80044e6:	2301      	movs	r3, #1
 80044e8:	617b      	str	r3, [r7, #20]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 8096 	beq.w	800461e <vTaskPriorityDisinheritAfterTimeout+0x146>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d104      	bne.n	8004504 <vTaskPriorityDisinheritAfterTimeout+0x2c>
 80044fa:	f641 2186 	movw	r1, #6790	@ 0x1a86
 80044fe:	484a      	ldr	r0, [pc, #296]	@ (8004628 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8004500:	f7fc fe0a 	bl	8001118 <vAssertCalled>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d902      	bls.n	8004514 <vTaskPriorityDisinheritAfterTimeout+0x3c>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	61fb      	str	r3, [r7, #28]
 8004512:	e002      	b.n	800451a <vTaskPriorityDisinheritAfterTimeout+0x42>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004518:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451e:	69fa      	ldr	r2, [r7, #28]
 8004520:	429a      	cmp	r2, r3
 8004522:	d07c      	beq.n	800461e <vTaskPriorityDisinheritAfterTimeout+0x146>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	429a      	cmp	r2, r3
 800452c:	d177      	bne.n	800461e <vTaskPriorityDisinheritAfterTimeout+0x146>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800452e:	4b3f      	ldr	r3, [pc, #252]	@ (800462c <vTaskPriorityDisinheritAfterTimeout+0x154>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	429a      	cmp	r2, r3
 8004536:	d104      	bne.n	8004542 <vTaskPriorityDisinheritAfterTimeout+0x6a>
 8004538:	f641 21a1 	movw	r1, #6817	@ 0x1aa1
 800453c:	483a      	ldr	r0, [pc, #232]	@ (8004628 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 800453e:	f7fc fdeb 	bl	8001118 <vAssertCalled>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004546:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	69fa      	ldr	r2, [r7, #28]
 800454c:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	2b00      	cmp	r3, #0
 8004554:	db04      	blt.n	8004560 <vTaskPriorityDisinheritAfterTimeout+0x88>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	f1c3 0207 	rsb	r2, r3, #7
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	6959      	ldr	r1, [r3, #20]
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	4613      	mov	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4a30      	ldr	r2, [pc, #192]	@ (8004630 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8004570:	4413      	add	r3, r2
 8004572:	4299      	cmp	r1, r3
 8004574:	d153      	bne.n	800461e <vTaskPriorityDisinheritAfterTimeout+0x146>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	3304      	adds	r3, #4
 800457a:	4618      	mov	r0, r3
 800457c:	f7fd ffea 	bl	8002554 <uxListRemove>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10a      	bne.n	800459c <vTaskPriorityDisinheritAfterTimeout+0xc4>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458a:	2201      	movs	r2, #1
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	43da      	mvns	r2, r3
 8004592:	4b28      	ldr	r3, [pc, #160]	@ (8004634 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4013      	ands	r3, r2
 8004598:	4a26      	ldr	r2, [pc, #152]	@ (8004634 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 800459a:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a0:	2201      	movs	r2, #1
 80045a2:	409a      	lsls	r2, r3
 80045a4:	4b23      	ldr	r3, [pc, #140]	@ (8004634 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	4a22      	ldr	r2, [pc, #136]	@ (8004634 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045b2:	491f      	ldr	r1, [pc, #124]	@ (8004630 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 80045b4:	4613      	mov	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	3304      	adds	r3, #4
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	609a      	str	r2, [r3, #8]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	60da      	str	r2, [r3, #12]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	3204      	adds	r2, #4
 80045da:	605a      	str	r2, [r3, #4]
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	1d1a      	adds	r2, r3, #4
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	609a      	str	r2, [r3, #8]
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045e8:	4613      	mov	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4a0f      	ldr	r2, [pc, #60]	@ (8004630 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 80045f2:	441a      	add	r2, r3
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	615a      	str	r2, [r3, #20]
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045fc:	490c      	ldr	r1, [pc, #48]	@ (8004630 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 80045fe:	4613      	mov	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	440b      	add	r3, r1
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800460e:	1c59      	adds	r1, r3, #1
 8004610:	4807      	ldr	r0, [pc, #28]	@ (8004630 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4403      	add	r3, r0
 800461c:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 800461e:	bf00      	nop
 8004620:	3720      	adds	r7, #32
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	08022784 	.word	0x08022784
 800462c:	20000ab4 	.word	0x20000ab4
 8004630:	20000ab8 	.word	0x20000ab8
 8004634:	20000bbc 	.word	0x20000bbc

08004638 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    traceENTER_uxTaskResetEventItemValue();

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800463e:	4b09      	ldr	r3, [pc, #36]	@ (8004664 <uxTaskResetEventItemValue+0x2c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) );
 8004646:	4b07      	ldr	r3, [pc, #28]	@ (8004664 <uxTaskResetEventItemValue+0x2c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800464c:	4b05      	ldr	r3, [pc, #20]	@ (8004664 <uxTaskResetEventItemValue+0x2c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f1c2 0207 	rsb	r2, r2, #7
 8004654:	619a      	str	r2, [r3, #24]

    traceRETURN_uxTaskResetEventItemValue( uxReturn );

    return uxReturn;
 8004656:	687b      	ldr	r3, [r7, #4]
}
 8004658:	4618      	mov	r0, r3
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	20000ab4 	.word	0x20000ab4

08004668 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 800466e:	4b09      	ldr	r3, [pc, #36]	@ (8004694 <pvTaskIncrementMutexHeldCount+0x2c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d004      	beq.n	8004684 <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800467e:	1c5a      	adds	r2, r3, #1
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 8004684:	687b      	ldr	r3, [r7, #4]
    }
 8004686:	4618      	mov	r0, r3
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	20000ab4 	.word	0x20000ab4

08004698 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 8004698:	b580      	push	{r7, lr}
 800469a:	b088      	sub	sp, #32
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;
        BaseType_t xAlreadyYielded, xShouldBlock = pdFALSE;
 80046a4:	2300      	movs	r3, #0
 80046a6:	61fb      	str	r3, [r7, #28]

        traceENTER_ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d004      	beq.n	80046b8 <ulTaskGenericNotifyTake+0x20>
 80046ae:	f641 51c7 	movw	r1, #7623	@ 0x1dc7
 80046b2:	4833      	ldr	r0, [pc, #204]	@ (8004780 <ulTaskGenericNotifyTake+0xe8>)
 80046b4:	f7fc fd30 	bl	8001118 <vAssertCalled>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 80046b8:	f7fe ff96 	bl	80035e8 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check if a notification
             * has occurred and set the flag to indicate that we are waiting for
             * a notification. If we do not do so, a notification sent from an ISR
             * will get lost. */
            taskENTER_CRITICAL();
 80046bc:	f000 fe10 	bl	80052e0 <vPortEnterCritical>
            {
                /* Only block if the notification count is not already non-zero. */
                if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0U )
 80046c0:	4b30      	ldr	r3, [pc, #192]	@ (8004784 <ulTaskGenericNotifyTake+0xec>)
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	3318      	adds	r3, #24
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4413      	add	r3, r2
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10b      	bne.n	80046ea <ulTaskGenericNotifyTake+0x52>
                {
                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 80046d2:	4b2c      	ldr	r3, [pc, #176]	@ (8004784 <ulTaskGenericNotifyTake+0xec>)
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4413      	add	r3, r2
 80046da:	3368      	adds	r3, #104	@ 0x68
 80046dc:	2201      	movs	r2, #1
 80046de:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <ulTaskGenericNotifyTake+0x52>
                    {
                        xShouldBlock = pdTRUE;
 80046e6:	2301      	movs	r3, #1
 80046e8:	61fb      	str	r3, [r7, #28]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 80046ea:	f000 fe25 	bl	8005338 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d103      	bne.n	80046fc <ulTaskGenericNotifyTake+0x64>
            {
                traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80046f4:	2101      	movs	r1, #1
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 fc3a 	bl	8004f70 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80046fc:	f7fe ff82 	bl	8003604 <xTaskResumeAll>
 8004700:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d10a      	bne.n	800471e <ulTaskGenericNotifyTake+0x86>
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d107      	bne.n	800471e <ulTaskGenericNotifyTake+0x86>
        {
            taskYIELD_WITHIN_API();
 800470e:	4b1e      	ldr	r3, [pc, #120]	@ (8004788 <ulTaskGenericNotifyTake+0xf0>)
 8004710:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 800471e:	f000 fddf 	bl	80052e0 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8004722:	4b18      	ldr	r3, [pc, #96]	@ (8004784 <ulTaskGenericNotifyTake+0xec>)
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	3318      	adds	r3, #24
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0U )
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d014      	beq.n	8004762 <ulTaskGenericNotifyTake+0xca>
            {
                if( xClearCountOnExit != pdFALSE )
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d008      	beq.n	8004750 <ulTaskGenericNotifyTake+0xb8>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
 800473e:	4b11      	ldr	r3, [pc, #68]	@ (8004784 <ulTaskGenericNotifyTake+0xec>)
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	3318      	adds	r3, #24
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	2200      	movs	r2, #0
 800474c:	605a      	str	r2, [r3, #4]
 800474e:	e008      	b.n	8004762 <ulTaskGenericNotifyTake+0xca>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ulReturn - ( uint32_t ) 1;
 8004750:	4b0c      	ldr	r3, [pc, #48]	@ (8004784 <ulTaskGenericNotifyTake+0xec>)
 8004752:	6819      	ldr	r1, [r3, #0]
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	1e5a      	subs	r2, r3, #1
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	3318      	adds	r3, #24
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	440b      	add	r3, r1
 8004760:	605a      	str	r2, [r3, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8004762:	4b08      	ldr	r3, [pc, #32]	@ (8004784 <ulTaskGenericNotifyTake+0xec>)
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4413      	add	r3, r2
 800476a:	3368      	adds	r3, #104	@ 0x68
 800476c:	2200      	movs	r2, #0
 800476e:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8004770:	f000 fde2 	bl	8005338 <vPortExitCritical>

        traceRETURN_ulTaskGenericNotifyTake( ulReturn );

        return ulReturn;
 8004774:	697b      	ldr	r3, [r7, #20]
    }
 8004776:	4618      	mov	r0, r3
 8004778:	3720      	adds	r7, #32
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	08022784 	.word	0x08022784
 8004784:	20000ab4 	.word	0x20000ab4
 8004788:	e000ed04 	.word	0xe000ed04

0800478c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
 8004798:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 800479a:	2300      	movs	r3, #0
 800479c:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d004      	beq.n	80047ae <xTaskGenericNotifyWait+0x22>
 80047a4:	f641 612f 	movw	r1, #7727	@ 0x1e2f
 80047a8:	483e      	ldr	r0, [pc, #248]	@ (80048a4 <xTaskGenericNotifyWait+0x118>)
 80047aa:	f7fc fcb5 	bl	8001118 <vAssertCalled>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 80047ae:	f7fe ff1b 	bl	80035e8 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 80047b2:	f000 fd95 	bl	80052e0 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 80047b6:	4b3c      	ldr	r3, [pc, #240]	@ (80048a8 <xTaskGenericNotifyWait+0x11c>)
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4413      	add	r3, r2
 80047be:	3368      	adds	r3, #104	@ 0x68
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d01a      	beq.n	80047fe <xTaskGenericNotifyWait+0x72>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 80047c8:	4b37      	ldr	r3, [pc, #220]	@ (80048a8 <xTaskGenericNotifyWait+0x11c>)
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	3318      	adds	r3, #24
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	6859      	ldr	r1, [r3, #4]
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	43db      	mvns	r3, r3
 80047da:	4019      	ands	r1, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	3318      	adds	r3, #24
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4413      	add	r3, r2
 80047e4:	6059      	str	r1, [r3, #4]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 80047e6:	4b30      	ldr	r3, [pc, #192]	@ (80048a8 <xTaskGenericNotifyWait+0x11c>)
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	4413      	add	r3, r2
 80047ee:	3368      	adds	r3, #104	@ 0x68
 80047f0:	2201      	movs	r2, #1
 80047f2:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 80047f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <xTaskGenericNotifyWait+0x72>
                    {
                        xShouldBlock = pdTRUE;
 80047fa:	2301      	movs	r3, #1
 80047fc:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 80047fe:	f000 fd9b 	bl	8005338 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d103      	bne.n	8004810 <xTaskGenericNotifyWait+0x84>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004808:	2101      	movs	r1, #1
 800480a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800480c:	f000 fbb0 	bl	8004f70 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8004810:	f7fe fef8 	bl	8003604 <xTaskResumeAll>
 8004814:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d10a      	bne.n	8004832 <xTaskGenericNotifyWait+0xa6>
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d107      	bne.n	8004832 <xTaskGenericNotifyWait+0xa6>
        {
            taskYIELD_WITHIN_API();
 8004822:	4b22      	ldr	r3, [pc, #136]	@ (80048ac <xTaskGenericNotifyWait+0x120>)
 8004824:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8004832:	f000 fd55 	bl	80052e0 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d008      	beq.n	800484e <xTaskGenericNotifyWait+0xc2>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 800483c:	4b1a      	ldr	r3, [pc, #104]	@ (80048a8 <xTaskGenericNotifyWait+0x11c>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	3318      	adds	r3, #24
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4413      	add	r3, r2
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 800484e:	4b16      	ldr	r3, [pc, #88]	@ (80048a8 <xTaskGenericNotifyWait+0x11c>)
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4413      	add	r3, r2
 8004856:	3368      	adds	r3, #104	@ 0x68
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d002      	beq.n	8004866 <xTaskGenericNotifyWait+0xda>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8004860:	2300      	movs	r3, #0
 8004862:	61fb      	str	r3, [r7, #28]
 8004864:	e010      	b.n	8004888 <xTaskGenericNotifyWait+0xfc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 8004866:	4b10      	ldr	r3, [pc, #64]	@ (80048a8 <xTaskGenericNotifyWait+0x11c>)
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	3318      	adds	r3, #24
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4413      	add	r3, r2
 8004872:	6859      	ldr	r1, [r3, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	43db      	mvns	r3, r3
 8004878:	4019      	ands	r1, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	3318      	adds	r3, #24
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 8004884:	2301      	movs	r3, #1
 8004886:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8004888:	4b07      	ldr	r3, [pc, #28]	@ (80048a8 <xTaskGenericNotifyWait+0x11c>)
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4413      	add	r3, r2
 8004890:	3368      	adds	r3, #104	@ 0x68
 8004892:	2200      	movs	r2, #0
 8004894:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8004896:	f000 fd4f 	bl	8005338 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
 800489a:	69fb      	ldr	r3, [r7, #28]
    }
 800489c:	4618      	mov	r0, r3
 800489e:	3720      	adds	r7, #32
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	08022784 	.word	0x08022784
 80048a8:	20000ab4 	.word	0x20000ab4
 80048ac:	e000ed04 	.word	0xe000ed04

080048b0 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b08a      	sub	sp, #40	@ 0x28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
 80048bc:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80048be:	2301      	movs	r3, #1
 80048c0:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d004      	beq.n	80048d2 <xTaskGenericNotify+0x22>
 80048c8:	f641 61a4 	movw	r1, #7844	@ 0x1ea4
 80048cc:	487b      	ldr	r0, [pc, #492]	@ (8004abc <xTaskGenericNotify+0x20c>)
 80048ce:	f7fc fc23 	bl	8001118 <vAssertCalled>
        configASSERT( xTaskToNotify );
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d104      	bne.n	80048e2 <xTaskGenericNotify+0x32>
 80048d8:	f641 61a5 	movw	r1, #7845	@ 0x1ea5
 80048dc:	4877      	ldr	r0, [pc, #476]	@ (8004abc <xTaskGenericNotify+0x20c>)
 80048de:	f7fc fc1b 	bl	8001118 <vAssertCalled>
        pxTCB = xTaskToNotify;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	623b      	str	r3, [r7, #32]

        taskENTER_CRITICAL();
 80048e6:	f000 fcfb 	bl	80052e0 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80048ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d007      	beq.n	8004900 <xTaskGenericNotify+0x50>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80048f0:	6a3a      	ldr	r2, [r7, #32]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	3318      	adds	r3, #24
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fe:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004900:	6a3a      	ldr	r2, [r7, #32]
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	4413      	add	r3, r2
 8004906:	3368      	adds	r3, #104	@ 0x68
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	77fb      	strb	r3, [r7, #31]

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800490c:	6a3a      	ldr	r2, [r7, #32]
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	4413      	add	r3, r2
 8004912:	3368      	adds	r3, #104	@ 0x68
 8004914:	2202      	movs	r2, #2
 8004916:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8004918:	78fb      	ldrb	r3, [r7, #3]
 800491a:	2b04      	cmp	r3, #4
 800491c:	d83f      	bhi.n	800499e <xTaskGenericNotify+0xee>
 800491e:	a201      	add	r2, pc, #4	@ (adr r2, 8004924 <xTaskGenericNotify+0x74>)
 8004920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004924:	080049b3 	.word	0x080049b3
 8004928:	08004939 	.word	0x08004939
 800492c:	08004957 	.word	0x08004957
 8004930:	08004973 	.word	0x08004973
 8004934:	08004983 	.word	0x08004983
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004938:	6a3a      	ldr	r2, [r7, #32]
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	3318      	adds	r3, #24
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	431a      	orrs	r2, r3
 8004948:	6a39      	ldr	r1, [r7, #32]
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	3318      	adds	r3, #24
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	605a      	str	r2, [r3, #4]
                    break;
 8004954:	e030      	b.n	80049b8 <xTaskGenericNotify+0x108>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004956:	6a3a      	ldr	r2, [r7, #32]
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	3318      	adds	r3, #24
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	1c5a      	adds	r2, r3, #1
 8004964:	6a39      	ldr	r1, [r7, #32]
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	3318      	adds	r3, #24
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	440b      	add	r3, r1
 800496e:	605a      	str	r2, [r3, #4]
                    break;
 8004970:	e022      	b.n	80049b8 <xTaskGenericNotify+0x108>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004972:	6a3a      	ldr	r2, [r7, #32]
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	3318      	adds	r3, #24
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	605a      	str	r2, [r3, #4]
                    break;
 8004980:	e01a      	b.n	80049b8 <xTaskGenericNotify+0x108>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004982:	7ffb      	ldrb	r3, [r7, #31]
 8004984:	2b02      	cmp	r3, #2
 8004986:	d007      	beq.n	8004998 <xTaskGenericNotify+0xe8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004988:	6a3a      	ldr	r2, [r7, #32]
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	3318      	adds	r3, #24
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004996:	e00f      	b.n	80049b8 <xTaskGenericNotify+0x108>
                        xReturn = pdFAIL;
 8004998:	2300      	movs	r3, #0
 800499a:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 800499c:	e00c      	b.n	80049b8 <xTaskGenericNotify+0x108>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800499e:	4b48      	ldr	r3, [pc, #288]	@ (8004ac0 <xTaskGenericNotify+0x210>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d007      	beq.n	80049b6 <xTaskGenericNotify+0x106>
 80049a6:	f641 61da 	movw	r1, #7898	@ 0x1eda
 80049aa:	4844      	ldr	r0, [pc, #272]	@ (8004abc <xTaskGenericNotify+0x20c>)
 80049ac:	f7fc fbb4 	bl	8001118 <vAssertCalled>

                    break;
 80049b0:	e001      	b.n	80049b6 <xTaskGenericNotify+0x106>
                    break;
 80049b2:	bf00      	nop
 80049b4:	e000      	b.n	80049b8 <xTaskGenericNotify+0x108>
                    break;
 80049b6:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80049b8:	7ffb      	ldrb	r3, [r7, #31]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d177      	bne.n	8004aae <xTaskGenericNotify+0x1fe>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	61bb      	str	r3, [r7, #24]
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	6a3a      	ldr	r2, [r7, #32]
 80049ca:	68d2      	ldr	r2, [r2, #12]
 80049cc:	609a      	str	r2, [r3, #8]
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	6a3a      	ldr	r2, [r7, #32]
 80049d4:	6892      	ldr	r2, [r2, #8]
 80049d6:	605a      	str	r2, [r3, #4]
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	3304      	adds	r3, #4
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d103      	bne.n	80049ec <xTaskGenericNotify+0x13c>
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	605a      	str	r2, [r3, #4]
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	2200      	movs	r2, #0
 80049f0:	615a      	str	r2, [r3, #20]
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	1e5a      	subs	r2, r3, #1
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a00:	2201      	movs	r2, #1
 8004a02:	409a      	lsls	r2, r3
 8004a04:	4b2f      	ldr	r3, [pc, #188]	@ (8004ac4 <xTaskGenericNotify+0x214>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	4a2e      	ldr	r2, [pc, #184]	@ (8004ac4 <xTaskGenericNotify+0x214>)
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a12:	492d      	ldr	r1, [pc, #180]	@ (8004ac8 <xTaskGenericNotify+0x218>)
 8004a14:	4613      	mov	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	440b      	add	r3, r1
 8004a1e:	3304      	adds	r3, #4
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	609a      	str	r2, [r3, #8]
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	689a      	ldr	r2, [r3, #8]
 8004a2e:	6a3b      	ldr	r3, [r7, #32]
 8004a30:	60da      	str	r2, [r3, #12]
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	6a3a      	ldr	r2, [r7, #32]
 8004a38:	3204      	adds	r2, #4
 8004a3a:	605a      	str	r2, [r3, #4]
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	1d1a      	adds	r2, r3, #4
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	609a      	str	r2, [r3, #8]
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a48:	4613      	mov	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4a1d      	ldr	r2, [pc, #116]	@ (8004ac8 <xTaskGenericNotify+0x218>)
 8004a52:	441a      	add	r2, r3
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	615a      	str	r2, [r3, #20]
 8004a58:	6a3b      	ldr	r3, [r7, #32]
 8004a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a5c:	491a      	ldr	r1, [pc, #104]	@ (8004ac8 <xTaskGenericNotify+0x218>)
 8004a5e:	4613      	mov	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	440b      	add	r3, r1
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6a3a      	ldr	r2, [r7, #32]
 8004a6c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004a6e:	1c59      	adds	r1, r3, #1
 8004a70:	4815      	ldr	r0, [pc, #84]	@ (8004ac8 <xTaskGenericNotify+0x218>)
 8004a72:	4613      	mov	r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4403      	add	r3, r0
 8004a7c:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d004      	beq.n	8004a90 <xTaskGenericNotify+0x1e0>
 8004a86:	f641 61e9 	movw	r1, #7913	@ 0x1ee9
 8004a8a:	480c      	ldr	r0, [pc, #48]	@ (8004abc <xTaskGenericNotify+0x20c>)
 8004a8c:	f7fc fb44 	bl	8001118 <vAssertCalled>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 8004a90:	4b0e      	ldr	r3, [pc, #56]	@ (8004acc <xTaskGenericNotify+0x21c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a96:	6a3b      	ldr	r3, [r7, #32]
 8004a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d207      	bcs.n	8004aae <xTaskGenericNotify+0x1fe>
 8004a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ad0 <xTaskGenericNotify+0x220>)
 8004aa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004aae:	f000 fc43 	bl	8005338 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3728      	adds	r7, #40	@ 0x28
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	08022784 	.word	0x08022784
 8004ac0:	20000bb8 	.word	0x20000bb8
 8004ac4:	20000bbc 	.word	0x20000bbc
 8004ac8:	20000ab8 	.word	0x20000ab8
 8004acc:	20000ab4 	.word	0x20000ab4
 8004ad0:	e000ed04 	.word	0xe000ed04

08004ad4 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b08e      	sub	sp, #56	@ 0x38
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	637b      	str	r3, [r7, #52]	@ 0x34
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_xTaskGenericNotifyFromISR( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d104      	bne.n	8004af6 <xTaskGenericNotifyFromISR+0x22>
 8004aec:	f641 711e 	movw	r1, #7966	@ 0x1f1e
 8004af0:	4899      	ldr	r0, [pc, #612]	@ (8004d58 <xTaskGenericNotifyFromISR+0x284>)
 8004af2:	f7fc fb11 	bl	8001118 <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d004      	beq.n	8004b06 <xTaskGenericNotifyFromISR+0x32>
 8004afc:	f641 711f 	movw	r1, #7967	@ 0x1f1f
 8004b00:	4895      	ldr	r0, [pc, #596]	@ (8004d58 <xTaskGenericNotifyFromISR+0x284>)
 8004b02:	f7fc fb09 	bl	8001118 <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b06:	f000 fcb9 	bl	800547c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8004b0e:	f3ef 8211 	mrs	r2, BASEPRI
 8004b12:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004b16:	b672      	cpsid	i
 8004b18:	f383 8811 	msr	BASEPRI, r3
 8004b1c:	f3bf 8f6f 	isb	sy
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	b662      	cpsie	i
 8004b26:	61ba      	str	r2, [r7, #24]
 8004b28:	617b      	str	r3, [r7, #20]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8004b2a:	69bb      	ldr	r3, [r7, #24]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8004b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        {
            if( pulPreviousNotificationValue != NULL )
 8004b2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d007      	beq.n	8004b44 <xTaskGenericNotifyFromISR+0x70>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004b34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	3318      	adds	r3, #24
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b42:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004b44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	4413      	add	r3, r2
 8004b4a:	3368      	adds	r3, #104	@ 0x68
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004b52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	4413      	add	r3, r2
 8004b58:	3368      	adds	r3, #104	@ 0x68
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8004b5e:	78fb      	ldrb	r3, [r7, #3]
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d841      	bhi.n	8004be8 <xTaskGenericNotifyFromISR+0x114>
 8004b64:	a201      	add	r2, pc, #4	@ (adr r2, 8004b6c <xTaskGenericNotifyFromISR+0x98>)
 8004b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6a:	bf00      	nop
 8004b6c:	08004bfd 	.word	0x08004bfd
 8004b70:	08004b81 	.word	0x08004b81
 8004b74:	08004b9f 	.word	0x08004b9f
 8004b78:	08004bbb 	.word	0x08004bbb
 8004b7c:	08004bcb 	.word	0x08004bcb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004b80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	3318      	adds	r3, #24
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	3318      	adds	r3, #24
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	440b      	add	r3, r1
 8004b9a:	605a      	str	r2, [r3, #4]
                    break;
 8004b9c:	e031      	b.n	8004c02 <xTaskGenericNotifyFromISR+0x12e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004b9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	3318      	adds	r3, #24
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	3318      	adds	r3, #24
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	605a      	str	r2, [r3, #4]
                    break;
 8004bb8:	e023      	b.n	8004c02 <xTaskGenericNotifyFromISR+0x12e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004bba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	3318      	adds	r3, #24
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	605a      	str	r2, [r3, #4]
                    break;
 8004bc8:	e01b      	b.n	8004c02 <xTaskGenericNotifyFromISR+0x12e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004bca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d007      	beq.n	8004be2 <xTaskGenericNotifyFromISR+0x10e>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004bd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	3318      	adds	r3, #24
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004be0:	e00f      	b.n	8004c02 <xTaskGenericNotifyFromISR+0x12e>
                        xReturn = pdFAIL;
 8004be2:	2300      	movs	r3, #0
 8004be4:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 8004be6:	e00c      	b.n	8004c02 <xTaskGenericNotifyFromISR+0x12e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8004be8:	4b5c      	ldr	r3, [pc, #368]	@ (8004d5c <xTaskGenericNotifyFromISR+0x288>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d007      	beq.n	8004c00 <xTaskGenericNotifyFromISR+0x12c>
 8004bf0:	f641 7169 	movw	r1, #8041	@ 0x1f69
 8004bf4:	4858      	ldr	r0, [pc, #352]	@ (8004d58 <xTaskGenericNotifyFromISR+0x284>)
 8004bf6:	f7fc fa8f 	bl	8001118 <vAssertCalled>
                    break;
 8004bfa:	e001      	b.n	8004c00 <xTaskGenericNotifyFromISR+0x12c>
                    break;
 8004bfc:	bf00      	nop
 8004bfe:	e000      	b.n	8004c02 <xTaskGenericNotifyFromISR+0x12e>
                    break;
 8004c00:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004c02:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	f040 809a 	bne.w	8004d40 <xTaskGenericNotifyFromISR+0x26c>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d004      	beq.n	8004c1e <xTaskGenericNotifyFromISR+0x14a>
 8004c14:	f641 7174 	movw	r1, #8052	@ 0x1f74
 8004c18:	484f      	ldr	r0, [pc, #316]	@ (8004d58 <xTaskGenericNotifyFromISR+0x284>)
 8004c1a:	f7fc fa7d 	bl	8001118 <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004c1e:	4b50      	ldr	r3, [pc, #320]	@ (8004d60 <xTaskGenericNotifyFromISR+0x28c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d160      	bne.n	8004ce8 <xTaskGenericNotifyFromISR+0x214>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	623b      	str	r3, [r7, #32]
 8004c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c32:	68d2      	ldr	r2, [r2, #12]
 8004c34:	609a      	str	r2, [r3, #8]
 8004c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c3c:	6892      	ldr	r2, [r2, #8]
 8004c3e:	605a      	str	r2, [r3, #4]
 8004c40:	6a3b      	ldr	r3, [r7, #32]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c46:	3304      	adds	r3, #4
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d103      	bne.n	8004c54 <xTaskGenericNotifyFromISR+0x180>
 8004c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4e:	68da      	ldr	r2, [r3, #12]
 8004c50:	6a3b      	ldr	r3, [r7, #32]
 8004c52:	605a      	str	r2, [r3, #4]
 8004c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c56:	2200      	movs	r2, #0
 8004c58:	615a      	str	r2, [r3, #20]
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	1e5a      	subs	r2, r3, #1
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c68:	2201      	movs	r2, #1
 8004c6a:	409a      	lsls	r2, r3
 8004c6c:	4b3d      	ldr	r3, [pc, #244]	@ (8004d64 <xTaskGenericNotifyFromISR+0x290>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	4a3c      	ldr	r2, [pc, #240]	@ (8004d64 <xTaskGenericNotifyFromISR+0x290>)
 8004c74:	6013      	str	r3, [r2, #0]
 8004c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c7a:	493b      	ldr	r1, [pc, #236]	@ (8004d68 <xTaskGenericNotifyFromISR+0x294>)
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	440b      	add	r3, r1
 8004c86:	3304      	adds	r3, #4
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	61fb      	str	r3, [r7, #28]
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c8e:	69fa      	ldr	r2, [r7, #28]
 8004c90:	609a      	str	r2, [r3, #8]
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	689a      	ldr	r2, [r3, #8]
 8004c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c98:	60da      	str	r2, [r3, #12]
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ca0:	3204      	adds	r2, #4
 8004ca2:	605a      	str	r2, [r3, #4]
 8004ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca6:	1d1a      	adds	r2, r3, #4
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	609a      	str	r2, [r3, #8]
 8004cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4a2b      	ldr	r2, [pc, #172]	@ (8004d68 <xTaskGenericNotifyFromISR+0x294>)
 8004cba:	441a      	add	r2, r3
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cbe:	615a      	str	r2, [r3, #20]
 8004cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cc4:	4928      	ldr	r1, [pc, #160]	@ (8004d68 <xTaskGenericNotifyFromISR+0x294>)
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	440b      	add	r3, r1
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cd4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004cd6:	1c59      	adds	r1, r3, #1
 8004cd8:	4823      	ldr	r0, [pc, #140]	@ (8004d68 <xTaskGenericNotifyFromISR+0x294>)
 8004cda:	4613      	mov	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4413      	add	r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	4403      	add	r3, r0
 8004ce4:	6019      	str	r1, [r3, #0]
 8004ce6:	e01b      	b.n	8004d20 <xTaskGenericNotifyFromISR+0x24c>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004ce8:	4b20      	ldr	r3, [pc, #128]	@ (8004d6c <xTaskGenericNotifyFromISR+0x298>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cf2:	61da      	str	r2, [r3, #28]
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfa:	621a      	str	r2, [r3, #32]
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d02:	3218      	adds	r2, #24
 8004d04:	605a      	str	r2, [r3, #4]
 8004d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d08:	f103 0218 	add.w	r2, r3, #24
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0e:	609a      	str	r2, [r3, #8]
 8004d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d12:	4a16      	ldr	r2, [pc, #88]	@ (8004d6c <xTaskGenericNotifyFromISR+0x298>)
 8004d14:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d16:	4b15      	ldr	r3, [pc, #84]	@ (8004d6c <xTaskGenericNotifyFromISR+0x298>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	4a13      	ldr	r2, [pc, #76]	@ (8004d6c <xTaskGenericNotifyFromISR+0x298>)
 8004d1e:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d24:	4b12      	ldr	r3, [pc, #72]	@ (8004d70 <xTaskGenericNotifyFromISR+0x29c>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d908      	bls.n	8004d40 <xTaskGenericNotifyFromISR+0x26c>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8004d2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <xTaskGenericNotifyFromISR+0x266>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8004d34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d36:	2201      	movs	r2, #1
 8004d38:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter to an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 8004d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8004d74 <xTaskGenericNotifyFromISR+0x2a0>)
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d42:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8004d4a:	bf00      	nop
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );

        return xReturn;
 8004d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3738      	adds	r7, #56	@ 0x38
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	08022784 	.word	0x08022784
 8004d5c:	20000bb8 	.word	0x20000bb8
 8004d60:	20000bdc 	.word	0x20000bdc
 8004d64:	20000bbc 	.word	0x20000bbc
 8004d68:	20000ab8 	.word	0x20000ab8
 8004d6c:	20000b74 	.word	0x20000b74
 8004d70:	20000ab4 	.word	0x20000ab4
 8004d74:	20000bc8 	.word	0x20000bc8

08004d78 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b08e      	sub	sp, #56	@ 0x38
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_vTaskGenericNotifyGiveFromISR( xTaskToNotify, uxIndexToNotify, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d104      	bne.n	8004d94 <vTaskGenericNotifyGiveFromISR+0x1c>
 8004d8a:	f44f 51fe 	mov.w	r1, #8128	@ 0x1fc0
 8004d8e:	4871      	ldr	r0, [pc, #452]	@ (8004f54 <vTaskGenericNotifyGiveFromISR+0x1dc>)
 8004d90:	f7fc f9c2 	bl	8001118 <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d004      	beq.n	8004da4 <vTaskGenericNotifyGiveFromISR+0x2c>
 8004d9a:	f641 71c1 	movw	r1, #8129	@ 0x1fc1
 8004d9e:	486d      	ldr	r0, [pc, #436]	@ (8004f54 <vTaskGenericNotifyGiveFromISR+0x1dc>)
 8004da0:	f7fc f9ba 	bl	8001118 <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004da4:	f000 fb6a 	bl	800547c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm volatile
 8004dac:	f3ef 8211 	mrs	r2, BASEPRI
 8004db0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004db4:	b672      	cpsid	i
 8004db6:	f383 8811 	msr	BASEPRI, r3
 8004dba:	f3bf 8f6f 	isb	sy
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	b662      	cpsie	i
 8004dc4:	61fa      	str	r2, [r7, #28]
 8004dc6:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 8004dc8:	69fb      	ldr	r3, [r7, #28]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8004dca:	633b      	str	r3, [r7, #48]	@ 0x30
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004dcc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	3368      	adds	r3, #104	@ 0x68
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004dda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	4413      	add	r3, r2
 8004de0:	3368      	adds	r3, #104	@ 0x68
 8004de2:	2202      	movs	r2, #2
 8004de4:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004de6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	3318      	adds	r3, #24
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	3318      	adds	r3, #24
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	440b      	add	r3, r1
 8004dfe:	605a      	str	r2, [r3, #4]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004e00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	f040 809a 	bne.w	8004f3e <vTaskGenericNotifyGiveFromISR+0x1c6>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d004      	beq.n	8004e1c <vTaskGenericNotifyGiveFromISR+0xa4>
 8004e12:	f641 71ea 	movw	r1, #8170	@ 0x1fea
 8004e16:	484f      	ldr	r0, [pc, #316]	@ (8004f54 <vTaskGenericNotifyGiveFromISR+0x1dc>)
 8004e18:	f7fc f97e 	bl	8001118 <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004e1c:	4b4e      	ldr	r3, [pc, #312]	@ (8004f58 <vTaskGenericNotifyGiveFromISR+0x1e0>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d160      	bne.n	8004ee6 <vTaskGenericNotifyGiveFromISR+0x16e>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e30:	68d2      	ldr	r2, [r2, #12]
 8004e32:	609a      	str	r2, [r3, #8]
 8004e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e3a:	6892      	ldr	r2, [r2, #8]
 8004e3c:	605a      	str	r2, [r3, #4]
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e44:	3304      	adds	r3, #4
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d103      	bne.n	8004e52 <vTaskGenericNotifyGiveFromISR+0xda>
 8004e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e50:	605a      	str	r2, [r3, #4]
 8004e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e54:	2200      	movs	r2, #0
 8004e56:	615a      	str	r2, [r3, #20]
 8004e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	1e5a      	subs	r2, r3, #1
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e60:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e66:	2201      	movs	r2, #1
 8004e68:	409a      	lsls	r2, r3
 8004e6a:	4b3c      	ldr	r3, [pc, #240]	@ (8004f5c <vTaskGenericNotifyGiveFromISR+0x1e4>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	4a3a      	ldr	r2, [pc, #232]	@ (8004f5c <vTaskGenericNotifyGiveFromISR+0x1e4>)
 8004e72:	6013      	str	r3, [r2, #0]
 8004e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e78:	4939      	ldr	r1, [pc, #228]	@ (8004f60 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4413      	add	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	440b      	add	r3, r1
 8004e84:	3304      	adds	r3, #4
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	623b      	str	r3, [r7, #32]
 8004e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e8c:	6a3a      	ldr	r2, [r7, #32]
 8004e8e:	609a      	str	r2, [r3, #8]
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e96:	60da      	str	r2, [r3, #12]
 8004e98:	6a3b      	ldr	r3, [r7, #32]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e9e:	3204      	adds	r2, #4
 8004ea0:	605a      	str	r2, [r3, #4]
 8004ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ea4:	1d1a      	adds	r2, r3, #4
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	609a      	str	r2, [r3, #8]
 8004eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eae:	4613      	mov	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4a2a      	ldr	r2, [pc, #168]	@ (8004f60 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8004eb8:	441a      	add	r2, r3
 8004eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ebc:	615a      	str	r2, [r3, #20]
 8004ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ec0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ec2:	4927      	ldr	r1, [pc, #156]	@ (8004f60 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	440b      	add	r3, r1
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ed2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004ed4:	1c59      	adds	r1, r3, #1
 8004ed6:	4822      	ldr	r0, [pc, #136]	@ (8004f60 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8004ed8:	4613      	mov	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4403      	add	r3, r0
 8004ee2:	6019      	str	r1, [r3, #0]
 8004ee4:	e01b      	b.n	8004f1e <vTaskGenericNotifyGiveFromISR+0x1a6>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004ee6:	4b1f      	ldr	r3, [pc, #124]	@ (8004f64 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ef0:	61da      	str	r2, [r3, #28]
 8004ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ef8:	621a      	str	r2, [r3, #32]
 8004efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f00:	3218      	adds	r2, #24
 8004f02:	605a      	str	r2, [r3, #4]
 8004f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f06:	f103 0218 	add.w	r2, r3, #24
 8004f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f0c:	609a      	str	r2, [r3, #8]
 8004f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f10:	4a14      	ldr	r2, [pc, #80]	@ (8004f64 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8004f12:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f14:	4b13      	ldr	r3, [pc, #76]	@ (8004f64 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	4a12      	ldr	r2, [pc, #72]	@ (8004f64 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8004f1c:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f22:	4b11      	ldr	r3, [pc, #68]	@ (8004f68 <vTaskGenericNotifyGiveFromISR+0x1f0>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d908      	bls.n	8004f3e <vTaskGenericNotifyGiveFromISR+0x1c6>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <vTaskGenericNotifyGiveFromISR+0x1c0>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter in an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 8004f38:	4b0c      	ldr	r3, [pc, #48]	@ (8004f6c <vTaskGenericNotifyGiveFromISR+0x1f4>)
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f40:	617b      	str	r3, [r7, #20]
    __asm volatile
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f383 8811 	msr	BASEPRI, r3
}
 8004f48:	bf00      	nop
            }
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_vTaskGenericNotifyGiveFromISR();
    }
 8004f4a:	bf00      	nop
 8004f4c:	3738      	adds	r7, #56	@ 0x38
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	08022784 	.word	0x08022784
 8004f58:	20000bdc 	.word	0x20000bdc
 8004f5c:	20000bbc 	.word	0x20000bbc
 8004f60:	20000ab8 	.word	0x20000ab8
 8004f64:	20000b74 	.word	0x20000b74
 8004f68:	20000ab4 	.word	0x20000ab4
 8004f6c:	20000bc8 	.word	0x20000bc8

08004f70 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b088      	sub	sp, #32
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004f7a:	4b37      	ldr	r3, [pc, #220]	@ (8005058 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8004f80:	4b36      	ldr	r3, [pc, #216]	@ (800505c <prvAddCurrentTaskToDelayedList+0xec>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8004f86:	4b36      	ldr	r3, [pc, #216]	@ (8005060 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f8c:	4b35      	ldr	r3, [pc, #212]	@ (8005064 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3304      	adds	r3, #4
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fd fade 	bl	8002554 <uxListRemove>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10b      	bne.n	8004fb6 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004f9e:	4b31      	ldr	r3, [pc, #196]	@ (8005064 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004faa:	43da      	mvns	r2, r3
 8004fac:	4b2e      	ldr	r3, [pc, #184]	@ (8005068 <prvAddCurrentTaskToDelayedList+0xf8>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	4a2d      	ldr	r2, [pc, #180]	@ (8005068 <prvAddCurrentTaskToDelayedList+0xf8>)
 8004fb4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbc:	d124      	bne.n	8005008 <prvAddCurrentTaskToDelayedList+0x98>
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d021      	beq.n	8005008 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fc4:	4b29      	ldr	r3, [pc, #164]	@ (800506c <prvAddCurrentTaskToDelayedList+0xfc>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	613b      	str	r3, [r7, #16]
 8004fca:	4b26      	ldr	r3, [pc, #152]	@ (8005064 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	609a      	str	r2, [r3, #8]
 8004fd2:	4b24      	ldr	r3, [pc, #144]	@ (8005064 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	6892      	ldr	r2, [r2, #8]
 8004fda:	60da      	str	r2, [r3, #12]
 8004fdc:	4b21      	ldr	r3, [pc, #132]	@ (8005064 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	3204      	adds	r2, #4
 8004fe6:	605a      	str	r2, [r3, #4]
 8004fe8:	4b1e      	ldr	r3, [pc, #120]	@ (8005064 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	1d1a      	adds	r2, r3, #4
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	609a      	str	r2, [r3, #8]
 8004ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8005064 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a1d      	ldr	r2, [pc, #116]	@ (800506c <prvAddCurrentTaskToDelayedList+0xfc>)
 8004ff8:	615a      	str	r2, [r3, #20]
 8004ffa:	4b1c      	ldr	r3, [pc, #112]	@ (800506c <prvAddCurrentTaskToDelayedList+0xfc>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3301      	adds	r3, #1
 8005000:	4a1a      	ldr	r2, [pc, #104]	@ (800506c <prvAddCurrentTaskToDelayedList+0xfc>)
 8005002:	6013      	str	r3, [r2, #0]
 8005004:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005006:	e022      	b.n	800504e <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8005008:	69fa      	ldr	r2, [r7, #28]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4413      	add	r3, r2
 800500e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005010:	4b14      	ldr	r3, [pc, #80]	@ (8005064 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	429a      	cmp	r2, r3
 800501e:	d207      	bcs.n	8005030 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8005020:	4b10      	ldr	r3, [pc, #64]	@ (8005064 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	3304      	adds	r3, #4
 8005026:	4619      	mov	r1, r3
 8005028:	6978      	ldr	r0, [r7, #20]
 800502a:	f7fd fa5a 	bl	80024e2 <vListInsert>
}
 800502e:	e00e      	b.n	800504e <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8005030:	4b0c      	ldr	r3, [pc, #48]	@ (8005064 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	3304      	adds	r3, #4
 8005036:	4619      	mov	r1, r3
 8005038:	69b8      	ldr	r0, [r7, #24]
 800503a:	f7fd fa52 	bl	80024e2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800503e:	4b0c      	ldr	r3, [pc, #48]	@ (8005070 <prvAddCurrentTaskToDelayedList+0x100>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	429a      	cmp	r2, r3
 8005046:	d202      	bcs.n	800504e <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8005048:	4a09      	ldr	r2, [pc, #36]	@ (8005070 <prvAddCurrentTaskToDelayedList+0x100>)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6013      	str	r3, [r2, #0]
}
 800504e:	bf00      	nop
 8005050:	3720      	adds	r7, #32
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	20000bb8 	.word	0x20000bb8
 800505c:	20000b6c 	.word	0x20000b6c
 8005060:	20000b70 	.word	0x20000b70
 8005064:	20000ab4 	.word	0x20000ab4
 8005068:	20000bbc 	.word	0x20000bbc
 800506c:	20000ba0 	.word	0x20000ba0
 8005070:	20000bd4 	.word	0x20000bd4

08005074 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	3b04      	subs	r3, #4
 8005084:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800508c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	3b04      	subs	r3, #4
 8005092:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f023 0201 	bic.w	r2, r3, #1
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	3b04      	subs	r3, #4
 80050a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80050a4:	4a0c      	ldr	r2, [pc, #48]	@ (80050d8 <pxPortInitialiseStack+0x64>)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	3b14      	subs	r3, #20
 80050ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	3b04      	subs	r3, #4
 80050ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f06f 0202 	mvn.w	r2, #2
 80050c2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	3b20      	subs	r3, #32
 80050c8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80050ca:	68fb      	ldr	r3, [r7, #12]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	080050dd 	.word	0x080050dd

080050dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80050e2:	2300      	movs	r3, #0
 80050e4:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80050e6:	4b0f      	ldr	r3, [pc, #60]	@ (8005124 <prvTaskExitError+0x48>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ee:	d003      	beq.n	80050f8 <prvTaskExitError+0x1c>
 80050f0:	21ee      	movs	r1, #238	@ 0xee
 80050f2:	480d      	ldr	r0, [pc, #52]	@ (8005128 <prvTaskExitError+0x4c>)
 80050f4:	f7fc f810 	bl	8001118 <vAssertCalled>
    __asm volatile
 80050f8:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80050fc:	b672      	cpsid	i
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	b662      	cpsie	i
 800510c:	607b      	str	r3, [r7, #4]
}
 800510e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005110:	bf00      	nop
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d0fc      	beq.n	8005112 <prvTaskExitError+0x36>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005118:	bf00      	nop
 800511a:	bf00      	nop
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	2000000c 	.word	0x2000000c
 8005128:	080227b0 	.word	0x080227b0
 800512c:	00000000 	.word	0x00000000

08005130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005130:	4b07      	ldr	r3, [pc, #28]	@ (8005150 <pxCurrentTCBConst2>)
 8005132:	6819      	ldr	r1, [r3, #0]
 8005134:	6808      	ldr	r0, [r1, #0]
 8005136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800513a:	f380 8809 	msr	PSP, r0
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f04f 0000 	mov.w	r0, #0
 8005146:	f380 8811 	msr	BASEPRI, r0
 800514a:	4770      	bx	lr
 800514c:	f3af 8000 	nop.w

08005150 <pxCurrentTCBConst2>:
 8005150:	20000ab4 	.word	0x20000ab4
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8005154:	bf00      	nop
 8005156:	bf00      	nop

08005158 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005158:	4808      	ldr	r0, [pc, #32]	@ (800517c <prvPortStartFirstTask+0x24>)
 800515a:	6800      	ldr	r0, [r0, #0]
 800515c:	6800      	ldr	r0, [r0, #0]
 800515e:	f380 8808 	msr	MSP, r0
 8005162:	f04f 0000 	mov.w	r0, #0
 8005166:	f380 8814 	msr	CONTROL, r0
 800516a:	b662      	cpsie	i
 800516c:	b661      	cpsie	f
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	df00      	svc	0
 8005178:	bf00      	nop
 800517a:	0000      	.short	0x0000
 800517c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8005180:	bf00      	nop
 8005182:	bf00      	nop

08005184 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800518a:	4b4a      	ldr	r3, [pc, #296]	@ (80052b4 <xPortStartScheduler+0x130>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	617b      	str	r3, [r7, #20]
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	332c      	adds	r3, #44	@ 0x2c
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a48      	ldr	r2, [pc, #288]	@ (80052b8 <xPortStartScheduler+0x134>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d004      	beq.n	80051a6 <xPortStartScheduler+0x22>
 800519c:	f240 114b 	movw	r1, #331	@ 0x14b
 80051a0:	4846      	ldr	r0, [pc, #280]	@ (80052bc <xPortStartScheduler+0x138>)
 80051a2:	f7fb ffb9 	bl	8001118 <vAssertCalled>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	3338      	adds	r3, #56	@ 0x38
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a44      	ldr	r2, [pc, #272]	@ (80052c0 <xPortStartScheduler+0x13c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d004      	beq.n	80051bc <xPortStartScheduler+0x38>
 80051b2:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 80051b6:	4841      	ldr	r0, [pc, #260]	@ (80052bc <xPortStartScheduler+0x138>)
 80051b8:	f7fb ffae 	bl	8001118 <vAssertCalled>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80051bc:	2300      	movs	r3, #0
 80051be:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80051c0:	4b40      	ldr	r3, [pc, #256]	@ (80052c4 <xPortStartScheduler+0x140>)
 80051c2:	613b      	str	r3, [r7, #16]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	22ff      	movs	r2, #255	@ 0xff
 80051d0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80051da:	79fb      	ldrb	r3, [r7, #7]
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	4b38      	ldr	r3, [pc, #224]	@ (80052c8 <xPortStartScheduler+0x144>)
 80051e6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 80051e8:	4b37      	ldr	r3, [pc, #220]	@ (80052c8 <xPortStartScheduler+0x144>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d104      	bne.n	80051fa <xPortStartScheduler+0x76>
 80051f0:	f240 116f 	movw	r1, #367	@ 0x16f
 80051f4:	4831      	ldr	r0, [pc, #196]	@ (80052bc <xPortStartScheduler+0x138>)
 80051f6:	f7fb ff8f 	bl	8001118 <vAssertCalled>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 80051fa:	79fb      	ldrb	r3, [r7, #7]
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	43db      	mvns	r3, r3
 8005200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00d      	beq.n	8005224 <xPortStartScheduler+0xa0>
 8005208:	f240 1173 	movw	r1, #371	@ 0x173
 800520c:	482b      	ldr	r0, [pc, #172]	@ (80052bc <xPortStartScheduler+0x138>)
 800520e:	f7fb ff83 	bl	8001118 <vAssertCalled>

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005212:	e007      	b.n	8005224 <xPortStartScheduler+0xa0>
        {
            ulImplementedPrioBits++;
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	3301      	adds	r3, #1
 8005218:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800521a:	79fb      	ldrb	r3, [r7, #7]
 800521c:	b2db      	uxtb	r3, r3
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	b2db      	uxtb	r3, r3
 8005222:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005224:	79fb      	ldrb	r3, [r7, #7]
 8005226:	b2db      	uxtb	r3, r3
 8005228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800522c:	2b80      	cmp	r3, #128	@ 0x80
 800522e:	d0f1      	beq.n	8005214 <xPortStartScheduler+0x90>
        }

        if( ulImplementedPrioBits == 8 )
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2b08      	cmp	r3, #8
 8005234:	d103      	bne.n	800523e <xPortStartScheduler+0xba>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8005236:	4b25      	ldr	r3, [pc, #148]	@ (80052cc <xPortStartScheduler+0x148>)
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	e004      	b.n	8005248 <xPortStartScheduler+0xc4>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	f1c3 0307 	rsb	r3, r3, #7
 8005244:	4a21      	ldr	r2, [pc, #132]	@ (80052cc <xPortStartScheduler+0x148>)
 8005246:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005248:	4b20      	ldr	r3, [pc, #128]	@ (80052cc <xPortStartScheduler+0x148>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	021b      	lsls	r3, r3, #8
 800524e:	4a1f      	ldr	r2, [pc, #124]	@ (80052cc <xPortStartScheduler+0x148>)
 8005250:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005252:	4b1e      	ldr	r3, [pc, #120]	@ (80052cc <xPortStartScheduler+0x148>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800525a:	4a1c      	ldr	r2, [pc, #112]	@ (80052cc <xPortStartScheduler+0x148>)
 800525c:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 800525e:	7bfb      	ldrb	r3, [r7, #15]
 8005260:	b2da      	uxtb	r2, r3
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005266:	4b1a      	ldr	r3, [pc, #104]	@ (80052d0 <xPortStartScheduler+0x14c>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a19      	ldr	r2, [pc, #100]	@ (80052d0 <xPortStartScheduler+0x14c>)
 800526c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005270:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005272:	4b17      	ldr	r3, [pc, #92]	@ (80052d0 <xPortStartScheduler+0x14c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a16      	ldr	r2, [pc, #88]	@ (80052d0 <xPortStartScheduler+0x14c>)
 8005278:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800527c:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 800527e:	4b15      	ldr	r3, [pc, #84]	@ (80052d4 <xPortStartScheduler+0x150>)
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005284:	f000 f8d4 	bl	8005430 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005288:	4b13      	ldr	r3, [pc, #76]	@ (80052d8 <xPortStartScheduler+0x154>)
 800528a:	2200      	movs	r2, #0
 800528c:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800528e:	f000 f8e9 	bl	8005464 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005292:	4b12      	ldr	r3, [pc, #72]	@ (80052dc <xPortStartScheduler+0x158>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a11      	ldr	r2, [pc, #68]	@ (80052dc <xPortStartScheduler+0x158>)
 8005298:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800529c:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800529e:	f7ff ff5b 	bl	8005158 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80052a2:	f7fe fbf5 	bl	8003a90 <vTaskSwitchContext>
    prvTaskExitError();
 80052a6:	f7ff ff19 	bl	80050dc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3718      	adds	r7, #24
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	e000ed08 	.word	0xe000ed08
 80052b8:	08005131 	.word	0x08005131
 80052bc:	080227b0 	.word	0x080227b0
 80052c0:	08005381 	.word	0x08005381
 80052c4:	e000e400 	.word	0xe000e400
 80052c8:	20000be8 	.word	0x20000be8
 80052cc:	20000bec 	.word	0x20000bec
 80052d0:	e000ed20 	.word	0xe000ed20
 80052d4:	e000ed1c 	.word	0xe000ed1c
 80052d8:	2000000c 	.word	0x2000000c
 80052dc:	e000ef34 	.word	0xe000ef34

080052e0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
    __asm volatile
 80052e6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80052ea:	b672      	cpsid	i
 80052ec:	f383 8811 	msr	BASEPRI, r3
 80052f0:	f3bf 8f6f 	isb	sy
 80052f4:	f3bf 8f4f 	dsb	sy
 80052f8:	b662      	cpsie	i
 80052fa:	607b      	str	r3, [r7, #4]
}
 80052fc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80052fe:	4b0b      	ldr	r3, [pc, #44]	@ (800532c <vPortEnterCritical+0x4c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	3301      	adds	r3, #1
 8005304:	4a09      	ldr	r2, [pc, #36]	@ (800532c <vPortEnterCritical+0x4c>)
 8005306:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005308:	4b08      	ldr	r3, [pc, #32]	@ (800532c <vPortEnterCritical+0x4c>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d109      	bne.n	8005324 <vPortEnterCritical+0x44>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005310:	4b07      	ldr	r3, [pc, #28]	@ (8005330 <vPortEnterCritical+0x50>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d004      	beq.n	8005324 <vPortEnterCritical+0x44>
 800531a:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 800531e:	4805      	ldr	r0, [pc, #20]	@ (8005334 <vPortEnterCritical+0x54>)
 8005320:	f7fb fefa 	bl	8001118 <vAssertCalled>
    }
}
 8005324:	bf00      	nop
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	2000000c 	.word	0x2000000c
 8005330:	e000ed04 	.word	0xe000ed04
 8005334:	080227b0 	.word	0x080227b0

08005338 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800533e:	4b0e      	ldr	r3, [pc, #56]	@ (8005378 <vPortExitCritical+0x40>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d104      	bne.n	8005350 <vPortExitCritical+0x18>
 8005346:	f240 11e3 	movw	r1, #483	@ 0x1e3
 800534a:	480c      	ldr	r0, [pc, #48]	@ (800537c <vPortExitCritical+0x44>)
 800534c:	f7fb fee4 	bl	8001118 <vAssertCalled>
    uxCriticalNesting--;
 8005350:	4b09      	ldr	r3, [pc, #36]	@ (8005378 <vPortExitCritical+0x40>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	3b01      	subs	r3, #1
 8005356:	4a08      	ldr	r2, [pc, #32]	@ (8005378 <vPortExitCritical+0x40>)
 8005358:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800535a:	4b07      	ldr	r3, [pc, #28]	@ (8005378 <vPortExitCritical+0x40>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d105      	bne.n	800536e <vPortExitCritical+0x36>
 8005362:	2300      	movs	r3, #0
 8005364:	607b      	str	r3, [r7, #4]
    __asm volatile
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f383 8811 	msr	BASEPRI, r3
}
 800536c:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800536e:	bf00      	nop
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	2000000c 	.word	0x2000000c
 800537c:	080227b0 	.word	0x080227b0

08005380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005380:	f3ef 8009 	mrs	r0, PSP
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	4b15      	ldr	r3, [pc, #84]	@ (80053e0 <pxCurrentTCBConst>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	f01e 0f10 	tst.w	lr, #16
 8005390:	bf08      	it	eq
 8005392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800539a:	6010      	str	r0, [r2, #0]
 800539c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80053a0:	f04f 0040 	mov.w	r0, #64	@ 0x40
 80053a4:	b672      	cpsid	i
 80053a6:	f380 8811 	msr	BASEPRI, r0
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	b662      	cpsie	i
 80053b4:	f7fe fb6c 	bl	8003a90 <vTaskSwitchContext>
 80053b8:	f04f 0000 	mov.w	r0, #0
 80053bc:	f380 8811 	msr	BASEPRI, r0
 80053c0:	bc09      	pop	{r0, r3}
 80053c2:	6819      	ldr	r1, [r3, #0]
 80053c4:	6808      	ldr	r0, [r1, #0]
 80053c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ca:	f01e 0f10 	tst.w	lr, #16
 80053ce:	bf08      	it	eq
 80053d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80053d4:	f380 8809 	msr	PSP, r0
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop

080053e0 <pxCurrentTCBConst>:
 80053e0:	20000ab4 	.word	0x20000ab4
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop

080053e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
    __asm volatile
 80053ee:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80053f2:	b672      	cpsid	i
 80053f4:	f383 8811 	msr	BASEPRI, r3
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	b662      	cpsie	i
 8005402:	607b      	str	r3, [r7, #4]
}
 8005404:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005406:	f7fe fa2f 	bl	8003868 <xTaskIncrementTick>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d003      	beq.n	8005418 <xPortSysTickHandler+0x30>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005410:	4b06      	ldr	r3, [pc, #24]	@ (800542c <xPortSysTickHandler+0x44>)
 8005412:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005416:	601a      	str	r2, [r3, #0]
 8005418:	2300      	movs	r3, #0
 800541a:	603b      	str	r3, [r7, #0]
    __asm volatile
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	f383 8811 	msr	BASEPRI, r3
}
 8005422:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8005424:	bf00      	nop
 8005426:	3708      	adds	r7, #8
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	e000ed04 	.word	0xe000ed04

08005430 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005430:	b480      	push	{r7}
 8005432:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005434:	4b08      	ldr	r3, [pc, #32]	@ (8005458 <vPortSetupTimerInterrupt+0x28>)
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800543a:	4b08      	ldr	r3, [pc, #32]	@ (800545c <vPortSetupTimerInterrupt+0x2c>)
 800543c:	2200      	movs	r2, #0
 800543e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005440:	4b07      	ldr	r3, [pc, #28]	@ (8005460 <vPortSetupTimerInterrupt+0x30>)
 8005442:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8005446:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005448:	4b03      	ldr	r3, [pc, #12]	@ (8005458 <vPortSetupTimerInterrupt+0x28>)
 800544a:	2203      	movs	r2, #3
 800544c:	601a      	str	r2, [r3, #0]
}
 800544e:	bf00      	nop
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr
 8005458:	e000e010 	.word	0xe000e010
 800545c:	e000e018 	.word	0xe000e018
 8005460:	e000e014 	.word	0xe000e014

08005464 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005464:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005474 <vPortEnableVFP+0x10>
 8005468:	6801      	ldr	r1, [r0, #0]
 800546a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800546e:	6001      	str	r1, [r0, #0]
 8005470:	4770      	bx	lr
 8005472:	0000      	.short	0x0000
 8005474:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8005478:	bf00      	nop
 800547a:	bf00      	nop

0800547c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005482:	f3ef 8305 	mrs	r3, IPSR
 8005486:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b0f      	cmp	r3, #15
 800548c:	d90e      	bls.n	80054ac <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800548e:	4a10      	ldr	r2, [pc, #64]	@ (80054d0 <vPortValidateInterruptPriority+0x54>)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4413      	add	r3, r2
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005498:	4b0e      	ldr	r3, [pc, #56]	@ (80054d4 <vPortValidateInterruptPriority+0x58>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	78fa      	ldrb	r2, [r7, #3]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d204      	bcs.n	80054ac <vPortValidateInterruptPriority+0x30>
 80054a2:	f44f 715c 	mov.w	r1, #880	@ 0x370
 80054a6:	480c      	ldr	r0, [pc, #48]	@ (80054d8 <vPortValidateInterruptPriority+0x5c>)
 80054a8:	f7fb fe36 	bl	8001118 <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80054ac:	4b0b      	ldr	r3, [pc, #44]	@ (80054dc <vPortValidateInterruptPriority+0x60>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80054b4:	4b0a      	ldr	r3, [pc, #40]	@ (80054e0 <vPortValidateInterruptPriority+0x64>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d904      	bls.n	80054c6 <vPortValidateInterruptPriority+0x4a>
 80054bc:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80054c0:	4805      	ldr	r0, [pc, #20]	@ (80054d8 <vPortValidateInterruptPriority+0x5c>)
 80054c2:	f7fb fe29 	bl	8001118 <vAssertCalled>
    }
 80054c6:	bf00      	nop
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	e000e3f0 	.word	0xe000e3f0
 80054d4:	20000be8 	.word	0x20000be8
 80054d8:	080227b0 	.word	0x080227b0
 80054dc:	e000ed0c 	.word	0xe000ed0c
 80054e0:	20000bec 	.word	0x20000bec

080054e4 <pvPortMalloc>:
#endif /* configENABLE_HEAP_PROTECTOR */

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b088      	sub	sp, #32
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80054ec:	2300      	movs	r3, #0
 80054ee:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    /* The heap must be initialised before the first call to
     * pvPortMalloc(). */
    configASSERT( pxEnd );
 80054f0:	4b60      	ldr	r3, [pc, #384]	@ (8005674 <pvPortMalloc+0x190>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d103      	bne.n	8005500 <pvPortMalloc+0x1c>
 80054f8:	21da      	movs	r1, #218	@ 0xda
 80054fa:	485f      	ldr	r0, [pc, #380]	@ (8005678 <pvPortMalloc+0x194>)
 80054fc:	f7fb fe0c 	bl	8001118 <vAssertCalled>

    if( xWantedSize > 0 )
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d022      	beq.n	800554c <pvPortMalloc+0x68>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8005506:	2308      	movs	r3, #8
 8005508:	43db      	mvns	r3, r3
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	429a      	cmp	r2, r3
 800550e:	d81b      	bhi.n	8005548 <pvPortMalloc+0x64>
        {
            xWantedSize += xHeapStructSize;
 8005510:	2208      	movs	r2, #8
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4413      	add	r3, r2
 8005516:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f003 0307 	and.w	r3, r3, #7
 800551e:	2b00      	cmp	r3, #0
 8005520:	d014      	beq.n	800554c <pvPortMalloc+0x68>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f003 0307 	and.w	r3, r3, #7
 8005528:	f1c3 0308 	rsb	r3, r3, #8
 800552c:	613b      	str	r3, [r7, #16]

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	43db      	mvns	r3, r3
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	429a      	cmp	r2, r3
 8005536:	d804      	bhi.n	8005542 <pvPortMalloc+0x5e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	4413      	add	r3, r2
 800553e:	607b      	str	r3, [r7, #4]
 8005540:	e004      	b.n	800554c <pvPortMalloc+0x68>
                }
                else
                {
                    xWantedSize = 0;
 8005542:	2300      	movs	r3, #0
 8005544:	607b      	str	r3, [r7, #4]
 8005546:	e001      	b.n	800554c <pvPortMalloc+0x68>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8005548:	2300      	movs	r3, #0
 800554a:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 800554c:	f7fe f84c 	bl	80035e8 <vTaskSuspendAll>
    {
        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	db78      	blt.n	8005648 <pvPortMalloc+0x164>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d075      	beq.n	8005648 <pvPortMalloc+0x164>
 800555c:	4b47      	ldr	r3, [pc, #284]	@ (800567c <pvPortMalloc+0x198>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	429a      	cmp	r2, r3
 8005564:	d870      	bhi.n	8005648 <pvPortMalloc+0x164>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005566:	4b46      	ldr	r3, [pc, #280]	@ (8005680 <pvPortMalloc+0x19c>)
 8005568:	61bb      	str	r3, [r7, #24]
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 800556a:	4b45      	ldr	r3, [pc, #276]	@ (8005680 <pvPortMalloc+0x19c>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	61fb      	str	r3, [r7, #28]
                heapVALIDATE_BLOCK_POINTER( pxBlock );

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8005570:	e004      	b.n	800557c <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	61bb      	str	r3, [r7, #24]
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	429a      	cmp	r2, r3
 8005584:	d903      	bls.n	800558e <pvPortMalloc+0xaa>
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1f1      	bne.n	8005572 <pvPortMalloc+0x8e>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800558e:	4b39      	ldr	r3, [pc, #228]	@ (8005674 <pvPortMalloc+0x190>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	69fa      	ldr	r2, [r7, #28]
 8005594:	429a      	cmp	r2, r3
 8005596:	d057      	beq.n	8005648 <pvPortMalloc+0x164>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2208      	movs	r2, #8
 800559e:	4413      	add	r3, r2
 80055a0:	617b      	str	r3, [r7, #20]
                    heapVALIDATE_BLOCK_POINTER( pvReturn );

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d904      	bls.n	80055be <pvPortMalloc+0xda>
 80055b4:	f240 1129 	movw	r1, #297	@ 0x129
 80055b8:	482f      	ldr	r0, [pc, #188]	@ (8005678 <pvPortMalloc+0x194>)
 80055ba:	f7fb fdad 	bl	8001118 <vAssertCalled>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	1ad2      	subs	r2, r2, r3
 80055c6:	2308      	movs	r3, #8
 80055c8:	005b      	lsls	r3, r3, #1
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d91d      	bls.n	800560a <pvPortMalloc+0x126>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80055ce:	69fa      	ldr	r2, [r7, #28]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4413      	add	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d004      	beq.n	80055ea <pvPortMalloc+0x106>
 80055e0:	f44f 7199 	mov.w	r1, #306	@ 0x132
 80055e4:	4824      	ldr	r0, [pc, #144]	@ (8005678 <pvPortMalloc+0x194>)
 80055e6:	f7fb fd97 	bl	8001118 <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	1ad2      	subs	r2, r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800560a:	4b1c      	ldr	r3, [pc, #112]	@ (800567c <pvPortMalloc+0x198>)
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	4a19      	ldr	r2, [pc, #100]	@ (800567c <pvPortMalloc+0x198>)
 8005616:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005618:	4b18      	ldr	r3, [pc, #96]	@ (800567c <pvPortMalloc+0x198>)
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	4b19      	ldr	r3, [pc, #100]	@ (8005684 <pvPortMalloc+0x1a0>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	429a      	cmp	r2, r3
 8005622:	d203      	bcs.n	800562c <pvPortMalloc+0x148>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005624:	4b15      	ldr	r3, [pc, #84]	@ (800567c <pvPortMalloc+0x198>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a16      	ldr	r2, [pc, #88]	@ (8005684 <pvPortMalloc+0x1a0>)
 800562a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	2200      	movs	r2, #0
 800563c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800563e:	4b12      	ldr	r3, [pc, #72]	@ (8005688 <pvPortMalloc+0x1a4>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3301      	adds	r3, #1
 8005644:	4a10      	ldr	r2, [pc, #64]	@ (8005688 <pvPortMalloc+0x1a4>)
 8005646:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005648:	f7fd ffdc 	bl	8003604 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <pvPortMalloc+0x172>
        {
            vApplicationMallocFailedHook();
 8005652:	f7fb fd75 	bl	8001140 <vApplicationMallocFailedHook>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	2b00      	cmp	r3, #0
 800565e:	d004      	beq.n	800566a <pvPortMalloc+0x186>
 8005660:	f240 1173 	movw	r1, #371	@ 0x173
 8005664:	4804      	ldr	r0, [pc, #16]	@ (8005678 <pvPortMalloc+0x194>)
 8005666:	f7fb fd57 	bl	8001118 <vAssertCalled>
    return pvReturn;
 800566a:	697b      	ldr	r3, [r7, #20]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3720      	adds	r7, #32
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	20000bf8 	.word	0x20000bf8
 8005678:	080227ec 	.word	0x080227ec
 800567c:	20000bfc 	.word	0x20000bfc
 8005680:	20000bf0 	.word	0x20000bf0
 8005684:	20000c00 	.word	0x20000c00
 8005688:	20000c04 	.word	0x20000c04

0800568c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d03d      	beq.n	800571a <vPortFree+0x8e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800569e:	2308      	movs	r3, #8
 80056a0:	425b      	negs	r3, r3
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	4413      	add	r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	60bb      	str	r3, [r7, #8]

        heapVALIDATE_BLOCK_POINTER( pxLink );
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	db04      	blt.n	80056be <vPortFree+0x32>
 80056b4:	f240 1187 	movw	r1, #391	@ 0x187
 80056b8:	481a      	ldr	r0, [pc, #104]	@ (8005724 <vPortFree+0x98>)
 80056ba:	f7fb fd2d 	bl	8001118 <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d004      	beq.n	80056d0 <vPortFree+0x44>
 80056c6:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 80056ca:	4816      	ldr	r0, [pc, #88]	@ (8005724 <vPortFree+0x98>)
 80056cc:	f7fb fd24 	bl	8001118 <vAssertCalled>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	0fdb      	lsrs	r3, r3, #31
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d01c      	beq.n	800571a <vPortFree+0x8e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d118      	bne.n	800571a <vPortFree+0x8e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 80056f4:	f7fd ff78 	bl	80035e8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005728 <vPortFree+0x9c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4413      	add	r3, r2
 8005702:	4a09      	ldr	r2, [pc, #36]	@ (8005728 <vPortFree+0x9c>)
 8005704:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005706:	68b8      	ldr	r0, [r7, #8]
 8005708:	f000 f82a 	bl	8005760 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800570c:	4b07      	ldr	r3, [pc, #28]	@ (800572c <vPortFree+0xa0>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	3301      	adds	r3, #1
 8005712:	4a06      	ldr	r2, [pc, #24]	@ (800572c <vPortFree+0xa0>)
 8005714:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005716:	f7fd ff75 	bl	8003604 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800571a:	bf00      	nop
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	080227ec 	.word	0x080227ec
 8005728:	20000bfc 	.word	0x20000bfc
 800572c:	20000c08 	.word	0x20000c08

08005730 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8005730:	b480      	push	{r7}
 8005732:	af00      	add	r7, sp, #0
    return xFreeBytesRemaining;
 8005734:	4b03      	ldr	r3, [pc, #12]	@ (8005744 <xPortGetFreeHeapSize+0x14>)
 8005736:	681b      	ldr	r3, [r3, #0]
}
 8005738:	4618      	mov	r0, r3
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	20000bfc 	.word	0x20000bfc

08005748 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 8005748:	b480      	push	{r7}
 800574a:	af00      	add	r7, sp, #0
    return xMinimumEverFreeBytesRemaining;
 800574c:	4b03      	ldr	r3, [pc, #12]	@ (800575c <xPortGetMinimumEverFreeHeapSize+0x14>)
 800574e:	681b      	ldr	r3, [r3, #0]
}
 8005750:	4618      	mov	r0, r3
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	20000c00 	.word	0x20000c00

08005760 <prvInsertBlockIntoFreeList>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8005768:	4b28      	ldr	r3, [pc, #160]	@ (800580c <prvInsertBlockIntoFreeList+0xac>)
 800576a:	60fb      	str	r3, [r7, #12]
 800576c:	e002      	b.n	8005774 <prvInsertBlockIntoFreeList+0x14>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	60fb      	str	r3, [r7, #12]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	429a      	cmp	r2, r3
 800577c:	d8f7      	bhi.n	800576e <prvInsertBlockIntoFreeList+0xe>
        heapVALIDATE_BLOCK_POINTER( pxIterator );
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	4413      	add	r3, r2
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	429a      	cmp	r2, r3
 800578e:	d108      	bne.n	80057a2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	441a      	add	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	441a      	add	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d118      	bne.n	80057e8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	4b15      	ldr	r3, [pc, #84]	@ (8005810 <prvInsertBlockIntoFreeList+0xb0>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d00d      	beq.n	80057de <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	441a      	add	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	601a      	str	r2, [r3, #0]
 80057dc:	e008      	b.n	80057f0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80057de:	4b0c      	ldr	r3, [pc, #48]	@ (8005810 <prvInsertBlockIntoFreeList+0xb0>)
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	601a      	str	r2, [r3, #0]
 80057e6:	e003      	b.n	80057f0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gap, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d002      	beq.n	80057fe <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80057fe:	bf00      	nop
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	20000bf0 	.word	0x20000bf0
 8005810:	20000bf8 	.word	0x20000bf8

08005814 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions ) /* PRIVILEGED_FUNCTION */
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b08a      	sub	sp, #40	@ 0x28
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxFirstFreeBlockInRegion = NULL;
 800581c:	2300      	movs	r3, #0
 800581e:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxPreviousFreeBlock;
    portPOINTER_SIZE_TYPE xAlignedHeap;
    size_t xTotalRegionSize, xTotalHeapSize = 0;
 8005820:	2300      	movs	r3, #0
 8005822:	623b      	str	r3, [r7, #32]
    BaseType_t xDefinedRegions = 0;
 8005824:	2300      	movs	r3, #0
 8005826:	61fb      	str	r3, [r7, #28]
    portPOINTER_SIZE_TYPE xAddress;
    const HeapRegion_t * pxHeapRegion;

    /* Can only call once! */
    configASSERT( pxEnd == NULL );
 8005828:	4b4b      	ldr	r3, [pc, #300]	@ (8005958 <vPortDefineHeapRegions+0x144>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d004      	beq.n	800583a <vPortDefineHeapRegions+0x26>
 8005830:	f240 2121 	movw	r1, #545	@ 0x221
 8005834:	4849      	ldr	r0, [pc, #292]	@ (800595c <vPortDefineHeapRegions+0x148>)
 8005836:	f7fb fc6f 	bl	8001118 <vAssertCalled>
    {
        vApplicationGetRandomHeapCanary( &( xHeapCanary ) );
    }
    #endif

    pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	00db      	lsls	r3, r3, #3
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	4413      	add	r3, r2
 8005842:	617b      	str	r3, [r7, #20]

    while( pxHeapRegion->xSizeInBytes > 0 )
 8005844:	e071      	b.n	800592a <vPortDefineHeapRegions+0x116>
    {
        xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Ensure the heap region starts on a correctly aligned boundary. */
        xAddress = ( portPOINTER_SIZE_TYPE ) pxHeapRegion->pucStartAddress;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	61bb      	str	r3, [r7, #24]

        if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	f003 0307 	and.w	r3, r3, #7
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00e      	beq.n	800587a <vPortDefineHeapRegions+0x66>
        {
            xAddress += ( portBYTE_ALIGNMENT - 1 );
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	3307      	adds	r3, #7
 8005860:	61bb      	str	r3, [r7, #24]
            xAddress &= ~( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK;
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	f023 0307 	bic.w	r3, r3, #7
 8005868:	61bb      	str	r3, [r7, #24]

            /* Adjust the size for the bytes lost to alignment. */
            xTotalRegionSize -= ( size_t ) ( xAddress - ( portPOINTER_SIZE_TYPE ) pxHeapRegion->pucStartAddress );
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	461a      	mov	r2, r3
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005876:	4413      	add	r3, r2
 8005878:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        xAlignedHeap = xAddress;
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	60fb      	str	r3, [r7, #12]

        /* Set xStart if it has not already been set. */
        if( xDefinedRegions == 0 )
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d106      	bne.n	8005892 <vPortDefineHeapRegions+0x7e>
        {
            /* xStart is used to hold a pointer to the first item in the list of
             *  free blocks.  The void cast is used to prevent compiler warnings. */
            xStart.pxNextFreeBlock = ( BlockLink_t * ) heapPROTECT_BLOCK_POINTER( xAlignedHeap );
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4a36      	ldr	r2, [pc, #216]	@ (8005960 <vPortDefineHeapRegions+0x14c>)
 8005888:	6013      	str	r3, [r2, #0]
            xStart.xBlockSize = ( size_t ) 0;
 800588a:	4b35      	ldr	r3, [pc, #212]	@ (8005960 <vPortDefineHeapRegions+0x14c>)
 800588c:	2200      	movs	r2, #0
 800588e:	605a      	str	r2, [r3, #4]
 8005890:	e013      	b.n	80058ba <vPortDefineHeapRegions+0xa6>
        }
        else
        {
            /* Should only get here if one region has already been added to the
             * heap. */
            configASSERT( pxEnd != heapPROTECT_BLOCK_POINTER( NULL ) );
 8005892:	4b31      	ldr	r3, [pc, #196]	@ (8005958 <vPortDefineHeapRegions+0x144>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d104      	bne.n	80058a4 <vPortDefineHeapRegions+0x90>
 800589a:	f240 2149 	movw	r1, #585	@ 0x249
 800589e:	482f      	ldr	r0, [pc, #188]	@ (800595c <vPortDefineHeapRegions+0x148>)
 80058a0:	f7fb fc3a 	bl	8001118 <vAssertCalled>

            /* Check blocks are passed in with increasing start addresses. */
            configASSERT( ( size_t ) xAddress > ( size_t ) pxEnd );
 80058a4:	4b2c      	ldr	r3, [pc, #176]	@ (8005958 <vPortDefineHeapRegions+0x144>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	461a      	mov	r2, r3
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d804      	bhi.n	80058ba <vPortDefineHeapRegions+0xa6>
 80058b0:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 80058b4:	4829      	ldr	r0, [pc, #164]	@ (800595c <vPortDefineHeapRegions+0x148>)
 80058b6:	f7fb fc2f 	bl	8001118 <vAssertCalled>
        }
        #endif /* configENABLE_HEAP_PROTECTOR */

        /* Remember the location of the end marker in the previous region, if
         * any. */
        pxPreviousFreeBlock = pxEnd;
 80058ba:	4b27      	ldr	r3, [pc, #156]	@ (8005958 <vPortDefineHeapRegions+0x144>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	60bb      	str	r3, [r7, #8]

        /* pxEnd is used to mark the end of the list of free blocks and is
         * inserted at the end of the region space. */
        xAddress = xAlignedHeap + ( portPOINTER_SIZE_TYPE ) xTotalRegionSize;
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c4:	4413      	add	r3, r2
 80058c6:	61bb      	str	r3, [r7, #24]
        xAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 80058c8:	2208      	movs	r2, #8
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	1a9b      	subs	r3, r3, r2
 80058ce:	61bb      	str	r3, [r7, #24]
        xAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	f023 0307 	bic.w	r3, r3, #7
 80058d6:	61bb      	str	r3, [r7, #24]
        pxEnd = ( BlockLink_t * ) xAddress;
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	4a1f      	ldr	r2, [pc, #124]	@ (8005958 <vPortDefineHeapRegions+0x144>)
 80058dc:	6013      	str	r3, [r2, #0]
        pxEnd->xBlockSize = 0;
 80058de:	4b1e      	ldr	r3, [pc, #120]	@ (8005958 <vPortDefineHeapRegions+0x144>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2200      	movs	r2, #0
 80058e4:	605a      	str	r2, [r3, #4]
        pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80058e6:	4b1c      	ldr	r3, [pc, #112]	@ (8005958 <vPortDefineHeapRegions+0x144>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2200      	movs	r2, #0
 80058ec:	601a      	str	r2, [r3, #0]

        /* To start with there is a single free block in this region that is
         * sized to take up the entire heap region minus the space taken by the
         * free block structure. */
        pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	613b      	str	r3, [r7, #16]
        pxFirstFreeBlockInRegion->xBlockSize = ( size_t ) ( xAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlockInRegion );
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	1ad2      	subs	r2, r2, r3
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	605a      	str	r2, [r3, #4]
        pxFirstFreeBlockInRegion->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80058fc:	4b16      	ldr	r3, [pc, #88]	@ (8005958 <vPortDefineHeapRegions+0x144>)
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	601a      	str	r2, [r3, #0]

        /* If this is not the first region that makes up the entire heap space
         * then link the previous region to this region. */
        if( pxPreviousFreeBlock != NULL )
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d002      	beq.n	8005910 <vPortDefineHeapRegions+0xfc>
        {
            pxPreviousFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxFirstFreeBlockInRegion );
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	601a      	str	r2, [r3, #0]
        }

        xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	6a3a      	ldr	r2, [r7, #32]
 8005916:	4413      	add	r3, r2
 8005918:	623b      	str	r3, [r7, #32]
            }
        }
        #endif

        /* Move onto the next HeapRegion_t structure. */
        xDefinedRegions++;
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	3301      	adds	r3, #1
 800591e:	61fb      	str	r3, [r7, #28]
        pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	4413      	add	r3, r2
 8005928:	617b      	str	r3, [r7, #20]
    while( pxHeapRegion->xSizeInBytes > 0 )
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d189      	bne.n	8005846 <vPortDefineHeapRegions+0x32>
    }

    xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 8005932:	4a0c      	ldr	r2, [pc, #48]	@ (8005964 <vPortDefineHeapRegions+0x150>)
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = xTotalHeapSize;
 8005938:	4a0b      	ldr	r2, [pc, #44]	@ (8005968 <vPortDefineHeapRegions+0x154>)
 800593a:	6a3b      	ldr	r3, [r7, #32]
 800593c:	6013      	str	r3, [r2, #0]

    /* Check something was actually defined before it is accessed. */
    configASSERT( xTotalHeapSize );
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d104      	bne.n	800594e <vPortDefineHeapRegions+0x13a>
 8005944:	f240 2189 	movw	r1, #649	@ 0x289
 8005948:	4804      	ldr	r0, [pc, #16]	@ (800595c <vPortDefineHeapRegions+0x148>)
 800594a:	f7fb fbe5 	bl	8001118 <vAssertCalled>
}
 800594e:	bf00      	nop
 8005950:	3728      	adds	r7, #40	@ 0x28
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	20000bf8 	.word	0x20000bf8
 800595c:	080227ec 	.word	0x080227ec
 8005960:	20000bf0 	.word	0x20000bf0
 8005964:	20000c00 	.word	0x20000c00
 8005968:	20000bfc 	.word	0x20000bfc

0800596c <eARPProcessPacket>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be processed.
 *
 * @return An enum which says whether to return the frame or to release it.
 */
    eFrameProcessingResult_t eARPProcessPacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800596c:	b580      	push	{r7, lr}
 800596e:	b090      	sub	sp, #64	@ 0x40
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ARPPacket_t * pxARPFrame = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005978:	63bb      	str	r3, [r7, #56]	@ 0x38
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 800597a:	2300      	movs	r3, #0
 800597c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        uint32_t ulTargetProtocolAddress, ulSenderProtocolAddress;

        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource;
        void * pvCopyDest;
        NetworkEndPoint_t * pxTargetEndPoint = pxNetworkBuffer->pxEndPoint;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005984:	637b      	str	r3, [r7, #52]	@ 0x34
         * period. */
        static UBaseType_t uxARPClashCounter = 0U;
        /* The time at which the last ARP clash was sent. */
        static TimeOut_t xARPClashTimeOut;

        pxARPHeader = &( pxARPFrame->xARPHeader );
 8005986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005988:	330e      	adds	r3, #14
 800598a:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Only Ethernet hardware type is supported.
         * Only IPv4 address can be present in the ARP packet.
         * The hardware length (the MAC address) must be 6 bytes. And,
         * The Protocol address length must be 4 bytes as it is IPv4. */
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 800598c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598e:	881b      	ldrh	r3, [r3, #0]
 8005990:	b29b      	uxth	r3, r3
 8005992:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005996:	f040 81bb 	bne.w	8005d10 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 800599a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599c:	885b      	ldrh	r3, [r3, #2]
 800599e:	b29b      	uxth	r3, r3
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 80059a0:	2b08      	cmp	r3, #8
 80059a2:	f040 81b5 	bne.w	8005d10 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 80059a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a8:	791b      	ldrb	r3, [r3, #4]
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 80059aa:	2b06      	cmp	r3, #6
 80059ac:	f040 81b0 	bne.w	8005d10 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->ucProtocolAddressLength == ipIP_ADDRESS_LENGTH_BYTES ) )
 80059b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b2:	795b      	ldrb	r3, [r3, #5]
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 80059b4:	2b04      	cmp	r3, #4
 80059b6:	f040 81ab 	bne.w	8005d10 <eARPProcessPacket+0x3a4>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxARPHeader->ucSenderProtocolAddress;
 80059ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059bc:	330e      	adds	r3, #14
 80059be:	62fb      	str	r3, [r7, #44]	@ 0x2c
            pvCopyDest = &ulSenderProtocolAddress;
 80059c0:	f107 0320 	add.w	r3, r7, #32
 80059c4:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ulSenderProtocolAddress ) );
 80059c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	461a      	mov	r2, r3
 80059cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ce:	601a      	str	r2, [r3, #0]
            /* The field ulTargetProtocolAddress is well-aligned, a 32-bits copy. */
            ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 80059d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	627b      	str	r3, [r7, #36]	@ 0x24

            if( uxARPClashCounter != 0U )
 80059d6:	4b9c      	ldr	r3, [pc, #624]	@ (8005c48 <eARPProcessPacket+0x2dc>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d009      	beq.n	80059f2 <eARPProcessPacket+0x86>
            {
                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xARPClashTimeOut, &uxARPClashTimeoutPeriod ) == pdTRUE )
 80059de:	499b      	ldr	r1, [pc, #620]	@ (8005c4c <eARPProcessPacket+0x2e0>)
 80059e0:	489b      	ldr	r0, [pc, #620]	@ (8005c50 <eARPProcessPacket+0x2e4>)
 80059e2:	f7fe faf5 	bl	8003fd0 <xTaskCheckForTimeOut>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d102      	bne.n	80059f2 <eARPProcessPacket+0x86>
                {
                    /* We have waited long enough, reset the counter. */
                    uxARPClashCounter = 0;
 80059ec:	4b96      	ldr	r3, [pc, #600]	@ (8005c48 <eARPProcessPacket+0x2dc>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]
                }
            }

            /* Check whether the lowest bit of the highest byte is 1 to check for
             * multicast address or even a broadcast address (FF:FF:FF:FF:FF:FF). */
            if( ( pxARPHeader->xSenderHardwareAddress.ucBytes[ 0 ] & 0x01U ) == 0x01U )
 80059f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f4:	7a1b      	ldrb	r3, [r3, #8]
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f040 8188 	bne.w	8005d10 <eARPProcessPacket+0x3a4>
                /* Senders address is a multicast OR broadcast address which is not
                 * allowed for an ARP packet. Drop the packet. See RFC 1812 section
                 * 3.3.2. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	061a      	lsls	r2, r3, #24
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	021b      	lsls	r3, r3, #8
 8005a08:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	6a3b      	ldr	r3, [r7, #32]
 8005a10:	0a1b      	lsrs	r3, r3, #8
 8005a12:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005a16:	431a      	orrs	r2, r3
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	0e1b      	lsrs	r3, r3, #24
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8005a22:	d311      	bcc.n	8005a48 <eARPProcessPacket+0xdc>
                     ( ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) < ipLAST_LOOPBACK_IPv4 ) )
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	061a      	lsls	r2, r3, #24
 8005a28:	6a3b      	ldr	r3, [r7, #32]
 8005a2a:	021b      	lsls	r3, r3, #8
 8005a2c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005a30:	431a      	orrs	r2, r3
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	0a1b      	lsrs	r3, r3, #8
 8005a36:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	0e1b      	lsrs	r3, r3, #24
 8005a40:	4313      	orrs	r3, r2
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f280 8164 	bge.w	8005d10 <eARPProcessPacket+0x3a4>
                /* The local loopback addresses must never appear outside a host. See RFC 1122
                 * section 3.2.1.3. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            /* Check whether there is a clash with another device for this IP address. */
            else if( ( pxTargetEndPoint != NULL ) && ( ulSenderProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) )
 8005a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d021      	beq.n	8005a92 <eARPProcessPacket+0x126>
 8005a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	6a3b      	ldr	r3, [r7, #32]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d11c      	bne.n	8005a92 <eARPProcessPacket+0x126>
            {
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 8005a58:	4b7b      	ldr	r3, [pc, #492]	@ (8005c48 <eARPProcessPacket+0x2dc>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f040 8157 	bne.w	8005d10 <eARPProcessPacket+0x3a4>
                {
                    /* Increment the counter. */
                    uxARPClashCounter++;
 8005a62:	4b79      	ldr	r3, [pc, #484]	@ (8005c48 <eARPProcessPacket+0x2dc>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	3301      	adds	r3, #1
 8005a68:	4a77      	ldr	r2, [pc, #476]	@ (8005c48 <eARPProcessPacket+0x2dc>)
 8005a6a:	6013      	str	r3, [r2, #0]

                    /* Send out a defensive ARP request. */
                    FreeRTOS_OutputARPRequest_Multi( pxTargetEndPoint, pxTargetEndPoint->ipv4_settings.ulIPAddress );
 8005a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4619      	mov	r1, r3
 8005a72:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005a74:	f000 fe32 	bl	80066dc <FreeRTOS_OutputARPRequest_Multi>

                    /* Since an ARP Request for this IP was just sent, do not send a gratuitous
                     * ARP for arpGRATUITOUS_ARP_PERIOD. */
                    xLastGratuitousARPTime = xTaskGetTickCount();
 8005a78:	f7fd fec8 	bl	800380c <xTaskGetTickCount>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	4a75      	ldr	r2, [pc, #468]	@ (8005c54 <eARPProcessPacket+0x2e8>)
 8005a80:	6013      	str	r3, [r2, #0]

                    /* Note the time at which this request was sent. */
                    vTaskSetTimeOutState( &xARPClashTimeOut );
 8005a82:	4873      	ldr	r0, [pc, #460]	@ (8005c50 <eARPProcessPacket+0x2e4>)
 8005a84:	f7fe fa6c 	bl	8003f60 <vTaskSetTimeOutState>

                    /* Reset the time-out period to the given value. */
                    uxARPClashTimeoutPeriod = pdMS_TO_TICKS( arpIP_CLASH_RESET_TIMEOUT_MS );
 8005a88:	4b70      	ldr	r3, [pc, #448]	@ (8005c4c <eARPProcessPacket+0x2e0>)
 8005a8a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005a8e:	601a      	str	r2, [r3, #0]
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 8005a90:	e13e      	b.n	8005d10 <eARPProcessPacket+0x3a4>
            {
                traceARP_PACKET_RECEIVED();

                /* Some extra logging while still testing. */
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( pxARPHeader->usOperation == ( uint16_t ) ipARP_REPLY )
 8005a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a94:	88db      	ldrh	r3, [r3, #6]
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a9c:	d14a      	bne.n	8005b34 <eARPProcessPacket+0x1c8>
                    {
                        FreeRTOS_debug_printf( ( "ipARP_REPLY from %xip to %xip end-point %xip\n",
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	061a      	lsls	r2, r3, #24
 8005aa2:	6a3b      	ldr	r3, [r7, #32]
 8005aa4:	021b      	lsls	r3, r3, #8
 8005aa6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	6a3b      	ldr	r3, [r7, #32]
 8005aae:	0a1b      	lsrs	r3, r3, #8
 8005ab0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	0e1b      	lsrs	r3, r3, #24
 8005aba:	ea42 0103 	orr.w	r1, r2, r3
 8005abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac0:	061a      	lsls	r2, r3, #24
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac4:	021b      	lsls	r3, r3, #8
 8005ac6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005aca:	431a      	orrs	r2, r3
 8005acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ace:	0a1b      	lsrs	r3, r3, #8
 8005ad0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005ad4:	431a      	orrs	r2, r3
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad8:	0e1b      	lsrs	r3, r3, #24
 8005ada:	ea42 0003 	orr.w	r0, r2, r3
 8005ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d003      	beq.n	8005aec <eARPProcessPacket+0x180>
 8005ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	061a      	lsls	r2, r3, #24
 8005aea:	e000      	b.n	8005aee <eARPProcessPacket+0x182>
 8005aec:	2200      	movs	r2, #0
 8005aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d005      	beq.n	8005b00 <eARPProcessPacket+0x194>
 8005af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	021b      	lsls	r3, r3, #8
 8005afa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005afe:	e000      	b.n	8005b02 <eARPProcessPacket+0x196>
 8005b00:	2300      	movs	r3, #0
 8005b02:	431a      	orrs	r2, r3
 8005b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d005      	beq.n	8005b16 <eARPProcessPacket+0x1aa>
 8005b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	0a1b      	lsrs	r3, r3, #8
 8005b10:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005b14:	e000      	b.n	8005b18 <eARPProcessPacket+0x1ac>
 8005b16:	2300      	movs	r3, #0
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <eARPProcessPacket+0x1bc>
 8005b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	0e1b      	lsrs	r3, r3, #24
 8005b26:	e000      	b.n	8005b2a <eARPProcessPacket+0x1be>
 8005b28:	2300      	movs	r3, #0
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	484a      	ldr	r0, [pc, #296]	@ (8005c58 <eARPProcessPacket+0x2ec>)
 8005b30:	f01a fcfc 	bl	802052c <lUDPLoggingPrintf>
                                                 ( unsigned ) FreeRTOS_ntohl( ( pxTargetEndPoint != NULL ) ? pxTargetEndPoint->ipv4_settings.ulIPAddress : 0U ) ) );
                    }
                #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( ( pxARPHeader->usOperation == ( uint16_t ) ipARP_REQUEST ) &&
 8005b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b36:	88db      	ldrh	r3, [r3, #6]
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b3e:	d151      	bne.n	8005be4 <eARPProcessPacket+0x278>
                        ( ulSenderProtocolAddress != ulTargetProtocolAddress ) &&
 8005b40:	6a3b      	ldr	r3, [r7, #32]
                    if( ( pxARPHeader->usOperation == ( uint16_t ) ipARP_REQUEST ) &&
 8005b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d04d      	beq.n	8005be4 <eARPProcessPacket+0x278>
                        ( ulSenderProtocolAddress != ulTargetProtocolAddress ) &&
 8005b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d04a      	beq.n	8005be4 <eARPProcessPacket+0x278>
                        ( pxTargetEndPoint != NULL ) )
                    {
                        FreeRTOS_debug_printf( ( "ipARP_REQUEST from %xip to %xip end-point %xip\n",
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	061a      	lsls	r2, r3, #24
 8005b52:	6a3b      	ldr	r3, [r7, #32]
 8005b54:	021b      	lsls	r3, r3, #8
 8005b56:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	0a1b      	lsrs	r3, r3, #8
 8005b60:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005b64:	431a      	orrs	r2, r3
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	0e1b      	lsrs	r3, r3, #24
 8005b6a:	ea42 0103 	orr.w	r1, r2, r3
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b70:	061a      	lsls	r2, r3, #24
 8005b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b74:	021b      	lsls	r3, r3, #8
 8005b76:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7e:	0a1b      	lsrs	r3, r3, #8
 8005b80:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005b84:	431a      	orrs	r2, r3
 8005b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b88:	0e1b      	lsrs	r3, r3, #24
 8005b8a:	ea42 0003 	orr.w	r0, r2, r3
 8005b8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d003      	beq.n	8005b9c <eARPProcessPacket+0x230>
 8005b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	061a      	lsls	r2, r3, #24
 8005b9a:	e000      	b.n	8005b9e <eARPProcessPacket+0x232>
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d005      	beq.n	8005bb0 <eARPProcessPacket+0x244>
 8005ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	021b      	lsls	r3, r3, #8
 8005baa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005bae:	e000      	b.n	8005bb2 <eARPProcessPacket+0x246>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d005      	beq.n	8005bc6 <eARPProcessPacket+0x25a>
 8005bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	0a1b      	lsrs	r3, r3, #8
 8005bc0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005bc4:	e000      	b.n	8005bc8 <eARPProcessPacket+0x25c>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <eARPProcessPacket+0x26c>
 8005bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	0e1b      	lsrs	r3, r3, #24
 8005bd6:	e000      	b.n	8005bda <eARPProcessPacket+0x26e>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	4602      	mov	r2, r0
 8005bde:	481f      	ldr	r0, [pc, #124]	@ (8005c5c <eARPProcessPacket+0x2f0>)
 8005be0:	f01a fca4 	bl	802052c <lUDPLoggingPrintf>
                /* ulTargetProtocolAddress won't be used unless logging is enabled. */
                ( void ) ulTargetProtocolAddress;

                /* Don't do anything if the local IP address is zero because
                 * that means a DHCP request has not completed. */
                if( ( pxTargetEndPoint != NULL ) && ( pxTargetEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) )
 8005be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f000 8092 	beq.w	8005d10 <eARPProcessPacket+0x3a4>
 8005bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bee:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8005bf2:	f003 0310 	and.w	r3, r3, #16
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 8089 	beq.w	8005d10 <eARPProcessPacket+0x3a4>
                {
                    switch( pxARPHeader->usOperation )
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c00:	88db      	ldrh	r3, [r3, #6]
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c08:	d003      	beq.n	8005c12 <eARPProcessPacket+0x2a6>
 8005c0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c0e:	d077      	beq.n	8005d00 <eARPProcessPacket+0x394>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
                            break;

                        default:
                            /* Invalid. */
                            break;
 8005c10:	e07e      	b.n	8005d10 <eARPProcessPacket+0x3a4>
                            if( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress )
 8005c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d121      	bne.n	8005c60 <eARPProcessPacket+0x2f4>
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 8005c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c1e:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
                                            pxARPHeader->xSenderHardwareAddress.ucBytes,
 8005c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c24:	3308      	adds	r3, #8
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 8005c26:	2206      	movs	r2, #6
 8005c28:	4619      	mov	r1, r3
 8005c2a:	f01b fe30 	bl	802188e <memcmp>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d06c      	beq.n	8005d0e <eARPProcessPacket+0x3a2>
                                    vARPProcessPacketRequest( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 8005c34:	6a3b      	ldr	r3, [r7, #32]
 8005c36:	461a      	mov	r2, r3
 8005c38:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005c3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005c3c:	f000 f872 	bl	8005d24 <vARPProcessPacketRequest>
                                    eReturn = eReturnEthernetFrame;
 8005c40:	2302      	movs	r3, #2
 8005c42:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                            break;
 8005c46:	e062      	b.n	8005d0e <eARPProcessPacket+0x3a2>
 8005c48:	20000c70 	.word	0x20000c70
 8005c4c:	20000010 	.word	0x20000010
 8005c50:	20000c74 	.word	0x20000c74
 8005c54:	20000c6c 	.word	0x20000c6c
 8005c58:	08022824 	.word	0x08022824
 8005c5c:	08022854 	.word	0x08022854
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 8005c60:	6a3b      	ldr	r3, [r7, #32]
 8005c62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d152      	bne.n	8005d0e <eARPProcessPacket+0x3a2>
                                     ( ( ulSenderProtocolAddress & pxTargetEndPoint->ipv4_settings.ulNetMask ) == ( pxTargetEndPoint->ipv4_settings.ulNetMask & pxTargetEndPoint->ipv4_settings.ulIPAddress ) ) )
 8005c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	405a      	eors	r2, r3
 8005c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	4013      	ands	r3, r2
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d149      	bne.n	8005d0e <eARPProcessPacket+0x3a2>
                                const MACAddress_t xGARPTargetAddress = { { 0, 0, 0, 0, 0, 0 } };
 8005c7a:	4a28      	ldr	r2, [pc, #160]	@ (8005d1c <eARPProcessPacket+0x3b0>)
 8005c7c:	f107 0318 	add.w	r3, r7, #24
 8005c80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c84:	6018      	str	r0, [r3, #0]
 8005c86:	3304      	adds	r3, #4
 8005c88:	8019      	strh	r1, [r3, #0]
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 8005c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c8c:	3312      	adds	r3, #18
 8005c8e:	2206      	movs	r2, #6
 8005c90:	4923      	ldr	r1, [pc, #140]	@ (8005d20 <eARPProcessPacket+0x3b4>)
 8005c92:	4618      	mov	r0, r3
 8005c94:	f01b fdfb 	bl	802188e <memcmp>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00a      	beq.n	8005cb4 <eARPProcessPacket+0x348>
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca0:	3312      	adds	r3, #18
 8005ca2:	f107 0118 	add.w	r1, r7, #24
 8005ca6:	2206      	movs	r2, #6
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f01b fdf0 	bl	802188e <memcmp>
 8005cae:	4603      	mov	r3, r0
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d12c      	bne.n	8005d0e <eARPProcessPacket+0x3a2>
                                    ( memcmp( pxTargetEndPoint->xMACAddress.ucBytes, pxARPHeader->xSenderHardwareAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) != 0 ) )
 8005cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cb6:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
 8005cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cbc:	3308      	adds	r3, #8
 8005cbe:	2206      	movs	r2, #6
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	f01b fde4 	bl	802188e <memcmp>
 8005cc6:	4603      	mov	r3, r0
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d020      	beq.n	8005d0e <eARPProcessPacket+0x3a2>
                                    pxCachedEndPoint = NULL;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	60fb      	str	r3, [r7, #12]
                                    if( eARPGetCacheEntry( &( ulSenderProtocolAddress ), &( xHardwareAddress ), &( pxCachedEndPoint ) ) == eARPCacheHit )
 8005cd0:	f107 020c 	add.w	r2, r7, #12
 8005cd4:	f107 0110 	add.w	r1, r7, #16
 8005cd8:	f107 0320 	add.w	r3, r7, #32
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f000 fb11 	bl	8006304 <eARPGetCacheEntry>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d112      	bne.n	8005d0e <eARPProcessPacket+0x3a2>
                                        if( pxCachedEndPoint == pxTargetEndPoint )
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d10e      	bne.n	8005d0e <eARPProcessPacket+0x3a2>
                                            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf2:	3308      	adds	r3, #8
 8005cf4:	6a39      	ldr	r1, [r7, #32]
 8005cf6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 f9ef 	bl	80060dc <vARPRefreshCacheEntry>
                            break;
 8005cfe:	e006      	b.n	8005d0e <eARPProcessPacket+0x3a2>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 8005d00:	6a3b      	ldr	r3, [r7, #32]
 8005d02:	461a      	mov	r2, r3
 8005d04:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005d06:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005d08:	f000 f84a 	bl	8005da0 <vARPProcessPacketReply>
                            break;
 8005d0c:	e000      	b.n	8005d10 <eARPProcessPacket+0x3a4>
                            break;
 8005d0e:	bf00      	nop
        else
        {
            iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
        }

        return eReturn;
 8005d10:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
    }
 8005d14:	4618      	mov	r0, r3
 8005d16:	3740      	adds	r7, #64	@ 0x40
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	08022884 	.word	0x08022884
 8005d20:	08025bc4 	.word	0x08025bc4

08005d24 <vARPProcessPacketRequest>:
 *
 */
    static void vARPProcessPacketRequest( ARPPacket_t * pxARPFrame,
                                          NetworkEndPoint_t * pxTargetEndPoint,
                                          uint32_t ulSenderProtocolAddress )
    {
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b088      	sub	sp, #32
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
        ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	330e      	adds	r3, #14
 8005d34:	61fb      	str	r3, [r7, #28]
        iptraceSENDING_ARP_REPLY( ulSenderProtocolAddress );

        /* The request is for the address of this node.  Add the
         * entry into the ARP cache, or refresh the entry if it
         * already exists. */
        vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	3308      	adds	r3, #8
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	6879      	ldr	r1, [r7, #4]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 f9cc 	bl	80060dc <vARPRefreshCacheEntry>

        /* Generate a reply payload in the same buffer. */
        pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	2200      	movs	r2, #0
 8005d48:	719a      	strb	r2, [r3, #6]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f042 0202 	orr.w	r2, r2, #2
 8005d50:	71da      	strb	r2, [r3, #7]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxARPHeader->xSenderHardwareAddress.ucBytes;
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	3308      	adds	r3, #8
 8005d56:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xTargetHardwareAddress.ucBytes;
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	3312      	adds	r3, #18
 8005d5c:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 8005d5e:	2206      	movs	r2, #6
 8005d60:	69b9      	ldr	r1, [r7, #24]
 8005d62:	6978      	ldr	r0, [r7, #20]
 8005d64:	f01a fdfe 	bl	8020964 <memcpy>
        pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	619a      	str	r2, [r3, #24]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxTargetEndPoint->xMACAddress.ucBytes;
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	33e8      	adds	r3, #232	@ 0xe8
 8005d72:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xSenderHardwareAddress.ucBytes;
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	3308      	adds	r3, #8
 8005d78:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 8005d7a:	2206      	movs	r2, #6
 8005d7c:	69b9      	ldr	r1, [r7, #24]
 8005d7e:	6978      	ldr	r0, [r7, #20]
 8005d80:	f01a fdf0 	bl	8020964 <memcpy>
        pvCopySource = &( pxTargetEndPoint->ipv4_settings.ulIPAddress );
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->ucSenderProtocolAddress;
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	330e      	adds	r3, #14
 8005d8c:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPHeader->ucSenderProtocolAddress ) );
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	461a      	mov	r2, r3
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	601a      	str	r2, [r3, #0]
    }
 8005d98:	bf00      	nop
 8005d9a:	3720      	adds	r7, #32
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <vARPProcessPacketReply>:
 * @param[in] ulSenderProtocolAddress The IPv4 address involved.
 */
    static void vARPProcessPacketReply( const ARPPacket_t * pxARPFrame,
                                        NetworkEndPoint_t * pxTargetEndPoint,
                                        uint32_t ulSenderProtocolAddress )
    {
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b08c      	sub	sp, #48	@ 0x30
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
        const ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	330e      	adds	r3, #14
 8005db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 8005db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* If the packet is meant for this device or if the entry already exists. */
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d005      	beq.n	8005dce <vARPProcessPacketReply+0x2e>
            ( xIsIPInARPCache( ulSenderProtocolAddress ) == pdTRUE ) )
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f844 	bl	8005e50 <xIsIPInARPCache>
 8005dc8:	4603      	mov	r3, r0
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d106      	bne.n	8005ddc <vARPProcessPacketReply+0x3c>
        {
            iptracePROCESSING_RECEIVED_ARP_REPLY( ulTargetProtocolAddress );
            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 8005dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd0:	3308      	adds	r3, #8
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	6879      	ldr	r1, [r7, #4]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 f980 	bl	80060dc <vARPRefreshCacheEntry>
        }

        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 8005ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8005e4c <vARPProcessPacketReply+0xac>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d02e      	beq.n	8005e42 <vARPProcessPacketReply+0xa2>
            ( uxIPHeaderSizePacket( pxARPWaitingNetworkBuffer ) == ipSIZE_OF_IPv4_HEADER ) )
 8005de4:	4b19      	ldr	r3, [pc, #100]	@ (8005e4c <vARPProcessPacketReply+0xac>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f003 f8a5 	bl	8008f38 <uxIPHeaderSizePacket>
 8005dee:	4603      	mov	r3, r0
        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 8005df0:	2b14      	cmp	r3, #20
 8005df2:	d126      	bne.n	8005e42 <vARPProcessPacketReply+0xa2>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPPacket_t * pxARPWaitingIPPacket = ( ( IPPacket_t * ) pxARPWaitingNetworkBuffer->pucEthernetBuffer );
 8005df4:	4b15      	ldr	r3, [pc, #84]	@ (8005e4c <vARPProcessPacketReply+0xac>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfa:	627b      	str	r3, [r7, #36]	@ 0x24
            const IPHeader_t * pxARPWaitingIPHeader = &( pxARPWaitingIPPacket->xIPHeader );
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfe:	330e      	adds	r3, #14
 8005e00:	623b      	str	r3, [r7, #32]

            if( ulSenderProtocolAddress == pxARPWaitingIPHeader->ulSourceIPAddress )
 8005e02:	6a3b      	ldr	r3, [r7, #32]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d11a      	bne.n	8005e42 <vARPProcessPacketReply+0xa2>
            {
                IPStackEvent_t xEventMessage;
                const TickType_t xDontBlock = ( TickType_t ) 0;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	61fb      	str	r3, [r7, #28]

                xEventMessage.eEventType = eNetworkRxEvent;
 8005e10:	2301      	movs	r3, #1
 8005e12:	753b      	strb	r3, [r7, #20]
                xEventMessage.pvData = ( void * ) pxARPWaitingNetworkBuffer;
 8005e14:	4b0d      	ldr	r3, [pc, #52]	@ (8005e4c <vARPProcessPacketReply+0xac>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	61bb      	str	r3, [r7, #24]

                if( xSendEventStructToIPTask( &xEventMessage, xDontBlock ) != pdPASS )
 8005e1a:	f107 0314 	add.w	r3, r7, #20
 8005e1e:	69f9      	ldr	r1, [r7, #28]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f002 fcd5 	bl	80087d0 <xSendEventStructToIPTask>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d004      	beq.n	8005e36 <vARPProcessPacketReply+0x96>
                {
                    /* Failed to send the message, so release the network buffer. */
                    vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 8005e2c:	4b07      	ldr	r3, [pc, #28]	@ (8005e4c <vARPProcessPacketReply+0xac>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4618      	mov	r0, r3
 8005e32:	f010 fa91 	bl	8016358 <vReleaseNetworkBufferAndDescriptor>
                }

                /* Clear the buffer. */
                pxARPWaitingNetworkBuffer = NULL;
 8005e36:	4b05      	ldr	r3, [pc, #20]	@ (8005e4c <vARPProcessPacketReply+0xac>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	601a      	str	r2, [r3, #0]

                /* Found an ARP resolution, disable ARP resolution timer. */
                vIPSetARPResolutionTimerEnableState( pdFALSE );
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	f003 fabd 	bl	80093bc <vIPSetARPResolutionTimerEnableState>

                iptrace_DELAYED_ARP_REQUEST_REPLIED();
            }
        }
    }
 8005e42:	bf00      	nop
 8005e44:	3730      	adds	r7, #48	@ 0x30
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	20000e44 	.word	0x20000e44

08005e50 <xIsIPInARPCache>:
 *                    check for.
 *
 * @return When the IP-address is found: pdTRUE, else pdFALSE.
 */
BaseType_t xIsIPInARPCache( uint32_t ulAddressToLookup )
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
    BaseType_t x, xReturn = pdFALSE;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60bb      	str	r3, [r7, #8]

    /* Loop through each entry in the ARP cache. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	60fb      	str	r3, [r7, #12]
 8005e60:	e017      	b.n	8005e92 <xIsIPInARPCache+0x42>
    {
        /* Does this row in the ARP cache table hold an entry for the IP address
         * being queried? */
        if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 8005e62:	4a12      	ldr	r2, [pc, #72]	@ (8005eac <xIsIPInARPCache+0x5c>)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	011b      	lsls	r3, r3, #4
 8005e68:	4413      	add	r3, r2
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d10c      	bne.n	8005e8c <xIsIPInARPCache+0x3c>
        {
            xReturn = pdTRUE;
 8005e72:	2301      	movs	r3, #1
 8005e74:	60bb      	str	r3, [r7, #8]

            /* A matching valid entry was found. */
            if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8005e76:	4a0d      	ldr	r2, [pc, #52]	@ (8005eac <xIsIPInARPCache+0x5c>)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	011b      	lsls	r3, r3, #4
 8005e7c:	4413      	add	r3, r2
 8005e7e:	330b      	adds	r3, #11
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d109      	bne.n	8005e9a <xIsIPInARPCache+0x4a>
            {
                /* This entry is waiting an ARP reply, so is not valid. */
                xReturn = pdFALSE;
 8005e86:	2300      	movs	r3, #0
 8005e88:	60bb      	str	r3, [r7, #8]
            }

            break;
 8005e8a:	e006      	b.n	8005e9a <xIsIPInARPCache+0x4a>
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2b05      	cmp	r3, #5
 8005e96:	dde4      	ble.n	8005e62 <xIsIPInARPCache+0x12>
 8005e98:	e000      	b.n	8005e9c <xIsIPInARPCache+0x4c>
            break;
 8005e9a:	bf00      	nop
        }
    }

    return xReturn;
 8005e9c:	68bb      	ldr	r3, [r7, #8]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	20000c0c 	.word	0x20000c0c

08005eb0 <xCheckRequiresARPResolution>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be checked.
 *
 * @return pdTRUE if the packet needs ARP resolution, pdFALSE otherwise.
 */
BaseType_t xCheckRequiresARPResolution( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8005eb0:	b590      	push	{r4, r7, lr}
 8005eb2:	b0a5      	sub	sp, #148	@ 0x94
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
    BaseType_t xNeedsARPResolution = pdFALSE;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f003 f83a 	bl	8008f38 <uxIPHeaderSizePacket>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b14      	cmp	r3, #20
 8005ec8:	d002      	beq.n	8005ed0 <xCheckRequiresARPResolution+0x20>
 8005eca:	2b28      	cmp	r3, #40	@ 0x28
 8005ecc:	d029      	beq.n	8005f22 <xCheckRequiresARPResolution+0x72>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* Shouldn't reach here */
            /* MISRA 16.4 Compliance */
            break;
 8005ece:	e0b6      	b.n	800603e <xCheckRequiresARPResolution+0x18e>
                   const IPPacket_t * pxIPPacket = ( ( const IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed4:	673b      	str	r3, [r7, #112]	@ 0x70
                   const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8005ed6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ed8:	330e      	adds	r3, #14
 8005eda:	66fb      	str	r3, [r7, #108]	@ 0x6c
                   const IPV4Parameters_t * pxIPv4Settings = &( pxNetworkBuffer->pxEndPoint->ipv4_settings );
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ee0:	66bb      	str	r3, [r7, #104]	@ 0x68
                   if( ( pxIPHeader->ulSourceIPAddress & pxIPv4Settings->ulNetMask ) == ( pxIPv4Settings->ulIPAddress & pxIPv4Settings->ulNetMask ) )
 8005ee2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ee4:	68da      	ldr	r2, [r3, #12]
 8005ee6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	405a      	eors	r2, r3
 8005eec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f040 80a0 	bne.w	8006038 <xCheckRequiresARPResolution+0x188>
                       if( xIsIPInARPCache( pxIPHeader->ulSourceIPAddress ) == pdFALSE )
 8005ef8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7ff ffa7 	bl	8005e50 <xIsIPInARPCache>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f040 8097 	bne.w	8006038 <xCheckRequiresARPResolution+0x188>
                           FreeRTOS_OutputARPRequest_Multi( pxNetworkBuffer->pxEndPoint, pxIPHeader->ulSourceIPAddress );
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	4619      	mov	r1, r3
 8005f14:	4610      	mov	r0, r2
 8005f16:	f000 fbe1 	bl	80066dc <FreeRTOS_OutputARPRequest_Multi>
                           xNeedsARPResolution = pdTRUE;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                   break;
 8005f20:	e08a      	b.n	8006038 <xCheckRequiresARPResolution+0x188>
                   IPPacket_IPv6_t * pxIPPacket = ( ( IPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                   IPHeader_IPv6_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8005f2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f2e:	330e      	adds	r3, #14
 8005f30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                   IPv6_Address_t * pxIPAddress = &( pxIPHeader->xSourceAddress );
 8005f34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f38:	3308      	adds	r3, #8
 8005f3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                   uint8_t ucNextHeader = pxIPHeader->ucNextHeader;
 8005f3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f42:	799b      	ldrb	r3, [r3, #6]
 8005f44:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
                   if( ( ucNextHeader == ipPROTOCOL_TCP ) ||
 8005f48:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005f4c:	2b06      	cmp	r3, #6
 8005f4e:	d003      	beq.n	8005f58 <xCheckRequiresARPResolution+0xa8>
 8005f50:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005f54:	2b11      	cmp	r3, #17
 8005f56:	d171      	bne.n	800603c <xCheckRequiresARPResolution+0x18c>
                       IPv6_Type_t eType = xIPv6_GetIPType( ( const IPv6_Address_t * ) pxIPAddress );
 8005f58:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8005f5c:	f006 ff68 	bl	800ce30 <xIPv6_GetIPType>
 8005f60:	4603      	mov	r3, r0
 8005f62:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
                       FreeRTOS_debug_printf( ( "xCheckRequiresARPResolution: %pip type %s\n",
 8005f66:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8005f6a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00d      	beq.n	8005f8e <xCheckRequiresARPResolution+0xde>
 8005f72:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d007      	beq.n	8005f8a <xCheckRequiresARPResolution+0xda>
 8005f7a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8005f7e:	2b04      	cmp	r3, #4
 8005f80:	d101      	bne.n	8005f86 <xCheckRequiresARPResolution+0xd6>
 8005f82:	4b32      	ldr	r3, [pc, #200]	@ (800604c <xCheckRequiresARPResolution+0x19c>)
 8005f84:	e004      	b.n	8005f90 <xCheckRequiresARPResolution+0xe0>
 8005f86:	4b32      	ldr	r3, [pc, #200]	@ (8006050 <xCheckRequiresARPResolution+0x1a0>)
 8005f88:	e002      	b.n	8005f90 <xCheckRequiresARPResolution+0xe0>
 8005f8a:	4b32      	ldr	r3, [pc, #200]	@ (8006054 <xCheckRequiresARPResolution+0x1a4>)
 8005f8c:	e000      	b.n	8005f90 <xCheckRequiresARPResolution+0xe0>
 8005f8e:	4b32      	ldr	r3, [pc, #200]	@ (8006058 <xCheckRequiresARPResolution+0x1a8>)
 8005f90:	461a      	mov	r2, r3
 8005f92:	4832      	ldr	r0, [pc, #200]	@ (800605c <xCheckRequiresARPResolution+0x1ac>)
 8005f94:	f01a faca 	bl	802052c <lUDPLoggingPrintf>
                       if( eType == eIPv6_LinkLocal )
 8005f98:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d14d      	bne.n	800603c <xCheckRequiresARPResolution+0x18c>
                           ( void ) memset( &( pcName ), 0, sizeof( pcName ) );
 8005fa0:	f107 030c 	add.w	r3, r7, #12
 8005fa4:	2250      	movs	r2, #80	@ 0x50
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f01a fde8 	bl	8020b7e <memset>
                           eResult = eNDGetCacheEntry( pxIPAddress, &xMACAddress, &pxEndPoint );
 8005fae:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8005fb2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8005fbc:	f004 fe0e 	bl	800abdc <eNDGetCacheEntry>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
                           FreeRTOS_printf( ( "xCheckRequiresARPResolution: eResult %s with EP %s\n", ( eResult == eARPCacheMiss ) ? "Miss" : ( eResult == eARPCacheHit ) ? "Hit" : "Error", pcEndpointName( pxEndPoint, pcName, sizeof pcName ) ) );
 8005fc6:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d007      	beq.n	8005fde <xCheckRequiresARPResolution+0x12e>
 8005fce:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d101      	bne.n	8005fda <xCheckRequiresARPResolution+0x12a>
 8005fd6:	4c22      	ldr	r4, [pc, #136]	@ (8006060 <xCheckRequiresARPResolution+0x1b0>)
 8005fd8:	e002      	b.n	8005fe0 <xCheckRequiresARPResolution+0x130>
 8005fda:	4c22      	ldr	r4, [pc, #136]	@ (8006064 <xCheckRequiresARPResolution+0x1b4>)
 8005fdc:	e000      	b.n	8005fe0 <xCheckRequiresARPResolution+0x130>
 8005fde:	4c22      	ldr	r4, [pc, #136]	@ (8006068 <xCheckRequiresARPResolution+0x1b8>)
 8005fe0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fe2:	f107 010c 	add.w	r1, r7, #12
 8005fe6:	2250      	movs	r2, #80	@ 0x50
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f006 ff79 	bl	800cee0 <pcEndpointName>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	4621      	mov	r1, r4
 8005ff4:	481d      	ldr	r0, [pc, #116]	@ (800606c <xCheckRequiresARPResolution+0x1bc>)
 8005ff6:	f01a fa99 	bl	802052c <lUDPLoggingPrintf>
                           if( eResult == eARPCacheMiss )
 8005ffa:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d11c      	bne.n	800603c <xCheckRequiresARPResolution+0x18c>
                               uxNeededSize = sizeof( ICMPPacket_IPv6_t );
 8006002:	2356      	movs	r3, #86	@ 0x56
 8006004:	67bb      	str	r3, [r7, #120]	@ 0x78
                               pxTempBuffer = pxGetNetworkBufferWithDescriptor( BUFFER_FROM_WHERE_CALL( 199 ) uxNeededSize, 0U );
 8006006:	2100      	movs	r1, #0
 8006008:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800600a:	f010 f93d 	bl	8016288 <pxGetNetworkBufferWithDescriptor>
 800600e:	6778      	str	r0, [r7, #116]	@ 0x74
                               if( pxTempBuffer != NULL )
 8006010:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00c      	beq.n	8006030 <xCheckRequiresARPResolution+0x180>
                                   pxTempBuffer->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800601a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800601c:	631a      	str	r2, [r3, #48]	@ 0x30
                                   pxTempBuffer->pxInterface = pxNetworkBuffer->pxInterface;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006022:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006024:	62da      	str	r2, [r3, #44]	@ 0x2c
                                   vNDSendNeighbourSolicitation( pxTempBuffer, pxIPAddress );
 8006026:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800602a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800602c:	f005 f842 	bl	800b0b4 <vNDSendNeighbourSolicitation>
                               xNeedsARPResolution = pdTRUE;
 8006030:	2301      	movs	r3, #1
 8006032:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                   break;
 8006036:	e001      	b.n	800603c <xCheckRequiresARPResolution+0x18c>
                   break;
 8006038:	bf00      	nop
 800603a:	e000      	b.n	800603e <xCheckRequiresARPResolution+0x18e>
                   break;
 800603c:	bf00      	nop
    }

    return xNeedsARPResolution;
 800603e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
}
 8006042:	4618      	mov	r0, r3
 8006044:	3794      	adds	r7, #148	@ 0x94
 8006046:	46bd      	mov	sp, r7
 8006048:	bd90      	pop	{r4, r7, pc}
 800604a:	bf00      	nop
 800604c:	0802288c 	.word	0x0802288c
 8006050:	08022898 	.word	0x08022898
 8006054:	080228a0 	.word	0x080228a0
 8006058:	080228ac 	.word	0x080228ac
 800605c:	080228b4 	.word	0x080228b4
 8006060:	080228e0 	.word	0x080228e0
 8006064:	080228e4 	.word	0x080228e4
 8006068:	080228ec 	.word	0x080228ec
 800606c:	080228f4 	.word	0x080228f4

08006070 <vARPRefreshCacheEntryAge>:
 * @param[in] pxMACAddress Pointer to the MAC address whose entry needs to be updated.
 * @param[in] ulIPAddress the IP address whose corresponding entry needs to be updated.
 */
void vARPRefreshCacheEntryAge( const MACAddress_t * pxMACAddress,
                               const uint32_t ulIPAddress )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
    BaseType_t x;

    if( pxMACAddress != NULL )
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d026      	beq.n	80060ce <vARPRefreshCacheEntryAge+0x5e>
    {
        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006080:	2300      	movs	r3, #0
 8006082:	60fb      	str	r3, [r7, #12]
 8006084:	e020      	b.n	80060c8 <vARPRefreshCacheEntryAge+0x58>
        {
            /* Does this line in the cache table hold an entry for the IP
             * address being queried? */
            if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 8006086:	4a14      	ldr	r2, [pc, #80]	@ (80060d8 <vARPRefreshCacheEntryAge+0x68>)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	011b      	lsls	r3, r3, #4
 800608c:	4413      	add	r3, r2
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	683a      	ldr	r2, [r7, #0]
 8006092:	429a      	cmp	r2, r3
 8006094:	d115      	bne.n	80060c2 <vARPRefreshCacheEntryAge+0x52>
            {
                /* Does this cache entry have the same MAC address? */
                if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	011b      	lsls	r3, r3, #4
 800609a:	4a0f      	ldr	r2, [pc, #60]	@ (80060d8 <vARPRefreshCacheEntryAge+0x68>)
 800609c:	4413      	add	r3, r2
 800609e:	3304      	adds	r3, #4
 80060a0:	6879      	ldr	r1, [r7, #4]
 80060a2:	2206      	movs	r2, #6
 80060a4:	4618      	mov	r0, r3
 80060a6:	f01b fbf2 	bl	802188e <memcmp>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d108      	bne.n	80060c2 <vARPRefreshCacheEntryAge+0x52>
                {
                    /* The IP address and the MAC matched, update this entry age. */
                    xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 80060b0:	4a09      	ldr	r2, [pc, #36]	@ (80060d8 <vARPRefreshCacheEntryAge+0x68>)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	011b      	lsls	r3, r3, #4
 80060b6:	4413      	add	r3, r2
 80060b8:	330a      	adds	r3, #10
 80060ba:	2296      	movs	r2, #150	@ 0x96
 80060bc:	701a      	strb	r2, [r3, #0]
                    break;
 80060be:	bf00      	nop
                }
            }
        }
    }
}
 80060c0:	e005      	b.n	80060ce <vARPRefreshCacheEntryAge+0x5e>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	3301      	adds	r3, #1
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2b05      	cmp	r3, #5
 80060cc:	dddb      	ble.n	8006086 <vARPRefreshCacheEntryAge+0x16>
}
 80060ce:	bf00      	nop
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	20000c0c 	.word	0x20000c0c

080060dc <vARPRefreshCacheEntry>:
 * @param[in] pxEndPoint The end-point stored in the table.
 */
void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                            const uint32_t ulIPAddress,
                            struct xNetworkEndPoint * pxEndPoint )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b088      	sub	sp, #32
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
    #endif
    {
        CacheLocation_t xLocation;
        BaseType_t xReady;

        xReady = prvFindCacheEntry( pxMACAddress, ulIPAddress, pxEndPoint, &( xLocation ) );
 80060e8:	f107 0310 	add.w	r3, r7, #16
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	68b9      	ldr	r1, [r7, #8]
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f000 f85b 	bl	80061ac <prvFindCacheEntry>
 80060f6:	61f8      	str	r0, [r7, #28]

        if( xReady == pdFALSE )
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d150      	bne.n	80061a0 <vARPRefreshCacheEntry+0xc4>
        {
            if( xLocation.xMacEntry >= 0 )
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	2b00      	cmp	r3, #0
 8006102:	db0e      	blt.n	8006122 <vARPRefreshCacheEntry+0x46>
            {
                xLocation.xUseEntry = xLocation.xMacEntry;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	61bb      	str	r3, [r7, #24]

                if( xLocation.xIpEntry >= 0 )
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	2b00      	cmp	r3, #0
 800610c:	db0e      	blt.n	800612c <vARPRefreshCacheEntry+0x50>
                {
                    /* Both the MAC address as well as the IP address were found in
                     * different locations: clear the entry which matches the
                     * IP-address */
                    ( void ) memset( &( xARPCache[ xLocation.xIpEntry ] ), 0, sizeof( ARPCacheRow_t ) );
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	011b      	lsls	r3, r3, #4
 8006112:	4a25      	ldr	r2, [pc, #148]	@ (80061a8 <vARPRefreshCacheEntry+0xcc>)
 8006114:	4413      	add	r3, r2
 8006116:	2210      	movs	r2, #16
 8006118:	2100      	movs	r1, #0
 800611a:	4618      	mov	r0, r3
 800611c:	f01a fd2f 	bl	8020b7e <memset>
 8006120:	e004      	b.n	800612c <vARPRefreshCacheEntry+0x50>
                }
            }
            else if( xLocation.xIpEntry >= 0 )
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	2b00      	cmp	r3, #0
 8006126:	db01      	blt.n	800612c <vARPRefreshCacheEntry+0x50>
            {
                /* An entry containing the IP-address was found, but it had a different MAC address */
                xLocation.xUseEntry = xLocation.xIpEntry;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	61bb      	str	r3, [r7, #24]
            {
                /* No matching entry found. */
            }

            /* If the entry was not found, we use the oldest entry and set the IPaddress */
            xARPCache[ xLocation.xUseEntry ].ulIPAddress = ulIPAddress;
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	4a1e      	ldr	r2, [pc, #120]	@ (80061a8 <vARPRefreshCacheEntry+0xcc>)
 8006130:	011b      	lsls	r3, r3, #4
 8006132:	4413      	add	r3, r2
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	601a      	str	r2, [r3, #0]

            if( pxMACAddress != NULL )
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d01f      	beq.n	800617e <vARPRefreshCacheEntry+0xa2>
            {
                ( void ) memcpy( xARPCache[ xLocation.xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	011b      	lsls	r3, r3, #4
 8006142:	4a19      	ldr	r2, [pc, #100]	@ (80061a8 <vARPRefreshCacheEntry+0xcc>)
 8006144:	4413      	add	r3, r2
 8006146:	3304      	adds	r3, #4
 8006148:	68f9      	ldr	r1, [r7, #12]
 800614a:	2206      	movs	r2, #6
 800614c:	4618      	mov	r0, r3
 800614e:	f01a fc09 	bl	8020964 <memcpy>

                iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, ( *pxMACAddress ) );
                /* And this entry does not need immediate attention */
                xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	4a14      	ldr	r2, [pc, #80]	@ (80061a8 <vARPRefreshCacheEntry+0xcc>)
 8006156:	011b      	lsls	r3, r3, #4
 8006158:	4413      	add	r3, r2
 800615a:	330a      	adds	r3, #10
 800615c:	2296      	movs	r2, #150	@ 0x96
 800615e:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	4a11      	ldr	r2, [pc, #68]	@ (80061a8 <vARPRefreshCacheEntry+0xcc>)
 8006164:	011b      	lsls	r3, r3, #4
 8006166:	4413      	add	r3, r2
 8006168:	330b      	adds	r3, #11
 800616a:	2201      	movs	r2, #1
 800616c:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].pxEndPoint = pxEndPoint;
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	4a0d      	ldr	r2, [pc, #52]	@ (80061a8 <vARPRefreshCacheEntry+0xcc>)
 8006172:	011b      	lsls	r3, r3, #4
 8006174:	4413      	add	r3, r2
 8006176:	330c      	adds	r3, #12
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	601a      	str	r2, [r3, #0]
            {
                /* Nothing will be stored. */
            }
        }
    }
}
 800617c:	e010      	b.n	80061a0 <vARPRefreshCacheEntry+0xc4>
            else if( xLocation.xIpEntry < 0 )
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	2b00      	cmp	r3, #0
 8006182:	da0d      	bge.n	80061a0 <vARPRefreshCacheEntry+0xc4>
                xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	4a08      	ldr	r2, [pc, #32]	@ (80061a8 <vARPRefreshCacheEntry+0xcc>)
 8006188:	011b      	lsls	r3, r3, #4
 800618a:	4413      	add	r3, r2
 800618c:	330a      	adds	r3, #10
 800618e:	2205      	movs	r2, #5
 8006190:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	4a04      	ldr	r2, [pc, #16]	@ (80061a8 <vARPRefreshCacheEntry+0xcc>)
 8006196:	011b      	lsls	r3, r3, #4
 8006198:	4413      	add	r3, r2
 800619a:	330b      	adds	r3, #11
 800619c:	2200      	movs	r2, #0
 800619e:	701a      	strb	r2, [r3, #0]
}
 80061a0:	bf00      	nop
 80061a2:	3720      	adds	r7, #32
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	20000c0c 	.word	0x20000c0c

080061ac <prvFindCacheEntry>:
 */
static BaseType_t prvFindCacheEntry( const MACAddress_t * pxMACAddress,
                                     const uint32_t ulIPAddress,
                                     struct xNetworkEndPoint * pxEndPoint,
                                     CacheLocation_t * pxLocation )
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b08a      	sub	sp, #40	@ 0x28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
 80061b8:	603b      	str	r3, [r7, #0]
    BaseType_t x = 0;
 80061ba:	2300      	movs	r3, #0
 80061bc:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t ucMinAgeFound = 0U;
 80061be:	2300      	movs	r3, #0
 80061c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    BaseType_t xReturn = pdFALSE;
 80061c4:	2300      	movs	r3, #0
 80061c6:	61fb      	str	r3, [r7, #28]

    #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
        BaseType_t xAddressIsLocal = ( FreeRTOS_FindEndPointOnNetMask( ulIPAddress, 2 ) != NULL ) ? 1 : 0; /* ARP remote address. */
 80061c8:	2102      	movs	r1, #2
 80061ca:	68b8      	ldr	r0, [r7, #8]
 80061cc:	f006 fb24 	bl	800c818 <FreeRTOS_FindEndPointOnNetMask>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	bf14      	ite	ne
 80061d6:	2301      	movne	r3, #1
 80061d8:	2300      	moveq	r3, #0
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	617b      	str	r3, [r7, #20]
    #endif

    /* Start with the maximum possible number. */
    ucMinAgeFound--;
 80061de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80061e2:	3b01      	subs	r3, #1
 80061e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    pxLocation->xIpEntry = -1;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	f04f 32ff 	mov.w	r2, #4294967295
 80061ee:	601a      	str	r2, [r3, #0]
    pxLocation->xMacEntry = -1;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	f04f 32ff 	mov.w	r2, #4294967295
 80061f6:	605a      	str	r2, [r3, #4]
    pxLocation->xUseEntry = 0;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2200      	movs	r2, #0
 80061fc:	609a      	str	r2, [r3, #8]

    /* For each entry in the ARP cache table. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80061fe:	2300      	movs	r3, #0
 8006200:	627b      	str	r3, [r7, #36]	@ 0x24
 8006202:	e074      	b.n	80062ee <prvFindCacheEntry+0x142>
    {
        BaseType_t xMatchingMAC = pdFALSE;
 8006204:	2300      	movs	r3, #0
 8006206:	61bb      	str	r3, [r7, #24]

        if( pxMACAddress != NULL )
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00e      	beq.n	800622c <prvFindCacheEntry+0x80>
        {
            if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 800620e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	4a3b      	ldr	r2, [pc, #236]	@ (8006300 <prvFindCacheEntry+0x154>)
 8006214:	4413      	add	r3, r2
 8006216:	3304      	adds	r3, #4
 8006218:	68f9      	ldr	r1, [r7, #12]
 800621a:	2206      	movs	r2, #6
 800621c:	4618      	mov	r0, r3
 800621e:	f01b fb36 	bl	802188e <memcmp>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d101      	bne.n	800622c <prvFindCacheEntry+0x80>
            {
                xMatchingMAC = pdTRUE;
 8006228:	2301      	movs	r3, #1
 800622a:	61bb      	str	r3, [r7, #24]
            }
        }

        /* Does this line in the cache table hold an entry for the IP
         * address being queried? */
        if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 800622c:	4a34      	ldr	r2, [pc, #208]	@ (8006300 <prvFindCacheEntry+0x154>)
 800622e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006230:	011b      	lsls	r3, r3, #4
 8006232:	4413      	add	r3, r2
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	429a      	cmp	r2, r3
 800623a:	d125      	bne.n	8006288 <prvFindCacheEntry+0xdc>
        {
            if( pxMACAddress == NULL )
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d103      	bne.n	800624a <prvFindCacheEntry+0x9e>
            {
                /* In case the parameter pxMACAddress is NULL, an entry will be reserved to
                 * indicate that there is an outstanding ARP request, This entry will have
                 * "ucValid == pdFALSE". */
                pxLocation->xIpEntry = x;
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006246:	601a      	str	r2, [r3, #0]
                break;
 8006248:	e054      	b.n	80062f4 <prvFindCacheEntry+0x148>
            }

            /* See if the MAC-address also matches. */
            if( xMatchingMAC != pdFALSE )
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d017      	beq.n	8006280 <prvFindCacheEntry+0xd4>
            {
                /* This function will be called for each received packet
                 * This is by far the most common path. */
                xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8006250:	4a2b      	ldr	r2, [pc, #172]	@ (8006300 <prvFindCacheEntry+0x154>)
 8006252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006254:	011b      	lsls	r3, r3, #4
 8006256:	4413      	add	r3, r2
 8006258:	330a      	adds	r3, #10
 800625a:	2296      	movs	r2, #150	@ 0x96
 800625c:	701a      	strb	r2, [r3, #0]
                xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 800625e:	4a28      	ldr	r2, [pc, #160]	@ (8006300 <prvFindCacheEntry+0x154>)
 8006260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006262:	011b      	lsls	r3, r3, #4
 8006264:	4413      	add	r3, r2
 8006266:	330b      	adds	r3, #11
 8006268:	2201      	movs	r2, #1
 800626a:	701a      	strb	r2, [r3, #0]
                xARPCache[ x ].pxEndPoint = pxEndPoint;
 800626c:	4a24      	ldr	r2, [pc, #144]	@ (8006300 <prvFindCacheEntry+0x154>)
 800626e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006270:	011b      	lsls	r3, r3, #4
 8006272:	4413      	add	r3, r2
 8006274:	330c      	adds	r3, #12
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	601a      	str	r2, [r3, #0]
                /* Indicate to the caller that the entry is updated. */
                xReturn = pdTRUE;
 800627a:	2301      	movs	r3, #1
 800627c:	61fb      	str	r3, [r7, #28]
                break;
 800627e:	e039      	b.n	80062f4 <prvFindCacheEntry+0x148>
            /* Found an entry containing ulIPAddress, but the MAC address
             * doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
             * for an ARP reply.  Still want to see if there is match with the
             * given MAC address.ucBytes.  If found, either of the two entries
             * must be cleared. */
            pxLocation->xIpEntry = x;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006284:	601a      	str	r2, [r3, #0]
 8006286:	e02f      	b.n	80062e8 <prvFindCacheEntry+0x13c>
        }
        else if( xMatchingMAC != pdFALSE )
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d017      	beq.n	80062be <prvFindCacheEntry+0x112>
            #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
            {
                /* If ARP stores the MAC address of IP addresses outside the
                 * network, than the MAC address of the gateway should not be
                 * overwritten. */
                BaseType_t xOtherIsLocal = ( FreeRTOS_FindEndPointOnNetMask( xARPCache[ x ].ulIPAddress, 3 ) != NULL ) ? 1 : 0; /* ARP remote address. */
 800628e:	4a1c      	ldr	r2, [pc, #112]	@ (8006300 <prvFindCacheEntry+0x154>)
 8006290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006292:	011b      	lsls	r3, r3, #4
 8006294:	4413      	add	r3, r2
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2103      	movs	r1, #3
 800629a:	4618      	mov	r0, r3
 800629c:	f006 fabc 	bl	800c818 <FreeRTOS_FindEndPointOnNetMask>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	bf14      	ite	ne
 80062a6:	2301      	movne	r3, #1
 80062a8:	2300      	moveq	r3, #0
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	613b      	str	r3, [r7, #16]

                if( xAddressIsLocal == xOtherIsLocal )
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d118      	bne.n	80062e8 <prvFindCacheEntry+0x13c>
                {
                    pxLocation->xMacEntry = x;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062ba:	605a      	str	r2, [r3, #4]
 80062bc:	e014      	b.n	80062e8 <prvFindCacheEntry+0x13c>
            #endif /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
        }

        /* _HT_
         * Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
        else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 80062be:	4a10      	ldr	r2, [pc, #64]	@ (8006300 <prvFindCacheEntry+0x154>)
 80062c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c2:	011b      	lsls	r3, r3, #4
 80062c4:	4413      	add	r3, r2
 80062c6:	330a      	adds	r3, #10
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d90a      	bls.n	80062e8 <prvFindCacheEntry+0x13c>
        {
            /* As the table is traversed, remember the table row that
             * contains the oldest entry (the lowest age count, as ages are
             * decremented to zero) so the row can be re-used if this function
             * needs to add an entry that does not already exist. */
            ucMinAgeFound = xARPCache[ x ].ucAge;
 80062d2:	4a0b      	ldr	r2, [pc, #44]	@ (8006300 <prvFindCacheEntry+0x154>)
 80062d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d6:	011b      	lsls	r3, r3, #4
 80062d8:	4413      	add	r3, r2
 80062da:	330a      	adds	r3, #10
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            pxLocation->xUseEntry = x;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062e6:	609a      	str	r2, [r3, #8]
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80062e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ea:	3301      	adds	r3, #1
 80062ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80062ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f0:	2b05      	cmp	r3, #5
 80062f2:	dd87      	ble.n	8006204 <prvFindCacheEntry+0x58>
        {
            /* Nothing happens to this cache entry for now. */
        }
    } /* for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ ) */

    return xReturn;
 80062f4:	69fb      	ldr	r3, [r7, #28]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3728      	adds	r7, #40	@ 0x28
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	20000c0c 	.word	0x20000c0c

08006304 <eARPGetCacheEntry>:
 *         eCantSendPacket.
 */
    eARPLookupResult_t eARPGetCacheEntry( uint32_t * pulIPAddress,
                                          MACAddress_t * const pxMACAddress,
                                          struct xNetworkEndPoint ** ppxEndPoint )
    {
 8006304:	b580      	push	{r7, lr}
 8006306:	b088      	sub	sp, #32
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;
        uint32_t ulAddressToLookup;
        NetworkEndPoint_t * pxEndPoint = NULL;
 8006310:	2300      	movs	r3, #0
 8006312:	61bb      	str	r3, [r7, #24]

        configASSERT( pxMACAddress != NULL );
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d104      	bne.n	8006324 <eARPGetCacheEntry+0x20>
 800631a:	f240 31c9 	movw	r1, #969	@ 0x3c9
 800631e:	483c      	ldr	r0, [pc, #240]	@ (8006410 <eARPGetCacheEntry+0x10c>)
 8006320:	f7fa fefa 	bl	8001118 <vAssertCalled>
        configASSERT( pulIPAddress != NULL );
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d104      	bne.n	8006334 <eARPGetCacheEntry+0x30>
 800632a:	f240 31ca 	movw	r1, #970	@ 0x3ca
 800632e:	4838      	ldr	r0, [pc, #224]	@ (8006410 <eARPGetCacheEntry+0x10c>)
 8006330:	f7fa fef2 	bl	8001118 <vAssertCalled>
        configASSERT( ppxEndPoint != NULL );
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d104      	bne.n	8006344 <eARPGetCacheEntry+0x40>
 800633a:	f240 31cb 	movw	r1, #971	@ 0x3cb
 800633e:	4834      	ldr	r0, [pc, #208]	@ (8006410 <eARPGetCacheEntry+0x10c>)
 8006340:	f7fa feea 	bl	8001118 <vAssertCalled>

        *( ppxEndPoint ) = NULL;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	601a      	str	r2, [r3, #0]
        ulAddressToLookup = *pulIPAddress;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	617b      	str	r3, [r7, #20]
        pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( ulAddressToLookup, 0 );
 8006350:	2100      	movs	r1, #0
 8006352:	6978      	ldr	r0, [r7, #20]
 8006354:	f006 f9d4 	bl	800c700 <FreeRTOS_FindEndPointOnIP_IPv4>
 8006358:	61b8      	str	r0, [r7, #24]

        if( xIsIPv4Multicast( ulAddressToLookup ) != 0 )
 800635a:	6978      	ldr	r0, [r7, #20]
 800635c:	f003 fc3c 	bl	8009bd8 <xIsIPv4Multicast>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d021      	beq.n	80063aa <eARPGetCacheEntry+0xa6>
        {
            /* Get the lowest 23 bits of the IP-address. */
            vSetMultiCastIPv4MacAddress( ulAddressToLookup, pxMACAddress );
 8006366:	68b9      	ldr	r1, [r7, #8]
 8006368:	6978      	ldr	r0, [r7, #20]
 800636a:	f003 fd63 	bl	8009e34 <vSetMultiCastIPv4MacAddress>

            eReturn = eCantSendPacket;
 800636e:	2302      	movs	r3, #2
 8006370:	77fb      	strb	r3, [r7, #31]
            pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8006372:	2000      	movs	r0, #0
 8006374:	f006 f978 	bl	800c668 <FreeRTOS_FirstEndPoint>
 8006378:	61b8      	str	r0, [r7, #24]

            for( ;
 800637a:	e012      	b.n	80063a2 <eARPGetCacheEntry+0x9e>
                 pxEndPoint != NULL;
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
            {
                if( pxEndPoint->bits.bIPv6 == 0U ) /*NULL End Point is checked in the for loop, no need for an extra check */
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8006382:	f003 0304 	and.w	r3, r3, #4
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b00      	cmp	r3, #0
 800638a:	d105      	bne.n	8006398 <eARPGetCacheEntry+0x94>
                {
                    /* For multi-cast, use the first IPv4 end-point. */
                    *( ppxEndPoint ) = pxEndPoint;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	601a      	str	r2, [r3, #0]
                    eReturn = eARPCacheHit;
 8006392:	2301      	movs	r3, #1
 8006394:	77fb      	strb	r3, [r7, #31]
                    break;
 8006396:	e035      	b.n	8006404 <eARPGetCacheEntry+0x100>
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8006398:	69b9      	ldr	r1, [r7, #24]
 800639a:	2000      	movs	r0, #0
 800639c:	f006 f986 	bl	800c6ac <FreeRTOS_NextEndPoint>
 80063a0:	61b8      	str	r0, [r7, #24]
                 pxEndPoint != NULL;
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e9      	bne.n	800637c <eARPGetCacheEntry+0x78>
 80063a8:	e02c      	b.n	8006404 <eARPGetCacheEntry+0x100>
                }
            }
        }
        else if( ( FreeRTOS_htonl( ulAddressToLookup ) & 0xffU ) == 0xffU ) /* Is this a broadcast address like x.x.x.255 ? */
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	061a      	lsls	r2, r3, #24
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	021b      	lsls	r3, r3, #8
 80063b2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80063b6:	431a      	orrs	r2, r3
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	0a1b      	lsrs	r3, r3, #8
 80063bc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80063c0:	431a      	orrs	r2, r3
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	0e1b      	lsrs	r3, r3, #24
 80063c6:	4313      	orrs	r3, r2
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2bff      	cmp	r3, #255	@ 0xff
 80063cc:	d113      	bne.n	80063f6 <eARPGetCacheEntry+0xf2>
        {
            /* This is a broadcast so it uses the broadcast MAC address. */
            ( void ) memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	4a10      	ldr	r2, [pc, #64]	@ (8006414 <eARPGetCacheEntry+0x110>)
 80063d2:	6811      	ldr	r1, [r2, #0]
 80063d4:	6019      	str	r1, [r3, #0]
 80063d6:	8892      	ldrh	r2, [r2, #4]
 80063d8:	809a      	strh	r2, [r3, #4]
            pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulAddressToLookup, 4 );
 80063da:	2104      	movs	r1, #4
 80063dc:	6978      	ldr	r0, [r7, #20]
 80063de:	f006 fa1b 	bl	800c818 <FreeRTOS_FindEndPointOnNetMask>
 80063e2:	61b8      	str	r0, [r7, #24]

            if( pxEndPoint != NULL )
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d002      	beq.n	80063f0 <eARPGetCacheEntry+0xec>
            {
                *( ppxEndPoint ) = pxEndPoint;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	69ba      	ldr	r2, [r7, #24]
 80063ee:	601a      	str	r2, [r3, #0]
            }

            eReturn = eARPCacheHit;
 80063f0:	2301      	movs	r3, #1
 80063f2:	77fb      	strb	r3, [r7, #31]
 80063f4:	e006      	b.n	8006404 <eARPGetCacheEntry+0x100>
        }
        else
        {
            eReturn = eARPGetCacheEntryGateWay( pulIPAddress, pxMACAddress, ppxEndPoint );
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	68b9      	ldr	r1, [r7, #8]
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f000 f80c 	bl	8006418 <eARPGetCacheEntryGateWay>
 8006400:	4603      	mov	r3, r0
 8006402:	77fb      	strb	r3, [r7, #31]
        }

        return eReturn;
 8006404:	7ffb      	ldrb	r3, [r7, #31]
    }
 8006406:	4618      	mov	r0, r3
 8006408:	3720      	adds	r7, #32
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	08022928 	.word	0x08022928
 8006414:	08025bc4 	.word	0x08025bc4

08006418 <eARPGetCacheEntryGateWay>:
 * @param[out] ppxEndPoint The end-point of the gateway will be copy to the pointee.
 */
    static eARPLookupResult_t eARPGetCacheEntryGateWay( uint32_t * pulIPAddress,
                                                        MACAddress_t * const pxMACAddress,
                                                        struct xNetworkEndPoint ** ppxEndPoint )
    {
 8006418:	b580      	push	{r7, lr}
 800641a:	b088      	sub	sp, #32
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn = eARPCacheMiss;
 8006424:	2300      	movs	r3, #0
 8006426:	77fb      	strb	r3, [r7, #31]
        uint32_t ulAddressToLookup = *( pulIPAddress );
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	61bb      	str	r3, [r7, #24]
        NetworkEndPoint_t * pxEndPoint;
        uint32_t ulOriginal = *pulIPAddress;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	617b      	str	r3, [r7, #20]

        /* It is assumed that devices with the same netmask are on the same
         * LAN and don't need a gateway. */
        pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulAddressToLookup, 4 );
 8006434:	2104      	movs	r1, #4
 8006436:	69b8      	ldr	r0, [r7, #24]
 8006438:	f006 f9ee 	bl	800c818 <FreeRTOS_FindEndPointOnNetMask>
 800643c:	6138      	str	r0, [r7, #16]

        if( pxEndPoint == NULL )
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d11b      	bne.n	800647c <eARPGetCacheEntryGateWay+0x64>
        {
            /* No matching end-point is found, look for a gateway. */
            #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	68b9      	ldr	r1, [r7, #8]
 8006448:	69b8      	ldr	r0, [r7, #24]
 800644a:	f000 f86b 	bl	8006524 <prvCacheLookup>
 800644e:	4603      	mov	r3, r0
 8006450:	77fb      	strb	r3, [r7, #31]

                if( eReturn == eARPCacheHit )
 8006452:	7ffb      	ldrb	r3, [r7, #31]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d017      	beq.n	8006488 <eARPGetCacheEntryGateWay+0x70>
                else
            #endif
            {
                /* The IP address is off the local network, so look up the
                 * hardware address of the router, if any. */
                *( ppxEndPoint ) = FreeRTOS_FindGateWay( ( BaseType_t ) ipTYPE_IPv4 );
 8006458:	2040      	movs	r0, #64	@ 0x40
 800645a:	f006 fca9 	bl	800cdb0 <FreeRTOS_FindGateWay>
 800645e:	4602      	mov	r2, r0
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	601a      	str	r2, [r3, #0]

                if( *( ppxEndPoint ) != NULL )
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d004      	beq.n	8006476 <eARPGetCacheEntryGateWay+0x5e>
                {
                    /* 'ipv4_settings' can be accessed safely, because 'ipTYPE_IPv4' was provided. */
                    ulAddressToLookup = ( *ppxEndPoint )->ipv4_settings.ulGatewayAddress;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	61bb      	str	r3, [r7, #24]
 8006474:	e008      	b.n	8006488 <eARPGetCacheEntryGateWay+0x70>
                }
                else
                {
                    ulAddressToLookup = 0U;
 8006476:	2300      	movs	r3, #0
 8006478:	61bb      	str	r3, [r7, #24]
 800647a:	e005      	b.n	8006488 <eARPGetCacheEntryGateWay+0x70>
        }
        else
        {
            /* The IP address is on the local network, so lookup the requested
             * IP address directly. */
            ulAddressToLookup = *pulIPAddress;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	61bb      	str	r3, [r7, #24]
            *ppxEndPoint = pxEndPoint;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	601a      	str	r2, [r3, #0]
        }

        #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
            if( eReturn == eARPCacheMiss )
 8006488:	7ffb      	ldrb	r3, [r7, #31]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d13f      	bne.n	800650e <eARPGetCacheEntryGateWay+0xf6>
        #endif
        {
            if( ulAddressToLookup == 0U )
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d102      	bne.n	800649a <eARPGetCacheEntryGateWay+0x82>
            {
                /* The address is not on the local network, and there is not a
                 * router. */
                eReturn = eCantSendPacket;
 8006494:	2302      	movs	r3, #2
 8006496:	77fb      	strb	r3, [r7, #31]
 8006498:	e039      	b.n	800650e <eARPGetCacheEntryGateWay+0xf6>
            }
            else
            {
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	68b9      	ldr	r1, [r7, #8]
 800649e:	69b8      	ldr	r0, [r7, #24]
 80064a0:	f000 f840 	bl	8006524 <prvCacheLookup>
 80064a4:	4603      	mov	r3, r0
 80064a6:	77fb      	strb	r3, [r7, #31]

                if( ( eReturn != eARPCacheHit ) || ( ulOriginal != ulAddressToLookup ) )
 80064a8:	7ffb      	ldrb	r3, [r7, #31]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d103      	bne.n	80064b6 <eARPGetCacheEntryGateWay+0x9e>
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d028      	beq.n	8006508 <eARPGetCacheEntryGateWay+0xf0>
                {
                    FreeRTOS_debug_printf( ( "ARP %xip %s using %xip\n",
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	061a      	lsls	r2, r3, #24
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	021b      	lsls	r3, r3, #8
 80064be:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80064c2:	431a      	orrs	r2, r3
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	0a1b      	lsrs	r3, r3, #8
 80064c8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80064cc:	431a      	orrs	r2, r3
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	0e1b      	lsrs	r3, r3, #24
 80064d2:	ea42 0103 	orr.w	r1, r2, r3
 80064d6:	7ffb      	ldrb	r3, [r7, #31]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d101      	bne.n	80064e0 <eARPGetCacheEntryGateWay+0xc8>
 80064dc:	480e      	ldr	r0, [pc, #56]	@ (8006518 <eARPGetCacheEntryGateWay+0x100>)
 80064de:	e000      	b.n	80064e2 <eARPGetCacheEntryGateWay+0xca>
 80064e0:	480e      	ldr	r0, [pc, #56]	@ (800651c <eARPGetCacheEntryGateWay+0x104>)
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	061a      	lsls	r2, r3, #24
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	021b      	lsls	r3, r3, #8
 80064ea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80064ee:	431a      	orrs	r2, r3
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	0a1b      	lsrs	r3, r3, #8
 80064f4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80064f8:	431a      	orrs	r2, r3
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	0e1b      	lsrs	r3, r3, #24
 80064fe:	4313      	orrs	r3, r2
 8006500:	4602      	mov	r2, r0
 8006502:	4807      	ldr	r0, [pc, #28]	@ (8006520 <eARPGetCacheEntryGateWay+0x108>)
 8006504:	f01a f812 	bl	802052c <lUDPLoggingPrintf>
                                             ( eReturn == eARPCacheHit ) ? "hit" : "miss",
                                             ( unsigned ) FreeRTOS_ntohl( ulAddressToLookup ) ) );
                }

                /* It might be that the ARP has to go to the gateway. */
                *pulIPAddress = ulAddressToLookup;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	69ba      	ldr	r2, [r7, #24]
 800650c:	601a      	str	r2, [r3, #0]
            }
        }

        return eReturn;
 800650e:	7ffb      	ldrb	r3, [r7, #31]
    }
 8006510:	4618      	mov	r0, r3
 8006512:	3720      	adds	r7, #32
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	08022954 	.word	0x08022954
 800651c:	08022958 	.word	0x08022958
 8006520:	08022960 	.word	0x08022960

08006524 <prvCacheLookup>:
 *         and when waiting for a ARP reply: eCantSendPacket.
 */
    static eARPLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup,
                                              MACAddress_t * const pxMACAddress,
                                              NetworkEndPoint_t ** ppxEndPoint )
    {
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        eARPLookupResult_t eReturn = eARPCacheMiss;
 8006530:	2300      	movs	r3, #0
 8006532:	74fb      	strb	r3, [r7, #19]

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006534:	2300      	movs	r3, #0
 8006536:	617b      	str	r3, [r7, #20]
 8006538:	e02a      	b.n	8006590 <prvCacheLookup+0x6c>
        {
            /* Does this row in the ARP cache table hold an entry for the IP address
             * being queried? */
            if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 800653a:	4a19      	ldr	r2, [pc, #100]	@ (80065a0 <prvCacheLookup+0x7c>)
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	011b      	lsls	r3, r3, #4
 8006540:	4413      	add	r3, r2
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	429a      	cmp	r2, r3
 8006548:	d11f      	bne.n	800658a <prvCacheLookup+0x66>
            {
                /* A matching valid entry was found. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800654a:	4a15      	ldr	r2, [pc, #84]	@ (80065a0 <prvCacheLookup+0x7c>)
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	011b      	lsls	r3, r3, #4
 8006550:	4413      	add	r3, r2
 8006552:	330b      	adds	r3, #11
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d102      	bne.n	8006560 <prvCacheLookup+0x3c>
                {
                    /* This entry is waiting an ARP reply, so is not valid. */
                    eReturn = eCantSendPacket;
 800655a:	2302      	movs	r3, #2
 800655c:	74fb      	strb	r3, [r7, #19]
                    /* ppxEndPoint != NULL was tested in the only caller eARPGetCacheEntry(). */
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
                    eReturn = eARPCacheHit;
                }

                break;
 800655e:	e01a      	b.n	8006596 <prvCacheLookup+0x72>
                    ( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 8006560:	68b8      	ldr	r0, [r7, #8]
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	011b      	lsls	r3, r3, #4
 8006566:	4a0e      	ldr	r2, [pc, #56]	@ (80065a0 <prvCacheLookup+0x7c>)
 8006568:	4413      	add	r3, r2
 800656a:	3304      	adds	r3, #4
 800656c:	2206      	movs	r2, #6
 800656e:	4619      	mov	r1, r3
 8006570:	f01a f9f8 	bl	8020964 <memcpy>
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
 8006574:	4a0a      	ldr	r2, [pc, #40]	@ (80065a0 <prvCacheLookup+0x7c>)
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	011b      	lsls	r3, r3, #4
 800657a:	4413      	add	r3, r2
 800657c:	330c      	adds	r3, #12
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	601a      	str	r2, [r3, #0]
                    eReturn = eARPCacheHit;
 8006584:	2301      	movs	r3, #1
 8006586:	74fb      	strb	r3, [r7, #19]
                break;
 8006588:	e005      	b.n	8006596 <prvCacheLookup+0x72>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	3301      	adds	r3, #1
 800658e:	617b      	str	r3, [r7, #20]
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	2b05      	cmp	r3, #5
 8006594:	ddd1      	ble.n	800653a <prvCacheLookup+0x16>
            }
        }

        return eReturn;
 8006596:	7cfb      	ldrb	r3, [r7, #19]
    }
 8006598:	4618      	mov	r0, r3
 800659a:	3718      	adds	r7, #24
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	20000c0c 	.word	0x20000c0c

080065a4 <vARPAgeCache>:
 *        reply - if we are, then an ARP request will be re-sent.
 *        In case an ARP entry has 'Aged' to 0, it will be removed from the ARP
 *        cache.
 */
    void vARPAgeCache( void )
    {
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
        BaseType_t x;
        TickType_t xTimeNow;

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80065aa:	2300      	movs	r3, #0
 80065ac:	60fb      	str	r3, [r7, #12]
 80065ae:	e048      	b.n	8006642 <vARPAgeCache+0x9e>
        {
            /* If the entry is valid (its age is greater than zero). */
            if( xARPCache[ x ].ucAge > 0U )
 80065b0:	4a47      	ldr	r2, [pc, #284]	@ (80066d0 <vARPAgeCache+0x12c>)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	011b      	lsls	r3, r3, #4
 80065b6:	4413      	add	r3, r2
 80065b8:	330a      	adds	r3, #10
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d03d      	beq.n	800663c <vARPAgeCache+0x98>
            {
                /* Decrement the age value of the entry in this ARP cache table row.
                 * When the age reaches zero it is no longer considered valid. */
                ( xARPCache[ x ].ucAge )--;
 80065c0:	4a43      	ldr	r2, [pc, #268]	@ (80066d0 <vARPAgeCache+0x12c>)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	011b      	lsls	r3, r3, #4
 80065c6:	4413      	add	r3, r2
 80065c8:	330a      	adds	r3, #10
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	3b01      	subs	r3, #1
 80065ce:	b2d9      	uxtb	r1, r3
 80065d0:	4a3f      	ldr	r2, [pc, #252]	@ (80066d0 <vARPAgeCache+0x12c>)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	011b      	lsls	r3, r3, #4
 80065d6:	4413      	add	r3, r2
 80065d8:	330a      	adds	r3, #10
 80065da:	460a      	mov	r2, r1
 80065dc:	701a      	strb	r2, [r3, #0]

                /* If the entry is not yet valid, then it is waiting an ARP
                 * reply, and the ARP request should be retransmitted. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 80065de:	4a3c      	ldr	r2, [pc, #240]	@ (80066d0 <vARPAgeCache+0x12c>)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	011b      	lsls	r3, r3, #4
 80065e4:	4413      	add	r3, r2
 80065e6:	330b      	adds	r3, #11
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d108      	bne.n	8006600 <vARPAgeCache+0x5c>
                {
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 80065ee:	4a38      	ldr	r2, [pc, #224]	@ (80066d0 <vARPAgeCache+0x12c>)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	011b      	lsls	r3, r3, #4
 80065f4:	4413      	add	r3, r2
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4618      	mov	r0, r3
 80065fa:	f000 f8d7 	bl	80067ac <FreeRTOS_OutputARPRequest>
 80065fe:	e00f      	b.n	8006620 <vARPAgeCache+0x7c>
                }
                else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 8006600:	4a33      	ldr	r2, [pc, #204]	@ (80066d0 <vARPAgeCache+0x12c>)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	011b      	lsls	r3, r3, #4
 8006606:	4413      	add	r3, r2
 8006608:	330a      	adds	r3, #10
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	2b03      	cmp	r3, #3
 800660e:	d807      	bhi.n	8006620 <vARPAgeCache+0x7c>
                {
                    /* This entry will get removed soon.  See if the MAC address is
                     * still valid to prevent this happening. */
                    iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8006610:	4a2f      	ldr	r2, [pc, #188]	@ (80066d0 <vARPAgeCache+0x12c>)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	011b      	lsls	r3, r3, #4
 8006616:	4413      	add	r3, r2
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4618      	mov	r0, r3
 800661c:	f000 f8c6 	bl	80067ac <FreeRTOS_OutputARPRequest>
                else
                {
                    /* The age has just ticked down, with nothing to do. */
                }

                if( xARPCache[ x ].ucAge == 0U )
 8006620:	4a2b      	ldr	r2, [pc, #172]	@ (80066d0 <vARPAgeCache+0x12c>)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	011b      	lsls	r3, r3, #4
 8006626:	4413      	add	r3, r2
 8006628:	330a      	adds	r3, #10
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d105      	bne.n	800663c <vARPAgeCache+0x98>
                {
                    /* The entry is no longer valid.  Wipe it out. */
                    iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
                    xARPCache[ x ].ulIPAddress = 0U;
 8006630:	4a27      	ldr	r2, [pc, #156]	@ (80066d0 <vARPAgeCache+0x12c>)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	011b      	lsls	r3, r3, #4
 8006636:	4413      	add	r3, r2
 8006638:	2200      	movs	r2, #0
 800663a:	601a      	str	r2, [r3, #0]
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	3301      	adds	r3, #1
 8006640:	60fb      	str	r3, [r7, #12]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2b05      	cmp	r3, #5
 8006646:	ddb3      	ble.n	80065b0 <vARPAgeCache+0xc>
                }
            }
        }

        xTimeNow = xTaskGetTickCount();
 8006648:	f7fd f8e0 	bl	800380c <xTaskGetTickCount>
 800664c:	6078      	str	r0, [r7, #4]

        if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 800664e:	4b21      	ldr	r3, [pc, #132]	@ (80066d4 <vARPAgeCache+0x130>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d007      	beq.n	8006666 <vARPAgeCache+0xc2>
 8006656:	4b1f      	ldr	r3, [pc, #124]	@ (80066d4 <vARPAgeCache+0x130>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8006662:	4293      	cmp	r3, r2
 8006664:	d92f      	bls.n	80066c6 <vARPAgeCache+0x122>
        {
            NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 8006666:	4b1c      	ldr	r3, [pc, #112]	@ (80066d8 <vARPAgeCache+0x134>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	60bb      	str	r3, [r7, #8]

            while( pxEndPoint != NULL )
 800666c:	e025      	b.n	80066ba <vARPAgeCache+0x116>
            {
                if( ( pxEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) && ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8006674:	f003 0310 	and.w	r3, r3, #16
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b00      	cmp	r3, #0
 800667c:	d019      	beq.n	80066b2 <vARPAgeCache+0x10e>
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d015      	beq.n	80066b2 <vARPAgeCache+0x10e>
                {
                    /* Case default is never toggled because IPv6 flag can be TRUE or FALSE */
                    switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800668c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d002      	beq.n	800669c <vARPAgeCache+0xf8>
 8006696:	2b01      	cmp	r3, #1
 8006698:	d007      	beq.n	80066aa <vARPAgeCache+0x106>
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        default: /* LCOV_EXCL_LINE */
                            /* Shouldn't reach here */
                            /* MISRA 16.4 Compliance */
                            break; /* LCOV_EXCL_LINE */
 800669a:	e00a      	b.n	80066b2 <vARPAgeCache+0x10e>
                                FreeRTOS_OutputARPRequest_Multi( pxEndPoint, pxEndPoint->ipv4_settings.ulIPAddress );
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4619      	mov	r1, r3
 80066a2:	68b8      	ldr	r0, [r7, #8]
 80066a4:	f000 f81a 	bl	80066dc <FreeRTOS_OutputARPRequest_Multi>
                                break;
 80066a8:	e003      	b.n	80066b2 <vARPAgeCache+0x10e>
                                FreeRTOS_OutputAdvertiseIPv6( pxEndPoint );
 80066aa:	68b8      	ldr	r0, [r7, #8]
 80066ac:	f005 f822 	bl	800b6f4 <FreeRTOS_OutputAdvertiseIPv6>
                                break;
 80066b0:	bf00      	nop
                    }
                }

                pxEndPoint = pxEndPoint->pxNext;
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80066b8:	60bb      	str	r3, [r7, #8]
            while( pxEndPoint != NULL )
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1d6      	bne.n	800666e <vARPAgeCache+0xca>
            }

            xLastGratuitousARPTime = xTimeNow;
 80066c0:	4a04      	ldr	r2, [pc, #16]	@ (80066d4 <vARPAgeCache+0x130>)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6013      	str	r3, [r2, #0]
        }
    }
 80066c6:	bf00      	nop
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	20000c0c 	.word	0x20000c0c
 80066d4:	20000c6c 	.word	0x20000c6c
 80066d8:	200011d0 	.word	0x200011d0

080066dc <FreeRTOS_OutputARPRequest_Multi>:
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest_Multi( NetworkEndPoint_t * pxEndPoint,
                                          uint32_t ulIPAddress )
    {
 80066dc:	b580      	push	{r7, lr}
 80066de:	b086      	sub	sp, #24
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80066ec:	f003 0304 	and.w	r3, r3, #4
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d156      	bne.n	80067a4 <FreeRTOS_OutputARPRequest_Multi+0xc8>
            ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d052      	beq.n	80067a4 <FreeRTOS_OutputARPRequest_Multi+0xc8>
        {
            /* This is called from the context of the IP event task, so a block time
             * must not be used. */
            pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0U );
 80066fe:	2100      	movs	r1, #0
 8006700:	202a      	movs	r0, #42	@ 0x2a
 8006702:	f00f fdc1 	bl	8016288 <pxGetNetworkBufferWithDescriptor>
 8006706:	6138      	str	r0, [r7, #16]

            if( pxNetworkBuffer != NULL )
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d04a      	beq.n	80067a4 <FreeRTOS_OutputARPRequest_Multi+0xc8>
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	615a      	str	r2, [r3, #20]
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	631a      	str	r2, [r3, #48]	@ 0x30
                pxNetworkBuffer->pxInterface = pxEndPoint->pxNetworkInterface;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	62da      	str	r2, [r3, #44]	@ 0x2c
                vARPGenerateRequestPacket( pxNetworkBuffer );
 8006724:	6938      	ldr	r0, [r7, #16]
 8006726:	f000 f855 	bl	80067d4 <vARPGenerateRequestPacket>

                #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
                {
                    if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800672e:	2b3b      	cmp	r3, #59	@ 0x3b
 8006730:	d812      	bhi.n	8006758 <FreeRTOS_OutputARPRequest_Multi+0x7c>
                    {
                        BaseType_t xIndex;

                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006736:	617b      	str	r3, [r7, #20]
 8006738:	e008      	b.n	800674c <FreeRTOS_OutputARPRequest_Multi+0x70>
                        {
                            pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	4413      	add	r3, r2
 8006742:	2200      	movs	r2, #0
 8006744:	701a      	strb	r2, [r3, #0]
                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	3301      	adds	r3, #1
 800674a:	617b      	str	r3, [r7, #20]
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	2b3b      	cmp	r3, #59	@ 0x3b
 8006750:	ddf3      	ble.n	800673a <FreeRTOS_OutputARPRequest_Multi+0x5e>
                        }

                        pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	223c      	movs	r2, #60	@ 0x3c
 8006756:	629a      	str	r2, [r3, #40]	@ 0x28
                    }
                }
                #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

                if( xIsCallingFromIPTask() != pdFALSE )
 8006758:	f002 ff7c 	bl	8009654 <xIsCallingFromIPTask>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00f      	beq.n	8006782 <FreeRTOS_OutputARPRequest_Multi+0xa6>
                {
                    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

                    /* Only the IP-task is allowed to call this function directly. */
                    if( pxEndPoint->pxNetworkInterface != NULL )
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8006768:	2b00      	cmp	r3, #0
 800676a:	d01b      	beq.n	80067a4 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                    {
                        ( void ) pxEndPoint->pxNetworkInterface->pfOutput( pxEndPoint->pxNetworkInterface, pxNetworkBuffer, pdTRUE );
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	f8d2 0120 	ldr.w	r0, [r2, #288]	@ 0x120
 800677a:	2201      	movs	r2, #1
 800677c:	6939      	ldr	r1, [r7, #16]
 800677e:	4798      	blx	r3
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
                    }
                }
            }
        }
    }
 8006780:	e010      	b.n	80067a4 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                    xSendEvent.eEventType = eNetworkTxEvent;
 8006782:	2302      	movs	r3, #2
 8006784:	723b      	strb	r3, [r7, #8]
                    xSendEvent.pvData = pxNetworkBuffer;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	60fb      	str	r3, [r7, #12]
                    if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800678a:	f107 0308 	add.w	r3, r7, #8
 800678e:	f04f 31ff 	mov.w	r1, #4294967295
 8006792:	4618      	mov	r0, r3
 8006794:	f002 f81c 	bl	80087d0 <xSendEventStructToIPTask>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d102      	bne.n	80067a4 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800679e:	6938      	ldr	r0, [r7, #16]
 80067a0:	f00f fdda 	bl	8016358 <vReleaseNetworkBufferAndDescriptor>
    }
 80067a4:	bf00      	nop
 80067a6:	3718      	adds	r7, #24
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <FreeRTOS_OutputARPRequest>:
 *
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
    {
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
        /* Its assumed that IPv4 endpoints belonging to different physical interface
         * in the system will have a different subnet, but endpoints on same interface
         * may have it. */
        NetworkEndPoint_t * pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulIPAddress, 12 );
 80067b4:	210c      	movs	r1, #12
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f006 f82e 	bl	800c818 <FreeRTOS_FindEndPointOnNetMask>
 80067bc:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d003      	beq.n	80067cc <FreeRTOS_OutputARPRequest+0x20>
        {
            FreeRTOS_OutputARPRequest_Multi( pxEndPoint, ulIPAddress );
 80067c4:	6879      	ldr	r1, [r7, #4]
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f7ff ff88 	bl	80066dc <FreeRTOS_OutputARPRequest_Multi>
        }
    }
 80067cc:	bf00      	nop
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <vARPGenerateRequestPacket>:
 *
 * @param[in,out] pxNetworkBuffer Pointer to the buffer which has to be filled with
 *                             the ARP request packet details.
 */
    void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
        void * pvCopyDest;

        /* Buffer allocation ensures that buffers always have space
         * for an ARP packet. See buffer allocation implementations 1
         * and 2 under portable/BufferManagement. */
        configASSERT( pxNetworkBuffer != NULL );
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d104      	bne.n	80067ec <vARPGenerateRequestPacket+0x18>
 80067e2:	f240 51b1 	movw	r1, #1457	@ 0x5b1
 80067e6:	4828      	ldr	r0, [pc, #160]	@ (8006888 <vARPGenerateRequestPacket+0xb4>)
 80067e8:	f7fa fc96 	bl	8001118 <vAssertCalled>
        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) );
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f0:	2b29      	cmp	r3, #41	@ 0x29
 80067f2:	d804      	bhi.n	80067fe <vARPGenerateRequestPacket+0x2a>
 80067f4:	f240 51b2 	movw	r1, #1458	@ 0x5b2
 80067f8:	4823      	ldr	r0, [pc, #140]	@ (8006888 <vARPGenerateRequestPacket+0xb4>)
 80067fa:	f7fa fc8d 	bl	8001118 <vAssertCalled>
        configASSERT( pxNetworkBuffer->pxEndPoint != NULL );
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006802:	2b00      	cmp	r3, #0
 8006804:	d104      	bne.n	8006810 <vARPGenerateRequestPacket+0x3c>
 8006806:	f240 51b3 	movw	r1, #1459	@ 0x5b3
 800680a:	481f      	ldr	r0, [pc, #124]	@ (8006888 <vARPGenerateRequestPacket+0xb4>)
 800680c:	f7fa fc84 	bl	8001118 <vAssertCalled>

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxARPPacket = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006814:	617b      	str	r3, [r7, #20]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = xDefaultPartARPPacketHeader;
 8006816:	4b1d      	ldr	r3, [pc, #116]	@ (800688c <vARPGenerateRequestPacket+0xb8>)
 8006818:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket;
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartARPPacketHeader ) );
 800681e:	2226      	movs	r2, #38	@ 0x26
 8006820:	6939      	ldr	r1, [r7, #16]
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f01a f89e 	bl	8020964 <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800682c:	33e8      	adds	r3, #232	@ 0xe8
 800682e:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes;
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	3306      	adds	r3, #6
 8006834:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8006836:	2206      	movs	r2, #6
 8006838:	6939      	ldr	r1, [r7, #16]
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f01a f892 	bl	8020964 <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006844:	33e8      	adds	r3, #232	@ 0xe8
 8006846:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	3316      	adds	r3, #22
 800684c:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 800684e:	2206      	movs	r2, #6
 8006850:	6939      	ldr	r1, [r7, #16]
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f01a f886 	bl	8020964 <memcpy>

        pvCopySource = &( pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress );
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800685c:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xARPHeader.ucSenderProtocolAddress;
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	331c      	adds	r3, #28
 8006862:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	461a      	mov	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	601a      	str	r2, [r3, #0]
        pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	695a      	ldr	r2, [r3, #20]
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26

        pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	222a      	movs	r2, #42	@ 0x2a
 800687c:	629a      	str	r2, [r3, #40]	@ 0x28

        iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );
    }
 800687e:	bf00      	nop
 8006880:	3718      	adds	r7, #24
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	08022928 	.word	0x08022928
 800688c:	08025b8c 	.word	0x08025b8c

08006890 <FreeRTOS_ClearARP>:
 * @brief A call to this function will clear the ARP cache.
 * @param[in] pxEndPoint only clean entries with this end-point, or when NULL,
 *                        clear the entire ARP cache.
 */
void FreeRTOS_ClearARP( const struct xNetworkEndPoint * pxEndPoint )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
    if( pxEndPoint != NULL )
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d01b      	beq.n	80068d6 <FreeRTOS_ClearARP+0x46>
    {
        BaseType_t x;

        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800689e:	2300      	movs	r3, #0
 80068a0:	60fb      	str	r3, [r7, #12]
 80068a2:	e014      	b.n	80068ce <FreeRTOS_ClearARP+0x3e>
        {
            if( xARPCache[ x ].pxEndPoint == pxEndPoint )
 80068a4:	4a10      	ldr	r2, [pc, #64]	@ (80068e8 <FreeRTOS_ClearARP+0x58>)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	011b      	lsls	r3, r3, #4
 80068aa:	4413      	add	r3, r2
 80068ac:	330c      	adds	r3, #12
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d108      	bne.n	80068c8 <FreeRTOS_ClearARP+0x38>
            {
                ( void ) memset( &( xARPCache[ x ] ), 0, sizeof( ARPCacheRow_t ) );
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	011b      	lsls	r3, r3, #4
 80068ba:	4a0b      	ldr	r2, [pc, #44]	@ (80068e8 <FreeRTOS_ClearARP+0x58>)
 80068bc:	4413      	add	r3, r2
 80068be:	2210      	movs	r2, #16
 80068c0:	2100      	movs	r1, #0
 80068c2:	4618      	mov	r0, r3
 80068c4:	f01a f95b 	bl	8020b7e <memset>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	3301      	adds	r3, #1
 80068cc:	60fb      	str	r3, [r7, #12]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2b05      	cmp	r3, #5
 80068d2:	dde7      	ble.n	80068a4 <FreeRTOS_ClearARP+0x14>
    }
    else
    {
        ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
    }
}
 80068d4:	e004      	b.n	80068e0 <FreeRTOS_ClearARP+0x50>
        ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
 80068d6:	2260      	movs	r2, #96	@ 0x60
 80068d8:	2100      	movs	r1, #0
 80068da:	4803      	ldr	r0, [pc, #12]	@ (80068e8 <FreeRTOS_ClearARP+0x58>)
 80068dc:	f01a f94f 	bl	8020b7e <memset>
}
 80068e0:	bf00      	nop
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	20000c0c 	.word	0x20000c0c

080068ec <vDNSInitialise>:
    #if ( ipconfigDNS_USE_CALLBACKS == 1 )

/** @brief Initialise the list of call-back structures.
 */
        void vDNSInitialise( void )
        {
 80068ec:	b580      	push	{r7, lr}
 80068ee:	af00      	add	r7, sp, #0
            vDNSCallbackInitialise();
 80068f0:	f000 fc8a 	bl	8007208 <vDNSCallbackInitialise>
        }
 80068f4:	bf00      	nop
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <pxNew_AddrInfo>:
 * @return A pointer to the newly allocated struct, or NULL in case malloc failed..
 */
    struct freertos_addrinfo * pxNew_AddrInfo( const char * pcName,
                                               BaseType_t xFamily,
                                               const uint8_t * pucAddress )
    {
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b088      	sub	sp, #32
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
        struct freertos_addrinfo * pxAddrInfo = NULL;
 8006904:	2300      	movs	r3, #0
 8006906:	61fb      	str	r3, [r7, #28]
        void * pvBuffer;

        /* 'xFamily' might not be used when IPv6 is disabled. */
        ( void ) xFamily;
        pvBuffer = pvPortMalloc( sizeof( *pxAddrInfo ) );
 8006908:	2048      	movs	r0, #72	@ 0x48
 800690a:	f7fe fdeb 	bl	80054e4 <pvPortMalloc>
 800690e:	61b8      	str	r0, [r7, #24]

        if( pvBuffer != NULL )
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d057      	beq.n	80069c6 <pxNew_AddrInfo+0xce>
        {
            pxAddrInfo = ( struct freertos_addrinfo * ) pvBuffer;
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	61fb      	str	r3, [r7, #28]

            ( void ) memset( pxAddrInfo, 0, sizeof( *pxAddrInfo ) );
 800691a:	2248      	movs	r2, #72	@ 0x48
 800691c:	2100      	movs	r1, #0
 800691e:	69f8      	ldr	r0, [r7, #28]
 8006920:	f01a f92d 	bl	8020b7e <memset>
            #if ( ipconfigUSE_DNS_CACHE != 0 )
                pxAddrInfo->ai_canonname = pxAddrInfo->xPrivateStorage.ucName;
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	619a      	str	r2, [r3, #24]
                ( void ) strncpy( pxAddrInfo->xPrivateStorage.ucName, pcName, sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U );
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	3338      	adds	r3, #56	@ 0x38
 8006932:	220f      	movs	r2, #15
 8006934:	68f9      	ldr	r1, [r7, #12]
 8006936:	4618      	mov	r0, r3
 8006938:	f01a ffee 	bl	8021918 <strncpy>
                pxAddrInfo->xPrivateStorage.ucName[ sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U ] = '\0';
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
            #endif /* (ipconfigUSE_DNS_CACHE != 0 ) */

            pxAddrInfo->ai_addr = ( ( struct freertos_sockaddr * ) &( pxAddrInfo->xPrivateStorage.sockaddr ) );
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	f103 0220 	add.w	r2, r3, #32
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	615a      	str	r2, [r3, #20]

            switch( xFamily )
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	2b02      	cmp	r3, #2
 8006952:	d003      	beq.n	800695c <pxNew_AddrInfo+0x64>
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	2b0a      	cmp	r3, #10
 8006958:	d01e      	beq.n	8006998 <pxNew_AddrInfo+0xa0>
 800695a:	e02b      	b.n	80069b4 <pxNew_AddrInfo+0xbc>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                       {
                           /* ulChar2u32 reads from big-endian to host-endian. */
                           uint32_t ulIPAddress = ulChar2u32( pucAddress );
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f003 f87d 	bl	8009a5c <ulChar2u32>
 8006962:	6178      	str	r0, [r7, #20]
                           /* Translate to network-endian. */
                           pxAddrInfo->ai_addr->sin_address.ulIP_IPv4 = FreeRTOS_htonl( ulIPAddress );
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	061a      	lsls	r2, r3, #24
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	021b      	lsls	r3, r3, #8
 800696c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006970:	431a      	orrs	r2, r3
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	0a1b      	lsrs	r3, r3, #8
 8006976:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800697a:	ea42 0103 	orr.w	r1, r2, r3
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	0e1a      	lsrs	r2, r3, #24
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	430a      	orrs	r2, r1
 8006988:	609a      	str	r2, [r3, #8]
                           pxAddrInfo->ai_family = FREERTOS_AF_INET4;
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	2202      	movs	r2, #2
 800698e:	605a      	str	r2, [r3, #4]
                           pxAddrInfo->ai_addrlen = ipSIZE_OF_IPv4_ADDRESS;
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	2204      	movs	r2, #4
 8006994:	611a      	str	r2, [r3, #16]
                       }
                       break;
 8006996:	e016      	b.n	80069c6 <pxNew_AddrInfo+0xce>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        pxAddrInfo->ai_family = FREERTOS_AF_INET6;
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	220a      	movs	r2, #10
 800699c:	605a      	str	r2, [r3, #4]
                        pxAddrInfo->ai_addrlen = ipSIZE_OF_IPv6_ADDRESS;
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	2210      	movs	r2, #16
 80069a2:	611a      	str	r2, [r3, #16]
                        ( void ) memcpy( pxAddrInfo->xPrivateStorage.sockaddr.sin_address.xIP_IPv6.ucBytes, pucAddress, ipSIZE_OF_IPv6_ADDRESS );
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	3328      	adds	r3, #40	@ 0x28
 80069a8:	2210      	movs	r2, #16
 80069aa:	6879      	ldr	r1, [r7, #4]
 80069ac:	4618      	mov	r0, r3
 80069ae:	f019 ffd9 	bl	8020964 <memcpy>
                        break;
 80069b2:	e008      	b.n	80069c6 <pxNew_AddrInfo+0xce>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "pxNew_AddrInfo: Undefined xFamily Type \n" ) );
 80069b4:	4806      	ldr	r0, [pc, #24]	@ (80069d0 <pxNew_AddrInfo+0xd8>)
 80069b6:	f019 fdb9 	bl	802052c <lUDPLoggingPrintf>

                    vPortFree( pvBuffer );
 80069ba:	69b8      	ldr	r0, [r7, #24]
 80069bc:	f7fe fe66 	bl	800568c <vPortFree>
                    pxAddrInfo = NULL;
 80069c0:	2300      	movs	r3, #0
 80069c2:	61fb      	str	r3, [r7, #28]

                    break;
 80069c4:	bf00      	nop
            }
        }

        return pxAddrInfo;
 80069c6:	69fb      	ldr	r3, [r7, #28]
    }
 80069c8:	4618      	mov	r0, r3
 80069ca:	3720      	adds	r7, #32
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	080229cc 	.word	0x080229cc

080069d4 <FreeRTOS_freeaddrinfo>:
/**
 * @brief Free a chain of structs of type 'freertos_addrinfo'.
 * @param[in] pxInfo The first find result.
 */
    void FreeRTOS_freeaddrinfo( struct freertos_addrinfo * pxInfo )
    {
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
        struct freertos_addrinfo * pxNext;
        struct freertos_addrinfo * pxIterator = pxInfo;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	60fb      	str	r3, [r7, #12]

        if( pxInfo != NULL )
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00b      	beq.n	80069fe <FreeRTOS_freeaddrinfo+0x2a>
        {
            while( pxIterator != NULL )
 80069e6:	e007      	b.n	80069f8 <FreeRTOS_freeaddrinfo+0x24>
            {
                pxNext = pxIterator->ai_next;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	69db      	ldr	r3, [r3, #28]
 80069ec:	60bb      	str	r3, [r7, #8]
                vPortFree( pxIterator );
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f7fe fe4c 	bl	800568c <vPortFree>
                pxIterator = pxNext;
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	60fb      	str	r3, [r7, #12]
            while( pxIterator != NULL )
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1f4      	bne.n	80069e8 <FreeRTOS_freeaddrinfo+0x14>
            }
        }
    }
 80069fe:	bf00      	nop
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <ulDNSHandlePacket>:
 * @param[in] pxNetworkBuffer The network buffer to be parsed.
 * @return Always pdFAIL to indicate that the packet was not consumed and must
 *         be released by the caller.
 */
    uint32_t ulDNSHandlePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b088      	sub	sp, #32
 8006a0a:	af02      	add	r7, sp, #8
 8006a0c:	6078      	str	r0, [r7, #4]
        uint8_t * pucPayLoadBuffer;
        size_t uxPayloadSize;
        size_t uxUDPPacketSize = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f002 fa92 	bl	8008f38 <uxIPHeaderSizePacket>
 8006a14:	4603      	mov	r3, r0
 8006a16:	3316      	adds	r3, #22
 8006a18:	617b      	str	r3, [r7, #20]

        /* Only proceed if the payload length indicated in the header
         * appears to be valid. */
        if( pxNetworkBuffer->xDataLength >= uxUDPPacketSize )
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d829      	bhi.n	8006a78 <ulDNSHandlePacket+0x72>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - uxUDPPacketSize;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	613b      	str	r3, [r7, #16]

            if( uxPayloadSize >= sizeof( DNSMessage_t ) )
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	2b0b      	cmp	r3, #11
 8006a32:	d921      	bls.n	8006a78 <ulDNSHandlePacket+0x72>
            {
                struct freertos_addrinfo * pxAddressInfo = NULL;
 8006a34:	2300      	movs	r3, #0
 8006a36:	60bb      	str	r3, [r7, #8]
                pucPayLoadBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPPacketSize ] );
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	4413      	add	r3, r2
 8006a40:	60fb      	str	r3, [r7, #12]
                /* The parameter pdFALSE indicates that the reply was not expected. */
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
                                            uxPayloadSize,
                                            &( pxAddressInfo ),
                                            pdFALSE,
                                            FreeRTOS_ntohs( pxNetworkBuffer->usPort ) );
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8006a46:	021b      	lsls	r3, r3, #8
 8006a48:	b21a      	sxth	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8006a4e:	0a1b      	lsrs	r3, r3, #8
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	b21b      	sxth	r3, r3
 8006a54:	4313      	orrs	r3, r2
 8006a56:	b21b      	sxth	r3, r3
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	f107 0208 	add.w	r2, r7, #8
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	2300      	movs	r3, #0
 8006a62:	6939      	ldr	r1, [r7, #16]
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f000 fcb5 	bl	80073d4 <DNS_ParseDNSReply>

                if( pxAddressInfo != NULL )
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d003      	beq.n	8006a78 <ulDNSHandlePacket+0x72>
                {
                    FreeRTOS_freeaddrinfo( pxAddressInfo );
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7ff ffae 	bl	80069d4 <FreeRTOS_freeaddrinfo>
                }
            }
        }

        /* The packet was not consumed. */
        return pdFAIL;
 8006a78:	2300      	movs	r3, #0
    }
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3718      	adds	r7, #24
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <FreeRTOS_dns_update>:
    BaseType_t FreeRTOS_dns_update( const char * pcName,
                                    IPv46_Address_t * pxIP,
                                    uint32_t ulTTL,
                                    BaseType_t xLookUp,
                                    struct freertos_addrinfo ** ppxAddressInfo )
    {
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b086      	sub	sp, #24
 8006a86:	af02      	add	r7, sp, #8
 8006a88:	60f8      	str	r0, [r7, #12]
 8006a8a:	60b9      	str	r1, [r7, #8]
 8006a8c:	607a      	str	r2, [r7, #4]
 8006a8e:	603b      	str	r3, [r7, #0]
        /* _HT_ we can as well remove the parameter 'xLookUp'. */
        ( void ) xLookUp;
        ( void ) FreeRTOS_ProcessDNSCache( pcName,
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	2300      	movs	r3, #0
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	68b9      	ldr	r1, [r7, #8]
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f000 f818 	bl	8006ad0 <FreeRTOS_ProcessDNSCache>
                                           pxIP,
                                           ulTTL,
                                           pdFALSE,
                                           ppxAddressInfo );
        return pdTRUE;
 8006aa0:	2301      	movs	r3, #1
    }
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
	...

08006aac <FreeRTOS_dnsclear>:
/**
 * @brief perform a dns clear in the local cache
 * @post the global structure \a xDNSCache is modified
 */
    void FreeRTOS_dnsclear( void )
    {
 8006aac:	b580      	push	{r7, lr}
 8006aae:	af00      	add	r7, sp, #0
        ( void ) memset( xDNSCache, 0x0, sizeof( xDNSCache ) );
 8006ab0:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	4804      	ldr	r0, [pc, #16]	@ (8006ac8 <FreeRTOS_dnsclear+0x1c>)
 8006ab8:	f01a f861 	bl	8020b7e <memset>
        uxFreeEntry = 0U;
 8006abc:	4b03      	ldr	r3, [pc, #12]	@ (8006acc <FreeRTOS_dnsclear+0x20>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	601a      	str	r2, [r3, #0]
    }
 8006ac2:	bf00      	nop
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	20000c7c 	.word	0x20000c7c
 8006acc:	20000e2c 	.word	0x20000e2c

08006ad0 <FreeRTOS_ProcessDNSCache>:
    BaseType_t FreeRTOS_ProcessDNSCache( const char * pcName,
                                         IPv46_Address_t * pxIP,
                                         uint32_t ulTTL,
                                         BaseType_t xLookUp,
                                         struct freertos_addrinfo ** ppxAddressInfo )
    {
 8006ad0:	b590      	push	{r4, r7, lr}
 8006ad2:	b09b      	sub	sp, #108	@ 0x6c
 8006ad4:	af02      	add	r7, sp, #8
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
 8006adc:	603b      	str	r3, [r7, #0]
        UBaseType_t uxIndex;
        BaseType_t xResult;
        /* Get the current time in clock-ticks. */
        TickType_t xCurrentTickCount = xTaskGetTickCount();
 8006ade:	f7fc fe95 	bl	800380c <xTaskGetTickCount>
 8006ae2:	65b8      	str	r0, [r7, #88]	@ 0x58
        /* In milliseconds. */
        uint32_t ulCurrentTimeSeconds;

        configASSERT( ( pcName != NULL ) );
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d103      	bne.n	8006af2 <FreeRTOS_ProcessDNSCache+0x22>
 8006aea:	21d8      	movs	r1, #216	@ 0xd8
 8006aec:	4841      	ldr	r0, [pc, #260]	@ (8006bf4 <FreeRTOS_ProcessDNSCache+0x124>)
 8006aee:	f7fa fb13 	bl	8001118 <vAssertCalled>

        if( xLookUp != pdFALSE )
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d002      	beq.n	8006afe <FreeRTOS_ProcessDNSCache+0x2e>
        {
            pxIP->xIPAddress.ulIP_IPv4 = 0U;
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2200      	movs	r2, #0
 8006afc:	601a      	str	r2, [r3, #0]
        }

        ulCurrentTimeSeconds = ( uint32_t ) ( ( xCurrentTickCount / portTICK_PERIOD_MS ) / 1000U );
 8006afe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006b00:	4a3d      	ldr	r2, [pc, #244]	@ (8006bf8 <FreeRTOS_ProcessDNSCache+0x128>)
 8006b02:	fba2 2303 	umull	r2, r3, r2, r3
 8006b06:	099b      	lsrs	r3, r3, #6
 8006b08:	657b      	str	r3, [r7, #84]	@ 0x54
        xResult = prvFindEntryIndex( pcName, pxIP, &uxIndex );
 8006b0a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006b0e:	461a      	mov	r2, r3
 8006b10:	68b9      	ldr	r1, [r7, #8]
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 f87a 	bl	8006c0c <prvFindEntryIndex>
 8006b18:	6538      	str	r0, [r7, #80]	@ 0x50

        if( xResult == pdTRUE )
 8006b1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d110      	bne.n	8006b42 <FreeRTOS_ProcessDNSCache+0x72>
        { /* Element found */
            /* Is this function called for a lookup or to add/update an IP address? */
            if( xLookUp == pdTRUE )
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d106      	bne.n	8006b34 <FreeRTOS_ProcessDNSCache+0x64>
            {
                /* This statement can only be reached when xResult is true; which
                 * implies that the entry is present and a 'get' operation will result
                 * in success. Therefore, it is safe to ignore the return value of the
                 * below function. */
                ( void ) prvGetCacheIPEntry( uxIndex,
 8006b26:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006b28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b2a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006b2c:	68b9      	ldr	r1, [r7, #8]
 8006b2e:	f000 f8b1 	bl	8006c94 <prvGetCacheIPEntry>
 8006b32:	e013      	b.n	8006b5c <FreeRTOS_ProcessDNSCache+0x8c>
                                             ulCurrentTimeSeconds,
                                             ppxAddressInfo );
            }
            else
            {
                prvUpdateCacheEntry( uxIndex,
 8006b34:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006b36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	6879      	ldr	r1, [r7, #4]
 8006b3c:	f000 f94a 	bl	8006dd4 <prvUpdateCacheEntry>
 8006b40:	e00c      	b.n	8006b5c <FreeRTOS_ProcessDNSCache+0x8c>
                                     ulCurrentTimeSeconds );
            }
        }
        else /* Element not Found xResult = pdFALSE */
        {
            if( xLookUp == pdTRUE )
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d103      	bne.n	8006b50 <FreeRTOS_ProcessDNSCache+0x80>
            {
                pxIP->xIPAddress.ulIP_IPv4 = 0U;
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	601a      	str	r2, [r3, #0]
 8006b4e:	e005      	b.n	8006b5c <FreeRTOS_ProcessDNSCache+0x8c>
            }
            else
            {
                prvInsertCacheEntry( pcName,
 8006b50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	6879      	ldr	r1, [r7, #4]
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f000 f994 	bl	8006e84 <prvInsertCacheEntry>
                                     ulCurrentTimeSeconds );
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            if( ( xLookUp == pdFALSE ) || ( pxIP->xIPAddress.ulIP_IPv4 != 0U ) )
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d003      	beq.n	8006b6a <FreeRTOS_ProcessDNSCache+0x9a>
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d03f      	beq.n	8006bea <FreeRTOS_ProcessDNSCache+0x11a>
            {
                char pcAddress[ 40 ];
                IP_Address_t xAddress;
                BaseType_t xFamily = FREERTOS_AF_INET;
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	65fb      	str	r3, [r7, #92]	@ 0x5c

                switch( pxIP->xIs_IPv6 )
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00c      	beq.n	8006b90 <FreeRTOS_ProcessDNSCache+0xc0>
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d10e      	bne.n	8006b98 <FreeRTOS_ProcessDNSCache+0xc8>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case pdTRUE:
                            ( void ) memcpy( xAddress.xIP_IPv6.ucBytes, pxIP->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8006b80:	6818      	ldr	r0, [r3, #0]
 8006b82:	6859      	ldr	r1, [r3, #4]
 8006b84:	689a      	ldr	r2, [r3, #8]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            xFamily = FREERTOS_AF_INET6;
 8006b8a:	230a      	movs	r3, #10
 8006b8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                            break;
 8006b8e:	e007      	b.n	8006ba0 <FreeRTOS_ProcessDNSCache+0xd0>
                    #endif /* if ( ipconfigUSE_IPv6 != 0 ) */

                    #if ( ipconfigUSE_IPv4 != 0 )
                        case pdFALSE:
                            xAddress.ulIP_IPv4 = pxIP->xIPAddress.ulIP_IPv4;
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
                            break;
 8006b96:	e003      	b.n	8006ba0 <FreeRTOS_ProcessDNSCache+0xd0>
                    #endif /* if ( ipconfigUSE_IPv4 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        FreeRTOS_debug_printf( ( "FreeRTOS_ProcessDNSCache: Undefined IP Type \n" ) );
 8006b98:	4818      	ldr	r0, [pc, #96]	@ (8006bfc <FreeRTOS_ProcessDNSCache+0x12c>)
 8006b9a:	f019 fcc7 	bl	802052c <lUDPLoggingPrintf>
                        break;
 8006b9e:	bf00      	nop
                }

                ( void ) FreeRTOS_inet_ntop( xFamily,
 8006ba0:	f107 0214 	add.w	r2, r7, #20
 8006ba4:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8006ba8:	2328      	movs	r3, #40	@ 0x28
 8006baa:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8006bac:	f007 fc62 	bl	800e474 <FreeRTOS_inet_ntop>
                                             ( const void * ) xAddress.xIP_IPv6.ucBytes,
                                             pcAddress,
                                             ( socklen_t ) sizeof( pcAddress ) );
                FreeRTOS_debug_printf( ( "FreeRTOS_ProcessDNSCache: %s: '%s' @ %s (TTL %u)\n",
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <FreeRTOS_ProcessDNSCache+0xea>
 8006bb6:	4912      	ldr	r1, [pc, #72]	@ (8006c00 <FreeRTOS_ProcessDNSCache+0x130>)
 8006bb8:	e000      	b.n	8006bbc <FreeRTOS_ProcessDNSCache+0xec>
 8006bba:	4912      	ldr	r1, [pc, #72]	@ (8006c04 <FreeRTOS_ProcessDNSCache+0x134>)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	061a      	lsls	r2, r3, #24
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	021b      	lsls	r3, r3, #8
 8006bc4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006bc8:	431a      	orrs	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	0a1b      	lsrs	r3, r3, #8
 8006bce:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	0e1b      	lsrs	r3, r3, #24
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	f107 0214 	add.w	r2, r7, #20
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	4613      	mov	r3, r2
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	4808      	ldr	r0, [pc, #32]	@ (8006c08 <FreeRTOS_ProcessDNSCache+0x138>)
 8006be6:	f019 fca1 	bl	802052c <lUDPLoggingPrintf>
                                         pcAddress,
                                         ( unsigned ) FreeRTOS_ntohl( ulTTL ) ) );
            }
        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

        return xResult;
 8006bea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
    }
 8006bec:	4618      	mov	r0, r3
 8006bee:	3764      	adds	r7, #100	@ 0x64
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd90      	pop	{r4, r7, pc}
 8006bf4:	08022c48 	.word	0x08022c48
 8006bf8:	10624dd3 	.word	0x10624dd3
 8006bfc:	08022c7c 	.word	0x08022c7c
 8006c00:	08022cac 	.word	0x08022cac
 8006c04:	08022cb4 	.word	0x08022cb4
 8006c08:	08022cb8 	.word	0x08022cb8

08006c0c <prvFindEntryIndex>:
 * @returns res pdTRUE if index in found else pdFALSE
 */
    static BaseType_t prvFindEntryIndex( const char * pcName,
                                         const IPv46_Address_t * pxIP,
                                         UBaseType_t * uxResult )
    {
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	617b      	str	r3, [r7, #20]
        UBaseType_t uxIndex;

        /* For each entry in the DNS cache table. */
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	613b      	str	r3, [r7, #16]
 8006c20:	e02d      	b.n	8006c7e <prvFindEntryIndex+0x72>
        {
            if( xDNSCache[ uxIndex ].pcName[ 0 ] == ( char ) 0 )
 8006c22:	4a1b      	ldr	r2, [pc, #108]	@ (8006c90 <prvFindEntryIndex+0x84>)
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	216c      	movs	r1, #108	@ 0x6c
 8006c28:	fb01 f303 	mul.w	r3, r1, r3
 8006c2c:	4413      	add	r3, r2
 8006c2e:	3350      	adds	r3, #80	@ 0x50
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d01f      	beq.n	8006c76 <prvFindEntryIndex+0x6a>
            { /* empty slot */
                continue;
            }

            if( strcmp( xDNSCache[ uxIndex ].pcName, pcName ) == 0 )
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	226c      	movs	r2, #108	@ 0x6c
 8006c3a:	fb02 f303 	mul.w	r3, r2, r3
 8006c3e:	3350      	adds	r3, #80	@ 0x50
 8006c40:	4a13      	ldr	r2, [pc, #76]	@ (8006c90 <prvFindEntryIndex+0x84>)
 8006c42:	4413      	add	r3, r2
 8006c44:	68f9      	ldr	r1, [r7, #12]
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7f9 fb4a 	bl	80002e0 <strcmp>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d112      	bne.n	8006c78 <prvFindEntryIndex+0x6c>
            { /* hostname found */
                /* IPv6 is enabled, See if the cache entry has the correct type. */
                if( pxIP->xIs_IPv6 == xDNSCache[ uxIndex ].xAddresses[ 0 ].xIs_IPv6 )
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	691a      	ldr	r2, [r3, #16]
 8006c56:	490e      	ldr	r1, [pc, #56]	@ (8006c90 <prvFindEntryIndex+0x84>)
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	206c      	movs	r0, #108	@ 0x6c
 8006c5c:	fb00 f303 	mul.w	r3, r0, r3
 8006c60:	440b      	add	r3, r1
 8006c62:	3310      	adds	r3, #16
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d106      	bne.n	8006c78 <prvFindEntryIndex+0x6c>
                {
                    xReturn = pdTRUE;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	617b      	str	r3, [r7, #20]
                    *uxResult = uxIndex;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	601a      	str	r2, [r3, #0]
                    break;
 8006c74:	e006      	b.n	8006c84 <prvFindEntryIndex+0x78>
                continue;
 8006c76:	bf00      	nop
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	613b      	str	r3, [r7, #16]
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	2b03      	cmp	r3, #3
 8006c82:	d9ce      	bls.n	8006c22 <prvFindEntryIndex+0x16>
                }
            }
        }

        return xReturn;
 8006c84:	697b      	ldr	r3, [r7, #20]
    }
 8006c86:	4618      	mov	r0, r3
 8006c88:	3718      	adds	r7, #24
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	20000c7c 	.word	0x20000c7c

08006c94 <prvGetCacheIPEntry>:

    static BaseType_t prvGetCacheIPEntry( UBaseType_t uxIndex,
                                          IPv46_Address_t * pxIP,
                                          uint32_t ulCurrentTimeSeconds,
                                          struct freertos_addrinfo ** ppxAddressInfo )
    {
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b088      	sub	sp, #32
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
 8006ca0:	603b      	str	r3, [r7, #0]
        BaseType_t isRead;
        uint32_t ulIPAddressIndex = 0;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	61bb      	str	r3, [r7, #24]
        uint32_t ulAge = ulCurrentTimeSeconds - xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds;
 8006ca6:	4a4a      	ldr	r2, [pc, #296]	@ (8006dd0 <prvGetCacheIPEntry+0x13c>)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	216c      	movs	r1, #108	@ 0x6c
 8006cac:	fb01 f303 	mul.w	r3, r1, r3
 8006cb0:	4413      	add	r3, r2
 8006cb2:	3364      	adds	r3, #100	@ 0x64
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	617b      	str	r3, [r7, #20]

        /* Confirm that the record is still fresh.
         * The field ulTTL was stored as network-endian. */
        if( ulAge < FreeRTOS_ntohl( xDNSCache[ uxIndex ].ulTTL ) )
 8006cbc:	4a44      	ldr	r2, [pc, #272]	@ (8006dd0 <prvGetCacheIPEntry+0x13c>)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	216c      	movs	r1, #108	@ 0x6c
 8006cc2:	fb01 f303 	mul.w	r3, r1, r3
 8006cc6:	4413      	add	r3, r2
 8006cc8:	3360      	adds	r3, #96	@ 0x60
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	061a      	lsls	r2, r3, #24
 8006cce:	4940      	ldr	r1, [pc, #256]	@ (8006dd0 <prvGetCacheIPEntry+0x13c>)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	206c      	movs	r0, #108	@ 0x6c
 8006cd4:	fb00 f303 	mul.w	r3, r0, r3
 8006cd8:	440b      	add	r3, r1
 8006cda:	3360      	adds	r3, #96	@ 0x60
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	021b      	lsls	r3, r3, #8
 8006ce0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006ce4:	431a      	orrs	r2, r3
 8006ce6:	493a      	ldr	r1, [pc, #232]	@ (8006dd0 <prvGetCacheIPEntry+0x13c>)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	206c      	movs	r0, #108	@ 0x6c
 8006cec:	fb00 f303 	mul.w	r3, r0, r3
 8006cf0:	440b      	add	r3, r1
 8006cf2:	3360      	adds	r3, #96	@ 0x60
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	0a1b      	lsrs	r3, r3, #8
 8006cf8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006cfc:	431a      	orrs	r2, r3
 8006cfe:	4934      	ldr	r1, [pc, #208]	@ (8006dd0 <prvGetCacheIPEntry+0x13c>)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	206c      	movs	r0, #108	@ 0x6c
 8006d04:	fb00 f303 	mul.w	r3, r0, r3
 8006d08:	440b      	add	r3, r1
 8006d0a:	3360      	adds	r3, #96	@ 0x60
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	0e1b      	lsrs	r3, r3, #24
 8006d10:	4313      	orrs	r3, r2
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d24a      	bcs.n	8006dae <prvGetCacheIPEntry+0x11a>
                /*  modulo it by the number of IP addresses to keep it in range.     */
                /*  Also perform a final modulo by the max number of IP addresses    */
                /*  per DNS cache entry to prevent out-of-bounds access in the event */
                /*  that ucNumIPAddresses has been corrupted.                        */

                ucIndex = xDNSCache[ uxIndex ].ucCurrentIPAddress % xDNSCache[ uxIndex ].ucNumIPAddresses;
 8006d18:	4a2d      	ldr	r2, [pc, #180]	@ (8006dd0 <prvGetCacheIPEntry+0x13c>)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	216c      	movs	r1, #108	@ 0x6c
 8006d1e:	fb01 f303 	mul.w	r3, r1, r3
 8006d22:	4413      	add	r3, r2
 8006d24:	3369      	adds	r3, #105	@ 0x69
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	4929      	ldr	r1, [pc, #164]	@ (8006dd0 <prvGetCacheIPEntry+0x13c>)
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	206c      	movs	r0, #108	@ 0x6c
 8006d2e:	fb00 f202 	mul.w	r2, r0, r2
 8006d32:	440a      	add	r2, r1
 8006d34:	3268      	adds	r2, #104	@ 0x68
 8006d36:	7812      	ldrb	r2, [r2, #0]
 8006d38:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d3c:	fb01 f202 	mul.w	r2, r1, r2
 8006d40:	1a9b      	subs	r3, r3, r2
 8006d42:	74fb      	strb	r3, [r7, #19]
                ucIndex = ucIndex % ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 8006d44:	7cfb      	ldrb	r3, [r7, #19]
 8006d46:	f003 0303 	and.w	r3, r3, #3
 8006d4a:	74fb      	strb	r3, [r7, #19]
                ulIPAddressIndex = ucIndex;
 8006d4c:	7cfb      	ldrb	r3, [r7, #19]
 8006d4e:	61bb      	str	r3, [r7, #24]

                xDNSCache[ uxIndex ].ucCurrentIPAddress++;
 8006d50:	4a1f      	ldr	r2, [pc, #124]	@ (8006dd0 <prvGetCacheIPEntry+0x13c>)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	216c      	movs	r1, #108	@ 0x6c
 8006d56:	fb01 f303 	mul.w	r3, r1, r3
 8006d5a:	4413      	add	r3, r2
 8006d5c:	3369      	adds	r3, #105	@ 0x69
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	3301      	adds	r3, #1
 8006d62:	b2d8      	uxtb	r0, r3
 8006d64:	4a1a      	ldr	r2, [pc, #104]	@ (8006dd0 <prvGetCacheIPEntry+0x13c>)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	216c      	movs	r1, #108	@ 0x6c
 8006d6a:	fb01 f303 	mul.w	r3, r1, r3
 8006d6e:	4413      	add	r3, r2
 8006d70:	3369      	adds	r3, #105	@ 0x69
 8006d72:	4602      	mov	r2, r0
 8006d74:	701a      	strb	r2, [r3, #0]
            #endif /* if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

            ( void ) memcpy( pxIP, &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), sizeof( *pxIP ) );
 8006d76:	69ba      	ldr	r2, [r7, #24]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	4413      	add	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	216c      	movs	r1, #108	@ 0x6c
 8006d84:	fb01 f202 	mul.w	r2, r1, r2
 8006d88:	4413      	add	r3, r2
 8006d8a:	4a11      	ldr	r2, [pc, #68]	@ (8006dd0 <prvGetCacheIPEntry+0x13c>)
 8006d8c:	4413      	add	r3, r2
 8006d8e:	2214      	movs	r2, #20
 8006d90:	4619      	mov	r1, r3
 8006d92:	68b8      	ldr	r0, [r7, #8]
 8006d94:	f019 fde6 	bl	8020964 <memcpy>
            isRead = pdTRUE;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	61fb      	str	r3, [r7, #28]

            if( ppxAddressInfo != NULL )
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d010      	beq.n	8006dc4 <prvGetCacheIPEntry+0x130>
            {
                /* Copy all entries from position 'uxIndex' to a linked struct addrinfo. */
                prvReadDNSCache( ( BaseType_t ) uxIndex, ppxAddressInfo );
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6839      	ldr	r1, [r7, #0]
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 f8dc 	bl	8006f64 <prvReadDNSCache>
 8006dac:	e00a      	b.n	8006dc4 <prvGetCacheIPEntry+0x130>
            }
        }
        else
        {
            /* Age out the old cached record. */
            xDNSCache[ uxIndex ].pcName[ 0 ] = ( char ) 0;
 8006dae:	4a08      	ldr	r2, [pc, #32]	@ (8006dd0 <prvGetCacheIPEntry+0x13c>)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	216c      	movs	r1, #108	@ 0x6c
 8006db4:	fb01 f303 	mul.w	r3, r1, r3
 8006db8:	4413      	add	r3, r2
 8006dba:	3350      	adds	r3, #80	@ 0x50
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	701a      	strb	r2, [r3, #0]
            isRead = pdFALSE;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	61fb      	str	r3, [r7, #28]
        }

        return isRead;
 8006dc4:	69fb      	ldr	r3, [r7, #28]
    }
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3720      	adds	r7, #32
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	20000c7c 	.word	0x20000c7c

08006dd4 <prvUpdateCacheEntry>:
 */
    static void prvUpdateCacheEntry( UBaseType_t uxIndex,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
 8006de0:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddressIndex = 0;
 8006de2:	2300      	movs	r3, #0
 8006de4:	617b      	str	r3, [r7, #20]

        #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
            if( xDNSCache[ uxIndex ].ucNumIPAddresses <
 8006de6:	4a26      	ldr	r2, [pc, #152]	@ (8006e80 <prvUpdateCacheEntry+0xac>)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	216c      	movs	r1, #108	@ 0x6c
 8006dec:	fb01 f303 	mul.w	r3, r1, r3
 8006df0:	4413      	add	r3, r2
 8006df2:	3368      	adds	r3, #104	@ 0x68
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	2b03      	cmp	r3, #3
 8006df8:	d81b      	bhi.n	8006e32 <prvUpdateCacheEntry+0x5e>
                ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY )
            {
                /* If more answers exist than there are IP address storage
                 * slots they will overwrite entry 0 */
                ulIPAddressIndex = xDNSCache[ uxIndex ].ucNumIPAddresses;
 8006dfa:	4a21      	ldr	r2, [pc, #132]	@ (8006e80 <prvUpdateCacheEntry+0xac>)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	216c      	movs	r1, #108	@ 0x6c
 8006e00:	fb01 f303 	mul.w	r3, r1, r3
 8006e04:	4413      	add	r3, r2
 8006e06:	3368      	adds	r3, #104	@ 0x68
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	617b      	str	r3, [r7, #20]
                xDNSCache[ uxIndex ].ucNumIPAddresses++;
 8006e0c:	4a1c      	ldr	r2, [pc, #112]	@ (8006e80 <prvUpdateCacheEntry+0xac>)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	216c      	movs	r1, #108	@ 0x6c
 8006e12:	fb01 f303 	mul.w	r3, r1, r3
 8006e16:	4413      	add	r3, r2
 8006e18:	3368      	adds	r3, #104	@ 0x68
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	b2d8      	uxtb	r0, r3
 8006e20:	4a17      	ldr	r2, [pc, #92]	@ (8006e80 <prvUpdateCacheEntry+0xac>)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	216c      	movs	r1, #108	@ 0x6c
 8006e26:	fb01 f303 	mul.w	r3, r1, r3
 8006e2a:	4413      	add	r3, r2
 8006e2c:	3368      	adds	r3, #104	@ 0x68
 8006e2e:	4602      	mov	r2, r0
 8006e30:	701a      	strb	r2, [r3, #0]
            }
        #endif
        ( void ) memcpy( &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), pxIP, sizeof( *pxIP ) );
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	4613      	mov	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	216c      	movs	r1, #108	@ 0x6c
 8006e40:	fb01 f202 	mul.w	r2, r1, r2
 8006e44:	4413      	add	r3, r2
 8006e46:	4a0e      	ldr	r2, [pc, #56]	@ (8006e80 <prvUpdateCacheEntry+0xac>)
 8006e48:	4413      	add	r3, r2
 8006e4a:	2214      	movs	r2, #20
 8006e4c:	6879      	ldr	r1, [r7, #4]
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f019 fd88 	bl	8020964 <memcpy>
        xDNSCache[ uxIndex ].ulTTL = ulTTL;
 8006e54:	4a0a      	ldr	r2, [pc, #40]	@ (8006e80 <prvUpdateCacheEntry+0xac>)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	216c      	movs	r1, #108	@ 0x6c
 8006e5a:	fb01 f303 	mul.w	r3, r1, r3
 8006e5e:	4413      	add	r3, r2
 8006e60:	3360      	adds	r3, #96	@ 0x60
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	601a      	str	r2, [r3, #0]
        xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 8006e66:	4a06      	ldr	r2, [pc, #24]	@ (8006e80 <prvUpdateCacheEntry+0xac>)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	216c      	movs	r1, #108	@ 0x6c
 8006e6c:	fb01 f303 	mul.w	r3, r1, r3
 8006e70:	4413      	add	r3, r2
 8006e72:	3364      	adds	r3, #100	@ 0x64
 8006e74:	683a      	ldr	r2, [r7, #0]
 8006e76:	601a      	str	r2, [r3, #0]
    }
 8006e78:	bf00      	nop
 8006e7a:	3718      	adds	r7, #24
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	20000c7c 	.word	0x20000c7c

08006e84 <prvInsertCacheEntry>:
 */
    static void prvInsertCacheEntry( const char * pcName,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
 8006e90:	603b      	str	r3, [r7, #0]
        /* Add or update the item. */
        if( strlen( pcName ) < ( size_t ) ipconfigDNS_CACHE_NAME_LENGTH )
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f7f9 fa2e 	bl	80002f4 <strlen>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b0f      	cmp	r3, #15
 8006e9c:	d859      	bhi.n	8006f52 <prvInsertCacheEntry+0xce>
        {
            ( void ) strncpy( xDNSCache[ uxFreeEntry ].pcName, pcName, ipconfigDNS_CACHE_NAME_LENGTH );
 8006e9e:	4b2f      	ldr	r3, [pc, #188]	@ (8006f5c <prvInsertCacheEntry+0xd8>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	226c      	movs	r2, #108	@ 0x6c
 8006ea4:	fb02 f303 	mul.w	r3, r2, r3
 8006ea8:	3350      	adds	r3, #80	@ 0x50
 8006eaa:	4a2d      	ldr	r2, [pc, #180]	@ (8006f60 <prvInsertCacheEntry+0xdc>)
 8006eac:	4413      	add	r3, r2
 8006eae:	2210      	movs	r2, #16
 8006eb0:	68f9      	ldr	r1, [r7, #12]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f01a fd30 	bl	8021918 <strncpy>
            ( void ) memcpy( &( xDNSCache[ uxFreeEntry ].xAddresses[ 0 ] ), pxIP, sizeof( *pxIP ) );
 8006eb8:	4b28      	ldr	r3, [pc, #160]	@ (8006f5c <prvInsertCacheEntry+0xd8>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	226c      	movs	r2, #108	@ 0x6c
 8006ebe:	fb02 f303 	mul.w	r3, r2, r3
 8006ec2:	4a27      	ldr	r2, [pc, #156]	@ (8006f60 <prvInsertCacheEntry+0xdc>)
 8006ec4:	4413      	add	r3, r2
 8006ec6:	2214      	movs	r2, #20
 8006ec8:	6879      	ldr	r1, [r7, #4]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f019 fd4a 	bl	8020964 <memcpy>


            xDNSCache[ uxFreeEntry ].ulTTL = ulTTL;
 8006ed0:	4b22      	ldr	r3, [pc, #136]	@ (8006f5c <prvInsertCacheEntry+0xd8>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a22      	ldr	r2, [pc, #136]	@ (8006f60 <prvInsertCacheEntry+0xdc>)
 8006ed6:	216c      	movs	r1, #108	@ 0x6c
 8006ed8:	fb01 f303 	mul.w	r3, r1, r3
 8006edc:	4413      	add	r3, r2
 8006ede:	3360      	adds	r3, #96	@ 0x60
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	601a      	str	r2, [r3, #0]
            xDNSCache[ uxFreeEntry ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 8006ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8006f5c <prvInsertCacheEntry+0xd8>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8006f60 <prvInsertCacheEntry+0xdc>)
 8006eea:	216c      	movs	r1, #108	@ 0x6c
 8006eec:	fb01 f303 	mul.w	r3, r1, r3
 8006ef0:	4413      	add	r3, r2
 8006ef2:	3364      	adds	r3, #100	@ 0x64
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	601a      	str	r2, [r3, #0]
            #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
                xDNSCache[ uxFreeEntry ].ucNumIPAddresses = 1;
 8006ef8:	4b18      	ldr	r3, [pc, #96]	@ (8006f5c <prvInsertCacheEntry+0xd8>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a18      	ldr	r2, [pc, #96]	@ (8006f60 <prvInsertCacheEntry+0xdc>)
 8006efe:	216c      	movs	r1, #108	@ 0x6c
 8006f00:	fb01 f303 	mul.w	r3, r1, r3
 8006f04:	4413      	add	r3, r2
 8006f06:	3368      	adds	r3, #104	@ 0x68
 8006f08:	2201      	movs	r2, #1
 8006f0a:	701a      	strb	r2, [r3, #0]
                xDNSCache[ uxFreeEntry ].ucCurrentIPAddress = 0;
 8006f0c:	4b13      	ldr	r3, [pc, #76]	@ (8006f5c <prvInsertCacheEntry+0xd8>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a13      	ldr	r2, [pc, #76]	@ (8006f60 <prvInsertCacheEntry+0xdc>)
 8006f12:	216c      	movs	r1, #108	@ 0x6c
 8006f14:	fb01 f303 	mul.w	r3, r1, r3
 8006f18:	4413      	add	r3, r2
 8006f1a:	3369      	adds	r3, #105	@ 0x69
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	701a      	strb	r2, [r3, #0]

                /* Initialize all remaining IP addresses in this entry to 0 */
                ( void ) memset( &xDNSCache[ uxFreeEntry ].xAddresses[ 1 ],
 8006f20:	4b0e      	ldr	r3, [pc, #56]	@ (8006f5c <prvInsertCacheEntry+0xd8>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	226c      	movs	r2, #108	@ 0x6c
 8006f26:	fb02 f303 	mul.w	r3, r2, r3
 8006f2a:	3314      	adds	r3, #20
 8006f2c:	4a0c      	ldr	r2, [pc, #48]	@ (8006f60 <prvInsertCacheEntry+0xdc>)
 8006f2e:	4413      	add	r3, r2
 8006f30:	223c      	movs	r2, #60	@ 0x3c
 8006f32:	2100      	movs	r1, #0
 8006f34:	4618      	mov	r0, r3
 8006f36:	f019 fe22 	bl	8020b7e <memset>
                                 0,
                                 sizeof( xDNSCache[ uxFreeEntry ].xAddresses[ 1 ] ) *
                                 ( ( uint32_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY - 1U ) );
            #endif
            uxFreeEntry++;
 8006f3a:	4b08      	ldr	r3, [pc, #32]	@ (8006f5c <prvInsertCacheEntry+0xd8>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	4a06      	ldr	r2, [pc, #24]	@ (8006f5c <prvInsertCacheEntry+0xd8>)
 8006f42:	6013      	str	r3, [r2, #0]

            if( uxFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 8006f44:	4b05      	ldr	r3, [pc, #20]	@ (8006f5c <prvInsertCacheEntry+0xd8>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2b04      	cmp	r3, #4
 8006f4a:	d102      	bne.n	8006f52 <prvInsertCacheEntry+0xce>
            {
                uxFreeEntry = 0;
 8006f4c:	4b03      	ldr	r3, [pc, #12]	@ (8006f5c <prvInsertCacheEntry+0xd8>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	601a      	str	r2, [r3, #0]
            }
        }
    }
 8006f52:	bf00      	nop
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	20000e2c 	.word	0x20000e2c
 8006f60:	20000c7c 	.word	0x20000c7c

08006f64 <prvReadDNSCache>:
 * @param[in] uxIndex The index from where entries must be copied.
 * @param[out] ppxAddressInfo Target to store the DNS entries.
 */
    static void prvReadDNSCache( BaseType_t uxIndex,
                                 struct freertos_addrinfo ** ppxAddressInfo )
    {
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b088      	sub	sp, #32
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
        size_t uxIPAddressIndex;
        size_t uxNumIPAddresses = 1U;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	61bb      	str	r3, [r7, #24]
        const IPv46_Address_t * pxAddresses;
        struct freertos_addrinfo * pxNewAddress = NULL;
 8006f72:	2300      	movs	r3, #0
 8006f74:	617b      	str	r3, [r7, #20]
        struct freertos_addrinfo ** ppxLastAddress = ppxAddressInfo;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	613b      	str	r3, [r7, #16]

        #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
            uxNumIPAddresses = ( size_t ) xDNSCache[ uxIndex ].ucNumIPAddresses;
 8006f7a:	4a2e      	ldr	r2, [pc, #184]	@ (8007034 <prvReadDNSCache+0xd0>)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	216c      	movs	r1, #108	@ 0x6c
 8006f80:	fb01 f303 	mul.w	r3, r1, r3
 8006f84:	4413      	add	r3, r2
 8006f86:	3368      	adds	r3, #104	@ 0x68
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	61bb      	str	r3, [r7, #24]

            if( uxNumIPAddresses > ( size_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY )
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	2b04      	cmp	r3, #4
 8006f90:	d901      	bls.n	8006f96 <prvReadDNSCache+0x32>
            {
                /* Make this a configASSERT()? */
                uxNumIPAddresses = ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 8006f92:	2304      	movs	r3, #4
 8006f94:	61bb      	str	r3, [r7, #24]
            }
        #endif /* ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 8006f96:	2300      	movs	r3, #0
 8006f98:	61fb      	str	r3, [r7, #28]
 8006f9a:	e041      	b.n	8007020 <prvReadDNSCache+0xbc>
        {
            pxAddresses = &( xDNSCache[ uxIndex ].xAddresses[ uxIPAddressIndex ] );
 8006f9c:	69fa      	ldr	r2, [r7, #28]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4413      	add	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	216c      	movs	r1, #108	@ 0x6c
 8006faa:	fb01 f202 	mul.w	r2, r1, r2
 8006fae:	4413      	add	r3, r2
 8006fb0:	4a20      	ldr	r2, [pc, #128]	@ (8007034 <prvReadDNSCache+0xd0>)
 8006fb2:	4413      	add	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]

            switch( pxAddresses->xIs_IPv6 ) /* LCOV_EXCL_BR_LINE - xIs_IPv6 is always either pdFALSE or pdTRUE. */
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d002      	beq.n	8006fc4 <prvReadDNSCache+0x60>
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d010      	beq.n	8006fe4 <prvReadDNSCache+0x80>
 8006fc2:	e01d      	b.n	8007000 <prvReadDNSCache+0x9c>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE:
                       {
                           const uint8_t * ucBytes = ( const uint8_t * ) &( pxAddresses->xIPAddress.ulIP_IPv4 );
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	60bb      	str	r3, [r7, #8]
                           pxNewAddress = pxNew_AddrInfo( xDNSCache[ uxIndex ].pcName, FREERTOS_AF_INET4, ucBytes );
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	226c      	movs	r2, #108	@ 0x6c
 8006fcc:	fb02 f303 	mul.w	r3, r2, r3
 8006fd0:	3350      	adds	r3, #80	@ 0x50
 8006fd2:	4a18      	ldr	r2, [pc, #96]	@ (8007034 <prvReadDNSCache+0xd0>)
 8006fd4:	4413      	add	r3, r2
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	2102      	movs	r1, #2
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7ff fc8c 	bl	80068f8 <pxNew_AddrInfo>
 8006fe0:	6178      	str	r0, [r7, #20]
                       }
                       break;
 8006fe2:	e011      	b.n	8007008 <prvReadDNSCache+0xa4>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case pdTRUE:
                        pxNewAddress = pxNew_AddrInfo( xDNSCache[ uxIndex ].pcName, FREERTOS_AF_INET6, pxAddresses->xIPAddress.xIP_IPv6.ucBytes );
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	226c      	movs	r2, #108	@ 0x6c
 8006fe8:	fb02 f303 	mul.w	r3, r2, r3
 8006fec:	3350      	adds	r3, #80	@ 0x50
 8006fee:	4a11      	ldr	r2, [pc, #68]	@ (8007034 <prvReadDNSCache+0xd0>)
 8006ff0:	4413      	add	r3, r2
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	210a      	movs	r1, #10
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7ff fc7e 	bl	80068f8 <pxNew_AddrInfo>
 8006ffc:	6178      	str	r0, [r7, #20]
                        break;
 8006ffe:	e003      	b.n	8007008 <prvReadDNSCache+0xa4>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default: /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "prvReadDNSCache: Undefined IP Type \n" ) );
 8007000:	480d      	ldr	r0, [pc, #52]	@ (8007038 <prvReadDNSCache+0xd4>)
 8007002:	f019 fa93 	bl	802052c <lUDPLoggingPrintf>
                    break; /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
 8007006:	bf00      	nop
            }

            if( pxNewAddress == NULL )
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00d      	beq.n	800702a <prvReadDNSCache+0xc6>
                /* Malloc must has failed. */
                break;
            }

            /* Set either 'ppxAddressInfo' or 'pxNewAddress->ai_next'. */
            *( ppxLastAddress ) = pxNewAddress;
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	601a      	str	r2, [r3, #0]

            ppxLastAddress = &( pxNewAddress->ai_next );
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	331c      	adds	r3, #28
 8007018:	613b      	str	r3, [r7, #16]
        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	3301      	adds	r3, #1
 800701e:	61fb      	str	r3, [r7, #28]
 8007020:	69fa      	ldr	r2, [r7, #28]
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	429a      	cmp	r2, r3
 8007026:	d3b9      	bcc.n	8006f9c <prvReadDNSCache+0x38>
        }
    }
 8007028:	e000      	b.n	800702c <prvReadDNSCache+0xc8>
                break;
 800702a:	bf00      	nop
    }
 800702c:	bf00      	nop
 800702e:	3720      	adds	r7, #32
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	20000c7c 	.word	0x20000c7c
 8007038:	08022cec 	.word	0x08022cec

0800703c <xDNSDoCallback>:
 *
 * @return Returns pdTRUE if uxIdentifier was recognized.
 */
    BaseType_t xDNSDoCallback( ParseSet_t * pxSet,
                               struct freertos_addrinfo * pxAddress )
    {
 800703c:	b580      	push	{r7, lr}
 800703e:	b08a      	sub	sp, #40	@ 0x28
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8007046:	2300      	movs	r3, #0
 8007048:	627b      	str	r3, [r7, #36]	@ 0x24
        const ListItem_t * pxIterator;
        const ListItem_t * xEnd = listGET_END_MARKER( &xCallbackList );
 800704a:	4b28      	ldr	r3, [pc, #160]	@ (80070ec <xDNSDoCallback+0xb0>)
 800704c:	617b      	str	r3, [r7, #20]
        TickType_t uxIdentifier = ( TickType_t ) pxSet->pxDNSMessageHeader->usIdentifier;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	b29b      	uxth	r3, r3
 8007056:	613b      	str	r3, [r7, #16]

        /* While iterating through the list, the scheduler is suspended.
         * Remember which function shall be called once the scheduler is
         * running again. */
        FOnDNSEvent pCallbackFunction = NULL;
 8007058:	2300      	movs	r3, #0
 800705a:	61fb      	str	r3, [r7, #28]
        void * pvSearchID = NULL;
 800705c:	2300      	movs	r3, #0
 800705e:	61bb      	str	r3, [r7, #24]

        vTaskSuspendAll();
 8007060:	f7fc fac2 	bl	80035e8 <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	623b      	str	r3, [r7, #32]
 800706a:	e029      	b.n	80070c0 <xDNSDoCallback+0x84>
                 pxIterator != ( const ListItem_t * ) xEnd;
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
            {
                BaseType_t xMatching;
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800706c:	6a3b      	ldr	r3, [r7, #32]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	60fb      	str	r3, [r7, #12]
                        xMatching = ( strcasecmp( pxCallback->pcName, pxSet->pcName ) == 0 ) ? pdTRUE : pdFALSE;
                    }
                    else
                #endif /* if ( ipconfigUSE_MDNS == 1 ) */
                {
                    xMatching = ( listGET_LIST_ITEM_VALUE( pxIterator ) == uxIdentifier ) ? pdTRUE : pdFALSE;
 8007072:	6a3b      	ldr	r3, [r7, #32]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	693a      	ldr	r2, [r7, #16]
 8007078:	429a      	cmp	r2, r3
 800707a:	d101      	bne.n	8007080 <xDNSDoCallback+0x44>
 800707c:	2301      	movs	r3, #1
 800707e:	e000      	b.n	8007082 <xDNSDoCallback+0x46>
 8007080:	2300      	movs	r3, #0
 8007082:	60bb      	str	r3, [r7, #8]
                }

                if( xMatching == pdTRUE )
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	2b01      	cmp	r3, #1
 8007088:	d117      	bne.n	80070ba <xDNSDoCallback+0x7e>
                {
                    pvSearchID = pxCallback->pvSearchID;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	61bb      	str	r3, [r7, #24]
                    pCallbackFunction = pxCallback->pCallbackFunction;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	61fb      	str	r3, [r7, #28]
                    ( void ) uxListRemove( &pxCallback->xListItem );
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	3314      	adds	r3, #20
 800709a:	4618      	mov	r0, r3
 800709c:	f7fb fa5a 	bl	8002554 <uxListRemove>
                    vPortFree( pxCallback );
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f7fe faf3 	bl	800568c <vPortFree>

                    if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 80070a6:	4b12      	ldr	r3, [pc, #72]	@ (80070f0 <xDNSDoCallback+0xb4>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d102      	bne.n	80070b4 <xDNSDoCallback+0x78>
                    {
                        /* The list of outstanding requests is empty. No need for periodic polling. */
                        vIPSetDNSTimerEnableState( pdFALSE );
 80070ae:	2000      	movs	r0, #0
 80070b0:	f002 f9ca 	bl	8009448 <vIPSetDNSTimerEnableState>
                    }

                    xResult = pdTRUE;
 80070b4:	2301      	movs	r3, #1
 80070b6:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 80070b8:	e006      	b.n	80070c8 <xDNSDoCallback+0x8c>
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 80070ba:	6a3b      	ldr	r3, [r7, #32]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	623b      	str	r3, [r7, #32]
                 pxIterator != ( const ListItem_t * ) xEnd;
 80070c0:	6a3a      	ldr	r2, [r7, #32]
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d1d1      	bne.n	800706c <xDNSDoCallback+0x30>
                }
            }
        }
        ( void ) xTaskResumeAll();
 80070c8:	f7fc fa9c 	bl	8003604 <xTaskResumeAll>

        if( pCallbackFunction != NULL )
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d006      	beq.n	80070e0 <xDNSDoCallback+0xa4>
        {
            pCallbackFunction( pxSet->pcName, pvSearchID, pxAddress );
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	69b9      	ldr	r1, [r7, #24]
 80070de:	4798      	blx	r3
        }

        return xResult;
 80070e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80070e2:	4618      	mov	r0, r3
 80070e4:	3728      	adds	r7, #40	@ 0x28
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	20000e38 	.word	0x20000e38
 80070f0:	20000e30 	.word	0x20000e30

080070f4 <vDNSCheckCallBack>:
 * @param[in] pvSearchID The search ID of callback function whose associated
 *                 DNS request is being cancelled. If non-ID specific checking of
 *                 all requests is required, then this field should be kept as NULL.
 */
    void vDNSCheckCallBack( void * pvSearchID )
    {
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b08c      	sub	sp, #48	@ 0x30
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;
        const ListItem_t * xEnd = listGET_END_MARKER( &xCallbackList );
 80070fc:	4b40      	ldr	r3, [pc, #256]	@ (8007200 <vDNSCheckCallBack+0x10c>)
 80070fe:	62bb      	str	r3, [r7, #40]	@ 0x28
         * be called. Store theses item in a temporary list.
         * Only when the scheduler is running, user functions
         * shall be called. */
        List_t xTempList;

        vListInitialise( &xTempList );
 8007100:	f107 030c 	add.w	r3, r7, #12
 8007104:	4618      	mov	r0, r3
 8007106:	f7fb f99b 	bl	8002440 <vListInitialise>

        vTaskSuspendAll();
 800710a:	f7fc fa6d 	bl	80035e8 <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 800710e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007114:	e02e      	b.n	8007174 <vDNSCheckCallBack+0x80>
                 pxIterator != xEnd; )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8007116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	623b      	str	r3, [r7, #32]
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800711c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( ( pvSearchID != NULL ) && ( pvSearchID == pxCallback->pvSearchID ) )
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00d      	beq.n	8007144 <vDNSCheckCallBack+0x50>
 8007128:	6a3b      	ldr	r3, [r7, #32]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	429a      	cmp	r2, r3
 8007130:	d108      	bne.n	8007144 <vDNSCheckCallBack+0x50>
                {
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8007132:	6a3b      	ldr	r3, [r7, #32]
 8007134:	3314      	adds	r3, #20
 8007136:	4618      	mov	r0, r3
 8007138:	f7fb fa0c 	bl	8002554 <uxListRemove>
                    vPortFree( pxCallback );
 800713c:	6a38      	ldr	r0, [r7, #32]
 800713e:	f7fe faa5 	bl	800568c <vPortFree>
 8007142:	e017      	b.n	8007174 <vDNSCheckCallBack+0x80>
                }
                else if( xTaskCheckForTimeOut( &pxCallback->uxTimeoutState, &( pxCallback->uxRemainingTime ) ) != pdFALSE )
 8007144:	6a3b      	ldr	r3, [r7, #32]
 8007146:	3308      	adds	r3, #8
 8007148:	6a3a      	ldr	r2, [r7, #32]
 800714a:	4611      	mov	r1, r2
 800714c:	4618      	mov	r0, r3
 800714e:	f7fc ff3f 	bl	8003fd0 <xTaskCheckForTimeOut>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00d      	beq.n	8007174 <vDNSCheckCallBack+0x80>
                {
                    /* A time-out occurred in the asynchronous search.
                     * Remove it from xCallbackList. */
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8007158:	6a3b      	ldr	r3, [r7, #32]
 800715a:	3314      	adds	r3, #20
 800715c:	4618      	mov	r0, r3
 800715e:	f7fb f9f9 	bl	8002554 <uxListRemove>

                    /* Insert it in a temporary list. The function will be called
                     * once the scheduler is resumed. */
                    vListInsertEnd( &( xTempList ), &pxCallback->xListItem );
 8007162:	6a3b      	ldr	r3, [r7, #32]
 8007164:	f103 0214 	add.w	r2, r3, #20
 8007168:	f107 030c 	add.w	r3, r7, #12
 800716c:	4611      	mov	r1, r2
 800716e:	4618      	mov	r0, r3
 8007170:	f7fb f993 	bl	800249a <vListInsertEnd>
                 pxIterator != xEnd; )
 8007174:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007178:	429a      	cmp	r2, r3
 800717a:	d1cc      	bne.n	8007116 <vDNSCheckCallBack+0x22>
                {
                    /* This call-back is still waiting for a reply or a time-out. */
                }
            }
        }
        ( void ) xTaskResumeAll();
 800717c:	f7fc fa42 	bl	8003604 <xTaskResumeAll>

        if( listLIST_IS_EMPTY( &xTempList ) == pdFALSE )
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d030      	beq.n	80071e8 <vDNSCheckCallBack+0xf4>
        {
            /* There is at least one item in xTempList which must be removed and deleted. */
            xEnd = listGET_END_MARKER( &xTempList );
 8007186:	f107 030c 	add.w	r3, r7, #12
 800718a:	3308      	adds	r3, #8
 800718c:	62bb      	str	r3, [r7, #40]	@ 0x28

            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 800718e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007194:	e024      	b.n	80071e0 <vDNSCheckCallBack+0xec>
                 pxIterator != xEnd;
                 )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8007196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800719c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* A time-out occurred in the asynchronous search.
                 * Call the application hook with the proper information. */
                if( pxCallback->xIsIPv6 != 0 )
 80071a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d009      	beq.n	80071be <vDNSCheckCallBack+0xca>
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, NULL );
 80071aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071b0:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 80071b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071b6:	6911      	ldr	r1, [r2, #16]
 80071b8:	2200      	movs	r2, #0
 80071ba:	4798      	blx	r3
 80071bc:	e008      	b.n	80071d0 <vDNSCheckCallBack+0xdc>
                }
                else
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, 0U );
 80071be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071c4:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 80071c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071ca:	6911      	ldr	r1, [r2, #16]
 80071cc:	2200      	movs	r2, #0
 80071ce:	4798      	blx	r3
                }

                /* Remove it from 'xTempList' and free the memory. */
                ( void ) uxListRemove( &( pxCallback->xListItem ) );
 80071d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d2:	3314      	adds	r3, #20
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7fb f9bd 	bl	8002554 <uxListRemove>
                vPortFree( pxCallback );
 80071da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80071dc:	f7fe fa56 	bl	800568c <vPortFree>
                 pxIterator != xEnd;
 80071e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d1d6      	bne.n	8007196 <vDNSCheckCallBack+0xa2>
            }
        }

        if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 80071e8:	4b06      	ldr	r3, [pc, #24]	@ (8007204 <vDNSCheckCallBack+0x110>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d102      	bne.n	80071f6 <vDNSCheckCallBack+0x102>
        {
            vIPSetDNSTimerEnableState( pdFALSE );
 80071f0:	2000      	movs	r0, #0
 80071f2:	f002 f929 	bl	8009448 <vIPSetDNSTimerEnableState>
        }
    }
 80071f6:	bf00      	nop
 80071f8:	3730      	adds	r7, #48	@ 0x30
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	20000e38 	.word	0x20000e38
 8007204:	20000e30 	.word	0x20000e30

08007208 <vDNSCallbackInitialise>:
/**
 * @brief initialize the cache
 * @post will modify global list xCallbackList
 */
    void vDNSCallbackInitialise()
    {
 8007208:	b580      	push	{r7, lr}
 800720a:	af00      	add	r7, sp, #0
        vListInitialise( &xCallbackList );
 800720c:	4802      	ldr	r0, [pc, #8]	@ (8007218 <vDNSCallbackInitialise+0x10>)
 800720e:	f7fb f917 	bl	8002440 <vListInitialise>
    }
 8007212:	bf00      	nop
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	20000e30 	.word	0x20000e30

0800721c <DNS_ReadNameField>:
 *
 * @return If a fully formed name was found, then return the number of bytes processed in pucByte.
 */
    size_t DNS_ReadNameField( ParseSet_t * pxSet,
                              size_t uxDestLen )
    {
 800721c:	b480      	push	{r7}
 800721e:	b089      	sub	sp, #36	@ 0x24
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
        size_t uxNameLen = 0U;
 8007226:	2300      	movs	r3, #0
 8007228:	61fb      	str	r3, [r7, #28]
        size_t uxIndex = 0U;
 800722a:	2300      	movs	r3, #0
 800722c:	61bb      	str	r3, [r7, #24]
        size_t uxSourceLen = pxSet->uxSourceBytesRemaining;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	613b      	str	r3, [r7, #16]
        const uint8_t * pucByte = pxSet->pucByte;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	60fb      	str	r3, [r7, #12]

        /* uxCount gets the values from pucByte and counts down to 0.
         * No need to have a different type than that of pucByte */
        size_t uxCount;

        if( uxSourceLen == ( size_t ) 0U )
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d102      	bne.n	8007246 <DNS_ReadNameField+0x2a>
        {
            /* Return 0 value in case of error. */
            uxIndex = 0U;
 8007240:	2300      	movs	r3, #0
 8007242:	61bb      	str	r3, [r7, #24]
 8007244:	e069      	b.n	800731a <DNS_ReadNameField+0xfe>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	4413      	add	r3, r2
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007252:	2bc0      	cmp	r3, #192	@ 0xc0
 8007254:	d144      	bne.n	80072e0 <DNS_ReadNameField+0xc4>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLen > sizeof( uint16_t ) )
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	2b02      	cmp	r3, #2
 800725a:	d903      	bls.n	8007264 <DNS_ReadNameField+0x48>
            {
                uxIndex += sizeof( uint16_t );
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	3302      	adds	r3, #2
 8007260:	61bb      	str	r3, [r7, #24]
 8007262:	e05a      	b.n	800731a <DNS_ReadNameField+0xfe>
            }
            else
            {
                uxIndex = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	61bb      	str	r3, [r7, #24]
 8007268:	e057      	b.n	800731a <DNS_ReadNameField+0xfe>
            /* 'uxIndex' points to the full name. Walk over the string. */
            while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
            {
                /* If this is not the first time through the loop, then add a
                 * separator in the output. */
                if( ( uxNameLen > 0U ) )
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d008      	beq.n	8007282 <DNS_ReadNameField+0x66>
                {
                    /*
                     * uxNameLen can never be greater than uxDestLen, since there are checks
                     * outside this condition, so the check is removed.
                     */
                    pxSet->pcName[ uxNameLen ] = '.';
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	4413      	add	r3, r2
 8007276:	3334      	adds	r3, #52	@ 0x34
 8007278:	222e      	movs	r2, #46	@ 0x2e
 800727a:	701a      	strb	r2, [r3, #0]
                    uxNameLen++;
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	3301      	adds	r3, #1
 8007280:	61fb      	str	r3, [r7, #28]
                }

                /* Process the first/next sub-string. */
                uxCount = ( size_t ) pucByte[ uxIndex ];
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	4413      	add	r3, r2
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	617b      	str	r3, [r7, #20]

                /* uxIndex should point to the first character now, unless uxCount
                 * is an offset field. */
                uxIndex++;
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	3301      	adds	r3, #1
 8007290:	61bb      	str	r3, [r7, #24]

                if( ( uxIndex + uxCount ) > uxSourceLen )
 8007292:	69ba      	ldr	r2, [r7, #24]
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	4413      	add	r3, r2
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	429a      	cmp	r2, r3
 800729c:	d202      	bcs.n	80072a4 <DNS_ReadNameField+0x88>
                {
                    uxIndex = 0U;
 800729e:	2300      	movs	r3, #0
 80072a0:	61bb      	str	r3, [r7, #24]
                    break;
 80072a2:	e027      	b.n	80072f4 <DNS_ReadNameField+0xd8>
                }

                if( ( uxNameLen + uxCount ) >= uxDestLen )
 80072a4:	69fa      	ldr	r2, [r7, #28]
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	4413      	add	r3, r2
 80072aa:	683a      	ldr	r2, [r7, #0]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d812      	bhi.n	80072d6 <DNS_ReadNameField+0xba>
                {
                    uxIndex = 0U;
 80072b0:	2300      	movs	r3, #0
 80072b2:	61bb      	str	r3, [r7, #24]
                    break;
 80072b4:	e01e      	b.n	80072f4 <DNS_ReadNameField+0xd8>
                {
                    /*
                     * uxNameLen can never be greater than uxDestLen, since there are checks
                     * outside this condition, so the check is removed.
                     */
                    pxSet->pcName[ uxNameLen ] = ( char ) pucByte[ uxIndex ];
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	4413      	add	r3, r2
 80072bc:	7819      	ldrb	r1, [r3, #0]
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	4413      	add	r3, r2
 80072c4:	3334      	adds	r3, #52	@ 0x34
 80072c6:	460a      	mov	r2, r1
 80072c8:	701a      	strb	r2, [r3, #0]
                    uxNameLen++;
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	3301      	adds	r3, #1
 80072ce:	61fb      	str	r3, [r7, #28]
                    uxIndex++;
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	3301      	adds	r3, #1
 80072d4:	61bb      	str	r3, [r7, #24]
                while( uxCount-- != 0U )
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	1e5a      	subs	r2, r3, #1
 80072da:	617a      	str	r2, [r7, #20]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1ea      	bne.n	80072b6 <DNS_ReadNameField+0x9a>
            while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
 80072e0:	69ba      	ldr	r2, [r7, #24]
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d205      	bcs.n	80072f4 <DNS_ReadNameField+0xd8>
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	4413      	add	r3, r2
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1ba      	bne.n	800726a <DNS_ReadNameField+0x4e>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00f      	beq.n	800731a <DNS_ReadNameField+0xfe>
                 * failing above check. Whenever we exit the loop otherwise, either
                 * pucByte[ uxIndex ] == 0 (which makes the check here unnecessary) or
                 * uxIndex >= uxSourceLen (which makes sure that we do not go in the 'if'
                 * case).
                 */
                if( uxIndex < uxSourceLen )
 80072fa:	69ba      	ldr	r2, [r7, #24]
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d209      	bcs.n	8007316 <DNS_ReadNameField+0xfa>
                {
                    pxSet->pcName[ uxNameLen ] = '\0';
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	4413      	add	r3, r2
 8007308:	3334      	adds	r3, #52	@ 0x34
 800730a:	2200      	movs	r2, #0
 800730c:	701a      	strb	r2, [r3, #0]
                    uxIndex++;
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	3301      	adds	r3, #1
 8007312:	61bb      	str	r3, [r7, #24]
 8007314:	e001      	b.n	800731a <DNS_ReadNameField+0xfe>
                }
                else
                {
                    uxIndex = 0U;
 8007316:	2300      	movs	r3, #0
 8007318:	61bb      	str	r3, [r7, #24]
                }
            }
        }

        return uxIndex;
 800731a:	69bb      	ldr	r3, [r7, #24]
    }
 800731c:	4618      	mov	r0, r3
 800731e:	3724      	adds	r7, #36	@ 0x24
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <DNS_SkipNameField>:
 *
 * @return It returns the number of bytes read, or zero when an error has occurred.
 */
    size_t DNS_SkipNameField( const uint8_t * pucByte,
                              size_t uxLength )
    {
 8007328:	b480      	push	{r7}
 800732a:	b087      	sub	sp, #28
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
        size_t uxChunkLength;
        size_t uxSourceLenCpy = uxLength;
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	617b      	str	r3, [r7, #20]
        size_t uxIndex = 0U;
 8007336:	2300      	movs	r3, #0
 8007338:	613b      	str	r3, [r7, #16]

        if( uxSourceLenCpy == 0U )
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d102      	bne.n	8007346 <DNS_SkipNameField+0x1e>
        {
            uxIndex = 0U;
 8007340:	2300      	movs	r3, #0
 8007342:	613b      	str	r3, [r7, #16]
 8007344:	e03f      	b.n	80073c6 <DNS_SkipNameField+0x9e>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	4413      	add	r3, r2
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007352:	2bc0      	cmp	r3, #192	@ 0xc0
 8007354:	d11f      	bne.n	8007396 <DNS_SkipNameField+0x6e>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLenCpy > sizeof( uint16_t ) )
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	2b02      	cmp	r3, #2
 800735a:	d903      	bls.n	8007364 <DNS_SkipNameField+0x3c>
            {
                uxIndex += sizeof( uint16_t );
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	3302      	adds	r3, #2
 8007360:	613b      	str	r3, [r7, #16]
 8007362:	e030      	b.n	80073c6 <DNS_SkipNameField+0x9e>
            }
            else
            {
                uxIndex = 0U;
 8007364:	2300      	movs	r3, #0
 8007366:	613b      	str	r3, [r7, #16]
 8007368:	e02d      	b.n	80073c6 <DNS_SkipNameField+0x9e>
            /* pucByte points to the full name. Walk over the string. */
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
            {
                /* Conversion to size_t causes addition to be done
                 * in size_t */
                uxChunkLength = ( ( size_t ) pucByte[ uxIndex ] ) + 1U;
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	4413      	add	r3, r2
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	3301      	adds	r3, #1
 8007374:	60fb      	str	r3, [r7, #12]

                if( uxSourceLenCpy > uxChunkLength )
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	429a      	cmp	r2, r3
 800737c:	d908      	bls.n	8007390 <DNS_SkipNameField+0x68>
                {
                    uxSourceLenCpy -= uxChunkLength;
 800737e:	697a      	ldr	r2, [r7, #20]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	617b      	str	r3, [r7, #20]
                    uxIndex += uxChunkLength;
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	4413      	add	r3, r2
 800738c:	613b      	str	r3, [r7, #16]
 800738e:	e002      	b.n	8007396 <DNS_SkipNameField+0x6e>
                }
                else
                {
                    uxIndex = 0U;
 8007390:	2300      	movs	r3, #0
 8007392:	613b      	str	r3, [r7, #16]
                    break;
 8007394:	e008      	b.n	80073a8 <DNS_SkipNameField+0x80>
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	4413      	add	r3, r2
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d002      	beq.n	80073a8 <DNS_SkipNameField+0x80>
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d8e0      	bhi.n	800736a <DNS_SkipNameField+0x42>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00b      	beq.n	80073c6 <DNS_SkipNameField+0x9e>
            {
                if( pucByte[ uxIndex ] == 0U )
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	4413      	add	r3, r2
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d103      	bne.n	80073c2 <DNS_SkipNameField+0x9a>
                {
                    uxIndex++;
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	3301      	adds	r3, #1
 80073be:	613b      	str	r3, [r7, #16]
 80073c0:	e001      	b.n	80073c6 <DNS_SkipNameField+0x9e>
                }
                else
                {
                    uxIndex = 0U;
 80073c2:	2300      	movs	r3, #0
 80073c4:	613b      	str	r3, [r7, #16]
                }
            }
        }

        return uxIndex;
 80073c6:	693b      	ldr	r3, [r7, #16]
    }
 80073c8:	4618      	mov	r0, r3
 80073ca:	371c      	adds	r7, #28
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <DNS_ParseDNSReply>:
    uint32_t DNS_ParseDNSReply( uint8_t * pucUDPPayloadBuffer,
                                size_t uxBufferLength,
                                struct freertos_addrinfo ** ppxAddressInfo,
                                BaseType_t xExpected,
                                uint16_t usPort )
    {
 80073d4:	b5b0      	push	{r4, r5, r7, lr}
 80073d6:	b0f6      	sub	sp, #472	@ 0x1d8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	f507 74ec 	add.w	r4, r7, #472	@ 0x1d8
 80073de:	f5a4 74e6 	sub.w	r4, r4, #460	@ 0x1cc
 80073e2:	6020      	str	r0, [r4, #0]
 80073e4:	f507 70ec 	add.w	r0, r7, #472	@ 0x1d8
 80073e8:	f5a0 70e8 	sub.w	r0, r0, #464	@ 0x1d0
 80073ec:	6001      	str	r1, [r0, #0]
 80073ee:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 80073f2:	f5a1 71ea 	sub.w	r1, r1, #468	@ 0x1d4
 80073f6:	600a      	str	r2, [r1, #0]
 80073f8:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 80073fc:	f5a2 72ec 	sub.w	r2, r2, #472	@ 0x1d8
 8007400:	6013      	str	r3, [r2, #0]
        ParseSet_t xSet;
        uint16_t x;
        BaseType_t xReturn = pdTRUE;
 8007402:	2301      	movs	r3, #1
 8007404:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
        uint32_t ulIPAddress = 0U;
 8007408:	2300      	movs	r3, #0
 800740a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        BaseType_t xDNSHookReturn;

        ( void ) memset( &( xSet ), 0, sizeof( xSet ) );
 800740e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007412:	224c      	movs	r2, #76	@ 0x4c
 8007414:	2100      	movs	r1, #0
 8007416:	4618      	mov	r0, r3
 8007418:	f019 fbb1 	bl	8020b7e <memset>
        xSet.usPortNumber = usPort;
 800741c:	f8b7 31e8 	ldrh.w	r3, [r7, #488]	@ 0x1e8
 8007420:	f8a7 3166 	strh.w	r3, [r7, #358]	@ 0x166
        xSet.ppxLastAddress = &( xSet.pxLastAddress );
 8007424:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007428:	3344      	adds	r3, #68	@ 0x44
 800742a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
            xSet.xDoStore = xExpected;
 800742e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007432:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
        #endif

        /* Ensure that the buffer is of at least minimal DNS message length. */
        if( uxBufferLength < sizeof( DNSMessage_t ) )
 800743c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007440:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2b0b      	cmp	r3, #11
 8007448:	d803      	bhi.n	8007452 <DNS_ParseDNSReply+0x7e>
        {
            ( void ) xDNSHookReturn;
            xReturn = pdFALSE;
 800744a:	2300      	movs	r3, #0
 800744c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8007450:	e35a      	b.n	8007b08 <DNS_ParseDNSReply+0x734>
        }
        else
        {
            xSet.uxBufferLength = uxBufferLength;
 8007452:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007456:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
            xSet.uxSourceBytesRemaining = uxBufferLength;
 8007460:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007464:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
             * for easier access. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            xSet.pxDNSMessageHeader = ( ( DNSMessage_t * )
 800746e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007472:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
                                        pucUDPPayloadBuffer );

            /* Introduce a do {} while (0) to allow the use of breaks. */
            do
            {
                size_t uxBytesRead = 0U;
 800747c:	2300      	movs	r3, #0
 800747e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
                size_t uxResult;
                BaseType_t xIsResponse = pdFALSE;
 8007482:	2300      	movs	r3, #0
 8007484:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

                /* Start at the first byte after the header. */
                xSet.pucUDPPayloadBuffer = pucUDPPayloadBuffer;
 8007488:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800748c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
                /* Skip 12-byte header. */
                xSet.pucByte = &( pucUDPPayloadBuffer[ sizeof( DNSMessage_t ) ] );
 8007496:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800749a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	330c      	adds	r3, #12
 80074a2:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                xSet.uxSourceBytesRemaining -= sizeof( DNSMessage_t );
 80074a6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80074aa:	3b0c      	subs	r3, #12
 80074ac:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

                /* The number of questions supplied. */
                xSet.usQuestions = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usQuestions );
 80074b0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80074b4:	889b      	ldrh	r3, [r3, #4]
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	021b      	lsls	r3, r3, #8
 80074ba:	b21a      	sxth	r2, r3
 80074bc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80074c0:	889b      	ldrh	r3, [r3, #4]
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	0a1b      	lsrs	r3, r3, #8
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	b21b      	sxth	r3, r3
 80074ca:	4313      	orrs	r3, r2
 80074cc:	b21b      	sxth	r3, r3
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	f8a7 3144 	strh.w	r3, [r7, #324]	@ 0x144
                /* The number of answer records. */
                xSet.usAnswers = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usAnswers );
 80074d4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80074d8:	88db      	ldrh	r3, [r3, #6]
 80074da:	b29b      	uxth	r3, r3
 80074dc:	021b      	lsls	r3, r3, #8
 80074de:	b21a      	sxth	r2, r3
 80074e0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80074e4:	88db      	ldrh	r3, [r3, #6]
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	0a1b      	lsrs	r3, r3, #8
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	b21b      	sxth	r3, r3
 80074ee:	4313      	orrs	r3, r2
 80074f0:	b21b      	sxth	r3, r3
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146

                if( ( xSet.pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 80074f8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80074fc:	885b      	ldrh	r3, [r3, #2]
 80074fe:	b29b      	uxth	r3, r3
 8007500:	f403 6378 	and.w	r3, r3, #3968	@ 0xf80
 8007504:	2b80      	cmp	r3, #128	@ 0x80
 8007506:	d11b      	bne.n	8007540 <DNS_ParseDNSReply+0x16c>
                {
                    xIsResponse = pdTRUE;
 8007508:	2301      	movs	r3, #1
 800750a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

                    if( xSet.usAnswers == 0U )
 800750e:	f8b7 3146 	ldrh.w	r3, [r7, #326]	@ 0x146
 8007512:	2b00      	cmp	r3, #0
 8007514:	d103      	bne.n	800751e <DNS_ParseDNSReply+0x14a>
                    {
                        /* This is a response that does not include answers. */
                        xReturn = pdFALSE;
 8007516:	2300      	movs	r3, #0
 8007518:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 800751c:	e2f4      	b.n	8007b08 <DNS_ParseDNSReply+0x734>
                    }

                    if( xSet.usQuestions == 0U )
 800751e:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8007522:	2b00      	cmp	r3, #0
 8007524:	d114      	bne.n	8007550 <DNS_ParseDNSReply+0x17c>
                    {
                        #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                        {
                            xSet.pcRequestedName = ( char * ) xSet.pucByte;
 8007526:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800752a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                        }
                        #endif

                        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                            uxResult = DNS_ReadNameField( &xSet,
 800752e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007532:	2110      	movs	r1, #16
 8007534:	4618      	mov	r0, r3
 8007536:	f7ff fe71 	bl	800721c <DNS_ReadNameField>
 800753a:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
 800753e:	e007      	b.n	8007550 <DNS_ParseDNSReply+0x17c>
                        #endif
                    }
                }
                else
                {
                    if( xSet.usQuestions == 0U )
 8007540:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8007544:	2b00      	cmp	r3, #0
 8007546:	d103      	bne.n	8007550 <DNS_ParseDNSReply+0x17c>
                    {
                        /* This is a query that does not include any question. */
                        xReturn = pdFALSE;
 8007548:	2300      	movs	r3, #0
 800754a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 800754e:	e2db      	b.n	8007b08 <DNS_ParseDNSReply+0x734>
                    }
                }

                for( x = 0U; x < xSet.usQuestions; x++ )
 8007550:	2300      	movs	r3, #0
 8007552:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
 8007556:	e064      	b.n	8007622 <DNS_ParseDNSReply+0x24e>
                {
                    #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                    {
                        if( x == 0U )
 8007558:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 800755c:	2b00      	cmp	r3, #0
 800755e:	d103      	bne.n	8007568 <DNS_ParseDNSReply+0x194>
                        {
                            xSet.pcRequestedName = ( char * ) xSet.pucByte;
 8007560:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007564:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                        }
                    }
                    #endif

                    #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                        if( x == 0U )
 8007568:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 800756c:	2b00      	cmp	r3, #0
 800756e:	d108      	bne.n	8007582 <DNS_ParseDNSReply+0x1ae>
                        {
                            uxResult = DNS_ReadNameField( &xSet,
 8007570:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007574:	2110      	movs	r1, #16
 8007576:	4618      	mov	r0, r3
 8007578:	f7ff fe50 	bl	800721c <DNS_ReadNameField>
 800757c:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
 8007580:	e009      	b.n	8007596 <DNS_ParseDNSReply+0x1c2>
                        }
                        else
                    #endif /* ipconfigUSE_DNS_CACHE || ipconfigDNS_USE_CALLBACKS */
                    {
                        /* Skip the variable length pcName field. */
                        uxResult = DNS_SkipNameField( xSet.pucByte,
 8007582:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007586:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 800758a:	4611      	mov	r1, r2
 800758c:	4618      	mov	r0, r3
 800758e:	f7ff fecb 	bl	8007328 <DNS_SkipNameField>
 8007592:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
                                                      xSet.uxSourceBytesRemaining );
                    }

                    /* Check for a malformed response. */
                    if( uxResult == 0U )
 8007596:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800759a:	2b00      	cmp	r3, #0
 800759c:	d103      	bne.n	80075a6 <DNS_ParseDNSReply+0x1d2>
                    {
                        xReturn = pdFALSE;
 800759e:	2300      	movs	r3, #0
 80075a0:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 80075a4:	e043      	b.n	800762e <DNS_ParseDNSReply+0x25a>
                    }

                    uxBytesRead += uxResult;
 80075a6:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80075aa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80075ae:	4413      	add	r3, r2
 80075b0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
                    xSet.pucByte = &( xSet.pucByte[ uxResult ] );
 80075b4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80075b8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80075bc:	4413      	add	r3, r2
 80075be:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                    xSet.uxSourceBytesRemaining -= uxResult;
 80075c2:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 80075c6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80075ca:	1ad3      	subs	r3, r2, r3
 80075cc:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

                    /* Check the remaining buffer size. */
                    if( xSet.uxSourceBytesRemaining >= sizeof( uint32_t ) )
 80075d0:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80075d4:	2b03      	cmp	r3, #3
 80075d6:	d91b      	bls.n	8007610 <DNS_ParseDNSReply+0x23c>
                    {
                        #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                        {
                            /* usChar2u16 returns value in host endianness. */
                            xSet.usType = usChar2u16( xSet.pucByte );
 80075d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075dc:	4618      	mov	r0, r3
 80075de:	f002 fa58 	bl	8009a92 <usChar2u16>
 80075e2:	4603      	mov	r3, r0
 80075e4:	f8a7 3158 	strh.w	r3, [r7, #344]	@ 0x158
                            xSet.usClass = usChar2u16( &( xSet.pucByte[ 2 ] ) );
 80075e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075ec:	3302      	adds	r3, #2
 80075ee:	4618      	mov	r0, r3
 80075f0:	f002 fa4f 	bl	8009a92 <usChar2u16>
 80075f4:	4603      	mov	r3, r0
 80075f6:	f8a7 3168 	strh.w	r3, [r7, #360]	@ 0x168
                        }
                        #endif /* ipconfigUSE_LLMNR */

                        /* Skip the type and class fields. */
                        xSet.pucByte = &( xSet.pucByte[ sizeof( uint32_t ) ] );
 80075fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075fe:	3304      	adds	r3, #4
 8007600:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                        xSet.uxSourceBytesRemaining -= sizeof( uint32_t );
 8007604:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8007608:	3b04      	subs	r3, #4
 800760a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800760e:	e003      	b.n	8007618 <DNS_ParseDNSReply+0x244>
                    }
                    else
                    {
                        xReturn = pdFALSE;
 8007610:	2300      	movs	r3, #0
 8007612:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8007616:	e00a      	b.n	800762e <DNS_ParseDNSReply+0x25a>
                for( x = 0U; x < xSet.usQuestions; x++ )
 8007618:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 800761c:	3301      	adds	r3, #1
 800761e:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
 8007622:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8007626:	f8b7 21d6 	ldrh.w	r2, [r7, #470]	@ 0x1d6
 800762a:	429a      	cmp	r2, r3
 800762c:	d394      	bcc.n	8007558 <DNS_ParseDNSReply+0x184>
                    }
                } /* for( x = 0U; x < xSet.usQuestions; x++ ) */

                if( xReturn == pdFALSE )
 800762e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8007632:	2b00      	cmp	r3, #0
 8007634:	f000 8265 	beq.w	8007b02 <DNS_ParseDNSReply+0x72e>
                {
                    /* No need to proceed. Break out of the do-while loop. */
                    break;
                }

                if( xIsResponse == pdTRUE )
 8007638:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800763c:	2b01      	cmp	r3, #1
 800763e:	d10d      	bne.n	800765c <DNS_ParseDNSReply+0x288>
                {
                    /* Search through the answer records. */
                    ulIPAddress = parseDNSAnswer( &( xSet ), ppxAddressInfo, &uxBytesRead );
 8007640:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8007644:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007648:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800764c:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8007650:	6819      	ldr	r1, [r3, #0]
 8007652:	f000 fa73 	bl	8007b3c <parseDNSAnswer>
 8007656:	f8c7 01cc 	str.w	r0, [r7, #460]	@ 0x1cc
 800765a:	e255      	b.n	8007b08 <DNS_ParseDNSReply+0x734>

                    /* No need to check that pcRequestedName != NULL since sQuestions != 0, then
                     * pcRequestedName is assigned with this statement
                     * "pcRequestedName = ( char * ) pucByte;" */
                    /* No need to check that usQuestions != 0, since the check is done before */
                    else if( ( ( xSet.usType == dnsTYPE_A_HOST ) || ( xSet.usType == dnsTYPE_AAAA_HOST ) ) &&
 800765c:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8007660:	2b01      	cmp	r3, #1
 8007662:	d004      	beq.n	800766e <DNS_ParseDNSReply+0x29a>
 8007664:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8007668:	2b1c      	cmp	r3, #28
 800766a:	f040 824d 	bne.w	8007b08 <DNS_ParseDNSReply+0x734>
                             ( xSet.usClass == dnsCLASS_IN ) )
 800766e:	f8b7 3168 	ldrh.w	r3, [r7, #360]	@ 0x168
                    else if( ( ( xSet.usType == dnsTYPE_A_HOST ) || ( xSet.usType == dnsTYPE_AAAA_HOST ) ) &&
 8007672:	2b01      	cmp	r3, #1
 8007674:	f040 8248 	bne.w	8007b08 <DNS_ParseDNSReply+0x734>
                    {
                        NetworkBufferDescriptor_t * pxNetworkBuffer;
                        NetworkEndPoint_t * pxEndPoint, xEndPoint;
                        size_t uxUDPOffset;

                        pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 8007678:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800767c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8007680:	6818      	ldr	r0, [r3, #0]
 8007682:	f001 ff9f 	bl	80095c4 <pxUDPPayloadBuffer_to_NetworkBuffer>
 8007686:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc

                        /* This test could be replaced with a assert(). */
                        if( pxNetworkBuffer == NULL )
 800768a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800768e:	2b00      	cmp	r3, #0
 8007690:	d103      	bne.n	800769a <DNS_ParseDNSReply+0x2c6>
                        {
                            /* _HT_ just while testing. When the program gets here,
                             * pucUDPPayloadBuffer was invalid. */
                            FreeRTOS_printf( ( "DNS_ParseDNSReply: pucUDPPayloadBuffer was invalid\n" ) );
 8007692:	48c4      	ldr	r0, [pc, #784]	@ (80079a4 <DNS_ParseDNSReply+0x5d0>)
 8007694:	f018 ff4a 	bl	802052c <lUDPLoggingPrintf>
                            break;
 8007698:	e236      	b.n	8007b08 <DNS_ParseDNSReply+0x734>
                        }

                        uxUDPOffset = ( size_t ) ( pucUDPPayloadBuffer - pxNetworkBuffer->pucEthernetBuffer );
 800769a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800769e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a0:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 80076a4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80076a8:	6812      	ldr	r2, [r2, #0]
 80076aa:	1ad3      	subs	r3, r2, r3
 80076ac:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
                        configASSERT( ( uxUDPOffset == ipUDP_PAYLOAD_OFFSET_IPv4 ) || ( uxUDPOffset == ipUDP_PAYLOAD_OFFSET_IPv6 ) );
 80076b0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80076b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80076b6:	d003      	beq.n	80076c0 <DNS_ParseDNSReply+0x2ec>
 80076b8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80076bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80076be:	d101      	bne.n	80076c4 <DNS_ParseDNSReply+0x2f0>
 80076c0:	2301      	movs	r3, #1
 80076c2:	e000      	b.n	80076c6 <DNS_ParseDNSReply+0x2f2>
 80076c4:	2300      	movs	r3, #0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d104      	bne.n	80076d4 <DNS_ParseDNSReply+0x300>
 80076ca:	f240 11bb 	movw	r1, #443	@ 0x1bb
 80076ce:	48b6      	ldr	r0, [pc, #728]	@ (80079a8 <DNS_ParseDNSReply+0x5d4>)
 80076d0:	f7f9 fd22 	bl	8001118 <vAssertCalled>

                        if( pxNetworkBuffer->pxEndPoint == NULL )
 80076d4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80076d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f000 8213 	beq.w	8007b06 <DNS_ParseDNSReply+0x732>
                        {
                            break;
                        }

                        pxEndPoint = pxNetworkBuffer->pxEndPoint;
 80076e0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80076e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

                        /* Make a copy of the end-point because xApplicationDNSQueryHook() is allowed
                         * to write into it. */
                        ( void ) memcpy( &( xEndPoint ), pxEndPoint, sizeof( xEndPoint ) );
 80076ea:	f107 0314 	add.w	r3, r7, #20
 80076ee:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80076f2:	f8d7 11a4 	ldr.w	r1, [r7, #420]	@ 0x1a4
 80076f6:	4618      	mov	r0, r3
 80076f8:	f019 f934 	bl	8020964 <memcpy>

                        #if ( ipconfigUSE_IPv6 != 0 )
                        {
                            /*logging*/
                            FreeRTOS_printf( ( "prvParseDNS_HandleLLMNRRequest[%s]: type %04X\n", xSet.pcName, xSet.usType ) );
 80076fc:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8007700:	461a      	mov	r2, r3
 8007702:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007706:	3334      	adds	r3, #52	@ 0x34
 8007708:	4619      	mov	r1, r3
 800770a:	48a8      	ldr	r0, [pc, #672]	@ (80079ac <DNS_ParseDNSReply+0x5d8>)
 800770c:	f018 ff0e 	bl	802052c <lUDPLoggingPrintf>

                            xEndPoint.usDNSType = ( uint8_t ) xSet.usType;
 8007710:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8007714:	b2da      	uxtb	r2, r3
 8007716:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800771a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800771e:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        /* If this is not a reply to our DNS request, it might be an mDNS or an LLMNR
                         * request. Ask the application if it uses the name. */
                        #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
                            xDNSHookReturn = xApplicationDNSQueryHook( xSet.pcName );
 8007722:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007726:	3334      	adds	r3, #52	@ 0x34
 8007728:	4618      	mov	r0, r3
 800772a:	f7f9 fd89 	bl	8001240 <xApplicationDNSQueryHook>
 800772e:	f8c7 01c8 	str.w	r0, [r7, #456]	@ 0x1c8
                            xDNSHookReturn = xApplicationDNSQueryHook_Multi( &xEndPoint, xSet.pcName );
                        #endif

                        /* During the early stages of boot or after a DHCP lease expires, our end-point
                         * may have an IP address of 0.0.0.0. Do not respond to name queries with that address. */
                        if( ( xDNSHookReturn != pdFALSE ) && ( xEndPoint.bits.bIPv6 == pdFALSE ) && ( xEndPoint.ipv4_settings.ulIPAddress == 0U ) )
 8007732:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8007736:	2b00      	cmp	r3, #0
 8007738:	d014      	beq.n	8007764 <DNS_ParseDNSReply+0x390>
 800773a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800773e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007742:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8007746:	f003 0304 	and.w	r3, r3, #4
 800774a:	b2db      	uxtb	r3, r3
 800774c:	2b00      	cmp	r3, #0
 800774e:	d109      	bne.n	8007764 <DNS_ParseDNSReply+0x390>
 8007750:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007754:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d102      	bne.n	8007764 <DNS_ParseDNSReply+0x390>
                        {
                            xDNSHookReturn = pdFALSE;
 800775e:	2300      	movs	r3, #0
 8007760:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
                        }

                        if( xDNSHookReturn != pdFALSE )
 8007764:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8007768:	2b00      	cmp	r3, #0
 800776a:	f000 81cd 	beq.w	8007b08 <DNS_ParseDNSReply+0x734>
                        {
                            int16_t usLength;
                            NetworkBufferDescriptor_t * pxNewBuffer = NULL;
 800776e:	2300      	movs	r3, #0
 8007770:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
                            LLMNRAnswer_t * pxAnswer;
                            uint8_t * pucNewBuffer = NULL;
 8007774:	2300      	movs	r3, #0
 8007776:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
                            size_t uxExtraLength;

                            if( xBufferAllocFixedSize == pdFALSE )
 800777a:	4b8d      	ldr	r3, [pc, #564]	@ (80079b0 <DNS_ParseDNSReply+0x5dc>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d164      	bne.n	800784c <DNS_ParseDNSReply+0x478>
                            {
                                size_t uxDataLength = uxBufferLength +
                                                      sizeof( UDPHeader_t ) +
                                                      sizeof( EthernetHeader_t ) +
                                                      uxIPHeaderSizePacket( pxNetworkBuffer );
 8007782:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8007786:	f001 fbd7 	bl	8008f38 <uxIPHeaderSizePacket>
 800778a:	4602      	mov	r2, r0
                                                      sizeof( EthernetHeader_t ) +
 800778c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007790:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4413      	add	r3, r2
                                size_t uxDataLength = uxBufferLength +
 8007798:	3316      	adds	r3, #22
 800779a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

                                #if ( ipconfigUSE_IPv6 != 0 )
                                    if( xSet.usType == dnsTYPE_AAAA_HOST )
 800779e:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 80077a2:	2b1c      	cmp	r3, #28
 80077a4:	d103      	bne.n	80077ae <DNS_ParseDNSReply+0x3da>
                                    {
                                        uxExtraLength = sizeof( LLMNRAnswer_t ) + ipSIZE_OF_IPv6_ADDRESS - sizeof( pxAnswer->ulIPAddress );
 80077a6:	231c      	movs	r3, #28
 80077a8:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 80077ac:	e002      	b.n	80077b4 <DNS_ParseDNSReply+0x3e0>
                                    }
                                    else
                                #endif /* ( ipconfigUSE_IPv6 != 0 ) */
                                #if ( ipconfigUSE_IPv4 != 0 )
                                {
                                    uxExtraLength = sizeof( LLMNRAnswer_t );
 80077ae:	2310      	movs	r3, #16
 80077b0:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
                                    /* do nothing, coverity happy */
                                }
                                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                                /* Set the size of the outgoing packet. */
                                pxNetworkBuffer->xDataLength = uxDataLength;
 80077b4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80077b8:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 80077bc:	629a      	str	r2, [r3, #40]	@ 0x28
                                pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer,
 80077be:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 80077c2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80077c6:	4413      	add	r3, r2
 80077c8:	4619      	mov	r1, r3
 80077ca:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 80077ce:	f001 fe65 	bl	800949c <pxDuplicateNetworkBufferWithDescriptor>
 80077d2:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
                                                                                      uxDataLength +
                                                                                      uxExtraLength );

                                if( pxNewBuffer != NULL )
 80077d6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d032      	beq.n	8007844 <DNS_ParseDNSReply+0x470>
                                {
                                    BaseType_t xOffset1, xOffset2;

                                    xOffset1 = ( BaseType_t ) ( xSet.pucByte - pucUDPPayloadBuffer );
 80077de:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80077e2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80077e6:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
                                    xOffset2 = ( BaseType_t ) ( ( ( uint8_t * ) xSet.pcRequestedName ) - pucUDPPayloadBuffer );
 80077f2:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80077f6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80077fa:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198

                                    pxNetworkBuffer = pxNewBuffer;
 8007806:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800780a:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
                                    pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPOffset ] );
 800780e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007812:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007814:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8007818:	4413      	add	r3, r2
 800781a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0

                                    xSet.pucByte = &( pucNewBuffer[ xOffset1 ] );
 800781e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8007822:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8007826:	4413      	add	r3, r2
 8007828:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                                    xSet.pcRequestedName = ( char * ) &( pucNewBuffer[ xOffset2 ] );
 800782c:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8007830:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8007834:	4413      	add	r3, r2
 8007836:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                                    xSet.pxDNSMessageHeader = ( ( DNSMessage_t * ) pucNewBuffer );
 800783a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800783e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8007842:	e00b      	b.n	800785c <DNS_ParseDNSReply+0x488>
                                }
                                else
                                {
                                    /* Just to indicate that the message may not be answered. */
                                    pxNetworkBuffer = NULL;
 8007844:	2300      	movs	r3, #0
 8007846:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800784a:	e007      	b.n	800785c <DNS_ParseDNSReply+0x488>
                                }
                            }
                            else
                            {
                                pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPOffset ] );
 800784c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007850:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007852:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8007856:	4413      	add	r3, r2
 8007858:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
                            }

                            if( ( pxNetworkBuffer != NULL ) )
 800785c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007860:	2b00      	cmp	r3, #0
 8007862:	f000 8151 	beq.w	8007b08 <DNS_ParseDNSReply+0x734>
                            {
                                pxAnswer = ( ( LLMNRAnswer_t * ) xSet.pucByte );
 8007866:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800786a:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
                                /* We leave 'usIdentifier' and 'usQuestions' untouched */
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_RESPONSE ); /* Set the response flag */
 800786e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007872:	3302      	adds	r3, #2
 8007874:	2280      	movs	r2, #128	@ 0x80
 8007876:	701a      	strb	r2, [r3, #0]
 8007878:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800787c:	3303      	adds	r3, #3
 800787e:	2200      	movs	r2, #0
 8007880:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );                        /* Provide a single answer */
 8007882:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007886:	3306      	adds	r3, #6
 8007888:	2200      	movs	r2, #0
 800788a:	701a      	strb	r2, [r3, #0]
 800788c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007890:	3307      	adds	r3, #7
 8007892:	2201      	movs	r2, #1
 8007894:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAuthorityRRs, 0 );                   /* No authority */
 8007896:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800789a:	3308      	adds	r3, #8
 800789c:	2200      	movs	r2, #0
 800789e:	701a      	strb	r2, [r3, #0]
 80078a0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80078a4:	3309      	adds	r3, #9
 80078a6:	2200      	movs	r2, #0
 80078a8:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );                  /* No additional info */
 80078aa:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80078ae:	330a      	adds	r3, #10
 80078b0:	2200      	movs	r2, #0
 80078b2:	701a      	strb	r2, [r3, #0]
 80078b4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80078b8:	330b      	adds	r3, #11
 80078ba:	2200      	movs	r2, #0
 80078bc:	701a      	strb	r2, [r3, #0]

                                pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 80078be:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80078c2:	22c0      	movs	r2, #192	@ 0xc0
 80078c4:	701a      	strb	r2, [r3, #0]
                                pxAnswer->ucNameOffset = ( uint8_t ) ( xSet.pcRequestedName - ( char * ) pucNewBuffer );
 80078c6:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80078ca:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80078d6:	705a      	strb	r2, [r3, #1]

                                vSetField16( pxAnswer, LLMNRAnswer_t, usType, xSet.usType );  /* Type A or AAAA: host */
 80078d8:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 80078dc:	0a1b      	lsrs	r3, r3, #8
 80078de:	b29a      	uxth	r2, r3
 80078e0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80078e4:	3302      	adds	r3, #2
 80078e6:	b2d2      	uxtb	r2, r2
 80078e8:	701a      	strb	r2, [r3, #0]
 80078ea:	f8b7 2158 	ldrh.w	r2, [r7, #344]	@ 0x158
 80078ee:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80078f2:	3303      	adds	r3, #3
 80078f4:	b2d2      	uxtb	r2, r2
 80078f6:	701a      	strb	r2, [r3, #0]
                                vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN ); /* 1: Class IN */
 80078f8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80078fc:	3304      	adds	r3, #4
 80078fe:	2200      	movs	r2, #0
 8007900:	701a      	strb	r2, [r3, #0]
 8007902:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007906:	3305      	adds	r3, #5
 8007908:	2201      	movs	r2, #1
 800790a:	701a      	strb	r2, [r3, #0]
                                vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 800790c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007910:	3306      	adds	r3, #6
 8007912:	2200      	movs	r2, #0
 8007914:	701a      	strb	r2, [r3, #0]
 8007916:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800791a:	3307      	adds	r3, #7
 800791c:	2200      	movs	r2, #0
 800791e:	701a      	strb	r2, [r3, #0]
 8007920:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007924:	3308      	adds	r3, #8
 8007926:	2201      	movs	r2, #1
 8007928:	701a      	strb	r2, [r3, #0]
 800792a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800792e:	3309      	adds	r3, #9
 8007930:	222c      	movs	r2, #44	@ 0x2c
 8007932:	701a      	strb	r2, [r3, #0]

                                usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( xSet.pucByte - pucNewBuffer ) );
 8007934:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8007938:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	b29b      	uxth	r3, r3
 8007940:	3310      	adds	r3, #16
 8007942:	b29b      	uxth	r3, r3
 8007944:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba

                                #if ( ipconfigUSE_IPv6 != 0 )
                                    if( xSet.usType == dnsTYPE_AAAA_HOST )
 8007948:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 800794c:	2b1c      	cmp	r3, #28
 800794e:	d131      	bne.n	80079b4 <DNS_ParseDNSReply+0x5e0>
                                    {
                                        size_t uxDistance;
                                        vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, ipSIZE_OF_IPv6_ADDRESS );
 8007950:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007954:	330a      	adds	r3, #10
 8007956:	2200      	movs	r2, #0
 8007958:	701a      	strb	r2, [r3, #0]
 800795a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800795e:	330b      	adds	r3, #11
 8007960:	2210      	movs	r2, #16
 8007962:	701a      	strb	r2, [r3, #0]
                                        ( void ) memcpy( &( pxAnswer->ulIPAddress ), xEndPoint.ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8007964:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007968:	f103 020c 	add.w	r2, r3, #12
 800796c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007970:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007974:	4615      	mov	r5, r2
 8007976:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 800797a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800797c:	6028      	str	r0, [r5, #0]
 800797e:	6069      	str	r1, [r5, #4]
 8007980:	60aa      	str	r2, [r5, #8]
 8007982:	60eb      	str	r3, [r5, #12]
                                        uxDistance = ( size_t ) ( xSet.pucByte - pucNewBuffer );
 8007984:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8007988:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800798c:	1ad3      	subs	r3, r2, r3
 800798e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
                                        /* An extra 12 bytes will be sent compared to an A-record. */
                                        usLength = ( int16_t ) ( sizeof( *pxAnswer ) + uxDistance + ipSIZE_OF_IPv6_ADDRESS - sizeof( pxAnswer->ulIPAddress ) );
 8007992:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8007996:	b29b      	uxth	r3, r3
 8007998:	331c      	adds	r3, #28
 800799a:	b29b      	uxth	r3, r3
 800799c:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba
 80079a0:	e09a      	b.n	8007ad8 <DNS_ParseDNSReply+0x704>
 80079a2:	bf00      	nop
 80079a4:	08022d94 	.word	0x08022d94
 80079a8:	08022dc8 	.word	0x08022dc8
 80079ac:	08022dfc 	.word	0x08022dfc
 80079b0:	08025cb0 	.word	0x08025cb0
                                    }
                                    else
                                #endif /* ( ipconfigUSE_IPv6 != 0 ) */
                                {
                                    size_t uxDistance;
                                    vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, ( uint16_t ) sizeof( pxAnswer->ulIPAddress ) );
 80079b4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80079b8:	330a      	adds	r3, #10
 80079ba:	2200      	movs	r2, #0
 80079bc:	701a      	strb	r2, [r3, #0]
 80079be:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80079c2:	330b      	adds	r3, #11
 80079c4:	2204      	movs	r2, #4
 80079c6:	701a      	strb	r2, [r3, #0]
                                    vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( xEndPoint.ipv4_settings.ulIPAddress ) );
 80079c8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80079cc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	061a      	lsls	r2, r3, #24
 80079d4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80079d8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	021b      	lsls	r3, r3, #8
 80079e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80079e4:	431a      	orrs	r2, r3
 80079e6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80079ea:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	0a1b      	lsrs	r3, r3, #8
 80079f2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80079f6:	431a      	orrs	r2, r3
 80079f8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80079fc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	0e1b      	lsrs	r3, r3, #24
 8007a04:	4313      	orrs	r3, r2
 8007a06:	0e1a      	lsrs	r2, r3, #24
 8007a08:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007a0c:	330c      	adds	r3, #12
 8007a0e:	b2d2      	uxtb	r2, r2
 8007a10:	701a      	strb	r2, [r3, #0]
 8007a12:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007a16:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	061a      	lsls	r2, r3, #24
 8007a1e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007a22:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	021b      	lsls	r3, r3, #8
 8007a2a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007a2e:	431a      	orrs	r2, r3
 8007a30:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007a34:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	0a1b      	lsrs	r3, r3, #8
 8007a3c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007a40:	431a      	orrs	r2, r3
 8007a42:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007a46:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	0e1b      	lsrs	r3, r3, #24
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	0c1a      	lsrs	r2, r3, #16
 8007a52:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007a56:	330d      	adds	r3, #13
 8007a58:	b2d2      	uxtb	r2, r2
 8007a5a:	701a      	strb	r2, [r3, #0]
 8007a5c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007a60:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	061a      	lsls	r2, r3, #24
 8007a68:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007a6c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	021b      	lsls	r3, r3, #8
 8007a74:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007a78:	431a      	orrs	r2, r3
 8007a7a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007a7e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	0a1b      	lsrs	r3, r3, #8
 8007a86:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007a8a:	431a      	orrs	r2, r3
 8007a8c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007a90:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	0e1b      	lsrs	r3, r3, #24
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	0a1a      	lsrs	r2, r3, #8
 8007a9c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007aa0:	330e      	adds	r3, #14
 8007aa2:	b2d2      	uxtb	r2, r2
 8007aa4:	701a      	strb	r2, [r3, #0]
 8007aa6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007aaa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	0e1a      	lsrs	r2, r3, #24
 8007ab2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007ab6:	330f      	adds	r3, #15
 8007ab8:	b2d2      	uxtb	r2, r2
 8007aba:	701a      	strb	r2, [r3, #0]
                                    uxDistance = ( size_t ) ( xSet.pucByte - pucNewBuffer );
 8007abc:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8007ac0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
                                    usLength = ( int16_t ) ( sizeof( *pxAnswer ) + uxDistance );
 8007aca:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	3310      	adds	r3, #16
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba
                                }

                                prepareReplyDNSMessage( pxNetworkBuffer, usLength );
 8007ad8:	f9b7 31ba 	ldrsh.w	r3, [r7, #442]	@ 0x1ba
 8007adc:	4619      	mov	r1, r3
 8007ade:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8007ae2:	f000 fa21 	bl	8007f28 <prepareReplyDNSMessage>
                                /* This function will fill in the eth addresses and send the packet */
                                vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8007aec:	f001 f924 	bl	8008d38 <vReturnEthernetFrame>

                                if( pxNewBuffer != NULL )
 8007af0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d007      	beq.n	8007b08 <DNS_ParseDNSReply+0x734>
                                {
                                    vReleaseNetworkBufferAndDescriptor( pxNewBuffer );
 8007af8:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 8007afc:	f00e fc2c 	bl	8016358 <vReleaseNetworkBufferAndDescriptor>
 8007b00:	e002      	b.n	8007b08 <DNS_ParseDNSReply+0x734>
                    break;
 8007b02:	bf00      	nop
 8007b04:	e000      	b.n	8007b08 <DNS_ParseDNSReply+0x734>
                            break;
 8007b06:	bf00      	nop
                #endif /* ipconfigUSE_LLMNR == 1 */
                ( void ) uxBytesRead;
            } while( ipFALSE_BOOL );
        }

        if( xReturn == pdFALSE )
 8007b08:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d103      	bne.n	8007b18 <DNS_ParseDNSReply+0x744>
        {
            /* There was an error while parsing the DNS response. Return error code. */
            ulIPAddress = ( uint32_t ) dnsPARSE_ERROR;
 8007b10:	2300      	movs	r3, #0
 8007b12:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8007b16:	e009      	b.n	8007b2c <DNS_ParseDNSReply+0x758>
        }
        else if( xExpected == pdFALSE )
 8007b18:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007b1c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d102      	bne.n	8007b2c <DNS_ParseDNSReply+0x758>
        {
            /* Do not return a valid IP-address in case the reply was not expected. */
            ulIPAddress = 0U;
 8007b26:	2300      	movs	r3, #0
 8007b28:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        else
        {
            /* The IP-address found will be returned. */
        }

        return ulIPAddress;
 8007b2c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
    }
 8007b30:	4618      	mov	r0, r3
 8007b32:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bdb0      	pop	{r4, r5, r7, pc}
 8007b3a:	bf00      	nop

08007b3c <parseDNSAnswer>:
 * @return pdTRUE when successful, otherwise pdFALSE.
 */
    uint32_t parseDNSAnswer( ParseSet_t * pxSet,
                             struct freertos_addrinfo ** ppxAddressInfo,
                             size_t * uxBytesRead )
    {
 8007b3c:	b590      	push	{r4, r7, lr}
 8007b3e:	b0a7      	sub	sp, #156	@ 0x9c
 8007b40:	af02      	add	r7, sp, #8
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
        uint16_t x;
        size_t uxResult;
        uint32_t ulReturnIPAddress = 0U;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        const uint16_t usCount = ( uint16_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 8007b4e:	2304      	movs	r3, #4
 8007b50:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
        BaseType_t xReturn = pdTRUE;
 8007b54:	2301      	movs	r3, #1
 8007b56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        const DNSAnswerRecord_t * pxDNSAnswerRecord;
        IPv46_Address_t xIP_Address;

        struct freertos_addrinfo * pxNewAddress = NULL;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

        for( x = 0U; x < pxSet->usAnswers; x++ )
 8007b60:	2300      	movs	r3, #0
 8007b62:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8007b66:	e1c1      	b.n	8007eec <parseDNSAnswer+0x3b0>
        {
            BaseType_t xDoAccept = pdFALSE;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	67fb      	str	r3, [r7, #124]	@ 0x7c

            if( pxSet->usNumARecordsStored >= usCount )
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007b70:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8007b74:	429a      	cmp	r2, r3
 8007b76:	f240 81c1 	bls.w	8007efc <parseDNSAnswer+0x3c0>
            {
                /* Only count ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY number of records. */
                break;
            }

            uxResult = DNS_SkipNameField( pxSet->pucByte,
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	68da      	ldr	r2, [r3, #12]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	695b      	ldr	r3, [r3, #20]
 8007b82:	4619      	mov	r1, r3
 8007b84:	4610      	mov	r0, r2
 8007b86:	f7ff fbcf 	bl	8007328 <DNS_SkipNameField>
 8007b8a:	6778      	str	r0, [r7, #116]	@ 0x74
                                          pxSet->uxSourceBytesRemaining );

            /* Check for a malformed response. */
            if( uxResult == 0U )
 8007b8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d103      	bne.n	8007b9a <parseDNSAnswer+0x5e>
            {
                xReturn = pdFALSE;
 8007b92:	2300      	movs	r3, #0
 8007b94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 8007b98:	e1b1      	b.n	8007efe <parseDNSAnswer+0x3c2>
            }

            if( uxBytesRead != NULL )
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d005      	beq.n	8007bac <parseDNSAnswer+0x70>
            {
                *uxBytesRead += uxResult;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ba6:	441a      	add	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	601a      	str	r2, [r3, #0]
            }

            pxSet->pucByte = &( pxSet->pucByte[ uxResult ] );
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	68da      	ldr	r2, [r3, #12]
 8007bb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007bb2:	441a      	add	r2, r3
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	60da      	str	r2, [r3, #12]
            pxSet->uxSourceBytesRemaining -= uxResult;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	695a      	ldr	r2, [r3, #20]
 8007bbc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007bbe:	1ad2      	subs	r2, r2, r3
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	615a      	str	r2, [r3, #20]

            /* Is there enough data for an IPv4 A record answer and, if so,
             * is this an A record? */
            if( pxSet->uxSourceBytesRemaining < sizeof( uint16_t ) )
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	695b      	ldr	r3, [r3, #20]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d803      	bhi.n	8007bd4 <parseDNSAnswer+0x98>
            {
                xReturn = pdFALSE;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 8007bd2:	e194      	b.n	8007efe <parseDNSAnswer+0x3c2>
            }

            pxSet->usType = usChar2u16( pxSet->pucByte );
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f001 ff5a 	bl	8009a92 <usChar2u16>
 8007bde:	4603      	mov	r3, r0
 8007be0:	461a      	mov	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	831a      	strh	r2, [r3, #24]

            if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	8b1b      	ldrh	r3, [r3, #24]
 8007bea:	2b1c      	cmp	r3, #28
 8007bec:	d10c      	bne.n	8007c08 <parseDNSAnswer+0xcc>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv6_ADDRESS;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2210      	movs	r2, #16
 8007bf2:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	695a      	ldr	r2, [r3, #20]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6a1b      	ldr	r3, [r3, #32]
 8007bfc:	330a      	adds	r3, #10
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d323      	bcc.n	8007c4a <parseDNSAnswer+0x10e>
                {
                    xDoAccept = pdTRUE;
 8007c02:	2301      	movs	r3, #1
 8007c04:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c06:	e020      	b.n	8007c4a <parseDNSAnswer+0x10e>
                }
            }
            else if( pxSet->usType == ( uint16_t ) dnsTYPE_A_HOST )
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	8b1b      	ldrh	r3, [r3, #24]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d11c      	bne.n	8007c4a <parseDNSAnswer+0x10e>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv4_ADDRESS;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2204      	movs	r2, #4
 8007c14:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	695a      	ldr	r2, [r3, #20]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6a1b      	ldr	r3, [r3, #32]
 8007c1e:	330a      	adds	r3, #10
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d312      	bcc.n	8007c4a <parseDNSAnswer+0x10e>
                     * invoke the user callback and also store this invalid address in our cache. */
                    void * pvCopyDest;
                    const void * pvCopySource;
                    uint32_t ulTestAddress;

                    pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	330a      	adds	r3, #10
 8007c2a:	673b      	str	r3, [r7, #112]	@ 0x70
                    pvCopyDest = &( ulTestAddress );
 8007c2c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8007c30:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	461a      	mov	r2, r3
 8007c38:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8007c3a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007c3c:	f018 fe92 	bl	8020964 <memcpy>

                    if( ulTestAddress != 0U )
 8007c40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d001      	beq.n	8007c4a <parseDNSAnswer+0x10e>
                    {
                        xDoAccept = pdTRUE;
 8007c46:	2301      	movs	r3, #1
 8007c48:	67fb      	str	r3, [r7, #124]	@ 0x7c
            {
                /* Unknown host type, AAAA nor A.
                 * 'xDoAccept' was already initialised as pdFALSE. */
            }

            if( xDoAccept != pdFALSE )
 8007c4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 810d 	beq.w	8007e6c <parseDNSAnswer+0x330>
                 * fields of the structure. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	66bb      	str	r3, [r7, #104]	@ 0x68

                /* Sanity check the data length of an IPv4 answer. */
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 8007c58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c5a:	891b      	ldrh	r3, [r3, #8]
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	021b      	lsls	r3, r3, #8
 8007c60:	b21a      	sxth	r2, r3
 8007c62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c64:	891b      	ldrh	r3, [r3, #8]
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	0a1b      	lsrs	r3, r3, #8
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	b21b      	sxth	r3, r3
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	b21a      	sxth	r2, r3
                    ( uint16_t ) pxSet->uxAddressLength )
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6a1b      	ldr	r3, [r3, #32]
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 8007c76:	b21b      	sxth	r3, r3
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	f040 80d0 	bne.w	8007e1e <parseDNSAnswer+0x2e2>
                {
                    if( pxSet->uxAddressLength == ipSIZE_OF_IPv6_ADDRESS ) /*No check needed for pxSet->usType as uxAddressLength is set based on usType*/
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	2b10      	cmp	r3, #16
 8007c84:	d11c      	bne.n	8007cc0 <parseDNSAnswer+0x184>
                    {
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
                                         &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] ),
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	330a      	adds	r3, #10
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
 8007c8c:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8007c90:	6818      	ldr	r0, [r3, #0]
 8007c92:	6859      	ldr	r1, [r3, #4]
 8007c94:	689a      	ldr	r2, [r3, #8]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                                         ipSIZE_OF_IPv6_ADDRESS );

                        if( ppxAddressInfo != NULL )
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d009      	beq.n	8007cb4 <parseDNSAnswer+0x178>
                        {
                            pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET6, xIP_Address.xIPAddress.xIP_IPv6.ucBytes );
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	3334      	adds	r3, #52	@ 0x34
 8007ca4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8007ca8:	210a      	movs	r1, #10
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fe fe24 	bl	80068f8 <pxNew_AddrInfo>
 8007cb0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                        }

                        xIP_Address.xIs_IPv6 = pdTRUE;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Return non-zero to inform the caller that a valid
                         * IPv6 address was found. */
                        pxSet->ulIPAddress = 1U;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	61da      	str	r2, [r3, #28]
 8007cbe:	e021      	b.n	8007d04 <parseDNSAnswer+0x1c8>
                        /*
                         * Use helper variables for memcpy() to remain
                         * compliant with MISRA Rule 21.15.  These should be
                         * optimized away.
                         */
                        pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	330a      	adds	r3, #10
 8007cc6:	663b      	str	r3, [r7, #96]	@ 0x60
                        pvCopyDest = &( pxSet->ulIPAddress );
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	331c      	adds	r3, #28
 8007ccc:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6a1b      	ldr	r3, [r3, #32]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007cd6:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8007cd8:	f018 fe44 	bl	8020964 <memcpy>

                        if( ppxAddressInfo != NULL )
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00b      	beq.n	8007cfa <parseDNSAnswer+0x1be>
                        {
                            const uint8_t * ucBytes = ( uint8_t * ) &( pxSet->ulIPAddress );
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	331c      	adds	r3, #28
 8007ce6:	65bb      	str	r3, [r7, #88]	@ 0x58

                            pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET4, ucBytes );
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	3334      	adds	r3, #52	@ 0x34
 8007cec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007cee:	2102      	movs	r1, #2
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fe fe01 	bl	80068f8 <pxNew_AddrInfo>
 8007cf6:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                        }

                        xIP_Address.xIPAddress.ulIP_IPv4 = pxSet->ulIPAddress;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	69db      	ldr	r3, [r3, #28]
 8007cfe:	643b      	str	r3, [r7, #64]	@ 0x40
                        xIP_Address.xIs_IPv6 = pdFALSE;
 8007d00:	2300      	movs	r3, #0
 8007d02:	653b      	str	r3, [r7, #80]	@ 0x50
                    }

                    if( pxNewAddress != NULL )
 8007d04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d013      	beq.n	8007d34 <parseDNSAnswer+0x1f8>
                    {
                        if( *( ppxAddressInfo ) == NULL )
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d104      	bne.n	8007d1e <parseDNSAnswer+0x1e2>
                        {
                            /* For the first address found. */
                            *( ppxAddressInfo ) = pxNewAddress;
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007d1a:	601a      	str	r2, [r3, #0]
 8007d1c:	e004      	b.n	8007d28 <parseDNSAnswer+0x1ec>
                        }
                        else
                        {
                            /* For the next address found. */
                            *( pxSet->ppxLastAddress ) = pxNewAddress;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007d26:	601a      	str	r2, [r3, #0]
                        }

                        pxSet->ppxLastAddress = &( pxNewAddress->ai_next );
 8007d28:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007d2c:	f103 021c 	add.w	r2, r3, #28
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	649a      	str	r2, [r3, #72]	@ 0x48

                    #if ( ipconfigDNS_USE_CALLBACKS == 1 )
                    {
                        BaseType_t xCallbackResult;

                        xCallbackResult = xDNSDoCallback( pxSet, ( ppxAddressInfo != NULL ) ? *( ppxAddressInfo ) : NULL );
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d002      	beq.n	8007d40 <parseDNSAnswer+0x204>
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	e000      	b.n	8007d42 <parseDNSAnswer+0x206>
 8007d40:	2300      	movs	r3, #0
 8007d42:	4619      	mov	r1, r3
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f7ff f979 	bl	800703c <xDNSDoCallback>
 8007d4a:	6578      	str	r0, [r7, #84]	@ 0x54

                        /* See if any asynchronous call was made to FreeRTOS_gethostbyname_a() */
                        if( xCallbackResult != pdFALSE )
 8007d4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d002      	beq.n	8007d58 <parseDNSAnswer+0x21c>
                        {
                            /* This device has requested this DNS look-up.
                             * The result may be stored in the DNS cache. */
                            pxSet->xDoStore = pdTRUE;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2201      	movs	r2, #1
 8007d56:	631a      	str	r2, [r3, #48]	@ 0x30
                    {
                        char cBuffer[ 40 ];

                        /* The reply will only be stored in the DNS cache when the
                         * request was issued by this device. */
                        if( pxSet->xDoStore != pdFALSE )
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d011      	beq.n	8007d84 <parseDNSAnswer+0x248>
                        {
                            ( void ) FreeRTOS_dns_update(
                                pxSet->pcName,
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f103 0034 	add.w	r0, r3, #52	@ 0x34
                                &xIP_Address,
                                pxDNSAnswerRecord->ulTTL,
 8007d66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007d68:	685a      	ldr	r2, [r3, #4]
                            ( void ) FreeRTOS_dns_update(
 8007d6a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8007d6e:	2300      	movs	r3, #0
 8007d70:	9300      	str	r3, [sp, #0]
 8007d72:	2300      	movs	r3, #0
 8007d74:	f7fe fe85 	bl	8006a82 <FreeRTOS_dns_update>
                                pdFALSE,
                                NULL );
                            pxSet->usNumARecordsStored++; /* Track # of A records stored */
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	849a      	strh	r2, [r3, #36]	@ 0x24
                        }

                        if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	8b1b      	ldrh	r3, [r3, #24]
 8007d88:	2b1c      	cmp	r3, #28
 8007d8a:	d11f      	bne.n	8007dcc <parseDNSAnswer+0x290>
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6, ( const void * ) xIP_Address.xIPAddress.xIP_IPv6.ucBytes, cBuffer, sizeof( cBuffer ) );
 8007d8c:	f107 0214 	add.w	r2, r7, #20
 8007d90:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8007d94:	2328      	movs	r3, #40	@ 0x28
 8007d96:	200a      	movs	r0, #10
 8007d98:	f006 fb6c 	bl	800e474 <FreeRTOS_inet_ntop>
                            FreeRTOS_printf( ( "DNS[0x%04X]: The answer to '%s' (%s) will%s be stored\n",
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	881b      	ldrh	r3, [r3, #0]
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	4618      	mov	r0, r3
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d001      	beq.n	8007db8 <parseDNSAnswer+0x27c>
 8007db4:	4b58      	ldr	r3, [pc, #352]	@ (8007f18 <parseDNSAnswer+0x3dc>)
 8007db6:	e000      	b.n	8007dba <parseDNSAnswer+0x27e>
 8007db8:	4b58      	ldr	r3, [pc, #352]	@ (8007f1c <parseDNSAnswer+0x3e0>)
 8007dba:	f107 0114 	add.w	r1, r7, #20
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	4601      	mov	r1, r0
 8007dc4:	4856      	ldr	r0, [pc, #344]	@ (8007f20 <parseDNSAnswer+0x3e4>)
 8007dc6:	f018 fbb1 	bl	802052c <lUDPLoggingPrintf>
 8007dca:	e01f      	b.n	8007e0c <parseDNSAnswer+0x2d0>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                        else
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
                                                         ( const void * ) &( pxSet->ulIPAddress ),
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f103 011c 	add.w	r1, r3, #28
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
 8007dd2:	f107 0214 	add.w	r2, r7, #20
 8007dd6:	2328      	movs	r3, #40	@ 0x28
 8007dd8:	2002      	movs	r0, #2
 8007dda:	f006 fb4b 	bl	800e474 <FreeRTOS_inet_ntop>
                                                         cBuffer,
                                                         ( socklen_t ) sizeof( cBuffer ) );
                            /* Show what has happened. */
                            FreeRTOS_printf( ( "DNS[0x%04X]: The answer to '%s' (%s) will%s be stored\n",
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	881b      	ldrh	r3, [r3, #0]
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	4618      	mov	r0, r3
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <parseDNSAnswer+0x2be>
 8007df6:	4b48      	ldr	r3, [pc, #288]	@ (8007f18 <parseDNSAnswer+0x3dc>)
 8007df8:	e000      	b.n	8007dfc <parseDNSAnswer+0x2c0>
 8007dfa:	4b48      	ldr	r3, [pc, #288]	@ (8007f1c <parseDNSAnswer+0x3e0>)
 8007dfc:	f107 0114 	add.w	r1, r7, #20
 8007e00:	9300      	str	r3, [sp, #0]
 8007e02:	460b      	mov	r3, r1
 8007e04:	4601      	mov	r1, r0
 8007e06:	4846      	ldr	r0, [pc, #280]	@ (8007f20 <parseDNSAnswer+0x3e4>)
 8007e08:	f018 fb90 	bl	802052c <lUDPLoggingPrintf>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                    }
                    #endif /* ipconfigUSE_DNS_CACHE */

                    if( ulReturnIPAddress == 0U )
 8007e0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d119      	bne.n	8007e48 <parseDNSAnswer+0x30c>
                    {
                        /* Here pxSet->ulIPAddress should be not equal tp 0 since pxSet->ulIPAddress is copied from
                         * pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] and os verified to be non zero above. */
                        /* Remember the first IP-address that is found. */
                        ulReturnIPAddress = pxSet->ulIPAddress;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	69db      	ldr	r3, [r3, #28]
 8007e18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e1c:	e014      	b.n	8007e48 <parseDNSAnswer+0x30c>
                    }
                }
                else
                {
                    FreeRTOS_printf( ( "DNS sanity check failed: %u != %u\n",
 8007e1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e20:	891b      	ldrh	r3, [r3, #8]
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	021b      	lsls	r3, r3, #8
 8007e26:	b21a      	sxth	r2, r3
 8007e28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e2a:	891b      	ldrh	r3, [r3, #8]
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	0a1b      	lsrs	r3, r3, #8
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	b21b      	sxth	r3, r3
 8007e34:	4313      	orrs	r3, r2
 8007e36:	b21b      	sxth	r3, r3
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6a1b      	ldr	r3, [r3, #32]
 8007e40:	461a      	mov	r2, r3
 8007e42:	4838      	ldr	r0, [pc, #224]	@ (8007f24 <parseDNSAnswer+0x3e8>)
 8007e44:	f018 fb72 	bl	802052c <lUDPLoggingPrintf>
                                       FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ),
                                       ( unsigned ) pxSet->uxAddressLength ) );
                }

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ] );
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	68da      	ldr	r2, [r3, #12]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6a1b      	ldr	r3, [r3, #32]
 8007e50:	330a      	adds	r3, #10
 8007e52:	441a      	add	r2, r3
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength );
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	695a      	ldr	r2, [r3, #20]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6a1b      	ldr	r3, [r3, #32]
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	f1a3 020a 	sub.w	r2, r3, #10
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	615a      	str	r2, [r3, #20]
 8007e6a:	e03a      	b.n	8007ee2 <parseDNSAnswer+0x3a6>
            }
            else if( pxSet->uxSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) )
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	695b      	ldr	r3, [r3, #20]
 8007e70:	2b09      	cmp	r3, #9
 8007e72:	d936      	bls.n	8007ee2 <parseDNSAnswer+0x3a6>
                /* Cast the response to DNSAnswerRecord for easy access to fields of the DNS response. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	66bb      	str	r3, [r7, #104]	@ 0x68

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	f103 020a 	add.w	r2, r3, #10
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= sizeof( DNSAnswerRecord_t );
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	f1a3 020a 	sub.w	r2, r3, #10
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	615a      	str	r2, [r3, #20]

                /* Determine the length of the answer data from the header. */
                usDataLength = FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength );
 8007e92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e94:	891b      	ldrh	r3, [r3, #8]
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	021b      	lsls	r3, r3, #8
 8007e9a:	b21a      	sxth	r2, r3
 8007e9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e9e:	891b      	ldrh	r3, [r3, #8]
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	0a1b      	lsrs	r3, r3, #8
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	b21b      	sxth	r3, r3
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	b21b      	sxth	r3, r3
 8007eac:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                /* Jump over the answer. */
                if( pxSet->uxSourceBytesRemaining >= usDataLength )
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	695a      	ldr	r2, [r3, #20]
 8007eb4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d30e      	bcc.n	8007eda <parseDNSAnswer+0x39e>
                {
                    pxSet->pucByte = &( pxSet->pucByte[ usDataLength ] );
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	68da      	ldr	r2, [r3, #12]
 8007ec0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007ec4:	441a      	add	r2, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	60da      	str	r2, [r3, #12]
                    pxSet->uxSourceBytesRemaining -= usDataLength;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	695a      	ldr	r2, [r3, #20]
 8007ece:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007ed2:	1ad2      	subs	r2, r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	615a      	str	r2, [r3, #20]
 8007ed8:	e003      	b.n	8007ee2 <parseDNSAnswer+0x3a6>
                }
                else
                {
                    /* Malformed response. */
                    xReturn = pdFALSE;
 8007eda:	2300      	movs	r3, #0
 8007edc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                    break;
 8007ee0:	e00d      	b.n	8007efe <parseDNSAnswer+0x3c2>
        for( x = 0U; x < pxSet->usAnswers; x++ )
 8007ee2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	88db      	ldrh	r3, [r3, #6]
 8007ef0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	f4ff ae37 	bcc.w	8007b68 <parseDNSAnswer+0x2c>
 8007efa:	e000      	b.n	8007efe <parseDNSAnswer+0x3c2>
                break;
 8007efc:	bf00      	nop
            {
                /* Do nothing */
            }
        }

        return ( xReturn != 0 ) ? ulReturnIPAddress : 0U;
 8007efe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d002      	beq.n	8007f0c <parseDNSAnswer+0x3d0>
 8007f06:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007f0a:	e000      	b.n	8007f0e <parseDNSAnswer+0x3d2>
 8007f0c:	2300      	movs	r3, #0
    }
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3794      	adds	r7, #148	@ 0x94
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd90      	pop	{r4, r7, pc}
 8007f16:	bf00      	nop
 8007f18:	08022e2c 	.word	0x08022e2c
 8007f1c:	08022e30 	.word	0x08022e30
 8007f20:	08022e38 	.word	0x08022e38
 8007f24:	08022e70 	.word	0x08022e70

08007f28 <prepareReplyDNSMessage>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the DNS message.
 * @param[in] lNetLength The length of the DNS message.
 */
        void prepareReplyDNSMessage( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                     BaseType_t lNetLength )
        {
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b08c      	sub	sp, #48	@ 0x30
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
            UDPPacket_t * pxUDPPacket;
            IPHeader_t * pxIPHeader;
            UDPHeader_t * pxUDPHeader;
            size_t uxDataLength;
            NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f36:	62bb      	str	r3, [r7, #40]	@ 0x28
            const size_t uxIPHeaderLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 fffd 	bl	8008f38 <uxIPHeaderSizePacket>
 8007f3e:	6278      	str	r0, [r7, #36]	@ 0x24

            configASSERT( pxEndPoint != NULL );
 8007f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d104      	bne.n	8007f50 <prepareReplyDNSMessage+0x28>
 8007f46:	f240 319f 	movw	r1, #927	@ 0x39f
 8007f4a:	4865      	ldr	r0, [pc, #404]	@ (80080e0 <prepareReplyDNSMessage+0x1b8>)
 8007f4c:	f7f9 f8e4 	bl	8001118 <vAssertCalled>
            pxUDPPacket = ( ( UDPPacket_t * )
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f54:	623b      	str	r3, [r7, #32]
                            pxNetworkBuffer->pucEthernetBuffer );
            pxIPHeader = &pxUDPPacket->xIPHeader;
 8007f56:	6a3b      	ldr	r3, [r7, #32]
 8007f58:	330e      	adds	r3, #14
 8007f5a:	61fb      	str	r3, [r7, #28]

            #if ( ipconfigUSE_IPv6 != 0 )
                if( ( ( uxIPHeaderLength == ipSIZE_OF_IPv6_HEADER ) && ( ( pxIPHeader->ucVersionHeaderLength & 0xf0U ) == 0x60U ) ) )
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5e:	2b28      	cmp	r3, #40	@ 0x28
 8007f60:	d150      	bne.n	8008004 <prepareReplyDNSMessage+0xdc>
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007f6a:	2b60      	cmp	r3, #96	@ 0x60
 8007f6c:	d14a      	bne.n	8008004 <prepareReplyDNSMessage+0xdc>
                {
                    UDPPacket_IPv6_t * xUDPPacket_IPv6;
                    IPHeader_IPv6_t * pxIPHeader_IPv6;

                    xUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f72:	61bb      	str	r3, [r7, #24]
                    pxIPHeader_IPv6 = &( xUDPPacket_IPv6->xIPHeader );
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	330e      	adds	r3, #14
 8007f78:	617b      	str	r3, [r7, #20]
                    pxUDPHeader = &xUDPPacket_IPv6->xUDPHeader;
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	3336      	adds	r3, #54	@ 0x36
 8007f7e:	613b      	str	r3, [r7, #16]

                    pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	3308      	adds	r3, #8
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	021b      	lsls	r3, r3, #8
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	3308      	adds	r3, #8
 8007f92:	0a1b      	lsrs	r3, r3, #8
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	4313      	orrs	r3, r2
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	809a      	strh	r2, [r3, #4]

                    {
                        ( void ) memcpy( pxIPHeader_IPv6->xDestinationAddress.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	f103 0018 	add.w	r0, r3, #24
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	3308      	adds	r3, #8
 8007fa8:	2210      	movs	r2, #16
 8007faa:	4619      	mov	r1, r3
 8007fac:	f018 fcda 	bl	8020964 <memcpy>
                        ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	f103 0008 	add.w	r0, r3, #8
 8007fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fb8:	3338      	adds	r3, #56	@ 0x38
 8007fba:	2210      	movs	r2, #16
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	f018 fcd1 	bl	8020964 <memcpy>
                    }

                    xUDPPacket_IPv6->xUDPHeader.usLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	3308      	adds	r3, #8
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	021b      	lsls	r3, r3, #8
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	3308      	adds	r3, #8
 8007fd4:	0a1b      	lsrs	r3, r3, #8
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	b29a      	uxth	r2, r3
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	875a      	strh	r2, [r3, #58]	@ 0x3a
                    vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	781a      	ldrb	r2, [r3, #0]
 8007fe4:	785b      	ldrb	r3, [r3, #1]
 8007fe6:	021b      	lsls	r3, r3, #8
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	81fb      	strh	r3, [r7, #14]
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	885b      	ldrh	r3, [r3, #2]
 8007ff0:	b29a      	uxth	r2, r3
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	801a      	strh	r2, [r3, #0]
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	89fa      	ldrh	r2, [r7, #14]
 8007ffa:	805a      	strh	r2, [r3, #2]
                    uxDataLength = ( size_t ) lNetLength + ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	333e      	adds	r3, #62	@ 0x3e
 8008000:	62fb      	str	r3, [r7, #44]	@ 0x2c
                {
 8008002:	e066      	b.n	80080d2 <prepareReplyDNSMessage+0x1aa>
                }
                else
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
            {
                pxUDPHeader = &pxUDPPacket->xUDPHeader;
 8008004:	6a3b      	ldr	r3, [r7, #32]
 8008006:	3322      	adds	r3, #34	@ 0x22
 8008008:	613b      	str	r3, [r7, #16]
                /* HT: started using defines like 'ipSIZE_OF_xxx' */
                pxIPHeader->usLength = FreeRTOS_htons( ( uint16_t ) lNetLength +
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	b29a      	uxth	r2, r3
 800800e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008010:	b29b      	uxth	r3, r3
 8008012:	4413      	add	r3, r2
 8008014:	b29b      	uxth	r3, r3
 8008016:	3308      	adds	r3, #8
 8008018:	b29b      	uxth	r3, r3
 800801a:	021b      	lsls	r3, r3, #8
 800801c:	b29a      	uxth	r2, r3
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	b29b      	uxth	r3, r3
 8008022:	4619      	mov	r1, r3
 8008024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008026:	440b      	add	r3, r1
 8008028:	3308      	adds	r3, #8
 800802a:	0a1b      	lsrs	r3, r3, #8
 800802c:	b29b      	uxth	r3, r3
 800802e:	4313      	orrs	r3, r2
 8008030:	b29a      	uxth	r2, r3
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	805a      	strh	r2, [r3, #2]
                                                       uxIPHeaderLength +
                                                       ipSIZE_OF_UDP_HEADER );

                /* HT:endian: should not be translated, copying from packet to packet */
                if( pxIPHeader->ulDestinationIPAddress == ipMDNS_IP_ADDRESS )
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	4a2a      	ldr	r2, [pc, #168]	@ (80080e4 <prepareReplyDNSMessage+0x1bc>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d103      	bne.n	8008048 <prepareReplyDNSMessage+0x120>
                {
                    pxIPHeader->ucTimeToLive = ipMDNS_TIME_TO_LIVE;
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	22ff      	movs	r2, #255	@ 0xff
 8008044:	721a      	strb	r2, [r3, #8]
 8008046:	e006      	b.n	8008056 <prepareReplyDNSMessage+0x12e>
                }
                else
                {
                    pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	68da      	ldr	r2, [r3, #12]
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	611a      	str	r2, [r3, #16]
                    pxIPHeader->ucTimeToLive = ipconfigUDP_TIME_TO_LIVE;
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	2280      	movs	r2, #128	@ 0x80
 8008054:	721a      	strb	r2, [r3, #8]
                }

                pxIPHeader->ulSourceIPAddress = pxEndPoint->ipv4_settings.ulIPAddress;
 8008056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	60da      	str	r2, [r3, #12]
                pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 800805e:	4b22      	ldr	r3, [pc, #136]	@ (80080e8 <prepareReplyDNSMessage+0x1c0>)
 8008060:	881b      	ldrh	r3, [r3, #0]
 8008062:	021b      	lsls	r3, r3, #8
 8008064:	b21a      	sxth	r2, r3
 8008066:	4b20      	ldr	r3, [pc, #128]	@ (80080e8 <prepareReplyDNSMessage+0x1c0>)
 8008068:	881b      	ldrh	r3, [r3, #0]
 800806a:	0a1b      	lsrs	r3, r3, #8
 800806c:	b29b      	uxth	r3, r3
 800806e:	b21b      	sxth	r3, r3
 8008070:	4313      	orrs	r3, r2
 8008072:	b21b      	sxth	r3, r3
 8008074:	b29a      	uxth	r2, r3
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	809a      	strh	r2, [r3, #4]
                 * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
                 */
                #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                    pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
                #else
                    pxIPHeader->usFragmentOffset = 0U;
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	2200      	movs	r2, #0
 800807e:	719a      	strb	r2, [r3, #6]
 8008080:	2200      	movs	r2, #0
 8008082:	71da      	strb	r2, [r3, #7]
                #endif
                usPacketIdentifier++;
 8008084:	4b18      	ldr	r3, [pc, #96]	@ (80080e8 <prepareReplyDNSMessage+0x1c0>)
 8008086:	881b      	ldrh	r3, [r3, #0]
 8008088:	3301      	adds	r3, #1
 800808a:	b29a      	uxth	r2, r3
 800808c:	4b16      	ldr	r3, [pc, #88]	@ (80080e8 <prepareReplyDNSMessage+0x1c0>)
 800808e:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = FreeRTOS_htons( ( uint32_t ) lNetLength +
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	b29b      	uxth	r3, r3
 8008094:	3308      	adds	r3, #8
 8008096:	b29b      	uxth	r3, r3
 8008098:	021b      	lsls	r3, r3, #8
 800809a:	b29a      	uxth	r2, r3
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	3308      	adds	r3, #8
 80080a0:	0a1b      	lsrs	r3, r3, #8
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	4313      	orrs	r3, r2
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	809a      	strh	r2, [r3, #4]
                                                        ipSIZE_OF_UDP_HEADER );
                vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	781a      	ldrb	r2, [r3, #0]
 80080b0:	785b      	ldrb	r3, [r3, #1]
 80080b2:	021b      	lsls	r3, r3, #8
 80080b4:	4313      	orrs	r3, r2
 80080b6:	81bb      	strh	r3, [r7, #12]
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	885b      	ldrh	r3, [r3, #2]
 80080bc:	b29a      	uxth	r2, r3
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	801a      	strh	r2, [r3, #0]
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	89ba      	ldrh	r2, [r7, #12]
 80080c6:	805a      	strh	r2, [r3, #2]

                /* Important: tell NIC driver how many bytes must be sent */
                uxDataLength = ( ( size_t ) lNetLength ) + uxIPHeaderLength + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 80080c8:	683a      	ldr	r2, [r7, #0]
 80080ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080cc:	4413      	add	r3, r2
 80080ce:	3316      	adds	r3, #22
 80080d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxUDPPacket, uxDataLength, pdTRUE );
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            /* Important: tell NIC driver how many bytes must be sent */
            pxNetworkBuffer->xDataLength = uxDataLength;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080d6:	629a      	str	r2, [r3, #40]	@ 0x28
        }
 80080d8:	bf00      	nop
 80080da:	3730      	adds	r7, #48	@ 0x30
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	08022dc8 	.word	0x08022dc8
 80080e4:	fb0000e0 	.word	0xfb0000e0
 80080e8:	20000e4c 	.word	0x20000e4c

080080ec <ProcessICMPPacket>:
 *
 * @return eReleaseBuffer when the message buffer should be released, or eReturnEthernetFrame
 *                        when the packet should be returned.
 */
    eFrameProcessingResult_t ProcessICMPPacket( const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 80080f4:	2300      	movs	r3, #0
 80080f6:	73fb      	strb	r3, [r7, #15]

        iptraceICMP_PACKET_RECEIVED();

        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) );
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080fc:	2b29      	cmp	r3, #41	@ 0x29
 80080fe:	d803      	bhi.n	8008108 <ProcessICMPPacket+0x1c>
 8008100:	2159      	movs	r1, #89	@ 0x59
 8008102:	4811      	ldr	r0, [pc, #68]	@ (8008148 <ProcessICMPPacket+0x5c>)
 8008104:	f7f9 f808 	bl	8001118 <vAssertCalled>

        if( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) )
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800810c:	2b29      	cmp	r3, #41	@ 0x29
 800810e:	d915      	bls.n	800813c <ProcessICMPPacket+0x50>
             * fields of ICMP packet. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            ICMPPacket_t * pxICMPPacket = ( ( ICMPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008114:	60bb      	str	r3, [r7, #8]

            switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800811c:	2b00      	cmp	r3, #0
 800811e:	d008      	beq.n	8008132 <ProcessICMPPacket+0x46>
 8008120:	2b08      	cmp	r3, #8
 8008122:	d10a      	bne.n	800813a <ProcessICMPPacket+0x4e>
            {
                case ipICMP_ECHO_REQUEST:
                    #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )
                    {
                        eReturn = prvProcessICMPEchoRequest( pxICMPPacket, pxNetworkBuffer );
 8008124:	6879      	ldr	r1, [r7, #4]
 8008126:	68b8      	ldr	r0, [r7, #8]
 8008128:	f000 f810 	bl	800814c <prvProcessICMPEchoRequest>
 800812c:	4603      	mov	r3, r0
 800812e:	73fb      	strb	r3, [r7, #15]
                    }
                    #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) */
                    break;
 8008130:	e004      	b.n	800813c <ProcessICMPPacket+0x50>

                case ipICMP_ECHO_REPLY:
                    #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                    {
                        prvProcessICMPEchoReply( pxICMPPacket );
 8008132:	68b8      	ldr	r0, [r7, #8]
 8008134:	f000 f836 	bl	80081a4 <prvProcessICMPEchoReply>
                    }
                    #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
                    break;
 8008138:	e000      	b.n	800813c <ProcessICMPPacket+0x50>

                default:
                    /* Only ICMP echo packets are handled. */
                    break;
 800813a:	bf00      	nop
            }
        }

        return eReturn;
 800813c:	7bfb      	ldrb	r3, [r7, #15]
    }
 800813e:	4618      	mov	r0, r3
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	08022e94 	.word	0x08022e94

0800814c <prvProcessICMPEchoRequest>:
 * @param pxNetworkBuffer Pointer to the network buffer containing the ICMP packet.
 * @returns Function returns eReturnEthernetFrame.
 */
    static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket,
                                                               const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 800814c:	b480      	push	{r7}
 800814e:	b087      	sub	sp, #28
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
        ICMPHeader_t * pxICMPHeader;
        IPHeader_t * pxIPHeader;
        uint32_t ulIPAddress;

        pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	3322      	adds	r3, #34	@ 0x22
 800815a:	617b      	str	r3, [r7, #20]
        pxIPHeader = &( pxICMPPacket->xIPHeader );
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	330e      	adds	r3, #14
 8008160:	613b      	str	r3, [r7, #16]

        /* The checksum can be checked here - but a ping reply should be
         * returned even if the checksum is incorrect so the other end can
         * tell that the ping was received - even if the ping reply contains
         * invalid data. */
        pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	2200      	movs	r2, #0
 8008166:	701a      	strb	r2, [r3, #0]
        ulIPAddress = pxIPHeader->ulDestinationIPAddress;
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	60fb      	str	r3, [r7, #12]
        pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	68da      	ldr	r2, [r3, #12]
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	611a      	str	r2, [r3, #16]
        pxIPHeader->ulSourceIPAddress = ulIPAddress;
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	60da      	str	r2, [r3, #12]
        /* Update the TTL field. */
        pxIPHeader->ucTimeToLive = ipconfigICMP_TIME_TO_LIVE;
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	2240      	movs	r2, #64	@ 0x40
 8008180:	721a      	strb	r2, [r3, #8]
         * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
         */
        #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
            pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
        #else
            pxIPHeader->usFragmentOffset = 0U;
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	2200      	movs	r2, #0
 8008186:	719a      	strb	r2, [r3, #6]
 8008188:	2200      	movs	r2, #0
 800818a:	71da      	strb	r2, [r3, #7]
            /* Just to prevent compiler warnings about unused parameters. */
            ( void ) pxNetworkBuffer;

            /* Many EMAC peripherals will only calculate the ICMP checksum
             * correctly if the field is nulled beforehand. */
            pxICMPHeader->usChecksum = 0U;
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	2200      	movs	r2, #0
 8008190:	709a      	strb	r2, [r3, #2]
 8008192:	2200      	movs	r2, #0
 8008194:	70da      	strb	r2, [r3, #3]
        }
        #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

        return eReturnEthernetFrame;
 8008196:	2302      	movs	r3, #2
    }
 8008198:	4618      	mov	r0, r3
 800819a:	371c      	adds	r7, #28
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <prvProcessICMPEchoReply>:
 * @brief Process an ICMP echo reply.
 *
 * @param[in] pxICMPPacket The IP packet that contains the ICMP message.
 */
    static void prvProcessICMPEchoReply( ICMPPacket_t * const pxICMPPacket )
    {
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
        ePingReplyStatus_t eStatus = eSuccess;
 80081ac:	2300      	movs	r3, #0
 80081ae:	75fb      	strb	r3, [r7, #23]
        uint16_t usDataLength, usCount;
        uint8_t * pucByte;

        /* Find the total length of the IP packet. */
        usDataLength = pxICMPPacket->xIPHeader.usLength;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	7c1a      	ldrb	r2, [r3, #16]
 80081b4:	7c5b      	ldrb	r3, [r3, #17]
 80081b6:	021b      	lsls	r3, r3, #8
 80081b8:	4313      	orrs	r3, r2
 80081ba:	81fb      	strh	r3, [r7, #14]
        usDataLength = FreeRTOS_ntohs( usDataLength );
 80081bc:	89fb      	ldrh	r3, [r7, #14]
 80081be:	021b      	lsls	r3, r3, #8
 80081c0:	b21a      	sxth	r2, r3
 80081c2:	89fb      	ldrh	r3, [r7, #14]
 80081c4:	0a1b      	lsrs	r3, r3, #8
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	b21b      	sxth	r3, r3
 80081ca:	4313      	orrs	r3, r2
 80081cc:	b21b      	sxth	r3, r3
 80081ce:	81fb      	strh	r3, [r7, #14]

        /* Remove the length of the IP headers to obtain the length of the ICMP
         * message itself. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_IPv4_HEADER );
 80081d0:	89fb      	ldrh	r3, [r7, #14]
 80081d2:	3b14      	subs	r3, #20
 80081d4:	81fb      	strh	r3, [r7, #14]

        /* Remove the length of the ICMP header, to obtain the length of
         * data contained in the ping. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_ICMPv4_HEADER );
 80081d6:	89fb      	ldrh	r3, [r7, #14]
 80081d8:	3b08      	subs	r3, #8
 80081da:	81fb      	strh	r3, [r7, #14]

        /* Checksum has already been checked before in prvProcessIPPacket */

        /* Find the first byte of the data within the ICMP packet. */
        pucByte = ( uint8_t * ) pxICMPPacket;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	613b      	str	r3, [r7, #16]
        pucByte = &( pucByte[ sizeof( ICMPPacket_t ) ] );
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	332a      	adds	r3, #42	@ 0x2a
 80081e4:	613b      	str	r3, [r7, #16]

        /* Check each byte. */
        for( usCount = 0; usCount < usDataLength; usCount++ )
 80081e6:	2300      	movs	r3, #0
 80081e8:	82bb      	strh	r3, [r7, #20]
 80081ea:	e00c      	b.n	8008206 <prvProcessICMPEchoReply+0x62>
        {
            if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	2b78      	cmp	r3, #120	@ 0x78
 80081f2:	d002      	beq.n	80081fa <prvProcessICMPEchoReply+0x56>
            {
                eStatus = eInvalidData;
 80081f4:	2302      	movs	r3, #2
 80081f6:	75fb      	strb	r3, [r7, #23]
                break;
 80081f8:	e009      	b.n	800820e <prvProcessICMPEchoReply+0x6a>
            }

            pucByte++;
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	3301      	adds	r3, #1
 80081fe:	613b      	str	r3, [r7, #16]
        for( usCount = 0; usCount < usDataLength; usCount++ )
 8008200:	8abb      	ldrh	r3, [r7, #20]
 8008202:	3301      	adds	r3, #1
 8008204:	82bb      	strh	r3, [r7, #20]
 8008206:	8aba      	ldrh	r2, [r7, #20]
 8008208:	89fb      	ldrh	r3, [r7, #14]
 800820a:	429a      	cmp	r2, r3
 800820c:	d3ee      	bcc.n	80081ec <prvProcessICMPEchoReply+0x48>
        }

        /* Call back into the application to pass it the result. */
        vApplicationPingReplyHook( eStatus, pxICMPPacket->xICMPHeader.usIdentifier );
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008212:	b29a      	uxth	r2, r3
 8008214:	7dfb      	ldrb	r3, [r7, #23]
 8008216:	4611      	mov	r1, r2
 8008218:	4618      	mov	r0, r3
 800821a:	f7f9 f833 	bl	8001284 <vApplicationPingReplyHook>
    }
 800821e:	bf00      	nop
 8008220:	3718      	adds	r7, #24
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
	...

08008228 <prvIPTask>:

/* MISRA Ref 8.13.1 [Not decorating a pointer to const parameter with const] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-813 */
/* coverity[misra_c_2012_rule_8_13_violation] */
static void prvIPTask( void * pvParameters )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
    /* Just to prevent compiler warnings about unused parameters. */
    ( void ) pvParameters;

    prvIPTask_Initialise();
 8008230:	f000 f90e 	bl	8008450 <prvIPTask_Initialise>

    FreeRTOS_debug_printf( ( "prvIPTask started\n" ) );
 8008234:	4802      	ldr	r0, [pc, #8]	@ (8008240 <prvIPTask+0x18>)
 8008236:	f018 f979 	bl	802052c <lUDPLoggingPrintf>

    /* Loop, processing IP events. */
    while( ipFOREVER() == pdTRUE )
    {
        prvProcessIPEventsAndTimers();
 800823a:	f000 f803 	bl	8008244 <prvProcessIPEventsAndTimers>
 800823e:	e7fc      	b.n	800823a <prvIPTask+0x12>
 8008240:	08022ec4 	.word	0x08022ec4

08008244 <prvProcessIPEventsAndTimers>:

/**
 * @brief Process the events sent to the IP task and process the timers.
 */
static void prvProcessIPEventsAndTimers( void )
{
 8008244:	b590      	push	{r4, r7, lr}
 8008246:	b08d      	sub	sp, #52	@ 0x34
 8008248:	af00      	add	r7, sp, #0

    ipconfigWATCHDOG_TIMER();

    /* Check the ARP, DHCP and TCP timers to see if there is any periodic
     * or timeout processing to perform. */
    vCheckNetworkTimers();
 800824a:	f000 ff09 	bl	8009060 <vCheckNetworkTimers>

    /* Calculate the acceptable maximum sleep time. */
    xNextIPSleep = xCalculateSleepTime();
 800824e:	f000 fea7 	bl	8008fa0 <xCalculateSleepTime>
 8008252:	62f8      	str	r0, [r7, #44]	@ 0x2c

    /* Wait until there is something to do. If the following call exits
     * due to a time out rather than a message being received, set a
     * 'NoEvent' value. */
    if( xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep ) == pdFALSE )
 8008254:	4b7c      	ldr	r3, [pc, #496]	@ (8008448 <prvProcessIPEventsAndTimers+0x204>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f107 0118 	add.w	r1, r7, #24
 800825c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800825e:	4618      	mov	r0, r3
 8008260:	f7fa fbda 	bl	8002a18 <xQueueReceive>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d101      	bne.n	800826e <prvProcessIPEventsAndTimers+0x2a>
    {
        xReceivedEvent.eEventType = eNoEvent;
 800826a:	23ff      	movs	r3, #255	@ 0xff
 800826c:	763b      	strb	r3, [r7, #24]
    }

    #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
    {
        if( xReceivedEvent.eEventType != eNoEvent )
 800826e:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8008272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008276:	d00d      	beq.n	8008294 <prvProcessIPEventsAndTimers+0x50>
        {
            UBaseType_t uxCount;

            uxCount = uxQueueSpacesAvailable( xNetworkEventQueue );
 8008278:	4b73      	ldr	r3, [pc, #460]	@ (8008448 <prvProcessIPEventsAndTimers+0x204>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4618      	mov	r0, r3
 800827e:	f7fa fda3 	bl	8002dc8 <uxQueueSpacesAvailable>
 8008282:	62b8      	str	r0, [r7, #40]	@ 0x28

            if( uxQueueMinimumSpace > uxCount )
 8008284:	4b71      	ldr	r3, [pc, #452]	@ (800844c <prvProcessIPEventsAndTimers+0x208>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800828a:	429a      	cmp	r2, r3
 800828c:	d202      	bcs.n	8008294 <prvProcessIPEventsAndTimers+0x50>
            {
                uxQueueMinimumSpace = uxCount;
 800828e:	4a6f      	ldr	r2, [pc, #444]	@ (800844c <prvProcessIPEventsAndTimers+0x208>)
 8008290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008292:	6013      	str	r3, [r2, #0]
    }
    #endif /* ipconfigCHECK_IP_QUEUE_SPACE */

    iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );

    switch( xReceivedEvent.eEventType )
 8008294:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8008298:	3301      	adds	r3, #1
 800829a:	2b0e      	cmp	r3, #14
 800829c:	f200 80ca 	bhi.w	8008434 <prvProcessIPEventsAndTimers+0x1f0>
 80082a0:	a201      	add	r2, pc, #4	@ (adr r2, 80082a8 <prvProcessIPEventsAndTimers+0x64>)
 80082a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a6:	bf00      	nop
 80082a8:	08008435 	.word	0x08008435
 80082ac:	080082e5 	.word	0x080082e5
 80082b0:	080082ef 	.word	0x080082ef
 80082b4:	080082f9 	.word	0x080082f9
 80082b8:	08008305 	.word	0x08008305
 80082bc:	080083cf 	.word	0x080083cf
 80082c0:	080083d9 	.word	0x080083d9
 80082c4:	080083ed 	.word	0x080083ed
 80082c8:	080083f5 	.word	0x080083f5
 80082cc:	08008419 	.word	0x08008419
 80082d0:	0800830f 	.word	0x0800830f
 80082d4:	080083c5 	.word	0x080083c5
 80082d8:	080083e3 	.word	0x080083e3
 80082dc:	08008435 	.word	0x08008435
 80082e0:	0800841f 	.word	0x0800841f
    {
        case eNetworkDownEvent:
            /* Attempt to establish a connection. */
            prvProcessNetworkDownEvent( ( ( NetworkInterface_t * ) xReceivedEvent.pvData ) );
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	4618      	mov	r0, r3
 80082e8:	f001 f9cc 	bl	8009684 <prvProcessNetworkDownEvent>
            break;
 80082ec:	e0a5      	b.n	800843a <prvProcessIPEventsAndTimers+0x1f6>
        case eNetworkRxEvent:

            /* The network hardware driver has received a new packet.  A
             * pointer to the received buffer is located in the pvData member
             * of the received event structure. */
            prvHandleEthernetPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	4618      	mov	r0, r3
 80082f2:	f000 f955 	bl	80085a0 <prvHandleEthernetPacket>
            break;
 80082f6:	e0a0      	b.n	800843a <prvProcessIPEventsAndTimers+0x1f6>

        case eNetworkTxEvent:

            /* Send a network packet. The ownership will  be transferred to
             * the driver, which will release it after delivery. */
            prvForwardTxPacket( ( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData ), pdTRUE );
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	2101      	movs	r1, #1
 80082fc:	4618      	mov	r0, r3
 80082fe:	f000 f95d 	bl	80085bc <prvForwardTxPacket>
            break;
 8008302:	e09a      	b.n	800843a <prvProcessIPEventsAndTimers+0x1f6>

        case eARPTimerEvent:
            /* The ARP timer has expired, process the ARP cache. */
            #if ( ipconfigUSE_IPv4 != 0 )
                vARPAgeCache();
 8008304:	f7fe f94e 	bl	80065a4 <vARPAgeCache>
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            #if ( ipconfigUSE_IPv6 != 0 )
                vNDAgeCache();
 8008308:	f002 fdb6 	bl	800ae78 <vNDAgeCache>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            break;
 800830c:	e095      	b.n	800843a <prvProcessIPEventsAndTimers+0x1f6>
            /* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
             * to a port. The port number is communicated in the socket field
             * usLocalPort. vSocketBind() will actually bind the socket and the
             * API will unblock as soon as the eSOCKET_BOUND event is
             * triggered. */
            pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	623b      	str	r3, [r7, #32]
            xAddress.sin_len = ( uint8_t ) sizeof( xAddress );
 8008312:	2318      	movs	r3, #24
 8008314:	703b      	strb	r3, [r7, #0]

            switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 8008316:	6a3b      	ldr	r3, [r7, #32]
 8008318:	7a1b      	ldrb	r3, [r3, #8]
 800831a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800831e:	b2db      	uxtb	r3, r3
 8008320:	2b00      	cmp	r3, #0
 8008322:	d002      	beq.n	800832a <prvProcessIPEventsAndTimers+0xe6>
 8008324:	2b01      	cmp	r3, #1
 8008326:	d01a      	beq.n	800835e <prvProcessIPEventsAndTimers+0x11a>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 8008328:	e02c      	b.n	8008384 <prvProcessIPEventsAndTimers+0x140>
                        xAddress.sin_family = FREERTOS_AF_INET;
 800832a:	2302      	movs	r3, #2
 800832c:	707b      	strb	r3, [r7, #1]
                        xAddress.sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 800832e:	6a3b      	ldr	r3, [r7, #32]
 8008330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008332:	061a      	lsls	r2, r3, #24
 8008334:	6a3b      	ldr	r3, [r7, #32]
 8008336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008338:	021b      	lsls	r3, r3, #8
 800833a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800833e:	431a      	orrs	r2, r3
 8008340:	6a3b      	ldr	r3, [r7, #32]
 8008342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008344:	0a1b      	lsrs	r3, r3, #8
 8008346:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800834a:	431a      	orrs	r2, r3
 800834c:	6a3b      	ldr	r3, [r7, #32]
 800834e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008350:	0e1b      	lsrs	r3, r3, #24
 8008352:	4313      	orrs	r3, r2
 8008354:	60bb      	str	r3, [r7, #8]
                        pxSocket->xLocalAddress.ulIP_IPv4 = 0;
 8008356:	6a3b      	ldr	r3, [r7, #32]
 8008358:	2200      	movs	r2, #0
 800835a:	629a      	str	r2, [r3, #40]	@ 0x28
                        break;
 800835c:	e012      	b.n	8008384 <prvProcessIPEventsAndTimers+0x140>
                        xAddress.sin_family = FREERTOS_AF_INET6;
 800835e:	230a      	movs	r3, #10
 8008360:	707b      	strb	r3, [r7, #1]
                        ( void ) memcpy( xAddress.sin_address.xIP_IPv6.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( xAddress.sin_address.xIP_IPv6.ucBytes ) );
 8008362:	6a3b      	ldr	r3, [r7, #32]
 8008364:	3328      	adds	r3, #40	@ 0x28
 8008366:	f107 0408 	add.w	r4, r7, #8
 800836a:	6818      	ldr	r0, [r3, #0]
 800836c:	6859      	ldr	r1, [r3, #4]
 800836e:	689a      	ldr	r2, [r3, #8]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 8008374:	6a3b      	ldr	r3, [r7, #32]
 8008376:	3328      	adds	r3, #40	@ 0x28
 8008378:	2210      	movs	r2, #16
 800837a:	2100      	movs	r1, #0
 800837c:	4618      	mov	r0, r3
 800837e:	f018 fbfe 	bl	8020b7e <memset>
                        break;
 8008382:	bf00      	nop
            }

            xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 8008384:	6a3b      	ldr	r3, [r7, #32]
 8008386:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8008388:	021b      	lsls	r3, r3, #8
 800838a:	b21a      	sxth	r2, r3
 800838c:	6a3b      	ldr	r3, [r7, #32]
 800838e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8008390:	0a1b      	lsrs	r3, r3, #8
 8008392:	b29b      	uxth	r3, r3
 8008394:	b21b      	sxth	r3, r3
 8008396:	4313      	orrs	r3, r2
 8008398:	b21b      	sxth	r3, r3
 800839a:	b29b      	uxth	r3, r3
 800839c:	807b      	strh	r3, [r7, #2]
            /* 'usLocalPort' will be set again by vSocketBind(). */
            pxSocket->usLocalPort = 0U;
 800839e:	6a3b      	ldr	r3, [r7, #32]
 80083a0:	2200      	movs	r2, #0
 80083a2:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 80083a4:	4639      	mov	r1, r7
 80083a6:	2300      	movs	r3, #0
 80083a8:	2218      	movs	r2, #24
 80083aa:	6a38      	ldr	r0, [r7, #32]
 80083ac:	f005 fa32 	bl	800d814 <vSocketBind>

            /* Before 'eSocketBindEvent' was sent it was tested that
             * ( xEventGroup != NULL ) so it can be used now to wake up the
             * user. */
            pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_BOUND;
 80083b0:	6a3b      	ldr	r3, [r7, #32]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f043 0210 	orr.w	r2, r3, #16
 80083b8:	6a3b      	ldr	r3, [r7, #32]
 80083ba:	601a      	str	r2, [r3, #0]
            vSocketWakeUpUser( pxSocket );
 80083bc:	6a38      	ldr	r0, [r7, #32]
 80083be:	f006 f8d8 	bl	800e572 <vSocketWakeUpUser>
            break;
 80083c2:	e03a      	b.n	800843a <prvProcessIPEventsAndTimers+0x1f6>

            /* The user API FreeRTOS_closesocket() has sent a message to the
             * IP-task to actually close a socket. This is handled in
             * vSocketClose().  As the socket gets closed, there is no way to
             * report back to the API, so the API won't wait for the result */
            ( void ) vSocketClose( ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData ) );
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f005 fad8 	bl	800d97c <vSocketClose>
            break;
 80083cc:	e035      	b.n	800843a <prvProcessIPEventsAndTimers+0x1f6>
        case eStackTxEvent:

            /* The network stack has generated a packet to send.  A
             * pointer to the generated buffer is located in the pvData
             * member of the received event structure. */
            vProcessGeneratedUDPPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f00d f9b1 	bl	8015738 <vProcessGeneratedUDPPacket>
            break;
 80083d6:	e030      	b.n	800843a <prvProcessIPEventsAndTimers+0x1f6>

        case eDHCPEvent:
            prvCallDHCP_RA_Handler( ( ( NetworkEndPoint_t * ) xReceivedEvent.pvData ) );
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	4618      	mov	r0, r3
 80083dc:	f000 f88c 	bl	80084f8 <prvCallDHCP_RA_Handler>
            break;
 80083e0:	e02b      	b.n	800843a <prvProcessIPEventsAndTimers+0x1f6>
                    vSocketSelect( pxMessage->pxSocketSet );
                    ( void ) xTaskNotifyGive( pxMessage->xTaskhandle );
                }
            #else
                {
                    vSocketSelect( ( ( SocketSelect_t * ) xReceivedEvent.pvData ) );
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	4618      	mov	r0, r3
 80083e6:	f007 fab3 	bl	800f950 <vSocketSelect>
                }
            #endif /* ( ipconfigSELECT_USES_NOTIFY != 0 ) */
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 80083ea:	e026      	b.n	800843a <prvProcessIPEventsAndTimers+0x1f6>
        case eTCPTimerEvent:
            #if ( ipconfigUSE_TCP == 1 )

                /* Simply mark the TCP timer as expired so it gets processed
                 * the next time prvCheckNetworkTimers() is called. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 80083ec:	2001      	movs	r0, #1
 80083ee:	f000 ffab 	bl	8009348 <vIPSetTCPTimerExpiredState>
            #endif /* ipconfigUSE_TCP */
            break;
 80083f2:	e022      	b.n	800843a <prvProcessIPEventsAndTimers+0x1f6>

            /* The API FreeRTOS_accept() was called, the IP-task will now
             * check if the listening socket (communicated in pvData) actually
             * received a new connection. */
            #if ( ipconfigUSE_TCP == 1 )
                pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	623b      	str	r3, [r7, #32]

                if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 80083f8:	6a38      	ldr	r0, [r7, #32]
 80083fa:	f008 fbed 	bl	8010bd8 <xTCPCheckNewClient>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d019      	beq.n	8008438 <prvProcessIPEventsAndTimers+0x1f4>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 8008404:	6a3b      	ldr	r3, [r7, #32]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f043 0204 	orr.w	r2, r3, #4
 800840c:	6a3b      	ldr	r3, [r7, #32]
 800840e:	601a      	str	r2, [r3, #0]
                    vSocketWakeUpUser( pxSocket );
 8008410:	6a38      	ldr	r0, [r7, #32]
 8008412:	f006 f8ae 	bl	800e572 <vSocketWakeUpUser>
                }
            #endif /* ipconfigUSE_TCP */
            break;
 8008416:	e00f      	b.n	8008438 <prvProcessIPEventsAndTimers+0x1f4>
        case eTCPNetStat:

            /* FreeRTOS_netstat() was called to have the IP-task print an
             * overview of all sockets and their connections */
            #if ( ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_PRINTF == 1 ) )
                vTCPNetStat();
 8008418:	f007 f984 	bl	800f724 <vTCPNetStat>
            #endif /* ipconfigUSE_TCP */
            break;
 800841c:	e00d      	b.n	800843a <prvProcessIPEventsAndTimers+0x1f6>

        case eSocketSetDeleteEvent:
            #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
            {
                SocketSelect_t * pxSocketSet = ( SocketSelect_t * ) ( xReceivedEvent.pvData );
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	627b      	str	r3, [r7, #36]	@ 0x24

                iptraceMEM_STATS_DELETE( pxSocketSet );
                vEventGroupDelete( pxSocketSet->xSelectGroup );
 8008422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4618      	mov	r0, r3
 8008428:	f7f9 ffb2 	bl	8002390 <vEventGroupDelete>
                vPortFree( ( void * ) pxSocketSet );
 800842c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800842e:	f7fd f92d 	bl	800568c <vPortFree>
            }
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 8008432:	e002      	b.n	800843a <prvProcessIPEventsAndTimers+0x1f6>
            /* xQueueReceive() returned because of a normal time-out. */
            break;

        default:
            /* Should not get here. */
            break;
 8008434:	bf00      	nop
 8008436:	e000      	b.n	800843a <prvProcessIPEventsAndTimers+0x1f6>
            break;
 8008438:	bf00      	nop
    }

    prvIPTask_CheckPendingEvents();
 800843a:	f000 f833 	bl	80084a4 <prvIPTask_CheckPendingEvents>
}
 800843e:	bf00      	nop
 8008440:	3734      	adds	r7, #52	@ 0x34
 8008442:	46bd      	mov	sp, r7
 8008444:	bd90      	pop	{r4, r7, pc}
 8008446:	bf00      	nop
 8008448:	20000e48 	.word	0x20000e48
 800844c:	20000014 	.word	0x20000014

08008450 <prvIPTask_Initialise>:
/**
 * @brief Helper function for prvIPTask, it does the first initializations
 *        at start-up. No parameters, no return type.
 */
static void prvIPTask_Initialise( void )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
    /* Generate a dummy message to say that the network connection has gone
     * down.  This will cause this task to initialise the network interface.  After
     * this it is the responsibility of the network interface hardware driver to
     * send this message if a previously connected network is disconnected. */

    vNetworkTimerReload( pdMS_TO_TICKS( ipINITIALISATION_RETRY_DELAY ) );
 8008456:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800845a:	f000 ff2b 	bl	80092b4 <vNetworkTimerReload>

    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 800845e:	4b0f      	ldr	r3, [pc, #60]	@ (800849c <prvIPTask_Initialise+0x4c>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	607b      	str	r3, [r7, #4]
 8008464:	e005      	b.n	8008472 <prvIPTask_Initialise+0x22>
    {
        /* Post a 'eNetworkDownEvent' for every interface. */
        FreeRTOS_NetworkDown( pxInterface );
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 f8be 	bl	80085e8 <FreeRTOS_NetworkDown>
    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008470:	607b      	str	r3, [r7, #4]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d1f6      	bne.n	8008466 <prvIPTask_Initialise+0x16>
    }

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* Initialise the TCP timer. */
        vTCPTimerReload( pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 8008478:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800847c:	f000 fee8 	bl	8009250 <vTCPTimerReload>
    }
    #endif

    /* Mark the timer as inactive since we are not waiting on any ARP resolution as of now. */
    vIPSetARPResolutionTimerEnableState( pdFALSE );
 8008480:	2000      	movs	r0, #0
 8008482:	f000 ff9b 	bl	80093bc <vIPSetARPResolutionTimerEnableState>

    #if ( ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* The following function is declared in FreeRTOS_DNS.c and 'private' to
         * this library */
        vDNSInitialise();
 8008486:	f7fe fa31 	bl	80068ec <vDNSInitialise>
    #endif /* ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) */

    #if ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* Clear the DNS cache once only. */
        FreeRTOS_dnsclear();
 800848a:	f7fe fb0f 	bl	8006aac <FreeRTOS_dnsclear>
    }
    #endif /* ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) ) */

    /* Initialisation is complete and events can now be processed. */
    xIPTaskInitialised = pdTRUE;
 800848e:	4b04      	ldr	r3, [pc, #16]	@ (80084a0 <prvIPTask_Initialise+0x50>)
 8008490:	2201      	movs	r2, #1
 8008492:	601a      	str	r2, [r3, #0]
}
 8008494:	bf00      	nop
 8008496:	3708      	adds	r7, #8
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	200011d4 	.word	0x200011d4
 80084a0:	20000e58 	.word	0x20000e58

080084a4 <prvIPTask_CheckPendingEvents>:
/**
 * @brief Check the value of 'xNetworkDownEventPending'. When non-zero, pending
 *        network-down events will be handled.
 */
static void prvIPTask_CheckPendingEvents( void )
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    if( xNetworkDownEventPending != pdFALSE )
 80084aa:	4b12      	ldr	r3, [pc, #72]	@ (80084f4 <prvIPTask_CheckPendingEvents+0x50>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d01c      	beq.n	80084ec <prvIPTask_CheckPendingEvents+0x48>
    {
        /* A network down event could not be posted to the network event
         * queue because the queue was full.
         * As this code runs in the IP-task, it can be done directly by
         * calling prvProcessNetworkDownEvent(). */
        xNetworkDownEventPending = pdFALSE;
 80084b2:	4b10      	ldr	r3, [pc, #64]	@ (80084f4 <prvIPTask_CheckPendingEvents+0x50>)
 80084b4:	2200      	movs	r2, #0
 80084b6:	601a      	str	r2, [r3, #0]

        for( pxInterface = FreeRTOS_FirstNetworkInterface();
 80084b8:	f004 f836 	bl	800c528 <FreeRTOS_FirstNetworkInterface>
 80084bc:	6078      	str	r0, [r7, #4]
 80084be:	e012      	b.n	80084e6 <prvIPTask_CheckPendingEvents+0x42>
             pxInterface != NULL;
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
        {
            if( pxInterface->bits.bCallDownEvent != pdFALSE_UNSIGNED )
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	7f1b      	ldrb	r3, [r3, #28]
 80084c4:	f003 0302 	and.w	r3, r3, #2
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d007      	beq.n	80084de <prvIPTask_CheckPendingEvents+0x3a>
            {
                prvProcessNetworkDownEvent( pxInterface );
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f001 f8d8 	bl	8009684 <prvProcessNetworkDownEvent>
                pxInterface->bits.bCallDownEvent = pdFALSE_UNSIGNED;
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	7f13      	ldrb	r3, [r2, #28]
 80084d8:	f36f 0341 	bfc	r3, #1, #1
 80084dc:	7713      	strb	r3, [r2, #28]
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f004 f82e 	bl	800c540 <FreeRTOS_NextNetworkInterface>
 80084e4:	6078      	str	r0, [r7, #4]
             pxInterface != NULL;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d1e9      	bne.n	80084c0 <prvIPTask_CheckPendingEvents+0x1c>
            }
        }
    }
}
 80084ec:	bf00      	nop
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	20000e50 	.word	0x20000e50

080084f8 <prvCallDHCP_RA_Handler>:
 * @brief Call the state machine of either DHCP, DHCPv6, or RA, whichever is activated.
 *
 * @param[in] pxEndPoint The end-point for which the state-machine will be called.
 */
static void prvCallDHCP_RA_Handler( NetworkEndPoint_t * pxEndPoint )
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
    BaseType_t xIsIPv6 = pdFALSE;
 8008500:	2300      	movs	r3, #0
 8008502:	60fb      	str	r3, [r7, #12]

    #if ( ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_DHCPv6 == 1 ) || ( ipconfigUSE_RA == 1 ) )
        if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800850a:	f003 0304 	and.w	r3, r3, #4
 800850e:	b2db      	uxtb	r3, r3
 8008510:	2b00      	cmp	r3, #0
 8008512:	d001      	beq.n	8008518 <prvCallDHCP_RA_Handler+0x20>
        {
            xIsIPv6 = pdTRUE;
 8008514:	2301      	movs	r3, #1
 8008516:	60fb      	str	r3, [r7, #12]
        }
    }
    #endif /* ipconfigUSE_DHCPv6 */
    #if ( ( ipconfigUSE_RA == 1 ) && ( ipconfigUSE_IPv6 != 0 ) )
    {
        if( ( xIsIPv6 == pdTRUE ) && ( pxEndPoint->bits.bWantRA != pdFALSE_UNSIGNED ) )
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2b01      	cmp	r3, #1
 800851c:	d10b      	bne.n	8008536 <prvCallDHCP_RA_Handler+0x3e>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8008524:	f003 0302 	and.w	r3, r3, #2
 8008528:	b2db      	uxtb	r3, r3
 800852a:	2b00      	cmp	r3, #0
 800852c:	d003      	beq.n	8008536 <prvCallDHCP_RA_Handler+0x3e>
        {
            /* Process RA messages for a given end-point. */
            vRAProcess( pdFALSE, pxEndPoint );
 800852e:	6879      	ldr	r1, [r7, #4]
 8008530:	2000      	movs	r0, #0
 8008532:	f003 fecd 	bl	800c2d0 <vRAProcess>
    #endif /* ( ( ipconfigUSE_RA == 1 ) && ( ipconfigUSE_IPv6 != 0 ) ) */

    /* Mention pxEndPoint and xIsIPv6 in case they have not been used. */
    ( void ) pxEndPoint;
    ( void ) xIsIPv6;
}
 8008536:	bf00      	nop
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
	...

08008540 <FreeRTOS_GetIPTaskHandle>:
 *        gives read-only access to it.
 *
 * @return The handle of the IP-task.
 */
TaskHandle_t FreeRTOS_GetIPTaskHandle( void )
{
 8008540:	b480      	push	{r7}
 8008542:	af00      	add	r7, sp, #0
    return xIPTaskHandle;
 8008544:	4b03      	ldr	r3, [pc, #12]	@ (8008554 <FreeRTOS_GetIPTaskHandle+0x14>)
 8008546:	681b      	ldr	r3, [r3, #0]
}
 8008548:	4618      	mov	r0, r3
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	20000e54 	.word	0x20000e54

08008558 <vIPNetworkUpCalls>:
 * @brief Perform all the required tasks when the network gets connected.
 *
 * @param pxEndPoint The end-point which goes up.
 */
void vIPNetworkUpCalls( struct xNetworkEndPoint * pxEndPoint )
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
    if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8008566:	f003 0304 	and.w	r3, r3, #4
 800856a:	b2db      	uxtb	r3, r3
 800856c:	2b00      	cmp	r3, #0
 800856e:	d003      	beq.n	8008578 <vIPNetworkUpCalls+0x20>
    {
        /* IPv6 end-points have a solicited-node address that needs extra housekeeping. */
        #if ( ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) )
            vManageSolicitedNodeAddress( pxEndPoint, pdTRUE );
 8008570:	2101      	movs	r1, #1
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f002 fa7e 	bl	800aa74 <vManageSolicitedNodeAddress>
        #endif
    }

    pxEndPoint->bits.bEndPointUp = pdTRUE_UNSIGNED;
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 800857e:	f043 0310 	orr.w	r3, r3, #16
 8008582:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0

    #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        {
            vApplicationIPNetworkEventHook( eNetworkUp );
 8008586:	2000      	movs	r0, #0
 8008588:	f7f8 fdfa 	bl	8001180 <vApplicationIPNetworkEventHook>
    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        /* The following function is declared in FreeRTOS_DNS.c and 'private' to
         * this library */
        extern void vDNSInitialise( void );
        vDNSInitialise();
 800858c:	f7fe f9ae 	bl	80068ec <vDNSInitialise>
    }
    #endif /* ipconfigDNS_USE_CALLBACKS != 0 */

    /* Set remaining time to 0 so it will become active immediately. */
    vARPTimerReload( pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 8008590:	f242 7010 	movw	r0, #10000	@ 0x2710
 8008594:	f000 fe6a 	bl	800926c <vARPTimerReload>
}
 8008598:	bf00      	nop
 800859a:	3708      	adds	r7, #8
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <prvHandleEthernetPacket>:
 *
 * @param[in] pxBuffer Linked/un-linked network buffer descriptor(s)
 *                      to be processed.
 */
static void prvHandleEthernetPacket( NetworkBufferDescriptor_t * pxBuffer )
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
    #if ( ipconfigUSE_LINKED_RX_MESSAGES == 0 )
    {
        /* When ipconfigUSE_LINKED_RX_MESSAGES is set to 0 then only one
         * buffer will be sent at a time.  This is the default way for +TCP to pass
         * messages from the MAC to the TCP/IP stack. */
        if( pxBuffer != NULL )
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d002      	beq.n	80085b4 <prvHandleEthernetPacket+0x14>
        {
            prvProcessEthernetPacket( pxBuffer );
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f9c8 	bl	8008944 <prvProcessEthernetPacket>
            prvProcessEthernetPacket( pxBuffer );
            pxBuffer = pxNextBuffer;
        }
    }
    #endif /* ipconfigUSE_LINKED_RX_MESSAGES */
}
 80085b4:	bf00      	nop
 80085b6:	3708      	adds	r7, #8
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <prvForwardTxPacket>:
 * @param[in] pxNetworkBuffer The message buffer.
 * @param[in] xReleaseAfterSend When true, the network interface will own the buffer and is responsible for it's release.
 */
static void prvForwardTxPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                BaseType_t xReleaseAfterSend )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

    if( pxNetworkBuffer->pxInterface != NULL )
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d007      	beq.n	80085de <prvForwardTxPacket+0x22>
    {
        ( void ) pxNetworkBuffer->pxInterface->pfOutput( pxNetworkBuffer->pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 80085d8:	683a      	ldr	r2, [r7, #0]
 80085da:	6879      	ldr	r1, [r7, #4]
 80085dc:	4798      	blx	r3
    }
}
 80085de:	bf00      	nop
 80085e0:	3708      	adds	r7, #8
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
	...

080085e8 <FreeRTOS_NetworkDown>:
 *         and later on a 'network-down' event, it will be executed.
 *
 * @param[in] pxNetworkInterface The interface that goes down.
 */
void FreeRTOS_NetworkDown( struct xNetworkInterface * pxNetworkInterface )
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b086      	sub	sp, #24
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
    IPStackEvent_t xNetworkDownEvent;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 80085f0:	2300      	movs	r3, #0
 80085f2:	617b      	str	r3, [r7, #20]

    pxNetworkInterface->bits.bInterfaceUp = pdFALSE_UNSIGNED;
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	7f13      	ldrb	r3, [r2, #28]
 80085f8:	f36f 0300 	bfc	r3, #0, #1
 80085fc:	7713      	strb	r3, [r2, #28]
    xNetworkDownEvent.eEventType = eNetworkDownEvent;
 80085fe:	2300      	movs	r3, #0
 8008600:	733b      	strb	r3, [r7, #12]
    xNetworkDownEvent.pvData = pxNetworkInterface;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	613b      	str	r3, [r7, #16]

    /* Simply send the network task the appropriate event. */
    if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 8008606:	f107 030c 	add.w	r3, r7, #12
 800860a:	6979      	ldr	r1, [r7, #20]
 800860c:	4618      	mov	r0, r3
 800860e:	f000 f8df 	bl	80087d0 <xSendEventStructToIPTask>
 8008612:	4603      	mov	r3, r0
 8008614:	2b01      	cmp	r3, #1
 8008616:	d008      	beq.n	800862a <FreeRTOS_NetworkDown+0x42>
    {
        /* Could not send the message, so it is still pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdTRUE;
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	7f13      	ldrb	r3, [r2, #28]
 800861c:	f043 0302 	orr.w	r3, r3, #2
 8008620:	7713      	strb	r3, [r2, #28]
        xNetworkDownEventPending = pdTRUE;
 8008622:	4b06      	ldr	r3, [pc, #24]	@ (800863c <FreeRTOS_NetworkDown+0x54>)
 8008624:	2201      	movs	r2, #1
 8008626:	601a      	str	r2, [r3, #0]
        /* Message was sent so it is not pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
    }

    iptraceNETWORK_DOWN();
}
 8008628:	e004      	b.n	8008634 <FreeRTOS_NetworkDown+0x4c>
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	7f13      	ldrb	r3, [r2, #28]
 800862e:	f36f 0341 	bfc	r3, #1, #1
 8008632:	7713      	strb	r3, [r2, #28]
}
 8008634:	bf00      	nop
 8008636:	3718      	adds	r7, #24
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	20000e50 	.word	0x20000e50

08008640 <FreeRTOS_IPInit_Multi>:
 * @brief Initialise the FreeRTOS-Plus-TCP network stack and initialise the IP-task.
 *        Before calling this function, at least 1 interface and 1 end-point must
 *        have been set-up.
 */
BaseType_t FreeRTOS_IPInit_Multi( void )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdFALSE;
 8008646:	2300      	movs	r3, #0
 8008648:	607b      	str	r3, [r7, #4]

    /* There must be at least one interface and one end-point. */
    configASSERT( FreeRTOS_FirstNetworkInterface() != NULL );
 800864a:	f003 ff6d 	bl	800c528 <FreeRTOS_FirstNetworkInterface>
 800864e:	4603      	mov	r3, r0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d104      	bne.n	800865e <FreeRTOS_IPInit_Multi+0x1e>
 8008654:	f240 31b5 	movw	r1, #949	@ 0x3b5
 8008658:	4823      	ldr	r0, [pc, #140]	@ (80086e8 <FreeRTOS_IPInit_Multi+0xa8>)
 800865a:	f7f8 fd5d 	bl	8001118 <vAssertCalled>

    /* Check that the configuration values are correct and that the IP-task has not
     * already been initialized. */
    vPreCheckConfigs();
 800865e:	f001 f8cb 	bl	80097f8 <vPreCheckConfigs>
                                                 ucNetworkEventQueueStorageArea,
                                                 &xNetworkEventStaticQueue );
    }
    #else
    {
        xNetworkEventQueue = xQueueCreate( ipconfigEVENT_QUEUE_LENGTH, sizeof( IPStackEvent_t ) );
 8008662:	2200      	movs	r2, #0
 8008664:	2108      	movs	r1, #8
 8008666:	2045      	movs	r0, #69	@ 0x45
 8008668:	f7fa f824 	bl	80026b4 <xQueueGenericCreate>
 800866c:	4603      	mov	r3, r0
 800866e:	4a1f      	ldr	r2, [pc, #124]	@ (80086ec <FreeRTOS_IPInit_Multi+0xac>)
 8008670:	6013      	str	r3, [r2, #0]
        configASSERT( xNetworkEventQueue != NULL );
 8008672:	4b1e      	ldr	r3, [pc, #120]	@ (80086ec <FreeRTOS_IPInit_Multi+0xac>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d104      	bne.n	8008684 <FreeRTOS_IPInit_Multi+0x44>
 800867a:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
 800867e:	481a      	ldr	r0, [pc, #104]	@ (80086e8 <FreeRTOS_IPInit_Multi+0xa8>)
 8008680:	f7f8 fd4a 	bl	8001118 <vAssertCalled>
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    if( xNetworkEventQueue != NULL )
 8008684:	4b19      	ldr	r3, [pc, #100]	@ (80086ec <FreeRTOS_IPInit_Multi+0xac>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d025      	beq.n	80086d8 <FreeRTOS_IPInit_Multi+0x98>
        #if ( configQUEUE_REGISTRY_SIZE > 0 )
        {
            /* A queue registry is normally used to assist a kernel aware
             * debugger.  If one is in use then it will be helpful for the debugger
             * to show information about the network event queue. */
            vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 800868c:	4b17      	ldr	r3, [pc, #92]	@ (80086ec <FreeRTOS_IPInit_Multi+0xac>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4917      	ldr	r1, [pc, #92]	@ (80086f0 <FreeRTOS_IPInit_Multi+0xb0>)
 8008692:	4618      	mov	r0, r3
 8008694:	f7fa fcfa 	bl	800308c <vQueueAddToRegistry>
        }
        #endif /* configQUEUE_REGISTRY_SIZE */

        if( xNetworkBuffersInitialise() == pdPASS )
 8008698:	f00d fd8c 	bl	80161b4 <xNetworkBuffersInitialise>
 800869c:	4603      	mov	r3, r0
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d10e      	bne.n	80086c0 <FreeRTOS_IPInit_Multi+0x80>
        {
            /* Prepare the sockets interface. */
            vNetworkSocketsInit();
 80086a2:	f004 fc7f 	bl	800cfa4 <vNetworkSocketsInit>
                    xReturn = pdTRUE;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvIPTask,
 80086a6:	4b13      	ldr	r3, [pc, #76]	@ (80086f4 <FreeRTOS_IPInit_Multi+0xb4>)
 80086a8:	9301      	str	r3, [sp, #4]
 80086aa:	2304      	movs	r3, #4
 80086ac:	9300      	str	r3, [sp, #0]
 80086ae:	2300      	movs	r3, #0
 80086b0:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 80086b4:	4910      	ldr	r1, [pc, #64]	@ (80086f8 <FreeRTOS_IPInit_Multi+0xb8>)
 80086b6:	4811      	ldr	r0, [pc, #68]	@ (80086fc <FreeRTOS_IPInit_Multi+0xbc>)
 80086b8:	f7fa fd9e 	bl	80031f8 <xTaskCreate>
 80086bc:	6078      	str	r0, [r7, #4]
 80086be:	e00e      	b.n	80086de <FreeRTOS_IPInit_Multi+0x9e>
            }
            #endif /* configSUPPORT_STATIC_ALLOCATION */
        }
        else
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: xNetworkBuffersInitialise() failed\n" ) );
 80086c0:	480f      	ldr	r0, [pc, #60]	@ (8008700 <FreeRTOS_IPInit_Multi+0xc0>)
 80086c2:	f017 ff33 	bl	802052c <lUDPLoggingPrintf>

            /* Clean up. */
            vQueueDelete( xNetworkEventQueue );
 80086c6:	4b09      	ldr	r3, [pc, #36]	@ (80086ec <FreeRTOS_IPInit_Multi+0xac>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7fa fb9c 	bl	8002e08 <vQueueDelete>
            xNetworkEventQueue = NULL;
 80086d0:	4b06      	ldr	r3, [pc, #24]	@ (80086ec <FreeRTOS_IPInit_Multi+0xac>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	601a      	str	r2, [r3, #0]
 80086d6:	e002      	b.n	80086de <FreeRTOS_IPInit_Multi+0x9e>
        }
    }
    else
    {
        FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: Network event queue could not be created\n" ) );
 80086d8:	480a      	ldr	r0, [pc, #40]	@ (8008704 <FreeRTOS_IPInit_Multi+0xc4>)
 80086da:	f017 ff27 	bl	802052c <lUDPLoggingPrintf>
    }

    return xReturn;
 80086de:	687b      	ldr	r3, [r7, #4]
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	08022ed8 	.word	0x08022ed8
 80086ec:	20000e48 	.word	0x20000e48
 80086f0:	08022f04 	.word	0x08022f04
 80086f4:	20000e54 	.word	0x20000e54
 80086f8:	08022f0c 	.word	0x08022f0c
 80086fc:	08008229 	.word	0x08008229
 8008700:	08022f14 	.word	0x08022f14
 8008704:	08022f50 	.word	0x08022f50

08008708 <FreeRTOS_GetEndPointConfiguration>:
    void FreeRTOS_GetEndPointConfiguration( uint32_t * pulIPAddress,
                                            uint32_t * pulNetMask,
                                            uint32_t * pulGatewayAddress,
                                            uint32_t * pulDNSServerAddress,
                                            const struct xNetworkEndPoint * pxEndPoint )
    {
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
 8008714:	603b      	str	r3, [r7, #0]
        if( ENDPOINT_IS_IPv4( pxEndPoint ) )
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d023      	beq.n	8008764 <FreeRTOS_GetEndPointConfiguration+0x5c>
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8008722:	f003 0304 	and.w	r3, r3, #4
 8008726:	b2db      	uxtb	r3, r3
 8008728:	2b00      	cmp	r3, #0
 800872a:	d11b      	bne.n	8008764 <FreeRTOS_GetEndPointConfiguration+0x5c>
        {
            /* Return the address configuration to the caller. */

            if( pulIPAddress != NULL )
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d003      	beq.n	800873a <FreeRTOS_GetEndPointConfiguration+0x32>
            {
                *pulIPAddress = pxEndPoint->ipv4_settings.ulIPAddress;
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	601a      	str	r2, [r3, #0]
            }

            if( pulNetMask != NULL )
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d003      	beq.n	8008748 <FreeRTOS_GetEndPointConfiguration+0x40>
            {
                *pulNetMask = pxEndPoint->ipv4_settings.ulNetMask;
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	685a      	ldr	r2, [r3, #4]
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	601a      	str	r2, [r3, #0]
            }

            if( pulGatewayAddress != NULL )
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d003      	beq.n	8008756 <FreeRTOS_GetEndPointConfiguration+0x4e>
            {
                *pulGatewayAddress = pxEndPoint->ipv4_settings.ulGatewayAddress;
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	689a      	ldr	r2, [r3, #8]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	601a      	str	r2, [r3, #0]
            }

            if( pulDNSServerAddress != NULL )
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d003      	beq.n	8008764 <FreeRTOS_GetEndPointConfiguration+0x5c>
            {
                *pulDNSServerAddress = pxEndPoint->ipv4_settings.ulDNSServerAddresses[ 0 ]; /*_RB_ Only returning the address of the first DNS server. */
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	68da      	ldr	r2, [r3, #12]
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	601a      	str	r2, [r3, #0]
            }
        }
    }
 8008764:	bf00      	nop
 8008766:	3714      	adds	r7, #20
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <FreeRTOS_GetAddressConfiguration>:
 */
    void FreeRTOS_GetAddressConfiguration( uint32_t * pulIPAddress,
                                           uint32_t * pulNetMask,
                                           uint32_t * pulGatewayAddress,
                                           uint32_t * pulDNSServerAddress )
    {
 8008770:	b580      	push	{r7, lr}
 8008772:	b088      	sub	sp, #32
 8008774:	af02      	add	r7, sp, #8
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	607a      	str	r2, [r7, #4]
 800877c:	603b      	str	r3, [r7, #0]
        NetworkEndPoint_t * pxEndPoint;

        /* Get first end point. */
        pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800877e:	2000      	movs	r0, #0
 8008780:	f003 ff72 	bl	800c668 <FreeRTOS_FirstEndPoint>
 8008784:	6178      	str	r0, [r7, #20]

        if( pxEndPoint != NULL )
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d007      	beq.n	800879c <FreeRTOS_GetAddressConfiguration+0x2c>
        {
            FreeRTOS_GetEndPointConfiguration( pulIPAddress, pulNetMask,
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	9300      	str	r3, [sp, #0]
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	68b9      	ldr	r1, [r7, #8]
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	f7ff ffb6 	bl	8008708 <FreeRTOS_GetEndPointConfiguration>
                                               pulGatewayAddress, pulDNSServerAddress, pxEndPoint );
        }
    }
 800879c:	bf00      	nop
 800879e:	3718      	adds	r7, #24
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <xSendEventToIPTask>:
 * @param[in] eEvent The event to be sent.
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	4603      	mov	r3, r0
 80087ac:	71fb      	strb	r3, [r7, #7]
    IPStackEvent_t xEventMessage;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 80087ae:	2300      	movs	r3, #0
 80087b0:	617b      	str	r3, [r7, #20]

    xEventMessage.eEventType = eEvent;
 80087b2:	79fb      	ldrb	r3, [r7, #7]
 80087b4:	733b      	strb	r3, [r7, #12]
    xEventMessage.pvData = ( void * ) NULL;
 80087b6:	2300      	movs	r3, #0
 80087b8:	613b      	str	r3, [r7, #16]

    return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 80087ba:	f107 030c 	add.w	r3, r7, #12
 80087be:	6979      	ldr	r1, [r7, #20]
 80087c0:	4618      	mov	r0, r3
 80087c2:	f000 f805 	bl	80087d0 <xSendEventStructToIPTask>
 80087c6:	4603      	mov	r3, r0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3718      	adds	r7, #24
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <xSendEventStructToIPTask>:
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventStructToIPTask( const IPStackEvent_t * pxEvent,
                                     TickType_t uxTimeout )
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b086      	sub	sp, #24
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn, xSendMessage;
    TickType_t uxUseTimeout = uxTimeout;
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	60fb      	str	r3, [r7, #12]

    if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 80087de:	f000 fb93 	bl	8008f08 <xIPIsNetworkTaskReady>
 80087e2:	4603      	mov	r3, r0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d107      	bne.n	80087f8 <xSendEventStructToIPTask+0x28>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f993 3000 	ldrsb.w	r3, [r3]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d002      	beq.n	80087f8 <xSendEventStructToIPTask+0x28>
    {
        /* Only allow eNetworkDownEvent events if the IP task is not ready
         * yet.  Not going to attempt to send the message so the send failed. */
        xReturn = pdFAIL;
 80087f2:	2300      	movs	r3, #0
 80087f4:	617b      	str	r3, [r7, #20]
 80087f6:	e035      	b.n	8008864 <xSendEventStructToIPTask+0x94>
    }
    else
    {
        xSendMessage = pdTRUE;
 80087f8:	2301      	movs	r3, #1
 80087fa:	613b      	str	r3, [r7, #16]

        #if ( ipconfigUSE_TCP == 1 )
        {
            if( pxEvent->eEventType == eTCPTimerEvent )
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f993 3000 	ldrsb.w	r3, [r3]
 8008802:	2b06      	cmp	r3, #6
 8008804:	d10c      	bne.n	8008820 <xSendEventStructToIPTask+0x50>
            {
                /* TCP timer events are sent to wake the timer task when
                 * xTCPTimer has expired, but there is no point sending them if the
                 * IP task is already awake processing other message. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 8008806:	2001      	movs	r0, #1
 8008808:	f000 fd9e 	bl	8009348 <vIPSetTCPTimerExpiredState>

                if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 800880c:	4b18      	ldr	r3, [pc, #96]	@ (8008870 <xSendEventStructToIPTask+0xa0>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4618      	mov	r0, r3
 8008812:	f7fa fabf 	bl	8002d94 <uxQueueMessagesWaiting>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d001      	beq.n	8008820 <xSendEventStructToIPTask+0x50>
                {
                    /* Not actually going to send the message but this is not a
                     * failure as the message didn't need to be sent. */
                    xSendMessage = pdFALSE;
 800881c:	2300      	movs	r3, #0
 800881e:	613b      	str	r3, [r7, #16]
                }
            }
        }
        #endif /* ipconfigUSE_TCP */

        if( xSendMessage != pdFALSE )
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d01c      	beq.n	8008860 <xSendEventStructToIPTask+0x90>
        {
            /* The IP task cannot block itself while waiting for itself to
             * respond. */
            if( ( xIsCallingFromIPTask() == pdTRUE ) && ( uxUseTimeout > ( TickType_t ) 0U ) )
 8008826:	f000 ff15 	bl	8009654 <xIsCallingFromIPTask>
 800882a:	4603      	mov	r3, r0
 800882c:	2b01      	cmp	r3, #1
 800882e:	d104      	bne.n	800883a <xSendEventStructToIPTask+0x6a>
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d001      	beq.n	800883a <xSendEventStructToIPTask+0x6a>
            {
                uxUseTimeout = ( TickType_t ) 0;
 8008836:	2300      	movs	r3, #0
 8008838:	60fb      	str	r3, [r7, #12]
            }

            xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 800883a:	4b0d      	ldr	r3, [pc, #52]	@ (8008870 <xSendEventStructToIPTask+0xa0>)
 800883c:	6818      	ldr	r0, [r3, #0]
 800883e:	2300      	movs	r3, #0
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	6879      	ldr	r1, [r7, #4]
 8008844:	f7fa f800 	bl	8002848 <xQueueGenericSend>
 8008848:	6178      	str	r0, [r7, #20]

            if( xReturn == pdFAIL )
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d109      	bne.n	8008864 <xSendEventStructToIPTask+0x94>
            {
                /* A message should have been sent to the IP task, but wasn't. */
                FreeRTOS_debug_printf( ( "xSendEventStructToIPTask: CAN NOT ADD %d\n", pxEvent->eEventType ) );
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f993 3000 	ldrsb.w	r3, [r3]
 8008856:	4619      	mov	r1, r3
 8008858:	4806      	ldr	r0, [pc, #24]	@ (8008874 <xSendEventStructToIPTask+0xa4>)
 800885a:	f017 fe67 	bl	802052c <lUDPLoggingPrintf>
 800885e:	e001      	b.n	8008864 <xSendEventStructToIPTask+0x94>
        }
        else
        {
            /* It was not necessary to send the message to process the event so
             * even though the message was not sent the call was successful. */
            xReturn = pdPASS;
 8008860:	2301      	movs	r3, #1
 8008862:	617b      	str	r3, [r7, #20]
        }
    }

    return xReturn;
 8008864:	697b      	ldr	r3, [r7, #20]
}
 8008866:	4618      	mov	r0, r3
 8008868:	3718      	adds	r7, #24
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	20000e48 	.word	0x20000e48
 8008874:	08022f94 	.word	0x08022f94

08008878 <eConsiderFrameForProcessing>:
 * @param[in] pucEthernetBuffer The ethernet packet under consideration.
 *
 * @return Enum saying whether to release or to process the packet.
 */
eFrameProcessingResult_t eConsiderFrameForProcessing( const uint8_t * const pucEthernetBuffer )
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b086      	sub	sp, #24
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 8008880:	2301      	movs	r3, #1
 8008882:	75fb      	strb	r3, [r7, #23]
    const EthernetHeader_t * pxEthernetHeader = NULL;
 8008884:	2300      	movs	r3, #0
 8008886:	613b      	str	r3, [r7, #16]
    const NetworkEndPoint_t * pxEndPoint = NULL;
 8008888:	2300      	movs	r3, #0
 800888a:	60fb      	str	r3, [r7, #12]

    if( pucEthernetBuffer == NULL )
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d102      	bne.n	8008898 <eConsiderFrameForProcessing+0x20>
    {
        eReturn = eReleaseBuffer;
 8008892:	2300      	movs	r3, #0
 8008894:	75fb      	strb	r3, [r7, #23]
 8008896:	e032      	b.n	80088fe <eConsiderFrameForProcessing+0x86>
        /* Map the buffer onto Ethernet Header struct for easy access to fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	613b      	str	r3, [r7, #16]

        /* Examine the destination MAC from the Ethernet header to see if it matches
         * that of an end point managed by FreeRTOS+TCP. */
        pxEndPoint = FreeRTOS_FindEndPointOnMAC( &( pxEthernetHeader->xDestinationAddress ), NULL );
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	2100      	movs	r1, #0
 80088a0:	4618      	mov	r0, r3
 80088a2:	f003 ff81 	bl	800c7a8 <FreeRTOS_FindEndPointOnMAC>
 80088a6:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d002      	beq.n	80088b4 <eConsiderFrameForProcessing+0x3c>
        {
            /* The packet was directed to this node - process it. */
            eReturn = eProcessBuffer;
 80088ae:	2301      	movs	r3, #1
 80088b0:	75fb      	strb	r3, [r7, #23]
 80088b2:	e024      	b.n	80088fe <eConsiderFrameForProcessing+0x86>
        }
        else if( memcmp( xBroadcastMACAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	2206      	movs	r2, #6
 80088b8:	4619      	mov	r1, r3
 80088ba:	4820      	ldr	r0, [pc, #128]	@ (800893c <eConsiderFrameForProcessing+0xc4>)
 80088bc:	f018 ffe7 	bl	802188e <memcmp>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d102      	bne.n	80088cc <eConsiderFrameForProcessing+0x54>
        {
            /* The packet was a broadcast - process it. */
            eReturn = eProcessBuffer;
 80088c6:	2301      	movs	r3, #1
 80088c8:	75fb      	strb	r3, [r7, #23]
 80088ca:	e018      	b.n	80088fe <eConsiderFrameForProcessing+0x86>
        }
        else
        #if ( ( ipconfigUSE_LLMNR == 1 ) && ( ipconfigUSE_DNS != 0 ) )
            if( memcmp( xLLMNR_MacAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	2206      	movs	r2, #6
 80088d0:	4619      	mov	r1, r3
 80088d2:	481b      	ldr	r0, [pc, #108]	@ (8008940 <eConsiderFrameForProcessing+0xc8>)
 80088d4:	f018 ffdb 	bl	802188e <memcmp>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d102      	bne.n	80088e4 <eConsiderFrameForProcessing+0x6c>
            {
                /* The packet is a request for LLMNR - process it. */
                eReturn = eProcessBuffer;
 80088de:	2301      	movs	r3, #1
 80088e0:	75fb      	strb	r3, [r7, #23]
 80088e2:	e00c      	b.n	80088fe <eConsiderFrameForProcessing+0x86>
                /* The packet is a request for MDNS - process it. */
                eReturn = eProcessBuffer;
            }
            else
        #endif /* ipconfigUSE_MDNS */
        if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv6_0 ) &&
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	2b33      	cmp	r3, #51	@ 0x33
 80088ea:	d106      	bne.n	80088fa <eConsiderFrameForProcessing+0x82>
            ( pxEthernetHeader->xDestinationAddress.ucBytes[ 1 ] == ipMULTICAST_MAC_ADDRESS_IPv6_1 ) )
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	785b      	ldrb	r3, [r3, #1]
        if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv6_0 ) &&
 80088f0:	2b33      	cmp	r3, #51	@ 0x33
 80088f2:	d102      	bne.n	80088fa <eConsiderFrameForProcessing+0x82>
        {
            /* The packet is a request for LLMNR - process it. */
            eReturn = eProcessBuffer;
 80088f4:	2301      	movs	r3, #1
 80088f6:	75fb      	strb	r3, [r7, #23]
 80088f8:	e001      	b.n	80088fe <eConsiderFrameForProcessing+0x86>
        }
        else
        {
            /* The packet was not a broadcast, or for this node, just release
             * the buffer without taking any other action. */
            eReturn = eReleaseBuffer;
 80088fa:	2300      	movs	r3, #0
 80088fc:	75fb      	strb	r3, [r7, #23]

    #if ( ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1 )
    {
        uint16_t usFrameType;

        if( eReturn == eProcessBuffer )
 80088fe:	7dfb      	ldrb	r3, [r7, #23]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d115      	bne.n	8008930 <eConsiderFrameForProcessing+0xb8>
        {
            usFrameType = pxEthernetHeader->usFrameType;
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	7b1a      	ldrb	r2, [r3, #12]
 8008908:	7b5b      	ldrb	r3, [r3, #13]
 800890a:	021b      	lsls	r3, r3, #8
 800890c:	4313      	orrs	r3, r2
 800890e:	817b      	strh	r3, [r7, #10]
            usFrameType = FreeRTOS_ntohs( usFrameType );
 8008910:	897b      	ldrh	r3, [r7, #10]
 8008912:	021b      	lsls	r3, r3, #8
 8008914:	b21a      	sxth	r2, r3
 8008916:	897b      	ldrh	r3, [r7, #10]
 8008918:	0a1b      	lsrs	r3, r3, #8
 800891a:	b29b      	uxth	r3, r3
 800891c:	b21b      	sxth	r3, r3
 800891e:	4313      	orrs	r3, r2
 8008920:	b21b      	sxth	r3, r3
 8008922:	817b      	strh	r3, [r7, #10]

            if( usFrameType <= 0x600U )
 8008924:	897b      	ldrh	r3, [r7, #10]
 8008926:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800892a:	d801      	bhi.n	8008930 <eConsiderFrameForProcessing+0xb8>
            {
                /* Not an Ethernet II frame. */
                eReturn = eReleaseBuffer;
 800892c:	2300      	movs	r3, #0
 800892e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #endif /* ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1  */

    return eReturn;
 8008930:	7dfb      	ldrb	r3, [r7, #23]
}
 8008932:	4618      	mov	r0, r3
 8008934:	3718      	adds	r7, #24
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	08025bc4 	.word	0x08025bc4
 8008940:	08025bb4 	.word	0x08025bb4

08008944 <prvProcessEthernetPacket>:
 *
 * @param[in,out] pxNetworkBuffer the network buffer containing the ethernet packet. If the
 *                                 buffer is large enough, it may be reused to send a reply.
 */
static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
    const EthernetHeader_t * pxEthernetHeader;
    eFrameProcessingResult_t eReturned = eReleaseBuffer;
 800894c:	2300      	movs	r3, #0
 800894e:	73fb      	strb	r3, [r7, #15]
    {
        /* prvHandleEthernetPacket() already checked for ( pxNetworkBuffer != NULL ) so
         * it is safe to break out of the do{}while() and let the second half of this
         * function handle the releasing of pxNetworkBuffer */

        if( ( pxNetworkBuffer->pxInterface == NULL ) || ( pxNetworkBuffer->pxEndPoint == NULL ) )
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008954:	2b00      	cmp	r3, #0
 8008956:	d03d      	beq.n	80089d4 <prvProcessEthernetPacket+0x90>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800895c:	2b00      	cmp	r3, #0
 800895e:	d039      	beq.n	80089d4 <prvProcessEthernetPacket+0x90>
         * None of the above need to be checked again in code that handles incoming packets. */

        iptraceNETWORK_INTERFACE_INPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

        /* Interpret the Ethernet frame. */
        if( pxNetworkBuffer->xDataLength < sizeof( EthernetHeader_t ) )
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008964:	2b0d      	cmp	r3, #13
 8008966:	d934      	bls.n	80089d2 <prvProcessEthernetPacket+0x8e>
        {
            break;
        }

        eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
 8008968:	2301      	movs	r3, #1
 800896a:	73fb      	strb	r3, [r7, #15]
        /* Map the buffer onto the Ethernet Header struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008970:	60bb      	str	r3, [r7, #8]
        #if ( ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES == 0 )
            if( eReturned == eProcessBuffer )
        #endif
        {
            /* Interpret the received Ethernet packet. */
            switch( pxEthernetHeader->usFrameType )
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	899b      	ldrh	r3, [r3, #12]
 8008976:	b29b      	uxth	r3, r3
 8008978:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800897c:	4293      	cmp	r3, r2
 800897e:	d015      	beq.n	80089ac <prvProcessEthernetPacket+0x68>
 8008980:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8008984:	4293      	cmp	r3, r2
 8008986:	dc21      	bgt.n	80089cc <prvProcessEthernetPacket+0x88>
 8008988:	2b08      	cmp	r3, #8
 800898a:	d00f      	beq.n	80089ac <prvProcessEthernetPacket+0x68>
 800898c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8008990:	d11c      	bne.n	80089cc <prvProcessEthernetPacket+0x88>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipARP_FRAME_TYPE:

                        /* The Ethernet frame contains an ARP packet. */
                        if( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) )
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008996:	2b29      	cmp	r3, #41	@ 0x29
 8008998:	d905      	bls.n	80089a6 <prvProcessEthernetPacket+0x62>
                        {
                            /* MISRA Ref 11.3.1 [Misaligned access] */
                            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                            /* coverity[misra_c_2012_rule_11_3_violation] */
                            eReturned = eARPProcessPacket( pxNetworkBuffer );
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f7fc ffe6 	bl	800596c <eARPProcessPacket>
 80089a0:	4603      	mov	r3, r0
 80089a2:	73fb      	strb	r3, [r7, #15]
                        }
                        else
                        {
                            eReturned = eReleaseBuffer;
                        }
                        break;
 80089a4:	e016      	b.n	80089d4 <prvProcessEthernetPacket+0x90>
                            eReturned = eReleaseBuffer;
 80089a6:	2300      	movs	r3, #0
 80089a8:	73fb      	strb	r3, [r7, #15]
                        break;
 80089aa:	e013      	b.n	80089d4 <prvProcessEthernetPacket+0x90>

                case ipIPv4_FRAME_TYPE:
                case ipIPv6_FRAME_TYPE:

                    /* The Ethernet frame contains an IP packet. */
                    if( pxNetworkBuffer->xDataLength >= sizeof( IPPacket_t ) )
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089b0:	2b21      	cmp	r3, #33	@ 0x21
 80089b2:	d908      	bls.n	80089c6 <prvProcessEthernetPacket+0x82>
                    {
                        /* MISRA Ref 11.3.1 [Misaligned access] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                        /* coverity[misra_c_2012_rule_11_3_violation] */
                        eReturned = prvProcessIPPacket( ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer );
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b8:	6879      	ldr	r1, [r7, #4]
 80089ba:	4618      	mov	r0, r3
 80089bc:	f000 f8c6 	bl	8008b4c <prvProcessIPPacket>
 80089c0:	4603      	mov	r3, r0
 80089c2:	73fb      	strb	r3, [r7, #15]
                    else
                    {
                        eReturned = eReleaseBuffer;
                    }

                    break;
 80089c4:	e006      	b.n	80089d4 <prvProcessEthernetPacket+0x90>
                        eReturned = eReleaseBuffer;
 80089c6:	2300      	movs	r3, #0
 80089c8:	73fb      	strb	r3, [r7, #15]
                    break;
 80089ca:	e003      	b.n	80089d4 <prvProcessEthernetPacket+0x90>
                    #if ( ipconfigPROCESS_CUSTOM_ETHERNET_FRAMES != 0 )
                        /* Custom frame handler. */
                        eReturned = eApplicationProcessCustomFrameHook( pxNetworkBuffer );
                    #else
                        /* No other packet types are handled.  Nothing to do. */
                        eReturned = eReleaseBuffer;
 80089cc:	2300      	movs	r3, #0
 80089ce:	73fb      	strb	r3, [r7, #15]
                    #endif
                    break;
 80089d0:	e000      	b.n	80089d4 <prvProcessEthernetPacket+0x90>
            break;
 80089d2:	bf00      	nop
            } /* switch( pxEthernetHeader->usFrameType ) */
        }
    } while( pdFALSE );

    /* Perform any actions that resulted from processing the Ethernet frame. */
    switch( eReturned )
 80089d4:	7bfb      	ldrb	r3, [r7, #15]
 80089d6:	2b04      	cmp	r3, #4
 80089d8:	d00b      	beq.n	80089f2 <prvProcessEthernetPacket+0xae>
 80089da:	2b04      	cmp	r3, #4
 80089dc:	dc19      	bgt.n	8008a12 <prvProcessEthernetPacket+0xce>
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d002      	beq.n	80089e8 <prvProcessEthernetPacket+0xa4>
 80089e2:	2b03      	cmp	r3, #3
 80089e4:	d019      	beq.n	8008a1a <prvProcessEthernetPacket+0xd6>
 80089e6:	e014      	b.n	8008a12 <prvProcessEthernetPacket+0xce>
        case eReturnEthernetFrame:

            /* The Ethernet frame will have been updated (maybe it was
             * an ARP request or a PING request?) and should be sent back to
             * its source. */
            vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 80089e8:	2101      	movs	r1, #1
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 f9a4 	bl	8008d38 <vReturnEthernetFrame>

            /* parameter pdTRUE: the buffer must be released once
             * the frame has been transmitted */
            break;
 80089f0:	e014      	b.n	8008a1c <prvProcessEthernetPacket+0xd8>
             * yet. */
            break;

        case eWaitingARPResolution:

            if( pxARPWaitingNetworkBuffer == NULL )
 80089f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008a24 <prvProcessEthernetPacket+0xe0>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d107      	bne.n	8008a0a <prvProcessEthernetPacket+0xc6>
            {
                pxARPWaitingNetworkBuffer = pxNetworkBuffer;
 80089fa:	4a0a      	ldr	r2, [pc, #40]	@ (8008a24 <prvProcessEthernetPacket+0xe0>)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6013      	str	r3, [r2, #0]
                vIPTimerStartARPResolution( ipARP_RESOLUTION_MAX_DELAY );
 8008a00:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8008a04:	f000 fc06 	bl	8009214 <vIPTimerStartARPResolution>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );

                iptraceDELAYED_ARP_BUFFER_FULL();
            }

            break;
 8008a08:	e008      	b.n	8008a1c <prvProcessEthernetPacket+0xd8>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f00d fca4 	bl	8016358 <vReleaseNetworkBufferAndDescriptor>
            break;
 8008a10:	e004      	b.n	8008a1c <prvProcessEthernetPacket+0xd8>
        default:

            /* The frame is not being used anywhere, and the
             * NetworkBufferDescriptor_t structure containing the frame should
             * just be released back to the list of free buffers. */
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f00d fca0 	bl	8016358 <vReleaseNetworkBufferAndDescriptor>
            break;
 8008a18:	e000      	b.n	8008a1c <prvProcessEthernetPacket+0xd8>
            break;
 8008a1a:	bf00      	nop
    }
}
 8008a1c:	bf00      	nop
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	20000e44 	.word	0x20000e44

08008a28 <prvProcessUDPPacket>:
 * @return eReleaseBuffer ( please release the buffer ).
 *         eFrameConsumed ( the buffer has now been released ).
 */

static eFrameProcessingResult_t prvProcessUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8008a28:	b5b0      	push	{r4, r5, r7, lr}
 8008a2a:	b08c      	sub	sp, #48	@ 0x30
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8008a30:	2300      	movs	r3, #0
 8008a32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    BaseType_t xIsWaitingARPResolution = pdFALSE;
 8008a36:	2300      	movs	r3, #0
 8008a38:	60bb      	str	r3, [r7, #8]
    /* The IP packet contained a UDP frame. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const UDPPacket_t * pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a3e:	627b      	str	r3, [r7, #36]	@ 0x24
    const UDPHeader_t * pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 8008a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a42:	3322      	adds	r3, #34	@ 0x22
 8008a44:	62bb      	str	r3, [r7, #40]	@ 0x28

    size_t uxMinSize = ipSIZE_OF_ETH_HEADER + ( size_t ) uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fa76 	bl	8008f38 <uxIPHeaderSizePacket>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	3316      	adds	r3, #22
 8008a50:	623b      	str	r3, [r7, #32]
    size_t uxLength;
    uint16_t usLength;

    #if ( ipconfigUSE_IPv6 != 0 )
        if( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv6_FRAME_TYPE )
 8008a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a54:	899b      	ldrh	r3, [r3, #12]
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d105      	bne.n	8008a6c <prvProcessUDPPacket+0x44>
            const ProtocolHeaders_t * pxProtocolHeaders;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ] ) );
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a64:	3336      	adds	r3, #54	@ 0x36
 8008a66:	61fb      	str	r3, [r7, #28]
            pxUDPHeader = &( pxProtocolHeaders->xUDPHeader );
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    usLength = FreeRTOS_ntohs( pxUDPHeader->usLength );
 8008a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a6e:	889b      	ldrh	r3, [r3, #4]
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	021b      	lsls	r3, r3, #8
 8008a74:	b21a      	sxth	r2, r3
 8008a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a78:	889b      	ldrh	r3, [r3, #4]
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	0a1b      	lsrs	r3, r3, #8
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	b21b      	sxth	r3, r3
 8008a82:	4313      	orrs	r3, r2
 8008a84:	b21b      	sxth	r3, r3
 8008a86:	837b      	strh	r3, [r7, #26]
    uxLength = ( size_t ) usLength;
 8008a88:	8b7b      	ldrh	r3, [r7, #26]
 8008a8a:	617b      	str	r3, [r7, #20]

    /* Note the header values required prior to the checksum
     * generation as the checksum pseudo header may clobber some of
     * these values. */
    #if ( ipconfigUSE_IPv4 != 0 )
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 8008a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a8e:	899b      	ldrh	r3, [r3, #12]
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	2b08      	cmp	r3, #8
 8008a94:	d11a      	bne.n	8008acc <prvProcessUDPPacket+0xa4>
            ( usLength > ( FreeRTOS_ntohs( pxUDPPacket->xIPHeader.usLength ) - uxIPHeaderSizePacket( pxNetworkBuffer ) ) ) )
 8008a96:	8b7c      	ldrh	r4, [r7, #26]
 8008a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a9a:	8a1b      	ldrh	r3, [r3, #16]
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	021b      	lsls	r3, r3, #8
 8008aa0:	b21a      	sxth	r2, r3
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa4:	8a1b      	ldrh	r3, [r3, #16]
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	0a1b      	lsrs	r3, r3, #8
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	b21b      	sxth	r3, r3
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	b21b      	sxth	r3, r3
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	461d      	mov	r5, r3
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 fa3e 	bl	8008f38 <uxIPHeaderSizePacket>
 8008abc:	4603      	mov	r3, r0
 8008abe:	1aeb      	subs	r3, r5, r3
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 8008ac0:	429c      	cmp	r4, r3
 8008ac2:	d903      	bls.n	8008acc <prvProcessUDPPacket+0xa4>
        {
            eReturn = eReleaseBuffer;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008aca:	e038      	b.n	8008b3e <prvProcessUDPPacket+0x116>
        }
        else
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    if( ( pxNetworkBuffer->xDataLength >= uxMinSize ) &&
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ad0:	6a3a      	ldr	r2, [r7, #32]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d833      	bhi.n	8008b3e <prvProcessUDPPacket+0x116>
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	2b07      	cmp	r3, #7
 8008ada:	d930      	bls.n	8008b3e <prvProcessUDPPacket+0x116>
         * size of the UDP header.
         *
         * The size of the UDP packet structure in this implementation
         * includes the size of the Ethernet header, the size of
         * the IP header, and the size of the UDP header. */
        uxPayloadSize_1 = pxNetworkBuffer->xDataLength - uxMinSize;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008ae0:	6a3b      	ldr	r3, [r7, #32]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	613b      	str	r3, [r7, #16]
        uxPayloadSize_2 = uxLength - ipSIZE_OF_UDP_HEADER;
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	3b08      	subs	r3, #8
 8008aea:	60fb      	str	r3, [r7, #12]

        if( uxPayloadSize_1 > uxPayloadSize_2 )
 8008aec:	693a      	ldr	r2, [r7, #16]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d904      	bls.n	8008afe <prvProcessUDPPacket+0xd6>
        {
            pxNetworkBuffer->xDataLength = uxPayloadSize_2 + uxMinSize;
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	6a3b      	ldr	r3, [r7, #32]
 8008af8:	441a      	add	r2, r3
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        pxNetworkBuffer->usPort = pxUDPHeader->usSourcePort;
 8008afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b00:	881b      	ldrh	r3, [r3, #0]
 8008b02:	b29a      	uxth	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNetworkBuffer->xIPAddress.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 8008b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b0a:	f8d3 201a 	ldr.w	r2, [r3, #26]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	615a      	str	r2, [r3, #20]
         * by the NIC driver. */

        /* Pass the packet payload to the UDP sockets
         * implementation. */
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
                                       pxUDPHeader->usDestinationPort,
 8008b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b14:	885b      	ldrh	r3, [r3, #2]
 8008b16:	b29b      	uxth	r3, r3
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
 8008b18:	f107 0208 	add.w	r2, r7, #8
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f00c fe2a 	bl	8015778 <xProcessReceivedUDPPacket>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d103      	bne.n	8008b32 <prvProcessUDPPacket+0x10a>
                                       &( xIsWaitingARPResolution ) ) == pdPASS )
        {
            eReturn = eFrameConsumed;
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008b30:	e005      	b.n	8008b3e <prvProcessUDPPacket+0x116>
        }
        else
        {
            /* Is this packet to be set aside for ARP resolution. */
            if( xIsWaitingARPResolution == pdTRUE )
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d102      	bne.n	8008b3e <prvProcessUDPPacket+0x116>
            {
                eReturn = eWaitingARPResolution;
 8008b38:	2304      	movs	r3, #4
 8008b3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    else
    {
        /* Length checks failed, the buffer will be released. */
    }

    return eReturn;
 8008b3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3730      	adds	r7, #48	@ 0x30
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008b4c <prvProcessIPPacket>:
 *
 * @return An enum to show whether the packet should be released/kept/processed etc.
 */
static eFrameProcessingResult_t prvProcessIPPacket( const IPPacket_t * pxIPPacket,
                                                    NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b088      	sub	sp, #32
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eReturn;
    UBaseType_t uxHeaderLength = ipSIZE_OF_IPv4_HEADER;
 8008b56:	2314      	movs	r3, #20
 8008b58:	61bb      	str	r3, [r7, #24]
    uint8_t ucProtocol = 0U;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	75fb      	strb	r3, [r7, #23]

    #if ( ipconfigUSE_IPv6 != 0 )
        const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	613b      	str	r3, [r7, #16]
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    #if ( ipconfigUSE_IPv4 != 0 )
        const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	330e      	adds	r3, #14
 8008b66:	60fb      	str	r3, [r7, #12]
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    switch( pxIPPacket->xEthernetHeader.usFrameType )
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	899b      	ldrh	r3, [r3, #12]
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	2b08      	cmp	r3, #8
 8008b70:	d023      	beq.n	8008bba <prvProcessIPPacket+0x6e>
 8008b72:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d144      	bne.n	8008c04 <prvProcessIPPacket+0xb8>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case ipIPv6_FRAME_TYPE:

                if( pxNetworkBuffer->xDataLength < sizeof( IPPacket_IPv6_t ) )
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b7e:	2b35      	cmp	r3, #53	@ 0x35
 8008b80:	d802      	bhi.n	8008b88 <prvProcessIPPacket+0x3c>
                {
                    /* The packet size is less than minimum IPv6 packet. */
                    eReturn = eReleaseBuffer;
 8008b82:	2300      	movs	r3, #0
 8008b84:	77fb      	strb	r3, [r7, #31]
                    /* The IP-header type is copied to a special reserved location a few bytes before the message
                     * starts. In the case of IPv6, this value is never actually used and the line below can safely be removed
                     * with no ill effects. We only store it to help with debugging. */
                    pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader_IPv6->ucVersionTrafficClass;
                }
                break;
 8008b86:	e043      	b.n	8008c10 <prvProcessIPPacket+0xc4>
                    pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b8c:	330e      	adds	r3, #14
 8008b8e:	613b      	str	r3, [r7, #16]
                    uxHeaderLength = ipSIZE_OF_IPv6_HEADER;
 8008b90:	2328      	movs	r3, #40	@ 0x28
 8008b92:	61bb      	str	r3, [r7, #24]
                    ucProtocol = pxIPHeader_IPv6->ucNextHeader;
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	799b      	ldrb	r3, [r3, #6]
 8008b98:	75fb      	strb	r3, [r7, #23]
                    eReturn = prvAllowIPPacketIPv6( ( ( const IPHeader_IPv6_t * ) &( pxIPPacket->xIPHeader ) ), pxNetworkBuffer, uxHeaderLength );
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	330e      	adds	r3, #14
 8008b9e:	69ba      	ldr	r2, [r7, #24]
 8008ba0:	6839      	ldr	r1, [r7, #0]
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f001 fb6c 	bl	800a280 <prvAllowIPPacketIPv6>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	77fb      	strb	r3, [r7, #31]
                    pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader_IPv6->ucVersionTrafficClass;
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bb0:	3b06      	subs	r3, #6
 8008bb2:	693a      	ldr	r2, [r7, #16]
 8008bb4:	7812      	ldrb	r2, [r2, #0]
 8008bb6:	701a      	strb	r2, [r3, #0]
                break;
 8008bb8:	e02a      	b.n	8008c10 <prvProcessIPPacket+0xc4>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case ipIPv4_FRAME_TYPE:
               {
                   size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	60bb      	str	r3, [r7, #8]

                   /* Check if the IP headers are acceptable and if it has our destination.
                    * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
                    * length in multiples of 4. */
                   uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8008bc8:	61bb      	str	r3, [r7, #24]

                   if( ( uxHeaderLength > ( pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ) ) ||
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bce:	3b0e      	subs	r3, #14
 8008bd0:	69ba      	ldr	r2, [r7, #24]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d802      	bhi.n	8008bdc <prvProcessIPPacket+0x90>
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	2b13      	cmp	r3, #19
 8008bda:	d802      	bhi.n	8008be2 <prvProcessIPPacket+0x96>
                       ( uxHeaderLength < ipSIZE_OF_IPv4_HEADER ) )
                   {
                       eReturn = eReleaseBuffer;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	77fb      	strb	r3, [r7, #31]
                            * buffer is being used. */
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
                       }
                   }

                   break;
 8008be0:	e016      	b.n	8008c10 <prvProcessIPPacket+0xc4>
                       ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	7ddb      	ldrb	r3, [r3, #23]
 8008be6:	75fb      	strb	r3, [r7, #23]
                       eReturn = prvAllowIPPacketIPv4( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 8008be8:	69ba      	ldr	r2, [r7, #24]
 8008bea:	6839      	ldr	r1, [r7, #0]
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f001 f81b 	bl	8009c28 <prvAllowIPPacketIPv4>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	77fb      	strb	r3, [r7, #31]
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bfa:	3b06      	subs	r3, #6
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	7812      	ldrb	r2, [r2, #0]
 8008c00:	701a      	strb	r2, [r3, #0]
                   break;
 8008c02:	e005      	b.n	8008c10 <prvProcessIPPacket+0xc4>
               }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:
            eReturn = eReleaseBuffer;
 8008c04:	2300      	movs	r3, #0
 8008c06:	77fb      	strb	r3, [r7, #31]
            FreeRTOS_debug_printf( ( "prvProcessIPPacket: Undefined Frame Type \n" ) );
 8008c08:	484a      	ldr	r0, [pc, #296]	@ (8008d34 <prvProcessIPPacket+0x1e8>)
 8008c0a:	f017 fc8f 	bl	802052c <lUDPLoggingPrintf>
            /* MISRA 16.4 Compliance */
            break;
 8008c0e:	bf00      	nop

    /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
    /* coverity[misra_c_2012_rule_14_3_violation] */
    /* coverity[cond_const] */
    if( eReturn == eProcessBuffer )
 8008c10:	7ffb      	ldrb	r3, [r7, #31]
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	f040 8088 	bne.w	8008d28 <prvProcessIPPacket+0x1dc>
    {
        /* Are there IP-options. */
        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
        switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	899b      	ldrh	r3, [r3, #12]
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	2b08      	cmp	r3, #8
 8008c20:	d004      	beq.n	8008c2c <prvProcessIPPacket+0xe0>
 8008c22:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d009      	beq.n	8008c3e <prvProcessIPPacket+0xf2>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 8008c2a:	e020      	b.n	8008c6e <prvProcessIPPacket+0x122>
                    if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 8008c2c:	69bb      	ldr	r3, [r7, #24]
 8008c2e:	2b14      	cmp	r3, #20
 8008c30:	d91a      	bls.n	8008c68 <prvProcessIPPacket+0x11c>
                        eReturn = prvCheckIP4HeaderOptions( pxNetworkBuffer );
 8008c32:	6838      	ldr	r0, [r7, #0]
 8008c34:	f001 f852 	bl	8009cdc <prvCheckIP4HeaderOptions>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	77fb      	strb	r3, [r7, #31]
                    break;
 8008c3c:	e014      	b.n	8008c68 <prvProcessIPPacket+0x11c>
                    if( xGetExtensionOrder( ucProtocol, 0U ) > 0 )
 8008c3e:	7dfb      	ldrb	r3, [r7, #23]
 8008c40:	2100      	movs	r1, #0
 8008c42:	4618      	mov	r0, r3
 8008c44:	f001 fb3a 	bl	800a2bc <xGetExtensionOrder>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	dd0e      	ble.n	8008c6c <prvProcessIPPacket+0x120>
                        eReturn = eHandleIPv6ExtensionHeaders( pxNetworkBuffer, pdTRUE );
 8008c4e:	2101      	movs	r1, #1
 8008c50:	6838      	ldr	r0, [r7, #0]
 8008c52:	f001 fb99 	bl	800a388 <eHandleIPv6ExtensionHeaders>
 8008c56:	4603      	mov	r3, r0
 8008c58:	77fb      	strb	r3, [r7, #31]
                        if( eReturn != eReleaseBuffer )
 8008c5a:	7ffb      	ldrb	r3, [r7, #31]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d005      	beq.n	8008c6c <prvProcessIPPacket+0x120>
                            ucProtocol = pxIPHeader_IPv6->ucNextHeader;
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	799b      	ldrb	r3, [r3, #6]
 8008c64:	75fb      	strb	r3, [r7, #23]
                    break;
 8008c66:	e001      	b.n	8008c6c <prvProcessIPPacket+0x120>
                    break;
 8008c68:	bf00      	nop
 8008c6a:	e000      	b.n	8008c6e <prvProcessIPPacket+0x122>
                    break;
 8008c6c:	bf00      	nop

        /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
        /* coverity[misra_c_2012_rule_14_3_violation] */
        /* coverity[const] */
        if( eReturn != eReleaseBuffer )
 8008c6e:	7ffb      	ldrb	r3, [r7, #31]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d059      	beq.n	8008d28 <prvProcessIPPacket+0x1dc>
        {
            /* Add the IP and MAC addresses to the ARP table if they are not
             * already there - otherwise refresh the age of the existing
             * entry. */
            if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 8008c74:	7dfb      	ldrb	r3, [r7, #23]
 8008c76:	2b11      	cmp	r3, #17
 8008c78:	d026      	beq.n	8008cc8 <prvProcessIPPacket+0x17c>
            {
                if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 8008c7a:	6838      	ldr	r0, [r7, #0]
 8008c7c:	f7fd f918 	bl	8005eb0 <xCheckRequiresARPResolution>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d102      	bne.n	8008c8c <prvProcessIPPacket+0x140>
                {
                    eReturn = eWaitingARPResolution;
 8008c86:	2304      	movs	r3, #4
 8008c88:	77fb      	strb	r3, [r7, #31]
 8008c8a:	e01d      	b.n	8008cc8 <prvProcessIPPacket+0x17c>
                     * packet.  For UDP packets, this will be done later in
                     * xProcessReceivedUDPPacket(), as soon as it's know that the message
                     * will be handled.  This will prevent the ARP cache getting
                     * overwritten with the IP address of useless broadcast packets. */
                    /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                    switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	899b      	ldrh	r3, [r3, #12]
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	2b08      	cmp	r3, #8
 8008c94:	d00e      	beq.n	8008cb4 <prvProcessIPPacket+0x168>
 8008c96:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d113      	bne.n	8008cc6 <prvProcessIPPacket+0x17a>
                    {
                        #if ( ipconfigUSE_IPv6 != 0 )
                            case ipIPv6_FRAME_TYPE:
                                vNDRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), &( pxIPHeader_IPv6->xSourceAddress ), pxNetworkBuffer->pxEndPoint );
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	1d98      	adds	r0, r3, #6
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	f103 0108 	add.w	r1, r3, #8
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cac:	461a      	mov	r2, r3
 8008cae:	f002 f843 	bl	800ad38 <vNDRefreshCacheEntry>
                                break;
 8008cb2:	e009      	b.n	8008cc8 <prvProcessIPPacket+0x17c>
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        #if ( ipconfigUSE_IPv4 != 0 )
                            case ipIPv4_FRAME_TYPE:
                                /* Refresh the age of this cache entry since a packet was received. */
                                vARPRefreshCacheEntryAge( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	1d9a      	adds	r2, r3, #6
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	4610      	mov	r0, r2
 8008cc0:	f7fd f9d6 	bl	8006070 <vARPRefreshCacheEntryAge>
                                break;
 8008cc4:	e000      	b.n	8008cc8 <prvProcessIPPacket+0x17c>
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                        default:   /* LCOV_EXCL_LINE */
                            /* MISRA 16.4 Compliance */
                            break; /* LCOV_EXCL_LINE */
 8008cc6:	bf00      	nop
                    }
                }
            }

            if( eReturn != eWaitingARPResolution )
 8008cc8:	7ffb      	ldrb	r3, [r7, #31]
 8008cca:	2b04      	cmp	r3, #4
 8008ccc:	d02c      	beq.n	8008d28 <prvProcessIPPacket+0x1dc>
            {
                switch( ucProtocol )
 8008cce:	7dfb      	ldrb	r3, [r7, #23]
 8008cd0:	2b3a      	cmp	r3, #58	@ 0x3a
 8008cd2:	d010      	beq.n	8008cf6 <prvProcessIPPacket+0x1aa>
 8008cd4:	2b3a      	cmp	r3, #58	@ 0x3a
 8008cd6:	dc23      	bgt.n	8008d20 <prvProcessIPPacket+0x1d4>
 8008cd8:	2b11      	cmp	r3, #17
 8008cda:	d012      	beq.n	8008d02 <prvProcessIPPacket+0x1b6>
 8008cdc:	2b11      	cmp	r3, #17
 8008cde:	dc1f      	bgt.n	8008d20 <prvProcessIPPacket+0x1d4>
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d002      	beq.n	8008cea <prvProcessIPPacket+0x19e>
 8008ce4:	2b06      	cmp	r3, #6
 8008ce6:	d012      	beq.n	8008d0e <prvProcessIPPacket+0x1c2>
 8008ce8:	e01a      	b.n	8008d20 <prvProcessIPPacket+0x1d4>
                             * also be returned, and the source of the ping will know something
                             * went wrong because it will not be able to validate what it
                             * receives. */
                            #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                            {
                                eReturn = ProcessICMPPacket( pxNetworkBuffer );
 8008cea:	6838      	ldr	r0, [r7, #0]
 8008cec:	f7ff f9fe 	bl	80080ec <ProcessICMPPacket>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	77fb      	strb	r3, [r7, #31]
                            }
                            #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 ) */
                            break;
 8008cf4:	e018      	b.n	8008d28 <prvProcessIPPacket+0x1dc>
                    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                    #if ( ipconfigUSE_IPv6 != 0 )
                        case ipPROTOCOL_ICMP_IPv6:
                            eReturn = prvProcessICMPMessage_IPv6( pxNetworkBuffer );
 8008cf6:	6838      	ldr	r0, [r7, #0]
 8008cf8:	f002 fb6e 	bl	800b3d8 <prvProcessICMPMessage_IPv6>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	77fb      	strb	r3, [r7, #31]
                            break;
 8008d00:	e012      	b.n	8008d28 <prvProcessIPPacket+0x1dc>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    case ipPROTOCOL_UDP:
                        /* The IP packet contained a UDP frame. */

                        eReturn = prvProcessUDPPacket( pxNetworkBuffer );
 8008d02:	6838      	ldr	r0, [r7, #0]
 8008d04:	f7ff fe90 	bl	8008a28 <prvProcessUDPPacket>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	77fb      	strb	r3, [r7, #31]
                        break;
 8008d0c:	e00c      	b.n	8008d28 <prvProcessIPPacket+0x1dc>

                        #if ipconfigUSE_TCP == 1
                            case ipPROTOCOL_TCP:

                                if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 8008d0e:	6838      	ldr	r0, [r7, #0]
 8008d10:	f007 fda0 	bl	8010854 <xProcessReceivedTCPPacket>
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d105      	bne.n	8008d26 <prvProcessIPPacket+0x1da>
                                {
                                    eReturn = eFrameConsumed;
 8008d1a:	2303      	movs	r3, #3
 8008d1c:	77fb      	strb	r3, [r7, #31]
                                }
                                break;
 8008d1e:	e002      	b.n	8008d26 <prvProcessIPPacket+0x1da>
                        #endif /* if ipconfigUSE_TCP == 1 */
                    default:
                        /* Not a supported frame type. */
                        eReturn = eReleaseBuffer;
 8008d20:	2300      	movs	r3, #0
 8008d22:	77fb      	strb	r3, [r7, #31]
                        break;
 8008d24:	e000      	b.n	8008d28 <prvProcessIPPacket+0x1dc>
                                break;
 8008d26:	bf00      	nop
                }
            }
        }
    }

    return eReturn;
 8008d28:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3720      	adds	r7, #32
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	08022fc0 	.word	0x08022fc0

08008d38 <vReturnEthernetFrame>:
 * @param[in,out] pxNetworkBuffer The network buffer which is to be sent.
 * @param[in] xReleaseAfterSend Whether this network buffer is to be released or not.
 */
void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer,
                           BaseType_t xReleaseAfterSend )
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b08e      	sub	sp, #56	@ 0x38
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNewBuffer;
    #endif

    #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
    {
        if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d46:	2b3b      	cmp	r3, #59	@ 0x3b
 8008d48:	d818      	bhi.n	8008d7c <vReturnEthernetFrame+0x44>
        {
            BaseType_t xIndex;

            FreeRTOS_printf( ( "vReturnEthernetFrame: length %u\n", ( unsigned ) pxNetworkBuffer->xDataLength ) );
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d4e:	4619      	mov	r1, r3
 8008d50:	486a      	ldr	r0, [pc, #424]	@ (8008efc <vReturnEthernetFrame+0x1c4>)
 8008d52:	f017 fbeb 	bl	802052c <lUDPLoggingPrintf>

            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d5c:	e008      	b.n	8008d70 <vReturnEthernetFrame+0x38>
            {
                pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d64:	4413      	add	r3, r2
 8008d66:	2200      	movs	r2, #0
 8008d68:	701a      	strb	r2, [r3, #0]
            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8008d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d72:	2b3b      	cmp	r3, #59	@ 0x3b
 8008d74:	ddf3      	ble.n	8008d5e <vReturnEthernetFrame+0x26>
            }

            pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	223c      	movs	r2, #60	@ 0x3c
 8008d7a:	629a      	str	r2, [r3, #40]	@ 0x28
        }
    }
    #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

    #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        if( xReleaseAfterSend == pdFALSE )
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d111      	bne.n	8008da6 <vReturnEthernetFrame+0x6e>
        {
            pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, pxNetworkBuffer->xDataLength );
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d86:	4619      	mov	r1, r3
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 fb87 	bl	800949c <pxDuplicateNetworkBufferWithDescriptor>
 8008d8e:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( pxNewBuffer != NULL )
 8008d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d005      	beq.n	8008da2 <vReturnEthernetFrame+0x6a>
            {
                xReleaseAfterSend = pdTRUE;
 8008d96:	2301      	movs	r3, #1
 8008d98:	603b      	str	r3, [r7, #0]
                /* Want no rounding up. */
                pxNewBuffer->xDataLength = pxNetworkBuffer->xDataLength;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008da0:	629a      	str	r2, [r3, #40]	@ 0x28
            }

            pxNetworkBuffer = pxNewBuffer;
 8008da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008da4:	607b      	str	r3, [r7, #4]
        }

        if( pxNetworkBuffer != NULL )
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	f000 80a3 	beq.w	8008ef4 <vReturnEthernetFrame+0x1bc>
    #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPPacket_t * pxIPPacket = ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008db2:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource = NULL;
 8008db4:	2300      	movs	r3, #0
 8008db6:	633b      	str	r3, [r7, #48]	@ 0x30
        void * pvCopyDest;

        #if ( ipconfigUSE_IPv4 != 0 )
            MACAddress_t xMACAddress;
            eARPLookupResult_t eResult;
            uint32_t ulDestinationIPAddress = 0U;
 8008db8:	2300      	movs	r3, #0
 8008dba:	613b      	str	r3, [r7, #16]
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        /* Send! */
        if( pxNetworkBuffer->pxEndPoint == NULL )
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d12f      	bne.n	8008e24 <vReturnEthernetFrame+0xec>
        {
            /* _HT_ I wonder if this ad-hoc search of an end-point it necessary. */
            FreeRTOS_printf( ( "vReturnEthernetFrame: No pxEndPoint yet for %x ip?\n", ( unsigned int ) FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulDestinationIPAddress ) ) );
 8008dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc6:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8008dca:	061a      	lsls	r2, r3, #24
 8008dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dce:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8008dd2:	021b      	lsls	r3, r3, #8
 8008dd4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008dd8:	431a      	orrs	r2, r3
 8008dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ddc:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8008de0:	0a1b      	lsrs	r3, r3, #8
 8008de2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008de6:	431a      	orrs	r2, r3
 8008de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dea:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8008dee:	0e1b      	lsrs	r3, r3, #24
 8008df0:	4313      	orrs	r3, r2
 8008df2:	4619      	mov	r1, r3
 8008df4:	4842      	ldr	r0, [pc, #264]	@ (8008f00 <vReturnEthernetFrame+0x1c8>)
 8008df6:	f017 fb99 	bl	802052c <lUDPLoggingPrintf>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            switch( ( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer ) )->usFrameType )
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dfe:	899b      	ldrh	r3, [r3, #12]
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	2b08      	cmp	r3, #8
 8008e04:	d003      	beq.n	8008e0e <vReturnEthernetFrame+0xd6>
 8008e06:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8008e0a:	4293      	cmp	r3, r2
                        break;
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 8008e0c:	e00a      	b.n	8008e24 <vReturnEthernetFrame+0xec>
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPPacket->xIPHeader.ulDestinationIPAddress, 7 );
 8008e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e10:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8008e14:	2107      	movs	r1, #7
 8008e16:	4618      	mov	r0, r3
 8008e18:	f003 fcfe 	bl	800c818 <FreeRTOS_FindEndPointOnNetMask>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	631a      	str	r2, [r3, #48]	@ 0x30
                        break;
 8008e22:	bf00      	nop
            }
        }

        if( pxNetworkBuffer->pxEndPoint != NULL )
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d063      	beq.n	8008ef4 <vReturnEthernetFrame+0x1bc>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface; /*_RB_ Why not use the pxNetworkBuffer->pxNetworkInterface directly? */
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e30:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8008e34:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Interpret the Ethernet packet being sent. */
            switch( pxIPPacket->xEthernetHeader.usFrameType )
 8008e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e38:	899b      	ldrh	r3, [r3, #12]
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	2b08      	cmp	r3, #8
 8008e3e:	d11c      	bne.n	8008e7a <vReturnEthernetFrame+0x142>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipIPv4_FRAME_TYPE:
                        ulDestinationIPAddress = pxIPPacket->xIPHeader.ulDestinationIPAddress;
 8008e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e42:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8008e46:	613b      	str	r3, [r7, #16]

                        /* Try to find a MAC address corresponding to the destination IP
                         * address. */
                        eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &( pxNetworkBuffer->pxEndPoint ) );
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e4e:	f107 0114 	add.w	r1, r7, #20
 8008e52:	f107 0310 	add.w	r3, r7, #16
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7fd fa54 	bl	8006304 <eARPGetCacheEntry>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                        if( eResult == eARPCacheHit )
 8008e62:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d103      	bne.n	8008e72 <vReturnEthernetFrame+0x13a>
                        {
                            /* Best case scenario - an address is found, use it. */
                            pvCopySource = &xMACAddress;
 8008e6a:	f107 0314 	add.w	r3, r7, #20
 8008e6e:	633b      	str	r3, [r7, #48]	@ 0x30
                        else
                        {
                            /* If an address is not found, just swap the source and destination MAC addresses. */
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
                        }
                        break;
 8008e70:	e007      	b.n	8008e82 <vReturnEthernetFrame+0x14a>
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 8008e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e74:	3306      	adds	r3, #6
 8008e76:	633b      	str	r3, [r7, #48]	@ 0x30
                        break;
 8008e78:	e003      	b.n	8008e82 <vReturnEthernetFrame+0x14a>

                case ipIPv6_FRAME_TYPE:
                case ipARP_FRAME_TYPE:
                default:
                    /* In case of ARP frame, just swap the source and destination MAC addresses. */
                    pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 8008e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e7c:	3306      	adds	r3, #6
 8008e7e:	633b      	str	r3, [r7, #48]	@ 0x30
                    break;
 8008e80:	bf00      	nop
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xDestinationAddress );
 8008e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e84:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxIPPacket->xEthernetHeader.xDestinationAddress ) );
 8008e86:	2206      	movs	r2, #6
 8008e88:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008e8a:	69f8      	ldr	r0, [r7, #28]
 8008e8c:	f017 fd6a 	bl	8020964 <memcpy>

            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e94:	33e8      	adds	r3, #232	@ 0xe8
 8008e96:	633b      	str	r3, [r7, #48]	@ 0x30
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 8008e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e9a:	3306      	adds	r3, #6
 8008e9c:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8008e9e:	2206      	movs	r2, #6
 8008ea0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008ea2:	69f8      	ldr	r0, [r7, #28]
 8008ea4:	f017 fd5e 	bl	8020964 <memcpy>

            /* Send! */
            if( xIsCallingFromIPTask() == pdTRUE )
 8008ea8:	f000 fbd4 	bl	8009654 <xIsCallingFromIPTask>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d106      	bne.n	8008ec0 <vReturnEthernetFrame+0x188>
            {
                iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 8008eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	6879      	ldr	r1, [r7, #4]
 8008eba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008ebc:	4798      	blx	r3
                /* This should never reach or the packet is gone. */
                configASSERT( pdFALSE );
            }
        }
    }
}
 8008ebe:	e019      	b.n	8008ef4 <vReturnEthernetFrame+0x1bc>
            else if( xReleaseAfterSend != pdFALSE )
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d011      	beq.n	8008eea <vReturnEthernetFrame+0x1b2>
                xSendEvent.eEventType = eNetworkTxEvent;
 8008ec6:	2302      	movs	r3, #2
 8008ec8:	723b      	strb	r3, [r7, #8]
                xSendEvent.pvData = pxNetworkBuffer;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	60fb      	str	r3, [r7, #12]
                if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 8008ece:	f107 0308 	add.w	r3, r7, #8
 8008ed2:	f04f 31ff 	mov.w	r1, #4294967295
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7ff fc7a 	bl	80087d0 <xSendEventStructToIPTask>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d108      	bne.n	8008ef4 <vReturnEthernetFrame+0x1bc>
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f00d fa38 	bl	8016358 <vReleaseNetworkBufferAndDescriptor>
}
 8008ee8:	e004      	b.n	8008ef4 <vReturnEthernetFrame+0x1bc>
                configASSERT( pdFALSE );
 8008eea:	f640 019f 	movw	r1, #2207	@ 0x89f
 8008eee:	4805      	ldr	r0, [pc, #20]	@ (8008f04 <vReturnEthernetFrame+0x1cc>)
 8008ef0:	f7f8 f912 	bl	8001118 <vAssertCalled>
}
 8008ef4:	bf00      	nop
 8008ef6:	3738      	adds	r7, #56	@ 0x38
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	08022fec 	.word	0x08022fec
 8008f00:	08023010 	.word	0x08023010
 8008f04:	08022ed8 	.word	0x08022ed8

08008f08 <xIPIsNetworkTaskReady>:
 * @brief Returns whether the IP task is ready.
 *
 * @return pdTRUE if IP task is ready, else pdFALSE.
 */
BaseType_t xIPIsNetworkTaskReady( void )
{
 8008f08:	b480      	push	{r7}
 8008f0a:	af00      	add	r7, sp, #0
    return xIPTaskInitialised;
 8008f0c:	4b03      	ldr	r3, [pc, #12]	@ (8008f1c <xIPIsNetworkTaskReady+0x14>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	20000e58 	.word	0x20000e58

08008f20 <uxGetMinimumIPQueueSpace>:
 * @brief Get the minimum space in the IP task queue.
 *
 * @return The minimum possible space in the IP task queue.
 */
    UBaseType_t uxGetMinimumIPQueueSpace( void )
    {
 8008f20:	b480      	push	{r7}
 8008f22:	af00      	add	r7, sp, #0
        return uxQueueMinimumSpace;
 8008f24:	4b03      	ldr	r3, [pc, #12]	@ (8008f34 <uxGetMinimumIPQueueSpace+0x14>)
 8008f26:	681b      	ldr	r3, [r3, #0]
    }
 8008f28:	4618      	mov	r0, r3
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	20000014 	.word	0x20000014

08008f38 <uxIPHeaderSizePacket>:
 * @brief Get the size of the IP-header, by checking the type of the network buffer.
 * @param[in] pxNetworkBuffer The network buffer.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b085      	sub	sp, #20
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
    size_t uxResult;
    /* Map the buffer onto Ethernet Header struct for easy access to fields. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f44:	60bb      	str	r3, [r7, #8]

    if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	899b      	ldrh	r3, [r3, #12]
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d102      	bne.n	8008f5a <uxIPHeaderSizePacket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 8008f54:	2328      	movs	r3, #40	@ 0x28
 8008f56:	60fb      	str	r3, [r7, #12]
 8008f58:	e001      	b.n	8008f5e <uxIPHeaderSizePacket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 8008f5a:	2314      	movs	r3, #20
 8008f5c:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3714      	adds	r7, #20
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <uxIPHeaderSizeSocket>:
 * @brief Get the size of the IP-header, by checking if the socket bIsIPv6 set.
 * @param[in] pxSocket The socket.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizeSocket( const FreeRTOS_Socket_t * pxSocket )
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b085      	sub	sp, #20
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
    size_t uxResult;

    if( ( pxSocket != NULL ) && ( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED ) )
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d009      	beq.n	8008f8e <uxIPHeaderSizeSocket+0x22>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	7a1b      	ldrb	r3, [r3, #8]
 8008f7e:	f003 0301 	and.w	r3, r3, #1
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d002      	beq.n	8008f8e <uxIPHeaderSizeSocket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 8008f88:	2328      	movs	r3, #40	@ 0x28
 8008f8a:	60fb      	str	r3, [r7, #12]
 8008f8c:	e001      	b.n	8008f92 <uxIPHeaderSizeSocket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 8008f8e:	2314      	movs	r3, #20
 8008f90:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 8008f92:	68fb      	ldr	r3, [r7, #12]
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3714      	adds	r7, #20
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <xCalculateSleepTime>:
 *
 * @return The maximum sleep time or ipconfigMAX_IP_TASK_SLEEP_TIME,
 *         whichever is smaller.
 */
TickType_t xCalculateSleepTime( void )
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
    TickType_t uxMaximumSleepTime;

    /* Start with the maximum sleep time, then check this against the remaining
     * time in any other timers that are active. */
    uxMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 8008fa6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8008faa:	607b      	str	r3, [r7, #4]

    if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 8008fac:	4b28      	ldr	r3, [pc, #160]	@ (8009050 <xCalculateSleepTime+0xb0>)
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	f003 0301 	and.w	r3, r3, #1
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d007      	beq.n	8008fca <xCalculateSleepTime+0x2a>
    {
        if( xARPTimer.ulRemainingTime < uxMaximumSleepTime )
 8008fba:	4b25      	ldr	r3, [pc, #148]	@ (8009050 <xCalculateSleepTime+0xb0>)
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d902      	bls.n	8008fca <xCalculateSleepTime+0x2a>
        {
            uxMaximumSleepTime = xARPTimer.ulRemainingTime;
 8008fc4:	4b22      	ldr	r3, [pc, #136]	@ (8009050 <xCalculateSleepTime+0xb0>)
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	607b      	str	r3, [r7, #4]
        }
    }

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        const NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 8008fca:	4b22      	ldr	r3, [pc, #136]	@ (8009054 <xCalculateSleepTime+0xb4>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	603b      	str	r3, [r7, #0]

        while( pxEndPoint != NULL )
 8008fd0:	e015      	b.n	8008ffe <xCalculateSleepTime+0x5e>
        {
            if( pxEndPoint->xDHCP_RATimer.bActive != pdFALSE_UNSIGNED )
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 8008fd8:	f003 0301 	and.w	r3, r3, #1
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d009      	beq.n	8008ff6 <xCalculateSleepTime+0x56>
            {
                if( pxEndPoint->xDHCP_RATimer.ulRemainingTime < uxMaximumSleepTime )
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d903      	bls.n	8008ff6 <xCalculateSleepTime+0x56>
                {
                    uxMaximumSleepTime = pxEndPoint->xDHCP_RATimer.ulRemainingTime;
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8008ff4:	607b      	str	r3, [r7, #4]
                }
            }

            pxEndPoint = pxEndPoint->pxNext;
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8008ffc:	603b      	str	r3, [r7, #0]
        while( pxEndPoint != NULL )
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d1e6      	bne.n	8008fd2 <xCalculateSleepTime+0x32>
    }
    #endif /* ipconfigUSE_DHCP */

    #if ( ipconfigUSE_TCP == 1 )
    {
        if( xTCPTimer.bActive != pdFALSE_UNSIGNED )
 8009004:	4b14      	ldr	r3, [pc, #80]	@ (8009058 <xCalculateSleepTime+0xb8>)
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	f003 0301 	and.w	r3, r3, #1
 800900c:	b2db      	uxtb	r3, r3
 800900e:	2b00      	cmp	r3, #0
 8009010:	d007      	beq.n	8009022 <xCalculateSleepTime+0x82>
        {
            if( xTCPTimer.ulRemainingTime < uxMaximumSleepTime )
 8009012:	4b11      	ldr	r3, [pc, #68]	@ (8009058 <xCalculateSleepTime+0xb8>)
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	429a      	cmp	r2, r3
 800901a:	d902      	bls.n	8009022 <xCalculateSleepTime+0x82>
            {
                uxMaximumSleepTime = xTCPTimer.ulRemainingTime;
 800901c:	4b0e      	ldr	r3, [pc, #56]	@ (8009058 <xCalculateSleepTime+0xb8>)
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	607b      	str	r3, [r7, #4]
    }
    #endif

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        if( xDNSTimer.bActive != pdFALSE_UNSIGNED )
 8009022:	4b0e      	ldr	r3, [pc, #56]	@ (800905c <xCalculateSleepTime+0xbc>)
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	f003 0301 	and.w	r3, r3, #1
 800902a:	b2db      	uxtb	r3, r3
 800902c:	2b00      	cmp	r3, #0
 800902e:	d007      	beq.n	8009040 <xCalculateSleepTime+0xa0>
        {
            if( xDNSTimer.ulRemainingTime < uxMaximumSleepTime )
 8009030:	4b0a      	ldr	r3, [pc, #40]	@ (800905c <xCalculateSleepTime+0xbc>)
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	429a      	cmp	r2, r3
 8009038:	d902      	bls.n	8009040 <xCalculateSleepTime+0xa0>
            {
                uxMaximumSleepTime = xDNSTimer.ulRemainingTime;
 800903a:	4b08      	ldr	r3, [pc, #32]	@ (800905c <xCalculateSleepTime+0xbc>)
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif

    return uxMaximumSleepTime;
 8009040:	687b      	ldr	r3, [r7, #4]
}
 8009042:	4618      	mov	r0, r3
 8009044:	370c      	adds	r7, #12
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	20000e74 	.word	0x20000e74
 8009054:	200011d0 	.word	0x200011d0
 8009058:	20000e88 	.word	0x20000e88
 800905c:	20000e9c 	.word	0x20000e9c

08009060 <vCheckNetworkTimers>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void vCheckNetworkTimers( void )
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b086      	sub	sp, #24
 8009064:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    /* Is it time for ARP processing? */
    if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 8009066:	484f      	ldr	r0, [pc, #316]	@ (80091a4 <vCheckNetworkTimers+0x144>)
 8009068:	f000 f932 	bl	80092d0 <prvIPTimerCheck>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d002      	beq.n	8009078 <vCheckNetworkTimers+0x18>
    {
        ( void ) xSendEventToIPTask( eARPTimerEvent );
 8009072:	2003      	movs	r0, #3
 8009074:	f7ff fb96 	bl	80087a4 <xSendEventToIPTask>
    }

    /* Is the ARP resolution timer expired? */
    if( prvIPTimerCheck( &xARPResolutionTimer ) != pdFALSE )
 8009078:	484b      	ldr	r0, [pc, #300]	@ (80091a8 <vCheckNetworkTimers+0x148>)
 800907a:	f000 f929 	bl	80092d0 <prvIPTimerCheck>
 800907e:	4603      	mov	r3, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d00e      	beq.n	80090a2 <vCheckNetworkTimers+0x42>
    {
        if( pxARPWaitingNetworkBuffer != NULL )
 8009084:	4b49      	ldr	r3, [pc, #292]	@ (80091ac <vCheckNetworkTimers+0x14c>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d00a      	beq.n	80090a2 <vCheckNetworkTimers+0x42>
        {
            /* Disable the ARP resolution timer. */
            vIPSetARPResolutionTimerEnableState( pdFALSE );
 800908c:	2000      	movs	r0, #0
 800908e:	f000 f995 	bl	80093bc <vIPSetARPResolutionTimerEnableState>

            /* We have waited long enough for the ARP response. Now, free the network
             * buffer. */
            vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 8009092:	4b46      	ldr	r3, [pc, #280]	@ (80091ac <vCheckNetworkTimers+0x14c>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4618      	mov	r0, r3
 8009098:	f00d f95e 	bl	8016358 <vReleaseNetworkBufferAndDescriptor>

            /* Clear the pointer. */
            pxARPWaitingNetworkBuffer = NULL;
 800909c:	4b43      	ldr	r3, [pc, #268]	@ (80091ac <vCheckNetworkTimers+0x14c>)
 800909e:	2200      	movs	r2, #0
 80090a0:	601a      	str	r2, [r3, #0]
    }

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        /* Is it time for DHCP processing? */
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 80090a2:	4b43      	ldr	r3, [pc, #268]	@ (80091b0 <vCheckNetworkTimers+0x150>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	613b      	str	r3, [r7, #16]

        while( pxEndPoint != NULL )
 80090a8:	e01f      	b.n	80090ea <vCheckNetworkTimers+0x8a>
        {
            if( prvIPTimerCheck( &( pxEndPoint->xDHCP_RATimer ) ) != pdFALSE )
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	33f8      	adds	r3, #248	@ 0xf8
 80090ae:	4618      	mov	r0, r3
 80090b0:	f000 f90e 	bl	80092d0 <prvIPTimerCheck>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d013      	beq.n	80090e2 <vCheckNetworkTimers+0x82>
                        ( void ) xSendDHCPEvent( pxEndPoint );
                    }
                #endif /* ( ipconfigUSE_DHCP == 1 ) */

                #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
                    if( END_POINT_USES_RA( pxEndPoint ) )
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80090c0:	f003 0304 	and.w	r3, r3, #4
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00b      	beq.n	80090e2 <vCheckNetworkTimers+0x82>
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80090d0:	f003 0302 	and.w	r3, r3, #2
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d003      	beq.n	80090e2 <vCheckNetworkTimers+0x82>
                    {
                        vRAProcess( pdFALSE, pxEndPoint );
 80090da:	6939      	ldr	r1, [r7, #16]
 80090dc:	2000      	movs	r0, #0
 80090de:	f003 f8f7 	bl	800c2d0 <vRAProcess>
                    }
                #endif /* ( ipconfigUSE_RA != 0 ) */
            }

            pxEndPoint = pxEndPoint->pxNext;
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80090e8:	613b      	str	r3, [r7, #16]
        while( pxEndPoint != NULL )
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d1dc      	bne.n	80090aa <vCheckNetworkTimers+0x4a>
    #endif /* ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA != 0 ) */

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        /* Is it time for DNS processing? */
        if( prvIPTimerCheck( &xDNSTimer ) != pdFALSE )
 80090f0:	4830      	ldr	r0, [pc, #192]	@ (80091b4 <vCheckNetworkTimers+0x154>)
 80090f2:	f000 f8ed 	bl	80092d0 <prvIPTimerCheck>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d002      	beq.n	8009102 <vCheckNetworkTimers+0xa2>
        {
            vDNSCheckCallBack( NULL );
 80090fc:	2000      	movs	r0, #0
 80090fe:	f7fd fff9 	bl	80070f4 <vDNSCheckCallBack>
        TickType_t xNextTime;
        BaseType_t xCheckTCPSockets;

        /* If the IP task has messages waiting to be processed then
         * it will not sleep in any case. */
        if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0U )
 8009102:	4b2d      	ldr	r3, [pc, #180]	@ (80091b8 <vCheckNetworkTimers+0x158>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4618      	mov	r0, r3
 8009108:	f7f9 fe44 	bl	8002d94 <uxQueueMessagesWaiting>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d102      	bne.n	8009118 <vCheckNetworkTimers+0xb8>
        {
            xWillSleep = pdTRUE;
 8009112:	2301      	movs	r3, #1
 8009114:	60fb      	str	r3, [r7, #12]
 8009116:	e001      	b.n	800911c <vCheckNetworkTimers+0xbc>
        }
        else
        {
            xWillSleep = pdFALSE;
 8009118:	2300      	movs	r3, #0
 800911a:	60fb      	str	r3, [r7, #12]
        }

        /* Sockets need to be checked if the TCP timer has expired. */
        xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 800911c:	4827      	ldr	r0, [pc, #156]	@ (80091bc <vCheckNetworkTimers+0x15c>)
 800911e:	f000 f8d7 	bl	80092d0 <prvIPTimerCheck>
 8009122:	60b8      	str	r0, [r7, #8]

        /* Sockets will also be checked if there are TCP messages but the
        * message queue is empty (indicated by xWillSleep being true). */
        if( xWillSleep != pdFALSE )
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d001      	beq.n	800912e <vCheckNetworkTimers+0xce>
        {
            xCheckTCPSockets = pdTRUE;
 800912a:	2301      	movs	r3, #1
 800912c:	60bb      	str	r3, [r7, #8]
        }

        if( xCheckTCPSockets != pdFALSE )
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d007      	beq.n	8009144 <vCheckNetworkTimers+0xe4>
        {
            /* Attend to the sockets, returning the period after which the
             * check must be repeated. */
            xNextTime = xTCPTimerCheck( xWillSleep );
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f005 ff3f 	bl	800efb8 <xTCPTimerCheck>
 800913a:	6038      	str	r0, [r7, #0]
            prvIPTimerStart( &xTCPTimer, xNextTime );
 800913c:	6839      	ldr	r1, [r7, #0]
 800913e:	481f      	ldr	r0, [pc, #124]	@ (80091bc <vCheckNetworkTimers+0x15c>)
 8009140:	f000 f844 	bl	80091cc <prvIPTimerStart>
        }
    }

    /* See if any socket was planned to be closed. */
    vSocketCloseNextTime( NULL );
 8009144:	2000      	movs	r0, #0
 8009146:	f006 fe6f 	bl	800fe28 <vSocketCloseNextTime>

    /* See if any reusable socket needs to go back to 'eTCP_LISTEN' state. */
    vSocketListenNextTime( NULL );
 800914a:	2000      	movs	r0, #0
 800914c:	f006 fe88 	bl	800fe60 <vSocketListenNextTime>
    #endif /* ipconfigUSE_TCP == 1 */

    /* Is it time to trigger the repeated NetworkDown events? */
    if( xAllNetworksUp == pdFALSE )
 8009150:	4b1b      	ldr	r3, [pc, #108]	@ (80091c0 <vCheckNetworkTimers+0x160>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d120      	bne.n	800919a <vCheckNetworkTimers+0x13a>
    {
        if( prvIPTimerCheck( &( xNetworkTimer ) ) != pdFALSE )
 8009158:	481a      	ldr	r0, [pc, #104]	@ (80091c4 <vCheckNetworkTimers+0x164>)
 800915a:	f000 f8b9 	bl	80092d0 <prvIPTimerCheck>
 800915e:	4603      	mov	r3, r0
 8009160:	2b00      	cmp	r3, #0
 8009162:	d01a      	beq.n	800919a <vCheckNetworkTimers+0x13a>
        {
            BaseType_t xUp = pdTRUE;
 8009164:	2301      	movs	r3, #1
 8009166:	607b      	str	r3, [r7, #4]

            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 8009168:	4b17      	ldr	r3, [pc, #92]	@ (80091c8 <vCheckNetworkTimers+0x168>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	617b      	str	r3, [r7, #20]
 800916e:	e00e      	b.n	800918e <vCheckNetworkTimers+0x12e>
            {
                if( pxInterface->bits.bInterfaceUp == pdFALSE_UNSIGNED )
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	7f1b      	ldrb	r3, [r3, #28]
 8009174:	f003 0301 	and.w	r3, r3, #1
 8009178:	b2db      	uxtb	r3, r3
 800917a:	2b00      	cmp	r3, #0
 800917c:	d104      	bne.n	8009188 <vCheckNetworkTimers+0x128>
                {
                    xUp = pdFALSE;
 800917e:	2300      	movs	r3, #0
 8009180:	607b      	str	r3, [r7, #4]
                    FreeRTOS_NetworkDown( pxInterface );
 8009182:	6978      	ldr	r0, [r7, #20]
 8009184:	f7ff fa30 	bl	80085e8 <FreeRTOS_NetworkDown>
            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800918c:	617b      	str	r3, [r7, #20]
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d1ed      	bne.n	8009170 <vCheckNetworkTimers+0x110>
                }
            }

            vSetAllNetworksUp( xUp );
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 f971 	bl	800947c <vSetAllNetworksUp>
        }
    }
}
 800919a:	bf00      	nop
 800919c:	3718      	adds	r7, #24
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	20000e74 	.word	0x20000e74
 80091a8:	20000e60 	.word	0x20000e60
 80091ac:	20000e44 	.word	0x20000e44
 80091b0:	200011d0 	.word	0x200011d0
 80091b4:	20000e9c 	.word	0x20000e9c
 80091b8:	20000e48 	.word	0x20000e48
 80091bc:	20000e88 	.word	0x20000e88
 80091c0:	20000e5c 	.word	0x20000e5c
 80091c4:	20000eb0 	.word	0x20000eb0
 80091c8:	200011d4 	.word	0x200011d4

080091cc <prvIPTimerStart>:
 *                     as expired.
 * @param[in] xTime Time to be loaded into the IP timer.
 */
static void prvIPTimerStart( IPTimer_t * pxTimer,
                             TickType_t xTime )
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
    vTaskSetTimeOutState( &pxTimer->xTimeOut );
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	3304      	adds	r3, #4
 80091da:	4618      	mov	r0, r3
 80091dc:	f7fa fec0 	bl	8003f60 <vTaskSetTimeOutState>
    pxTimer->ulRemainingTime = xTime;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	683a      	ldr	r2, [r7, #0]
 80091e4:	60da      	str	r2, [r3, #12]

    if( xTime == ( TickType_t ) 0 )
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d105      	bne.n	80091f8 <prvIPTimerStart+0x2c>
    {
        pxTimer->bExpired = pdTRUE_UNSIGNED;
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	7813      	ldrb	r3, [r2, #0]
 80091f0:	f043 0302 	orr.w	r3, r3, #2
 80091f4:	7013      	strb	r3, [r2, #0]
 80091f6:	e004      	b.n	8009202 <prvIPTimerStart+0x36>
    }
    else
    {
        pxTimer->bExpired = pdFALSE_UNSIGNED;
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	7813      	ldrb	r3, [r2, #0]
 80091fc:	f36f 0341 	bfc	r3, #1, #1
 8009200:	7013      	strb	r3, [r2, #0]
    }

    pxTimer->bActive = pdTRUE_UNSIGNED;
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	7813      	ldrb	r3, [r2, #0]
 8009206:	f043 0301 	orr.w	r3, r3, #1
 800920a:	7013      	strb	r3, [r2, #0]
}
 800920c:	bf00      	nop
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <vIPTimerStartARPResolution>:
 * @brief Start an ARP Resolution timer.
 *
 * @param[in] xTime Time to be loaded into the ARP Resolution timer.
 */
void vIPTimerStartARPResolution( TickType_t xTime )
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
    prvIPTimerStart( &( xARPResolutionTimer ), xTime );
 800921c:	6879      	ldr	r1, [r7, #4]
 800921e:	4803      	ldr	r0, [pc, #12]	@ (800922c <vIPTimerStartARPResolution+0x18>)
 8009220:	f7ff ffd4 	bl	80091cc <prvIPTimerStart>
}
 8009224:	bf00      	nop
 8009226:	3708      	adds	r7, #8
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}
 800922c:	20000e60 	.word	0x20000e60

08009230 <prvIPTimerReload>:
 * @param[in] pxTimer Pointer to the IP timer.
 * @param[in] xTime Time to be reloaded into the IP timer.
 */
static void prvIPTimerReload( IPTimer_t * pxTimer,
                              TickType_t xTime )
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
    pxTimer->ulReloadTime = xTime;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	683a      	ldr	r2, [r7, #0]
 800923e:	611a      	str	r2, [r3, #16]
    prvIPTimerStart( pxTimer, xTime );
 8009240:	6839      	ldr	r1, [r7, #0]
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7ff ffc2 	bl	80091cc <prvIPTimerStart>
}
 8009248:	bf00      	nop
 800924a:	3708      	adds	r7, #8
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <vTCPTimerReload>:
 * @brief Sets the reload time of the TCP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the TCP timer.
 */
    void vTCPTimerReload( TickType_t xTime )
    {
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
        prvIPTimerReload( &xTCPTimer, xTime );
 8009258:	6879      	ldr	r1, [r7, #4]
 800925a:	4803      	ldr	r0, [pc, #12]	@ (8009268 <vTCPTimerReload+0x18>)
 800925c:	f7ff ffe8 	bl	8009230 <prvIPTimerReload>
    }
 8009260:	bf00      	nop
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	20000e88 	.word	0x20000e88

0800926c <vARPTimerReload>:
 * @brief Sets the reload time of the ARP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the ARP timer.
 */
void vARPTimerReload( TickType_t xTime )
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
    prvIPTimerReload( &xARPTimer, xTime );
 8009274:	6879      	ldr	r1, [r7, #4]
 8009276:	4803      	ldr	r0, [pc, #12]	@ (8009284 <vARPTimerReload+0x18>)
 8009278:	f7ff ffda 	bl	8009230 <prvIPTimerReload>
}
 800927c:	bf00      	nop
 800927e:	3708      	adds	r7, #8
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	20000e74 	.word	0x20000e74

08009288 <vDHCP_RATimerReload>:
 * @param[in] uxClockTicks The number of clock-ticks after which the timer should expire.
 */

    void vDHCP_RATimerReload( NetworkEndPoint_t * pxEndPoint,
                              TickType_t uxClockTicks )
    {
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
        FreeRTOS_printf( ( "vDHCP_RATimerReload: %lu\n", uxClockTicks ) );
 8009292:	6839      	ldr	r1, [r7, #0]
 8009294:	4806      	ldr	r0, [pc, #24]	@ (80092b0 <vDHCP_RATimerReload+0x28>)
 8009296:	f017 f949 	bl	802052c <lUDPLoggingPrintf>
        prvIPTimerReload( &( pxEndPoint->xDHCP_RATimer ), uxClockTicks );
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	33f8      	adds	r3, #248	@ 0xf8
 800929e:	6839      	ldr	r1, [r7, #0]
 80092a0:	4618      	mov	r0, r3
 80092a2:	f7ff ffc5 	bl	8009230 <prvIPTimerReload>
    }
 80092a6:	bf00      	nop
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	08023044 	.word	0x08023044

080092b4 <vNetworkTimerReload>:
 * @brief Reload the Network timer.
 *
 * @param[in] xTime Time to be reloaded into the Network timer.
 */
void vNetworkTimerReload( TickType_t xTime )
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
    prvIPTimerReload( &xNetworkTimer, xTime );
 80092bc:	6879      	ldr	r1, [r7, #4]
 80092be:	4803      	ldr	r0, [pc, #12]	@ (80092cc <vNetworkTimerReload+0x18>)
 80092c0:	f7ff ffb6 	bl	8009230 <prvIPTimerReload>
}
 80092c4:	bf00      	nop
 80092c6:	3708      	adds	r7, #8
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	20000eb0 	.word	0x20000eb0

080092d0 <prvIPTimerCheck>:
 * @param[in] pxTimer Pointer to the IP timer.
 *
 * @return If the timer is expired then pdTRUE is returned. Else pdFALSE.
 */
static BaseType_t prvIPTimerCheck( IPTimer_t * pxTimer )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( pxTimer->bActive == pdFALSE_UNSIGNED )
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	f003 0301 	and.w	r3, r3, #1
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d102      	bne.n	80092ec <prvIPTimerCheck+0x1c>
    {
        /* The timer is not enabled. */
        xReturn = pdFALSE;
 80092e6:	2300      	movs	r3, #0
 80092e8:	60fb      	str	r3, [r7, #12]
 80092ea:	e028      	b.n	800933e <prvIPTimerCheck+0x6e>
    }
    else
    {
        /* The timer might have set the bExpired flag already, if not, check the
         * value of xTimeOut against ulRemainingTime. */
        if( pxTimer->bExpired == pdFALSE_UNSIGNED )
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	f003 0302 	and.w	r3, r3, #2
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d10f      	bne.n	800931a <prvIPTimerCheck+0x4a>
        {
            if( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE )
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	1d1a      	adds	r2, r3, #4
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	330c      	adds	r3, #12
 8009302:	4619      	mov	r1, r3
 8009304:	4610      	mov	r0, r2
 8009306:	f7fa fe63 	bl	8003fd0 <xTaskCheckForTimeOut>
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d004      	beq.n	800931a <prvIPTimerCheck+0x4a>
            {
                pxTimer->bExpired = pdTRUE_UNSIGNED;
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	7813      	ldrb	r3, [r2, #0]
 8009314:	f043 0302 	orr.w	r3, r3, #2
 8009318:	7013      	strb	r3, [r2, #0]
            }
        }

        if( pxTimer->bExpired != pdFALSE_UNSIGNED )
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	f003 0302 	and.w	r3, r3, #2
 8009322:	b2db      	uxtb	r3, r3
 8009324:	2b00      	cmp	r3, #0
 8009326:	d008      	beq.n	800933a <prvIPTimerCheck+0x6a>
        {
            prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	4619      	mov	r1, r3
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f7ff ff4c 	bl	80091cc <prvIPTimerStart>
            xReturn = pdTRUE;
 8009334:	2301      	movs	r3, #1
 8009336:	60fb      	str	r3, [r7, #12]
 8009338:	e001      	b.n	800933e <prvIPTimerCheck+0x6e>
        }
        else
        {
            xReturn = pdFALSE;
 800933a:	2300      	movs	r3, #0
 800933c:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 800933e:	68fb      	ldr	r3, [r7, #12]
}
 8009340:	4618      	mov	r0, r3
 8009342:	3710      	adds	r7, #16
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <vIPSetTCPTimerExpiredState>:
 * @brief Enable/disable the TCP timer.
 *
 * @param[in] xExpiredState pdTRUE - set as expired; pdFALSE - set as non-expired.
 */
    void vIPSetTCPTimerExpiredState( BaseType_t xExpiredState )
    {
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
        xTCPTimer.bActive = pdTRUE_UNSIGNED;
 8009350:	4a0c      	ldr	r2, [pc, #48]	@ (8009384 <vIPSetTCPTimerExpiredState+0x3c>)
 8009352:	7813      	ldrb	r3, [r2, #0]
 8009354:	f043 0301 	orr.w	r3, r3, #1
 8009358:	7013      	strb	r3, [r2, #0]

        if( xExpiredState != pdFALSE )
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d005      	beq.n	800936c <vIPSetTCPTimerExpiredState+0x24>
        {
            xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 8009360:	4a08      	ldr	r2, [pc, #32]	@ (8009384 <vIPSetTCPTimerExpiredState+0x3c>)
 8009362:	7813      	ldrb	r3, [r2, #0]
 8009364:	f043 0302 	orr.w	r3, r3, #2
 8009368:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
        }
    }
 800936a:	e004      	b.n	8009376 <vIPSetTCPTimerExpiredState+0x2e>
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
 800936c:	4a05      	ldr	r2, [pc, #20]	@ (8009384 <vIPSetTCPTimerExpiredState+0x3c>)
 800936e:	7813      	ldrb	r3, [r2, #0]
 8009370:	f36f 0341 	bfc	r3, #1, #1
 8009374:	7013      	strb	r3, [r2, #0]
    }
 8009376:	bf00      	nop
 8009378:	370c      	adds	r7, #12
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr
 8009382:	bf00      	nop
 8009384:	20000e88 	.word	0x20000e88

08009388 <vIPSetARPTimerEnableState>:
 * @brief Enable/disable the ARP timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
void vIPSetARPTimerEnableState( BaseType_t xEnableState )
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
    if( xEnableState != pdFALSE )
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d005      	beq.n	80093a2 <vIPSetARPTimerEnableState+0x1a>
    {
        xARPTimer.bActive = pdTRUE_UNSIGNED;
 8009396:	4a08      	ldr	r2, [pc, #32]	@ (80093b8 <vIPSetARPTimerEnableState+0x30>)
 8009398:	7813      	ldrb	r3, [r2, #0]
 800939a:	f043 0301 	orr.w	r3, r3, #1
 800939e:	7013      	strb	r3, [r2, #0]
    }
    else
    {
        xARPTimer.bActive = pdFALSE_UNSIGNED;
    }
}
 80093a0:	e004      	b.n	80093ac <vIPSetARPTimerEnableState+0x24>
        xARPTimer.bActive = pdFALSE_UNSIGNED;
 80093a2:	4a05      	ldr	r2, [pc, #20]	@ (80093b8 <vIPSetARPTimerEnableState+0x30>)
 80093a4:	7813      	ldrb	r3, [r2, #0]
 80093a6:	f36f 0300 	bfc	r3, #0, #1
 80093aa:	7013      	strb	r3, [r2, #0]
}
 80093ac:	bf00      	nop
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr
 80093b8:	20000e74 	.word	0x20000e74

080093bc <vIPSetARPResolutionTimerEnableState>:
 * @brief Enable or disable the ARP resolution timer.
 *
 * @param[in] xEnableState pdTRUE if the timer must be enabled, pdFALSE otherwise.
 */
void vIPSetARPResolutionTimerEnableState( BaseType_t xEnableState )
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
    if( xEnableState != pdFALSE )
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d005      	beq.n	80093d6 <vIPSetARPResolutionTimerEnableState+0x1a>
    {
        xARPResolutionTimer.bActive = pdTRUE_UNSIGNED;
 80093ca:	4a08      	ldr	r2, [pc, #32]	@ (80093ec <vIPSetARPResolutionTimerEnableState+0x30>)
 80093cc:	7813      	ldrb	r3, [r2, #0]
 80093ce:	f043 0301 	orr.w	r3, r3, #1
 80093d2:	7013      	strb	r3, [r2, #0]
    }
    else
    {
        xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
    }
}
 80093d4:	e004      	b.n	80093e0 <vIPSetARPResolutionTimerEnableState+0x24>
        xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
 80093d6:	4a05      	ldr	r2, [pc, #20]	@ (80093ec <vIPSetARPResolutionTimerEnableState+0x30>)
 80093d8:	7813      	ldrb	r3, [r2, #0]
 80093da:	f36f 0300 	bfc	r3, #0, #1
 80093de:	7013      	strb	r3, [r2, #0]
}
 80093e0:	bf00      	nop
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr
 80093ec:	20000e60 	.word	0x20000e60

080093f0 <vIPSetDHCP_RATimerEnableState>:
 * @param[in] pxEndPoint The end-point that needs to acquire an IP-address.
 * @param[in] xEnableState pdTRUE if the timer must be enabled, pdFALSE otherwise.
 */
    void vIPSetDHCP_RATimerEnableState( NetworkEndPoint_t * pxEndPoint,
                                        BaseType_t xEnableState )
    {
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
        FreeRTOS_printf( ( "vIPSetDHCP_RATimerEnableState: %s\n", ( xEnableState != 0 ) ? "On" : "Off" ) );
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d001      	beq.n	8009404 <vIPSetDHCP_RATimerEnableState+0x14>
 8009400:	4b0e      	ldr	r3, [pc, #56]	@ (800943c <vIPSetDHCP_RATimerEnableState+0x4c>)
 8009402:	e000      	b.n	8009406 <vIPSetDHCP_RATimerEnableState+0x16>
 8009404:	4b0e      	ldr	r3, [pc, #56]	@ (8009440 <vIPSetDHCP_RATimerEnableState+0x50>)
 8009406:	4619      	mov	r1, r3
 8009408:	480e      	ldr	r0, [pc, #56]	@ (8009444 <vIPSetDHCP_RATimerEnableState+0x54>)
 800940a:	f017 f88f 	bl	802052c <lUDPLoggingPrintf>

        /* 'xDHCP_RATimer' is shared between DHCP (IPv4) and RA/SLAAC (IPv6). */
        if( xEnableState != 0 )
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d007      	beq.n	8009424 <vIPSetDHCP_RATimerEnableState+0x34>
        {
            pxEndPoint->xDHCP_RATimer.bActive = pdTRUE_UNSIGNED;
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	f892 30f8 	ldrb.w	r3, [r2, #248]	@ 0xf8
 800941a:	f043 0301 	orr.w	r3, r3, #1
 800941e:	f882 30f8 	strb.w	r3, [r2, #248]	@ 0xf8
        }
        else
        {
            pxEndPoint->xDHCP_RATimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 8009422:	e006      	b.n	8009432 <vIPSetDHCP_RATimerEnableState+0x42>
            pxEndPoint->xDHCP_RATimer.bActive = pdFALSE_UNSIGNED;
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	f892 30f8 	ldrb.w	r3, [r2, #248]	@ 0xf8
 800942a:	f36f 0300 	bfc	r3, #0, #1
 800942e:	f882 30f8 	strb.w	r3, [r2, #248]	@ 0xf8
    }
 8009432:	bf00      	nop
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	08023060 	.word	0x08023060
 8009440:	08023064 	.word	0x08023064
 8009444:	08023068 	.word	0x08023068

08009448 <vIPSetDNSTimerEnableState>:
 * @brief Enable/disable the DNS timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
    void vIPSetDNSTimerEnableState( BaseType_t xEnableState )
    {
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
        if( xEnableState != 0 )
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d005      	beq.n	8009462 <vIPSetDNSTimerEnableState+0x1a>
        {
            xDNSTimer.bActive = pdTRUE_UNSIGNED;
 8009456:	4a08      	ldr	r2, [pc, #32]	@ (8009478 <vIPSetDNSTimerEnableState+0x30>)
 8009458:	7813      	ldrb	r3, [r2, #0]
 800945a:	f043 0301 	orr.w	r3, r3, #1
 800945e:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 8009460:	e004      	b.n	800946c <vIPSetDNSTimerEnableState+0x24>
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
 8009462:	4a05      	ldr	r2, [pc, #20]	@ (8009478 <vIPSetDNSTimerEnableState+0x30>)
 8009464:	7813      	ldrb	r3, [r2, #0]
 8009466:	f36f 0300 	bfc	r3, #0, #1
 800946a:	7013      	strb	r3, [r2, #0]
    }
 800946c:	bf00      	nop
 800946e:	370c      	adds	r7, #12
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr
 8009478:	20000e9c 	.word	0x20000e9c

0800947c <vSetAllNetworksUp>:
/**
 * @brief Mark whether all interfaces are up or at least one interface is down.
 *        If all interfaces are up, the 'xNetworkTimer' will not be checked.
 */
void vSetAllNetworksUp( BaseType_t xIsAllNetworksUp )
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
    xAllNetworksUp = xIsAllNetworksUp;
 8009484:	4a04      	ldr	r2, [pc, #16]	@ (8009498 <vSetAllNetworksUp+0x1c>)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6013      	str	r3, [r2, #0]
}
 800948a:	bf00      	nop
 800948c:	370c      	adds	r7, #12
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	20000e5c 	.word	0x20000e5c

0800949c <pxDuplicateNetworkBufferWithDescriptor>:
 *
 * @return If properly duplicated, then the duplicate network buffer or else, NULL.
 */
NetworkBufferDescriptor_t * pxDuplicateNetworkBufferWithDescriptor( const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                                    size_t uxNewLength )
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxNewBuffer;
    size_t uxLengthToCopy = uxNewLength;
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	60fb      	str	r3, [r7, #12]

    /* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
     * The transmit routine wants to have ownership of the network buffer
     * descriptor, because it will pass the buffer straight to DMA. */
    pxNewBuffer = pxGetNetworkBufferWithDescriptor( uxNewLength, ( TickType_t ) 0 );
 80094aa:	2100      	movs	r1, #0
 80094ac:	6838      	ldr	r0, [r7, #0]
 80094ae:	f00c feeb 	bl	8016288 <pxGetNetworkBufferWithDescriptor>
 80094b2:	60b8      	str	r0, [r7, #8]

    if( pxNewBuffer != NULL )
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d03e      	beq.n	8009538 <pxDuplicateNetworkBufferWithDescriptor+0x9c>
    {
        configASSERT( pxNewBuffer->pucEthernetBuffer != NULL );
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d104      	bne.n	80094cc <pxDuplicateNetworkBufferWithDescriptor+0x30>
 80094c2:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80094c6:	481f      	ldr	r0, [pc, #124]	@ (8009544 <pxDuplicateNetworkBufferWithDescriptor+0xa8>)
 80094c8:	f7f7 fe26 	bl	8001118 <vAssertCalled>

        /* Get the minimum of both values to copy the data. */
        if( uxLengthToCopy > pxNetworkBuffer->xDataLength )
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094d0:	68fa      	ldr	r2, [r7, #12]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d902      	bls.n	80094dc <pxDuplicateNetworkBufferWithDescriptor+0x40>
        {
            uxLengthToCopy = pxNetworkBuffer->xDataLength;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094da:	60fb      	str	r3, [r7, #12]
        }

        /* Set the actual packet size in case a bigger buffer than requested
         * was returned. */
        pxNewBuffer->xDataLength = uxNewLength;
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	683a      	ldr	r2, [r7, #0]
 80094e0:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Copy the original packet information. */
        pxNewBuffer->xIPAddress.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	695a      	ldr	r2, [r3, #20]
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	615a      	str	r2, [r3, #20]
        pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	86da      	strh	r2, [r3, #54]	@ 0x36
        pxNewBuffer->pxInterface = pxNetworkBuffer->pxInterface;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	62da      	str	r2, [r3, #44]	@ 0x2c
        pxNewBuffer->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	631a      	str	r2, [r3, #48]	@ 0x30
        ( void ) memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, uxLengthToCopy );
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	4619      	mov	r1, r3
 8009516:	f017 fa25 	bl	8020964 <memcpy>

        #if ( ipconfigUSE_IPv6 != 0 )
            if( uxIPHeaderSizePacket( pxNewBuffer ) == ipSIZE_OF_IPv6_HEADER )
 800951a:	68b8      	ldr	r0, [r7, #8]
 800951c:	f7ff fd0c 	bl	8008f38 <uxIPHeaderSizePacket>
 8009520:	4603      	mov	r3, r0
 8009522:	2b28      	cmp	r3, #40	@ 0x28
 8009524:	d108      	bne.n	8009538 <pxDuplicateNetworkBufferWithDescriptor+0x9c>
            {
                ( void ) memcpy( pxNewBuffer->xIPAddress.xIP_IPv6.ucBytes, pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	f103 0014 	add.w	r0, r3, #20
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	3314      	adds	r3, #20
 8009530:	2210      	movs	r2, #16
 8009532:	4619      	mov	r1, r3
 8009534:	f017 fa16 	bl	8020964 <memcpy>
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
    }

    return pxNewBuffer;
 8009538:	68bb      	ldr	r3, [r7, #8]
}
 800953a:	4618      	mov	r0, r3
 800953c:	3710      	adds	r7, #16
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	0802308c 	.word	0x0802308c

08009548 <prvPacketBuffer_to_NetworkBuffer>:
 *
 * @return The network buffer descriptor if the alignment is correct. Else a NULL is returned.
 */
static NetworkBufferDescriptor_t * prvPacketBuffer_to_NetworkBuffer( const void * pvBuffer,
                                                                     size_t uxOffset )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
    uintptr_t uxBuffer;
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d102      	bne.n	800955e <prvPacketBuffer_to_NetworkBuffer+0x16>
    {
        pxResult = NULL;
 8009558:	2300      	movs	r3, #0
 800955a:	60fb      	str	r3, [r7, #12]
 800955c:	e013      	b.n	8009586 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        /* Obtain the network buffer from the zero copy pointer. */

        /* MISRA Ref 11.6.2 [Pointer arithmetic and hidden pointer] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-116 */
        /* coverity[misra_c_2012_rule_11_6_violation] */
        uxBuffer = void_ptr_to_uintptr( pvBuffer );
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 f816 	bl	8009590 <void_ptr_to_uintptr>
 8009564:	60b8      	str	r0, [r7, #8]

        /* The input here is a pointer to a packet buffer plus some offset.  Subtract
         * this offset, and also the size of the header in the network buffer, usually
         * 8 + 2 bytes. */
        uxBuffer -= ( uxOffset + ipBUFFER_PADDING );
 8009566:	68ba      	ldr	r2, [r7, #8]
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	1ad3      	subs	r3, r2, r3
 800956c:	3b0a      	subs	r3, #10
 800956e:	60bb      	str	r3, [r7, #8]

        /* Here a pointer was placed to the network descriptor.  As a
         * pointer is dereferenced, make sure it is well aligned. */
        if( ( uxBuffer & ( ( ( uintptr_t ) sizeof( uxBuffer ) ) - 1U ) ) == ( uintptr_t ) 0U )
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	f003 0303 	and.w	r3, r3, #3
 8009576:	2b00      	cmp	r3, #0
 8009578:	d103      	bne.n	8009582 <prvPacketBuffer_to_NetworkBuffer+0x3a>
        {
            /* MISRA Ref 11.4.2 [Validation of pointer alignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            pxResult = *( ( NetworkBufferDescriptor_t ** ) uxBuffer );
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	60fb      	str	r3, [r7, #12]
 8009580:	e001      	b.n	8009586 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        }
        else
        {
            pxResult = NULL;
 8009582:	2300      	movs	r3, #0
 8009584:	60fb      	str	r3, [r7, #12]
        }
    }

    return pxResult;
 8009586:	68fb      	ldr	r3, [r7, #12]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <void_ptr_to_uintptr>:
 *        using a union as defined here above.
 * @param[in] pvPointer A void pointer to be converted.
 * @return The value of the void pointer as an unsigned number.
 */
static uintptr_t void_ptr_to_uintptr( const void * pvPointer )
{
 8009590:	b480      	push	{r7}
 8009592:	b085      	sub	sp, #20
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
    /* The type 'uintptr_t' has the same size as a pointer.
     * Therefore, it is safe to use a union to convert it. */
    union uIntPtr intPtr;

    intPtr.pvPtr = pvPointer;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	60fb      	str	r3, [r7, #12]
    return intPtr.uxPtr;
 800959c:	68fb      	ldr	r3, [r7, #12]
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3714      	adds	r7, #20
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr

080095aa <pxPacketBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer Pointer to the packet buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
    NetworkBufferDescriptor_t * pxPacketBuffer_to_NetworkBuffer( const void * pvBuffer )
    {
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b082      	sub	sp, #8
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
        return prvPacketBuffer_to_NetworkBuffer( pvBuffer, 0U );
 80095b2:	2100      	movs	r1, #0
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f7ff ffc7 	bl	8009548 <prvPacketBuffer_to_NetworkBuffer>
 80095ba:	4603      	mov	r3, r0
    }
 80095bc:	4618      	mov	r0, r3
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <pxUDPPayloadBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer Pointer to the UDP payload buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
NetworkBufferDescriptor_t * pxUDPPayloadBuffer_to_NetworkBuffer( const void * pvBuffer )
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b088      	sub	sp, #32
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d102      	bne.n	80095d8 <pxUDPPayloadBuffer_to_NetworkBuffer+0x14>
    {
        pxResult = NULL;
 80095d2:	2300      	movs	r3, #0
 80095d4:	61fb      	str	r3, [r7, #28]
 80095d6:	e033      	b.n	8009640 <pxUDPPayloadBuffer_to_NetworkBuffer+0x7c>
        const uint8_t * pucIPType;
        uint8_t ucIPType;

        /* When IPv6 is supported, find out the type of the packet.
         * It is stored 48 bytes before the payload buffer as 0x40 or 0x60. */
        uxTypeOffset = void_ptr_to_uintptr( pvBuffer );
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f7ff ffd9 	bl	8009590 <void_ptr_to_uintptr>
 80095de:	6178      	str	r0, [r7, #20]
        uxTypeOffset -= ipUDP_PAYLOAD_IP_TYPE_OFFSET;
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	3b30      	subs	r3, #48	@ 0x30
 80095e4:	617b      	str	r3, [r7, #20]
        /* MISRA Ref 11.4.3 [Casting pointer to int for verification] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
        /* coverity[misra_c_2012_rule_11_4_violation] */
        pucIPType = ( const uint8_t * ) uxTypeOffset;
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	613b      	str	r3, [r7, #16]

        /* For an IPv4 packet, pucIPType points to 6 bytes before the pucEthernetBuffer,
         * for a IPv6 packet, pucIPType will point to the first byte of the IP-header: 'ucVersionTrafficClass'. */
        ucIPType = pucIPType[ 0 ] & 0xf0U;
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	f023 030f 	bic.w	r3, r3, #15
 80095f2:	73fb      	strb	r3, [r7, #15]

        /* To help the translation from a UDP payload pointer to a networkBuffer,
         * a byte was stored at a certain negative offset (-48 bytes).
         * It must have a value of either 0x4x or 0x6x. */
        configASSERT( ( ucIPType == ipTYPE_IPv4 ) || ( ucIPType == ipTYPE_IPv6 ) );
 80095f4:	7bfb      	ldrb	r3, [r7, #15]
 80095f6:	2b40      	cmp	r3, #64	@ 0x40
 80095f8:	d002      	beq.n	8009600 <pxUDPPayloadBuffer_to_NetworkBuffer+0x3c>
 80095fa:	7bfb      	ldrb	r3, [r7, #15]
 80095fc:	2b60      	cmp	r3, #96	@ 0x60
 80095fe:	d101      	bne.n	8009604 <pxUDPPayloadBuffer_to_NetworkBuffer+0x40>
 8009600:	2301      	movs	r3, #1
 8009602:	e000      	b.n	8009606 <pxUDPPayloadBuffer_to_NetworkBuffer+0x42>
 8009604:	2300      	movs	r3, #0
 8009606:	2b00      	cmp	r3, #0
 8009608:	d104      	bne.n	8009614 <pxUDPPayloadBuffer_to_NetworkBuffer+0x50>
 800960a:	f240 21f1 	movw	r1, #753	@ 0x2f1
 800960e:	480f      	ldr	r0, [pc, #60]	@ (800964c <pxUDPPayloadBuffer_to_NetworkBuffer+0x88>)
 8009610:	f7f7 fd82 	bl	8001118 <vAssertCalled>

        switch( ucIPType ) /* LCOV_EXCL_BR_LINE */
 8009614:	7bfb      	ldrb	r3, [r7, #15]
 8009616:	2b40      	cmp	r3, #64	@ 0x40
 8009618:	d004      	beq.n	8009624 <pxUDPPayloadBuffer_to_NetworkBuffer+0x60>
 800961a:	2b60      	cmp	r3, #96	@ 0x60
 800961c:	d105      	bne.n	800962a <pxUDPPayloadBuffer_to_NetworkBuffer+0x66>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                case ipTYPE_IPv6:
                    uxOffset = sizeof( UDPPacket_IPv6_t );
 800961e:	233e      	movs	r3, #62	@ 0x3e
 8009620:	61bb      	str	r3, [r7, #24]
                    break;
 8009622:	e008      	b.n	8009636 <pxUDPPayloadBuffer_to_NetworkBuffer+0x72>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            #if ( ipconfigUSE_IPv4 != 0 )
                case ipTYPE_IPv4:
                    uxOffset = sizeof( UDPPacket_t );
 8009624:	232a      	movs	r3, #42	@ 0x2a
 8009626:	61bb      	str	r3, [r7, #24]
                    break;
 8009628:	e005      	b.n	8009636 <pxUDPPayloadBuffer_to_NetworkBuffer+0x72>
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            default:
                FreeRTOS_debug_printf( ( "pxUDPPayloadBuffer_to_NetworkBuffer: Undefined ucIPType \n" ) );
 800962a:	4809      	ldr	r0, [pc, #36]	@ (8009650 <pxUDPPayloadBuffer_to_NetworkBuffer+0x8c>)
 800962c:	f016 ff7e 	bl	802052c <lUDPLoggingPrintf>
                uxOffset = sizeof( UDPPacket_t );
 8009630:	232a      	movs	r3, #42	@ 0x2a
 8009632:	61bb      	str	r3, [r7, #24]
                break;
 8009634:	bf00      	nop
        }

        pxResult = prvPacketBuffer_to_NetworkBuffer( pvBuffer, uxOffset );
 8009636:	69b9      	ldr	r1, [r7, #24]
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f7ff ff85 	bl	8009548 <prvPacketBuffer_to_NetworkBuffer>
 800963e:	61f8      	str	r0, [r7, #28]
    }

    return pxResult;
 8009640:	69fb      	ldr	r3, [r7, #28]
}
 8009642:	4618      	mov	r0, r3
 8009644:	3720      	adds	r7, #32
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	0802308c 	.word	0x0802308c
 8009650:	08023164 	.word	0x08023164

08009654 <xIsCallingFromIPTask>:
 *
 * @note Very important: the IP-task is not allowed to call its own API's,
 *        because it would easily get into a dead-lock.
 */
BaseType_t xIsCallingFromIPTask( void )
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    const struct tskTaskControlBlock * const xCurrentHandle = xTaskGetCurrentTaskHandle();
 800965a:	f7fa fdd3 	bl	8004204 <xTaskGetCurrentTaskHandle>
 800965e:	60b8      	str	r0, [r7, #8]
    const struct tskTaskControlBlock * const xCurrentIPTaskHandle = FreeRTOS_GetIPTaskHandle();
 8009660:	f7fe ff6e 	bl	8008540 <FreeRTOS_GetIPTaskHandle>
 8009664:	6078      	str	r0, [r7, #4]

    if( xCurrentHandle == xCurrentIPTaskHandle )
 8009666:	68ba      	ldr	r2, [r7, #8]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	429a      	cmp	r2, r3
 800966c:	d102      	bne.n	8009674 <xIsCallingFromIPTask+0x20>
    {
        xReturn = pdTRUE;
 800966e:	2301      	movs	r3, #1
 8009670:	60fb      	str	r3, [r7, #12]
 8009672:	e001      	b.n	8009678 <xIsCallingFromIPTask+0x24>
    }
    else
    {
        xReturn = pdFALSE;
 8009674:	2300      	movs	r3, #0
 8009676:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8009678:	68fb      	ldr	r3, [r7, #12]
}
 800967a:	4618      	mov	r0, r3
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
	...

08009684 <prvProcessNetworkDownEvent>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void prvProcessNetworkDownEvent( struct xNetworkInterface * pxInterface )
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
    NetworkEndPoint_t * pxEndPoint;

    configASSERT( pxInterface != NULL );
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d104      	bne.n	800969c <prvProcessNetworkDownEvent+0x18>
 8009692:	f240 3137 	movw	r1, #823	@ 0x337
 8009696:	4857      	ldr	r0, [pc, #348]	@ (80097f4 <prvProcessNetworkDownEvent+0x170>)
 8009698:	f7f7 fd3e 	bl	8001118 <vAssertCalled>
    configASSERT( pxInterface->pfInitialise != NULL );
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d104      	bne.n	80096ae <prvProcessNetworkDownEvent+0x2a>
 80096a4:	f44f 714e 	mov.w	r1, #824	@ 0x338
 80096a8:	4852      	ldr	r0, [pc, #328]	@ (80097f4 <prvProcessNetworkDownEvent+0x170>)
 80096aa:	f7f7 fd35 	bl	8001118 <vAssertCalled>
    /* Stop the ARP timer while there is no network. */
    vIPSetARPTimerEnableState( pdFALSE );
 80096ae:	2000      	movs	r0, #0
 80096b0:	f7ff fe6a 	bl	8009388 <vIPSetARPTimerEnableState>

    /* The first network down event is generated by the IP stack itself to
     * initialise the network hardware, so do not call the network down event
     * the first time through. */

    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f002 ffd7 	bl	800c668 <FreeRTOS_FirstEndPoint>
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	e041      	b.n	8009742 <prvProcessNetworkDownEvent+0xbe>
         pxEndPoint != NULL;
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
    {
        /* The bit 'bEndPointUp' stays low until vIPNetworkUpCalls() is called. */
        pxEndPoint->bits.bEndPointUp = pdFALSE_UNSIGNED;
 80096be:	68fa      	ldr	r2, [r7, #12]
 80096c0:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 80096c4:	f36f 1304 	bfc	r3, #4, #1
 80096c8:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0

        if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80096d2:	f003 0304 	and.w	r3, r3, #4
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d003      	beq.n	80096e4 <prvProcessNetworkDownEvent+0x60>
        {
            /* IPv6 end-points have a solicited-node address that needs extra housekeeping. */
            #if ( ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) )
                vManageSolicitedNodeAddress( pxEndPoint, pdFALSE );
 80096dc:	2100      	movs	r1, #0
 80096de:	68f8      	ldr	r0, [r7, #12]
 80096e0:	f001 f9c8 	bl	800aa74 <vManageSolicitedNodeAddress>
            #endif
        }

        #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
        {
            if( pxEndPoint->bits.bCallDownHook != pdFALSE_UNSIGNED )
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80096ea:	f003 0308 	and.w	r3, r3, #8
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d003      	beq.n	80096fc <prvProcessNetworkDownEvent+0x78>
            {
                #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
                {
                    vApplicationIPNetworkEventHook( eNetworkDown );
 80096f4:	2001      	movs	r0, #1
 80096f6:	f7f7 fd43 	bl	8001180 <vApplicationIPNetworkEventHook>
 80096fa:	e006      	b.n	800970a <prvProcessNetworkDownEvent+0x86>
                #endif
            }
            else
            {
                /* The next time NetworkEventHook will be called for this end-point. */
                pxEndPoint->bits.bCallDownHook = pdTRUE_UNSIGNED;
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 8009702:	f043 0308 	orr.w	r3, r3, #8
 8009706:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0
        #endif /* ipconfigUSE_NETWORK_EVENT_HOOK */

        /* Per the ARP Cache Validation section of https://tools.ietf.org/html/rfc1122
         * treat network down as a "delivery problem" and flush the ARP cache for this
         *  interface. */
        FreeRTOS_ClearARP( pxEndPoint );
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	f7fd f8c0 	bl	8006890 <FreeRTOS_ClearARP>
                }
            }
        #endif /* ( ipconfigUSE_DHCP == 1 ) */

        #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
            if( END_POINT_USES_RA( pxEndPoint ) )
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009716:	f003 0304 	and.w	r3, r3, #4
 800971a:	b2db      	uxtb	r3, r3
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00b      	beq.n	8009738 <prvProcessNetworkDownEvent+0xb4>
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009726:	f003 0302 	and.w	r3, r3, #2
 800972a:	b2db      	uxtb	r3, r3
 800972c:	2b00      	cmp	r3, #0
 800972e:	d003      	beq.n	8009738 <prvProcessNetworkDownEvent+0xb4>
            {
                /* Stop the RA/SLAAC process for this end-point. */
                vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
 8009730:	2100      	movs	r1, #0
 8009732:	68f8      	ldr	r0, [r7, #12]
 8009734:	f7ff fe5c 	bl	80093f0 <vIPSetDHCP_RATimerEnableState>
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 8009738:	68f9      	ldr	r1, [r7, #12]
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f002 ffb6 	bl	800c6ac <FreeRTOS_NextEndPoint>
 8009740:	60f8      	str	r0, [r7, #12]
         pxEndPoint != NULL;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d1ba      	bne.n	80096be <prvProcessNetworkDownEvent+0x3a>

    /* The network has been disconnected (or is being initialised for the first
     * time).  Perform whatever hardware processing is necessary to bring it up
     * again, or wait for it to be available again.  This is hardware dependent. */

    if( pxInterface->pfInitialise( pxInterface ) == pdPASS )
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	4798      	blx	r3
 8009750:	4603      	mov	r3, r0
 8009752:	2b01      	cmp	r3, #1
 8009754:	d147      	bne.n	80097e6 <prvProcessNetworkDownEvent+0x162>
    {
        pxInterface->bits.bInterfaceUp = pdTRUE_UNSIGNED;
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	7f13      	ldrb	r3, [r2, #28]
 800975a:	f043 0301 	orr.w	r3, r3, #1
 800975e:	7713      	strb	r3, [r2, #28]
        /* Set remaining time to 0 so it will become active immediately. */

        /* The network is not up until DHCP has completed.
         * Start it now for all associated end-points. */

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f002 ff81 	bl	800c668 <FreeRTOS_FirstEndPoint>
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	e039      	b.n	80097de <prvProcessNetworkDownEvent+0x15a>
                }
                else /* Yes this else ought to be here. */
            #endif /* ( ipconfigUSE_DHCP == 1 ) */

            #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
                if( END_POINT_USES_RA( pxEndPoint ) )
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009770:	f003 0304 	and.w	r3, r3, #4
 8009774:	b2db      	uxtb	r3, r3
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00c      	beq.n	8009794 <prvProcessNetworkDownEvent+0x110>
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009780:	f003 0302 	and.w	r3, r3, #2
 8009784:	b2db      	uxtb	r3, r3
 8009786:	2b00      	cmp	r3, #0
 8009788:	d004      	beq.n	8009794 <prvProcessNetworkDownEvent+0x110>
                {
                    /* Reset the RA/SLAAC process for this end-point. */
                    vRAProcess( pdTRUE, pxEndPoint );
 800978a:	68f9      	ldr	r1, [r7, #12]
 800978c:	2001      	movs	r0, #1
 800978e:	f002 fd9f 	bl	800c2d0 <vRAProcess>
 8009792:	e01f      	b.n	80097d4 <prvProcessNetworkDownEvent+0x150>
                }
                else
            #endif /* ( (ipconfigUSE_RA != 0) && ( ipconfigUSE_IPv6 != 0 )) */

            {
                switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800979a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d002      	beq.n	80097aa <prvProcessNetworkDownEvent+0x126>
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d008      	beq.n	80097ba <prvProcessNetworkDownEvent+0x136>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        break;
 80097a8:	e011      	b.n	80097ce <prvProcessNetworkDownEvent+0x14a>
                            ( void ) memcpy( &( pxEndPoint->ipv4_settings ), &( pxEndPoint->ipv4_defaults ), sizeof( pxEndPoint->ipv4_settings ) );
 80097aa:	68f8      	ldr	r0, [r7, #12]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	331c      	adds	r3, #28
 80097b0:	221c      	movs	r2, #28
 80097b2:	4619      	mov	r1, r3
 80097b4:	f017 f8d6 	bl	8020964 <memcpy>
                            break;
 80097b8:	e009      	b.n	80097ce <prvProcessNetworkDownEvent+0x14a>
                            ( void ) memcpy( &( pxEndPoint->ipv6_settings ), &( pxEndPoint->ipv6_defaults ), sizeof( pxEndPoint->ipv6_settings ) );
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	3390      	adds	r3, #144	@ 0x90
 80097c4:	2258      	movs	r2, #88	@ 0x58
 80097c6:	4619      	mov	r1, r3
 80097c8:	f017 f8cc 	bl	8020964 <memcpy>
                            break;
 80097cc:	bf00      	nop
                }

                /* DHCP or Router Advertisement are not enabled for this end-point.
                 * Perform any necessary 'network up' processing. */
                vIPNetworkUpCalls( pxEndPoint );
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	f7fe fec2 	bl	8008558 <vIPNetworkUpCalls>
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 80097d4:	68f9      	ldr	r1, [r7, #12]
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f002 ff68 	bl	800c6ac <FreeRTOS_NextEndPoint>
 80097dc:	60f8      	str	r0, [r7, #12]
             pxEndPoint != NULL;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d1c2      	bne.n	800976a <prvProcessNetworkDownEvent+0xe6>
        vSetAllNetworksUp( pdFALSE );

        /* Nothing else to do. When the 'xNetworkTimer' expires, all interfaces
         * with bits.bInterfaceUp cleared will get a new 'eNetworkDownEvent' */
    }
}
 80097e4:	e002      	b.n	80097ec <prvProcessNetworkDownEvent+0x168>
        vSetAllNetworksUp( pdFALSE );
 80097e6:	2000      	movs	r0, #0
 80097e8:	f7ff fe48 	bl	800947c <vSetAllNetworksUp>
}
 80097ec:	bf00      	nop
 80097ee:	3710      	adds	r7, #16
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	0802308c 	.word	0x0802308c

080097f8 <vPreCheckConfigs>:
/**
 * @brief Check the values of configuration options and assert on it. Also verify that the IP-task
 *        has not already been initialized.
 */
void vPreCheckConfigs( void )
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
    /* This function should only be called once. */
    configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 80097fe:	f7ff fb83 	bl	8008f08 <xIPIsNetworkTaskReady>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d004      	beq.n	8009812 <vPreCheckConfigs+0x1a>
 8009808:	f240 31db 	movw	r1, #987	@ 0x3db
 800980c:	4831      	ldr	r0, [pc, #196]	@ (80098d4 <vPreCheckConfigs+0xdc>)
 800980e:	f7f7 fc83 	bl	8001118 <vAssertCalled>
    configASSERT( xNetworkEventQueue == NULL );
 8009812:	4b31      	ldr	r3, [pc, #196]	@ (80098d8 <vPreCheckConfigs+0xe0>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d004      	beq.n	8009824 <vPreCheckConfigs+0x2c>
 800981a:	f44f 7177 	mov.w	r1, #988	@ 0x3dc
 800981e:	482d      	ldr	r0, [pc, #180]	@ (80098d4 <vPreCheckConfigs+0xdc>)
 8009820:	f7f7 fc7a 	bl	8001118 <vAssertCalled>
    configASSERT( FreeRTOS_GetIPTaskHandle() == NULL );
 8009824:	f7fe fe8c 	bl	8008540 <FreeRTOS_GetIPTaskHandle>
 8009828:	4603      	mov	r3, r0
 800982a:	2b00      	cmp	r3, #0
 800982c:	d004      	beq.n	8009838 <vPreCheckConfigs+0x40>
 800982e:	f240 31dd 	movw	r1, #989	@ 0x3dd
 8009832:	4828      	ldr	r0, [pc, #160]	@ (80098d4 <vPreCheckConfigs+0xdc>)
 8009834:	f7f7 fc70 	bl	8001118 <vAssertCalled>
         * fields in the protocol headers.
         */
        configASSERT( ( ( ( ipSIZE_OF_ETH_HEADER ) + ( ipBUFFER_PADDING ) ) % 4U ) == 0U );

        /* LCOV_EXCL_BR_START */
        uxSize = ipconfigNETWORK_MTU;
 8009838:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800983c:	607b      	str	r3, [r7, #4]
        /* Check if MTU is big enough. */
        configASSERT( uxSize >= ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + ipconfigTCP_MSS ) );
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f240 52db 	movw	r2, #1499	@ 0x5db
 8009844:	4293      	cmp	r3, r2
 8009846:	d804      	bhi.n	8009852 <vPreCheckConfigs+0x5a>
 8009848:	f240 31fb 	movw	r1, #1019	@ 0x3fb
 800984c:	4821      	ldr	r0, [pc, #132]	@ (80098d4 <vPreCheckConfigs+0xdc>)
 800984e:	f7f7 fc63 	bl	8001118 <vAssertCalled>

        uxSize = sizeof( EthernetHeader_t );
 8009852:	230e      	movs	r3, #14
 8009854:	607b      	str	r3, [r7, #4]
        /* Check structure packing is correct. */
        configASSERT( uxSize == ipEXPECTED_EthernetHeader_t_SIZE );
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2b0e      	cmp	r3, #14
 800985a:	d004      	beq.n	8009866 <vPreCheckConfigs+0x6e>
 800985c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8009860:	481c      	ldr	r0, [pc, #112]	@ (80098d4 <vPreCheckConfigs+0xdc>)
 8009862:	f7f7 fc59 	bl	8001118 <vAssertCalled>

        uxSize = sizeof( ARPHeader_t );
 8009866:	231c      	movs	r3, #28
 8009868:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_ARPHeader_t_SIZE );
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2b1c      	cmp	r3, #28
 800986e:	d004      	beq.n	800987a <vPreCheckConfigs+0x82>
 8009870:	f240 4102 	movw	r1, #1026	@ 0x402
 8009874:	4817      	ldr	r0, [pc, #92]	@ (80098d4 <vPreCheckConfigs+0xdc>)
 8009876:	f7f7 fc4f 	bl	8001118 <vAssertCalled>

        uxSize = sizeof( IPHeader_t );
 800987a:	2314      	movs	r3, #20
 800987c:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_IPHeader_t_SIZE );
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2b14      	cmp	r3, #20
 8009882:	d004      	beq.n	800988e <vPreCheckConfigs+0x96>
 8009884:	f240 4105 	movw	r1, #1029	@ 0x405
 8009888:	4812      	ldr	r0, [pc, #72]	@ (80098d4 <vPreCheckConfigs+0xdc>)
 800988a:	f7f7 fc45 	bl	8001118 <vAssertCalled>

        uxSize = sizeof( ICMPHeader_t );
 800988e:	2308      	movs	r3, #8
 8009890:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_ICMPHeader_t_SIZE );
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2b08      	cmp	r3, #8
 8009896:	d004      	beq.n	80098a2 <vPreCheckConfigs+0xaa>
 8009898:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 800989c:	480d      	ldr	r0, [pc, #52]	@ (80098d4 <vPreCheckConfigs+0xdc>)
 800989e:	f7f7 fc3b 	bl	8001118 <vAssertCalled>

        uxSize = sizeof( UDPHeader_t );
 80098a2:	2308      	movs	r3, #8
 80098a4:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_UDPHeader_t_SIZE );
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2b08      	cmp	r3, #8
 80098aa:	d004      	beq.n	80098b6 <vPreCheckConfigs+0xbe>
 80098ac:	f240 410b 	movw	r1, #1035	@ 0x40b
 80098b0:	4808      	ldr	r0, [pc, #32]	@ (80098d4 <vPreCheckConfigs+0xdc>)
 80098b2:	f7f7 fc31 	bl	8001118 <vAssertCalled>

        #if ipconfigUSE_TCP == 1
        {
            uxSize = sizeof( TCPHeader_t );
 80098b6:	2324      	movs	r3, #36	@ 0x24
 80098b8:	607b      	str	r3, [r7, #4]
            configASSERT( uxSize == ( ipEXPECTED_TCPHeader_t_SIZE + ipSIZE_TCP_OPTIONS ) );
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2b24      	cmp	r3, #36	@ 0x24
 80098be:	d004      	beq.n	80098ca <vPreCheckConfigs+0xd2>
 80098c0:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 80098c4:	4803      	ldr	r0, [pc, #12]	@ (80098d4 <vPreCheckConfigs+0xdc>)
 80098c6:	f7f7 fc27 	bl	8001118 <vAssertCalled>
         * It's value MUST be > 0. Otherwise, storing the IPv4 version byte
         * will overwrite the Ethernet header. */
        configASSERT( ipIP_TYPE_OFFSET > 0 );
    }
    #endif /* if ( configASSERT_DEFINED == 1 ) */
}
 80098ca:	bf00      	nop
 80098cc:	3708      	adds	r7, #8
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	0802308c 	.word	0x0802308c
 80098d8:	20000e48 	.word	0x20000e48

080098dc <vPrintResourceStats>:
/**
 * @brief A function that monitors a three resources: the heap, the space in the message
 *        queue of the IP-task, the number of available network buffer descriptors.
 */
    void vPrintResourceStats( void )
    {
 80098dc:	b580      	push	{r7, lr}
 80098de:	b084      	sub	sp, #16
 80098e0:	af00      	add	r7, sp, #0
        /* When setting up and testing a project with FreeRTOS+TCP, it is
         * can be helpful to monitor a few resources: the number of network
         * buffers and the amount of available heap.
         * This function will issue some logging when a minimum value has
         * changed. */
        uxCurrentBufferCount = uxGetMinimumFreeNetworkBuffers();
 80098e2:	f00c fd7f 	bl	80163e4 <uxGetMinimumFreeNetworkBuffers>
 80098e6:	60f8      	str	r0, [r7, #12]

        if( uxLastMinBufferCount > uxCurrentBufferCount )
 80098e8:	4b24      	ldr	r3, [pc, #144]	@ (800997c <vPrintResourceStats+0xa0>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	68fa      	ldr	r2, [r7, #12]
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d20a      	bcs.n	8009908 <vPrintResourceStats+0x2c>
        {
            /* The logging produced below may be helpful
             * while tuning +TCP: see how many buffers are in use. */
            uxLastMinBufferCount = uxCurrentBufferCount;
 80098f2:	4a22      	ldr	r2, [pc, #136]	@ (800997c <vPrintResourceStats+0xa0>)
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6013      	str	r3, [r2, #0]
            FreeRTOS_printf( ( "Network buffers: %lu lowest %lu\n",
 80098f8:	f00c fd80 	bl	80163fc <uxGetNumberOfFreeNetworkBuffers>
 80098fc:	4603      	mov	r3, r0
 80098fe:	68fa      	ldr	r2, [r7, #12]
 8009900:	4619      	mov	r1, r3
 8009902:	481f      	ldr	r0, [pc, #124]	@ (8009980 <vPrintResourceStats+0xa4>)
 8009904:	f016 fe12 	bl	802052c <lUDPLoggingPrintf>
                               uxGetNumberOfFreeNetworkBuffers(),
                               uxCurrentBufferCount ) );
        }

        uxMinSize = xPortGetMinimumEverFreeHeapSize();
 8009908:	f7fb ff1e 	bl	8005748 <xPortGetMinimumEverFreeHeapSize>
 800990c:	60b8      	str	r0, [r7, #8]

        if( uxMinLastSize == 0U )
 800990e:	4b1d      	ldr	r3, [pc, #116]	@ (8009984 <vPrintResourceStats+0xa8>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d103      	bne.n	800991e <vPrintResourceStats+0x42>
        {
            /* Probably the first time this function is called. */
            uxMinLastSize = uxMinSize;
 8009916:	4a1b      	ldr	r2, [pc, #108]	@ (8009984 <vPrintResourceStats+0xa8>)
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	6013      	str	r3, [r2, #0]
 800991c:	e019      	b.n	8009952 <vPrintResourceStats+0x76>
        }
        else if( uxMinSize >= ipMONITOR_MAX_HEAP )
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009924:	d215      	bcs.n	8009952 <vPrintResourceStats+0x76>
        {
            /* There is more than enough heap space. No need for logging. */
        }
        /* Write logging if there is a 10% decrease since the last time logging was written. */
        else if( ( uxMinLastSize * ipMONITOR_PERCENTAGE_90 ) > ( uxMinSize * ipMONITOR_PERCENTAGE_100 ) )
 8009926:	4b17      	ldr	r3, [pc, #92]	@ (8009984 <vPrintResourceStats+0xa8>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	225a      	movs	r2, #90	@ 0x5a
 800992c:	fb03 f202 	mul.w	r2, r3, r2
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	2164      	movs	r1, #100	@ 0x64
 8009934:	fb01 f303 	mul.w	r3, r1, r3
 8009938:	429a      	cmp	r2, r3
 800993a:	d90a      	bls.n	8009952 <vPrintResourceStats+0x76>
        {
            uxMinLastSize = uxMinSize;
 800993c:	4a11      	ldr	r2, [pc, #68]	@ (8009984 <vPrintResourceStats+0xa8>)
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	6013      	str	r3, [r2, #0]
            FreeRTOS_printf( ( "Heap: current %u lowest %u\n", ( unsigned ) xPortGetFreeHeapSize(), ( unsigned ) uxMinSize ) );
 8009942:	f7fb fef5 	bl	8005730 <xPortGetFreeHeapSize>
 8009946:	4603      	mov	r3, r0
 8009948:	68ba      	ldr	r2, [r7, #8]
 800994a:	4619      	mov	r1, r3
 800994c:	480e      	ldr	r0, [pc, #56]	@ (8009988 <vPrintResourceStats+0xac>)
 800994e:	f016 fded 	bl	802052c <lUDPLoggingPrintf>
            /* Nothing to log. */
        }

        #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
        {
            UBaseType_t uxCurrentCount = 0u;
 8009952:	2300      	movs	r3, #0
 8009954:	607b      	str	r3, [r7, #4]

            uxCurrentCount = uxGetMinimumIPQueueSpace();
 8009956:	f7ff fae3 	bl	8008f20 <uxGetMinimumIPQueueSpace>
 800995a:	6078      	str	r0, [r7, #4]

            if( uxLastMinQueueSpace != uxCurrentCount )
 800995c:	4b0b      	ldr	r3, [pc, #44]	@ (800998c <vPrintResourceStats+0xb0>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	429a      	cmp	r2, r3
 8009964:	d006      	beq.n	8009974 <vPrintResourceStats+0x98>
            {
                /* The logging produced below may be helpful
                 * while tuning +TCP: see how many buffers are in use. */
                uxLastMinQueueSpace = uxCurrentCount;
 8009966:	4a09      	ldr	r2, [pc, #36]	@ (800998c <vPrintResourceStats+0xb0>)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6013      	str	r3, [r2, #0]
                FreeRTOS_printf( ( "Queue space: lowest %lu\n", uxCurrentCount ) );
 800996c:	6879      	ldr	r1, [r7, #4]
 800996e:	4808      	ldr	r0, [pc, #32]	@ (8009990 <vPrintResourceStats+0xb4>)
 8009970:	f016 fddc 	bl	802052c <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigCHECK_IP_QUEUE_SPACE */
    }
 8009974:	bf00      	nop
 8009976:	3710      	adds	r7, #16
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	20000018 	.word	0x20000018
 8009980:	080231fc 	.word	0x080231fc
 8009984:	20000ec4 	.word	0x20000ec4
 8009988:	08023220 	.word	0x08023220
 800998c:	20000ec8 	.word	0x20000ec8
 8009990:	0802323c 	.word	0x0802323c

08009994 <FreeRTOS_max_size_t>:
 * @param[in] b the second value.
 * @return The highest of the two values.
 */
size_t FreeRTOS_max_size_t( size_t a,
                            size_t b )
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
    return ( a >= b ) ? a : b;
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	4293      	cmp	r3, r2
 80099a4:	bf38      	it	cc
 80099a6:	4613      	movcc	r3, r2
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <FreeRTOS_min_int32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
int32_t FreeRTOS_min_int32( int32_t a,
                            int32_t b )
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	4293      	cmp	r3, r2
 80099c4:	bfa8      	it	ge
 80099c6:	4613      	movge	r3, r2
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <FreeRTOS_min_uint32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
uint32_t FreeRTOS_min_uint32( uint32_t a,
                              uint32_t b )
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	4293      	cmp	r3, r2
 80099e4:	bf28      	it	cs
 80099e6:	4613      	movcs	r3, r2
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <FreeRTOS_min_size_t>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
size_t FreeRTOS_min_size_t( size_t a,
                            size_t b )
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	4293      	cmp	r3, r2
 8009a04:	bf28      	it	cs
 8009a06:	4613      	movcs	r3, r2
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <FreeRTOS_round_up>:
 * @param[in] d the second value.
 * @return A multiple of d.
 */
uint32_t FreeRTOS_round_up( uint32_t a,
                            uint32_t d )
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
    uint32_t ulResult = a;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	60fb      	str	r3, [r7, #12]

    configASSERT( d != 0U );
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d104      	bne.n	8009a32 <FreeRTOS_round_up+0x1e>
 8009a28:	f240 61ac 	movw	r1, #1708	@ 0x6ac
 8009a2c:	480a      	ldr	r0, [pc, #40]	@ (8009a58 <FreeRTOS_round_up+0x44>)
 8009a2e:	f7f7 fb73 	bl	8001118 <vAssertCalled>

    if( d != 0U )
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d00a      	beq.n	8009a4e <FreeRTOS_round_up+0x3a>
    {
        ulResult = d * ( ( a + d - 1U ) / d );
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	1e5a      	subs	r2, r3, #1
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	fbb2 f2f3 	udiv	r2, r2, r3
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	fb02 f303 	mul.w	r3, r2, r3
 8009a4c:	60fb      	str	r3, [r7, #12]
    }

    return ulResult;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3710      	adds	r7, #16
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	0802308c 	.word	0x0802308c

08009a5c <ulChar2u32>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint32_t ulChar2u32( const uint8_t * pucPtr )
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	061a      	lsls	r2, r3, #24
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	041b      	lsls	r3, r3, #16
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 8009a72:	431a      	orrs	r2, r3
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	3302      	adds	r3, #2
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	021b      	lsls	r3, r3, #8
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 8009a7c:	4313      	orrs	r3, r2
           ( ( ( uint32_t ) pucPtr[ 3 ] ) );
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	3203      	adds	r2, #3
 8009a82:	7812      	ldrb	r2, [r2, #0]
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 8009a84:	4313      	orrs	r3, r2
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	370c      	adds	r7, #12
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr

08009a92 <usChar2u16>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint16_t usChar2u16( const uint8_t * pucPtr )
{
 8009a92:	b480      	push	{r7}
 8009a94:	b083      	sub	sp, #12
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
    return ( uint16_t )
           ( ( ( ( uint32_t ) pucPtr[ 0 ] ) << 8 ) |
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	021b      	lsls	r3, r3, #8
 8009aa0:	b29b      	uxth	r3, r3
             ( ( ( uint32_t ) pucPtr[ 1 ] ) ) );
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	3201      	adds	r2, #1
 8009aa6:	7812      	ldrb	r2, [r2, #0]
    return ( uint16_t )
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	b29b      	uxth	r3, r3
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <xCheckIPv4SizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckIPv4SizeFields( const void * const pvEthernetBuffer,
                                            size_t uxBufferLength )
    {
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b08a      	sub	sp, #40	@ 0x28
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIPHeaderLength;
        uint8_t ucProtocol;
        uint16_t usLength;
        uint16_t ucVersionHeaderLength;
        size_t uxMinimumLength;
        BaseType_t xResult = pdFAIL;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	623b      	str	r3, [r7, #32]

        /* Map the buffer onto a IP-Packet struct to easily access the
         * fields of the IP packet. */
        const IPPacket_t * const pxIPPacket = ( ( const IPPacket_t * const ) pvEthernetBuffer );
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	61bb      	str	r3, [r7, #24]

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 8009aca:	2300      	movs	r3, #0
 8009acc:	61fb      	str	r3, [r7, #28]

        do
        {
            /* Check for minimum packet size: Ethernet header and an IP-header, 34 bytes */
            if( uxBufferLength < sizeof( IPPacket_t ) )
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	2b21      	cmp	r3, #33	@ 0x21
 8009ad2:	d802      	bhi.n	8009ada <xCheckIPv4SizeFields+0x22>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	61fb      	str	r3, [r7, #28]
                break;
 8009ad8:	e06f      	b.n	8009bba <xCheckIPv4SizeFields+0x102>
            }

            ucVersionHeaderLength = pxIPPacket->xIPHeader.ucVersionHeaderLength;
 8009ada:	69bb      	ldr	r3, [r7, #24]
 8009adc:	7b9b      	ldrb	r3, [r3, #14]
 8009ade:	82fb      	strh	r3, [r7, #22]

            /* Test if the length of the IP-header is between 20 and 60 bytes,
             * and if the IP-version is 4. */
            if( ( ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 8009ae0:	8afb      	ldrh	r3, [r7, #22]
 8009ae2:	2b44      	cmp	r3, #68	@ 0x44
 8009ae4:	d902      	bls.n	8009aec <xCheckIPv4SizeFields+0x34>
 8009ae6:	8afb      	ldrh	r3, [r7, #22]
 8009ae8:	2b4f      	cmp	r3, #79	@ 0x4f
 8009aea:	d902      	bls.n	8009af2 <xCheckIPv4SizeFields+0x3a>
                ( ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 8009aec:	2302      	movs	r3, #2
 8009aee:	61fb      	str	r3, [r7, #28]
                break;
 8009af0:	e063      	b.n	8009bba <xCheckIPv4SizeFields+0x102>
            }

            ucVersionHeaderLength = ( uint16_t ) ( ( ucVersionHeaderLength & ( uint8_t ) 0x0FU ) << 2U );
 8009af2:	8afb      	ldrh	r3, [r7, #22]
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8009afc:	82fb      	strh	r3, [r7, #22]
            uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
 8009afe:	8afb      	ldrh	r3, [r7, #22]
 8009b00:	613b      	str	r3, [r7, #16]

            /* Check if the complete IP-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + uxIPHeaderLength ) )
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	330e      	adds	r3, #14
 8009b06:	683a      	ldr	r2, [r7, #0]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d202      	bcs.n	8009b12 <xCheckIPv4SizeFields+0x5a>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 8009b0c:	2303      	movs	r3, #3
 8009b0e:	61fb      	str	r3, [r7, #28]
                break;
 8009b10:	e053      	b.n	8009bba <xCheckIPv4SizeFields+0x102>
            }

            /* Check if the complete IP-header plus protocol data have been transferred: */
            usLength = pxIPPacket->xIPHeader.usLength;
 8009b12:	69bb      	ldr	r3, [r7, #24]
 8009b14:	7c1a      	ldrb	r2, [r3, #16]
 8009b16:	7c5b      	ldrb	r3, [r3, #17]
 8009b18:	021b      	lsls	r3, r3, #8
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	81fb      	strh	r3, [r7, #14]
            usLength = FreeRTOS_ntohs( usLength );
 8009b1e:	89fb      	ldrh	r3, [r7, #14]
 8009b20:	021b      	lsls	r3, r3, #8
 8009b22:	b21a      	sxth	r2, r3
 8009b24:	89fb      	ldrh	r3, [r7, #14]
 8009b26:	0a1b      	lsrs	r3, r3, #8
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	b21b      	sxth	r3, r3
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	b21b      	sxth	r3, r3
 8009b30:	81fb      	strh	r3, [r7, #14]

            if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 8009b32:	89fb      	ldrh	r3, [r7, #14]
 8009b34:	330e      	adds	r3, #14
 8009b36:	683a      	ldr	r2, [r7, #0]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d202      	bcs.n	8009b42 <xCheckIPv4SizeFields+0x8a>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 8009b3c:	2304      	movs	r3, #4
 8009b3e:	61fb      	str	r3, [r7, #28]
                break;
 8009b40:	e03b      	b.n	8009bba <xCheckIPv4SizeFields+0x102>
            }

            /* Identify the next protocol. */
            ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	7ddb      	ldrb	r3, [r3, #23]
 8009b46:	737b      	strb	r3, [r7, #13]

            /* Switch on the Layer 3/4 protocol. */
            if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 8009b48:	7b7b      	ldrb	r3, [r7, #13]
 8009b4a:	2b11      	cmp	r3, #17
 8009b4c:	d103      	bne.n	8009b56 <xCheckIPv4SizeFields+0x9e>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER;
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	3316      	adds	r3, #22
 8009b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b54:	e013      	b.n	8009b7e <xCheckIPv4SizeFields+0xc6>
            }
            else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 8009b56:	7b7b      	ldrb	r3, [r7, #13]
 8009b58:	2b06      	cmp	r3, #6
 8009b5a:	d103      	bne.n	8009b64 <xCheckIPv4SizeFields+0xac>
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER;
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	3322      	adds	r3, #34	@ 0x22
 8009b60:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b62:	e00c      	b.n	8009b7e <xCheckIPv4SizeFields+0xc6>
            }
            else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 8009b64:	7b7b      	ldrb	r3, [r7, #13]
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d002      	beq.n	8009b70 <xCheckIPv4SizeFields+0xb8>
 8009b6a:	7b7b      	ldrb	r3, [r7, #13]
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	d103      	bne.n	8009b78 <xCheckIPv4SizeFields+0xc0>
                     ( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMPv4_HEADER;
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	3316      	adds	r3, #22
 8009b74:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b76:	e002      	b.n	8009b7e <xCheckIPv4SizeFields+0xc6>
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 8009b78:	2305      	movs	r3, #5
 8009b7a:	61fb      	str	r3, [r7, #28]
                break;
 8009b7c:	e01d      	b.n	8009bba <xCheckIPv4SizeFields+0x102>
            }

            if( uxBufferLength < uxMinimumLength )
 8009b7e:	683a      	ldr	r2, [r7, #0]
 8009b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d202      	bcs.n	8009b8c <xCheckIPv4SizeFields+0xd4>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 8009b86:	2306      	movs	r3, #6
 8009b88:	61fb      	str	r3, [r7, #28]
                break;
 8009b8a:	e016      	b.n	8009bba <xCheckIPv4SizeFields+0x102>
            }

            uxLength = ( size_t ) usLength;
 8009b8c:	89fb      	ldrh	r3, [r7, #14]
 8009b8e:	60bb      	str	r3, [r7, #8]
            uxLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally, minus 20. */
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	461a      	mov	r2, r3
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	1a9b      	subs	r3, r3, r2
 8009b9a:	60bb      	str	r3, [r7, #8]

            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	2b07      	cmp	r3, #7
 8009ba0:	d906      	bls.n	8009bb0 <xCheckIPv4SizeFields+0xf8>
                ( uxLength > ( ( size_t ) ipconfigNETWORK_MTU - ( size_t ) uxIPHeaderLength ) ) )
 8009ba2:	693a      	ldr	r2, [r7, #16]
 8009ba4:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8009ba8:	1a9b      	subs	r3, r3, r2
            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 8009baa:	68ba      	ldr	r2, [r7, #8]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d902      	bls.n	8009bb6 <xCheckIPv4SizeFields+0xfe>
            {
                /* For incoming packets, the length is out of bound: either
                 * too short or too long. For outgoing packets, there is a
                 * serious problem with the format/length. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 8009bb0:	2307      	movs	r3, #7
 8009bb2:	61fb      	str	r3, [r7, #28]
                break;
 8009bb4:	e001      	b.n	8009bba <xCheckIPv4SizeFields+0x102>
            }

            xResult = pdPASS;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	623b      	str	r3, [r7, #32]
        } while( ipFALSE_BOOL );

        if( xResult != pdPASS )
 8009bba:	6a3b      	ldr	r3, [r7, #32]
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d003      	beq.n	8009bc8 <xCheckIPv4SizeFields+0x110>
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckIPv4SizeFields: location %ld\n", xLocation ) );
 8009bc0:	69f9      	ldr	r1, [r7, #28]
 8009bc2:	4804      	ldr	r0, [pc, #16]	@ (8009bd4 <xCheckIPv4SizeFields+0x11c>)
 8009bc4:	f016 fcb2 	bl	802052c <lUDPLoggingPrintf>
        }

        return xResult;
 8009bc8:	6a3b      	ldr	r3, [r7, #32]
    }
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3728      	adds	r7, #40	@ 0x28
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	08023308 	.word	0x08023308

08009bd8 <xIsIPv4Multicast>:
 * @param[in] ulIPAddress The IP address being checked.
 *
 * @return pdTRUE if the IP address is a multicast address or else, pdFALSE.
 */
BaseType_t xIsIPv4Multicast( uint32_t ulIPAddress )
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b085      	sub	sp, #20
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	061a      	lsls	r2, r3, #24
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	021b      	lsls	r3, r3, #8
 8009be8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009bec:	431a      	orrs	r2, r3
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	0a1b      	lsrs	r3, r3, #8
 8009bf2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009bf6:	431a      	orrs	r2, r3
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	0e1b      	lsrs	r3, r3, #24
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	60bb      	str	r3, [r7, #8]

    if( ( ulIP >= ipFIRST_MULTI_CAST_IPv4 ) && ( ulIP < ipLAST_MULTI_CAST_IPv4 ) )
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8009c06:	d306      	bcc.n	8009c16 <xIsIPv4Multicast+0x3e>
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	f1b3 4f70 	cmp.w	r3, #4026531840	@ 0xf0000000
 8009c0e:	d202      	bcs.n	8009c16 <xIsIPv4Multicast+0x3e>
    {
        xReturn = pdTRUE;
 8009c10:	2301      	movs	r3, #1
 8009c12:	60fb      	str	r3, [r7, #12]
 8009c14:	e001      	b.n	8009c1a <xIsIPv4Multicast+0x42>
    }
    else
    {
        xReturn = pdFALSE;
 8009c16:	2300      	movs	r3, #0
 8009c18:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3714      	adds	r7, #20
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <prvAllowIPPacketIPv4>:
 * @return Whether the packet should be processed or dropped.
 */
enum eFrameProcessingResult prvAllowIPPacketIPv4( const struct xIP_PACKET * const pxIPPacket,
                                                  const struct xNETWORK_BUFFER * const pxNetworkBuffer,
                                                  UBaseType_t uxHeaderLength )
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b086      	sub	sp, #24
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 8009c34:	2301      	movs	r3, #1
 8009c36:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
    {
        if( eReturn == eProcessBuffer )
 8009c38:	7dfb      	ldrb	r3, [r7, #23]
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d10c      	bne.n	8009c58 <prvAllowIPPacketIPv4+0x30>
        {
            if( xCheckIPv4SizeFields( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength ) != pdPASS )
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c46:	4619      	mov	r1, r3
 8009c48:	4610      	mov	r0, r2
 8009c4a:	f7ff ff35 	bl	8009ab8 <xCheckIPv4SizeFields>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d001      	beq.n	8009c58 <prvAllowIPPacketIPv4+0x30>
            {
                /* Some of the length checks were not successful. */
                eReturn = eReleaseBuffer;
 8009c54:	2300      	movs	r3, #0
 8009c56:	75fb      	strb	r3, [r7, #23]
        }

        #if ( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 )
        {
            /* Check if this is a UDP packet without a checksum. */
            if( eReturn == eProcessBuffer )
 8009c58:	7dfb      	ldrb	r3, [r7, #23]
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d134      	bne.n	8009cc8 <prvAllowIPPacketIPv4+0xa0>
                const ProtocolHeaders_t * pxProtocolHeaders;

                /* ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS is defined as 0,
                 * and so UDP packets carrying a protocol checksum of 0, will
                 * be dropped. */
                ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	7ddb      	ldrb	r3, [r3, #23]
 8009c62:	75bb      	strb	r3, [r7, #22]
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ( size_t ) ipSIZE_OF_IPv4_HEADER ] ) );
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c68:	3322      	adds	r3, #34	@ 0x22
 8009c6a:	613b      	str	r3, [r7, #16]

                /* Identify the next protocol. */
                if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 8009c6c:	7dbb      	ldrb	r3, [r7, #22]
 8009c6e:	2b11      	cmp	r3, #17
 8009c70:	d12a      	bne.n	8009cc8 <prvAllowIPPacketIPv4+0xa0>
                {
                    if( pxProtocolHeaders->xUDPHeader.usChecksum == ( uint16_t ) 0U )
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	88db      	ldrh	r3, [r3, #6]
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d125      	bne.n	8009cc8 <prvAllowIPPacketIPv4+0xa0>
                        #if ( ipconfigHAS_PRINTF != 0 )
                        {
                            static BaseType_t xCount = 0;

                            /* Exclude this from branch coverage as this is only used for debugging. */
                            if( xCount < 5 ) /* LCOV_EXCL_BR_LINE */
 8009c7c:	4b15      	ldr	r3, [pc, #84]	@ (8009cd4 <prvAllowIPPacketIPv4+0xac>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2b04      	cmp	r3, #4
 8009c82:	dc1f      	bgt.n	8009cc4 <prvAllowIPPacketIPv4+0x9c>
                            {
                                FreeRTOS_printf( ( "prvAllowIPPacket: UDP packet from %xip without CRC dropped\n",
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8009c8a:	061a      	lsls	r2, r3, #24
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8009c92:	021b      	lsls	r3, r3, #8
 8009c94:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009c98:	431a      	orrs	r2, r3
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8009ca0:	0a1b      	lsrs	r3, r3, #8
 8009ca2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009ca6:	431a      	orrs	r2, r3
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8009cae:	0e1b      	lsrs	r3, r3, #24
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	4808      	ldr	r0, [pc, #32]	@ (8009cd8 <prvAllowIPPacketIPv4+0xb0>)
 8009cb6:	f016 fc39 	bl	802052c <lUDPLoggingPrintf>
                                                   FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulSourceIPAddress ) ) );
                                xCount++;
 8009cba:	4b06      	ldr	r3, [pc, #24]	@ (8009cd4 <prvAllowIPPacketIPv4+0xac>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	4a04      	ldr	r2, [pc, #16]	@ (8009cd4 <prvAllowIPPacketIPv4+0xac>)
 8009cc2:	6013      	str	r3, [r2, #0]
                            }
                        }
                        #endif /* ( ipconfigHAS_PRINTF != 0 ) */

                        /* Protocol checksum not accepted. */
                        eReturn = eReleaseBuffer;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	75fb      	strb	r3, [r7, #23]
        ( void ) pxNetworkBuffer;
        ( void ) uxHeaderLength;
    }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */

    return eReturn;
 8009cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3718      	adds	r7, #24
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	20000ecc 	.word	0x20000ecc
 8009cd8:	0802332c 	.word	0x0802332c

08009cdc <prvCheckIP4HeaderOptions>:
 * @param[in] pxNetworkBuffer the network buffer that contains the packet.
 *
 * @return Either 'eProcessBuffer' or 'eReleaseBuffer'
 */
enum eFrameProcessingResult prvCheckIP4HeaderOptions( struct xNETWORK_BUFFER * const pxNetworkBuffer )
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b08a      	sub	sp, #40	@ 0x28
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    #if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 )
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cee:	330e      	adds	r3, #14
 8009cf0:	623b      	str	r3, [r7, #32]

        /* All structs of headers expect a IP header size of 20 bytes
         * IP header options were included, we'll ignore them and cut them out. */
        size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 8009cf2:	6a3b      	ldr	r3, [r7, #32]
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	61fb      	str	r3, [r7, #28]

        /* Check if the IP headers are acceptable and if it has our destination.
         * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
         * length in multiples of 4. */
        size_t uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 8009cf8:	69fb      	ldr	r3, [r7, #28]
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8009d00:	61bb      	str	r3, [r7, #24]

        /* Number of bytes contained in IPv4 header options. */
        const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	3b14      	subs	r3, #20
 8009d06:	617b      	str	r3, [r7, #20]
        /* From: the previous start of UDP/ICMP/TCP data. */
        const uint8_t * pucSource = ( const uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + uxHeaderLength ] );
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	330e      	adds	r3, #14
 8009d10:	4413      	add	r3, r2
 8009d12:	613b      	str	r3, [r7, #16]
        /* To: the usual start of UDP/ICMP/TCP data at offset 20 (decimal ) from IP header. */
        uint8_t * pucTarget = ( uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + ipSIZE_OF_IPv4_HEADER ] );
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d18:	3322      	adds	r3, #34	@ 0x22
 8009d1a:	60fb      	str	r3, [r7, #12]
        /* How many: total length minus the options and the lower headers. */
        const size_t xMoveLen = pxNetworkBuffer->xDataLength - ( optlen + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_ETH_HEADER );
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	1ad3      	subs	r3, r2, r3
 8009d24:	3b22      	subs	r3, #34	@ 0x22
 8009d26:	60bb      	str	r3, [r7, #8]

        ( void ) memmove( pucTarget, pucSource, xMoveLen );
 8009d28:	68ba      	ldr	r2, [r7, #8]
 8009d2a:	6939      	ldr	r1, [r7, #16]
 8009d2c:	68f8      	ldr	r0, [r7, #12]
 8009d2e:	f017 fdbe 	bl	80218ae <memmove>
        pxNetworkBuffer->xDataLength -= optlen;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	1ad2      	subs	r2, r2, r3
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	629a      	str	r2, [r3, #40]	@ 0x28
        /* Update the total length of the IP packet after removing options. */
        pxIPHeader->usLength = FreeRTOS_htons( FreeRTOS_ntohs( pxIPHeader->usLength ) - optlen );
 8009d3e:	6a3b      	ldr	r3, [r7, #32]
 8009d40:	885b      	ldrh	r3, [r3, #2]
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	021b      	lsls	r3, r3, #8
 8009d46:	b21a      	sxth	r2, r3
 8009d48:	6a3b      	ldr	r3, [r7, #32]
 8009d4a:	885b      	ldrh	r3, [r3, #2]
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	0a1b      	lsrs	r3, r3, #8
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	b21b      	sxth	r3, r3
 8009d54:	4313      	orrs	r3, r2
 8009d56:	b21b      	sxth	r3, r3
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	1ad3      	subs	r3, r2, r3
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	021b      	lsls	r3, r3, #8
 8009d64:	b29a      	uxth	r2, r3
 8009d66:	6a3b      	ldr	r3, [r7, #32]
 8009d68:	885b      	ldrh	r3, [r3, #2]
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	021b      	lsls	r3, r3, #8
 8009d6e:	b219      	sxth	r1, r3
 8009d70:	6a3b      	ldr	r3, [r7, #32]
 8009d72:	885b      	ldrh	r3, [r3, #2]
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	0a1b      	lsrs	r3, r3, #8
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	b21b      	sxth	r3, r3
 8009d7c:	430b      	orrs	r3, r1
 8009d7e:	b21b      	sxth	r3, r3
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	4619      	mov	r1, r3
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	1acb      	subs	r3, r1, r3
 8009d88:	0a1b      	lsrs	r3, r3, #8
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	b29a      	uxth	r2, r3
 8009d90:	6a3b      	ldr	r3, [r7, #32]
 8009d92:	805a      	strh	r2, [r3, #2]

        /* Rewrite the Version/IHL byte to indicate that this packet has no IP options. */
        pxIPHeader->ucVersionHeaderLength = ( uint8_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0xF0U ) | /* High nibble is the version. */
 8009d94:	6a3b      	ldr	r3, [r7, #32]
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	f023 030f 	bic.w	r3, r3, #15
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	f043 0305 	orr.w	r3, r3, #5
 8009da2:	b2da      	uxtb	r2, r3
 8009da4:	6a3b      	ldr	r3, [r7, #32]
 8009da6:	701a      	strb	r2, [r3, #0]
         * IP-options will be dropped. */
        eReturn = eReleaseBuffer;
    }
    #endif /* if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 ) */

    return eReturn;
 8009da8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3728      	adds	r7, #40	@ 0x28
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <FreeRTOS_inet_ntop4>:
 *         pcDestination, else a NULL is returned.
 */
const char * FreeRTOS_inet_ntop4( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b088      	sub	sp, #32
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	607a      	str	r2, [r7, #4]
    uint32_t ulIPAddress;
    void * pvCopyDest;
    const char * pcReturn;

    if( uxSize < 16U )
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2b0f      	cmp	r3, #15
 8009dc4:	d802      	bhi.n	8009dcc <FreeRTOS_inet_ntop4+0x18>
    {
        /* There must be space for "255.255.255.255". */
        pcReturn = NULL;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	61fb      	str	r3, [r7, #28]
 8009dca:	e00e      	b.n	8009dea <FreeRTOS_inet_ntop4+0x36>
    }
    else
    {
        pvCopyDest = ( void * ) &ulIPAddress;
 8009dcc:	f107 0314 	add.w	r3, r7, #20
 8009dd0:	61bb      	str	r3, [r7, #24]
        ( void ) memcpy( pvCopyDest, pvSource, sizeof( ulIPAddress ) );
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	601a      	str	r2, [r3, #0]
        ( void ) FreeRTOS_inet_ntoa( ulIPAddress, pcDestination );
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	68b9      	ldr	r1, [r7, #8]
 8009de0:	4618      	mov	r0, r3
 8009de2:	f004 fac9 	bl	800e378 <FreeRTOS_inet_ntoa>
        pcReturn = pcDestination;
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	61fb      	str	r3, [r7, #28]
    }

    return pcReturn;
 8009dea:	69fb      	ldr	r3, [r7, #28]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3720      	adds	r7, #32
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <xSend_UDP_Update_IPv4>:
 * @param[in] pxDestinationAddress The IPv4 socket address.
 * @return  Returns NULL, always.
 */
void * xSend_UDP_Update_IPv4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                              const struct freertos_sockaddr * pxDestinationAddress )
{
 8009df4:	b480      	push	{r7}
 8009df6:	b085      	sub	sp, #20
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
    UDPPacket_t * pxUDPPacket;

    if( ( pxNetworkBuffer != NULL ) && ( pxDestinationAddress != NULL ) )
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d010      	beq.n	8009e26 <xSend_UDP_Update_IPv4+0x32>
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d00d      	beq.n	8009e26 <xSend_UDP_Update_IPv4+0x32>
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e0e:	60fb      	str	r3, [r7, #12]

        pxNetworkBuffer->xIPAddress.ulIP_IPv4 = pxDestinationAddress->sin_address.ulIP_IPv4;
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	689a      	ldr	r2, [r3, #8]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	615a      	str	r2, [r3, #20]
        /* Map the UDP packet onto the start of the frame. */
        pxUDPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f042 0208 	orr.w	r2, r2, #8
 8009e20:	731a      	strb	r2, [r3, #12]
 8009e22:	2200      	movs	r2, #0
 8009e24:	735a      	strb	r2, [r3, #13]
    }

    return NULL;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3714      	adds	r7, #20
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <vSetMultiCastIPv4MacAddress>:
 * @param[in] ulIPAddress IP address.
 * @param[out] pxMACAddress Pointer to MAC address.
 */
void vSetMultiCastIPv4MacAddress( uint32_t ulIPAddress,
                                  MACAddress_t * pxMACAddress )
{
 8009e34:	b480      	push	{r7}
 8009e36:	b085      	sub	sp, #20
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	061a      	lsls	r2, r3, #24
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	021b      	lsls	r3, r3, #8
 8009e46:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009e4a:	431a      	orrs	r2, r3
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	0a1b      	lsrs	r3, r3, #8
 8009e50:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009e54:	431a      	orrs	r2, r3
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	0e1b      	lsrs	r3, r3, #24
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	60fb      	str	r3, [r7, #12]

    pxMACAddress->ucBytes[ 0 ] = ( uint8_t ) 0x01U;
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	2201      	movs	r2, #1
 8009e62:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = ( uint8_t ) 0x00U;
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	2200      	movs	r2, #0
 8009e68:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = ( uint8_t ) 0x5EU;
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	225e      	movs	r2, #94	@ 0x5e
 8009e6e:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU ); /* Use 7 bits. */
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	0c1b      	lsrs	r3, r3, #16
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e7a:	b2da      	uxtb	r2, r3
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >> 8 ) & 0xffU );  /* Use 8 bits. */
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	0a1b      	lsrs	r3, r3, #8
 8009e84:	b2da      	uxtb	r2, r3
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = ( uint8_t ) ( ( ulIP ) & 0xffU );       /* Use 8 bits. */
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	b2da      	uxtb	r2, r3
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	715a      	strb	r2, [r3, #5]
}
 8009e92:	bf00      	nop
 8009e94:	3714      	adds	r7, #20
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr
	...

08009ea0 <xCheckIPv6SizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckIPv6SizeFields( const void * const pvEthernetBuffer,
                                            size_t uxBufferLength )
    {
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b08c      	sub	sp, #48	@ 0x30
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFAIL;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint16_t ucVersionTrafficClass;
        uint16_t usPayloadLength;
        uint8_t ucNextHeader;
        size_t uxMinimumLength;
        size_t uxExtHeaderLength = 0;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	623b      	str	r3, [r7, #32]
        const IPExtHeader_IPv6_t * pxExtHeader = NULL;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	61bb      	str	r3, [r7, #24]
        const uint8_t * const pucEthernetBuffer = ( const uint8_t * const ) pvEthernetBuffer;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	617b      	str	r3, [r7, #20]

        /* Map the buffer onto a IPv6-Packet struct to easily access the
         * fields of the IPv6 packet. */
        const IPPacket_IPv6_t * const pxIPv6Packet = ( const IPPacket_IPv6_t * const ) pucEthernetBuffer;
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	613b      	str	r3, [r7, #16]

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	61fb      	str	r3, [r7, #28]

        do
        {
            /* Check for minimum packet size: Ethernet header and an IPv6-header, 54 bytes */
            if( uxBufferLength < sizeof( IPHeader_IPv6_t ) )
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	2b27      	cmp	r3, #39	@ 0x27
 8009ec6:	d802      	bhi.n	8009ece <xCheckIPv6SizeFields+0x2e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 8009ec8:	2301      	movs	r3, #1
 8009eca:	61fb      	str	r3, [r7, #28]
                break;
 8009ecc:	e098      	b.n	800a000 <xCheckIPv6SizeFields+0x160>
            }

            ucVersionTrafficClass = pxIPv6Packet->xIPHeader.ucVersionTrafficClass;
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	7b9b      	ldrb	r3, [r3, #14]
 8009ed2:	81fb      	strh	r3, [r7, #14]

            /* Test if the IP-version is 6. */
            if( ( ( ucVersionTrafficClass & ( uint8_t ) 0xF0U ) >> 4 ) != 6U )
 8009ed4:	89fb      	ldrh	r3, [r7, #14]
 8009ed6:	111b      	asrs	r3, r3, #4
 8009ed8:	f003 030f 	and.w	r3, r3, #15
 8009edc:	2b06      	cmp	r3, #6
 8009ede:	d002      	beq.n	8009ee6 <xCheckIPv6SizeFields+0x46>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 8009ee0:	2302      	movs	r3, #2
 8009ee2:	61fb      	str	r3, [r7, #28]
                break;
 8009ee4:	e08c      	b.n	800a000 <xCheckIPv6SizeFields+0x160>
            }

            /* Check if the IPv6-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ) )
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	2b35      	cmp	r3, #53	@ 0x35
 8009eea:	d802      	bhi.n	8009ef2 <xCheckIPv6SizeFields+0x52>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 8009eec:	2303      	movs	r3, #3
 8009eee:	61fb      	str	r3, [r7, #28]
                break;
 8009ef0:	e086      	b.n	800a000 <xCheckIPv6SizeFields+0x160>
            }

            /* Check if the complete IPv6-header plus protocol data have been transferred: */
            usPayloadLength = FreeRTOS_ntohs( pxIPv6Packet->xIPHeader.usPayloadLength );
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	8a5b      	ldrh	r3, [r3, #18]
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	021b      	lsls	r3, r3, #8
 8009efa:	b21a      	sxth	r2, r3
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	8a5b      	ldrh	r3, [r3, #18]
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	0a1b      	lsrs	r3, r3, #8
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	b21b      	sxth	r3, r3
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	b21b      	sxth	r3, r3
 8009f0c:	81bb      	strh	r3, [r7, #12]

            if( uxBufferLength != ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + ( size_t ) usPayloadLength ) )
 8009f0e:	89bb      	ldrh	r3, [r7, #12]
 8009f10:	3336      	adds	r3, #54	@ 0x36
 8009f12:	683a      	ldr	r2, [r7, #0]
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d002      	beq.n	8009f1e <xCheckIPv6SizeFields+0x7e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 8009f18:	2304      	movs	r3, #4
 8009f1a:	61fb      	str	r3, [r7, #28]
                break;
 8009f1c:	e070      	b.n	800a000 <xCheckIPv6SizeFields+0x160>
            }

            /* Identify the next protocol. */
            ucNextHeader = pxIPv6Packet->xIPHeader.ucNextHeader;
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	7d1b      	ldrb	r3, [r3, #20]
 8009f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

            while( xIsExtHeader( ucNextHeader ) )
 8009f26:	e015      	b.n	8009f54 <xCheckIPv6SizeFields+0xb4>
            {
                pxExtHeader = ( const IPExtHeader_IPv6_t * ) ( &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength ] ) );
 8009f28:	6a3b      	ldr	r3, [r7, #32]
 8009f2a:	3336      	adds	r3, #54	@ 0x36
 8009f2c:	697a      	ldr	r2, [r7, #20]
 8009f2e:	4413      	add	r3, r2
 8009f30:	61bb      	str	r3, [r7, #24]
                /* The definition of length in extension header - Length of this header in 8-octet units, not including the first 8 octets. */
                uxExtHeaderLength += ( size_t ) ( ( 8 * pxExtHeader->ucHeaderExtLength ) + 8 );
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	785b      	ldrb	r3, [r3, #1]
 8009f36:	3301      	adds	r3, #1
 8009f38:	00db      	lsls	r3, r3, #3
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	6a3b      	ldr	r3, [r7, #32]
 8009f3e:	4413      	add	r3, r2
 8009f40:	623b      	str	r3, [r7, #32]

                ucNextHeader = pxExtHeader->ucNextHeader;
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

                if( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength >= uxBufferLength )
 8009f4a:	6a3b      	ldr	r3, [r7, #32]
 8009f4c:	3336      	adds	r3, #54	@ 0x36
 8009f4e:	683a      	ldr	r2, [r7, #0]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d908      	bls.n	8009f66 <xCheckIPv6SizeFields+0xc6>
            while( xIsExtHeader( ucNextHeader ) )
 8009f54:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f000 f85f 	bl	800a01c <xIsExtHeader>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d1e1      	bne.n	8009f28 <xCheckIPv6SizeFields+0x88>
 8009f64:	e000      	b.n	8009f68 <xCheckIPv6SizeFields+0xc8>
                {
                    break;
 8009f66:	bf00      	nop
                }
            }

            if( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength >= uxBufferLength )
 8009f68:	6a3b      	ldr	r3, [r7, #32]
 8009f6a:	3336      	adds	r3, #54	@ 0x36
 8009f6c:	683a      	ldr	r2, [r7, #0]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d802      	bhi.n	8009f78 <xCheckIPv6SizeFields+0xd8>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 8009f72:	2307      	movs	r3, #7
 8009f74:	61fb      	str	r3, [r7, #28]
                break;
 8009f76:	e043      	b.n	800a000 <xCheckIPv6SizeFields+0x160>
            }

            /* Switch on the Layer 3/4 protocol. */
            if( ucNextHeader == ( uint8_t ) ipPROTOCOL_UDP )
 8009f78:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009f7c:	2b11      	cmp	r3, #17
 8009f7e:	d103      	bne.n	8009f88 <xCheckIPv6SizeFields+0xe8>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength + ipSIZE_OF_UDP_HEADER;
 8009f80:	6a3b      	ldr	r3, [r7, #32]
 8009f82:	333e      	adds	r3, #62	@ 0x3e
 8009f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f86:	e032      	b.n	8009fee <xCheckIPv6SizeFields+0x14e>
            }
            else if( ucNextHeader == ( uint8_t ) ipPROTOCOL_TCP )
 8009f88:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009f8c:	2b06      	cmp	r3, #6
 8009f8e:	d103      	bne.n	8009f98 <xCheckIPv6SizeFields+0xf8>
            {
                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength + ipSIZE_OF_TCP_HEADER;
 8009f90:	6a3b      	ldr	r3, [r7, #32]
 8009f92:	334a      	adds	r3, #74	@ 0x4a
 8009f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f96:	e02a      	b.n	8009fee <xCheckIPv6SizeFields+0x14e>
            }
            else if( ucNextHeader == ( uint8_t ) ipPROTOCOL_ICMP_IPv6 )
 8009f98:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009f9c:	2b3a      	cmp	r3, #58	@ 0x3a
 8009f9e:	d123      	bne.n	8009fe8 <xCheckIPv6SizeFields+0x148>
            {
                uint8_t ucTypeOfMessage;

                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength;
 8009fa0:	6a3b      	ldr	r3, [r7, #32]
 8009fa2:	3336      	adds	r3, #54	@ 0x36
 8009fa4:	627b      	str	r3, [r7, #36]	@ 0x24

                ucTypeOfMessage = pucEthernetBuffer[ uxMinimumLength ];
 8009fa6:	697a      	ldr	r2, [r7, #20]
 8009fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009faa:	4413      	add	r3, r2
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	72fb      	strb	r3, [r7, #11]

                if( ( ucTypeOfMessage == ipICMP_PING_REQUEST_IPv6 ) ||
 8009fb0:	7afb      	ldrb	r3, [r7, #11]
 8009fb2:	2b80      	cmp	r3, #128	@ 0x80
 8009fb4:	d002      	beq.n	8009fbc <xCheckIPv6SizeFields+0x11c>
 8009fb6:	7afb      	ldrb	r3, [r7, #11]
 8009fb8:	2b81      	cmp	r3, #129	@ 0x81
 8009fba:	d103      	bne.n	8009fc4 <xCheckIPv6SizeFields+0x124>
                    ( ucTypeOfMessage == ipICMP_PING_REPLY_IPv6 ) )
                {
                    uxMinimumLength += sizeof( ICMPEcho_IPv6_t );
 8009fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fbe:	3308      	adds	r3, #8
 8009fc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fc2:	e014      	b.n	8009fee <xCheckIPv6SizeFields+0x14e>
                }
                else if( ucTypeOfMessage == ipICMP_ROUTER_SOLICITATION_IPv6 )
 8009fc4:	7afb      	ldrb	r3, [r7, #11]
 8009fc6:	2b85      	cmp	r3, #133	@ 0x85
 8009fc8:	d103      	bne.n	8009fd2 <xCheckIPv6SizeFields+0x132>
                {
                    uxMinimumLength += sizeof( ICMPRouterSolicitation_IPv6_t );
 8009fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fcc:	3308      	adds	r3, #8
 8009fce:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fd0:	e00d      	b.n	8009fee <xCheckIPv6SizeFields+0x14e>
                }
                else if( ucTypeOfMessage == ipICMP_ROUTER_ADVERTISEMENT_IPv6 )
 8009fd2:	7afb      	ldrb	r3, [r7, #11]
 8009fd4:	2b86      	cmp	r3, #134	@ 0x86
 8009fd6:	d103      	bne.n	8009fe0 <xCheckIPv6SizeFields+0x140>
                {
                    uxMinimumLength += sizeof( ICMPRouterAdvertisement_IPv6_t );
 8009fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fda:	3310      	adds	r3, #16
 8009fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fde:	e006      	b.n	8009fee <xCheckIPv6SizeFields+0x14e>
                }
                else
                {
                    uxMinimumLength += ipSIZE_OF_ICMPv6_HEADER;
 8009fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe2:	3318      	adds	r3, #24
 8009fe4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fe6:	e002      	b.n	8009fee <xCheckIPv6SizeFields+0x14e>
                }
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 8009fe8:	2305      	movs	r3, #5
 8009fea:	61fb      	str	r3, [r7, #28]
                break;
 8009fec:	e008      	b.n	800a000 <xCheckIPv6SizeFields+0x160>
            }

            if( uxBufferLength < uxMinimumLength )
 8009fee:	683a      	ldr	r2, [r7, #0]
 8009ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d202      	bcs.n	8009ffc <xCheckIPv6SizeFields+0x15c>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 8009ff6:	2306      	movs	r3, #6
 8009ff8:	61fb      	str	r3, [r7, #28]
                break;
 8009ffa:	e001      	b.n	800a000 <xCheckIPv6SizeFields+0x160>
            }

            xResult = pdPASS;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        } while( ipFALSE_BOOL );

        if( xResult != pdPASS )
 800a000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a002:	2b01      	cmp	r3, #1
 800a004:	d003      	beq.n	800a00e <xCheckIPv6SizeFields+0x16e>
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckIPv6SizeFields: location %ld\n", xLocation ) );
 800a006:	69f9      	ldr	r1, [r7, #28]
 800a008:	4803      	ldr	r0, [pc, #12]	@ (800a018 <xCheckIPv6SizeFields+0x178>)
 800a00a:	f016 fa8f 	bl	802052c <lUDPLoggingPrintf>
        }

        return xResult;
 800a00e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800a010:	4618      	mov	r0, r3
 800a012:	3730      	adds	r7, #48	@ 0x30
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}
 800a018:	08023368 	.word	0x08023368

0800a01c <xIsExtHeader>:
 * @param[in] ucNextHeader Next header, such as ipIPv6_EXT_HEADER_HOP_BY_HOP.
 *
 * @return pdTRUE if it's extension header, otherwise pdFALSE.
 */
    static BaseType_t xIsExtHeader( uint8_t ucNextHeader )
    {
 800a01c:	b480      	push	{r7}
 800a01e:	b085      	sub	sp, #20
 800a020:	af00      	add	r7, sp, #0
 800a022:	4603      	mov	r3, r0
 800a024:	71fb      	strb	r3, [r7, #7]
        BaseType_t xReturn = pdFALSE;
 800a026:	2300      	movs	r3, #0
 800a028:	60fb      	str	r3, [r7, #12]

        switch( ucNextHeader )
 800a02a:	79fb      	ldrb	r3, [r7, #7]
 800a02c:	2b87      	cmp	r3, #135	@ 0x87
 800a02e:	d016      	beq.n	800a05e <xIsExtHeader+0x42>
 800a030:	2b87      	cmp	r3, #135	@ 0x87
 800a032:	dc16      	bgt.n	800a062 <xIsExtHeader+0x46>
 800a034:	2b00      	cmp	r3, #0
 800a036:	d012      	beq.n	800a05e <xIsExtHeader+0x42>
 800a038:	2b00      	cmp	r3, #0
 800a03a:	db12      	blt.n	800a062 <xIsExtHeader+0x46>
 800a03c:	2b3c      	cmp	r3, #60	@ 0x3c
 800a03e:	dc10      	bgt.n	800a062 <xIsExtHeader+0x46>
 800a040:	2b2b      	cmp	r3, #43	@ 0x2b
 800a042:	db0e      	blt.n	800a062 <xIsExtHeader+0x46>
 800a044:	3b2b      	subs	r3, #43	@ 0x2b
 800a046:	4a0a      	ldr	r2, [pc, #40]	@ (800a070 <xIsExtHeader+0x54>)
 800a048:	fa22 f303 	lsr.w	r3, r2, r3
 800a04c:	f003 0301 	and.w	r3, r3, #1
 800a050:	2b00      	cmp	r3, #0
 800a052:	bf14      	ite	ne
 800a054:	2301      	movne	r3, #1
 800a056:	2300      	moveq	r3, #0
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d001      	beq.n	800a062 <xIsExtHeader+0x46>
            case ipIPv6_EXT_HEADER_FRAGMENT_HEADER:
            case ipIPv6_EXT_HEADER_SECURE_PAYLOAD:
            case ipIPv6_EXT_HEADER_AUTHEN_HEADER:
            case ipIPv6_EXT_HEADER_DESTINATION_OPTIONS:
            case ipIPv6_EXT_HEADER_MOBILITY_HEADER:
                xReturn = pdTRUE;
 800a05e:	2301      	movs	r3, #1
 800a060:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800a062:	68fb      	ldr	r3, [r7, #12]
    }
 800a064:	4618      	mov	r0, r3
 800a066:	3714      	adds	r7, #20
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr
 800a070:	00020183 	.word	0x00020183

0800a074 <xGetIPv6MulticastGroupID>:
 * @param[in] pxIPv6Address The multicast address to filter group ID.
 * @param[out] pxReturnGroupID The buffer to store group ID.
 */
static void xGetIPv6MulticastGroupID( const IPv6_Address_t * pxIPv6Address,
                                      IPv6_Address_t * pxReturnGroupID )
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
    configASSERT( pxIPv6Address != NULL );
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d104      	bne.n	800a08e <xGetIPv6MulticastGroupID+0x1a>
 800a084:	f44f 7189 	mov.w	r1, #274	@ 0x112
 800a088:	480e      	ldr	r0, [pc, #56]	@ (800a0c4 <xGetIPv6MulticastGroupID+0x50>)
 800a08a:	f7f7 f845 	bl	8001118 <vAssertCalled>
    configASSERT( pxReturnGroupID != NULL );
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d104      	bne.n	800a09e <xGetIPv6MulticastGroupID+0x2a>
 800a094:	f240 1113 	movw	r1, #275	@ 0x113
 800a098:	480a      	ldr	r0, [pc, #40]	@ (800a0c4 <xGetIPv6MulticastGroupID+0x50>)
 800a09a:	f7f7 f83d 	bl	8001118 <vAssertCalled>

    pxReturnGroupID->ucBytes[ 0 ] = 0U;
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	701a      	strb	r2, [r3, #0]
    pxReturnGroupID->ucBytes[ 1 ] = 0U;
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	705a      	strb	r2, [r3, #1]
    ( void ) memcpy( &( pxReturnGroupID->ucBytes[ 2 ] ), &( pxIPv6Address->ucBytes[ 2 ] ), 14 );
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	1c98      	adds	r0, r3, #2
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	3302      	adds	r3, #2
 800a0b2:	220e      	movs	r2, #14
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	f016 fc55 	bl	8020964 <memcpy>
}
 800a0ba:	bf00      	nop
 800a0bc:	3708      	adds	r7, #8
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	0802338c 	.word	0x0802338c

0800a0c8 <xIsIPv6Loopback>:
 * @param[in] pxAddress The IP-address being checked.
 *
 * @return pdTRUE if the IP-address is a loopback address or else, pdFALSE.
 */
BaseType_t xIsIPv6Loopback( const IPv6_Address_t * pxAddress )
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	60fb      	str	r3, [r7, #12]

    if( memcmp( pxAddress->ucBytes, FreeRTOS_in6addr_loopback.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2210      	movs	r2, #16
 800a0d8:	4906      	ldr	r1, [pc, #24]	@ (800a0f4 <xIsIPv6Loopback+0x2c>)
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f017 fbd7 	bl	802188e <memcmp>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d101      	bne.n	800a0ea <xIsIPv6Loopback+0x22>
    {
        xReturn = pdTRUE;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3710      	adds	r7, #16
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}
 800a0f4:	08025bdc 	.word	0x08025bdc

0800a0f8 <xIsIPv6AllowedMulticast>:
 * @param[in] pxIPAddress The IP address to be checked.
 *
 * @return Returns pdTRUE if pxIPAddress is an allowed multicast address, pdFALSE if not.
 */
BaseType_t xIsIPv6AllowedMulticast( const IPv6_Address_t * pxIPAddress )
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b088      	sub	sp, #32
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800a100:	2300      	movs	r3, #0
 800a102:	61fb      	str	r3, [r7, #28]
    IPv6_Address_t xGroupIDAddress;

    if( pxIPAddress->ucBytes[ 0 ] == 0xffU )
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	2bff      	cmp	r3, #255	@ 0xff
 800a10a:	d123      	bne.n	800a154 <xIsIPv6AllowedMulticast+0x5c>
    {
        IPv6MC_GET_GROUP_ID( pxIPAddress, &xGroupIDAddress );
 800a10c:	f107 030c 	add.w	r3, r7, #12
 800a110:	4619      	mov	r1, r3
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f7ff ffae 	bl	800a074 <xGetIPv6MulticastGroupID>

        /* From RFC4291 - sec 2.7, packets from multicast address whose scope field is 0
         * should be silently dropped. */
        if( IPv6MC_GET_SCOPE_VALUE( pxIPAddress ) == 0U )
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	785b      	ldrb	r3, [r3, #1]
 800a11c:	f003 030f 	and.w	r3, r3, #15
 800a120:	2b00      	cmp	r3, #0
 800a122:	d102      	bne.n	800a12a <xIsIPv6AllowedMulticast+0x32>
        {
            xReturn = pdFALSE;
 800a124:	2300      	movs	r3, #0
 800a126:	61fb      	str	r3, [r7, #28]
 800a128:	e014      	b.n	800a154 <xIsIPv6AllowedMulticast+0x5c>
        /* From RFC4291 - sec 2.7.1, packets from predefined multicast address should never be used.
         * - 0xFF00::
         * - 0xFF01::
         * - ..
         * - 0xFF0F:: */
        else if( ( IPv6MC_GET_FLAGS_VALUE( pxIPAddress ) == 0U ) &&
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	785b      	ldrb	r3, [r3, #1]
 800a12e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a132:	2b00      	cmp	r3, #0
 800a134:	d10c      	bne.n	800a150 <xIsIPv6AllowedMulticast+0x58>
                 ( memcmp( xGroupIDAddress.ucBytes, FreeRTOS_in6addr_any.ucBytes, sizeof( IPv6_Address_t ) ) == 0 ) )
 800a136:	f107 030c 	add.w	r3, r7, #12
 800a13a:	2210      	movs	r2, #16
 800a13c:	4908      	ldr	r1, [pc, #32]	@ (800a160 <xIsIPv6AllowedMulticast+0x68>)
 800a13e:	4618      	mov	r0, r3
 800a140:	f017 fba5 	bl	802188e <memcmp>
 800a144:	4603      	mov	r3, r0
        else if( ( IPv6MC_GET_FLAGS_VALUE( pxIPAddress ) == 0U ) &&
 800a146:	2b00      	cmp	r3, #0
 800a148:	d102      	bne.n	800a150 <xIsIPv6AllowedMulticast+0x58>
        {
            xReturn = pdFALSE;
 800a14a:	2300      	movs	r3, #0
 800a14c:	61fb      	str	r3, [r7, #28]
 800a14e:	e001      	b.n	800a154 <xIsIPv6AllowedMulticast+0x5c>
        }
        else
        {
            xReturn = pdTRUE;
 800a150:	2301      	movs	r3, #1
 800a152:	61fb      	str	r3, [r7, #28]
        }
    }

    return xReturn;
 800a154:	69fb      	ldr	r3, [r7, #28]
}
 800a156:	4618      	mov	r0, r3
 800a158:	3720      	adds	r7, #32
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	08025bcc 	.word	0x08025bcc

0800a164 <xCompareIPv6_Address>:
 * @return Returns 0 if it can handle it, else non zero .
 */
BaseType_t xCompareIPv6_Address( const IPv6_Address_t * pxLeft,
                                 const IPv6_Address_t * pxRight,
                                 size_t uxPrefixLength )
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b08a      	sub	sp, #40	@ 0x28
 800a168:	af00      	add	r7, sp, #0
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	607a      	str	r2, [r7, #4]
    /* This variable is initialized by the system to contain the IPv6 multicast address for all nodes. */
    static const struct xIPv6_Address FreeRTOS_in6addr_allnodes = { { 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 } };

    /* 0    2    4    6    8    10   12   14 */
    /* ff02:0000:0000:0000:0000:0001:ff66:4a81 */
    if( ( pxRight->ucBytes[ 0 ] == 0xffU ) &&
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	2bff      	cmp	r3, #255	@ 0xff
 800a176:	d112      	bne.n	800a19e <xCompareIPv6_Address+0x3a>
        ( pxRight->ucBytes[ 1 ] == 0x02U ) &&
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	785b      	ldrb	r3, [r3, #1]
    if( ( pxRight->ucBytes[ 0 ] == 0xffU ) &&
 800a17c:	2b02      	cmp	r3, #2
 800a17e:	d10e      	bne.n	800a19e <xCompareIPv6_Address+0x3a>
        ( pxRight->ucBytes[ 12 ] == 0xffU ) )
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	7b1b      	ldrb	r3, [r3, #12]
        ( pxRight->ucBytes[ 1 ] == 0x02U ) &&
 800a184:	2bff      	cmp	r3, #255	@ 0xff
 800a186:	d10a      	bne.n	800a19e <xCompareIPv6_Address+0x3a>
    {
        /* This is an LLMNR address. */
        xResult = memcmp( &( pxLeft->ucBytes[ 13 ] ), &( pxRight->ucBytes[ 13 ] ), 3 );
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f103 000d 	add.w	r0, r3, #13
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	330d      	adds	r3, #13
 800a192:	2203      	movs	r2, #3
 800a194:	4619      	mov	r1, r3
 800a196:	f017 fb7a 	bl	802188e <memcmp>
 800a19a:	6278      	str	r0, [r7, #36]	@ 0x24
 800a19c:	e069      	b.n	800a272 <xCompareIPv6_Address+0x10e>
    }
    else
    if( memcmp( pxRight->ucBytes, FreeRTOS_in6addr_allnodes.ucBytes, sizeof( IPv6_Address_t ) ) == 0 )
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	2210      	movs	r2, #16
 800a1a2:	4936      	ldr	r1, [pc, #216]	@ (800a27c <xCompareIPv6_Address+0x118>)
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f017 fb72 	bl	802188e <memcmp>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d102      	bne.n	800a1b6 <xCompareIPv6_Address+0x52>
    {
        /* FF02::1 is all node address to reach out all nodes in the same link. */
        xResult = 0;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1b4:	e05d      	b.n	800a272 <xCompareIPv6_Address+0x10e>
    }
    else
    if( ( pxRight->ucBytes[ 0 ] == 0xfeU ) &&
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	2bfe      	cmp	r3, #254	@ 0xfe
 800a1bc:	d10e      	bne.n	800a1dc <xCompareIPv6_Address+0x78>
        ( pxRight->ucBytes[ 1 ] == 0x80U ) &&
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	785b      	ldrb	r3, [r3, #1]
    if( ( pxRight->ucBytes[ 0 ] == 0xfeU ) &&
 800a1c2:	2b80      	cmp	r3, #128	@ 0x80
 800a1c4:	d10a      	bne.n	800a1dc <xCompareIPv6_Address+0x78>
        ( pxLeft->ucBytes[ 0 ] == 0xfeU ) &&
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	781b      	ldrb	r3, [r3, #0]
        ( pxRight->ucBytes[ 1 ] == 0x80U ) &&
 800a1ca:	2bfe      	cmp	r3, #254	@ 0xfe
 800a1cc:	d106      	bne.n	800a1dc <xCompareIPv6_Address+0x78>
        ( pxLeft->ucBytes[ 1 ] == 0x80U ) )
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	785b      	ldrb	r3, [r3, #1]
        ( pxLeft->ucBytes[ 0 ] == 0xfeU ) &&
 800a1d2:	2b80      	cmp	r3, #128	@ 0x80
 800a1d4:	d102      	bne.n	800a1dc <xCompareIPv6_Address+0x78>
    {
        /* Both are local addresses. */
        xResult = 0;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1da:	e04a      	b.n	800a272 <xCompareIPv6_Address+0x10e>
    }
    else
    {
        if( uxPrefixLength == 0U )
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d102      	bne.n	800a1e8 <xCompareIPv6_Address+0x84>
        {
            xResult = 0;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1e6:	e044      	b.n	800a272 <xCompareIPv6_Address+0x10e>
        }
        else if( uxPrefixLength == ( 8U * ipSIZE_OF_IPv6_ADDRESS ) )
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2b80      	cmp	r3, #128	@ 0x80
 800a1ec:	d107      	bne.n	800a1fe <xCompareIPv6_Address+0x9a>
        {
            xResult = memcmp( pxLeft->ucBytes, pxRight->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	68b9      	ldr	r1, [r7, #8]
 800a1f2:	2210      	movs	r2, #16
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f017 fb4a 	bl	802188e <memcmp>
 800a1fa:	6278      	str	r0, [r7, #36]	@ 0x24
 800a1fc:	e039      	b.n	800a272 <xCompareIPv6_Address+0x10e>
        }
        else
        {
            size_t uxLength = uxPrefixLength / 8U;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	08db      	lsrs	r3, r3, #3
 800a202:	623b      	str	r3, [r7, #32]

            xResult = 0;
 800a204:	2300      	movs	r3, #0
 800a206:	627b      	str	r3, [r7, #36]	@ 0x24

            if( uxLength > 0U )
 800a208:	6a3b      	ldr	r3, [r7, #32]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d006      	beq.n	800a21c <xCompareIPv6_Address+0xb8>
            {
                xResult = memcmp( pxLeft->ucBytes, pxRight->ucBytes, uxLength );
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	68b9      	ldr	r1, [r7, #8]
 800a212:	6a3a      	ldr	r2, [r7, #32]
 800a214:	4618      	mov	r0, r3
 800a216:	f017 fb3a 	bl	802188e <memcmp>
 800a21a:	6278      	str	r0, [r7, #36]	@ 0x24
            }

            if( ( xResult == 0 ) && ( ( uxPrefixLength % 8U ) != 0U ) )
 800a21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d127      	bne.n	800a272 <xCompareIPv6_Address+0x10e>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f003 0307 	and.w	r3, r3, #7
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d022      	beq.n	800a272 <xCompareIPv6_Address+0x10e>
            {
                /* One byte has both a network- and a host-address. */
                size_t uxBits = uxPrefixLength % 8U;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f003 0307 	and.w	r3, r3, #7
 800a232:	61fb      	str	r3, [r7, #28]
                size_t uxHostLen = 8U - uxBits;
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	f1c3 0308 	rsb	r3, r3, #8
 800a23a:	61bb      	str	r3, [r7, #24]
                uint32_t uxHostMask = ( ( ( uint32_t ) 1U ) << uxHostLen ) - 1U;
 800a23c:	2201      	movs	r2, #1
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	fa02 f303 	lsl.w	r3, r2, r3
 800a244:	3b01      	subs	r3, #1
 800a246:	617b      	str	r3, [r7, #20]
                uint8_t ucNetMask = ( uint8_t ) ~( uxHostMask );
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	43db      	mvns	r3, r3
 800a24e:	74fb      	strb	r3, [r7, #19]

                if( ( pxLeft->ucBytes[ uxLength ] & ucNetMask ) != ( pxRight->ucBytes[ uxLength ] & ucNetMask ) )
 800a250:	68fa      	ldr	r2, [r7, #12]
 800a252:	6a3b      	ldr	r3, [r7, #32]
 800a254:	4413      	add	r3, r2
 800a256:	781a      	ldrb	r2, [r3, #0]
 800a258:	68b9      	ldr	r1, [r7, #8]
 800a25a:	6a3b      	ldr	r3, [r7, #32]
 800a25c:	440b      	add	r3, r1
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	4053      	eors	r3, r2
 800a262:	b2da      	uxtb	r2, r3
 800a264:	7cfb      	ldrb	r3, [r7, #19]
 800a266:	4013      	ands	r3, r2
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d001      	beq.n	800a272 <xCompareIPv6_Address+0x10e>
                {
                    xResult = 1;
 800a26e:	2301      	movs	r3, #1
 800a270:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }
        }
    }

    return xResult;
 800a272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a274:	4618      	mov	r0, r3
 800a276:	3728      	adds	r7, #40	@ 0x28
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	08025bec 	.word	0x08025bec

0800a280 <prvAllowIPPacketIPv6>:
 * @return Whether the packet should be processed or dropped.
 */
eFrameProcessingResult_t prvAllowIPPacketIPv6( const IPHeader_IPv6_t * const pxIPv6Header,
                                               const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                               UBaseType_t uxHeaderLength )
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b086      	sub	sp, #24
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	607a      	str	r2, [r7, #4]
    }
    #else /* if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) */
    {
        ( void ) pxIPv6Header;
        /* The packet has been checked by the network interface. */
        eReturn = eProcessBuffer;
 800a28c:	2301      	movs	r3, #1
 800a28e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
    {
        if( eReturn == eProcessBuffer )
 800a290:	7dfb      	ldrb	r3, [r7, #23]
 800a292:	2b01      	cmp	r3, #1
 800a294:	d10c      	bne.n	800a2b0 <prvAllowIPPacketIPv6+0x30>
        {
            if( xCheckIPv6SizeFields( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength ) != pdPASS )
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a29e:	4619      	mov	r1, r3
 800a2a0:	4610      	mov	r0, r2
 800a2a2:	f7ff fdfd 	bl	8009ea0 <xCheckIPv6SizeFields>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d001      	beq.n	800a2b0 <prvAllowIPPacketIPv6+0x30>
            {
                /* Some of the length checks were not successful. */
                eReturn = eReleaseBuffer;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	75fb      	strb	r3, [r7, #23]
        ( void ) pxNetworkBuffer;
    }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */
    ( void ) uxHeaderLength;

    return eReturn;
 800a2b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3718      	adds	r7, #24
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
	...

0800a2bc <xGetExtensionOrder>:
 *
 * @return Extension header order in the packet.
 */
BaseType_t xGetExtensionOrder( uint8_t ucProtocol,
                               uint8_t ucNextHeader )
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	460a      	mov	r2, r1
 800a2c6:	71fb      	strb	r3, [r7, #7]
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	71bb      	strb	r3, [r7, #6]
    BaseType_t xReturn;

    switch( ucProtocol )
 800a2cc:	79fb      	ldrb	r3, [r7, #7]
 800a2ce:	2b87      	cmp	r3, #135	@ 0x87
 800a2d0:	d04b      	beq.n	800a36a <xGetExtensionOrder+0xae>
 800a2d2:	2b87      	cmp	r3, #135	@ 0x87
 800a2d4:	dc4c      	bgt.n	800a370 <xGetExtensionOrder+0xb4>
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d030      	beq.n	800a33c <xGetExtensionOrder+0x80>
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	db48      	blt.n	800a370 <xGetExtensionOrder+0xb4>
 800a2de:	2b3c      	cmp	r3, #60	@ 0x3c
 800a2e0:	dc46      	bgt.n	800a370 <xGetExtensionOrder+0xb4>
 800a2e2:	2b2b      	cmp	r3, #43	@ 0x2b
 800a2e4:	db44      	blt.n	800a370 <xGetExtensionOrder+0xb4>
 800a2e6:	3b2b      	subs	r3, #43	@ 0x2b
 800a2e8:	2b11      	cmp	r3, #17
 800a2ea:	d841      	bhi.n	800a370 <xGetExtensionOrder+0xb4>
 800a2ec:	a201      	add	r2, pc, #4	@ (adr r2, 800a2f4 <xGetExtensionOrder+0x38>)
 800a2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f2:	bf00      	nop
 800a2f4:	0800a353 	.word	0x0800a353
 800a2f8:	0800a359 	.word	0x0800a359
 800a2fc:	0800a371 	.word	0x0800a371
 800a300:	0800a371 	.word	0x0800a371
 800a304:	0800a371 	.word	0x0800a371
 800a308:	0800a371 	.word	0x0800a371
 800a30c:	0800a371 	.word	0x0800a371
 800a310:	0800a365 	.word	0x0800a365
 800a314:	0800a35f 	.word	0x0800a35f
 800a318:	0800a371 	.word	0x0800a371
 800a31c:	0800a371 	.word	0x0800a371
 800a320:	0800a371 	.word	0x0800a371
 800a324:	0800a371 	.word	0x0800a371
 800a328:	0800a371 	.word	0x0800a371
 800a32c:	0800a371 	.word	0x0800a371
 800a330:	0800a371 	.word	0x0800a371
 800a334:	0800a371 	.word	0x0800a371
 800a338:	0800a343 	.word	0x0800a343
    {
        case ipIPv6_EXT_HEADER_HOP_BY_HOP:
            xReturn = 1;
 800a33c:	2301      	movs	r3, #1
 800a33e:	60fb      	str	r3, [r7, #12]
            break;
 800a340:	e01b      	b.n	800a37a <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_DESTINATION_OPTIONS:
            xReturn = 7;
 800a342:	2307      	movs	r3, #7
 800a344:	60fb      	str	r3, [r7, #12]

            if( ucNextHeader == ipIPv6_EXT_HEADER_ROUTING_HEADER )
 800a346:	79bb      	ldrb	r3, [r7, #6]
 800a348:	2b2b      	cmp	r3, #43	@ 0x2b
 800a34a:	d115      	bne.n	800a378 <xGetExtensionOrder+0xbc>
            {
                xReturn = 2;
 800a34c:	2302      	movs	r3, #2
 800a34e:	60fb      	str	r3, [r7, #12]
            }

            break;
 800a350:	e012      	b.n	800a378 <xGetExtensionOrder+0xbc>

        case ipIPv6_EXT_HEADER_ROUTING_HEADER:
            xReturn = 3;
 800a352:	2303      	movs	r3, #3
 800a354:	60fb      	str	r3, [r7, #12]
            break;
 800a356:	e010      	b.n	800a37a <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_FRAGMENT_HEADER:
            xReturn = 4;
 800a358:	2304      	movs	r3, #4
 800a35a:	60fb      	str	r3, [r7, #12]
            break;
 800a35c:	e00d      	b.n	800a37a <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_AUTHEN_HEADER:
            xReturn = 5;
 800a35e:	2305      	movs	r3, #5
 800a360:	60fb      	str	r3, [r7, #12]
            break;
 800a362:	e00a      	b.n	800a37a <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_SECURE_PAYLOAD:
            xReturn = 6;
 800a364:	2306      	movs	r3, #6
 800a366:	60fb      	str	r3, [r7, #12]
            break;
 800a368:	e007      	b.n	800a37a <xGetExtensionOrder+0xbe>

        /* Destination options may follow here in case there are no routing options. */
        case ipIPv6_EXT_HEADER_MOBILITY_HEADER:
            xReturn = 8;
 800a36a:	2308      	movs	r3, #8
 800a36c:	60fb      	str	r3, [r7, #12]
            break;
 800a36e:	e004      	b.n	800a37a <xGetExtensionOrder+0xbe>

        default:
            xReturn = -1;
 800a370:	f04f 33ff 	mov.w	r3, #4294967295
 800a374:	60fb      	str	r3, [r7, #12]
            break;
 800a376:	e000      	b.n	800a37a <xGetExtensionOrder+0xbe>
            break;
 800a378:	bf00      	nop
    }

    return xReturn;
 800a37a:	68fb      	ldr	r3, [r7, #12]
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3714      	adds	r7, #20
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr

0800a388 <eHandleIPv6ExtensionHeaders>:
 * @return eProcessBuffer in case the options are removed successfully, otherwise
 *         eReleaseBuffer.
 */
eFrameProcessingResult_t eHandleIPv6ExtensionHeaders( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                      BaseType_t xDoRemove )
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b08e      	sub	sp, #56	@ 0x38
 800a38c:	af02      	add	r7, sp, #8
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eResult = eReleaseBuffer;
 800a392:	2300      	movs	r3, #0
 800a394:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    const size_t uxMaxLength = pxNetworkBuffer->xDataLength;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a39c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    IPPacket_IPv6_t * pxIPPacket_IPv6 = ( ( IPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3a2:	623b      	str	r3, [r7, #32]
    size_t xMoveLen = 0U;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxRemovedBytes = 0U;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	61fb      	str	r3, [r7, #28]
    uint8_t ucNextHeader = 0U;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	72fb      	strb	r3, [r7, #11]
    size_t uxIndex = 0U;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	61bb      	str	r3, [r7, #24]

    uxRemovedBytes = usGetExtensionHeaderLength( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength, &ucNextHeader );
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3bc:	f107 020b 	add.w	r2, r7, #11
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	f000 faa5 	bl	800a910 <usGetExtensionHeaderLength>
 800a3c6:	61f8      	str	r0, [r7, #28]
    uxIndex = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxRemovedBytes;
 800a3c8:	69fb      	ldr	r3, [r7, #28]
 800a3ca:	3336      	adds	r3, #54	@ 0x36
 800a3cc:	61bb      	str	r3, [r7, #24]

    if( uxIndex < uxMaxLength )
 800a3ce:	69ba      	ldr	r2, [r7, #24]
 800a3d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d243      	bcs.n	800a45e <eHandleIPv6ExtensionHeaders+0xd6>
    {
        uint8_t * pucTo;
        const uint8_t * pucFrom;
        uint16_t usPayloadLength = FreeRTOS_ntohs( pxIPPacket_IPv6->xIPHeader.usPayloadLength );
 800a3d6:	6a3b      	ldr	r3, [r7, #32]
 800a3d8:	8a5b      	ldrh	r3, [r3, #18]
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	021b      	lsls	r3, r3, #8
 800a3de:	b21a      	sxth	r2, r3
 800a3e0:	6a3b      	ldr	r3, [r7, #32]
 800a3e2:	8a5b      	ldrh	r3, [r3, #18]
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	0a1b      	lsrs	r3, r3, #8
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	b21b      	sxth	r3, r3
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	b21b      	sxth	r3, r3
 800a3f0:	82fb      	strh	r3, [r7, #22]

        if( uxRemovedBytes >= ( size_t ) usPayloadLength )
 800a3f2:	8afb      	ldrh	r3, [r7, #22]
 800a3f4:	69fa      	ldr	r2, [r7, #28]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d231      	bcs.n	800a45e <eHandleIPv6ExtensionHeaders+0xd6>
        {
            /* Can not remove more bytes than the payload length. */
        }
        else if( xDoRemove == pdTRUE )
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d12e      	bne.n	800a45e <eHandleIPv6ExtensionHeaders+0xd6>
        {
            pxIPPacket_IPv6->xIPHeader.ucNextHeader = ucNextHeader;
 800a400:	7afa      	ldrb	r2, [r7, #11]
 800a402:	6a3b      	ldr	r3, [r7, #32]
 800a404:	751a      	strb	r2, [r3, #20]
            pucTo = &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ] );
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a40a:	3336      	adds	r3, #54	@ 0x36
 800a40c:	613b      	str	r3, [r7, #16]
            pucFrom = &( pxNetworkBuffer->pucEthernetBuffer[ uxIndex ] );
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	4413      	add	r3, r2
 800a416:	60fb      	str	r3, [r7, #12]
            xMoveLen = uxMaxLength - uxIndex;
 800a418:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	1ad3      	subs	r3, r2, r3
 800a41e:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memmove( pucTo, pucFrom, xMoveLen );
 800a420:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a422:	68f9      	ldr	r1, [r7, #12]
 800a424:	6938      	ldr	r0, [r7, #16]
 800a426:	f017 fa42 	bl	80218ae <memmove>
            pxNetworkBuffer->xDataLength -= uxRemovedBytes;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a42e:	69fb      	ldr	r3, [r7, #28]
 800a430:	1ad2      	subs	r2, r2, r3
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	629a      	str	r2, [r3, #40]	@ 0x28

            usPayloadLength = ( uint16_t ) ( usPayloadLength - uxRemovedBytes );
 800a436:	69fb      	ldr	r3, [r7, #28]
 800a438:	b29b      	uxth	r3, r3
 800a43a:	8afa      	ldrh	r2, [r7, #22]
 800a43c:	1ad3      	subs	r3, r2, r3
 800a43e:	82fb      	strh	r3, [r7, #22]
            pxIPPacket_IPv6->xIPHeader.usPayloadLength = FreeRTOS_htons( usPayloadLength );
 800a440:	8afb      	ldrh	r3, [r7, #22]
 800a442:	021b      	lsls	r3, r3, #8
 800a444:	b21a      	sxth	r2, r3
 800a446:	8afb      	ldrh	r3, [r7, #22]
 800a448:	0a1b      	lsrs	r3, r3, #8
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	b21b      	sxth	r3, r3
 800a44e:	4313      	orrs	r3, r2
 800a450:	b21b      	sxth	r3, r3
 800a452:	b29a      	uxth	r2, r3
 800a454:	6a3b      	ldr	r3, [r7, #32]
 800a456:	825a      	strh	r2, [r3, #18]
            eResult = eProcessBuffer;
 800a458:	2301      	movs	r3, #1
 800a45a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* xDoRemove is false, so the function is not supposed to
             * remove extension headers. */
        }
    }

    FreeRTOS_printf( ( "Extension headers : %s Truncated %u bytes. Removed %u, Payload %u xDataLength now %u\n",
 800a45e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a462:	2b01      	cmp	r3, #1
 800a464:	d101      	bne.n	800a46a <eHandleIPv6ExtensionHeaders+0xe2>
 800a466:	4910      	ldr	r1, [pc, #64]	@ (800a4a8 <eHandleIPv6ExtensionHeaders+0x120>)
 800a468:	e000      	b.n	800a46c <eHandleIPv6ExtensionHeaders+0xe4>
 800a46a:	4910      	ldr	r1, [pc, #64]	@ (800a4ac <eHandleIPv6ExtensionHeaders+0x124>)
 800a46c:	6a3b      	ldr	r3, [r7, #32]
 800a46e:	8a5b      	ldrh	r3, [r3, #18]
 800a470:	b29b      	uxth	r3, r3
 800a472:	021b      	lsls	r3, r3, #8
 800a474:	b21a      	sxth	r2, r3
 800a476:	6a3b      	ldr	r3, [r7, #32]
 800a478:	8a5b      	ldrh	r3, [r3, #18]
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	0a1b      	lsrs	r3, r3, #8
 800a47e:	b29b      	uxth	r3, r3
 800a480:	b21b      	sxth	r3, r3
 800a482:	4313      	orrs	r3, r2
 800a484:	b21b      	sxth	r3, r3
 800a486:	b29b      	uxth	r3, r3
 800a488:	461a      	mov	r2, r3
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a48e:	9301      	str	r3, [sp, #4]
 800a490:	9200      	str	r2, [sp, #0]
 800a492:	69fb      	ldr	r3, [r7, #28]
 800a494:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a496:	4806      	ldr	r0, [pc, #24]	@ (800a4b0 <eHandleIPv6ExtensionHeaders+0x128>)
 800a498:	f016 f848 	bl	802052c <lUDPLoggingPrintf>
                       ( eResult == eProcessBuffer ) ? "good" : "bad",
                       ( unsigned ) xMoveLen,
                       ( unsigned ) uxRemovedBytes,
                       FreeRTOS_ntohs( pxIPPacket_IPv6->xIPHeader.usPayloadLength ),
                       ( unsigned ) pxNetworkBuffer->xDataLength ) );
    return eResult;
 800a49c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3730      	adds	r7, #48	@ 0x30
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	080233bc 	.word	0x080233bc
 800a4ac:	080233c4 	.word	0x080233c4
 800a4b0:	080233c8 	.word	0x080233c8

0800a4b4 <pxTCPSocketLookup_IPv6>:
 * @param[in] pxAddress The IPv4/IPv6 address.
 * @return The socket in case it is connected to the remote IP-address.
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup_IPv6( FreeRTOS_Socket_t * pxSocket,
                                                const IPv46_Address_t * pxAddress )
    {
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxResult = NULL;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	60fb      	str	r3, [r7, #12]

        if( ( pxSocket != NULL ) && ( pxAddress != NULL ) )
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d026      	beq.n	800a516 <pxTCPSocketLookup_IPv6+0x62>
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d023      	beq.n	800a516 <pxTCPSocketLookup_IPv6+0x62>
        {
            if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	7a1b      	ldrb	r3, [r3, #8]
 800a4d2:	f003 0301 	and.w	r3, r3, #1
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d010      	beq.n	800a4fe <pxTCPSocketLookup_IPv6+0x4a>
            {
                if( pxAddress->xIs_IPv6 != pdFALSE )
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	691b      	ldr	r3, [r3, #16]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d018      	beq.n	800a516 <pxTCPSocketLookup_IPv6+0x62>
                {
                    if( memcmp( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxAddress->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	3354      	adds	r3, #84	@ 0x54
 800a4e8:	6839      	ldr	r1, [r7, #0]
 800a4ea:	2210      	movs	r2, #16
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f017 f9ce 	bl	802188e <memcmp>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d10e      	bne.n	800a516 <pxTCPSocketLookup_IPv6+0x62>
                    {
                        /* For sockets not in listening mode, find a match with
                         * uxLocalPort, ulRemoteIP AND uxRemotePort. */
                        pxResult = pxSocket;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	60fb      	str	r3, [r7, #12]
 800a4fc:	e00b      	b.n	800a516 <pxTCPSocketLookup_IPv6+0x62>
                    }
                }
            }
            else
            {
                if( pxAddress->xIs_IPv6 == pdFALSE )
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	691b      	ldr	r3, [r3, #16]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d107      	bne.n	800a516 <pxTCPSocketLookup_IPv6+0x62>
                {
                    if( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 == pxAddress->xIPAddress.ulIP_IPv4 )
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d101      	bne.n	800a516 <pxTCPSocketLookup_IPv6+0x62>
                    {
                        /* For sockets not in listening mode, find a match with
                         * uxLocalPort, ulRemoteIP AND uxRemotePort. */
                        pxResult = pxSocket;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	60fb      	str	r3, [r7, #12]
                    }
                }
            }
        }

        return pxResult;
 800a516:	68fb      	ldr	r3, [r7, #12]
    }
 800a518:	4618      	mov	r0, r3
 800a51a:	3710      	adds	r7, #16
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <xSend_UDP_Update_IPv6>:
 * @param[in] pxDestinationAddress The IPv4 socket address.
 * @return  Returns NULL, always.
 */
void * xSend_UDP_Update_IPv6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                              const struct freertos_sockaddr * pxDestinationAddress )
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    UDPPacket_IPv6_t * pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a52e:	60fb      	str	r3, [r7, #12]

    pxNetworkBuffer->xIPAddress.ulIP_IPv4 = 0U;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	615a      	str	r2, [r3, #20]

    configASSERT( pxDestinationAddress != NULL );
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d103      	bne.n	800a544 <xSend_UDP_Update_IPv6+0x24>
 800a53c:	2173      	movs	r1, #115	@ 0x73
 800a53e:	4811      	ldr	r0, [pc, #68]	@ (800a584 <xSend_UDP_Update_IPv6+0x64>)
 800a540:	f7f6 fdea 	bl	8001118 <vAssertCalled>
    ( void ) memcpy( pxUDPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, pxDestinationAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	3308      	adds	r3, #8
 800a54e:	2210      	movs	r2, #16
 800a550:	4619      	mov	r1, r3
 800a552:	f016 fa07 	bl	8020964 <memcpy>
    ( void ) memcpy( pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, pxDestinationAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f103 0014 	add.w	r0, r3, #20
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	3308      	adds	r3, #8
 800a560:	2210      	movs	r2, #16
 800a562:	4619      	mov	r1, r3
 800a564:	f016 f9fe 	bl	8020964 <memcpy>
    pxUDPPacket_IPv6->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800a570:	731a      	strb	r2, [r3, #12]
 800a572:	2200      	movs	r2, #0
 800a574:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800a578:	735a      	strb	r2, [r3, #13]

    return NULL;
 800a57a:	2300      	movs	r3, #0
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3710      	adds	r7, #16
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}
 800a584:	08023420 	.word	0x08023420

0800a588 <cHexToChar>:
 * @brief Converts a 4 bit (nibble) value to a readable hex character, e.g. 14 becomes 'e'.
 * @param usValue  The value to be converted, must be between 0 and 15.
 * @return The character, between '0' and '9', or between 'a' and 'f'.
 */
char cHexToChar( uint16_t usValue )
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b084      	sub	sp, #16
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	4603      	mov	r3, r0
 800a590:	80fb      	strh	r3, [r7, #6]
    char cReturn = '0';
 800a592:	2330      	movs	r3, #48	@ 0x30
 800a594:	73fb      	strb	r3, [r7, #15]

    if( usValue <= 9U )
 800a596:	88fb      	ldrh	r3, [r7, #6]
 800a598:	2b09      	cmp	r3, #9
 800a59a:	d805      	bhi.n	800a5a8 <cHexToChar+0x20>
    {
        cReturn = ( char ) ( cReturn + usValue );
 800a59c:	88fb      	ldrh	r3, [r7, #6]
 800a59e:	b2da      	uxtb	r2, r3
 800a5a0:	7bfb      	ldrb	r3, [r7, #15]
 800a5a2:	4413      	add	r3, r2
 800a5a4:	73fb      	strb	r3, [r7, #15]
 800a5a6:	e010      	b.n	800a5ca <cHexToChar+0x42>
    }
    else if( usValue <= 15U )
 800a5a8:	88fb      	ldrh	r3, [r7, #6]
 800a5aa:	2b0f      	cmp	r3, #15
 800a5ac:	d809      	bhi.n	800a5c2 <cHexToChar+0x3a>
    {
        cReturn = 'a';
 800a5ae:	2361      	movs	r3, #97	@ 0x61
 800a5b0:	73fb      	strb	r3, [r7, #15]
        cReturn = ( char ) ( cReturn + ( usValue - ( uint16_t ) 10 ) );
 800a5b2:	88fb      	ldrh	r3, [r7, #6]
 800a5b4:	b2da      	uxtb	r2, r3
 800a5b6:	7bfb      	ldrb	r3, [r7, #15]
 800a5b8:	4413      	add	r3, r2
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	3b0a      	subs	r3, #10
 800a5be:	73fb      	strb	r3, [r7, #15]
 800a5c0:	e003      	b.n	800a5ca <cHexToChar+0x42>
    }
    else
    {
        /* The value passed to 'usValue' has been and-ed with 0x0f,
         * so this else clause should never be reached. */
        configASSERT( 0 == 1 );
 800a5c2:	21b3      	movs	r1, #179	@ 0xb3
 800a5c4:	4803      	ldr	r0, [pc, #12]	@ (800a5d4 <cHexToChar+0x4c>)
 800a5c6:	f7f6 fda7 	bl	8001118 <vAssertCalled>
    }

    return cReturn;
 800a5ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3710      	adds	r7, #16
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	08023420 	.word	0x08023420

0800a5d8 <uxHexPrintShort>:
 * @return The number of bytes written to 'pcBuffer'.
 */
socklen_t uxHexPrintShort( char * pcBuffer,
                           size_t uxBufferSize,
                           uint16_t usValue )
{
 800a5d8:	b590      	push	{r4, r7, lr}
 800a5da:	b08b      	sub	sp, #44	@ 0x2c
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	60f8      	str	r0, [r7, #12]
 800a5e0:	60b9      	str	r1, [r7, #8]
 800a5e2:	4613      	mov	r3, r2
 800a5e4:	80fb      	strh	r3, [r7, #6]
    const size_t uxNibbleCount = 4U;
 800a5e6:	2304      	movs	r3, #4
 800a5e8:	617b      	str	r3, [r7, #20]
    size_t uxNibble;
    socklen_t uxIndex = 0U;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	623b      	str	r3, [r7, #32]
    uint16_t usShifter = usValue;
 800a5ee:	88fb      	ldrh	r3, [r7, #6]
 800a5f0:	83fb      	strh	r3, [r7, #30]
    BaseType_t xHadNonZero = pdFALSE;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	61bb      	str	r3, [r7, #24]

    for( uxNibble = 0; uxNibble < uxNibbleCount; uxNibble++ )
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5fa:	e026      	b.n	800a64a <uxHexPrintShort+0x72>
    {
        uint16_t usNibble = ( usShifter >> 12 ) & 0x0FU;
 800a5fc:	8bfb      	ldrh	r3, [r7, #30]
 800a5fe:	0b1b      	lsrs	r3, r3, #12
 800a600:	827b      	strh	r3, [r7, #18]

        if( usNibble != 0U )
 800a602:	8a7b      	ldrh	r3, [r7, #18]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d001      	beq.n	800a60c <uxHexPrintShort+0x34>
        {
            xHadNonZero = pdTRUE;
 800a608:	2301      	movs	r3, #1
 800a60a:	61bb      	str	r3, [r7, #24]
        }

        if( ( xHadNonZero != pdFALSE ) || ( uxNibble == ( uxNibbleCount - 1U ) ) )
 800a60c:	69bb      	ldr	r3, [r7, #24]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d104      	bne.n	800a61c <uxHexPrintShort+0x44>
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	3b01      	subs	r3, #1
 800a616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a618:	429a      	cmp	r2, r3
 800a61a:	d110      	bne.n	800a63e <uxHexPrintShort+0x66>
        {
            if( uxIndex >= ( uxBufferSize - 1U ) )
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	3b01      	subs	r3, #1
 800a620:	6a3a      	ldr	r2, [r7, #32]
 800a622:	429a      	cmp	r2, r3
 800a624:	d216      	bcs.n	800a654 <uxHexPrintShort+0x7c>
            {
                break;
            }

            pcBuffer[ uxIndex ] = cHexToChar( usNibble );
 800a626:	68fa      	ldr	r2, [r7, #12]
 800a628:	6a3b      	ldr	r3, [r7, #32]
 800a62a:	18d4      	adds	r4, r2, r3
 800a62c:	8a7b      	ldrh	r3, [r7, #18]
 800a62e:	4618      	mov	r0, r3
 800a630:	f7ff ffaa 	bl	800a588 <cHexToChar>
 800a634:	4603      	mov	r3, r0
 800a636:	7023      	strb	r3, [r4, #0]
            uxIndex++;
 800a638:	6a3b      	ldr	r3, [r7, #32]
 800a63a:	3301      	adds	r3, #1
 800a63c:	623b      	str	r3, [r7, #32]
        }

        usShifter = ( uint16_t ) ( usShifter << 4 );
 800a63e:	8bfb      	ldrh	r3, [r7, #30]
 800a640:	011b      	lsls	r3, r3, #4
 800a642:	83fb      	strh	r3, [r7, #30]
    for( uxNibble = 0; uxNibble < uxNibbleCount; uxNibble++ )
 800a644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a646:	3301      	adds	r3, #1
 800a648:	627b      	str	r3, [r7, #36]	@ 0x24
 800a64a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	429a      	cmp	r2, r3
 800a650:	d3d4      	bcc.n	800a5fc <uxHexPrintShort+0x24>
 800a652:	e000      	b.n	800a656 <uxHexPrintShort+0x7e>
                break;
 800a654:	bf00      	nop
    }

    return uxIndex;
 800a656:	6a3b      	ldr	r3, [r7, #32]
}
 800a658:	4618      	mov	r0, r3
 800a65a:	372c      	adds	r7, #44	@ 0x2c
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd90      	pop	{r4, r7, pc}

0800a660 <prv_ntop6_search_zeros>:
 * @brief Scan the binary IPv6 address and find the longest train of consecutive zero's.
 *        The result of this search will be stored in 'xZeroStart' and 'xZeroLength'.
 * @param pxSet the set of parameters as used by FreeRTOS_inet_ntop6().
 */
void prv_ntop6_search_zeros( struct sNTOP6_Set * pxSet )
{
 800a660:	b480      	push	{r7}
 800a662:	b089      	sub	sp, #36	@ 0x24
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
    BaseType_t xIndex = 0;            /* The index in the IPv6 address: 0..7. */
 800a668:	2300      	movs	r3, #0
 800a66a:	61fb      	str	r3, [r7, #28]
    BaseType_t xCurStart = 0;         /* The position of the first zero found so far. */
 800a66c:	2300      	movs	r3, #0
 800a66e:	61bb      	str	r3, [r7, #24]
    BaseType_t xCurLength = 0;        /* The number of zero's seen so far. */
 800a670:	2300      	movs	r3, #0
 800a672:	617b      	str	r3, [r7, #20]
    const BaseType_t xShortCount = 8; /* An IPv6 address consists of 8 shorts. */
 800a674:	2308      	movs	r3, #8
 800a676:	613b      	str	r3, [r7, #16]

    /* Default: when xZeroStart is negative, it won't match with any xIndex. */
    pxSet->xZeroStart = -1;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f04f 32ff 	mov.w	r2, #4294967295
 800a67e:	605a      	str	r2, [r3, #4]

    /* Look for the longest train of zero's 0:0:0:... */
    for( ; xIndex < xShortCount; xIndex++ )
 800a680:	e02c      	b.n	800a6dc <prv_ntop6_search_zeros+0x7c>
    {
        uint16_t usValue = pxSet->pusAddress[ xIndex ];
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	69fb      	ldr	r3, [r7, #28]
 800a688:	005b      	lsls	r3, r3, #1
 800a68a:	4413      	add	r3, r2
 800a68c:	881b      	ldrh	r3, [r3, #0]
 800a68e:	81fb      	strh	r3, [r7, #14]

        if( usValue == 0U )
 800a690:	89fb      	ldrh	r3, [r7, #14]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d107      	bne.n	800a6a6 <prv_ntop6_search_zeros+0x46>
        {
            if( xCurLength == 0 )
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d101      	bne.n	800a6a0 <prv_ntop6_search_zeros+0x40>
            {
                /* Remember the position of the first zero. */
                xCurStart = xIndex;
 800a69c:	69fb      	ldr	r3, [r7, #28]
 800a69e:	61bb      	str	r3, [r7, #24]
            }

            /* Count consecutive zeros. */
            xCurLength++;
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	617b      	str	r3, [r7, #20]
        }

        if( ( usValue != 0U ) || ( xIndex == ( xShortCount - 1 ) ) )
 800a6a6:	89fb      	ldrh	r3, [r7, #14]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d104      	bne.n	800a6b6 <prv_ntop6_search_zeros+0x56>
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	3b01      	subs	r3, #1
 800a6b0:	69fa      	ldr	r2, [r7, #28]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d10f      	bne.n	800a6d6 <prv_ntop6_search_zeros+0x76>
        {
            /* Has a longer train of zero's been found? */
            if( ( xCurLength > 1 ) && ( pxSet->xZeroLength < xCurLength ) )
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	dd0a      	ble.n	800a6d2 <prv_ntop6_search_zeros+0x72>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	689b      	ldr	r3, [r3, #8]
 800a6c0:	697a      	ldr	r2, [r7, #20]
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	dd05      	ble.n	800a6d2 <prv_ntop6_search_zeros+0x72>
            {
                /* Remember the number of consecutive zeros. */
                pxSet->xZeroLength = xCurLength;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	697a      	ldr	r2, [r7, #20]
 800a6ca:	609a      	str	r2, [r3, #8]
                /* Remember the index of the first zero found. */
                pxSet->xZeroStart = xCurStart;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	69ba      	ldr	r2, [r7, #24]
 800a6d0:	605a      	str	r2, [r3, #4]
            }

            /* Reset the counter of consecutive zeros. */
            xCurLength = 0;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	617b      	str	r3, [r7, #20]
    for( ; xIndex < xShortCount; xIndex++ )
 800a6d6:	69fb      	ldr	r3, [r7, #28]
 800a6d8:	3301      	adds	r3, #1
 800a6da:	61fb      	str	r3, [r7, #28]
 800a6dc:	69fa      	ldr	r2, [r7, #28]
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	dbce      	blt.n	800a682 <prv_ntop6_search_zeros+0x22>
        }
    }
}
 800a6e4:	bf00      	nop
 800a6e6:	bf00      	nop
 800a6e8:	3724      	adds	r7, #36	@ 0x24
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr

0800a6f2 <prv_ntop6_write_zeros>:
 *       null-terminated later on.
 */
static BaseType_t prv_ntop6_write_zeros( char * pcDestination,
                                         size_t uxSize,
                                         struct sNTOP6_Set * pxSet )
{
 800a6f2:	b480      	push	{r7}
 800a6f4:	b087      	sub	sp, #28
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	60f8      	str	r0, [r7, #12]
 800a6fa:	60b9      	str	r1, [r7, #8]
 800a6fc:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdPASS;
 800a6fe:	2301      	movs	r3, #1
 800a700:	617b      	str	r3, [r7, #20]
    const BaseType_t xShortCount = 8; /* An IPv6 address consists of 8 shorts. */
 800a702:	2308      	movs	r3, #8
 800a704:	613b      	str	r3, [r7, #16]

    if( pxSet->uxTargetIndex <= ( uxSize - 1U ) )
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	691a      	ldr	r2, [r3, #16]
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	3b01      	subs	r3, #1
 800a70e:	429a      	cmp	r2, r3
 800a710:	d827      	bhi.n	800a762 <prv_ntop6_write_zeros+0x70>
    {
        pcDestination[ pxSet->uxTargetIndex ] = ':';
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	691b      	ldr	r3, [r3, #16]
 800a716:	68fa      	ldr	r2, [r7, #12]
 800a718:	4413      	add	r3, r2
 800a71a:	223a      	movs	r2, #58	@ 0x3a
 800a71c:	701a      	strb	r2, [r3, #0]
        pxSet->uxTargetIndex++;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	691b      	ldr	r3, [r3, #16]
 800a722:	1c5a      	adds	r2, r3, #1
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	611a      	str	r2, [r3, #16]

        if( ( pxSet->xIndex + pxSet->xZeroLength ) == xShortCount )
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	68da      	ldr	r2, [r3, #12]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	4413      	add	r3, r2
 800a732:	693a      	ldr	r2, [r7, #16]
 800a734:	429a      	cmp	r2, r3
 800a736:	d116      	bne.n	800a766 <prv_ntop6_write_zeros+0x74>
        {
            /* Reached the last index, write a second ":". */
            if( pxSet->uxTargetIndex <= ( uxSize - 1U ) )
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	691a      	ldr	r2, [r3, #16]
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	3b01      	subs	r3, #1
 800a740:	429a      	cmp	r2, r3
 800a742:	d80b      	bhi.n	800a75c <prv_ntop6_write_zeros+0x6a>
            {
                pcDestination[ pxSet->uxTargetIndex ] = ':';
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	691b      	ldr	r3, [r3, #16]
 800a748:	68fa      	ldr	r2, [r7, #12]
 800a74a:	4413      	add	r3, r2
 800a74c:	223a      	movs	r2, #58	@ 0x3a
 800a74e:	701a      	strb	r2, [r3, #0]
                pxSet->uxTargetIndex++;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	691b      	ldr	r3, [r3, #16]
 800a754:	1c5a      	adds	r2, r3, #1
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	611a      	str	r2, [r3, #16]
 800a75a:	e004      	b.n	800a766 <prv_ntop6_write_zeros+0x74>
            }
            else
            {
                /* Can not write the second colon. */
                xReturn = pdFAIL;
 800a75c:	2300      	movs	r3, #0
 800a75e:	617b      	str	r3, [r7, #20]
 800a760:	e001      	b.n	800a766 <prv_ntop6_write_zeros+0x74>
        }
    }
    else
    {
        /* Can not write the first colon. */
        xReturn = pdFAIL;
 800a762:	2300      	movs	r3, #0
 800a764:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800a766:	697b      	ldr	r3, [r7, #20]
}
 800a768:	4618      	mov	r0, r3
 800a76a:	371c      	adds	r7, #28
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <prv_ntop6_write_short>:
 *       null-terminated later on.
 */
static BaseType_t prv_ntop6_write_short( char * pcDestination,
                                         size_t uxSize,
                                         struct sNTOP6_Set * pxSet )
{
 800a774:	b590      	push	{r4, r7, lr}
 800a776:	b089      	sub	sp, #36	@ 0x24
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	607a      	str	r2, [r7, #4]
    socklen_t uxLength;
    BaseType_t xReturn = pdPASS;
 800a780:	2301      	movs	r3, #1
 800a782:	61fb      	str	r3, [r7, #28]
    const size_t uxBytesPerShortValue = 4U;
 800a784:	2304      	movs	r3, #4
 800a786:	61bb      	str	r3, [r7, #24]

    if( pxSet->xIndex > 0 )
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	dd13      	ble.n	800a7b8 <prv_ntop6_write_short+0x44>
    {
        if( pxSet->uxTargetIndex >= ( uxSize - 1U ) )
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	691a      	ldr	r2, [r3, #16]
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	3b01      	subs	r3, #1
 800a798:	429a      	cmp	r2, r3
 800a79a:	d302      	bcc.n	800a7a2 <prv_ntop6_write_short+0x2e>
        {
            xReturn = pdFAIL;
 800a79c:	2300      	movs	r3, #0
 800a79e:	61fb      	str	r3, [r7, #28]
 800a7a0:	e00a      	b.n	800a7b8 <prv_ntop6_write_short+0x44>
        }
        else
        {
            pcDestination[ pxSet->uxTargetIndex ] = ':';
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	691b      	ldr	r3, [r3, #16]
 800a7a6:	68fa      	ldr	r2, [r7, #12]
 800a7a8:	4413      	add	r3, r2
 800a7aa:	223a      	movs	r2, #58	@ 0x3a
 800a7ac:	701a      	strb	r2, [r3, #0]
            pxSet->uxTargetIndex++;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	691b      	ldr	r3, [r3, #16]
 800a7b2:	1c5a      	adds	r2, r3, #1
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	611a      	str	r2, [r3, #16]
        }
    }

    if( xReturn == pdPASS )
 800a7b8:	69fb      	ldr	r3, [r7, #28]
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	d130      	bne.n	800a820 <prv_ntop6_write_short+0xac>
    {
        /* If there is enough space to write a short. */
        if( pxSet->uxTargetIndex <= ( uxSize - uxBytesPerShortValue ) )
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	691a      	ldr	r2, [r3, #16]
 800a7c2:	68b9      	ldr	r1, [r7, #8]
 800a7c4:	69bb      	ldr	r3, [r7, #24]
 800a7c6:	1acb      	subs	r3, r1, r3
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d827      	bhi.n	800a81c <prv_ntop6_write_short+0xa8>
        {
            /* Write hex value of short. at most 4 + 1 bytes. */
            uxLength = uxHexPrintShort( &( pcDestination[ pxSet->uxTargetIndex ] ),
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	691b      	ldr	r3, [r3, #16]
 800a7d0:	68fa      	ldr	r2, [r7, #12]
 800a7d2:	18d0      	adds	r0, r2, r3
 800a7d4:	69bb      	ldr	r3, [r7, #24]
 800a7d6:	1c5c      	adds	r4, r3, #1
                                        uxBytesPerShortValue + 1U,
                                        FreeRTOS_ntohs( pxSet->pusAddress[ pxSet->xIndex ] ) );
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	68db      	ldr	r3, [r3, #12]
 800a7e0:	005b      	lsls	r3, r3, #1
 800a7e2:	4413      	add	r3, r2
 800a7e4:	881b      	ldrh	r3, [r3, #0]
 800a7e6:	021b      	lsls	r3, r3, #8
 800a7e8:	b21a      	sxth	r2, r3
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6819      	ldr	r1, [r3, #0]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	68db      	ldr	r3, [r3, #12]
 800a7f2:	005b      	lsls	r3, r3, #1
 800a7f4:	440b      	add	r3, r1
 800a7f6:	881b      	ldrh	r3, [r3, #0]
 800a7f8:	0a1b      	lsrs	r3, r3, #8
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	b21b      	sxth	r3, r3
 800a7fe:	4313      	orrs	r3, r2
 800a800:	b21b      	sxth	r3, r3
            uxLength = uxHexPrintShort( &( pcDestination[ pxSet->uxTargetIndex ] ),
 800a802:	b29b      	uxth	r3, r3
 800a804:	461a      	mov	r2, r3
 800a806:	4621      	mov	r1, r4
 800a808:	f7ff fee6 	bl	800a5d8 <uxHexPrintShort>
 800a80c:	6178      	str	r0, [r7, #20]

            /* uxLength will be non zero and positive always. */
            pxSet->uxTargetIndex += uxLength;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	691a      	ldr	r2, [r3, #16]
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	441a      	add	r2, r3
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	611a      	str	r2, [r3, #16]
 800a81a:	e001      	b.n	800a820 <prv_ntop6_write_short+0xac>
        }
        else
        {
            xReturn = pdFAIL;
 800a81c:	2300      	movs	r3, #0
 800a81e:	61fb      	str	r3, [r7, #28]
        }
    }

    return xReturn;
 800a820:	69fb      	ldr	r3, [r7, #28]
}
 800a822:	4618      	mov	r0, r3
 800a824:	3724      	adds	r7, #36	@ 0x24
 800a826:	46bd      	mov	sp, r7
 800a828:	bd90      	pop	{r4, r7, pc}

0800a82a <FreeRTOS_inet_ntop6>:
 * @return pdPASS if the translation was successful or else pdFAIL.
 */
const char * FreeRTOS_inet_ntop6( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b08a      	sub	sp, #40	@ 0x28
 800a82e:	af00      	add	r7, sp, #0
 800a830:	60f8      	str	r0, [r7, #12]
 800a832:	60b9      	str	r1, [r7, #8]
 800a834:	607a      	str	r2, [r7, #4]
    const char * pcReturn;  /* The return value, which is either 'pcDestination' or NULL. */
    struct sNTOP6_Set xSet; /* A set of values for easy exchange with the helper functions prv_ntop6_xxx(). */

    ( void ) memset( &( xSet ), 0, sizeof( xSet ) );
 800a836:	f107 0310 	add.w	r3, r7, #16
 800a83a:	2214      	movs	r2, #20
 800a83c:	2100      	movs	r1, #0
 800a83e:	4618      	mov	r0, r3
 800a840:	f016 f99d 	bl	8020b7e <memset>

    xSet.pusAddress = pvSource;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	613b      	str	r3, [r7, #16]

    if( uxSize < 3U )
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2b02      	cmp	r3, #2
 800a84c:	d92c      	bls.n	800a8a8 <FreeRTOS_inet_ntop6+0x7e>
    {
        /* Can not even print :: */
    }
    else
    {
        prv_ntop6_search_zeros( &( xSet ) );
 800a84e:	f107 0310 	add.w	r3, r7, #16
 800a852:	4618      	mov	r0, r3
 800a854:	f7ff ff04 	bl	800a660 <prv_ntop6_search_zeros>

        while( xSet.xIndex < 8 )
 800a858:	e01f      	b.n	800a89a <FreeRTOS_inet_ntop6+0x70>
        {
            if( xSet.xIndex == xSet.xZeroStart )
 800a85a:	69fa      	ldr	r2, [r7, #28]
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	429a      	cmp	r2, r3
 800a860:	d10e      	bne.n	800a880 <FreeRTOS_inet_ntop6+0x56>
            {
                if( prv_ntop6_write_zeros( pcDestination, uxSize, &( xSet ) ) == pdFAIL )
 800a862:	f107 0310 	add.w	r3, r7, #16
 800a866:	461a      	mov	r2, r3
 800a868:	6879      	ldr	r1, [r7, #4]
 800a86a:	68b8      	ldr	r0, [r7, #8]
 800a86c:	f7ff ff41 	bl	800a6f2 <prv_ntop6_write_zeros>
 800a870:	4603      	mov	r3, r0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d015      	beq.n	800a8a2 <FreeRTOS_inet_ntop6+0x78>
                {
                    break;
                }

                xSet.xIndex += xSet.xZeroLength;
 800a876:	69fa      	ldr	r2, [r7, #28]
 800a878:	69bb      	ldr	r3, [r7, #24]
 800a87a:	4413      	add	r3, r2
 800a87c:	61fb      	str	r3, [r7, #28]
 800a87e:	e00c      	b.n	800a89a <FreeRTOS_inet_ntop6+0x70>
            }
            else
            {
                if( prv_ntop6_write_short( pcDestination, uxSize, &( xSet ) ) == pdFAIL )
 800a880:	f107 0310 	add.w	r3, r7, #16
 800a884:	461a      	mov	r2, r3
 800a886:	6879      	ldr	r1, [r7, #4]
 800a888:	68b8      	ldr	r0, [r7, #8]
 800a88a:	f7ff ff73 	bl	800a774 <prv_ntop6_write_short>
 800a88e:	4603      	mov	r3, r0
 800a890:	2b00      	cmp	r3, #0
 800a892:	d008      	beq.n	800a8a6 <FreeRTOS_inet_ntop6+0x7c>
                {
                    break;
                }

                xSet.xIndex++;
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	3301      	adds	r3, #1
 800a898:	61fb      	str	r3, [r7, #28]
        while( xSet.xIndex < 8 )
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	2b07      	cmp	r3, #7
 800a89e:	dddc      	ble.n	800a85a <FreeRTOS_inet_ntop6+0x30>
 800a8a0:	e002      	b.n	800a8a8 <FreeRTOS_inet_ntop6+0x7e>
                    break;
 800a8a2:	bf00      	nop
 800a8a4:	e000      	b.n	800a8a8 <FreeRTOS_inet_ntop6+0x7e>
                    break;
 800a8a6:	bf00      	nop
            }
        }
    }

    if( xSet.xIndex < 8 )
 800a8a8:	69fb      	ldr	r3, [r7, #28]
 800a8aa:	2b07      	cmp	r3, #7
 800a8ac:	dc02      	bgt.n	800a8b4 <FreeRTOS_inet_ntop6+0x8a>
    {
        /* Didn't reach the last nibble: clear the string. */
        pcReturn = NULL;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8b2:	e006      	b.n	800a8c2 <FreeRTOS_inet_ntop6+0x98>
    }
    else
    {
        pcDestination[ xSet.uxTargetIndex ] = '\0';
 800a8b4:	6a3b      	ldr	r3, [r7, #32]
 800a8b6:	68ba      	ldr	r2, [r7, #8]
 800a8b8:	4413      	add	r3, r2
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	701a      	strb	r2, [r3, #0]
        pcReturn = pcDestination;
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return pcReturn;
 800a8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3728      	adds	r7, #40	@ 0x28
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <vSetMultiCastIPv6MacAddress>:
 * @param[in] pxAddress IPv6 address.
 * @param[out] pxMACAddress Pointer to MAC address.
 */
void vSetMultiCastIPv6MacAddress( const IPv6_Address_t * pxAddress,
                                  MACAddress_t * pxMACAddress )
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
    pxMACAddress->ucBytes[ 0 ] = 0x33U;
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	2233      	movs	r2, #51	@ 0x33
 800a8da:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = 0x33U;
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	2233      	movs	r2, #51	@ 0x33
 800a8e0:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = pxAddress->ucBytes[ 12 ];
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	7b1a      	ldrb	r2, [r3, #12]
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = pxAddress->ucBytes[ 13 ];
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	7b5a      	ldrb	r2, [r3, #13]
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = pxAddress->ucBytes[ 14 ];
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	7b9a      	ldrb	r2, [r3, #14]
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = pxAddress->ucBytes[ 15 ];
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	7bda      	ldrb	r2, [r3, #15]
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	715a      	strb	r2, [r3, #5]
}
 800a902:	bf00      	nop
 800a904:	370c      	adds	r7, #12
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr
	...

0800a910 <usGetExtensionHeaderLength>:
 * @return The total length of all extension headers, or whole buffer length when error detected.
 */
size_t usGetExtensionHeaderLength( const uint8_t * pucEthernetBuffer,
                                   size_t uxBufferLength,
                                   uint8_t * pucProtocol )
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b08e      	sub	sp, #56	@ 0x38
 800a914:	af02      	add	r7, sp, #8
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	607a      	str	r2, [r7, #4]
    uint8_t ucCurrentHeader;
    const IPPacket_IPv6_t * pxIPPacket_IPv6;
    uint8_t ucNextHeader = 0U;
 800a91c:	2300      	movs	r3, #0
 800a91e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    size_t uxIndex = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER;
 800a922:	2336      	movs	r3, #54	@ 0x36
 800a924:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxHopSize = 0U;
 800a926:	2300      	movs	r3, #0
 800a928:	61fb      	str	r3, [r7, #28]
    BaseType_t xCurrentOrder = 0;
 800a92a:	2300      	movs	r3, #0
 800a92c:	61bb      	str	r3, [r7, #24]
    BaseType_t xNextOrder = 0;
 800a92e:	2300      	movs	r3, #0
 800a930:	617b      	str	r3, [r7, #20]
    size_t uxReturn = uxBufferLength;
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	627b      	str	r3, [r7, #36]	@ 0x24

    if( ( pucEthernetBuffer != NULL ) && ( pucProtocol != NULL ) )
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	f000 808c 	beq.w	800aa56 <usGetExtensionHeaderLength+0x146>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2b00      	cmp	r3, #0
 800a942:	f000 8088 	beq.w	800aa56 <usGetExtensionHeaderLength+0x146>
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxIPPacket_IPv6 = ( ( const IPPacket_IPv6_t * ) pucEthernetBuffer );
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	613b      	str	r3, [r7, #16]
        ucCurrentHeader = pxIPPacket_IPv6->xIPHeader.ucNextHeader;
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	7d1b      	ldrb	r3, [r3, #20]
 800a94e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        /* Check if packet has extension header. */
        if( xGetExtensionOrder( ucCurrentHeader, 0U ) > 0 )
 800a952:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a956:	2100      	movs	r1, #0
 800a958:	4618      	mov	r0, r3
 800a95a:	f7ff fcaf 	bl	800a2bc <xGetExtensionOrder>
 800a95e:	4603      	mov	r3, r0
 800a960:	2b00      	cmp	r3, #0
 800a962:	dd72      	ble.n	800aa4a <usGetExtensionHeaderLength+0x13a>
        {
            while( ( uxIndex + 8U ) < uxBufferLength )
 800a964:	e06b      	b.n	800aa3e <usGetExtensionHeaderLength+0x12e>
            {
                ucNextHeader = pucEthernetBuffer[ uxIndex ];
 800a966:	68fa      	ldr	r2, [r7, #12]
 800a968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a96a:	4413      	add	r3, r2
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                xCurrentOrder = xGetExtensionOrder( ucCurrentHeader, ucNextHeader );
 800a972:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800a976:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a97a:	4611      	mov	r1, r2
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7ff fc9d 	bl	800a2bc <xGetExtensionOrder>
 800a982:	61b8      	str	r0, [r7, #24]

                /* To avoid compile warning if debug print is disabled. */
                ( void ) xCurrentOrder;

                /* Read the length expressed in number of octets. */
                uxHopSize = ( size_t ) pucEthernetBuffer[ uxIndex + 1U ];
 800a984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a986:	3301      	adds	r3, #1
 800a988:	68fa      	ldr	r2, [r7, #12]
 800a98a:	4413      	add	r3, r2
 800a98c:	781b      	ldrb	r3, [r3, #0]
 800a98e:	61fb      	str	r3, [r7, #28]
                /* And multiply by 8 and add the minimum size of 8. */
                uxHopSize = ( uxHopSize * 8U ) + 8U;
 800a990:	69fb      	ldr	r3, [r7, #28]
 800a992:	3301      	adds	r3, #1
 800a994:	00db      	lsls	r3, r3, #3
 800a996:	61fb      	str	r3, [r7, #28]

                if( ( uxIndex + uxHopSize ) >= uxBufferLength )
 800a998:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a99a:	69fb      	ldr	r3, [r7, #28]
 800a99c:	4413      	add	r3, r2
 800a99e:	68ba      	ldr	r2, [r7, #8]
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d806      	bhi.n	800a9b2 <usGetExtensionHeaderLength+0xa2>
                {
                    FreeRTOS_debug_printf( ( "The length %u + %u of extension header is larger than buffer size %u \n", ( unsigned ) uxIndex, ( unsigned ) uxHopSize, ( unsigned ) uxBufferLength ) );
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	69fa      	ldr	r2, [r7, #28]
 800a9a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a9aa:	482d      	ldr	r0, [pc, #180]	@ (800aa60 <usGetExtensionHeaderLength+0x150>)
 800a9ac:	f015 fdbe 	bl	802052c <lUDPLoggingPrintf>
                    break;
 800a9b0:	e051      	b.n	800aa56 <usGetExtensionHeaderLength+0x146>
                }

                uxIndex = uxIndex + uxHopSize;
 800a9b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a9b4:	69fb      	ldr	r3, [r7, #28]
 800a9b6:	4413      	add	r3, r2
 800a9b8:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( ( ucNextHeader == ipPROTOCOL_TCP ) ||
 800a9ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a9be:	2b06      	cmp	r3, #6
 800a9c0:	d007      	beq.n	800a9d2 <usGetExtensionHeaderLength+0xc2>
 800a9c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a9c6:	2b11      	cmp	r3, #17
 800a9c8:	d003      	beq.n	800a9d2 <usGetExtensionHeaderLength+0xc2>
                    ( ucNextHeader == ipPROTOCOL_UDP ) ||
 800a9ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a9ce:	2b3a      	cmp	r3, #58	@ 0x3a
 800a9d0:	d10d      	bne.n	800a9ee <usGetExtensionHeaderLength+0xde>
                    ( ucNextHeader == ipPROTOCOL_ICMP_IPv6 ) )
                {
                    FreeRTOS_debug_printf( ( "Stop at header %u\n", ucNextHeader ) );
 800a9d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	4822      	ldr	r0, [pc, #136]	@ (800aa64 <usGetExtensionHeaderLength+0x154>)
 800a9da:	f015 fda7 	bl	802052c <lUDPLoggingPrintf>

                    uxReturn = uxIndex - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER );
 800a9de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9e0:	3b36      	subs	r3, #54	@ 0x36
 800a9e2:	627b      	str	r3, [r7, #36]	@ 0x24
                    *pucProtocol = ucNextHeader;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800a9ea:	701a      	strb	r2, [r3, #0]
                    break;
 800a9ec:	e033      	b.n	800aa56 <usGetExtensionHeaderLength+0x146>
                }

                xNextOrder = xGetExtensionOrder( ucNextHeader, pucEthernetBuffer[ uxIndex ] );
 800a9ee:	68fa      	ldr	r2, [r7, #12]
 800a9f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9f2:	4413      	add	r3, r2
 800a9f4:	781a      	ldrb	r2, [r3, #0]
 800a9f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a9fa:	4611      	mov	r1, r2
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7ff fc5d 	bl	800a2bc <xGetExtensionOrder>
 800aa02:	6178      	str	r0, [r7, #20]

                FreeRTOS_debug_printf( ( "Going from header %2u (%d) to %2u (%d)\n",
 800aa04:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800aa08:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	9300      	str	r3, [sp, #0]
 800aa10:	4613      	mov	r3, r2
 800aa12:	69ba      	ldr	r2, [r7, #24]
 800aa14:	4814      	ldr	r0, [pc, #80]	@ (800aa68 <usGetExtensionHeaderLength+0x158>)
 800aa16:	f015 fd89 	bl	802052c <lUDPLoggingPrintf>
                 * any order and occurring any number of times in the same packet,
                 * except for the Hop-by-Hop Options header which is restricted to
                 * appear immediately after an IPv6 header only. Outlined
                 * by RFC 2460 section 4.1  Extension Header Order.
                 */
                if( xNextOrder == 1 ) /* ipIPv6_EXT_HEADER_HOP_BY_HOP */
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	d103      	bne.n	800aa28 <usGetExtensionHeaderLength+0x118>
                {
                    FreeRTOS_printf( ( "Wrong order. Hop-by-Hop Options header restricted to appear immediately after an IPv6 header\n" ) );
 800aa20:	4812      	ldr	r0, [pc, #72]	@ (800aa6c <usGetExtensionHeaderLength+0x15c>)
 800aa22:	f015 fd83 	bl	802052c <lUDPLoggingPrintf>
                    break;
 800aa26:	e016      	b.n	800aa56 <usGetExtensionHeaderLength+0x146>
                }
                else if( xNextOrder < 0 )
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	da03      	bge.n	800aa36 <usGetExtensionHeaderLength+0x126>
                {
                    FreeRTOS_printf( ( "Invalid extension header detected\n" ) );
 800aa2e:	4810      	ldr	r0, [pc, #64]	@ (800aa70 <usGetExtensionHeaderLength+0x160>)
 800aa30:	f015 fd7c 	bl	802052c <lUDPLoggingPrintf>
                    break;
 800aa34:	e00f      	b.n	800aa56 <usGetExtensionHeaderLength+0x146>
                else
                {
                    /* Do nothing, coverity happy. */
                }

                ucCurrentHeader = ucNextHeader;
 800aa36:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aa3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            while( ( uxIndex + 8U ) < uxBufferLength )
 800aa3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa40:	3308      	adds	r3, #8
 800aa42:	68ba      	ldr	r2, [r7, #8]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d88e      	bhi.n	800a966 <usGetExtensionHeaderLength+0x56>
 800aa48:	e005      	b.n	800aa56 <usGetExtensionHeaderLength+0x146>
            }
        }
        else
        {
            /* No extension headers. */
            *pucProtocol = ucCurrentHeader;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800aa50:	701a      	strb	r2, [r3, #0]
            uxReturn = 0;
 800aa52:	2300      	movs	r3, #0
 800aa54:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    return uxReturn;
 800aa56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3730      	adds	r7, #48	@ 0x30
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}
 800aa60:	08023468 	.word	0x08023468
 800aa64:	080234b0 	.word	0x080234b0
 800aa68:	080234c4 	.word	0x080234c4
 800aa6c:	080234ec 	.word	0x080234ec
 800aa70:	0802354c 	.word	0x0802354c

0800aa74 <vManageSolicitedNodeAddress>:
 * @param[in] pxEndPoint The end-point for which a network up/down event is being handled.
 * @param[in] xNetworkGoingUp pdTRUE when the network goes UP, pdFALSE when the network goes DOWN.
 */
void vManageSolicitedNodeAddress( const struct xNetworkEndPoint * pxEndPoint,
                                  BaseType_t xNetworkGoingUp )
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
    IPv6_Type_t xAddressType;
    MACAddress_t xMACAddress;

    configASSERT( pxEndPoint != NULL );
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d104      	bne.n	800aa8e <vManageSolicitedNodeAddress+0x1a>
 800aa84:	f44f 7199 	mov.w	r1, #306	@ 0x132
 800aa88:	482d      	ldr	r0, [pc, #180]	@ (800ab40 <vManageSolicitedNodeAddress+0xcc>)
 800aa8a:	f7f6 fb45 	bl	8001118 <vAssertCalled>
    configASSERT( pxEndPoint->pxNetworkInterface != NULL );
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d104      	bne.n	800aaa2 <vManageSolicitedNodeAddress+0x2e>
 800aa98:	f240 1133 	movw	r1, #307	@ 0x133
 800aa9c:	4828      	ldr	r0, [pc, #160]	@ (800ab40 <vManageSolicitedNodeAddress+0xcc>)
 800aa9e:	f7f6 fb3b 	bl	8001118 <vAssertCalled>
         * therefore the calculated MAC address will be incorrect. Nothing bad will happen though, because the address
         * type check below will kick us out before the call to pfRemoveAllowedMAC(). Without the check below, the network
         * driver ends up being called once to register 33:33:FF:00:00:00 and that MAC never gets unregistered. */

        /* Solicited-node multicast addresses only apply to normal unicast non-loopback addresses. */
        xAddressType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	3338      	adds	r3, #56	@ 0x38
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f002 f9c2 	bl	800ce30 <xIPv6_GetIPType>
 800aaac:	4603      	mov	r3, r0
 800aaae:	73fb      	strb	r3, [r7, #15]

        if( ( xAddressType != eIPv6_LinkLocal ) && ( xAddressType != eIPv6_SiteLocal ) && ( xAddressType != eIPv6_Global ) )
 800aab0:	7bfb      	ldrb	r3, [r7, #15]
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	d005      	beq.n	800aac2 <vManageSolicitedNodeAddress+0x4e>
 800aab6:	7bfb      	ldrb	r3, [r7, #15]
 800aab8:	2b02      	cmp	r3, #2
 800aaba:	d002      	beq.n	800aac2 <vManageSolicitedNodeAddress+0x4e>
 800aabc:	7bfb      	ldrb	r3, [r7, #15]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d138      	bne.n	800ab34 <vManageSolicitedNodeAddress+0xc0>
             * solicited-node multicast address that we need to manage. Do nothing.*/
            break;
        }

        /* Calculate the multicast MAC that corresponds to this endpoint's IPv6 address. */
        xMACAddress.ucBytes[ 0 ] = ipMULTICAST_MAC_ADDRESS_IPv6_0;
 800aac2:	2333      	movs	r3, #51	@ 0x33
 800aac4:	723b      	strb	r3, [r7, #8]
        xMACAddress.ucBytes[ 1 ] = ipMULTICAST_MAC_ADDRESS_IPv6_0;
 800aac6:	2333      	movs	r3, #51	@ 0x33
 800aac8:	727b      	strb	r3, [r7, #9]
        xMACAddress.ucBytes[ 2 ] = 0xFFU;
 800aaca:	23ff      	movs	r3, #255	@ 0xff
 800aacc:	72bb      	strb	r3, [r7, #10]
        xMACAddress.ucBytes[ 3 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 13 ];
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aad4:	72fb      	strb	r3, [r7, #11]
        xMACAddress.ucBytes[ 4 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 14 ];
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800aadc:	733b      	strb	r3, [r7, #12]
        xMACAddress.ucBytes[ 5 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 15 ];
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800aae4:	737b      	strb	r3, [r7, #13]

        /* Update the network driver filter */
        if( xNetworkGoingUp == pdTRUE )
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d111      	bne.n	800ab10 <vManageSolicitedNodeAddress+0x9c>
        {
            if( pxEndPoint->pxNetworkInterface->pfAddAllowedMAC != NULL )
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800aaf2:	695b      	ldr	r3, [r3, #20]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d01e      	beq.n	800ab36 <vManageSolicitedNodeAddress+0xc2>
            {
                pxEndPoint->pxNetworkInterface->pfAddAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800aafe:	695b      	ldr	r3, [r3, #20]
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	f8d2 2120 	ldr.w	r2, [r2, #288]	@ 0x120
 800ab06:	f107 0108 	add.w	r1, r7, #8
 800ab0a:	4610      	mov	r0, r2
 800ab0c:	4798      	blx	r3
            {
                pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
            }
        }
    } while( pdFALSE );
}
 800ab0e:	e012      	b.n	800ab36 <vManageSolicitedNodeAddress+0xc2>
            if( pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC != NULL )
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800ab16:	699b      	ldr	r3, [r3, #24]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d00c      	beq.n	800ab36 <vManageSolicitedNodeAddress+0xc2>
                pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800ab22:	699b      	ldr	r3, [r3, #24]
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	f8d2 2120 	ldr.w	r2, [r2, #288]	@ 0x120
 800ab2a:	f107 0108 	add.w	r1, r7, #8
 800ab2e:	4610      	mov	r0, r2
 800ab30:	4798      	blx	r3
}
 800ab32:	e000      	b.n	800ab36 <vManageSolicitedNodeAddress+0xc2>
            break;
 800ab34:	bf00      	nop
}
 800ab36:	bf00      	nop
 800ab38:	3710      	adds	r7, #16
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	08023570 	.word	0x08023570

0800ab44 <pxFindLocalEndpoint>:
 * @brief Find the first end-point of type IPv6.
 *
 * @return The first IPv6 end-point found.
 */
    static NetworkEndPoint_t * pxFindLocalEndpoint( void )
    {
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b082      	sub	sp, #8
 800ab48:	af00      	add	r7, sp, #0
        NetworkEndPoint_t * pxEndPoint;

        for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800ab4a:	2000      	movs	r0, #0
 800ab4c:	f001 fd8c 	bl	800c668 <FreeRTOS_FirstEndPoint>
 800ab50:	6078      	str	r0, [r7, #4]
 800ab52:	e016      	b.n	800ab82 <pxFindLocalEndpoint+0x3e>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
        {
            if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ab5a:	f003 0304 	and.w	r3, r3, #4
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d009      	beq.n	800ab78 <pxFindLocalEndpoint+0x34>
            {
                IPv6_Type_t eType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	3338      	adds	r3, #56	@ 0x38
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f002 f961 	bl	800ce30 <xIPv6_GetIPType>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	70fb      	strb	r3, [r7, #3]

                if( eType == eIPv6_LinkLocal )
 800ab72:	78fb      	ldrb	r3, [r7, #3]
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d008      	beq.n	800ab8a <pxFindLocalEndpoint+0x46>
             pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 800ab78:	6879      	ldr	r1, [r7, #4]
 800ab7a:	2000      	movs	r0, #0
 800ab7c:	f001 fd96 	bl	800c6ac <FreeRTOS_NextEndPoint>
 800ab80:	6078      	str	r0, [r7, #4]
             pxEndPoint != NULL;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d1e5      	bne.n	800ab54 <pxFindLocalEndpoint+0x10>
 800ab88:	e000      	b.n	800ab8c <pxFindLocalEndpoint+0x48>
                {
                    break;
 800ab8a:	bf00      	nop
                }
            }
        }

        return pxEndPoint;
 800ab8c:	687b      	ldr	r3, [r7, #4]
    }
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3708      	adds	r7, #8
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <prvMACResolve>:
 * @return An enum, either eARPCacheHit or eARPCacheMiss.
 */
    static eARPLookupResult_t prvMACResolve( const IPv6_Address_t * pxAddressToLookup,
                                             MACAddress_t * const pxMACAddress,
                                             NetworkEndPoint_t ** ppxEndPoint )
    {
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b086      	sub	sp, #24
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	60f8      	str	r0, [r7, #12]
 800ab9e:	60b9      	str	r1, [r7, #8]
 800aba0:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;

        /* Mostly used multi-cast address is ff02::. */
        if( xIsIPv6AllowedMulticast( pxAddressToLookup ) != pdFALSE )
 800aba2:	68f8      	ldr	r0, [r7, #12]
 800aba4:	f7ff faa8 	bl	800a0f8 <xIsIPv6AllowedMulticast>
 800aba8:	4603      	mov	r3, r0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d00e      	beq.n	800abcc <prvMACResolve+0x36>
        {
            vSetMultiCastIPv6MacAddress( pxAddressToLookup, pxMACAddress );
 800abae:	68b9      	ldr	r1, [r7, #8]
 800abb0:	68f8      	ldr	r0, [r7, #12]
 800abb2:	f7ff fe8b 	bl	800a8cc <vSetMultiCastIPv6MacAddress>

            if( ppxEndPoint != NULL )
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d004      	beq.n	800abc6 <prvMACResolve+0x30>
            {
                *ppxEndPoint = pxFindLocalEndpoint();
 800abbc:	f7ff ffc2 	bl	800ab44 <pxFindLocalEndpoint>
 800abc0:	4602      	mov	r2, r0
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	601a      	str	r2, [r3, #0]
            }

            eReturn = eARPCacheHit;
 800abc6:	2301      	movs	r3, #1
 800abc8:	75fb      	strb	r3, [r7, #23]
 800abca:	e001      	b.n	800abd0 <prvMACResolve+0x3a>
        }
        else
        {
            /* Not a multicast IP address. */
            eReturn = eARPCacheMiss;
 800abcc:	2300      	movs	r3, #0
 800abce:	75fb      	strb	r3, [r7, #23]
        }

        return eReturn;
 800abd0:	7dfb      	ldrb	r3, [r7, #23]
    }
 800abd2:	4618      	mov	r0, r3
 800abd4:	3718      	adds	r7, #24
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
	...

0800abdc <eNDGetCacheEntry>:
 * @return An enum which says whether the address was found: eARPCacheHit or eARPCacheMiss.
 */
    eARPLookupResult_t eNDGetCacheEntry( IPv6_Address_t * pxIPAddress,
                                         MACAddress_t * const pxMACAddress,
                                         struct xNetworkEndPoint ** ppxEndPoint )
    {
 800abdc:	b580      	push	{r7, lr}
 800abde:	b088      	sub	sp, #32
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;
        NetworkEndPoint_t * pxEndPoint;

        /* Multi-cast addresses can be resolved immediately. */
        eReturn = prvMACResolve( pxIPAddress, pxMACAddress, ppxEndPoint );
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	68b9      	ldr	r1, [r7, #8]
 800abec:	68f8      	ldr	r0, [r7, #12]
 800abee:	f7ff ffd2 	bl	800ab96 <prvMACResolve>
 800abf2:	4603      	mov	r3, r0
 800abf4:	77fb      	strb	r3, [r7, #31]

        if( eReturn == eARPCacheMiss )
 800abf6:	7ffb      	ldrb	r3, [r7, #31]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d106      	bne.n	800ac0a <eNDGetCacheEntry+0x2e>
        {
            /* See if the IP-address has an entry in the cache. */
            eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	68b9      	ldr	r1, [r7, #8]
 800ac00:	68f8      	ldr	r0, [r7, #12]
 800ac02:	f000 f9a9 	bl	800af58 <prvNDCacheLookup>
 800ac06:	4603      	mov	r3, r0
 800ac08:	77fb      	strb	r3, [r7, #31]
        }

        if( eReturn == eARPCacheMiss )
 800ac0a:	7ffb      	ldrb	r3, [r7, #31]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d104      	bne.n	800ac1a <eNDGetCacheEntry+0x3e>
        {
            FreeRTOS_printf( ( "eNDGetCacheEntry: lookup %pip miss\n", ( void * ) pxIPAddress->ucBytes ) );
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	4619      	mov	r1, r3
 800ac14:	4840      	ldr	r0, [pc, #256]	@ (800ad18 <eNDGetCacheEntry+0x13c>)
 800ac16:	f015 fc89 	bl	802052c <lUDPLoggingPrintf>
        }

        if( eReturn == eARPCacheMiss )
 800ac1a:	7ffb      	ldrb	r3, [r7, #31]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d176      	bne.n	800ad0e <eNDGetCacheEntry+0x132>
        {
            IPv6_Type_t eIPType = xIPv6_GetIPType( pxIPAddress );
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	f002 f905 	bl	800ce30 <xIPv6_GetIPType>
 800ac26:	4603      	mov	r3, r0
 800ac28:	75fb      	strb	r3, [r7, #23]

            pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv6( pxIPAddress );
 800ac2a:	68f8      	ldr	r0, [r7, #12]
 800ac2c:	f001 fdae 	bl	800c78c <FreeRTOS_FindEndPointOnIP_IPv6>
 800ac30:	61b8      	str	r0, [r7, #24]

            if( pxEndPoint != NULL )
 800ac32:	69bb      	ldr	r3, [r7, #24]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d00d      	beq.n	800ac54 <eNDGetCacheEntry+0x78>
            {
                if( ppxEndPoint != NULL )
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d002      	beq.n	800ac44 <eNDGetCacheEntry+0x68>
                {
                    *( ppxEndPoint ) = pxEndPoint;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	69ba      	ldr	r2, [r7, #24]
 800ac42:	601a      	str	r2, [r3, #0]
                }

                FreeRTOS_printf( ( "eNDGetCacheEntry: FindEndPointOnIP failed for %pip (endpoint %pip)\n",
 800ac44:	68f9      	ldr	r1, [r7, #12]
 800ac46:	69bb      	ldr	r3, [r7, #24]
 800ac48:	3338      	adds	r3, #56	@ 0x38
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	4833      	ldr	r0, [pc, #204]	@ (800ad1c <eNDGetCacheEntry+0x140>)
 800ac4e:	f015 fc6d 	bl	802052c <lUDPLoggingPrintf>
 800ac52:	e05c      	b.n	800ad0e <eNDGetCacheEntry+0x132>
                                   ( void * ) pxIPAddress->ucBytes,
                                   ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
            }
            else
            {
                if( eIPType == eIPv6_LinkLocal )
 800ac54:	7dfb      	ldrb	r3, [r7, #23]
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	d12b      	bne.n	800acb2 <eNDGetCacheEntry+0xd6>
                {
                    for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800ac5a:	2000      	movs	r0, #0
 800ac5c:	f001 fd04 	bl	800c668 <FreeRTOS_FirstEndPoint>
 800ac60:	61b8      	str	r0, [r7, #24]
 800ac62:	e017      	b.n	800ac94 <eNDGetCacheEntry+0xb8>
                         pxEndPoint != NULL;
                         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
                    {
                        IPv6_Type_t eMyType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800ac64:	69bb      	ldr	r3, [r7, #24]
 800ac66:	3338      	adds	r3, #56	@ 0x38
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f002 f8e1 	bl	800ce30 <xIPv6_GetIPType>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	75bb      	strb	r3, [r7, #22]

                        if( eMyType == eIPType )
 800ac72:	7dba      	ldrb	r2, [r7, #22]
 800ac74:	7dfb      	ldrb	r3, [r7, #23]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d107      	bne.n	800ac8a <eNDGetCacheEntry+0xae>
                        {
                            eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	68b9      	ldr	r1, [r7, #8]
 800ac7e:	68f8      	ldr	r0, [r7, #12]
 800ac80:	f000 f96a 	bl	800af58 <prvNDCacheLookup>
 800ac84:	4603      	mov	r3, r0
 800ac86:	77fb      	strb	r3, [r7, #31]
                            break;
 800ac88:	e007      	b.n	800ac9a <eNDGetCacheEntry+0xbe>
                         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 800ac8a:	69b9      	ldr	r1, [r7, #24]
 800ac8c:	2000      	movs	r0, #0
 800ac8e:	f001 fd0d 	bl	800c6ac <FreeRTOS_NextEndPoint>
 800ac92:	61b8      	str	r0, [r7, #24]
                         pxEndPoint != NULL;
 800ac94:	69bb      	ldr	r3, [r7, #24]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d1e4      	bne.n	800ac64 <eNDGetCacheEntry+0x88>
                        }
                    }

                    FreeRTOS_printf( ( "eNDGetCacheEntry: LinkLocal %pip \"%s\"\n", ( void * ) pxIPAddress->ucBytes,
 800ac9a:	68f9      	ldr	r1, [r7, #12]
 800ac9c:	7ffb      	ldrb	r3, [r7, #31]
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	d101      	bne.n	800aca6 <eNDGetCacheEntry+0xca>
 800aca2:	4b1f      	ldr	r3, [pc, #124]	@ (800ad20 <eNDGetCacheEntry+0x144>)
 800aca4:	e000      	b.n	800aca8 <eNDGetCacheEntry+0xcc>
 800aca6:	4b1f      	ldr	r3, [pc, #124]	@ (800ad24 <eNDGetCacheEntry+0x148>)
 800aca8:	461a      	mov	r2, r3
 800acaa:	481f      	ldr	r0, [pc, #124]	@ (800ad28 <eNDGetCacheEntry+0x14c>)
 800acac:	f015 fc3e 	bl	802052c <lUDPLoggingPrintf>
 800acb0:	e02d      	b.n	800ad0e <eNDGetCacheEntry+0x132>
                                       ( eReturn == eARPCacheHit ) ? "hit" : "miss" ) );
                }
                else
                {
                    pxEndPoint = FreeRTOS_FindGateWay( ( BaseType_t ) ipTYPE_IPv6 );
 800acb2:	2060      	movs	r0, #96	@ 0x60
 800acb4:	f002 f87c 	bl	800cdb0 <FreeRTOS_FindGateWay>
 800acb8:	61b8      	str	r0, [r7, #24]

                    if( pxEndPoint != NULL )
 800acba:	69bb      	ldr	r3, [r7, #24]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d026      	beq.n	800ad0e <eNDGetCacheEntry+0x132>
                    {
                        ( void ) memcpy( pxIPAddress->ucBytes, pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800acc0:	68f8      	ldr	r0, [r7, #12]
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	335c      	adds	r3, #92	@ 0x5c
 800acc6:	2210      	movs	r2, #16
 800acc8:	4619      	mov	r1, r3
 800acca:	f015 fe4b 	bl	8020964 <memcpy>
                        FreeRTOS_printf( ( "eNDGetCacheEntry: Using gw %pip\n", ( void * ) pxIPAddress->ucBytes ) );
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	4619      	mov	r1, r3
 800acd2:	4816      	ldr	r0, [pc, #88]	@ (800ad2c <eNDGetCacheEntry+0x150>)
 800acd4:	f015 fc2a 	bl	802052c <lUDPLoggingPrintf>
                        FreeRTOS_printf( ( "eNDGetCacheEntry: From addr %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	3338      	adds	r3, #56	@ 0x38
 800acdc:	4619      	mov	r1, r3
 800acde:	4814      	ldr	r0, [pc, #80]	@ (800ad30 <eNDGetCacheEntry+0x154>)
 800ace0:	f015 fc24 	bl	802052c <lUDPLoggingPrintf>

                        /* See if the gateway has an entry in the cache. */
                        eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	68b9      	ldr	r1, [r7, #8]
 800ace8:	68f8      	ldr	r0, [r7, #12]
 800acea:	f000 f935 	bl	800af58 <prvNDCacheLookup>
 800acee:	4603      	mov	r3, r0
 800acf0:	77fb      	strb	r3, [r7, #31]

                        if( *ppxEndPoint != NULL )
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d006      	beq.n	800ad08 <eNDGetCacheEntry+0x12c>
                        {
                            FreeRTOS_printf( ( "eNDGetCacheEntry: found end-point %pip\n", ( void * ) ( *ppxEndPoint )->ipv6_settings.xIPAddress.ucBytes ) );
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	3338      	adds	r3, #56	@ 0x38
 800ad00:	4619      	mov	r1, r3
 800ad02:	480c      	ldr	r0, [pc, #48]	@ (800ad34 <eNDGetCacheEntry+0x158>)
 800ad04:	f015 fc12 	bl	802052c <lUDPLoggingPrintf>
                        }

                        *( ppxEndPoint ) = pxEndPoint;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	69ba      	ldr	r2, [r7, #24]
 800ad0c:	601a      	str	r2, [r3, #0]
                    }
                }
            }
        }

        return eReturn;
 800ad0e:	7ffb      	ldrb	r3, [r7, #31]
    }
 800ad10:	4618      	mov	r0, r3
 800ad12:	3720      	adds	r7, #32
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}
 800ad18:	080235a4 	.word	0x080235a4
 800ad1c:	080235c8 	.word	0x080235c8
 800ad20:	0802360c 	.word	0x0802360c
 800ad24:	08023610 	.word	0x08023610
 800ad28:	08023618 	.word	0x08023618
 800ad2c:	08023640 	.word	0x08023640
 800ad30:	08023664 	.word	0x08023664
 800ad34:	08023688 	.word	0x08023688

0800ad38 <vNDRefreshCacheEntry>:
 *
 */
    void vNDRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                               const IPv6_Address_t * pxIPAddress,
                               NetworkEndPoint_t * pxEndPoint )
    {
 800ad38:	b5b0      	push	{r4, r5, r7, lr}
 800ad3a:	b08e      	sub	sp, #56	@ 0x38
 800ad3c:	af04      	add	r7, sp, #16
 800ad3e:	60f8      	str	r0, [r7, #12]
 800ad40:	60b9      	str	r1, [r7, #8]
 800ad42:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        BaseType_t xFreeEntry = -1, xEntryFound = -1;
 800ad44:	f04f 33ff 	mov.w	r3, #4294967295
 800ad48:	623b      	str	r3, [r7, #32]
 800ad4a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad4e:	61fb      	str	r3, [r7, #28]
        uint16_t xOldestValue = ipconfigMAX_ARP_AGE + 1;
 800ad50:	2397      	movs	r3, #151	@ 0x97
 800ad52:	837b      	strh	r3, [r7, #26]
        BaseType_t xOldestEntry = 0;
 800ad54:	2300      	movs	r3, #0
 800ad56:	617b      	str	r3, [r7, #20]

        /* For each entry in the ND cache table. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800ad58:	2300      	movs	r3, #0
 800ad5a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad5c:	e033      	b.n	800adc6 <vNDRefreshCacheEntry+0x8e>
        {
            if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800ad5e:	4a44      	ldr	r2, [pc, #272]	@ (800ae70 <vNDRefreshCacheEntry+0x138>)
 800ad60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad62:	015b      	lsls	r3, r3, #5
 800ad64:	4413      	add	r3, r2
 800ad66:	331d      	adds	r3, #29
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d106      	bne.n	800ad7c <vNDRefreshCacheEntry+0x44>
            {
                if( xFreeEntry == -1 )
 800ad6e:	6a3b      	ldr	r3, [r7, #32]
 800ad70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad74:	d124      	bne.n	800adc0 <vNDRefreshCacheEntry+0x88>
                {
                    xFreeEntry = x;
 800ad76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad78:	623b      	str	r3, [r7, #32]
 800ad7a:	e021      	b.n	800adc0 <vNDRefreshCacheEntry+0x88>
                }
            }
            else if( memcmp( xNDCache[ x ].xIPAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800ad7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad7e:	015b      	lsls	r3, r3, #5
 800ad80:	4a3b      	ldr	r2, [pc, #236]	@ (800ae70 <vNDRefreshCacheEntry+0x138>)
 800ad82:	4413      	add	r3, r2
 800ad84:	68b9      	ldr	r1, [r7, #8]
 800ad86:	2210      	movs	r2, #16
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f016 fd80 	bl	802188e <memcmp>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d102      	bne.n	800ad9a <vNDRefreshCacheEntry+0x62>
            {
                xEntryFound = x;
 800ad94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad96:	61fb      	str	r3, [r7, #28]
                break;
 800ad98:	e018      	b.n	800adcc <vNDRefreshCacheEntry+0x94>
                 * neighbor advertisement needed for that packet. If we don't store this network advertisement in cache,
                 * the parting of the frame from pxARPWaitingNetworkBuffer will cause the sending of neighbor solicitation
                 * and stores the frame in pxARPWaitingNetworkBuffer. This becomes a vicious circle with thousands of
                 * neighbor solicitation/advertisement packets going back and forth because the ND cache is full.
                 * Overwriting the oldest cache entry is not a fool-proof solution, but it's something. */
                if( xNDCache[ x ].ucAge < xOldestValue )
 800ad9a:	4a35      	ldr	r2, [pc, #212]	@ (800ae70 <vNDRefreshCacheEntry+0x138>)
 800ad9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad9e:	015b      	lsls	r3, r3, #5
 800ada0:	4413      	add	r3, r2
 800ada2:	331c      	adds	r3, #28
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	461a      	mov	r2, r3
 800ada8:	8b7b      	ldrh	r3, [r7, #26]
 800adaa:	4293      	cmp	r3, r2
 800adac:	d908      	bls.n	800adc0 <vNDRefreshCacheEntry+0x88>
                {
                    xOldestValue = xNDCache[ x ].ucAge;
 800adae:	4a30      	ldr	r2, [pc, #192]	@ (800ae70 <vNDRefreshCacheEntry+0x138>)
 800adb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adb2:	015b      	lsls	r3, r3, #5
 800adb4:	4413      	add	r3, r2
 800adb6:	331c      	adds	r3, #28
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	837b      	strh	r3, [r7, #26]
                    xOldestEntry = x;
 800adbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adbe:	617b      	str	r3, [r7, #20]
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800adc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc2:	3301      	adds	r3, #1
 800adc4:	627b      	str	r3, [r7, #36]	@ 0x24
 800adc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc8:	2b17      	cmp	r3, #23
 800adca:	ddc8      	ble.n	800ad5e <vNDRefreshCacheEntry+0x26>
                }
            }
        }

        if( xEntryFound < 0 )
 800adcc:	69fb      	ldr	r3, [r7, #28]
 800adce:	2b00      	cmp	r3, #0
 800add0:	da22      	bge.n	800ae18 <vNDRefreshCacheEntry+0xe0>
        {
            /* The IP-address was not found, use the first free location. */
            if( xFreeEntry >= 0 )
 800add2:	6a3b      	ldr	r3, [r7, #32]
 800add4:	2b00      	cmp	r3, #0
 800add6:	db02      	blt.n	800adde <vNDRefreshCacheEntry+0xa6>
            {
                xEntryFound = xFreeEntry;
 800add8:	6a3b      	ldr	r3, [r7, #32]
 800adda:	61fb      	str	r3, [r7, #28]
 800addc:	e01c      	b.n	800ae18 <vNDRefreshCacheEntry+0xe0>
            }
            else
            {
                /* No free location. Overwrite the oldest. */
                xEntryFound = xOldestEntry;
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	61fb      	str	r3, [r7, #28]
                FreeRTOS_printf( ( "vNDRefreshCacheEntry: Cache FULL! Overwriting oldest entry %i with %02X-%02X-%02X-%02X-%02X-%02X\n", ( int ) xEntryFound, pxMACAddress->ucBytes[ 0 ], pxMACAddress->ucBytes[ 1 ], pxMACAddress->ucBytes[ 2 ], pxMACAddress->ucBytes[ 3 ], pxMACAddress->ucBytes[ 4 ], pxMACAddress->ucBytes[ 5 ] ) );
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	461c      	mov	r4, r3
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	785b      	ldrb	r3, [r3, #1]
 800adec:	461d      	mov	r5, r3
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	789b      	ldrb	r3, [r3, #2]
 800adf2:	461a      	mov	r2, r3
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	78db      	ldrb	r3, [r3, #3]
 800adf8:	4619      	mov	r1, r3
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	791b      	ldrb	r3, [r3, #4]
 800adfe:	4618      	mov	r0, r3
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	795b      	ldrb	r3, [r3, #5]
 800ae04:	9303      	str	r3, [sp, #12]
 800ae06:	9002      	str	r0, [sp, #8]
 800ae08:	9101      	str	r1, [sp, #4]
 800ae0a:	9200      	str	r2, [sp, #0]
 800ae0c:	462b      	mov	r3, r5
 800ae0e:	4622      	mov	r2, r4
 800ae10:	69f9      	ldr	r1, [r7, #28]
 800ae12:	4818      	ldr	r0, [pc, #96]	@ (800ae74 <vNDRefreshCacheEntry+0x13c>)
 800ae14:	f015 fb8a 	bl	802052c <lUDPLoggingPrintf>
            }
        }

        /* At this point, xEntryFound is always a valid index. */
        /* Copy the IP-address. */
        ( void ) memcpy( xNDCache[ xEntryFound ].xIPAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	015b      	lsls	r3, r3, #5
 800ae1c:	4a14      	ldr	r2, [pc, #80]	@ (800ae70 <vNDRefreshCacheEntry+0x138>)
 800ae1e:	4413      	add	r3, r2
 800ae20:	68b9      	ldr	r1, [r7, #8]
 800ae22:	2210      	movs	r2, #16
 800ae24:	4618      	mov	r0, r3
 800ae26:	f015 fd9d 	bl	8020964 <memcpy>
        /* Copy the MAC-address. */
        ( void ) memcpy( xNDCache[ xEntryFound ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( MACAddress_t ) );
 800ae2a:	69fb      	ldr	r3, [r7, #28]
 800ae2c:	015b      	lsls	r3, r3, #5
 800ae2e:	3310      	adds	r3, #16
 800ae30:	4a0f      	ldr	r2, [pc, #60]	@ (800ae70 <vNDRefreshCacheEntry+0x138>)
 800ae32:	4413      	add	r3, r2
 800ae34:	68f9      	ldr	r1, [r7, #12]
 800ae36:	2206      	movs	r2, #6
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f015 fd93 	bl	8020964 <memcpy>
        xNDCache[ xEntryFound ].pxEndPoint = pxEndPoint;
 800ae3e:	4a0c      	ldr	r2, [pc, #48]	@ (800ae70 <vNDRefreshCacheEntry+0x138>)
 800ae40:	69fb      	ldr	r3, [r7, #28]
 800ae42:	015b      	lsls	r3, r3, #5
 800ae44:	4413      	add	r3, r2
 800ae46:	3318      	adds	r3, #24
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	601a      	str	r2, [r3, #0]
        xNDCache[ xEntryFound ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 800ae4c:	4a08      	ldr	r2, [pc, #32]	@ (800ae70 <vNDRefreshCacheEntry+0x138>)
 800ae4e:	69fb      	ldr	r3, [r7, #28]
 800ae50:	015b      	lsls	r3, r3, #5
 800ae52:	4413      	add	r3, r2
 800ae54:	331c      	adds	r3, #28
 800ae56:	2296      	movs	r2, #150	@ 0x96
 800ae58:	701a      	strb	r2, [r3, #0]
        xNDCache[ xEntryFound ].ucValid = ( uint8_t ) pdTRUE;
 800ae5a:	4a05      	ldr	r2, [pc, #20]	@ (800ae70 <vNDRefreshCacheEntry+0x138>)
 800ae5c:	69fb      	ldr	r3, [r7, #28]
 800ae5e:	015b      	lsls	r3, r3, #5
 800ae60:	4413      	add	r3, r2
 800ae62:	331d      	adds	r3, #29
 800ae64:	2201      	movs	r2, #1
 800ae66:	701a      	strb	r2, [r3, #0]
    }
 800ae68:	bf00      	nop
 800ae6a:	3728      	adds	r7, #40	@ 0x28
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bdb0      	pop	{r4, r5, r7, pc}
 800ae70:	20000ed0 	.word	0x20000ed0
 800ae74:	080236b0 	.word	0x080236b0

0800ae78 <vNDAgeCache>:
 * @brief Reduce the age counter in each entry within the ND cache.  An entry is no
 * longer considered valid and is deleted if its age reaches zero.
 * Just before getting to zero, 3 times a neighbour solicitation will be sent.
 */
    void vNDAgeCache( void )
    {
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
        BaseType_t x;

        /* Loop through each entry in the ND cache. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800ae7e:	2300      	movs	r3, #0
 800ae80:	60fb      	str	r3, [r7, #12]
 800ae82:	e05f      	b.n	800af44 <vNDAgeCache+0xcc>
        {
            BaseType_t xDoSolicitate = pdFALSE;
 800ae84:	2300      	movs	r3, #0
 800ae86:	60bb      	str	r3, [r7, #8]

            /* If the entry is valid (its age is greater than zero). */
            if( xNDCache[ x ].ucAge > 0U )
 800ae88:	4a32      	ldr	r2, [pc, #200]	@ (800af54 <vNDAgeCache+0xdc>)
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	015b      	lsls	r3, r3, #5
 800ae8e:	4413      	add	r3, r2
 800ae90:	331c      	adds	r3, #28
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d052      	beq.n	800af3e <vNDAgeCache+0xc6>
            {
                /* Decrement the age value of the entry in this ND cache table row.
                 * When the age reaches zero it is no longer considered valid. */
                ( xNDCache[ x ].ucAge )--;
 800ae98:	4a2e      	ldr	r2, [pc, #184]	@ (800af54 <vNDAgeCache+0xdc>)
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	015b      	lsls	r3, r3, #5
 800ae9e:	4413      	add	r3, r2
 800aea0:	331c      	adds	r3, #28
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	3b01      	subs	r3, #1
 800aea6:	b2d9      	uxtb	r1, r3
 800aea8:	4a2a      	ldr	r2, [pc, #168]	@ (800af54 <vNDAgeCache+0xdc>)
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	015b      	lsls	r3, r3, #5
 800aeae:	4413      	add	r3, r2
 800aeb0:	331c      	adds	r3, #28
 800aeb2:	460a      	mov	r2, r1
 800aeb4:	701a      	strb	r2, [r3, #0]

                if( xNDCache[ x ].ucAge == 0U )
 800aeb6:	4a27      	ldr	r2, [pc, #156]	@ (800af54 <vNDAgeCache+0xdc>)
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	015b      	lsls	r3, r3, #5
 800aebc:	4413      	add	r3, r2
 800aebe:	331c      	adds	r3, #28
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d109      	bne.n	800aeda <vNDAgeCache+0x62>
                {
                    /* The entry is no longer valid.  Wipe it out. */
                    iptraceND_TABLE_ENTRY_EXPIRED( xNDCache[ x ].xIPAddress );
                    ( void ) memset( &( xNDCache[ x ] ), 0, sizeof( xNDCache[ x ] ) );
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	015b      	lsls	r3, r3, #5
 800aeca:	4a22      	ldr	r2, [pc, #136]	@ (800af54 <vNDAgeCache+0xdc>)
 800aecc:	4413      	add	r3, r2
 800aece:	2220      	movs	r2, #32
 800aed0:	2100      	movs	r1, #0
 800aed2:	4618      	mov	r0, r3
 800aed4:	f015 fe53 	bl	8020b7e <memset>
 800aed8:	e031      	b.n	800af3e <vNDAgeCache+0xc6>
                }
                else
                {
                    /* If the entry is not yet valid, then it is waiting an ND
                     * advertisement, and the ND solicitation should be retransmitted. */
                    if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800aeda:	4a1e      	ldr	r2, [pc, #120]	@ (800af54 <vNDAgeCache+0xdc>)
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	015b      	lsls	r3, r3, #5
 800aee0:	4413      	add	r3, r2
 800aee2:	331d      	adds	r3, #29
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d102      	bne.n	800aef0 <vNDAgeCache+0x78>
                    {
                        xDoSolicitate = pdTRUE;
 800aeea:	2301      	movs	r3, #1
 800aeec:	60bb      	str	r3, [r7, #8]
 800aeee:	e009      	b.n	800af04 <vNDAgeCache+0x8c>
                    }
                    else if( xNDCache[ x ].ucAge <= ( uint8_t ) ndMAX_CACHE_AGE_BEFORE_NEW_ND_SOLICITATION )
 800aef0:	4a18      	ldr	r2, [pc, #96]	@ (800af54 <vNDAgeCache+0xdc>)
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	015b      	lsls	r3, r3, #5
 800aef6:	4413      	add	r3, r2
 800aef8:	331c      	adds	r3, #28
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	2b03      	cmp	r3, #3
 800aefe:	d801      	bhi.n	800af04 <vNDAgeCache+0x8c>
                    {
                        /* This entry will get removed soon.  See if the MAC address is
                         * still valid to prevent this happening. */
                        iptraceND_TABLE_ENTRY_WILL_EXPIRE( xNDCache[ x ].xIPAddress );
                        xDoSolicitate = pdTRUE;
 800af00:	2301      	movs	r3, #1
 800af02:	60bb      	str	r3, [r7, #8]
                    else
                    {
                        /* The age has just ticked down, with nothing to do. */
                    }

                    if( xDoSolicitate != pdFALSE )
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d019      	beq.n	800af3e <vNDAgeCache+0xc6>
                    {
                        size_t uxNeededSize;
                        NetworkBufferDescriptor_t * pxNetworkBuffer;

                        uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800af0a:	2356      	movs	r3, #86	@ 0x56
 800af0c:	607b      	str	r3, [r7, #4]
                        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, 0U );
 800af0e:	2100      	movs	r1, #0
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f00b f9b9 	bl	8016288 <pxGetNetworkBufferWithDescriptor>
 800af16:	6038      	str	r0, [r7, #0]

                        if( pxNetworkBuffer != NULL )
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d00f      	beq.n	800af3e <vNDAgeCache+0xc6>
                        {
                            pxNetworkBuffer->pxEndPoint = xNDCache[ x ].pxEndPoint;
 800af1e:	4a0d      	ldr	r2, [pc, #52]	@ (800af54 <vNDAgeCache+0xdc>)
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	015b      	lsls	r3, r3, #5
 800af24:	4413      	add	r3, r2
 800af26:	3318      	adds	r3, #24
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	631a      	str	r2, [r3, #48]	@ 0x30
                            /* _HT_ From here I am suspecting a network buffer leak */
                            vNDSendNeighbourSolicitation( pxNetworkBuffer, &( xNDCache[ x ].xIPAddress ) );
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	015b      	lsls	r3, r3, #5
 800af32:	4a08      	ldr	r2, [pc, #32]	@ (800af54 <vNDAgeCache+0xdc>)
 800af34:	4413      	add	r3, r2
 800af36:	4619      	mov	r1, r3
 800af38:	6838      	ldr	r0, [r7, #0]
 800af3a:	f000 f8bb 	bl	800b0b4 <vNDSendNeighbourSolicitation>
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	3301      	adds	r3, #1
 800af42:	60fb      	str	r3, [r7, #12]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2b17      	cmp	r3, #23
 800af48:	dd9c      	ble.n	800ae84 <vNDAgeCache+0xc>
                        }
                    }
                }
            }
        }
    }
 800af4a:	bf00      	nop
 800af4c:	bf00      	nop
 800af4e:	3710      	adds	r7, #16
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}
 800af54:	20000ed0 	.word	0x20000ed0

0800af58 <prvNDCacheLookup>:
 * @return An enum: either eARPCacheHit or eARPCacheMiss.
 */
    static eARPLookupResult_t prvNDCacheLookup( const IPv6_Address_t * pxAddressToLookup,
                                                MACAddress_t * const pxMACAddress,
                                                NetworkEndPoint_t ** ppxEndPoint )
    {
 800af58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af5a:	b08d      	sub	sp, #52	@ 0x34
 800af5c:	af06      	add	r7, sp, #24
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        eARPLookupResult_t eReturn = eARPCacheMiss;
 800af64:	2300      	movs	r3, #0
 800af66:	74fb      	strb	r3, [r7, #19]

        /* For each entry in the ND cache table. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800af68:	2300      	movs	r3, #0
 800af6a:	617b      	str	r3, [r7, #20]
 800af6c:	e04a      	b.n	800b004 <prvNDCacheLookup+0xac>
        {
            if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800af6e:	4a30      	ldr	r2, [pc, #192]	@ (800b030 <prvNDCacheLookup+0xd8>)
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	015b      	lsls	r3, r3, #5
 800af74:	4413      	add	r3, r2
 800af76:	331d      	adds	r3, #29
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d03f      	beq.n	800affe <prvNDCacheLookup+0xa6>
            {
                /* Skip invalid entries. */
            }
            else if( memcmp( xNDCache[ x ].xIPAddress.ucBytes, pxAddressToLookup->ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	015b      	lsls	r3, r3, #5
 800af82:	4a2b      	ldr	r2, [pc, #172]	@ (800b030 <prvNDCacheLookup+0xd8>)
 800af84:	4413      	add	r3, r2
 800af86:	68f9      	ldr	r1, [r7, #12]
 800af88:	2210      	movs	r2, #16
 800af8a:	4618      	mov	r0, r3
 800af8c:	f016 fc7f 	bl	802188e <memcmp>
 800af90:	4603      	mov	r3, r0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d133      	bne.n	800affe <prvNDCacheLookup+0xa6>
            {
                ( void ) memcpy( pxMACAddress->ucBytes, xNDCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800af96:	68b8      	ldr	r0, [r7, #8]
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	015b      	lsls	r3, r3, #5
 800af9c:	3310      	adds	r3, #16
 800af9e:	4a24      	ldr	r2, [pc, #144]	@ (800b030 <prvNDCacheLookup+0xd8>)
 800afa0:	4413      	add	r3, r2
 800afa2:	2206      	movs	r2, #6
 800afa4:	4619      	mov	r1, r3
 800afa6:	f015 fcdd 	bl	8020964 <memcpy>
                eReturn = eARPCacheHit;
 800afaa:	2301      	movs	r3, #1
 800afac:	74fb      	strb	r3, [r7, #19]

                if( ppxEndPoint != NULL )
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d007      	beq.n	800afc4 <prvNDCacheLookup+0x6c>
                {
                    *ppxEndPoint = xNDCache[ x ].pxEndPoint;
 800afb4:	4a1e      	ldr	r2, [pc, #120]	@ (800b030 <prvNDCacheLookup+0xd8>)
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	015b      	lsls	r3, r3, #5
 800afba:	4413      	add	r3, r2
 800afbc:	3318      	adds	r3, #24
 800afbe:	681a      	ldr	r2, [r3, #0]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	601a      	str	r2, [r3, #0]
                }

                FreeRTOS_debug_printf( ( "prvCacheLookup6[ %d ] %pip with %02x:%02x:%02x:%02x:%02x:%02x\n",
 800afc4:	68fa      	ldr	r2, [r7, #12]
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	461e      	mov	r6, r3
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	785b      	ldrb	r3, [r3, #1]
 800afd0:	4619      	mov	r1, r3
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	789b      	ldrb	r3, [r3, #2]
 800afd6:	4618      	mov	r0, r3
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	78db      	ldrb	r3, [r3, #3]
 800afdc:	461c      	mov	r4, r3
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	791b      	ldrb	r3, [r3, #4]
 800afe2:	461d      	mov	r5, r3
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	795b      	ldrb	r3, [r3, #5]
 800afe8:	9304      	str	r3, [sp, #16]
 800afea:	9503      	str	r5, [sp, #12]
 800afec:	9402      	str	r4, [sp, #8]
 800afee:	9001      	str	r0, [sp, #4]
 800aff0:	9100      	str	r1, [sp, #0]
 800aff2:	4633      	mov	r3, r6
 800aff4:	6979      	ldr	r1, [r7, #20]
 800aff6:	480f      	ldr	r0, [pc, #60]	@ (800b034 <prvNDCacheLookup+0xdc>)
 800aff8:	f015 fa98 	bl	802052c <lUDPLoggingPrintf>
                                         pxMACAddress->ucBytes[ 1 ],
                                         pxMACAddress->ucBytes[ 2 ],
                                         pxMACAddress->ucBytes[ 3 ],
                                         pxMACAddress->ucBytes[ 4 ],
                                         pxMACAddress->ucBytes[ 5 ] ) );
                break;
 800affc:	e005      	b.n	800b00a <prvNDCacheLookup+0xb2>
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	3301      	adds	r3, #1
 800b002:	617b      	str	r3, [r7, #20]
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	2b17      	cmp	r3, #23
 800b008:	ddb1      	ble.n	800af6e <prvNDCacheLookup+0x16>
            {
                /* Entry is valid but the MAC-address doesn't match. */
            }
        }

        if( eReturn == eARPCacheMiss )
 800b00a:	7cfb      	ldrb	r3, [r7, #19]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d10a      	bne.n	800b026 <prvNDCacheLookup+0xce>
        {
            FreeRTOS_printf( ( "prvNDCacheLookup %pip Miss\n", ( void * ) pxAddressToLookup->ucBytes ) );
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	4619      	mov	r1, r3
 800b014:	4808      	ldr	r0, [pc, #32]	@ (800b038 <prvNDCacheLookup+0xe0>)
 800b016:	f015 fa89 	bl	802052c <lUDPLoggingPrintf>

            if( ppxEndPoint != NULL )
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d002      	beq.n	800b026 <prvNDCacheLookup+0xce>
            {
                *ppxEndPoint = NULL;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	601a      	str	r2, [r3, #0]
            }
        }

        return eReturn;
 800b026:	7cfb      	ldrb	r3, [r7, #19]
    }
 800b028:	4618      	mov	r0, r3
 800b02a:	371c      	adds	r7, #28
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b030:	20000ed0 	.word	0x20000ed0
 800b034:	08023714 	.word	0x08023714
 800b038:	08023754 	.word	0x08023754

0800b03c <prvReturnICMP_IPv6>:
 * @param[in] pxNetworkBuffer The Ethernet packet.
 * @param[in] uxICMPSize The number of bytes to be sent.
 */
    static void prvReturnICMP_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                    size_t uxICMPSize )
    {
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b04a:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPPacket_IPv6_t * pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b050:	60bb      	str	r3, [r7, #8]

        ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	3316      	adds	r3, #22
 800b05c:	2210      	movs	r2, #16
 800b05e:	4619      	mov	r1, r3
 800b060:	f015 fc80 	bl	8020964 <memcpy>
        ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	f103 0016 	add.w	r0, r3, #22
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	3338      	adds	r3, #56	@ 0x38
 800b06e:	2210      	movs	r2, #16
 800b070:	4619      	mov	r1, r3
 800b072:	f015 fc77 	bl	8020964 <memcpy>
        pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( uxICMPSize );
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	b29b      	uxth	r3, r3
 800b07a:	021b      	lsls	r3, r3, #8
 800b07c:	b29a      	uxth	r2, r3
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	0a1b      	lsrs	r3, r3, #8
 800b082:	b29b      	uxth	r3, r3
 800b084:	4313      	orrs	r3, r2
 800b086:	b29a      	uxth	r2, r3
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	825a      	strh	r2, [r3, #18]

        /* Important: tell NIC driver how many bytes must be sent */
        pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	629a      	str	r2, [r3, #40]	@ 0x28
        }
        #else
        {
            /* Many EMAC peripherals will only calculate the ICMP checksum
             * correctly if the field is nulled beforehand. */
            pxICMPPacket->xICMPHeaderIPv6.usChecksum = 0;
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	2200      	movs	r2, #0
 800b09a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800b09e:	2200      	movs	r2, #0
 800b0a0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        }
        #endif

        /* This function will fill in the Ethernet addresses and send the packet */
        vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 800b0a4:	2100      	movs	r1, #0
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f7fd fe46 	bl	8008d38 <vReturnEthernetFrame>
    }
 800b0ac:	bf00      	nop
 800b0ae:	3710      	adds	r7, #16
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <vNDSendNeighbourSolicitation>:
 * outstanding so re-transmissions can be generated.
 */

    void vNDSendNeighbourSolicitation( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                       const IPv6_Address_t * pxIPAddress )
    {
 800b0b4:	b5b0      	push	{r4, r5, r7, lr}
 800b0b6:	b090      	sub	sp, #64	@ 0x40
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]
        ICMPPacket_IPv6_t * pxICMPPacket;
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6;
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0c2:	637b      	str	r3, [r7, #52]	@ 0x34
        size_t uxNeededSize;
        IPv6_Address_t xTargetIPAddress;
        MACAddress_t xMultiCastMacAddress;
        NetworkBufferDescriptor_t * pxDescriptor = pxNetworkBuffer;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	633b      	str	r3, [r7, #48]	@ 0x30
        BaseType_t xReleased = pdFALSE;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	63bb      	str	r3, [r7, #56]	@ 0x38

        if( ( pxEndPoint != NULL ) && ( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) )
 800b0d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	f000 80c1 	beq.w	800b25a <vNDSendNeighbourSolicitation+0x1a6>
 800b0d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0da:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b0de:	f003 0304 	and.w	r3, r3, #4
 800b0e2:	b2db      	uxtb	r3, r3
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	f000 80b8 	beq.w	800b25a <vNDSendNeighbourSolicitation+0x1a6>
        {
            uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800b0ea:	2356      	movs	r3, #86	@ 0x56
 800b0ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if( pxDescriptor->xDataLength < uxNeededSize )
 800b0ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d909      	bls.n	800b10c <vNDSendNeighbourSolicitation+0x58>
            {
                pxNewDescriptor = pxDuplicateNetworkBufferWithDescriptor( pxDescriptor, uxNeededSize );
 800b0f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0fa:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b0fc:	f7fe f9ce 	bl	800949c <pxDuplicateNetworkBufferWithDescriptor>
 800b100:	6338      	str	r0, [r7, #48]	@ 0x30
                vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800b102:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b104:	f00b f928 	bl	8016358 <vReleaseNetworkBufferAndDescriptor>
                pxDescriptor = pxNewDescriptor;
 800b108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b10a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }

            if( pxDescriptor != NULL )
 800b10c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b10e:	2b00      	cmp	r3, #0
 800b110:	f000 80a3 	beq.w	800b25a <vNDSendNeighbourSolicitation+0x1a6>
            {
                const uint32_t ulPayloadLength = 32U;
 800b114:	2320      	movs	r3, #32
 800b116:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxDescriptor->pucEthernetBuffer );
 800b118:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b11a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b11c:	627b      	str	r3, [r7, #36]	@ 0x24
                pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800b11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b120:	3336      	adds	r3, #54	@ 0x36
 800b122:	623b      	str	r3, [r7, #32]

                pxDescriptor->xDataLength = uxNeededSize;
 800b124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b126:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b128:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Set the multi-cast MAC-address. */
                xMultiCastMacAddress.ucBytes[ 0 ] = 0x33U;
 800b12a:	2333      	movs	r3, #51	@ 0x33
 800b12c:	723b      	strb	r3, [r7, #8]
                xMultiCastMacAddress.ucBytes[ 1 ] = 0x33U;
 800b12e:	2333      	movs	r3, #51	@ 0x33
 800b130:	727b      	strb	r3, [r7, #9]
                xMultiCastMacAddress.ucBytes[ 2 ] = 0xffU;
 800b132:	23ff      	movs	r3, #255	@ 0xff
 800b134:	72bb      	strb	r3, [r7, #10]
                xMultiCastMacAddress.ucBytes[ 3 ] = pxIPAddress->ucBytes[ 13 ];
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	7b5b      	ldrb	r3, [r3, #13]
 800b13a:	72fb      	strb	r3, [r7, #11]
                xMultiCastMacAddress.ucBytes[ 4 ] = pxIPAddress->ucBytes[ 14 ];
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	7b9b      	ldrb	r3, [r3, #14]
 800b140:	733b      	strb	r3, [r7, #12]
                xMultiCastMacAddress.ucBytes[ 5 ] = pxIPAddress->ucBytes[ 15 ];
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	7bdb      	ldrb	r3, [r3, #15]
 800b146:	737b      	strb	r3, [r7, #13]

                /* Set Ethernet header. Source and Destination will be swapped. */
                ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, xMultiCastMacAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800b148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b14a:	3306      	adds	r3, #6
 800b14c:	461a      	mov	r2, r3
 800b14e:	f107 0308 	add.w	r3, r7, #8
 800b152:	6818      	ldr	r0, [r3, #0]
 800b154:	6010      	str	r0, [r2, #0]
 800b156:	889b      	ldrh	r3, [r3, #4]
 800b158:	8093      	strh	r3, [r2, #4]
                ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800b15a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b15c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b15e:	33e8      	adds	r3, #232	@ 0xe8
 800b160:	2206      	movs	r2, #6
 800b162:	4619      	mov	r1, r3
 800b164:	f015 fbfe 	bl	8020964 <memcpy>
                pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800b168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b16a:	2200      	movs	r2, #0
 800b16c:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800b170:	731a      	strb	r2, [r3, #12]
 800b172:	2200      	movs	r2, #0
 800b174:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800b178:	735a      	strb	r2, [r3, #13]

                /* Set IP-header. */
                pxICMPPacket->xIPHeader.ucVersionTrafficClass = 0x60U;
 800b17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b17c:	2260      	movs	r2, #96	@ 0x60
 800b17e:	739a      	strb	r2, [r3, #14]
                pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0U;
 800b180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b182:	2200      	movs	r2, #0
 800b184:	73da      	strb	r2, [r3, #15]
                pxICMPPacket->xIPHeader.usFlowLabel = 0U;
 800b186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b188:	2200      	movs	r2, #0
 800b18a:	741a      	strb	r2, [r3, #16]
 800b18c:	2200      	movs	r2, #0
 800b18e:	745a      	strb	r2, [r3, #17]
                pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( ulPayloadLength );
 800b190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b192:	b29b      	uxth	r3, r3
 800b194:	021b      	lsls	r3, r3, #8
 800b196:	b29a      	uxth	r2, r3
 800b198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b19a:	0a1b      	lsrs	r3, r3, #8
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	b29a      	uxth	r2, r3
 800b1a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a4:	825a      	strh	r2, [r3, #18]
                pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800b1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a8:	223a      	movs	r2, #58	@ 0x3a
 800b1aa:	751a      	strb	r2, [r3, #20]
                pxICMPPacket->xIPHeader.ucHopLimit = 255U;
 800b1ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ae:	22ff      	movs	r2, #255	@ 0xff
 800b1b0:	755a      	strb	r2, [r3, #21]

                /* Source address */
                ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b4:	f103 0016 	add.w	r0, r3, #22
 800b1b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1ba:	3338      	adds	r3, #56	@ 0x38
 800b1bc:	2210      	movs	r2, #16
 800b1be:	4619      	mov	r1, r3
 800b1c0:	f015 fbd0 	bl	8020964 <memcpy>

                /*ff02::1:ff5a:afe7 */
                ( void ) memset( xTargetIPAddress.ucBytes, 0, sizeof( xTargetIPAddress.ucBytes ) );
 800b1c4:	f107 0310 	add.w	r3, r7, #16
 800b1c8:	2210      	movs	r2, #16
 800b1ca:	2100      	movs	r1, #0
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f015 fcd6 	bl	8020b7e <memset>
                xTargetIPAddress.ucBytes[ 0 ] = 0xff;
 800b1d2:	23ff      	movs	r3, #255	@ 0xff
 800b1d4:	743b      	strb	r3, [r7, #16]
                xTargetIPAddress.ucBytes[ 1 ] = 0x02;
 800b1d6:	2302      	movs	r3, #2
 800b1d8:	747b      	strb	r3, [r7, #17]
                xTargetIPAddress.ucBytes[ 11 ] = 0x01;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	76fb      	strb	r3, [r7, #27]
                xTargetIPAddress.ucBytes[ 12 ] = 0xff;
 800b1de:	23ff      	movs	r3, #255	@ 0xff
 800b1e0:	773b      	strb	r3, [r7, #28]
                xTargetIPAddress.ucBytes[ 13 ] = pxIPAddress->ucBytes[ 13 ];
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	7b5b      	ldrb	r3, [r3, #13]
 800b1e6:	777b      	strb	r3, [r7, #29]
                xTargetIPAddress.ucBytes[ 14 ] = pxIPAddress->ucBytes[ 14 ];
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	7b9b      	ldrb	r3, [r3, #14]
 800b1ec:	77bb      	strb	r3, [r7, #30]
                xTargetIPAddress.ucBytes[ 15 ] = pxIPAddress->ucBytes[ 15 ];
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	7bdb      	ldrb	r3, [r3, #15]
 800b1f2:	77fb      	strb	r3, [r7, #31]
                ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, xTargetIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1f6:	3326      	adds	r3, #38	@ 0x26
 800b1f8:	461d      	mov	r5, r3
 800b1fa:	f107 0410 	add.w	r4, r7, #16
 800b1fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b200:	6028      	str	r0, [r5, #0]
 800b202:	6069      	str	r1, [r5, #4]
 800b204:	60aa      	str	r2, [r5, #8]
 800b206:	60eb      	str	r3, [r5, #12]

                /* Set ICMP header. */
                ( void ) memset( pxICMPHeader_IPv6, 0, sizeof( *pxICMPHeader_IPv6 ) );
 800b208:	2220      	movs	r2, #32
 800b20a:	2100      	movs	r1, #0
 800b20c:	6a38      	ldr	r0, [r7, #32]
 800b20e:	f015 fcb6 	bl	8020b7e <memset>
                pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_SOLICITATION_IPv6;
 800b212:	6a3b      	ldr	r3, [r7, #32]
 800b214:	2287      	movs	r2, #135	@ 0x87
 800b216:	701a      	strb	r2, [r3, #0]
                ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b218:	6a3b      	ldr	r3, [r7, #32]
 800b21a:	3308      	adds	r3, #8
 800b21c:	6839      	ldr	r1, [r7, #0]
 800b21e:	2210      	movs	r2, #16
 800b220:	4618      	mov	r0, r3
 800b222:	f015 fb9f 	bl	8020964 <memcpy>
                pxICMPHeader_IPv6->ucOptionType = ndICMP_SOURCE_LINK_LAYER_ADDRESS;
 800b226:	6a3b      	ldr	r3, [r7, #32]
 800b228:	2201      	movs	r2, #1
 800b22a:	761a      	strb	r2, [r3, #24]
                pxICMPHeader_IPv6->ucOptionLength = 1U; /* times 8 bytes. */
 800b22c:	6a3b      	ldr	r3, [r7, #32]
 800b22e:	2201      	movs	r2, #1
 800b230:	765a      	strb	r2, [r3, #25]
                ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800b232:	6a3b      	ldr	r3, [r7, #32]
 800b234:	f103 001a 	add.w	r0, r3, #26
 800b238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b23a:	33e8      	adds	r3, #232	@ 0xe8
 800b23c:	2206      	movs	r2, #6
 800b23e:	4619      	mov	r1, r3
 800b240:	f015 fb90 	bl	8020964 <memcpy>
                }
                #else
                {
                    /* Many EMAC peripherals will only calculate the ICMP checksum
                     * correctly if the field is nulled beforehand. */
                    pxICMPHeader_IPv6->usChecksum = 0U;
 800b244:	6a3b      	ldr	r3, [r7, #32]
 800b246:	2200      	movs	r2, #0
 800b248:	709a      	strb	r2, [r3, #2]
 800b24a:	2200      	movs	r2, #0
 800b24c:	70da      	strb	r2, [r3, #3]
                }
                #endif

                /* This function will fill in the eth addresses and send the packet */
                vReturnEthernetFrame( pxDescriptor, pdTRUE );
 800b24e:	2101      	movs	r1, #1
 800b250:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b252:	f7fd fd71 	bl	8008d38 <vReturnEthernetFrame>
                xReleased = pdTRUE;
 800b256:	2301      	movs	r3, #1
 800b258:	63bb      	str	r3, [r7, #56]	@ 0x38
            }
        }

        if( ( pxDescriptor != NULL ) && ( xReleased == pdFALSE ) )
 800b25a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d005      	beq.n	800b26c <vNDSendNeighbourSolicitation+0x1b8>
 800b260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b262:	2b00      	cmp	r3, #0
 800b264:	d102      	bne.n	800b26c <vNDSendNeighbourSolicitation+0x1b8>
        {
            vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800b266:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b268:	f00b f876 	bl	8016358 <vReleaseNetworkBufferAndDescriptor>
        }
    }
 800b26c:	bf00      	nop
 800b26e:	3740      	adds	r7, #64	@ 0x40
 800b270:	46bd      	mov	sp, r7
 800b272:	bdb0      	pop	{r4, r5, r7, pc}

0800b274 <pcMessageType>:
 * @param[in] xType The type of message.
 *
 * @return A null-terminated string that represents the type the kind of message.
 */
        static const char * pcMessageType( BaseType_t xType )
        {
 800b274:	b480      	push	{r7}
 800b276:	b085      	sub	sp, #20
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
            const char * pcReturn;

            switch( ( uint8_t ) xType )
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	2b04      	cmp	r3, #4
 800b282:	dc29      	bgt.n	800b2d8 <pcMessageType+0x64>
 800b284:	2b00      	cmp	r3, #0
 800b286:	dc19      	bgt.n	800b2bc <pcMessageType+0x48>
 800b288:	e049      	b.n	800b31e <pcMessageType+0xaa>
 800b28a:	3b80      	subs	r3, #128	@ 0x80
 800b28c:	2b08      	cmp	r3, #8
 800b28e:	d846      	bhi.n	800b31e <pcMessageType+0xaa>
 800b290:	a201      	add	r2, pc, #4	@ (adr r2, 800b298 <pcMessageType+0x24>)
 800b292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b296:	bf00      	nop
 800b298:	0800b2fb 	.word	0x0800b2fb
 800b29c:	0800b301 	.word	0x0800b301
 800b2a0:	0800b31f 	.word	0x0800b31f
 800b2a4:	0800b31f 	.word	0x0800b31f
 800b2a8:	0800b31f 	.word	0x0800b31f
 800b2ac:	0800b307 	.word	0x0800b307
 800b2b0:	0800b30d 	.word	0x0800b30d
 800b2b4:	0800b313 	.word	0x0800b313
 800b2b8:	0800b319 	.word	0x0800b319
 800b2bc:	3b01      	subs	r3, #1
 800b2be:	2b03      	cmp	r3, #3
 800b2c0:	d82d      	bhi.n	800b31e <pcMessageType+0xaa>
 800b2c2:	a201      	add	r2, pc, #4	@ (adr r2, 800b2c8 <pcMessageType+0x54>)
 800b2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c8:	0800b2e3 	.word	0x0800b2e3
 800b2cc:	0800b2e9 	.word	0x0800b2e9
 800b2d0:	0800b2ef 	.word	0x0800b2ef
 800b2d4:	0800b2f5 	.word	0x0800b2f5
 800b2d8:	2b88      	cmp	r3, #136	@ 0x88
 800b2da:	dc20      	bgt.n	800b31e <pcMessageType+0xaa>
 800b2dc:	2b80      	cmp	r3, #128	@ 0x80
 800b2de:	dad4      	bge.n	800b28a <pcMessageType+0x16>
 800b2e0:	e01d      	b.n	800b31e <pcMessageType+0xaa>
            {
                case ipICMP_DEST_UNREACHABLE_IPv6:
                    pcReturn = "DEST_UNREACHABLE";
 800b2e2:	4b14      	ldr	r3, [pc, #80]	@ (800b334 <pcMessageType+0xc0>)
 800b2e4:	60fb      	str	r3, [r7, #12]
                    break;
 800b2e6:	e01d      	b.n	800b324 <pcMessageType+0xb0>

                case ipICMP_PACKET_TOO_BIG_IPv6:
                    pcReturn = "PACKET_TOO_BIG";
 800b2e8:	4b13      	ldr	r3, [pc, #76]	@ (800b338 <pcMessageType+0xc4>)
 800b2ea:	60fb      	str	r3, [r7, #12]
                    break;
 800b2ec:	e01a      	b.n	800b324 <pcMessageType+0xb0>

                case ipICMP_TIME_EXCEEDED_IPv6:
                    pcReturn = "TIME_EXCEEDED";
 800b2ee:	4b13      	ldr	r3, [pc, #76]	@ (800b33c <pcMessageType+0xc8>)
 800b2f0:	60fb      	str	r3, [r7, #12]
                    break;
 800b2f2:	e017      	b.n	800b324 <pcMessageType+0xb0>

                case ipICMP_PARAMETER_PROBLEM_IPv6:
                    pcReturn = "PARAMETER_PROBLEM";
 800b2f4:	4b12      	ldr	r3, [pc, #72]	@ (800b340 <pcMessageType+0xcc>)
 800b2f6:	60fb      	str	r3, [r7, #12]
                    break;
 800b2f8:	e014      	b.n	800b324 <pcMessageType+0xb0>

                case ipICMP_PING_REQUEST_IPv6:
                    pcReturn = "PING_REQUEST";
 800b2fa:	4b12      	ldr	r3, [pc, #72]	@ (800b344 <pcMessageType+0xd0>)
 800b2fc:	60fb      	str	r3, [r7, #12]
                    break;
 800b2fe:	e011      	b.n	800b324 <pcMessageType+0xb0>

                case ipICMP_PING_REPLY_IPv6:
                    pcReturn = "PING_REPLY";
 800b300:	4b11      	ldr	r3, [pc, #68]	@ (800b348 <pcMessageType+0xd4>)
 800b302:	60fb      	str	r3, [r7, #12]
                    break;
 800b304:	e00e      	b.n	800b324 <pcMessageType+0xb0>

                case ipICMP_ROUTER_SOLICITATION_IPv6:
                    pcReturn = "ROUTER_SOL";
 800b306:	4b11      	ldr	r3, [pc, #68]	@ (800b34c <pcMessageType+0xd8>)
 800b308:	60fb      	str	r3, [r7, #12]
                    break;
 800b30a:	e00b      	b.n	800b324 <pcMessageType+0xb0>

                case ipICMP_ROUTER_ADVERTISEMENT_IPv6:
                    pcReturn = "ROUTER_ADV";
 800b30c:	4b10      	ldr	r3, [pc, #64]	@ (800b350 <pcMessageType+0xdc>)
 800b30e:	60fb      	str	r3, [r7, #12]
                    break;
 800b310:	e008      	b.n	800b324 <pcMessageType+0xb0>

                case ipICMP_NEIGHBOR_SOLICITATION_IPv6:
                    pcReturn = "NEIGHBOR_SOL";
 800b312:	4b10      	ldr	r3, [pc, #64]	@ (800b354 <pcMessageType+0xe0>)
 800b314:	60fb      	str	r3, [r7, #12]
                    break;
 800b316:	e005      	b.n	800b324 <pcMessageType+0xb0>

                case ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6:
                    pcReturn = "NEIGHBOR_ADV";
 800b318:	4b0f      	ldr	r3, [pc, #60]	@ (800b358 <pcMessageType+0xe4>)
 800b31a:	60fb      	str	r3, [r7, #12]
                    break;
 800b31c:	e002      	b.n	800b324 <pcMessageType+0xb0>

                default:
                    pcReturn = "UNKNOWN ICMP";
 800b31e:	4b0f      	ldr	r3, [pc, #60]	@ (800b35c <pcMessageType+0xe8>)
 800b320:	60fb      	str	r3, [r7, #12]
                    break;
 800b322:	bf00      	nop
            }

            return pcReturn;
 800b324:	68fb      	ldr	r3, [r7, #12]
        }
 800b326:	4618      	mov	r0, r3
 800b328:	3714      	adds	r7, #20
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop
 800b334:	0802381c 	.word	0x0802381c
 800b338:	08023830 	.word	0x08023830
 800b33c:	08023840 	.word	0x08023840
 800b340:	08023850 	.word	0x08023850
 800b344:	08023864 	.word	0x08023864
 800b348:	08023874 	.word	0x08023874
 800b34c:	08023880 	.word	0x08023880
 800b350:	0802388c 	.word	0x0802388c
 800b354:	08023898 	.word	0x08023898
 800b358:	080238a8 	.word	0x080238a8
 800b35c:	080238b8 	.word	0x080238b8

0800b360 <prvCheckWaitingBuffer>:
 * @brief When a neighbour advertisement has been received, check if 'pxARPWaitingNetworkBuffer'
 *        was waiting for this new address look-up. If so, feed it to the IP-task as a new
 *        incoming packet.
 */
    static void prvCheckWaitingBuffer( const IPv6_Address_t * pxIPv6Address )
    {
 800b360:	b580      	push	{r7, lr}
 800b362:	b088      	sub	sp, #32
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const IPPacket_IPv6_t * pxIPPacket = ( ( IPPacket_IPv6_t * ) pxARPWaitingNetworkBuffer->pucEthernetBuffer );
 800b368:	4b19      	ldr	r3, [pc, #100]	@ (800b3d0 <prvCheckWaitingBuffer+0x70>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b36e:	61fb      	str	r3, [r7, #28]
        const IPHeader_IPv6_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800b370:	69fb      	ldr	r3, [r7, #28]
 800b372:	330e      	adds	r3, #14
 800b374:	61bb      	str	r3, [r7, #24]

        if( memcmp( pxIPv6Address->ucBytes, pxIPHeader->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	69bb      	ldr	r3, [r7, #24]
 800b37a:	3308      	adds	r3, #8
 800b37c:	2210      	movs	r2, #16
 800b37e:	4619      	mov	r1, r3
 800b380:	f016 fa85 	bl	802188e <memcmp>
 800b384:	4603      	mov	r3, r0
 800b386:	2b00      	cmp	r3, #0
 800b388:	d11d      	bne.n	800b3c6 <prvCheckWaitingBuffer+0x66>
        {
            IPStackEvent_t xEventMessage;
            const TickType_t xDontBlock = ( TickType_t ) 0;
 800b38a:	2300      	movs	r3, #0
 800b38c:	617b      	str	r3, [r7, #20]

            FreeRTOS_printf( ( "Waiting done\n" ) );
 800b38e:	4811      	ldr	r0, [pc, #68]	@ (800b3d4 <prvCheckWaitingBuffer+0x74>)
 800b390:	f015 f8cc 	bl	802052c <lUDPLoggingPrintf>

            xEventMessage.eEventType = eNetworkRxEvent;
 800b394:	2301      	movs	r3, #1
 800b396:	733b      	strb	r3, [r7, #12]
            xEventMessage.pvData = ( void * ) pxARPWaitingNetworkBuffer;
 800b398:	4b0d      	ldr	r3, [pc, #52]	@ (800b3d0 <prvCheckWaitingBuffer+0x70>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	613b      	str	r3, [r7, #16]

            if( xSendEventStructToIPTask( &xEventMessage, xDontBlock ) != pdPASS )
 800b39e:	f107 030c 	add.w	r3, r7, #12
 800b3a2:	6979      	ldr	r1, [r7, #20]
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f7fd fa13 	bl	80087d0 <xSendEventStructToIPTask>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d004      	beq.n	800b3ba <prvCheckWaitingBuffer+0x5a>
            {
                /* Failed to send the message, so release the network buffer. */
                vReleaseNetworkBufferAndDescriptor( BUFFER_FROM_WHERE_CALL( 140 ) pxARPWaitingNetworkBuffer );
 800b3b0:	4b07      	ldr	r3, [pc, #28]	@ (800b3d0 <prvCheckWaitingBuffer+0x70>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f00a ffcf 	bl	8016358 <vReleaseNetworkBufferAndDescriptor>
            }

            /* Clear the buffer. */
            pxARPWaitingNetworkBuffer = NULL;
 800b3ba:	4b05      	ldr	r3, [pc, #20]	@ (800b3d0 <prvCheckWaitingBuffer+0x70>)
 800b3bc:	2200      	movs	r2, #0
 800b3be:	601a      	str	r2, [r3, #0]

            /* Found an ARP resolution, disable ARP resolution timer. */
            vIPSetARPResolutionTimerEnableState( pdFALSE );
 800b3c0:	2000      	movs	r0, #0
 800b3c2:	f7fd fffb 	bl	80093bc <vIPSetARPResolutionTimerEnableState>

            iptrace_DELAYED_ARP_REQUEST_REPLIED();
        }
    }
 800b3c6:	bf00      	nop
 800b3c8:	3720      	adds	r7, #32
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	20000e44 	.word	0x20000e44
 800b3d4:	080238c8 	.word	0x080238c8

0800b3d8 <prvProcessICMPMessage_IPv6>:
 * @param[in] pxNetworkBuffer The Ethernet packet which contains an IPv6 message.
 *
 * @return A const value 'eReleaseBuffer' which means that the network must still be released.
 */
    eFrameProcessingResult_t prvProcessICMPMessage_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 800b3d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3dc:	b09e      	sub	sp, #120	@ 0x78
 800b3de:	af02      	add	r7, sp, #8
 800b3e0:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPPacket_IPv6_t * pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800b3e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b3ea:	3336      	adds	r3, #54	@ 0x36
 800b3ec:	65bb      	str	r3, [r7, #88]	@ 0x58
        /* Note: pxNetworkBuffer->pxEndPoint is already verified to be non-NULL in prvProcessEthernetPacket() */
        NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3f2:	657b      	str	r3, [r7, #84]	@ 0x54
        size_t uxNeededSize;

        #if ( ipconfigHAS_PRINTF == 1 )
        {
            if( pxICMPHeader_IPv6->ucTypeOfMessage != ipICMP_PING_REQUEST_IPv6 )
 800b3f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	2b80      	cmp	r3, #128	@ 0x80
 800b3fa:	d01e      	beq.n	800b43a <prvProcessICMPMessage_IPv6+0x62>
            {
                char pcAddress[ 40 ];
                FreeRTOS_printf( ( "ICMPv6_recv %d (%s) from %pip to %pip end-point = %s\n",
 800b3fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	4698      	mov	r8, r3
 800b402:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	4618      	mov	r0, r3
 800b408:	f7ff ff34 	bl	800b274 <pcMessageType>
 800b40c:	4606      	mov	r6, r0
 800b40e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b410:	f103 0516 	add.w	r5, r3, #22
 800b414:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b416:	f103 0426 	add.w	r4, r3, #38	@ 0x26
 800b41a:	f107 030c 	add.w	r3, r7, #12
 800b41e:	2228      	movs	r2, #40	@ 0x28
 800b420:	4619      	mov	r1, r3
 800b422:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800b424:	f001 fd5c 	bl	800cee0 <pcEndpointName>
 800b428:	4603      	mov	r3, r0
 800b42a:	9301      	str	r3, [sp, #4]
 800b42c:	9400      	str	r4, [sp, #0]
 800b42e:	462b      	mov	r3, r5
 800b430:	4632      	mov	r2, r6
 800b432:	4641      	mov	r1, r8
 800b434:	48a7      	ldr	r0, [pc, #668]	@ (800b6d4 <prvProcessICMPMessage_IPv6+0x2fc>)
 800b436:	f015 f879 	bl	802052c <lUDPLoggingPrintf>
                                   pcEndpointName( pxEndPoint, pcAddress, sizeof( pcAddress ) ) ) );
            }
        }
        #endif /* ( ipconfigHAS_PRINTF == 1 ) */

        if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 800b43a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b43c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b440:	f003 0304 	and.w	r3, r3, #4
 800b444:	b2db      	uxtb	r3, r3
 800b446:	2b00      	cmp	r3, #0
 800b448:	f000 813e 	beq.w	800b6c8 <prvProcessICMPMessage_IPv6+0x2f0>
        {
            switch( pxICMPHeader_IPv6->ucTypeOfMessage )
 800b44c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	2b04      	cmp	r3, #4
 800b452:	dc1d      	bgt.n	800b490 <prvProcessICMPMessage_IPv6+0xb8>
 800b454:	2b00      	cmp	r3, #0
 800b456:	f300 8130 	bgt.w	800b6ba <prvProcessICMPMessage_IPv6+0x2e2>
                            break;
                    #endif /* ( ipconfigUSE_RA != 0 ) */

                default:
                    /* All possible values are included here above. */
                    break;
 800b45a:	e130      	b.n	800b6be <prvProcessICMPMessage_IPv6+0x2e6>
            switch( pxICMPHeader_IPv6->ucTypeOfMessage )
 800b45c:	3b80      	subs	r3, #128	@ 0x80
 800b45e:	2b08      	cmp	r3, #8
 800b460:	f200 812d 	bhi.w	800b6be <prvProcessICMPMessage_IPv6+0x2e6>
 800b464:	a201      	add	r2, pc, #4	@ (adr r2, 800b46c <prvProcessICMPMessage_IPv6+0x94>)
 800b466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b46a:	bf00      	nop
 800b46c:	0800b49d 	.word	0x0800b49d
 800b470:	0800b4e5 	.word	0x0800b4e5
 800b474:	0800b6bf 	.word	0x0800b6bf
 800b478:	0800b6bf 	.word	0x0800b6bf
 800b47c:	0800b6bf 	.word	0x0800b6bf
 800b480:	0800b6bf 	.word	0x0800b6bf
 800b484:	0800b6b3 	.word	0x0800b6b3
 800b488:	0800b55b 	.word	0x0800b55b
 800b48c:	0800b66b 	.word	0x0800b66b
 800b490:	2b88      	cmp	r3, #136	@ 0x88
 800b492:	f300 8114 	bgt.w	800b6be <prvProcessICMPMessage_IPv6+0x2e6>
 800b496:	2b80      	cmp	r3, #128	@ 0x80
 800b498:	dae0      	bge.n	800b45c <prvProcessICMPMessage_IPv6+0x84>
                    break;
 800b49a:	e110      	b.n	800b6be <prvProcessICMPMessage_IPv6+0x2e6>
                       usICMPSize = FreeRTOS_ntohs( pxICMPPacket->xIPHeader.usPayloadLength );
 800b49c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b49e:	8a5b      	ldrh	r3, [r3, #18]
 800b4a0:	b29b      	uxth	r3, r3
 800b4a2:	021b      	lsls	r3, r3, #8
 800b4a4:	b21a      	sxth	r2, r3
 800b4a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b4a8:	8a5b      	ldrh	r3, [r3, #18]
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	0a1b      	lsrs	r3, r3, #8
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	b21b      	sxth	r3, r3
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	b21b      	sxth	r3, r3
 800b4b6:	877b      	strh	r3, [r7, #58]	@ 0x3a
                       uxICMPSize = ( size_t ) usICMPSize;
 800b4b8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b4ba:	637b      	str	r3, [r7, #52]	@ 0x34
                       uxNeededSize = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800b4bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4be:	3336      	adds	r3, #54	@ 0x36
 800b4c0:	64bb      	str	r3, [r7, #72]	@ 0x48
                       if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d903      	bls.n	800b4d4 <prvProcessICMPMessage_IPv6+0xfc>
                           FreeRTOS_printf( ( "Too small\n" ) );
 800b4cc:	4882      	ldr	r0, [pc, #520]	@ (800b6d8 <prvProcessICMPMessage_IPv6+0x300>)
 800b4ce:	f015 f82d 	bl	802052c <lUDPLoggingPrintf>
                           break;
 800b4d2:	e0f9      	b.n	800b6c8 <prvProcessICMPMessage_IPv6+0x2f0>
                       pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_PING_REPLY_IPv6;
 800b4d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b4d6:	2281      	movs	r2, #129	@ 0x81
 800b4d8:	701a      	strb	r2, [r3, #0]
                       prvReturnICMP_IPv6( pxNetworkBuffer, uxICMPSize );
 800b4da:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f7ff fdad 	bl	800b03c <prvReturnICMP_IPv6>
                   break;
 800b4e2:	e0f1      	b.n	800b6c8 <prvProcessICMPMessage_IPv6+0x2f0>
                               ePingReplyStatus_t eStatus = eSuccess;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                               const ICMPEcho_IPv6_t * pxICMPEchoHeader = ( ( const ICMPEcho_IPv6_t * ) pxICMPHeader_IPv6 );
 800b4ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b4ec:	643b      	str	r3, [r7, #64]	@ 0x40
                               uxDataLength = ipNUMERIC_CAST( size_t, FreeRTOS_ntohs( pxICMPPacket->xIPHeader.usPayloadLength ) );
 800b4ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b4f0:	8a5b      	ldrh	r3, [r3, #18]
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	021b      	lsls	r3, r3, #8
 800b4f6:	b21a      	sxth	r2, r3
 800b4f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b4fa:	8a5b      	ldrh	r3, [r3, #18]
 800b4fc:	b29b      	uxth	r3, r3
 800b4fe:	0a1b      	lsrs	r3, r3, #8
 800b500:	b29b      	uxth	r3, r3
 800b502:	b21b      	sxth	r3, r3
 800b504:	4313      	orrs	r3, r2
 800b506:	b21b      	sxth	r3, r3
 800b508:	b29b      	uxth	r3, r3
 800b50a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                               uxDataLength = uxDataLength - sizeof( *pxICMPEchoHeader );
 800b50c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b50e:	3b08      	subs	r3, #8
 800b510:	63fb      	str	r3, [r7, #60]	@ 0x3c
                               pucByte = ( const uint8_t * ) pxICMPEchoHeader;
 800b512:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b514:	667b      	str	r3, [r7, #100]	@ 0x64
                               pucByte = &( pucByte[ sizeof( *pxICMPEchoHeader ) ] );
 800b516:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b518:	3308      	adds	r3, #8
 800b51a:	667b      	str	r3, [r7, #100]	@ 0x64
                               for( uxCount = 0; uxCount < uxDataLength; uxCount++ )
 800b51c:	2300      	movs	r3, #0
 800b51e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b520:	e00d      	b.n	800b53e <prvProcessICMPMessage_IPv6+0x166>
                                   if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 800b522:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b524:	781b      	ldrb	r3, [r3, #0]
 800b526:	2b78      	cmp	r3, #120	@ 0x78
 800b528:	d003      	beq.n	800b532 <prvProcessICMPMessage_IPv6+0x15a>
                                       eStatus = eInvalidData;
 800b52a:	2302      	movs	r3, #2
 800b52c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                                       break;
 800b530:	e009      	b.n	800b546 <prvProcessICMPMessage_IPv6+0x16e>
                                   pucByte++;
 800b532:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b534:	3301      	adds	r3, #1
 800b536:	667b      	str	r3, [r7, #100]	@ 0x64
                               for( uxCount = 0; uxCount < uxDataLength; uxCount++ )
 800b538:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b53a:	3301      	adds	r3, #1
 800b53c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b53e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b542:	429a      	cmp	r2, r3
 800b544:	d3ed      	bcc.n	800b522 <prvProcessICMPMessage_IPv6+0x14a>
                               vApplicationPingReplyHook( eStatus, pxICMPEchoHeader->usIdentifier );
 800b546:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b548:	889b      	ldrh	r3, [r3, #4]
 800b54a:	b29a      	uxth	r2, r3
 800b54c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800b550:	4611      	mov	r1, r2
 800b552:	4618      	mov	r0, r3
 800b554:	f7f5 fe96 	bl	8001284 <vApplicationPingReplyHook>
                           break;
 800b558:	e0b6      	b.n	800b6c8 <prvProcessICMPMessage_IPv6+0x2f0>
                       const NetworkEndPoint_t * pxTargetedEndPoint = pxEndPoint;
 800b55a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b55c:	663b      	str	r3, [r7, #96]	@ 0x60
                       const NetworkEndPoint_t * pxEndPointInSameSubnet = FreeRTOS_InterfaceEPInSameSubnet_IPv6( pxNetworkBuffer->pxInterface, &( pxICMPHeader_IPv6->xIPv6Address ) );
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b562:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b564:	3308      	adds	r3, #8
 800b566:	4619      	mov	r1, r3
 800b568:	4610      	mov	r0, r2
 800b56a:	f001 f9cd 	bl	800c908 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>
 800b56e:	6538      	str	r0, [r7, #80]	@ 0x50
                       if( pxEndPointInSameSubnet != NULL )
 800b570:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b572:	2b00      	cmp	r3, #0
 800b574:	d002      	beq.n	800b57c <prvProcessICMPMessage_IPv6+0x1a4>
                           pxTargetedEndPoint = pxEndPointInSameSubnet;
 800b576:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b578:	663b      	str	r3, [r7, #96]	@ 0x60
 800b57a:	e005      	b.n	800b588 <prvProcessICMPMessage_IPv6+0x1b0>
                           FreeRTOS_debug_printf( ( "prvProcessICMPMessage_IPv6: No match for %pip\n",
 800b57c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b57e:	3308      	adds	r3, #8
 800b580:	4619      	mov	r1, r3
 800b582:	4856      	ldr	r0, [pc, #344]	@ (800b6dc <prvProcessICMPMessage_IPv6+0x304>)
 800b584:	f014 ffd2 	bl	802052c <lUDPLoggingPrintf>
                       uxICMPSize = sizeof( ICMPHeader_IPv6_t );
 800b588:	2320      	movs	r3, #32
 800b58a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       uxNeededSize = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800b58c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b58e:	3336      	adds	r3, #54	@ 0x36
 800b590:	64bb      	str	r3, [r7, #72]	@ 0x48
                       if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b596:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b598:	429a      	cmp	r2, r3
 800b59a:	d903      	bls.n	800b5a4 <prvProcessICMPMessage_IPv6+0x1cc>
                           FreeRTOS_printf( ( "Too small\n" ) );
 800b59c:	484e      	ldr	r0, [pc, #312]	@ (800b6d8 <prvProcessICMPMessage_IPv6+0x300>)
 800b59e:	f014 ffc5 	bl	802052c <lUDPLoggingPrintf>
                           break;
 800b5a2:	e091      	b.n	800b6c8 <prvProcessICMPMessage_IPv6+0x2f0>
                       xCompare = memcmp( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxTargetedEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b5a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b5a6:	f103 0008 	add.w	r0, r3, #8
 800b5aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b5ac:	3338      	adds	r3, #56	@ 0x38
 800b5ae:	2210      	movs	r2, #16
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	f016 f96c 	bl	802188e <memcmp>
 800b5b6:	6478      	str	r0, [r7, #68]	@ 0x44
                       FreeRTOS_printf( ( "ND NS for %pip endpoint %pip %s\n",
 800b5b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b5ba:	f103 0108 	add.w	r1, r3, #8
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5c2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800b5c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d101      	bne.n	800b5d0 <prvProcessICMPMessage_IPv6+0x1f8>
 800b5cc:	4b44      	ldr	r3, [pc, #272]	@ (800b6e0 <prvProcessICMPMessage_IPv6+0x308>)
 800b5ce:	e000      	b.n	800b5d2 <prvProcessICMPMessage_IPv6+0x1fa>
 800b5d0:	4b44      	ldr	r3, [pc, #272]	@ (800b6e4 <prvProcessICMPMessage_IPv6+0x30c>)
 800b5d2:	4845      	ldr	r0, [pc, #276]	@ (800b6e8 <prvProcessICMPMessage_IPv6+0x310>)
 800b5d4:	f014 ffaa 	bl	802052c <lUDPLoggingPrintf>
                       if( xCompare == 0 )
 800b5d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d171      	bne.n	800b6c2 <prvProcessICMPMessage_IPv6+0x2ea>
                           pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6;
 800b5de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b5e0:	2288      	movs	r2, #136	@ 0x88
 800b5e2:	701a      	strb	r2, [r3, #0]
                           pxICMPHeader_IPv6->ucTypeOfService = 0U;
 800b5e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	705a      	strb	r2, [r3, #1]
                           pxICMPHeader_IPv6->ulReserved = ndICMPv6_FLAG_SOLICITED | ndICMPv6_FLAG_UPDATE;
 800b5ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	711a      	strb	r2, [r3, #4]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	715a      	strb	r2, [r3, #5]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	719a      	strb	r2, [r3, #6]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b5fe:	71da      	strb	r2, [r3, #7]
                           pxICMPHeader_IPv6->ulReserved = FreeRTOS_htonl( pxICMPHeader_IPv6->ulReserved );
 800b600:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	061a      	lsls	r2, r3, #24
 800b606:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	021b      	lsls	r3, r3, #8
 800b60c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b610:	431a      	orrs	r2, r3
 800b612:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	0a1b      	lsrs	r3, r3, #8
 800b618:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b61c:	431a      	orrs	r2, r3
 800b61e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	0e1b      	lsrs	r3, r3, #24
 800b624:	431a      	orrs	r2, r3
 800b626:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b628:	605a      	str	r2, [r3, #4]
                           pxICMPHeader_IPv6->ucOptionType = ndICMP_TARGET_LINK_LAYER_ADDRESS;
 800b62a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b62c:	2202      	movs	r2, #2
 800b62e:	761a      	strb	r2, [r3, #24]
                           pxICMPHeader_IPv6->ucOptionLength = 1U;
 800b630:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b632:	2201      	movs	r2, #1
 800b634:	765a      	strb	r2, [r3, #25]
                           ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxTargetedEndPoint->xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800b636:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b638:	f103 001a 	add.w	r0, r3, #26
 800b63c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b63e:	33e8      	adds	r3, #232	@ 0xe8
 800b640:	2206      	movs	r2, #6
 800b642:	4619      	mov	r1, r3
 800b644:	f015 f98e 	bl	8020964 <memcpy>
                           pxICMPPacket->xIPHeader.ucHopLimit = 255U;
 800b648:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b64a:	22ff      	movs	r2, #255	@ 0xff
 800b64c:	755a      	strb	r2, [r3, #21]
                           ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxTargetedEndPoint->ipv6_settings.xIPAddress.ucBytes, sizeof( pxICMPHeader_IPv6->xIPv6Address.ucBytes ) );
 800b64e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b650:	f103 0008 	add.w	r0, r3, #8
 800b654:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b656:	3338      	adds	r3, #56	@ 0x38
 800b658:	2210      	movs	r2, #16
 800b65a:	4619      	mov	r1, r3
 800b65c:	f015 f982 	bl	8020964 <memcpy>
                           prvReturnICMP_IPv6( pxNetworkBuffer, uxICMPSize );
 800b660:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f7ff fcea 	bl	800b03c <prvReturnICMP_IPv6>
                   break;
 800b668:	e02b      	b.n	800b6c2 <prvProcessICMPMessage_IPv6+0x2ea>
                    vNDRefreshCacheEntry( ( ( const MACAddress_t * ) pxICMPHeader_IPv6->ucOptionBytes ),
 800b66a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b66c:	f103 001a 	add.w	r0, r3, #26
                                          &( pxICMPHeader_IPv6->xIPv6Address ),
 800b670:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b672:	3308      	adds	r3, #8
                    vNDRefreshCacheEntry( ( ( const MACAddress_t * ) pxICMPHeader_IPv6->ucOptionBytes ),
 800b674:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b676:	4619      	mov	r1, r3
 800b678:	f7ff fb5e 	bl	800ad38 <vNDRefreshCacheEntry>
                    FreeRTOS_printf( ( "NEIGHBOR_ADV from %pip\n",
 800b67c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b67e:	3308      	adds	r3, #8
 800b680:	4619      	mov	r1, r3
 800b682:	481a      	ldr	r0, [pc, #104]	@ (800b6ec <prvProcessICMPMessage_IPv6+0x314>)
 800b684:	f014 ff52 	bl	802052c <lUDPLoggingPrintf>
                        vReceiveNA( pxNetworkBuffer );
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 fa89 	bl	800bba0 <vReceiveNA>
                    if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800b68e:	4b18      	ldr	r3, [pc, #96]	@ (800b6f0 <prvProcessICMPMessage_IPv6+0x318>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d017      	beq.n	800b6c6 <prvProcessICMPMessage_IPv6+0x2ee>
                        ( uxIPHeaderSizePacket( pxARPWaitingNetworkBuffer ) == ipSIZE_OF_IPv6_HEADER ) )
 800b696:	4b16      	ldr	r3, [pc, #88]	@ (800b6f0 <prvProcessICMPMessage_IPv6+0x318>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7fd fc4c 	bl	8008f38 <uxIPHeaderSizePacket>
 800b6a0:	4603      	mov	r3, r0
                    if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800b6a2:	2b28      	cmp	r3, #40	@ 0x28
 800b6a4:	d10f      	bne.n	800b6c6 <prvProcessICMPMessage_IPv6+0x2ee>
                        prvCheckWaitingBuffer( &( pxICMPHeader_IPv6->xIPv6Address ) );
 800b6a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b6a8:	3308      	adds	r3, #8
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f7ff fe58 	bl	800b360 <prvCheckWaitingBuffer>
                    break;
 800b6b0:	e009      	b.n	800b6c6 <prvProcessICMPMessage_IPv6+0x2ee>
                            vReceiveRA( pxNetworkBuffer );
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f000 fb9a 	bl	800bdec <vReceiveRA>
                            break;
 800b6b8:	e006      	b.n	800b6c8 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800b6ba:	bf00      	nop
 800b6bc:	e004      	b.n	800b6c8 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800b6be:	bf00      	nop
 800b6c0:	e002      	b.n	800b6c8 <prvProcessICMPMessage_IPv6+0x2f0>
                   break;
 800b6c2:	bf00      	nop
 800b6c4:	e000      	b.n	800b6c8 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800b6c6:	bf00      	nop
            } /* switch( pxICMPHeader_IPv6->ucTypeOfMessage ) */
        }     /* if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) */

        return eReleaseBuffer;
 800b6c8:	2300      	movs	r3, #0
    }
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3770      	adds	r7, #112	@ 0x70
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6d4:	080238d8 	.word	0x080238d8
 800b6d8:	08023910 	.word	0x08023910
 800b6dc:	0802391c 	.word	0x0802391c
 800b6e0:	0802394c 	.word	0x0802394c
 800b6e4:	08023954 	.word	0x08023954
 800b6e8:	0802395c 	.word	0x0802395c
 800b6ec:	08023980 	.word	0x08023980
 800b6f0:	20000e44 	.word	0x20000e44

0800b6f4 <FreeRTOS_OutputAdvertiseIPv6>:
    /* MISRA Ref 8.9.1 [File scoped variables] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
    /* coverity[misra_c_2012_rule_8_9_violation] */
    /* coverity[single_use] */
    void FreeRTOS_OutputAdvertiseIPv6( NetworkEndPoint_t * pxEndPoint )
    {
 800b6f4:	b5b0      	push	{r4, r5, r7, lr}
 800b6f6:	b088      	sub	sp, #32
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxInterface;
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6;
        size_t uxICMPSize;
        size_t uxPacketSize;

        uxPacketSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800b6fc:	2356      	movs	r3, #86	@ 0x56
 800b6fe:	61fb      	str	r3, [r7, #28]

        /* This is called from the context of the IP event task, so a block time
         * must not be used. */
        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPacketSize, ndDONT_BLOCK );
 800b700:	2100      	movs	r1, #0
 800b702:	69f8      	ldr	r0, [r7, #28]
 800b704:	f00a fdc0 	bl	8016288 <pxGetNetworkBufferWithDescriptor>
 800b708:	61b8      	str	r0, [r7, #24]

        if( pxNetworkBuffer != NULL )
 800b70a:	69bb      	ldr	r3, [r7, #24]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	f000 80b1 	beq.w	800b874 <FreeRTOS_OutputAdvertiseIPv6+0x180>
        {
            ( void ) memset( pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800b712:	69bb      	ldr	r3, [r7, #24]
 800b714:	3314      	adds	r3, #20
 800b716:	2210      	movs	r2, #16
 800b718:	2100      	movs	r1, #0
 800b71a:	4618      	mov	r0, r3
 800b71c:	f015 fa2f 	bl	8020b7e <memset>
            pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800b720:	69bb      	ldr	r3, [r7, #24]
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	631a      	str	r2, [r3, #48]	@ 0x30

            pxInterface = pxEndPoint->pxNetworkInterface;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b72c:	617b      	str	r3, [r7, #20]

            configASSERT( pxInterface != NULL );
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d104      	bne.n	800b73e <FreeRTOS_OutputAdvertiseIPv6+0x4a>
 800b734:	f240 419e 	movw	r1, #1182	@ 0x49e
 800b738:	4850      	ldr	r0, [pc, #320]	@ (800b87c <FreeRTOS_OutputAdvertiseIPv6+0x188>)
 800b73a:	f7f5 fced 	bl	8001118 <vAssertCalled>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800b73e:	69bb      	ldr	r3, [r7, #24]
 800b740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b742:	613b      	str	r3, [r7, #16]
            pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	3336      	adds	r3, #54	@ 0x36
 800b748:	60fb      	str	r3, [r7, #12]

            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pcLOCAL_ALL_NODES_MULTICAST_MAC, ipMAC_ADDRESS_LENGTH_BYTES );
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	4a4c      	ldr	r2, [pc, #304]	@ (800b880 <FreeRTOS_OutputAdvertiseIPv6+0x18c>)
 800b74e:	6810      	ldr	r0, [r2, #0]
 800b750:	6018      	str	r0, [r3, #0]
 800b752:	8892      	ldrh	r2, [r2, #4]
 800b754:	809a      	strh	r2, [r3, #4]
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	1d98      	adds	r0, r3, #6
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	33e8      	adds	r3, #232	@ 0xe8
 800b75e:	2206      	movs	r2, #6
 800b760:	4619      	mov	r1, r3
 800b762:	f015 f8ff 	bl	8020964 <memcpy>
            pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE; /* 12 + 2 = 14 */
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	2200      	movs	r2, #0
 800b76a:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800b76e:	731a      	strb	r2, [r3, #12]
 800b770:	2200      	movs	r2, #0
 800b772:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800b776:	735a      	strb	r2, [r3, #13]

            pxICMPPacket->xIPHeader.ucVersionTrafficClass = 0x60;
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	2260      	movs	r2, #96	@ 0x60
 800b77c:	739a      	strb	r2, [r3, #14]
            pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0;
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	2200      	movs	r2, #0
 800b782:	73da      	strb	r2, [r3, #15]
            pxICMPPacket->xIPHeader.usFlowLabel = 0;
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	2200      	movs	r2, #0
 800b788:	741a      	strb	r2, [r3, #16]
 800b78a:	2200      	movs	r2, #0
 800b78c:	745a      	strb	r2, [r3, #17]

            pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( sizeof( ICMPHeader_IPv6_t ) );
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	2200      	movs	r2, #0
 800b792:	749a      	strb	r2, [r3, #18]
 800b794:	2200      	movs	r2, #0
 800b796:	f042 0220 	orr.w	r2, r2, #32
 800b79a:	74da      	strb	r2, [r3, #19]
            pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	223a      	movs	r2, #58	@ 0x3a
 800b7a0:	751a      	strb	r2, [r3, #20]
            pxICMPPacket->xIPHeader.ucHopLimit = 255;
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	22ff      	movs	r2, #255	@ 0xff
 800b7a6:	755a      	strb	r2, [r3, #21]
            ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	f103 0016 	add.w	r0, r3, #22
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	3338      	adds	r3, #56	@ 0x38
 800b7b2:	2210      	movs	r2, #16
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	f015 f8d5 	bl	8020964 <memcpy>
            ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pcLOCAL_ALL_NODES_MULTICAST_IP, ipSIZE_OF_IPv6_ADDRESS );
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	3326      	adds	r3, #38	@ 0x26
 800b7be:	4a31      	ldr	r2, [pc, #196]	@ (800b884 <FreeRTOS_OutputAdvertiseIPv6+0x190>)
 800b7c0:	461c      	mov	r4, r3
 800b7c2:	4615      	mov	r5, r2
 800b7c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b7c6:	6020      	str	r0, [r4, #0]
 800b7c8:	6061      	str	r1, [r4, #4]
 800b7ca:	60a2      	str	r2, [r4, #8]
 800b7cc:	60e3      	str	r3, [r4, #12]

            uxICMPSize = sizeof( ICMPHeader_IPv6_t );
 800b7ce:	2320      	movs	r3, #32
 800b7d0:	60bb      	str	r3, [r7, #8]
            pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	2288      	movs	r2, #136	@ 0x88
 800b7d6:	701a      	strb	r2, [r3, #0]
            pxICMPHeader_IPv6->ucTypeOfService = 0;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	705a      	strb	r2, [r3, #1]
            pxICMPHeader_IPv6->ulReserved = ndICMPv6_FLAG_SOLICITED | ndICMPv6_FLAG_UPDATE;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	711a      	strb	r2, [r3, #4]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	715a      	strb	r2, [r3, #5]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	719a      	strb	r2, [r3, #6]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b7f2:	71da      	strb	r2, [r3, #7]
            pxICMPHeader_IPv6->ulReserved = FreeRTOS_htonl( pxICMPHeader_IPv6->ulReserved );
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	061a      	lsls	r2, r3, #24
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	021b      	lsls	r3, r3, #8
 800b800:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b804:	431a      	orrs	r2, r3
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	0a1b      	lsrs	r3, r3, #8
 800b80c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b810:	431a      	orrs	r2, r3
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	685b      	ldr	r3, [r3, #4]
 800b816:	0e1b      	lsrs	r3, r3, #24
 800b818:	431a      	orrs	r2, r3
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	605a      	str	r2, [r3, #4]

            /* Type of option. */
            pxICMPHeader_IPv6->ucOptionType = ndICMP_TARGET_LINK_LAYER_ADDRESS;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	2202      	movs	r2, #2
 800b822:	761a      	strb	r2, [r3, #24]
            /* Length of option in units of 8 bytes. */
            pxICMPHeader_IPv6->ucOptionLength = 1;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2201      	movs	r2, #1
 800b828:	765a      	strb	r2, [r3, #25]
            ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxEndPoint->xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	f103 001a 	add.w	r0, r3, #26
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	33e8      	adds	r3, #232	@ 0xe8
 800b834:	2206      	movs	r2, #6
 800b836:	4619      	mov	r1, r3
 800b838:	f015 f894 	bl	8020964 <memcpy>
            pxICMPPacket->xIPHeader.ucHopLimit = 255;
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	22ff      	movs	r2, #255	@ 0xff
 800b840:	755a      	strb	r2, [r3, #21]
            ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, sizeof( pxICMPHeader_IPv6->xIPv6Address.ucBytes ) );
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f103 0008 	add.w	r0, r3, #8
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	3338      	adds	r3, #56	@ 0x38
 800b84c:	2210      	movs	r2, #16
 800b84e:	4619      	mov	r1, r3
 800b850:	f015 f888 	bl	8020964 <memcpy>

            /* Important: tell NIC driver how many bytes must be sent */
            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 800b85a:	69bb      	ldr	r3, [r7, #24]
 800b85c:	629a      	str	r2, [r3, #40]	@ 0x28
            }
            #else
            {
                /* Many EMAC peripherals will only calculate the ICMP checksum
                 * correctly if the field is nulled beforehand. */
                pxICMPHeader_IPv6->usChecksum = 0;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2200      	movs	r2, #0
 800b862:	709a      	strb	r2, [r3, #2]
 800b864:	2200      	movs	r2, #0
 800b866:	70da      	strb	r2, [r3, #3]
            }
            #endif

            /* Set the parameter 'bReleaseAfterSend'. */
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	68db      	ldr	r3, [r3, #12]
 800b86c:	2201      	movs	r2, #1
 800b86e:	69b9      	ldr	r1, [r7, #24]
 800b870:	6978      	ldr	r0, [r7, #20]
 800b872:	4798      	blx	r3
        }
    }
 800b874:	bf00      	nop
 800b876:	3720      	adds	r7, #32
 800b878:	46bd      	mov	sp, r7
 800b87a:	bdb0      	pop	{r4, r5, r7, pc}
 800b87c:	08023998 	.word	0x08023998
 800b880:	08025c0c 	.word	0x08025c0c
 800b884:	08025bfc 	.word	0x08025bfc

0800b888 <FreeRTOS_CreateIPv6Address>:
 */
    BaseType_t FreeRTOS_CreateIPv6Address( IPv6_Address_t * pxIPAddress,
                                           const IPv6_Address_t * pxPrefix,
                                           size_t uxPrefixLength,
                                           BaseType_t xDoRandom )
    {
 800b888:	b580      	push	{r7, lr}
 800b88a:	b090      	sub	sp, #64	@ 0x40
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	60b9      	str	r1, [r7, #8]
 800b892:	607a      	str	r2, [r7, #4]
 800b894:	603b      	str	r3, [r7, #0]
        uint32_t pulRandom[ 4 ];
        uint8_t * pucSource;
        BaseType_t xIndex, xResult = pdPASS;
 800b896:	2301      	movs	r3, #1
 800b898:	637b      	str	r3, [r7, #52]	@ 0x34

        if( xDoRandom != pdFALSE )
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d017      	beq.n	800b8d0 <FreeRTOS_CreateIPv6Address+0x48>
            /* Create an IP-address, based on a net prefix and a
             * random host address.
             * ARRAY_SIZE_X() returns the size of an array as a
             * signed value ( BaseType_t ).
             */
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( pulRandom ); xIndex++ )
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b8a4:	e010      	b.n	800b8c8 <FreeRTOS_CreateIPv6Address+0x40>
            {
                if( xApplicationGetRandomNumber( &( pulRandom[ xIndex ] ) ) == pdFAIL )
 800b8a6:	f107 0214 	add.w	r2, r7, #20
 800b8aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ac:	009b      	lsls	r3, r3, #2
 800b8ae:	4413      	add	r3, r2
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f7f5 fcfb 	bl	80012ac <xApplicationGetRandomNumber>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d102      	bne.n	800b8c2 <FreeRTOS_CreateIPv6Address+0x3a>
                {
                    xResult = pdFAIL;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800b8c0:	e00d      	b.n	800b8de <FreeRTOS_CreateIPv6Address+0x56>
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( pulRandom ); xIndex++ )
 800b8c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8c4:	3301      	adds	r3, #1
 800b8c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b8c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ca:	2b03      	cmp	r3, #3
 800b8cc:	ddeb      	ble.n	800b8a6 <FreeRTOS_CreateIPv6Address+0x1e>
 800b8ce:	e006      	b.n	800b8de <FreeRTOS_CreateIPv6Address+0x56>
                }
            }
        }
        else
        {
            ( void ) memset( pulRandom, 0, sizeof( pulRandom ) );
 800b8d0:	f107 0314 	add.w	r3, r7, #20
 800b8d4:	2210      	movs	r2, #16
 800b8d6:	2100      	movs	r1, #0
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f015 f950 	bl	8020b7e <memset>
        }

        if( xResult == pdPASS )
 800b8de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	d167      	bne.n	800b9b4 <FreeRTOS_CreateIPv6Address+0x12c>
        {
            size_t uxIndex;
            /* A loopback IP-address has a prefix of 128. */
            configASSERT( ( uxPrefixLength > 0U ) && ( uxPrefixLength <= ( 8U * ipSIZE_OF_IPv6_ADDRESS ) ) );
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d004      	beq.n	800b8f4 <FreeRTOS_CreateIPv6Address+0x6c>
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2b80      	cmp	r3, #128	@ 0x80
 800b8ee:	d801      	bhi.n	800b8f4 <FreeRTOS_CreateIPv6Address+0x6c>
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	e000      	b.n	800b8f6 <FreeRTOS_CreateIPv6Address+0x6e>
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d104      	bne.n	800b904 <FreeRTOS_CreateIPv6Address+0x7c>
 800b8fa:	f240 5105 	movw	r1, #1285	@ 0x505
 800b8fe:	4830      	ldr	r0, [pc, #192]	@ (800b9c0 <FreeRTOS_CreateIPv6Address+0x138>)
 800b900:	f7f5 fc0a 	bl	8001118 <vAssertCalled>

            if( uxPrefixLength >= 8U )
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2b07      	cmp	r3, #7
 800b908:	d907      	bls.n	800b91a <FreeRTOS_CreateIPv6Address+0x92>
            {
                ( void ) memcpy( pxIPAddress->ucBytes, pxPrefix->ucBytes, ( uxPrefixLength + 7U ) / 8U );
 800b90a:	68f8      	ldr	r0, [r7, #12]
 800b90c:	68b9      	ldr	r1, [r7, #8]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	3307      	adds	r3, #7
 800b912:	08db      	lsrs	r3, r3, #3
 800b914:	461a      	mov	r2, r3
 800b916:	f015 f825 	bl	8020964 <memcpy>
            }

            pucSource = ( uint8_t * ) pulRandom;
 800b91a:	f107 0314 	add.w	r3, r7, #20
 800b91e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            uxIndex = uxPrefixLength / 8U;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	08db      	lsrs	r3, r3, #3
 800b924:	633b      	str	r3, [r7, #48]	@ 0x30

            if( ( uxPrefixLength % 8U ) != 0U )
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f003 0307 	and.w	r3, r3, #7
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d034      	beq.n	800b99a <FreeRTOS_CreateIPv6Address+0x112>
            {
                /* uxHostLen is between 1 and 7 bits long. */
                size_t uxHostLen = 8U - ( uxPrefixLength % 8U );
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f003 0307 	and.w	r3, r3, #7
 800b936:	f1c3 0308 	rsb	r3, r3, #8
 800b93a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                uint32_t uxHostMask = ( ( ( uint32_t ) 1U ) << uxHostLen ) - 1U;
 800b93c:	2201      	movs	r2, #1
 800b93e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b940:	fa02 f303 	lsl.w	r3, r2, r3
 800b944:	3b01      	subs	r3, #1
 800b946:	62bb      	str	r3, [r7, #40]	@ 0x28
                uint8_t ucNetMask = ( uint8_t ) ~( uxHostMask );
 800b948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	43db      	mvns	r3, r3
 800b94e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                pxIPAddress->ucBytes[ uxIndex ] &= ucNetMask;
 800b952:	68fa      	ldr	r2, [r7, #12]
 800b954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b956:	4413      	add	r3, r2
 800b958:	781a      	ldrb	r2, [r3, #0]
 800b95a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b95e:	4013      	ands	r3, r2
 800b960:	b2d9      	uxtb	r1, r3
 800b962:	68fa      	ldr	r2, [r7, #12]
 800b964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b966:	4413      	add	r3, r2
 800b968:	460a      	mov	r2, r1
 800b96a:	701a      	strb	r2, [r3, #0]
                pxIPAddress->ucBytes[ uxIndex ] |= ( pucSource[ 0 ] & ( ( uint8_t ) uxHostMask ) );
 800b96c:	68fa      	ldr	r2, [r7, #12]
 800b96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b970:	4413      	add	r3, r2
 800b972:	781a      	ldrb	r2, [r3, #0]
 800b974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b976:	7819      	ldrb	r1, [r3, #0]
 800b978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	400b      	ands	r3, r1
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	4313      	orrs	r3, r2
 800b982:	b2d9      	uxtb	r1, r3
 800b984:	68fa      	ldr	r2, [r7, #12]
 800b986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b988:	4413      	add	r3, r2
 800b98a:	460a      	mov	r2, r1
 800b98c:	701a      	strb	r2, [r3, #0]
                pucSource = &( pucSource[ 1 ] );
 800b98e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b990:	3301      	adds	r3, #1
 800b992:	63fb      	str	r3, [r7, #60]	@ 0x3c
                uxIndex++;
 800b994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b996:	3301      	adds	r3, #1
 800b998:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            if( uxIndex < ipSIZE_OF_IPv6_ADDRESS )
 800b99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b99c:	2b0f      	cmp	r3, #15
 800b99e:	d809      	bhi.n	800b9b4 <FreeRTOS_CreateIPv6Address+0x12c>
            {
                ( void ) memcpy( &( pxIPAddress->ucBytes[ uxIndex ] ), pucSource, ipSIZE_OF_IPv6_ADDRESS - uxIndex );
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9a4:	18d0      	adds	r0, r2, r3
 800b9a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9a8:	f1c3 0310 	rsb	r3, r3, #16
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b9b0:	f014 ffd8 	bl	8020964 <memcpy>
            }
        }

        return xResult;
 800b9b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3740      	adds	r7, #64	@ 0x40
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	08023998 	.word	0x08023998

0800b9c4 <xGetLinkLocalAddress>:
 *
 * @return pdPASS in case a link-local address was found, otherwise pdFAIL.
 */
    static BaseType_t xGetLinkLocalAddress( const NetworkInterface_t * pxInterface,
                                            IPv6_Address_t * pxAddress )
    {
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFAIL;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	60fb      	str	r3, [r7, #12]
        NetworkEndPoint_t * pxEndPoint;

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f000 fe48 	bl	800c668 <FreeRTOS_FirstEndPoint>
 800b9d8:	60b8      	str	r0, [r7, #8]
 800b9da:	e01a      	b.n	800ba12 <xGetLinkLocalAddress+0x4e>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
        {
            /* Check if it has the link-local prefix FE80::/10 */
            if( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 0 ] == 0xfeU ) &&
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b9e2:	2bfe      	cmp	r3, #254	@ 0xfe
 800b9e4:	d110      	bne.n	800ba08 <xGetLinkLocalAddress+0x44>
                ( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 1 ] & 0xc0U ) == 0x80U ) )
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800b9ec:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
            if( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 0 ] == 0xfeU ) &&
 800b9f0:	2b80      	cmp	r3, #128	@ 0x80
 800b9f2:	d109      	bne.n	800ba08 <xGetLinkLocalAddress+0x44>
            {
                ( void ) memcpy( pxAddress->ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b9f4:	6838      	ldr	r0, [r7, #0]
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	3338      	adds	r3, #56	@ 0x38
 800b9fa:	2210      	movs	r2, #16
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	f014 ffb1 	bl	8020964 <memcpy>
                xResult = pdPASS;
 800ba02:	2301      	movs	r3, #1
 800ba04:	60fb      	str	r3, [r7, #12]
                break;
 800ba06:	e007      	b.n	800ba18 <xGetLinkLocalAddress+0x54>
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800ba08:	68b9      	ldr	r1, [r7, #8]
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 fe4e 	bl	800c6ac <FreeRTOS_NextEndPoint>
 800ba10:	60b8      	str	r0, [r7, #8]
             pxEndPoint != NULL;
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d1e1      	bne.n	800b9dc <xGetLinkLocalAddress+0x18>
            }
        }

        return xResult;
 800ba18:	68fb      	ldr	r3, [r7, #12]
    }
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3710      	adds	r7, #16
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
	...

0800ba24 <vNDSendRouterSolicitation>:
 * @param[in] pxIPAddress The target address, normally ff02::2
 *
 */
    void vNDSendRouterSolicitation( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                    IPv6_Address_t * pxIPAddress )
    {
 800ba24:	b5b0      	push	{r4, r5, r7, lr}
 800ba26:	b090      	sub	sp, #64	@ 0x40
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	6039      	str	r1, [r7, #0]
        ICMPPacket_IPv6_t * pxICMPPacket;
        ICMPRouterSolicitation_IPv6_t * xRASolicitationRequest;
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba32:	63bb      	str	r3, [r7, #56]	@ 0x38
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPRouterSolicitation_IPv6_t );
 800ba34:	233e      	movs	r3, #62	@ 0x3e
 800ba36:	637b      	str	r3, [r7, #52]	@ 0x34
        MACAddress_t xMultiCastMacAddress;
        NetworkBufferDescriptor_t * pxDescriptor = pxNetworkBuffer;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        IPv6_Address_t xSourceAddress;
        BaseType_t xHasLocal;
        NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	633b      	str	r3, [r7, #48]	@ 0x30

        configASSERT( pxEndPoint != NULL );
 800ba40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d103      	bne.n	800ba4e <vNDSendRouterSolicitation+0x2a>
 800ba46:	218f      	movs	r1, #143	@ 0x8f
 800ba48:	4852      	ldr	r0, [pc, #328]	@ (800bb94 <vNDSendRouterSolicitation+0x170>)
 800ba4a:	f7f5 fb65 	bl	8001118 <vAssertCalled>
        configASSERT( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED );
 800ba4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba50:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ba54:	f003 0304 	and.w	r3, r3, #4
 800ba58:	b2db      	uxtb	r3, r3
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d103      	bne.n	800ba66 <vNDSendRouterSolicitation+0x42>
 800ba5e:	2190      	movs	r1, #144	@ 0x90
 800ba60:	484c      	ldr	r0, [pc, #304]	@ (800bb94 <vNDSendRouterSolicitation+0x170>)
 800ba62:	f7f5 fb59 	bl	8001118 <vAssertCalled>

        xHasLocal = xGetLinkLocalAddress( pxEndPoint->pxNetworkInterface, &( xSourceAddress ) );
 800ba66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba68:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800ba6c:	f107 020c 	add.w	r2, r7, #12
 800ba70:	4611      	mov	r1, r2
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7ff ffa6 	bl	800b9c4 <xGetLinkLocalAddress>
 800ba78:	62f8      	str	r0, [r7, #44]	@ 0x2c

        if( xHasLocal == pdFAIL )
 800ba7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d10a      	bne.n	800ba96 <vNDSendRouterSolicitation+0x72>
        {
            FreeRTOS_printf( ( "RA: can not find a Link-local address\n" ) );
 800ba80:	4845      	ldr	r0, [pc, #276]	@ (800bb98 <vNDSendRouterSolicitation+0x174>)
 800ba82:	f014 fd53 	bl	802052c <lUDPLoggingPrintf>
            ( void ) memset( xSourceAddress.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800ba86:	f107 030c 	add.w	r3, r7, #12
 800ba8a:	2210      	movs	r2, #16
 800ba8c:	2100      	movs	r1, #0
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f015 f875 	bl	8020b7e <memset>
 800ba94:	e005      	b.n	800baa2 <vNDSendRouterSolicitation+0x7e>
        }
        else
        {
            FreeRTOS_printf( ( "RA: source %pip\n", ( void * ) xSourceAddress.ucBytes ) );
 800ba96:	f107 030c 	add.w	r3, r7, #12
 800ba9a:	4619      	mov	r1, r3
 800ba9c:	483f      	ldr	r0, [pc, #252]	@ (800bb9c <vNDSendRouterSolicitation+0x178>)
 800ba9e:	f014 fd45 	bl	802052c <lUDPLoggingPrintf>
        }

        if( pxDescriptor->xDataLength < uxNeededSize )
 800baa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800baa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baa6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800baa8:	429a      	cmp	r2, r3
 800baaa:	d909      	bls.n	800bac0 <vNDSendRouterSolicitation+0x9c>
        {
            pxNewDescriptor = pxDuplicateNetworkBufferWithDescriptor( pxDescriptor, uxNeededSize );
 800baac:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800baae:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bab0:	f7fd fcf4 	bl	800949c <pxDuplicateNetworkBufferWithDescriptor>
 800bab4:	6338      	str	r0, [r7, #48]	@ 0x30
            vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800bab6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bab8:	f00a fc4e 	bl	8016358 <vReleaseNetworkBufferAndDescriptor>
            pxDescriptor = pxNewDescriptor;
 800babc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800babe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        if( pxDescriptor != NULL )
 800bac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d062      	beq.n	800bb8c <vNDSendRouterSolicitation+0x168>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxDescriptor->pucEthernetBuffer );
 800bac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baca:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            xRASolicitationRequest = ( ( ICMPRouterSolicitation_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800bacc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bace:	3336      	adds	r3, #54	@ 0x36
 800bad0:	627b      	str	r3, [r7, #36]	@ 0x24

            pxDescriptor->xDataLength = uxNeededSize;
 800bad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bad4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bad6:	629a      	str	r2, [r3, #40]	@ 0x28

            ( void ) eNDGetCacheEntry( pxIPAddress, &( xMultiCastMacAddress ), NULL );
 800bad8:	f107 031c 	add.w	r3, r7, #28
 800badc:	2200      	movs	r2, #0
 800bade:	4619      	mov	r1, r3
 800bae0:	6838      	ldr	r0, [r7, #0]
 800bae2:	f7ff f87b 	bl	800abdc <eNDGetCacheEntry>

            /* Set Ethernet header. Will be swapped. */
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, xMultiCastMacAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800bae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bae8:	3306      	adds	r3, #6
 800baea:	461a      	mov	r2, r3
 800baec:	f107 031c 	add.w	r3, r7, #28
 800baf0:	6818      	ldr	r0, [r3, #0]
 800baf2:	6010      	str	r0, [r2, #0]
 800baf4:	889b      	ldrh	r3, [r3, #4]
 800baf6:	8093      	strh	r3, [r2, #4]
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800baf8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bafa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bafc:	33e8      	adds	r3, #232	@ 0xe8
 800bafe:	2206      	movs	r2, #6
 800bb00:	4619      	mov	r1, r3
 800bb02:	f014 ff2f 	bl	8020964 <memcpy>
            pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800bb06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb08:	2200      	movs	r2, #0
 800bb0a:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800bb0e:	731a      	strb	r2, [r3, #12]
 800bb10:	2200      	movs	r2, #0
 800bb12:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800bb16:	735a      	strb	r2, [r3, #13]

            /* Set IP-header. */
            pxICMPPacket->xIPHeader.ucVersionTrafficClass = raDEFAULT_VERSION_TRAFFIC_CLASS;
 800bb18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb1a:	2260      	movs	r2, #96	@ 0x60
 800bb1c:	739a      	strb	r2, [r3, #14]
            pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0U;
 800bb1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb20:	2200      	movs	r2, #0
 800bb22:	73da      	strb	r2, [r3, #15]
            pxICMPPacket->xIPHeader.usFlowLabel = 0U;
 800bb24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb26:	2200      	movs	r2, #0
 800bb28:	741a      	strb	r2, [r3, #16]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	745a      	strb	r2, [r3, #17]
            pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( sizeof( ICMPRouterSolicitation_IPv6_t ) );
 800bb2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb30:	2200      	movs	r2, #0
 800bb32:	749a      	strb	r2, [r3, #18]
 800bb34:	2200      	movs	r2, #0
 800bb36:	f042 0208 	orr.w	r2, r2, #8
 800bb3a:	74da      	strb	r2, [r3, #19]
            pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800bb3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb3e:	223a      	movs	r2, #58	@ 0x3a
 800bb40:	751a      	strb	r2, [r3, #20]
            pxICMPPacket->xIPHeader.ucHopLimit = raDEFAULT_HOP_LIMIT;
 800bb42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb44:	22ff      	movs	r2, #255	@ 0xff
 800bb46:	755a      	strb	r2, [r3, #21]

            /* Normally, the source address is set as 'ipv6_settings.xIPAddress'.
             * But is some routers will not accept a public IP-address, the original
             * default address will be used. It must be a link-local address. */
            ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800bb48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb4a:	3316      	adds	r3, #22
 800bb4c:	461d      	mov	r5, r3
 800bb4e:	f107 040c 	add.w	r4, r7, #12
 800bb52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bb54:	6028      	str	r0, [r5, #0]
 800bb56:	6069      	str	r1, [r5, #4]
 800bb58:	60aa      	str	r2, [r5, #8]
 800bb5a:	60eb      	str	r3, [r5, #12]

            ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800bb5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb5e:	3326      	adds	r3, #38	@ 0x26
 800bb60:	6839      	ldr	r1, [r7, #0]
 800bb62:	2210      	movs	r2, #16
 800bb64:	4618      	mov	r0, r3
 800bb66:	f014 fefd 	bl	8020964 <memcpy>

            /* Set ICMP header. */
            ( void ) memset( xRASolicitationRequest, 0, sizeof( *xRASolicitationRequest ) );
 800bb6a:	2208      	movs	r2, #8
 800bb6c:	2100      	movs	r1, #0
 800bb6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bb70:	f015 f805 	bl	8020b7e <memset>
            xRASolicitationRequest->ucTypeOfMessage = ipICMP_ROUTER_SOLICITATION_IPv6;
 800bb74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb76:	2285      	movs	r2, #133	@ 0x85
 800bb78:	701a      	strb	r2, [r3, #0]
            }
            #else
            {
                /* Many EMAC peripherals will only calculate the ICMP checksum
                 * correctly if the field is nulled beforehand. */
                xRASolicitationRequest->usChecksum = 0U;
 800bb7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	709a      	strb	r2, [r3, #2]
 800bb80:	2200      	movs	r2, #0
 800bb82:	70da      	strb	r2, [r3, #3]
            }
            #endif

            /* This function will fill in the eth addresses and send the packet */
            vReturnEthernetFrame( pxDescriptor, pdTRUE );
 800bb84:	2101      	movs	r1, #1
 800bb86:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bb88:	f7fd f8d6 	bl	8008d38 <vReturnEthernetFrame>
        }
    }
 800bb8c:	bf00      	nop
 800bb8e:	3740      	adds	r7, #64	@ 0x40
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bdb0      	pop	{r4, r5, r7, pc}
 800bb94:	080239c4 	.word	0x080239c4
 800bb98:	080239f0 	.word	0x080239f0
 800bb9c:	08023a18 	.word	0x08023a18

0800bba0 <vReceiveNA>:
 * @brief Receive a NA ( Neighbour Advertisement ) message to see if a chosen IP-address is already in use.
 *
 * @param[in] pxNetworkBuffer The buffer that contains the message.
 */
    void vReceiveNA( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b086      	sub	sp, #24
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
        const NetworkInterface_t * pxInterface = pxNetworkBuffer->pxInterface;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbac:	613b      	str	r3, [r7, #16]
        NetworkEndPoint_t * pxPoint;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ICMPPacket_IPv6_t * pxICMPPacket = ( ( const ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbb2:	60fb      	str	r3, [r7, #12]
        const ICMPHeader_IPv6_t * pxICMPHeader_IPv6 = ( ( const ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	3336      	adds	r3, #54	@ 0x36
 800bbb8:	60bb      	str	r3, [r7, #8]

        for( pxPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800bbba:	6938      	ldr	r0, [r7, #16]
 800bbbc:	f000 fd54 	bl	800c668 <FreeRTOS_FirstEndPoint>
 800bbc0:	6178      	str	r0, [r7, #20]
 800bbc2:	e028      	b.n	800bc16 <vReceiveNA+0x76>
             pxPoint != NULL;
             pxPoint = FreeRTOS_NextEndPoint( pxInterface, pxPoint ) )
        {
            if( ( pxPoint->bits.bWantRA != pdFALSE_UNSIGNED ) && ( pxPoint->xRAData.eRAState == eRAStateIPWait ) )
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800bbca:	f003 0302 	and.w	r3, r3, #2
 800bbce:	b2db      	uxtb	r3, r3
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d01b      	beq.n	800bc0c <vReceiveNA+0x6c>
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800bbda:	2b03      	cmp	r3, #3
 800bbdc:	d116      	bne.n	800bc0c <vReceiveNA+0x6c>
            {
                if( memcmp( pxPoint->ipv6_settings.xIPAddress.ucBytes, pxICMPHeader_IPv6->xIPv6Address.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	3308      	adds	r3, #8
 800bbe8:	2210      	movs	r2, #16
 800bbea:	4619      	mov	r1, r3
 800bbec:	f015 fe4f 	bl	802188e <memcmp>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d10a      	bne.n	800bc0c <vReceiveNA+0x6c>
                {
                    pxPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800bbf6:	697a      	ldr	r2, [r7, #20]
 800bbf8:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800bbfc:	f043 0302 	orr.w	r3, r3, #2
 800bc00:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                    vDHCP_RATimerReload( pxPoint, 100U );
 800bc04:	2164      	movs	r1, #100	@ 0x64
 800bc06:	6978      	ldr	r0, [r7, #20]
 800bc08:	f7fd fb3e 	bl	8009288 <vDHCP_RATimerReload>
             pxPoint = FreeRTOS_NextEndPoint( pxInterface, pxPoint ) )
 800bc0c:	6979      	ldr	r1, [r7, #20]
 800bc0e:	6938      	ldr	r0, [r7, #16]
 800bc10:	f000 fd4c 	bl	800c6ac <FreeRTOS_NextEndPoint>
 800bc14:	6178      	str	r0, [r7, #20]
             pxPoint != NULL;
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d1d3      	bne.n	800bbc4 <vReceiveNA+0x24>
                }
            }
        }
    }
 800bc1c:	bf00      	nop
 800bc1e:	bf00      	nop
 800bc20:	3718      	adds	r7, #24
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
	...

0800bc28 <vReceiveRA_ReadReply>:
 *
 * @returns Returns the ICMP prefix option pointer, pointing to its location in the
 *          input RA reply message buffer.
 */
    static ICMPPrefixOption_IPv6_t * vReceiveRA_ReadReply( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800bc28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc2a:	b091      	sub	sp, #68	@ 0x44
 800bc2c:	af04      	add	r7, sp, #16
 800bc2e:	6078      	str	r0, [r7, #4]
        size_t uxIndex = 0U;
 800bc30:	2300      	movs	r3, #0
 800bc32:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const size_t uxICMPSize = sizeof( ICMPRouterAdvertisement_IPv6_t );
 800bc34:	2310      	movs	r3, #16
 800bc36:	627b      	str	r3, [r7, #36]	@ 0x24
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize;
 800bc38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc3a:	3336      	adds	r3, #54	@ 0x36
 800bc3c:	623b      	str	r3, [r7, #32]
        /* uxLast points to the first byte after the buffer. */
        const size_t uxLast = pxNetworkBuffer->xDataLength - uxNeededSize;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bc42:	6a3b      	ldr	r3, [r7, #32]
 800bc44:	1ad3      	subs	r3, r2, r3
 800bc46:	61fb      	str	r3, [r7, #28]
        uint8_t * pucBytes = &( pxNetworkBuffer->pucEthernetBuffer[ uxNeededSize ] );
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bc4c:	6a3b      	ldr	r3, [r7, #32]
 800bc4e:	4413      	add	r3, r2
 800bc50:	61bb      	str	r3, [r7, #24]
        ICMPPrefixOption_IPv6_t * pxPrefixOption = NULL;
 800bc52:	2300      	movs	r3, #0
 800bc54:	62bb      	str	r3, [r7, #40]	@ 0x28

        while( ( uxIndex + 1U ) < uxLast )
 800bc56:	e0b2      	b.n	800bdbe <vReceiveRA_ReadReply+0x196>
        {
            uint8_t ucType = pucBytes[ uxIndex ];
 800bc58:	69ba      	ldr	r2, [r7, #24]
 800bc5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc5c:	4413      	add	r3, r2
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	75fb      	strb	r3, [r7, #23]
            size_t uxPrefixLength = ( size_t ) pucBytes[ uxIndex + 1U ];
 800bc62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc64:	3301      	adds	r3, #1
 800bc66:	69ba      	ldr	r2, [r7, #24]
 800bc68:	4413      	add	r3, r2
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	613b      	str	r3, [r7, #16]
            size_t uxLength = uxPrefixLength * 8U;
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	00db      	lsls	r3, r3, #3
 800bc72:	60fb      	str	r3, [r7, #12]

            if( uxPrefixLength == 0U )
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d103      	bne.n	800bc82 <vReceiveRA_ReadReply+0x5a>
            {
                /* According to RFC 4861, length of the option value 0 is invalid. Hence returning from here */
                FreeRTOS_printf( ( "RA: Invalid length of the option value as zero. " ) );
 800bc7a:	4856      	ldr	r0, [pc, #344]	@ (800bdd4 <vReceiveRA_ReadReply+0x1ac>)
 800bc7c:	f014 fc56 	bl	802052c <lUDPLoggingPrintf>
                break;
 800bc80:	e0a3      	b.n	800bdca <vReceiveRA_ReadReply+0x1a2>
            }

            if( uxLast < ( uxIndex + uxLength ) )
 800bc82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	4413      	add	r3, r2
 800bc88:	69fa      	ldr	r2, [r7, #28]
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d208      	bcs.n	800bca0 <vReceiveRA_ReadReply+0x78>
            {
                FreeRTOS_printf( ( "RA: Not enough bytes ( %u > %u )\n", ( unsigned ) ( uxIndex + uxLength ), ( unsigned ) uxLast ) );
 800bc8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	4413      	add	r3, r2
 800bc94:	69fa      	ldr	r2, [r7, #28]
 800bc96:	4619      	mov	r1, r3
 800bc98:	484f      	ldr	r0, [pc, #316]	@ (800bdd8 <vReceiveRA_ReadReply+0x1b0>)
 800bc9a:	f014 fc47 	bl	802052c <lUDPLoggingPrintf>
                break;
 800bc9e:	e094      	b.n	800bdca <vReceiveRA_ReadReply+0x1a2>
            }

            switch( ucType )
 800bca0:	7dfb      	ldrb	r3, [r7, #23]
 800bca2:	3b01      	subs	r3, #1
 800bca4:	2b04      	cmp	r3, #4
 800bca6:	d87f      	bhi.n	800bda8 <vReceiveRA_ReadReply+0x180>
 800bca8:	a201      	add	r2, pc, #4	@ (adr r2, 800bcb0 <vReceiveRA_ReadReply+0x88>)
 800bcaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcae:	bf00      	nop
 800bcb0:	0800bcc5 	.word	0x0800bcc5
 800bcb4:	0800bdb5 	.word	0x0800bdb5
 800bcb8:	0800bd1f 	.word	0x0800bd1f
 800bcbc:	0800bdb5 	.word	0x0800bdb5
 800bcc0:	0800bd8f 	.word	0x0800bd8f
            {
                case ndICMP_SOURCE_LINK_LAYER_ADDRESS: /* 1 */
                    FreeRTOS_printf( ( "RA: Source = %02x-%02x-%02x-%02x-%02x-%02x\n",
 800bcc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcc6:	3302      	adds	r3, #2
 800bcc8:	69ba      	ldr	r2, [r7, #24]
 800bcca:	4413      	add	r3, r2
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	461c      	mov	r4, r3
 800bcd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcd2:	3303      	adds	r3, #3
 800bcd4:	69ba      	ldr	r2, [r7, #24]
 800bcd6:	4413      	add	r3, r2
 800bcd8:	781b      	ldrb	r3, [r3, #0]
 800bcda:	461d      	mov	r5, r3
 800bcdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcde:	3304      	adds	r3, #4
 800bce0:	69ba      	ldr	r2, [r7, #24]
 800bce2:	4413      	add	r3, r2
 800bce4:	781b      	ldrb	r3, [r3, #0]
 800bce6:	461e      	mov	r6, r3
 800bce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcea:	3305      	adds	r3, #5
 800bcec:	69ba      	ldr	r2, [r7, #24]
 800bcee:	4413      	add	r3, r2
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcf6:	3306      	adds	r3, #6
 800bcf8:	69ba      	ldr	r2, [r7, #24]
 800bcfa:	4413      	add	r3, r2
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	4618      	mov	r0, r3
 800bd00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd02:	3307      	adds	r3, #7
 800bd04:	69ba      	ldr	r2, [r7, #24]
 800bd06:	4413      	add	r3, r2
 800bd08:	781b      	ldrb	r3, [r3, #0]
 800bd0a:	9302      	str	r3, [sp, #8]
 800bd0c:	9001      	str	r0, [sp, #4]
 800bd0e:	9100      	str	r1, [sp, #0]
 800bd10:	4633      	mov	r3, r6
 800bd12:	462a      	mov	r2, r5
 800bd14:	4621      	mov	r1, r4
 800bd16:	4831      	ldr	r0, [pc, #196]	@ (800bddc <vReceiveRA_ReadReply+0x1b4>)
 800bd18:	f014 fc08 	bl	802052c <lUDPLoggingPrintf>
                                       pucBytes[ uxIndex + 3U ],
                                       pucBytes[ uxIndex + 4U ],
                                       pucBytes[ uxIndex + 5U ],
                                       pucBytes[ uxIndex + 6U ],
                                       pucBytes[ uxIndex + 7U ] ) );
                    break;
 800bd1c:	e04b      	b.n	800bdb6 <vReceiveRA_ReadReply+0x18e>

                case ndICMP_PREFIX_INFORMATION: /* 3 */
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxPrefixOption = ( ( ICMPPrefixOption_IPv6_t * ) &( pucBytes[ uxIndex ] ) );
 800bd1e:	69ba      	ldr	r2, [r7, #24]
 800bd20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd22:	4413      	add	r3, r2
 800bd24:	62bb      	str	r3, [r7, #40]	@ 0x28

                    FreeRTOS_printf( ( "RA: Prefix len %d Life %u, %u (%pip)\n",
 800bd26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd28:	789b      	ldrb	r3, [r3, #2]
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	061a      	lsls	r2, r3, #24
 800bd32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	021b      	lsls	r3, r3, #8
 800bd38:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bd3c:	431a      	orrs	r2, r3
 800bd3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	0a1b      	lsrs	r3, r3, #8
 800bd44:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bd48:	431a      	orrs	r2, r3
 800bd4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	0e1b      	lsrs	r3, r3, #24
 800bd50:	ea42 0103 	orr.w	r1, r2, r3
 800bd54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd56:	689b      	ldr	r3, [r3, #8]
 800bd58:	061a      	lsls	r2, r3, #24
 800bd5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd5c:	689b      	ldr	r3, [r3, #8]
 800bd5e:	021b      	lsls	r3, r3, #8
 800bd60:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bd64:	431a      	orrs	r2, r3
 800bd66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd68:	689b      	ldr	r3, [r3, #8]
 800bd6a:	0a1b      	lsrs	r3, r3, #8
 800bd6c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bd70:	431a      	orrs	r2, r3
 800bd72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd74:	689b      	ldr	r3, [r3, #8]
 800bd76:	0e1b      	lsrs	r3, r3, #24
 800bd78:	431a      	orrs	r2, r3
 800bd7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd7c:	3310      	adds	r3, #16
 800bd7e:	9300      	str	r3, [sp, #0]
 800bd80:	4613      	mov	r3, r2
 800bd82:	460a      	mov	r2, r1
 800bd84:	4601      	mov	r1, r0
 800bd86:	4816      	ldr	r0, [pc, #88]	@ (800bde0 <vReceiveRA_ReadReply+0x1b8>)
 800bd88:	f014 fbd0 	bl	802052c <lUDPLoggingPrintf>
                                       pxPrefixOption->ucPrefixLength,
                                       ( unsigned ) FreeRTOS_ntohl( pxPrefixOption->ulValidLifeTime ),
                                       ( unsigned ) FreeRTOS_ntohl( pxPrefixOption->ulPreferredLifeTime ),
                                       ( void * ) pxPrefixOption->ucPrefix ) );
                    break;
 800bd8c:	e013      	b.n	800bdb6 <vReceiveRA_ReadReply+0x18e>
                   {
                       uint32_t ulMTU;
                       ( void ) ulMTU;

                       /* ulChar2u32 returns host-endian numbers. */
                       ulMTU = ulChar2u32( &( pucBytes[ uxIndex + 4U ] ) );
 800bd8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd90:	3304      	adds	r3, #4
 800bd92:	69ba      	ldr	r2, [r7, #24]
 800bd94:	4413      	add	r3, r2
 800bd96:	4618      	mov	r0, r3
 800bd98:	f7fd fe60 	bl	8009a5c <ulChar2u32>
 800bd9c:	60b8      	str	r0, [r7, #8]
                       FreeRTOS_printf( ( "RA: MTU = %u\n", ( unsigned int ) ulMTU ) );
 800bd9e:	68b9      	ldr	r1, [r7, #8]
 800bda0:	4810      	ldr	r0, [pc, #64]	@ (800bde4 <vReceiveRA_ReadReply+0x1bc>)
 800bda2:	f014 fbc3 	bl	802052c <lUDPLoggingPrintf>
                   }
                   break;
 800bda6:	e006      	b.n	800bdb6 <vReceiveRA_ReadReply+0x18e>

                default:
                    FreeRTOS_printf( ( "RA: Type 0x%02x not implemented\n", ucType ) );
 800bda8:	7dfb      	ldrb	r3, [r7, #23]
 800bdaa:	4619      	mov	r1, r3
 800bdac:	480e      	ldr	r0, [pc, #56]	@ (800bde8 <vReceiveRA_ReadReply+0x1c0>)
 800bdae:	f014 fbbd 	bl	802052c <lUDPLoggingPrintf>
                    break;
 800bdb2:	e000      	b.n	800bdb6 <vReceiveRA_ReadReply+0x18e>
                    break;
 800bdb4:	bf00      	nop
            }

            uxIndex = uxIndex + uxLength;
 800bdb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	4413      	add	r3, r2
 800bdbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( ( uxIndex + 1U ) < uxLast )
 800bdbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	69fa      	ldr	r2, [r7, #28]
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	f63f af47 	bhi.w	800bc58 <vReceiveRA_ReadReply+0x30>
        } /* while( ( uxIndex + 1 ) < uxLast ) */

        return pxPrefixOption;
 800bdca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3734      	adds	r7, #52	@ 0x34
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdd4:	08023a2c 	.word	0x08023a2c
 800bdd8:	08023a60 	.word	0x08023a60
 800bddc:	08023a84 	.word	0x08023a84
 800bde0:	08023ab0 	.word	0x08023ab0
 800bde4:	08023ad8 	.word	0x08023ad8
 800bde8:	08023ae8 	.word	0x08023ae8

0800bdec <vReceiveRA>:
 *        already exists that uses the same IP-address.
 *
 * @param[in] pxNetworkBuffer The buffer that contains the message.
 */
    void vReceiveRA( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800bdec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdee:	b08d      	sub	sp, #52	@ 0x34
 800bdf0:	af04      	add	r7, sp, #16
 800bdf2:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ICMPPacket_IPv6_t * pxICMPPacket = ( ( const ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdf8:	61bb      	str	r3, [r7, #24]
        const ICMPPrefixOption_IPv6_t * pxPrefixOption = NULL;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	617b      	str	r3, [r7, #20]
        const size_t uxICMPSize = sizeof( ICMPRouterAdvertisement_IPv6_t );
 800bdfe:	2310      	movs	r3, #16
 800be00:	613b      	str	r3, [r7, #16]
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize;
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	3336      	adds	r3, #54	@ 0x36
 800be06:	60fb      	str	r3, [r7, #12]

        /* A Router Advertisement was received, handle it here. */
        if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be0c:	68fa      	ldr	r2, [r7, #12]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d903      	bls.n	800be1a <vReceiveRA+0x2e>
        {
            FreeRTOS_printf( ( "vReceiveRA: The buffer provided is too small\n" ) );
 800be12:	485b      	ldr	r0, [pc, #364]	@ (800bf80 <vReceiveRA+0x194>)
 800be14:	f014 fb8a 	bl	802052c <lUDPLoggingPrintf>
            else
            {
                /* The life-time field contains zero. */
            }
        }
    }
 800be18:	e0ae      	b.n	800bf78 <vReceiveRA+0x18c>
            const ICMPRouterAdvertisement_IPv6_t * pxAdvertisement = ( ( const ICMPRouterAdvertisement_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800be1a:	69bb      	ldr	r3, [r7, #24]
 800be1c:	3336      	adds	r3, #54	@ 0x36
 800be1e:	60bb      	str	r3, [r7, #8]
            FreeRTOS_printf( ( "RA: Type %02x Srv %02x Checksum %04x Hops %d Flags %02x Life %d\n",
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	461c      	mov	r4, r3
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	785b      	ldrb	r3, [r3, #1]
 800be2a:	461d      	mov	r5, r3
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	885b      	ldrh	r3, [r3, #2]
 800be30:	b29b      	uxth	r3, r3
 800be32:	021b      	lsls	r3, r3, #8
 800be34:	b21a      	sxth	r2, r3
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	885b      	ldrh	r3, [r3, #2]
 800be3a:	b29b      	uxth	r3, r3
 800be3c:	0a1b      	lsrs	r3, r3, #8
 800be3e:	b29b      	uxth	r3, r3
 800be40:	b21b      	sxth	r3, r3
 800be42:	4313      	orrs	r3, r2
 800be44:	b21b      	sxth	r3, r3
 800be46:	b29b      	uxth	r3, r3
 800be48:	461e      	mov	r6, r3
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	791b      	ldrb	r3, [r3, #4]
 800be4e:	4619      	mov	r1, r3
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	795b      	ldrb	r3, [r3, #5]
 800be54:	4618      	mov	r0, r3
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	88db      	ldrh	r3, [r3, #6]
 800be5a:	b29b      	uxth	r3, r3
 800be5c:	021b      	lsls	r3, r3, #8
 800be5e:	b21a      	sxth	r2, r3
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	88db      	ldrh	r3, [r3, #6]
 800be64:	b29b      	uxth	r3, r3
 800be66:	0a1b      	lsrs	r3, r3, #8
 800be68:	b29b      	uxth	r3, r3
 800be6a:	b21b      	sxth	r3, r3
 800be6c:	4313      	orrs	r3, r2
 800be6e:	b21b      	sxth	r3, r3
 800be70:	b29b      	uxth	r3, r3
 800be72:	9302      	str	r3, [sp, #8]
 800be74:	9001      	str	r0, [sp, #4]
 800be76:	9100      	str	r1, [sp, #0]
 800be78:	4633      	mov	r3, r6
 800be7a:	462a      	mov	r2, r5
 800be7c:	4621      	mov	r1, r4
 800be7e:	4841      	ldr	r0, [pc, #260]	@ (800bf84 <vReceiveRA+0x198>)
 800be80:	f014 fb54 	bl	802052c <lUDPLoggingPrintf>
            if( pxAdvertisement->usLifetime != 0U )
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	88db      	ldrh	r3, [r3, #6]
 800be88:	b29b      	uxth	r3, r3
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d074      	beq.n	800bf78 <vReceiveRA+0x18c>
                pxPrefixOption = vReceiveRA_ReadReply( pxNetworkBuffer );
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f7ff feca 	bl	800bc28 <vReceiveRA_ReadReply>
 800be94:	6178      	str	r0, [r7, #20]
                configASSERT( pxNetworkBuffer->pxInterface != NULL );
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d104      	bne.n	800bea8 <vReceiveRA+0xbc>
 800be9e:	f240 118b 	movw	r1, #395	@ 0x18b
 800bea2:	4839      	ldr	r0, [pc, #228]	@ (800bf88 <vReceiveRA+0x19c>)
 800bea4:	f7f5 f938 	bl	8001118 <vAssertCalled>
                if( pxPrefixOption != NULL )
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d064      	beq.n	800bf78 <vReceiveRA+0x18c>
                    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxNetworkBuffer->pxInterface );
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beb2:	4618      	mov	r0, r3
 800beb4:	f000 fbd8 	bl	800c668 <FreeRTOS_FirstEndPoint>
 800beb8:	61f8      	str	r0, [r7, #28]
 800beba:	e05a      	b.n	800bf72 <vReceiveRA+0x186>
                        if( ( pxEndPoint->bits.bWantRA != pdFALSE_UNSIGNED ) && ( pxEndPoint->xRAData.eRAState == eRAStateWait ) )
 800bebc:	69fb      	ldr	r3, [r7, #28]
 800bebe:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800bec2:	f003 0302 	and.w	r3, r3, #2
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d04b      	beq.n	800bf64 <vReceiveRA+0x178>
 800becc:	69fb      	ldr	r3, [r7, #28]
 800bece:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	d146      	bne.n	800bf64 <vReceiveRA+0x178>
                            pxEndPoint->ipv6_settings.uxPrefixLength = pxPrefixOption->ucPrefixLength;
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	789b      	ldrb	r3, [r3, #2]
 800beda:	461a      	mov	r2, r3
 800bedc:	69fb      	ldr	r3, [r7, #28]
 800bede:	649a      	str	r2, [r3, #72]	@ 0x48
                            ( void ) memcpy( pxEndPoint->ipv6_settings.xPrefix.ucBytes, pxPrefixOption->ucPrefix, ipSIZE_OF_IPv6_ADDRESS );
 800bee0:	69fb      	ldr	r3, [r7, #28]
 800bee2:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	3310      	adds	r3, #16
 800beea:	2210      	movs	r2, #16
 800beec:	4619      	mov	r1, r3
 800beee:	f014 fd39 	bl	8020964 <memcpy>
                            ( void ) memcpy( pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800bef2:	69fb      	ldr	r3, [r7, #28]
 800bef4:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
 800bef8:	69bb      	ldr	r3, [r7, #24]
 800befa:	3316      	adds	r3, #22
 800befc:	2210      	movs	r2, #16
 800befe:	4619      	mov	r1, r3
 800bf00:	f014 fd30 	bl	8020964 <memcpy>
                            pxEndPoint->xRAData.bits.bRouterReplied = pdTRUE_UNSIGNED;
 800bf04:	69fa      	ldr	r2, [r7, #28]
 800bf06:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800bf0a:	f043 0301 	orr.w	r3, r3, #1
 800bf0e:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                            pxEndPoint->xRAData.uxRetryCount = 0U;
 800bf12:	69fb      	ldr	r3, [r7, #28]
 800bf14:	2200      	movs	r2, #0
 800bf16:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                            pxEndPoint->xRAData.ulPreferredLifeTime = FreeRTOS_ntohl( pxPrefixOption->ulPreferredLifeTime );
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	689b      	ldr	r3, [r3, #8]
 800bf1e:	061a      	lsls	r2, r3, #24
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	689b      	ldr	r3, [r3, #8]
 800bf24:	021b      	lsls	r3, r3, #8
 800bf26:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bf2a:	431a      	orrs	r2, r3
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	689b      	ldr	r3, [r3, #8]
 800bf30:	0a1b      	lsrs	r3, r3, #8
 800bf32:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bf36:	431a      	orrs	r2, r3
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	689b      	ldr	r3, [r3, #8]
 800bf3c:	0e1b      	lsrs	r3, r3, #24
 800bf3e:	431a      	orrs	r2, r3
 800bf40:	69fb      	ldr	r3, [r7, #28]
 800bf42:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                            pxEndPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800bf46:	69fa      	ldr	r2, [r7, #28]
 800bf48:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800bf4c:	f043 0302 	orr.w	r3, r3, #2
 800bf50:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                            pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800bf54:	69fb      	ldr	r3, [r7, #28]
 800bf56:	2202      	movs	r2, #2
 800bf58:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                            vRAProcess( pdFALSE, pxEndPoint );
 800bf5c:	69f9      	ldr	r1, [r7, #28]
 800bf5e:	2000      	movs	r0, #0
 800bf60:	f000 f9b6 	bl	800c2d0 <vRAProcess>
                         pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkBuffer->pxInterface, pxEndPoint ) )
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf68:	69f9      	ldr	r1, [r7, #28]
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f000 fb9e 	bl	800c6ac <FreeRTOS_NextEndPoint>
 800bf70:	61f8      	str	r0, [r7, #28]
                         pxEndPoint != NULL;
 800bf72:	69fb      	ldr	r3, [r7, #28]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d1a1      	bne.n	800bebc <vReceiveRA+0xd0>
    }
 800bf78:	bf00      	nop
 800bf7a:	3724      	adds	r7, #36	@ 0x24
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf80:	08023b0c 	.word	0x08023b0c
 800bf84:	08023b3c 	.word	0x08023b3c
 800bf88:	080239c4 	.word	0x080239c4

0800bf8c <xRAProcess_HandleWaitStates>:
 *
 * @return New timer reload value.
 */
    static TickType_t xRAProcess_HandleWaitStates( NetworkEndPoint_t * pxEndPoint,
                                                   TickType_t uxReloadTime )
    {
 800bf8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bf90:	b088      	sub	sp, #32
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6178      	str	r0, [r7, #20]
 800bf96:	6139      	str	r1, [r7, #16]
        TickType_t uxNewReloadTime = uxReloadTime;
 800bf98:	6939      	ldr	r1, [r7, #16]
 800bf9a:	61f9      	str	r1, [r7, #28]

        if( pxEndPoint->xRAData.eRAState == eRAStateWait )
 800bf9c:	6979      	ldr	r1, [r7, #20]
 800bf9e:	f891 111c 	ldrb.w	r1, [r1, #284]	@ 0x11c
 800bfa2:	2901      	cmp	r1, #1
 800bfa4:	d133      	bne.n	800c00e <xRAProcess_HandleWaitStates+0x82>
        {
            /* A Router Solicitation has been sent, waited for a reply, but no came.
             * All replies will be handled in the function vReceiveRA(). */
            pxEndPoint->xRAData.uxRetryCount++;
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800bfac:	1c5a      	adds	r2, r3, #1
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118

            if( pxEndPoint->xRAData.uxRetryCount < ( UBaseType_t ) ipconfigRA_SEARCH_COUNT )
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800bfba:	2b02      	cmp	r3, #2
 800bfbc:	d804      	bhi.n	800bfc8 <xRAProcess_HandleWaitStates+0x3c>
            {
                pxEndPoint->xRAData.eRAState = eRAStateApply;
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
 800bfc6:	e0bf      	b.n	800c148 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else
            {
                FreeRTOS_printf( ( "RA: Giving up waiting for a Router.\n" ) );
 800bfc8:	4862      	ldr	r0, [pc, #392]	@ (800c154 <xRAProcess_HandleWaitStates+0x1c8>)
 800bfca:	f014 faaf 	bl	802052c <lUDPLoggingPrintf>
                ( void ) memcpy( &( pxEndPoint->ipv6_settings ), &( pxEndPoint->ipv6_defaults ), sizeof( pxEndPoint->ipv6_settings ) );
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	3390      	adds	r3, #144	@ 0x90
 800bfd8:	2258      	movs	r2, #88	@ 0x58
 800bfda:	4619      	mov	r1, r3
 800bfdc:	f014 fcc2 	bl	8020964 <memcpy>

                pxEndPoint->xRAData.bits.bRouterReplied = pdFALSE_UNSIGNED;
 800bfe0:	697a      	ldr	r2, [r7, #20]
 800bfe2:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800bfe6:	f36f 0300 	bfc	r3, #0, #1
 800bfea:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                pxEndPoint->xRAData.uxRetryCount = 0U;
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	2200      	movs	r2, #0
 800bff2:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                /* Force taking a new random IP-address. */
                pxEndPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800bff6:	697a      	ldr	r2, [r7, #20]
 800bff8:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800bffc:	f043 0302 	orr.w	r3, r3, #2
 800c000:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	2202      	movs	r2, #2
 800c008:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
 800c00c:	e09c      	b.n	800c148 <xRAProcess_HandleWaitStates+0x1bc>
            }
        }
        else if( pxEndPoint->xRAData.eRAState == eRAStateIPWait )
 800c00e:	6979      	ldr	r1, [r7, #20]
 800c010:	f891 111c 	ldrb.w	r1, [r1, #284]	@ 0x11c
 800c014:	2903      	cmp	r1, #3
 800c016:	f040 8097 	bne.w	800c148 <xRAProcess_HandleWaitStates+0x1bc>
        {
            /* A Neighbour Solicitation has been sent, waited for a reply.
             * Repeat this 'ipconfigRA_IP_TEST_COUNT' times to be sure. */
            if( pxEndPoint->xRAData.bits.bIPAddressInUse != pdFALSE_UNSIGNED )
 800c01a:	6979      	ldr	r1, [r7, #20]
 800c01c:	f891 1110 	ldrb.w	r1, [r1, #272]	@ 0x110
 800c020:	f001 0102 	and.w	r1, r1, #2
 800c024:	b2c9      	uxtb	r1, r1
 800c026:	2900      	cmp	r1, #0
 800c028:	d00b      	beq.n	800c042 <xRAProcess_HandleWaitStates+0xb6>
            {
                /* Another device has responded with the same IPv4 address. */
                pxEndPoint->xRAData.uxRetryCount = 0U;
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	2200      	movs	r2, #0
 800c02e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	2202      	movs	r2, #2
 800c036:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_IP_TEST_TIME_OUT_MSEC );
 800c03a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800c03e:	61fb      	str	r3, [r7, #28]
 800c040:	e082      	b.n	800c148 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else if( pxEndPoint->xRAData.uxRetryCount < ( UBaseType_t ) ipconfigRA_IP_TEST_COUNT )
 800c042:	6979      	ldr	r1, [r7, #20]
 800c044:	f8d1 1118 	ldr.w	r1, [r1, #280]	@ 0x118
 800c048:	2902      	cmp	r1, #2
 800c04a:	d80e      	bhi.n	800c06a <xRAProcess_HandleWaitStates+0xde>
            {
                /* Try again. */
                pxEndPoint->xRAData.uxRetryCount++;
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800c052:	1c5a      	adds	r2, r3, #1
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	2202      	movs	r2, #2
 800c05e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_IP_TEST_TIME_OUT_MSEC );
 800c062:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800c066:	61fb      	str	r3, [r7, #28]
 800c068:	e06e      	b.n	800c148 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else
            {
                /* Now it is assumed that there is no other device using the same IP-address. */
                if( pxEndPoint->xRAData.bits.bRouterReplied != pdFALSE_UNSIGNED )
 800c06a:	6979      	ldr	r1, [r7, #20]
 800c06c:	f891 1110 	ldrb.w	r1, [r1, #272]	@ 0x110
 800c070:	f001 0101 	and.w	r1, r1, #1
 800c074:	b2c9      	uxtb	r1, r1
 800c076:	2900      	cmp	r1, #0
 800c078:	d057      	beq.n	800c12a <xRAProcess_HandleWaitStates+0x19e>
                {
                    /* Obtained configuration from a router. */
                    uxNewReloadTime = pdMS_TO_TICKS( ( 1000U * ( uint64_t ) pxEndPoint->xRAData.ulPreferredLifeTime ) );
 800c07a:	6979      	ldr	r1, [r7, #20]
 800c07c:	f8d1 1114 	ldr.w	r1, [r1, #276]	@ 0x114
 800c080:	2000      	movs	r0, #0
 800c082:	4688      	mov	r8, r1
 800c084:	4681      	mov	r9, r0
 800c086:	4640      	mov	r0, r8
 800c088:	4649      	mov	r1, r9
 800c08a:	f04f 0a00 	mov.w	sl, #0
 800c08e:	f04f 0b00 	mov.w	fp, #0
 800c092:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 800c096:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 800c09a:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800c09e:	4650      	mov	r0, sl
 800c0a0:	4659      	mov	r1, fp
 800c0a2:	ebb0 0208 	subs.w	r2, r0, r8
 800c0a6:	eb61 0309 	sbc.w	r3, r1, r9
 800c0aa:	f04f 0000 	mov.w	r0, #0
 800c0ae:	f04f 0100 	mov.w	r1, #0
 800c0b2:	0259      	lsls	r1, r3, #9
 800c0b4:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800c0b8:	0250      	lsls	r0, r2, #9
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	460b      	mov	r3, r1
 800c0be:	eb12 0408 	adds.w	r4, r2, r8
 800c0c2:	eb43 0509 	adc.w	r5, r3, r9
 800c0c6:	f04f 0200 	mov.w	r2, #0
 800c0ca:	f04f 0300 	mov.w	r3, #0
 800c0ce:	01ab      	lsls	r3, r5, #6
 800c0d0:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 800c0d4:	01a2      	lsls	r2, r4, #6
 800c0d6:	1b11      	subs	r1, r2, r4
 800c0d8:	6039      	str	r1, [r7, #0]
 800c0da:	eb63 0305 	sbc.w	r3, r3, r5
 800c0de:	607b      	str	r3, [r7, #4]
 800c0e0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c0e4:	460b      	mov	r3, r1
 800c0e6:	eb13 0308 	adds.w	r3, r3, r8
 800c0ea:	60bb      	str	r3, [r7, #8]
 800c0ec:	4613      	mov	r3, r2
 800c0ee:	eb43 0309 	adc.w	r3, r3, r9
 800c0f2:	60fb      	str	r3, [r7, #12]
 800c0f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c0f8:	f04f 0300 	mov.w	r3, #0
 800c0fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c100:	f7f4 f956 	bl	80003b0 <__aeabi_uldivmod>
 800c104:	4602      	mov	r2, r0
 800c106:	460b      	mov	r3, r1
 800c108:	4613      	mov	r3, r2
 800c10a:	61fb      	str	r3, [r7, #28]
                    pxEndPoint->xRAData.eRAState = eRAStatePreLease;
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	2204      	movs	r2, #4
 800c110:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                    iptraceRA_SUCCEEDED( &( pxEndPoint->ipv6_settings.xIPAddress ) );
                    FreeRTOS_printf( ( "RA: succeeded, using IP address %pip Reload after %u seconds\n",
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c120:	461a      	mov	r2, r3
 800c122:	480d      	ldr	r0, [pc, #52]	@ (800c158 <xRAProcess_HandleWaitStates+0x1cc>)
 800c124:	f014 fa02 	bl	802052c <lUDPLoggingPrintf>
 800c128:	e00b      	b.n	800c142 <xRAProcess_HandleWaitStates+0x1b6>
                                       ( unsigned ) pxEndPoint->xRAData.ulPreferredLifeTime ) );
                }
                else
                {
                    /* Using the default network parameters. */
                    pxEndPoint->xRAData.eRAState = eRAStateFailed;
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	2206      	movs	r2, #6
 800c12e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

                    iptraceRA_REQUESTS_FAILED_USING_DEFAULT_IP_ADDRESS( &( pxEndPoint->ipv6_settings.xIPAddress ) );

                    FreeRTOS_printf( ( "RA: failed, using default parameters and IP address %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	3338      	adds	r3, #56	@ 0x38
 800c136:	4619      	mov	r1, r3
 800c138:	4808      	ldr	r0, [pc, #32]	@ (800c15c <xRAProcess_HandleWaitStates+0x1d0>)
 800c13a:	f014 f9f7 	bl	802052c <lUDPLoggingPrintf>
                    /* Disable the timer. */
                    uxNewReloadTime = 0U;
 800c13e:	2300      	movs	r3, #0
 800c140:	61fb      	str	r3, [r7, #28]
                }

                /* Now call vIPNetworkUpCalls() to send the network-up event and
                 * start the ARP timer. */
                vIPNetworkUpCalls( pxEndPoint );
 800c142:	6978      	ldr	r0, [r7, #20]
 800c144:	f7fc fa08 	bl	8008558 <vIPNetworkUpCalls>
        else
        {
            /* Do nothing */
        }

        return uxNewReloadTime;
 800c148:	69fb      	ldr	r3, [r7, #28]
    }
 800c14a:	4618      	mov	r0, r3
 800c14c:	3720      	adds	r7, #32
 800c14e:	46bd      	mov	sp, r7
 800c150:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c154:	08023b80 	.word	0x08023b80
 800c158:	08023ba8 	.word	0x08023ba8
 800c15c:	08023be8 	.word	0x08023be8

0800c160 <xRAProcess_HandleOtherStates>:
 *
 * @return New timer reload value.
 */
    static TickType_t xRAProcess_HandleOtherStates( NetworkEndPoint_t * pxEndPoint,
                                                    TickType_t uxReloadTime )
    {
 800c160:	b580      	push	{r7, lr}
 800c162:	b08c      	sub	sp, #48	@ 0x30
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	6039      	str	r1, [r7, #0]
        TickType_t uxNewReloadTime = uxReloadTime;
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        switch( pxEndPoint->xRAData.eRAState )
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800c174:	2b06      	cmp	r3, #6
 800c176:	f200 808c 	bhi.w	800c292 <xRAProcess_HandleOtherStates+0x132>
 800c17a:	a201      	add	r2, pc, #4	@ (adr r2, 800c180 <xRAProcess_HandleOtherStates+0x20>)
 800c17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c180:	0800c19d 	.word	0x0800c19d
 800c184:	0800c293 	.word	0x0800c293
 800c188:	0800c1ff 	.word	0x0800c1ff
 800c18c:	0800c293 	.word	0x0800c293
 800c190:	0800c27b 	.word	0x0800c27b
 800c194:	0800c285 	.word	0x0800c285
 800c198:	0800c293 	.word	0x0800c293
                   IPv6_Address_t xIPAddress;
                   size_t uxNeededSize;
                   NetworkBufferDescriptor_t * pxNetworkBuffer;

                   /* Send a Router Solicitation to ff02::2 */
                   ( void ) memset( xIPAddress.ucBytes, 0, sizeof( xIPAddress.ucBytes ) );
 800c19c:	f107 030c 	add.w	r3, r7, #12
 800c1a0:	2210      	movs	r2, #16
 800c1a2:	2100      	movs	r1, #0
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f014 fcea 	bl	8020b7e <memset>
                   xIPAddress.ucBytes[ 0 ] = 0xffU;
 800c1aa:	23ff      	movs	r3, #255	@ 0xff
 800c1ac:	733b      	strb	r3, [r7, #12]
                   xIPAddress.ucBytes[ 1 ] = 0x02U;
 800c1ae:	2302      	movs	r3, #2
 800c1b0:	737b      	strb	r3, [r7, #13]
                   xIPAddress.ucBytes[ 15 ] = 0x02U;
 800c1b2:	2302      	movs	r3, #2
 800c1b4:	76fb      	strb	r3, [r7, #27]
                   uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPRouterSolicitation_IPv6_t );
 800c1b6:	233e      	movs	r3, #62	@ 0x3e
 800c1b8:	623b      	str	r3, [r7, #32]
                   pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, raDONT_BLOCK );
 800c1ba:	2100      	movs	r1, #0
 800c1bc:	6a38      	ldr	r0, [r7, #32]
 800c1be:	f00a f863 	bl	8016288 <pxGetNetworkBufferWithDescriptor>
 800c1c2:	61f8      	str	r0, [r7, #28]

                   if( pxNetworkBuffer != NULL )
 800c1c4:	69fb      	ldr	r3, [r7, #28]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d008      	beq.n	800c1dc <xRAProcess_HandleOtherStates+0x7c>
                   {
                       pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800c1ca:	69fb      	ldr	r3, [r7, #28]
 800c1cc:	687a      	ldr	r2, [r7, #4]
 800c1ce:	631a      	str	r2, [r3, #48]	@ 0x30
                       vNDSendRouterSolicitation( pxNetworkBuffer, &( xIPAddress ) );
 800c1d0:	f107 030c 	add.w	r3, r7, #12
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	69f8      	ldr	r0, [r7, #28]
 800c1d8:	f7ff fc24 	bl	800ba24 <vNDSendRouterSolicitation>
                   }

                   FreeRTOS_printf( ( "vRAProcess: Router Solicitation, attempt %lu/%u\n",
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800c1e2:	3301      	adds	r3, #1
 800c1e4:	2203      	movs	r2, #3
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	482d      	ldr	r0, [pc, #180]	@ (800c2a0 <xRAProcess_HandleOtherStates+0x140>)
 800c1ea:	f014 f99f 	bl	802052c <lUDPLoggingPrintf>
                                      pxEndPoint->xRAData.uxRetryCount + 1U,
                                      ipconfigRA_SEARCH_COUNT ) );
                   /* Wait a configurable time for a router advertisement. */
                   uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_SEARCH_TIME_OUT_MSEC );
 800c1ee:	f242 7310 	movw	r3, #10000	@ 0x2710
 800c1f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                   pxEndPoint->xRAData.eRAState = eRAStateWait;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
               }
               break;
 800c1fc:	e04a      	b.n	800c294 <xRAProcess_HandleOtherStates+0x134>
               {
                   size_t uxNeededSize;
                   NetworkBufferDescriptor_t * pxNetworkBuffer;

                   /* Get an IP-address, using the network prefix and a random host address. */
                   if( pxEndPoint->xRAData.bits.bIPAddressInUse != 0U )
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800c204:	f003 0302 	and.w	r3, r3, #2
 800c208:	b2db      	uxtb	r3, r3
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d014      	beq.n	800c238 <xRAProcess_HandleOtherStates+0xd8>
                   {
                       pxEndPoint->xRAData.bits.bIPAddressInUse = pdFALSE_UNSIGNED;
 800c20e:	687a      	ldr	r2, [r7, #4]
 800c210:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800c214:	f36f 0341 	bfc	r3, #1, #1
 800c218:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110

                       ( void ) FreeRTOS_CreateIPv6Address( &pxEndPoint->ipv6_settings.xIPAddress, &pxEndPoint->ipv6_settings.xPrefix, pxEndPoint->ipv6_settings.uxPrefixLength, pdTRUE );
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c22c:	2301      	movs	r3, #1
 800c22e:	f7ff fb2b 	bl	800b888 <FreeRTOS_CreateIPv6Address>

                       FreeRTOS_printf( ( "RA: Creating a random IP-address\n" ) );
 800c232:	481c      	ldr	r0, [pc, #112]	@ (800c2a4 <xRAProcess_HandleOtherStates+0x144>)
 800c234:	f014 f97a 	bl	802052c <lUDPLoggingPrintf>
                   }

                   FreeRTOS_printf( ( "RA: Neighbour solicitation for %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	3338      	adds	r3, #56	@ 0x38
 800c23c:	4619      	mov	r1, r3
 800c23e:	481a      	ldr	r0, [pc, #104]	@ (800c2a8 <xRAProcess_HandleOtherStates+0x148>)
 800c240:	f014 f974 	bl	802052c <lUDPLoggingPrintf>

                   uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800c244:	2356      	movs	r3, #86	@ 0x56
 800c246:	62bb      	str	r3, [r7, #40]	@ 0x28
                   pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, raDONT_BLOCK );
 800c248:	2100      	movs	r1, #0
 800c24a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c24c:	f00a f81c 	bl	8016288 <pxGetNetworkBufferWithDescriptor>
 800c250:	6278      	str	r0, [r7, #36]	@ 0x24

                   if( pxNetworkBuffer != NULL )
 800c252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c254:	2b00      	cmp	r3, #0
 800c256:	d008      	beq.n	800c26a <xRAProcess_HandleOtherStates+0x10a>
                   {
                       pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800c258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	631a      	str	r2, [r3, #48]	@ 0x30
                       vNDSendNeighbourSolicitation( pxNetworkBuffer, &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	3338      	adds	r3, #56	@ 0x38
 800c262:	4619      	mov	r1, r3
 800c264:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c266:	f7fe ff25 	bl	800b0b4 <vNDSendNeighbourSolicitation>
                   }

                   uxNewReloadTime = pdMS_TO_TICKS( 1000U );
 800c26a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c26e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                   pxEndPoint->xRAData.eRAState = eRAStateIPWait;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2203      	movs	r2, #3
 800c274:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
               }
               break;
 800c278:	e00c      	b.n	800c294 <xRAProcess_HandleOtherStates+0x134>

            case eRAStatePreLease:
                pxEndPoint->xRAData.eRAState = eRAStateLease;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2205      	movs	r2, #5
 800c27e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                break;
 800c282:	e007      	b.n	800c294 <xRAProcess_HandleOtherStates+0x134>

            case eRAStateLease:

                vRAProcessInit( pxEndPoint );
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f000 f811 	bl	800c2ac <vRAProcessInit>
                uxNewReloadTime = pdMS_TO_TICKS( 1000U );
 800c28a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c28e:	62fb      	str	r3, [r7, #44]	@ 0x2c

                break;
 800c290:	e000      	b.n	800c294 <xRAProcess_HandleOtherStates+0x134>
            case eRAStateFailed:
                break;

            default:
                /* All states were handled. */
                break;
 800c292:	bf00      	nop
        }

        return uxNewReloadTime;
 800c294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800c296:	4618      	mov	r0, r3
 800c298:	3730      	adds	r7, #48	@ 0x30
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}
 800c29e:	bf00      	nop
 800c2a0:	08023c24 	.word	0x08023c24
 800c2a4:	08023c58 	.word	0x08023c58
 800c2a8:	08023c7c 	.word	0x08023c7c

0800c2ac <vRAProcessInit>:
 * @brief Initialise the RA state machine.
 *
 * @param[in] pxEndPoint The end-point for which Router Advertisement is required.
 */
    static void vRAProcessInit( NetworkEndPoint_t * pxEndPoint )
    {
 800c2ac:	b480      	push	{r7}
 800c2ae:	b083      	sub	sp, #12
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
        pxEndPoint->xRAData.uxRetryCount = 0U;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        pxEndPoint->xRAData.eRAState = eRAStateApply;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
    }
 800c2c4:	bf00      	nop
 800c2c6:	370c      	adds	r7, #12
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ce:	4770      	bx	lr

0800c2d0 <vRAProcess>:
 * @param[in] xDoReset pdTRUE if the state machine must be reset.
 * @param[in] pxEndPoint The end-point for which a RA assignment is required.
 */
    void vRAProcess( BaseType_t xDoReset,
                     NetworkEndPoint_t * pxEndPoint )
    {
 800c2d0:	b590      	push	{r4, r7, lr}
 800c2d2:	b089      	sub	sp, #36	@ 0x24
 800c2d4:	af04      	add	r7, sp, #16
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
        TickType_t uxReloadTime = pdMS_TO_TICKS( 5000U );
 800c2da:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c2de:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_PRINTF == 1 )
            eRAState_t eRAState;
        #endif

        configASSERT( pxEndPoint != NULL );
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d104      	bne.n	800c2f0 <vRAProcess+0x20>
 800c2e6:	f240 2189 	movw	r1, #649	@ 0x289
 800c2ea:	4828      	ldr	r0, [pc, #160]	@ (800c38c <vRAProcess+0xbc>)
 800c2ec:	f7f4 ff14 	bl	8001118 <vAssertCalled>

        #if ( ipconfigHAS_PRINTF == 1 )
            /* Remember the initial state, just for logging. */
            eRAState = pxEndPoint->xRAData.eRAState;
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800c2f6:	72fb      	strb	r3, [r7, #11]
        #endif

        if( xDoReset != pdFALSE )
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d002      	beq.n	800c304 <vRAProcess+0x34>
        {
            vRAProcessInit( pxEndPoint );
 800c2fe:	6838      	ldr	r0, [r7, #0]
 800c300:	f7ff ffd4 	bl	800c2ac <vRAProcessInit>
        }

        /* First handle the states that are limited by a timer. See if some
         * timer has expired. */
        uxReloadTime = xRAProcess_HandleWaitStates( pxEndPoint, uxReloadTime );
 800c304:	68f9      	ldr	r1, [r7, #12]
 800c306:	6838      	ldr	r0, [r7, #0]
 800c308:	f7ff fe40 	bl	800bf8c <xRAProcess_HandleWaitStates>
 800c30c:	60f8      	str	r0, [r7, #12]

        /* Now handle the other states. */
        uxReloadTime = xRAProcess_HandleOtherStates( pxEndPoint, uxReloadTime );
 800c30e:	68f9      	ldr	r1, [r7, #12]
 800c310:	6838      	ldr	r0, [r7, #0]
 800c312:	f7ff ff25 	bl	800c160 <xRAProcess_HandleOtherStates>
 800c316:	60f8      	str	r0, [r7, #12]

        #if ( ipconfigHAS_PRINTF == 1 )
        {
            FreeRTOS_printf( ( "vRAProcess( %ld, %pip) bRouterReplied=%d bIPAddressInUse=%d state %d -> %d\n",
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800c324:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c328:	b2db      	uxtb	r3, r3
 800c32a:	461c      	mov	r4, r3
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800c332:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c336:	b2db      	uxtb	r3, r3
 800c338:	4618      	mov	r0, r3
 800c33a:	7afb      	ldrb	r3, [r7, #11]
 800c33c:	683a      	ldr	r2, [r7, #0]
 800c33e:	f892 211c 	ldrb.w	r2, [r2, #284]	@ 0x11c
 800c342:	9202      	str	r2, [sp, #8]
 800c344:	9301      	str	r3, [sp, #4]
 800c346:	9000      	str	r0, [sp, #0]
 800c348:	4623      	mov	r3, r4
 800c34a:	460a      	mov	r2, r1
 800c34c:	6879      	ldr	r1, [r7, #4]
 800c34e:	4810      	ldr	r0, [pc, #64]	@ (800c390 <vRAProcess+0xc0>)
 800c350:	f014 f8ec 	bl	802052c <lUDPLoggingPrintf>
                               eRAState,
                               pxEndPoint->xRAData.eRAState ) );
        }
        #endif /* ( ipconfigHAS_PRINTF == 1 ) */

        if( uxReloadTime != 0U )
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d00d      	beq.n	800c376 <vRAProcess+0xa6>
        {
            FreeRTOS_printf( ( "RA: Reload %u seconds\n", ( unsigned ) ( uxReloadTime / 1000U ) ) );
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	4a0d      	ldr	r2, [pc, #52]	@ (800c394 <vRAProcess+0xc4>)
 800c35e:	fba2 2303 	umull	r2, r3, r2, r3
 800c362:	099b      	lsrs	r3, r3, #6
 800c364:	4619      	mov	r1, r3
 800c366:	480c      	ldr	r0, [pc, #48]	@ (800c398 <vRAProcess+0xc8>)
 800c368:	f014 f8e0 	bl	802052c <lUDPLoggingPrintf>
            vDHCP_RATimerReload( pxEndPoint, uxReloadTime );
 800c36c:	68f9      	ldr	r1, [r7, #12]
 800c36e:	6838      	ldr	r0, [r7, #0]
 800c370:	f7fc ff8a 	bl	8009288 <vDHCP_RATimerReload>
        {
            /* Disable the timer, this function vRAProcess() won't be called anymore for this end-point. */
            FreeRTOS_printf( ( "RA: Disabled timer.\n" ) );
            vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
        }
    }
 800c374:	e006      	b.n	800c384 <vRAProcess+0xb4>
            FreeRTOS_printf( ( "RA: Disabled timer.\n" ) );
 800c376:	4809      	ldr	r0, [pc, #36]	@ (800c39c <vRAProcess+0xcc>)
 800c378:	f014 f8d8 	bl	802052c <lUDPLoggingPrintf>
            vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
 800c37c:	2100      	movs	r1, #0
 800c37e:	6838      	ldr	r0, [r7, #0]
 800c380:	f7fd f836 	bl	80093f0 <vIPSetDHCP_RATimerEnableState>
    }
 800c384:	bf00      	nop
 800c386:	3714      	adds	r7, #20
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd90      	pop	{r4, r7, pc}
 800c38c:	080239c4 	.word	0x080239c4
 800c390:	08023ca4 	.word	0x08023ca4
 800c394:	10624dd3 	.word	0x10624dd3
 800c398:	08023cf0 	.word	0x08023cf0
 800c39c:	08023d08 	.word	0x08023d08

0800c3a0 <FreeRTOS_FillEndPoint>:
                                const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
    {
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b086      	sub	sp, #24
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	60f8      	str	r0, [r7, #12]
 800c3a8:	60b9      	str	r1, [r7, #8]
 800c3aa:	607a      	str	r2, [r7, #4]
 800c3ac:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddress;

        if( ( pxNetworkInterface == NULL ) || ( pxEndPoint == NULL ) )
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d002      	beq.n	800c3ba <FreeRTOS_FillEndPoint+0x1a>
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d105      	bne.n	800c3c6 <FreeRTOS_FillEndPoint+0x26>
        {
            /* Invalid input. */
            FreeRTOS_printf( ( "FreeRTOS_FillEndPoint: Invalid input, netif=%p, endpoint=%p\n",
 800c3ba:	68ba      	ldr	r2, [r7, #8]
 800c3bc:	68f9      	ldr	r1, [r7, #12]
 800c3be:	483f      	ldr	r0, [pc, #252]	@ (800c4bc <FreeRTOS_FillEndPoint+0x11c>)
 800c3c0:	f014 f8b4 	bl	802052c <lUDPLoggingPrintf>
 800c3c4:	e075      	b.n	800c4b2 <FreeRTOS_FillEndPoint+0x112>
             * The user must make sure that the object pointed to by 'pxEndPoint'
             * will remain to exist. */

            /* As the endpoint might be part of a linked list,
             * protect the field pxNext from being overwritten. */
            NetworkEndPoint_t * pxNext = pxEndPoint->pxNext;
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800c3cc:	617b      	str	r3, [r7, #20]
            ( void ) memset( pxEndPoint, 0, sizeof( *pxEndPoint ) );
 800c3ce:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800c3d2:	2100      	movs	r1, #0
 800c3d4:	68b8      	ldr	r0, [r7, #8]
 800c3d6:	f014 fbd2 	bl	8020b7e <memset>
            pxEndPoint->pxNext = pxNext;
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	697a      	ldr	r2, [r7, #20]
 800c3de:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

            ulIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	3303      	adds	r3, #3
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	061a      	lsls	r2, r3, #24
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	3302      	adds	r3, #2
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	041b      	lsls	r3, r3, #16
 800c3f2:	431a      	orrs	r2, r3
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	021b      	lsls	r3, r3, #8
 800c3fc:	4313      	orrs	r3, r2
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	7812      	ldrb	r2, [r2, #0]
 800c402:	4313      	orrs	r3, r2
 800c404:	613b      	str	r3, [r7, #16]
            pxEndPoint->ipv4_settings.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	3303      	adds	r3, #3
 800c40a:	781b      	ldrb	r3, [r3, #0]
 800c40c:	061a      	lsls	r2, r3, #24
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	3302      	adds	r3, #2
 800c412:	781b      	ldrb	r3, [r3, #0]
 800c414:	041b      	lsls	r3, r3, #16
 800c416:	431a      	orrs	r2, r3
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	3301      	adds	r3, #1
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	021b      	lsls	r3, r3, #8
 800c420:	4313      	orrs	r3, r2
 800c422:	683a      	ldr	r2, [r7, #0]
 800c424:	7812      	ldrb	r2, [r2, #0]
 800c426:	431a      	orrs	r2, r3
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	605a      	str	r2, [r3, #4]
            pxEndPoint->ipv4_settings.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 800c42c:	6a3b      	ldr	r3, [r7, #32]
 800c42e:	3303      	adds	r3, #3
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	061a      	lsls	r2, r3, #24
 800c434:	6a3b      	ldr	r3, [r7, #32]
 800c436:	3302      	adds	r3, #2
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	041b      	lsls	r3, r3, #16
 800c43c:	431a      	orrs	r2, r3
 800c43e:	6a3b      	ldr	r3, [r7, #32]
 800c440:	3301      	adds	r3, #1
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	021b      	lsls	r3, r3, #8
 800c446:	4313      	orrs	r3, r2
 800c448:	6a3a      	ldr	r2, [r7, #32]
 800c44a:	7812      	ldrb	r2, [r2, #0]
 800c44c:	431a      	orrs	r2, r3
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	609a      	str	r2, [r3, #8]
            pxEndPoint->ipv4_settings.ulDNSServerAddresses[ 0 ] = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 800c452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c454:	3303      	adds	r3, #3
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	061a      	lsls	r2, r3, #24
 800c45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c45c:	3302      	adds	r3, #2
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	041b      	lsls	r3, r3, #16
 800c462:	431a      	orrs	r2, r3
 800c464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c466:	3301      	adds	r3, #1
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	021b      	lsls	r3, r3, #8
 800c46c:	4313      	orrs	r3, r2
 800c46e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c470:	7812      	ldrb	r2, [r2, #0]
 800c472:	431a      	orrs	r2, r3
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	60da      	str	r2, [r3, #12]
            pxEndPoint->ipv4_settings.ulBroadcastAddress = ulIPAddress | ~( pxEndPoint->ipv4_settings.ulNetMask );
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	43da      	mvns	r2, r3
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	431a      	orrs	r2, r3
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	615a      	str	r2, [r3, #20]

            /* Copy the current values to the default values. */
            ( void ) memcpy( &( pxEndPoint->ipv4_defaults ), &( pxEndPoint->ipv4_settings ), sizeof( pxEndPoint->ipv4_defaults ) );
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	331c      	adds	r3, #28
 800c48a:	68b9      	ldr	r1, [r7, #8]
 800c48c:	221c      	movs	r2, #28
 800c48e:	4618      	mov	r0, r3
 800c490:	f014 fa68 	bl	8020964 <memcpy>

            /* The default IP-address will be used in case DHCP is not used, or also if DHCP has failed, or
             * when the user chooses to use the default IP-address. */
            pxEndPoint->ipv4_defaults.ulIPAddress = ulIPAddress;
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	693a      	ldr	r2, [r7, #16]
 800c498:	61da      	str	r2, [r3, #28]

            /* The field 'ipv4_settings.ulIPAddress' will be set later on. */

            ( void ) memcpy( pxEndPoint->xMACAddress.ucBytes, ucMACAddress, sizeof( pxEndPoint->xMACAddress ) );
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	33e8      	adds	r3, #232	@ 0xe8
 800c49e:	2206      	movs	r2, #6
 800c4a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f014 fa5e 	bl	8020964 <memcpy>
            ( void ) FreeRTOS_AddEndPoint( pxNetworkInterface, pxEndPoint );
 800c4a8:	68b9      	ldr	r1, [r7, #8]
 800c4aa:	68f8      	ldr	r0, [r7, #12]
 800c4ac:	f000 f85c 	bl	800c568 <FreeRTOS_AddEndPoint>
        }
    }
 800c4b0:	bf00      	nop
 800c4b2:	bf00      	nop
 800c4b4:	3718      	adds	r7, #24
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
 800c4ba:	bf00      	nop
 800c4bc:	08023d20 	.word	0x08023d20

0800c4c0 <FreeRTOS_AddNetworkInterface>:
 * @param[in] pxInterface The address of the new interface.
 *
 * @return The value of the parameter 'pxInterface'.
 */
    NetworkInterface_t * FreeRTOS_AddNetworkInterface( NetworkInterface_t * pxInterface )
    {
 800c4c0:	b480      	push	{r7}
 800c4c2:	b085      	sub	sp, #20
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxIterator = NULL;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	60fb      	str	r3, [r7, #12]

        if( pxInterface != NULL )
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d021      	beq.n	800c516 <FreeRTOS_AddNetworkInterface+0x56>
        {
            if( pxNetworkInterfaces == NULL )
 800c4d2:	4b14      	ldr	r3, [pc, #80]	@ (800c524 <FreeRTOS_AddNetworkInterface+0x64>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d106      	bne.n	800c4e8 <FreeRTOS_AddNetworkInterface+0x28>
            {
                /* No other interfaces are set yet, so this is the first in the list. */
                pxNetworkInterfaces = pxInterface;
 800c4da:	4a12      	ldr	r2, [pc, #72]	@ (800c524 <FreeRTOS_AddNetworkInterface+0x64>)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6013      	str	r3, [r2, #0]
                pxInterface->pxNext = NULL;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	625a      	str	r2, [r3, #36]	@ 0x24
 800c4e6:	e016      	b.n	800c516 <FreeRTOS_AddNetworkInterface+0x56>
            }
            else
            {
                /* Other interfaces are already defined, so iterate to the end of the
                 * list. */
                pxIterator = pxNetworkInterfaces;
 800c4e8:	4b0e      	ldr	r3, [pc, #56]	@ (800c524 <FreeRTOS_AddNetworkInterface+0x64>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	60fb      	str	r3, [r7, #12]

                for( ; ; )
                {
                    if( pxIterator == pxInterface )
 800c4ee:	68fa      	ldr	r2, [r7, #12]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d00e      	beq.n	800c514 <FreeRTOS_AddNetworkInterface+0x54>
                    {
                        /* This interface was already added. */
                        break;
                    }

                    if( pxIterator->pxNext == NULL )
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d106      	bne.n	800c50c <FreeRTOS_AddNetworkInterface+0x4c>
                    {
                        pxIterator->pxNext = pxInterface;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	625a      	str	r2, [r3, #36]	@ 0x24
                        pxInterface->pxNext = NULL;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2200      	movs	r2, #0
 800c508:	625a      	str	r2, [r3, #36]	@ 0x24
                        break;
 800c50a:	e004      	b.n	800c516 <FreeRTOS_AddNetworkInterface+0x56>
                    }

                    pxIterator = pxIterator->pxNext;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c510:	60fb      	str	r3, [r7, #12]
                    if( pxIterator == pxInterface )
 800c512:	e7ec      	b.n	800c4ee <FreeRTOS_AddNetworkInterface+0x2e>
                        break;
 800c514:	bf00      	nop
                }
            }
        }

        return pxInterface;
 800c516:	687b      	ldr	r3, [r7, #4]
    }
 800c518:	4618      	mov	r0, r3
 800c51a:	3714      	adds	r7, #20
 800c51c:	46bd      	mov	sp, r7
 800c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c522:	4770      	bx	lr
 800c524:	200011d4 	.word	0x200011d4

0800c528 <FreeRTOS_FirstNetworkInterface>:
 * @brief Get the first Network Interface, or NULL if none has been added.
 *
 * @return The first interface, or NULL if none has been added
 */
    NetworkInterface_t * FreeRTOS_FirstNetworkInterface( void )
    {
 800c528:	b480      	push	{r7}
 800c52a:	af00      	add	r7, sp, #0
        return pxNetworkInterfaces;
 800c52c:	4b03      	ldr	r3, [pc, #12]	@ (800c53c <FreeRTOS_FirstNetworkInterface+0x14>)
 800c52e:	681b      	ldr	r3, [r3, #0]
    }
 800c530:	4618      	mov	r0, r3
 800c532:	46bd      	mov	sp, r7
 800c534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c538:	4770      	bx	lr
 800c53a:	bf00      	nop
 800c53c:	200011d4 	.word	0x200011d4

0800c540 <FreeRTOS_NextNetworkInterface>:
 *
 * @return The interface that comes after 'pxInterface'. NULL when either 'pxInterface'
 *         is NULL, or when 'pxInterface' is the last interface.
 */
    NetworkInterface_t * FreeRTOS_NextNetworkInterface( const NetworkInterface_t * pxInterface )
    {
 800c540:	b480      	push	{r7}
 800c542:	b085      	sub	sp, #20
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxReturn;

        if( pxInterface != NULL )
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d003      	beq.n	800c556 <FreeRTOS_NextNetworkInterface+0x16>
        {
            pxReturn = pxInterface->pxNext;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c552:	60fb      	str	r3, [r7, #12]
 800c554:	e001      	b.n	800c55a <FreeRTOS_NextNetworkInterface+0x1a>
        }
        else
        {
            pxReturn = NULL;
 800c556:	2300      	movs	r3, #0
 800c558:	60fb      	str	r3, [r7, #12]
        }

        return pxReturn;
 800c55a:	68fb      	ldr	r3, [r7, #12]
    }
 800c55c:	4618      	mov	r0, r3
 800c55e:	3714      	adds	r7, #20
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr

0800c568 <FreeRTOS_AddEndPoint>:
 *
 * @return The value of the parameter 'pxEndPoint'.
 */
    static NetworkEndPoint_t * FreeRTOS_AddEndPoint( NetworkInterface_t * pxInterface,
                                                     NetworkEndPoint_t * pxEndPoint )
    {
 800c568:	b580      	push	{r7, lr}
 800c56a:	b084      	sub	sp, #16
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxIterator = NULL;
 800c572:	2300      	movs	r3, #0
 800c574:	60fb      	str	r3, [r7, #12]

        /* Double link between the NetworkInterface_t that is using the addressing
         * defined by this NetworkEndPoint_t structure. */
        pxEndPoint->pxNetworkInterface = pxInterface;
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	687a      	ldr	r2, [r7, #4]
 800c57a:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

        if( pxInterface->pxEndPoint == NULL )
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6a1b      	ldr	r3, [r3, #32]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d102      	bne.n	800c58c <FreeRTOS_AddEndPoint+0x24>
        {
            /*_RB_ When would pxInterface->pxEndPoint ever not be NULL unless this is called twice? */
            /*_HT_ It may be called twice. */
            pxInterface->pxEndPoint = pxEndPoint;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	683a      	ldr	r2, [r7, #0]
 800c58a:	621a      	str	r2, [r3, #32]
        }

        if( pxNetworkEndPoints == NULL )
 800c58c:	4b33      	ldr	r3, [pc, #204]	@ (800c65c <FreeRTOS_AddEndPoint+0xf4>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d107      	bne.n	800c5a4 <FreeRTOS_AddEndPoint+0x3c>
        {
            /* No other end points are defined yet - so this is the first in the
             * list. */
            pxEndPoint->pxNext = NULL;
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	2200      	movs	r2, #0
 800c598:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
            pxNetworkEndPoints = pxEndPoint;
 800c59c:	4a2f      	ldr	r2, [pc, #188]	@ (800c65c <FreeRTOS_AddEndPoint+0xf4>)
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	6013      	str	r3, [r2, #0]
 800c5a2:	e01a      	b.n	800c5da <FreeRTOS_AddEndPoint+0x72>
        }
        else
        {
            /* Other end points are already defined so iterate to the end of the
             * list. */
            pxIterator = pxNetworkEndPoints;
 800c5a4:	4b2d      	ldr	r3, [pc, #180]	@ (800c65c <FreeRTOS_AddEndPoint+0xf4>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	60fb      	str	r3, [r7, #12]

            for( ; ; )
            {
                if( pxIterator == pxEndPoint )
 800c5aa:	68fa      	ldr	r2, [r7, #12]
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d012      	beq.n	800c5d8 <FreeRTOS_AddEndPoint+0x70>
                {
                    /* This end-point has already been added to the list. */
                    break;
                }

                if( pxIterator->pxNext == NULL )
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d108      	bne.n	800c5ce <FreeRTOS_AddEndPoint+0x66>
                {
                    pxEndPoint->pxNext = NULL;
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
                    pxIterator->pxNext = pxEndPoint;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	683a      	ldr	r2, [r7, #0]
 800c5c8:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
                    break;
 800c5cc:	e005      	b.n	800c5da <FreeRTOS_AddEndPoint+0x72>
                }

                pxIterator = pxIterator->pxNext;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800c5d4:	60fb      	str	r3, [r7, #12]
                if( pxIterator == pxEndPoint )
 800c5d6:	e7e8      	b.n	800c5aa <FreeRTOS_AddEndPoint+0x42>
                    break;
 800c5d8:	bf00      	nop
            }
        }

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c5e0:	f003 0304 	and.w	r3, r3, #4
 800c5e4:	b2db      	uxtb	r3, r3
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d00c      	beq.n	800c604 <FreeRTOS_AddEndPoint+0x9c>
            {
                FreeRTOS_printf( ( "FreeRTOS_AddEndPoint: MAC: %02x-%02x IPv6: %pip\n",
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 800c5f8:	461a      	mov	r2, r3
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	3390      	adds	r3, #144	@ 0x90
 800c5fe:	4818      	ldr	r0, [pc, #96]	@ (800c660 <FreeRTOS_AddEndPoint+0xf8>)
 800c600:	f013 ff94 	bl	802052c <lUDPLoggingPrintf>
                                   pxEndPoint->xMACAddress.ucBytes[ 5 ],
                                   ( void * ) pxEndPoint->ipv6_defaults.xIPAddress.ucBytes ) );
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        #if ( ipconfigUSE_IPv4 != 0 )
            if( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED )
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c60a:	f003 0304 	and.w	r3, r3, #4
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	2b00      	cmp	r3, #0
 800c612:	d11e      	bne.n	800c652 <FreeRTOS_AddEndPoint+0xea>
            {
                FreeRTOS_printf( ( "FreeRTOS_AddEndPoint: MAC: %02x-%02x IPv4: %xip\n",
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800c61a:	4619      	mov	r1, r3
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 800c622:	4618      	mov	r0, r3
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	69db      	ldr	r3, [r3, #28]
 800c628:	061a      	lsls	r2, r3, #24
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	69db      	ldr	r3, [r3, #28]
 800c62e:	021b      	lsls	r3, r3, #8
 800c630:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c634:	431a      	orrs	r2, r3
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	69db      	ldr	r3, [r3, #28]
 800c63a:	0a1b      	lsrs	r3, r3, #8
 800c63c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c640:	431a      	orrs	r2, r3
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	69db      	ldr	r3, [r3, #28]
 800c646:	0e1b      	lsrs	r3, r3, #24
 800c648:	4313      	orrs	r3, r2
 800c64a:	4602      	mov	r2, r0
 800c64c:	4805      	ldr	r0, [pc, #20]	@ (800c664 <FreeRTOS_AddEndPoint+0xfc>)
 800c64e:	f013 ff6d 	bl	802052c <lUDPLoggingPrintf>
                                   pxEndPoint->xMACAddress.ucBytes[ 5 ],
                                   ( unsigned ) FreeRTOS_ntohl( pxEndPoint->ipv4_defaults.ulIPAddress ) ) );
            }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        return pxEndPoint;
 800c652:	683b      	ldr	r3, [r7, #0]
    }
 800c654:	4618      	mov	r0, r3
 800c656:	3710      	adds	r7, #16
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}
 800c65c:	200011d0 	.word	0x200011d0
 800c660:	08023d60 	.word	0x08023d60
 800c664:	08023d94 	.word	0x08023d94

0800c668 <FreeRTOS_FirstEndPoint>:
 *
 * @return The first end-point that is found to the interface, or NULL when the
 *         interface doesn't have any end-point yet.
 */
    NetworkEndPoint_t * FreeRTOS_FirstEndPoint( const NetworkInterface_t * pxInterface )
    {
 800c668:	b480      	push	{r7}
 800c66a:	b085      	sub	sp, #20
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800c670:	4b0d      	ldr	r3, [pc, #52]	@ (800c6a8 <FreeRTOS_FirstEndPoint+0x40>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	60fb      	str	r3, [r7, #12]

        /* Find and return the NetworkEndPoint_t structure that is associated with
         * the pxInterface NetworkInterface_t. *//*_RB_ Could this be made a two way link, so the NetworkEndPoint_t can just be read from the NetworkInterface_t structure?  Looks like there is a pointer in the struct already. */
        while( pxEndPoint != NULL )
 800c676:	e00c      	b.n	800c692 <FreeRTOS_FirstEndPoint+0x2a>
        {
            if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d00c      	beq.n	800c698 <FreeRTOS_FirstEndPoint+0x30>
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800c684:	687a      	ldr	r2, [r7, #4]
 800c686:	429a      	cmp	r2, r3
 800c688:	d006      	beq.n	800c698 <FreeRTOS_FirstEndPoint+0x30>
            {
                break;
            }

            pxEndPoint = pxEndPoint->pxNext;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800c690:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d1ef      	bne.n	800c678 <FreeRTOS_FirstEndPoint+0x10>
        }

        return pxEndPoint;
 800c698:	68fb      	ldr	r3, [r7, #12]
    }
 800c69a:	4618      	mov	r0, r3
 800c69c:	3714      	adds	r7, #20
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a4:	4770      	bx	lr
 800c6a6:	bf00      	nop
 800c6a8:	200011d0 	.word	0x200011d0

0800c6ac <FreeRTOS_NextEndPoint>:
 *
 * @return The end-point that is found, or NULL when there are no more end-points in the list.
 */
    NetworkEndPoint_t * FreeRTOS_NextEndPoint( const NetworkInterface_t * pxInterface,
                                               NetworkEndPoint_t * pxEndPoint )
    {
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b084      	sub	sp, #16
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxResult = pxEndPoint;
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	60fb      	str	r3, [r7, #12]

        if( pxResult != NULL )
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d015      	beq.n	800c6ec <FreeRTOS_NextEndPoint+0x40>
        {
            pxResult = pxResult->pxNext;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800c6c6:	60fb      	str	r3, [r7, #12]

            while( pxResult != NULL )
 800c6c8:	e00c      	b.n	800c6e4 <FreeRTOS_NextEndPoint+0x38>
            {
                if( ( pxInterface == NULL ) || ( pxResult->pxNetworkInterface == pxInterface ) )
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d011      	beq.n	800c6f4 <FreeRTOS_NextEndPoint+0x48>
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800c6d6:	687a      	ldr	r2, [r7, #4]
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d00b      	beq.n	800c6f4 <FreeRTOS_NextEndPoint+0x48>
                {
                    break;
                }

                pxResult = pxResult->pxNext;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800c6e2:	60fb      	str	r3, [r7, #12]
            while( pxResult != NULL )
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d1ef      	bne.n	800c6ca <FreeRTOS_NextEndPoint+0x1e>
 800c6ea:	e003      	b.n	800c6f4 <FreeRTOS_NextEndPoint+0x48>
            }
        }
        else
        {
            pxResult = FreeRTOS_FirstEndPoint( pxInterface );
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f7ff ffbb 	bl	800c668 <FreeRTOS_FirstEndPoint>
 800c6f2:	60f8      	str	r0, [r7, #12]
        }

        return pxResult;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
    }
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3710      	adds	r7, #16
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
	...

0800c700 <FreeRTOS_FindEndPointOnIP_IPv4>:
 *
 * @return The end-point found or NULL.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnIP_IPv4( uint32_t ulIPAddress,
                                                        uint32_t ulWhere )
    {
 800c700:	b480      	push	{r7}
 800c702:	b085      	sub	sp, #20
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800c70a:	4b1e      	ldr	r3, [pc, #120]	@ (800c784 <FreeRTOS_FindEndPointOnIP_IPv4+0x84>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
            uint32_t ulLocationCount = ( uint32_t ) ( sizeof( xRoutingStatistics.ulLocationsIP ) / sizeof( xRoutingStatistics.ulLocationsIP[ 0 ] ) );
 800c710:	2308      	movs	r3, #8
 800c712:	60bb      	str	r3, [r7, #8]

            xRoutingStatistics.ulOnIp++;
 800c714:	4b1c      	ldr	r3, [pc, #112]	@ (800c788 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	3301      	adds	r3, #1
 800c71a:	4a1b      	ldr	r2, [pc, #108]	@ (800c788 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800c71c:	6013      	str	r3, [r2, #0]

            if( ulWhere < ulLocationCount )
 800c71e:	683a      	ldr	r2, [r7, #0]
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	429a      	cmp	r2, r3
 800c724:	d223      	bcs.n	800c76e <FreeRTOS_FindEndPointOnIP_IPv4+0x6e>
            {
                xRoutingStatistics.ulLocationsIP[ ulWhere ]++;
 800c726:	4a18      	ldr	r2, [pc, #96]	@ (800c788 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	3312      	adds	r3, #18
 800c72c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c730:	1c5a      	adds	r2, r3, #1
 800c732:	4915      	ldr	r1, [pc, #84]	@ (800c788 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	3312      	adds	r3, #18
 800c738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            }
        #endif /* ( ipconfigHAS_ROUTING_STATISTICS == 1 ) */

        while( pxEndPoint != NULL )
 800c73c:	e017      	b.n	800c76e <FreeRTOS_FindEndPointOnIP_IPv4+0x6e>
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                #if ( ipconfigUSE_IPv6 != 0 )
                    if( pxEndPoint->bits.bIPv6 == 0U )
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c744:	f003 0304 	and.w	r3, r3, #4
 800c748:	b2db      	uxtb	r3, r3
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d10b      	bne.n	800c766 <FreeRTOS_FindEndPointOnIP_IPv4+0x66>
                #endif
                {
                    if( ( ulIPAddress == 0U ) ||
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d00f      	beq.n	800c774 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        ( pxEndPoint->ipv4_settings.ulIPAddress == 0U ) ||
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
                    if( ( ulIPAddress == 0U ) ||
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d00b      	beq.n	800c774 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        ( pxEndPoint->ipv4_settings.ulIPAddress == ulIPAddress ) )
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	681b      	ldr	r3, [r3, #0]
                        ( pxEndPoint->ipv4_settings.ulIPAddress == 0U ) ||
 800c760:	687a      	ldr	r2, [r7, #4]
 800c762:	429a      	cmp	r2, r3
 800c764:	d006      	beq.n	800c774 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        break;
                    }
                }
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            pxEndPoint = pxEndPoint->pxNext;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800c76c:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d1e4      	bne.n	800c73e <FreeRTOS_FindEndPointOnIP_IPv4+0x3e>
        }

        ( void ) ulIPAddress;

        return pxEndPoint;
 800c774:	68fb      	ldr	r3, [r7, #12]
    }
 800c776:	4618      	mov	r0, r3
 800c778:	3714      	adds	r7, #20
 800c77a:	46bd      	mov	sp, r7
 800c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c780:	4770      	bx	lr
 800c782:	bf00      	nop
 800c784:	200011d0 	.word	0x200011d0
 800c788:	200011d8 	.word	0x200011d8

0800c78c <FreeRTOS_FindEndPointOnIP_IPv6>:
 * @param[in] pxIPAddress The IP-address of interest.
 *
 * @return The end-point found or NULL.
 */
        NetworkEndPoint_t * FreeRTOS_FindEndPointOnIP_IPv6( const IPv6_Address_t * pxIPAddress )
        {
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b082      	sub	sp, #8
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
            return FreeRTOS_InterfaceEPInSameSubnet_IPv6( NULL, pxIPAddress );
 800c794:	6879      	ldr	r1, [r7, #4]
 800c796:	2000      	movs	r0, #0
 800c798:	f000 f8b6 	bl	800c908 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>
 800c79c:	4603      	mov	r3, r0
        }
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3708      	adds	r7, #8
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}
	...

0800c7a8 <FreeRTOS_FindEndPointOnMAC>:
 *
 * @return The end-point that has the given MAC-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnMAC( const MACAddress_t * pxMACAddress,
                                                    const NetworkInterface_t * pxInterface )
    {
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b084      	sub	sp, #16
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
 800c7b0:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800c7b2:	4b17      	ldr	r3, [pc, #92]	@ (800c810 <FreeRTOS_FindEndPointOnMAC+0x68>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
        {
            xRoutingStatistics.ulOnMAC++;
 800c7b8:	4b16      	ldr	r3, [pc, #88]	@ (800c814 <FreeRTOS_FindEndPointOnMAC+0x6c>)
 800c7ba:	685b      	ldr	r3, [r3, #4]
 800c7bc:	3301      	adds	r3, #1
 800c7be:	4a15      	ldr	r2, [pc, #84]	@ (800c814 <FreeRTOS_FindEndPointOnMAC+0x6c>)
 800c7c0:	6053      	str	r3, [r2, #4]
        }
        #endif

        /* If input MAC address is NULL, return NULL. */
        if( pxMACAddress == NULL )
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d119      	bne.n	800c7fc <FreeRTOS_FindEndPointOnMAC+0x54>
        {
            pxEndPoint = NULL;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	60fb      	str	r3, [r7, #12]
         * uin64_t variables for direct comparison instead of using memcmp()?  [don't
         * know if there is a quick way of creating a 64-bit number from the 48-byte
         * MAC address without getting junk in the top 2 bytes]. */

        /* Find the end-point with given MAC-address. */
        while( pxEndPoint != NULL )
 800c7cc:	e016      	b.n	800c7fc <FreeRTOS_FindEndPointOnMAC+0x54>
        {
            if( ( pxInterface == NULL ) || ( pxInterface == pxEndPoint->pxNetworkInterface ) )
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d005      	beq.n	800c7e0 <FreeRTOS_FindEndPointOnMAC+0x38>
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800c7da:	683a      	ldr	r2, [r7, #0]
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d109      	bne.n	800c7f4 <FreeRTOS_FindEndPointOnMAC+0x4c>
            {
                if( memcmp( pxEndPoint->xMACAddress.ucBytes, pxMACAddress->ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 )
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	33e8      	adds	r3, #232	@ 0xe8
 800c7e4:	6879      	ldr	r1, [r7, #4]
 800c7e6:	2206      	movs	r2, #6
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f015 f850 	bl	802188e <memcmp>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d007      	beq.n	800c804 <FreeRTOS_FindEndPointOnMAC+0x5c>
                {
                    break;
                }
            }

            pxEndPoint = pxEndPoint->pxNext;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800c7fa:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d1e5      	bne.n	800c7ce <FreeRTOS_FindEndPointOnMAC+0x26>
 800c802:	e000      	b.n	800c806 <FreeRTOS_FindEndPointOnMAC+0x5e>
                    break;
 800c804:	bf00      	nop
        }

        return pxEndPoint;
 800c806:	68fb      	ldr	r3, [r7, #12]
    }
 800c808:	4618      	mov	r0, r3
 800c80a:	3710      	adds	r7, #16
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}
 800c810:	200011d0 	.word	0x200011d0
 800c814:	200011d8 	.word	0x200011d8

0800c818 <FreeRTOS_FindEndPointOnNetMask>:
 *
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnNetMask( uint32_t ulIPAddress,
                                                        uint32_t ulWhere )
    {
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	6039      	str	r1, [r7, #0]
        /* The 'ulWhere' parameter is only for debugging purposes. */
        return FreeRTOS_InterfaceEndPointOnNetMask( NULL, ulIPAddress, ulWhere );
 800c822:	683a      	ldr	r2, [r7, #0]
 800c824:	6879      	ldr	r1, [r7, #4]
 800c826:	2000      	movs	r0, #0
 800c828:	f000 f806 	bl	800c838 <FreeRTOS_InterfaceEndPointOnNetMask>
 800c82c:	4603      	mov	r3, r0
    }
 800c82e:	4618      	mov	r0, r3
 800c830:	3708      	adds	r7, #8
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
	...

0800c838 <FreeRTOS_InterfaceEndPointOnNetMask>:
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_InterfaceEndPointOnNetMask( const NetworkInterface_t * pxInterface,
                                                             uint32_t ulIPAddress,
                                                             uint32_t ulWhere )
    {
 800c838:	b580      	push	{r7, lr}
 800c83a:	b086      	sub	sp, #24
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	60f8      	str	r0, [r7, #12]
 800c840:	60b9      	str	r1, [r7, #8]
 800c842:	607a      	str	r2, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800c844:	4b2d      	ldr	r3, [pc, #180]	@ (800c8fc <FreeRTOS_InterfaceEndPointOnNetMask+0xc4>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	617b      	str	r3, [r7, #20]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
            uint32_t ulLocationCount = ( uint32_t ) ( sizeof( xRoutingStatistics.ulLocations ) / sizeof( xRoutingStatistics.ulLocations[ 0 ] ) );
 800c84a:	230e      	movs	r3, #14
 800c84c:	613b      	str	r3, [r7, #16]

            xRoutingStatistics.ulOnNetMask++;
 800c84e:	4b2c      	ldr	r3, [pc, #176]	@ (800c900 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800c850:	689b      	ldr	r3, [r3, #8]
 800c852:	3301      	adds	r3, #1
 800c854:	4a2a      	ldr	r2, [pc, #168]	@ (800c900 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800c856:	6093      	str	r3, [r2, #8]

            if( ulWhere < ulLocationCount )
 800c858:	687a      	ldr	r2, [r7, #4]
 800c85a:	693b      	ldr	r3, [r7, #16]
 800c85c:	429a      	cmp	r2, r3
 800c85e:	d22d      	bcs.n	800c8bc <FreeRTOS_InterfaceEndPointOnNetMask+0x84>
            {
                xRoutingStatistics.ulLocations[ ulWhere ]++;
 800c860:	4a27      	ldr	r2, [pc, #156]	@ (800c900 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	3304      	adds	r3, #4
 800c866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c86a:	1c5a      	adds	r2, r3, #1
 800c86c:	4924      	ldr	r1, [pc, #144]	@ (800c900 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	3304      	adds	r3, #4
 800c872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /*_RB_ Presumably then a broadcast reply could go out on a different end point to that on
         * which the broadcast was received - although that should not be an issue if the nodes are
         * on the same LAN it could be an issue if the nodes are on separate LAN's. */

        while( pxEndPoint != NULL )
 800c876:	e021      	b.n	800c8bc <FreeRTOS_InterfaceEndPointOnNetMask+0x84>
        {
            if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d005      	beq.n	800c88a <FreeRTOS_InterfaceEndPointOnNetMask+0x52>
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800c884:	68fa      	ldr	r2, [r7, #12]
 800c886:	429a      	cmp	r2, r3
 800c888:	d114      	bne.n	800c8b4 <FreeRTOS_InterfaceEndPointOnNetMask+0x7c>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    #if ( ipconfigUSE_IPv6 != 0 )
                        if( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED )
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c890:	f003 0304 	and.w	r3, r3, #4
 800c894:	b2db      	uxtb	r3, r3
 800c896:	2b00      	cmp	r3, #0
 800c898:	d10c      	bne.n	800c8b4 <FreeRTOS_InterfaceEndPointOnNetMask+0x7c>
                    #endif
                    {
                        if( ( ulIPAddress == ~0U ) ||
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8a0:	d00f      	beq.n	800c8c2 <FreeRTOS_InterfaceEndPointOnNetMask+0x8a>
                            ( ( ulIPAddress & pxEndPoint->ipv4_settings.ulNetMask ) == ( pxEndPoint->ipv4_settings.ulIPAddress & pxEndPoint->ipv4_settings.ulNetMask ) ) )
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	681a      	ldr	r2, [r3, #0]
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	405a      	eors	r2, r3
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	4013      	ands	r3, r2
                        if( ( ulIPAddress == ~0U ) ||
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d006      	beq.n	800c8c2 <FreeRTOS_InterfaceEndPointOnNetMask+0x8a>
                        }
                    }
                #endif /* if ( ipconfigUSE_IPv4 != 0 ) */
            }

            pxEndPoint = pxEndPoint->pxNext;
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800c8ba:	617b      	str	r3, [r7, #20]
        while( pxEndPoint != NULL )
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d1da      	bne.n	800c878 <FreeRTOS_InterfaceEndPointOnNetMask+0x40>
        }

        /* This was only for debugging. */
        if( pxEndPoint == NULL )
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d113      	bne.n	800c8f0 <FreeRTOS_InterfaceEndPointOnNetMask+0xb8>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_FindEndPointOnNetMask[%d]: No match for %xip\n",
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	061a      	lsls	r2, r3, #24
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	021b      	lsls	r3, r3, #8
 800c8d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c8d4:	431a      	orrs	r2, r3
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	0a1b      	lsrs	r3, r3, #8
 800c8da:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c8de:	431a      	orrs	r2, r3
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	0e1b      	lsrs	r3, r3, #24
 800c8e4:	4313      	orrs	r3, r2
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	6879      	ldr	r1, [r7, #4]
 800c8ea:	4806      	ldr	r0, [pc, #24]	@ (800c904 <FreeRTOS_InterfaceEndPointOnNetMask+0xcc>)
 800c8ec:	f013 fe1e 	bl	802052c <lUDPLoggingPrintf>
                                     ( unsigned ) ulWhere, ( unsigned ) FreeRTOS_ntohl( ulIPAddress ) ) );
        }

        return pxEndPoint;
 800c8f0:	697b      	ldr	r3, [r7, #20]
    }
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3718      	adds	r7, #24
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	200011d0 	.word	0x200011d0
 800c900:	200011d8 	.word	0x200011d8
 800c904:	08023dc8 	.word	0x08023dc8

0800c908 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>:
 * @param[in] pxIPAddress The IPv6-address for which an end-point is looked-up.
 * @return An end-point that is in the same subnet as the given IP-address.
 */
        NetworkEndPoint_t * FreeRTOS_InterfaceEPInSameSubnet_IPv6( const NetworkInterface_t * pxInterface,
                                                                   const IPv6_Address_t * pxIPAddress )
        {
 800c908:	b580      	push	{r7, lr}
 800c90a:	b084      	sub	sp, #16
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	6039      	str	r1, [r7, #0]
            NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800c912:	4b17      	ldr	r3, [pc, #92]	@ (800c970 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x68>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	60fb      	str	r3, [r7, #12]

            /* Find the best fitting end-point to reach a given IP-address. */

            while( pxEndPoint != NULL )
 800c918:	e020      	b.n	800c95c <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x54>
            {
                if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d005      	beq.n	800c92c <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x24>
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800c926:	687a      	ldr	r2, [r7, #4]
 800c928:	429a      	cmp	r2, r3
 800c92a:	d113      	bne.n	800c954 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x4c>
                {
                    if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c932:	f003 0304 	and.w	r3, r3, #4
 800c936:	b2db      	uxtb	r3, r3
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d00b      	beq.n	800c954 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x4c>
                    {
                        if( xCompareIPv6_Address( &( pxEndPoint->ipv6_settings.xIPAddress ), pxIPAddress, pxEndPoint->ipv6_settings.uxPrefixLength ) == 0 )
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c946:	461a      	mov	r2, r3
 800c948:	6839      	ldr	r1, [r7, #0]
 800c94a:	f7fd fc0b 	bl	800a164 <xCompareIPv6_Address>
 800c94e:	4603      	mov	r3, r0
 800c950:	2b00      	cmp	r3, #0
 800c952:	d007      	beq.n	800c964 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x5c>
                            break;
                        }
                    }
                }

                pxEndPoint = pxEndPoint->pxNext;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800c95a:	60fb      	str	r3, [r7, #12]
            while( pxEndPoint != NULL )
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d1db      	bne.n	800c91a <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x12>
 800c962:	e000      	b.n	800c966 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x5e>
                            break;
 800c964:	bf00      	nop
            }

            return pxEndPoint;
 800c966:	68fb      	ldr	r3, [r7, #12]
        }
 800c968:	4618      	mov	r0, r3
 800c96a:	3710      	adds	r7, #16
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}
 800c970:	200011d0 	.word	0x200011d0

0800c974 <pxEasyFit>:
    NetworkEndPoint_t * pxEasyFit( const NetworkInterface_t * pxNetworkInterface,
                                   const uint16_t usFrameType,
                                   const IP_Address_t * pxIPAddressFrom,
                                   const IP_Address_t * pxIPAddressTo,
                                   const MACAddress_t * pxMACAddress )
    {
 800c974:	b5b0      	push	{r4, r5, r7, lr}
 800c976:	b0b0      	sub	sp, #192	@ 0xc0
 800c978:	af04      	add	r7, sp, #16
 800c97a:	60f8      	str	r0, [r7, #12]
 800c97c:	607a      	str	r2, [r7, #4]
 800c97e:	603b      	str	r3, [r7, #0]
 800c980:	460b      	mov	r3, r1
 800c982:	817b      	strh	r3, [r7, #10]
        NetworkEndPoint_t * pxEndPoint;
        NetworkEndPoint_t * pxReturn = NULL;
 800c984:	2300      	movs	r3, #0
 800c986:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        /* endpoints found for IP-type, IP-address, and MAC-address. */
        NetworkEndPoint_t * pxFound[ rMATCH_COUNT ] = { NULL, NULL, NULL, NULL };
 800c98a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800c98e:	2200      	movs	r2, #0
 800c990:	601a      	str	r2, [r3, #0]
 800c992:	605a      	str	r2, [r3, #4]
 800c994:	609a      	str	r2, [r3, #8]
 800c996:	60da      	str	r2, [r3, #12]
        BaseType_t xCount[ rMATCH_COUNT ] = { 0, 0, 0, 0 };
 800c998:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800c99c:	2200      	movs	r2, #0
 800c99e:	601a      	str	r2, [r3, #0]
 800c9a0:	605a      	str	r2, [r3, #4]
 800c9a2:	609a      	str	r2, [r3, #8]
 800c9a4:	60da      	str	r2, [r3, #12]
        BaseType_t xIndex;
        BaseType_t xIsIPv6 = ( usFrameType == ipIPv6_FRAME_TYPE ) ? pdTRUE : pdFALSE;
 800c9a6:	897b      	ldrh	r3, [r7, #10]
 800c9a8:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d101      	bne.n	800c9b4 <pxEasyFit+0x40>
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	e000      	b.n	800c9b6 <pxEasyFit+0x42>
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        BaseType_t xGatewayTarget = pdFALSE;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        BaseType_t xTargetGlobal = pdFALSE;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        ( void ) pxIPAddressFrom;
        ( void ) xGatewayTarget;
        ( void ) xTargetGlobal;

        #if ( ipconfigUSE_IPv6 != 0 )
            if( xIsIPv6 == pdTRUE )
 800c9c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c9ca:	2b01      	cmp	r3, #1
 800c9cc:	d123      	bne.n	800ca16 <pxEasyFit+0xa2>
                    0xfe, 0x80, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x01
                };
                xGatewayTarget = ( memcmp( ucBytes, pxIPAddressTo->xIP_IPv6.ucBytes, 16 ) == 0 ) ? pdTRUE : pdFALSE;
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	2210      	movs	r2, #16
 800c9d2:	4619      	mov	r1, r3
 800c9d4:	4888      	ldr	r0, [pc, #544]	@ (800cbf8 <pxEasyFit+0x284>)
 800c9d6:	f014 ff5a 	bl	802188e <memcmp>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d101      	bne.n	800c9e4 <pxEasyFit+0x70>
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	e000      	b.n	800c9e6 <pxEasyFit+0x72>
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

                if( xGatewayTarget == pdTRUE )
 800c9ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c9ee:	2b01      	cmp	r3, #1
 800c9f0:	d105      	bne.n	800c9fe <pxEasyFit+0x8a>
                {
                    FreeRTOS_debug_printf( ( " GW address %pip to %pip\n",
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	683a      	ldr	r2, [r7, #0]
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	4880      	ldr	r0, [pc, #512]	@ (800cbfc <pxEasyFit+0x288>)
 800c9fa:	f013 fd97 	bl	802052c <lUDPLoggingPrintf>
                                             ( void * ) pxIPAddressFrom->xIP_IPv6.ucBytes,
                                             ( void * ) pxIPAddressTo->xIP_IPv6.ucBytes ) );
                }

                xTargetGlobal = ( xIPv6_GetIPType( &( pxIPAddressTo->xIP_IPv6 ) ) == eIPv6_Global ) ? pdTRUE : pdFALSE;
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	4618      	mov	r0, r3
 800ca02:	f000 fa15 	bl	800ce30 <xIPv6_GetIPType>
 800ca06:	4603      	mov	r3, r0
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d101      	bne.n	800ca10 <pxEasyFit+0x9c>
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	e000      	b.n	800ca12 <pxEasyFit+0x9e>
 800ca10:	2300      	movs	r3, #0
 800ca12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxNetworkInterface );
 800ca16:	68f8      	ldr	r0, [r7, #12]
 800ca18:	f7ff fe26 	bl	800c668 <FreeRTOS_FirstEndPoint>
 800ca1c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 800ca20:	e07d      	b.n	800cb1e <pxEasyFit+0x1aa>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkInterface, pxEndPoint ) )
        {
            BaseType_t xSameMACAddress = ( memcmp( pxEndPoint->xMACAddress.ucBytes, pxMACAddress->ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ? pdTRUE : pdFALSE;
 800ca22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca26:	33e8      	adds	r3, #232	@ 0xe8
 800ca28:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 800ca2c:	2206      	movs	r2, #6
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f014 ff2d 	bl	802188e <memcmp>
 800ca34:	4603      	mov	r3, r0
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d101      	bne.n	800ca3e <pxEasyFit+0xca>
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	e000      	b.n	800ca40 <pxEasyFit+0xcc>
 800ca3e:	2300      	movs	r3, #0
 800ca40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

            if( xIsIPv6 == ( BaseType_t ) pxEndPoint->bits.bIPv6 )
 800ca44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca48:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ca4c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ca50:	b2db      	uxtb	r3, r3
 800ca52:	461a      	mov	r2, r3
 800ca54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d159      	bne.n	800cb10 <pxEasyFit+0x19c>
            {
                pxFound[ rMATCH_IP_TYPE ] = pxEndPoint;
 800ca5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca60:	67fb      	str	r3, [r7, #124]	@ 0x7c
                xCount[ rMATCH_IP_TYPE ]++;
 800ca62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca64:	3301      	adds	r3, #1
 800ca66:	66fb      	str	r3, [r7, #108]	@ 0x6c

                /* Case default is impossible to reach because no endpoints for disabled IP type. */
                switch( xIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 800ca68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ca6c:	2b01      	cmp	r3, #1
 800ca6e:	d134      	bne.n	800cada <pxEasyFit+0x166>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case ( BaseType_t ) pdTRUE:
                           {
                               IPv6_Type_t xEndpointType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800ca70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca74:	3338      	adds	r3, #56	@ 0x38
 800ca76:	4618      	mov	r0, r3
 800ca78:	f000 f9da 	bl	800ce30 <xIPv6_GetIPType>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                               if( xEndpointType != eIPv6_Unknown )
 800ca82:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800ca86:	2b05      	cmp	r3, #5
 800ca88:	d035      	beq.n	800caf6 <pxEasyFit+0x182>
                               {
                                   BaseType_t xEndpointGlobal = ( xEndpointType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 800ca8a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d101      	bne.n	800ca96 <pxEasyFit+0x122>
 800ca92:	2301      	movs	r3, #1
 800ca94:	e000      	b.n	800ca98 <pxEasyFit+0x124>
 800ca96:	2300      	movs	r3, #0
 800ca98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                                   if( ( memcmp( pxEndPoint->ipv6_settings.xIPAddress.ucBytes, pxIPAddressTo->xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 ) )
 800ca9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800caa0:	3338      	adds	r3, #56	@ 0x38
 800caa2:	6839      	ldr	r1, [r7, #0]
 800caa4:	2210      	movs	r2, #16
 800caa6:	4618      	mov	r0, r3
 800caa8:	f014 fef1 	bl	802188e <memcmp>
 800caac:	4603      	mov	r3, r0
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d106      	bne.n	800cac0 <pxEasyFit+0x14c>
                                   {
                                       pxFound[ rMATCH_IP_ADDR ] = pxEndPoint;
 800cab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cab6:	673b      	str	r3, [r7, #112]	@ 0x70
                                       xCount[ rMATCH_IP_ADDR ]++;
 800cab8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800caba:	3301      	adds	r3, #1
 800cabc:	663b      	str	r3, [r7, #96]	@ 0x60
                               else
                               {
                                   /* do nothing, coverity happy */
                               }
                           }
                           break;
 800cabe:	e01a      	b.n	800caf6 <pxEasyFit+0x182>
                                   else if( xTargetGlobal == xEndpointGlobal )
 800cac0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800cac4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cac8:	429a      	cmp	r2, r3
 800caca:	d114      	bne.n	800caf6 <pxEasyFit+0x182>
                                       pxFound[ rMATCH_IPv6_TYPE ] = pxEndPoint;
 800cacc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cad0:	677b      	str	r3, [r7, #116]	@ 0x74
                                       xCount[ rMATCH_IPv6_TYPE ]++;
 800cad2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cad4:	3301      	adds	r3, #1
 800cad6:	667b      	str	r3, [r7, #100]	@ 0x64
                           break;
 800cad8:	e00d      	b.n	800caf6 <pxEasyFit+0x182>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    case ( BaseType_t ) pdFALSE:
                    default:
                        #if ( ipconfigUSE_IPv4 != 0 )
                            if( pxEndPoint->ipv4_settings.ulIPAddress == pxIPAddressTo->ulIP_IPv4 )
 800cada:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cade:	681a      	ldr	r2, [r3, #0]
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d108      	bne.n	800cafa <pxEasyFit+0x186>
                            {
                                pxFound[ rMATCH_IP_ADDR ] = pxEndPoint;
 800cae8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800caec:	673b      	str	r3, [r7, #112]	@ 0x70
                                xCount[ rMATCH_IP_ADDR ]++;
 800caee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800caf0:	3301      	adds	r3, #1
 800caf2:	663b      	str	r3, [r7, #96]	@ 0x60
                            {
                                /* do nothing, coverity happy */
                            }
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                        break;
 800caf4:	e001      	b.n	800cafa <pxEasyFit+0x186>
                           break;
 800caf6:	bf00      	nop
 800caf8:	e000      	b.n	800cafc <pxEasyFit+0x188>
                        break;
 800cafa:	bf00      	nop
                }

                if( xSameMACAddress == pdTRUE )
 800cafc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d105      	bne.n	800cb10 <pxEasyFit+0x19c>
                {
                    xCount[ rMATCH_MAC_ADDR ]++;
 800cb04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cb06:	3301      	adds	r3, #1
 800cb08:	66bb      	str	r3, [r7, #104]	@ 0x68
                    pxFound[ rMATCH_MAC_ADDR ] = pxEndPoint;
 800cb0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb0e:	67bb      	str	r3, [r7, #120]	@ 0x78
             pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkInterface, pxEndPoint ) )
 800cb10:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800cb14:	68f8      	ldr	r0, [r7, #12]
 800cb16:	f7ff fdc9 	bl	800c6ac <FreeRTOS_NextEndPoint>
 800cb1a:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
             pxEndPoint != NULL;
 800cb1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	f47f af7d 	bne.w	800ca22 <pxEasyFit+0xae>
                }
            }
        }

        for( xIndex = 0; xIndex < rMATCH_COUNT; xIndex++ )
 800cb28:	2300      	movs	r3, #0
 800cb2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cb2e:	e017      	b.n	800cb60 <pxEasyFit+0x1ec>
        {
            if( xCount[ xIndex ] >= 1 )
 800cb30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cb34:	009b      	lsls	r3, r3, #2
 800cb36:	33b0      	adds	r3, #176	@ 0xb0
 800cb38:	443b      	add	r3, r7
 800cb3a:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	dd09      	ble.n	800cb56 <pxEasyFit+0x1e2>
            {
                pxReturn = pxFound[ xIndex ];
 800cb42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cb46:	009b      	lsls	r3, r3, #2
 800cb48:	33b0      	adds	r3, #176	@ 0xb0
 800cb4a:	443b      	add	r3, r7
 800cb4c:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800cb50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                break;
 800cb54:	e008      	b.n	800cb68 <pxEasyFit+0x1f4>
        for( xIndex = 0; xIndex < rMATCH_COUNT; xIndex++ )
 800cb56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cb60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cb64:	2b03      	cmp	r3, #3
 800cb66:	dde3      	ble.n	800cb30 <pxEasyFit+0x1bc>
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            if( pxReturn == NULL )
 800cb68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d13c      	bne.n	800cbea <pxEasyFit+0x276>
            {
                char pcBufferFrom[ 40 ];
                char pcBufferTo[ 40 ];
                BaseType_t xFamily = ( usFrameType == ipIPv6_FRAME_TYPE ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET4;
 800cb70:	897b      	ldrh	r3, [r7, #10]
 800cb72:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d101      	bne.n	800cb7e <pxEasyFit+0x20a>
 800cb7a:	230a      	movs	r3, #10
 800cb7c:	e000      	b.n	800cb80 <pxEasyFit+0x20c>
 800cb7e:	2302      	movs	r3, #2
 800cb80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                const char * xRetNtopTo;
                const char * xRetNtopFrom;
                xRetNtopTo = FreeRTOS_inet_ntop( xFamily,
                                                 ( void * ) pxIPAddressTo->xIP_IPv6.ucBytes,
 800cb84:	6839      	ldr	r1, [r7, #0]
                xRetNtopTo = FreeRTOS_inet_ntop( xFamily,
 800cb86:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800cb8a:	2328      	movs	r3, #40	@ 0x28
 800cb8c:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800cb90:	f001 fc70 	bl	800e474 <FreeRTOS_inet_ntop>
 800cb94:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
                                                 pcBufferTo,
                                                 sizeof( pcBufferTo ) );
                xRetNtopFrom = FreeRTOS_inet_ntop( xFamily,
                                                   ( void * ) pxIPAddressFrom->xIP_IPv6.ucBytes,
 800cb98:	6879      	ldr	r1, [r7, #4]
                xRetNtopFrom = FreeRTOS_inet_ntop( xFamily,
 800cb9a:	f107 0210 	add.w	r2, r7, #16
 800cb9e:	2328      	movs	r3, #40	@ 0x28
 800cba0:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800cba4:	f001 fc66 	bl	800e474 <FreeRTOS_inet_ntop>
 800cba8:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
                                                   pcBufferFrom,
                                                   sizeof( pcBufferFrom ) );

                FreeRTOS_debug_printf( ( "EasyFit[%x]: %d %d %d ( %s ->%s ) BAD\n",
 800cbac:	8979      	ldrh	r1, [r7, #10]
 800cbae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cbb0:	461c      	mov	r4, r3
 800cbb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cbb4:	461d      	mov	r5, r3
 800cbb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d002      	beq.n	800cbc8 <pxEasyFit+0x254>
 800cbc2:	f107 0310 	add.w	r3, r7, #16
 800cbc6:	e000      	b.n	800cbca <pxEasyFit+0x256>
 800cbc8:	4b0d      	ldr	r3, [pc, #52]	@ (800cc00 <pxEasyFit+0x28c>)
 800cbca:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800cbce:	2a00      	cmp	r2, #0
 800cbd0:	d002      	beq.n	800cbd8 <pxEasyFit+0x264>
 800cbd2:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800cbd6:	e000      	b.n	800cbda <pxEasyFit+0x266>
 800cbd8:	4a09      	ldr	r2, [pc, #36]	@ (800cc00 <pxEasyFit+0x28c>)
 800cbda:	9202      	str	r2, [sp, #8]
 800cbdc:	9301      	str	r3, [sp, #4]
 800cbde:	9000      	str	r0, [sp, #0]
 800cbe0:	462b      	mov	r3, r5
 800cbe2:	4622      	mov	r2, r4
 800cbe4:	4807      	ldr	r0, [pc, #28]	@ (800cc04 <pxEasyFit+0x290>)
 800cbe6:	f013 fca1 	bl	802052c <lUDPLoggingPrintf>
                                         ( xRetNtopFrom == NULL ) ? "INVALID" : pcBufferFrom,
                                         ( xRetNtopTo == NULL ) ? "INVALID" : pcBufferTo ) );
            }
        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

        return pxReturn;
 800cbea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
    }
 800cbee:	4618      	mov	r0, r3
 800cbf0:	37b0      	adds	r7, #176	@ 0xb0
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bdb0      	pop	{r4, r5, r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	08025c14 	.word	0x08025c14
 800cbfc:	08023e64 	.word	0x08023e64
 800cc00:	08023e80 	.word	0x08023e80
 800cc04:	08023e88 	.word	0x08023e88

0800cc08 <FreeRTOS_MatchingEndpoint>:
 *
 * @return The end-point that should handle the incoming Ethernet packet.
 */
    NetworkEndPoint_t * FreeRTOS_MatchingEndpoint( const NetworkInterface_t * pxNetworkInterface,
                                                   const uint8_t * pucEthernetBuffer )
    {
 800cc08:	b590      	push	{r4, r7, lr}
 800cc0a:	b097      	sub	sp, #92	@ 0x5c
 800cc0c:	af02      	add	r7, sp, #8
 800cc0e:	6078      	str	r0, [r7, #4]
 800cc10:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = NULL;
 800cc12:	2300      	movs	r3, #0
 800cc14:	64fb      	str	r3, [r7, #76]	@ 0x4c
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolPacket_t * pxPacket = ( ( const ProtocolPacket_t * ) pucEthernetBuffer );
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	647b      	str	r3, [r7, #68]	@ 0x44

        #if ( ipconfigUSE_IPv6 != 0 )
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPPacket_IPv6_t * pxIPPacket_IPv6 = ( ( const IPPacket_IPv6_t * ) pucEthernetBuffer );
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	643b      	str	r3, [r7, #64]	@ 0x40
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        configASSERT( pucEthernetBuffer != NULL );
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d104      	bne.n	800cc2e <FreeRTOS_MatchingEndpoint+0x26>
 800cc24:	f44f 7164 	mov.w	r1, #912	@ 0x390
 800cc28:	485e      	ldr	r0, [pc, #376]	@ (800cda4 <FreeRTOS_MatchingEndpoint+0x19c>)
 800cc2a:	f7f4 fa75 	bl	8001118 <vAssertCalled>
        #ifndef _lint
        {
            /* MISRA Ref 11.4.3 [Casting pointer to int for verification] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            uintptr_t uxAddress = ( uintptr_t ) pucEthernetBuffer;
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	63fb      	str	r3, [r7, #60]	@ 0x3c
            uxAddress += 2U;
 800cc32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc34:	3302      	adds	r3, #2
 800cc36:	63fb      	str	r3, [r7, #60]	@ 0x3c
            configASSERT( ( uxAddress % 4U ) == 0U );
 800cc38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc3a:	f003 0303 	and.w	r3, r3, #3
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d004      	beq.n	800cc4c <FreeRTOS_MatchingEndpoint+0x44>
 800cc42:	f240 319b 	movw	r1, #923	@ 0x39b
 800cc46:	4857      	ldr	r0, [pc, #348]	@ (800cda4 <FreeRTOS_MatchingEndpoint+0x19c>)
 800cc48:	f7f4 fa66 	bl	8001118 <vAssertCalled>
         */

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
        {
            /* Some stats while developing. */
            xRoutingStatistics.ulMatching++;
 800cc4c:	4b56      	ldr	r3, [pc, #344]	@ (800cda8 <FreeRTOS_MatchingEndpoint+0x1a0>)
 800cc4e:	68db      	ldr	r3, [r3, #12]
 800cc50:	3301      	adds	r3, #1
 800cc52:	4a55      	ldr	r2, [pc, #340]	@ (800cda8 <FreeRTOS_MatchingEndpoint+0x1a0>)
 800cc54:	60d3      	str	r3, [r2, #12]
        }
        #endif
        {
            uint16_t usFrameType = pxPacket->xUDPPacket.xEthernetHeader.usFrameType;
 800cc56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc58:	7b1a      	ldrb	r2, [r3, #12]
 800cc5a:	7b5b      	ldrb	r3, [r3, #13]
 800cc5c:	021b      	lsls	r3, r3, #8
 800cc5e:	4313      	orrs	r3, r2
 800cc60:	877b      	strh	r3, [r7, #58]	@ 0x3a
            IP_Address_t xIPAddressFrom;
            IP_Address_t xIPAddressTo;
            MACAddress_t xMACAddress;
            BaseType_t xDoProcessPacket = pdFALSE;
 800cc62:	2300      	movs	r3, #0
 800cc64:	64bb      	str	r3, [r7, #72]	@ 0x48

            ( void ) memset( xIPAddressFrom.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800cc66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cc6a:	2210      	movs	r2, #16
 800cc6c:	2100      	movs	r1, #0
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f013 ff85 	bl	8020b7e <memset>
            ( void ) memset( xIPAddressTo.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800cc74:	f107 0314 	add.w	r3, r7, #20
 800cc78:	2210      	movs	r2, #16
 800cc7a:	2100      	movs	r1, #0
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f013 ff7e 	bl	8020b7e <memset>

            switch( usFrameType )
 800cc82:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800cc84:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d009      	beq.n	800cca0 <FreeRTOS_MatchingEndpoint+0x98>
 800cc8c:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800cc90:	4293      	cmp	r3, r2
 800cc92:	dc6a      	bgt.n	800cd6a <FreeRTOS_MatchingEndpoint+0x162>
 800cc94:	2b08      	cmp	r3, #8
 800cc96:	d05d      	beq.n	800cd54 <FreeRTOS_MatchingEndpoint+0x14c>
 800cc98:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800cc9c:	d015      	beq.n	800ccca <FreeRTOS_MatchingEndpoint+0xc2>
                    #if ( ipconfigPROCESS_CUSTOM_ETHERNET_FRAMES == 1 )
                        /* Custom frame types, match by MAC address only. */
                        xDoProcessPacket = pdTRUE;
                    #endif

                    break;
 800cc9e:	e064      	b.n	800cd6a <FreeRTOS_MatchingEndpoint+0x162>
                        ( void ) memcpy( xIPAddressFrom.xIP_IPv6.ucBytes, pxIPPacket_IPv6->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800cca0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cca2:	3316      	adds	r3, #22
 800cca4:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800cca8:	6818      	ldr	r0, [r3, #0]
 800ccaa:	6859      	ldr	r1, [r3, #4]
 800ccac:	689a      	ldr	r2, [r3, #8]
 800ccae:	68db      	ldr	r3, [r3, #12]
 800ccb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        ( void ) memcpy( xIPAddressTo.xIP_IPv6.ucBytes, pxIPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800ccb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ccb4:	3326      	adds	r3, #38	@ 0x26
 800ccb6:	f107 0414 	add.w	r4, r7, #20
 800ccba:	6818      	ldr	r0, [r3, #0]
 800ccbc:	6859      	ldr	r1, [r3, #4]
 800ccbe:	689a      	ldr	r2, [r3, #8]
 800ccc0:	68db      	ldr	r3, [r3, #12]
 800ccc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        xDoProcessPacket = pdTRUE;
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800ccc8:	e050      	b.n	800cd6c <FreeRTOS_MatchingEndpoint+0x164>
                        const ARPPacket_t * pxARPFrame = ( const ARPPacket_t * ) pucEthernetBuffer;
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	637b      	str	r3, [r7, #52]	@ 0x34
                        if( pxARPFrame->xARPHeader.usOperation == ( uint16_t ) ipARP_REQUEST )
 800ccce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccd0:	8a9b      	ldrh	r3, [r3, #20]
 800ccd2:	b29b      	uxth	r3, r3
 800ccd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ccd8:	d108      	bne.n	800ccec <FreeRTOS_MatchingEndpoint+0xe4>
                            ( void ) memcpy( xIPAddressFrom.xIP_IPv6.ucBytes, pxPacket->xARPPacket.xARPHeader.ucSenderProtocolAddress, sizeof( uint32_t ) );
 800ccda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ccdc:	331c      	adds	r3, #28
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	627b      	str	r3, [r7, #36]	@ 0x24
                            xIPAddressTo.ulIP_IPv4 = pxPacket->xARPPacket.xARPHeader.ulTargetProtocolAddress;
 800cce2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cce4:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 800cce8:	617b      	str	r3, [r7, #20]
 800ccea:	e00d      	b.n	800cd08 <FreeRTOS_MatchingEndpoint+0x100>
                        else if( pxARPFrame->xARPHeader.usOperation == ( uint16_t ) ipARP_REPLY )
 800ccec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccee:	8a9b      	ldrh	r3, [r3, #20]
 800ccf0:	b29b      	uxth	r3, r3
 800ccf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ccf6:	d107      	bne.n	800cd08 <FreeRTOS_MatchingEndpoint+0x100>
                            ( void ) memcpy( xIPAddressTo.xIP_IPv6.ucBytes, pxPacket->xARPPacket.xARPHeader.ucSenderProtocolAddress, sizeof( uint32_t ) );
 800ccf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ccfa:	331c      	adds	r3, #28
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	617b      	str	r3, [r7, #20]
                            xIPAddressFrom.ulIP_IPv4 = pxPacket->xARPPacket.xARPHeader.ulTargetProtocolAddress;
 800cd00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd02:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 800cd06:	627b      	str	r3, [r7, #36]	@ 0x24
                        FreeRTOS_debug_printf( ( "pxEasyFit: ARP %xip -> %xip\n", ( unsigned ) FreeRTOS_ntohl( xIPAddressFrom.ulIP_IPv4 ), ( unsigned ) FreeRTOS_ntohl( xIPAddressTo.ulIP_IPv4 ) ) );
 800cd08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd0a:	061a      	lsls	r2, r3, #24
 800cd0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd0e:	021b      	lsls	r3, r3, #8
 800cd10:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cd14:	431a      	orrs	r2, r3
 800cd16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd18:	0a1b      	lsrs	r3, r3, #8
 800cd1a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cd1e:	431a      	orrs	r2, r3
 800cd20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd22:	0e1b      	lsrs	r3, r3, #24
 800cd24:	ea42 0103 	orr.w	r1, r2, r3
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	061a      	lsls	r2, r3, #24
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	021b      	lsls	r3, r3, #8
 800cd30:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cd34:	431a      	orrs	r2, r3
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	0a1b      	lsrs	r3, r3, #8
 800cd3a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cd3e:	431a      	orrs	r2, r3
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	0e1b      	lsrs	r3, r3, #24
 800cd44:	4313      	orrs	r3, r2
 800cd46:	461a      	mov	r2, r3
 800cd48:	4818      	ldr	r0, [pc, #96]	@ (800cdac <FreeRTOS_MatchingEndpoint+0x1a4>)
 800cd4a:	f013 fbef 	bl	802052c <lUDPLoggingPrintf>
                    xDoProcessPacket = pdTRUE;
 800cd4e:	2301      	movs	r3, #1
 800cd50:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800cd52:	e00b      	b.n	800cd6c <FreeRTOS_MatchingEndpoint+0x164>
                        xIPAddressFrom.ulIP_IPv4 = pxPacket->xUDPPacket.xIPHeader.ulSourceIPAddress;
 800cd54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd56:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800cd5a:	627b      	str	r3, [r7, #36]	@ 0x24
                        xIPAddressTo.ulIP_IPv4 = pxPacket->xUDPPacket.xIPHeader.ulDestinationIPAddress;
 800cd5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd5e:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800cd62:	617b      	str	r3, [r7, #20]
                        xDoProcessPacket = pdTRUE;
 800cd64:	2301      	movs	r3, #1
 800cd66:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800cd68:	e000      	b.n	800cd6c <FreeRTOS_MatchingEndpoint+0x164>
                    break;
 800cd6a:	bf00      	nop
            }

            if( xDoProcessPacket == pdTRUE )
 800cd6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd6e:	2b01      	cmp	r3, #1
 800cd70:	d113      	bne.n	800cd9a <FreeRTOS_MatchingEndpoint+0x192>
            {
                ( void ) memcpy( xMACAddress.ucBytes, pxPacket->xUDPPacket.xEthernetHeader.xDestinationAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800cd72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cd74:	f107 030c 	add.w	r3, r7, #12
 800cd78:	6810      	ldr	r0, [r2, #0]
 800cd7a:	6018      	str	r0, [r3, #0]
 800cd7c:	8892      	ldrh	r2, [r2, #4]
 800cd7e:	809a      	strh	r2, [r3, #4]
                pxEndPoint = pxEasyFit( pxNetworkInterface,
 800cd80:	f107 0014 	add.w	r0, r7, #20
 800cd84:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800cd88:	8f79      	ldrh	r1, [r7, #58]	@ 0x3a
 800cd8a:	f107 030c 	add.w	r3, r7, #12
 800cd8e:	9300      	str	r3, [sp, #0]
 800cd90:	4603      	mov	r3, r0
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f7ff fdee 	bl	800c974 <pxEasyFit>
 800cd98:	64f8      	str	r0, [r7, #76]	@ 0x4c
                                        &xIPAddressFrom,
                                        &xIPAddressTo,
                                        &xMACAddress );
            }
        }
        return pxEndPoint;
 800cd9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3754      	adds	r7, #84	@ 0x54
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd90      	pop	{r4, r7, pc}
 800cda4:	08023eb0 	.word	0x08023eb0
 800cda8:	200011d8 	.word	0x200011d8
 800cdac:	08023ee0 	.word	0x08023ee0

0800cdb0 <FreeRTOS_FindGateWay>:
 * @param[in] xIPType The type of Gateway to look for ( ipTYPE_IPv4 or ipTYPE_IPv6 ).
 *
 * @return The end-point that will lead to the gateway, or NULL when no gateway was found.
 */
    NetworkEndPoint_t * FreeRTOS_FindGateWay( BaseType_t xIPType )
    {
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800cdb8:	4b1b      	ldr	r3, [pc, #108]	@ (800ce28 <FreeRTOS_FindGateWay+0x78>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	60fb      	str	r3, [r7, #12]

        while( pxEndPoint != NULL )
 800cdbe:	e028      	b.n	800ce12 <FreeRTOS_FindGateWay+0x62>
                if( pxEndPoint->ipv4_settings.ulGatewayAddress != 0U ) /* access to ipv4_settings is checked. */
                {
                    break;
                }
            #else
                if( ( xIPType == ( BaseType_t ) ipTYPE_IPv6 ) && ( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) )
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2b60      	cmp	r3, #96	@ 0x60
 800cdc4:	d112      	bne.n	800cdec <FreeRTOS_FindGateWay+0x3c>
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800cdcc:	f003 0304 	and.w	r3, r3, #4
 800cdd0:	b2db      	uxtb	r3, r3
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d00a      	beq.n	800cdec <FreeRTOS_FindGateWay+0x3c>
                {
                    /* Check if the IP-address is non-zero. */
                    if( memcmp( FreeRTOS_in6addr_any.ucBytes, pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) != 0 )
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	335c      	adds	r3, #92	@ 0x5c
 800cdda:	2210      	movs	r2, #16
 800cddc:	4619      	mov	r1, r3
 800cdde:	4813      	ldr	r0, [pc, #76]	@ (800ce2c <FreeRTOS_FindGateWay+0x7c>)
 800cde0:	f014 fd55 	bl	802188e <memcmp>
 800cde4:	4603      	mov	r3, r0
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d00f      	beq.n	800ce0a <FreeRTOS_FindGateWay+0x5a>
                    {
                        break;
 800cdea:	e017      	b.n	800ce1c <FreeRTOS_FindGateWay+0x6c>
                    }
                }

                #if ( ipconfigUSE_IPv4 != 0 )
                    else
                    if( ( xIPType == ( BaseType_t ) ipTYPE_IPv4 ) && ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) )
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2b40      	cmp	r3, #64	@ 0x40
 800cdf0:	d10b      	bne.n	800ce0a <FreeRTOS_FindGateWay+0x5a>
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800cdf8:	f003 0304 	and.w	r3, r3, #4
 800cdfc:	b2db      	uxtb	r3, r3
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d103      	bne.n	800ce0a <FreeRTOS_FindGateWay+0x5a>
                    {
                        if( pxEndPoint->ipv4_settings.ulGatewayAddress != 0U )
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	689b      	ldr	r3, [r3, #8]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d107      	bne.n	800ce1a <FreeRTOS_FindGateWay+0x6a>
                else
                {
                    /* This end-point is not the right IP-type. */
                }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
            pxEndPoint = pxEndPoint->pxNext;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800ce10:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d1d3      	bne.n	800cdc0 <FreeRTOS_FindGateWay+0x10>
 800ce18:	e000      	b.n	800ce1c <FreeRTOS_FindGateWay+0x6c>
                            break;
 800ce1a:	bf00      	nop
        }

        return pxEndPoint;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
    }
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3710      	adds	r7, #16
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop
 800ce28:	200011d0 	.word	0x200011d0
 800ce2c:	08025bcc 	.word	0x08025bcc

0800ce30 <xIPv6_GetIPType>:
 * @param[in] pxAddress The IPv6 address whose type needs to be returned.
 * @returns The IP type of the given address.
 */
#if ( ipconfigUSE_IPv6 != 0 )
    IPv6_Type_t xIPv6_GetIPType( const IPv6_Address_t * pxAddress )
    {
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b086      	sub	sp, #24
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
        IPv6_Type_t eResult = eIPv6_Unknown;
 800ce38:	2305      	movs	r3, #5
 800ce3a:	75fb      	strb	r3, [r7, #23]
            { eIPv6_SiteLocal, 0xFFC0U, 0xFEC0U }, /* 1111 1110 11 */
            { eIPv6_Multicast, 0xFF00U, 0xFF00U }, /* 1111 1111 */
            { eIPv6_Loopback,  0xFFFFU, 0x0000U }, /* 0000 0000 ::1 */
        };

        if( pxAddress != NULL )
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d046      	beq.n	800ced0 <xIPv6_GetIPType+0xa0>
        {
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( xIPCouples ); xIndex++ )
 800ce42:	2300      	movs	r3, #0
 800ce44:	613b      	str	r3, [r7, #16]
 800ce46:	e040      	b.n	800ceca <xIPv6_GetIPType+0x9a>
            {
                uint16_t usAddress =
                    ( uint16_t ) ( ( ( ( uint16_t ) pxAddress->ucBytes[ 0 ] ) << 8 ) |
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	021b      	lsls	r3, r3, #8
 800ce4e:	b21a      	sxth	r2, r3
                                   ( ( uint16_t ) pxAddress->ucBytes[ 1 ] ) );
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	785b      	ldrb	r3, [r3, #1]
 800ce54:	b21b      	sxth	r3, r3
                    ( uint16_t ) ( ( ( ( uint16_t ) pxAddress->ucBytes[ 0 ] ) << 8 ) |
 800ce56:	4313      	orrs	r3, r2
 800ce58:	b21b      	sxth	r3, r3
                uint16_t usAddress =
 800ce5a:	81fb      	strh	r3, [r7, #14]

                if( xIPCouples[ xIndex ].eType == eIPv6_Loopback )
 800ce5c:	491f      	ldr	r1, [pc, #124]	@ (800cedc <xIPv6_GetIPType+0xac>)
 800ce5e:	693a      	ldr	r2, [r7, #16]
 800ce60:	4613      	mov	r3, r2
 800ce62:	005b      	lsls	r3, r3, #1
 800ce64:	4413      	add	r3, r2
 800ce66:	005b      	lsls	r3, r3, #1
 800ce68:	440b      	add	r3, r1
 800ce6a:	781b      	ldrb	r3, [r3, #0]
 800ce6c:	2b04      	cmp	r3, #4
 800ce6e:	d108      	bne.n	800ce82 <xIPv6_GetIPType+0x52>
                {
                    if( xIsIPv6Loopback( pxAddress ) != pdFALSE )
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f7fd f929 	bl	800a0c8 <xIsIPv6Loopback>
 800ce76:	4603      	mov	r3, r0
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d002      	beq.n	800ce82 <xIPv6_GetIPType+0x52>
                    {
                        eResult = eIPv6_Loopback;
 800ce7c:	2304      	movs	r3, #4
 800ce7e:	75fb      	strb	r3, [r7, #23]
                        break;
 800ce80:	e026      	b.n	800ced0 <xIPv6_GetIPType+0xa0>
                    }
                }

                if( ( usAddress & xIPCouples[ xIndex ].usMask ) == xIPCouples[ xIndex ].usExpected )
 800ce82:	4916      	ldr	r1, [pc, #88]	@ (800cedc <xIPv6_GetIPType+0xac>)
 800ce84:	693a      	ldr	r2, [r7, #16]
 800ce86:	4613      	mov	r3, r2
 800ce88:	005b      	lsls	r3, r3, #1
 800ce8a:	4413      	add	r3, r2
 800ce8c:	005b      	lsls	r3, r3, #1
 800ce8e:	440b      	add	r3, r1
 800ce90:	3302      	adds	r3, #2
 800ce92:	881a      	ldrh	r2, [r3, #0]
 800ce94:	89fb      	ldrh	r3, [r7, #14]
 800ce96:	4013      	ands	r3, r2
 800ce98:	b299      	uxth	r1, r3
 800ce9a:	4810      	ldr	r0, [pc, #64]	@ (800cedc <xIPv6_GetIPType+0xac>)
 800ce9c:	693a      	ldr	r2, [r7, #16]
 800ce9e:	4613      	mov	r3, r2
 800cea0:	005b      	lsls	r3, r3, #1
 800cea2:	4413      	add	r3, r2
 800cea4:	005b      	lsls	r3, r3, #1
 800cea6:	4403      	add	r3, r0
 800cea8:	3304      	adds	r3, #4
 800ceaa:	881b      	ldrh	r3, [r3, #0]
 800ceac:	4299      	cmp	r1, r3
 800ceae:	d109      	bne.n	800cec4 <xIPv6_GetIPType+0x94>
                {
                    eResult = xIPCouples[ xIndex ].eType;
 800ceb0:	490a      	ldr	r1, [pc, #40]	@ (800cedc <xIPv6_GetIPType+0xac>)
 800ceb2:	693a      	ldr	r2, [r7, #16]
 800ceb4:	4613      	mov	r3, r2
 800ceb6:	005b      	lsls	r3, r3, #1
 800ceb8:	4413      	add	r3, r2
 800ceba:	005b      	lsls	r3, r3, #1
 800cebc:	440b      	add	r3, r1
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	75fb      	strb	r3, [r7, #23]
                    break;
 800cec2:	e005      	b.n	800ced0 <xIPv6_GetIPType+0xa0>
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( xIPCouples ); xIndex++ )
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	3301      	adds	r3, #1
 800cec8:	613b      	str	r3, [r7, #16]
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	2b04      	cmp	r3, #4
 800cece:	ddbb      	ble.n	800ce48 <xIPv6_GetIPType+0x18>
                }
            }
        }

        return eResult;
 800ced0:	7dfb      	ldrb	r3, [r7, #23]
    }
 800ced2:	4618      	mov	r0, r3
 800ced4:	3718      	adds	r7, #24
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}
 800ceda:	bf00      	nop
 800cedc:	08025c24 	.word	0x08025c24

0800cee0 <pcEndpointName>:
 *          The string will be "NULL" if the end point pointer is NULL.
 */
    const char * pcEndpointName( const NetworkEndPoint_t * pxEndPoint,
                                 char * pcBuffer,
                                 size_t uxSize )
    {
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b084      	sub	sp, #16
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	60f8      	str	r0, [r7, #12]
 800cee8:	60b9      	str	r1, [r7, #8]
 800ceea:	607a      	str	r2, [r7, #4]
        if( pxEndPoint == NULL )
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d105      	bne.n	800cefe <pcEndpointName+0x1e>
        {
            /* MISRA Ref 21.6.1 [snprintf and logging] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-216 */
            /* coverity[misra_c_2012_rule_21_6_violation] */
            ( void ) snprintf( pcBuffer, uxSize, "NULL" );
 800cef2:	4a16      	ldr	r2, [pc, #88]	@ (800cf4c <pcEndpointName+0x6c>)
 800cef4:	6879      	ldr	r1, [r7, #4]
 800cef6:	68b8      	ldr	r0, [r7, #8]
 800cef8:	f014 fb44 	bl	8021584 <snprintf>
 800cefc:	e020      	b.n	800cf40 <pcEndpointName+0x60>
        }
        else
        {
            switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800cf04:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800cf08:	b2db      	uxtb	r3, r3
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d002      	beq.n	800cf14 <pcEndpointName+0x34>
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	d007      	beq.n	800cf22 <pcEndpointName+0x42>
 800cf12:	e00f      	b.n	800cf34 <pcEndpointName+0x54>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE_UNSIGNED:
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
                                                     ( const void * ) &( pxEndPoint->ipv4_settings.ulIPAddress ),
 800cf14:	68f9      	ldr	r1, [r7, #12]
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	68ba      	ldr	r2, [r7, #8]
 800cf1a:	2002      	movs	r0, #2
 800cf1c:	f001 faaa 	bl	800e474 <FreeRTOS_inet_ntop>
                                                     pcBuffer,
                                                     ( socklen_t ) uxSize );
                        break;
 800cf20:	e00e      	b.n	800cf40 <pcEndpointName+0x60>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case pdTRUE_UNSIGNED:
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
                                                     pxEndPoint->ipv6_settings.xIPAddress.ucBytes,
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	f103 0138 	add.w	r1, r3, #56	@ 0x38
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	68ba      	ldr	r2, [r7, #8]
 800cf2c:	200a      	movs	r0, #10
 800cf2e:	f001 faa1 	bl	800e474 <FreeRTOS_inet_ntop>
                                                     pcBuffer,
                                                     ( socklen_t ) uxSize );
                        break;
 800cf32:	e005      	b.n	800cf40 <pcEndpointName+0x60>
                default:
                    /* MISRA 16.4 Compliance */
                    /* MISRA Ref 21.6.1 [snprintf and logging] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-216 */
                    /* coverity[misra_c_2012_rule_21_6_violation] */
                    ( void ) snprintf( pcBuffer, uxSize, "NULL" );
 800cf34:	4a05      	ldr	r2, [pc, #20]	@ (800cf4c <pcEndpointName+0x6c>)
 800cf36:	6879      	ldr	r1, [r7, #4]
 800cf38:	68b8      	ldr	r0, [r7, #8]
 800cf3a:	f014 fb23 	bl	8021584 <snprintf>
                    break;
 800cf3e:	bf00      	nop
            }
        }

        return pcBuffer;
 800cf40:	68bb      	ldr	r3, [r7, #8]
    }
 800cf42:	4618      	mov	r0, r3
 800cf44:	3710      	adds	r7, #16
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
 800cf4a:	bf00      	nop
 800cf4c:	08023f00 	.word	0x08023f00

0800cf50 <prvValidSocket>:
 *         is returned.
 */
static BaseType_t prvValidSocket( const FreeRTOS_Socket_t * pxSocket,
                                  BaseType_t xProtocol,
                                  BaseType_t xIsBound )
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b086      	sub	sp, #24
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	60f8      	str	r0, [r7, #12]
 800cf58:	60b9      	str	r1, [r7, #8]
 800cf5a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;

    if( xSocketValid( pxSocket ) == pdFALSE )
 800cf5c:	68f8      	ldr	r0, [r7, #12]
 800cf5e:	f002 fb21 	bl	800f5a4 <xSocketValid>
 800cf62:	4603      	mov	r3, r0
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d102      	bne.n	800cf6e <prvValidSocket+0x1e>
    {
        xReturn = pdFALSE;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	617b      	str	r3, [r7, #20]
 800cf6c:	e015      	b.n	800cf9a <prvValidSocket+0x4a>
    }
    else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d006      	beq.n	800cf82 <prvValidSocket+0x32>
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	69db      	ldr	r3, [r3, #28]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d102      	bne.n	800cf82 <prvValidSocket+0x32>
    {
        /* The caller expects the socket to be bound, but it isn't. */
        xReturn = pdFALSE;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	617b      	str	r3, [r7, #20]
 800cf80:	e00b      	b.n	800cf9a <prvValidSocket+0x4a>
    }
    else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	b2db      	uxtb	r3, r3
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d002      	beq.n	800cf96 <prvValidSocket+0x46>
    {
        /* Socket has a wrong type (UDP != TCP). */
        xReturn = pdFALSE;
 800cf90:	2300      	movs	r3, #0
 800cf92:	617b      	str	r3, [r7, #20]
 800cf94:	e001      	b.n	800cf9a <prvValidSocket+0x4a>
    }
    else
    {
        xReturn = pdTRUE;
 800cf96:	2301      	movs	r3, #1
 800cf98:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800cf9a:	697b      	ldr	r3, [r7, #20]
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3718      	adds	r7, #24
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <vNetworkSocketsInit>:

/**
 * @brief Initialise the bound TCP/UDP socket lists.
 */
void vNetworkSocketsInit( void )
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	af00      	add	r7, sp, #0
    vListInitialise( &xBoundUDPSocketsList );
 800cfa8:	4803      	ldr	r0, [pc, #12]	@ (800cfb8 <vNetworkSocketsInit+0x14>)
 800cfaa:	f7f5 fa49 	bl	8002440 <vListInitialise>

    #if ( ipconfigUSE_TCP == 1 )
    {
        vListInitialise( &xBoundTCPSocketsList );
 800cfae:	4803      	ldr	r0, [pc, #12]	@ (800cfbc <vNetworkSocketsInit+0x18>)
 800cfb0:	f7f5 fa46 	bl	8002440 <vListInitialise>
    }
    #endif /* ipconfigUSE_TCP == 1 */
}
 800cfb4:	bf00      	nop
 800cfb6:	bd80      	pop	{r7, pc}
 800cfb8:	2000129c 	.word	0x2000129c
 800cfbc:	200012b0 	.word	0x200012b0

0800cfc0 <prvDetermineSocketSize>:
 */
static BaseType_t prvDetermineSocketSize( BaseType_t xDomain,
                                          BaseType_t xType,
                                          BaseType_t xProtocol,
                                          size_t * pxSocketSize )
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b086      	sub	sp, #24
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	60f8      	str	r0, [r7, #12]
 800cfc8:	60b9      	str	r1, [r7, #8]
 800cfca:	607a      	str	r2, [r7, #4]
 800cfcc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800cfce:	2301      	movs	r3, #1
 800cfd0:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t const * pxSocket = NULL;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	613b      	str	r3, [r7, #16]

    /* Asserts must not appear before it has been determined that the network
     * task is ready - otherwise the asserts will fail. */
    if( xIPIsNetworkTaskReady() == pdFALSE )
 800cfd6:	f7fb ff97 	bl	8008f08 <xIPIsNetworkTaskReady>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d102      	bne.n	800cfe6 <prvDetermineSocketSize+0x26>
    {
        xReturn = pdFAIL;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	617b      	str	r3, [r7, #20]
 800cfe4:	e05e      	b.n	800d0a4 <prvDetermineSocketSize+0xe4>

            configASSERT( xDomain == FREERTOS_AF_INET6 );
        }
        #else /* if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) ) */
        {
            if( ( xDomain != FREERTOS_AF_INET ) && ( xDomain != FREERTOS_AF_INET6 ) )
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	2b02      	cmp	r3, #2
 800cfea:	d004      	beq.n	800cff6 <prvDetermineSocketSize+0x36>
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	2b0a      	cmp	r3, #10
 800cff0:	d001      	beq.n	800cff6 <prvDetermineSocketSize+0x36>
            {
                xReturn = pdFAIL;
 800cff2:	2300      	movs	r3, #0
 800cff4:	617b      	str	r3, [r7, #20]
            }

            configASSERT( ( xDomain == FREERTOS_AF_INET ) || ( xDomain == FREERTOS_AF_INET6 ) );
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	2b02      	cmp	r3, #2
 800cffa:	d002      	beq.n	800d002 <prvDetermineSocketSize+0x42>
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	2b0a      	cmp	r3, #10
 800d000:	d101      	bne.n	800d006 <prvDetermineSocketSize+0x46>
 800d002:	2301      	movs	r3, #1
 800d004:	e000      	b.n	800d008 <prvDetermineSocketSize+0x48>
 800d006:	2300      	movs	r3, #0
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d104      	bne.n	800d016 <prvDetermineSocketSize+0x56>
 800d00c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800d010:	4827      	ldr	r0, [pc, #156]	@ (800d0b0 <prvDetermineSocketSize+0xf0>)
 800d012:	f7f4 f881 	bl	8001118 <vAssertCalled>
        }
        #endif /* if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) ) */

        /* Check if the UDP socket-list has been initialised. */
        configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 800d016:	4b27      	ldr	r3, [pc, #156]	@ (800d0b4 <prvDetermineSocketSize+0xf4>)
 800d018:	689b      	ldr	r3, [r3, #8]
 800d01a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d01e:	d004      	beq.n	800d02a <prvDetermineSocketSize+0x6a>
 800d020:	f240 11f9 	movw	r1, #505	@ 0x1f9
 800d024:	4822      	ldr	r0, [pc, #136]	@ (800d0b0 <prvDetermineSocketSize+0xf0>)
 800d026:	f7f4 f877 	bl	8001118 <vAssertCalled>
        #if ( ipconfigUSE_TCP == 1 )
        {
            /* Check if the TCP socket-list has been initialised. */
            configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 800d02a:	4b23      	ldr	r3, [pc, #140]	@ (800d0b8 <prvDetermineSocketSize+0xf8>)
 800d02c:	689b      	ldr	r3, [r3, #8]
 800d02e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d032:	d004      	beq.n	800d03e <prvDetermineSocketSize+0x7e>
 800d034:	f240 11fd 	movw	r1, #509	@ 0x1fd
 800d038:	481d      	ldr	r0, [pc, #116]	@ (800d0b0 <prvDetermineSocketSize+0xf0>)
 800d03a:	f7f4 f86d 	bl	8001118 <vAssertCalled>
        }
        #endif /* ipconfigUSE_TCP == 1 */

        if( xProtocol == FREERTOS_IPPROTO_UDP )
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2b11      	cmp	r3, #17
 800d042:	d110      	bne.n	800d066 <prvDetermineSocketSize+0xa6>
        {
            if( xType != FREERTOS_SOCK_DGRAM )
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	2b02      	cmp	r3, #2
 800d048:	d009      	beq.n	800d05e <prvDetermineSocketSize+0x9e>
            {
                xReturn = pdFAIL;
 800d04a:	2300      	movs	r3, #0
 800d04c:	617b      	str	r3, [r7, #20]
                configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	2b01      	cmp	r3, #1
 800d052:	d004      	beq.n	800d05e <prvDetermineSocketSize+0x9e>
 800d054:	f240 2106 	movw	r1, #518	@ 0x206
 800d058:	4815      	ldr	r0, [pc, #84]	@ (800d0b0 <prvDetermineSocketSize+0xf0>)
 800d05a:	f7f4 f85d 	bl	8001118 <vAssertCalled>
            }

            /* In case a UDP socket is created, do not allocate space for TCP data. */
            *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	2270      	movs	r2, #112	@ 0x70
 800d062:	601a      	str	r2, [r3, #0]
 800d064:	e01e      	b.n	800d0a4 <prvDetermineSocketSize+0xe4>
        }

        #if ( ipconfigUSE_TCP == 1 )
            else if( xProtocol == FREERTOS_IPPROTO_TCP )
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2b06      	cmp	r3, #6
 800d06a:	d111      	bne.n	800d090 <prvDetermineSocketSize+0xd0>
            {
                if( xType != FREERTOS_SOCK_STREAM )
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	2b01      	cmp	r3, #1
 800d070:	d009      	beq.n	800d086 <prvDetermineSocketSize+0xc6>
                {
                    xReturn = pdFAIL;
 800d072:	2300      	movs	r3, #0
 800d074:	617b      	str	r3, [r7, #20]
                    configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800d076:	697b      	ldr	r3, [r7, #20]
 800d078:	2b01      	cmp	r3, #1
 800d07a:	d004      	beq.n	800d086 <prvDetermineSocketSize+0xc6>
 800d07c:	f240 2113 	movw	r1, #531	@ 0x213
 800d080:	480b      	ldr	r0, [pc, #44]	@ (800d0b0 <prvDetermineSocketSize+0xf0>)
 800d082:	f7f4 f849 	bl	8001118 <vAssertCalled>
                }

                *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800d08c:	601a      	str	r2, [r3, #0]
 800d08e:	e009      	b.n	800d0a4 <prvDetermineSocketSize+0xe4>
            }
        #endif /* ipconfigUSE_TCP == 1 */
        else
        {
            xReturn = pdFAIL;
 800d090:	2300      	movs	r3, #0
 800d092:	617b      	str	r3, [r7, #20]
            configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	2b01      	cmp	r3, #1
 800d098:	d004      	beq.n	800d0a4 <prvDetermineSocketSize+0xe4>
 800d09a:	f44f 7107 	mov.w	r1, #540	@ 0x21c
 800d09e:	4804      	ldr	r0, [pc, #16]	@ (800d0b0 <prvDetermineSocketSize+0xf0>)
 800d0a0:	f7f4 f83a 	bl	8001118 <vAssertCalled>
    }

    /* In case configASSERT() is not used */
    ( void ) xDomain;
    ( void ) pxSocket; /* Was only used for sizeof. */
    return xReturn;
 800d0a4:	697b      	ldr	r3, [r7, #20]
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	3718      	adds	r7, #24
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}
 800d0ae:	bf00      	nop
 800d0b0:	08023f08 	.word	0x08023f08
 800d0b4:	2000129c 	.word	0x2000129c
 800d0b8:	200012b0 	.word	0x200012b0

0800d0bc <prvInitialiseTCPFields>:
 * @param[in] uxSocketSize The calculated size of the socket, only used to
 *                          gather memory usage statistics.
 */
    static void prvInitialiseTCPFields( FreeRTOS_Socket_t * pxSocket,
                                        size_t uxSocketSize )
    {
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b084      	sub	sp, #16
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	6039      	str	r1, [r7, #0]
        ( void ) uxSocketSize;
        /* Lint wants at least a comment, in case the macro is empty. */
        iptraceMEM_STATS_CREATE( tcpSOCKET_TCP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );
        /* StreamSize is expressed in number of bytes */
        /* Round up buffer sizes to nearest multiple of MSS */
        pxSocket->u.xTCP.usMSS = ( uint16_t ) ipconfigTCP_MSS;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800d0cc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxSocket->bits.bIsIPv6 != 0U )
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	7a1b      	ldrb	r3, [r3, #8]
 800d0d4:	f003 0301 	and.w	r3, r3, #1
 800d0d8:	b2db      	uxtb	r3, r3
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d00a      	beq.n	800d0f4 <prvInitialiseTCPFields+0x38>
            {
                uint16_t usDifference = ipSIZE_OF_IPv6_HEADER - ipSIZE_OF_IPv4_HEADER;
 800d0de:	2314      	movs	r3, #20
 800d0e0:	81fb      	strh	r3, [r7, #14]

                /* Because ipconfigTCP_MSS is guaranteed not less than tcpMINIMUM_SEGMENT_LENGTH by FreeRTOSIPConfigDefaults.h,
                 * it's unnecessary to check if xSocket->u.xTCP.usMSS is greater than difference. */
                pxSocket->u.xTCP.usMSS = ( uint16_t ) ( pxSocket->u.xTCP.usMSS - usDifference );
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 800d0e8:	89fb      	ldrh	r3, [r7, #14]
 800d0ea:	1ad3      	subs	r3, r2, r3
 800d0ec:	b29a      	uxth	r2, r3
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
            }
        #endif /* ipconfigUSE_IPv6 != 0 */

        pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f241 121c 	movw	r2, #4380	@ 0x111c
 800d0fa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 800d0fe:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 800d102:	f640 3068 	movw	r0, #2920	@ 0xb68
 800d106:	f7fc fc85 	bl	8009a14 <FreeRTOS_round_up>
 800d10a:	4602      	mov	r2, r0
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        /* Use half of the buffer size of the TCP windows */
        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            pxSocket->u.xTCP.uxRxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxRxStreamSize / 2U ) / ipconfigTCP_MSS );
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d118:	08db      	lsrs	r3, r3, #3
 800d11a:	4a10      	ldr	r2, [pc, #64]	@ (800d15c <prvInitialiseTCPFields+0xa0>)
 800d11c:	fba2 2303 	umull	r2, r3, r2, r3
 800d120:	099b      	lsrs	r3, r3, #6
 800d122:	4619      	mov	r1, r3
 800d124:	2001      	movs	r0, #1
 800d126:	f7fc fc35 	bl	8009994 <FreeRTOS_max_size_t>
 800d12a:	4602      	mov	r2, r0
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
            pxSocket->u.xTCP.uxTxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxTxStreamSize / 2U ) / ipconfigTCP_MSS );
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d138:	08db      	lsrs	r3, r3, #3
 800d13a:	4a08      	ldr	r2, [pc, #32]	@ (800d15c <prvInitialiseTCPFields+0xa0>)
 800d13c:	fba2 2303 	umull	r2, r3, r2, r3
 800d140:	099b      	lsrs	r3, r3, #6
 800d142:	4619      	mov	r1, r3
 800d144:	2001      	movs	r0, #1
 800d146:	f7fc fc25 	bl	8009994 <FreeRTOS_max_size_t>
 800d14a:	4602      	mov	r2, r0
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
        #endif

        /* The above values are just defaults, and can be overridden by
         * calling FreeRTOS_setsockopt().  No buffers will be allocated until a
         * socket is connected and data is exchanged. */
    }
 800d152:	bf00      	nop
 800d154:	3710      	adds	r7, #16
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	bf00      	nop
 800d15c:	2ce33e6d 	.word	0x2ce33e6d

0800d160 <FreeRTOS_socket>:
 *         a parameter error, otherwise a valid socket.
 */
Socket_t FreeRTOS_socket( BaseType_t xDomain,
                          BaseType_t xType,
                          BaseType_t xProtocol )
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b08a      	sub	sp, #40	@ 0x28
 800d164:	af00      	add	r7, sp, #0
 800d166:	60f8      	str	r0, [r7, #12]
 800d168:	60b9      	str	r1, [r7, #8]
 800d16a:	607a      	str	r2, [r7, #4]
    FreeRTOS_Socket_t * pxSocket;

/* Note that this value will be over-written by the call to prvDetermineSocketSize. */
    size_t uxSocketSize = 1;
 800d16c:	2301      	movs	r3, #1
 800d16e:	617b      	str	r3, [r7, #20]
    EventGroupHandle_t xEventGroup;
    Socket_t xReturn;
    BaseType_t xProtocolCpy = xProtocol;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	623b      	str	r3, [r7, #32]

    configASSERT( ( xDomain == FREERTOS_AF_INET6 ) || ( xDomain == FREERTOS_AF_INET ) );
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	2b0a      	cmp	r3, #10
 800d178:	d002      	beq.n	800d180 <FreeRTOS_socket+0x20>
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	2b02      	cmp	r3, #2
 800d17e:	d101      	bne.n	800d184 <FreeRTOS_socket+0x24>
 800d180:	2301      	movs	r3, #1
 800d182:	e000      	b.n	800d186 <FreeRTOS_socket+0x26>
 800d184:	2300      	movs	r3, #0
 800d186:	2b00      	cmp	r3, #0
 800d188:	d104      	bne.n	800d194 <FreeRTOS_socket+0x34>
 800d18a:	f240 2171 	movw	r1, #625	@ 0x271
 800d18e:	4845      	ldr	r0, [pc, #276]	@ (800d2a4 <FreeRTOS_socket+0x144>)
 800d190:	f7f3 ffc2 	bl	8001118 <vAssertCalled>
         * to passing 0 as defined by POSIX, indicates to the socket layer that it
         * should pick a sensible default protocol based off the given socket type.
         * If we can't, prvDetermineSocketSize will catch it as an invalid
         * type/protocol combo.
         */
        if( xProtocol == FREERTOS_SOCK_DEPENDENT_PROTO )
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d10c      	bne.n	800d1b4 <FreeRTOS_socket+0x54>
        {
            switch( xType )
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	d005      	beq.n	800d1ac <FreeRTOS_socket+0x4c>
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	2b02      	cmp	r3, #2
 800d1a4:	d105      	bne.n	800d1b2 <FreeRTOS_socket+0x52>
            {
                case FREERTOS_SOCK_DGRAM:
                    xProtocolCpy = FREERTOS_IPPROTO_UDP;
 800d1a6:	2311      	movs	r3, #17
 800d1a8:	623b      	str	r3, [r7, #32]
                    break;
 800d1aa:	e003      	b.n	800d1b4 <FreeRTOS_socket+0x54>

                case FREERTOS_SOCK_STREAM:
                    xProtocolCpy = FREERTOS_IPPROTO_TCP;
 800d1ac:	2306      	movs	r3, #6
 800d1ae:	623b      	str	r3, [r7, #32]
                    break;
 800d1b0:	e000      	b.n	800d1b4 <FreeRTOS_socket+0x54>
                default:

                    /* incorrect xType. this will be caught by
                     * prvDetermineSocketSize.
                     */
                    break;
 800d1b2:	bf00      	nop
            }
        }

        if( prvDetermineSocketSize( xDomain, xType, xProtocolCpy, &uxSocketSize ) == pdFAIL )
 800d1b4:	f107 0314 	add.w	r3, r7, #20
 800d1b8:	6a3a      	ldr	r2, [r7, #32]
 800d1ba:	68b9      	ldr	r1, [r7, #8]
 800d1bc:	68f8      	ldr	r0, [r7, #12]
 800d1be:	f7ff feff 	bl	800cfc0 <prvDetermineSocketSize>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d103      	bne.n	800d1d0 <FreeRTOS_socket+0x70>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800d1c8:	f04f 33ff 	mov.w	r3, #4294967295
 800d1cc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800d1ce:	e063      	b.n	800d298 <FreeRTOS_socket+0x138>
        * By default it points to the FreeRTOS function 'pvPortMalloc()'. */

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxSocket = ( ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize ) );
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7f8 f986 	bl	80054e4 <pvPortMalloc>
 800d1d8:	61f8      	str	r0, [r7, #28]

        if( pxSocket == NULL )
 800d1da:	69fb      	ldr	r3, [r7, #28]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d103      	bne.n	800d1e8 <FreeRTOS_socket+0x88>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800d1e0:	f04f 33ff 	mov.w	r3, #4294967295
 800d1e4:	627b      	str	r3, [r7, #36]	@ 0x24
            iptraceFAILED_TO_CREATE_SOCKET();
            break;
 800d1e6:	e057      	b.n	800d298 <FreeRTOS_socket+0x138>
        }

        xEventGroup = xEventGroupCreate();
 800d1e8:	f7f4 ff55 	bl	8002096 <xEventGroupCreate>
 800d1ec:	61b8      	str	r0, [r7, #24]

        if( xEventGroup == NULL )
 800d1ee:	69bb      	ldr	r3, [r7, #24]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d106      	bne.n	800d202 <FreeRTOS_socket+0xa2>
        {
            vPortFreeSocket( pxSocket );
 800d1f4:	69f8      	ldr	r0, [r7, #28]
 800d1f6:	f7f8 fa49 	bl	800568c <vPortFree>

            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800d1fa:	f04f 33ff 	mov.w	r3, #4294967295
 800d1fe:	627b      	str	r3, [r7, #36]	@ 0x24
 800d200:	e04a      	b.n	800d298 <FreeRTOS_socket+0x138>
            iptraceFAILED_TO_CREATE_EVENT_GROUP();
        }
        else
        {
            /* Clear the entire space to avoid nulling individual entries. */
            ( void ) memset( pxSocket, 0, uxSocketSize );
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	461a      	mov	r2, r3
 800d206:	2100      	movs	r1, #0
 800d208:	69f8      	ldr	r0, [r7, #28]
 800d20a:	f013 fcb8 	bl	8020b7e <memset>

            pxSocket->xEventGroup = xEventGroup;
 800d20e:	69fb      	ldr	r3, [r7, #28]
 800d210:	69ba      	ldr	r2, [r7, #24]
 800d212:	605a      	str	r2, [r3, #4]

            switch( xDomain ) /* LCOV_EXCL_BR_LINE Exclude this because domain is checked at the begin of this function. */
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2b02      	cmp	r3, #2
 800d218:	d008      	beq.n	800d22c <FreeRTOS_socket+0xcc>
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	2b0a      	cmp	r3, #10
 800d21e:	d10b      	bne.n	800d238 <FreeRTOS_socket+0xd8>
            {
                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800d220:	69fa      	ldr	r2, [r7, #28]
 800d222:	7a13      	ldrb	r3, [r2, #8]
 800d224:	f043 0301 	orr.w	r3, r3, #1
 800d228:	7213      	strb	r3, [r2, #8]
                        break;
 800d22a:	e009      	b.n	800d240 <FreeRTOS_socket+0xe0>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET:
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800d22c:	69fa      	ldr	r2, [r7, #28]
 800d22e:	7a13      	ldrb	r3, [r2, #8]
 800d230:	f36f 0300 	bfc	r3, #0, #1
 800d234:	7213      	strb	r3, [r2, #8]
                        break;
 800d236:	e003      	b.n	800d240 <FreeRTOS_socket+0xe0>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default: /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
                    FreeRTOS_debug_printf( ( "FreeRTOS_socket: Undefined xDomain \n" ) );
 800d238:	481b      	ldr	r0, [pc, #108]	@ (800d2a8 <FreeRTOS_socket+0x148>)
 800d23a:	f013 f977 	bl	802052c <lUDPLoggingPrintf>

                    /* MISRA 16.4 Compliance */
                    break; /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
 800d23e:	bf00      	nop
            }

            /* Initialise the socket's members.  The semaphore will be created
             * if the socket is bound to an address, for now the pointer to the
             * semaphore is just set to NULL to show it has not been created. */
            if( xProtocolCpy == FREERTOS_IPPROTO_UDP )
 800d240:	6a3b      	ldr	r3, [r7, #32]
 800d242:	2b11      	cmp	r3, #17
 800d244:	d105      	bne.n	800d252 <FreeRTOS_socket+0xf2>
            {
                iptraceMEM_STATS_CREATE( tcpSOCKET_UDP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );

                vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800d246:	69fb      	ldr	r3, [r7, #28]
 800d248:	3354      	adds	r3, #84	@ 0x54
 800d24a:	4618      	mov	r0, r3
 800d24c:	f7f5 f8f8 	bl	8002440 <vListInitialise>
 800d250:	e007      	b.n	800d262 <FreeRTOS_socket+0x102>
                }
                #endif /* ipconfigUDP_MAX_RX_PACKETS > 0 */
            }

            #if ( ipconfigUSE_TCP == 1 )
                else if( xProtocolCpy == FREERTOS_IPPROTO_TCP ) /* LCOV_EXCL_BR_LINE Exclude else case because protocol is checked in prvDetermineSocketSize */
 800d252:	6a3b      	ldr	r3, [r7, #32]
 800d254:	2b06      	cmp	r3, #6
 800d256:	d104      	bne.n	800d262 <FreeRTOS_socket+0x102>
                {
                    prvInitialiseTCPFields( pxSocket, uxSocketSize );
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	4619      	mov	r1, r3
 800d25c:	69f8      	ldr	r0, [r7, #28]
 800d25e:	f7ff ff2d 	bl	800d0bc <prvInitialiseTCPFields>
                {
                    /* MISRA wants to see an unconditional else clause. */
                }
            #endif /* ipconfigUSE_TCP == 1 */

            vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800d262:	69fb      	ldr	r3, [r7, #28]
 800d264:	330c      	adds	r3, #12
 800d266:	4618      	mov	r0, r3
 800d268:	f7f5 f90a 	bl	8002480 <vListInitialiseItem>
            listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ( void * ) pxSocket );
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	69fa      	ldr	r2, [r7, #28]
 800d270:	619a      	str	r2, [r3, #24]

            pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 800d272:	69fb      	ldr	r3, [r7, #28]
 800d274:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d278:	621a      	str	r2, [r3, #32]
            pxSocket->xSendBlockTime = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 800d27a:	69fb      	ldr	r3, [r7, #28]
 800d27c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d280:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->ucSocketOptions = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800d282:	69fb      	ldr	r3, [r7, #28]
 800d284:	2202      	movs	r2, #2
 800d286:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            pxSocket->ucProtocol = ( uint8_t ) xProtocolCpy; /* protocol: UDP or TCP */
 800d28a:	6a3b      	ldr	r3, [r7, #32]
 800d28c:	b2da      	uxtb	r2, r3
 800d28e:	69fb      	ldr	r3, [r7, #28]
 800d290:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b

            xReturn = pxSocket;
 800d294:	69fb      	ldr	r3, [r7, #28]
 800d296:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 800d298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	3728      	adds	r7, #40	@ 0x28
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
 800d2a2:	bf00      	nop
 800d2a4:	08023f08 	.word	0x08023f08
 800d2a8:	08023f38 	.word	0x08023f38

0800d2ac <prvMakeSureSocketIsBound>:
 * @param[in] pxSocket The socket that must be bound to a port number.
 * @return Returns pdTRUE if the socket was already bound, or if the
 *         socket has been bound successfully.
 */
static BaseType_t prvMakeSureSocketIsBound( FreeRTOS_Socket_t * pxSocket )
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b084      	sub	sp, #16
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
    /* Check if this is a valid UDP socket, does not have to be bound yet. */
    BaseType_t xReturn = prvValidSocket( pxSocket, FREERTOS_IPPROTO_UDP, pdFALSE );
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	2111      	movs	r1, #17
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f7ff fe49 	bl	800cf50 <prvValidSocket>
 800d2be:	60f8      	str	r0, [r7, #12]

    if( ( xReturn == pdTRUE ) && ( !socketSOCKET_IS_BOUND( pxSocket ) ) )
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	2b01      	cmp	r3, #1
 800d2c4:	d10d      	bne.n	800d2e2 <prvMakeSureSocketIsBound+0x36>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	69db      	ldr	r3, [r3, #28]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d109      	bne.n	800d2e2 <prvMakeSureSocketIsBound+0x36>
    {
        /* The socket is valid but it is not yet bound. */
        if( FreeRTOS_bind( pxSocket, NULL, 0U ) != 0 )
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	2100      	movs	r1, #0
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f000 f934 	bl	800d540 <FreeRTOS_bind>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d001      	beq.n	800d2e2 <prvMakeSureSocketIsBound+0x36>
        {
            /* The socket was not yet bound, and binding it has failed. */
            xReturn = pdFALSE;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3710      	adds	r7, #16
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}

0800d2ec <prvSendUDPPacket>:
                                 size_t uxTotalDataLength,
                                 BaseType_t xFlags,
                                 const struct freertos_sockaddr * pxDestinationAddress,
                                 TickType_t xTicksToWait,
                                 size_t uxPayloadOffset )
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b088      	sub	sp, #32
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	60f8      	str	r0, [r7, #12]
 800d2f4:	60b9      	str	r1, [r7, #8]
 800d2f6:	607a      	str	r2, [r7, #4]
 800d2f8:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	61fb      	str	r3, [r7, #28]
    IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 800d2fe:	2304      	movs	r3, #4
 800d300:	753b      	strb	r3, [r7, #20]
 800d302:	2300      	movs	r3, #0
 800d304:	61bb      	str	r3, [r7, #24]

    switch( pxDestinationAddress->sin_family ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is checked before calling. */
 800d306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d308:	785b      	ldrb	r3, [r3, #1]
 800d30a:	2b02      	cmp	r3, #2
 800d30c:	d006      	beq.n	800d31c <prvSendUDPPacket+0x30>
 800d30e:	2b0a      	cmp	r3, #10
 800d310:	d109      	bne.n	800d326 <prvSendUDPPacket+0x3a>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                ( void ) xSend_UDP_Update_IPv6( pxNetworkBuffer, pxDestinationAddress );
 800d312:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d314:	68b8      	ldr	r0, [r7, #8]
 800d316:	f7fd f903 	bl	800a520 <xSend_UDP_Update_IPv6>
                break;
 800d31a:	e005      	b.n	800d328 <prvSendUDPPacket+0x3c>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                ( void ) xSend_UDP_Update_IPv4( pxNetworkBuffer, pxDestinationAddress );
 800d31c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d31e:	68b8      	ldr	r0, [r7, #8]
 800d320:	f7fc fd68 	bl	8009df4 <xSend_UDP_Update_IPv4>
                break;
 800d324:	e000      	b.n	800d328 <prvSendUDPPacket+0x3c>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:   /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
            /* MISRA 16.4 Compliance */
            break; /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800d326:	bf00      	nop
    }

    pxNetworkBuffer->xDataLength = uxTotalDataLength + uxPayloadOffset;
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d32c:	441a      	add	r2, r3
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	629a      	str	r2, [r3, #40]	@ 0x28
    pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 800d332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d334:	885a      	ldrh	r2, [r3, #2]
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	869a      	strh	r2, [r3, #52]	@ 0x34
    pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	68db      	ldr	r3, [r3, #12]
 800d33e:	b29a      	uxth	r2, r3
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	86da      	strh	r2, [r3, #54]	@ 0x36

    /* The socket options are passed to the IP layer in the
     * space that will eventually get used by the Ethernet header. */
    pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = pxSocket->ucSocketOptions;
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d348:	3306      	adds	r3, #6
 800d34a:	68fa      	ldr	r2, [r7, #12]
 800d34c:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 800d350:	701a      	strb	r2, [r3, #0]

    /* Tell the networking task that the packet needs sending. */
    xStackTxEvent.pvData = pxNetworkBuffer;
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	61bb      	str	r3, [r7, #24]

    /* Ask the IP-task to send this packet */
    if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 800d356:	f107 0314 	add.w	r3, r7, #20
 800d35a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d35c:	4618      	mov	r0, r3
 800d35e:	f7fb fa37 	bl	80087d0 <xSendEventStructToIPTask>
 800d362:	4603      	mov	r3, r0
 800d364:	2b01      	cmp	r3, #1
 800d366:	d10b      	bne.n	800d380 <prvSendUDPPacket+0x94>
    {
        /* The packet was successfully sent to the IP task. */
        lReturn = ( int32_t ) uxTotalDataLength;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleSent ) )
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d370:	2b00      	cmp	r3, #0
 800d372:	d00d      	beq.n	800d390 <prvSendUDPPacket+0xa4>
            {
                pxSocket->u.xUDP.pxHandleSent( ( FreeRTOS_Socket_t * ) pxSocket, uxTotalDataLength );
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d378:	6879      	ldr	r1, [r7, #4]
 800d37a:	68f8      	ldr	r0, [r7, #12]
 800d37c:	4798      	blx	r3
 800d37e:	e007      	b.n	800d390 <prvSendUDPPacket+0xa4>
    }
    else
    {
        /* If the buffer was allocated in this function, release
         * it. */
        if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	f003 0301 	and.w	r3, r3, #1
 800d386:	2b00      	cmp	r3, #0
 800d388:	d102      	bne.n	800d390 <prvSendUDPPacket+0xa4>
        {
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800d38a:	68b8      	ldr	r0, [r7, #8]
 800d38c:	f008 ffe4 	bl	8016358 <vReleaseNetworkBufferAndDescriptor>
        }

        iptraceSTACK_TX_EVENT_LOST( ipSTACK_TX_EVENT );
    }

    return lReturn;
 800d390:	69fb      	ldr	r3, [r7, #28]
}
 800d392:	4618      	mov	r0, r3
 800d394:	3720      	adds	r7, #32
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}

0800d39a <prvSendTo_ActualSend>:
                                     const void * pvBuffer,
                                     size_t uxTotalDataLength,
                                     BaseType_t xFlags,
                                     const struct freertos_sockaddr * pxDestinationAddress,
                                     size_t uxPayloadOffset )
{
 800d39a:	b580      	push	{r7, lr}
 800d39c:	b08e      	sub	sp, #56	@ 0x38
 800d39e:	af04      	add	r7, sp, #16
 800d3a0:	60f8      	str	r0, [r7, #12]
 800d3a2:	60b9      	str	r1, [r7, #8]
 800d3a4:	607a      	str	r2, [r7, #4]
 800d3a6:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	627b      	str	r3, [r7, #36]	@ 0x24
    TickType_t xTicksToWait = pxSocket->xSendBlockTime;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3b0:	61bb      	str	r3, [r7, #24]
    TimeOut_t xTimeOut;
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    if( ( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U ) ||
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	f003 0310 	and.w	r3, r3, #16
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d104      	bne.n	800d3c6 <prvSendTo_ActualSend+0x2c>
        ( xIsCallingFromIPTask() != pdFALSE ) )
 800d3bc:	f7fc f94a 	bl	8009654 <xIsCallingFromIPTask>
 800d3c0:	4603      	mov	r3, r0
    if( ( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U ) ||
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d001      	beq.n	800d3ca <prvSendTo_ActualSend+0x30>
    {
        /* The caller wants a non-blocking operation. When called by the IP-task,
         * the operation should always be non-blocking. */
        xTicksToWait = ( TickType_t ) 0U;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	61bb      	str	r3, [r7, #24]
    }

    if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	f003 0301 	and.w	r3, r3, #1
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d128      	bne.n	800d426 <prvSendTo_ActualSend+0x8c>
    {
        /* Zero copy is not set, so obtain a network buffer into
         * which the payload will be copied. */
        vTaskSetTimeOutState( &xTimeOut );
 800d3d4:	f107 0310 	add.w	r3, r7, #16
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f7f6 fdc1 	bl	8003f60 <vTaskSetTimeOutState>

        /* Block until a buffer becomes available, or until a
         * timeout has been reached */
        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPayloadOffset + uxTotalDataLength, xTicksToWait );
 800d3de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	4413      	add	r3, r2
 800d3e4:	69ba      	ldr	r2, [r7, #24]
 800d3e6:	4611      	mov	r1, r2
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f008 ff4d 	bl	8016288 <pxGetNetworkBufferWithDescriptor>
 800d3ee:	6238      	str	r0, [r7, #32]

        if( pxNetworkBuffer != NULL )
 800d3f0:	6a3b      	ldr	r3, [r7, #32]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d01b      	beq.n	800d42e <prvSendTo_ActualSend+0x94>
        {
            void * pvCopyDest = ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ uxPayloadOffset ] );
 800d3f6:	6a3b      	ldr	r3, [r7, #32]
 800d3f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d3fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3fc:	4413      	add	r3, r2
 800d3fe:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvBuffer, uxTotalDataLength );
 800d400:	687a      	ldr	r2, [r7, #4]
 800d402:	68b9      	ldr	r1, [r7, #8]
 800d404:	69f8      	ldr	r0, [r7, #28]
 800d406:	f013 faad 	bl	8020964 <memcpy>

            if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE )
 800d40a:	f107 0218 	add.w	r2, r7, #24
 800d40e:	f107 0310 	add.w	r3, r7, #16
 800d412:	4611      	mov	r1, r2
 800d414:	4618      	mov	r0, r3
 800d416:	f7f6 fddb 	bl	8003fd0 <xTaskCheckForTimeOut>
 800d41a:	4603      	mov	r3, r0
 800d41c:	2b01      	cmp	r3, #1
 800d41e:	d106      	bne.n	800d42e <prvSendTo_ActualSend+0x94>
            {
                /* The entire block time has been used up. */
                xTicksToWait = ( TickType_t ) 0;
 800d420:	2300      	movs	r3, #0
 800d422:	61bb      	str	r3, [r7, #24]
 800d424:	e003      	b.n	800d42e <prvSendTo_ActualSend+0x94>
    else
    {
        /* When zero copy is used, pvBuffer is a pointer to the
         * payload of a buffer that has already been obtained from the
         * stack.  Obtain the network buffer pointer from the buffer. */
        pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer );
 800d426:	68b8      	ldr	r0, [r7, #8]
 800d428:	f7fc f8cc 	bl	80095c4 <pxUDPPayloadBuffer_to_NetworkBuffer>
 800d42c:	6238      	str	r0, [r7, #32]
    }

    if( pxNetworkBuffer != NULL )
 800d42e:	6a3b      	ldr	r3, [r7, #32]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d010      	beq.n	800d456 <prvSendTo_ActualSend+0xbc>
    {
        pxNetworkBuffer->pxEndPoint = pxSocket->pxEndPoint;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d438:	6a3b      	ldr	r3, [r7, #32]
 800d43a:	631a      	str	r2, [r3, #48]	@ 0x30
        lReturn = prvSendUDPPacket( pxSocket,
 800d43c:	69bb      	ldr	r3, [r7, #24]
 800d43e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d440:	9202      	str	r2, [sp, #8]
 800d442:	9301      	str	r3, [sp, #4]
 800d444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d446:	9300      	str	r3, [sp, #0]
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	687a      	ldr	r2, [r7, #4]
 800d44c:	6a39      	ldr	r1, [r7, #32]
 800d44e:	68f8      	ldr	r0, [r7, #12]
 800d450:	f7ff ff4c 	bl	800d2ec <prvSendUDPPacket>
 800d454:	6278      	str	r0, [r7, #36]	@ 0x24
         * number of transmitted bytes, so the calling function knows
         * how  much data was actually sent. */
        iptraceNO_BUFFER_FOR_SENDTO();
    }

    return lReturn;
 800d456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3728      	adds	r7, #40	@ 0x28
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <FreeRTOS_sendto>:
                         const void * pvBuffer,
                         size_t uxTotalDataLength,
                         BaseType_t xFlags,
                         const struct freertos_sockaddr * pxDestinationAddress,
                         socklen_t xDestinationAddressLength )
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b090      	sub	sp, #64	@ 0x40
 800d464:	af02      	add	r7, sp, #8
 800d466:	60f8      	str	r0, [r7, #12]
 800d468:	60b9      	str	r1, [r7, #8]
 800d46a:	607a      	str	r2, [r7, #4]
 800d46c:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800d46e:	2300      	movs	r3, #0
 800d470:	637b      	str	r3, [r7, #52]	@ 0x34
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxMaxPayloadLength = 0;
 800d476:	2300      	movs	r3, #0
 800d478:	633b      	str	r3, [r7, #48]	@ 0x30
    size_t uxPayloadOffset = 0;
 800d47a:	2300      	movs	r3, #0
 800d47c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        struct freertos_sockaddr xTempDestinationAddress;

        if( ( pxDestinationAddress != NULL ) && ( pxDestinationAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxDestinationAddress->sin_family != FREERTOS_AF_INET ) )
 800d47e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d480:	2b00      	cmp	r3, #0
 800d482:	d013      	beq.n	800d4ac <FreeRTOS_sendto+0x4c>
 800d484:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d486:	785b      	ldrb	r3, [r3, #1]
 800d488:	2b0a      	cmp	r3, #10
 800d48a:	d00f      	beq.n	800d4ac <FreeRTOS_sendto+0x4c>
 800d48c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d48e:	785b      	ldrb	r3, [r3, #1]
 800d490:	2b02      	cmp	r3, #2
 800d492:	d00b      	beq.n	800d4ac <FreeRTOS_sendto+0x4c>
        {
            ( void ) memcpy( &xTempDestinationAddress, pxDestinationAddress, sizeof( struct freertos_sockaddr ) );
 800d494:	f107 0310 	add.w	r3, r7, #16
 800d498:	2218      	movs	r2, #24
 800d49a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d49c:	4618      	mov	r0, r3
 800d49e:	f013 fa61 	bl	8020964 <memcpy>

            /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
             *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
            xTempDestinationAddress.sin_family = FREERTOS_AF_INET;
 800d4a2:	2302      	movs	r3, #2
 800d4a4:	747b      	strb	r3, [r7, #17]
            pxDestinationAddress = &xTempDestinationAddress;
 800d4a6:	f107 0310 	add.w	r3, r7, #16
 800d4aa:	643b      	str	r3, [r7, #64]	@ 0x40

    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the
     * parameters. */
    ( void ) xDestinationAddressLength;
    configASSERT( pxDestinationAddress != NULL );
 800d4ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d104      	bne.n	800d4bc <FreeRTOS_sendto+0x5c>
 800d4b2:	f240 6143 	movw	r1, #1603	@ 0x643
 800d4b6:	4820      	ldr	r0, [pc, #128]	@ (800d538 <FreeRTOS_sendto+0xd8>)
 800d4b8:	f7f3 fe2e 	bl	8001118 <vAssertCalled>
    configASSERT( pvBuffer != NULL );
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d104      	bne.n	800d4cc <FreeRTOS_sendto+0x6c>
 800d4c2:	f240 6144 	movw	r1, #1604	@ 0x644
 800d4c6:	481c      	ldr	r0, [pc, #112]	@ (800d538 <FreeRTOS_sendto+0xd8>)
 800d4c8:	f7f3 fe26 	bl	8001118 <vAssertCalled>

    switch( pxDestinationAddress->sin_family )
 800d4cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4ce:	785b      	ldrb	r3, [r3, #1]
 800d4d0:	2b02      	cmp	r3, #2
 800d4d2:	d007      	beq.n	800d4e4 <FreeRTOS_sendto+0x84>
 800d4d4:	2b0a      	cmp	r3, #10
 800d4d6:	d10b      	bne.n	800d4f0 <FreeRTOS_sendto+0x90>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                uxMaxPayloadLength = ipconfigNETWORK_MTU - ( ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER );
 800d4d8:	f240 53ac 	movw	r3, #1452	@ 0x5ac
 800d4dc:	633b      	str	r3, [r7, #48]	@ 0x30
                uxPayloadOffset = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER;
 800d4de:	233e      	movs	r3, #62	@ 0x3e
 800d4e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800d4e2:	e00c      	b.n	800d4fe <FreeRTOS_sendto+0x9e>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                uxMaxPayloadLength = ipconfigNETWORK_MTU - ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 800d4e4:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 800d4e8:	633b      	str	r3, [r7, #48]	@ 0x30
                uxPayloadOffset = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER;
 800d4ea:	232a      	movs	r3, #42	@ 0x2a
 800d4ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800d4ee:	e006      	b.n	800d4fe <FreeRTOS_sendto+0x9e>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:
            FreeRTOS_debug_printf( ( "FreeRTOS_sendto: Undefined sin_family \n" ) );
 800d4f0:	4812      	ldr	r0, [pc, #72]	@ (800d53c <FreeRTOS_sendto+0xdc>)
 800d4f2:	f013 f81b 	bl	802052c <lUDPLoggingPrintf>
            lReturn = -pdFREERTOS_ERRNO_EINVAL;
 800d4f6:	f06f 0315 	mvn.w	r3, #21
 800d4fa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800d4fc:	bf00      	nop
    }

    if( lReturn == 0 )
 800d4fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d500:	2b00      	cmp	r3, #0
 800d502:	d114      	bne.n	800d52e <FreeRTOS_sendto+0xce>
    {
        if( uxTotalDataLength <= ( size_t ) uxMaxPayloadLength )
 800d504:	687a      	ldr	r2, [r7, #4]
 800d506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d508:	429a      	cmp	r2, r3
 800d50a:	d810      	bhi.n	800d52e <FreeRTOS_sendto+0xce>
        {
            /* If the socket is not already bound to an address, bind it now.
             * Passing NULL as the address parameter tells FreeRTOS_bind() to select
             * the address to bind to. */
            if( prvMakeSureSocketIsBound( pxSocket ) == pdTRUE )
 800d50c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d50e:	f7ff fecd 	bl	800d2ac <prvMakeSureSocketIsBound>
 800d512:	4603      	mov	r3, r0
 800d514:	2b01      	cmp	r3, #1
 800d516:	d10a      	bne.n	800d52e <FreeRTOS_sendto+0xce>
            {
                lReturn = prvSendTo_ActualSend( pxSocket, pvBuffer, uxTotalDataLength, xFlags, pxDestinationAddress, uxPayloadOffset );
 800d518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d51a:	9301      	str	r3, [sp, #4]
 800d51c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d51e:	9300      	str	r3, [sp, #0]
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	687a      	ldr	r2, [r7, #4]
 800d524:	68b9      	ldr	r1, [r7, #8]
 800d526:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d528:	f7ff ff37 	bl	800d39a <prvSendTo_ActualSend>
 800d52c:	6378      	str	r0, [r7, #52]	@ 0x34
            /* The data is longer than the available buffer space. */
            iptraceSENDTO_DATA_TOO_LONG();
        }
    }

    return lReturn;
 800d52e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
} /* Tested */
 800d530:	4618      	mov	r0, r3
 800d532:	3738      	adds	r7, #56	@ 0x38
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}
 800d538:	08023f08 	.word	0x08023f08
 800d53c:	08023fbc 	.word	0x08023fbc

0800d540 <FreeRTOS_bind>:
 *         If some error occurred, then a negative value is returned.
 */
BaseType_t FreeRTOS_bind( Socket_t xSocket,
                          struct freertos_sockaddr const * pxAddress,
                          socklen_t xAddressLength )
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b090      	sub	sp, #64	@ 0x40
 800d544:	af02      	add	r7, sp, #8
 800d546:	60f8      	str	r0, [r7, #12]
 800d548:	60b9      	str	r1, [r7, #8]
 800d54a:	607a      	str	r2, [r7, #4]
    IPStackEvent_t xBindEvent;
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	633b      	str	r3, [r7, #48]	@ 0x30
    BaseType_t xReturn = 0;
 800d550:	2300      	movs	r3, #0
 800d552:	637b      	str	r3, [r7, #52]	@ 0x34

    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        struct freertos_sockaddr xTempAddress;

        if( ( pxAddress != NULL ) && ( pxAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxAddress->sin_family != FREERTOS_AF_INET ) )
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d013      	beq.n	800d582 <FreeRTOS_bind+0x42>
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	785b      	ldrb	r3, [r3, #1]
 800d55e:	2b0a      	cmp	r3, #10
 800d560:	d00f      	beq.n	800d582 <FreeRTOS_bind+0x42>
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	785b      	ldrb	r3, [r3, #1]
 800d566:	2b02      	cmp	r3, #2
 800d568:	d00b      	beq.n	800d582 <FreeRTOS_bind+0x42>
        {
            ( void ) memcpy( &xTempAddress, pxAddress, sizeof( struct freertos_sockaddr ) );
 800d56a:	f107 0310 	add.w	r3, r7, #16
 800d56e:	2218      	movs	r2, #24
 800d570:	68b9      	ldr	r1, [r7, #8]
 800d572:	4618      	mov	r0, r3
 800d574:	f013 f9f6 	bl	8020964 <memcpy>

            /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
             *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
            xTempAddress.sin_family = FREERTOS_AF_INET;
 800d578:	2302      	movs	r3, #2
 800d57a:	747b      	strb	r3, [r7, #17]
            pxAddress = &xTempAddress;
 800d57c:	f107 0310 	add.w	r3, r7, #16
 800d580:	60bb      	str	r3, [r7, #8]
        }
    #endif /* ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 ) */

    ( void ) xAddressLength;

    configASSERT( xIsCallingFromIPTask() == pdFALSE );
 800d582:	f7fc f867 	bl	8009654 <xIsCallingFromIPTask>
 800d586:	4603      	mov	r3, r0
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d004      	beq.n	800d596 <FreeRTOS_bind+0x56>
 800d58c:	f240 61a1 	movw	r1, #1697	@ 0x6a1
 800d590:	484b      	ldr	r0, [pc, #300]	@ (800d6c0 <FreeRTOS_bind+0x180>)
 800d592:	f7f3 fdc1 	bl	8001118 <vAssertCalled>

    if( xSocketValid( pxSocket ) == pdFALSE )
 800d596:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d598:	f002 f804 	bl	800f5a4 <xSocketValid>
 800d59c:	4603      	mov	r3, r0
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d103      	bne.n	800d5aa <FreeRTOS_bind+0x6a>
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800d5a2:	f06f 0315 	mvn.w	r3, #21
 800d5a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5a8:	e084      	b.n	800d6b4 <FreeRTOS_bind+0x174>
    }

    /* Once a socket is bound to a port, it can not be bound to a different
     * port number */
    else if( socketSOCKET_IS_BOUND( pxSocket ) )
 800d5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ac:	69db      	ldr	r3, [r3, #28]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d009      	beq.n	800d5c6 <FreeRTOS_bind+0x86>
    {
        /* The socket is already bound. */
        FreeRTOS_debug_printf( ( "vSocketBind: Socket already bound to %d\n", pxSocket->usLocalPort ) );
 800d5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5b4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	4842      	ldr	r0, [pc, #264]	@ (800d6c4 <FreeRTOS_bind+0x184>)
 800d5ba:	f012 ffb7 	bl	802052c <lUDPLoggingPrintf>
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800d5be:	f06f 0315 	mvn.w	r3, #21
 800d5c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5c4:	e076      	b.n	800d6b4 <FreeRTOS_bind+0x174>
    }
    else
    {
        /* Prepare a messages to the IP-task in order to perform the binding.
         * The desired port number will be passed in usLocalPort. */
        xBindEvent.eEventType = eSocketBindEvent;
 800d5c6:	2309      	movs	r3, #9
 800d5c8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        xBindEvent.pvData = xSocket;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( pxAddress != NULL )
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d042      	beq.n	800d65c <FreeRTOS_bind+0x11c>
        {
            switch( pxAddress->sin_family )
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	785b      	ldrb	r3, [r3, #1]
 800d5da:	2b02      	cmp	r3, #2
 800d5dc:	d010      	beq.n	800d600 <FreeRTOS_bind+0xc0>
 800d5de:	2b0a      	cmp	r3, #10
 800d5e0:	d129      	bne.n	800d636 <FreeRTOS_bind+0xf6>
            {
                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        ( void ) memcpy( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800d5e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5e4:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	3308      	adds	r3, #8
 800d5ec:	2210      	movs	r2, #16
 800d5ee:	4619      	mov	r1, r3
 800d5f0:	f013 f9b8 	bl	8020964 <memcpy>
                        pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800d5f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5f6:	7a13      	ldrb	r3, [r2, #8]
 800d5f8:	f043 0301 	orr.w	r3, r3, #1
 800d5fc:	7213      	strb	r3, [r2, #8]
                        break;
 800d5fe:	e01e      	b.n	800d63e <FreeRTOS_bind+0xfe>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                        pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 );
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	689b      	ldr	r3, [r3, #8]
 800d604:	061a      	lsls	r2, r3, #24
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	689b      	ldr	r3, [r3, #8]
 800d60a:	021b      	lsls	r3, r3, #8
 800d60c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d610:	431a      	orrs	r2, r3
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	689b      	ldr	r3, [r3, #8]
 800d616:	0a1b      	lsrs	r3, r3, #8
 800d618:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d61c:	431a      	orrs	r2, r3
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	689b      	ldr	r3, [r3, #8]
 800d622:	0e1b      	lsrs	r3, r3, #24
 800d624:	431a      	orrs	r2, r3
 800d626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d628:	629a      	str	r2, [r3, #40]	@ 0x28
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800d62a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d62c:	7a13      	ldrb	r3, [r2, #8]
 800d62e:	f36f 0300 	bfc	r3, #0, #1
 800d632:	7213      	strb	r3, [r2, #8]
                        break;
 800d634:	e003      	b.n	800d63e <FreeRTOS_bind+0xfe>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    FreeRTOS_debug_printf( ( "FreeRTOS_bind: Undefined sin_family \n" ) );
 800d636:	4824      	ldr	r0, [pc, #144]	@ (800d6c8 <FreeRTOS_bind+0x188>)
 800d638:	f012 ff78 	bl	802052c <lUDPLoggingPrintf>
                    break;
 800d63c:	bf00      	nop
            }

            pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	885b      	ldrh	r3, [r3, #2]
 800d642:	021b      	lsls	r3, r3, #8
 800d644:	b21a      	sxth	r2, r3
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	885b      	ldrh	r3, [r3, #2]
 800d64a:	0a1b      	lsrs	r3, r3, #8
 800d64c:	b29b      	uxth	r3, r3
 800d64e:	b21b      	sxth	r3, r3
 800d650:	4313      	orrs	r3, r2
 800d652:	b21b      	sxth	r3, r3
 800d654:	b29a      	uxth	r2, r3
 800d656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d658:	871a      	strh	r2, [r3, #56]	@ 0x38
 800d65a:	e009      	b.n	800d670 <FreeRTOS_bind+0x130>
        }
        else
        {
            /* Caller wants to bind to a random port number. */
            pxSocket->usLocalPort = 0U;
 800d65c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d65e:	2200      	movs	r2, #0
 800d660:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800d662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d664:	3328      	adds	r3, #40	@ 0x28
 800d666:	2210      	movs	r2, #16
 800d668:	2100      	movs	r1, #0
 800d66a:	4618      	mov	r0, r3
 800d66c:	f013 fa87 	bl	8020b7e <memset>
        }

        /* portMAX_DELAY is used as a the time-out parameter, as binding *must*
         * succeed before the socket can be used.  _RB_ The use of an infinite
         * block time needs be changed as it could result in the task hanging. */
        if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800d670:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d674:	f04f 31ff 	mov.w	r1, #4294967295
 800d678:	4618      	mov	r0, r3
 800d67a:	f7fb f8a9 	bl	80087d0 <xSendEventStructToIPTask>
 800d67e:	4603      	mov	r3, r0
 800d680:	2b00      	cmp	r3, #0
 800d682:	d106      	bne.n	800d692 <FreeRTOS_bind+0x152>
        {
            /* Failed to wake-up the IP-task, no use to wait for it */
            FreeRTOS_debug_printf( ( "FreeRTOS_bind: send event failed\n" ) );
 800d684:	4811      	ldr	r0, [pc, #68]	@ (800d6cc <FreeRTOS_bind+0x18c>)
 800d686:	f012 ff51 	bl	802052c <lUDPLoggingPrintf>
            xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 800d68a:	f06f 038b 	mvn.w	r3, #139	@ 0x8b
 800d68e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d690:	e010      	b.n	800d6b4 <FreeRTOS_bind+0x174>
        }
        else
        {
            /* The IP-task will set the 'eSOCKET_BOUND' bit when it has done its
             * job. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
 800d692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d694:	6858      	ldr	r0, [r3, #4]
 800d696:	f04f 33ff 	mov.w	r3, #4294967295
 800d69a:	9300      	str	r3, [sp, #0]
 800d69c:	2300      	movs	r3, #0
 800d69e:	2201      	movs	r2, #1
 800d6a0:	2110      	movs	r1, #16
 800d6a2:	f7f4 fd0f 	bl	80020c4 <xEventGroupWaitBits>

            if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800d6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6a8:	69db      	ldr	r3, [r3, #28]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d102      	bne.n	800d6b4 <FreeRTOS_bind+0x174>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800d6ae:	f06f 0315 	mvn.w	r3, #21
 800d6b2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
        }
    }

    return xReturn;
 800d6b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3738      	adds	r7, #56	@ 0x38
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}
 800d6be:	bf00      	nop
 800d6c0:	08023f08 	.word	0x08023f08
 800d6c4:	08023fe4 	.word	0x08023fe4
 800d6c8:	08024010 	.word	0x08024010
 800d6cc:	08024038 	.word	0x08024038

0800d6d0 <prvSocketBindAdd>:
 */
static BaseType_t prvSocketBindAdd( FreeRTOS_Socket_t * pxSocket,
                                    const struct freertos_sockaddr * pxAddress,
                                    List_t * pxSocketList,
                                    BaseType_t xInternal )
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b086      	sub	sp, #24
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	60f8      	str	r0, [r7, #12]
 800d6d8:	60b9      	str	r1, [r7, #8]
 800d6da:	607a      	str	r2, [r7, #4]
 800d6dc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	617b      	str	r3, [r7, #20]

    /* Check to ensure the port is not already in use.  If the bind is
     * called internally, a port MAY be used by more than one socket. */
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d004      	beq.n	800d6f2 <prvSocketBindAdd+0x22>
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800d6ee:	2b06      	cmp	r3, #6
 800d6f0:	d024      	beq.n	800d73c <prvSocketBindAdd+0x6c>
        ( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 800d6f2:	68bb      	ldr	r3, [r7, #8]
 800d6f4:	885b      	ldrh	r3, [r3, #2]
 800d6f6:	4619      	mov	r1, r3
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f000 fdf1 	bl	800e2e0 <pxListFindListItemWithValue>
 800d6fe:	4603      	mov	r3, r0
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800d700:	2b00      	cmp	r3, #0
 800d702:	d01b      	beq.n	800d73c <prvSocketBindAdd+0x6c>
    {
        FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800d70a:	2b06      	cmp	r3, #6
 800d70c:	d101      	bne.n	800d712 <prvSocketBindAdd+0x42>
 800d70e:	493e      	ldr	r1, [pc, #248]	@ (800d808 <prvSocketBindAdd+0x138>)
 800d710:	e000      	b.n	800d714 <prvSocketBindAdd+0x44>
 800d712:	493e      	ldr	r1, [pc, #248]	@ (800d80c <prvSocketBindAdd+0x13c>)
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	885b      	ldrh	r3, [r3, #2]
 800d718:	021b      	lsls	r3, r3, #8
 800d71a:	b21a      	sxth	r2, r3
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	885b      	ldrh	r3, [r3, #2]
 800d720:	0a1b      	lsrs	r3, r3, #8
 800d722:	b29b      	uxth	r3, r3
 800d724:	b21b      	sxth	r3, r3
 800d726:	4313      	orrs	r3, r2
 800d728:	b21b      	sxth	r3, r3
 800d72a:	b29b      	uxth	r3, r3
 800d72c:	461a      	mov	r2, r3
 800d72e:	4838      	ldr	r0, [pc, #224]	@ (800d810 <prvSocketBindAdd+0x140>)
 800d730:	f012 fefc 	bl	802052c <lUDPLoggingPrintf>
                                 ( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) ? "TC" : "UD",
                                 FreeRTOS_ntohs( pxAddress->sin_port ) ) );
        xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 800d734:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 800d738:	617b      	str	r3, [r7, #20]
 800d73a:	e060      	b.n	800d7fe <prvSocketBindAdd+0x12e>
    }
    else
    {
        /* Allocate the port number to the socket.
         * This macro will set 'xBoundSocketListItem->xItemValue' */
        socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	885b      	ldrh	r3, [r3, #2]
 800d740:	461a      	mov	r2, r3
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	60da      	str	r2, [r3, #12]

        /* And also store it in a socket field 'usLocalPort' in host-byte-order,
         * mostly used for logging and debugging purposes */
        pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	885b      	ldrh	r3, [r3, #2]
 800d74a:	021b      	lsls	r3, r3, #8
 800d74c:	b21a      	sxth	r2, r3
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	885b      	ldrh	r3, [r3, #2]
 800d752:	0a1b      	lsrs	r3, r3, #8
 800d754:	b29b      	uxth	r3, r3
 800d756:	b21b      	sxth	r3, r3
 800d758:	4313      	orrs	r3, r2
 800d75a:	b21b      	sxth	r3, r3
 800d75c:	b29a      	uxth	r2, r3
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	871a      	strh	r2, [r3, #56]	@ 0x38

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxAddress->sin_family == ( uint8_t ) FREERTOS_AF_INET6 )
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	785b      	ldrb	r3, [r3, #1]
 800d766:	2b0a      	cmp	r3, #10
 800d768:	d109      	bne.n	800d77e <prvSocketBindAdd+0xae>
            {
                ( void ) memcpy( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	3308      	adds	r3, #8
 800d774:	2210      	movs	r2, #16
 800d776:	4619      	mov	r1, r3
 800d778:	f013 f8f4 	bl	8020964 <memcpy>
 800d77c:	e00c      	b.n	800d798 <prvSocketBindAdd+0xc8>
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                if( pxAddress->sin_address.ulIP_IPv4 != FREERTOS_INADDR_ANY )
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	689b      	ldr	r3, [r3, #8]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d008      	beq.n	800d798 <prvSocketBindAdd+0xc8>
                {
                    pxSocket->pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( pxAddress->sin_address.ulIP_IPv4, 7 );
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	689b      	ldr	r3, [r3, #8]
 800d78a:	2107      	movs	r1, #7
 800d78c:	4618      	mov	r0, r3
 800d78e:	f7fe ffb7 	bl	800c700 <FreeRTOS_FindEndPointOnIP_IPv4>
 800d792:	4602      	mov	r2, r0
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	64da      	str	r2, [r3, #76]	@ 0x4c
                /* Place holder, do nothing, MISRA compliance */
            }
        }

        #if ( ipconfigUSE_IPv4 != 0 )
            if( pxSocket->pxEndPoint != NULL )
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d019      	beq.n	800d7d4 <prvSocketBindAdd+0x104>
            {
                pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxSocket->pxEndPoint->ipv4_settings.ulIPAddress );
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	061a      	lsls	r2, r3, #24
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	021b      	lsls	r3, r3, #8
 800d7b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d7b4:	431a      	orrs	r2, r3
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	0a1b      	lsrs	r3, r3, #8
 800d7be:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d7c2:	431a      	orrs	r2, r3
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	0e1b      	lsrs	r3, r3, #24
 800d7cc:	431a      	orrs	r2, r3
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	629a      	str	r2, [r3, #40]	@ 0x28
 800d7d2:	e00a      	b.n	800d7ea <prvSocketBindAdd+0x11a>
            }
            else
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxAddress->sin_family == ( uint8_t ) FREERTOS_AF_INET6 )
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	785b      	ldrb	r3, [r3, #1]
 800d7d8:	2b0a      	cmp	r3, #10
 800d7da:	d006      	beq.n	800d7ea <prvSocketBindAdd+0x11a>
                /* Socket address was set, do nothing for IPv6. */
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	3328      	adds	r3, #40	@ 0x28
 800d7e0:	2210      	movs	r2, #16
 800d7e2:	2100      	movs	r1, #0
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f013 f9ca 	bl	8020b7e <memset>
            /* If the network driver can iterate through 'xBoundUDPSocketsList',
             * by calling xPortHasUDPSocket() then the IP-task must temporarily
             * suspend the scheduler to keep the list in a consistent state. */
            #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
            {
                vTaskSuspendAll();
 800d7ea:	f7f5 fefd 	bl	80035e8 <vTaskSuspendAll>
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

            /* Add the socket to 'xBoundUDPSocketsList' or 'xBoundTCPSocketsList' */
            vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	330c      	adds	r3, #12
 800d7f2:	4619      	mov	r1, r3
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f7f4 fe50 	bl	800249a <vListInsertEnd>

            #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
            {
                ( void ) xTaskResumeAll();
 800d7fa:	f7f5 ff03 	bl	8003604 <xTaskResumeAll>
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
        }
    }

    return xReturn;
 800d7fe:	697b      	ldr	r3, [r7, #20]
}
 800d800:	4618      	mov	r0, r3
 800d802:	3718      	adds	r7, #24
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}
 800d808:	0802405c 	.word	0x0802405c
 800d80c:	08024060 	.word	0x08024060
 800d810:	08024064 	.word	0x08024064

0800d814 <vSocketBind>:
 */
BaseType_t vSocketBind( FreeRTOS_Socket_t * pxSocket,
                        struct freertos_sockaddr * pxBindAddress,
                        size_t uxAddressLength,
                        BaseType_t xInternal )
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b08e      	sub	sp, #56	@ 0x38
 800d818:	af00      	add	r7, sp, #0
 800d81a:	60f8      	str	r0, [r7, #12]
 800d81c:	60b9      	str	r1, [r7, #8]
 800d81e:	607a      	str	r2, [r7, #4]
 800d820:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 800d822:	2300      	movs	r3, #0
 800d824:	637b      	str	r3, [r7, #52]	@ 0x34
    List_t * pxSocketList;
    struct freertos_sockaddr * pxAddress = pxBindAddress;
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
        struct freertos_sockaddr xAddress;
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */

    configASSERT( xSocketValid( pxSocket ) == pdTRUE );
 800d82a:	68f8      	ldr	r0, [r7, #12]
 800d82c:	f001 feba 	bl	800f5a4 <xSocketValid>
 800d830:	4603      	mov	r3, r0
 800d832:	2b01      	cmp	r3, #1
 800d834:	d004      	beq.n	800d840 <vSocketBind+0x2c>
 800d836:	f240 716f 	movw	r1, #1903	@ 0x76f
 800d83a:	4828      	ldr	r0, [pc, #160]	@ (800d8dc <vSocketBind+0xc8>)
 800d83c:	f7f3 fc6c 	bl	8001118 <vAssertCalled>

    #if ( ipconfigUSE_TCP == 1 )
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800d846:	2b06      	cmp	r3, #6
 800d848:	d102      	bne.n	800d850 <vSocketBind+0x3c>
        {
            pxSocketList = &xBoundTCPSocketsList;
 800d84a:	4b25      	ldr	r3, [pc, #148]	@ (800d8e0 <vSocketBind+0xcc>)
 800d84c:	633b      	str	r3, [r7, #48]	@ 0x30
 800d84e:	e001      	b.n	800d854 <vSocketBind+0x40>
        }
        else
    #endif /* ipconfigUSE_TCP == 1 */
    {
        pxSocketList = &xBoundUDPSocketsList;
 800d850:	4b24      	ldr	r3, [pc, #144]	@ (800d8e4 <vSocketBind+0xd0>)
 800d852:	633b      	str	r3, [r7, #48]	@ 0x30
        /* pxAddress will be NULL if sendto() was called on a socket without the
         * socket being bound to an address. In this case, automatically allocate
         * an address to the socket.  There is a small chance that the allocated
         * port will already be in use - if that is the case, then the check below
         * [pxListFindListItemWithValue()] will result in an error being returned. */
        if( pxAddress == NULL )
 800d854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d856:	2b00      	cmp	r3, #0
 800d858:	d115      	bne.n	800d886 <vSocketBind+0x72>
        {
            pxAddress = &xAddress;
 800d85a:	f107 0314 	add.w	r3, r7, #20
 800d85e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Clear the address: */
            ( void ) memset( pxAddress, 0, sizeof( struct freertos_sockaddr ) );
 800d860:	2218      	movs	r2, #24
 800d862:	2100      	movs	r1, #0
 800d864:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d866:	f013 f98a 	bl	8020b7e <memset>

            if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	7a1b      	ldrb	r3, [r3, #8]
 800d86e:	f003 0301 	and.w	r3, r3, #1
 800d872:	b2db      	uxtb	r3, r3
 800d874:	2b00      	cmp	r3, #0
 800d876:	d003      	beq.n	800d880 <vSocketBind+0x6c>
            {
                pxAddress->sin_family = FREERTOS_AF_INET6;
 800d878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d87a:	220a      	movs	r2, #10
 800d87c:	705a      	strb	r2, [r3, #1]
 800d87e:	e002      	b.n	800d886 <vSocketBind+0x72>
            }
            else
            {
                pxAddress->sin_family = FREERTOS_AF_INET;
 800d880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d882:	2202      	movs	r2, #2
 800d884:	705a      	strb	r2, [r3, #1]
    }
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */

    /* Sockets must be bound before calling FreeRTOS_sendto() if
    * ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is not set to 1. */
    configASSERT( pxAddress != NULL );
 800d886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d104      	bne.n	800d896 <vSocketBind+0x82>
 800d88c:	f240 719b 	movw	r1, #1947	@ 0x79b
 800d890:	4812      	ldr	r0, [pc, #72]	@ (800d8dc <vSocketBind+0xc8>)
 800d892:	f7f3 fc41 	bl	8001118 <vAssertCalled>
    #endif
    {
        /* Add a do-while loop to facilitate use of 'break' statements. */
        do
        {
            if( pxAddress->sin_port == 0U )
 800d896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d898:	885b      	ldrh	r3, [r3, #2]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d111      	bne.n	800d8c2 <vSocketBind+0xae>
            {
                pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f000 fcc3 	bl	800e230 <prvGetPrivatePortNumber>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	461a      	mov	r2, r3
 800d8ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8b0:	805a      	strh	r2, [r3, #2]

                if( pxAddress->sin_port == ( uint16_t ) 0U )
 800d8b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8b4:	885b      	ldrh	r3, [r3, #2]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d103      	bne.n	800d8c2 <vSocketBind+0xae>
                {
                    xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 800d8ba:	f06f 037c 	mvn.w	r3, #124	@ 0x7c
 800d8be:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800d8c0:	e006      	b.n	800d8d0 <vSocketBind+0xbc>

            /* If vSocketBind() is called from the API FreeRTOS_bind() it has been
             * confirmed that the socket was not yet bound to a port.  If it is called
             * from the IP-task, no such check is necessary. */

            xReturn = prvSocketBindAdd( pxSocket, pxAddress, pxSocketList, xInternal );
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d8c8:	68f8      	ldr	r0, [r7, #12]
 800d8ca:	f7ff ff01 	bl	800d6d0 <prvSocketBindAdd>
 800d8ce:	6378      	str	r0, [r7, #52]	@ 0x34
    if( xReturn != 0 )
    {
        iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
    }

    return xReturn;
 800d8d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
} /* Tested */
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3738      	adds	r7, #56	@ 0x38
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}
 800d8da:	bf00      	nop
 800d8dc:	08023f08 	.word	0x08023f08
 800d8e0:	200012b0 	.word	0x200012b0
 800d8e4:	2000129c 	.word	0x2000129c

0800d8e8 <FreeRTOS_closesocket>:
 *         1: If the socket was successfully closed (read the brief above).
 *        -1: If the socket was valid but could not be closed because the message
 *            could not be delivered to the IP-task. Try again later.
 */
BaseType_t FreeRTOS_closesocket( Socket_t xSocket )
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b086      	sub	sp, #24
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
    BaseType_t xResult;

    #if ( ipconfigUSE_CALLBACKS == 1 )
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	613b      	str	r3, [r7, #16]
    #endif /* ipconfigUSE_CALLBACKS == 1 */
    IPStackEvent_t xCloseEvent;
    xCloseEvent.eEventType = eSocketCloseEvent;
 800d8f4:	230a      	movs	r3, #10
 800d8f6:	723b      	strb	r3, [r7, #8]
    xCloseEvent.pvData = xSocket;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	60fb      	str	r3, [r7, #12]

    if( xSocketValid( xSocket ) == pdFALSE )
 800d8fc:	6878      	ldr	r0, [r7, #4]
 800d8fe:	f001 fe51 	bl	800f5a4 <xSocketValid>
 800d902:	4603      	mov	r3, r0
 800d904:	2b00      	cmp	r3, #0
 800d906:	d102      	bne.n	800d90e <FreeRTOS_closesocket+0x26>
    {
        xResult = 0;
 800d908:	2300      	movs	r3, #0
 800d90a:	617b      	str	r3, [r7, #20]
 800d90c:	e02f      	b.n	800d96e <FreeRTOS_closesocket+0x86>
    else
    {
        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            #if ( ipconfigUSE_TCP == 1 )
                if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800d914:	2b06      	cmp	r3, #6
 800d916:	d10c      	bne.n	800d932 <FreeRTOS_closesocket+0x4a>
                {
                    /* Make sure that IP-task won't call the user callback's anymore */
                    pxSocket->u.xTCP.pxHandleConnected = NULL;
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	2200      	movs	r2, #0
 800d91c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                    pxSocket->u.xTCP.pxHandleReceive = NULL;
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	2200      	movs	r2, #0
 800d924:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                    pxSocket->u.xTCP.pxHandleSent = NULL;
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	2200      	movs	r2, #0
 800d92c:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 800d930:	e00a      	b.n	800d948 <FreeRTOS_closesocket+0x60>
                }
                else
            #endif /* ipconfigUSE_TCP == 1 */

            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800d938:	2b11      	cmp	r3, #17
 800d93a:	d105      	bne.n	800d948 <FreeRTOS_closesocket+0x60>
            {
                /* Clear the two UDP handlers. */
                pxSocket->u.xUDP.pxHandleReceive = NULL;
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	2200      	movs	r2, #0
 800d940:	669a      	str	r2, [r3, #104]	@ 0x68
                pxSocket->u.xUDP.pxHandleSent = NULL;
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	2200      	movs	r2, #0
 800d946:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* The timeout value below is only used if this function is called from
         * a user task. If this function is called by the IP-task, it may fail
         * to close the socket when the event queue is full.
         * This should only happen in case of a user call-back. */
        if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800d948:	f107 0308 	add.w	r3, r7, #8
 800d94c:	f04f 31ff 	mov.w	r1, #4294967295
 800d950:	4618      	mov	r0, r3
 800d952:	f7fa ff3d 	bl	80087d0 <xSendEventStructToIPTask>
 800d956:	4603      	mov	r3, r0
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d106      	bne.n	800d96a <FreeRTOS_closesocket+0x82>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket: failed\n" ) );
 800d95c:	4806      	ldr	r0, [pc, #24]	@ (800d978 <FreeRTOS_closesocket+0x90>)
 800d95e:	f012 fde5 	bl	802052c <lUDPLoggingPrintf>
            xResult = -1;
 800d962:	f04f 33ff 	mov.w	r3, #4294967295
 800d966:	617b      	str	r3, [r7, #20]
 800d968:	e001      	b.n	800d96e <FreeRTOS_closesocket+0x86>
        }
        else
        {
            xResult = 1;
 800d96a:	2301      	movs	r3, #1
 800d96c:	617b      	str	r3, [r7, #20]
        }
    }

    return xResult;
 800d96e:	697b      	ldr	r3, [r7, #20]
}
 800d970:	4618      	mov	r0, r3
 800d972:	3718      	adds	r7, #24
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}
 800d978:	08024088 	.word	0x08024088

0800d97c <vSocketClose>:
 */
/* MISRA Ref 17.2.1 [Sockets and limited recursion] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
/* coverity[misra_c_2012_rule_17_2_violation] */
void * vSocketClose( FreeRTOS_Socket_t * pxSocket )
{
 800d97c:	b590      	push	{r4, r7, lr}
 800d97e:	b085      	sub	sp, #20
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* For TCP: clean up a little more. */
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800d98a:	2b06      	cmp	r3, #6
 800d98c:	d129      	bne.n	800d9e2 <vSocketClose+0x66>
        {
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d994:	2b00      	cmp	r3, #0
 800d996:	d005      	beq.n	800d9a4 <vSocketClose+0x28>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f008 fcda 	bl	8016358 <vReleaseNetworkBufferAndDescriptor>
                }

                /* Free the resources which were claimed by the tcpWin member */
                vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f006 fee6 	bl	801477c <vTCPWindowDestroy>
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* Free the input and output streams */
            if( pxSocket->u.xTCP.rxStream != NULL )
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d005      	beq.n	800d9c6 <vSocketClose+0x4a>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.rxStream );
                vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f7f7 fe63 	bl	800568c <vPortFree>
            }

            if( pxSocket->u.xTCP.txStream != NULL )
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d005      	beq.n	800d9dc <vSocketClose+0x60>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.txStream );
                vPortFreeLarge( pxSocket->u.xTCP.txStream );
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f7f7 fe58 	bl	800568c <vPortFree>
            }

            /* In case this is a child socket, make sure the child-count of the
             * parent socket is decreased. */
            prvTCPSetSocketCount( pxSocket );
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f000 f8bd 	bl	800db5c <prvTCPSetSocketCount>
    }
    #endif /* ipconfigUSE_TCP == 1 */

    /* Socket must be unbound first, to ensure no more packets are queued on
     * it. */
    if( socketSOCKET_IS_BOUND( pxSocket ) )
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	69db      	ldr	r3, [r3, #28]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d008      	beq.n	800d9fc <vSocketClose+0x80>
        /* If the network driver can iterate through 'xBoundUDPSocketsList',
         * by calling xPortHasUDPSocket(), then the IP-task must temporarily
         * suspend the scheduler to keep the list in a consistent state. */
        #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
        {
            vTaskSuspendAll();
 800d9ea:	f7f5 fdfd 	bl	80035e8 <vTaskSuspendAll>
        }
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

        ( void ) uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	330c      	adds	r3, #12
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f7f4 fdae 	bl	8002554 <uxListRemove>

        #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
        {
            ( void ) xTaskResumeAll();
 800d9f8:	f7f5 fe04 	bl	8003604 <xTaskResumeAll>
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
    }

    /* Now the socket is not bound the list of waiting packets can be
     * drained. */
    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800da02:	2b11      	cmp	r3, #17
 800da04:	d10f      	bne.n	800da26 <vSocketClose+0xaa>
    {
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800da06:	e00a      	b.n	800da1e <vSocketClose+0xa2>
        {
            pxNetworkBuffer = ( ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800da0c:	68db      	ldr	r3, [r3, #12]
 800da0e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	4618      	mov	r0, r3
 800da14:	f7f4 fd9e 	bl	8002554 <uxListRemove>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800da18:	68f8      	ldr	r0, [r7, #12]
 800da1a:	f008 fc9d 	bl	8016358 <vReleaseNetworkBufferAndDescriptor>
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da22:	2b00      	cmp	r3, #0
 800da24:	d1f0      	bne.n	800da08 <vSocketClose+0x8c>
        }
    }

    if( pxSocket->xEventGroup != NULL )
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	685b      	ldr	r3, [r3, #4]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d004      	beq.n	800da38 <vSocketClose+0xbc>
    {
        vEventGroupDelete( pxSocket->xEventGroup );
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	4618      	mov	r0, r3
 800da34:	f7f4 fcac 	bl	8002390 <vEventGroupDelete>
    }

    #if ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 )
    {
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800da3e:	2b06      	cmp	r3, #6
 800da40:	d10c      	bne.n	800da5c <vSocketClose+0xe0>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket[%s]: buffers %lu socks %lu\n",
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f000 f816 	bl	800da74 <prvSocketProps>
 800da48:	4604      	mov	r4, r0
 800da4a:	f008 fcd7 	bl	80163fc <uxGetNumberOfFreeNetworkBuffers>
 800da4e:	4602      	mov	r2, r0
 800da50:	4b06      	ldr	r3, [pc, #24]	@ (800da6c <vSocketClose+0xf0>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	4621      	mov	r1, r4
 800da56:	4806      	ldr	r0, [pc, #24]	@ (800da70 <vSocketClose+0xf4>)
 800da58:	f012 fd68 	bl	802052c <lUDPLoggingPrintf>
    }
    #endif /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

    /* And finally, after all resources have been freed, free the socket space */
    iptraceMEM_STATS_DELETE( pxSocket );
    vPortFreeSocket( pxSocket );
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f7f7 fe15 	bl	800568c <vPortFree>

    return NULL;
 800da62:	2300      	movs	r3, #0
} /* Tested */
 800da64:	4618      	mov	r0, r3
 800da66:	3714      	adds	r7, #20
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd90      	pop	{r4, r7, pc}
 800da6c:	200012b0 	.word	0x200012b0
 800da70:	080240a8 	.word	0x080240a8

0800da74 <prvSocketProps>:
/*-----------------------------------------------------------*/

#if ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )
    const char * prvSocketProps( FreeRTOS_Socket_t * pxSocket )
    {
 800da74:	b580      	push	{r7, lr}
 800da76:	b086      	sub	sp, #24
 800da78:	af04      	add	r7, sp, #16
 800da7a:	6078      	str	r0, [r7, #4]
        /* For debugging purposes only: show some properties of a socket:
         * IP-addresses and port numbers. */
        #if ipconfigUSE_TCP == 1
            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800da82:	2b06      	cmp	r3, #6
 800da84:	d132      	bne.n	800daec <prvSocketProps+0x78>
            {
                switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	7a1b      	ldrb	r3, [r3, #8]
 800da8a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800da8e:	b2db      	uxtb	r3, r3
 800da90:	2b00      	cmp	r3, #0
 800da92:	d002      	beq.n	800da9a <prvSocketProps+0x26>
 800da94:	2b01      	cmp	r3, #1
 800da96:	d014      	beq.n	800dac2 <prvSocketProps+0x4e>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        break;
 800da98:	e050      	b.n	800db3c <prvSocketProps+0xc8>
                                               ( unsigned ) pxSocket->xLocalAddress.ulIP_IPv4,
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
                                               pxSocket->usLocalPort,
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%xip port %u to %xip port %u",
 800daa2:	4618      	mov	r0, r3
                                               ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                                               pxSocket->u.xTCP.usRemotePort );
 800daa8:	687a      	ldr	r2, [r7, #4]
 800daaa:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%xip port %u to %xip port %u",
 800daae:	9202      	str	r2, [sp, #8]
 800dab0:	9301      	str	r3, [sp, #4]
 800dab2:	9000      	str	r0, [sp, #0]
 800dab4:	460b      	mov	r3, r1
 800dab6:	4a24      	ldr	r2, [pc, #144]	@ (800db48 <prvSocketProps+0xd4>)
 800dab8:	215c      	movs	r1, #92	@ 0x5c
 800daba:	4824      	ldr	r0, [pc, #144]	@ (800db4c <prvSocketProps+0xd8>)
 800dabc:	f013 fd62 	bl	8021584 <snprintf>
                            break;
 800dac0:	e03c      	b.n	800db3c <prvSocketProps+0xc8>
                                               ( void * ) pxSocket->xLocalAddress.xIP_IPv6.ucBytes,
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f103 0128 	add.w	r1, r3, #40	@ 0x28
                                               pxSocket->usLocalPort,
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%pip port %u to %pip port %u",
 800dacc:	4618      	mov	r0, r3
                                               ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	3354      	adds	r3, #84	@ 0x54
                                               pxSocket->u.xTCP.usRemotePort );
 800dad2:	687a      	ldr	r2, [r7, #4]
 800dad4:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%pip port %u to %pip port %u",
 800dad8:	9202      	str	r2, [sp, #8]
 800dada:	9301      	str	r3, [sp, #4]
 800dadc:	9000      	str	r0, [sp, #0]
 800dade:	460b      	mov	r3, r1
 800dae0:	4a1b      	ldr	r2, [pc, #108]	@ (800db50 <prvSocketProps+0xdc>)
 800dae2:	215c      	movs	r1, #92	@ 0x5c
 800dae4:	4819      	ldr	r0, [pc, #100]	@ (800db4c <prvSocketProps+0xd8>)
 800dae6:	f013 fd4d 	bl	8021584 <snprintf>
                            break;
 800daea:	e027      	b.n	800db3c <prvSocketProps+0xc8>
                }
            }
            else
        #endif /* if ipconfigUSE_TCP == 1 */

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800daf2:	2b11      	cmp	r3, #17
 800daf4:	d122      	bne.n	800db3c <prvSocketProps+0xc8>
        {
            switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	7a1b      	ldrb	r3, [r3, #8]
 800dafa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800dafe:	b2db      	uxtb	r3, r3
 800db00:	2b00      	cmp	r3, #0
 800db02:	d002      	beq.n	800db0a <prvSocketProps+0x96>
 800db04:	2b01      	cmp	r3, #1
 800db06:	d00c      	beq.n	800db22 <prvSocketProps+0xae>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 800db08:	e018      	b.n	800db3c <prvSocketProps+0xc8>
                                           ( unsigned ) pxSocket->xLocalAddress.ulIP_IPv4,
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
                                           pxSocket->usLocalPort );
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                        ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ),
 800db12:	9300      	str	r3, [sp, #0]
 800db14:	4613      	mov	r3, r2
 800db16:	4a0f      	ldr	r2, [pc, #60]	@ (800db54 <prvSocketProps+0xe0>)
 800db18:	215c      	movs	r1, #92	@ 0x5c
 800db1a:	480c      	ldr	r0, [pc, #48]	@ (800db4c <prvSocketProps+0xd8>)
 800db1c:	f013 fd32 	bl	8021584 <snprintf>
                        break;
 800db20:	e00c      	b.n	800db3c <prvSocketProps+0xc8>
                                           ( void * ) pxSocket->xLocalAddress.xIP_IPv6.ucBytes,
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f103 0228 	add.w	r2, r3, #40	@ 0x28
                                           pxSocket->usLocalPort );
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                        ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ),
 800db2c:	9300      	str	r3, [sp, #0]
 800db2e:	4613      	mov	r3, r2
 800db30:	4a09      	ldr	r2, [pc, #36]	@ (800db58 <prvSocketProps+0xe4>)
 800db32:	215c      	movs	r1, #92	@ 0x5c
 800db34:	4805      	ldr	r0, [pc, #20]	@ (800db4c <prvSocketProps+0xd8>)
 800db36:	f013 fd25 	bl	8021584 <snprintf>
                        break;
 800db3a:	bf00      	nop
        else
        {
            /* Protocol not handled. */
        }

        return pucSocketProps;
 800db3c:	4b03      	ldr	r3, [pc, #12]	@ (800db4c <prvSocketProps+0xd8>)
    }
 800db3e:	4618      	mov	r0, r3
 800db40:	3708      	adds	r7, #8
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}
 800db46:	bf00      	nop
 800db48:	080240dc 	.word	0x080240dc
 800db4c:	20001240 	.word	0x20001240
 800db50:	080240fc 	.word	0x080240fc
 800db54:	0802411c 	.word	0x0802411c
 800db58:	0802412c 	.word	0x0802412c

0800db5c <prvTCPSetSocketCount>:
    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    static void prvTCPSetSocketCount( FreeRTOS_Socket_t const * pxSocketToDelete )
    {
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b088      	sub	sp, #32
 800db60:	af02      	add	r7, sp, #8
 800db62:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800db64:	4b3c      	ldr	r3, [pc, #240]	@ (800dc58 <prvTCPSetSocketCount+0xfc>)
 800db66:	613b      	str	r3, [r7, #16]
        FreeRTOS_Socket_t * pxOtherSocket;
        uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800db6c:	81fb      	strh	r3, [r7, #14]

        if( pxSocketToDelete->u.xTCP.eTCPState == eTCP_LISTEN )
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800db74:	2b01      	cmp	r3, #1
 800db76:	d12b      	bne.n	800dbd0 <prvTCPSetSocketCount+0x74>
        {
            pxIterator = listGET_NEXT( pxEnd );
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	685b      	ldr	r3, [r3, #4]
 800db7c:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 800db7e:	e022      	b.n	800dbc6 <prvTCPSetSocketCount+0x6a>
            {
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	68db      	ldr	r3, [r3, #12]
 800db84:	60bb      	str	r3, [r7, #8]

                /* This needs to be done here, before calling vSocketClose. */
                pxIterator = listGET_NEXT( pxIterator );
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	685b      	ldr	r3, [r3, #4]
 800db8a:	617b      	str	r3, [r7, #20]

                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800db92:	2b01      	cmp	r3, #1
 800db94:	d017      	beq.n	800dbc6 <prvTCPSetSocketCount+0x6a>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800db9a:	89fa      	ldrh	r2, [r7, #14]
 800db9c:	429a      	cmp	r2, r3
 800db9e:	d112      	bne.n	800dbc6 <prvTCPSetSocketCount+0x6a>
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800dba6:	f003 0304 	and.w	r3, r3, #4
 800dbaa:	b2db      	uxtb	r3, r3
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d107      	bne.n	800dbc0 <prvTCPSetSocketCount+0x64>
                      ( pxOtherSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) ) )
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800dbb6:	f003 0302 	and.w	r3, r3, #2
 800dbba:	b2db      	uxtb	r3, r3
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d002      	beq.n	800dbc6 <prvTCPSetSocketCount+0x6a>
                {
                    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
                    /* coverity[misra_c_2012_rule_17_2_violation] */
                    /* coverity[recursive_step] */
                    ( void ) vSocketClose( pxOtherSocket );
 800dbc0:	68b8      	ldr	r0, [r7, #8]
 800dbc2:	f7ff fedb 	bl	800d97c <vSocketClose>
            while( pxIterator != pxEnd )
 800dbc6:	697a      	ldr	r2, [r7, #20]
 800dbc8:	693b      	ldr	r3, [r7, #16]
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	d1d8      	bne.n	800db80 <prvTCPSetSocketCount+0x24>
                                             ( pxOtherSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                    break;
                }
            }
        }
    }
 800dbce:	e03e      	b.n	800dc4e <prvTCPSetSocketCount+0xf2>
            for( pxIterator = listGET_NEXT( pxEnd );
 800dbd0:	693b      	ldr	r3, [r7, #16]
 800dbd2:	685b      	ldr	r3, [r3, #4]
 800dbd4:	617b      	str	r3, [r7, #20]
 800dbd6:	e036      	b.n	800dc46 <prvTCPSetSocketCount+0xea>
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	68db      	ldr	r3, [r3, #12]
 800dbdc:	60bb      	str	r3, [r7, #8]
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d12b      	bne.n	800dc40 <prvTCPSetSocketCount+0xe4>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800dbec:	89fa      	ldrh	r2, [r7, #14]
 800dbee:	429a      	cmp	r2, r3
 800dbf0:	d126      	bne.n	800dc40 <prvTCPSetSocketCount+0xe4>
                    ( pxOtherSocket->u.xTCP.usChildCount != 0U ) )
 800dbf2:	68bb      	ldr	r3, [r7, #8]
 800dbf4:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d021      	beq.n	800dc40 <prvTCPSetSocketCount+0xe4>
                    pxOtherSocket->u.xTCP.usChildCount--;
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800dc02:	3b01      	subs	r3, #1
 800dc04:	b29a      	uxth	r2, r3
 800dc06:	68bb      	ldr	r3, [r7, #8]
 800dc08:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
                    FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800dc10:	4619      	mov	r1, r3
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800dc18:	461a      	mov	r2, r3
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800dc20:	4618      	mov	r0, r3
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800dc28:	2b01      	cmp	r3, #1
 800dc2a:	d101      	bne.n	800dc30 <prvTCPSetSocketCount+0xd4>
 800dc2c:	4b0b      	ldr	r3, [pc, #44]	@ (800dc5c <prvTCPSetSocketCount+0x100>)
 800dc2e:	e000      	b.n	800dc32 <prvTCPSetSocketCount+0xd6>
 800dc30:	4b0b      	ldr	r3, [pc, #44]	@ (800dc60 <prvTCPSetSocketCount+0x104>)
 800dc32:	9300      	str	r3, [sp, #0]
 800dc34:	4603      	mov	r3, r0
 800dc36:	480b      	ldr	r0, [pc, #44]	@ (800dc64 <prvTCPSetSocketCount+0x108>)
 800dc38:	f012 fc78 	bl	802052c <lUDPLoggingPrintf>
                    break;
 800dc3c:	bf00      	nop
    }
 800dc3e:	e006      	b.n	800dc4e <prvTCPSetSocketCount+0xf2>
                 pxIterator = listGET_NEXT( pxIterator ) )
 800dc40:	697b      	ldr	r3, [r7, #20]
 800dc42:	685b      	ldr	r3, [r3, #4]
 800dc44:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 800dc46:	697a      	ldr	r2, [r7, #20]
 800dc48:	693b      	ldr	r3, [r7, #16]
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d1c4      	bne.n	800dbd8 <prvTCPSetSocketCount+0x7c>
    }
 800dc4e:	bf00      	nop
 800dc50:	3718      	adds	r7, #24
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}
 800dc56:	bf00      	nop
 800dc58:	200012b8 	.word	0x200012b8
 800dc5c:	0802413c 	.word	0x0802413c
 800dc60:	08024140 	.word	0x08024140
 800dc64:	08024144 	.word	0x08024144

0800dc68 <prvSockopt_so_buffer>:
 *         value is returned.
 */
    static BaseType_t prvSockopt_so_buffer( FreeRTOS_Socket_t * pxSocket,
                                            int32_t lOptionName,
                                            const void * pvOptionValue )
    {
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b086      	sub	sp, #24
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	60f8      	str	r0, [r7, #12]
 800dc70:	60b9      	str	r1, [r7, #8]
 800dc72:	607a      	str	r2, [r7, #4]
        uint32_t ulNewValue;
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800dc7a:	2b06      	cmp	r3, #6
 800dc7c:	d00d      	beq.n	800dc9a <prvSockopt_so_buffer+0x32>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: wrong socket type\n",
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	2b04      	cmp	r3, #4
 800dc82:	d101      	bne.n	800dc88 <prvSockopt_so_buffer+0x20>
 800dc84:	4b23      	ldr	r3, [pc, #140]	@ (800dd14 <prvSockopt_so_buffer+0xac>)
 800dc86:	e000      	b.n	800dc8a <prvSockopt_so_buffer+0x22>
 800dc88:	4b23      	ldr	r3, [pc, #140]	@ (800dd18 <prvSockopt_so_buffer+0xb0>)
 800dc8a:	4619      	mov	r1, r3
 800dc8c:	4823      	ldr	r0, [pc, #140]	@ (800dd1c <prvSockopt_so_buffer+0xb4>)
 800dc8e:	f012 fc4d 	bl	802052c <lUDPLoggingPrintf>
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800dc92:	f06f 0315 	mvn.w	r3, #21
 800dc96:	617b      	str	r3, [r7, #20]
 800dc98:	e036      	b.n	800dd08 <prvSockopt_so_buffer+0xa0>
        }
        else if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	2b04      	cmp	r3, #4
 800dc9e:	d104      	bne.n	800dcaa <prvSockopt_so_buffer+0x42>
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d107      	bne.n	800dcba <prvSockopt_so_buffer+0x52>
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	2b05      	cmp	r3, #5
 800dcae:	d112      	bne.n	800dcd6 <prvSockopt_so_buffer+0x6e>
                 ( ( lOptionName == FREERTOS_SO_RCVBUF ) && ( pxSocket->u.xTCP.rxStream != NULL ) ) )
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d00d      	beq.n	800dcd6 <prvSockopt_so_buffer+0x6e>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: buffer already created\n",
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	2b04      	cmp	r3, #4
 800dcbe:	d101      	bne.n	800dcc4 <prvSockopt_so_buffer+0x5c>
 800dcc0:	4b14      	ldr	r3, [pc, #80]	@ (800dd14 <prvSockopt_so_buffer+0xac>)
 800dcc2:	e000      	b.n	800dcc6 <prvSockopt_so_buffer+0x5e>
 800dcc4:	4b14      	ldr	r3, [pc, #80]	@ (800dd18 <prvSockopt_so_buffer+0xb0>)
 800dcc6:	4619      	mov	r1, r3
 800dcc8:	4815      	ldr	r0, [pc, #84]	@ (800dd20 <prvSockopt_so_buffer+0xb8>)
 800dcca:	f012 fc2f 	bl	802052c <lUDPLoggingPrintf>
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800dcce:	f06f 0315 	mvn.w	r3, #21
 800dcd2:	617b      	str	r3, [r7, #20]
 800dcd4:	e018      	b.n	800dd08 <prvSockopt_so_buffer+0xa0>
        }
        else
        {
            ulNewValue = *( ( const uint32_t * ) pvOptionValue );
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	613b      	str	r3, [r7, #16]

            if( lOptionName == FREERTOS_SO_SNDBUF )
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	2b04      	cmp	r3, #4
 800dce0:	d10c      	bne.n	800dcfc <prvSockopt_so_buffer+0x94>
            {
                /* Round up to nearest MSS size */
                ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800dce8:	4619      	mov	r1, r3
 800dcea:	6938      	ldr	r0, [r7, #16]
 800dcec:	f7fb fe92 	bl	8009a14 <FreeRTOS_round_up>
 800dcf0:	6138      	str	r0, [r7, #16]
                pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	693a      	ldr	r2, [r7, #16]
 800dcf6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800dcfa:	e003      	b.n	800dd04 <prvSockopt_so_buffer+0x9c>
            }
            else
            {
                pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	693a      	ldr	r2, [r7, #16]
 800dd00:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
            }

            xReturn = 0;
 800dd04:	2300      	movs	r3, #0
 800dd06:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 800dd08:	697b      	ldr	r3, [r7, #20]
    }
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3718      	adds	r7, #24
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	bf00      	nop
 800dd14:	08024170 	.word	0x08024170
 800dd18:	08024174 	.word	0x08024174
 800dd1c:	08024178 	.word	0x08024178
 800dd20:	0802419c 	.word	0x0802419c

0800dd24 <prvSetOptionCallback>:
 *         value is returned.
 */
    BaseType_t prvSetOptionCallback( FreeRTOS_Socket_t * pxSocket,
                                     int32_t lOptionName,
                                     const void * pvOptionValue )
    {
 800dd24:	b480      	push	{r7}
 800dd26:	b087      	sub	sp, #28
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	60f8      	str	r0, [r7, #12]
 800dd2c:	60b9      	str	r1, [r7, #8]
 800dd2e:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = 0;
 800dd30:	2300      	movs	r3, #0
 800dd32:	617b      	str	r3, [r7, #20]

        #if ( ipconfigUSE_TCP == 1 )
        {
            UBaseType_t uxProtocol;

            if( ( lOptionName == FREERTOS_SO_UDP_RECV_HANDLER ) ||
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	2b09      	cmp	r3, #9
 800dd38:	d002      	beq.n	800dd40 <prvSetOptionCallback+0x1c>
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	2b0a      	cmp	r3, #10
 800dd3e:	d102      	bne.n	800dd46 <prvSetOptionCallback+0x22>
                ( lOptionName == FREERTOS_SO_UDP_SENT_HANDLER ) )
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_UDP;
 800dd40:	2311      	movs	r3, #17
 800dd42:	613b      	str	r3, [r7, #16]
 800dd44:	e001      	b.n	800dd4a <prvSetOptionCallback+0x26>
            }
            else
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_TCP;
 800dd46:	2306      	movs	r3, #6
 800dd48:	613b      	str	r3, [r7, #16]
            }

            if( pxSocket->ucProtocol != ( uint8_t ) uxProtocol )
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	b2db      	uxtb	r3, r3
 800dd54:	429a      	cmp	r2, r3
 800dd56:	d002      	beq.n	800dd5e <prvSetOptionCallback+0x3a>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800dd58:	f06f 0315 	mvn.w	r3, #21
 800dd5c:	617b      	str	r3, [r7, #20]
            /* No need to check if the socket has the right
             * protocol, because only UDP sockets can be created. */
        }
        #endif /* ipconfigUSE_TCP */

        if( xReturn == 0 )
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d131      	bne.n	800ddc8 <prvSetOptionCallback+0xa4>
        {
            switch( lOptionName ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is checked before calling. */
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	3b06      	subs	r3, #6
 800dd68:	2b04      	cmp	r3, #4
 800dd6a:	d829      	bhi.n	800ddc0 <prvSetOptionCallback+0x9c>
 800dd6c:	a201      	add	r2, pc, #4	@ (adr r2, 800dd74 <prvSetOptionCallback+0x50>)
 800dd6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd72:	bf00      	nop
 800dd74:	0800dd89 	.word	0x0800dd89
 800dd78:	0800dd95 	.word	0x0800dd95
 800dd7c:	0800dda1 	.word	0x0800dda1
 800dd80:	0800ddad 	.word	0x0800ddad
 800dd84:	0800ddb7 	.word	0x0800ddb7
            {
                #if ipconfigUSE_TCP == 1
                    case FREERTOS_SO_TCP_CONN_HANDLER:
                        pxSocket->u.xTCP.pxHandleConnected = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPConnected;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681a      	ldr	r2, [r3, #0]
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                        break;
 800dd92:	e019      	b.n	800ddc8 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_RECV_HANDLER:
                        pxSocket->u.xTCP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPReceive;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	685a      	ldr	r2, [r3, #4]
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                        break;
 800dd9e:	e013      	b.n	800ddc8 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_SENT_HANDLER:
                        pxSocket->u.xTCP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPSent;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	689a      	ldr	r2, [r3, #8]
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
                        break;
 800ddaa:	e00d      	b.n	800ddc8 <prvSetOptionCallback+0xa4>
                #endif /* ipconfigUSE_TCP */
                case FREERTOS_SO_UDP_RECV_HANDLER:
                    pxSocket->u.xUDP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPReceive;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	68da      	ldr	r2, [r3, #12]
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	669a      	str	r2, [r3, #104]	@ 0x68
                    break;
 800ddb4:	e008      	b.n	800ddc8 <prvSetOptionCallback+0xa4>

                case FREERTOS_SO_UDP_SENT_HANDLER:
                    pxSocket->u.xUDP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPSent;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	691a      	ldr	r2, [r3, #16]
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	66da      	str	r2, [r3, #108]	@ 0x6c
                    break;
 800ddbe:	e003      	b.n	800ddc8 <prvSetOptionCallback+0xa4>

                default:                                /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
                    xReturn = -pdFREERTOS_ERRNO_EINVAL; /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800ddc0:	f06f 0315 	mvn.w	r3, #21
 800ddc4:	617b      	str	r3, [r7, #20]
                    break;                              /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800ddc6:	bf00      	nop
            }
        }

        return xReturn;
 800ddc8:	697b      	ldr	r3, [r7, #20]
    }
 800ddca:	4618      	mov	r0, r3
 800ddcc:	371c      	adds	r7, #28
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd4:	4770      	bx	lr
 800ddd6:	bf00      	nop

0800ddd8 <prvSetOptionTCPWindows>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionTCPWindows( FreeRTOS_Socket_t * pxSocket,
                                              const void * pvOptionValue )
    {
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b086      	sub	sp, #24
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800dde2:	f06f 0315 	mvn.w	r3, #21
 800dde6:	617b      	str	r3, [r7, #20]
        const WinProperties_t * pxProps;

        do
        {
            IPTCPSocket_t * pxTCP = &( pxSocket->u.xTCP );
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	3354      	adds	r3, #84	@ 0x54
 800ddec:	613b      	str	r3, [r7, #16]

            if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ddf4:	2b06      	cmp	r3, #6
 800ddf6:	d003      	beq.n	800de00 <prvSetOptionTCPWindows+0x28>
            {
                FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: wrong socket type\n" ) );
 800ddf8:	4825      	ldr	r0, [pc, #148]	@ (800de90 <prvSetOptionTCPWindows+0xb8>)
 800ddfa:	f012 fb97 	bl	802052c <lUDPLoggingPrintf>
                break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800ddfe:	e042      	b.n	800de86 <prvSetOptionTCPWindows+0xae>
            }

            pxProps = ( const WinProperties_t * ) pvOptionValue;
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	60fb      	str	r3, [r7, #12]

            /* Validity of txStream will be checked by the function below. */
            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_SNDBUF, &( pxProps->lTxBufSize ) );
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	461a      	mov	r2, r3
 800de08:	2104      	movs	r1, #4
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f7ff ff2c 	bl	800dc68 <prvSockopt_so_buffer>
 800de10:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800de12:	697b      	ldr	r3, [r7, #20]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d133      	bne.n	800de80 <prvSetOptionTCPWindows+0xa8>
            {
                break; /* will return an error. */
            }

            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_RCVBUF, &( pxProps->lRxBufSize ) );
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	3308      	adds	r3, #8
 800de1c:	461a      	mov	r2, r3
 800de1e:	2105      	movs	r1, #5
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f7ff ff21 	bl	800dc68 <prvSockopt_so_buffer>
 800de26:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800de28:	697b      	ldr	r3, [r7, #20]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d12a      	bne.n	800de84 <prvSetOptionTCPWindows+0xac>
                break; /* will return an error. */
            }

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                pxTCP->uxRxWinSize = ( uint32_t ) pxProps->lRxWinSize; /* Fixed value: size of the TCP reception window */
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	68db      	ldr	r3, [r3, #12]
 800de32:	461a      	mov	r2, r3
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
                pxTCP->uxTxWinSize = ( uint32_t ) pxProps->lTxWinSize; /* Fixed value: size of the TCP transmit window */
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	685b      	ldr	r3, [r3, #4]
 800de3e:	461a      	mov	r2, r3
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
            }
            #endif

            /* In case the socket has already initialised its tcpWin,
             * adapt the window size parameters */
            if( pxTCP->xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
 800de46:	693b      	ldr	r3, [r7, #16]
 800de48:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 800de4c:	f003 0301 	and.w	r3, r3, #1
 800de50:	b2db      	uxtb	r3, r3
 800de52:	2b00      	cmp	r3, #0
 800de54:	d017      	beq.n	800de86 <prvSetOptionTCPWindows+0xae>
            {
                pxTCP->xTCPWindow.xSize.ulRxWindowLength = ( uint32_t ) ( pxTCP->uxRxWinSize * pxTCP->usMSS );
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800de5c:	693a      	ldr	r2, [r7, #16]
 800de5e:	8bd2      	ldrh	r2, [r2, #30]
 800de60:	fb03 f202 	mul.w	r2, r3, r2
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
                pxTCP->xTCPWindow.xSize.ulTxWindowLength = ( uint32_t ) ( pxTCP->uxTxWinSize * pxTCP->usMSS );
 800de6a:	693b      	ldr	r3, [r7, #16]
 800de6c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800de70:	693a      	ldr	r2, [r7, #16]
 800de72:	8bd2      	ldrh	r2, [r2, #30]
 800de74:	fb03 f202 	mul.w	r2, r3, r2
 800de78:	693b      	ldr	r3, [r7, #16]
 800de7a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800de7e:	e002      	b.n	800de86 <prvSetOptionTCPWindows+0xae>
                break; /* will return an error. */
 800de80:	bf00      	nop
 800de82:	e000      	b.n	800de86 <prvSetOptionTCPWindows+0xae>
                break; /* will return an error. */
 800de84:	bf00      	nop
            }
        }
        while( ipFALSE_BOOL );

        return xReturn;
 800de86:	697b      	ldr	r3, [r7, #20]
    }
 800de88:	4618      	mov	r0, r3
 800de8a:	3718      	adds	r7, #24
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}
 800de90:	080241c4 	.word	0x080241c4

0800de94 <prvSetOptionLowHighWater>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionLowHighWater( FreeRTOS_Socket_t * pxSocket,
                                                const void * pvOptionValue )
    {
 800de94:	b580      	push	{r7, lr}
 800de96:	b084      	sub	sp, #16
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
 800de9c:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800de9e:	f06f 0315 	mvn.w	r3, #21
 800dea2:	60fb      	str	r3, [r7, #12]
        const LowHighWater_t * pxLowHighWater = ( const LowHighWater_t * ) pvOptionValue;
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	60bb      	str	r3, [r7, #8]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800deae:	2b06      	cmp	r3, #6
 800deb0:	d003      	beq.n	800deba <prvSetOptionLowHighWater+0x26>
        {
            /* It is not allowed to access 'pxSocket->u.xTCP'. */
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: wrong socket type\n" ) );
 800deb2:	4813      	ldr	r0, [pc, #76]	@ (800df00 <prvSetOptionLowHighWater+0x6c>)
 800deb4:	f012 fb3a 	bl	802052c <lUDPLoggingPrintf>
 800deb8:	e01c      	b.n	800def4 <prvSetOptionLowHighWater+0x60>
        }
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	681a      	ldr	r2, [r3, #0]
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	685b      	ldr	r3, [r3, #4]
 800dec2:	429a      	cmp	r2, r3
 800dec4:	d206      	bcs.n	800ded4 <prvSetOptionLowHighWater+0x40>
                 ( pxLowHighWater->uxEnoughSpace > pxSocket->u.xTCP.uxRxStreamSize ) )
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	685a      	ldr	r2, [r3, #4]
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800ded0:	429a      	cmp	r2, r3
 800ded2:	d903      	bls.n	800dedc <prvSetOptionLowHighWater+0x48>
        {
            /* Impossible values. */
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: bad values\n" ) );
 800ded4:	480b      	ldr	r0, [pc, #44]	@ (800df04 <prvSetOptionLowHighWater+0x70>)
 800ded6:	f012 fb29 	bl	802052c <lUDPLoggingPrintf>
 800deda:	e00b      	b.n	800def4 <prvSetOptionLowHighWater+0x60>
        }
        else
        {
            /* Send a STOP when buffer space drops below 'uxLittleSpace' bytes. */
            pxSocket->u.xTCP.uxLittleSpace = pxLowHighWater->uxLittleSpace;
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	681a      	ldr	r2, [r3, #0]
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            /* Send a GO when buffer space grows above 'uxEnoughSpace' bytes. */
            pxSocket->u.xTCP.uxEnoughSpace = pxLowHighWater->uxEnoughSpace;
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	685a      	ldr	r2, [r3, #4]
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            xReturn = 0;
 800def0:	2300      	movs	r3, #0
 800def2:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800def4:	68fb      	ldr	r3, [r7, #12]
    }
 800def6:	4618      	mov	r0, r3
 800def8:	3710      	adds	r7, #16
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
 800defe:	bf00      	nop
 800df00:	080241e8 	.word	0x080241e8
 800df04:	0802421c 	.word	0x0802421c

0800df08 <prvSetOptionSetFullSize>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionSetFullSize( FreeRTOS_Socket_t * pxSocket,
                                               const void * pvOptionValue )
    {
 800df08:	b580      	push	{r7, lr}
 800df0a:	b084      	sub	sp, #16
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
 800df10:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800df12:	f06f 0315 	mvn.w	r3, #21
 800df16:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800df1e:	2b06      	cmp	r3, #6
 800df20:	d126      	bne.n	800df70 <prvSetOptionSetFullSize+0x68>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d007      	beq.n	800df3a <prvSetOptionSetFullSize+0x32>
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdTRUE_UNSIGNED;
 800df2a:	687a      	ldr	r2, [r7, #4]
 800df2c:	f892 3120 	ldrb.w	r3, [r2, #288]	@ 0x120
 800df30:	f043 0302 	orr.w	r3, r3, #2
 800df34:	f882 3120 	strb.w	r3, [r2, #288]	@ 0x120
 800df38:	e006      	b.n	800df48 <prvSetOptionSetFullSize+0x40>
            }
            else
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdFALSE_UNSIGNED;
 800df3a:	687a      	ldr	r2, [r7, #4]
 800df3c:	f892 3120 	ldrb.w	r3, [r2, #288]	@ 0x120
 800df40:	f36f 0341 	bfc	r3, #1, #1
 800df44:	f882 3120 	strb.w	r3, [r2, #288]	@ 0x120
            }

            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800df4e:	2b04      	cmp	r3, #4
 800df50:	d90c      	bls.n	800df6c <prvSetOptionSetFullSize+0x64>
                ( FreeRTOS_outstanding( pxSocket ) != 0 ) )
 800df52:	6878      	ldr	r0, [r7, #4]
 800df54:	f001 faba 	bl	800f4cc <FreeRTOS_tx_size>
 800df58:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d006      	beq.n	800df6c <prvSetOptionSetFullSize+0x64>
            {
                /* There might be some data in the TX-stream, less than full-size,
                 * which equals a MSS.  Wake-up the IP-task to check this. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2201      	movs	r2, #1
 800df62:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800df66:	2006      	movs	r0, #6
 800df68:	f7fa fc1c 	bl	80087a4 <xSendEventToIPTask>
            }

            xReturn = 0;
 800df6c:	2300      	movs	r3, #0
 800df6e:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800df70:	68fb      	ldr	r3, [r7, #12]
    }
 800df72:	4618      	mov	r0, r3
 800df74:	3710      	adds	r7, #16
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}

0800df7a <prvSetOptionStopRX>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionStopRX( FreeRTOS_Socket_t * pxSocket,
                                          const void * pvOptionValue )
    {
 800df7a:	b580      	push	{r7, lr}
 800df7c:	b084      	sub	sp, #16
 800df7e:	af00      	add	r7, sp, #0
 800df80:	6078      	str	r0, [r7, #4]
 800df82:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800df84:	f06f 0315 	mvn.w	r3, #21
 800df88:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800df90:	2b06      	cmp	r3, #6
 800df92:	d122      	bne.n	800dfda <prvSetOptionStopRX+0x60>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d007      	beq.n	800dfac <prvSetOptionStopRX+0x32>
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdTRUE_UNSIGNED;
 800df9c:	687a      	ldr	r2, [r7, #4]
 800df9e:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800dfa2:	f043 0304 	orr.w	r3, r3, #4
 800dfa6:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
 800dfaa:	e006      	b.n	800dfba <prvSetOptionStopRX+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdFALSE_UNSIGNED;
 800dfac:	687a      	ldr	r2, [r7, #4]
 800dfae:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800dfb2:	f36f 0382 	bfc	r3, #2, #1
 800dfb6:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            }

            pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800dfba:	687a      	ldr	r2, [r7, #4]
 800dfbc:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800dfc0:	f043 0301 	orr.w	r3, r3, #1
 800dfc4:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bRxStopped */
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2201      	movs	r2, #1
 800dfcc:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800dfd0:	2006      	movs	r0, #6
 800dfd2:	f7fa fbe7 	bl	80087a4 <xSendEventToIPTask>
            xReturn = 0;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800dfda:	68fb      	ldr	r3, [r7, #12]
    }
 800dfdc:	4618      	mov	r0, r3
 800dfde:	3710      	adds	r7, #16
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}

0800dfe4 <prvSetOptionTimeout>:
 *            otherwise handle the option `FREERTOS_SO_RCVTIMEO`.
 */
static void prvSetOptionTimeout( FreeRTOS_Socket_t * pxSocket,
                                 const void * pvOptionValue,
                                 BaseType_t xForSend )
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b087      	sub	sp, #28
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	60f8      	str	r0, [r7, #12]
 800dfec:	60b9      	str	r1, [r7, #8]
 800dfee:	607a      	str	r2, [r7, #4]
    TickType_t xBlockTime = *( ( const TickType_t * ) pvOptionValue );
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	617b      	str	r3, [r7, #20]

    if( xForSend == pdTRUE )
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2b01      	cmp	r3, #1
 800dffa:	d110      	bne.n	800e01e <prvSetOptionTimeout+0x3a>
    {
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e002:	2b11      	cmp	r3, #17
 800e004:	d107      	bne.n	800e016 <prvSetOptionTimeout+0x32>
        {
            /* The send time out is capped for the reason stated in the
             * comments where ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined
             * in FreeRTOSIPConfig.h (assuming an official configuration file
             * is being used. */
            if( xBlockTime > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e00c:	4293      	cmp	r3, r2
 800e00e:	d902      	bls.n	800e016 <prvSetOptionTimeout+0x32>
            {
                xBlockTime = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 800e010:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e014:	617b      	str	r3, [r7, #20]
            /* For TCP socket, it isn't necessary to limit the blocking time
             * because  the FreeRTOS_send() function does not wait for a network
             * buffer to become available. */
        }

        pxSocket->xSendBlockTime = xBlockTime;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	697a      	ldr	r2, [r7, #20]
 800e01a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    else
    {
        pxSocket->xReceiveBlockTime = xBlockTime;
    }
}
 800e01c:	e002      	b.n	800e024 <prvSetOptionTimeout+0x40>
        pxSocket->xReceiveBlockTime = xBlockTime;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	697a      	ldr	r2, [r7, #20]
 800e022:	621a      	str	r2, [r3, #32]
}
 800e024:	bf00      	nop
 800e026:	371c      	adds	r7, #28
 800e028:	46bd      	mov	sp, r7
 800e02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02e:	4770      	bx	lr

0800e030 <prvSetOptionReuseListenSocket>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionReuseListenSocket( FreeRTOS_Socket_t * pxSocket,
                                                     const void * pvOptionValue )
    {
 800e030:	b480      	push	{r7}
 800e032:	b085      	sub	sp, #20
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e03a:	f06f 0315 	mvn.w	r3, #21
 800e03e:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e046:	2b06      	cmp	r3, #6
 800e048:	d114      	bne.n	800e074 <prvSetOptionReuseListenSocket+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d007      	beq.n	800e062 <prvSetOptionReuseListenSocket+0x32>
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE_UNSIGNED;
 800e052:	687a      	ldr	r2, [r7, #4]
 800e054:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800e058:	f043 0308 	orr.w	r3, r3, #8
 800e05c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800e060:	e006      	b.n	800e070 <prvSetOptionReuseListenSocket+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdFALSE_UNSIGNED;
 800e062:	687a      	ldr	r2, [r7, #4]
 800e064:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800e068:	f36f 03c3 	bfc	r3, #3, #1
 800e06c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            xReturn = 0;
 800e070:	2300      	movs	r3, #0
 800e072:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800e074:	68fb      	ldr	r3, [r7, #12]
    }
 800e076:	4618      	mov	r0, r3
 800e078:	3714      	adds	r7, #20
 800e07a:	46bd      	mov	sp, r7
 800e07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e080:	4770      	bx	lr

0800e082 <prvSetOptionCloseAfterSend>:
 * @param[in] pvOptionValue A pointer to a binary value of size
 *            BaseType_t.
 */
    static BaseType_t prvSetOptionCloseAfterSend( FreeRTOS_Socket_t * pxSocket,
                                                  const void * pvOptionValue )
    {
 800e082:	b480      	push	{r7}
 800e084:	b085      	sub	sp, #20
 800e086:	af00      	add	r7, sp, #0
 800e088:	6078      	str	r0, [r7, #4]
 800e08a:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e08c:	f06f 0315 	mvn.w	r3, #21
 800e090:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e098:	2b06      	cmp	r3, #6
 800e09a:	d114      	bne.n	800e0c6 <prvSetOptionCloseAfterSend+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d007      	beq.n	800e0b4 <prvSetOptionCloseAfterSend+0x32>
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdTRUE_UNSIGNED;
 800e0a4:	687a      	ldr	r2, [r7, #4]
 800e0a6:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800e0aa:	f043 0310 	orr.w	r3, r3, #16
 800e0ae:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800e0b2:	e006      	b.n	800e0c2 <prvSetOptionCloseAfterSend+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdFALSE_UNSIGNED;
 800e0b4:	687a      	ldr	r2, [r7, #4]
 800e0b6:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800e0ba:	f36f 1304 	bfc	r3, #4, #1
 800e0be:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            xReturn = 0;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
    }
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	3714      	adds	r7, #20
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d2:	4770      	bx	lr

0800e0d4 <FreeRTOS_setsockopt>:
BaseType_t FreeRTOS_setsockopt( Socket_t xSocket,
                                int32_t lLevel,
                                int32_t lOptionName,
                                const void * pvOptionValue,
                                size_t uxOptionLength )
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b086      	sub	sp, #24
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	60f8      	str	r0, [r7, #12]
 800e0dc:	60b9      	str	r1, [r7, #8]
 800e0de:	607a      	str	r2, [r7, #4]
 800e0e0:	603b      	str	r3, [r7, #0]
/* The standard Berkeley function returns 0 for success. */
    BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e0e2:	f06f 0315 	mvn.w	r3, #21
 800e0e6:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t * pxSocket;

    pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	613b      	str	r3, [r7, #16]
    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the parameters. */
    ( void ) lLevel;
    ( void ) uxOptionLength;

    if( xSocketValid( pxSocket ) == pdTRUE )
 800e0ec:	6938      	ldr	r0, [r7, #16]
 800e0ee:	f001 fa59 	bl	800f5a4 <xSocketValid>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	2b01      	cmp	r3, #1
 800e0f6:	f040 8093 	bne.w	800e220 <FreeRTOS_setsockopt+0x14c>
    {
        switch( lOptionName )
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2b12      	cmp	r3, #18
 800e0fe:	f200 808b 	bhi.w	800e218 <FreeRTOS_setsockopt+0x144>
 800e102:	a201      	add	r2, pc, #4	@ (adr r2, 800e108 <FreeRTOS_setsockopt+0x34>)
 800e104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e108:	0800e155 	.word	0x0800e155
 800e10c:	0800e165 	.word	0x0800e165
 800e110:	0800e175 	.word	0x0800e175
 800e114:	0800e1b5 	.word	0x0800e1b5
 800e118:	0800e1cf 	.word	0x0800e1cf
 800e11c:	0800e1cf 	.word	0x0800e1cf
 800e120:	0800e1a7 	.word	0x0800e1a7
 800e124:	0800e1a7 	.word	0x0800e1a7
 800e128:	0800e1a7 	.word	0x0800e1a7
 800e12c:	0800e1a7 	.word	0x0800e1a7
 800e130:	0800e1a7 	.word	0x0800e1a7
 800e134:	0800e1e9 	.word	0x0800e1e9
 800e138:	0800e1f5 	.word	0x0800e1f5
 800e13c:	0800e1dd 	.word	0x0800e1dd
 800e140:	0800e201 	.word	0x0800e201
 800e144:	0800e20d 	.word	0x0800e20d
 800e148:	0800e219 	.word	0x0800e219
 800e14c:	0800e219 	.word	0x0800e219
 800e150:	0800e1c3 	.word	0x0800e1c3
        {
            case FREERTOS_SO_RCVTIMEO:
                /* Receive time out. */
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdFALSE );
 800e154:	2200      	movs	r2, #0
 800e156:	6839      	ldr	r1, [r7, #0]
 800e158:	6938      	ldr	r0, [r7, #16]
 800e15a:	f7ff ff43 	bl	800dfe4 <prvSetOptionTimeout>
                xReturn = 0;
 800e15e:	2300      	movs	r3, #0
 800e160:	617b      	str	r3, [r7, #20]
                break;
 800e162:	e060      	b.n	800e226 <FreeRTOS_setsockopt+0x152>

            case FREERTOS_SO_SNDTIMEO:
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdTRUE );
 800e164:	2201      	movs	r2, #1
 800e166:	6839      	ldr	r1, [r7, #0]
 800e168:	6938      	ldr	r0, [r7, #16]
 800e16a:	f7ff ff3b 	bl	800dfe4 <prvSetOptionTimeout>
                xReturn = 0;
 800e16e:	2300      	movs	r3, #0
 800e170:	617b      	str	r3, [r7, #20]
                break;
 800e172:	e058      	b.n	800e226 <FreeRTOS_setsockopt+0x152>
            case FREERTOS_SO_UDPCKSUM_OUT:

                /* Turn calculating of the UDP checksum on/off for this socket. If pvOptionValue
                 * is anything else than NULL, the checksum generation will be turned on. */

                if( pvOptionValue == NULL )
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d109      	bne.n	800e18e <FreeRTOS_setsockopt+0xba>
                {
                    pxSocket->ucSocketOptions &= ( ( uint8_t ) ~( ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT ) );
 800e17a:	693b      	ldr	r3, [r7, #16]
 800e17c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800e180:	f023 0302 	bic.w	r3, r3, #2
 800e184:	b2da      	uxtb	r2, r3
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800e18c:	e008      	b.n	800e1a0 <FreeRTOS_setsockopt+0xcc>
                }
                else
                {
                    pxSocket->ucSocketOptions |= ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800e194:	f043 0302 	orr.w	r3, r3, #2
 800e198:	b2da      	uxtb	r2, r3
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                }

                xReturn = 0;
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	617b      	str	r3, [r7, #20]
                break;
 800e1a4:	e03f      	b.n	800e226 <FreeRTOS_setsockopt+0x152>
                        case FREERTOS_SO_TCP_RECV_HANDLER: /* Install a callback for receiving TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        case FREERTOS_SO_TCP_SENT_HANDLER: /* Install a callback for sending TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    #endif /* ipconfigUSE_TCP */
                    case FREERTOS_SO_UDP_RECV_HANDLER:     /* Install a callback for receiving UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    case FREERTOS_SO_UDP_SENT_HANDLER:     /* Install a callback for sending UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        xReturn = prvSetOptionCallback( pxSocket, lOptionName, pvOptionValue );
 800e1a6:	683a      	ldr	r2, [r7, #0]
 800e1a8:	6879      	ldr	r1, [r7, #4]
 800e1aa:	6938      	ldr	r0, [r7, #16]
 800e1ac:	f7ff fdba 	bl	800dd24 <prvSetOptionCallback>
 800e1b0:	6178      	str	r0, [r7, #20]
                        break;
 800e1b2:	e038      	b.n	800e226 <FreeRTOS_setsockopt+0x152>
                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE != 0 )

                    /* Each socket has a semaphore on which the using task normally
                     * sleeps. */
                    case FREERTOS_SO_SET_SEMAPHORE:
                        pxSocket->pxUserSemaphore = *( ( SemaphoreHandle_t * ) pvOptionValue );
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	681a      	ldr	r2, [r3, #0]
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	63da      	str	r2, [r3, #60]	@ 0x3c
                        xReturn = 0;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	617b      	str	r3, [r7, #20]
                        break;
 800e1c0:	e031      	b.n	800e226 <FreeRTOS_setsockopt+0x152>
                        break;
                #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

                #if ( ipconfigUSE_TCP != 0 )
                    case FREERTOS_SO_SET_LOW_HIGH_WATER:
                        xReturn = prvSetOptionLowHighWater( pxSocket, pvOptionValue );
 800e1c2:	6839      	ldr	r1, [r7, #0]
 800e1c4:	6938      	ldr	r0, [r7, #16]
 800e1c6:	f7ff fe65 	bl	800de94 <prvSetOptionLowHighWater>
 800e1ca:	6178      	str	r0, [r7, #20]
                        break;
 800e1cc:	e02b      	b.n	800e226 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_SNDBUF: /* Set the size of the send buffer, in units of MSS (TCP only) */
                    case FREERTOS_SO_RCVBUF: /* Set the size of the receive buffer, in units of MSS (TCP only) */
                        xReturn = prvSockopt_so_buffer( pxSocket, lOptionName, pvOptionValue );
 800e1ce:	683a      	ldr	r2, [r7, #0]
 800e1d0:	6879      	ldr	r1, [r7, #4]
 800e1d2:	6938      	ldr	r0, [r7, #16]
 800e1d4:	f7ff fd48 	bl	800dc68 <prvSockopt_so_buffer>
 800e1d8:	6178      	str	r0, [r7, #20]
                        break;
 800e1da:	e024      	b.n	800e226 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_WIN_PROPERTIES: /* Set all buffer and window properties in one call, parameter is pointer to WinProperties_t */
                        xReturn = prvSetOptionTCPWindows( pxSocket, pvOptionValue );
 800e1dc:	6839      	ldr	r1, [r7, #0]
 800e1de:	6938      	ldr	r0, [r7, #16]
 800e1e0:	f7ff fdfa 	bl	800ddd8 <prvSetOptionTCPWindows>
 800e1e4:	6178      	str	r0, [r7, #20]
                        break;
 800e1e6:	e01e      	b.n	800e226 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_REUSE_LISTEN_SOCKET: /* If true, the server-socket will turn into a connected socket */
                        xReturn = prvSetOptionReuseListenSocket( pxSocket, pvOptionValue );
 800e1e8:	6839      	ldr	r1, [r7, #0]
 800e1ea:	6938      	ldr	r0, [r7, #16]
 800e1ec:	f7ff ff20 	bl	800e030 <prvSetOptionReuseListenSocket>
 800e1f0:	6178      	str	r0, [r7, #20]
                        break;
 800e1f2:	e018      	b.n	800e226 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_CLOSE_AFTER_SEND: /* As soon as the last byte has been transmitted, finalise the connection */
                        xReturn = prvSetOptionCloseAfterSend( pxSocket, pvOptionValue );
 800e1f4:	6839      	ldr	r1, [r7, #0]
 800e1f6:	6938      	ldr	r0, [r7, #16]
 800e1f8:	f7ff ff43 	bl	800e082 <prvSetOptionCloseAfterSend>
 800e1fc:	6178      	str	r0, [r7, #20]
                        break;
 800e1fe:	e012      	b.n	800e226 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_SET_FULL_SIZE: /* Refuse to send packets smaller than MSS  */
                        xReturn = prvSetOptionSetFullSize( pxSocket, pvOptionValue );
 800e200:	6839      	ldr	r1, [r7, #0]
 800e202:	6938      	ldr	r0, [r7, #16]
 800e204:	f7ff fe80 	bl	800df08 <prvSetOptionSetFullSize>
 800e208:	6178      	str	r0, [r7, #20]
                        break;
 800e20a:	e00c      	b.n	800e226 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_STOP_RX: /* Refuse to receive more packets. */
                        xReturn = prvSetOptionStopRX( pxSocket, pvOptionValue );
 800e20c:	6839      	ldr	r1, [r7, #0]
 800e20e:	6938      	ldr	r0, [r7, #16]
 800e210:	f7ff feb3 	bl	800df7a <prvSetOptionStopRX>
 800e214:	6178      	str	r0, [r7, #20]
                        break;
 800e216:	e006      	b.n	800e226 <FreeRTOS_setsockopt+0x152>
                #endif /* ipconfigUSE_TCP == 1 */

            default:
                /* No other options are handled. */
                xReturn = -pdFREERTOS_ERRNO_ENOPROTOOPT;
 800e218:	f06f 036c 	mvn.w	r3, #108	@ 0x6c
 800e21c:	617b      	str	r3, [r7, #20]
                break;
 800e21e:	e002      	b.n	800e226 <FreeRTOS_setsockopt+0x152>
        }
    }
    else
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e220:	f06f 0315 	mvn.w	r3, #21
 800e224:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800e226:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800e228:	4618      	mov	r0, r3
 800e22a:	3718      	adds	r7, #24
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}

0800e230 <prvGetPrivatePortNumber>:
 *
 * @return If an available protocol port is found then that port number is returned.
 *         Or else, 0 is returned.
 */
static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol )
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b086      	sub	sp, #24
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
    const uint16_t usEphemeralPortCount =
 800e238:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800e23c:	81fb      	strh	r3, [r7, #14]
        socketAUTO_PORT_ALLOCATION_MAX_NUMBER - ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER - 1U );
    uint16_t usIterations = usEphemeralPortCount;
 800e23e:	89fb      	ldrh	r3, [r7, #14]
 800e240:	82fb      	strh	r3, [r7, #22]
    uint32_t ulRandomSeed = 0;
 800e242:	2300      	movs	r3, #0
 800e244:	60bb      	str	r3, [r7, #8]
    uint16_t usResult = 0;
 800e246:	2300      	movs	r3, #0
 800e248:	82bb      	strh	r3, [r7, #20]
    const List_t * pxList;

    #if ipconfigUSE_TCP == 1
        if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2b06      	cmp	r3, #6
 800e24e:	d102      	bne.n	800e256 <prvGetPrivatePortNumber+0x26>
        {
            pxList = &xBoundTCPSocketsList;
 800e250:	4b21      	ldr	r3, [pc, #132]	@ (800e2d8 <prvGetPrivatePortNumber+0xa8>)
 800e252:	613b      	str	r3, [r7, #16]
 800e254:	e001      	b.n	800e25a <prvGetPrivatePortNumber+0x2a>
        }
        else
    #endif
    {
        pxList = &xBoundUDPSocketsList;
 800e256:	4b21      	ldr	r3, [pc, #132]	@ (800e2dc <prvGetPrivatePortNumber+0xac>)
 800e258:	613b      	str	r3, [r7, #16]
    /* Find the next available port using the random seed as a starting
     * point. */
    do
    {
        /* Only proceed if the random number generator succeeded. */
        if( xApplicationGetRandomNumber( &( ulRandomSeed ) ) == pdFALSE )
 800e25a:	f107 0308 	add.w	r3, r7, #8
 800e25e:	4618      	mov	r0, r3
 800e260:	f7f3 f824 	bl	80012ac <xApplicationGetRandomNumber>
 800e264:	4603      	mov	r3, r0
 800e266:	2b00      	cmp	r3, #0
 800e268:	d030      	beq.n	800e2cc <prvGetPrivatePortNumber+0x9c>
            break;
        }

        /* Map the random to a candidate port. */
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
                                  ( ( ( uint16_t ) ulRandomSeed ) % usEphemeralPortCount ) );
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	b29b      	uxth	r3, r3
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
 800e26e:	89fa      	ldrh	r2, [r7, #14]
 800e270:	fbb3 f1f2 	udiv	r1, r3, r2
 800e274:	fb01 f202 	mul.w	r2, r1, r2
 800e278:	1a9b      	subs	r3, r3, r2
 800e27a:	b29b      	uxth	r3, r3
 800e27c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e280:	82bb      	strh	r3, [r7, #20]

        /* Check if there's already an open socket with the same protocol
         * and port. */
        if( NULL == pxListFindListItemWithValue(
                pxList,
                ( TickType_t ) FreeRTOS_htons( usResult ) ) )
 800e282:	8abb      	ldrh	r3, [r7, #20]
 800e284:	021b      	lsls	r3, r3, #8
 800e286:	b21a      	sxth	r2, r3
 800e288:	8abb      	ldrh	r3, [r7, #20]
 800e28a:	0a1b      	lsrs	r3, r3, #8
 800e28c:	b29b      	uxth	r3, r3
 800e28e:	b21b      	sxth	r3, r3
 800e290:	4313      	orrs	r3, r2
 800e292:	b21b      	sxth	r3, r3
 800e294:	b29b      	uxth	r3, r3
        if( NULL == pxListFindListItemWithValue(
 800e296:	4619      	mov	r1, r3
 800e298:	6938      	ldr	r0, [r7, #16]
 800e29a:	f000 f821 	bl	800e2e0 <pxListFindListItemWithValue>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d10a      	bne.n	800e2ba <prvGetPrivatePortNumber+0x8a>
        {
            usResult = FreeRTOS_htons( usResult );
 800e2a4:	8abb      	ldrh	r3, [r7, #20]
 800e2a6:	021b      	lsls	r3, r3, #8
 800e2a8:	b21a      	sxth	r2, r3
 800e2aa:	8abb      	ldrh	r3, [r7, #20]
 800e2ac:	0a1b      	lsrs	r3, r3, #8
 800e2ae:	b29b      	uxth	r3, r3
 800e2b0:	b21b      	sxth	r3, r3
 800e2b2:	4313      	orrs	r3, r2
 800e2b4:	b21b      	sxth	r3, r3
 800e2b6:	82bb      	strh	r3, [r7, #20]
            break;
 800e2b8:	e009      	b.n	800e2ce <prvGetPrivatePortNumber+0x9e>
        }
        else
        {
            usResult = 0;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	82bb      	strh	r3, [r7, #20]
        }

        usIterations--;
 800e2be:	8afb      	ldrh	r3, [r7, #22]
 800e2c0:	3b01      	subs	r3, #1
 800e2c2:	82fb      	strh	r3, [r7, #22]
    }
    while( usIterations > 0U );
 800e2c4:	8afb      	ldrh	r3, [r7, #22]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d1c7      	bne.n	800e25a <prvGetPrivatePortNumber+0x2a>
 800e2ca:	e000      	b.n	800e2ce <prvGetPrivatePortNumber+0x9e>
            break;
 800e2cc:	bf00      	nop

    return usResult;
 800e2ce:	8abb      	ldrh	r3, [r7, #20]
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	3718      	adds	r7, #24
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}
 800e2d8:	200012b0 	.word	0x200012b0
 800e2dc:	2000129c 	.word	0x2000129c

0800e2e0 <pxListFindListItemWithValue>:
 * @return The list item holding the value being searched for. If nothing is found,
 *         then a NULL is returned.
 */
static const ListItem_t * pxListFindListItemWithValue( const List_t * pxList,
                                                       TickType_t xWantedItemValue )
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b086      	sub	sp, #24
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
 800e2e8:	6039      	str	r1, [r7, #0]
    const ListItem_t * pxResult = NULL;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	617b      	str	r3, [r7, #20]

    if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 800e2ee:	f7fa fe0b 	bl	8008f08 <xIPIsNetworkTaskReady>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d018      	beq.n	800e32a <pxListFindListItemWithValue+0x4a>
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d015      	beq.n	800e32a <pxListFindListItemWithValue+0x4a>
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxList->xListEnd ) );
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	3308      	adds	r3, #8
 800e302:	60fb      	str	r3, [r7, #12]

        for( pxIterator = listGET_NEXT( pxEnd );
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	685b      	ldr	r3, [r3, #4]
 800e308:	613b      	str	r3, [r7, #16]
 800e30a:	e00a      	b.n	800e322 <pxListFindListItemWithValue+0x42>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800e30c:	693b      	ldr	r3, [r7, #16]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	683a      	ldr	r2, [r7, #0]
 800e312:	429a      	cmp	r2, r3
 800e314:	d102      	bne.n	800e31c <pxListFindListItemWithValue+0x3c>
            {
                pxResult = pxIterator;
 800e316:	693b      	ldr	r3, [r7, #16]
 800e318:	617b      	str	r3, [r7, #20]
                break;
 800e31a:	e006      	b.n	800e32a <pxListFindListItemWithValue+0x4a>
             pxIterator = listGET_NEXT( pxIterator ) )
 800e31c:	693b      	ldr	r3, [r7, #16]
 800e31e:	685b      	ldr	r3, [r3, #4]
 800e320:	613b      	str	r3, [r7, #16]
             pxIterator != pxEnd;
 800e322:	693a      	ldr	r2, [r7, #16]
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	429a      	cmp	r2, r3
 800e328:	d1f0      	bne.n	800e30c <pxListFindListItemWithValue+0x2c>
            }
        }
    }

    return pxResult;
 800e32a:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800e32c:	4618      	mov	r0, r3
 800e32e:	3718      	adds	r7, #24
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}

0800e334 <pxUDPSocketLookup>:
 *                         is to be found.
 *
 * @return The socket owning the port if found or else NULL.
 */
FreeRTOS_Socket_t * pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b084      	sub	sp, #16
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
    const ListItem_t * pxListItem;
    FreeRTOS_Socket_t * pxSocket = NULL;
 800e33c:	2300      	movs	r3, #0
 800e33e:	60fb      	str	r3, [r7, #12]

    /* Looking up a socket is quite simple, find a match with the local port.
     *
     * See if there is a list item associated with the port number on the
     * list of bound sockets. */
    pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 800e340:	6879      	ldr	r1, [r7, #4]
 800e342:	480b      	ldr	r0, [pc, #44]	@ (800e370 <pxUDPSocketLookup+0x3c>)
 800e344:	f7ff ffcc 	bl	800e2e0 <pxListFindListItemWithValue>
 800e348:	60b8      	str	r0, [r7, #8]

    if( pxListItem != NULL )
 800e34a:	68bb      	ldr	r3, [r7, #8]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d00a      	beq.n	800e366 <pxUDPSocketLookup+0x32>
    {
        /* The owner of the list item is the socket itself. */
        pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxListItem ) );
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	68db      	ldr	r3, [r3, #12]
 800e354:	60fb      	str	r3, [r7, #12]
        configASSERT( pxSocket != NULL );
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d104      	bne.n	800e366 <pxUDPSocketLookup+0x32>
 800e35c:	f640 4111 	movw	r1, #3089	@ 0xc11
 800e360:	4804      	ldr	r0, [pc, #16]	@ (800e374 <pxUDPSocketLookup+0x40>)
 800e362:	f7f2 fed9 	bl	8001118 <vAssertCalled>
    }

    return pxSocket;
 800e366:	68fb      	ldr	r3, [r7, #12]
}
 800e368:	4618      	mov	r0, r3
 800e36a:	3710      	adds	r7, #16
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}
 800e370:	2000129c 	.word	0x2000129c
 800e374:	08023f08 	.word	0x08023f08

0800e378 <FreeRTOS_inet_ntoa>:
 * @return The pointer returned will be same as pcBuffer and will have the address
 *         stored in the location.
 */
const char * FreeRTOS_inet_ntoa( uint32_t ulIPAddress,
                                 char * pcBuffer )
{
 800e378:	b480      	push	{r7}
 800e37a:	b08b      	sub	sp, #44	@ 0x2c
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
 800e380:	6039      	str	r1, [r7, #0]
    socklen_t uxNibble;
    socklen_t uxIndex = 0;
 800e382:	2300      	movs	r3, #0
 800e384:	623b      	str	r3, [r7, #32]
    const uint8_t * pucAddress = ( const uint8_t * ) &( ulIPAddress );
 800e386:	1d3b      	adds	r3, r7, #4
 800e388:	617b      	str	r3, [r7, #20]
    const char * pcResult = pcBuffer;
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	613b      	str	r3, [r7, #16]

    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800e38e:	2300      	movs	r3, #0
 800e390:	627b      	str	r3, [r7, #36]	@ 0x24
 800e392:	e062      	b.n	800e45a <FreeRTOS_inet_ntoa+0xe2>
    {
        uint8_t pucDigits[ sockDIGIT_COUNT ];
        uint8_t ucValue = pucAddress[ uxNibble ];
 800e394:	697a      	ldr	r2, [r7, #20]
 800e396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e398:	4413      	add	r3, r2
 800e39a:	781b      	ldrb	r3, [r3, #0]
 800e39c:	77fb      	strb	r3, [r7, #31]
        socklen_t uxSource = ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U;
 800e39e:	2302      	movs	r3, #2
 800e3a0:	61bb      	str	r3, [r7, #24]

        for( ; ; )
        {
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800e3a2:	7ffa      	ldrb	r2, [r7, #31]
 800e3a4:	4b32      	ldr	r3, [pc, #200]	@ (800e470 <FreeRTOS_inet_ntoa+0xf8>)
 800e3a6:	fba3 1302 	umull	r1, r3, r3, r2
 800e3aa:	08d9      	lsrs	r1, r3, #3
 800e3ac:	460b      	mov	r3, r1
 800e3ae:	009b      	lsls	r3, r3, #2
 800e3b0:	440b      	add	r3, r1
 800e3b2:	005b      	lsls	r3, r3, #1
 800e3b4:	1ad3      	subs	r3, r2, r3
 800e3b6:	b2d9      	uxtb	r1, r3
 800e3b8:	f107 020c 	add.w	r2, r7, #12
 800e3bc:	69bb      	ldr	r3, [r7, #24]
 800e3be:	4413      	add	r3, r2
 800e3c0:	460a      	mov	r2, r1
 800e3c2:	701a      	strb	r2, [r3, #0]
            ucValue /= ( uint8_t ) 10U;
 800e3c4:	7ffb      	ldrb	r3, [r7, #31]
 800e3c6:	4a2a      	ldr	r2, [pc, #168]	@ (800e470 <FreeRTOS_inet_ntoa+0xf8>)
 800e3c8:	fba2 2303 	umull	r2, r3, r2, r3
 800e3cc:	08db      	lsrs	r3, r3, #3
 800e3ce:	77fb      	strb	r3, [r7, #31]

            if( uxSource == 1U )
 800e3d0:	69bb      	ldr	r3, [r7, #24]
 800e3d2:	2b01      	cmp	r3, #1
 800e3d4:	d003      	beq.n	800e3de <FreeRTOS_inet_ntoa+0x66>
            {
                break;
            }

            uxSource--;
 800e3d6:	69bb      	ldr	r3, [r7, #24]
 800e3d8:	3b01      	subs	r3, #1
 800e3da:	61bb      	str	r3, [r7, #24]
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800e3dc:	e7e1      	b.n	800e3a2 <FreeRTOS_inet_ntoa+0x2a>
                break;
 800e3de:	bf00      	nop
        }

        pucDigits[ 0 ] = ucValue;
 800e3e0:	7ffb      	ldrb	r3, [r7, #31]
 800e3e2:	733b      	strb	r3, [r7, #12]

        /* Skip leading zeros. */
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	61bb      	str	r3, [r7, #24]
 800e3e8:	e009      	b.n	800e3fe <FreeRTOS_inet_ntoa+0x86>
        {
            if( pucDigits[ uxSource ] != 0U )
 800e3ea:	f107 020c 	add.w	r2, r7, #12
 800e3ee:	69bb      	ldr	r3, [r7, #24]
 800e3f0:	4413      	add	r3, r2
 800e3f2:	781b      	ldrb	r3, [r3, #0]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d106      	bne.n	800e406 <FreeRTOS_inet_ntoa+0x8e>
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800e3f8:	69bb      	ldr	r3, [r7, #24]
 800e3fa:	3301      	adds	r3, #1
 800e3fc:	61bb      	str	r3, [r7, #24]
 800e3fe:	69bb      	ldr	r3, [r7, #24]
 800e400:	2b01      	cmp	r3, #1
 800e402:	d9f2      	bls.n	800e3ea <FreeRTOS_inet_ntoa+0x72>
 800e404:	e012      	b.n	800e42c <FreeRTOS_inet_ntoa+0xb4>
            {
                break;
 800e406:	bf00      	nop
            }
        }

        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800e408:	e010      	b.n	800e42c <FreeRTOS_inet_ntoa+0xb4>
        {
            pcBuffer[ uxIndex ] = ( char ) ( pucDigits[ uxSource ] + ( char ) '0' );
 800e40a:	f107 020c 	add.w	r2, r7, #12
 800e40e:	69bb      	ldr	r3, [r7, #24]
 800e410:	4413      	add	r3, r2
 800e412:	781a      	ldrb	r2, [r3, #0]
 800e414:	6839      	ldr	r1, [r7, #0]
 800e416:	6a3b      	ldr	r3, [r7, #32]
 800e418:	440b      	add	r3, r1
 800e41a:	3230      	adds	r2, #48	@ 0x30
 800e41c:	b2d2      	uxtb	r2, r2
 800e41e:	701a      	strb	r2, [r3, #0]
            uxIndex++;
 800e420:	6a3b      	ldr	r3, [r7, #32]
 800e422:	3301      	adds	r3, #1
 800e424:	623b      	str	r3, [r7, #32]
        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800e426:	69bb      	ldr	r3, [r7, #24]
 800e428:	3301      	adds	r3, #1
 800e42a:	61bb      	str	r3, [r7, #24]
 800e42c:	69bb      	ldr	r3, [r7, #24]
 800e42e:	2b02      	cmp	r3, #2
 800e430:	d9eb      	bls.n	800e40a <FreeRTOS_inet_ntoa+0x92>
        }

        if( uxNibble < ( ipSIZE_OF_IPv4_ADDRESS - 1U ) )
 800e432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e434:	2b02      	cmp	r3, #2
 800e436:	d805      	bhi.n	800e444 <FreeRTOS_inet_ntoa+0xcc>
        {
            pcBuffer[ uxIndex ] = '.';
 800e438:	683a      	ldr	r2, [r7, #0]
 800e43a:	6a3b      	ldr	r3, [r7, #32]
 800e43c:	4413      	add	r3, r2
 800e43e:	222e      	movs	r2, #46	@ 0x2e
 800e440:	701a      	strb	r2, [r3, #0]
 800e442:	e004      	b.n	800e44e <FreeRTOS_inet_ntoa+0xd6>
        }
        else
        {
            pcBuffer[ uxIndex ] = '\0';
 800e444:	683a      	ldr	r2, [r7, #0]
 800e446:	6a3b      	ldr	r3, [r7, #32]
 800e448:	4413      	add	r3, r2
 800e44a:	2200      	movs	r2, #0
 800e44c:	701a      	strb	r2, [r3, #0]
        }

        uxIndex++;
 800e44e:	6a3b      	ldr	r3, [r7, #32]
 800e450:	3301      	adds	r3, #1
 800e452:	623b      	str	r3, [r7, #32]
    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800e454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e456:	3301      	adds	r3, #1
 800e458:	627b      	str	r3, [r7, #36]	@ 0x24
 800e45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e45c:	2b03      	cmp	r3, #3
 800e45e:	d999      	bls.n	800e394 <FreeRTOS_inet_ntoa+0x1c>
    }

    return pcResult;
 800e460:	693b      	ldr	r3, [r7, #16]
}
 800e462:	4618      	mov	r0, r3
 800e464:	372c      	adds	r7, #44	@ 0x2c
 800e466:	46bd      	mov	sp, r7
 800e468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46c:	4770      	bx	lr
 800e46e:	bf00      	nop
 800e470:	cccccccd 	.word	0xcccccccd

0800e474 <FreeRTOS_inet_ntop>:
 */
const char * FreeRTOS_inet_ntop( BaseType_t xAddressFamily,
                                 const void * pvSource,
                                 char * pcDestination,
                                 socklen_t uxSize )
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b086      	sub	sp, #24
 800e478:	af00      	add	r7, sp, #0
 800e47a:	60f8      	str	r0, [r7, #12]
 800e47c:	60b9      	str	r1, [r7, #8]
 800e47e:	607a      	str	r2, [r7, #4]
 800e480:	603b      	str	r3, [r7, #0]
    const char * pcResult;

    /* Printable struct sockaddr to string. */
    switch( xAddressFamily )
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	2b02      	cmp	r3, #2
 800e486:	d003      	beq.n	800e490 <FreeRTOS_inet_ntop+0x1c>
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	2b0a      	cmp	r3, #10
 800e48c:	d007      	beq.n	800e49e <FreeRTOS_inet_ntop+0x2a>
 800e48e:	e00d      	b.n	800e4ac <FreeRTOS_inet_ntop+0x38>
    {
        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                pcResult = FreeRTOS_inet_ntop4( pvSource, pcDestination, uxSize );
 800e490:	683a      	ldr	r2, [r7, #0]
 800e492:	6879      	ldr	r1, [r7, #4]
 800e494:	68b8      	ldr	r0, [r7, #8]
 800e496:	f7fb fc8d 	bl	8009db4 <FreeRTOS_inet_ntop4>
 800e49a:	6178      	str	r0, [r7, #20]
                break;
 800e49c:	e009      	b.n	800e4b2 <FreeRTOS_inet_ntop+0x3e>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                pcResult = FreeRTOS_inet_ntop6( pvSource, pcDestination, uxSize );
 800e49e:	683a      	ldr	r2, [r7, #0]
 800e4a0:	6879      	ldr	r1, [r7, #4]
 800e4a2:	68b8      	ldr	r0, [r7, #8]
 800e4a4:	f7fc f9c1 	bl	800a82a <FreeRTOS_inet_ntop6>
 800e4a8:	6178      	str	r0, [r7, #20]
                break;
 800e4aa:	e002      	b.n	800e4b2 <FreeRTOS_inet_ntop+0x3e>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* errno should be set to pdFREERTOS_ERRNO_EAFNOSUPPORT. */
            pcResult = NULL;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	617b      	str	r3, [r7, #20]
            break;
 800e4b0:	bf00      	nop
    }

    return pcResult;
 800e4b2:	697b      	ldr	r3, [r7, #20]
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3718      	adds	r7, #24
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}

0800e4bc <FreeRTOS_GetLocalAddress>:
 *
 * @return Size of the freertos_sockaddr structure.
 */
size_t FreeRTOS_GetLocalAddress( ConstSocket_t xSocket,
                                 struct freertos_sockaddr * pxAddress )
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b084      	sub	sp, #16
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
 800e4c4:	6039      	str	r1, [r7, #0]
    const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	60fb      	str	r3, [r7, #12]

    switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	7a1b      	ldrb	r3, [r3, #8]
 800e4ce:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e4d2:	b2db      	uxtb	r3, r3
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d002      	beq.n	800e4de <FreeRTOS_GetLocalAddress+0x22>
 800e4d8:	2b01      	cmp	r3, #1
 800e4da:	d02a      	beq.n	800e532 <FreeRTOS_GetLocalAddress+0x76>
                break;
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* MISRA 16.4 Compliance */
            break;
 800e4dc:	e044      	b.n	800e568 <FreeRTOS_GetLocalAddress+0xac>
                pxAddress->sin_family = FREERTOS_AF_INET;
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	2202      	movs	r2, #2
 800e4e2:	705a      	strb	r2, [r3, #1]
                pxAddress->sin_len = ( uint8_t ) sizeof( *pxAddress );
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	2218      	movs	r2, #24
 800e4e8:	701a      	strb	r2, [r3, #0]
                pxAddress->sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4ee:	061a      	lsls	r2, r3, #24
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4f4:	021b      	lsls	r3, r3, #8
 800e4f6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e4fa:	431a      	orrs	r2, r3
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e500:	0a1b      	lsrs	r3, r3, #8
 800e502:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e506:	431a      	orrs	r2, r3
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e50c:	0e1b      	lsrs	r3, r3, #24
 800e50e:	431a      	orrs	r2, r3
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	609a      	str	r2, [r3, #8]
                pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800e518:	021b      	lsls	r3, r3, #8
 800e51a:	b21a      	sxth	r2, r3
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800e520:	0a1b      	lsrs	r3, r3, #8
 800e522:	b29b      	uxth	r3, r3
 800e524:	b21b      	sxth	r3, r3
 800e526:	4313      	orrs	r3, r2
 800e528:	b21b      	sxth	r3, r3
 800e52a:	b29a      	uxth	r2, r3
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	805a      	strh	r2, [r3, #2]
                break;
 800e530:	e01a      	b.n	800e568 <FreeRTOS_GetLocalAddress+0xac>
                pxAddress->sin_family = FREERTOS_AF_INET6;
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	220a      	movs	r2, #10
 800e536:	705a      	strb	r2, [r3, #1]
                ( void ) memcpy( pxAddress->sin_address.xIP_IPv6.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( pxAddress->sin_address.xIP_IPv6.ucBytes ) );
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	f103 0008 	add.w	r0, r3, #8
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	3328      	adds	r3, #40	@ 0x28
 800e542:	2210      	movs	r2, #16
 800e544:	4619      	mov	r1, r3
 800e546:	f012 fa0d 	bl	8020964 <memcpy>
                pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800e54e:	021b      	lsls	r3, r3, #8
 800e550:	b21a      	sxth	r2, r3
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800e556:	0a1b      	lsrs	r3, r3, #8
 800e558:	b29b      	uxth	r3, r3
 800e55a:	b21b      	sxth	r3, r3
 800e55c:	4313      	orrs	r3, r2
 800e55e:	b21b      	sxth	r3, r3
 800e560:	b29a      	uxth	r2, r3
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	805a      	strh	r2, [r3, #2]
                break;
 800e566:	bf00      	nop
    }

    return sizeof( *pxAddress );
 800e568:	2318      	movs	r3, #24
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3710      	adds	r7, #16
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}

0800e572 <vSocketWakeUpUser>:
 * @brief Wake up the user of the given socket through event-groups.
 *
 * @param[in] pxSocket The socket whose user is to be woken up.
 */
void vSocketWakeUpUser( FreeRTOS_Socket_t * pxSocket )
{
 800e572:	b580      	push	{r7, lr}
 800e574:	b084      	sub	sp, #16
 800e576:	af00      	add	r7, sp, #0
 800e578:	6078      	str	r0, [r7, #4]
/* _HT_ must work this out, now vSocketWakeUpUser will be called for any important
 * event or transition */
    #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
    {
        if( pxSocket->pxUserSemaphore != NULL )
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d006      	beq.n	800e590 <vSocketWakeUpUser+0x1e>
        {
            ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800e586:	2300      	movs	r3, #0
 800e588:	2200      	movs	r2, #0
 800e58a:	2100      	movs	r1, #0
 800e58c:	f7f4 f95c 	bl	8002848 <xQueueGenericSend>
    }
    #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
    {
        if( pxSocket->pxSocketSet != NULL )
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e594:	2b00      	cmp	r3, #0
 800e596:	d015      	beq.n	800e5c4 <vSocketWakeUpUser+0x52>
        {
            EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & ( ( EventBits_t ) eSELECT_ALL );
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	0a1b      	lsrs	r3, r3, #8
 800e59e:	f003 030f 	and.w	r3, r3, #15
 800e5a2:	60fb      	str	r3, [r7, #12]

            if( xSelectBits != 0U )
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d00c      	beq.n	800e5c4 <vSocketWakeUpUser+0x52>
            {
                pxSocket->xSocketBits |= xSelectBits;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	431a      	orrs	r2, r3
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	649a      	str	r2, [r3, #72]	@ 0x48
                ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	68f9      	ldr	r1, [r7, #12]
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f7f3 fe66 	bl	8002290 <xEventGroupSetBits>
            }
        }

        pxSocket->xEventBits &= ( EventBits_t ) eSOCKET_ALL;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	601a      	str	r2, [r3, #0]
    }
    #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

    if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0U ) )
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	685b      	ldr	r3, [r3, #4]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d00b      	beq.n	800e5f0 <vSocketWakeUpUser+0x7e>
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d007      	beq.n	800e5f0 <vSocketWakeUpUser+0x7e>
    {
        ( void ) xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	685a      	ldr	r2, [r3, #4]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	4619      	mov	r1, r3
 800e5ea:	4610      	mov	r0, r2
 800e5ec:	f7f3 fe50 	bl	8002290 <xEventGroupSetBits>
    }

    pxSocket->xEventBits = 0U;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	601a      	str	r2, [r3, #0]
}
 800e5f6:	bf00      	nop
 800e5f8:	3710      	adds	r7, #16
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}

0800e5fe <bMayConnect>:
 * @param[in] pxSocket The socket trying to connect.
 *
 * @return It may return: -EINPROGRESS, -EAGAIN, or 0 for OK.
 */
    static BaseType_t bMayConnect( FreeRTOS_Socket_t const * pxSocket )
    {
 800e5fe:	b480      	push	{r7}
 800e600:	b085      	sub	sp, #20
 800e602:	af00      	add	r7, sp, #0
 800e604:	6078      	str	r0, [r7, #4]
        BaseType_t xResult;

        eIPTCPState_t eState = pxSocket->u.xTCP.eTCPState;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800e60c:	72fb      	strb	r3, [r7, #11]

        switch( eState )
 800e60e:	7afb      	ldrb	r3, [r7, #11]
 800e610:	2b08      	cmp	r3, #8
 800e612:	d006      	beq.n	800e622 <bMayConnect+0x24>
 800e614:	2b08      	cmp	r3, #8
 800e616:	dc0b      	bgt.n	800e630 <bMayConnect+0x32>
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d002      	beq.n	800e622 <bMayConnect+0x24>
 800e61c:	2b02      	cmp	r3, #2
 800e61e:	d003      	beq.n	800e628 <bMayConnect+0x2a>
 800e620:	e006      	b.n	800e630 <bMayConnect+0x32>
        {
            case eCLOSED:
            case eCLOSE_WAIT:
                xResult = 0;
 800e622:	2300      	movs	r3, #0
 800e624:	60fb      	str	r3, [r7, #12]
                break;
 800e626:	e007      	b.n	800e638 <bMayConnect+0x3a>

            case eCONNECT_SYN:
                xResult = -pdFREERTOS_ERRNO_EINPROGRESS;
 800e628:	f06f 0376 	mvn.w	r3, #118	@ 0x76
 800e62c:	60fb      	str	r3, [r7, #12]
                break;
 800e62e:	e003      	b.n	800e638 <bMayConnect+0x3a>
            case eFIN_WAIT_2:
            case eCLOSING:
            case eLAST_ACK:
            case eTIME_WAIT:
            default:
                xResult = -pdFREERTOS_ERRNO_EAGAIN;
 800e630:	f06f 030a 	mvn.w	r3, #10
 800e634:	60fb      	str	r3, [r7, #12]
                break;
 800e636:	bf00      	nop
        }

        return xResult;
 800e638:	68fb      	ldr	r3, [r7, #12]
    }
 800e63a:	4618      	mov	r0, r3
 800e63c:	3714      	adds	r7, #20
 800e63e:	46bd      	mov	sp, r7
 800e640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e644:	4770      	bx	lr
	...

0800e648 <prvTCPConnectStart>:
 *
 * @return 0 on successful checks or a negative error code.
 */
    static BaseType_t prvTCPConnectStart( FreeRTOS_Socket_t * pxSocket,
                                          struct freertos_sockaddr const * pxAddress )
    {
 800e648:	b580      	push	{r7, lr}
 800e64a:	b084      	sub	sp, #16
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
 800e650:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = 0;
 800e652:	2300      	movs	r3, #0
 800e654:	60fb      	str	r3, [r7, #12]

        if( pxAddress == NULL )
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d103      	bne.n	800e664 <prvTCPConnectStart+0x1c>
        {
            /* NULL address passed to the function. Invalid value. */
            xResult = -pdFREERTOS_ERRNO_EINVAL;
 800e65c:	f06f 0315 	mvn.w	r3, #21
 800e660:	60fb      	str	r3, [r7, #12]
 800e662:	e01f      	b.n	800e6a4 <prvTCPConnectStart+0x5c>
        }
        else if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdFALSE ) == pdFALSE )
 800e664:	2200      	movs	r2, #0
 800e666:	2106      	movs	r1, #6
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f7fe fc71 	bl	800cf50 <prvValidSocket>
 800e66e:	4603      	mov	r3, r0
 800e670:	2b00      	cmp	r3, #0
 800e672:	d103      	bne.n	800e67c <prvTCPConnectStart+0x34>
        {
            /* Not a valid socket or wrong type */
            xResult = -pdFREERTOS_ERRNO_EBADF;
 800e674:	f06f 0308 	mvn.w	r3, #8
 800e678:	60fb      	str	r3, [r7, #12]
 800e67a:	e013      	b.n	800e6a4 <prvTCPConnectStart+0x5c>
        }
        else if( FreeRTOS_issocketconnected( pxSocket ) > 0 )
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f000 ff49 	bl	800f514 <FreeRTOS_issocketconnected>
 800e682:	4603      	mov	r3, r0
 800e684:	2b00      	cmp	r3, #0
 800e686:	dd03      	ble.n	800e690 <prvTCPConnectStart+0x48>
        {
            /* The socket is already connected. */
            xResult = -pdFREERTOS_ERRNO_EISCONN;
 800e688:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800e68c:	60fb      	str	r3, [r7, #12]
 800e68e:	e009      	b.n	800e6a4 <prvTCPConnectStart+0x5c>
        }
        else if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	69db      	ldr	r3, [r3, #28]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d105      	bne.n	800e6a4 <prvTCPConnectStart+0x5c>
        {
            /* Bind the socket to the port that the client task will send from.
             * Non-standard, so the error returned is that returned by bind(). */
            xResult = FreeRTOS_bind( pxSocket, NULL, 0U );
 800e698:	2200      	movs	r2, #0
 800e69a:	2100      	movs	r1, #0
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f7fe ff4f 	bl	800d540 <FreeRTOS_bind>
 800e6a2:	60f8      	str	r0, [r7, #12]
        else
        {
            /* The socket is valid, not yet connected, and already bound to a port number. */
        }

        if( xResult == 0 )
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	f040 80a6 	bne.w	800e7f8 <prvTCPConnectStart+0x1b0>
        {
            /* Check if it makes any sense to wait for a connect event, this condition
             * might change while sleeping, so it must be checked within each loop */
            xResult = bMayConnect( pxSocket ); /* -EINPROGRESS, -EAGAIN, or 0 for OK */
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f7ff ffa6 	bl	800e5fe <bMayConnect>
 800e6b2:	60f8      	str	r0, [r7, #12]

            /* Start the connect procedure, kernel will start working on it */
            if( xResult == 0 )
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	f040 809e 	bne.w	800e7f8 <prvTCPConnectStart+0x1b0>
            {
                pxSocket->u.xTCP.bits.bConnPrepared = pdFALSE;
 800e6bc:	687a      	ldr	r2, [r7, #4]
 800e6be:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800e6c2:	f36f 03c3 	bfc	r3, #3, #1
 800e6c6:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.ucRepCount = 0U;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                switch( pxAddress->sin_family )
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	785b      	ldrb	r3, [r3, #1]
 800e6d6:	2b02      	cmp	r3, #2
 800e6d8:	d027      	beq.n	800e72a <prvTCPConnectStart+0xe2>
 800e6da:	2b0a      	cmp	r3, #10
 800e6dc:	d168      	bne.n	800e7b0 <prvTCPConnectStart+0x168>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case FREERTOS_AF_INET6:
                            pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800e6de:	687a      	ldr	r2, [r7, #4]
 800e6e0:	7a13      	ldrb	r3, [r2, #8]
 800e6e2:	f043 0301 	orr.w	r3, r3, #1
 800e6e6:	7213      	strb	r3, [r2, #8]
                            FreeRTOS_printf( ( "FreeRTOS_connect: %u to %pip port %u\n",
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	f103 0108 	add.w	r1, r3, #8
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	885b      	ldrh	r3, [r3, #2]
 800e6f8:	021b      	lsls	r3, r3, #8
 800e6fa:	b21a      	sxth	r2, r3
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	885b      	ldrh	r3, [r3, #2]
 800e700:	0a1b      	lsrs	r3, r3, #8
 800e702:	b29b      	uxth	r3, r3
 800e704:	b21b      	sxth	r3, r3
 800e706:	4313      	orrs	r3, r2
 800e708:	b21b      	sxth	r3, r3
 800e70a:	b29b      	uxth	r3, r3
 800e70c:	460a      	mov	r2, r1
 800e70e:	4601      	mov	r1, r0
 800e710:	483c      	ldr	r0, [pc, #240]	@ (800e804 <prvTCPConnectStart+0x1bc>)
 800e712:	f011 ff0b 	bl	802052c <lUDPLoggingPrintf>
                                               pxSocket->usLocalPort, ( void * ) pxAddress->sin_address.xIP_IPv6.ucBytes,
                                               FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                            ( void ) memcpy( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	3308      	adds	r3, #8
 800e720:	2210      	movs	r2, #16
 800e722:	4619      	mov	r1, r3
 800e724:	f012 f91e 	bl	8020964 <memcpy>
                            break;
 800e728:	e046      	b.n	800e7b8 <prvTCPConnectStart+0x170>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    #if ( ipconfigUSE_IPv4 != 0 )
                        case FREERTOS_AF_INET4:
                            pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800e72a:	687a      	ldr	r2, [r7, #4]
 800e72c:	7a13      	ldrb	r3, [r2, #8]
 800e72e:	f36f 0300 	bfc	r3, #0, #1
 800e732:	7213      	strb	r3, [r2, #8]
                            FreeRTOS_printf( ( "FreeRTOS_connect: %u to %xip:%u\n",
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800e738:	4618      	mov	r0, r3
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	689b      	ldr	r3, [r3, #8]
 800e73e:	061a      	lsls	r2, r3, #24
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	689b      	ldr	r3, [r3, #8]
 800e744:	021b      	lsls	r3, r3, #8
 800e746:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e74a:	431a      	orrs	r2, r3
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	689b      	ldr	r3, [r3, #8]
 800e750:	0a1b      	lsrs	r3, r3, #8
 800e752:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e756:	431a      	orrs	r2, r3
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	689b      	ldr	r3, [r3, #8]
 800e75c:	0e1b      	lsrs	r3, r3, #24
 800e75e:	ea42 0103 	orr.w	r1, r2, r3
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	885b      	ldrh	r3, [r3, #2]
 800e766:	021b      	lsls	r3, r3, #8
 800e768:	b21a      	sxth	r2, r3
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	885b      	ldrh	r3, [r3, #2]
 800e76e:	0a1b      	lsrs	r3, r3, #8
 800e770:	b29b      	uxth	r3, r3
 800e772:	b21b      	sxth	r3, r3
 800e774:	4313      	orrs	r3, r2
 800e776:	b21b      	sxth	r3, r3
 800e778:	b29b      	uxth	r3, r3
 800e77a:	460a      	mov	r2, r1
 800e77c:	4601      	mov	r1, r0
 800e77e:	4822      	ldr	r0, [pc, #136]	@ (800e808 <prvTCPConnectStart+0x1c0>)
 800e780:	f011 fed4 	bl	802052c <lUDPLoggingPrintf>
                                               pxSocket->usLocalPort, ( unsigned int ) FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 ), FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                            pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 = FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 );
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	689b      	ldr	r3, [r3, #8]
 800e788:	061a      	lsls	r2, r3, #24
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	689b      	ldr	r3, [r3, #8]
 800e78e:	021b      	lsls	r3, r3, #8
 800e790:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e794:	431a      	orrs	r2, r3
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	689b      	ldr	r3, [r3, #8]
 800e79a:	0a1b      	lsrs	r3, r3, #8
 800e79c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e7a0:	431a      	orrs	r2, r3
 800e7a2:	683b      	ldr	r3, [r7, #0]
 800e7a4:	689b      	ldr	r3, [r3, #8]
 800e7a6:	0e1b      	lsrs	r3, r3, #24
 800e7a8:	431a      	orrs	r2, r3
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	655a      	str	r2, [r3, #84]	@ 0x54
                            break;
 800e7ae:	e003      	b.n	800e7b8 <prvTCPConnectStart+0x170>
                    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                    default:
                        FreeRTOS_debug_printf( ( "FreeRTOS_connect: Undefined sin_family \n" ) );
 800e7b0:	4816      	ldr	r0, [pc, #88]	@ (800e80c <prvTCPConnectStart+0x1c4>)
 800e7b2:	f011 febb 	bl	802052c <lUDPLoggingPrintf>
                        break;
 800e7b6:	bf00      	nop
                }

                /* Port on remote machine. */
                pxSocket->u.xTCP.usRemotePort = FreeRTOS_ntohs( pxAddress->sin_port );
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	885b      	ldrh	r3, [r3, #2]
 800e7bc:	021b      	lsls	r3, r3, #8
 800e7be:	b21a      	sxth	r2, r3
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	885b      	ldrh	r3, [r3, #2]
 800e7c4:	0a1b      	lsrs	r3, r3, #8
 800e7c6:	b29b      	uxth	r3, r3
 800e7c8:	b21b      	sxth	r3, r3
 800e7ca:	4313      	orrs	r3, r2
 800e7cc:	b21b      	sxth	r3, r3
 800e7ce:	b29a      	uxth	r2, r3
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

                /* (client) internal state: socket wants to send a connect. */
                vTCPStateChange( pxSocket, eCONNECT_SYN );
 800e7d6:	2102      	movs	r1, #2
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f001 fc59 	bl	8010090 <vTCPStateChange>

                /* To start an active connect. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2201      	movs	r2, #1
 800e7e2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                if( xSendEventToIPTask( eTCPTimerEvent ) != pdPASS )
 800e7e6:	2006      	movs	r0, #6
 800e7e8:	f7f9 ffdc 	bl	80087a4 <xSendEventToIPTask>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	2b01      	cmp	r3, #1
 800e7f0:	d002      	beq.n	800e7f8 <prvTCPConnectStart+0x1b0>
                {
                    xResult = -pdFREERTOS_ERRNO_ECANCELED;
 800e7f2:	f06f 038b 	mvn.w	r3, #139	@ 0x8b
 800e7f6:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        return xResult;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
    }
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	3710      	adds	r7, #16
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}
 800e802:	bf00      	nop
 800e804:	08024248 	.word	0x08024248
 800e808:	08024270 	.word	0x08024270
 800e80c:	08024294 	.word	0x08024294

0800e810 <FreeRTOS_connect>:
 *         error code is returned.
 */
    BaseType_t FreeRTOS_connect( Socket_t xClientSocket,
                                 const struct freertos_sockaddr * pxAddress,
                                 socklen_t xAddressLength )
    {
 800e810:	b580      	push	{r7, lr}
 800e812:	b094      	sub	sp, #80	@ 0x50
 800e814:	af02      	add	r7, sp, #8
 800e816:	60f8      	str	r0, [r7, #12]
 800e818:	60b9      	str	r1, [r7, #8]
 800e81a:	607a      	str	r2, [r7, #4]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xClientSocket;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800e820:	2300      	movs	r3, #0
 800e822:	647b      	str	r3, [r7, #68]	@ 0x44
        BaseType_t xResult = -pdFREERTOS_ERRNO_EINVAL;
 800e824:	f06f 0315 	mvn.w	r3, #21
 800e828:	643b      	str	r3, [r7, #64]	@ 0x40
        TimeOut_t xTimeOut;

        #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
            struct freertos_sockaddr xTempAddress;

            if( ( pxAddress != NULL ) && ( pxAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxAddress->sin_family != FREERTOS_AF_INET ) )
 800e82a:	68bb      	ldr	r3, [r7, #8]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d013      	beq.n	800e858 <FreeRTOS_connect+0x48>
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	785b      	ldrb	r3, [r3, #1]
 800e834:	2b0a      	cmp	r3, #10
 800e836:	d00f      	beq.n	800e858 <FreeRTOS_connect+0x48>
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	785b      	ldrb	r3, [r3, #1]
 800e83c:	2b02      	cmp	r3, #2
 800e83e:	d00b      	beq.n	800e858 <FreeRTOS_connect+0x48>
            {
                ( void ) memcpy( &xTempAddress, pxAddress, sizeof( struct freertos_sockaddr ) );
 800e840:	f107 0314 	add.w	r3, r7, #20
 800e844:	2218      	movs	r2, #24
 800e846:	68b9      	ldr	r1, [r7, #8]
 800e848:	4618      	mov	r0, r3
 800e84a:	f012 f88b 	bl	8020964 <memcpy>

                /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
                 *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
                xTempAddress.sin_family = FREERTOS_AF_INET;
 800e84e:	2302      	movs	r3, #2
 800e850:	757b      	strb	r3, [r7, #21]
                pxAddress = &xTempAddress;
 800e852:	f107 0314 	add.w	r3, r7, #20
 800e856:	60bb      	str	r3, [r7, #8]
            }
        #endif /* ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 ) */

        ( void ) xAddressLength;

        xResult = prvTCPConnectStart( pxSocket, pxAddress );
 800e858:	68b9      	ldr	r1, [r7, #8]
 800e85a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e85c:	f7ff fef4 	bl	800e648 <prvTCPConnectStart>
 800e860:	6438      	str	r0, [r7, #64]	@ 0x40

        if( xResult == 0 )
 800e862:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e864:	2b00      	cmp	r3, #0
 800e866:	d146      	bne.n	800e8f6 <FreeRTOS_connect+0xe6>
            /* And wait for the result */
            for( ; ; )
            {
                EventBits_t uxEvents;

                if( xTimed == pdFALSE )
 800e868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d110      	bne.n	800e890 <FreeRTOS_connect+0x80>
                {
                    /* Only in the first round, check for non-blocking */
                    xRemainingTime = pxSocket->xReceiveBlockTime;
 800e86e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e870:	6a1b      	ldr	r3, [r3, #32]
 800e872:	637b      	str	r3, [r7, #52]	@ 0x34

                    if( xRemainingTime == ( TickType_t ) 0 )
 800e874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e876:	2b00      	cmp	r3, #0
 800e878:	d103      	bne.n	800e882 <FreeRTOS_connect+0x72>
                    {
                        /* Not yet connected, correct state, non-blocking. */
                        xResult = -pdFREERTOS_ERRNO_EWOULDBLOCK;
 800e87a:	f06f 030a 	mvn.w	r3, #10
 800e87e:	643b      	str	r3, [r7, #64]	@ 0x40
                        break;
 800e880:	e039      	b.n	800e8f6 <FreeRTOS_connect+0xe6>
                    }

                    /* Don't get here a second time. */
                    xTimed = pdTRUE;
 800e882:	2301      	movs	r3, #1
 800e884:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* Fetch the current time */
                    vTaskSetTimeOutState( &xTimeOut );
 800e886:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e88a:	4618      	mov	r0, r3
 800e88c:	f7f5 fb68 	bl	8003f60 <vTaskSetTimeOutState>
                }

                /* Did it get connected while sleeping ? */
                xResult = FreeRTOS_issocketconnected( pxSocket );
 800e890:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e892:	f000 fe3f 	bl	800f514 <FreeRTOS_issocketconnected>
 800e896:	6438      	str	r0, [r7, #64]	@ 0x40

                /* Returns positive when connected, negative means an error */
                if( xResult < 0 )
 800e898:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	db2a      	blt.n	800e8f4 <FreeRTOS_connect+0xe4>
                {
                    /* Return the error */
                    break;
                }

                if( xResult > 0 )
 800e89e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	dd02      	ble.n	800e8aa <FreeRTOS_connect+0x9a>
                {
                    /* Socket now connected, return a zero */
                    xResult = 0;
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 800e8a8:	e025      	b.n	800e8f6 <FreeRTOS_connect+0xe6>
                }

                /* Is it allowed to sleep more? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800e8aa:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800e8ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e8b2:	4611      	mov	r1, r2
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	f7f5 fb8b 	bl	8003fd0 <xTaskCheckForTimeOut>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d003      	beq.n	800e8c8 <FreeRTOS_connect+0xb8>
                {
                    xResult = -pdFREERTOS_ERRNO_ETIMEDOUT;
 800e8c0:	f06f 0373 	mvn.w	r3, #115	@ 0x73
 800e8c4:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 800e8c6:	e016      	b.n	800e8f6 <FreeRTOS_connect+0xe6>
                }

                /* Go sleeping until we get any down-stream event */
                uxEvents = xEventGroupWaitBits( pxSocket->xEventGroup,
 800e8c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e8ca:	6858      	ldr	r0, [r3, #4]
 800e8cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8ce:	9300      	str	r3, [sp, #0]
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	2201      	movs	r2, #1
 800e8d4:	2128      	movs	r1, #40	@ 0x28
 800e8d6:	f7f3 fbf5 	bl	80020c4 <xEventGroupWaitBits>
 800e8da:	63b8      	str	r0, [r7, #56]	@ 0x38
                                                ( EventBits_t ) eSOCKET_CONNECT | ( EventBits_t ) eSOCKET_CLOSED,
                                                pdTRUE /*xClearOnExit*/,
                                                pdFALSE /*xWaitAllBits*/,
                                                xRemainingTime );

                if( ( uxEvents & ( EventBits_t ) eSOCKET_CLOSED ) != 0U )
 800e8dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8de:	f003 0320 	and.w	r3, r3, #32
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d0c0      	beq.n	800e868 <FreeRTOS_connect+0x58>
                {
                    xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800e8e6:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800e8ea:	643b      	str	r3, [r7, #64]	@ 0x40
                    FreeRTOS_debug_printf( ( "FreeRTOS_connect() stopped due to an error\n" ) );
 800e8ec:	4804      	ldr	r0, [pc, #16]	@ (800e900 <FreeRTOS_connect+0xf0>)
 800e8ee:	f011 fe1d 	bl	802052c <lUDPLoggingPrintf>
                    break;
 800e8f2:	e000      	b.n	800e8f6 <FreeRTOS_connect+0xe6>
                    break;
 800e8f4:	bf00      	nop
                }
            }
        }

        return xResult;
 800e8f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    }
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	3748      	adds	r7, #72	@ 0x48
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd80      	pop	{r7, pc}
 800e900:	080242c0 	.word	0x080242c0

0800e904 <prvRecvData>:
 */
    static BaseType_t prvRecvData( FreeRTOS_Socket_t * pxSocket,
                                   void * pvBuffer,
                                   size_t uxBufferLength,
                                   BaseType_t xFlags )
    {
 800e904:	b580      	push	{r7, lr}
 800e906:	b08a      	sub	sp, #40	@ 0x28
 800e908:	af02      	add	r7, sp, #8
 800e90a:	60f8      	str	r0, [r7, #12]
 800e90c:	60b9      	str	r1, [r7, #8]
 800e90e:	607a      	str	r2, [r7, #4]
 800e910:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount;

        if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) == 0U )
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	f003 0301 	and.w	r3, r3, #1
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d13b      	bne.n	800e994 <prvRecvData+0x90>
        {
            BaseType_t xIsPeek = ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_PEEK ) != 0U ) ? 1L : 0L;
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	089b      	lsrs	r3, r3, #2
 800e920:	f003 0301 	and.w	r3, r3, #1
 800e924:	61bb      	str	r3, [r7, #24]

            xByteCount = ( BaseType_t )
                         uxStreamBufferGet( pxSocket->u.xTCP.rxStream,
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
 800e92c:	69bb      	ldr	r3, [r7, #24]
 800e92e:	9300      	str	r3, [sp, #0]
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	68ba      	ldr	r2, [r7, #8]
 800e934:	2100      	movs	r1, #0
 800e936:	f001 fa04 	bl	800fd42 <uxStreamBufferGet>
 800e93a:	4603      	mov	r3, r0
            xByteCount = ( BaseType_t )
 800e93c:	61fb      	str	r3, [r7, #28]
                                            0U,
                                            ( uint8_t * ) pvBuffer,
                                            ( size_t ) uxBufferLength,
                                            xIsPeek );

            if( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED )
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800e944:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e948:	b2db      	uxtb	r3, r3
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d02b      	beq.n	800e9a6 <prvRecvData+0xa2>
            {
                /* We had reached the low-water mark, now see if the flag
                 * can be cleared */
                size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e954:	4618      	mov	r0, r3
 800e956:	f001 f8c5 	bl	800fae4 <uxStreamBufferFrontSpace>
 800e95a:	6178      	str	r0, [r7, #20]

                if( uxFrontSpace >= pxSocket->u.xTCP.uxEnoughSpace )
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e962:	697a      	ldr	r2, [r7, #20]
 800e964:	429a      	cmp	r2, r3
 800e966:	d31e      	bcc.n	800e9a6 <prvRecvData+0xa2>
                {
                    pxSocket->u.xTCP.bits.bLowWater = pdFALSE_UNSIGNED;
 800e968:	68fa      	ldr	r2, [r7, #12]
 800e96a:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800e96e:	f36f 13c7 	bfc	r3, #7, #1
 800e972:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                    pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800e976:	68fa      	ldr	r2, [r7, #12]
 800e978:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800e97c:	f043 0301 	orr.w	r3, r3, #1
 800e980:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                    pxSocket->u.xTCP.usTimeout = 1U; /* because bLowWater is cleared. */
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	2201      	movs	r2, #1
 800e988:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                    ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800e98c:	2006      	movs	r0, #6
 800e98e:	f7f9 ff09 	bl	80087a4 <xSendEventToIPTask>
 800e992:	e008      	b.n	800e9a6 <prvRecvData+0xa2>
            }
        }
        else
        {
            /* Zero-copy reception of data: pvBuffer is a pointer to a pointer. */
            xByteCount = ( BaseType_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, ( uint8_t ** ) pvBuffer );
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e99a:	68b9      	ldr	r1, [r7, #8]
 800e99c:	4618      	mov	r0, r3
 800e99e:	f001 f930 	bl	800fc02 <uxStreamBufferGetPtr>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	61fb      	str	r3, [r7, #28]
        }

        return xByteCount;
 800e9a6:	69fb      	ldr	r3, [r7, #28]
    }
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3720      	adds	r7, #32
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}

0800e9b0 <prvRecvWait>:
 *            is checked in this function.
 */
    static BaseType_t prvRecvWait( const FreeRTOS_Socket_t * pxSocket,
                                   EventBits_t * pxEventBits,
                                   BaseType_t xFlags )
    {
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b08e      	sub	sp, #56	@ 0x38
 800e9b4:	af02      	add	r7, sp, #8
 800e9b6:	60f8      	str	r0, [r7, #12]
 800e9b8:	60b9      	str	r1, [r7, #8]
 800e9ba:	607a      	str	r2, [r7, #4]
        BaseType_t xByteCount = 0;
 800e9bc:	2300      	movs	r3, #0
 800e9be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        EventBits_t xEventBits = ( EventBits_t ) 0U;
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	627b      	str	r3, [r7, #36]	@ 0x24

        if( pxSocket->u.xTCP.rxStream != NULL )
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d05f      	beq.n	800ea92 <prvRecvWait+0xe2>
        {
            xByteCount = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f001 f894 	bl	800fb06 <uxStreamBufferGetSize>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        while( xByteCount == 0 )
 800e9e2:	e056      	b.n	800ea92 <prvRecvWait+0xe2>
        {
            eIPTCPState_t eType = ( eIPTCPState_t ) pxSocket->u.xTCP.eTCPState;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800e9ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( ( eType == eCLOSED ) ||
 800e9ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d007      	beq.n	800ea06 <prvRecvWait+0x56>
 800e9f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e9fa:	2b08      	cmp	r3, #8
 800e9fc:	d003      	beq.n	800ea06 <prvRecvWait+0x56>
                ( eType == eCLOSE_WAIT ) || /* (server + client) waiting for a connection termination request from the local user. */
 800e9fe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ea02:	2b09      	cmp	r3, #9
 800ea04:	d10e      	bne.n	800ea24 <prvRecvWait+0x74>
                ( eType == eCLOSING ) )     /* (server + client) waiting for a connection termination request acknowledgement from the remote TCP. */
            {
                /* Return -ENOTCONN, unless there was a malloc failure. */
                xByteCount = -pdFREERTOS_ERRNO_ENOTCONN;
 800ea06:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800ea0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800ea12:	f003 0308 	and.w	r3, r3, #8
 800ea16:	b2db      	uxtb	r3, r3
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d03e      	beq.n	800ea9a <prvRecvWait+0xea>
                {
                    /* The no-memory error has priority above the non-connected error.
                     * Both are fatal and will lead to closing the socket. */
                    xByteCount = -pdFREERTOS_ERRNO_ENOMEM;
 800ea1c:	f06f 030b 	mvn.w	r3, #11
 800ea20:	62fb      	str	r3, [r7, #44]	@ 0x2c
                }

                break;
 800ea22:	e03a      	b.n	800ea9a <prvRecvWait+0xea>
            }

            if( xTimed == pdFALSE )
 800ea24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d111      	bne.n	800ea4e <prvRecvWait+0x9e>
            {
                /* Only in the first round, check for non-blocking. */
                xRemainingTime = pxSocket->xReceiveBlockTime;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	6a1b      	ldr	r3, [r3, #32]
 800ea2e:	61fb      	str	r3, [r7, #28]

                if( xRemainingTime == ( TickType_t ) 0U )
 800ea30:	69fb      	ldr	r3, [r7, #28]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d033      	beq.n	800ea9e <prvRecvWait+0xee>
                    }
                    #endif /* ipconfigSUPPORT_SIGNALS */
                    break;
                }

                if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f003 0310 	and.w	r3, r3, #16
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d130      	bne.n	800eaa2 <prvRecvWait+0xf2>
                {
                    break;
                }

                /* Don't get here a second time. */
                xTimed = pdTRUE;
 800ea40:	2301      	movs	r3, #1
 800ea42:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 800ea44:	f107 0314 	add.w	r3, r7, #20
 800ea48:	4618      	mov	r0, r3
 800ea4a:	f7f5 fa89 	bl	8003f60 <vTaskSetTimeOutState>
            }

            /* Has the timeout been reached? */
            if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800ea4e:	f107 021c 	add.w	r2, r7, #28
 800ea52:	f107 0314 	add.w	r3, r7, #20
 800ea56:	4611      	mov	r1, r2
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f7f5 fab9 	bl	8003fd0 <xTaskCheckForTimeOut>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d120      	bne.n	800eaa6 <prvRecvWait+0xf6>
            {
                break;
            }

            /* Block until there is a down-stream event. */
            xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup,
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	6858      	ldr	r0, [r3, #4]
 800ea68:	69fb      	ldr	r3, [r7, #28]
 800ea6a:	9300      	str	r3, [sp, #0]
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	2201      	movs	r2, #1
 800ea70:	2161      	movs	r1, #97	@ 0x61
 800ea72:	f7f3 fb27 	bl	80020c4 <xEventGroupWaitBits>
 800ea76:	6278      	str	r0, [r7, #36]	@ 0x24
            {
                ( void ) xEventBits;
            }
            #endif /* ipconfigSUPPORT_SIGNALS */

            if( pxSocket->u.xTCP.rxStream != NULL )
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d007      	beq.n	800ea92 <prvRecvWait+0xe2>
            {
                xByteCount = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f001 f83c 	bl	800fb06 <uxStreamBufferGetSize>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( xByteCount == 0 )
 800ea92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d0a5      	beq.n	800e9e4 <prvRecvWait+0x34>
 800ea98:	e006      	b.n	800eaa8 <prvRecvWait+0xf8>
                break;
 800ea9a:	bf00      	nop
 800ea9c:	e004      	b.n	800eaa8 <prvRecvWait+0xf8>
                    break;
 800ea9e:	bf00      	nop
 800eaa0:	e002      	b.n	800eaa8 <prvRecvWait+0xf8>
                    break;
 800eaa2:	bf00      	nop
 800eaa4:	e000      	b.n	800eaa8 <prvRecvWait+0xf8>
                break;
 800eaa6:	bf00      	nop
            }
        } /* while( xByteCount == 0 ) */

        *( pxEventBits ) = xEventBits;
 800eaa8:	68bb      	ldr	r3, [r7, #8]
 800eaaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eaac:	601a      	str	r2, [r3, #0]

        return xByteCount;
 800eaae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800eab0:	4618      	mov	r0, r3
 800eab2:	3730      	adds	r7, #48	@ 0x30
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}

0800eab8 <FreeRTOS_recv>:
 */
    BaseType_t FreeRTOS_recv( Socket_t xSocket,
                              void * pvBuffer,
                              size_t uxBufferLength,
                              BaseType_t xFlags )
    {
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b088      	sub	sp, #32
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	60f8      	str	r0, [r7, #12]
 800eac0:	60b9      	str	r1, [r7, #8]
 800eac2:	607a      	str	r2, [r7, #4]
 800eac4:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount = 0;
 800eac6:	2300      	movs	r3, #0
 800eac8:	61fb      	str	r3, [r7, #28]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	61bb      	str	r3, [r7, #24]
        EventBits_t xEventBits = ( EventBits_t ) 0U;
 800eace:	2300      	movs	r3, #0
 800ead0:	617b      	str	r3, [r7, #20]

        /* Check if the socket is valid, has type TCP and if it is bound to a
         * port. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800ead2:	2201      	movs	r2, #1
 800ead4:	2106      	movs	r1, #6
 800ead6:	69b8      	ldr	r0, [r7, #24]
 800ead8:	f7fe fa3a 	bl	800cf50 <prvValidSocket>
 800eadc:	4603      	mov	r3, r0
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d103      	bne.n	800eaea <FreeRTOS_recv+0x32>
        {
            xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 800eae2:	f06f 0315 	mvn.w	r3, #21
 800eae6:	61fb      	str	r3, [r7, #28]
 800eae8:	e01d      	b.n	800eb26 <FreeRTOS_recv+0x6e>
        }
        else if( ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) != 0U ) &&
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	f003 0301 	and.w	r3, r3, #1
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d006      	beq.n	800eb02 <FreeRTOS_recv+0x4a>
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d103      	bne.n	800eb02 <FreeRTOS_recv+0x4a>
                 ( pvBuffer == NULL ) )
        {
            /* In zero-copy mode, pvBuffer is a pointer to a pointer ( not NULL ). */
            xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 800eafa:	f06f 0315 	mvn.w	r3, #21
 800eafe:	61fb      	str	r3, [r7, #28]
 800eb00:	e011      	b.n	800eb26 <FreeRTOS_recv+0x6e>
        }
        else
        {
            /* The function parameters have been checked, now wait for incoming data. */
            xByteCount = prvRecvWait( pxSocket, &( xEventBits ), xFlags );
 800eb02:	f107 0314 	add.w	r3, r7, #20
 800eb06:	683a      	ldr	r2, [r7, #0]
 800eb08:	4619      	mov	r1, r3
 800eb0a:	69b8      	ldr	r0, [r7, #24]
 800eb0c:	f7ff ff50 	bl	800e9b0 <prvRecvWait>
 800eb10:	61f8      	str	r0, [r7, #28]
                    xByteCount = -pdFREERTOS_ERRNO_EINTR;
                }
                else
            #endif /* ipconfigSUPPORT_SIGNALS */

            if( xByteCount > 0 )
 800eb12:	69fb      	ldr	r3, [r7, #28]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	dd06      	ble.n	800eb26 <FreeRTOS_recv+0x6e>
            {
                /* Get the actual data from the buffer, or in case of zero-copy,
                 * let *pvBuffer point to the RX-stream of the socket. */
                xByteCount = prvRecvData( pxSocket, pvBuffer, uxBufferLength, xFlags );
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	687a      	ldr	r2, [r7, #4]
 800eb1c:	68b9      	ldr	r1, [r7, #8]
 800eb1e:	69b8      	ldr	r0, [r7, #24]
 800eb20:	f7ff fef0 	bl	800e904 <prvRecvData>
 800eb24:	61f8      	str	r0, [r7, #28]
            }
        } /* prvValidSocket() */

        return xByteCount;
 800eb26:	69fb      	ldr	r3, [r7, #28]
    }
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3720      	adds	r7, #32
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}

0800eb30 <prvTCPSendCheck>:
 *
 * @return 0: representing OK, else a negative error code will be returned.
 */
    static int32_t prvTCPSendCheck( FreeRTOS_Socket_t * pxSocket,
                                    size_t uxDataLength )
    {
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b084      	sub	sp, #16
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
 800eb38:	6039      	str	r1, [r7, #0]
        int32_t xResult = 1;
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	60fb      	str	r3, [r7, #12]

        /* Is this a socket of type TCP and is it already bound to a port number ? */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800eb3e:	2201      	movs	r2, #1
 800eb40:	2106      	movs	r1, #6
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f7fe fa04 	bl	800cf50 <prvValidSocket>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d103      	bne.n	800eb56 <prvTCPSendCheck+0x26>
        {
            xResult = -pdFREERTOS_ERRNO_EINVAL;
 800eb4e:	f06f 0315 	mvn.w	r3, #21
 800eb52:	60fb      	str	r3, [r7, #12]
 800eb54:	e040      	b.n	800ebd8 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800eb5c:	f003 0308 	and.w	r3, r3, #8
 800eb60:	b2db      	uxtb	r3, r3
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d003      	beq.n	800eb6e <prvTCPSendCheck+0x3e>
        {
            xResult = -pdFREERTOS_ERRNO_ENOMEM;
 800eb66:	f06f 030b 	mvn.w	r3, #11
 800eb6a:	60fb      	str	r3, [r7, #12]
 800eb6c:	e034      	b.n	800ebd8 <prvTCPSendCheck+0xa8>
        }
        else if( ( pxSocket->u.xTCP.eTCPState == eCLOSED ) ||
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d009      	beq.n	800eb8c <prvTCPSendCheck+0x5c>
                 ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) ||
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
        else if( ( pxSocket->u.xTCP.eTCPState == eCLOSED ) ||
 800eb7e:	2b08      	cmp	r3, #8
 800eb80:	d004      	beq.n	800eb8c <prvTCPSendCheck+0x5c>
                 ( pxSocket->u.xTCP.eTCPState == eCLOSING ) )
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                 ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) ||
 800eb88:	2b09      	cmp	r3, #9
 800eb8a:	d103      	bne.n	800eb94 <prvTCPSendCheck+0x64>
        {
            xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800eb8c:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800eb90:	60fb      	str	r3, [r7, #12]
 800eb92:	e021      	b.n	800ebd8 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800eb9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb9e:	b2db      	uxtb	r3, r3
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d002      	beq.n	800ebaa <prvTCPSendCheck+0x7a>
        {
            /* This TCP connection is closing already, the FIN flag has been sent.
             * Maybe it is still delivering or receiving data.
             * Return OK in order not to get closed/deleted too quickly */
            xResult = 0;
 800eba4:	2300      	movs	r3, #0
 800eba6:	60fb      	str	r3, [r7, #12]
 800eba8:	e016      	b.n	800ebd8 <prvTCPSendCheck+0xa8>
        }
        else if( uxDataLength == 0U )
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d102      	bne.n	800ebb6 <prvTCPSendCheck+0x86>
        {
            /* send() is being called to send zero bytes */
            xResult = 0;
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	60fb      	str	r3, [r7, #12]
 800ebb4:	e010      	b.n	800ebd8 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.txStream == NULL )
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d10b      	bne.n	800ebd8 <prvTCPSendCheck+0xa8>
        {
            /* Create the outgoing stream only when it is needed */
            ( void ) prvTCPCreateStream( pxSocket, pdFALSE );
 800ebc0:	2100      	movs	r1, #0
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f000 fac6 	bl	800f154 <prvTCPCreateStream>

            if( pxSocket->u.xTCP.txStream == NULL )
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d102      	bne.n	800ebd8 <prvTCPSendCheck+0xa8>
            {
                xResult = -pdFREERTOS_ERRNO_ENOMEM;
 800ebd2:	f06f 030b 	mvn.w	r3, #11
 800ebd6:	60fb      	str	r3, [r7, #12]
        else
        {
            /* Nothing. */
        }

        return xResult;
 800ebd8:	68fb      	ldr	r3, [r7, #12]
    }
 800ebda:	4618      	mov	r0, r3
 800ebdc:	3710      	adds	r7, #16
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}

0800ebe2 <FreeRTOS_get_tx_head>:
 * @return Head of the circular transmit buffer if all checks pass. Or else, NULL
 *         is returned.
 */
    uint8_t * FreeRTOS_get_tx_head( Socket_t xSocket,
                                    BaseType_t * pxLength )
    {
 800ebe2:	b580      	push	{r7, lr}
 800ebe4:	b088      	sub	sp, #32
 800ebe6:	af00      	add	r7, sp, #0
 800ebe8:	6078      	str	r0, [r7, #4]
 800ebea:	6039      	str	r1, [r7, #0]
        uint8_t * pucReturn = NULL;
 800ebec:	2300      	movs	r3, #0
 800ebee:	61fb      	str	r3, [r7, #28]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	617b      	str	r3, [r7, #20]
        StreamBuffer_t * pxBuffer = NULL;
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	61bb      	str	r3, [r7, #24]

        *pxLength = 0;
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	601a      	str	r2, [r3, #0]

        /* Confirm that this is a TCP socket before dereferencing structure
         * member pointers. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdFALSE ) == pdTRUE )
 800ebfe:	2200      	movs	r2, #0
 800ec00:	2106      	movs	r1, #6
 800ec02:	6978      	ldr	r0, [r7, #20]
 800ec04:	f7fe f9a4 	bl	800cf50 <prvValidSocket>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	2b01      	cmp	r3, #1
 800ec0c:	d135      	bne.n	800ec7a <FreeRTOS_get_tx_head+0x98>
        {
            pxBuffer = pxSocket->u.xTCP.txStream;
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ec14:	61bb      	str	r3, [r7, #24]

            /* If the TX buffer hasn't been created yet,
             * and if no malloc error has occurred on this socket yet. */
            if( ( pxBuffer == NULL ) &&
 800ec16:	69bb      	ldr	r3, [r7, #24]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d10f      	bne.n	800ec3c <FreeRTOS_get_tx_head+0x5a>
                ( pxSocket->u.xTCP.bits.bMallocError == pdFALSE_UNSIGNED ) )
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800ec22:	f003 0308 	and.w	r3, r3, #8
 800ec26:	b2db      	uxtb	r3, r3
            if( ( pxBuffer == NULL ) &&
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d107      	bne.n	800ec3c <FreeRTOS_get_tx_head+0x5a>
            {
                /* Create the outgoing stream only when it is needed */
                ( void ) prvTCPCreateStream( pxSocket, pdFALSE );
 800ec2c:	2100      	movs	r1, #0
 800ec2e:	6978      	ldr	r0, [r7, #20]
 800ec30:	f000 fa90 	bl	800f154 <prvTCPCreateStream>
                pxBuffer = pxSocket->u.xTCP.txStream;
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ec3a:	61bb      	str	r3, [r7, #24]
            }

            if( pxBuffer != NULL )
 800ec3c:	69bb      	ldr	r3, [r7, #24]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d01b      	beq.n	800ec7a <FreeRTOS_get_tx_head+0x98>
            {
                size_t uxSpace = uxStreamBufferGetSpace( pxBuffer );
 800ec42:	69b8      	ldr	r0, [r7, #24]
 800ec44:	f000 ff3d 	bl	800fac2 <uxStreamBufferGetSpace>
 800ec48:	6138      	str	r0, [r7, #16]
                size_t uxRemain = pxBuffer->LENGTH - pxBuffer->uxHead;
 800ec4a:	69bb      	ldr	r3, [r7, #24]
 800ec4c:	691a      	ldr	r2, [r3, #16]
 800ec4e:	69bb      	ldr	r3, [r7, #24]
 800ec50:	689b      	ldr	r3, [r3, #8]
 800ec52:	1ad3      	subs	r3, r2, r3
 800ec54:	60fb      	str	r3, [r7, #12]

                if( uxRemain <= uxSpace )
 800ec56:	68fa      	ldr	r2, [r7, #12]
 800ec58:	693b      	ldr	r3, [r7, #16]
 800ec5a:	429a      	cmp	r2, r3
 800ec5c:	d803      	bhi.n	800ec66 <FreeRTOS_get_tx_head+0x84>
                {
                    *pxLength = ( BaseType_t ) uxRemain;
 800ec5e:	68fa      	ldr	r2, [r7, #12]
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	601a      	str	r2, [r3, #0]
 800ec64:	e002      	b.n	800ec6c <FreeRTOS_get_tx_head+0x8a>
                }
                else
                {
                    *pxLength = ( BaseType_t ) uxSpace;
 800ec66:	693a      	ldr	r2, [r7, #16]
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	601a      	str	r2, [r3, #0]
                }

                pucReturn = &( pxBuffer->ucArray[ pxBuffer->uxHead ] );
 800ec6c:	69bb      	ldr	r3, [r7, #24]
 800ec6e:	689b      	ldr	r3, [r3, #8]
 800ec70:	3310      	adds	r3, #16
 800ec72:	69ba      	ldr	r2, [r7, #24]
 800ec74:	4413      	add	r3, r2
 800ec76:	3304      	adds	r3, #4
 800ec78:	61fb      	str	r3, [r7, #28]
            }
        }

        return pucReturn;
 800ec7a:	69fb      	ldr	r3, [r7, #28]
    }
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	3720      	adds	r7, #32
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}

0800ec84 <prvTCPSendLoop>:
 */
    static BaseType_t prvTCPSendLoop( FreeRTOS_Socket_t * pxSocket,
                                      const void * pvBuffer,
                                      size_t uxDataLength,
                                      BaseType_t xFlags )
    {
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b090      	sub	sp, #64	@ 0x40
 800ec88:	af02      	add	r7, sp, #8
 800ec8a:	60f8      	str	r0, [r7, #12]
 800ec8c:	60b9      	str	r1, [r7, #8]
 800ec8e:	607a      	str	r2, [r7, #4]
 800ec90:	603b      	str	r3, [r7, #0]
        /* The number of bytes sent. */
        BaseType_t xBytesSent = 0;
 800ec92:	2300      	movs	r3, #0
 800ec94:	637b      	str	r3, [r7, #52]	@ 0x34
        /* xBytesLeft is the number of bytes that still must be sent. */
        BaseType_t xBytesLeft = ( BaseType_t ) uxDataLength;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	633b      	str	r3, [r7, #48]	@ 0x30
        /* xByteCount is number of bytes that can be sent now. */
        BaseType_t xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800eca0:	4618      	mov	r0, r3
 800eca2:	f000 ff0e 	bl	800fac2 <uxStreamBufferGetSpace>
 800eca6:	4603      	mov	r3, r0
 800eca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800ecaa:	2300      	movs	r3, #0
 800ecac:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        const uint8_t * pucSource = ( const uint8_t * ) pvBuffer;
 800ecae:	68bb      	ldr	r3, [r7, #8]
 800ecb0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* While there are still bytes to be sent. */
        while( xBytesLeft > 0 )
 800ecb2:	e08f      	b.n	800edd4 <prvTCPSendLoop+0x150>
        {
            /* If txStream has space. */
            if( xByteCount > 0 )
 800ecb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	dd4b      	ble.n	800ed52 <prvTCPSendLoop+0xce>
            {
                BaseType_t xCloseAfterSend = pdFALSE;
 800ecba:	2300      	movs	r3, #0
 800ecbc:	623b      	str	r3, [r7, #32]

                /* Don't send more than necessary. */
                if( xByteCount > xBytesLeft )
 800ecbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ecc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecc2:	429a      	cmp	r2, r3
 800ecc4:	dd01      	ble.n	800ecca <prvTCPSendLoop+0x46>
                {
                    xByteCount = xBytesLeft;
 800ecc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                }

                if( ( pxSocket->u.xTCP.bits.bCloseAfterSend != pdFALSE_UNSIGNED ) &&
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800ecd0:	f003 0310 	and.w	r3, r3, #16
 800ecd4:	b2db      	uxtb	r3, r3
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d00e      	beq.n	800ecf8 <prvTCPSendLoop+0x74>
 800ecda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ecdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecde:	429a      	cmp	r2, r3
 800ece0:	d10a      	bne.n	800ecf8 <prvTCPSendLoop+0x74>
                    ( xByteCount == xBytesLeft ) )
                {
                    xCloseAfterSend = pdTRUE;
 800ece2:	2301      	movs	r3, #1
 800ece4:	623b      	str	r3, [r7, #32]

                    /* Now suspend the scheduler: sending the last data and
                     * setting bCloseRequested must be done together */
                    vTaskSuspendAll();
 800ece6:	f7f4 fc7f 	bl	80035e8 <vTaskSuspendAll>
                    pxSocket->u.xTCP.bits.bCloseRequested = pdTRUE_UNSIGNED;
 800ecea:	68fa      	ldr	r2, [r7, #12]
 800ecec:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800ecf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ecf4:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                     * expected.  The use of 'bCloseAfterSend' is not mandatory, it
                     * is just a faster way of transferring files (e.g. when using
                     * FTP). */
                }

                xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0U, pucSource, ( size_t ) xByteCount );
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 800ecfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ed02:	2100      	movs	r1, #0
 800ed04:	f000 ff9d 	bl	800fc42 <uxStreamBufferAdd>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( xCloseAfterSend == pdTRUE )
 800ed0c:	6a3b      	ldr	r3, [r7, #32]
 800ed0e:	2b01      	cmp	r3, #1
 800ed10:	d101      	bne.n	800ed16 <prvTCPSendLoop+0x92>
                {
                    /* Now when the IP-task transmits the data, it will also
                     * see that bCloseRequested is true and include the FIN
                     * flag to start closure of the connection. */
                    ( void ) xTaskResumeAll();
 800ed12:	f7f4 fc77 	bl	8003604 <xTaskResumeAll>
                }

                /* Send a message to the IP-task so it can work on this
                * socket.  Data is sent, let the IP-task work on it. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	2201      	movs	r2, #1
 800ed1a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                if( xIsCallingFromIPTask() == pdFALSE )
 800ed1e:	f7fa fc99 	bl	8009654 <xIsCallingFromIPTask>
 800ed22:	4603      	mov	r3, r0
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d102      	bne.n	800ed2e <prvTCPSendLoop+0xaa>
                {
                    /* Only send a TCP timer event when not called from the
                     * IP-task. */
                    ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800ed28:	2006      	movs	r0, #6
 800ed2a:	f7f9 fd3b 	bl	80087a4 <xSendEventToIPTask>
                }

                xBytesLeft -= xByteCount;
 800ed2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed32:	1ad3      	subs	r3, r2, r3
 800ed34:	633b      	str	r3, [r7, #48]	@ 0x30
                xBytesSent += xByteCount;
 800ed36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ed38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed3a:	4413      	add	r3, r2
 800ed3c:	637b      	str	r3, [r7, #52]	@ 0x34

                if( ( xBytesLeft == 0 ) || ( pvBuffer == NULL ) )
 800ed3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d053      	beq.n	800edec <prvTCPSendLoop+0x168>
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d050      	beq.n	800edec <prvTCPSendLoop+0x168>
                    break;
                }

                /* As there are still bytes left to be sent, increase the
                 * data pointer. */
                pucSource = &( pucSource[ xByteCount ] );
 800ed4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ed4e:	4413      	add	r3, r2
 800ed50:	627b      	str	r3, [r7, #36]	@ 0x24
            } /* if( xByteCount > 0 ) */

            /* Not all bytes have been sent. In case the socket is marked as
             * blocking sleep for a while. */
            if( xTimed == pdFALSE )
 800ed52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d119      	bne.n	800ed8c <prvTCPSendLoop+0x108>
            {
                /* Only in the first round, check for non-blocking. */
                xRemainingTime = pxSocket->xSendBlockTime;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed5c:	61fb      	str	r3, [r7, #28]

                if( xIsCallingFromIPTask() != pdFALSE )
 800ed5e:	f7fa fc79 	bl	8009654 <xIsCallingFromIPTask>
 800ed62:	4603      	mov	r3, r0
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d001      	beq.n	800ed6c <prvTCPSendLoop+0xe8>
                {
                    /* If this send function is called from within a
                     * call-back handler it may not block, otherwise
                     * chances would be big to get a deadlock: the IP-task
                     * waiting for itself. */
                    xRemainingTime = ( TickType_t ) 0U;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	61fb      	str	r3, [r7, #28]
                }

                if( xRemainingTime == ( TickType_t ) 0U )
 800ed6c:	69fb      	ldr	r3, [r7, #28]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d035      	beq.n	800edde <prvTCPSendLoop+0x15a>
                {
                    break;
                }

                if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	f003 0310 	and.w	r3, r3, #16
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d132      	bne.n	800ede2 <prvTCPSendLoop+0x15e>
                {
                    break;
                }

                /* Don't get here a second time. */
                xTimed = pdTRUE;
 800ed7c:	2301      	movs	r3, #1
 800ed7e:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 800ed80:	f107 0314 	add.w	r3, r7, #20
 800ed84:	4618      	mov	r0, r3
 800ed86:	f7f5 f8eb 	bl	8003f60 <vTaskSetTimeOutState>
 800ed8a:	e00a      	b.n	800eda2 <prvTCPSendLoop+0x11e>
            }
            else
            {
                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800ed8c:	f107 021c 	add.w	r2, r7, #28
 800ed90:	f107 0314 	add.w	r3, r7, #20
 800ed94:	4611      	mov	r1, r2
 800ed96:	4618      	mov	r0, r3
 800ed98:	f7f5 f91a 	bl	8003fd0 <xTaskCheckForTimeOut>
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d121      	bne.n	800ede6 <prvTCPSendLoop+0x162>
                    break;
                }
            }

            /* Go sleeping until a SEND or a CLOSE event is received. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_SEND | ( EventBits_t ) eSOCKET_CLOSED,
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	6858      	ldr	r0, [r3, #4]
 800eda6:	69fb      	ldr	r3, [r7, #28]
 800eda8:	9300      	str	r3, [sp, #0]
 800edaa:	2300      	movs	r3, #0
 800edac:	2201      	movs	r2, #1
 800edae:	2122      	movs	r1, #34	@ 0x22
 800edb0:	f7f3 f988 	bl	80020c4 <xEventGroupWaitBits>
                                          pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );

            xByteCount = ( BaseType_t ) prvTCPSendCheck( pxSocket, uxDataLength );
 800edb4:	6879      	ldr	r1, [r7, #4]
 800edb6:	68f8      	ldr	r0, [r7, #12]
 800edb8:	f7ff feba 	bl	800eb30 <prvTCPSendCheck>
 800edbc:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( xByteCount < 0 )
 800edbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	db12      	blt.n	800edea <prvTCPSendLoop+0x166>
                /* In a meanwhile, the connection has dropped, stop iterating. */
                break;
            }

            /* See if in a meanwhile there is space in the TX-stream. */
            xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800edca:	4618      	mov	r0, r3
 800edcc:	f000 fe79 	bl	800fac2 <uxStreamBufferGetSpace>
 800edd0:	4603      	mov	r3, r0
 800edd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( xBytesLeft > 0 )
 800edd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	f73f af6c 	bgt.w	800ecb4 <prvTCPSendLoop+0x30>
 800eddc:	e006      	b.n	800edec <prvTCPSendLoop+0x168>
                    break;
 800edde:	bf00      	nop
 800ede0:	e004      	b.n	800edec <prvTCPSendLoop+0x168>
                    break;
 800ede2:	bf00      	nop
 800ede4:	e002      	b.n	800edec <prvTCPSendLoop+0x168>
                    break;
 800ede6:	bf00      	nop
 800ede8:	e000      	b.n	800edec <prvTCPSendLoop+0x168>
                break;
 800edea:	bf00      	nop
        } /* while( xBytesLeft > 0 ) */

        return xBytesSent;
 800edec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800edee:	4618      	mov	r0, r3
 800edf0:	3738      	adds	r7, #56	@ 0x38
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}
	...

0800edf8 <FreeRTOS_send>:
 */
    BaseType_t FreeRTOS_send( Socket_t xSocket,
                              const void * pvBuffer,
                              size_t uxDataLength,
                              BaseType_t xFlags )
    {
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b086      	sub	sp, #24
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	60f8      	str	r0, [r7, #12]
 800ee00:	60b9      	str	r1, [r7, #8]
 800ee02:	607a      	str	r2, [r7, #4]
 800ee04:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount;
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	613b      	str	r3, [r7, #16]

        xByteCount = ( BaseType_t ) prvTCPSendCheck( pxSocket, uxDataLength );
 800ee0a:	6879      	ldr	r1, [r7, #4]
 800ee0c:	6938      	ldr	r0, [r7, #16]
 800ee0e:	f7ff fe8f 	bl	800eb30 <prvTCPSendCheck>
 800ee12:	6178      	str	r0, [r7, #20]

        if( xByteCount > 0 )
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	dd24      	ble.n	800ee64 <FreeRTOS_send+0x6c>
        {
            /* prvTCPSendLoop() will try to send as many bytes as possible,
             * returning number of bytes that have been queued for transmission.. */
            xByteCount = prvTCPSendLoop( pxSocket, pvBuffer, uxDataLength, xFlags );
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	687a      	ldr	r2, [r7, #4]
 800ee1e:	68b9      	ldr	r1, [r7, #8]
 800ee20:	6938      	ldr	r0, [r7, #16]
 800ee22:	f7ff ff2f 	bl	800ec84 <prvTCPSendLoop>
 800ee26:	6178      	str	r0, [r7, #20]

            if( xByteCount == 0 )
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d11a      	bne.n	800ee64 <FreeRTOS_send+0x6c>
            {
                if( pxSocket->u.xTCP.eTCPState > eESTABLISHED )
 800ee2e:	693b      	ldr	r3, [r7, #16]
 800ee30:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800ee34:	2b05      	cmp	r3, #5
 800ee36:	d903      	bls.n	800ee40 <FreeRTOS_send+0x48>
                {
                    xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOTCONN;
 800ee38:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800ee3c:	617b      	str	r3, [r7, #20]
 800ee3e:	e011      	b.n	800ee64 <FreeRTOS_send+0x6c>
                }
                else
                {
                    if( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800ee44:	2b17      	cmp	r3, #23
 800ee46:	d00a      	beq.n	800ee5e <FreeRTOS_send+0x66>
                    {
                        FreeRTOS_debug_printf( ( "FreeRTOS_send: %u -> %xip:%d: no space\n",
 800ee48:	693b      	ldr	r3, [r7, #16]
 800ee4a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800ee4c:	4619      	mov	r1, r3
 800ee4e:	693b      	ldr	r3, [r7, #16]
 800ee50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ee52:	693b      	ldr	r3, [r7, #16]
 800ee54:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ee58:	4805      	ldr	r0, [pc, #20]	@ (800ee70 <FreeRTOS_send+0x78>)
 800ee5a:	f011 fb67 	bl	802052c <lUDPLoggingPrintf>
                                                 pxSocket->usLocalPort,
                                                 ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                 pxSocket->u.xTCP.usRemotePort ) );
                    }

                    xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOSPC;
 800ee5e:	f06f 031b 	mvn.w	r3, #27
 800ee62:	617b      	str	r3, [r7, #20]
                }
            }
        }

        return xByteCount;
 800ee64:	697b      	ldr	r3, [r7, #20]
    }
 800ee66:	4618      	mov	r0, r3
 800ee68:	3718      	adds	r7, #24
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}
 800ee6e:	bf00      	nop
 800ee70:	08024318 	.word	0x08024318

0800ee74 <FreeRTOS_listen>:
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    BaseType_t FreeRTOS_listen( Socket_t xSocket,
                                BaseType_t xBacklog )
    {
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b084      	sub	sp, #16
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
 800ee7c:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket;
        BaseType_t xResult = 0;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	60fb      	str	r3, [r7, #12]

        pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	60bb      	str	r3, [r7, #8]

        /* listen() is allowed for a valid TCP socket in Closed state and already
         * bound. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800ee86:	2201      	movs	r2, #1
 800ee88:	2106      	movs	r1, #6
 800ee8a:	68b8      	ldr	r0, [r7, #8]
 800ee8c:	f7fe f860 	bl	800cf50 <prvValidSocket>
 800ee90:	4603      	mov	r3, r0
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d103      	bne.n	800ee9e <FreeRTOS_listen+0x2a>
        {
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800ee96:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 800ee9a:	60fb      	str	r3, [r7, #12]
 800ee9c:	e056      	b.n	800ef4c <FreeRTOS_listen+0xd8>
        }
        else if( ( pxSocket->u.xTCP.eTCPState != eCLOSED ) && ( pxSocket->u.xTCP.eTCPState != eCLOSE_WAIT ) )
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d008      	beq.n	800eeba <FreeRTOS_listen+0x46>
 800eea8:	68bb      	ldr	r3, [r7, #8]
 800eeaa:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800eeae:	2b08      	cmp	r3, #8
 800eeb0:	d003      	beq.n	800eeba <FreeRTOS_listen+0x46>
        {
            /* Socket is in a wrong state. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800eeb2:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 800eeb6:	60fb      	str	r3, [r7, #12]
 800eeb8:	e048      	b.n	800ef4c <FreeRTOS_listen+0xd8>
        }
        else
        {
            /* Backlog is interpreted here as "the maximum number of child
             * sockets. */
            pxSocket->u.xTCP.usBacklog = ( uint16_t ) FreeRTOS_min_int32( ( int32_t ) 0xffff, ( int32_t ) xBacklog );
 800eeba:	6839      	ldr	r1, [r7, #0]
 800eebc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800eec0:	f7fa fd78 	bl	80099b4 <FreeRTOS_min_int32>
 800eec4:	4603      	mov	r3, r0
 800eec6:	b29a      	uxth	r2, r3
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76

            /* This cleaning is necessary only if a listening socket is being
             * reused as it might have had a previous connection. */
            if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800eece:	68bb      	ldr	r3, [r7, #8]
 800eed0:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800eed4:	f003 0308 	and.w	r3, r3, #8
 800eed8:	b2db      	uxtb	r3, r3
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d032      	beq.n	800ef44 <FreeRTOS_listen+0xd0>
            {
                if( pxSocket->u.xTCP.rxStream != NULL )
 800eede:	68bb      	ldr	r3, [r7, #8]
 800eee0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d005      	beq.n	800eef4 <FreeRTOS_listen+0x80>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.rxStream );
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800eeee:	4618      	mov	r0, r3
 800eef0:	f000 fe2b 	bl	800fb4a <vStreamBufferClear>
                }

                if( pxSocket->u.xTCP.txStream != NULL )
 800eef4:	68bb      	ldr	r3, [r7, #8]
 800eef6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d005      	beq.n	800ef0a <FreeRTOS_listen+0x96>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.txStream );
 800eefe:	68bb      	ldr	r3, [r7, #8]
 800ef00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ef04:	4618      	mov	r0, r3
 800ef06:	f000 fe20 	bl	800fb4a <vStreamBufferClear>
                }

                ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	33aa      	adds	r3, #170	@ 0xaa
 800ef0e:	225a      	movs	r2, #90	@ 0x5a
 800ef10:	2100      	movs	r1, #0
 800ef12:	4618      	mov	r0, r3
 800ef14:	f011 fe33 	bl	8020b7e <memset>
                ( void ) memset( &pxSocket->u.xTCP.xTCPWindow, 0, sizeof( pxSocket->u.xTCP.xTCPWindow ) );
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800ef1e:	22c0      	movs	r2, #192	@ 0xc0
 800ef20:	2100      	movs	r1, #0
 800ef22:	4618      	mov	r0, r3
 800ef24:	f011 fe2b 	bl	8020b7e <memset>
                ( void ) memset( &pxSocket->u.xTCP.bits, 0, sizeof( pxSocket->u.xTCP.bits ) );
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	3368      	adds	r3, #104	@ 0x68
 800ef2c:	2204      	movs	r2, #4
 800ef2e:	2100      	movs	r1, #0
 800ef30:	4618      	mov	r0, r3
 800ef32:	f011 fe24 	bl	8020b7e <memset>

                /* Now set the bReuseSocket flag again, because the bits have
                 * just been cleared. */
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE;
 800ef36:	68ba      	ldr	r2, [r7, #8]
 800ef38:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800ef3c:	f043 0308 	orr.w	r3, r3, #8
 800ef40:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            vTCPStateChange( pxSocket, eTCP_LISTEN );
 800ef44:	2101      	movs	r1, #1
 800ef46:	68b8      	ldr	r0, [r7, #8]
 800ef48:	f001 f8a2 	bl	8010090 <vTCPStateChange>
        }

        return xResult;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
    }
 800ef4e:	4618      	mov	r0, r3
 800ef50:	3710      	adds	r7, #16
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}

0800ef56 <FreeRTOS_shutdown>:
 *
 * @return 0 on successful shutdown or else a negative error code.
 */
    BaseType_t FreeRTOS_shutdown( Socket_t xSocket,
                                  BaseType_t xHow )
    {
 800ef56:	b580      	push	{r7, lr}
 800ef58:	b084      	sub	sp, #16
 800ef5a:	af00      	add	r7, sp, #0
 800ef5c:	6078      	str	r0, [r7, #4]
 800ef5e:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	60bb      	str	r3, [r7, #8]
        BaseType_t xResult;

        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800ef64:	2201      	movs	r2, #1
 800ef66:	2106      	movs	r1, #6
 800ef68:	68b8      	ldr	r0, [r7, #8]
 800ef6a:	f7fd fff1 	bl	800cf50 <prvValidSocket>
 800ef6e:	4603      	mov	r3, r0
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d103      	bne.n	800ef7c <FreeRTOS_shutdown+0x26>
        {
            /*_RB_ Is this comment correct?  The socket is not of a type that
             * supports the listen() operation. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800ef74:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 800ef78:	60fb      	str	r3, [r7, #12]
 800ef7a:	e018      	b.n	800efae <FreeRTOS_shutdown+0x58>
        }
        else if( pxSocket->u.xTCP.eTCPState != eESTABLISHED )
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800ef82:	2b05      	cmp	r3, #5
 800ef84:	d003      	beq.n	800ef8e <FreeRTOS_shutdown+0x38>
        {
            /* The socket is not connected. */
            xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800ef86:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800ef8a:	60fb      	str	r3, [r7, #12]
 800ef8c:	e00f      	b.n	800efae <FreeRTOS_shutdown+0x58>
        }
        else
        {
            pxSocket->u.xTCP.bits.bUserShutdown = pdTRUE_UNSIGNED;
 800ef8e:	68ba      	ldr	r2, [r7, #8]
 800ef90:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800ef94:	f043 0320 	orr.w	r3, r3, #32
 800ef98:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

            /* Let the IP-task perform the shutdown of the connection. */
            pxSocket->u.xTCP.usTimeout = 1U;
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	2201      	movs	r2, #1
 800efa0:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800efa4:	2006      	movs	r0, #6
 800efa6:	f7f9 fbfd 	bl	80087a4 <xSendEventToIPTask>
            xResult = 0;
 800efaa:	2300      	movs	r3, #0
 800efac:	60fb      	str	r3, [r7, #12]
        }

        ( void ) xHow;

        return xResult;
 800efae:	68fb      	ldr	r3, [r7, #12]
    }
 800efb0:	4618      	mov	r0, r3
 800efb2:	3710      	adds	r7, #16
 800efb4:	46bd      	mov	sp, r7
 800efb6:	bd80      	pop	{r7, pc}

0800efb8 <xTCPTimerCheck>:
 * @param[in] xWillSleep Whether the calling task is going to sleep.
 *
 * @return Minimum amount of time before the timer shall expire.
 */
    TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
    {
 800efb8:	b580      	push	{r7, lr}
 800efba:	b08a      	sub	sp, #40	@ 0x28
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
        FreeRTOS_Socket_t * pxSocket;
        TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
 800efc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800efc4:	627b      	str	r3, [r7, #36]	@ 0x24
        TickType_t xNow = xTaskGetTickCount();
 800efc6:	f7f4 fc21 	bl	800380c <xTaskGetTickCount>
 800efca:	61b8      	str	r0, [r7, #24]
        static TickType_t xLastTime = 0U;
        TickType_t xDelta = xNow - xLastTime;
 800efcc:	4b32      	ldr	r3, [pc, #200]	@ (800f098 <xTCPTimerCheck+0xe0>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	69ba      	ldr	r2, [r7, #24]
 800efd2:	1ad3      	subs	r3, r2, r3
 800efd4:	623b      	str	r3, [r7, #32]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800efd6:	4b31      	ldr	r3, [pc, #196]	@ (800f09c <xTCPTimerCheck+0xe4>)
 800efd8:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800efda:	4b31      	ldr	r3, [pc, #196]	@ (800f0a0 <xTCPTimerCheck+0xe8>)
 800efdc:	68db      	ldr	r3, [r3, #12]
 800efde:	61fb      	str	r3, [r7, #28]

        xLastTime = xNow;
 800efe0:	4a2d      	ldr	r2, [pc, #180]	@ (800f098 <xTCPTimerCheck+0xe0>)
 800efe2:	69bb      	ldr	r3, [r7, #24]
 800efe4:	6013      	str	r3, [r2, #0]

        if( xDelta == 0U )
 800efe6:	6a3b      	ldr	r3, [r7, #32]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d14b      	bne.n	800f084 <xTCPTimerCheck+0xcc>
        {
            xDelta = 1U;
 800efec:	2301      	movs	r3, #1
 800efee:	623b      	str	r3, [r7, #32]
        }

        while( pxIterator != pxEnd )
 800eff0:	e048      	b.n	800f084 <xTCPTimerCheck+0xcc>
        {
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800eff2:	69fb      	ldr	r3, [r7, #28]
 800eff4:	68db      	ldr	r3, [r3, #12]
 800eff6:	613b      	str	r3, [r7, #16]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 800eff8:	69fb      	ldr	r3, [r7, #28]
 800effa:	685b      	ldr	r3, [r3, #4]
 800effc:	61fb      	str	r3, [r7, #28]

            /* Sockets with 'timeout == 0' do not need any regular attention. */
            if( pxSocket->u.xTCP.usTimeout == 0U )
 800effe:	693b      	ldr	r3, [r7, #16]
 800f000:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800f004:	2b00      	cmp	r3, #0
 800f006:	d03a      	beq.n	800f07e <xTCPTimerCheck+0xc6>
            {
                continue;
            }

            if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 800f008:	693b      	ldr	r3, [r7, #16]
 800f00a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800f00e:	461a      	mov	r2, r3
 800f010:	6a3b      	ldr	r3, [r7, #32]
 800f012:	4293      	cmp	r3, r2
 800f014:	d20a      	bcs.n	800f02c <xTCPTimerCheck+0x74>
            {
                pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 800f016:	693b      	ldr	r3, [r7, #16]
 800f018:	f8b3 2070 	ldrh.w	r2, [r3, #112]	@ 0x70
 800f01c:	6a3b      	ldr	r3, [r7, #32]
 800f01e:	b29b      	uxth	r3, r3
 800f020:	1ad3      	subs	r3, r2, r3
 800f022:	b29a      	uxth	r2, r3
 800f024:	693b      	ldr	r3, [r7, #16]
 800f026:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 800f02a:	e00a      	b.n	800f042 <xTCPTimerCheck+0x8a>
            }
            else
            {
                BaseType_t xRc;

                pxSocket->u.xTCP.usTimeout = 0U;
 800f02c:	693b      	ldr	r3, [r7, #16]
 800f02e:	2200      	movs	r2, #0
 800f030:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                xRc = xTCPSocketCheck( pxSocket );
 800f034:	6938      	ldr	r0, [r7, #16]
 800f036:	f000 ff33 	bl	800fea0 <xTCPSocketCheck>
 800f03a:	60f8      	str	r0, [r7, #12]

                /* Within this function, the socket might want to send a delayed
                 * ack or send out data or whatever it needs to do. */
                if( xRc < 0 )
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	db1f      	blt.n	800f082 <xTCPTimerCheck+0xca>
            }

            /* In xEventBits the driver may indicate that the socket has
             * important events for the user.  These are only done just before the
             * IP-task goes to sleep. */
            if( pxSocket->xEventBits != 0U )
 800f042:	693b      	ldr	r3, [r7, #16]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d008      	beq.n	800f05c <xTCPTimerCheck+0xa4>
            {
                if( xWillSleep != pdFALSE )
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d003      	beq.n	800f058 <xTCPTimerCheck+0xa0>
                {
                    /* The IP-task is about to go to sleep, so messages can be
                     * sent to the socket owners. */
                    vSocketWakeUpUser( pxSocket );
 800f050:	6938      	ldr	r0, [r7, #16]
 800f052:	f7ff fa8e 	bl	800e572 <vSocketWakeUpUser>
 800f056:	e001      	b.n	800f05c <xTCPTimerCheck+0xa4>
                }
                else
                {
                    /* Or else make sure this will be called again to wake-up
                     * the sockets' owner. */
                    xShortest = ( TickType_t ) 0;
 800f058:	2300      	movs	r3, #0
 800f05a:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            if( ( pxSocket->u.xTCP.usTimeout != 0U ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 800f05c:	693b      	ldr	r3, [r7, #16]
 800f05e:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800f062:	2b00      	cmp	r3, #0
 800f064:	d00e      	beq.n	800f084 <xTCPTimerCheck+0xcc>
 800f066:	693b      	ldr	r3, [r7, #16]
 800f068:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800f06c:	461a      	mov	r2, r3
 800f06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f070:	4293      	cmp	r3, r2
 800f072:	d907      	bls.n	800f084 <xTCPTimerCheck+0xcc>
            {
                xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800f074:	693b      	ldr	r3, [r7, #16]
 800f076:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800f07a:	627b      	str	r3, [r7, #36]	@ 0x24
 800f07c:	e002      	b.n	800f084 <xTCPTimerCheck+0xcc>
                continue;
 800f07e:	bf00      	nop
 800f080:	e000      	b.n	800f084 <xTCPTimerCheck+0xcc>
                    continue;
 800f082:	bf00      	nop
        while( pxIterator != pxEnd )
 800f084:	69fa      	ldr	r2, [r7, #28]
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	429a      	cmp	r2, r3
 800f08a:	d1b2      	bne.n	800eff2 <xTCPTimerCheck+0x3a>
            }
        }

        return xShortest;
 800f08c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800f08e:	4618      	mov	r0, r3
 800f090:	3728      	adds	r7, #40	@ 0x28
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}
 800f096:	bf00      	nop
 800f098:	200012c4 	.word	0x200012c4
 800f09c:	200012b8 	.word	0x200012b8
 800f0a0:	200012b0 	.word	0x200012b0

0800f0a4 <pxTCPSocketLookup>:
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup( uint32_t ulLocalIP,
                                           UBaseType_t uxLocalPort,
                                           IPv46_Address_t xRemoteIP,
                                           UBaseType_t uxRemotePort )
    {
 800f0a4:	b082      	sub	sp, #8
 800f0a6:	b580      	push	{r7, lr}
 800f0a8:	b088      	sub	sp, #32
 800f0aa:	af00      	add	r7, sp, #0
 800f0ac:	6078      	str	r0, [r7, #4]
 800f0ae:	6039      	str	r1, [r7, #0]
 800f0b0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800f0b4:	e881 000c 	stmia.w	r1, {r2, r3}
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxResult = NULL, * pxListenSocket = NULL;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	61bb      	str	r3, [r7, #24]
 800f0bc:	2300      	movs	r3, #0
 800f0be:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800f0c0:	4b23      	ldr	r3, [pc, #140]	@ (800f150 <pxTCPSocketLookup+0xac>)
 800f0c2:	613b      	str	r3, [r7, #16]

        ( void ) ulLocalIP;

        for( pxIterator = listGET_NEXT( pxEnd );
 800f0c4:	693b      	ldr	r3, [r7, #16]
 800f0c6:	685b      	ldr	r3, [r3, #4]
 800f0c8:	61fb      	str	r3, [r7, #28]
 800f0ca:	e02e      	b.n	800f12a <pxTCPSocketLookup+0x86>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800f0cc:	69fb      	ldr	r3, [r7, #28]
 800f0ce:	68db      	ldr	r3, [r3, #12]
 800f0d0:	60fb      	str	r3, [r7, #12]

            if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 800f0d6:	683b      	ldr	r3, [r7, #0]
 800f0d8:	b29b      	uxth	r3, r3
 800f0da:	429a      	cmp	r2, r3
 800f0dc:	d122      	bne.n	800f124 <pxTCPSocketLookup+0x80>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f0e4:	2b01      	cmp	r3, #1
 800f0e6:	d102      	bne.n	800f0ee <pxTCPSocketLookup+0x4a>
                {
                    /* If this is a socket listening to uxLocalPort, remember it
                     * in case there is no perfect match. */
                    pxListenSocket = pxSocket;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	617b      	str	r3, [r7, #20]
 800f0ec:	e01a      	b.n	800f124 <pxTCPSocketLookup+0x80>
                }
                else if( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort )
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800f0f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0f6:	b29b      	uxth	r3, r3
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d113      	bne.n	800f124 <pxTCPSocketLookup+0x80>
                {
                    if( xRemoteIP.xIs_IPv6 != pdFALSE )
 800f0fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d006      	beq.n	800f110 <pxTCPSocketLookup+0x6c>
                    {
                        #if ( ipconfigUSE_IPv6 != 0 )
                            pxResult = pxTCPSocketLookup_IPv6( pxSocket, &xRemoteIP );
 800f102:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800f106:	68f8      	ldr	r0, [r7, #12]
 800f108:	f7fb f9d4 	bl	800a4b4 <pxTCPSocketLookup_IPv6>
 800f10c:	61b8      	str	r0, [r7, #24]
 800f10e:	e006      	b.n	800f11e <pxTCPSocketLookup+0x7a>
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
                    }
                    else
                    {
                        if( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 == xRemoteIP.xIPAddress.ulIP_IPv4 )
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f116:	429a      	cmp	r2, r3
 800f118:	d101      	bne.n	800f11e <pxTCPSocketLookup+0x7a>
                        {
                            /* For sockets not in listening mode, find a match with
                             * xLocalPort, ulRemoteIP AND xRemotePort. */
                            pxResult = pxSocket;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	61bb      	str	r3, [r7, #24]
                        }
                    }

                    if( pxResult != NULL )
 800f11e:	69bb      	ldr	r3, [r7, #24]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d107      	bne.n	800f134 <pxTCPSocketLookup+0x90>
             pxIterator = listGET_NEXT( pxIterator ) )
 800f124:	69fb      	ldr	r3, [r7, #28]
 800f126:	685b      	ldr	r3, [r3, #4]
 800f128:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEnd;
 800f12a:	69fa      	ldr	r2, [r7, #28]
 800f12c:	693b      	ldr	r3, [r7, #16]
 800f12e:	429a      	cmp	r2, r3
 800f130:	d1cc      	bne.n	800f0cc <pxTCPSocketLookup+0x28>
 800f132:	e000      	b.n	800f136 <pxTCPSocketLookup+0x92>
                    {
                        break;
 800f134:	bf00      	nop
                    /* This 'pxSocket' doesn't match. */
                }
            }
        }

        if( pxResult == NULL )
 800f136:	69bb      	ldr	r3, [r7, #24]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d101      	bne.n	800f140 <pxTCPSocketLookup+0x9c>
        {
            /* An exact match was not found, maybe a listening socket was
             * found. */
            pxResult = pxListenSocket;
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	61bb      	str	r3, [r7, #24]
        }

        return pxResult;
 800f140:	69bb      	ldr	r3, [r7, #24]
    }
 800f142:	4618      	mov	r0, r3
 800f144:	3720      	adds	r7, #32
 800f146:	46bd      	mov	sp, r7
 800f148:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f14c:	b002      	add	sp, #8
 800f14e:	4770      	bx	lr
 800f150:	200012b8 	.word	0x200012b8

0800f154 <prvTCPCreateStream>:
 *
 * @return The stream buffer.
 */
    static StreamBuffer_t * prvTCPCreateStream( FreeRTOS_Socket_t * pxSocket,
                                                BaseType_t xIsInputStream )
    {
 800f154:	b580      	push	{r7, lr}
 800f156:	b088      	sub	sp, #32
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	6039      	str	r1, [r7, #0]
        size_t uxLength;
        size_t uxSize;

        /* Now that a stream is created, the maximum size is fixed before
         * creation, it could still be changed with setsockopt(). */
        if( xIsInputStream != pdFALSE )
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d048      	beq.n	800f1f6 <prvTCPCreateStream+0xa2>
        {
            size_t uxLittlePerc = sock20_PERCENT;
 800f164:	2314      	movs	r3, #20
 800f166:	61bb      	str	r3, [r7, #24]
            size_t uxEnoughPerc = sock80_PERCENT;
 800f168:	2350      	movs	r3, #80	@ 0x50
 800f16a:	617b      	str	r3, [r7, #20]
            size_t uxSegmentCount = pxSocket->u.xTCP.uxRxStreamSize / pxSocket->u.xTCP.usMSS;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f172:	687a      	ldr	r2, [r7, #4]
 800f174:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
 800f178:	fbb3 f3f2 	udiv	r3, r3, r2
 800f17c:	613b      	str	r3, [r7, #16]
                { 50U, 100U }, /* 2 segments. */
                { 34U, 100U }, /* 3 segments. */
                { 25U, 100U }, /* 4 segments. */
            };

            if( ( uxSegmentCount > 0U ) &&
 800f17e:	693b      	ldr	r3, [r7, #16]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d00f      	beq.n	800f1a4 <prvTCPCreateStream+0x50>
 800f184:	693b      	ldr	r3, [r7, #16]
 800f186:	2b04      	cmp	r3, #4
 800f188:	d80c      	bhi.n	800f1a4 <prvTCPCreateStream+0x50>
                ( uxSegmentCount <= ARRAY_USIZE( xPercTable ) ) )
            {
                uxLittlePerc = xPercTable[ uxSegmentCount - 1U ].uxPercLittle;
 800f18a:	693b      	ldr	r3, [r7, #16]
 800f18c:	3b01      	subs	r3, #1
 800f18e:	4a40      	ldr	r2, [pc, #256]	@ (800f290 <prvTCPCreateStream+0x13c>)
 800f190:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f194:	61bb      	str	r3, [r7, #24]
                uxEnoughPerc = xPercTable[ uxSegmentCount - 1U ].uxPercEnough;
 800f196:	693b      	ldr	r3, [r7, #16]
 800f198:	3b01      	subs	r3, #1
 800f19a:	4a3d      	ldr	r2, [pc, #244]	@ (800f290 <prvTCPCreateStream+0x13c>)
 800f19c:	00db      	lsls	r3, r3, #3
 800f19e:	4413      	add	r3, r2
 800f1a0:	685b      	ldr	r3, [r3, #4]
 800f1a2:	617b      	str	r3, [r7, #20]
            }

            uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f1aa:	61fb      	str	r3, [r7, #28]

            if( pxSocket->u.xTCP.uxLittleSpace == 0U )
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d10c      	bne.n	800f1d0 <prvTCPCreateStream+0x7c>
            {
                pxSocket->u.xTCP.uxLittleSpace = ( uxLittlePerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f1bc:	69ba      	ldr	r2, [r7, #24]
 800f1be:	fb02 f303 	mul.w	r3, r2, r3
 800f1c2:	4a34      	ldr	r2, [pc, #208]	@ (800f294 <prvTCPCreateStream+0x140>)
 800f1c4:	fba2 2303 	umull	r2, r3, r2, r3
 800f1c8:	095a      	lsrs	r2, r3, #5
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            }

            if( pxSocket->u.xTCP.uxEnoughSpace == 0U )
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d111      	bne.n	800f1fe <prvTCPCreateStream+0xaa>
            {
                pxSocket->u.xTCP.uxEnoughSpace = ( uxEnoughPerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f1e0:	697a      	ldr	r2, [r7, #20]
 800f1e2:	fb02 f303 	mul.w	r3, r2, r3
 800f1e6:	4a2b      	ldr	r2, [pc, #172]	@ (800f294 <prvTCPCreateStream+0x140>)
 800f1e8:	fba2 2303 	umull	r2, r3, r2, r3
 800f1ec:	095a      	lsrs	r2, r3, #5
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800f1f4:	e003      	b.n	800f1fe <prvTCPCreateStream+0xaa>
            }
        }
        else
        {
            uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f1fc:	61fb      	str	r3, [r7, #28]
        }

        /* Add an extra 4 (or 8) bytes. */
        uxLength += sizeof( size_t );
 800f1fe:	69fb      	ldr	r3, [r7, #28]
 800f200:	3304      	adds	r3, #4
 800f202:	61fb      	str	r3, [r7, #28]

        /* And make the length a multiple of sizeof( size_t ). */
        uxLength &= ~( sizeof( size_t ) - 1U );
 800f204:	69fb      	ldr	r3, [r7, #28]
 800f206:	f023 0303 	bic.w	r3, r3, #3
 800f20a:	61fb      	str	r3, [r7, #28]

        uxSize = ( sizeof( *pxBuffer ) + uxLength ) - sizeof( pxBuffer->ucArray );
 800f20c:	69fb      	ldr	r3, [r7, #28]
 800f20e:	3314      	adds	r3, #20
 800f210:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxBuffer = ( ( StreamBuffer_t * ) pvPortMallocLarge( uxSize ) );
 800f212:	68f8      	ldr	r0, [r7, #12]
 800f214:	f7f6 f966 	bl	80054e4 <pvPortMalloc>
 800f218:	60b8      	str	r0, [r7, #8]

        if( pxBuffer == NULL )
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d10e      	bne.n	800f23e <prvTCPCreateStream+0xea>
        {
            FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
 800f220:	481d      	ldr	r0, [pc, #116]	@ (800f298 <prvTCPCreateStream+0x144>)
 800f222:	f011 f983 	bl	802052c <lUDPLoggingPrintf>
            pxSocket->u.xTCP.bits.bMallocError = pdTRUE_UNSIGNED;
 800f226:	687a      	ldr	r2, [r7, #4]
 800f228:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800f22c:	f043 0308 	orr.w	r3, r3, #8
 800f230:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800f234:	2108      	movs	r1, #8
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	f000 ff2a 	bl	8010090 <vTCPStateChange>
 800f23c:	e022      	b.n	800f284 <prvTCPCreateStream+0x130>
        }
        else
        {
            /* Clear the markers of the stream */
            ( void ) memset( pxBuffer, 0, sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 800f23e:	2214      	movs	r2, #20
 800f240:	2100      	movs	r1, #0
 800f242:	68b8      	ldr	r0, [r7, #8]
 800f244:	f011 fc9b 	bl	8020b7e <memset>
            pxBuffer->LENGTH = ( size_t ) uxLength;
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	69fa      	ldr	r2, [r7, #28]
 800f24c:	611a      	str	r2, [r3, #16]

            if( xTCPWindowLoggingLevel != 0 )
 800f24e:	4b13      	ldr	r3, [pc, #76]	@ (800f29c <prvTCPCreateStream+0x148>)
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d00a      	beq.n	800f26c <prvTCPCreateStream+0x118>
            {
                FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %u bytes (total %u)\n", ( xIsInputStream != 0 ) ? 'R' : 'T', ( unsigned ) uxLength, ( unsigned ) uxSize ) );
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d001      	beq.n	800f260 <prvTCPCreateStream+0x10c>
 800f25c:	2152      	movs	r1, #82	@ 0x52
 800f25e:	e000      	b.n	800f262 <prvTCPCreateStream+0x10e>
 800f260:	2154      	movs	r1, #84	@ 0x54
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	69fa      	ldr	r2, [r7, #28]
 800f266:	480e      	ldr	r0, [pc, #56]	@ (800f2a0 <prvTCPCreateStream+0x14c>)
 800f268:	f011 f960 	bl	802052c <lUDPLoggingPrintf>
            }

            if( xIsInputStream != 0 )
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d004      	beq.n	800f27c <prvTCPCreateStream+0x128>
            {
                iptraceMEM_STATS_CREATE( tcpRX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.rxStream = pxBuffer;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	68ba      	ldr	r2, [r7, #8]
 800f276:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 800f27a:	e003      	b.n	800f284 <prvTCPCreateStream+0x130>
            }
            else
            {
                iptraceMEM_STATS_CREATE( tcpTX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.txStream = pxBuffer;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	68ba      	ldr	r2, [r7, #8]
 800f280:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
            }
        }

        return pxBuffer;
 800f284:	68bb      	ldr	r3, [r7, #8]
    }
 800f286:	4618      	mov	r0, r3
 800f288:	3720      	adds	r7, #32
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}
 800f28e:	bf00      	nop
 800f290:	08025c44 	.word	0x08025c44
 800f294:	51eb851f 	.word	0x51eb851f
 800f298:	08024340 	.word	0x08024340
 800f29c:	200012f4 	.word	0x200012f4
 800f2a0:	08024364 	.word	0x08024364

0800f2a4 <vTCPAddRxdata_Callback>:
 * @param[in] ulByteCount The number of bytes that were received.
 */
    static void vTCPAddRxdata_Callback( FreeRTOS_Socket_t * pxSocket,
                                        const uint8_t * pcData,
                                        uint32_t ulByteCount )
    {
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b08a      	sub	sp, #40	@ 0x28
 800f2a8:	af02      	add	r7, sp, #8
 800f2aa:	60f8      	str	r0, [r7, #12]
 800f2ac:	60b9      	str	r1, [r7, #8]
 800f2ae:	607a      	str	r2, [r7, #4]
        const uint8_t * pucBuffer = pcData;
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	61fb      	str	r3, [r7, #28]

        /* The socket owner has installed an OnReceive handler. Pass the
         * Rx data, without copying from the rxStream, to the user. */
        for( ; ; )
        {
            uint8_t * ucReadPtr = NULL;
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	617b      	str	r3, [r7, #20]
            uint32_t ulCount;

            if( pucBuffer != NULL )
 800f2b8:	69fb      	ldr	r3, [r7, #28]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d006      	beq.n	800f2cc <vTCPAddRxdata_Callback+0x28>
            {
                ucReadPtr = ( uint8_t * ) pucBuffer;
 800f2be:	69fb      	ldr	r3, [r7, #28]
 800f2c0:	617b      	str	r3, [r7, #20]
                ulCount = ulByteCount;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	61bb      	str	r3, [r7, #24]
                pucBuffer = NULL;
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	61fb      	str	r3, [r7, #28]
 800f2ca:	e009      	b.n	800f2e0 <vTCPAddRxdata_Callback+0x3c>
            }
            else
            {
                ulCount = ( uint32_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, &( ucReadPtr ) );
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f2d2:	f107 0214 	add.w	r2, r7, #20
 800f2d6:	4611      	mov	r1, r2
 800f2d8:	4618      	mov	r0, r3
 800f2da:	f000 fc92 	bl	800fc02 <uxStreamBufferGetPtr>
 800f2de:	61b8      	str	r0, [r7, #24]
            }

            if( ulCount == 0U )
 800f2e0:	69bb      	ldr	r3, [r7, #24]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d011      	beq.n	800f30a <vTCPAddRxdata_Callback+0x66>
                break;
            }

            /* For advanced users only: here a pointer to the RX-stream of a socket
             * is passed to an application hook. */
            ( void ) pxSocket->u.xTCP.pxHandleReceive( pxSocket, ucReadPtr, ( size_t ) ulCount );
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800f2ec:	6979      	ldr	r1, [r7, #20]
 800f2ee:	69ba      	ldr	r2, [r7, #24]
 800f2f0:	68f8      	ldr	r0, [r7, #12]
 800f2f2:	4798      	blx	r3
            /* Forward the tail in the RX stream. */
            ( void ) uxStreamBufferGet( pxSocket->u.xTCP.rxStream, 0U, NULL, ( size_t ) ulCount, pdFALSE );
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	9300      	str	r3, [sp, #0]
 800f2fe:	69bb      	ldr	r3, [r7, #24]
 800f300:	2200      	movs	r2, #0
 800f302:	2100      	movs	r1, #0
 800f304:	f000 fd1d 	bl	800fd42 <uxStreamBufferGet>
        {
 800f308:	e7d4      	b.n	800f2b4 <vTCPAddRxdata_Callback+0x10>
        }
    }
 800f30a:	bf00      	nop
 800f30c:	3720      	adds	r7, #32
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}

0800f312 <vTCPAddRxdata_Stored>:
 *        RX-stream. When the space is dropped below a threshold, it may set the
 *        bit field 'bLowWater'. Also the socket's events bits for READ will be set.
 * @param[in] pxSocket the socket that has received new data.
 */
    static void vTCPAddRxdata_Stored( FreeRTOS_Socket_t * pxSocket )
    {
 800f312:	b580      	push	{r7, lr}
 800f314:	b084      	sub	sp, #16
 800f316:	af00      	add	r7, sp, #0
 800f318:	6078      	str	r0, [r7, #4]
        /* See if running out of space. */
        if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f320:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f324:	b2db      	uxtb	r3, r3
 800f326:	2b00      	cmp	r3, #0
 800f328:	d121      	bne.n	800f36e <vTCPAddRxdata_Stored+0x5c>
        {
            size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f330:	4618      	mov	r0, r3
 800f332:	f000 fbd7 	bl	800fae4 <uxStreamBufferFrontSpace>
 800f336:	60f8      	str	r0, [r7, #12]

            if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace )
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f33e:	68fa      	ldr	r2, [r7, #12]
 800f340:	429a      	cmp	r2, r3
 800f342:	d814      	bhi.n	800f36e <vTCPAddRxdata_Stored+0x5c>
            {
                pxSocket->u.xTCP.bits.bLowWater = pdTRUE_UNSIGNED;
 800f344:	687a      	ldr	r2, [r7, #4]
 800f346:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f34a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f34e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800f352:	687a      	ldr	r2, [r7, #4]
 800f354:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800f358:	f043 0301 	orr.w	r3, r3, #1
 800f35c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                /* bLowWater was reached, send the changed window size. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2201      	movs	r2, #1
 800f364:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800f368:	2006      	movs	r0, #6
 800f36a:	f7f9 fa1b 	bl	80087a4 <xSendEventToIPTask>
            }
        }

        /* New incoming data is available, wake up the user.   User's
         * semaphores will be set just before the IP-task goes asleep. */
        pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_RECEIVE;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	f043 0201 	orr.w	r2, r3, #1
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	601a      	str	r2, [r3, #0]

        #if ipconfigSUPPORT_SELECT_FUNCTION == 1
        {
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U )
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f37e:	f003 0301 	and.w	r3, r3, #1
 800f382:	2b00      	cmp	r3, #0
 800f384:	d005      	beq.n	800f392 <vTCPAddRxdata_Stored+0x80>
            {
                pxSocket->xEventBits |= ( ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT );
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	601a      	str	r2, [r3, #0]
            }
        }
        #endif
    }
 800f392:	bf00      	nop
 800f394:	3710      	adds	r7, #16
 800f396:	46bd      	mov	sp, r7
 800f398:	bd80      	pop	{r7, pc}
	...

0800f39c <lTCPAddRxdata>:
 */
    int32_t lTCPAddRxdata( FreeRTOS_Socket_t * pxSocket,
                           size_t uxOffset,
                           const uint8_t * pcData,
                           uint32_t ulByteCount )
    {
 800f39c:	b5b0      	push	{r4, r5, r7, lr}
 800f39e:	b08c      	sub	sp, #48	@ 0x30
 800f3a0:	af04      	add	r7, sp, #16
 800f3a2:	60f8      	str	r0, [r7, #12]
 800f3a4:	60b9      	str	r1, [r7, #8]
 800f3a6:	607a      	str	r2, [r7, #4]
 800f3a8:	603b      	str	r3, [r7, #0]
        StreamBuffer_t * pxStream = pxSocket->u.xTCP.rxStream;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f3b0:	61fb      	str	r3, [r7, #28]
        int32_t xResult = 0;
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	61bb      	str	r3, [r7, #24]

        #if ( ipconfigUSE_CALLBACKS == 1 )
            BaseType_t bHasHandler = ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleReceive ) ? pdTRUE : pdFALSE;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d001      	beq.n	800f3c4 <lTCPAddRxdata+0x28>
 800f3c0:	2301      	movs	r3, #1
 800f3c2:	e000      	b.n	800f3c6 <lTCPAddRxdata+0x2a>
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	613b      	str	r3, [r7, #16]
            const uint8_t * pucBuffer = NULL;
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	617b      	str	r3, [r7, #20]
        /* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
         * if( pucData != NULL ) copy data the the buffer
         * if( pucData == NULL ) no copying, just advance rxHead
         * if( uxOffset != 0 ) Just store data which has come out-of-order
         * if( uxOffset == 0 ) Also advance rxHead */
        if( pxStream == NULL )
 800f3cc:	69fb      	ldr	r3, [r7, #28]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d10a      	bne.n	800f3e8 <lTCPAddRxdata+0x4c>
        {
            pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 800f3d2:	2101      	movs	r1, #1
 800f3d4:	68f8      	ldr	r0, [r7, #12]
 800f3d6:	f7ff febd 	bl	800f154 <prvTCPCreateStream>
 800f3da:	61f8      	str	r0, [r7, #28]

            if( pxStream == NULL )
 800f3dc:	69fb      	ldr	r3, [r7, #28]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d102      	bne.n	800f3e8 <lTCPAddRxdata+0x4c>
            {
                xResult = -1;
 800f3e2:	f04f 33ff 	mov.w	r3, #4294967295
 800f3e6:	61bb      	str	r3, [r7, #24]
            }
        }

        if( xResult >= 0 )
 800f3e8:	69bb      	ldr	r3, [r7, #24]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	db41      	blt.n	800f472 <lTCPAddRxdata+0xd6>
        {
            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( bHasHandler != pdFALSE ) && ( uxStreamBufferGetSize( pxStream ) == 0U ) && ( uxOffset == 0U ) && ( pcData != NULL ) )
 800f3ee:	693b      	ldr	r3, [r7, #16]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d00f      	beq.n	800f414 <lTCPAddRxdata+0x78>
 800f3f4:	69f8      	ldr	r0, [r7, #28]
 800f3f6:	f000 fb86 	bl	800fb06 <uxStreamBufferGetSize>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d109      	bne.n	800f414 <lTCPAddRxdata+0x78>
 800f400:	68bb      	ldr	r3, [r7, #8]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d106      	bne.n	800f414 <lTCPAddRxdata+0x78>
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d003      	beq.n	800f414 <lTCPAddRxdata+0x78>
                {
                    /* Data can be passed directly to the user because there is
                     * no data in the RX-stream, it the new data must be stored
                     * at offset zero, and a buffer 'pcData' is provided.
                     */
                    pucBuffer = pcData;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	617b      	str	r3, [r7, #20]

                    /* Zero-copy for call-back: no need to add the bytes to the
                     * stream, only the pointer will be advanced by uxStreamBufferAdd(). */
                    pcData = NULL;
 800f410:	2300      	movs	r3, #0
 800f412:	607b      	str	r3, [r7, #4]
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	687a      	ldr	r2, [r7, #4]
 800f418:	68b9      	ldr	r1, [r7, #8]
 800f41a:	69f8      	ldr	r0, [r7, #28]
 800f41c:	f000 fc11 	bl	800fc42 <uxStreamBufferAdd>
 800f420:	4603      	mov	r3, r0
 800f422:	61bb      	str	r3, [r7, #24]

            #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            {
                if( xResult != ( int32_t ) ulByteCount )
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	69ba      	ldr	r2, [r7, #24]
 800f428:	429a      	cmp	r2, r3
 800f42a:	d013      	beq.n	800f454 <lTCPAddRxdata+0xb8>
                {
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: at %u: %d/%u bytes (tail %u head %u space %u front %u)\n",
 800f42c:	69fb      	ldr	r3, [r7, #28]
 800f42e:	681c      	ldr	r4, [r3, #0]
 800f430:	69fb      	ldr	r3, [r7, #28]
 800f432:	689d      	ldr	r5, [r3, #8]
 800f434:	69f8      	ldr	r0, [r7, #28]
 800f436:	f000 fb55 	bl	800fae4 <uxStreamBufferFrontSpace>
 800f43a:	4602      	mov	r2, r0
 800f43c:	69fb      	ldr	r3, [r7, #28]
 800f43e:	68db      	ldr	r3, [r3, #12]
 800f440:	9303      	str	r3, [sp, #12]
 800f442:	9202      	str	r2, [sp, #8]
 800f444:	9501      	str	r5, [sp, #4]
 800f446:	9400      	str	r4, [sp, #0]
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	69ba      	ldr	r2, [r7, #24]
 800f44c:	68b9      	ldr	r1, [r7, #8]
 800f44e:	480b      	ldr	r0, [pc, #44]	@ (800f47c <lTCPAddRxdata+0xe0>)
 800f450:	f011 f86c 	bl	802052c <lUDPLoggingPrintf>
                                             ( unsigned int ) pxStream->uxFront ) );
                }
            }
            #endif /* ipconfigHAS_DEBUG_PRINTF */

            if( uxOffset == 0U )
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d10b      	bne.n	800f472 <lTCPAddRxdata+0xd6>
            {
                /* Data is being added to rxStream at the head (offs = 0) */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                    if( bHasHandler != pdFALSE )
 800f45a:	693b      	ldr	r3, [r7, #16]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d005      	beq.n	800f46c <lTCPAddRxdata+0xd0>
                    {
                        vTCPAddRxdata_Callback( pxSocket, pucBuffer, ulByteCount );
 800f460:	683a      	ldr	r2, [r7, #0]
 800f462:	6979      	ldr	r1, [r7, #20]
 800f464:	68f8      	ldr	r0, [r7, #12]
 800f466:	f7ff ff1d 	bl	800f2a4 <vTCPAddRxdata_Callback>
 800f46a:	e002      	b.n	800f472 <lTCPAddRxdata+0xd6>
                    }
                    else
                #endif /* ipconfigUSE_CALLBACKS */
                {
                    vTCPAddRxdata_Stored( pxSocket );
 800f46c:	68f8      	ldr	r0, [r7, #12]
 800f46e:	f7ff ff50 	bl	800f312 <vTCPAddRxdata_Stored>
                }
            }
        }

        return xResult;
 800f472:	69bb      	ldr	r3, [r7, #24]
    }
 800f474:	4618      	mov	r0, r3
 800f476:	3720      	adds	r7, #32
 800f478:	46bd      	mov	sp, r7
 800f47a:	bdb0      	pop	{r4, r5, r7, pc}
 800f47c:	080243a0 	.word	0x080243a0

0800f480 <FreeRTOS_tx_space>:
 * @param[in] xSocket the socket to be checked.
 *
 * @return The bytes that can be written. Or else an error code.
 */
    BaseType_t FreeRTOS_tx_space( ConstSocket_t xSocket )
    {
 800f480:	b580      	push	{r7, lr}
 800f482:	b084      	sub	sp, #16
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f492:	2b06      	cmp	r3, #6
 800f494:	d003      	beq.n	800f49e <FreeRTOS_tx_space+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f496:	f06f 0315 	mvn.w	r3, #21
 800f49a:	60fb      	str	r3, [r7, #12]
 800f49c:	e011      	b.n	800f4c2 <FreeRTOS_tx_space+0x42>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d008      	beq.n	800f4ba <FreeRTOS_tx_space+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800f4a8:	68bb      	ldr	r3, [r7, #8]
 800f4aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f000 fb07 	bl	800fac2 <uxStreamBufferGetSpace>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	60fb      	str	r3, [r7, #12]
 800f4b8:	e003      	b.n	800f4c2 <FreeRTOS_tx_space+0x42>
            }
            else
            {
                xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f4c0:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 800f4c2:	68fb      	ldr	r3, [r7, #12]
    }
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	3710      	adds	r7, #16
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}

0800f4cc <FreeRTOS_tx_size>:
 *
 * @return The number of bytes stored in the Tx buffer of the socket.
 *         Or an error code.
 */
    BaseType_t FreeRTOS_tx_size( ConstSocket_t xSocket )
    {
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b084      	sub	sp, #16
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f4de:	2b06      	cmp	r3, #6
 800f4e0:	d003      	beq.n	800f4ea <FreeRTOS_tx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f4e2:	f06f 0315 	mvn.w	r3, #21
 800f4e6:	60fb      	str	r3, [r7, #12]
 800f4e8:	e00f      	b.n	800f50a <FreeRTOS_tx_size+0x3e>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d008      	beq.n	800f506 <FreeRTOS_tx_size+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.txStream );
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f000 fb03 	bl	800fb06 <uxStreamBufferGetSize>
 800f500:	4603      	mov	r3, r0
 800f502:	60fb      	str	r3, [r7, #12]
 800f504:	e001      	b.n	800f50a <FreeRTOS_tx_size+0x3e>
            }
            else
            {
                xReturn = 0;
 800f506:	2300      	movs	r3, #0
 800f508:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 800f50a:	68fb      	ldr	r3, [r7, #12]
    }
 800f50c:	4618      	mov	r0, r3
 800f50e:	3710      	adds	r7, #16
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}

0800f514 <FreeRTOS_issocketconnected>:
 * @param[in] xSocket The socket being checked.
 *
 * @return pdTRUE if TCP socket is connected.
 */
    BaseType_t FreeRTOS_issocketconnected( ConstSocket_t xSocket )
    {
 800f514:	b480      	push	{r7}
 800f516:	b085      	sub	sp, #20
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800f520:	2300      	movs	r3, #0
 800f522:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f524:	68bb      	ldr	r3, [r7, #8]
 800f526:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f52a:	2b06      	cmp	r3, #6
 800f52c:	d003      	beq.n	800f536 <FreeRTOS_issocketconnected+0x22>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f52e:	f06f 0315 	mvn.w	r3, #21
 800f532:	60fb      	str	r3, [r7, #12]
 800f534:	e00b      	b.n	800f54e <FreeRTOS_issocketconnected+0x3a>
        }
        else
        {
            if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f53c:	2b04      	cmp	r3, #4
 800f53e:	d906      	bls.n	800f54e <FreeRTOS_issocketconnected+0x3a>
            {
                if( pxSocket->u.xTCP.eTCPState < eCLOSE_WAIT )
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f546:	2b07      	cmp	r3, #7
 800f548:	d801      	bhi.n	800f54e <FreeRTOS_issocketconnected+0x3a>
                {
                    xReturn = pdTRUE;
 800f54a:	2301      	movs	r3, #1
 800f54c:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        return xReturn;
 800f54e:	68fb      	ldr	r3, [r7, #12]
    }
 800f550:	4618      	mov	r0, r3
 800f552:	3714      	adds	r7, #20
 800f554:	46bd      	mov	sp, r7
 800f556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55a:	4770      	bx	lr

0800f55c <FreeRTOS_rx_size>:
 *
 * @return Returns the number of bytes which can be read. Or an error
 *         code is returned.
 */
    BaseType_t FreeRTOS_rx_size( ConstSocket_t xSocket )
    {
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b084      	sub	sp, #16
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f568:	68bb      	ldr	r3, [r7, #8]
 800f56a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f56e:	2b06      	cmp	r3, #6
 800f570:	d003      	beq.n	800f57a <FreeRTOS_rx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f572:	f06f 0315 	mvn.w	r3, #21
 800f576:	60fb      	str	r3, [r7, #12]
 800f578:	e00f      	b.n	800f59a <FreeRTOS_rx_size+0x3e>
        }
        else if( pxSocket->u.xTCP.rxStream != NULL )
 800f57a:	68bb      	ldr	r3, [r7, #8]
 800f57c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f580:	2b00      	cmp	r3, #0
 800f582:	d008      	beq.n	800f596 <FreeRTOS_rx_size+0x3a>
        {
            xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f58a:	4618      	mov	r0, r3
 800f58c:	f000 fabb 	bl	800fb06 <uxStreamBufferGetSize>
 800f590:	4603      	mov	r3, r0
 800f592:	60fb      	str	r3, [r7, #12]
 800f594:	e001      	b.n	800f59a <FreeRTOS_rx_size+0x3e>
        }
        else
        {
            xReturn = 0;
 800f596:	2300      	movs	r3, #0
 800f598:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800f59a:	68fb      	ldr	r3, [r7, #12]
    }
 800f59c:	4618      	mov	r0, r3
 800f59e:	3710      	adds	r7, #16
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}

0800f5a4 <xSocketValid>:
 * @param[in] xSocket The socket to be checked.
 * @return pdTRUE if the socket is valid, else pdFALSE.
 *
 */
BaseType_t xSocketValid( const ConstSocket_t xSocket )
{
 800f5a4:	b480      	push	{r7}
 800f5a6:	b085      	sub	sp, #20
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturnValue = pdFALSE;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	60fb      	str	r3, [r7, #12]
     */

    /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
    /* coverity[misra_c_2012_rule_11_4_violation] */
    if( ( xSocket != FREERTOS_INVALID_SOCKET ) && ( xSocket != NULL ) )
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5b6:	d004      	beq.n	800f5c2 <xSocketValid+0x1e>
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d001      	beq.n	800f5c2 <xSocketValid+0x1e>
    {
        xReturnValue = pdTRUE;
 800f5be:	2301      	movs	r3, #1
 800f5c0:	60fb      	str	r3, [r7, #12]
    }

    return xReturnValue;
 800f5c2:	68fb      	ldr	r3, [r7, #12]
}
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	3714      	adds	r7, #20
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ce:	4770      	bx	lr

0800f5d0 <vTCPNetStat_TCPSocket>:
 * @brief A helper function of vTCPNetStat(), see below.
 *
 * @param[in] pxSocket The socket that needs logging.
 */
    static void vTCPNetStat_TCPSocket( const FreeRTOS_Socket_t * pxSocket )
    {
 800f5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5d4:	b09c      	sub	sp, #112	@ 0x70
 800f5d6:	af08      	add	r7, sp, #32
 800f5d8:	6078      	str	r0, [r7, #4]
        char pcRemoteIp[ 40 ];
        int xIPWidth = 32;
 800f5da:	2320      	movs	r3, #32
 800f5dc:	64bb      	str	r3, [r7, #72]	@ 0x48

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 800f5de:	f7f4 f915 	bl	800380c <xTaskGetTickCount>
 800f5e2:	4602      	mov	r2, r0
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f5ea:	1ad3      	subs	r3, r2, r3
 800f5ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
        #else
            TickType_t age = 0U;
        #endif

        char ucChildText[ 16 ] = "";
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	60fb      	str	r3, [r7, #12]
 800f5f2:	f107 0310 	add.w	r3, r7, #16
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	601a      	str	r2, [r3, #0]
 800f5fa:	605a      	str	r2, [r3, #4]
 800f5fc:	609a      	str	r2, [r3, #8]

        if( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eTCP_LISTEN )
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f604:	2b01      	cmp	r3, #1
 800f606:	d11f      	bne.n	800f648 <vTCPNetStat_TCPSocket+0x78>
        {
            /* Using function "snprintf". */
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
                                                 pxSocket->u.xTCP.usChildCount,
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800f60e:	461a      	mov	r2, r3
                                                 pxSocket->u.xTCP.usBacklog );
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800f616:	f107 000c 	add.w	r0, r7, #12
 800f61a:	9300      	str	r3, [sp, #0]
 800f61c:	4613      	mov	r3, r2
 800f61e:	4a3b      	ldr	r2, [pc, #236]	@ (800f70c <vTCPNetStat_TCPSocket+0x13c>)
 800f620:	2110      	movs	r1, #16
 800f622:	f011 ffaf 	bl	8021584 <snprintf>
 800f626:	6478      	str	r0, [r7, #68]	@ 0x44
            ( void ) copied_len;
            /* These should never evaluate to false since the buffers are both shorter than 5-6 characters (<=65535) */
            configASSERT( copied_len >= 0 );                                /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 800f628:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	da04      	bge.n	800f638 <vTCPNetStat_TCPSocket+0x68>
 800f62e:	f241 61df 	movw	r1, #5855	@ 0x16df
 800f632:	4837      	ldr	r0, [pc, #220]	@ (800f710 <vTCPNetStat_TCPSocket+0x140>)
 800f634:	f7f1 fd70 	bl	8001118 <vAssertCalled>
            configASSERT( copied_len < ( int32_t ) sizeof( ucChildText ) ); /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 800f638:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f63a:	2b0f      	cmp	r3, #15
 800f63c:	dd04      	ble.n	800f648 <vTCPNetStat_TCPSocket+0x78>
 800f63e:	f44f 51b7 	mov.w	r1, #5856	@ 0x16e0
 800f642:	4833      	ldr	r0, [pc, #204]	@ (800f710 <vTCPNetStat_TCPSocket+0x140>)
 800f644:	f7f1 fd68 	bl	8001118 <vAssertCalled>
        }

        if( age > 999999U )
 800f648:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f64a:	4a32      	ldr	r2, [pc, #200]	@ (800f714 <vTCPNetStat_TCPSocket+0x144>)
 800f64c:	4293      	cmp	r3, r2
 800f64e:	d901      	bls.n	800f654 <vTCPNetStat_TCPSocket+0x84>
        {
            age = 999999U;
 800f650:	4b30      	ldr	r3, [pc, #192]	@ (800f714 <vTCPNetStat_TCPSocket+0x144>)
 800f652:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	7a1b      	ldrb	r3, [r3, #8]
 800f658:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800f65c:	b2db      	uxtb	r3, r3
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d002      	beq.n	800f668 <vTCPNetStat_TCPSocket+0x98>
 800f662:	2b01      	cmp	r3, #1
 800f664:	d009      	beq.n	800f67a <vTCPNetStat_TCPSocket+0xaa>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* MISRA 16.4 Compliance */
                break;
 800f666:	e011      	b.n	800f68c <vTCPNetStat_TCPSocket+0xbc>
                    ( void ) snprintf( pcRemoteIp, sizeof( pcRemoteIp ), "%xip", ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f66c:	f107 001c 	add.w	r0, r7, #28
 800f670:	4a29      	ldr	r2, [pc, #164]	@ (800f718 <vTCPNetStat_TCPSocket+0x148>)
 800f672:	2128      	movs	r1, #40	@ 0x28
 800f674:	f011 ff86 	bl	8021584 <snprintf>
                    break;
 800f678:	e008      	b.n	800f68c <vTCPNetStat_TCPSocket+0xbc>
                                       "%pip", ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes );
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	3354      	adds	r3, #84	@ 0x54
                    ( void ) snprintf( pcRemoteIp,
 800f67e:	f107 001c 	add.w	r0, r7, #28
 800f682:	4a26      	ldr	r2, [pc, #152]	@ (800f71c <vTCPNetStat_TCPSocket+0x14c>)
 800f684:	2128      	movs	r1, #40	@ 0x28
 800f686:	f011 ff7d 	bl	8021584 <snprintf>
                    break;
 800f68a:	bf00      	nop
        }

        FreeRTOS_printf( ( "TCP %5d %-*s:%5d %d/%d %-13.13s %6u %6u%s\n",
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f690:	4698      	mov	r8, r3
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800f698:	461c      	mov	r4, r3
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	bf14      	ite	ne
 800f6a4:	2301      	movne	r3, #1
 800f6a6:	2300      	moveq	r3, #0
 800f6a8:	b2db      	uxtb	r3, r3
 800f6aa:	461d      	mov	r5, r3
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	bf14      	ite	ne
 800f6b6:	2301      	movne	r3, #1
 800f6b8:	2300      	moveq	r3, #0
 800f6ba:	b2db      	uxtb	r3, r3
 800f6bc:	461e      	mov	r6, r3
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f002 fbf5 	bl	8011eb4 <FreeRTOS_GetTCPStateName>
 800f6ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f6cc:	4a11      	ldr	r2, [pc, #68]	@ (800f714 <vTCPNetStat_TCPSocket+0x144>)
 800f6ce:	4293      	cmp	r3, r2
 800f6d0:	bf28      	it	cs
 800f6d2:	4613      	movcs	r3, r2
 800f6d4:	687a      	ldr	r2, [r7, #4]
 800f6d6:	f8b2 2070 	ldrh.w	r2, [r2, #112]	@ 0x70
 800f6da:	603a      	str	r2, [r7, #0]
 800f6dc:	f107 011c 	add.w	r1, r7, #28
 800f6e0:	f107 020c 	add.w	r2, r7, #12
 800f6e4:	9206      	str	r2, [sp, #24]
 800f6e6:	683a      	ldr	r2, [r7, #0]
 800f6e8:	9205      	str	r2, [sp, #20]
 800f6ea:	9304      	str	r3, [sp, #16]
 800f6ec:	9003      	str	r0, [sp, #12]
 800f6ee:	9602      	str	r6, [sp, #8]
 800f6f0:	9501      	str	r5, [sp, #4]
 800f6f2:	9400      	str	r4, [sp, #0]
 800f6f4:	460b      	mov	r3, r1
 800f6f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f6f8:	4641      	mov	r1, r8
 800f6fa:	4809      	ldr	r0, [pc, #36]	@ (800f720 <vTCPNetStat_TCPSocket+0x150>)
 800f6fc:	f010 ff16 	bl	802052c <lUDPLoggingPrintf>
                           ( pxSocket->u.xTCP.txStream != NULL ) ? 1 : 0,
                           FreeRTOS_GetTCPStateName( pxSocket->u.xTCP.eTCPState ),
                           ( unsigned ) ( ( age > 999999U ) ? 999999U : age ), /* Format 'age' for printing */
                           pxSocket->u.xTCP.usTimeout,
                           ucChildText ) );
    }
 800f700:	bf00      	nop
 800f702:	3750      	adds	r7, #80	@ 0x50
 800f704:	46bd      	mov	sp, r7
 800f706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f70a:	bf00      	nop
 800f70c:	080243e8 	.word	0x080243e8
 800f710:	08023f08 	.word	0x08023f08
 800f714:	000f423f 	.word	0x000f423f
 800f718:	080243f0 	.word	0x080243f0
 800f71c:	080243f8 	.word	0x080243f8
 800f720:	08024400 	.word	0x08024400

0800f724 <vTCPNetStat>:

/**
 * @brief Print a summary of all sockets and their connections.
 */
    void vTCPNetStat( void )
    {
 800f724:	b580      	push	{r7, lr}
 800f726:	b08a      	sub	sp, #40	@ 0x28
 800f728:	af02      	add	r7, sp, #8
        /* Show a simple listing of all created sockets and their connections */
        const ListItem_t * pxIterator;
        BaseType_t count = 0;
 800f72a:	2300      	movs	r3, #0
 800f72c:	61bb      	str	r3, [r7, #24]
        size_t uxMinimum = uxGetMinimumFreeNetworkBuffers();
 800f72e:	f006 fe59 	bl	80163e4 <uxGetMinimumFreeNetworkBuffers>
 800f732:	6178      	str	r0, [r7, #20]
        size_t uxCurrent = uxGetNumberOfFreeNetworkBuffers();
 800f734:	f006 fe62 	bl	80163fc <uxGetNumberOfFreeNetworkBuffers>
 800f738:	6138      	str	r0, [r7, #16]

        if( !listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) )
 800f73a:	4b26      	ldr	r3, [pc, #152]	@ (800f7d4 <vTCPNetStat+0xb0>)
 800f73c:	689b      	ldr	r3, [r3, #8]
 800f73e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f742:	d003      	beq.n	800f74c <vTCPNetStat+0x28>
        {
            FreeRTOS_printf( ( "PLUS-TCP not initialized\n" ) );
 800f744:	4824      	ldr	r0, [pc, #144]	@ (800f7d8 <vTCPNetStat+0xb4>)
 800f746:	f010 fef1 	bl	802052c <lUDPLoggingPrintf>
                               ( int ) count,
                               ( unsigned ) uxMinimum,
                               ( unsigned ) uxCurrent,
                               ( unsigned ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) );
        }
    }
 800f74a:	e03f      	b.n	800f7cc <vTCPNetStat+0xa8>
            const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 800f74c:	4b23      	ldr	r3, [pc, #140]	@ (800f7dc <vTCPNetStat+0xb8>)
 800f74e:	60fb      	str	r3, [r7, #12]
            const ListItem_t * pxEndUDP = listGET_END_MARKER( &xBoundUDPSocketsList );
 800f750:	4b23      	ldr	r3, [pc, #140]	@ (800f7e0 <vTCPNetStat+0xbc>)
 800f752:	60bb      	str	r3, [r7, #8]
            FreeRTOS_printf( ( "Prot Port IP-Remote       : Port  R/T Status       Alive  tmout Child\n" ) );
 800f754:	4823      	ldr	r0, [pc, #140]	@ (800f7e4 <vTCPNetStat+0xc0>)
 800f756:	f010 fee9 	bl	802052c <lUDPLoggingPrintf>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800f75a:	4b1e      	ldr	r3, [pc, #120]	@ (800f7d4 <vTCPNetStat+0xb0>)
 800f75c:	68db      	ldr	r3, [r3, #12]
 800f75e:	61fb      	str	r3, [r7, #28]
 800f760:	e00b      	b.n	800f77a <vTCPNetStat+0x56>
                const FreeRTOS_Socket_t * pxSocket = ( ( const FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800f762:	69fb      	ldr	r3, [r7, #28]
 800f764:	68db      	ldr	r3, [r3, #12]
 800f766:	607b      	str	r3, [r7, #4]
                vTCPNetStat_TCPSocket( pxSocket );
 800f768:	6878      	ldr	r0, [r7, #4]
 800f76a:	f7ff ff31 	bl	800f5d0 <vTCPNetStat_TCPSocket>
                count++;
 800f76e:	69bb      	ldr	r3, [r7, #24]
 800f770:	3301      	adds	r3, #1
 800f772:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 800f774:	69fb      	ldr	r3, [r7, #28]
 800f776:	685b      	ldr	r3, [r3, #4]
 800f778:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndTCP;
 800f77a:	69fa      	ldr	r2, [r7, #28]
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	429a      	cmp	r2, r3
 800f780:	d1ef      	bne.n	800f762 <vTCPNetStat+0x3e>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 800f782:	4b19      	ldr	r3, [pc, #100]	@ (800f7e8 <vTCPNetStat+0xc4>)
 800f784:	68db      	ldr	r3, [r3, #12]
 800f786:	61fb      	str	r3, [r7, #28]
 800f788:	e014      	b.n	800f7b4 <vTCPNetStat+0x90>
                FreeRTOS_printf( ( "UDP Port %5u\n",
 800f78a:	69fb      	ldr	r3, [r7, #28]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	b29b      	uxth	r3, r3
 800f790:	021b      	lsls	r3, r3, #8
 800f792:	b29a      	uxth	r2, r3
 800f794:	69fb      	ldr	r3, [r7, #28]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	0a1b      	lsrs	r3, r3, #8
 800f79a:	b29b      	uxth	r3, r3
 800f79c:	4313      	orrs	r3, r2
 800f79e:	b29b      	uxth	r3, r3
 800f7a0:	4619      	mov	r1, r3
 800f7a2:	4812      	ldr	r0, [pc, #72]	@ (800f7ec <vTCPNetStat+0xc8>)
 800f7a4:	f010 fec2 	bl	802052c <lUDPLoggingPrintf>
                count++;
 800f7a8:	69bb      	ldr	r3, [r7, #24]
 800f7aa:	3301      	adds	r3, #1
 800f7ac:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 800f7ae:	69fb      	ldr	r3, [r7, #28]
 800f7b0:	685b      	ldr	r3, [r3, #4]
 800f7b2:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndUDP;
 800f7b4:	69fa      	ldr	r2, [r7, #28]
 800f7b6:	68bb      	ldr	r3, [r7, #8]
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	d1e6      	bne.n	800f78a <vTCPNetStat+0x66>
            FreeRTOS_printf( ( "FreeRTOS_netstat: %d sockets %u < %u < %u buffers free\n",
 800f7bc:	2340      	movs	r3, #64	@ 0x40
 800f7be:	9300      	str	r3, [sp, #0]
 800f7c0:	693b      	ldr	r3, [r7, #16]
 800f7c2:	697a      	ldr	r2, [r7, #20]
 800f7c4:	69b9      	ldr	r1, [r7, #24]
 800f7c6:	480a      	ldr	r0, [pc, #40]	@ (800f7f0 <vTCPNetStat+0xcc>)
 800f7c8:	f010 feb0 	bl	802052c <lUDPLoggingPrintf>
    }
 800f7cc:	bf00      	nop
 800f7ce:	3720      	adds	r7, #32
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	bd80      	pop	{r7, pc}
 800f7d4:	200012b0 	.word	0x200012b0
 800f7d8:	0802442c 	.word	0x0802442c
 800f7dc:	200012b8 	.word	0x200012b8
 800f7e0:	200012a4 	.word	0x200012a4
 800f7e4:	08024448 	.word	0x08024448
 800f7e8:	2000129c 	.word	0x2000129c
 800f7ec:	08024490 	.word	0x08024490
 800f7f0:	080244a0 	.word	0x080244a0

0800f7f4 <vSocketSelectTCP>:
 *
 * @param[in] pxSocket The socket which needs to be checked.
 * @return An event mask of events that are active for this socket.
 */
        static EventBits_t vSocketSelectTCP( FreeRTOS_Socket_t * pxSocket )
        {
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b086      	sub	sp, #24
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
            /* Check if the TCP socket has already been accepted by
             * the owner.  If not, it is useless to return it from a
             * select(). */
            BaseType_t bAccepted = pdFALSE;
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	617b      	str	r3, [r7, #20]
            EventBits_t xSocketBits = 0U;
 800f800:	2300      	movs	r3, #0
 800f802:	613b      	str	r3, [r7, #16]

            if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f80a:	f003 0304 	and.w	r3, r3, #4
 800f80e:	b2db      	uxtb	r3, r3
 800f810:	2b00      	cmp	r3, #0
 800f812:	d109      	bne.n	800f828 <vSocketSelectTCP+0x34>
            {
                if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f81a:	f003 0302 	and.w	r3, r3, #2
 800f81e:	b2db      	uxtb	r3, r3
 800f820:	2b00      	cmp	r3, #0
 800f822:	d101      	bne.n	800f828 <vSocketSelectTCP+0x34>
                {
                    bAccepted = pdTRUE;
 800f824:	2301      	movs	r3, #1
 800f826:	617b      	str	r3, [r7, #20]
                }
            }

            /* Is the set owner interested in READ events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != ( EventBits_t ) 0U )
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f82c:	f003 0301 	and.w	r3, r3, #1
 800f830:	2b00      	cmp	r3, #0
 800f832:	d038      	beq.n	800f8a6 <vSocketSelectTCP+0xb2>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f83a:	2b01      	cmp	r3, #1
 800f83c:	d111      	bne.n	800f862 <vSocketSelectTCP+0x6e>
                {
                    if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f842:	2b00      	cmp	r3, #0
 800f844:	d02f      	beq.n	800f8a6 <vSocketSelectTCP+0xb2>
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f84a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f84e:	f003 0302 	and.w	r3, r3, #2
 800f852:	b2db      	uxtb	r3, r3
 800f854:	2b00      	cmp	r3, #0
 800f856:	d026      	beq.n	800f8a6 <vSocketSelectTCP+0xb2>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800f858:	693b      	ldr	r3, [r7, #16]
 800f85a:	f043 0301 	orr.w	r3, r3, #1
 800f85e:	613b      	str	r3, [r7, #16]
 800f860:	e021      	b.n	800f8a6 <vSocketSelectTCP+0xb2>
                    }
                }
                else if( ( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f868:	f003 0308 	and.w	r3, r3, #8
 800f86c:	b2db      	uxtb	r3, r3
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d00c      	beq.n	800f88c <vSocketSelectTCP+0x98>
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f878:	f003 0302 	and.w	r3, r3, #2
 800f87c:	b2db      	uxtb	r3, r3
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d004      	beq.n	800f88c <vSocketSelectTCP+0x98>
                {
                    /* This socket has the re-use flag. After connecting it turns into
                     * a connected socket. Set the READ event, so that accept() will be called. */
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800f882:	693b      	ldr	r3, [r7, #16]
 800f884:	f043 0301 	orr.w	r3, r3, #1
 800f888:	613b      	str	r3, [r7, #16]
 800f88a:	e00c      	b.n	800f8a6 <vSocketSelectTCP+0xb2>
                }
                else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d009      	beq.n	800f8a6 <vSocketSelectTCP+0xb2>
 800f892:	6878      	ldr	r0, [r7, #4]
 800f894:	f7ff fe62 	bl	800f55c <FreeRTOS_rx_size>
 800f898:	4603      	mov	r3, r0
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	dd03      	ble.n	800f8a6 <vSocketSelectTCP+0xb2>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800f89e:	693b      	ldr	r3, [r7, #16]
 800f8a0:	f043 0301 	orr.w	r3, r3, #1
 800f8a4:	613b      	str	r3, [r7, #16]
                    /* Nothing. */
                }
            }

            /* Is the set owner interested in EXCEPTION events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f8aa:	f003 0304 	and.w	r3, r3, #4
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d00d      	beq.n	800f8ce <vSocketSelectTCP+0xda>
            {
                if( ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) || ( pxSocket->u.xTCP.eTCPState == eCLOSED ) )
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f8b8:	2b08      	cmp	r3, #8
 800f8ba:	d004      	beq.n	800f8c6 <vSocketSelectTCP+0xd2>
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d103      	bne.n	800f8ce <vSocketSelectTCP+0xda>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_EXCEPT;
 800f8c6:	693b      	ldr	r3, [r7, #16]
 800f8c8:	f043 0304 	orr.w	r3, r3, #4
 800f8cc:	613b      	str	r3, [r7, #16]
                }
            }

            /* Is the set owner interested in WRITE events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f8d2:	f003 0302 	and.w	r3, r3, #2
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d034      	beq.n	800f944 <vSocketSelectTCP+0x150>
            {
                BaseType_t bMatch = pdFALSE;
 800f8da:	2300      	movs	r3, #0
 800f8dc:	60fb      	str	r3, [r7, #12]

                if( bAccepted != 0 )
 800f8de:	697b      	ldr	r3, [r7, #20]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d007      	beq.n	800f8f4 <vSocketSelectTCP+0x100>
                {
                    if( FreeRTOS_tx_space( pxSocket ) > 0 )
 800f8e4:	6878      	ldr	r0, [r7, #4]
 800f8e6:	f7ff fdcb 	bl	800f480 <FreeRTOS_tx_space>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	dd01      	ble.n	800f8f4 <vSocketSelectTCP+0x100>
                    {
                        bMatch = pdTRUE;
 800f8f0:	2301      	movs	r3, #1
 800f8f2:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch == pdFALSE )
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d11d      	bne.n	800f936 <vSocketSelectTCP+0x142>
                {
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800f900:	f003 0308 	and.w	r3, r3, #8
 800f904:	b2db      	uxtb	r3, r3
 800f906:	2b00      	cmp	r3, #0
 800f908:	d015      	beq.n	800f936 <vSocketSelectTCP+0x142>
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800f910:	2b04      	cmp	r3, #4
 800f912:	d910      	bls.n	800f936 <vSocketSelectTCP+0x142>
                        ( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800f91a:	f003 0310 	and.w	r3, r3, #16
 800f91e:	b2db      	uxtb	r3, r3
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800f920:	2b00      	cmp	r3, #0
 800f922:	d108      	bne.n	800f936 <vSocketSelectTCP+0x142>
                    {
                        pxSocket->u.xTCP.bits.bConnPassed = pdTRUE_UNSIGNED;
 800f924:	687a      	ldr	r2, [r7, #4]
 800f926:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800f92a:	f043 0310 	orr.w	r3, r3, #16
 800f92e:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                        bMatch = pdTRUE;
 800f932:	2301      	movs	r3, #1
 800f934:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch != pdFALSE )
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d003      	beq.n	800f944 <vSocketSelectTCP+0x150>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_WRITE;
 800f93c:	693b      	ldr	r3, [r7, #16]
 800f93e:	f043 0302 	orr.w	r3, r3, #2
 800f942:	613b      	str	r3, [r7, #16]
                }
            }

            return xSocketBits;
 800f944:	693b      	ldr	r3, [r7, #16]
        }
 800f946:	4618      	mov	r0, r3
 800f948:	3718      	adds	r7, #24
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd80      	pop	{r7, pc}
	...

0800f950 <vSocketSelect>:
 *        event has occurred.
 *
 * @param[in] pxSocketSet The socket-set which is to be waited on for change.
 */
    void vSocketSelect( const SocketSelect_t * pxSocketSet )
    {
 800f950:	b580      	push	{r7, lr}
 800f952:	b08a      	sub	sp, #40	@ 0x28
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
        BaseType_t xRound;
        EventBits_t xSocketBits, xBitsToClear;

        #if ipconfigUSE_TCP == 1
            BaseType_t xLastRound = 1;
 800f958:	2301      	movs	r3, #1
 800f95a:	613b      	str	r3, [r7, #16]
        #else
            BaseType_t xLastRound = 0;
        #endif

        /* These flags will be switched on after checking the socket status. */
        EventBits_t xGroupBits = 0;
 800f95c:	2300      	movs	r3, #0
 800f95e:	61fb      	str	r3, [r7, #28]

        for( xRound = 0; xRound <= xLastRound; xRound++ )
 800f960:	2300      	movs	r3, #0
 800f962:	627b      	str	r3, [r7, #36]	@ 0x24
 800f964:	e043      	b.n	800f9ee <vSocketSelect+0x9e>
        {
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;

            if( xRound == 0 )
 800f966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d102      	bne.n	800f972 <vSocketSelect+0x22>
            {
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxEnd = ( ( const ListItem_t * ) &( xBoundUDPSocketsList.xListEnd ) );
 800f96c:	4b34      	ldr	r3, [pc, #208]	@ (800fa40 <vSocketSelect+0xf0>)
 800f96e:	617b      	str	r3, [r7, #20]
 800f970:	e001      	b.n	800f976 <vSocketSelect+0x26>
                else
                {
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800f972:	4b34      	ldr	r3, [pc, #208]	@ (800fa44 <vSocketSelect+0xf4>)
 800f974:	617b      	str	r3, [r7, #20]
                }
            #endif /* ipconfigUSE_TCP == 1 */

            for( pxIterator = listGET_NEXT( pxEnd );
 800f976:	697b      	ldr	r3, [r7, #20]
 800f978:	685b      	ldr	r3, [r3, #4]
 800f97a:	61bb      	str	r3, [r7, #24]
 800f97c:	e030      	b.n	800f9e0 <vSocketSelect+0x90>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800f97e:	69bb      	ldr	r3, [r7, #24]
 800f980:	68db      	ldr	r3, [r3, #12]
 800f982:	60bb      	str	r3, [r7, #8]

                if( pxSocket->pxSocketSet != pxSocketSet )
 800f984:	68bb      	ldr	r3, [r7, #8]
 800f986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f988:	687a      	ldr	r2, [r7, #4]
 800f98a:	429a      	cmp	r2, r3
 800f98c:	d124      	bne.n	800f9d8 <vSocketSelect+0x88>
                {
                    /* Socket does not belong to this select group. */
                    continue;
                }

                xSocketBits = 0;
 800f98e:	2300      	movs	r3, #0
 800f990:	623b      	str	r3, [r7, #32]

                #if ( ipconfigUSE_TCP == 1 )
                    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f998:	2b06      	cmp	r3, #6
 800f99a:	d107      	bne.n	800f9ac <vSocketSelect+0x5c>
                    {
                        xSocketBits |= vSocketSelectTCP( pxSocket );
 800f99c:	68b8      	ldr	r0, [r7, #8]
 800f99e:	f7ff ff29 	bl	800f7f4 <vSocketSelectTCP>
 800f9a2:	4602      	mov	r2, r0
 800f9a4:	6a3b      	ldr	r3, [r7, #32]
 800f9a6:	4313      	orrs	r3, r2
 800f9a8:	623b      	str	r3, [r7, #32]
 800f9aa:	e00d      	b.n	800f9c8 <vSocketSelect+0x78>
                    }
                    else
                #endif /* ipconfigUSE_TCP == 1 */
                {
                    /* Select events for UDP are simpler. */
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f9b0:	f003 0301 	and.w	r3, r3, #1
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d007      	beq.n	800f9c8 <vSocketSelect+0x78>
                        ( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 800f9b8:	68bb      	ldr	r3, [r7, #8]
 800f9ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d003      	beq.n	800f9c8 <vSocketSelect+0x78>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800f9c0:	6a3b      	ldr	r3, [r7, #32]
 800f9c2:	f043 0301 	orr.w	r3, r3, #1
 800f9c6:	623b      	str	r3, [r7, #32]
                    /* The WRITE and EXCEPT bits are not used for UDP */
                } /* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

                /* Each socket keeps its own event flags, which are looked-up
                 * by FreeRTOS_FD_ISSSET() */
                pxSocket->xSocketBits = xSocketBits;
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	6a3a      	ldr	r2, [r7, #32]
 800f9cc:	649a      	str	r2, [r3, #72]	@ 0x48

                /* The ORed value will be used to set the bits in the event
                 * group. */
                xGroupBits |= xSocketBits;
 800f9ce:	69fa      	ldr	r2, [r7, #28]
 800f9d0:	6a3b      	ldr	r3, [r7, #32]
 800f9d2:	4313      	orrs	r3, r2
 800f9d4:	61fb      	str	r3, [r7, #28]
 800f9d6:	e000      	b.n	800f9da <vSocketSelect+0x8a>
                    continue;
 800f9d8:	bf00      	nop
                 pxIterator = listGET_NEXT( pxIterator ) )
 800f9da:	69bb      	ldr	r3, [r7, #24]
 800f9dc:	685b      	ldr	r3, [r3, #4]
 800f9de:	61bb      	str	r3, [r7, #24]
                 pxIterator != pxEnd;
 800f9e0:	69ba      	ldr	r2, [r7, #24]
 800f9e2:	697b      	ldr	r3, [r7, #20]
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	d1ca      	bne.n	800f97e <vSocketSelect+0x2e>
        for( xRound = 0; xRound <= xLastRound; xRound++ )
 800f9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9ea:	3301      	adds	r3, #1
 800f9ec:	627b      	str	r3, [r7, #36]	@ 0x24
 800f9ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f9f0:	693b      	ldr	r3, [r7, #16]
 800f9f2:	429a      	cmp	r2, r3
 800f9f4:	ddb7      	ble.n	800f966 <vSocketSelect+0x16>
            } /* for( pxIterator ... ) */
        }     /* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

        xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	2100      	movs	r1, #0
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f7f2 fc19 	bl	8002234 <xEventGroupClearBits>
 800fa02:	60f8      	str	r0, [r7, #12]

        /* Now set the necessary bits. */
        xBitsToClear = ( xBitsToClear & ~xGroupBits ) & ( ( EventBits_t ) eSELECT_ALL );
 800fa04:	69fb      	ldr	r3, [r7, #28]
 800fa06:	43da      	mvns	r2, r3
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	4013      	ands	r3, r2
 800fa0c:	f003 030f 	and.w	r3, r3, #15
 800fa10:	60fb      	str	r3, [r7, #12]
             * and cleared in FreeRTOS_select(). */
            xBitsToClear &= ~( ( EventBits_t ) eSELECT_INTR );
        }
        #endif /* ipconfigSUPPORT_SIGNALS */

        if( xBitsToClear != 0U )
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d005      	beq.n	800fa24 <vSocketSelect+0xd4>
        {
            ( void ) xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	68f9      	ldr	r1, [r7, #12]
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f7f2 fc08 	bl	8002234 <xEventGroupClearBits>
        }

        /* Now include eSELECT_CALL_IP to wakeup the caller. */
        ( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681a      	ldr	r2, [r3, #0]
 800fa28:	69fb      	ldr	r3, [r7, #28]
 800fa2a:	f043 0310 	orr.w	r3, r3, #16
 800fa2e:	4619      	mov	r1, r3
 800fa30:	4610      	mov	r0, r2
 800fa32:	f7f2 fc2d 	bl	8002290 <xEventGroupSetBits>
    }
 800fa36:	bf00      	nop
 800fa38:	3728      	adds	r7, #40	@ 0x28
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bd80      	pop	{r7, pc}
 800fa3e:	bf00      	nop
 800fa40:	200012a4 	.word	0x200012a4
 800fa44:	200012b8 	.word	0x200012b8

0800fa48 <uxStreamBufferSpace>:
 *         minus 1.
 */
size_t uxStreamBufferSpace( const StreamBuffer_t * const pxBuffer,
                            size_t uxLower,
                            size_t uxUpper )
{
 800fa48:	b480      	push	{r7}
 800fa4a:	b087      	sub	sp, #28
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	60f8      	str	r0, [r7, #12]
 800fa50:	60b9      	str	r1, [r7, #8]
 800fa52:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	691b      	ldr	r3, [r3, #16]
 800fa58:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower - 1U;
 800fa5a:	693a      	ldr	r2, [r7, #16]
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	441a      	add	r2, r3
 800fa60:	68bb      	ldr	r3, [r7, #8]
 800fa62:	1ad3      	subs	r3, r2, r3
 800fa64:	3b01      	subs	r3, #1
 800fa66:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 800fa68:	697a      	ldr	r2, [r7, #20]
 800fa6a:	693b      	ldr	r3, [r7, #16]
 800fa6c:	429a      	cmp	r2, r3
 800fa6e:	d303      	bcc.n	800fa78 <uxStreamBufferSpace+0x30>
    {
        uxCount -= uxLength;
 800fa70:	697a      	ldr	r2, [r7, #20]
 800fa72:	693b      	ldr	r3, [r7, #16]
 800fa74:	1ad3      	subs	r3, r2, r3
 800fa76:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 800fa78:	697b      	ldr	r3, [r7, #20]
}
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	371c      	adds	r7, #28
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa84:	4770      	bx	lr

0800fa86 <uxStreamBufferDistance>:
 * @return The distance between uxLower and uxUpper.
 */
size_t uxStreamBufferDistance( const StreamBuffer_t * const pxBuffer,
                               size_t uxLower,
                               size_t uxUpper )
{
 800fa86:	b480      	push	{r7}
 800fa88:	b087      	sub	sp, #28
 800fa8a:	af00      	add	r7, sp, #0
 800fa8c:	60f8      	str	r0, [r7, #12]
 800fa8e:	60b9      	str	r1, [r7, #8]
 800fa90:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	691b      	ldr	r3, [r3, #16]
 800fa96:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower;
 800fa98:	693a      	ldr	r2, [r7, #16]
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	441a      	add	r2, r3
 800fa9e:	68bb      	ldr	r3, [r7, #8]
 800faa0:	1ad3      	subs	r3, r2, r3
 800faa2:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 800faa4:	697a      	ldr	r2, [r7, #20]
 800faa6:	693b      	ldr	r3, [r7, #16]
 800faa8:	429a      	cmp	r2, r3
 800faaa:	d303      	bcc.n	800fab4 <uxStreamBufferDistance+0x2e>
    {
        uxCount -= uxLength;
 800faac:	697a      	ldr	r2, [r7, #20]
 800faae:	693b      	ldr	r3, [r7, #16]
 800fab0:	1ad3      	subs	r3, r2, r3
 800fab2:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 800fab4:	697b      	ldr	r3, [r7, #20]
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	371c      	adds	r7, #28
 800faba:	46bd      	mov	sp, r7
 800fabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac0:	4770      	bx	lr

0800fac2 <uxStreamBufferGetSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can still be added to uxHead
 *         before hitting on uxTail
 */
size_t uxStreamBufferGetSpace( const StreamBuffer_t * const pxBuffer )
{
 800fac2:	b580      	push	{r7, lr}
 800fac4:	b082      	sub	sp, #8
 800fac6:	af00      	add	r7, sp, #0
 800fac8:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxHead, pxBuffer->uxTail );
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6899      	ldr	r1, [r3, #8]
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	461a      	mov	r2, r3
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f7ff ffb7 	bl	800fa48 <uxStreamBufferSpace>
 800fada:	4603      	mov	r3, r0
}
 800fadc:	4618      	mov	r0, r3
 800fade:	3708      	adds	r7, #8
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd80      	pop	{r7, pc}

0800fae4 <uxStreamBufferFrontSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return Distance between uxFront and uxTail or the number of items
 *         which can still be added to uxFront, before hitting on uxTail.
 */
size_t uxStreamBufferFrontSpace( const StreamBuffer_t * const pxBuffer )
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b082      	sub	sp, #8
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxFront, pxBuffer->uxTail );
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	68d9      	ldr	r1, [r3, #12]
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	461a      	mov	r2, r3
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f7ff ffa6 	bl	800fa48 <uxStreamBufferSpace>
 800fafc:	4603      	mov	r3, r0
}
 800fafe:	4618      	mov	r0, r3
 800fb00:	3708      	adds	r7, #8
 800fb02:	46bd      	mov	sp, r7
 800fb04:	bd80      	pop	{r7, pc}

0800fb06 <uxStreamBufferGetSize>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can be read from the tail before
 *        reaching the head.
 */
size_t uxStreamBufferGetSize( const StreamBuffer_t * const pxBuffer )
{
 800fb06:	b580      	push	{r7, lr}
 800fb08:	b082      	sub	sp, #8
 800fb0a:	af00      	add	r7, sp, #0
 800fb0c:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxTail, pxBuffer->uxHead );
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	6819      	ldr	r1, [r3, #0]
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	689b      	ldr	r3, [r3, #8]
 800fb16:	461a      	mov	r2, r3
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f7ff ffb4 	bl	800fa86 <uxStreamBufferDistance>
 800fb1e:	4603      	mov	r3, r0
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3708      	adds	r7, #8
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}

0800fb28 <uxStreamBufferMidSpace>:
 *        buffer.
 * @param[in] pxBuffer The circular stream buffer.
 * @return The space between the mid pointer and the head.
 */
size_t uxStreamBufferMidSpace( const StreamBuffer_t * const pxBuffer )
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b082      	sub	sp, #8
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxMid, pxBuffer->uxHead );
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	6859      	ldr	r1, [r3, #4]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	689b      	ldr	r3, [r3, #8]
 800fb38:	461a      	mov	r2, r3
 800fb3a:	6878      	ldr	r0, [r7, #4]
 800fb3c:	f7ff ffa3 	bl	800fa86 <uxStreamBufferDistance>
 800fb40:	4603      	mov	r3, r0
}
 800fb42:	4618      	mov	r0, r3
 800fb44:	3708      	adds	r7, #8
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}

0800fb4a <vStreamBufferClear>:
/**
 * @brief Clear the stream buffer.
 * @param[in] pxBuffer The circular stream buffer.
 */
void vStreamBufferClear( StreamBuffer_t * const pxBuffer )
{
 800fb4a:	b480      	push	{r7}
 800fb4c:	b083      	sub	sp, #12
 800fb4e:	af00      	add	r7, sp, #0
 800fb50:	6078      	str	r0, [r7, #4]
    /* Make the circular buffer empty */
    pxBuffer->uxHead = 0U;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2200      	movs	r2, #0
 800fb56:	609a      	str	r2, [r3, #8]
    pxBuffer->uxTail = 0U;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	601a      	str	r2, [r3, #0]
    pxBuffer->uxFront = 0U;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	2200      	movs	r2, #0
 800fb62:	60da      	str	r2, [r3, #12]
    pxBuffer->uxMid = 0U;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2200      	movs	r2, #0
 800fb68:	605a      	str	r2, [r3, #4]
}
 800fb6a:	bf00      	nop
 800fb6c:	370c      	adds	r7, #12
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb74:	4770      	bx	lr

0800fb76 <vStreamBufferMoveMid>:
 * @param[in] pxBuffer The circular stream buffer.
 * @param[in] uxCount The byte count by which the mid pointer is to be moved.
 */
void vStreamBufferMoveMid( StreamBuffer_t * const pxBuffer,
                           const size_t uxCount )
{
 800fb76:	b580      	push	{r7, lr}
 800fb78:	b086      	sub	sp, #24
 800fb7a:	af00      	add	r7, sp, #0
 800fb7c:	6078      	str	r0, [r7, #4]
 800fb7e:	6039      	str	r1, [r7, #0]
    /* Increment uxMid, but no further than uxHead */
    const size_t uxLength = pxBuffer->LENGTH;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	691b      	ldr	r3, [r3, #16]
 800fb84:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	f7ff ffce 	bl	800fb28 <uxStreamBufferMidSpace>
 800fb8c:	60b8      	str	r0, [r7, #8]
    size_t uxMid = pxBuffer->uxMid;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	685b      	ldr	r3, [r3, #4]
 800fb92:	617b      	str	r3, [r7, #20]
    size_t uxMoveCount = uxCount;
 800fb94:	683b      	ldr	r3, [r7, #0]
 800fb96:	613b      	str	r3, [r7, #16]

    if( uxMoveCount > uxSize )
 800fb98:	693a      	ldr	r2, [r7, #16]
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	429a      	cmp	r2, r3
 800fb9e:	d901      	bls.n	800fba4 <vStreamBufferMoveMid+0x2e>
    {
        uxMoveCount = uxSize;
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	613b      	str	r3, [r7, #16]
    }

    uxMid += uxMoveCount;
 800fba4:	697a      	ldr	r2, [r7, #20]
 800fba6:	693b      	ldr	r3, [r7, #16]
 800fba8:	4413      	add	r3, r2
 800fbaa:	617b      	str	r3, [r7, #20]

    if( uxMid >= uxLength )
 800fbac:	697a      	ldr	r2, [r7, #20]
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	429a      	cmp	r2, r3
 800fbb2:	d303      	bcc.n	800fbbc <vStreamBufferMoveMid+0x46>
    {
        uxMid -= uxLength;
 800fbb4:	697a      	ldr	r2, [r7, #20]
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	1ad3      	subs	r3, r2, r3
 800fbba:	617b      	str	r3, [r7, #20]
    }

    pxBuffer->uxMid = uxMid;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	697a      	ldr	r2, [r7, #20]
 800fbc0:	605a      	str	r2, [r3, #4]
}
 800fbc2:	bf00      	nop
 800fbc4:	3718      	adds	r7, #24
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	bd80      	pop	{r7, pc}

0800fbca <xStreamBufferLessThenEqual>:
 * @return pdTRUE if uxLeft <= uxRight, else pdFALSE.
 */
BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t * const pxBuffer,
                                       size_t uxLeft,
                                       size_t uxRight )
{
 800fbca:	b480      	push	{r7}
 800fbcc:	b087      	sub	sp, #28
 800fbce:	af00      	add	r7, sp, #0
 800fbd0:	60f8      	str	r0, [r7, #12]
 800fbd2:	60b9      	str	r1, [r7, #8]
 800fbd4:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	617b      	str	r3, [r7, #20]
    const size_t uxTail = pxBuffer->uxTail;
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	613b      	str	r3, [r7, #16]

    if( ( uxLeft - uxTail ) <= ( uxRight - uxTail ) )
 800fbe0:	68ba      	ldr	r2, [r7, #8]
 800fbe2:	693b      	ldr	r3, [r7, #16]
 800fbe4:	1ad2      	subs	r2, r2, r3
 800fbe6:	6879      	ldr	r1, [r7, #4]
 800fbe8:	693b      	ldr	r3, [r7, #16]
 800fbea:	1acb      	subs	r3, r1, r3
 800fbec:	429a      	cmp	r2, r3
 800fbee:	d801      	bhi.n	800fbf4 <xStreamBufferLessThenEqual+0x2a>
    {
        xReturn = pdTRUE;
 800fbf0:	2301      	movs	r3, #1
 800fbf2:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800fbf4:	697b      	ldr	r3, [r7, #20]
}
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	371c      	adds	r7, #28
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc00:	4770      	bx	lr

0800fc02 <uxStreamBufferGetPtr>:
 *         actual number of available bytes since this is a circular buffer and tail
 *         can loop back to the start of the buffer).
 */
size_t uxStreamBufferGetPtr( StreamBuffer_t * const pxBuffer,
                             uint8_t ** const ppucData )
{
 800fc02:	b580      	push	{r7, lr}
 800fc04:	b084      	sub	sp, #16
 800fc06:	af00      	add	r7, sp, #0
 800fc08:	6078      	str	r0, [r7, #4]
 800fc0a:	6039      	str	r1, [r7, #0]
    const size_t uxNextTail = pxBuffer->uxTail;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 800fc12:	6878      	ldr	r0, [r7, #4]
 800fc14:	f7ff ff77 	bl	800fb06 <uxStreamBufferGetSize>
 800fc18:	60b8      	str	r0, [r7, #8]

    /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
    /* coverity[misra_c_2012_rule_18_4_violation] */
    *ppucData = pxBuffer->ucArray + uxNextTail;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	f103 0214 	add.w	r2, r3, #20
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	441a      	add	r2, r3
 800fc24:	683b      	ldr	r3, [r7, #0]
 800fc26:	601a      	str	r2, [r3, #0]

    return FreeRTOS_min_size_t( uxSize, pxBuffer->LENGTH - uxNextTail );
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	691a      	ldr	r2, [r3, #16]
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	1ad3      	subs	r3, r2, r3
 800fc30:	4619      	mov	r1, r3
 800fc32:	68b8      	ldr	r0, [r7, #8]
 800fc34:	f7f9 fede 	bl	80099f4 <FreeRTOS_min_size_t>
 800fc38:	4603      	mov	r3, r0
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3710      	adds	r7, #16
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}

0800fc42 <uxStreamBufferAdd>:
 */
size_t uxStreamBufferAdd( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          const uint8_t * const pucData,
                          size_t uxByteCount )
{
 800fc42:	b580      	push	{r7, lr}
 800fc44:	b08a      	sub	sp, #40	@ 0x28
 800fc46:	af00      	add	r7, sp, #0
 800fc48:	60f8      	str	r0, [r7, #12]
 800fc4a:	60b9      	str	r1, [r7, #8]
 800fc4c:	607a      	str	r2, [r7, #4]
 800fc4e:	603b      	str	r3, [r7, #0]
    size_t uxCount;
    size_t uxSpace = uxStreamBufferGetSpace( pxBuffer );
 800fc50:	68f8      	ldr	r0, [r7, #12]
 800fc52:	f7ff ff36 	bl	800fac2 <uxStreamBufferGetSpace>
 800fc56:	6278      	str	r0, [r7, #36]	@ 0x24

    /* If uxOffset > 0, items can be placed in front of uxHead */
    if( uxSpace > uxOffset )
 800fc58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fc5a:	68bb      	ldr	r3, [r7, #8]
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	d904      	bls.n	800fc6a <uxStreamBufferAdd+0x28>
    {
        uxSpace -= uxOffset;
 800fc60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fc62:	68bb      	ldr	r3, [r7, #8]
 800fc64:	1ad3      	subs	r3, r2, r3
 800fc66:	627b      	str	r3, [r7, #36]	@ 0x24
 800fc68:	e001      	b.n	800fc6e <uxStreamBufferAdd+0x2c>
    }
    else
    {
        uxSpace = 0U;
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* The number of bytes that can be written is the minimum of the number of
     * bytes requested and the number available. */
    uxCount = FreeRTOS_min_size_t( uxSpace, uxByteCount );
 800fc6e:	6839      	ldr	r1, [r7, #0]
 800fc70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fc72:	f7f9 febf 	bl	80099f4 <FreeRTOS_min_size_t>
 800fc76:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 800fc78:	69fb      	ldr	r3, [r7, #28]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d05c      	beq.n	800fd38 <uxStreamBufferAdd+0xf6>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	691b      	ldr	r3, [r3, #16]
 800fc82:	61bb      	str	r3, [r7, #24]
        size_t uxNextHead = pxBuffer->uxHead;
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	689b      	ldr	r3, [r3, #8]
 800fc88:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 800fc8a:	68bb      	ldr	r3, [r7, #8]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d00b      	beq.n	800fca8 <uxStreamBufferAdd+0x66>
        {
            /* ( uxOffset > 0 ) means: write in front if the uxHead marker */
            uxNextHead += uxOffset;
 800fc90:	6a3a      	ldr	r2, [r7, #32]
 800fc92:	68bb      	ldr	r3, [r7, #8]
 800fc94:	4413      	add	r3, r2
 800fc96:	623b      	str	r3, [r7, #32]

            if( uxNextHead >= uxLength )
 800fc98:	6a3a      	ldr	r2, [r7, #32]
 800fc9a:	69bb      	ldr	r3, [r7, #24]
 800fc9c:	429a      	cmp	r2, r3
 800fc9e:	d303      	bcc.n	800fca8 <uxStreamBufferAdd+0x66>
            {
                uxNextHead -= uxLength;
 800fca0:	6a3a      	ldr	r2, [r7, #32]
 800fca2:	69bb      	ldr	r3, [r7, #24]
 800fca4:	1ad3      	subs	r3, r2, r3
 800fca6:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d021      	beq.n	800fcf2 <uxStreamBufferAdd+0xb0>
        {
            /* Calculate the number of bytes that can be added in the first
            * write - which may be less than the total number of bytes that need
            * to be added if the buffer will wrap back to the beginning. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextHead, uxCount );
 800fcae:	69ba      	ldr	r2, [r7, #24]
 800fcb0:	6a3b      	ldr	r3, [r7, #32]
 800fcb2:	1ad3      	subs	r3, r2, r3
 800fcb4:	69f9      	ldr	r1, [r7, #28]
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f7f9 fe9c 	bl	80099f4 <FreeRTOS_min_size_t>
 800fcbc:	6178      	str	r0, [r7, #20]

            /* Write as many bytes as can be written in the first write. */
            ( void ) memcpy( &( pxBuffer->ucArray[ uxNextHead ] ), pucData, uxFirst );
 800fcbe:	6a3b      	ldr	r3, [r7, #32]
 800fcc0:	3310      	adds	r3, #16
 800fcc2:	68fa      	ldr	r2, [r7, #12]
 800fcc4:	4413      	add	r3, r2
 800fcc6:	3304      	adds	r3, #4
 800fcc8:	697a      	ldr	r2, [r7, #20]
 800fcca:	6879      	ldr	r1, [r7, #4]
 800fccc:	4618      	mov	r0, r3
 800fcce:	f010 fe49 	bl	8020964 <memcpy>

            /* If the number of bytes written was less than the number that
             * could be written in the first write... */
            if( uxCount > uxFirst )
 800fcd2:	69fa      	ldr	r2, [r7, #28]
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	d90b      	bls.n	800fcf2 <uxStreamBufferAdd+0xb0>
            {
                /* ...then write the remaining bytes to the start of the
                 * buffer. */
                ( void ) memcpy( pxBuffer->ucArray, &( pucData[ uxFirst ] ), uxCount - uxFirst );
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	f103 0014 	add.w	r0, r3, #20
 800fce0:	687a      	ldr	r2, [r7, #4]
 800fce2:	697b      	ldr	r3, [r7, #20]
 800fce4:	18d1      	adds	r1, r2, r3
 800fce6:	69fa      	ldr	r2, [r7, #28]
 800fce8:	697b      	ldr	r3, [r7, #20]
 800fcea:	1ad3      	subs	r3, r2, r3
 800fcec:	461a      	mov	r2, r3
 800fcee:	f010 fe39 	bl	8020964 <memcpy>
            }
        }

        /* The below update to the stream buffer members must happen
         * atomically. */
        vTaskSuspendAll();
 800fcf2:	f7f3 fc79 	bl	80035e8 <vTaskSuspendAll>
        {
            if( uxOffset == 0U )
 800fcf6:	68bb      	ldr	r3, [r7, #8]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d10e      	bne.n	800fd1a <uxStreamBufferAdd+0xd8>
            {
                /* ( uxOffset == 0 ) means: write at uxHead position */
                uxNextHead += uxCount;
 800fcfc:	6a3a      	ldr	r2, [r7, #32]
 800fcfe:	69fb      	ldr	r3, [r7, #28]
 800fd00:	4413      	add	r3, r2
 800fd02:	623b      	str	r3, [r7, #32]

                if( uxNextHead >= uxLength )
 800fd04:	6a3a      	ldr	r2, [r7, #32]
 800fd06:	69bb      	ldr	r3, [r7, #24]
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	d303      	bcc.n	800fd14 <uxStreamBufferAdd+0xd2>
                {
                    uxNextHead -= uxLength;
 800fd0c:	6a3a      	ldr	r2, [r7, #32]
 800fd0e:	69bb      	ldr	r3, [r7, #24]
 800fd10:	1ad3      	subs	r3, r2, r3
 800fd12:	623b      	str	r3, [r7, #32]
                }

                pxBuffer->uxHead = uxNextHead;
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	6a3a      	ldr	r2, [r7, #32]
 800fd18:	609a      	str	r2, [r3, #8]
            }

            if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	68db      	ldr	r3, [r3, #12]
 800fd1e:	6a3a      	ldr	r2, [r7, #32]
 800fd20:	4619      	mov	r1, r3
 800fd22:	68f8      	ldr	r0, [r7, #12]
 800fd24:	f7ff ff51 	bl	800fbca <xStreamBufferLessThenEqual>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d002      	beq.n	800fd34 <uxStreamBufferAdd+0xf2>
            {
                /* Advance the front pointer */
                pxBuffer->uxFront = uxNextHead;
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	6a3a      	ldr	r2, [r7, #32]
 800fd32:	60da      	str	r2, [r3, #12]
            }
        }
        ( void ) xTaskResumeAll();
 800fd34:	f7f3 fc66 	bl	8003604 <xTaskResumeAll>
    }

    return uxCount;
 800fd38:	69fb      	ldr	r3, [r7, #28]
}
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	3728      	adds	r7, #40	@ 0x28
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	bd80      	pop	{r7, pc}

0800fd42 <uxStreamBufferGet>:
size_t uxStreamBufferGet( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          uint8_t * const pucData,
                          size_t uxMaxCount,
                          BaseType_t xPeek )
{
 800fd42:	b580      	push	{r7, lr}
 800fd44:	b08a      	sub	sp, #40	@ 0x28
 800fd46:	af00      	add	r7, sp, #0
 800fd48:	60f8      	str	r0, [r7, #12]
 800fd4a:	60b9      	str	r1, [r7, #8]
 800fd4c:	607a      	str	r2, [r7, #4]
 800fd4e:	603b      	str	r3, [r7, #0]
    size_t uxCount;

    /* How much data is available? */
    size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 800fd50:	68f8      	ldr	r0, [r7, #12]
 800fd52:	f7ff fed8 	bl	800fb06 <uxStreamBufferGetSize>
 800fd56:	6278      	str	r0, [r7, #36]	@ 0x24

    if( uxSize > uxOffset )
 800fd58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	429a      	cmp	r2, r3
 800fd5e:	d904      	bls.n	800fd6a <uxStreamBufferGet+0x28>
    {
        uxSize -= uxOffset;
 800fd60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fd62:	68bb      	ldr	r3, [r7, #8]
 800fd64:	1ad3      	subs	r3, r2, r3
 800fd66:	627b      	str	r3, [r7, #36]	@ 0x24
 800fd68:	e001      	b.n	800fd6e <uxStreamBufferGet+0x2c>
    }
    else
    {
        uxSize = 0U;
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Use the minimum of the wanted bytes and the available bytes. */
    uxCount = FreeRTOS_min_size_t( uxSize, uxMaxCount );
 800fd6e:	6839      	ldr	r1, [r7, #0]
 800fd70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fd72:	f7f9 fe3f 	bl	80099f4 <FreeRTOS_min_size_t>
 800fd76:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 800fd78:	69fb      	ldr	r3, [r7, #28]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d04e      	beq.n	800fe1c <uxStreamBufferGet+0xda>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	691b      	ldr	r3, [r3, #16]
 800fd82:	61bb      	str	r3, [r7, #24]
        size_t uxNextTail = pxBuffer->uxTail;
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 800fd8a:	68bb      	ldr	r3, [r7, #8]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d00b      	beq.n	800fda8 <uxStreamBufferGet+0x66>
        {
            uxNextTail += uxOffset;
 800fd90:	6a3a      	ldr	r2, [r7, #32]
 800fd92:	68bb      	ldr	r3, [r7, #8]
 800fd94:	4413      	add	r3, r2
 800fd96:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 800fd98:	6a3a      	ldr	r2, [r7, #32]
 800fd9a:	69bb      	ldr	r3, [r7, #24]
 800fd9c:	429a      	cmp	r2, r3
 800fd9e:	d303      	bcc.n	800fda8 <uxStreamBufferGet+0x66>
            {
                uxNextTail -= uxLength;
 800fda0:	6a3a      	ldr	r2, [r7, #32]
 800fda2:	69bb      	ldr	r3, [r7, #24]
 800fda4:	1ad3      	subs	r3, r2, r3
 800fda6:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d021      	beq.n	800fdf2 <uxStreamBufferGet+0xb0>
        {
            /* Calculate the number of bytes that can be read - which may be
             * less than the number wanted if the data wraps around to the start of
             * the buffer. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextTail, uxCount );
 800fdae:	69ba      	ldr	r2, [r7, #24]
 800fdb0:	6a3b      	ldr	r3, [r7, #32]
 800fdb2:	1ad3      	subs	r3, r2, r3
 800fdb4:	69f9      	ldr	r1, [r7, #28]
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f7f9 fe1c 	bl	80099f4 <FreeRTOS_min_size_t>
 800fdbc:	6178      	str	r0, [r7, #20]

            /* Obtain the number of bytes it is possible to obtain in the first
             * read. */
            ( void ) memcpy( pucData, &( pxBuffer->ucArray[ uxNextTail ] ), uxFirst );
 800fdbe:	6a3b      	ldr	r3, [r7, #32]
 800fdc0:	3310      	adds	r3, #16
 800fdc2:	68fa      	ldr	r2, [r7, #12]
 800fdc4:	4413      	add	r3, r2
 800fdc6:	3304      	adds	r3, #4
 800fdc8:	697a      	ldr	r2, [r7, #20]
 800fdca:	4619      	mov	r1, r3
 800fdcc:	6878      	ldr	r0, [r7, #4]
 800fdce:	f010 fdc9 	bl	8020964 <memcpy>

            /* If the total number of wanted bytes is greater than the number
             * that could be read in the first read... */
            if( uxCount > uxFirst )
 800fdd2:	69fa      	ldr	r2, [r7, #28]
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	429a      	cmp	r2, r3
 800fdd8:	d90b      	bls.n	800fdf2 <uxStreamBufferGet+0xb0>
            {
                /* ...then read the remaining bytes from the start of the buffer. */
                ( void ) memcpy( &( pucData[ uxFirst ] ), pxBuffer->ucArray, uxCount - uxFirst );
 800fdda:	687a      	ldr	r2, [r7, #4]
 800fddc:	697b      	ldr	r3, [r7, #20]
 800fdde:	18d0      	adds	r0, r2, r3
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	f103 0114 	add.w	r1, r3, #20
 800fde6:	69fa      	ldr	r2, [r7, #28]
 800fde8:	697b      	ldr	r3, [r7, #20]
 800fdea:	1ad3      	subs	r3, r2, r3
 800fdec:	461a      	mov	r2, r3
 800fdee:	f010 fdb9 	bl	8020964 <memcpy>
            }
        }

        if( ( xPeek == pdFALSE ) && ( uxOffset == 0U ) )
 800fdf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d111      	bne.n	800fe1c <uxStreamBufferGet+0xda>
 800fdf8:	68bb      	ldr	r3, [r7, #8]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d10e      	bne.n	800fe1c <uxStreamBufferGet+0xda>
        {
            /* Move the tail pointer to effectively remove the data read from
             * the buffer. */
            uxNextTail += uxCount;
 800fdfe:	6a3a      	ldr	r2, [r7, #32]
 800fe00:	69fb      	ldr	r3, [r7, #28]
 800fe02:	4413      	add	r3, r2
 800fe04:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 800fe06:	6a3a      	ldr	r2, [r7, #32]
 800fe08:	69bb      	ldr	r3, [r7, #24]
 800fe0a:	429a      	cmp	r2, r3
 800fe0c:	d303      	bcc.n	800fe16 <uxStreamBufferGet+0xd4>
            {
                uxNextTail -= uxLength;
 800fe0e:	6a3a      	ldr	r2, [r7, #32]
 800fe10:	69bb      	ldr	r3, [r7, #24]
 800fe12:	1ad3      	subs	r3, r2, r3
 800fe14:	623b      	str	r3, [r7, #32]
            }

            pxBuffer->uxTail = uxNextTail;
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	6a3a      	ldr	r2, [r7, #32]
 800fe1a:	601a      	str	r2, [r3, #0]
        }
    }

    return uxCount;
 800fe1c:	69fb      	ldr	r3, [r7, #28]
}
 800fe1e:	4618      	mov	r0, r3
 800fe20:	3728      	adds	r7, #40	@ 0x28
 800fe22:	46bd      	mov	sp, r7
 800fe24:	bd80      	pop	{r7, pc}
	...

0800fe28 <vSocketCloseNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketCloseNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b082      	sub	sp, #8
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
        if( ( xSocketToClose != NULL ) && ( xSocketToClose != pxSocket ) )
 800fe30:	4b0a      	ldr	r3, [pc, #40]	@ (800fe5c <vSocketCloseNextTime+0x34>)
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d009      	beq.n	800fe4c <vSocketCloseNextTime+0x24>
 800fe38:	4b08      	ldr	r3, [pc, #32]	@ (800fe5c <vSocketCloseNextTime+0x34>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	687a      	ldr	r2, [r7, #4]
 800fe3e:	429a      	cmp	r2, r3
 800fe40:	d004      	beq.n	800fe4c <vSocketCloseNextTime+0x24>
        {
            ( void ) vSocketClose( xSocketToClose );
 800fe42:	4b06      	ldr	r3, [pc, #24]	@ (800fe5c <vSocketCloseNextTime+0x34>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	4618      	mov	r0, r3
 800fe48:	f7fd fd98 	bl	800d97c <vSocketClose>
        }

        xSocketToClose = pxSocket;
 800fe4c:	4a03      	ldr	r2, [pc, #12]	@ (800fe5c <vSocketCloseNextTime+0x34>)
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	6013      	str	r3, [r2, #0]
    }
 800fe52:	bf00      	nop
 800fe54:	3708      	adds	r7, #8
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}
 800fe5a:	bf00      	nop
 800fe5c:	200012c8 	.word	0x200012c8

0800fe60 <vSocketListenNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketListenNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b082      	sub	sp, #8
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
        if( ( xSocketToListen != NULL ) && ( xSocketToListen != pxSocket ) )
 800fe68:	4b0c      	ldr	r3, [pc, #48]	@ (800fe9c <vSocketListenNextTime+0x3c>)
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d00e      	beq.n	800fe8e <vSocketListenNextTime+0x2e>
 800fe70:	4b0a      	ldr	r3, [pc, #40]	@ (800fe9c <vSocketListenNextTime+0x3c>)
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	687a      	ldr	r2, [r7, #4]
 800fe76:	429a      	cmp	r2, r3
 800fe78:	d009      	beq.n	800fe8e <vSocketListenNextTime+0x2e>
        {
            ( void ) FreeRTOS_listen( ( Socket_t ) xSocketToListen, ( BaseType_t ) ( xSocketToListen->u.xTCP.usBacklog ) );
 800fe7a:	4b08      	ldr	r3, [pc, #32]	@ (800fe9c <vSocketListenNextTime+0x3c>)
 800fe7c:	681a      	ldr	r2, [r3, #0]
 800fe7e:	4b07      	ldr	r3, [pc, #28]	@ (800fe9c <vSocketListenNextTime+0x3c>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800fe86:	4619      	mov	r1, r3
 800fe88:	4610      	mov	r0, r2
 800fe8a:	f7fe fff3 	bl	800ee74 <FreeRTOS_listen>
        }

        xSocketToListen = pxSocket;
 800fe8e:	4a03      	ldr	r2, [pc, #12]	@ (800fe9c <vSocketListenNextTime+0x3c>)
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	6013      	str	r3, [r2, #0]
    }
 800fe94:	bf00      	nop
 800fe96:	3708      	adds	r7, #8
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}
 800fe9c:	200012cc 	.word	0x200012cc

0800fea0 <xTCPSocketCheck>:
 *      prvTCPSendRepeated()            // Send at most 8 messages on a row
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
 */
    BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t * pxSocket )
    {
 800fea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fea4:	b086      	sub	sp, #24
 800fea6:	af02      	add	r7, sp, #8
 800fea8:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = 0;
 800feaa:	2300      	movs	r3, #0
 800feac:	60fb      	str	r3, [r7, #12]
        BaseType_t xReady = pdFALSE;
 800feae:	2300      	movs	r3, #0
 800feb0:	60bb      	str	r3, [r7, #8]

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800feb8:	2b04      	cmp	r3, #4
 800feba:	d907      	bls.n	800fecc <xTCPSocketCheck+0x2c>
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d002      	beq.n	800fecc <xTCPSocketCheck+0x2c>
        {
            /* The API FreeRTOS_send() might have added data to the TX stream.  Add
             * this data to the windowing system so it can be transmitted. */
            prvTCPAddTxData( pxSocket );
 800fec6:	6878      	ldr	r0, [r7, #4]
 800fec8:	f003 f834 	bl	8012f34 <prvTCPAddTxData>
        }

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d05f      	beq.n	800ff96 <xTCPSocketCheck+0xf6>
            {
                /* The first task of this regular socket check is to send-out delayed
                 * ACK's. */
                if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800fedc:	f003 0320 	and.w	r3, r3, #32
 800fee0:	b2db      	uxtb	r3, r3
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d148      	bne.n	800ff78 <xTCPSocketCheck+0xd8>
                {
                    /* Earlier data was received but not yet acknowledged.  This
                     * function is called when the TCP timer for the socket expires, the
                     * ACK may be sent now. */
                    if( pxSocket->u.xTCP.eTCPState != eCLOSED )
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800feec:	2b00      	cmp	r3, #0
 800feee:	d03b      	beq.n	800ff68 <xTCPSocketCheck+0xc8>
                    {
                        if( ( xTCPWindowLoggingLevel > 1 ) && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 800fef0:	4b37      	ldr	r3, [pc, #220]	@ (800ffd0 <xTCPSocketCheck+0x130>)
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	2b01      	cmp	r3, #1
 800fef6:	dd25      	ble.n	800ff44 <xTCPSocketCheck+0xa4>
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800fefc:	2b17      	cmp	r3, #23
 800fefe:	d021      	beq.n	800ff44 <xTCPSocketCheck+0xa4>
                        {
                            FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %u SEQ %u (len %u)\n",
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800ff04:	461e      	mov	r6, r3
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ff0c:	4698      	mov	r8, r3
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800ff1a:	1ad5      	subs	r5, r2, r3
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800ff28:	1ad4      	subs	r4, r2, r3
 800ff2a:	6878      	ldr	r0, [r7, #4]
 800ff2c:	f7f9 f81e 	bl	8008f6c <uxIPHeaderSizeSocket>
 800ff30:	4603      	mov	r3, r0
 800ff32:	3314      	adds	r3, #20
 800ff34:	9301      	str	r3, [sp, #4]
 800ff36:	9400      	str	r4, [sp, #0]
 800ff38:	462b      	mov	r3, r5
 800ff3a:	4642      	mov	r2, r8
 800ff3c:	4631      	mov	r1, r6
 800ff3e:	4825      	ldr	r0, [pc, #148]	@ (800ffd4 <xTCPSocketCheck+0x134>)
 800ff40:	f010 faf4 	bl	802052c <lUDPLoggingPrintf>
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) ) );
                        }

                        prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ( uint32_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ), ipconfigZERO_COPY_TX_DRIVER );
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 800ff4a:	6878      	ldr	r0, [r7, #4]
 800ff4c:	f7f9 f80e 	bl	8008f6c <uxIPHeaderSizeSocket>
 800ff50:	4603      	mov	r3, r0
 800ff52:	f103 0214 	add.w	r2, r3, #20
 800ff56:	2301      	movs	r3, #1
 800ff58:	4621      	mov	r1, r4
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f002 fac8 	bl	80124f0 <prvTCPReturnPacket>

                        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                        {
                            /* The ownership has been passed to the SEND routine,
                             * clear the pointer to it. */
                            pxSocket->u.xTCP.pxAckMessage = NULL;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2200      	movs	r2, #0
 800ff64:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                        }
                        #endif /* ipconfigZERO_COPY_TX_DRIVER */
                    }

                    if( prvTCPNextTimeout( pxSocket ) > 1U )
 800ff68:	6878      	ldr	r0, [r7, #4]
 800ff6a:	f000 faa1 	bl	80104b0 <prvTCPNextTimeout>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	2b01      	cmp	r3, #1
 800ff72:	d901      	bls.n	800ff78 <xTCPSocketCheck+0xd8>
                    {
                        /* Tell the code below that this function is ready. */
                        xReady = pdTRUE;
 800ff74:	2301      	movs	r3, #1
 800ff76:	60bb      	str	r3, [r7, #8]
                    /* The user wants to perform an active shutdown(), skip sending
                     * the delayed ACK.  The function prvTCPSendPacket() will send the
                     * FIN along with the ACK's. */
                }

                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d009      	beq.n	800ff96 <xTCPSocketCheck+0xf6>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ff88:	4618      	mov	r0, r3
 800ff8a:	f006 f9e5 	bl	8016358 <vReleaseNetworkBufferAndDescriptor>
                    pxSocket->u.xTCP.pxAckMessage = NULL;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	2200      	movs	r2, #0
 800ff92:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                }
            }
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xReady == pdFALSE )
 800ff96:	68bb      	ldr	r3, [r7, #8]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d113      	bne.n	800ffc4 <xTCPSocketCheck+0x124>
        {
            /* The second task of this regular socket check is sending out data. */
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800ffa2:	2b04      	cmp	r3, #4
 800ffa4:	d804      	bhi.n	800ffb0 <xTCPSocketCheck+0x110>
                ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) )
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 800ffac:	2b02      	cmp	r3, #2
 800ffae:	d102      	bne.n	800ffb6 <xTCPSocketCheck+0x116>
            {
                ( void ) prvTCPSendPacket( pxSocket );
 800ffb0:	6878      	ldr	r0, [r7, #4]
 800ffb2:	f002 f9ff 	bl	80123b4 <prvTCPSendPacket>
            }

            /* Set the time-out for the next wakeup for this socket. */
            ( void ) prvTCPNextTimeout( pxSocket );
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	f000 fa7a 	bl	80104b0 <prvTCPNextTimeout>

            #if ( ipconfigTCP_HANG_PROTECTION == 1 )
            {
                /* In all (non-connected) states in which keep-alive messages can not be sent
                 * the anti-hang protocol will close sockets that are 'hanging'. */
                xResult = prvTCPStatusAgeCheck( pxSocket );
 800ffbc:	6878      	ldr	r0, [r7, #4]
 800ffbe:	f001 f973 	bl	80112a8 <prvTCPStatusAgeCheck>
 800ffc2:	60f8      	str	r0, [r7, #12]
            }
            #endif
        }

        return xResult;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
    }
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	3710      	adds	r7, #16
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffd0:	200012f4 	.word	0x200012f4
 800ffd4:	080244d8 	.word	0x080244d8

0800ffd8 <prvTCPTouchSocket>:
 * @note This is used for anti-hanging protection and TCP keep-alive messages.
 *       Called in two places: after receiving a packet and after a state change.
 *       The socket's alive timer may be reset.
 */
    void prvTCPTouchSocket( struct xSOCKET * pxSocket )
    {
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b082      	sub	sp, #8
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
        #if ( ipconfigTCP_HANG_PROTECTION == 1 )
        {
            pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 800ffe0:	f7f3 fc14 	bl	800380c <xTaskGetTickCount>
 800ffe4:	4602      	mov	r2, r0
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        }
        #endif

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
        {
            pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 800ffec:	687a      	ldr	r2, [r7, #4]
 800ffee:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800fff2:	f36f 0382 	bfc	r3, #2, #1
 800fff6:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800fffa:	687a      	ldr	r2, [r7, #4]
 800fffc:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8010000:	f36f 0341 	bfc	r3, #1, #1
 8010004:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.ucKeepRepCount = 0U;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2200      	movs	r2, #0
 801000c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 8010010:	f7f3 fbfc 	bl	800380c <xTaskGetTickCount>
 8010014:	4602      	mov	r2, r0
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        }
        #endif

        ( void ) pxSocket;
    }
 801001c:	bf00      	nop
 801001e:	3708      	adds	r7, #8
 8010020:	46bd      	mov	sp, r7
 8010022:	bd80      	pop	{r7, pc}

08010024 <vTCPRemoveTCPChild>:
    /*-----------------------------------------------------------*/

    static BaseType_t vTCPRemoveTCPChild( const FreeRTOS_Socket_t * pxChildSocket )
    {
 8010024:	b480      	push	{r7}
 8010026:	b087      	sub	sp, #28
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 801002c:	2300      	movs	r3, #0
 801002e:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 8010030:	4b15      	ldr	r3, [pc, #84]	@ (8010088 <vTCPRemoveTCPChild+0x64>)
 8010032:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8010034:	4b15      	ldr	r3, [pc, #84]	@ (801008c <vTCPRemoveTCPChild+0x68>)
 8010036:	68db      	ldr	r3, [r3, #12]
 8010038:	613b      	str	r3, [r7, #16]

        while( pxIterator != pxEnd )
 801003a:	e01a      	b.n	8010072 <vTCPRemoveTCPChild+0x4e>
        {
            FreeRTOS_Socket_t * pxSocket;
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 801003c:	693b      	ldr	r3, [r7, #16]
 801003e:	68db      	ldr	r3, [r3, #12]
 8010040:	60bb      	str	r3, [r7, #8]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 8010042:	693b      	ldr	r3, [r7, #16]
 8010044:	685b      	ldr	r3, [r3, #4]
 8010046:	613b      	str	r3, [r7, #16]

            if( ( pxSocket != pxChildSocket ) && ( pxSocket->usLocalPort == pxChildSocket->usLocalPort ) )
 8010048:	68ba      	ldr	r2, [r7, #8]
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	429a      	cmp	r2, r3
 801004e:	d010      	beq.n	8010072 <vTCPRemoveTCPChild+0x4e>
 8010050:	68bb      	ldr	r3, [r7, #8]
 8010052:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010058:	429a      	cmp	r2, r3
 801005a:	d10a      	bne.n	8010072 <vTCPRemoveTCPChild+0x4e>
            {
                if( pxSocket->u.xTCP.pxPeerSocket == pxChildSocket ) /**< for server socket: child, for child socket: parent */
 801005c:	68bb      	ldr	r3, [r7, #8]
 801005e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010060:	687a      	ldr	r2, [r7, #4]
 8010062:	429a      	cmp	r2, r3
 8010064:	d105      	bne.n	8010072 <vTCPRemoveTCPChild+0x4e>
                {
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 8010066:	68bb      	ldr	r3, [r7, #8]
 8010068:	2200      	movs	r2, #0
 801006a:	67da      	str	r2, [r3, #124]	@ 0x7c
                    xReturn = pdTRUE;
 801006c:	2301      	movs	r3, #1
 801006e:	617b      	str	r3, [r7, #20]
                    break;
 8010070:	e003      	b.n	801007a <vTCPRemoveTCPChild+0x56>
        while( pxIterator != pxEnd )
 8010072:	693a      	ldr	r2, [r7, #16]
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	429a      	cmp	r2, r3
 8010078:	d1e0      	bne.n	801003c <vTCPRemoveTCPChild+0x18>
                }
            }
        }

        return xReturn;
 801007a:	697b      	ldr	r3, [r7, #20]
    }
 801007c:	4618      	mov	r0, r3
 801007e:	371c      	adds	r7, #28
 8010080:	46bd      	mov	sp, r7
 8010082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010086:	4770      	bx	lr
 8010088:	200012b8 	.word	0x200012b8
 801008c:	200012b0 	.word	0x200012b0

08010090 <vTCPStateChange>:
 * @param[in] pxSocket The socket whose state we are trying to change.
 * @param[in] eTCPState The state to which we want to change to.
 */
    void vTCPStateChange( FreeRTOS_Socket_t * pxSocket,
                          enum eTCP_STATE eTCPState )
    {
 8010090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010092:	b097      	sub	sp, #92	@ 0x5c
 8010094:	af02      	add	r7, sp, #8
 8010096:	6078      	str	r0, [r7, #4]
 8010098:	460b      	mov	r3, r1
 801009a:	70fb      	strb	r3, [r7, #3]
        FreeRTOS_Socket_t * xParent = pxSocket;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        BaseType_t bBefore = tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.eTCPState ); /* Was it connected ? */
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80100a6:	2b04      	cmp	r3, #4
 80100a8:	d906      	bls.n	80100b8 <vTCPStateChange+0x28>
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80100b0:	2b08      	cmp	r3, #8
 80100b2:	d001      	beq.n	80100b8 <vTCPStateChange+0x28>
 80100b4:	2301      	movs	r3, #1
 80100b6:	e000      	b.n	80100ba <vTCPStateChange+0x2a>
 80100b8:	2300      	movs	r3, #0
 80100ba:	64bb      	str	r3, [r7, #72]	@ 0x48
        BaseType_t bAfter = tcpNOW_CONNECTED( ( BaseType_t ) eTCPState );                   /* Is it connected now ? */
 80100bc:	78fb      	ldrb	r3, [r7, #3]
 80100be:	2b04      	cmp	r3, #4
 80100c0:	d904      	bls.n	80100cc <vTCPStateChange+0x3c>
 80100c2:	78fb      	ldrb	r3, [r7, #3]
 80100c4:	2b08      	cmp	r3, #8
 80100c6:	d001      	beq.n	80100cc <vTCPStateChange+0x3c>
 80100c8:	2301      	movs	r3, #1
 80100ca:	e000      	b.n	80100ce <vTCPStateChange+0x3e>
 80100cc:	2300      	movs	r3, #0
 80100ce:	63bb      	str	r3, [r7, #56]	@ 0x38

        eIPTCPState_t xPreviousState = pxSocket->u.xTCP.eTCPState;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80100d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        #if ( ipconfigUSE_CALLBACKS == 1 )
            FreeRTOS_Socket_t * xConnected = NULL;
 80100da:	2300      	movs	r3, #0
 80100dc:	647b      	str	r3, [r7, #68]	@ 0x44
        #endif

        if( ( ( xPreviousState == eCONNECT_SYN ) ||
 80100de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80100e2:	2b02      	cmp	r3, #2
 80100e4:	d007      	beq.n	80100f6 <vTCPStateChange+0x66>
 80100e6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80100ea:	2b03      	cmp	r3, #3
 80100ec:	d003      	beq.n	80100f6 <vTCPStateChange+0x66>
              ( xPreviousState == eSYN_FIRST ) ||
 80100ee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80100f2:	2b04      	cmp	r3, #4
 80100f4:	d114      	bne.n	8010120 <vTCPStateChange+0x90>
              ( xPreviousState == eSYN_RECEIVED ) ) &&
 80100f6:	78fb      	ldrb	r3, [r7, #3]
 80100f8:	2b08      	cmp	r3, #8
 80100fa:	d111      	bne.n	8010120 <vTCPStateChange+0x90>
            ( eTCPState == eCLOSE_WAIT ) )
        {
            /* A socket was in the connecting phase but something
             * went wrong and it should be closed. */
            #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                FreeRTOS_debug_printf( ( "Move from %s to %s\n",
 80100fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010100:	4618      	mov	r0, r3
 8010102:	f001 fed7 	bl	8011eb4 <FreeRTOS_GetTCPStateName>
 8010106:	4604      	mov	r4, r0
 8010108:	78fb      	ldrb	r3, [r7, #3]
 801010a:	4618      	mov	r0, r3
 801010c:	f001 fed2 	bl	8011eb4 <FreeRTOS_GetTCPStateName>
 8010110:	4603      	mov	r3, r0
 8010112:	461a      	mov	r2, r3
 8010114:	4621      	mov	r1, r4
 8010116:	4875      	ldr	r0, [pc, #468]	@ (80102ec <vTCPStateChange+0x25c>)
 8010118:	f010 fa08 	bl	802052c <lUDPLoggingPrintf>
            #endif

            /* Set the flag to show that it was connected before and that the
             * status has changed now. This will cause the control flow to go
             * in the below if condition.*/
            bBefore = pdTRUE;
 801011c:	2301      	movs	r3, #1
 801011e:	64bb      	str	r3, [r7, #72]	@ 0x48
        }

        /* Has the connected status changed? */
        if( bBefore != bAfter )
 8010120:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010124:	429a      	cmp	r2, r3
 8010126:	f000 809f 	beq.w	8010268 <vTCPStateChange+0x1d8>
        {
            /* if bPassQueued is true, this socket is an orphan until it gets connected. */
            if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010130:	f003 0304 	and.w	r3, r3, #4
 8010134:	b2db      	uxtb	r3, r3
 8010136:	2b00      	cmp	r3, #0
 8010138:	d012      	beq.n	8010160 <vTCPStateChange+0xd0>
            {
                /* Find it's parent if the reuse bit is not set. */
                if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010140:	f003 0308 	and.w	r3, r3, #8
 8010144:	b2db      	uxtb	r3, r3
 8010146:	2b00      	cmp	r3, #0
 8010148:	d10a      	bne.n	8010160 <vTCPStateChange+0xd0>
                {
                    xParent = pxSocket->u.xTCP.pxPeerSocket;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801014e:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    configASSERT( xParent != NULL );
 8010150:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010152:	2b00      	cmp	r3, #0
 8010154:	d104      	bne.n	8010160 <vTCPStateChange+0xd0>
 8010156:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 801015a:	4865      	ldr	r0, [pc, #404]	@ (80102f0 <vTCPStateChange+0x260>)
 801015c:	f7f0 ffdc 	bl	8001118 <vAssertCalled>
                }
            }

            /* Is the socket connected now ? */
            if( bAfter != pdFALSE )
 8010160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010162:	2b00      	cmp	r3, #0
 8010164:	d057      	beq.n	8010216 <vTCPStateChange+0x186>
            {
                /* if bPassQueued is true, this socket is an orphan until it gets connected. */
                if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801016c:	f003 0304 	and.w	r3, r3, #4
 8010170:	b2db      	uxtb	r3, r3
 8010172:	2b00      	cmp	r3, #0
 8010174:	d03c      	beq.n	80101f0 <vTCPStateChange+0x160>
                {
                    if( xParent != NULL )
 8010176:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010178:	2b00      	cmp	r3, #0
 801017a:	d027      	beq.n	80101cc <vTCPStateChange+0x13c>
                        /* The child socket has got connected.  See if the parent
                         * ( the listening socket ) should be signalled, or if a
                         * call-back must be made, in which case 'xConnected' will
                         * be set to the parent socket. */

                        if( xParent->u.xTCP.pxPeerSocket == NULL )
 801017c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801017e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010180:	2b00      	cmp	r3, #0
 8010182:	d102      	bne.n	801018a <vTCPStateChange+0xfa>
                        {
                            xParent->u.xTCP.pxPeerSocket = pxSocket;
 8010184:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010186:	687a      	ldr	r2, [r7, #4]
 8010188:	67da      	str	r2, [r3, #124]	@ 0x7c
                        }

                        xParent->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 801018a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	f043 0204 	orr.w	r2, r3, #4
 8010192:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010194:	601a      	str	r2, [r3, #0]

                        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                        {
                            /* Library support FreeRTOS_select().  Receiving a new
                             * connection is being translated as a READ event. */
                            if( ( xParent->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U )
 8010196:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801019a:	f003 0301 	and.w	r3, r3, #1
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d005      	beq.n	80101ae <vTCPStateChange+0x11e>
                            {
                                xParent->xEventBits |= ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT;
 80101a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80101aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80101ac:	601a      	str	r2, [r3, #0]
                        }
                        #endif

                        #if ( ipconfigUSE_CALLBACKS == 1 )
                        {
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 80101ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80101b0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d009      	beq.n	80101cc <vTCPStateChange+0x13c>
                                ( xParent->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) )
 80101b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80101ba:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80101be:	f003 0308 	and.w	r3, r3, #8
 80101c2:	b2db      	uxtb	r3, r3
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d101      	bne.n	80101cc <vTCPStateChange+0x13c>
                            {
                                /* The listening socket does not become connected itself, in stead
                                 * a child socket is created.
                                 * Postpone a call the OnConnect event until the end of this function. */
                                xConnected = xParent;
 80101c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80101ca:	647b      	str	r3, [r7, #68]	@ 0x44
                        #endif
                    }

                    /* Don't need to access the parent socket anymore, so the
                     * reference 'pxPeerSocket' may be cleared. */
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2200      	movs	r2, #0
 80101d0:	67da      	str	r2, [r3, #124]	@ 0x7c
                    pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 80101d2:	687a      	ldr	r2, [r7, #4]
 80101d4:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80101d8:	f36f 0382 	bfc	r3, #2, #1
 80101dc:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

                    /* When true, this socket may be returned in a call to accept(). */
                    pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 80101e0:	687a      	ldr	r2, [r7, #4]
 80101e2:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80101e6:	f043 0302 	orr.w	r3, r3, #2
 80101ea:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 80101ee:	e024      	b.n	801023a <vTCPStateChange+0x1aa>
                else
                {
                    /* An active connect() has succeeded. In this case there is no
                     * ( listening ) parent socket. Signal the now connected socket. */

                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CONNECT;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	f043 0208 	orr.w	r2, r3, #8
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	601a      	str	r2, [r3, #0]

                    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010200:	f003 0302 	and.w	r3, r3, #2
 8010204:	2b00      	cmp	r3, #0
 8010206:	d018      	beq.n	801023a <vTCPStateChange+0x1aa>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	601a      	str	r2, [r3, #0]
 8010214:	e011      	b.n	801023a <vTCPStateChange+0x1aa>
                }
            }
            else /* bAfter == pdFALSE, connection is closed. */
            {
                /* Notify/wake-up the socket-owner by setting the event bits. */
                xParent->xEventBits |= ( EventBits_t ) eSOCKET_CLOSED;
 8010216:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	f043 0220 	orr.w	r2, r3, #32
 801021e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010220:	601a      	str	r2, [r3, #0]

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( xParent->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 8010222:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010226:	f003 0304 	and.w	r3, r3, #4
 801022a:	2b00      	cmp	r3, #0
 801022c:	d005      	beq.n	801023a <vTCPStateChange+0x1aa>
                    {
                        xParent->xEventBits |= ( ( EventBits_t ) eSELECT_EXCEPT ) << SOCKET_EVENT_BIT_COUNT;
 801022e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8010236:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010238:	601a      	str	r2, [r3, #0]
                #endif
            }

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8010240:	2b00      	cmp	r3, #0
 8010242:	d004      	beq.n	801024e <vTCPStateChange+0x1be>
 8010244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010246:	2b00      	cmp	r3, #0
 8010248:	d101      	bne.n	801024e <vTCPStateChange+0x1be>
                {
                    /* The 'connected' state has changed, call the user handler. */
                    xConnected = pxSocket;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	647b      	str	r3, [r7, #68]	@ 0x44
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            if( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == 0 )
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010254:	4618      	mov	r0, r3
 8010256:	f000 ffff 	bl	8011258 <prvTCPSocketIsActive>
 801025a:	4603      	mov	r3, r0
 801025c:	2b00      	cmp	r3, #0
 801025e:	d103      	bne.n	8010268 <vTCPStateChange+0x1d8>
            {
                /* Now the socket isn't in an active state anymore so it
                 * won't need further attention of the IP-task.
                 * Setting time-out to zero means that the socket won't get checked during
                 * timer events. */
                pxSocket->u.xTCP.usTimeout = 0U;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	2200      	movs	r2, #0
 8010264:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            }
        }

        /* Fill in the new state. */
        pxSocket->u.xTCP.eTCPState = eTCPState;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	78fa      	ldrb	r2, [r7, #3]
 801026c:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79

        if( ( eTCPState == eCLOSED ) ||
 8010270:	78fb      	ldrb	r3, [r7, #3]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d003      	beq.n	801027e <vTCPStateChange+0x1ee>
 8010276:	78fb      	ldrb	r3, [r7, #3]
 8010278:	2b08      	cmp	r3, #8
 801027a:	f040 8084 	bne.w	8010386 <vTCPStateChange+0x2f6>
            ( eTCPState == eCLOSE_WAIT ) )
        {
            BaseType_t xMustClear = pdFALSE;
 801027e:	2300      	movs	r3, #0
 8010280:	643b      	str	r3, [r7, #64]	@ 0x40
            BaseType_t xHasCleared = pdFALSE;
 8010282:	2300      	movs	r3, #0
 8010284:	63fb      	str	r3, [r7, #60]	@ 0x3c

            if( ( xParent == pxSocket ) && ( pxSocket->u.xTCP.pxPeerSocket != NULL ) )
 8010286:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	429a      	cmp	r2, r3
 801028c:	d106      	bne.n	801029c <vTCPStateChange+0x20c>
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010292:	2b00      	cmp	r3, #0
 8010294:	d002      	beq.n	801029c <vTCPStateChange+0x20c>
            {
                xParent = pxSocket->u.xTCP.pxPeerSocket;
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801029a:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 801029c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801029e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d006      	beq.n	80102b2 <vTCPStateChange+0x222>
                ( xParent->u.xTCP.pxPeerSocket == pxSocket ) )
 80102a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80102a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 80102a8:	687a      	ldr	r2, [r7, #4]
 80102aa:	429a      	cmp	r2, r3
 80102ac:	d101      	bne.n	80102b2 <vTCPStateChange+0x222>
            {
                xMustClear = pdTRUE;
 80102ae:	2301      	movs	r3, #1
 80102b0:	643b      	str	r3, [r7, #64]	@ 0x40
                ( void ) xMustClear;
            }

            /* Socket goes to status eCLOSED because of a RST.
             * When nobody owns the socket yet, delete it. */
            FreeRTOS_printf( ( "vTCPStateChange: Closing (Queued %d, Accept %d Reuse %d)\n",
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80102b8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80102bc:	b2db      	uxtb	r3, r3
 80102be:	4619      	mov	r1, r3
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80102c6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80102ca:	b2db      	uxtb	r3, r3
 80102cc:	461a      	mov	r2, r3
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80102d4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80102d8:	b2db      	uxtb	r3, r3
 80102da:	4806      	ldr	r0, [pc, #24]	@ (80102f4 <vTCPStateChange+0x264>)
 80102dc:	f010 f926 	bl	802052c <lUDPLoggingPrintf>
                               pxSocket->u.xTCP.bits.bPassQueued,
                               pxSocket->u.xTCP.bits.bPassAccept,
                               pxSocket->u.xTCP.bits.bReuseSocket ) );
            FreeRTOS_printf( ( "vTCPStateChange: me %p parent %p peer %p clear %d\n",
 80102e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d008      	beq.n	80102f8 <vTCPStateChange+0x268>
 80102e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80102e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80102ea:	e006      	b.n	80102fa <vTCPStateChange+0x26a>
 80102ec:	08024504 	.word	0x08024504
 80102f0:	08024518 	.word	0x08024518
 80102f4:	08024548 	.word	0x08024548
 80102f8:	2300      	movs	r3, #0
 80102fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80102fc:	9200      	str	r2, [sp, #0]
 80102fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010300:	6879      	ldr	r1, [r7, #4]
 8010302:	4865      	ldr	r0, [pc, #404]	@ (8010498 <vTCPStateChange+0x408>)
 8010304:	f010 f912 	bl	802052c <lUDPLoggingPrintf>
                               ( void * ) pxSocket,
                               ( void * ) xParent,
                               xParent ? ( void * ) xParent->u.xTCP.pxPeerSocket : NULL,
                               ( int ) xMustClear ) );

            vTaskSuspendAll();
 8010308:	f7f3 f96e 	bl	80035e8 <vTaskSuspendAll>
            {
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010312:	f003 0304 	and.w	r3, r3, #4
 8010316:	b2db      	uxtb	r3, r3
 8010318:	2b00      	cmp	r3, #0
 801031a:	d107      	bne.n	801032c <vTCPStateChange+0x29c>
                    ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010322:	f003 0302 	and.w	r3, r3, #2
 8010326:	b2db      	uxtb	r3, r3
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 8010328:	2b00      	cmp	r3, #0
 801032a:	d026      	beq.n	801037a <vTCPStateChange+0x2ea>
                {
                    if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010332:	f003 0308 	and.w	r3, r3, #8
 8010336:	b2db      	uxtb	r3, r3
 8010338:	2b00      	cmp	r3, #0
 801033a:	d11e      	bne.n	801037a <vTCPStateChange+0x2ea>
                    {
                        xHasCleared = vTCPRemoveTCPChild( pxSocket );
 801033c:	6878      	ldr	r0, [r7, #4]
 801033e:	f7ff fe71 	bl	8010024 <vTCPRemoveTCPChild>
 8010342:	63f8      	str	r0, [r7, #60]	@ 0x3c
                        ( void ) xHasCleared;

                        pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 8010344:	687a      	ldr	r2, [r7, #4]
 8010346:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801034a:	f36f 0382 	bfc	r3, #2, #1
 801034e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                        pxSocket->u.xTCP.bits.bPassAccept = pdFALSE_UNSIGNED;
 8010352:	687a      	ldr	r2, [r7, #4]
 8010354:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8010358:	f36f 0341 	bfc	r3, #1, #1
 801035c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                        configASSERT( xIsCallingFromIPTask() != pdFALSE );
 8010360:	f7f9 f978 	bl	8009654 <xIsCallingFromIPTask>
 8010364:	4603      	mov	r3, r0
 8010366:	2b00      	cmp	r3, #0
 8010368:	d104      	bne.n	8010374 <vTCPStateChange+0x2e4>
 801036a:	f44f 7101 	mov.w	r1, #516	@ 0x204
 801036e:	484b      	ldr	r0, [pc, #300]	@ (801049c <vTCPStateChange+0x40c>)
 8010370:	f7f0 fed2 	bl	8001118 <vAssertCalled>
                        vSocketCloseNextTime( pxSocket );
 8010374:	6878      	ldr	r0, [r7, #4]
 8010376:	f7ff fd57 	bl	800fe28 <vSocketCloseNextTime>
                    }
                }
            }
            ( void ) xTaskResumeAll();
 801037a:	f7f3 f943 	bl	8003604 <xTaskResumeAll>
            FreeRTOS_printf( ( "vTCPStateChange: xHasCleared = %d\n",
 801037e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010380:	4847      	ldr	r0, [pc, #284]	@ (80104a0 <vTCPStateChange+0x410>)
 8010382:	f010 f8d3 	bl	802052c <lUDPLoggingPrintf>
                               ( int ) xHasCleared ) );
        }

        if( ( eTCPState == eCLOSE_WAIT ) && ( pxSocket->u.xTCP.bits.bReuseSocket == pdTRUE_UNSIGNED ) )
 8010386:	78fb      	ldrb	r3, [r7, #3]
 8010388:	2b08      	cmp	r3, #8
 801038a:	d11b      	bne.n	80103c4 <vTCPStateChange+0x334>
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010392:	f003 0308 	and.w	r3, r3, #8
 8010396:	b2db      	uxtb	r3, r3
 8010398:	2b00      	cmp	r3, #0
 801039a:	d013      	beq.n	80103c4 <vTCPStateChange+0x334>
        {
            switch( xPreviousState )
 801039c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80103a0:	3b03      	subs	r3, #3
 80103a2:	2b01      	cmp	r3, #1
 80103a4:	d80d      	bhi.n	80103c2 <vTCPStateChange+0x332>
            {
                case eSYN_FIRST:    /* 3 (server) Just created, must ACK the SYN request */
                case eSYN_RECEIVED: /* 4 (server) waiting for a confirming connection request */
                    FreeRTOS_debug_printf( ( "Restoring a reuse socket port %u\n", pxSocket->usLocalPort ) );
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80103aa:	4619      	mov	r1, r3
 80103ac:	483d      	ldr	r0, [pc, #244]	@ (80104a4 <vTCPStateChange+0x414>)
 80103ae:	f010 f8bd 	bl	802052c <lUDPLoggingPrintf>

                    /* Go back into listening mode. Set the TCP status to 'eCLOSED',
                     * otherwise FreeRTOS_listen() will refuse the action. */
                    pxSocket->u.xTCP.eTCPState = eCLOSED;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	2200      	movs	r2, #0
 80103b6:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79

                    /* vSocketListenNextTime() makes sure that FreeRTOS_listen() will be called
                     * before the IP-task handles any new message. */
                    vSocketListenNextTime( pxSocket );
 80103ba:	6878      	ldr	r0, [r7, #4]
 80103bc:	f7ff fd50 	bl	800fe60 <vSocketListenNextTime>
                    break;
 80103c0:	e000      	b.n	80103c4 <vTCPStateChange+0x334>

                default:
                    /* Nothing to do. */
                    break;
 80103c2:	bf00      	nop
            }
        }

        /* Touch the alive timers because moving to another state. */
        prvTCPTouchSocket( pxSocket );
 80103c4:	6878      	ldr	r0, [r7, #4]
 80103c6:	f7ff fe07 	bl	800ffd8 <prvTCPTouchSocket>

        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        {
            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 80103ca:	4b37      	ldr	r3, [pc, #220]	@ (80104a8 <vTCPStateChange+0x418>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	db4f      	blt.n	8010472 <vTCPStateChange+0x3e2>
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80103d6:	2b17      	cmp	r3, #23
 80103d8:	d04b      	beq.n	8010472 <vTCPStateChange+0x3e2>
            {
                char pcBuffer[ 40 ];

                switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	7a1b      	ldrb	r3, [r3, #8]
 80103de:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80103e2:	b2db      	uxtb	r3, r3
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d002      	beq.n	80103ee <vTCPStateChange+0x35e>
 80103e8:	2b01      	cmp	r3, #1
 80103ea:	d01d      	beq.n	8010428 <vTCPStateChange+0x398>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:   /* LCOV_EXCL_LINE */
                        /* MISRA 16.4 Compliance */
                        break; /* LCOV_EXCL_LINE */
 80103ec:	e026      	b.n	801043c <vTCPStateChange+0x3ac>
                               uint32_t ulIPAddress = FreeRTOS_ntohl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80103f2:	061a      	lsls	r2, r3, #24
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80103f8:	021b      	lsls	r3, r3, #8
 80103fa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80103fe:	431a      	orrs	r2, r3
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010404:	0a1b      	lsrs	r3, r3, #8
 8010406:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801040a:	431a      	orrs	r2, r3
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010410:	0e1b      	lsrs	r3, r3, #24
 8010412:	4313      	orrs	r3, r2
 8010414:	633b      	str	r3, [r7, #48]	@ 0x30
                               FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
 8010416:	f107 0208 	add.w	r2, r7, #8
 801041a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801041e:	2328      	movs	r3, #40	@ 0x28
 8010420:	2002      	movs	r0, #2
 8010422:	f7fe f827 	bl	800e474 <FreeRTOS_inet_ntop>
                           break;
 8010426:	e009      	b.n	801043c <vTCPStateChange+0x3ac>
                                                pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
                            FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
 801042e:	f107 0208 	add.w	r2, r7, #8
 8010432:	2328      	movs	r3, #40	@ 0x28
 8010434:	200a      	movs	r0, #10
 8010436:	f7fe f81d 	bl	800e474 <FreeRTOS_inet_ntop>
                            break;
 801043a:	bf00      	nop
                }

                FreeRTOS_debug_printf( ( "Socket %u -> [%s]:%u State %s->%s\n",
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010440:	461d      	mov	r5, r3
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010448:	461e      	mov	r6, r3
 801044a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801044e:	4618      	mov	r0, r3
 8010450:	f001 fd30 	bl	8011eb4 <FreeRTOS_GetTCPStateName>
 8010454:	4604      	mov	r4, r0
 8010456:	78fb      	ldrb	r3, [r7, #3]
 8010458:	4618      	mov	r0, r3
 801045a:	f001 fd2b 	bl	8011eb4 <FreeRTOS_GetTCPStateName>
 801045e:	4603      	mov	r3, r0
 8010460:	f107 0208 	add.w	r2, r7, #8
 8010464:	9301      	str	r3, [sp, #4]
 8010466:	9400      	str	r4, [sp, #0]
 8010468:	4633      	mov	r3, r6
 801046a:	4629      	mov	r1, r5
 801046c:	480f      	ldr	r0, [pc, #60]	@ (80104ac <vTCPStateChange+0x41c>)
 801046e:	f010 f85d 	bl	802052c <lUDPLoggingPrintf>
        }
        #endif /* ipconfigHAS_DEBUG_PRINTF */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            if( xConnected != NULL )
 8010472:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010474:	2b00      	cmp	r3, #0
 8010476:	d005      	beq.n	8010484 <vTCPStateChange+0x3f4>
            {
                /* The 'connected' state has changed, call the OnConnect handler of the parent. */
                xConnected->u.xTCP.pxHandleConnected( ( Socket_t ) xConnected, bAfter );
 8010478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801047a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 801047e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010480:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010482:	4798      	blx	r3
            }
        }
        #endif

        if( xParent != NULL )
 8010484:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010486:	2b00      	cmp	r3, #0
 8010488:	d002      	beq.n	8010490 <vTCPStateChange+0x400>
        {
            vSocketWakeUpUser( xParent );
 801048a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801048c:	f7fe f871 	bl	800e572 <vSocketWakeUpUser>
        }
    }
 8010490:	bf00      	nop
 8010492:	3754      	adds	r7, #84	@ 0x54
 8010494:	46bd      	mov	sp, r7
 8010496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010498:	08024584 	.word	0x08024584
 801049c:	08024518 	.word	0x08024518
 80104a0:	080245b8 	.word	0x080245b8
 80104a4:	080245dc 	.word	0x080245dc
 80104a8:	200012f4 	.word	0x200012f4
 80104ac:	08024600 	.word	0x08024600

080104b0 <prvTCPNextTimeout>:
 * @param[in] pxSocket The socket to be checked.
 *
 * @return The number of clock ticks before the timer expires.
 */
    TickType_t prvTCPNextTimeout( struct xSOCKET * pxSocket )
    {
 80104b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80104b4:	b098      	sub	sp, #96	@ 0x60
 80104b6:	af02      	add	r7, sp, #8
 80104b8:	64f8      	str	r0, [r7, #76]	@ 0x4c
        TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 80104ba:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80104be:	653b      	str	r3, [r7, #80]	@ 0x50

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 80104c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80104c2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80104c6:	2b02      	cmp	r3, #2
 80104c8:	f040 80cc 	bne.w	8010664 <prvTCPNextTimeout+0x1b4>
        {
            /* The socket is actively connecting to a peer. */
            if( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED )
 80104cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80104ce:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80104d2:	f003 0308 	and.w	r3, r3, #8
 80104d6:	b2db      	uxtb	r3, r3
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d01a      	beq.n	8010512 <prvTCPNextTimeout+0x62>
            {
                /* Ethernet address has been found, use progressive timeout for
                 * active connect(). */
                if( pxSocket->u.xTCP.ucRepCount < 3U )
 80104dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80104de:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80104e2:	2b02      	cmp	r3, #2
 80104e4:	d811      	bhi.n	801050a <prvTCPNextTimeout+0x5a>
                {
                    if( pxSocket->u.xTCP.ucRepCount == 0U )
 80104e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80104e8:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d102      	bne.n	80104f6 <prvTCPNextTimeout+0x46>
                    {
                        ulDelayMs = 0U;
 80104f0:	2300      	movs	r3, #0
 80104f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80104f4:	e010      	b.n	8010518 <prvTCPNextTimeout+0x68>
                    }
                    else
                    {
                        ulDelayMs = ( ( uint32_t ) 3000U ) << ( pxSocket->u.xTCP.ucRepCount - 1U );
 80104f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80104f8:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80104fc:	3b01      	subs	r3, #1
 80104fe:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8010502:	fa02 f303 	lsl.w	r3, r2, r3
 8010506:	653b      	str	r3, [r7, #80]	@ 0x50
 8010508:	e006      	b.n	8010518 <prvTCPNextTimeout+0x68>
                    }
                }
                else
                {
                    ulDelayMs = 11000U;
 801050a:	f642 23f8 	movw	r3, #11000	@ 0x2af8
 801050e:	653b      	str	r3, [r7, #80]	@ 0x50
 8010510:	e002      	b.n	8010518 <prvTCPNextTimeout+0x68>
                }
            }
            else
            {
                /* Still in the ARP phase: check every half second. */
                ulDelayMs = 500U;
 8010512:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8010516:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            FreeRTOS_debug_printf( ( "Connect[%xip:%u]: next timeout %u: %u ms\n",
 8010518:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801051a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801051c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801051e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010522:	4618      	mov	r0, r3
 8010524:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010526:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 801052a:	461a      	mov	r2, r3
 801052c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801052e:	9300      	str	r3, [sp, #0]
 8010530:	4613      	mov	r3, r2
 8010532:	4602      	mov	r2, r0
 8010534:	48a4      	ldr	r0, [pc, #656]	@ (80107c8 <prvTCPNextTimeout+0x318>)
 8010536:	f00f fff9 	bl	802052c <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort,
                                     pxSocket->u.xTCP.ucRepCount, ( unsigned ) ulDelayMs ) );
            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 801053a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801053c:	2200      	movs	r2, #0
 801053e:	643b      	str	r3, [r7, #64]	@ 0x40
 8010540:	647a      	str	r2, [r7, #68]	@ 0x44
 8010542:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8010546:	4622      	mov	r2, r4
 8010548:	462b      	mov	r3, r5
 801054a:	f04f 0000 	mov.w	r0, #0
 801054e:	f04f 0100 	mov.w	r1, #0
 8010552:	0159      	lsls	r1, r3, #5
 8010554:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010558:	0150      	lsls	r0, r2, #5
 801055a:	4602      	mov	r2, r0
 801055c:	460b      	mov	r3, r1
 801055e:	4621      	mov	r1, r4
 8010560:	1a51      	subs	r1, r2, r1
 8010562:	6239      	str	r1, [r7, #32]
 8010564:	4629      	mov	r1, r5
 8010566:	eb63 0301 	sbc.w	r3, r3, r1
 801056a:	627b      	str	r3, [r7, #36]	@ 0x24
 801056c:	f04f 0200 	mov.w	r2, #0
 8010570:	f04f 0300 	mov.w	r3, #0
 8010574:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8010578:	4649      	mov	r1, r9
 801057a:	008b      	lsls	r3, r1, #2
 801057c:	4641      	mov	r1, r8
 801057e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010582:	4641      	mov	r1, r8
 8010584:	008a      	lsls	r2, r1, #2
 8010586:	4610      	mov	r0, r2
 8010588:	4619      	mov	r1, r3
 801058a:	4603      	mov	r3, r0
 801058c:	4622      	mov	r2, r4
 801058e:	189b      	adds	r3, r3, r2
 8010590:	61bb      	str	r3, [r7, #24]
 8010592:	462b      	mov	r3, r5
 8010594:	460a      	mov	r2, r1
 8010596:	eb42 0303 	adc.w	r3, r2, r3
 801059a:	61fb      	str	r3, [r7, #28]
 801059c:	f04f 0200 	mov.w	r2, #0
 80105a0:	f04f 0300 	mov.w	r3, #0
 80105a4:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80105a8:	4629      	mov	r1, r5
 80105aa:	00cb      	lsls	r3, r1, #3
 80105ac:	4621      	mov	r1, r4
 80105ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80105b2:	4621      	mov	r1, r4
 80105b4:	00ca      	lsls	r2, r1, #3
 80105b6:	4610      	mov	r0, r2
 80105b8:	4619      	mov	r1, r3
 80105ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80105be:	f04f 0300 	mov.w	r3, #0
 80105c2:	f7ef fef5 	bl	80003b0 <__aeabi_uldivmod>
 80105c6:	4602      	mov	r2, r0
 80105c8:	460b      	mov	r3, r1
 80105ca:	4613      	mov	r3, r2
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d044      	beq.n	801065a <prvTCPNextTimeout+0x1aa>
 80105d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80105d2:	2200      	movs	r2, #0
 80105d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80105d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80105d8:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80105dc:	4622      	mov	r2, r4
 80105de:	462b      	mov	r3, r5
 80105e0:	f04f 0000 	mov.w	r0, #0
 80105e4:	f04f 0100 	mov.w	r1, #0
 80105e8:	0159      	lsls	r1, r3, #5
 80105ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80105ee:	0150      	lsls	r0, r2, #5
 80105f0:	4602      	mov	r2, r0
 80105f2:	460b      	mov	r3, r1
 80105f4:	4621      	mov	r1, r4
 80105f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80105fa:	4629      	mov	r1, r5
 80105fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8010600:	f04f 0200 	mov.w	r2, #0
 8010604:	f04f 0300 	mov.w	r3, #0
 8010608:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801060c:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 8010610:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8010614:	4692      	mov	sl, r2
 8010616:	469b      	mov	fp, r3
 8010618:	4623      	mov	r3, r4
 801061a:	eb1a 0303 	adds.w	r3, sl, r3
 801061e:	613b      	str	r3, [r7, #16]
 8010620:	462b      	mov	r3, r5
 8010622:	eb4b 0303 	adc.w	r3, fp, r3
 8010626:	617b      	str	r3, [r7, #20]
 8010628:	f04f 0200 	mov.w	r2, #0
 801062c:	f04f 0300 	mov.w	r3, #0
 8010630:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8010634:	4629      	mov	r1, r5
 8010636:	00cb      	lsls	r3, r1, #3
 8010638:	4621      	mov	r1, r4
 801063a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801063e:	4621      	mov	r1, r4
 8010640:	00ca      	lsls	r2, r1, #3
 8010642:	4610      	mov	r0, r2
 8010644:	4619      	mov	r1, r3
 8010646:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801064a:	f04f 0300 	mov.w	r3, #0
 801064e:	f7ef feaf 	bl	80003b0 <__aeabi_uldivmod>
 8010652:	4602      	mov	r2, r0
 8010654:	460b      	mov	r3, r1
 8010656:	b292      	uxth	r2, r2
 8010658:	e000      	b.n	801065c <prvTCPNextTimeout+0x1ac>
 801065a:	2201      	movs	r2, #1
 801065c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801065e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 8010662:	e0a8      	b.n	80107b6 <prvTCPNextTimeout+0x306>
        }
        else if( pxSocket->u.xTCP.usTimeout == 0U )
 8010664:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010666:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 801066a:	2b00      	cmp	r3, #0
 801066c:	f040 80a3 	bne.w	80107b6 <prvTCPNextTimeout+0x306>
        {
            /* Let the sliding window mechanism decide what time-out is appropriate. */
            BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 8010670:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010672:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8010676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010678:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 801067c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8010680:	461a      	mov	r2, r3
 8010682:	f004 fcbd 	bl	8015000 <xTCPWindowTxHasData>
 8010686:	6578      	str	r0, [r7, #84]	@ 0x54

            if( ulDelayMs == 0U )
 8010688:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801068a:	2b00      	cmp	r3, #0
 801068c:	d108      	bne.n	80106a0 <prvTCPNextTimeout+0x1f0>
            {
                if( xResult != ( BaseType_t ) 0 )
 801068e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010690:	2b00      	cmp	r3, #0
 8010692:	d002      	beq.n	801069a <prvTCPNextTimeout+0x1ea>
                {
                    ulDelayMs = 1U;
 8010694:	2301      	movs	r3, #1
 8010696:	653b      	str	r3, [r7, #80]	@ 0x50
 8010698:	e002      	b.n	80106a0 <prvTCPNextTimeout+0x1f0>
                }
                else
                {
                    ulDelayMs = tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 801069a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 801069e:	653b      	str	r3, [r7, #80]	@ 0x50
            else
            {
                /* ulDelayMs contains the time to wait before a re-transmission. */
            }

            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs ); /* LCOV_EXCL_BR_LINE ulDelayMs will not be smaller than 1 */
 80106a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80106a2:	2200      	movs	r2, #0
 80106a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80106a6:	637a      	str	r2, [r7, #52]	@ 0x34
 80106a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80106ac:	4652      	mov	r2, sl
 80106ae:	465b      	mov	r3, fp
 80106b0:	f04f 0000 	mov.w	r0, #0
 80106b4:	f04f 0100 	mov.w	r1, #0
 80106b8:	0159      	lsls	r1, r3, #5
 80106ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80106be:	0150      	lsls	r0, r2, #5
 80106c0:	4602      	mov	r2, r0
 80106c2:	460b      	mov	r3, r1
 80106c4:	4651      	mov	r1, sl
 80106c6:	ebb2 0801 	subs.w	r8, r2, r1
 80106ca:	4659      	mov	r1, fp
 80106cc:	eb63 0901 	sbc.w	r9, r3, r1
 80106d0:	f04f 0200 	mov.w	r2, #0
 80106d4:	f04f 0300 	mov.w	r3, #0
 80106d8:	ea4f 0389 	mov.w	r3, r9, lsl #2
 80106dc:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 80106e0:	ea4f 0288 	mov.w	r2, r8, lsl #2
 80106e4:	4690      	mov	r8, r2
 80106e6:	4699      	mov	r9, r3
 80106e8:	4653      	mov	r3, sl
 80106ea:	eb18 0303 	adds.w	r3, r8, r3
 80106ee:	60bb      	str	r3, [r7, #8]
 80106f0:	465b      	mov	r3, fp
 80106f2:	eb49 0303 	adc.w	r3, r9, r3
 80106f6:	60fb      	str	r3, [r7, #12]
 80106f8:	f04f 0200 	mov.w	r2, #0
 80106fc:	f04f 0300 	mov.w	r3, #0
 8010700:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8010704:	4649      	mov	r1, r9
 8010706:	00cb      	lsls	r3, r1, #3
 8010708:	4641      	mov	r1, r8
 801070a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801070e:	4641      	mov	r1, r8
 8010710:	00ca      	lsls	r2, r1, #3
 8010712:	4610      	mov	r0, r2
 8010714:	4619      	mov	r1, r3
 8010716:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801071a:	f04f 0300 	mov.w	r3, #0
 801071e:	f7ef fe47 	bl	80003b0 <__aeabi_uldivmod>
 8010722:	4602      	mov	r2, r0
 8010724:	460b      	mov	r3, r1
 8010726:	4613      	mov	r3, r2
 8010728:	2b00      	cmp	r3, #0
 801072a:	d040      	beq.n	80107ae <prvTCPNextTimeout+0x2fe>
 801072c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801072e:	2200      	movs	r2, #0
 8010730:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010732:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010734:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8010738:	4642      	mov	r2, r8
 801073a:	464b      	mov	r3, r9
 801073c:	f04f 0000 	mov.w	r0, #0
 8010740:	f04f 0100 	mov.w	r1, #0
 8010744:	0159      	lsls	r1, r3, #5
 8010746:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801074a:	0150      	lsls	r0, r2, #5
 801074c:	4602      	mov	r2, r0
 801074e:	460b      	mov	r3, r1
 8010750:	4641      	mov	r1, r8
 8010752:	1a54      	subs	r4, r2, r1
 8010754:	4649      	mov	r1, r9
 8010756:	eb63 0501 	sbc.w	r5, r3, r1
 801075a:	f04f 0200 	mov.w	r2, #0
 801075e:	f04f 0300 	mov.w	r3, #0
 8010762:	00ab      	lsls	r3, r5, #2
 8010764:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8010768:	00a2      	lsls	r2, r4, #2
 801076a:	4614      	mov	r4, r2
 801076c:	461d      	mov	r5, r3
 801076e:	4643      	mov	r3, r8
 8010770:	18e3      	adds	r3, r4, r3
 8010772:	603b      	str	r3, [r7, #0]
 8010774:	464b      	mov	r3, r9
 8010776:	eb45 0303 	adc.w	r3, r5, r3
 801077a:	607b      	str	r3, [r7, #4]
 801077c:	f04f 0200 	mov.w	r2, #0
 8010780:	f04f 0300 	mov.w	r3, #0
 8010784:	e9d7 4500 	ldrd	r4, r5, [r7]
 8010788:	4629      	mov	r1, r5
 801078a:	00cb      	lsls	r3, r1, #3
 801078c:	4621      	mov	r1, r4
 801078e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010792:	4621      	mov	r1, r4
 8010794:	00ca      	lsls	r2, r1, #3
 8010796:	4610      	mov	r0, r2
 8010798:	4619      	mov	r1, r3
 801079a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801079e:	f04f 0300 	mov.w	r3, #0
 80107a2:	f7ef fe05 	bl	80003b0 <__aeabi_uldivmod>
 80107a6:	4602      	mov	r2, r0
 80107a8:	460b      	mov	r3, r1
 80107aa:	b292      	uxth	r2, r2
 80107ac:	e000      	b.n	80107b0 <prvTCPNextTimeout+0x300>
 80107ae:	2201      	movs	r2, #1
 80107b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80107b2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            /* field '.usTimeout' has already been set (by the
             * keep-alive/delayed-ACK mechanism). */
        }

        /* Return the number of clock ticks before the timer expires. */
        return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 80107b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80107b8:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
    }
 80107bc:	4618      	mov	r0, r3
 80107be:	3758      	adds	r7, #88	@ 0x58
 80107c0:	46bd      	mov	sp, r7
 80107c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80107c6:	bf00      	nop
 80107c8:	08024624 	.word	0x08024624

080107cc <xGetSourceAddrFromBuffer>:
 * @param[in] pucEthernetBuffer The Ethernet buffer from which the source address will be retrieved.
 *
 * @return IPv46_Address_t struct containing the source IP address.
 */
    static IPv46_Address_t xGetSourceAddrFromBuffer( const uint8_t * const pucEthernetBuffer )
    {
 80107cc:	b4b0      	push	{r4, r5, r7}
 80107ce:	b08b      	sub	sp, #44	@ 0x2c
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	6039      	str	r1, [r7, #0]

        /* Map the buffer onto Ethernet Header struct for easy access to fields. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 80107d6:	683b      	ldr	r3, [r7, #0]
 80107d8:	627b      	str	r3, [r7, #36]	@ 0x24

        if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 80107da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107dc:	899b      	ldrh	r3, [r3, #12]
 80107de:	b29b      	uxth	r3, r3
 80107e0:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 80107e4:	4293      	cmp	r3, r2
 80107e6:	d10e      	bne.n	8010806 <xGetSourceAddrFromBuffer+0x3a>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_IPv6_t * const pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80107e8:	683b      	ldr	r3, [r7, #0]
 80107ea:	330e      	adds	r3, #14
 80107ec:	61fb      	str	r3, [r7, #28]
            xSourceAddr.xIs_IPv6 = pdTRUE;
 80107ee:	2301      	movs	r3, #1
 80107f0:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( xSourceAddr.xIPAddress.xIP_IPv6.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, sizeof( IPv6_Address_t ) );
 80107f2:	69fb      	ldr	r3, [r7, #28]
 80107f4:	3308      	adds	r3, #8
 80107f6:	f107 0408 	add.w	r4, r7, #8
 80107fa:	6818      	ldr	r0, [r3, #0]
 80107fc:	6859      	ldr	r1, [r3, #4]
 80107fe:	689a      	ldr	r2, [r3, #8]
 8010800:	68db      	ldr	r3, [r3, #12]
 8010802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010804:	e018      	b.n	8010838 <xGetSourceAddrFromBuffer+0x6c>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_t * const pxIPHeader = ( ( const IPHeader_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	330e      	adds	r3, #14
 801080a:	623b      	str	r3, [r7, #32]
            xSourceAddr.xIs_IPv6 = pdFALSE;
 801080c:	2300      	movs	r3, #0
 801080e:	61bb      	str	r3, [r7, #24]
            xSourceAddr.xIPAddress.ulIP_IPv4 = FreeRTOS_htonl( pxIPHeader->ulSourceIPAddress );
 8010810:	6a3b      	ldr	r3, [r7, #32]
 8010812:	68db      	ldr	r3, [r3, #12]
 8010814:	061a      	lsls	r2, r3, #24
 8010816:	6a3b      	ldr	r3, [r7, #32]
 8010818:	68db      	ldr	r3, [r3, #12]
 801081a:	021b      	lsls	r3, r3, #8
 801081c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8010820:	431a      	orrs	r2, r3
 8010822:	6a3b      	ldr	r3, [r7, #32]
 8010824:	68db      	ldr	r3, [r3, #12]
 8010826:	0a1b      	lsrs	r3, r3, #8
 8010828:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801082c:	431a      	orrs	r2, r3
 801082e:	6a3b      	ldr	r3, [r7, #32]
 8010830:	68db      	ldr	r3, [r3, #12]
 8010832:	0e1b      	lsrs	r3, r3, #24
 8010834:	4313      	orrs	r3, r2
 8010836:	60bb      	str	r3, [r7, #8]
        }

        return xSourceAddr;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	461d      	mov	r5, r3
 801083c:	f107 0408 	add.w	r4, r7, #8
 8010840:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010842:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010844:	6823      	ldr	r3, [r4, #0]
 8010846:	602b      	str	r3, [r5, #0]
    }
 8010848:	6878      	ldr	r0, [r7, #4]
 801084a:	372c      	adds	r7, #44	@ 0x2c
 801084c:	46bd      	mov	sp, r7
 801084e:	bcb0      	pop	{r4, r5, r7}
 8010850:	4770      	bx	lr
	...

08010854 <xProcessReceivedTCPPacket>:
 *      prvTCPSendRepeated()
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC
 */
    BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t * pxDescriptor )
    {
 8010854:	b5b0      	push	{r4, r5, r7, lr}
 8010856:	b096      	sub	sp, #88	@ 0x58
 8010858:	af04      	add	r7, sp, #16
 801085a:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = pdPASS;
 801085c:	2301      	movs	r3, #1
 801085e:	647b      	str	r3, [r7, #68]	@ 0x44
        /* Function might modify the parameter. */
        NetworkBufferDescriptor_t * pxNetworkBuffer;
        size_t uxIPHeaderOffset;

        configASSERT( pxDescriptor != NULL );
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d104      	bne.n	8010870 <xProcessReceivedTCPPacket+0x1c>
 8010866:	f240 21f7 	movw	r1, #759	@ 0x2f7
 801086a:	4898      	ldr	r0, [pc, #608]	@ (8010acc <xProcessReceivedTCPPacket+0x278>)
 801086c:	f7f0 fc54 	bl	8001118 <vAssertCalled>
        configASSERT( pxDescriptor->pucEthernetBuffer != NULL );
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010874:	2b00      	cmp	r3, #0
 8010876:	d104      	bne.n	8010882 <xProcessReceivedTCPPacket+0x2e>
 8010878:	f44f 713e 	mov.w	r1, #760	@ 0x2f8
 801087c:	4893      	ldr	r0, [pc, #588]	@ (8010acc <xProcessReceivedTCPPacket+0x278>)
 801087e:	f7f0 fc4b 	bl	8001118 <vAssertCalled>

        pxNetworkBuffer = pxDescriptor;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	61fb      	str	r3, [r7, #28]
        uxIPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 8010886:	69fb      	ldr	r3, [r7, #28]
 8010888:	4618      	mov	r0, r3
 801088a:	f7f8 fb55 	bl	8008f38 <uxIPHeaderSizePacket>
 801088e:	4603      	mov	r3, r0
 8010890:	330e      	adds	r3, #14
 8010892:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Check for a minimum packet size. */
        if( pxNetworkBuffer->xDataLength < ( uxIPHeaderOffset + ipSIZE_OF_TCP_HEADER ) )
 8010894:	69fb      	ldr	r3, [r7, #28]
 8010896:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801089a:	3314      	adds	r3, #20
 801089c:	429a      	cmp	r2, r3
 801089e:	d202      	bcs.n	80108a6 <xProcessReceivedTCPPacket+0x52>
        {
            xResult = pdFAIL;
 80108a0:	2300      	movs	r3, #0
 80108a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80108a4:	e191      	b.n	8010bca <xProcessReceivedTCPPacket+0x376>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
                                                &( pxNetworkBuffer->pucEthernetBuffer[ uxIPHeaderOffset ] ) );
 80108a6:	69fb      	ldr	r3, [r7, #28]
 80108a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
 80108aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108ac:	4413      	add	r3, r2
 80108ae:	63bb      	str	r3, [r7, #56]	@ 0x38

            const uint16_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 80108b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108b2:	7b5b      	ldrb	r3, [r3, #13]
 80108b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
            const uint16_t usLocalPort = FreeRTOS_htons( pxTCPHeader->usDestinationPort );
 80108b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108b8:	885b      	ldrh	r3, [r3, #2]
 80108ba:	b29b      	uxth	r3, r3
 80108bc:	021b      	lsls	r3, r3, #8
 80108be:	b21a      	sxth	r2, r3
 80108c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108c2:	885b      	ldrh	r3, [r3, #2]
 80108c4:	b29b      	uxth	r3, r3
 80108c6:	0a1b      	lsrs	r3, r3, #8
 80108c8:	b29b      	uxth	r3, r3
 80108ca:	b21b      	sxth	r3, r3
 80108cc:	4313      	orrs	r3, r2
 80108ce:	b21b      	sxth	r3, r3
 80108d0:	86bb      	strh	r3, [r7, #52]	@ 0x34
            const uint16_t usRemotePort = FreeRTOS_htons( pxTCPHeader->usSourcePort );
 80108d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108d4:	881b      	ldrh	r3, [r3, #0]
 80108d6:	b29b      	uxth	r3, r3
 80108d8:	021b      	lsls	r3, r3, #8
 80108da:	b21a      	sxth	r2, r3
 80108dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108de:	881b      	ldrh	r3, [r3, #0]
 80108e0:	b29b      	uxth	r3, r3
 80108e2:	0a1b      	lsrs	r3, r3, #8
 80108e4:	b29b      	uxth	r3, r3
 80108e6:	b21b      	sxth	r3, r3
 80108e8:	4313      	orrs	r3, r2
 80108ea:	b21b      	sxth	r3, r3
 80108ec:	867b      	strh	r3, [r7, #50]	@ 0x32
            const IPv46_Address_t xRemoteIP = xGetSourceAddrFromBuffer( pxNetworkBuffer->pucEthernetBuffer );
 80108ee:	69fb      	ldr	r3, [r7, #28]
 80108f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80108f2:	f107 0308 	add.w	r3, r7, #8
 80108f6:	4611      	mov	r1, r2
 80108f8:	4618      	mov	r0, r3
 80108fa:	f7ff ff67 	bl	80107cc <xGetSourceAddrFromBuffer>

            /* Find the destination socket, and if not found: return a socket listening to
             * the destination PORT. */
            FreeRTOS_Socket_t * pxSocket = pxTCPSocketLookup( 0U, usLocalPort, xRemoteIP, usRemotePort );
 80108fe:	8ebd      	ldrh	r5, [r7, #52]	@ 0x34
 8010900:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8010902:	9303      	str	r3, [sp, #12]
 8010904:	466c      	mov	r4, sp
 8010906:	f107 0310 	add.w	r3, r7, #16
 801090a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801090e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010912:	f107 0308 	add.w	r3, r7, #8
 8010916:	cb0c      	ldmia	r3, {r2, r3}
 8010918:	4629      	mov	r1, r5
 801091a:	2000      	movs	r0, #0
 801091c:	f7fe fbc2 	bl	800f0a4 <pxTCPSocketLookup>
 8010920:	6438      	str	r0, [r7, #64]	@ 0x40

            if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == pdFALSE ) )
 8010922:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010924:	2b00      	cmp	r3, #0
 8010926:	d008      	beq.n	801093a <xProcessReceivedTCPPacket+0xe6>
 8010928:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801092a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801092e:	4618      	mov	r0, r3
 8010930:	f000 fc92 	bl	8011258 <prvTCPSocketIsActive>
 8010934:	4603      	mov	r3, r0
 8010936:	2b00      	cmp	r3, #0
 8010938:	d116      	bne.n	8010968 <xProcessReceivedTCPPacket+0x114>
                /* A TCP messages is received but either there is no socket with the
                 * given port number or the there is a socket, but it is in one of these
                 * non-active states:  eCLOSED, eCLOSE_WAIT, eFIN_WAIT_2, eCLOSING, or
                 * eTIME_WAIT. */

                FreeRTOS_debug_printf( ( "TCP: No active socket on port %d (%d)\n", usLocalPort, usRemotePort ) );
 801093a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801093c:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801093e:	4619      	mov	r1, r3
 8010940:	4863      	ldr	r0, [pc, #396]	@ (8010ad0 <xProcessReceivedTCPPacket+0x27c>)
 8010942:	f00f fdf3 	bl	802052c <lUDPLoggingPrintf>
                 * the other party will get a ECONN error.  There are two exceptions:
                 * 1) A packet that already has the RST flag set.
                 * 2) A packet that only has the ACK flag set.
                 * A packet with only the ACK flag set might be the last ACK in
                 * a three-way hand-shake that closes a connection. */
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 8010946:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010948:	f003 031f 	and.w	r3, r3, #31
 801094c:	2b10      	cmp	r3, #16
 801094e:	d008      	beq.n	8010962 <xProcessReceivedTCPPacket+0x10e>
                    ( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U ) )
 8010950:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010952:	f003 0304 	and.w	r3, r3, #4
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 8010956:	2b00      	cmp	r3, #0
 8010958:	d103      	bne.n	8010962 <xProcessReceivedTCPPacket+0x10e>
                {
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 801095a:	69fb      	ldr	r3, [r7, #28]
 801095c:	4618      	mov	r0, r3
 801095e:	f002 fd0b 	bl	8013378 <prvTCPSendReset>
                }

                /* The packet can't be handled. */
                xResult = pdFAIL;
 8010962:	2300      	movs	r3, #0
 8010964:	647b      	str	r3, [r7, #68]	@ 0x44
 8010966:	e0d6      	b.n	8010b16 <xProcessReceivedTCPPacket+0x2c2>
            }
            else
            {
                pxSocket->u.xTCP.ucRepCount = 0U;
 8010968:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801096a:	2200      	movs	r2, #0
 801096c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 8010970:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010972:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010976:	2b01      	cmp	r3, #1
 8010978:	d127      	bne.n	80109ca <xProcessReceivedTCPPacket+0x176>
                {
                    /* The matching socket is in a listening state.  Test if the peer
                     * has set the SYN flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_SYN )
 801097a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801097c:	f003 031f 	and.w	r3, r3, #31
 8010980:	2b02      	cmp	r3, #2
 8010982:	d015      	beq.n	80109b0 <xProcessReceivedTCPPacket+0x15c>
                        /* What happens: maybe after a reboot, a client doesn't know the
                         * connection had gone.  Send a RST in order to get a new connect
                         * request. */
                        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                        {
                            FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %u to port %u\n",
 8010984:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010986:	4618      	mov	r0, r3
 8010988:	f003 fbbe 	bl	8014108 <prvTCPFlagMeaning>
 801098c:	4601      	mov	r1, r0
 801098e:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8010990:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8010992:	4850      	ldr	r0, [pc, #320]	@ (8010ad4 <xProcessReceivedTCPPacket+0x280>)
 8010994:	f00f fdca 	bl	802052c <lUDPLoggingPrintf>
                                                     prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), usRemotePort, usLocalPort ) );
                        }
                        #endif /* ipconfigHAS_DEBUG_PRINTF */

                        if( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U )
 8010998:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801099a:	f003 0304 	and.w	r3, r3, #4
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d103      	bne.n	80109aa <xProcessReceivedTCPPacket+0x156>
                        {
                            ( void ) prvTCPSendReset( pxNetworkBuffer );
 80109a2:	69fb      	ldr	r3, [r7, #28]
 80109a4:	4618      	mov	r0, r3
 80109a6:	f002 fce7 	bl	8013378 <prvTCPSendReset>
                        }

                        xResult = pdFAIL;
 80109aa:	2300      	movs	r3, #0
 80109ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80109ae:	e0b2      	b.n	8010b16 <xProcessReceivedTCPPacket+0x2c2>
                    else
                    {
                        /* prvHandleListen() will either return a newly created socket
                         * (if bReuseSocket is false), otherwise it returns the current
                         * socket which will later get connected. */
                        pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 80109b0:	69fb      	ldr	r3, [r7, #28]
 80109b2:	4619      	mov	r1, r3
 80109b4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80109b6:	f001 f999 	bl	8011cec <prvHandleListen>
 80109ba:	6438      	str	r0, [r7, #64]	@ 0x40

                        if( pxSocket == NULL )
 80109bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109be:	2b00      	cmp	r3, #0
 80109c0:	f040 80a9 	bne.w	8010b16 <xProcessReceivedTCPPacket+0x2c2>
                        {
                            xResult = pdFAIL;
 80109c4:	2300      	movs	r3, #0
 80109c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80109c8:	e0a5      	b.n	8010b16 <xProcessReceivedTCPPacket+0x2c2>
                } /* if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN ). */
                else
                {
                    /* This is not a socket in listening mode. Check for the RST
                     * flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_RST ) != 0U )
 80109ca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80109cc:	f003 0304 	and.w	r3, r3, #4
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d068      	beq.n	8010aa6 <xProcessReceivedTCPPacket+0x252>
                    {
                        FreeRTOS_debug_printf( ( "TCP: RST received from %u for %u\n", usRemotePort, usLocalPort ) );
 80109d4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80109d6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80109d8:	4619      	mov	r1, r3
 80109da:	483f      	ldr	r0, [pc, #252]	@ (8010ad8 <xProcessReceivedTCPPacket+0x284>)
 80109dc:	f00f fda6 	bl	802052c <lUDPLoggingPrintf>

                        /* Implement https://tools.ietf.org/html/rfc5961#section-3.2. */
                        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 80109e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109e2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80109e6:	2b02      	cmp	r3, #2
 80109e8:	d11f      	bne.n	8010a2a <xProcessReceivedTCPPacket+0x1d6>
                        {
                            const uint32_t ulAckNumber = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 80109ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109ec:	689b      	ldr	r3, [r3, #8]
 80109ee:	061a      	lsls	r2, r3, #24
 80109f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109f2:	689b      	ldr	r3, [r3, #8]
 80109f4:	021b      	lsls	r3, r3, #8
 80109f6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80109fa:	431a      	orrs	r2, r3
 80109fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109fe:	689b      	ldr	r3, [r3, #8]
 8010a00:	0a1b      	lsrs	r3, r3, #8
 8010a02:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010a06:	431a      	orrs	r2, r3
 8010a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a0a:	689b      	ldr	r3, [r3, #8]
 8010a0c:	0e1b      	lsrs	r3, r3, #24
 8010a0e:	4313      	orrs	r3, r2
 8010a10:	627b      	str	r3, [r7, #36]	@ 0x24

                            /* Per the above RFC, "In the SYN-SENT state ... the RST is
                             * acceptable if the ACK field acknowledges the SYN." */
                            if( ulAckNumber == ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber + 1U ) )
 8010a12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a14:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8010a18:	3301      	adds	r3, #1
 8010a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010a1c:	429a      	cmp	r2, r3
 8010a1e:	d13f      	bne.n	8010aa0 <xProcessReceivedTCPPacket+0x24c>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 8010a20:	2100      	movs	r1, #0
 8010a22:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8010a24:	f7ff fb34 	bl	8010090 <vTCPStateChange>
 8010a28:	e03a      	b.n	8010aa0 <xProcessReceivedTCPPacket+0x24c>
                            }
                        }
                        else
                        {
                            const uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 8010a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a2c:	685b      	ldr	r3, [r3, #4]
 8010a2e:	061a      	lsls	r2, r3, #24
 8010a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a32:	685b      	ldr	r3, [r3, #4]
 8010a34:	021b      	lsls	r3, r3, #8
 8010a36:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8010a3a:	431a      	orrs	r2, r3
 8010a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a3e:	685b      	ldr	r3, [r3, #4]
 8010a40:	0a1b      	lsrs	r3, r3, #8
 8010a42:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010a46:	431a      	orrs	r2, r3
 8010a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a4a:	685b      	ldr	r3, [r3, #4]
 8010a4c:	0e1b      	lsrs	r3, r3, #24
 8010a4e:	4313      	orrs	r3, r2
 8010a50:	62bb      	str	r3, [r7, #40]	@ 0x28

                            /* Check whether the packet matches the next expected sequence number. */
                            if( ulSequenceNumber == pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber )
 8010a52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a54:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8010a58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010a5a:	429a      	cmp	r2, r3
 8010a5c:	d104      	bne.n	8010a68 <xProcessReceivedTCPPacket+0x214>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 8010a5e:	2100      	movs	r1, #0
 8010a60:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8010a62:	f7ff fb15 	bl	8010090 <vTCPStateChange>
 8010a66:	e01b      	b.n	8010aa0 <xProcessReceivedTCPPacket+0x24c>
                            }
                            /* Otherwise, check whether the packet is within the receive window. */
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 8010a68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a6a:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8010a6e:	4619      	mov	r1, r3
 8010a70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010a72:	f003 fc82 	bl	801437a <xSequenceGreaterThan>
 8010a76:	4603      	mov	r3, r0
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d011      	beq.n	8010aa0 <xProcessReceivedTCPPacket+0x24c>
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 8010a7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a7e:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
                                                          pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength ) != pdFALSE ) )
 8010a82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a84:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 8010a88:	4413      	add	r3, r2
 8010a8a:	4619      	mov	r1, r3
 8010a8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010a8e:	f003 fc5e 	bl	801434e <xSequenceLessThan>
 8010a92:	4603      	mov	r3, r0
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d003      	beq.n	8010aa0 <xProcessReceivedTCPPacket+0x24c>
                            {
                                /* Send a challenge ACK. */
                                ( void ) prvTCPSendChallengeAck( pxNetworkBuffer );
 8010a98:	69fb      	ldr	r3, [r7, #28]
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f002 fc5f 	bl	801335e <prvTCPSendChallengeAck>
                                /* Nothing. */
                            }
                        }

                        /* Otherwise, do nothing. In any case, the packet cannot be handled. */
                        xResult = pdFAIL;
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	647b      	str	r3, [r7, #68]	@ 0x44
 8010aa4:	e037      	b.n	8010b16 <xProcessReceivedTCPPacket+0x2c2>
                    }
                    /* Check whether there is a pure SYN amongst the TCP flags while the connection is established. */
                    else if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) == tcpTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) )
 8010aa6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010aa8:	f003 031f 	and.w	r3, r3, #31
 8010aac:	2b02      	cmp	r3, #2
 8010aae:	d117      	bne.n	8010ae0 <xProcessReceivedTCPPacket+0x28c>
 8010ab0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ab2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010ab6:	2b04      	cmp	r3, #4
 8010ab8:	d912      	bls.n	8010ae0 <xProcessReceivedTCPPacket+0x28c>
                    {
                        /* SYN flag while this socket is already connected. */
                        FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %u\n", usRemotePort ) );
 8010aba:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8010abc:	4619      	mov	r1, r3
 8010abe:	4807      	ldr	r0, [pc, #28]	@ (8010adc <xProcessReceivedTCPPacket+0x288>)
 8010ac0:	f00f fd34 	bl	802052c <lUDPLoggingPrintf>

                        /* The packet cannot be handled. */
                        xResult = pdFAIL;
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	647b      	str	r3, [r7, #68]	@ 0x44
 8010ac8:	e025      	b.n	8010b16 <xProcessReceivedTCPPacket+0x2c2>
 8010aca:	bf00      	nop
 8010acc:	08024518 	.word	0x08024518
 8010ad0:	08024650 	.word	0x08024650
 8010ad4:	08024678 	.word	0x08024678
 8010ad8:	080246b0 	.word	0x080246b0
 8010adc:	080246d4 	.word	0x080246d4
                    else
                    {
                        /* Update the copy of the TCP header only (skipping eth and IP
                         * headers).  It might be used later on, whenever data must be sent
                         * to the peer. */
                        const size_t uxOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket );
 8010ae0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8010ae2:	f7f8 fa43 	bl	8008f6c <uxIPHeaderSizeSocket>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	330e      	adds	r3, #14
 8010aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 8010aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010aee:	33a0      	adds	r3, #160	@ 0xa0
 8010af0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010af2:	4413      	add	r3, r2
 8010af4:	f103 000a 	add.w	r0, r3, #10
                                         ( const void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ uxOffset ] ) ),
 8010af8:	69fb      	ldr	r3, [r7, #28]
 8010afa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010afe:	4413      	add	r3, r2
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 8010b00:	2214      	movs	r2, #20
 8010b02:	4619      	mov	r1, r3
 8010b04:	f00f ff2e 	bl	8020964 <memcpy>
                                         ipSIZE_OF_TCP_HEADER );
                        /* Clear flags that are set by the peer, and set the ACK flag. */
                        pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset + ipTCP_FLAGS_OFFSET ] = tcpTCP_FLAG_ACK;
 8010b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b0a:	330d      	adds	r3, #13
 8010b0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010b0e:	4413      	add	r3, r2
 8010b10:	2210      	movs	r2, #16
 8010b12:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
                    }
                }
            }

            if( xResult != pdFAIL )
 8010b16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d056      	beq.n	8010bca <xProcessReceivedTCPPacket+0x376>
            {
                uint16_t usWindow;

                /* pxSocket is not NULL when xResult != pdFAIL. */
                configASSERT( pxSocket != NULL ); /* LCOV_EXCL_LINE ,this branch will not be hit*/
 8010b1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d104      	bne.n	8010b2c <xProcessReceivedTCPPacket+0x2d8>
 8010b22:	f240 319e 	movw	r1, #926	@ 0x39e
 8010b26:	482b      	ldr	r0, [pc, #172]	@ (8010bd4 <xProcessReceivedTCPPacket+0x380>)
 8010b28:	f7f0 faf6 	bl	8001118 <vAssertCalled>

                /* Touch the alive timers because we received a message for this
                 * socket. */
                prvTCPTouchSocket( pxSocket );
 8010b2c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8010b2e:	f7ff fa53 	bl	800ffd8 <prvTCPTouchSocket>
                /* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
                 * then we MUST assume an MSS size of 536 bytes for backward compatibility. */

                /* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
                 * the number 5 (words) in the higher nibble of the TCP-offset byte. */
                if( ( pxTCPHeader->ucTCPOffset & tcpTCP_OFFSET_LENGTH_BITS ) > tcpTCP_OFFSET_STANDARD_LENGTH )
 8010b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b34:	7b1b      	ldrb	r3, [r3, #12]
 8010b36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010b3a:	2b50      	cmp	r3, #80	@ 0x50
 8010b3c:	d905      	bls.n	8010b4a <xProcessReceivedTCPPacket+0x2f6>
                {
                    xResult = prvCheckOptions( pxSocket, pxNetworkBuffer );
 8010b3e:	69fb      	ldr	r3, [r7, #28]
 8010b40:	4619      	mov	r1, r3
 8010b42:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8010b44:	f000 f894 	bl	8010c70 <prvCheckOptions>
 8010b48:	6478      	str	r0, [r7, #68]	@ 0x44
                }

                if( xResult != pdFAIL )
 8010b4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d03c      	beq.n	8010bca <xProcessReceivedTCPPacket+0x376>
                {
                    usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 8010b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b52:	89db      	ldrh	r3, [r3, #14]
 8010b54:	b29b      	uxth	r3, r3
 8010b56:	021b      	lsls	r3, r3, #8
 8010b58:	b21a      	sxth	r2, r3
 8010b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b5c:	89db      	ldrh	r3, [r3, #14]
 8010b5e:	b29b      	uxth	r3, r3
 8010b60:	0a1b      	lsrs	r3, r3, #8
 8010b62:	b29b      	uxth	r3, r3
 8010b64:	b21b      	sxth	r3, r3
 8010b66:	4313      	orrs	r3, r2
 8010b68:	b21b      	sxth	r3, r3
 8010b6a:	847b      	strh	r3, [r7, #34]	@ 0x22
                    pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 8010b6c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010b6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b70:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                    #if ( ipconfigUSE_TCP_WIN == 1 )
                    {
                        /* rfc1323 : The Window field in a SYN (i.e., a <SYN> or <SYN,ACK>)
                         * segment itself is never scaled. */
                        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_SYN ) == 0U )
 8010b74:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010b76:	f003 0302 	and.w	r3, r3, #2
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d10a      	bne.n	8010b94 <xProcessReceivedTCPPacket+0x340>
                        {
                            pxSocket->u.xTCP.ulWindowSize =
                                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 8010b7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b80:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8010b84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010b86:	f892 2106 	ldrb.w	r2, [r2, #262]	@ 0x106
 8010b8a:	fa03 f202 	lsl.w	r2, r3, r2
                            pxSocket->u.xTCP.ulWindowSize =
 8010b8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b90:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                    }
                    #endif /* ipconfigUSE_TCP_WIN */

                    /* In prvTCPHandleState() the incoming messages will be handled
                     * depending on the current state of the connection. */
                    if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 8010b94:	f107 031c 	add.w	r3, r7, #28
 8010b98:	4619      	mov	r1, r3
 8010b9a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8010b9c:	f000 ff78 	bl	8011a90 <prvTCPHandleState>
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	dd05      	ble.n	8010bb2 <xProcessReceivedTCPPacket+0x35e>
                    {
                        /* prvTCPHandleState() has sent a message, see if there are more to
                         * be transmitted. */
                        #if ( ipconfigUSE_TCP_WIN == 1 )
                        {
                            ( void ) prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 8010ba6:	f107 031c 	add.w	r3, r7, #28
 8010baa:	4619      	mov	r1, r3
 8010bac:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8010bae:	f001 fc6f 	bl	8012490 <prvTCPSendRepeated>
                        }
                        #endif /* ipconfigUSE_TCP_WIN */
                    }

                    if( pxNetworkBuffer != NULL )
 8010bb2:	69fb      	ldr	r3, [r7, #28]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d005      	beq.n	8010bc4 <xProcessReceivedTCPPacket+0x370>
                    {
                        /* We must check if the buffer is unequal to NULL, because the
                         * socket might keep a reference to it in case a delayed ACK must be
                         * sent. */
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8010bb8:	69fb      	ldr	r3, [r7, #28]
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f005 fbcc 	bl	8016358 <vReleaseNetworkBufferAndDescriptor>
                        #ifndef _lint
                            /* Clear pointers that are freed. */
                            pxNetworkBuffer = NULL;
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	61fb      	str	r3, [r7, #28]
                        #endif
                    }

                    /* And finally, calculate when this socket wants to be woken up. */
                    ( void ) prvTCPNextTimeout( pxSocket );
 8010bc4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8010bc6:	f7ff fc73 	bl	80104b0 <prvTCPNextTimeout>
                }
            }
        }

        /* pdPASS being returned means the buffer has been consumed. */
        return xResult;
 8010bca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 8010bcc:	4618      	mov	r0, r3
 8010bce:	3748      	adds	r7, #72	@ 0x48
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	bdb0      	pop	{r4, r5, r7, pc}
 8010bd4:	08024518 	.word	0x08024518

08010bd8 <xTCPCheckNewClient>:
 * @param[in] pxSocket The socket for which the bound socket list will be iterated.
 *
 * @return if there is a new client, then pdTRUE is returned or else, pdFALSE.
 */
    BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t * pxSocket )
    {
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b088      	sub	sp, #32
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
        TickType_t uxLocalPort = ( TickType_t ) FreeRTOS_htons( pxSocket->usLocalPort );
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010be4:	021b      	lsls	r3, r3, #8
 8010be6:	b21a      	sxth	r2, r3
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010bec:	0a1b      	lsrs	r3, r3, #8
 8010bee:	b29b      	uxth	r3, r3
 8010bf0:	b21b      	sxth	r3, r3
 8010bf2:	4313      	orrs	r3, r2
 8010bf4:	b21b      	sxth	r3, r3
 8010bf6:	b29b      	uxth	r3, r3
 8010bf8:	617b      	str	r3, [r7, #20]
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxFound;
        BaseType_t xResult = pdFALSE;
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEndTCP = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 8010bfe:	4b19      	ldr	r3, [pc, #100]	@ (8010c64 <xTCPCheckNewClient+0x8c>)
 8010c00:	613b      	str	r3, [r7, #16]

        /* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
         * who has access. */
        for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8010c02:	4b19      	ldr	r3, [pc, #100]	@ (8010c68 <xTCPCheckNewClient+0x90>)
 8010c04:	68db      	ldr	r3, [r3, #12]
 8010c06:	61fb      	str	r3, [r7, #28]
 8010c08:	e023      	b.n	8010c52 <xTCPCheckNewClient+0x7a>
             pxIterator != pxEndTCP;
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == ( configLIST_VOLATILE TickType_t ) uxLocalPort )
 8010c0a:	69fb      	ldr	r3, [r7, #28]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	697a      	ldr	r2, [r7, #20]
 8010c10:	429a      	cmp	r2, r3
 8010c12:	d11b      	bne.n	8010c4c <xTCPCheckNewClient+0x74>
            {
                pxFound = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8010c14:	69fb      	ldr	r3, [r7, #28]
 8010c16:	68db      	ldr	r3, [r3, #12]
 8010c18:	60fb      	str	r3, [r7, #12]

                if( ( pxFound->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8010c20:	2b06      	cmp	r3, #6
 8010c22:	d113      	bne.n	8010c4c <xTCPCheckNewClient+0x74>
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010c2a:	f003 0302 	and.w	r3, r3, #2
 8010c2e:	b2db      	uxtb	r3, r3
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d00b      	beq.n	8010c4c <xTCPCheckNewClient+0x74>
                {
                    pxSocket->u.xTCP.pxPeerSocket = pxFound;
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	68fa      	ldr	r2, [r7, #12]
 8010c38:	67da      	str	r2, [r3, #124]	@ 0x7c
                    FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010c3e:	4619      	mov	r1, r3
 8010c40:	480a      	ldr	r0, [pc, #40]	@ (8010c6c <xTCPCheckNewClient+0x94>)
 8010c42:	f00f fc73 	bl	802052c <lUDPLoggingPrintf>
                    xResult = pdTRUE;
 8010c46:	2301      	movs	r3, #1
 8010c48:	61bb      	str	r3, [r7, #24]
                    break;
 8010c4a:	e006      	b.n	8010c5a <xTCPCheckNewClient+0x82>
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 8010c4c:	69fb      	ldr	r3, [r7, #28]
 8010c4e:	685b      	ldr	r3, [r3, #4]
 8010c50:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEndTCP;
 8010c52:	69fa      	ldr	r2, [r7, #28]
 8010c54:	693b      	ldr	r3, [r7, #16]
 8010c56:	429a      	cmp	r2, r3
 8010c58:	d1d7      	bne.n	8010c0a <xTCPCheckNewClient+0x32>
                }
            }
        }

        return xResult;
 8010c5a:	69bb      	ldr	r3, [r7, #24]
    }
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	3720      	adds	r7, #32
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}
 8010c64:	200012b8 	.word	0x200012b8
 8010c68:	200012b0 	.word	0x200012b0
 8010c6c:	080246f4 	.word	0x080246f4

08010c70 <prvCheckOptions>:
 *       ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that
 *       the TP header is longer than the usual 20 (5 x 4) bytes.
 */
    BaseType_t prvCheckOptions( FreeRTOS_Socket_t * pxSocket,
                                const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b08c      	sub	sp, #48	@ 0x30
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
 8010c78:	6039      	str	r1, [r7, #0]
        size_t uxTCPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 8010c7a:	6838      	ldr	r0, [r7, #0]
 8010c7c:	f7f8 f95c 	bl	8008f38 <uxIPHeaderSizePacket>
 8010c80:	4603      	mov	r3, r0
 8010c82:	330e      	adds	r3, #14
 8010c84:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ uxTCPHeaderOffset ] ) );
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8010c8a:	69fb      	ldr	r3, [r7, #28]
 8010c8c:	4413      	add	r3, r2
 8010c8e:	61bb      	str	r3, [r7, #24]
        const TCPHeader_t * pxTCPHeader;
        const uint8_t * pucPtr;
        BaseType_t xHasSYNFlag;
        BaseType_t xReturn = pdPASS;
 8010c90:	2301      	movs	r3, #1
 8010c92:	627b      	str	r3, [r7, #36]	@ 0x24
        /* Offset in the network packet where the first option byte is stored. */
        size_t uxOptionOffset = uxTCPHeaderOffset + ipSIZE_OF_TCP_HEADER;
 8010c94:	69fb      	ldr	r3, [r7, #28]
 8010c96:	3314      	adds	r3, #20
 8010c98:	617b      	str	r3, [r7, #20]
        size_t uxOptionsLength;
        int32_t lResult;
        uint8_t ucLength;

        pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8010c9a:	69bb      	ldr	r3, [r7, #24]
 8010c9c:	613b      	str	r3, [r7, #16]


        /* A character pointer to iterate through the option data */
        pucPtr = pxTCPHeader->ucOptdata;
 8010c9e:	693b      	ldr	r3, [r7, #16]
 8010ca0:	3314      	adds	r3, #20
 8010ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPOffset <= ( 5U << 4U ) )
 8010ca4:	693b      	ldr	r3, [r7, #16]
 8010ca6:	7b1b      	ldrb	r3, [r3, #12]
 8010ca8:	2b50      	cmp	r3, #80	@ 0x50
 8010caa:	d93f      	bls.n	8010d2c <prvCheckOptions+0xbc>
        {
            /* Avoid integer underflow in computation of ucLength. */
        }
        else
        {
            ucLength = ( uint8_t ) ( ( ( pxTCPHeader->ucTCPOffset >> 4U ) - 5U ) << 2U );
 8010cac:	693b      	ldr	r3, [r7, #16]
 8010cae:	7b1b      	ldrb	r3, [r3, #12]
 8010cb0:	091b      	lsrs	r3, r3, #4
 8010cb2:	b2db      	uxtb	r3, r3
 8010cb4:	3b05      	subs	r3, #5
 8010cb6:	b2db      	uxtb	r3, r3
 8010cb8:	009b      	lsls	r3, r3, #2
 8010cba:	73fb      	strb	r3, [r7, #15]
            uxOptionsLength = ( size_t ) ucLength;
 8010cbc:	7bfb      	ldrb	r3, [r7, #15]
 8010cbe:	623b      	str	r3, [r7, #32]

            if( pxNetworkBuffer->xDataLength > uxOptionOffset )
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cc4:	697a      	ldr	r2, [r7, #20]
 8010cc6:	429a      	cmp	r2, r3
 8010cc8:	d230      	bcs.n	8010d2c <prvCheckOptions+0xbc>
            {
                /* Validate options size calculation. */
                if( uxOptionsLength <= ( pxNetworkBuffer->xDataLength - uxOptionOffset ) )
 8010cca:	683b      	ldr	r3, [r7, #0]
 8010ccc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010cce:	697b      	ldr	r3, [r7, #20]
 8010cd0:	1ad3      	subs	r3, r2, r3
 8010cd2:	6a3a      	ldr	r2, [r7, #32]
 8010cd4:	429a      	cmp	r2, r3
 8010cd6:	d829      	bhi.n	8010d2c <prvCheckOptions+0xbc>
                {
                    if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_SYN ) != ( uint8_t ) 0U )
 8010cd8:	693b      	ldr	r3, [r7, #16]
 8010cda:	7b5b      	ldrb	r3, [r3, #13]
 8010cdc:	f003 0302 	and.w	r3, r3, #2
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d002      	beq.n	8010cea <prvCheckOptions+0x7a>
                    {
                        xHasSYNFlag = pdTRUE;
 8010ce4:	2301      	movs	r3, #1
 8010ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010ce8:	e001      	b.n	8010cee <prvCheckOptions+0x7e>
                    }
                    else
                    {
                        xHasSYNFlag = pdFALSE;
 8010cea:	2300      	movs	r3, #0
 8010cec:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* The length check is only necessary in case the option data are
                     *  corrupted, we don't like to run into invalid memory and crash. */
                    for( ; ; )
                    {
                        if( uxOptionsLength == 0U )
 8010cee:	6a3b      	ldr	r3, [r7, #32]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d018      	beq.n	8010d26 <prvCheckOptions+0xb6>
                        {
                            /* coverity[break_stmt] : Break statement terminating the loop */
                            break;
                        }

                        lResult = prvSingleStepTCPHeaderOptions( pucPtr, uxOptionsLength, pxSocket, xHasSYNFlag );
 8010cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cf6:	687a      	ldr	r2, [r7, #4]
 8010cf8:	6a39      	ldr	r1, [r7, #32]
 8010cfa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010cfc:	f000 f81c 	bl	8010d38 <prvSingleStepTCPHeaderOptions>
 8010d00:	60b8      	str	r0, [r7, #8]

                        if( lResult < 0 )
 8010d02:	68bb      	ldr	r3, [r7, #8]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	da02      	bge.n	8010d0e <prvCheckOptions+0x9e>
                        {
                            xReturn = pdFAIL;
 8010d08:	2300      	movs	r3, #0
 8010d0a:	627b      	str	r3, [r7, #36]	@ 0x24
                            break;
 8010d0c:	e00e      	b.n	8010d2c <prvCheckOptions+0xbc>
                        }

                        if( lResult == 0 )
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d00a      	beq.n	8010d2a <prvCheckOptions+0xba>
                        {
                            break;
                        }

                        uxOptionsLength -= ( size_t ) lResult;
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	6a3a      	ldr	r2, [r7, #32]
 8010d18:	1ad3      	subs	r3, r2, r3
 8010d1a:	623b      	str	r3, [r7, #32]
                        pucPtr = &( pucPtr[ lResult ] );
 8010d1c:	68bb      	ldr	r3, [r7, #8]
 8010d1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d20:	4413      	add	r3, r2
 8010d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        if( uxOptionsLength == 0U )
 8010d24:	e7e3      	b.n	8010cee <prvCheckOptions+0x7e>
                            break;
 8010d26:	bf00      	nop
 8010d28:	e000      	b.n	8010d2c <prvCheckOptions+0xbc>
                            break;
 8010d2a:	bf00      	nop
                    }
                }
            }
        }

        return xReturn;
 8010d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3730      	adds	r7, #48	@ 0x30
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}
	...

08010d38 <prvSingleStepTCPHeaderOptions>:
 */
    static int32_t prvSingleStepTCPHeaderOptions( const uint8_t * const pucPtr,
                                                  size_t uxTotalLength,
                                                  FreeRTOS_Socket_t * const pxSocket,
                                                  BaseType_t xHasSYNFlag )
    {
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b08a      	sub	sp, #40	@ 0x28
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	60f8      	str	r0, [r7, #12]
 8010d40:	60b9      	str	r1, [r7, #8]
 8010d42:	607a      	str	r2, [r7, #4]
 8010d44:	603b      	str	r3, [r7, #0]
        UBaseType_t uxNewMSS;
        size_t uxRemainingOptionsBytes = uxTotalLength;
 8010d46:	68bb      	ldr	r3, [r7, #8]
 8010d48:	617b      	str	r3, [r7, #20]
        uint8_t ucLen;
        int32_t lIndex = 0;
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	61fb      	str	r3, [r7, #28]
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8010d54:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8010d56:	2300      	movs	r3, #0
 8010d58:	61bb      	str	r3, [r7, #24]

        if( pucPtr[ 0U ] == tcpTCP_OPT_END )
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	781b      	ldrb	r3, [r3, #0]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d102      	bne.n	8010d68 <prvSingleStepTCPHeaderOptions+0x30>
        {
            /* End of options. */
            lIndex = 0;
 8010d62:	2300      	movs	r3, #0
 8010d64:	61fb      	str	r3, [r7, #28]
 8010d66:	e0da      	b.n	8010f1e <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else if( pucPtr[ 0U ] == tcpTCP_OPT_NOOP )
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	781b      	ldrb	r3, [r3, #0]
 8010d6c:	2b01      	cmp	r3, #1
 8010d6e:	d102      	bne.n	8010d76 <prvSingleStepTCPHeaderOptions+0x3e>
        {
            /* NOP option, inserted to make the length a multiple of 4. */
            lIndex = 1;
 8010d70:	2301      	movs	r3, #1
 8010d72:	61fb      	str	r3, [r7, #28]
 8010d74:	e0d3      	b.n	8010f1e <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else if( uxRemainingOptionsBytes < 2U )
 8010d76:	697b      	ldr	r3, [r7, #20]
 8010d78:	2b01      	cmp	r3, #1
 8010d7a:	d803      	bhi.n	8010d84 <prvSingleStepTCPHeaderOptions+0x4c>
        {
            /* Any other well-formed option must be at least two bytes: the option
             * type byte followed by a length byte. */
            lIndex = -1;
 8010d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8010d80:	61fb      	str	r3, [r7, #28]
 8010d82:	e0cc      	b.n	8010f1e <prvSingleStepTCPHeaderOptions+0x1e6>
        }

        #if ( ipconfigUSE_TCP_WIN != 0 )
            else if( pucPtr[ 0 ] == tcpTCP_OPT_WSOPT )
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	781b      	ldrb	r3, [r3, #0]
 8010d88:	2b03      	cmp	r3, #3
 8010d8a:	d11e      	bne.n	8010dca <prvSingleStepTCPHeaderOptions+0x92>
            {
                /* The TCP Window Scale Option. */
                /* Confirm that the option fits in the remaining buffer space. */
                if( ( uxRemainingOptionsBytes < tcpTCP_OPT_WSOPT_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_WSOPT_LEN ) )
 8010d8c:	697b      	ldr	r3, [r7, #20]
 8010d8e:	2b02      	cmp	r3, #2
 8010d90:	d904      	bls.n	8010d9c <prvSingleStepTCPHeaderOptions+0x64>
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	3301      	adds	r3, #1
 8010d96:	781b      	ldrb	r3, [r3, #0]
 8010d98:	2b03      	cmp	r3, #3
 8010d9a:	d003      	beq.n	8010da4 <prvSingleStepTCPHeaderOptions+0x6c>
                {
                    lIndex = -1;
 8010d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8010da0:	61fb      	str	r3, [r7, #28]
 8010da2:	e0bc      	b.n	8010f1e <prvSingleStepTCPHeaderOptions+0x1e6>
                }
                else
                {
                    /* Option is only valid in SYN phase. */
                    if( xHasSYNFlag != 0 )
 8010da4:	683b      	ldr	r3, [r7, #0]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d00c      	beq.n	8010dc4 <prvSingleStepTCPHeaderOptions+0x8c>
                    {
                        pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	3302      	adds	r3, #2
 8010dae:	781a      	ldrb	r2, [r3, #0]
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
                        pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 8010db6:	687a      	ldr	r2, [r7, #4]
 8010db8:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8010dbc:	f043 0310 	orr.w	r3, r3, #16
 8010dc0:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_WSOPT_LEN;
 8010dc4:	2303      	movs	r3, #3
 8010dc6:	61fb      	str	r3, [r7, #28]
 8010dc8:	e0a9      	b.n	8010f1e <prvSingleStepTCPHeaderOptions+0x1e6>
                }
            }
        #endif /* ipconfigUSE_TCP_WIN */
        else if( pucPtr[ 0 ] == tcpTCP_OPT_MSS )
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	781b      	ldrb	r3, [r3, #0]
 8010dce:	2b02      	cmp	r3, #2
 8010dd0:	d16d      	bne.n	8010eae <prvSingleStepTCPHeaderOptions+0x176>
        {
            /* Confirm that the option fits in the remaining buffer space. */
            if( ( uxRemainingOptionsBytes < tcpTCP_OPT_MSS_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_MSS_LEN ) )
 8010dd2:	697b      	ldr	r3, [r7, #20]
 8010dd4:	2b03      	cmp	r3, #3
 8010dd6:	d904      	bls.n	8010de2 <prvSingleStepTCPHeaderOptions+0xaa>
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	3301      	adds	r3, #1
 8010ddc:	781b      	ldrb	r3, [r3, #0]
 8010dde:	2b04      	cmp	r3, #4
 8010de0:	d003      	beq.n	8010dea <prvSingleStepTCPHeaderOptions+0xb2>
            {
                lIndex = -1;
 8010de2:	f04f 33ff 	mov.w	r3, #4294967295
 8010de6:	61fb      	str	r3, [r7, #28]
 8010de8:	e099      	b.n	8010f1e <prvSingleStepTCPHeaderOptions+0x1e6>
            else
            {
                /* An MSS option with the correct option length.  FreeRTOS_htons()
                 * is not needed here because usChar2u16() already returns a host
                 * endian number. */
                uxNewMSS = usChar2u16( &( pucPtr[ 2 ] ) );
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	3302      	adds	r3, #2
 8010dee:	4618      	mov	r0, r3
 8010df0:	f7f8 fe4f 	bl	8009a92 <usChar2u16>
 8010df4:	4603      	mov	r3, r0
 8010df6:	627b      	str	r3, [r7, #36]	@ 0x24

                if( pxSocket->u.xTCP.usMSS != uxNewMSS )
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010dfe:	461a      	mov	r2, r3
 8010e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e02:	4293      	cmp	r3, r2
 8010e04:	d010      	beq.n	8010e28 <prvSingleStepTCPHeaderOptions+0xf0>
                {
                    /* Perform a basic check on the the new MSS. */
                    if( uxNewMSS == 0U )
 8010e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d105      	bne.n	8010e18 <prvSingleStepTCPHeaderOptions+0xe0>
                    {
                        lIndex = -1;
 8010e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8010e10:	61fb      	str	r3, [r7, #28]

                        /* Return Condition found. */
                        xReturn = pdTRUE;
 8010e12:	2301      	movs	r3, #1
 8010e14:	61bb      	str	r3, [r7, #24]
 8010e16:	e007      	b.n	8010e28 <prvSingleStepTCPHeaderOptions+0xf0>
                    }
                    else
                    {
                        FreeRTOS_debug_printf( ( "MSS change %u -> %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010e1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010e20:	4619      	mov	r1, r3
 8010e22:	4841      	ldr	r0, [pc, #260]	@ (8010f28 <prvSingleStepTCPHeaderOptions+0x1f0>)
 8010e24:	f00f fb82 	bl	802052c <lUDPLoggingPrintf>
                    }
                }

                /* If a 'return' condition has not been found. */
                if( xReturn == pdFALSE )
 8010e28:	69bb      	ldr	r3, [r7, #24]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d177      	bne.n	8010f1e <prvSingleStepTCPHeaderOptions+0x1e6>
                {
                    /* Restrict the minimum value of segment length to the ( Minimum IP MTU (576) - IP header(20) - TCP Header(20) ).
                     * See "RFC 791 section 3.1 Total Length" for more details. */
                    if( uxNewMSS < tcpMINIMUM_SEGMENT_LENGTH )
 8010e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e30:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8010e34:	d202      	bcs.n	8010e3c <prvSingleStepTCPHeaderOptions+0x104>
                    {
                        uxNewMSS = tcpMINIMUM_SEGMENT_LENGTH;
 8010e36:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8010e3a:	627b      	str	r3, [r7, #36]	@ 0x24
                    }

                    if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010e42:	461a      	mov	r2, r3
 8010e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e46:	4293      	cmp	r3, r2
 8010e48:	d22e      	bcs.n	8010ea8 <prvSingleStepTCPHeaderOptions+0x170>
                    {
                        /* our MSS was bigger than the MSS of the other party: adapt it. */
                        pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 8010e4a:	687a      	ldr	r2, [r7, #4]
 8010e4c:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8010e50:	f043 0301 	orr.w	r3, r3, #1
 8010e54:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

                        if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010e5e:	461a      	mov	r2, r3
 8010e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e62:	4293      	cmp	r3, r2
 8010e64:	d207      	bcs.n	8010e76 <prvSingleStepTCPHeaderOptions+0x13e>
                        {
                            /* The peer advertises a smaller MSS than this socket was
                             * using.  Use that as well. */
                            FreeRTOS_debug_printf( ( "Change mss %d => %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010e6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010e6e:	4619      	mov	r1, r3
 8010e70:	482e      	ldr	r0, [pc, #184]	@ (8010f2c <prvSingleStepTCPHeaderOptions+0x1f4>)
 8010e72:	f00f fb5b 	bl	802052c <lUDPLoggingPrintf>
                        }

                        pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 8010e76:	693b      	ldr	r3, [r7, #16]
 8010e78:	685a      	ldr	r2, [r3, #4]
 8010e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010e82:	fb03 f202 	mul.w	r2, r3, r2
 8010e86:	693b      	ldr	r3, [r7, #16]
 8010e88:	605a      	str	r2, [r3, #4]
                        pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 8010e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e8c:	b29a      	uxth	r2, r3
 8010e8e:	693b      	ldr	r3, [r7, #16]
 8010e90:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
                        pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 8010e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e96:	b29a      	uxth	r2, r3
 8010e98:	693b      	ldr	r3, [r7, #16]
 8010e9a:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
                        pxSocket->u.xTCP.usMSS = ( uint16_t ) uxNewMSS;
 8010e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ea0:	b29a      	uxth	r2, r3
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_MSS_LEN;
 8010ea8:	2304      	movs	r3, #4
 8010eaa:	61fb      	str	r3, [r7, #28]
 8010eac:	e037      	b.n	8010f1e <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else
        {
            /* All other options have a length field, so that we easily
             * can skip past them. */
            ucLen = pucPtr[ 1 ];
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	3301      	adds	r3, #1
 8010eb2:	781b      	ldrb	r3, [r3, #0]
 8010eb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            lIndex = 0;
 8010eb8:	2300      	movs	r3, #0
 8010eba:	61fb      	str	r3, [r7, #28]

            if( ( ucLen < ( uint8_t ) 2U ) || ( uxRemainingOptionsBytes < ( size_t ) ucLen ) )
 8010ebc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010ec0:	2b01      	cmp	r3, #1
 8010ec2:	d904      	bls.n	8010ece <prvSingleStepTCPHeaderOptions+0x196>
 8010ec4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010ec8:	697a      	ldr	r2, [r7, #20]
 8010eca:	429a      	cmp	r2, r3
 8010ecc:	d203      	bcs.n	8010ed6 <prvSingleStepTCPHeaderOptions+0x19e>
            {
                /* If the length field is too small or too big, the options are
                 * malformed, don't process them further.
                 */
                lIndex = -1;
 8010ece:	f04f 33ff 	mov.w	r3, #4294967295
 8010ed2:	61fb      	str	r3, [r7, #28]
 8010ed4:	e023      	b.n	8010f1e <prvSingleStepTCPHeaderOptions+0x1e6>
                {
                    /* Selective ACK: the peer has received a packet but it is missing
                     * earlier packets. At least this packet does not need retransmission
                     * anymore. ulTCPWindowTxSack( ) takes care of this administration.
                     */
                    if( pucPtr[ 0U ] == tcpTCP_OPT_SACK_A )
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	781b      	ldrb	r3, [r3, #0]
 8010eda:	2b05      	cmp	r3, #5
 8010edc:	d11a      	bne.n	8010f14 <prvSingleStepTCPHeaderOptions+0x1dc>
                    {
                        ucLen = ( uint8_t ) ( ucLen - 2U );
 8010ede:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010ee2:	3b02      	subs	r3, #2
 8010ee4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        lIndex += 2;
 8010ee8:	69fb      	ldr	r3, [r7, #28]
 8010eea:	3302      	adds	r3, #2
 8010eec:	61fb      	str	r3, [r7, #28]

                        while( ucLen >= ( uint8_t ) 8U )
 8010eee:	e00d      	b.n	8010f0c <prvSingleStepTCPHeaderOptions+0x1d4>
                        {
                            prvReadSackOption( pucPtr, ( size_t ) lIndex, pxSocket );
 8010ef0:	69fb      	ldr	r3, [r7, #28]
 8010ef2:	687a      	ldr	r2, [r7, #4]
 8010ef4:	4619      	mov	r1, r3
 8010ef6:	68f8      	ldr	r0, [r7, #12]
 8010ef8:	f000 f81a 	bl	8010f30 <prvReadSackOption>
                            lIndex += 8;
 8010efc:	69fb      	ldr	r3, [r7, #28]
 8010efe:	3308      	adds	r3, #8
 8010f00:	61fb      	str	r3, [r7, #28]
                            ucLen = ( uint8_t ) ( ucLen - 8U );
 8010f02:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010f06:	3b08      	subs	r3, #8
 8010f08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        while( ucLen >= ( uint8_t ) 8U )
 8010f0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010f10:	2b07      	cmp	r3, #7
 8010f12:	d8ed      	bhi.n	8010ef0 <prvSingleStepTCPHeaderOptions+0x1b8>
                        /* ucLen should be 0 by now. */
                    }
                }
                #endif /* ipconfigUSE_TCP_WIN == 1 */

                lIndex += ( int32_t ) ucLen;
 8010f14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010f18:	69fa      	ldr	r2, [r7, #28]
 8010f1a:	4413      	add	r3, r2
 8010f1c:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 0 )
            /* Avoid compiler warnings when TCP window is not used. */
            ( void ) xHasSYNFlag;
        #endif

        return lIndex;
 8010f1e:	69fb      	ldr	r3, [r7, #28]
    }
 8010f20:	4618      	mov	r0, r3
 8010f22:	3728      	adds	r7, #40	@ 0x28
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}
 8010f28:	08024720 	.word	0x08024720
 8010f2c:	08024738 	.word	0x08024738

08010f30 <prvReadSackOption>:
 * @param[in] pxSocket Socket handling the TCP connection.
 */
        static void prvReadSackOption( const uint8_t * const pucPtr,
                                       size_t uxIndex,
                                       FreeRTOS_Socket_t * const pxSocket )
        {
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b08a      	sub	sp, #40	@ 0x28
 8010f34:	af02      	add	r7, sp, #8
 8010f36:	60f8      	str	r0, [r7, #12]
 8010f38:	60b9      	str	r1, [r7, #8]
 8010f3a:	607a      	str	r2, [r7, #4]
            uint32_t ulFirst = ulChar2u32( &( pucPtr[ uxIndex ] ) );
 8010f3c:	68fa      	ldr	r2, [r7, #12]
 8010f3e:	68bb      	ldr	r3, [r7, #8]
 8010f40:	4413      	add	r3, r2
 8010f42:	4618      	mov	r0, r3
 8010f44:	f7f8 fd8a 	bl	8009a5c <ulChar2u32>
 8010f48:	61f8      	str	r0, [r7, #28]
            uint32_t ulLast = ulChar2u32( &( pucPtr[ uxIndex + 4U ] ) );
 8010f4a:	68bb      	ldr	r3, [r7, #8]
 8010f4c:	3304      	adds	r3, #4
 8010f4e:	68fa      	ldr	r2, [r7, #12]
 8010f50:	4413      	add	r3, r2
 8010f52:	4618      	mov	r0, r3
 8010f54:	f7f8 fd82 	bl	8009a5c <ulChar2u32>
 8010f58:	61b8      	str	r0, [r7, #24]
            uint32_t ulCount = ulTCPWindowTxSack( &( pxSocket->u.xTCP.xTCPWindow ), ulFirst, ulLast );
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8010f60:	69ba      	ldr	r2, [r7, #24]
 8010f62:	69f9      	ldr	r1, [r7, #28]
 8010f64:	4618      	mov	r0, r3
 8010f66:	f004 fba3 	bl	80156b0 <ulTCPWindowTxSack>
 8010f6a:	6178      	str	r0, [r7, #20]

            /* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
             * starting from the head position.  Advance the tail pointer in txStream.
             */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d029      	beq.n	8010fca <prvReadSackOption+0x9a>
 8010f76:	697b      	ldr	r3, [r7, #20]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d026      	beq.n	8010fca <prvReadSackOption+0x9a>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
                ( void ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8010f82:	2300      	movs	r3, #0
 8010f84:	9300      	str	r3, [sp, #0]
 8010f86:	697b      	ldr	r3, [r7, #20]
 8010f88:	2200      	movs	r2, #0
 8010f8a:	2100      	movs	r1, #0
 8010f8c:	f7fe fed9 	bl	800fd42 <uxStreamBufferGet>
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	f043 0202 	orr.w	r2, r3, #2
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	601a      	str	r2, [r3, #0]

                #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                {
                    if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010fa0:	f003 0302 	and.w	r3, r3, #2
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d005      	beq.n	8010fb4 <prvReadSackOption+0x84>
                    {
                        /* The field 'xEventBits' is used to store regular socket events
                         * (at most 8), as well as 'select events', which will be left-shifted.
                         */
                        pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	601a      	str	r2, [r3, #0]

                /* In case the socket owner has installed an OnSent handler,
                 * call it now. */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                {
                    if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d005      	beq.n	8010fca <prvReadSackOption+0x9a>
                    {
                        pxSocket->u.xTCP.pxHandleSent( pxSocket, ulCount );
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8010fc4:	6979      	ldr	r1, [r7, #20]
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	4798      	blx	r3
                    }
                }
                #endif /* ipconfigUSE_CALLBACKS == 1  */
            }
        }
 8010fca:	bf00      	nop
 8010fcc:	3720      	adds	r7, #32
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}

08010fd2 <prvCheckRxData>:
 *
 * @return Length of the received buffer.
 */
    BaseType_t prvCheckRxData( const NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint8_t ** ppucRecvData )
    {
 8010fd2:	b590      	push	{r4, r7, lr}
 8010fd4:	b08f      	sub	sp, #60	@ 0x3c
 8010fd6:	af00      	add	r7, sp, #0
 8010fd8:	6078      	str	r0, [r7, #4]
 8010fda:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8010fe0:	6878      	ldr	r0, [r7, #4]
 8010fe2:	f7f7 ffa9 	bl	8008f38 <uxIPHeaderSizePacket>
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8010fea:	4423      	add	r3, r4
 8010fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8010fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
        int32_t lLength, lTCPHeaderLength, lReceiveLength, lUrgentLength;

        /* Map the buffer onto an IPHeader_t struct for easy access to fields. */

        const size_t xIPHeaderLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 8010ff2:	6878      	ldr	r0, [r7, #4]
 8010ff4:	f7f7 ffa0 	bl	8008f38 <uxIPHeaderSizePacket>
 8010ff8:	6278      	str	r0, [r7, #36]	@ 0x24
        uint16_t usLength;
        uint8_t ucIntermediateResult = 0;
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
         * node.
         *
         * The size of the TCP header is given in a multiple of 4-byte words (single
         * byte, needs no ntoh() translation).  A shift-right 2: is the same as
         * (offset >> 4) * 4. */
        ucIntermediateResult = ( pxTCPHeader->ucTCPOffset & tcpVALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2;
 8011000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011002:	7b1b      	ldrb	r3, [r3, #12]
 8011004:	089b      	lsrs	r3, r3, #2
 8011006:	b2db      	uxtb	r3, r3
 8011008:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 801100c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        lTCPHeaderLength = ( int32_t ) ucIntermediateResult;
 8011010:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011014:	61fb      	str	r3, [r7, #28]

        /* Let pucRecvData point to the first byte received. */
        *ppucRecvData = &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderLength + ( size_t ) lTCPHeaderLength ] );
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801101a:	69f9      	ldr	r1, [r7, #28]
 801101c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801101e:	440b      	add	r3, r1
 8011020:	330e      	adds	r3, #14
 8011022:	441a      	add	r2, r3
 8011024:	683b      	ldr	r3, [r7, #0]
 8011026:	601a      	str	r2, [r3, #0]

        /* Calculate lReceiveLength - the length of the TCP data received.  This is
         * equal to the total packet length minus:
         * ( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
        lReceiveLength = ( int32_t ) pxNetworkBuffer->xDataLength;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801102c:	633b      	str	r3, [r7, #48]	@ 0x30
        lReceiveLength -= ( int32_t ) ipSIZE_OF_ETH_HEADER;
 801102e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011030:	3b0e      	subs	r3, #14
 8011032:	633b      	str	r3, [r7, #48]	@ 0x30

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        switch( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer )->usFrameType )
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011038:	899b      	ldrh	r3, [r3, #12]
 801103a:	b29b      	uxth	r3, r3
 801103c:	2b08      	cmp	r3, #8
 801103e:	d004      	beq.n	801104a <prvCheckRxData+0x78>
 8011040:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8011044:	4293      	cmp	r3, r2
 8011046:	d015      	beq.n	8011074 <prvCheckRxData+0xa2>
 8011048:	e02c      	b.n	80110a4 <prvCheckRxData+0xd2>
                case ipIPv4_FRAME_TYPE:
                   {
                       /* MISRA Ref 11.3.1 [Misaligned access] */
                       /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                       /* coverity[misra_c_2012_rule_11_3_violation] */
                       const IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801104e:	330e      	adds	r3, #14
 8011050:	613b      	str	r3, [r7, #16]

                       usLength = FreeRTOS_htons( pxIPHeader->usLength );
 8011052:	693b      	ldr	r3, [r7, #16]
 8011054:	885b      	ldrh	r3, [r3, #2]
 8011056:	b29b      	uxth	r3, r3
 8011058:	021b      	lsls	r3, r3, #8
 801105a:	b21a      	sxth	r2, r3
 801105c:	693b      	ldr	r3, [r7, #16]
 801105e:	885b      	ldrh	r3, [r3, #2]
 8011060:	b29b      	uxth	r3, r3
 8011062:	0a1b      	lsrs	r3, r3, #8
 8011064:	b29b      	uxth	r3, r3
 8011066:	b21b      	sxth	r3, r3
 8011068:	4313      	orrs	r3, r2
 801106a:	b21b      	sxth	r3, r3
 801106c:	82fb      	strh	r3, [r7, #22]
                       lLength = ( int32_t ) usLength;
 801106e:	8afb      	ldrh	r3, [r7, #22]
 8011070:	637b      	str	r3, [r7, #52]	@ 0x34
                   }
                   break;
 8011072:	e01a      	b.n	80110aa <prvCheckRxData+0xd8>
                case ipIPv6_FRAME_TYPE:
                   {
                       /* MISRA Ref 11.3.1 [Misaligned access] */
                       /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                       /* coverity[misra_c_2012_rule_11_3_violation] */
                       const IPHeader_IPv6_t * pxIPHeader = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011078:	330e      	adds	r3, #14
 801107a:	61bb      	str	r3, [r7, #24]

                       /* For Coverity: conversion and cast in 2 steps. */
                       usLength = FreeRTOS_htons( pxIPHeader->usPayloadLength );
 801107c:	69bb      	ldr	r3, [r7, #24]
 801107e:	889b      	ldrh	r3, [r3, #4]
 8011080:	b29b      	uxth	r3, r3
 8011082:	021b      	lsls	r3, r3, #8
 8011084:	b21a      	sxth	r2, r3
 8011086:	69bb      	ldr	r3, [r7, #24]
 8011088:	889b      	ldrh	r3, [r3, #4]
 801108a:	b29b      	uxth	r3, r3
 801108c:	0a1b      	lsrs	r3, r3, #8
 801108e:	b29b      	uxth	r3, r3
 8011090:	b21b      	sxth	r3, r3
 8011092:	4313      	orrs	r3, r2
 8011094:	b21b      	sxth	r3, r3
 8011096:	82fb      	strh	r3, [r7, #22]
                       lLength = ( int32_t ) usLength;
 8011098:	8afb      	ldrh	r3, [r7, #22]
 801109a:	637b      	str	r3, [r7, #52]	@ 0x34
                       /* Add the length of the TCP-header, because that was not included in 'usPayloadLength'. */
                       lLength += ( int32_t ) sizeof( IPHeader_IPv6_t );
 801109c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801109e:	3328      	adds	r3, #40	@ 0x28
 80110a0:	637b      	str	r3, [r7, #52]	@ 0x34
                   }
                   break;
 80110a2:	e002      	b.n	80110aa <prvCheckRxData+0xd8>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                lLength = 0;
 80110a4:	2300      	movs	r3, #0
 80110a6:	637b      	str	r3, [r7, #52]	@ 0x34
                break;
 80110a8:	bf00      	nop
        }

        if( lReceiveLength > lLength )
 80110aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80110ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80110ae:	429a      	cmp	r2, r3
 80110b0:	dd01      	ble.n	80110b6 <prvCheckRxData+0xe4>
        {
            /* More bytes were received than the reported length, often because of
             * padding bytes at the end. */
            lReceiveLength = lLength;
 80110b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80110b4:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        /* Subtract the size of the TCP and IP headers and the actual data size is
         * known. */
        if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength ) )
 80110b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80110b8:	69fb      	ldr	r3, [r7, #28]
 80110ba:	4413      	add	r3, r2
 80110bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80110be:	429a      	cmp	r2, r3
 80110c0:	dd06      	ble.n	80110d0 <prvCheckRxData+0xfe>
        {
            lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength );
 80110c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80110c4:	69fb      	ldr	r3, [r7, #28]
 80110c6:	4413      	add	r3, r2
 80110c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80110ca:	1ad3      	subs	r3, r2, r3
 80110cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80110ce:	e001      	b.n	80110d4 <prvCheckRxData+0x102>
        }
        else
        {
            lReceiveLength = 0;
 80110d0:	2300      	movs	r3, #0
 80110d2:	633b      	str	r3, [r7, #48]	@ 0x30
         * This field communicates the current value of the urgent pointer as a
         * positive offset from the sequence number in this segment.  The urgent
         * pointer points to the sequence number of the octet following the urgent
         * data.  This field is only be interpreted in segments with the URG control
         * bit set. */
        if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_URG ) != 0U )
 80110d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110d6:	7b5b      	ldrb	r3, [r3, #13]
 80110d8:	f003 0320 	and.w	r3, r3, #32
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d01c      	beq.n	801111a <prvCheckRxData+0x148>
        {
            /* Although we ignore the urgent data, we have to skip it. */
            lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 80110e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110e2:	8a5b      	ldrh	r3, [r3, #18]
 80110e4:	b29b      	uxth	r3, r3
 80110e6:	021b      	lsls	r3, r3, #8
 80110e8:	b21a      	sxth	r2, r3
 80110ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110ec:	8a5b      	ldrh	r3, [r3, #18]
 80110ee:	b29b      	uxth	r3, r3
 80110f0:	0a1b      	lsrs	r3, r3, #8
 80110f2:	b29b      	uxth	r3, r3
 80110f4:	b21b      	sxth	r3, r3
 80110f6:	4313      	orrs	r3, r2
 80110f8:	b21b      	sxth	r3, r3
 80110fa:	b29b      	uxth	r3, r3
 80110fc:	60fb      	str	r3, [r7, #12]

            /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
            /* coverity[misra_c_2012_rule_18_4_violation] */
            *ppucRecvData += lUrgentLength;
 80110fe:	683b      	ldr	r3, [r7, #0]
 8011100:	681a      	ldr	r2, [r3, #0]
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	441a      	add	r2, r3
 8011106:	683b      	ldr	r3, [r7, #0]
 8011108:	601a      	str	r2, [r3, #0]
            lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 801110a:	68f9      	ldr	r1, [r7, #12]
 801110c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801110e:	f7f8 fc51 	bl	80099b4 <FreeRTOS_min_int32>
 8011112:	4602      	mov	r2, r0
 8011114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011116:	1a9b      	subs	r3, r3, r2
 8011118:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        return ( BaseType_t ) lReceiveLength;
 801111a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
 801111c:	4618      	mov	r0, r3
 801111e:	373c      	adds	r7, #60	@ 0x3c
 8011120:	46bd      	mov	sp, r7
 8011122:	bd90      	pop	{r4, r7, pc}

08011124 <prvStoreRxData>:
 */
    BaseType_t prvStoreRxData( FreeRTOS_Socket_t * pxSocket,
                               const uint8_t * pucRecvData,
                               NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint32_t ulReceiveLength )
    {
 8011124:	b580      	push	{r7, lr}
 8011126:	b092      	sub	sp, #72	@ 0x48
 8011128:	af02      	add	r7, sp, #8
 801112a:	60f8      	str	r0, [r7, #12]
 801112c:	60b9      	str	r1, [r7, #8]
 801112e:	607a      	str	r2, [r7, #4]
 8011130:	603b      	str	r3, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        size_t uxIPOffset = uxIPHeaderSizePacket( pxNetworkBuffer );
 8011132:	6878      	ldr	r0, [r7, #4]
 8011134:	f7f7 ff00 	bl	8008f38 <uxIPHeaderSizePacket>
 8011138:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPOffset ] ) );
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801113e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011140:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 8011142:	4413      	add	r3, r2
 8011144:	62bb      	str	r3, [r7, #40]	@ 0x28
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8011146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011148:	627b      	str	r3, [r7, #36]	@ 0x24
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011150:	623b      	str	r3, [r7, #32]
        uint32_t ulSequenceNumber, ulSpace;
        int32_t lOffset, lStored;
        BaseType_t xResult = 0;
 8011152:	2300      	movs	r3, #0
 8011154:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint32_t ulRxLength = ulReceiveLength;
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	637b      	str	r3, [r7, #52]	@ 0x34
        const uint8_t * pucRxBuffer = &( pucRecvData[ 0 ] );
 801115a:	68bb      	ldr	r3, [r7, #8]
 801115c:	633b      	str	r3, [r7, #48]	@ 0x30

        ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 801115e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011160:	685b      	ldr	r3, [r3, #4]
 8011162:	061a      	lsls	r2, r3, #24
 8011164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011166:	685b      	ldr	r3, [r3, #4]
 8011168:	021b      	lsls	r3, r3, #8
 801116a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801116e:	431a      	orrs	r2, r3
 8011170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011172:	685b      	ldr	r3, [r3, #4]
 8011174:	0a1b      	lsrs	r3, r3, #8
 8011176:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801117a:	431a      	orrs	r2, r3
 801117c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801117e:	685b      	ldr	r3, [r3, #4]
 8011180:	0e1b      	lsrs	r3, r3, #24
 8011182:	4313      	orrs	r3, r2
 8011184:	61fb      	str	r3, [r7, #28]

        if( ( ulRxLength > 0U ) && ( pxSocket->u.xTCP.eTCPState >= eSYN_RECEIVED ) )
 8011186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011188:	2b00      	cmp	r3, #0
 801118a:	d057      	beq.n	801123c <prvStoreRxData+0x118>
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011192:	2b03      	cmp	r3, #3
 8011194:	d952      	bls.n	801123c <prvStoreRxData+0x118>
        {
            uint32_t ulSkipCount = 0;
 8011196:	2300      	movs	r3, #0
 8011198:	613b      	str	r3, [r7, #16]
             *
             * If it can't be "accept"ed it may have to be stored and send a selective
             * ack (SACK) option to confirm it.  In that case, lTCPAddRxdata() will be
             * called later to store an out-of-order packet (in case lOffset is
             * negative). */
            if( pxSocket->u.xTCP.rxStream != NULL )
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d007      	beq.n	80111b4 <prvStoreRxData+0x90>
            {
                ulSpace = ( uint32_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.rxStream );
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80111aa:	4618      	mov	r0, r3
 80111ac:	f7fe fc89 	bl	800fac2 <uxStreamBufferGetSpace>
 80111b0:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80111b2:	e003      	b.n	80111bc <prvStoreRxData+0x98>
            }
            else
            {
                ulSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80111ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }

            lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulRxLength, ulSpace, &( ulSkipCount ) );
 80111bc:	f107 0310 	add.w	r3, r7, #16
 80111c0:	9300      	str	r3, [sp, #0]
 80111c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80111c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80111c6:	69f9      	ldr	r1, [r7, #28]
 80111c8:	6a38      	ldr	r0, [r7, #32]
 80111ca:	f003 fd45 	bl	8014c58 <lTCPWindowRxCheck>
 80111ce:	61b8      	str	r0, [r7, #24]

            if( lOffset >= 0 )
 80111d0:	69bb      	ldr	r3, [r7, #24]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	db20      	blt.n	8011218 <prvStoreRxData+0xf4>
            {
                /* New data has arrived and may be made available to the user.  See
                 * if the head marker in rxStream may be advanced, only if lOffset == 0.
                 * In case the low-water mark is reached, bLowWater will be set
                 * "low-water" here stands for "little space". */
                if( ulSkipCount != 0U )
 80111d6:	693b      	ldr	r3, [r7, #16]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d007      	beq.n	80111ec <prvStoreRxData+0xc8>
                {
                    /* A packet was received that starts before 'ulCurrentSequenceNumber',
                     * and that ends after it.  The first 'ulSkipCount' bytes shall be
                     * skipped. */
                    ulRxLength -= ulSkipCount;
 80111dc:	693b      	ldr	r3, [r7, #16]
 80111de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80111e0:	1ad3      	subs	r3, r2, r3
 80111e2:	637b      	str	r3, [r7, #52]	@ 0x34
                    pucRxBuffer = &( pucRecvData[ ulSkipCount ] );
 80111e4:	693b      	ldr	r3, [r7, #16]
 80111e6:	68ba      	ldr	r2, [r7, #8]
 80111e8:	4413      	add	r3, r2
 80111ea:	633b      	str	r3, [r7, #48]	@ 0x30
                }

                lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRxBuffer, ulRxLength );
 80111ec:	69b9      	ldr	r1, [r7, #24]
 80111ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80111f2:	68f8      	ldr	r0, [r7, #12]
 80111f4:	f7fe f8d2 	bl	800f39c <lTCPAddRxdata>
 80111f8:	6178      	str	r0, [r7, #20]

                if( lStored != ( int32_t ) ulRxLength )
 80111fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111fc:	697a      	ldr	r2, [r7, #20]
 80111fe:	429a      	cmp	r2, r3
 8011200:	d00a      	beq.n	8011218 <prvStoreRxData+0xf4>
                {
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %d / %u bytes? ?\n", ( int ) lStored, ( unsigned ) ulRxLength ) );
 8011202:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011204:	6979      	ldr	r1, [r7, #20]
 8011206:	4813      	ldr	r0, [pc, #76]	@ (8011254 <prvStoreRxData+0x130>)
 8011208:	f00f f990 	bl	802052c <lUDPLoggingPrintf>

                    /* Received data could not be stored.  The socket's flag
                     * bMallocError has been set.  The socket now has the status
                     * eCLOSE_WAIT and a RST packet will be sent back. */
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 801120c:	6878      	ldr	r0, [r7, #4]
 801120e:	f002 f8b3 	bl	8013378 <prvTCPSendReset>
                    xResult = -1;
 8011212:	f04f 33ff 	mov.w	r3, #4294967295
 8011216:	63bb      	str	r3, [r7, #56]	@ 0x38
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                /* Now lTCPAddRxdata() will move the rxHead pointer forward
                 * so data becomes available to the user immediately
                 * In case the low-water mark is reached, bLowWater will be set. */
                if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0U ) )
 8011218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801121a:	2b00      	cmp	r3, #0
 801121c:	d113      	bne.n	8011246 <prvStoreRxData+0x122>
 801121e:	6a3b      	ldr	r3, [r7, #32]
 8011220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011222:	2b00      	cmp	r3, #0
 8011224:	d00f      	beq.n	8011246 <prvStoreRxData+0x122>
                {
                    ( void ) lTCPAddRxdata( pxSocket, 0U, NULL, pxTCPWindow->ulUserDataLength );
 8011226:	6a3b      	ldr	r3, [r7, #32]
 8011228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801122a:	2200      	movs	r2, #0
 801122c:	2100      	movs	r1, #0
 801122e:	68f8      	ldr	r0, [r7, #12]
 8011230:	f7fe f8b4 	bl	800f39c <lTCPAddRxdata>
                    pxTCPWindow->ulUserDataLength = 0;
 8011234:	6a3b      	ldr	r3, [r7, #32]
 8011236:	2200      	movs	r2, #0
 8011238:	631a      	str	r2, [r3, #48]	@ 0x30
        {
 801123a:	e004      	b.n	8011246 <prvStoreRxData+0x122>
            }
            #endif /* ipconfigUSE_TCP_WIN */
        }
        else
        {
            pxTCPWindow->ucOptionLength = 0U;
 801123c:	6a3b      	ldr	r3, [r7, #32]
 801123e:	2200      	movs	r2, #0
 8011240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8011244:	e000      	b.n	8011248 <prvStoreRxData+0x124>
        {
 8011246:	bf00      	nop
        }

        return xResult;
 8011248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    }
 801124a:	4618      	mov	r0, r3
 801124c:	3740      	adds	r7, #64	@ 0x40
 801124e:	46bd      	mov	sp, r7
 8011250:	bd80      	pop	{r7, pc}
 8011252:	bf00      	nop
 8011254:	08024750 	.word	0x08024750

08011258 <prvTCPSocketIsActive>:
 *
 * @return pdTRUE if the socket must be checked. Non-active sockets
 *         are waiting for user action, either connect() or close().
 */
    BaseType_t prvTCPSocketIsActive( eIPTCPState_t eStatus )
    {
 8011258:	b480      	push	{r7}
 801125a:	b085      	sub	sp, #20
 801125c:	af00      	add	r7, sp, #0
 801125e:	4603      	mov	r3, r0
 8011260:	71fb      	strb	r3, [r7, #7]
        BaseType_t xResult;

        switch( eStatus )
 8011262:	79fb      	ldrb	r3, [r7, #7]
 8011264:	2b0b      	cmp	r3, #11
 8011266:	bf8c      	ite	hi
 8011268:	2201      	movhi	r2, #1
 801126a:	2200      	movls	r2, #0
 801126c:	b2d2      	uxtb	r2, r2
 801126e:	2a00      	cmp	r2, #0
 8011270:	d10f      	bne.n	8011292 <prvTCPSocketIsActive+0x3a>
 8011272:	f640 3281 	movw	r2, #2945	@ 0xb81
 8011276:	fa22 f303 	lsr.w	r3, r2, r3
 801127a:	f003 0301 	and.w	r3, r3, #1
 801127e:	2b00      	cmp	r3, #0
 8011280:	bf14      	ite	ne
 8011282:	2301      	movne	r3, #1
 8011284:	2300      	moveq	r3, #0
 8011286:	b2db      	uxtb	r3, r3
 8011288:	2b00      	cmp	r3, #0
 801128a:	d002      	beq.n	8011292 <prvTCPSocketIsActive+0x3a>
            case eCLOSED:
            case eCLOSE_WAIT:
            case eFIN_WAIT_2:
            case eCLOSING:
            case eTIME_WAIT:
                xResult = pdFALSE;
 801128c:	2300      	movs	r3, #0
 801128e:	60fb      	str	r3, [r7, #12]
                break;
 8011290:	e002      	b.n	8011298 <prvTCPSocketIsActive+0x40>
            case eSYN_RECEIVED:
            case eESTABLISHED:
            case eFIN_WAIT_1:
            case eLAST_ACK:
            default:
                xResult = pdTRUE;
 8011292:	2301      	movs	r3, #1
 8011294:	60fb      	str	r3, [r7, #12]
                break;
 8011296:	bf00      	nop
        }

        return xResult;
 8011298:	68fb      	ldr	r3, [r7, #12]
    }
 801129a:	4618      	mov	r0, r3
 801129c:	3714      	adds	r7, #20
 801129e:	46bd      	mov	sp, r7
 80112a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a4:	4770      	bx	lr
	...

080112a8 <prvTCPStatusAgeCheck>:
 * @return pdFALSE if no checks are needed, pdTRUE if checks were done, or negative
 *         in case the socket has reached a critical time-out. The socket will go to
 *         the eCLOSE_WAIT state.
 */
        BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t * pxSocket )
        {
 80112a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112aa:	b089      	sub	sp, #36	@ 0x24
 80112ac:	af02      	add	r7, sp, #8
 80112ae:	6078      	str	r0, [r7, #4]
            BaseType_t xResult;

            eIPTCPState_t eState = pxSocket->u.xTCP.eTCPState;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80112b6:	74fb      	strb	r3, [r7, #19]

            switch( eState )
 80112b8:	7cfb      	ldrb	r3, [r7, #19]
 80112ba:	2b08      	cmp	r3, #8
 80112bc:	d00b      	beq.n	80112d6 <prvTCPStatusAgeCheck+0x2e>
 80112be:	2b08      	cmp	r3, #8
 80112c0:	dc0c      	bgt.n	80112dc <prvTCPStatusAgeCheck+0x34>
 80112c2:	2b01      	cmp	r3, #1
 80112c4:	dc02      	bgt.n	80112cc <prvTCPStatusAgeCheck+0x24>
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	da05      	bge.n	80112d6 <prvTCPStatusAgeCheck+0x2e>
 80112ca:	e007      	b.n	80112dc <prvTCPStatusAgeCheck+0x34>
 80112cc:	2b05      	cmp	r3, #5
 80112ce:	d105      	bne.n	80112dc <prvTCPStatusAgeCheck+0x34>
            {
                case eESTABLISHED:

                    /* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
                     *  state ESTABLISHED can be protected using keep-alive messages. */
                    xResult = pdFALSE;
 80112d0:	2300      	movs	r3, #0
 80112d2:	617b      	str	r3, [r7, #20]
                    break;
 80112d4:	e005      	b.n	80112e2 <prvTCPStatusAgeCheck+0x3a>

                case eCLOSED:
                case eTCP_LISTEN:
                case eCLOSE_WAIT:
                    /* These 3 states may last for ever, up to the owner. */
                    xResult = pdFALSE;
 80112d6:	2300      	movs	r3, #0
 80112d8:	617b      	str	r3, [r7, #20]
                    break;
 80112da:	e002      	b.n	80112e2 <prvTCPStatusAgeCheck+0x3a>
                case eTIME_WAIT:
                default:

                    /* All other (non-connected) states will get anti-hanging
                     * protection. */
                    xResult = pdTRUE;
 80112dc:	2301      	movs	r3, #1
 80112de:	617b      	str	r3, [r7, #20]
                    break;
 80112e0:	bf00      	nop
            }

            if( xResult != pdFALSE )
 80112e2:	697b      	ldr	r3, [r7, #20]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d032      	beq.n	801134e <prvTCPStatusAgeCheck+0xa6>
            {
                /* How much time has past since the last active moment which is
                 * defined as A) a state change or B) a packet has arrived. */
                TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastActTime;
 80112e8:	f7f2 fa90 	bl	800380c <xTaskGetTickCount>
 80112ec:	4602      	mov	r2, r0
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80112f4:	1ad3      	subs	r3, r2, r3
 80112f6:	60fb      	str	r3, [r7, #12]

                /* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
                if( xAge > ( ( TickType_t ) ipconfigTCP_HANG_PROTECTION_TIME * ( TickType_t ) configTICK_RATE_HZ ) )
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	f247 5230 	movw	r2, #30000	@ 0x7530
 80112fe:	4293      	cmp	r3, r2
 8011300:	d925      	bls.n	801134e <prvTCPStatusAgeCheck+0xa6>
                {
                    #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                    {
                        FreeRTOS_debug_printf( ( "Inactive socket closed: port %u rem %xip:%u status %s\n",
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011306:	461d      	mov	r5, r3
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011312:	461e      	mov	r6, r3
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801131a:	4618      	mov	r0, r3
 801131c:	f000 fdca 	bl	8011eb4 <FreeRTOS_GetTCPStateName>
 8011320:	4603      	mov	r3, r0
 8011322:	9300      	str	r3, [sp, #0]
 8011324:	4633      	mov	r3, r6
 8011326:	4622      	mov	r2, r4
 8011328:	4629      	mov	r1, r5
 801132a:	480b      	ldr	r0, [pc, #44]	@ (8011358 <prvTCPStatusAgeCheck+0xb0>)
 801132c:	f00f f8fe 	bl	802052c <lUDPLoggingPrintf>
                                                 FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.eTCPState ) ) );
                    }
                    #endif /* ipconfigHAS_DEBUG_PRINTF */

                    /* Move to eCLOSE_WAIT, user may close the socket. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8011330:	2108      	movs	r1, #8
 8011332:	6878      	ldr	r0, [r7, #4]
 8011334:	f7fe feac 	bl	8010090 <vTCPStateChange>

                    /* When 'bPassQueued' true, this socket is an orphan until it
                     * gets connected. */
                    if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801133e:	f003 0304 	and.w	r3, r3, #4
 8011342:	b2db      	uxtb	r3, r3
 8011344:	2b00      	cmp	r3, #0
 8011346:	d002      	beq.n	801134e <prvTCPStatusAgeCheck+0xa6>
                    {
                        /* vTCPStateChange() has called vSocketCloseNextTime()
                         * in case the socket is not yet owned by the application.
                         * Return a negative value to inform the caller that
                         * the socket will be closed in the next cycle. */
                        xResult = -1;
 8011348:	f04f 33ff 	mov.w	r3, #4294967295
 801134c:	617b      	str	r3, [r7, #20]
                    }
                }
            }

            return xResult;
 801134e:	697b      	ldr	r3, [r7, #20]
        }
 8011350:	4618      	mov	r0, r3
 8011352:	371c      	adds	r7, #28
 8011354:	46bd      	mov	sp, r7
 8011356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011358:	08024778 	.word	0x08024778

0801135c <prvTCPHandleFin>:
 *
 * @return Length of the packet to be sent.
 */
    static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t * pxSocket,
                                       const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 801135c:	b5b0      	push	{r4, r5, r7, lr}
 801135e:	b08a      	sub	sp, #40	@ 0x28
 8011360:	af02      	add	r7, sp, #8
 8011362:	6078      	str	r0, [r7, #4]
 8011364:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8011366:	683b      	ldr	r3, [r7, #0]
 8011368:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801136a:	6838      	ldr	r0, [r7, #0]
 801136c:	f7f7 fde4 	bl	8008f38 <uxIPHeaderSizePacket>
 8011370:	4603      	mov	r3, r0
 8011372:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8011374:	4423      	add	r3, r4
 8011376:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8011378:	69bb      	ldr	r3, [r7, #24]
 801137a:	617b      	str	r3, [r7, #20]
        uint8_t ucIntermediateResult = 0, ucTCPFlags = pxTCPHeader->ucTCPFlags;
 801137c:	2300      	movs	r3, #0
 801137e:	74fb      	strb	r3, [r7, #19]
 8011380:	697b      	ldr	r3, [r7, #20]
 8011382:	7b5b      	ldrb	r3, [r3, #13]
 8011384:	74bb      	strb	r3, [r7, #18]
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 801138c:	60fb      	str	r3, [r7, #12]
        BaseType_t xSendLength = 0;
 801138e:	2300      	movs	r3, #0
 8011390:	61fb      	str	r3, [r7, #28]
        uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 8011392:	697b      	ldr	r3, [r7, #20]
 8011394:	689b      	ldr	r3, [r3, #8]
 8011396:	061a      	lsls	r2, r3, #24
 8011398:	697b      	ldr	r3, [r7, #20]
 801139a:	689b      	ldr	r3, [r3, #8]
 801139c:	021b      	lsls	r3, r3, #8
 801139e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80113a2:	431a      	orrs	r2, r3
 80113a4:	697b      	ldr	r3, [r7, #20]
 80113a6:	689b      	ldr	r3, [r3, #8]
 80113a8:	0a1b      	lsrs	r3, r3, #8
 80113aa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80113ae:	431a      	orrs	r2, r3
 80113b0:	697b      	ldr	r3, [r7, #20]
 80113b2:	689b      	ldr	r3, [r3, #8]
 80113b4:	0e1b      	lsrs	r3, r3, #24
 80113b6:	4313      	orrs	r3, r2
 80113b8:	60bb      	str	r3, [r7, #8]

        if( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U )
 80113ba:	7cbb      	ldrb	r3, [r7, #18]
 80113bc:	f003 0301 	and.w	r3, r3, #1
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d004      	beq.n	80113ce <prvTCPHandleFin+0x72>
        {
            pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1U;
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	695b      	ldr	r3, [r3, #20]
 80113c8:	1c5a      	adds	r2, r3, #1
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	611a      	str	r2, [r3, #16]
        }

        if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80113d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80113d8:	b2db      	uxtb	r3, r3
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d10b      	bne.n	80113f6 <prvTCPHandleFin+0x9a>
        {
            /* We haven't yet replied with a FIN, do so now. */
            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	6a1a      	ldr	r2, [r3, #32]
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 80113e6:	687a      	ldr	r2, [r7, #4]
 80113e8:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80113ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80113f0:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 80113f4:	e00c      	b.n	8011410 <prvTCPHandleFin+0xb4>
        }
        else
        {
            /* We did send a FIN already, see if it's ACK'd. */
            if( ulAckNr == ( pxTCPWindow->tx.ulFINSequenceNumber + 1U ) )
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113fa:	3301      	adds	r3, #1
 80113fc:	68ba      	ldr	r2, [r7, #8]
 80113fe:	429a      	cmp	r2, r3
 8011400:	d106      	bne.n	8011410 <prvTCPHandleFin+0xb4>
            {
                pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 8011402:	687a      	ldr	r2, [r7, #4]
 8011404:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8011408:	f043 0301 	orr.w	r3, r3, #1
 801140c:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            }
        }

        if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8011416:	f003 0301 	and.w	r3, r3, #1
 801141a:	b2db      	uxtb	r3, r3
 801141c:	2b00      	cmp	r3, #0
 801141e:	d10b      	bne.n	8011438 <prvTCPHandleFin+0xdc>
        {
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	621a      	str	r2, [r3, #32]
            pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_FIN;
 8011428:	697b      	ldr	r3, [r7, #20]
 801142a:	2211      	movs	r2, #17
 801142c:	735a      	strb	r2, [r3, #13]

            /* And wait for the final ACK. */
            vTCPStateChange( pxSocket, eLAST_ACK );
 801142e:	210a      	movs	r1, #10
 8011430:	6878      	ldr	r0, [r7, #4]
 8011432:	f7fe fe2d 	bl	8010090 <vTCPStateChange>
 8011436:	e023      	b.n	8011480 <prvTCPHandleFin+0x124>
        }
        else
        {
            /* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1U;
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801143c:	1c5a      	adds	r2, r3, #1
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	621a      	str	r2, [r3, #32]

            if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8011448:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801144c:	b2db      	uxtb	r3, r3
 801144e:	2b00      	cmp	r3, #0
 8011450:	d103      	bne.n	801145a <prvTCPHandleFin+0xfe>
            {
                /* We have sent out a FIN but the peer hasn't replied with a FIN
                 * yet. Do nothing for the moment. */
                pxTCPHeader->ucTCPFlags = 0U;
 8011452:	697b      	ldr	r3, [r7, #20]
 8011454:	2200      	movs	r2, #0
 8011456:	735a      	strb	r2, [r3, #13]
 8011458:	e012      	b.n	8011480 <prvTCPHandleFin+0x124>
            }
            else
            {
                if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8011460:	f003 0302 	and.w	r3, r3, #2
 8011464:	b2db      	uxtb	r3, r3
 8011466:	2b00      	cmp	r3, #0
 8011468:	d103      	bne.n	8011472 <prvTCPHandleFin+0x116>
                {
                    /* This is the third of the three-way hand shake: the last
                     * ACK. */
                    pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 801146a:	697b      	ldr	r3, [r7, #20]
 801146c:	2210      	movs	r2, #16
 801146e:	735a      	strb	r2, [r3, #13]
 8011470:	e002      	b.n	8011478 <prvTCPHandleFin+0x11c>
                }
                else
                {
                    /* The other party started the closure, so we just wait for the
                     * last ACK. */
                    pxTCPHeader->ucTCPFlags = 0U;
 8011472:	697b      	ldr	r3, [r7, #20]
 8011474:	2200      	movs	r2, #0
 8011476:	735a      	strb	r2, [r3, #13]
                }

                /* And wait for the user to close this socket. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8011478:	2108      	movs	r1, #8
 801147a:	6878      	ldr	r0, [r7, #4]
 801147c:	f7fe fe08 	bl	8010090 <vTCPStateChange>
            }
        }

        pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	6a1a      	ldr	r2, [r3, #32]
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	62da      	str	r2, [r3, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPFlags != 0U )
 8011488:	697b      	ldr	r3, [r7, #20]
 801148a:	7b5b      	ldrb	r3, [r3, #13]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d00d      	beq.n	80114ac <prvTCPHandleFin+0x150>
        {
            ucIntermediateResult = ( uint8_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength );
 8011490:	6878      	ldr	r0, [r7, #4]
 8011492:	f7f7 fd6b 	bl	8008f6c <uxIPHeaderSizeSocket>
 8011496:	4603      	mov	r3, r0
 8011498:	b2da      	uxtb	r2, r3
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80114a0:	4413      	add	r3, r2
 80114a2:	b2db      	uxtb	r3, r3
 80114a4:	3314      	adds	r3, #20
 80114a6:	74fb      	strb	r3, [r7, #19]
            xSendLength = ( BaseType_t ) ucIntermediateResult;
 80114a8:	7cfb      	ldrb	r3, [r7, #19]
 80114aa:	61fb      	str	r3, [r7, #28]
        }

        pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80114b2:	3314      	adds	r3, #20
 80114b4:	b2db      	uxtb	r3, r3
 80114b6:	009b      	lsls	r3, r3, #2
 80114b8:	b2da      	uxtb	r2, r3
 80114ba:	697b      	ldr	r3, [r7, #20]
 80114bc:	731a      	strb	r2, [r3, #12]

        if( xTCPWindowLoggingLevel != 0 )
 80114be:	4b14      	ldr	r3, [pc, #80]	@ (8011510 <prvTCPHandleFin+0x1b4>)
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d01f      	beq.n	8011506 <prvTCPHandleFin+0x1aa>
        {
            FreeRTOS_debug_printf( ( "TCP: send FIN+ACK (ack %u, cur/nxt %u/%u) ourSeqNr %u | Rx %u\n",
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	69db      	ldr	r3, [r3, #28]
 80114ca:	68ba      	ldr	r2, [r7, #8]
 80114cc:	1ad0      	subs	r0, r2, r3
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	6a1a      	ldr	r2, [r3, #32]
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	69db      	ldr	r3, [r3, #28]
 80114d6:	1ad4      	subs	r4, r2, r3
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	69db      	ldr	r3, [r3, #28]
 80114e0:	1ad5      	subs	r5, r2, r3
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	69db      	ldr	r3, [r3, #28]
 80114ea:	1ad3      	subs	r3, r2, r3
 80114ec:	68fa      	ldr	r2, [r7, #12]
 80114ee:	6911      	ldr	r1, [r2, #16]
 80114f0:	68fa      	ldr	r2, [r7, #12]
 80114f2:	68d2      	ldr	r2, [r2, #12]
 80114f4:	1a8a      	subs	r2, r1, r2
 80114f6:	9201      	str	r2, [sp, #4]
 80114f8:	9300      	str	r3, [sp, #0]
 80114fa:	462b      	mov	r3, r5
 80114fc:	4622      	mov	r2, r4
 80114fe:	4601      	mov	r1, r0
 8011500:	4804      	ldr	r0, [pc, #16]	@ (8011514 <prvTCPHandleFin+0x1b8>)
 8011502:	f00f f813 	bl	802052c <lUDPLoggingPrintf>
                                     ( unsigned ) ( pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );
        }

        return xSendLength;
 8011506:	69fb      	ldr	r3, [r7, #28]
    }
 8011508:	4618      	mov	r0, r3
 801150a:	3720      	adds	r7, #32
 801150c:	46bd      	mov	sp, r7
 801150e:	bdb0      	pop	{r4, r5, r7, pc}
 8011510:	200012f4 	.word	0x200012f4
 8011514:	080247b0 	.word	0x080247b0

08011518 <prvHandleSynReceived>:
 */
    static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t * pxSocket,
                                            const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 8011518:	b590      	push	{r4, r7, lr}
 801151a:	b09b      	sub	sp, #108	@ 0x6c
 801151c:	af02      	add	r7, sp, #8
 801151e:	60f8      	str	r0, [r7, #12]
 8011520:	60b9      	str	r1, [r7, #8]
 8011522:	607a      	str	r2, [r7, #4]
 8011524:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8011526:	68bb      	ldr	r3, [r7, #8]
 8011528:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801152a:	68f8      	ldr	r0, [r7, #12]
 801152c:	f7f7 fd1e 	bl	8008f6c <uxIPHeaderSizeSocket>
 8011530:	4603      	mov	r3, r0
 8011532:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8011534:	4423      	add	r3, r4
 8011536:	657b      	str	r3, [r7, #84]	@ 0x54
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8011538:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801153a:	653b      	str	r3, [r7, #80]	@ 0x50
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011542:	64fb      	str	r3, [r7, #76]	@ 0x4c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8011544:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011546:	7b5b      	ldrb	r3, [r3, #13]
 8011548:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 801154c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801154e:	685b      	ldr	r3, [r3, #4]
 8011550:	061a      	lsls	r2, r3, #24
 8011552:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011554:	685b      	ldr	r3, [r3, #4]
 8011556:	021b      	lsls	r3, r3, #8
 8011558:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801155c:	431a      	orrs	r2, r3
 801155e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011560:	685b      	ldr	r3, [r3, #4]
 8011562:	0a1b      	lsrs	r3, r3, #8
 8011564:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011568:	431a      	orrs	r2, r3
 801156a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801156c:	685b      	ldr	r3, [r3, #4]
 801156e:	0e1b      	lsrs	r3, r3, #24
 8011570:	4313      	orrs	r3, r2
 8011572:	647b      	str	r3, [r7, #68]	@ 0x44
        BaseType_t xSendLength = 0;
 8011574:	2300      	movs	r3, #0
 8011576:	65fb      	str	r3, [r7, #92]	@ 0x5c
        UBaseType_t uxIntermediateResult = 0U;
 8011578:	2300      	movs	r3, #0
 801157a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* Either expect a ACK or a SYN+ACK. */
        uint8_t ucExpect = tcpTCP_FLAG_ACK;
 801157c:	2310      	movs	r3, #16
 801157e:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        const uint8_t ucFlagsMask = tcpTCP_FLAG_ACK | tcpTCP_FLAG_RST | tcpTCP_FLAG_SYN | tcpTCP_FLAG_FIN;
 8011582:	2317      	movs	r3, #23
 8011584:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801158e:	2b02      	cmp	r3, #2
 8011590:	d105      	bne.n	801159e <prvHandleSynReceived+0x86>
        {
            ucExpect |= tcpTCP_FLAG_SYN;
 8011592:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8011596:	f043 0302 	orr.w	r3, r3, #2
 801159a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        }

        if( ( ucTCPFlags & ucFlagsMask ) != ucExpect )
 801159e:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 80115a2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80115a6:	4013      	ands	r3, r2
 80115a8:	b2db      	uxtb	r3, r3
 80115aa:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80115ae:	429a      	cmp	r2, r3
 80115b0:	d044      	beq.n	801163c <prvHandleSynReceived+0x124>
        {
            /* eSYN_RECEIVED: flags 0010 expected, not 0002. */
            /* eSYN_RECEIVED: flags ACK  expected, not SYN. */
            FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X\n",
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80115b8:	2b04      	cmp	r3, #4
 80115ba:	d101      	bne.n	80115c0 <prvHandleSynReceived+0xa8>
 80115bc:	4977      	ldr	r1, [pc, #476]	@ (801179c <prvHandleSynReceived+0x284>)
 80115be:	e000      	b.n	80115c2 <prvHandleSynReceived+0xaa>
 80115c0:	4977      	ldr	r1, [pc, #476]	@ (80117a0 <prvHandleSynReceived+0x288>)
 80115c2:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80115c6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80115ca:	4876      	ldr	r0, [pc, #472]	@ (80117a4 <prvHandleSynReceived+0x28c>)
 80115cc:	f00e ffae 	bl	802052c <lUDPLoggingPrintf>
                                     ( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eSYN_RECEIVED ) ? "eSYN_RECEIVED" : "eCONNECT_SYN",
                                     ucExpect, ucTCPFlags ) );

            /* In case pxSocket is not yet owned by the application, a closure
             * of the socket will be scheduled for the next cycle. */
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 80115d0:	2108      	movs	r1, #8
 80115d2:	68f8      	ldr	r0, [r7, #12]
 80115d4:	f7fe fd5c 	bl	8010090 <vTCPStateChange>

            /* Send RST with the expected sequence and ACK numbers,
             * otherwise the packet will be ignored. */
            pxTCPWindow->ulOurSequenceNumber = FreeRTOS_htonl( pxTCPHeader->ulAckNr );
 80115d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80115da:	689b      	ldr	r3, [r3, #8]
 80115dc:	061a      	lsls	r2, r3, #24
 80115de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80115e0:	689b      	ldr	r3, [r3, #8]
 80115e2:	021b      	lsls	r3, r3, #8
 80115e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80115e8:	431a      	orrs	r2, r3
 80115ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80115ec:	689b      	ldr	r3, [r3, #8]
 80115ee:	0a1b      	lsrs	r3, r3, #8
 80115f0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80115f4:	431a      	orrs	r2, r3
 80115f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80115f8:	689b      	ldr	r3, [r3, #8]
 80115fa:	0e1b      	lsrs	r3, r3, #24
 80115fc:	431a      	orrs	r2, r3
 80115fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011600:	62da      	str	r2, [r3, #44]	@ 0x2c
            pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 8011602:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011604:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011606:	611a      	str	r2, [r3, #16]

            pxTCPHeader->ucTCPFlags |= tcpTCP_FLAG_RST;
 8011608:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801160a:	7b5b      	ldrb	r3, [r3, #13]
 801160c:	f043 0304 	orr.w	r3, r3, #4
 8011610:	b2da      	uxtb	r2, r3
 8011612:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011614:	735a      	strb	r2, [r3, #13]

            uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8011616:	68f8      	ldr	r0, [r7, #12]
 8011618:	f7f7 fca8 	bl	8008f6c <uxIPHeaderSizeSocket>
 801161c:	4602      	mov	r2, r0
 801161e:	683b      	ldr	r3, [r7, #0]
 8011620:	4413      	add	r3, r2
 8011622:	3314      	adds	r3, #20
 8011624:	643b      	str	r3, [r7, #64]	@ 0x40
            xSendLength = ( BaseType_t ) uxIntermediateResult;
 8011626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011628:	65fb      	str	r3, [r7, #92]	@ 0x5c

            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 801162a:	683b      	ldr	r3, [r7, #0]
 801162c:	b2db      	uxtb	r3, r3
 801162e:	3314      	adds	r3, #20
 8011630:	b2db      	uxtb	r3, r3
 8011632:	009b      	lsls	r3, r3, #2
 8011634:	b2da      	uxtb	r2, r3
 8011636:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011638:	731a      	strb	r2, [r3, #12]
 801163a:	e0aa      	b.n	8011792 <prvHandleSynReceived+0x27a>
        }
        else
        {
            pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8011642:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011644:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
            pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 801164c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801164e:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8

            if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011658:	2b02      	cmp	r3, #2
 801165a:	d12e      	bne.n	80116ba <prvHandleSynReceived+0x1a2>

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
                                                      &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 801165c:	68f8      	ldr	r0, [r7, #12]
 801165e:	f7f7 fc85 	bl	8008f6c <uxIPHeaderSizeSocket>
 8011662:	4603      	mov	r3, r0
 8011664:	330e      	adds	r3, #14
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
 8011666:	33a0      	adds	r3, #160	@ 0xa0
 8011668:	68fa      	ldr	r2, [r7, #12]
 801166a:	4413      	add	r3, r2
 801166c:	330a      	adds	r3, #10
 801166e:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Clear the SYN flag in lastPacket. */
                pxLastHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 8011670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011672:	2210      	movs	r2, #16
 8011674:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 8011676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011678:	2210      	movs	r2, #16
 801167a:	735a      	strb	r2, [r3, #13]

                /* This socket was the one connecting actively so now perform the
                 * synchronisation. */
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
                                ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 801168e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011690:	f003 f8ec 	bl	801486c <vTCPWindowInit>
                pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 8011694:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011696:	1c5a      	adds	r2, r3, #1
 8011698:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801169a:	619a      	str	r2, [r3, #24]
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 801169c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801169e:	1c5a      	adds	r2, r3, #1
 80116a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116a2:	611a      	str	r2, [r3, #16]
                pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 80116a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116a6:	6a1b      	ldr	r3, [r3, #32]
 80116a8:	1c5a      	adds	r2, r3, #1
 80116aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116ac:	621a      	str	r2, [r3, #32]
                pxTCPWindow->ulNextTxSequenceNumber++;
 80116ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80116b2:	1c5a      	adds	r2, r3, #1
 80116b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80116b8:	e005      	b.n	80116c6 <prvHandleSynReceived+0x1ae>
            }
            else if( ulReceiveLength == 0U )
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d102      	bne.n	80116c6 <prvHandleSynReceived+0x1ae>
            {
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 80116c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80116c4:	611a      	str	r2, [r3, #16]
                /* Nothing. */
            }

            /* The SYN+ACK has been confirmed, increase the next sequence number by
             * 1. */
            pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 80116c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116c8:	69db      	ldr	r3, [r3, #28]
 80116ca:	1c5a      	adds	r2, r3, #1
 80116cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116ce:	62da      	str	r2, [r3, #44]	@ 0x2c

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                char pcBuffer[ 40 ]; /* Space to print an IP-address. */
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	7a1b      	ldrb	r3, [r3, #8]
 80116d4:	f003 0301 	and.w	r3, r3, #1
 80116d8:	b2db      	uxtb	r3, r3
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d001      	beq.n	80116e2 <prvHandleSynReceived+0x1ca>
 80116de:	200a      	movs	r0, #10
 80116e0:	e000      	b.n	80116e4 <prvHandleSynReceived+0x1cc>
 80116e2:	2002      	movs	r0, #2
                                             ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	f103 0154 	add.w	r1, r3, #84	@ 0x54
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 80116ea:	f107 0210 	add.w	r2, r7, #16
 80116ee:	2328      	movs	r3, #40	@ 0x28
 80116f0:	f7fc fec0 	bl	800e474 <FreeRTOS_inet_ntop>
                                             pcBuffer,
                                             sizeof( pcBuffer ) );
                FreeRTOS_debug_printf( ( "TCP: %s %u => %s port %u set ESTAB (scaling %u)\n",
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80116fa:	2b02      	cmp	r3, #2
 80116fc:	d101      	bne.n	8011702 <prvHandleSynReceived+0x1ea>
 80116fe:	492a      	ldr	r1, [pc, #168]	@ (80117a8 <prvHandleSynReceived+0x290>)
 8011700:	e000      	b.n	8011704 <prvHandleSynReceived+0x1ec>
 8011702:	492a      	ldr	r1, [pc, #168]	@ (80117ac <prvHandleSynReceived+0x294>)
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011708:	461c      	mov	r4, r3
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011710:	461a      	mov	r2, r3
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8011718:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801171c:	b2db      	uxtb	r3, r3
 801171e:	4618      	mov	r0, r3
 8011720:	f107 0310 	add.w	r3, r7, #16
 8011724:	9001      	str	r0, [sp, #4]
 8011726:	9200      	str	r2, [sp, #0]
 8011728:	4622      	mov	r2, r4
 801172a:	4821      	ldr	r0, [pc, #132]	@ (80117b0 <prvHandleSynReceived+0x298>)
 801172c:	f00e fefe 	bl	802052c <lUDPLoggingPrintf>
                                         pxSocket->u.xTCP.usRemotePort,
                                         ( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
            }
            #endif /* ipconfigUSE_TCP_WIN */

            if( ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) || ( ulReceiveLength != 0U ) )
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011736:	2b02      	cmp	r3, #2
 8011738:	d002      	beq.n	8011740 <prvHandleSynReceived+0x228>
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d014      	beq.n	801176a <prvHandleSynReceived+0x252>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8011740:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011742:	2210      	movs	r2, #16
 8011744:	735a      	strb	r2, [r3, #13]

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ( size_t ) ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8011746:	68f8      	ldr	r0, [r7, #12]
 8011748:	f7f7 fc10 	bl	8008f6c <uxIPHeaderSizeSocket>
 801174c:	4602      	mov	r2, r0
 801174e:	683b      	ldr	r3, [r7, #0]
 8011750:	4413      	add	r3, r2
 8011752:	3314      	adds	r3, #20
 8011754:	643b      	str	r3, [r7, #64]	@ 0x40
                xSendLength = ( BaseType_t ) uxIntermediateResult;
 8011756:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011758:	65fb      	str	r3, [r7, #92]	@ 0x5c
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 801175a:	683b      	ldr	r3, [r7, #0]
 801175c:	b2db      	uxtb	r3, r3
 801175e:	3314      	adds	r3, #20
 8011760:	b2db      	uxtb	r3, r3
 8011762:	009b      	lsls	r3, r3, #2
 8011764:	b2da      	uxtb	r2, r3
 8011766:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011768:	731a      	strb	r2, [r3, #12]
            }

            #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8011770:	f003 0310 	and.w	r3, r3, #16
 8011774:	b2db      	uxtb	r3, r3
 8011776:	2b00      	cmp	r3, #0
 8011778:	d107      	bne.n	801178a <prvHandleSynReceived+0x272>
                {
                    /* The other party did not send a scaling factor.
                     * A shifting factor in this side must be canceled. */
                    pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	2200      	movs	r2, #0
 801177e:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
                    pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	2200      	movs	r2, #0
 8011786:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* This was the third step of connecting: SYN, SYN+ACK, ACK so now the
             * connection is established. */
            vTCPStateChange( pxSocket, eESTABLISHED );
 801178a:	2105      	movs	r1, #5
 801178c:	68f8      	ldr	r0, [r7, #12]
 801178e:	f7fe fc7f 	bl	8010090 <vTCPStateChange>
        }

        return xSendLength;
 8011792:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
    }
 8011794:	4618      	mov	r0, r3
 8011796:	3764      	adds	r7, #100	@ 0x64
 8011798:	46bd      	mov	sp, r7
 801179a:	bd90      	pop	{r4, r7, pc}
 801179c:	080247f0 	.word	0x080247f0
 80117a0:	08024800 	.word	0x08024800
 80117a4:	08024810 	.word	0x08024810
 80117a8:	08024834 	.word	0x08024834
 80117ac:	0802483c 	.word	0x0802483c
 80117b0:	08024844 	.word	0x08024844

080117b4 <prvHandleEstablished>:
 */
    static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t * pxSocket,
                                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 80117b4:	b590      	push	{r4, r7, lr}
 80117b6:	b097      	sub	sp, #92	@ 0x5c
 80117b8:	af02      	add	r7, sp, #8
 80117ba:	60f8      	str	r0, [r7, #12]
 80117bc:	60b9      	str	r1, [r7, #8]
 80117be:	607a      	str	r2, [r7, #4]
 80117c0:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 80117c2:	68bb      	ldr	r3, [r7, #8]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80117c8:	68f8      	ldr	r0, [r7, #12]
 80117ca:	f7f7 fbcf 	bl	8008f6c <uxIPHeaderSizeSocket>
 80117ce:	4603      	mov	r3, r0
 80117d0:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80117d2:	4423      	add	r3, r4
 80117d4:	647b      	str	r3, [r7, #68]	@ 0x44
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 80117d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80117d8:	643b      	str	r3, [r7, #64]	@ 0x40
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80117e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 80117e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80117e4:	7b5b      	ldrb	r3, [r3, #13]
 80117e6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount, ulIntermediateResult = 0;
 80117ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80117ec:	685b      	ldr	r3, [r3, #4]
 80117ee:	061a      	lsls	r2, r3, #24
 80117f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80117f2:	685b      	ldr	r3, [r3, #4]
 80117f4:	021b      	lsls	r3, r3, #8
 80117f6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80117fa:	431a      	orrs	r2, r3
 80117fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80117fe:	685b      	ldr	r3, [r3, #4]
 8011800:	0a1b      	lsrs	r3, r3, #8
 8011802:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011806:	431a      	orrs	r2, r3
 8011808:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801180a:	685b      	ldr	r3, [r3, #4]
 801180c:	0e1b      	lsrs	r3, r3, #24
 801180e:	4313      	orrs	r3, r2
 8011810:	637b      	str	r3, [r7, #52]	@ 0x34
 8011812:	2300      	movs	r3, #0
 8011814:	633b      	str	r3, [r7, #48]	@ 0x30
        BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 8011816:	2300      	movs	r3, #0
 8011818:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801181a:	2300      	movs	r3, #0
 801181c:	64bb      	str	r3, [r7, #72]	@ 0x48
        int32_t lDistance, lSendResult;
        uint16_t usWindow;
        UBaseType_t uxIntermediateResult = 0;
 801181e:	2300      	movs	r3, #0
 8011820:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Remember the window size the peer is advertising. */
        usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 8011822:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011824:	89db      	ldrh	r3, [r3, #14]
 8011826:	b29b      	uxth	r3, r3
 8011828:	021b      	lsls	r3, r3, #8
 801182a:	b21a      	sxth	r2, r3
 801182c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801182e:	89db      	ldrh	r3, [r3, #14]
 8011830:	b29b      	uxth	r3, r3
 8011832:	0a1b      	lsrs	r3, r3, #8
 8011834:	b29b      	uxth	r3, r3
 8011836:	b21b      	sxth	r3, r3
 8011838:	4313      	orrs	r3, r2
 801183a:	b21b      	sxth	r3, r3
 801183c:	857b      	strh	r3, [r7, #42]	@ 0x2a
        pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 801183e:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ulWindowSize =
                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 801184c:	68fa      	ldr	r2, [r7, #12]
 801184e:	f892 2106 	ldrb.w	r2, [r2, #262]	@ 0x106
 8011852:	fa03 f202 	lsl.w	r2, r3, r2
            pxSocket->u.xTCP.ulWindowSize =
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_ACK ) == 0U )
 801185c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8011860:	f003 0310 	and.w	r3, r3, #16
 8011864:	2b00      	cmp	r3, #0
 8011866:	f000 8106 	beq.w	8011a76 <prvHandleEstablished+0x2c2>
             * be dropped
             */
        }
        else
        {
            ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPHeader->ulAckNr ) );
 801186a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801186c:	689b      	ldr	r3, [r3, #8]
 801186e:	061a      	lsls	r2, r3, #24
 8011870:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011872:	689b      	ldr	r3, [r3, #8]
 8011874:	021b      	lsls	r3, r3, #8
 8011876:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801187a:	431a      	orrs	r2, r3
 801187c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801187e:	689b      	ldr	r3, [r3, #8]
 8011880:	0a1b      	lsrs	r3, r3, #8
 8011882:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011886:	431a      	orrs	r2, r3
 8011888:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801188a:	689b      	ldr	r3, [r3, #8]
 801188c:	0e1b      	lsrs	r3, r3, #24
 801188e:	4313      	orrs	r3, r2
 8011890:	4619      	mov	r1, r3
 8011892:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8011894:	f003 feee 	bl	8015674 <ulTCPWindowTxAck>
 8011898:	6278      	str	r0, [r7, #36]	@ 0x24

            /* ulTCPWindowTxAck() returns the number of bytes which have been acked,
             * starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
             * txStream. */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d02c      	beq.n	80118fe <prvHandleEstablished+0x14a>
 80118a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d029      	beq.n	80118fe <prvHandleEstablished+0x14a>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been
                 * confirmed, and because there is new space in the txStream, the
                 * user/owner should be woken up. */
                /* _HT_ : only in case the socket's waiting? */
                if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0U, NULL, ( size_t ) ulCount, pdFALSE ) != 0U )
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 80118b0:	2300      	movs	r3, #0
 80118b2:	9300      	str	r3, [sp, #0]
 80118b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118b6:	2200      	movs	r2, #0
 80118b8:	2100      	movs	r1, #0
 80118ba:	f7fe fa42 	bl	800fd42 <uxStreamBufferGet>
 80118be:	4603      	mov	r3, r0
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d01c      	beq.n	80118fe <prvHandleEstablished+0x14a>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	f043 0202 	orr.w	r2, r3, #2
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	601a      	str	r2, [r3, #0]

                    #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80118d4:	f003 0302 	and.w	r3, r3, #2
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d005      	beq.n	80118e8 <prvHandleEstablished+0x134>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	601a      	str	r2, [r3, #0]

                    /* In case the socket owner has installed an OnSent handler,
                     * call it now. */
                    #if ( ipconfigUSE_CALLBACKS == 1 )
                    {
                        if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d005      	beq.n	80118fe <prvHandleEstablished+0x14a>
                        {
                            pxSocket->u.xTCP.pxHandleSent( ( Socket_t ) pxSocket, ulCount );
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80118f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80118fa:	68f8      	ldr	r0, [r7, #12]
 80118fc:	4798      	blx	r3
                }
            }

            /* If this socket has a stream for transmission, add the data to the
             * outgoing segment(s). */
            if( pxSocket->u.xTCP.txStream != NULL )
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011904:	2b00      	cmp	r3, #0
 8011906:	d002      	beq.n	801190e <prvHandleEstablished+0x15a>
            {
                prvTCPAddTxData( pxSocket );
 8011908:	68f8      	ldr	r0, [r7, #12]
 801190a:	f001 fb13 	bl	8012f34 <prvTCPAddTxData>
            }

            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 801190e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011910:	6a1a      	ldr	r2, [r3, #32]
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U ) )
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801191e:	f003 0320 	and.w	r3, r3, #32
 8011922:	b2db      	uxtb	r3, r3
 8011924:	2b00      	cmp	r3, #0
 8011926:	d105      	bne.n	8011934 <prvHandleEstablished+0x180>
 8011928:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801192c:	f003 0301 	and.w	r3, r3, #1
 8011930:	2b00      	cmp	r3, #0
 8011932:	d06b      	beq.n	8011a0c <prvHandleEstablished+0x258>
            {
                /* Peer is requesting to stop, see if we're really finished. */
                xMayClose = pdTRUE;
 8011934:	2301      	movs	r3, #1
 8011936:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Checks are only necessary if we haven't sent a FIN yet. */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801193e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011942:	b2db      	uxtb	r3, r3
 8011944:	2b00      	cmp	r3, #0
 8011946:	d13a      	bne.n	80119be <prvHandleEstablished+0x20a>
                {
                    /* xTCPWindowTxDone returns true when all Tx queues are empty. */
                    bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 8011948:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801194a:	f002 fe87 	bl	801465c <xTCPWindowRxEmpty>
 801194e:	6238      	str	r0, [r7, #32]
                    bTxDone = xTCPWindowTxDone( pxTCPWindow );
 8011950:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8011952:	f003 fafd 	bl	8014f50 <xTCPWindowTxDone>
 8011956:	61f8      	str	r0, [r7, #28]

                    if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 8011958:	6a3b      	ldr	r3, [r7, #32]
 801195a:	2b00      	cmp	r3, #0
 801195c:	d002      	beq.n	8011964 <prvHandleEstablished+0x1b0>
 801195e:	69fb      	ldr	r3, [r7, #28]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d10f      	bne.n	8011984 <prvHandleEstablished+0x1d0>
                    {
                        /* Refusing FIN: Rx incomplete 1 optlen 4 tx done 1. */
                        FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %d tx done %d\n",
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011968:	4619      	mov	r1, r3
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011970:	461a      	mov	r2, r3
 8011972:	69fb      	ldr	r3, [r7, #28]
 8011974:	9300      	str	r3, [sp, #0]
 8011976:	6a3b      	ldr	r3, [r7, #32]
 8011978:	4841      	ldr	r0, [pc, #260]	@ (8011a80 <prvHandleEstablished+0x2cc>)
 801197a:	f00e fdd7 	bl	802052c <lUDPLoggingPrintf>
                                                 pxSocket->usLocalPort,
                                                 pxSocket->u.xTCP.usRemotePort,
                                                 ( int ) bRxComplete,
                                                 ( int ) bTxDone ) );
                        xMayClose = pdFALSE;
 801197e:	2300      	movs	r3, #0
 8011980:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011982:	e01c      	b.n	80119be <prvHandleEstablished+0x20a>
                    }
                    else
                    {
                        ulIntermediateResult = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber;
 8011984:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	441a      	add	r2, r3
 801198a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801198c:	691b      	ldr	r3, [r3, #16]
 801198e:	1ad3      	subs	r3, r2, r3
 8011990:	633b      	str	r3, [r7, #48]	@ 0x30
                        lDistance = ( int32_t ) ulIntermediateResult;
 8011992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011994:	61bb      	str	r3, [r7, #24]

                        if( lDistance > 1 )
 8011996:	69bb      	ldr	r3, [r7, #24]
 8011998:	2b01      	cmp	r3, #1
 801199a:	dd10      	ble.n	80119be <prvHandleEstablished+0x20a>
                        {
                            FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %d (cur %u high %u)\n",
 801199c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801199e:	691a      	ldr	r2, [r3, #16]
 80119a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80119a2:	68db      	ldr	r3, [r3, #12]
 80119a4:	1ad1      	subs	r1, r2, r3
 80119a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80119a8:	699a      	ldr	r2, [r3, #24]
 80119aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80119ac:	68db      	ldr	r3, [r3, #12]
 80119ae:	1ad3      	subs	r3, r2, r3
 80119b0:	460a      	mov	r2, r1
 80119b2:	69b9      	ldr	r1, [r7, #24]
 80119b4:	4833      	ldr	r0, [pc, #204]	@ (8011a84 <prvHandleEstablished+0x2d0>)
 80119b6:	f00e fdb9 	bl	802052c <lUDPLoggingPrintf>
                                                     ( int ) lDistance,
                                                     ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );

                            xMayClose = pdFALSE;
 80119ba:	2300      	movs	r3, #0
 80119bc:	64bb      	str	r3, [r7, #72]	@ 0x48
                        }
                    }
                }

                if( xTCPWindowLoggingLevel > 0 )
 80119be:	4b32      	ldr	r3, [pc, #200]	@ (8011a88 <prvHandleEstablished+0x2d4>)
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	dd11      	ble.n	80119ea <prvHandleEstablished+0x236>
                {
                    FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %d (Rx %u Len %d, Tx %u)\n",
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80119cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80119ce:	1ad1      	subs	r1, r2, r3
 80119d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80119d2:	6a1a      	ldr	r2, [r3, #32]
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80119da:	1ad3      	subs	r3, r2, r3
 80119dc:	9300      	str	r3, [sp, #0]
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	460a      	mov	r2, r1
 80119e2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80119e4:	4829      	ldr	r0, [pc, #164]	@ (8011a8c <prvHandleEstablished+0x2d8>)
 80119e6:	f00e fda1 	bl	802052c <lUDPLoggingPrintf>
                                             ( unsigned ) ( ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulReceiveLength,
                                             ( unsigned ) ( pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ) ) );
                }

                if( xMayClose != pdFALSE )
 80119ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d00d      	beq.n	8011a0c <prvHandleEstablished+0x258>
                {
                    pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 80119f0:	68fa      	ldr	r2, [r7, #12]
 80119f2:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80119f6:	f043 0320 	orr.w	r3, r3, #32
 80119fa:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 80119fe:	68bb      	ldr	r3, [r7, #8]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	4619      	mov	r1, r3
 8011a04:	68f8      	ldr	r0, [r7, #12]
 8011a06:	f7ff fca9 	bl	801135c <prvTCPHandleFin>
 8011a0a:	64f8      	str	r0, [r7, #76]	@ 0x4c
                }
            }

            if( xMayClose == pdFALSE )
 8011a0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d131      	bne.n	8011a76 <prvHandleEstablished+0x2c2>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8011a12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a14:	2210      	movs	r2, #16
 8011a16:	735a      	strb	r2, [r3, #13]

                if( ulReceiveLength != 0U )
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d01d      	beq.n	8011a5a <prvHandleEstablished+0x2a6>
                {
                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8011a1e:	68f8      	ldr	r0, [r7, #12]
 8011a20:	f7f7 faa4 	bl	8008f6c <uxIPHeaderSizeSocket>
 8011a24:	4602      	mov	r2, r0
 8011a26:	683b      	ldr	r3, [r7, #0]
 8011a28:	4413      	add	r3, r2
 8011a2a:	3314      	adds	r3, #20
 8011a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 8011a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a30:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    /* TCP-offset equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8011a32:	683b      	ldr	r3, [r7, #0]
 8011a34:	b2db      	uxtb	r3, r3
 8011a36:	3314      	adds	r3, #20
 8011a38:	b2db      	uxtb	r3, r3
 8011a3a:	009b      	lsls	r3, r3, #2
 8011a3c:	b2da      	uxtb	r2, r3
 8011a3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a40:	731a      	strb	r2, [r3, #12]

                    if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8011a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011a4c:	b2db      	uxtb	r3, r3
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d003      	beq.n	8011a5a <prvHandleEstablished+0x2a6>
                    {
                        pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 8011a52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a58:	621a      	str	r2, [r3, #32]

                /* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
                 * can not send-out both TCP options and also a full packet. Sending
                 * options (SACK) is always more urgent than sending data, which can be
                 * sent later. */
                if( uxOptionsLength == 0U )
 8011a5a:	683b      	ldr	r3, [r7, #0]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d10a      	bne.n	8011a76 <prvHandleEstablished+0x2c2>
                {
                    /* prvTCPPrepareSend might allocate a bigger network buffer, if
                     * necessary. */
                    lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 8011a60:	683a      	ldr	r2, [r7, #0]
 8011a62:	68b9      	ldr	r1, [r7, #8]
 8011a64:	68f8      	ldr	r0, [r7, #12]
 8011a66:	f001 f8a1 	bl	8012bac <prvTCPPrepareSend>
 8011a6a:	6178      	str	r0, [r7, #20]

                    if( lSendResult > 0 )
 8011a6c:	697b      	ldr	r3, [r7, #20]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	dd01      	ble.n	8011a76 <prvHandleEstablished+0x2c2>
                    {
                        xSendLength = ( BaseType_t ) lSendResult;
 8011a72:	697b      	ldr	r3, [r7, #20]
 8011a74:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    }
                }
            }
        }

        return xSendLength;
 8011a76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 8011a78:	4618      	mov	r0, r3
 8011a7a:	3754      	adds	r7, #84	@ 0x54
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	bd90      	pop	{r4, r7, pc}
 8011a80:	08024878 	.word	0x08024878
 8011a84:	080248a4 	.word	0x080248a4
 8011a88:	200012f4 	.word	0x200012f4
 8011a8c:	080248d8 	.word	0x080248d8

08011a90 <prvTCPHandleState>:
 * As these functions are declared static, and they're called from one location
 * only, most compilers will inline them, thus avoiding a call and return.
 */
    BaseType_t prvTCPHandleState( FreeRTOS_Socket_t * pxSocket,
                                  NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 8011a90:	b590      	push	{r4, r7, lr}
 8011a92:	b08f      	sub	sp, #60	@ 0x3c
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
 8011a98:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 8011a9a:	683b      	ldr	r3, [r7, #0]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011aa0:	683b      	ldr	r3, [r7, #0]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	f7f7 fa47 	bl	8008f38 <uxIPHeaderSizePacket>
 8011aaa:	4603      	mov	r3, r0
 8011aac:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8011aae:	4423      	add	r3, r4
 8011ab0:	633b      	str	r3, [r7, #48]	@ 0x30
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8011ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        BaseType_t xSendLength = 0;
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulReceiveLength; /* Number of bytes contained in the TCP message. */
        uint8_t * pucRecvData;
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 8011aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011abc:	685b      	ldr	r3, [r3, #4]
 8011abe:	061a      	lsls	r2, r3, #24
 8011ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ac2:	685b      	ldr	r3, [r3, #4]
 8011ac4:	021b      	lsls	r3, r3, #8
 8011ac6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011aca:	431a      	orrs	r2, r3
 8011acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ace:	685b      	ldr	r3, [r3, #4]
 8011ad0:	0a1b      	lsrs	r3, r3, #8
 8011ad2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011ad6:	431a      	orrs	r2, r3
 8011ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ada:	685b      	ldr	r3, [r3, #4]
 8011adc:	0e1b      	lsrs	r3, r3, #24
 8011ade:	4313      	orrs	r3, r2
 8011ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* uxOptionsLength: the size of the options to be sent (always a multiple of
         * 4 bytes)
         * 1. in the SYN phase, we shall communicate the MSS
         * 2. in case of a SACK, Selective ACK, ack a segment which comes in
         * out-of-order. */
        UBaseType_t uxOptionsLength = 0U;
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8011ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ae8:	7b5b      	ldrb	r3, [r3, #13]
 8011aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011af4:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxIntermediateResult = 0;
 8011af6:	2300      	movs	r3, #0
 8011af8:	61bb      	str	r3, [r7, #24]
        uint32_t ulSum;

        /* First get the length and the position of the received data, if any.
         * pucRecvData will point to the first byte of the TCP payload. */
        ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	f107 0208 	add.w	r2, r7, #8
 8011b02:	4611      	mov	r1, r2
 8011b04:	4618      	mov	r0, r3
 8011b06:	f7ff fa64 	bl	8010fd2 <prvCheckRxData>
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011b14:	2b04      	cmp	r3, #4
 8011b16:	d90c      	bls.n	8011b32 <prvTCPHandleState+0xa2>
        {
            if( pxTCPWindow->rx.ulCurrentSequenceNumber == ( ulSequenceNumber + 1U ) )
 8011b18:	69fb      	ldr	r3, [r7, #28]
 8011b1a:	691a      	ldr	r2, [r3, #16]
 8011b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b1e:	3301      	adds	r3, #1
 8011b20:	429a      	cmp	r2, r3
 8011b22:	d106      	bne.n	8011b32 <prvTCPHandleState+0xa2>
            {
                /* This is most probably a keep-alive message from peer.  Setting
                 * 'bWinChange' doesn't cause a window-size-change, the flag is used
                 * here to force sending an immediate ACK. */
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8011b24:	687a      	ldr	r2, [r7, #4]
 8011b26:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8011b2a:	f043 0301 	orr.w	r3, r3, #1
 8011b2e:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            }
        }

        /* Keep track of the highest sequence number that might be expected within
         * this connection. */
        ulSum = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber;
 8011b32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011b34:	697b      	ldr	r3, [r7, #20]
 8011b36:	441a      	add	r2, r3
 8011b38:	69fb      	ldr	r3, [r7, #28]
 8011b3a:	699b      	ldr	r3, [r3, #24]
 8011b3c:	1ad3      	subs	r3, r2, r3
 8011b3e:	613b      	str	r3, [r7, #16]

        if( ( ( int32_t ) ulSum ) > 0 )
 8011b40:	693b      	ldr	r3, [r7, #16]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	dd04      	ble.n	8011b50 <prvTCPHandleState+0xc0>
        {
            pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 8011b46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011b48:	697b      	ldr	r3, [r7, #20]
 8011b4a:	441a      	add	r2, r3
 8011b4c:	69fb      	ldr	r3, [r7, #28]
 8011b4e:	619a      	str	r2, [r3, #24]
        }

        /* Storing data may result in a fatal error if malloc() fails. */
        if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
 8011b50:	68b9      	ldr	r1, [r7, #8]
 8011b52:	683b      	ldr	r3, [r7, #0]
 8011b54:	681a      	ldr	r2, [r3, #0]
 8011b56:	697b      	ldr	r3, [r7, #20]
 8011b58:	6878      	ldr	r0, [r7, #4]
 8011b5a:	f7ff fae3 	bl	8011124 <prvStoreRxData>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	da03      	bge.n	8011b6c <prvTCPHandleState+0xdc>
        {
            xSendLength = -1;
 8011b64:	f04f 33ff 	mov.w	r3, #4294967295
 8011b68:	637b      	str	r3, [r7, #52]	@ 0x34
 8011b6a:	e0ae      	b.n	8011cca <prvTCPHandleState+0x23a>
        }
        else
        {
            eIPTCPState_t eState;

            uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
 8011b6c:	683b      	ldr	r3, [r7, #0]
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	4619      	mov	r1, r3
 8011b72:	6878      	ldr	r0, [r7, #4]
 8011b74:	f001 fa0c 	bl	8012f90 <prvSetOptions>
 8011b78:	6278      	str	r0, [r7, #36]	@ 0x24

            if( ( pxSocket->u.xTCP.eTCPState == eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011b80:	2b04      	cmp	r3, #4
 8011b82:	d10c      	bne.n	8011b9e <prvTCPHandleState+0x10e>
 8011b84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011b88:	f003 031f 	and.w	r3, r3, #31
 8011b8c:	2b02      	cmp	r3, #2
 8011b8e:	d106      	bne.n	8011b9e <prvTCPHandleState+0x10e>
            {
                FreeRTOS_debug_printf( ( "eSYN_RECEIVED: ACK expected, not SYN: peer missed our SYN+ACK\n" ) );
 8011b90:	4855      	ldr	r0, [pc, #340]	@ (8011ce8 <prvTCPHandleState+0x258>)
 8011b92:	f00e fccb 	bl	802052c <lUDPLoggingPrintf>

                /* In eSYN_RECEIVED a simple ACK is expected, but apparently the
                 * 'SYN+ACK' didn't arrive.  Step back to the previous state in which
                 * a first incoming SYN is handled.  The SYN was counted already so
                 * decrease it first. */
                vTCPStateChange( pxSocket, eSYN_FIRST );
 8011b96:	2103      	movs	r1, #3
 8011b98:	6878      	ldr	r0, [r7, #4]
 8011b9a:	f7fe fa79 	bl	8010090 <vTCPStateChange>
            }

            if( ( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 8011b9e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011ba2:	f003 0301 	and.w	r3, r3, #1
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d022      	beq.n	8011bf0 <prvTCPHandleState+0x160>
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8011bb0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011bb4:	b2db      	uxtb	r3, r3
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d11a      	bne.n	8011bf0 <prvTCPHandleState+0x160>
            {
                /* It's the first time a FIN has been received, remember its
                 * sequence number. */
                pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 8011bba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011bbc:	697b      	ldr	r3, [r7, #20]
 8011bbe:	441a      	add	r2, r3
 8011bc0:	69fb      	ldr	r3, [r7, #28]
 8011bc2:	615a      	str	r2, [r3, #20]
                pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 8011bc4:	687a      	ldr	r2, [r7, #4]
 8011bc6:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8011bca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011bce:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                /* Was peer the first one to send a FIN? */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8011bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011bdc:	b2db      	uxtb	r3, r3
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d106      	bne.n	8011bf0 <prvTCPHandleState+0x160>
                {
                    /* If so, don't send the-last-ACK. */
                    pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 8011be2:	687a      	ldr	r2, [r7, #4]
 8011be4:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8011be8:	f043 0302 	orr.w	r3, r3, #2
 8011bec:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
                }
            }

            eState = ( eIPTCPState_t ) pxSocket->u.xTCP.eTCPState;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011bf6:	73fb      	strb	r3, [r7, #15]

            switch( eState )
 8011bf8:	7bfb      	ldrb	r3, [r7, #15]
 8011bfa:	2b0b      	cmp	r3, #11
 8011bfc:	d864      	bhi.n	8011cc8 <prvTCPHandleState+0x238>
 8011bfe:	a201      	add	r2, pc, #4	@ (adr r2, 8011c04 <prvTCPHandleState+0x174>)
 8011c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c04:	08011cc9 	.word	0x08011cc9
 8011c08:	08011cc9 	.word	0x08011cc9
 8011c0c:	08011c97 	.word	0x08011c97
 8011c10:	08011c35 	.word	0x08011c35
 8011c14:	08011c97 	.word	0x08011c97
 8011c18:	08011ca9 	.word	0x08011ca9
 8011c1c:	08011cb9 	.word	0x08011cb9
 8011c20:	08011cb9 	.word	0x08011cb9
 8011c24:	08011cc9 	.word	0x08011cc9
 8011c28:	08011cc9 	.word	0x08011cc9
 8011c2c:	08011cb9 	.word	0x08011cb9
 8011c30:	08011cc9 	.word	0x08011cc9
                                  * socket. */

                    /* A new socket has been created, reply with a SYN+ACK.
                     * Acknowledge with seq+1 because the SYN is seen as pseudo data
                     * with len = 1. */
                    uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPHeader );
 8011c34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	f000 fe4e 	bl	80128d8 <prvSetSynAckOptions>
 8011c3c:	6278      	str	r0, [r7, #36]	@ 0x24
                    pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_SYN | ( uint8_t ) tcpTCP_FLAG_ACK;
 8011c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c40:	2212      	movs	r2, #18
 8011c42:	735a      	strb	r2, [r3, #13]

                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8011c44:	6878      	ldr	r0, [r7, #4]
 8011c46:	f7f7 f991 	bl	8008f6c <uxIPHeaderSizeSocket>
 8011c4a:	4602      	mov	r2, r0
 8011c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c4e:	4413      	add	r3, r2
 8011c50:	3314      	adds	r3, #20
 8011c52:	61bb      	str	r3, [r7, #24]
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 8011c54:	69bb      	ldr	r3, [r7, #24]
 8011c56:	637b      	str	r3, [r7, #52]	@ 0x34

                    /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                     * uxOptionsLength is a multiple of 4.  The complete expression is:
                     * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8011c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c5a:	b2db      	uxtb	r3, r3
 8011c5c:	3314      	adds	r3, #20
 8011c5e:	b2db      	uxtb	r3, r3
 8011c60:	009b      	lsls	r3, r3, #2
 8011c62:	b2da      	uxtb	r2, r3
 8011c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c66:	731a      	strb	r2, [r3, #12]
                    vTCPStateChange( pxSocket, eSYN_RECEIVED );
 8011c68:	2104      	movs	r1, #4
 8011c6a:	6878      	ldr	r0, [r7, #4]
 8011c6c:	f7fe fa10 	bl	8010090 <vTCPStateChange>

                    pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 8011c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c72:	1c5a      	adds	r2, r3, #1
 8011c74:	69fb      	ldr	r3, [r7, #28]
 8011c76:	619a      	str	r2, [r3, #24]
                    pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 8011c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c7a:	1c5a      	adds	r2, r3, #1
 8011c7c:	69fb      	ldr	r3, [r7, #28]
 8011c7e:	611a      	str	r2, [r3, #16]
                    pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 8011c80:	69fb      	ldr	r3, [r7, #28]
 8011c82:	69db      	ldr	r3, [r3, #28]
 8011c84:	1c5a      	adds	r2, r3, #1
 8011c86:	69fb      	ldr	r3, [r7, #28]
 8011c88:	635a      	str	r2, [r3, #52]	@ 0x34
                    pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U; /* because we send a TCP_SYN. */
 8011c8a:	69fb      	ldr	r3, [r7, #28]
 8011c8c:	69db      	ldr	r3, [r3, #28]
 8011c8e:	1c5a      	adds	r2, r3, #1
 8011c90:	69fb      	ldr	r3, [r7, #28]
 8011c92:	621a      	str	r2, [r3, #32]
                    break;
 8011c94:	e019      	b.n	8011cca <prvTCPHandleState+0x23a>
                case eCONNECT_SYN:  /* (client) also called SYN_SENT: we've just send a
                                     * SYN, expect a SYN+ACK and send a ACK now. */
                /* Fall through */
                case eSYN_RECEIVED: /* (server) we've had a SYN, replied with SYN+SCK
                                     * expect a ACK and do nothing. */
                    xSendLength = prvHandleSynReceived( pxSocket, *( ppxNetworkBuffer ), ulReceiveLength, uxOptionsLength );
 8011c96:	683b      	ldr	r3, [r7, #0]
 8011c98:	6819      	ldr	r1, [r3, #0]
 8011c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c9c:	697a      	ldr	r2, [r7, #20]
 8011c9e:	6878      	ldr	r0, [r7, #4]
 8011ca0:	f7ff fc3a 	bl	8011518 <prvHandleSynReceived>
 8011ca4:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 8011ca6:	e010      	b.n	8011cca <prvTCPHandleState+0x23a>
                case eESTABLISHED: /* (server + client) an open connection, data
                                    * received can be delivered to the user. The normal
                                    * state for the data transfer phase of the connection
                                    * The closing states are also handled here with the
                                    * use of some flags. */
                    xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 8011ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011caa:	697a      	ldr	r2, [r7, #20]
 8011cac:	6839      	ldr	r1, [r7, #0]
 8011cae:	6878      	ldr	r0, [r7, #4]
 8011cb0:	f7ff fd80 	bl	80117b4 <prvHandleEstablished>
 8011cb4:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 8011cb6:	e008      	b.n	8011cca <prvTCPHandleState+0x23a>
                /* Fall through */
                case eFIN_WAIT_1: /* (server + client) waiting for a connection termination request from the remote TCP,
                                   * or an acknowledgement of the connection termination request previously sent. */
                /* Fall through */
                case eFIN_WAIT_2: /* (server + client) waiting for a connection termination request from the remote TCP. */
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 8011cb8:	683b      	ldr	r3, [r7, #0]
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	4619      	mov	r1, r3
 8011cbe:	6878      	ldr	r0, [r7, #4]
 8011cc0:	f7ff fb4c 	bl	801135c <prvTCPHandleFin>
 8011cc4:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 8011cc6:	e000      	b.n	8011cca <prvTCPHandleState+0x23a>
                                  * 'bFinSent', 'bFinRecv', and 'bFinAcked'. */
                    break;

                default:
                    /* No more known states. */
                    break;
 8011cc8:	bf00      	nop
            }
        }

        if( xSendLength > 0 )
 8011cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	dd06      	ble.n	8011cde <prvTCPHandleState+0x24e>
        {
            xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
 8011cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011cd2:	697a      	ldr	r2, [r7, #20]
 8011cd4:	6839      	ldr	r1, [r7, #0]
 8011cd6:	6878      	ldr	r0, [r7, #4]
 8011cd8:	f001 fa1a 	bl	8013110 <prvSendData>
 8011cdc:	6378      	str	r0, [r7, #52]	@ 0x34
        }

        return xSendLength;
 8011cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	373c      	adds	r7, #60	@ 0x3c
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	bd90      	pop	{r4, r7, pc}
 8011ce8:	08024910 	.word	0x08024910

08011cec <prvHandleListen>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
    FreeRTOS_Socket_t * prvHandleListen( FreeRTOS_Socket_t * pxSocket,
                                         NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b084      	sub	sp, #16
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
 8011cf4:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxNewSocket = NULL;
 8011cf6:	2300      	movs	r3, #0
 8011cf8:	60fb      	str	r3, [r7, #12]

        switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 8011cfa:	6838      	ldr	r0, [r7, #0]
 8011cfc:	f7f7 f91c 	bl	8008f38 <uxIPHeaderSizePacket>
 8011d00:	4603      	mov	r3, r0
 8011d02:	2b14      	cmp	r3, #20
 8011d04:	d002      	beq.n	8011d0c <prvHandleListen+0x20>
 8011d06:	2b28      	cmp	r3, #40	@ 0x28
 8011d08:	d006      	beq.n	8011d18 <prvHandleListen+0x2c>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break;
 8011d0a:	e00b      	b.n	8011d24 <prvHandleListen+0x38>
                    pxNewSocket = prvHandleListen_IPV4( pxSocket, pxNetworkBuffer );
 8011d0c:	6839      	ldr	r1, [r7, #0]
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	f000 f8ee 	bl	8011ef0 <prvHandleListen_IPV4>
 8011d14:	60f8      	str	r0, [r7, #12]
                    break;
 8011d16:	e005      	b.n	8011d24 <prvHandleListen+0x38>
                    pxNewSocket = prvHandleListen_IPV6( pxSocket, pxNetworkBuffer );
 8011d18:	6839      	ldr	r1, [r7, #0]
 8011d1a:	6878      	ldr	r0, [r7, #4]
 8011d1c:	f000 fa10 	bl	8012140 <prvHandleListen_IPV6>
 8011d20:	60f8      	str	r0, [r7, #12]
                    break;
 8011d22:	bf00      	nop
        }

        return pxNewSocket;
 8011d24:	68fb      	ldr	r3, [r7, #12]
    }
 8011d26:	4618      	mov	r0, r3
 8011d28:	3710      	adds	r7, #16
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	bd80      	pop	{r7, pc}
	...

08011d30 <prvTCPSocketCopy>:
 *
 * @return If all steps all successful, then pdTRUE is returned. Else, pdFALSE.
 */
    BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t * pxNewSocket,
                                 FreeRTOS_Socket_t * pxSocket )
    {
 8011d30:	b590      	push	{r4, r7, lr}
 8011d32:	b08f      	sub	sp, #60	@ 0x3c
 8011d34:	af04      	add	r7, sp, #16
 8011d36:	6078      	str	r0, [r7, #4]
 8011d38:	6039      	str	r1, [r7, #0]
        struct freertos_sockaddr xAddress;
        BaseType_t xResult;

        pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 8011d3a:	683b      	ldr	r3, [r7, #0]
 8011d3c:	6a1a      	ldr	r2, [r3, #32]
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	621a      	str	r2, [r3, #32]
        pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 8011d42:	683b      	ldr	r3, [r7, #0]
 8011d44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	625a      	str	r2, [r3, #36]	@ 0x24
        pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 8011d4a:	683b      	ldr	r3, [r7, #0]
 8011d4c:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 8011d56:	683b      	ldr	r3, [r7, #0]
 8011d58:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 8011d6e:	683b      	ldr	r3, [r7, #0]
 8011d70:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 8011d7a:	683b      	ldr	r3, [r7, #0]
 8011d7c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        pxNewSocket->u.xTCP.uxRxWinSize = pxSocket->u.xTCP.uxRxWinSize;
 8011d86:	683b      	ldr	r3, [r7, #0]
 8011d88:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        pxNewSocket->u.xTCP.uxTxWinSize = pxSocket->u.xTCP.uxTxWinSize;
 8011d92:	683b      	ldr	r3, [r7, #0]
 8011d94:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

        #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
        {
            pxNewSocket->pxUserSemaphore = pxSocket->pxUserSemaphore;
 8011d9e:	683b      	ldr	r3, [r7, #0]
 8011da0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	63da      	str	r2, [r3, #60]	@ 0x3c
        #endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            /* In case call-backs are used, copy them from parent to child. */
            pxNewSocket->u.xTCP.pxHandleConnected = pxSocket->u.xTCP.pxHandleConnected;
 8011da6:	683b      	ldr	r3, [r7, #0]
 8011da8:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            pxNewSocket->u.xTCP.pxHandleReceive = pxSocket->u.xTCP.pxHandleReceive;
 8011db2:	683b      	ldr	r3, [r7, #0]
 8011db4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            pxNewSocket->u.xTCP.pxHandleSent = pxSocket->u.xTCP.pxHandleSent;
 8011dbe:	683b      	ldr	r3, [r7, #0]
 8011dc0:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
        {
            /* Child socket of listening sockets will inherit the Socket Set
             * Otherwise the owner has no chance of including it into the set. */
            if( pxSocket->pxSocketSet != NULL )
 8011dca:	683b      	ldr	r3, [r7, #0]
 8011dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d009      	beq.n	8011de6 <prvTCPSocketCopy+0xb6>
            {
                pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 8011dd2:	683b      	ldr	r3, [r7, #0]
 8011dd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	641a      	str	r2, [r3, #64]	@ 0x40
                pxNewSocket->xSelectBits = pxSocket->xSelectBits | ( ( EventBits_t ) eSELECT_READ ) | ( ( EventBits_t ) eSELECT_EXCEPT );
 8011dda:	683b      	ldr	r3, [r7, #0]
 8011ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011dde:	f043 0205 	orr.w	r2, r3, #5
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	645a      	str	r2, [r3, #68]	@ 0x44
            }
        }
        #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

        /* And bind it to the same local port as its parent. */
        ( void ) FreeRTOS_GetLocalAddress( pxSocket, &xAddress );
 8011de6:	f107 030c 	add.w	r3, r7, #12
 8011dea:	4619      	mov	r1, r3
 8011dec:	6838      	ldr	r0, [r7, #0]
 8011dee:	f7fc fb65 	bl	800e4bc <FreeRTOS_GetLocalAddress>
             * orphan temporarily.  Once this socket is really connected, the owner of
             * the server socket will be notified. */

            /* When bPassQueued is true, the socket is an orphan until it gets
             * connected. */
            pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8011df2:	687a      	ldr	r2, [r7, #4]
 8011df4:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8011df8:	f043 0304 	orr.w	r3, r3, #4
 8011dfc:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	683a      	ldr	r2, [r7, #0]
 8011e04:	67da      	str	r2, [r3, #124]	@ 0x7c
                pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
            }
        }
        #endif /* if ( ipconfigTCP_HANG_PROTECTION == 1 ) */

        pxSocket->u.xTCP.usChildCount++;
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8011e0c:	3301      	adds	r3, #1
 8011e0e:	b29a      	uxth	r2, r3
 8011e10:	683b      	ldr	r3, [r7, #0]
 8011e12:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74

        if( pxSocket->u.xTCP.pxPeerSocket == NULL )
 8011e16:	683b      	ldr	r3, [r7, #0]
 8011e18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d102      	bne.n	8011e24 <prvTCPSocketCopy+0xf4>
        {
            pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
 8011e1e:	683b      	ldr	r3, [r7, #0]
 8011e20:	687a      	ldr	r2, [r7, #4]
 8011e22:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        FreeRTOS_debug_printf( ( "Gain: Socket %u now has %u / %u child%s me: %p parent: %p peer: %p\n",
 8011e24:	683b      	ldr	r3, [r7, #0]
 8011e26:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011e28:	4619      	mov	r1, r3
 8011e2a:	683b      	ldr	r3, [r7, #0]
 8011e2c:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8011e30:	4618      	mov	r0, r3
 8011e32:	683b      	ldr	r3, [r7, #0]
 8011e34:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8011e38:	461c      	mov	r4, r3
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8011e40:	2b01      	cmp	r3, #1
 8011e42:	d101      	bne.n	8011e48 <prvTCPSocketCopy+0x118>
 8011e44:	4a17      	ldr	r2, [pc, #92]	@ (8011ea4 <prvTCPSocketCopy+0x174>)
 8011e46:	e000      	b.n	8011e4a <prvTCPSocketCopy+0x11a>
 8011e48:	4a17      	ldr	r2, [pc, #92]	@ (8011ea8 <prvTCPSocketCopy+0x178>)
 8011e4a:	683b      	ldr	r3, [r7, #0]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d002      	beq.n	8011e56 <prvTCPSocketCopy+0x126>
 8011e50:	683b      	ldr	r3, [r7, #0]
 8011e52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011e54:	e000      	b.n	8011e58 <prvTCPSocketCopy+0x128>
 8011e56:	2300      	movs	r3, #0
 8011e58:	9303      	str	r3, [sp, #12]
 8011e5a:	683b      	ldr	r3, [r7, #0]
 8011e5c:	9302      	str	r3, [sp, #8]
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	9301      	str	r3, [sp, #4]
 8011e62:	9200      	str	r2, [sp, #0]
 8011e64:	4623      	mov	r3, r4
 8011e66:	4602      	mov	r2, r0
 8011e68:	4810      	ldr	r0, [pc, #64]	@ (8011eac <prvTCPSocketCopy+0x17c>)
 8011e6a:	f00e fb5f 	bl	802052c <lUDPLoggingPrintf>
                                 ( void * ) pxNewSocket,
                                 ( void * ) pxSocket,
                                 pxSocket ? ( void * ) pxSocket->u.xTCP.pxPeerSocket : NULL ) );

        /* Now bind the child socket to the same port as the listening socket. */
        if( vSocketBind( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 8011e6e:	f107 010c 	add.w	r1, r7, #12
 8011e72:	2301      	movs	r3, #1
 8011e74:	2218      	movs	r2, #24
 8011e76:	6878      	ldr	r0, [r7, #4]
 8011e78:	f7fb fccc 	bl	800d814 <vSocketBind>
 8011e7c:	4603      	mov	r3, r0
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d008      	beq.n	8011e94 <prvTCPSocketCopy+0x164>
        {
            FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
 8011e82:	480b      	ldr	r0, [pc, #44]	@ (8011eb0 <prvTCPSocketCopy+0x180>)
 8011e84:	f00e fb52 	bl	802052c <lUDPLoggingPrintf>
            ( void ) vSocketClose( pxNewSocket );
 8011e88:	6878      	ldr	r0, [r7, #4]
 8011e8a:	f7fb fd77 	bl	800d97c <vSocketClose>
            xResult = pdFALSE;
 8011e8e:	2300      	movs	r3, #0
 8011e90:	627b      	str	r3, [r7, #36]	@ 0x24
 8011e92:	e001      	b.n	8011e98 <prvTCPSocketCopy+0x168>
        }
        else
        {
            xResult = pdTRUE;
 8011e94:	2301      	movs	r3, #1
 8011e96:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return xResult;
 8011e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	372c      	adds	r7, #44	@ 0x2c
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	bd90      	pop	{r4, r7, pc}
 8011ea2:	bf00      	nop
 8011ea4:	08024950 	.word	0x08024950
 8011ea8:	08024954 	.word	0x08024954
 8011eac:	08024958 	.word	0x08024958
 8011eb0:	0802499c 	.word	0x0802499c

08011eb4 <FreeRTOS_GetTCPStateName>:
    /*-----------------------------------------------------------*/

    #if ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )

        const char * FreeRTOS_GetTCPStateName( UBaseType_t ulState )
        {
 8011eb4:	b480      	push	{r7}
 8011eb6:	b085      	sub	sp, #20
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
                "eCLOSING",
                "eLAST_ACK",
                "eTIME_WAIT",
                "eUNKNOWN",
            };
            BaseType_t xIndex = ( BaseType_t ) ulState;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	60fb      	str	r3, [r7, #12]

            if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	db02      	blt.n	8011ecc <FreeRTOS_GetTCPStateName+0x18>
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	2b0c      	cmp	r3, #12
 8011eca:	dd04      	ble.n	8011ed6 <FreeRTOS_GetTCPStateName+0x22>
            {
                /* The last item is called 'eUNKNOWN' */
                xIndex = ARRAY_SIZE( pcStateNames );
 8011ecc:	230d      	movs	r3, #13
 8011ece:	60fb      	str	r3, [r7, #12]
                xIndex--;
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	3b01      	subs	r3, #1
 8011ed4:	60fb      	str	r3, [r7, #12]
            }

            return pcStateNames[ xIndex ];
 8011ed6:	4a05      	ldr	r2, [pc, #20]	@ (8011eec <FreeRTOS_GetTCPStateName+0x38>)
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        }
 8011ede:	4618      	mov	r0, r3
 8011ee0:	3714      	adds	r7, #20
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee8:	4770      	bx	lr
 8011eea:	bf00      	nop
 8011eec:	08025c64 	.word	0x08025c64

08011ef0 <prvHandleListen_IPV4>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
FreeRTOS_Socket_t * prvHandleListen_IPV4( FreeRTOS_Socket_t * pxSocket,
                                          NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8011ef0:	b590      	push	{r4, r7, lr}
 8011ef2:	b08f      	sub	sp, #60	@ 0x3c
 8011ef4:	af02      	add	r7, sp, #8
 8011ef6:	6078      	str	r0, [r7, #4]
 8011ef8:	6039      	str	r1, [r7, #0]
    /* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

    const TCPPacket_t * pxTCPPacket = NULL;
 8011efa:	2300      	movs	r3, #0
 8011efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t * pxReturn = NULL;
 8011efe:	2300      	movs	r3, #0
 8011f00:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t ulInitialSequenceNumber = 0U;
 8011f02:	2300      	movs	r3, #0
 8011f04:	627b      	str	r3, [r7, #36]	@ 0x24
    const NetworkEndPoint_t * pxEndpoint = NULL;
 8011f06:	2300      	movs	r3, #0
 8011f08:	623b      	str	r3, [r7, #32]
    BaseType_t xIsNewSocket = pdFALSE;
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	61fb      	str	r3, [r7, #28]

    if( ( pxSocket != NULL ) && ( pxNetworkBuffer != NULL ) )
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d008      	beq.n	8011f26 <prvHandleListen_IPV4+0x36>
 8011f14:	683b      	ldr	r3, [r7, #0]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d005      	beq.n	8011f26 <prvHandleListen_IPV4+0x36>
    {
        /* Initialize pointers if inputs are valid. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( const TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8011f1a:	683b      	ldr	r3, [r7, #0]
 8011f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pxEndpoint = pxNetworkBuffer->pxEndPoint;
 8011f20:	683b      	ldr	r3, [r7, #0]
 8011f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f24:	623b      	str	r3, [r7, #32]
    }

    /* Silently discard a SYN packet which was not specifically sent for this node. */
    if( ( pxEndpoint != NULL ) && ( pxTCPPacket->xIPHeader.ulDestinationIPAddress == pxEndpoint->ipv4_settings.ulIPAddress ) )
 8011f26:	6a3b      	ldr	r3, [r7, #32]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d015      	beq.n	8011f58 <prvHandleListen_IPV4+0x68>
 8011f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f2e:	f8d3 201e 	ldr.w	r2, [r3, #30]
 8011f32:	6a3b      	ldr	r3, [r7, #32]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	429a      	cmp	r2, r3
 8011f38:	d10e      	bne.n	8011f58 <prvHandleListen_IPV4+0x68>
    {
        /* Assume that a new Initial Sequence Number will be required. Request
         * it now in order to fail out if necessary. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 8011f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f3c:	f8d3 001e 	ldr.w	r0, [r3, #30]
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
                                                                      pxSocket->usLocalPort,
                                                                      pxTCPPacket->xIPHeader.ulSourceIPAddress,
 8011f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f46:	f8d3 201a 	ldr.w	r2, [r3, #26]
                                                                      pxTCPPacket->xTCPHeader.usSourcePort );
 8011f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f4c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8011f4e:	b29b      	uxth	r3, r3
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 8011f50:	f7ef f902 	bl	8001158 <ulApplicationGetNextSequenceNumber>
 8011f54:	6278      	str	r0, [r7, #36]	@ 0x24
 8011f56:	e001      	b.n	8011f5c <prvHandleListen_IPV4+0x6c>
    }
    else
    {
        /* Set the sequence number to 0 to avoid further processing. */
        ulInitialSequenceNumber = 0U;
 8011f58:	2300      	movs	r3, #0
 8011f5a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* A pure SYN (without ACK) has come in, create a new socket to answer
     * it. */
    if( ulInitialSequenceNumber != 0U )
 8011f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d059      	beq.n	8012016 <prvHandleListen_IPV4+0x126>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011f68:	f003 0308 	and.w	r3, r3, #8
 8011f6c:	b2db      	uxtb	r3, r3
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d00c      	beq.n	8011f8c <prvHandleListen_IPV4+0x9c>
        {
            /* The flag bReuseSocket indicates that the same instance of the
             * listening socket should be used for the connection. */
            pxReturn = pxSocket;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	62bb      	str	r3, [r7, #40]	@ 0x28
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8011f76:	687a      	ldr	r2, [r7, #4]
 8011f78:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8011f7c:	f043 0304 	orr.w	r3, r3, #4
 8011f80:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	687a      	ldr	r2, [r7, #4]
 8011f88:	67da      	str	r2, [r3, #124]	@ 0x7c
 8011f8a:	e044      	b.n	8012016 <prvHandleListen_IPV4+0x126>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
             * new socket when a connection comes in. */
            pxReturn = NULL;
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	f8b3 2074 	ldrh.w	r2, [r3, #116]	@ 0x74
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8011f9c:	429a      	cmp	r2, r3
 8011f9e:	d31b      	bcc.n	8011fd8 <prvHandleListen_IPV4+0xe8>
            {
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011fa4:	4619      	mov	r1, r3
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8011fac:	461a      	mov	r2, r3
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8011fbc:	2b01      	cmp	r3, #1
 8011fbe:	d101      	bne.n	8011fc4 <prvHandleListen_IPV4+0xd4>
 8011fc0:	4b5b      	ldr	r3, [pc, #364]	@ (8012130 <prvHandleListen_IPV4+0x240>)
 8011fc2:	e000      	b.n	8011fc6 <prvHandleListen_IPV4+0xd6>
 8011fc4:	4b5b      	ldr	r3, [pc, #364]	@ (8012134 <prvHandleListen_IPV4+0x244>)
 8011fc6:	9300      	str	r3, [sp, #0]
 8011fc8:	4603      	mov	r3, r0
 8011fca:	485b      	ldr	r0, [pc, #364]	@ (8012138 <prvHandleListen_IPV4+0x248>)
 8011fcc:	f00e faae 	bl	802052c <lUDPLoggingPrintf>
                                   pxSocket->usLocalPort,
                                   pxSocket->u.xTCP.usChildCount,
                                   pxSocket->u.xTCP.usBacklog,
                                   ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                ( void ) prvTCPSendReset( pxNetworkBuffer );
 8011fd0:	6838      	ldr	r0, [r7, #0]
 8011fd2:	f001 f9d1 	bl	8013378 <prvTCPSendReset>
 8011fd6:	e01e      	b.n	8012016 <prvHandleListen_IPV4+0x126>
            }
            else
            {
                FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                  FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 8011fd8:	2206      	movs	r2, #6
 8011fda:	2101      	movs	r1, #1
 8011fdc:	2002      	movs	r0, #2
 8011fde:	f7fb f8bf 	bl	800d160 <FreeRTOS_socket>
 8011fe2:	6178      	str	r0, [r7, #20]

                /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
                /* coverity[misra_c_2012_rule_11_4_violation] */
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 8011fe4:	697b      	ldr	r3, [r7, #20]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d003      	beq.n	8011ff2 <prvHandleListen_IPV4+0x102>
 8011fea:	697b      	ldr	r3, [r7, #20]
 8011fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ff0:	d106      	bne.n	8012000 <prvHandleListen_IPV4+0x110>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 8011ff2:	4852      	ldr	r0, [pc, #328]	@ (801213c <prvHandleListen_IPV4+0x24c>)
 8011ff4:	f00e fa9a 	bl	802052c <lUDPLoggingPrintf>
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 8011ff8:	6838      	ldr	r0, [r7, #0]
 8011ffa:	f001 f9bd 	bl	8013378 <prvTCPSendReset>
 8011ffe:	e00a      	b.n	8012016 <prvHandleListen_IPV4+0x126>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 8012000:	6879      	ldr	r1, [r7, #4]
 8012002:	6978      	ldr	r0, [r7, #20]
 8012004:	f7ff fe94 	bl	8011d30 <prvTCPSocketCopy>
 8012008:	4603      	mov	r3, r0
 801200a:	2b00      	cmp	r3, #0
 801200c:	d003      	beq.n	8012016 <prvHandleListen_IPV4+0x126>
                {
                    /* The socket will be connected immediately, no time for the
                     * owner to setsockopt's, therefore copy properties of the server
                     * socket to the new socket.  Only the binding might fail (due to
                     * lack of resources). */
                    pxReturn = pxNewSocket;
 801200e:	697b      	ldr	r3, [r7, #20]
 8012010:	62bb      	str	r3, [r7, #40]	@ 0x28
                    xIsNewSocket = pdTRUE;
 8012012:	2301      	movs	r3, #1
 8012014:	61fb      	str	r3, [r7, #28]
                }
            }
        }
    }

    if( ( ulInitialSequenceNumber != 0U ) && ( pxReturn != NULL ) )
 8012016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012018:	2b00      	cmp	r3, #0
 801201a:	f000 8083 	beq.w	8012124 <prvHandleListen_IPV4+0x234>
 801201e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012020:	2b00      	cmp	r3, #0
 8012022:	d07f      	beq.n	8012124 <prvHandleListen_IPV4+0x234>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                            &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8012024:	683b      	ldr	r3, [r7, #0]
 8012026:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012028:	6838      	ldr	r0, [r7, #0]
 801202a:	f7f6 ff85 	bl	8008f38 <uxIPHeaderSizePacket>
 801202e:	4603      	mov	r3, r0
 8012030:	330e      	adds	r3, #14
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 8012032:	4423      	add	r3, r4
 8012034:	613b      	str	r3, [r7, #16]

            /* The endpoint in network buffer must be valid in this condition. */
            pxReturn->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8012036:	683b      	ldr	r3, [r7, #0]
 8012038:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801203a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801203c:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxReturn->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 801203e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012040:	7a13      	ldrb	r3, [r2, #8]
 8012042:	f36f 0300 	bfc	r3, #0, #1
 8012046:	7213      	strb	r3, [r2, #8]
            pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 8012048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801204a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801204c:	b29b      	uxth	r3, r3
 801204e:	021b      	lsls	r3, r3, #8
 8012050:	b21a      	sxth	r2, r3
 8012052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012054:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8012056:	b29b      	uxth	r3, r3
 8012058:	0a1b      	lsrs	r3, r3, #8
 801205a:	b29b      	uxth	r3, r3
 801205c:	b21b      	sxth	r3, r3
 801205e:	4313      	orrs	r3, r2
 8012060:	b21b      	sxth	r3, r3
 8012062:	b29a      	uxth	r2, r3
 8012064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012066:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
            pxReturn->u.xTCP.xRemoteIP.ulIP_IPv4 = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 801206a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801206c:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8012070:	061a      	lsls	r2, r3, #24
 8012072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012074:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8012078:	021b      	lsls	r3, r3, #8
 801207a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801207e:	431a      	orrs	r2, r3
 8012080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012082:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8012086:	0a1b      	lsrs	r3, r3, #8
 8012088:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801208c:	431a      	orrs	r2, r3
 801208e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012090:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8012094:	0e1b      	lsrs	r3, r3, #24
 8012096:	431a      	orrs	r2, r3
 8012098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801209a:	655a      	str	r2, [r3, #84]	@ 0x54
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 801209c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801209e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80120a0:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 80120a4:	693b      	ldr	r3, [r7, #16]
 80120a6:	685b      	ldr	r3, [r3, #4]
 80120a8:	061a      	lsls	r2, r3, #24
 80120aa:	693b      	ldr	r3, [r7, #16]
 80120ac:	685b      	ldr	r3, [r3, #4]
 80120ae:	021b      	lsls	r3, r3, #8
 80120b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80120b4:	431a      	orrs	r2, r3
 80120b6:	693b      	ldr	r3, [r7, #16]
 80120b8:	685b      	ldr	r3, [r3, #4]
 80120ba:	0a1b      	lsrs	r3, r3, #8
 80120bc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80120c0:	431a      	orrs	r2, r3
 80120c2:	693b      	ldr	r3, [r7, #16]
 80120c4:	685b      	ldr	r3, [r3, #4]
 80120c6:	0e1b      	lsrs	r3, r3, #24
 80120c8:	431a      	orrs	r2, r3
 80120ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120cc:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            prvSocketSetMSS( pxReturn );
 80120d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80120d2:	f002 f877 	bl	80141c4 <prvSocketSetMSS>

            xReturnCreateWindow = prvTCPCreateWindow( pxReturn );
 80120d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80120d8:	f000 fb66 	bl	80127a8 <prvTCPCreateWindow>
 80120dc:	60f8      	str	r0, [r7, #12]

            /* Did allocating TCP sectors fail? */
            if( xReturnCreateWindow != pdPASS )
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	2b01      	cmp	r3, #1
 80120e2:	d008      	beq.n	80120f6 <prvHandleListen_IPV4+0x206>
            {
                /* Close the socket if it was newly created. */
                if( xIsNewSocket == pdTRUE )
 80120e4:	69fb      	ldr	r3, [r7, #28]
 80120e6:	2b01      	cmp	r3, #1
 80120e8:	d102      	bne.n	80120f0 <prvHandleListen_IPV4+0x200>
                {
                    ( void ) vSocketClose( pxReturn );
 80120ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80120ec:	f7fb fc46 	bl	800d97c <vSocketClose>
                }

                pxReturn = NULL;
 80120f0:	2300      	movs	r3, #0
 80120f2:	62bb      	str	r3, [r7, #40]	@ 0x28
                break;
 80120f4:	e016      	b.n	8012124 <prvHandleListen_IPV4+0x234>
            }

            vTCPStateChange( pxReturn, eSYN_FIRST );
 80120f6:	2103      	movs	r1, #3
 80120f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80120fa:	f7fd ffc9 	bl	8010090 <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            if( pxNetworkBuffer->xDataLength > sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) )
 80120fe:	683b      	ldr	r3, [r7, #0]
 8012100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012102:	2b5a      	cmp	r3, #90	@ 0x5a
 8012104:	d902      	bls.n	801210c <prvHandleListen_IPV4+0x21c>
            {
                xCopyLength = sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket );
 8012106:	235a      	movs	r3, #90	@ 0x5a
 8012108:	61bb      	str	r3, [r7, #24]
 801210a:	e002      	b.n	8012112 <prvHandleListen_IPV4+0x222>
            }
            else
            {
                xCopyLength = pxNetworkBuffer->xDataLength;
 801210c:	683b      	ldr	r3, [r7, #0]
 801210e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012110:	61bb      	str	r3, [r7, #24]
            }

            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 8012112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012114:	f103 00aa 	add.w	r0, r3, #170	@ 0xaa
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 8012118:	683b      	ldr	r3, [r7, #0]
 801211a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 801211c:	69ba      	ldr	r2, [r7, #24]
 801211e:	4619      	mov	r1, r3
 8012120:	f00e fc20 	bl	8020964 <memcpy>
                             xCopyLength );
        } while( ipFALSE_BOOL );
    }

    return pxReturn;
 8012124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8012126:	4618      	mov	r0, r3
 8012128:	3734      	adds	r7, #52	@ 0x34
 801212a:	46bd      	mov	sp, r7
 801212c:	bd90      	pop	{r4, r7, pc}
 801212e:	bf00      	nop
 8012130:	08024a44 	.word	0x08024a44
 8012134:	08024a48 	.word	0x08024a48
 8012138:	08024a4c 	.word	0x08024a4c
 801213c:	08024a7c 	.word	0x08024a7c

08012140 <prvHandleListen_IPV6>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
FreeRTOS_Socket_t * prvHandleListen_IPV6( FreeRTOS_Socket_t * pxSocket,
                                          NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8012140:	b590      	push	{r4, r7, lr}
 8012142:	b08f      	sub	sp, #60	@ 0x3c
 8012144:	af02      	add	r7, sp, #8
 8012146:	6078      	str	r0, [r7, #4]
 8012148:	6039      	str	r1, [r7, #0]
    const TCPPacket_IPv6_t * pxTCPPacket = NULL;
 801214a:	2300      	movs	r3, #0
 801214c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t * pxReturn = NULL;
 801214e:	2300      	movs	r3, #0
 8012150:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t ulInitialSequenceNumber = 0;
 8012152:	2300      	movs	r3, #0
 8012154:	60bb      	str	r3, [r7, #8]
    BaseType_t xHasSequence = pdFALSE;
 8012156:	2300      	movs	r3, #0
 8012158:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xIsNewSocket = pdFALSE;
 801215a:	2300      	movs	r3, #0
 801215c:	623b      	str	r3, [r7, #32]

    if( ( pxSocket != NULL ) && ( pxNetworkBuffer != NULL ) )
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d024      	beq.n	80121ae <prvHandleListen_IPV6+0x6e>
 8012164:	683b      	ldr	r3, [r7, #0]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d021      	beq.n	80121ae <prvHandleListen_IPV6+0x6e>
        /* Map the ethernet buffer onto a TCPPacket_IPv6_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( const TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801216a:	683b      	ldr	r3, [r7, #0]
 801216c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801216e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        configASSERT( pxNetworkBuffer->pxEndPoint != NULL );
 8012170:	683b      	ldr	r3, [r7, #0]
 8012172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012174:	2b00      	cmp	r3, #0
 8012176:	d103      	bne.n	8012180 <prvHandleListen_IPV6+0x40>
 8012178:	215d      	movs	r1, #93	@ 0x5d
 801217a:	487b      	ldr	r0, [pc, #492]	@ (8012368 <prvHandleListen_IPV6+0x228>)
 801217c:	f7ee ffcc 	bl	8001118 <vAssertCalled>

        /* Silently discard a SYN packet which was not specifically sent for this node. */
        if( memcmp( pxTCPPacket->xIPHeader.xDestinationAddress.ucBytes, pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 8012180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012182:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8012186:	683b      	ldr	r3, [r7, #0]
 8012188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801218a:	3338      	adds	r3, #56	@ 0x38
 801218c:	2210      	movs	r2, #16
 801218e:	4619      	mov	r1, r3
 8012190:	f00f fb7d 	bl	802188e <memcmp>
 8012194:	4603      	mov	r3, r0
 8012196:	2b00      	cmp	r3, #0
 8012198:	d109      	bne.n	80121ae <prvHandleListen_IPV6+0x6e>
        {
            /* Assume that a new Initial Sequence Number will be required. Request
             * it now in order to fail out if necessary. */
            if( xApplicationGetRandomNumber( &ulInitialSequenceNumber ) == pdPASS )
 801219a:	f107 0308 	add.w	r3, r7, #8
 801219e:	4618      	mov	r0, r3
 80121a0:	f7ef f884 	bl	80012ac <xApplicationGetRandomNumber>
 80121a4:	4603      	mov	r3, r0
 80121a6:	2b01      	cmp	r3, #1
 80121a8:	d101      	bne.n	80121ae <prvHandleListen_IPV6+0x6e>
            {
                xHasSequence = pdTRUE;
 80121aa:	2301      	movs	r3, #1
 80121ac:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    /* A pure SYN (without ACK) has come in, create a new socket to answer
     * it. */
    if( xHasSequence != pdFALSE )
 80121ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d059      	beq.n	8012268 <prvHandleListen_IPV6+0x128>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80121ba:	f003 0308 	and.w	r3, r3, #8
 80121be:	b2db      	uxtb	r3, r3
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d00c      	beq.n	80121de <prvHandleListen_IPV6+0x9e>
        {
            /* The flag bReuseSocket indicates that the same instance of the
             * listening socket should be used for the connection. */
            pxReturn = pxSocket;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	62bb      	str	r3, [r7, #40]	@ 0x28
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 80121c8:	687a      	ldr	r2, [r7, #4]
 80121ca:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80121ce:	f043 0304 	orr.w	r3, r3, #4
 80121d2:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	687a      	ldr	r2, [r7, #4]
 80121da:	67da      	str	r2, [r3, #124]	@ 0x7c
 80121dc:	e044      	b.n	8012268 <prvHandleListen_IPV6+0x128>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
             * new socket when a connection comes in. */
            pxReturn = NULL;
 80121de:	2300      	movs	r3, #0
 80121e0:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	f8b3 2074 	ldrh.w	r2, [r3, #116]	@ 0x74
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80121ee:	429a      	cmp	r2, r3
 80121f0:	d31b      	bcc.n	801222a <prvHandleListen_IPV6+0xea>
            {
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80121f6:	4619      	mov	r1, r3
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80121fe:	461a      	mov	r2, r3
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8012206:	4618      	mov	r0, r3
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801220e:	2b01      	cmp	r3, #1
 8012210:	d101      	bne.n	8012216 <prvHandleListen_IPV6+0xd6>
 8012212:	4b56      	ldr	r3, [pc, #344]	@ (801236c <prvHandleListen_IPV6+0x22c>)
 8012214:	e000      	b.n	8012218 <prvHandleListen_IPV6+0xd8>
 8012216:	4b56      	ldr	r3, [pc, #344]	@ (8012370 <prvHandleListen_IPV6+0x230>)
 8012218:	9300      	str	r3, [sp, #0]
 801221a:	4603      	mov	r3, r0
 801221c:	4855      	ldr	r0, [pc, #340]	@ (8012374 <prvHandleListen_IPV6+0x234>)
 801221e:	f00e f985 	bl	802052c <lUDPLoggingPrintf>
                                   pxSocket->usLocalPort,
                                   pxSocket->u.xTCP.usChildCount,
                                   pxSocket->u.xTCP.usBacklog,
                                   ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                ( void ) prvTCPSendReset( pxNetworkBuffer );
 8012222:	6838      	ldr	r0, [r7, #0]
 8012224:	f001 f8a8 	bl	8013378 <prvTCPSendReset>
 8012228:	e01e      	b.n	8012268 <prvHandleListen_IPV6+0x128>
            }
            else
            {
                FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                  FreeRTOS_socket( FREERTOS_AF_INET6, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 801222a:	2206      	movs	r2, #6
 801222c:	2101      	movs	r1, #1
 801222e:	200a      	movs	r0, #10
 8012230:	f7fa ff96 	bl	800d160 <FreeRTOS_socket>
 8012234:	61b8      	str	r0, [r7, #24]

                /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
                /* coverity[misra_c_2012_rule_11_4_violation] */
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 8012236:	69bb      	ldr	r3, [r7, #24]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d003      	beq.n	8012244 <prvHandleListen_IPV6+0x104>
 801223c:	69bb      	ldr	r3, [r7, #24]
 801223e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012242:	d106      	bne.n	8012252 <prvHandleListen_IPV6+0x112>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 8012244:	484c      	ldr	r0, [pc, #304]	@ (8012378 <prvHandleListen_IPV6+0x238>)
 8012246:	f00e f971 	bl	802052c <lUDPLoggingPrintf>
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 801224a:	6838      	ldr	r0, [r7, #0]
 801224c:	f001 f894 	bl	8013378 <prvTCPSendReset>
 8012250:	e00a      	b.n	8012268 <prvHandleListen_IPV6+0x128>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 8012252:	6879      	ldr	r1, [r7, #4]
 8012254:	69b8      	ldr	r0, [r7, #24]
 8012256:	f7ff fd6b 	bl	8011d30 <prvTCPSocketCopy>
 801225a:	4603      	mov	r3, r0
 801225c:	2b00      	cmp	r3, #0
 801225e:	d003      	beq.n	8012268 <prvHandleListen_IPV6+0x128>
                {
                    /* The socket will be connected immediately, no time for the
                     * owner to setsockopt's, therefore copy properties of the server
                     * socket to the new socket.  Only the binding might fail (due to
                     * lack of resources). */
                    pxReturn = pxNewSocket;
 8012260:	69bb      	ldr	r3, [r7, #24]
 8012262:	62bb      	str	r3, [r7, #40]	@ 0x28
                    xIsNewSocket = pdTRUE;
 8012264:	2301      	movs	r3, #1
 8012266:	623b      	str	r3, [r7, #32]
                }
            }
        }
    }

    if( ( xHasSequence != pdFALSE ) && ( pxReturn != NULL ) )
 8012268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801226a:	2b00      	cmp	r3, #0
 801226c:	d076      	beq.n	801235c <prvHandleListen_IPV6+0x21c>
 801226e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012270:	2b00      	cmp	r3, #0
 8012272:	d073      	beq.n	801235c <prvHandleListen_IPV6+0x21c>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                            &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8012274:	683b      	ldr	r3, [r7, #0]
 8012276:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012278:	6838      	ldr	r0, [r7, #0]
 801227a:	f7f6 fe5d 	bl	8008f38 <uxIPHeaderSizePacket>
 801227e:	4603      	mov	r3, r0
 8012280:	330e      	adds	r3, #14
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 8012282:	4423      	add	r3, r4
 8012284:	617b      	str	r3, [r7, #20]

            pxReturn->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8012286:	683b      	ldr	r3, [r7, #0]
 8012288:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801228a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801228c:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxReturn->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 801228e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012290:	7a13      	ldrb	r3, [r2, #8]
 8012292:	f043 0301 	orr.w	r3, r3, #1
 8012296:	7213      	strb	r3, [r2, #8]

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8012298:	683b      	ldr	r3, [r7, #0]
 801229a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801229c:	330e      	adds	r3, #14
 801229e:	613b      	str	r3, [r7, #16]
            pxReturn->u.xTCP.usRemotePort = FreeRTOS_ntohs( pxTCPPacket->xTCPHeader.usSourcePort );
 80122a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80122a4:	b29b      	uxth	r3, r3
 80122a6:	021b      	lsls	r3, r3, #8
 80122a8:	b21a      	sxth	r2, r3
 80122aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80122ae:	b29b      	uxth	r3, r3
 80122b0:	0a1b      	lsrs	r3, r3, #8
 80122b2:	b29b      	uxth	r3, r3
 80122b4:	b21b      	sxth	r3, r3
 80122b6:	4313      	orrs	r3, r2
 80122b8:	b21b      	sxth	r3, r3
 80122ba:	b29a      	uxth	r2, r3
 80122bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122be:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
            ( void ) memcpy( pxReturn->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80122c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122c4:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 80122c8:	693b      	ldr	r3, [r7, #16]
 80122ca:	3308      	adds	r3, #8
 80122cc:	2210      	movs	r2, #16
 80122ce:	4619      	mov	r1, r3
 80122d0:	f00e fb48 	bl	8020964 <memcpy>
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 80122d4:	68ba      	ldr	r2, [r7, #8]
 80122d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122d8:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 80122dc:	697b      	ldr	r3, [r7, #20]
 80122de:	685b      	ldr	r3, [r3, #4]
 80122e0:	061a      	lsls	r2, r3, #24
 80122e2:	697b      	ldr	r3, [r7, #20]
 80122e4:	685b      	ldr	r3, [r3, #4]
 80122e6:	021b      	lsls	r3, r3, #8
 80122e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80122ec:	431a      	orrs	r2, r3
 80122ee:	697b      	ldr	r3, [r7, #20]
 80122f0:	685b      	ldr	r3, [r3, #4]
 80122f2:	0a1b      	lsrs	r3, r3, #8
 80122f4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80122f8:	431a      	orrs	r2, r3
 80122fa:	697b      	ldr	r3, [r7, #20]
 80122fc:	685b      	ldr	r3, [r3, #4]
 80122fe:	0e1b      	lsrs	r3, r3, #24
 8012300:	431a      	orrs	r2, r3
 8012302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012304:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            prvSocketSetMSS( pxReturn );
 8012308:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801230a:	f001 ff5b 	bl	80141c4 <prvSocketSetMSS>

            xReturnCreateWindow = prvTCPCreateWindow( pxReturn );
 801230e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012310:	f000 fa4a 	bl	80127a8 <prvTCPCreateWindow>
 8012314:	60f8      	str	r0, [r7, #12]

            /* Did allocating TCP sectors fail? */
            if( xReturnCreateWindow != pdPASS )
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	2b01      	cmp	r3, #1
 801231a:	d008      	beq.n	801232e <prvHandleListen_IPV6+0x1ee>
            {
                /* Close the socket if it was newly created. */
                if( xIsNewSocket == pdTRUE )
 801231c:	6a3b      	ldr	r3, [r7, #32]
 801231e:	2b01      	cmp	r3, #1
 8012320:	d102      	bne.n	8012328 <prvHandleListen_IPV6+0x1e8>
                {
                    ( void ) vSocketClose( pxReturn );
 8012322:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012324:	f7fb fb2a 	bl	800d97c <vSocketClose>
                }

                pxReturn = NULL;
 8012328:	2300      	movs	r3, #0
 801232a:	62bb      	str	r3, [r7, #40]	@ 0x28
                break;
 801232c:	e016      	b.n	801235c <prvHandleListen_IPV6+0x21c>
            }

            vTCPStateChange( pxReturn, eSYN_FIRST );
 801232e:	2103      	movs	r1, #3
 8012330:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012332:	f7fd fead 	bl	8010090 <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            if( pxNetworkBuffer->xDataLength > sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) )
 8012336:	683b      	ldr	r3, [r7, #0]
 8012338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801233a:	2b5a      	cmp	r3, #90	@ 0x5a
 801233c:	d902      	bls.n	8012344 <prvHandleListen_IPV6+0x204>
            {
                xCopyLength = sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket );
 801233e:	235a      	movs	r3, #90	@ 0x5a
 8012340:	61fb      	str	r3, [r7, #28]
 8012342:	e002      	b.n	801234a <prvHandleListen_IPV6+0x20a>
            }
            else
            {
                xCopyLength = pxNetworkBuffer->xDataLength;
 8012344:	683b      	ldr	r3, [r7, #0]
 8012346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012348:	61fb      	str	r3, [r7, #28]
            }

            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 801234a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801234c:	f103 00aa 	add.w	r0, r3, #170	@ 0xaa
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 8012350:	683b      	ldr	r3, [r7, #0]
 8012352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 8012354:	69fa      	ldr	r2, [r7, #28]
 8012356:	4619      	mov	r1, r3
 8012358:	f00e fb04 	bl	8020964 <memcpy>
                             xCopyLength );
        } while( ipFALSE_BOOL );
    }

    return pxReturn;
 801235c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 801235e:	4618      	mov	r0, r3
 8012360:	3734      	adds	r7, #52	@ 0x34
 8012362:	46bd      	mov	sp, r7
 8012364:	bd90      	pop	{r4, r7, pc}
 8012366:	bf00      	nop
 8012368:	08024a9c 	.word	0x08024a9c
 801236c:	08024adc 	.word	0x08024adc
 8012370:	08024ae0 	.word	0x08024ae0
 8012374:	08024ae4 	.word	0x08024ae4
 8012378:	08024b14 	.word	0x08024b14

0801237c <prvTCPMakeSurePrepared>:
 *         call prvTCPPrepareConnect() to continue the preparation.
 * @param[in] pxSocket The socket that wants to connect.
 * @return Returns pdTRUE if the connection is prepared, i.e. the MAC-
 *         address of the peer is already known. */
    static BaseType_t prvTCPMakeSurePrepared( FreeRTOS_Socket_t * pxSocket )
    {
 801237c:	b580      	push	{r7, lr}
 801237e:	b084      	sub	sp, #16
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 8012384:	2301      	movs	r3, #1
 8012386:	60fb      	str	r3, [r7, #12]

        if( pxSocket->u.xTCP.bits.bConnPrepared == pdFALSE_UNSIGNED )
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801238e:	f003 0308 	and.w	r3, r3, #8
 8012392:	b2db      	uxtb	r3, r3
 8012394:	2b00      	cmp	r3, #0
 8012396:	d107      	bne.n	80123a8 <prvTCPMakeSurePrepared+0x2c>
        {
            if( prvTCPPrepareConnect( pxSocket ) != pdTRUE )
 8012398:	6878      	ldr	r0, [r7, #4]
 801239a:	f000 fa51 	bl	8012840 <prvTCPPrepareConnect>
 801239e:	4603      	mov	r3, r0
 80123a0:	2b01      	cmp	r3, #1
 80123a2:	d001      	beq.n	80123a8 <prvTCPMakeSurePrepared+0x2c>
            {
                /* The preparation of a connection ( ARP resolution ) is not yet ready. */
                xReturn = pdFALSE;
 80123a4:	2300      	movs	r3, #0
 80123a6:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 80123a8:	68fb      	ldr	r3, [r7, #12]
    }
 80123aa:	4618      	mov	r0, r3
 80123ac:	3710      	adds	r7, #16
 80123ae:	46bd      	mov	sp, r7
 80123b0:	bd80      	pop	{r7, pc}
	...

080123b4 <prvTCPSendPacket>:
 * @return Number of bytes to be sent.
 *
 * @note It is only called by xTCPSocketCheck().
 */
    int32_t prvTCPSendPacket( FreeRTOS_Socket_t * pxSocket )
    {
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b088      	sub	sp, #32
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
        int32_t lResult = 0;
 80123bc:	2300      	movs	r3, #0
 80123be:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxOptionsLength, uxIntermediateResult = 0;
 80123c0:	2300      	movs	r3, #0
 80123c2:	61bb      	str	r3, [r7, #24]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( pxSocket->u.xTCP.eTCPState != eCONNECT_SYN )
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80123ca:	2b02      	cmp	r3, #2
 80123cc:	d010      	beq.n	80123f0 <prvTCPSendPacket+0x3c>
        {
            /* The connection is in a state other than SYN. */
            pxNetworkBuffer = NULL;
 80123ce:	2300      	movs	r3, #0
 80123d0:	60fb      	str	r3, [r7, #12]

            /* prvTCPSendRepeated() will only create a network buffer if necessary,
             * i.e. when data must be sent to the peer. */
            lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 80123d2:	f107 030c 	add.w	r3, r7, #12
 80123d6:	4619      	mov	r1, r3
 80123d8:	6878      	ldr	r0, [r7, #4]
 80123da:	f000 f859 	bl	8012490 <prvTCPSendRepeated>
 80123de:	61f8      	str	r0, [r7, #28]

            if( pxNetworkBuffer != NULL )
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d04d      	beq.n	8012482 <prvTCPSendPacket+0xce>
            {
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	4618      	mov	r0, r3
 80123ea:	f003 ffb5 	bl	8016358 <vReleaseNetworkBufferAndDescriptor>
 80123ee:	e048      	b.n	8012482 <prvTCPSendPacket+0xce>
            }
        }
        else
        {
            if( pxSocket->u.xTCP.ucRepCount >= 3U )
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80123f6:	2b02      	cmp	r3, #2
 80123f8:	d90d      	bls.n	8012416 <prvTCPSendPacket+0x62>
            {
                /* The connection is in the SYN status. The packet will be repeated
                 * to most 3 times.  When there is no response, the socket get the
                 * status 'eCLOSE_WAIT'. */
                FreeRTOS_debug_printf( ( "Connect: giving up %xip:%u\n",
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012404:	461a      	mov	r2, r3
 8012406:	4821      	ldr	r0, [pc, #132]	@ (801248c <prvTCPSendPacket+0xd8>)
 8012408:	f00e f890 	bl	802052c <lUDPLoggingPrintf>
                                         ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                         pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 801240c:	2108      	movs	r1, #8
 801240e:	6878      	ldr	r0, [r7, #4]
 8012410:	f7fd fe3e 	bl	8010090 <vTCPStateChange>
 8012414:	e035      	b.n	8012482 <prvTCPSendPacket+0xce>
            }
            else if( prvTCPMakeSurePrepared( pxSocket ) == pdTRUE )
 8012416:	6878      	ldr	r0, [r7, #4]
 8012418:	f7ff ffb0 	bl	801237c <prvTCPMakeSurePrepared>
 801241c:	4603      	mov	r3, r0
 801241e:	2b01      	cmp	r3, #1
 8012420:	d12f      	bne.n	8012482 <prvTCPSendPacket+0xce>
                 * the Ethernet address of the peer or the gateway is found. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8012422:	6878      	ldr	r0, [r7, #4]
 8012424:	f7f6 fda2 	bl	8008f6c <uxIPHeaderSizeSocket>
 8012428:	4603      	mov	r3, r0
 801242a:	330e      	adds	r3, #14
 801242c:	33a0      	adds	r3, #160	@ 0xa0
 801242e:	687a      	ldr	r2, [r7, #4]
 8012430:	4413      	add	r3, r2
 8012432:	330a      	adds	r3, #10
 8012434:	617b      	str	r3, [r7, #20]

                /* About to send a SYN packet.  Call prvSetSynAckOptions() to set
                 * the proper options: The size of MSS and whether SACK's are
                 * allowed. */
                uxOptionsLength = prvSetSynAckOptions( pxSocket, &( pxProtocolHeaders->xTCPHeader ) );
 8012436:	697b      	ldr	r3, [r7, #20]
 8012438:	4619      	mov	r1, r3
 801243a:	6878      	ldr	r0, [r7, #4]
 801243c:	f000 fa4c 	bl	80128d8 <prvSetSynAckOptions>
 8012440:	6138      	str	r0, [r7, #16]

                /* Return the number of bytes to be sent. */
                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012442:	6878      	ldr	r0, [r7, #4]
 8012444:	f7f6 fd92 	bl	8008f6c <uxIPHeaderSizeSocket>
 8012448:	4602      	mov	r2, r0
 801244a:	693b      	ldr	r3, [r7, #16]
 801244c:	4413      	add	r3, r2
 801244e:	3314      	adds	r3, #20
 8012450:	61bb      	str	r3, [r7, #24]
                lResult = ( int32_t ) uxIntermediateResult;
 8012452:	69bb      	ldr	r3, [r7, #24]
 8012454:	61fb      	str	r3, [r7, #28]

                /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                 * uxOptionsLength is always a multiple of 4.  The complete expression
                 * would be:
                 * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8012456:	693b      	ldr	r3, [r7, #16]
 8012458:	b2db      	uxtb	r3, r3
 801245a:	3314      	adds	r3, #20
 801245c:	b2db      	uxtb	r3, r3
 801245e:	009b      	lsls	r3, r3, #2
 8012460:	b2da      	uxtb	r2, r3
 8012462:	697b      	ldr	r3, [r7, #20]
 8012464:	731a      	strb	r2, [r3, #12]

                /* Repeat Count is used for a connecting socket, to limit the number
                 * of tries. */
                pxSocket->u.xTCP.ucRepCount++;
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 801246c:	3301      	adds	r3, #1
 801246e:	b2da      	uxtb	r2, r3
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                /* Send the SYN message to make a connection.  The messages is
                 * stored in the socket field 'xPacket'.  It will be wrapped in a
                 * pseudo network buffer descriptor before it will be sent. */
                prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 8012476:	69fa      	ldr	r2, [r7, #28]
 8012478:	2300      	movs	r3, #0
 801247a:	2100      	movs	r1, #0
 801247c:	6878      	ldr	r0, [r7, #4]
 801247e:	f000 f837 	bl	80124f0 <prvTCPReturnPacket>
                /* Nothing to do. */
            }
        }

        /* Return the total number of bytes sent. */
        return lResult;
 8012482:	69fb      	ldr	r3, [r7, #28]
    }
 8012484:	4618      	mov	r0, r3
 8012486:	3720      	adds	r7, #32
 8012488:	46bd      	mov	sp, r7
 801248a:	bd80      	pop	{r7, pc}
 801248c:	08024b34 	.word	0x08024b34

08012490 <prvTCPSendRepeated>:
 *
 * @return Total number of bytes sent.
 */
    int32_t prvTCPSendRepeated( FreeRTOS_Socket_t * pxSocket,
                                NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 8012490:	b580      	push	{r7, lr}
 8012492:	b086      	sub	sp, #24
 8012494:	af00      	add	r7, sp, #0
 8012496:	6078      	str	r0, [r7, #4]
 8012498:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIndex;
        int32_t lResult = 0;
 801249a:	2300      	movs	r3, #0
 801249c:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = 0U;
 801249e:	2300      	movs	r3, #0
 80124a0:	60fb      	str	r3, [r7, #12]
        int32_t xSendLength;

        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 80124a2:	2300      	movs	r3, #0
 80124a4:	617b      	str	r3, [r7, #20]
 80124a6:	e019      	b.n	80124dc <prvTCPSendRepeated+0x4c>
        {
            /* prvTCPPrepareSend() might allocate a network buffer if there is data
             * to be sent. */
            xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 80124a8:	68fa      	ldr	r2, [r7, #12]
 80124aa:	6839      	ldr	r1, [r7, #0]
 80124ac:	6878      	ldr	r0, [r7, #4]
 80124ae:	f000 fb7d 	bl	8012bac <prvTCPPrepareSend>
 80124b2:	60b8      	str	r0, [r7, #8]

            if( xSendLength <= 0 )
 80124b4:	68bb      	ldr	r3, [r7, #8]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	dd14      	ble.n	80124e4 <prvTCPSendRepeated+0x54>
            {
                break;
            }

            /* And return the packet to the peer. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 80124ba:	683b      	ldr	r3, [r7, #0]
 80124bc:	6819      	ldr	r1, [r3, #0]
 80124be:	68ba      	ldr	r2, [r7, #8]
 80124c0:	2301      	movs	r3, #1
 80124c2:	6878      	ldr	r0, [r7, #4]
 80124c4:	f000 f814 	bl	80124f0 <prvTCPReturnPacket>

            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                *ppxNetworkBuffer = NULL;
 80124c8:	683b      	ldr	r3, [r7, #0]
 80124ca:	2200      	movs	r2, #0
 80124cc:	601a      	str	r2, [r3, #0]
            }
            #endif /* ipconfigZERO_COPY_TX_DRIVER */

            lResult += xSendLength;
 80124ce:	693a      	ldr	r2, [r7, #16]
 80124d0:	68bb      	ldr	r3, [r7, #8]
 80124d2:	4413      	add	r3, r2
 80124d4:	613b      	str	r3, [r7, #16]
        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 80124d6:	697b      	ldr	r3, [r7, #20]
 80124d8:	3301      	adds	r3, #1
 80124da:	617b      	str	r3, [r7, #20]
 80124dc:	697b      	ldr	r3, [r7, #20]
 80124de:	2b07      	cmp	r3, #7
 80124e0:	d9e2      	bls.n	80124a8 <prvTCPSendRepeated+0x18>
 80124e2:	e000      	b.n	80124e6 <prvTCPSendRepeated+0x56>
                break;
 80124e4:	bf00      	nop
        }

        /* Return the total number of bytes sent. */
        return lResult;
 80124e6:	693b      	ldr	r3, [r7, #16]
    }
 80124e8:	4618      	mov	r0, r3
 80124ea:	3718      	adds	r7, #24
 80124ec:	46bd      	mov	sp, r7
 80124ee:	bd80      	pop	{r7, pc}

080124f0 <prvTCPReturnPacket>:
 */
    void prvTCPReturnPacket( FreeRTOS_Socket_t * pxSocket,
                             NetworkBufferDescriptor_t * pxDescriptor,
                             uint32_t ulLen,
                             BaseType_t xReleaseAfterSend )
    {
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b086      	sub	sp, #24
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	60f8      	str	r0, [r7, #12]
 80124f8:	60b9      	str	r1, [r7, #8]
 80124fa:	607a      	str	r2, [r7, #4]
 80124fc:	603b      	str	r3, [r7, #0]
        const NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 80124fe:	68bb      	ldr	r3, [r7, #8]
 8012500:	613b      	str	r3, [r7, #16]
        BaseType_t xIsIPv6 = pdFALSE;
 8012502:	2300      	movs	r3, #0
 8012504:	617b      	str	r3, [r7, #20]

        if( pxNetworkBuffer != NULL )
 8012506:	693b      	ldr	r3, [r7, #16]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d008      	beq.n	801251e <prvTCPReturnPacket+0x2e>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                if( uxIPHeaderSizePacket( pxNetworkBuffer ) == ipSIZE_OF_IPv6_HEADER )
 801250c:	6938      	ldr	r0, [r7, #16]
 801250e:	f7f6 fd13 	bl	8008f38 <uxIPHeaderSizePacket>
 8012512:	4603      	mov	r3, r0
 8012514:	2b28      	cmp	r3, #40	@ 0x28
 8012516:	d113      	bne.n	8012540 <prvTCPReturnPacket+0x50>
                {
                    xIsIPv6 = pdTRUE;
 8012518:	2301      	movs	r3, #1
 801251a:	617b      	str	r3, [r7, #20]
 801251c:	e010      	b.n	8012540 <prvTCPReturnPacket+0x50>
                }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else if( pxSocket != NULL )
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d008      	beq.n	8012536 <prvTCPReturnPacket+0x46>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                if( uxIPHeaderSizeSocket( pxSocket ) == ipSIZE_OF_IPv6_HEADER )
 8012524:	68f8      	ldr	r0, [r7, #12]
 8012526:	f7f6 fd21 	bl	8008f6c <uxIPHeaderSizeSocket>
 801252a:	4603      	mov	r3, r0
 801252c:	2b28      	cmp	r3, #40	@ 0x28
 801252e:	d107      	bne.n	8012540 <prvTCPReturnPacket+0x50>
                {
                    xIsIPv6 = pdTRUE;
 8012530:	2301      	movs	r3, #1
 8012532:	617b      	str	r3, [r7, #20]
 8012534:	e004      	b.n	8012540 <prvTCPReturnPacket+0x50>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else
        {
            /* prvTCPReturnPacket_IPVx() needs either a network buffer, or a socket. */
            configASSERT( pdFALSE );
 8012536:	f240 1119 	movw	r1, #281	@ 0x119
 801253a:	480c      	ldr	r0, [pc, #48]	@ (801256c <prvTCPReturnPacket+0x7c>)
 801253c:	f7ee fdec 	bl	8001118 <vAssertCalled>
        }

        #if ( ipconfigUSE_IPv6 != 0 )
            if( xIsIPv6 == pdTRUE )
 8012540:	697b      	ldr	r3, [r7, #20]
 8012542:	2b01      	cmp	r3, #1
 8012544:	d105      	bne.n	8012552 <prvTCPReturnPacket+0x62>
            {
                prvTCPReturnPacket_IPV6( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
 8012546:	683b      	ldr	r3, [r7, #0]
 8012548:	687a      	ldr	r2, [r7, #4]
 801254a:	68b9      	ldr	r1, [r7, #8]
 801254c:	68f8      	ldr	r0, [r7, #12]
 801254e:	f001 fa61 	bl	8013a14 <prvTCPReturnPacket_IPV6>
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            if( xIsIPv6 == pdFALSE )
 8012552:	697b      	ldr	r3, [r7, #20]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d105      	bne.n	8012564 <prvTCPReturnPacket+0x74>
            {
                prvTCPReturnPacket_IPV4( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
 8012558:	683b      	ldr	r3, [r7, #0]
 801255a:	687a      	ldr	r2, [r7, #4]
 801255c:	68b9      	ldr	r1, [r7, #8]
 801255e:	68f8      	ldr	r0, [r7, #12]
 8012560:	f000 ff18 	bl	8013394 <prvTCPReturnPacket_IPV4>
            }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
    }
 8012564:	bf00      	nop
 8012566:	3718      	adds	r7, #24
 8012568:	46bd      	mov	sp, r7
 801256a:	bd80      	pop	{r7, pc}
 801256c:	08024b50 	.word	0x08024b50

08012570 <prvTCPReturn_CheckTCPWindow>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_CheckTCPWindow( FreeRTOS_Socket_t * pxSocket,
                                      const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      size_t uxIPHeaderSize )
    {
 8012570:	b580      	push	{r7, lr}
 8012572:	b08a      	sub	sp, #40	@ 0x28
 8012574:	af00      	add	r7, sp, #0
 8012576:	60f8      	str	r0, [r7, #12]
 8012578:	60b9      	str	r1, [r7, #8]
 801257a:	607a      	str	r2, [r7, #4]
        /* Calculate the space in the RX buffer in order to advertise the
         * size of this socket's reception window. */
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012582:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 8012584:	68bb      	ldr	r3, [r7, #8]
 8012586:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 801258c:	4413      	add	r3, r2
 801258e:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.rxStream != NULL )
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012596:	2b00      	cmp	r3, #0
 8012598:	d007      	beq.n	80125aa <prvTCPReturn_CheckTCPWindow+0x3a>
        {
            /* An RX stream was created already, see how much space is
             * available. */
            ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80125a0:	4618      	mov	r0, r3
 80125a2:	f7fd fa9f 	bl	800fae4 <uxStreamBufferFrontSpace>
 80125a6:	6278      	str	r0, [r7, #36]	@ 0x24
 80125a8:	e003      	b.n	80125b2 <prvTCPReturn_CheckTCPWindow+0x42>
        }
        else
        {
            /* No RX stream has been created, the full stream size is
             * available. */
            ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80125b0:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        /* Take the minimum of the RX buffer space and the RX window size. */
        ulSpace = FreeRTOS_min_uint32( pxTCPWindow->xSize.ulRxWindowLength, ulFrontSpace );
 80125b2:	69bb      	ldr	r3, [r7, #24]
 80125b4:	685b      	ldr	r3, [r3, #4]
 80125b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80125b8:	4618      	mov	r0, r3
 80125ba:	f7f7 fa0b 	bl	80099d4 <FreeRTOS_min_uint32>
 80125be:	6238      	str	r0, [r7, #32]

        if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80125c6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80125ca:	b2db      	uxtb	r3, r3
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d107      	bne.n	80125e0 <prvTCPReturn_CheckTCPWindow+0x70>
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 80125d6:	f003 0304 	and.w	r3, r3, #4
 80125da:	b2db      	uxtb	r3, r3
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d001      	beq.n	80125e4 <prvTCPReturn_CheckTCPWindow+0x74>
        {
            /* The low-water mark was reached, meaning there was little
             * space left.  The socket will wait until the application has read
             * or flushed the incoming data, and 'zero-window' will be
             * advertised. */
            ulSpace = 0U;
 80125e0:	2300      	movs	r3, #0
 80125e2:	623b      	str	r3, [r7, #32]
        }

        /* If possible, advertise an RX window size of at least 1 MSS, otherwise
         * the peer might start 'zero window probing', i.e. sending small packets
         * (1, 2, 4, 8... bytes). */
        if( ( ulSpace < pxSocket->u.xTCP.usMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usMSS ) )
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80125ea:	461a      	mov	r2, r3
 80125ec:	6a3b      	ldr	r3, [r7, #32]
 80125ee:	4293      	cmp	r3, r2
 80125f0:	d20a      	bcs.n	8012608 <prvTCPReturn_CheckTCPWindow+0x98>
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80125f8:	461a      	mov	r2, r3
 80125fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125fc:	4293      	cmp	r3, r2
 80125fe:	d303      	bcc.n	8012608 <prvTCPReturn_CheckTCPWindow+0x98>
        {
            ulSpace = pxSocket->u.xTCP.usMSS;
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8012606:	623b      	str	r3, [r7, #32]
        }

        /* Avoid overflow of the 16-bit win field. */
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 801260e:	461a      	mov	r2, r3
 8012610:	6a3b      	ldr	r3, [r7, #32]
 8012612:	40d3      	lsrs	r3, r2
 8012614:	61fb      	str	r3, [r7, #28]
        {
            ulWinSize = ulSpace;
        }
        #endif

        if( ulWinSize > 0xfffcU )
 8012616:	69fb      	ldr	r3, [r7, #28]
 8012618:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801261c:	4293      	cmp	r3, r2
 801261e:	d902      	bls.n	8012626 <prvTCPReturn_CheckTCPWindow+0xb6>
        {
            ulWinSize = 0xfffcU;
 8012620:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8012624:	61fb      	str	r3, [r7, #28]
        }

        pxProtocolHeaders->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 8012626:	69fb      	ldr	r3, [r7, #28]
 8012628:	b29b      	uxth	r3, r3
 801262a:	021b      	lsls	r3, r3, #8
 801262c:	b21a      	sxth	r2, r3
 801262e:	69fb      	ldr	r3, [r7, #28]
 8012630:	b29b      	uxth	r3, r3
 8012632:	0a1b      	lsrs	r3, r3, #8
 8012634:	b29b      	uxth	r3, r3
 8012636:	b21b      	sxth	r3, r3
 8012638:	4313      	orrs	r3, r2
 801263a:	b21b      	sxth	r3, r3
 801263c:	b29a      	uxth	r2, r3
 801263e:	697b      	ldr	r3, [r7, #20]
 8012640:	81da      	strh	r2, [r3, #14]

        /* The new window size has been advertised, switch off the flag. */
        pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 8012642:	68fa      	ldr	r2, [r7, #12]
 8012644:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012648:	f36f 0300 	bfc	r3, #0, #1
 801264c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Later on, when deciding to delay an ACK, a precise estimate is needed
         * of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
         * highest sequence number minus 1 that the socket will accept. */
        pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 8012650:	69bb      	ldr	r3, [r7, #24]
 8012652:	691a      	ldr	r2, [r3, #16]
 8012654:	6a3b      	ldr	r3, [r7, #32]
 8012656:	441a      	add	r2, r3
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
 801265c:	bf00      	nop
 801265e:	3728      	adds	r7, #40	@ 0x28
 8012660:	46bd      	mov	sp, r7
 8012662:	bd80      	pop	{r7, pc}

08012664 <prvTCPReturn_SetSequenceNumber>:
 */
    void prvTCPReturn_SetSequenceNumber( FreeRTOS_Socket_t * pxSocket,
                                         const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                         size_t uxIPHeaderSize,
                                         uint32_t ulLen )
    {
 8012664:	b580      	push	{r7, lr}
 8012666:	b088      	sub	sp, #32
 8012668:	af00      	add	r7, sp, #0
 801266a:	60f8      	str	r0, [r7, #12]
 801266c:	60b9      	str	r1, [r7, #8]
 801266e:	607a      	str	r2, [r7, #4]
 8012670:	603b      	str	r3, [r7, #0]
        ProtocolHeaders_t * pxProtocolHeaders;
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012678:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 801267a:	68bb      	ldr	r3, [r7, #8]
 801267c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012682:	4413      	add	r3, r2
 8012684:	61bb      	str	r3, [r7, #24]
        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801268c:	f003 0302 	and.w	r3, r3, #2
 8012690:	b2db      	uxtb	r3, r3
 8012692:	2b00      	cmp	r3, #0
 8012694:	d029      	beq.n	80126ea <prvTCPReturn_SetSequenceNumber+0x86>
            {
                /* Sending a keep-alive packet, send the current sequence number
                 * minus 1, which will be recognised as a keep-alive packet and
                 * responded to by acknowledging the last byte. */
                pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8012696:	68fa      	ldr	r2, [r7, #12]
 8012698:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801269c:	f36f 0341 	bfc	r3, #1, #1
 80126a0:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 80126a4:	68fa      	ldr	r2, [r7, #12]
 80126a6:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80126aa:	f043 0304 	orr.w	r3, r3, #4
 80126ae:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1U;
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80126b8:	1e5a      	subs	r2, r3, #1
 80126ba:	69bb      	ldr	r3, [r7, #24]
 80126bc:	605a      	str	r2, [r3, #4]
                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 80126be:	69bb      	ldr	r3, [r7, #24]
 80126c0:	685b      	ldr	r3, [r3, #4]
 80126c2:	061a      	lsls	r2, r3, #24
 80126c4:	69bb      	ldr	r3, [r7, #24]
 80126c6:	685b      	ldr	r3, [r3, #4]
 80126c8:	021b      	lsls	r3, r3, #8
 80126ca:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80126ce:	431a      	orrs	r2, r3
 80126d0:	69bb      	ldr	r3, [r7, #24]
 80126d2:	685b      	ldr	r3, [r3, #4]
 80126d4:	0a1b      	lsrs	r3, r3, #8
 80126d6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80126da:	431a      	orrs	r2, r3
 80126dc:	69bb      	ldr	r3, [r7, #24]
 80126de:	685b      	ldr	r3, [r3, #4]
 80126e0:	0e1b      	lsrs	r3, r3, #24
 80126e2:	431a      	orrs	r2, r3
 80126e4:	69bb      	ldr	r3, [r7, #24]
 80126e6:	605a      	str	r2, [r3, #4]
 80126e8:	e043      	b.n	8012772 <prvTCPReturn_SetSequenceNumber+0x10e>
            }
            else
        #endif /* if ( ipconfigTCP_KEEP_ALIVE == 1 ) */
        {
            pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80126f0:	061a      	lsls	r2, r3, #24
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80126f8:	021b      	lsls	r3, r3, #8
 80126fa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80126fe:	431a      	orrs	r2, r3
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8012706:	0a1b      	lsrs	r3, r3, #8
 8012708:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801270c:	431a      	orrs	r2, r3
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8012714:	0e1b      	lsrs	r3, r3, #24
 8012716:	431a      	orrs	r2, r3
 8012718:	69bb      	ldr	r3, [r7, #24]
 801271a:	605a      	str	r2, [r3, #4]

            if( ( pxProtocolHeaders->xTCPHeader.ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U )
 801271c:	69bb      	ldr	r3, [r7, #24]
 801271e:	7b5b      	ldrb	r3, [r3, #13]
 8012720:	f003 0301 	and.w	r3, r3, #1
 8012724:	2b00      	cmp	r3, #0
 8012726:	d024      	beq.n	8012772 <prvTCPReturn_SetSequenceNumber+0x10e>
            {
                /* Suppress FIN in case this packet carries earlier data to be
                 * retransmitted. */
                uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + uxIPHeaderSizeSocket( pxSocket ) ) );
 8012728:	68f8      	ldr	r0, [r7, #12]
 801272a:	f7f6 fc1f 	bl	8008f6c <uxIPHeaderSizeSocket>
 801272e:	4602      	mov	r2, r0
 8012730:	683b      	ldr	r3, [r7, #0]
 8012732:	1a9b      	subs	r3, r3, r2
 8012734:	3b14      	subs	r3, #20
 8012736:	617b      	str	r3, [r7, #20]

                if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 8012738:	69fb      	ldr	r3, [r7, #28]
 801273a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801273c:	697b      	ldr	r3, [r7, #20]
 801273e:	441a      	add	r2, r3
 8012740:	69fb      	ldr	r3, [r7, #28]
 8012742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012744:	429a      	cmp	r2, r3
 8012746:	d014      	beq.n	8012772 <prvTCPReturn_SetSequenceNumber+0x10e>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_FIN );
 8012748:	69bb      	ldr	r3, [r7, #24]
 801274a:	7b5b      	ldrb	r3, [r3, #13]
 801274c:	f023 0301 	bic.w	r3, r3, #1
 8012750:	b2da      	uxtb	r2, r3
 8012752:	69bb      	ldr	r3, [r7, #24]
 8012754:	735a      	strb	r2, [r3, #13]
                    FreeRTOS_debug_printf( ( "Suppress FIN for %u + %u < %u\n",
 8012756:	69fb      	ldr	r3, [r7, #28]
 8012758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801275a:	69fb      	ldr	r3, [r7, #28]
 801275c:	69db      	ldr	r3, [r3, #28]
 801275e:	1ad1      	subs	r1, r2, r3
 8012760:	69fb      	ldr	r3, [r7, #28]
 8012762:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012764:	69fb      	ldr	r3, [r7, #28]
 8012766:	69db      	ldr	r3, [r3, #28]
 8012768:	1ad3      	subs	r3, r2, r3
 801276a:	697a      	ldr	r2, [r7, #20]
 801276c:	480d      	ldr	r0, [pc, #52]	@ (80127a4 <prvTCPReturn_SetSequenceNumber+0x140>)
 801276e:	f00d fedd 	bl	802052c <lUDPLoggingPrintf>
                }
            }
        }

        /* Tell which sequence number is expected next time */
        pxProtocolHeaders->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 8012772:	69fb      	ldr	r3, [r7, #28]
 8012774:	691b      	ldr	r3, [r3, #16]
 8012776:	061a      	lsls	r2, r3, #24
 8012778:	69fb      	ldr	r3, [r7, #28]
 801277a:	691b      	ldr	r3, [r3, #16]
 801277c:	021b      	lsls	r3, r3, #8
 801277e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012782:	431a      	orrs	r2, r3
 8012784:	69fb      	ldr	r3, [r7, #28]
 8012786:	691b      	ldr	r3, [r3, #16]
 8012788:	0a1b      	lsrs	r3, r3, #8
 801278a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801278e:	431a      	orrs	r2, r3
 8012790:	69fb      	ldr	r3, [r7, #28]
 8012792:	691b      	ldr	r3, [r3, #16]
 8012794:	0e1b      	lsrs	r3, r3, #24
 8012796:	431a      	orrs	r2, r3
 8012798:	69bb      	ldr	r3, [r7, #24]
 801279a:	609a      	str	r2, [r3, #8]
    }
 801279c:	bf00      	nop
 801279e:	3720      	adds	r7, #32
 80127a0:	46bd      	mov	sp, r7
 80127a2:	bd80      	pop	{r7, pc}
 80127a4:	08024b8c 	.word	0x08024b8c

080127a8 <prvTCPCreateWindow>:
 *       random starting value, are being synchronized. The sliding window manager
 *       (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 *       Size (MSS).
 */
    BaseType_t prvTCPCreateWindow( FreeRTOS_Socket_t * pxSocket )
    {
 80127a8:	b5b0      	push	{r4, r5, r7, lr}
 80127aa:	b088      	sub	sp, #32
 80127ac:	af02      	add	r7, sp, #8
 80127ae:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        uint32_t ulRxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxRxWinSize;
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80127b6:	617b      	str	r3, [r7, #20]
        uint32_t ulTxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxTxWinSize;
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80127be:	613b      	str	r3, [r7, #16]

        if( xTCPWindowLoggingLevel != 0 )
 80127c0:	4b1d      	ldr	r3, [pc, #116]	@ (8012838 <prvTCPCreateWindow+0x90>)
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d014      	beq.n	80127f2 <prvTCPCreateWindow+0x4a>
        {
            FreeRTOS_debug_printf( ( "Limits (using): TCP Win size %u Water %u <= %u <= %u\n",
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80127ce:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80127d2:	fb02 f103 	mul.w	r1, r2, r3
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80127e8:	9300      	str	r3, [sp, #0]
 80127ea:	4603      	mov	r3, r0
 80127ec:	4813      	ldr	r0, [pc, #76]	@ (801283c <prvTCPCreateWindow+0x94>)
 80127ee:	f00d fe9d 	bl	802052c <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxLittleSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxEnoughSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxRxStreamSize ) );
        }

        xReturn = xTCPWindowCreate(
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 80127f8:	697b      	ldr	r3, [r7, #20]
 80127fa:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80127fe:	fb02 f103 	mul.w	r1, r2, r3
 8012802:	693b      	ldr	r3, [r7, #16]
 8012804:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8012808:	fb02 f403 	mul.w	r4, r2, r3
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	f8d3 5130 	ldr.w	r5, [r3, #304]	@ 0x130
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
            &pxSocket->u.xTCP.xTCPWindow,
            ulRxWindowSize * ipconfigTCP_MSS,
            ulTxWindowSize * ipconfigTCP_MSS,
            pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
            ( uint32_t ) pxSocket->u.xTCP.usMSS );
 8012818:	687a      	ldr	r2, [r7, #4]
 801281a:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
        xReturn = xTCPWindowCreate(
 801281e:	9201      	str	r2, [sp, #4]
 8012820:	9300      	str	r3, [sp, #0]
 8012822:	462b      	mov	r3, r5
 8012824:	4622      	mov	r2, r4
 8012826:	f001 ffd7 	bl	80147d8 <xTCPWindowCreate>
 801282a:	60f8      	str	r0, [r7, #12]

        return xReturn;
 801282c:	68fb      	ldr	r3, [r7, #12]
    }
 801282e:	4618      	mov	r0, r3
 8012830:	3718      	adds	r7, #24
 8012832:	46bd      	mov	sp, r7
 8012834:	bdb0      	pop	{r4, r5, r7, pc}
 8012836:	bf00      	nop
 8012838:	200012f4 	.word	0x200012f4
 801283c:	08024bac 	.word	0x08024bac

08012840 <prvTCPPrepareConnect>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
    static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t * pxSocket )
    {
 8012840:	b580      	push	{r7, lr}
 8012842:	b084      	sub	sp, #16
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 8012848:	2301      	movs	r3, #1
 801284a:	60fb      	str	r3, [r7, #12]

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	7a1b      	ldrb	r3, [r3, #8]
 8012850:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8012854:	b2db      	uxtb	r3, r3
 8012856:	2b00      	cmp	r3, #0
 8012858:	d002      	beq.n	8012860 <prvTCPPrepareConnect+0x20>
 801285a:	2b01      	cmp	r3, #1
 801285c:	d005      	beq.n	801286a <prvTCPPrepareConnect+0x2a>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 801285e:	e009      	b.n	8012874 <prvTCPPrepareConnect+0x34>
                    xReturn = prvTCPPrepareConnect_IPV4( pxSocket );
 8012860:	6878      	ldr	r0, [r7, #4]
 8012862:	f000 ff69 	bl	8013738 <prvTCPPrepareConnect_IPV4>
 8012866:	60f8      	str	r0, [r7, #12]
                    break;
 8012868:	e004      	b.n	8012874 <prvTCPPrepareConnect+0x34>
                    xReturn = prvTCPPrepareConnect_IPV6( pxSocket );
 801286a:	6878      	ldr	r0, [r7, #4]
 801286c:	f001 fab4 	bl	8013dd8 <prvTCPPrepareConnect_IPV6>
 8012870:	60f8      	str	r0, [r7, #12]
                    break;
 8012872:	bf00      	nop
        }

        return xReturn;
 8012874:	68fb      	ldr	r3, [r7, #12]
    }
 8012876:	4618      	mov	r0, r3
 8012878:	3710      	adds	r7, #16
 801287a:	46bd      	mov	sp, r7
 801287c:	bd80      	pop	{r7, pc}
	...

08012880 <prvWinScaleFactor>:
 * @param[in] pxSocket The socket owning the TCP connection.
 *
 * @return The scaling factor.
 */
        static uint8_t prvWinScaleFactor( const FreeRTOS_Socket_t * pxSocket )
        {
 8012880:	b580      	push	{r7, lr}
 8012882:	b084      	sub	sp, #16
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
            size_t uxWinSize;
            uint8_t ucFactor;


            /* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
            uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usMSS;
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 801288e:	687a      	ldr	r2, [r7, #4]
 8012890:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
 8012894:	fb02 f303 	mul.w	r3, r2, r3
 8012898:	60fb      	str	r3, [r7, #12]
            ucFactor = 0U;
 801289a:	2300      	movs	r3, #0
 801289c:	72fb      	strb	r3, [r7, #11]

            while( uxWinSize > 0xffffU )
 801289e:	e005      	b.n	80128ac <prvWinScaleFactor+0x2c>
            {
                /* Divide by two and increase the binary factor by 1. */
                uxWinSize >>= 1;
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	085b      	lsrs	r3, r3, #1
 80128a4:	60fb      	str	r3, [r7, #12]
                ucFactor++;
 80128a6:	7afb      	ldrb	r3, [r7, #11]
 80128a8:	3301      	adds	r3, #1
 80128aa:	72fb      	strb	r3, [r7, #11]
            while( uxWinSize > 0xffffU )
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80128b2:	d2f5      	bcs.n	80128a0 <prvWinScaleFactor+0x20>
            }

            FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %u MSS %u Factor %u\n",
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	f8d3 1118 	ldr.w	r1, [r3, #280]	@ 0x118
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80128c0:	461a      	mov	r2, r3
 80128c2:	7afb      	ldrb	r3, [r7, #11]
 80128c4:	4803      	ldr	r0, [pc, #12]	@ (80128d4 <prvWinScaleFactor+0x54>)
 80128c6:	f00d fe31 	bl	802052c <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxRxWinSize,
                                     pxSocket->u.xTCP.usMSS,
                                     ucFactor ) );

            return ucFactor;
 80128ca:	7afb      	ldrb	r3, [r7, #11]
        }
 80128cc:	4618      	mov	r0, r3
 80128ce:	3710      	adds	r7, #16
 80128d0:	46bd      	mov	sp, r7
 80128d2:	bd80      	pop	{r7, pc}
 80128d4:	08024be4 	.word	0x08024be4

080128d8 <prvSetSynAckOptions>:
 *
 * @note MSS is the net size of the payload, an is always smaller than MTU.
 */
    UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t * pxSocket,
                                     TCPHeader_t * pxTCPHeader )
    {
 80128d8:	b580      	push	{r7, lr}
 80128da:	b084      	sub	sp, #16
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
 80128e0:	6039      	str	r1, [r7, #0]
        uint16_t usMSS = pxSocket->u.xTCP.usMSS;
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80128e8:	81fb      	strh	r3, [r7, #14]
        UBaseType_t uxOptionsLength;

        /* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */

        pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) tcpTCP_OPT_MSS;
 80128ea:	683b      	ldr	r3, [r7, #0]
 80128ec:	2202      	movs	r2, #2
 80128ee:	751a      	strb	r2, [r3, #20]
        pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) tcpTCP_OPT_MSS_LEN;
 80128f0:	683b      	ldr	r3, [r7, #0]
 80128f2:	2204      	movs	r2, #4
 80128f4:	755a      	strb	r2, [r3, #21]
        pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 80128f6:	89fb      	ldrh	r3, [r7, #14]
 80128f8:	0a1b      	lsrs	r3, r3, #8
 80128fa:	b29b      	uxth	r3, r3
 80128fc:	b2da      	uxtb	r2, r3
 80128fe:	683b      	ldr	r3, [r7, #0]
 8012900:	759a      	strb	r2, [r3, #22]
        pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffU );
 8012902:	89fb      	ldrh	r3, [r7, #14]
 8012904:	b2da      	uxtb	r2, r3
 8012906:	683b      	ldr	r3, [r7, #0]
 8012908:	75da      	strb	r2, [r3, #23]

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 801290a:	6878      	ldr	r0, [r7, #4]
 801290c:	f7ff ffb8 	bl	8012880 <prvWinScaleFactor>
 8012910:	4603      	mov	r3, r0
 8012912:	461a      	mov	r2, r3
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105

            pxTCPHeader->ucOptdata[ 4 ] = tcpTCP_OPT_NOOP;
 801291a:	683b      	ldr	r3, [r7, #0]
 801291c:	2201      	movs	r2, #1
 801291e:	761a      	strb	r2, [r3, #24]
            pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT );
 8012920:	683b      	ldr	r3, [r7, #0]
 8012922:	2203      	movs	r2, #3
 8012924:	765a      	strb	r2, [r3, #25]
            pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT_LEN );
 8012926:	683b      	ldr	r3, [r7, #0]
 8012928:	2203      	movs	r2, #3
 801292a:	769a      	strb	r2, [r3, #26]
            pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	f893 2105 	ldrb.w	r2, [r3, #261]	@ 0x105
 8012932:	683b      	ldr	r3, [r7, #0]
 8012934:	76da      	strb	r2, [r3, #27]
            uxOptionsLength = 8U;
 8012936:	2308      	movs	r3, #8
 8012938:	60bb      	str	r3, [r7, #8]
        }
        #endif /* if ( ipconfigUSE_TCP_WIN != 0 ) */

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxTCPHeader->ucOptdata[ uxOptionsLength ] = tcpTCP_OPT_NOOP;
 801293a:	683a      	ldr	r2, [r7, #0]
 801293c:	68bb      	ldr	r3, [r7, #8]
 801293e:	4413      	add	r3, r2
 8012940:	3314      	adds	r3, #20
 8012942:	2201      	movs	r2, #1
 8012944:	701a      	strb	r2, [r3, #0]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 1U ] = tcpTCP_OPT_NOOP;
 8012946:	68bb      	ldr	r3, [r7, #8]
 8012948:	3301      	adds	r3, #1
 801294a:	683a      	ldr	r2, [r7, #0]
 801294c:	4413      	add	r3, r2
 801294e:	2201      	movs	r2, #1
 8012950:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 2U ] = tcpTCP_OPT_SACK_P; /* 4: Sack-Permitted Option. */
 8012952:	68bb      	ldr	r3, [r7, #8]
 8012954:	3302      	adds	r3, #2
 8012956:	683a      	ldr	r2, [r7, #0]
 8012958:	4413      	add	r3, r2
 801295a:	2204      	movs	r2, #4
 801295c:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 3U ] = 2U;                /* 2: length of this option. */
 801295e:	68bb      	ldr	r3, [r7, #8]
 8012960:	3303      	adds	r3, #3
 8012962:	683a      	ldr	r2, [r7, #0]
 8012964:	4413      	add	r3, r2
 8012966:	2202      	movs	r2, #2
 8012968:	751a      	strb	r2, [r3, #20]
            uxOptionsLength += 4U;
 801296a:	68bb      	ldr	r3, [r7, #8]
 801296c:	3304      	adds	r3, #4
 801296e:	60bb      	str	r3, [r7, #8]
        }
        #endif /* ipconfigUSE_TCP_WIN == 0 */
        return uxOptionsLength; /* bytes, not words. */
 8012970:	68bb      	ldr	r3, [r7, #8]
    }
 8012972:	4618      	mov	r0, r3
 8012974:	3710      	adds	r7, #16
 8012976:	46bd      	mov	sp, r7
 8012978:	bd80      	pop	{r7, pc}
	...

0801297c <prvTCPBufferResize>:
 */
    NetworkBufferDescriptor_t * prvTCPBufferResize( const FreeRTOS_Socket_t * pxSocket,
                                                    NetworkBufferDescriptor_t * pxNetworkBuffer,
                                                    int32_t lDataLen,
                                                    UBaseType_t uxOptionsLength )
    {
 801297c:	b580      	push	{r7, lr}
 801297e:	b088      	sub	sp, #32
 8012980:	af00      	add	r7, sp, #0
 8012982:	60f8      	str	r0, [r7, #12]
 8012984:	60b9      	str	r1, [r7, #8]
 8012986:	607a      	str	r2, [r7, #4]
 8012988:	603b      	str	r3, [r7, #0]
        NetworkBufferDescriptor_t * pxReturn;
        size_t uxNeeded;
        BaseType_t xResize;

        if( xBufferAllocFixedSize != pdFALSE )
 801298a:	4b38      	ldr	r3, [pc, #224]	@ (8012a6c <prvTCPBufferResize+0xf0>)
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d00b      	beq.n	80129aa <prvTCPBufferResize+0x2e>
        {
            /* Network buffers are created with a fixed size and can hold the largest
             * MTU. */
            uxNeeded = ( size_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 8012992:	f240 53f2 	movw	r3, #1522	@ 0x5f2
 8012996:	61bb      	str	r3, [r7, #24]

            /* and therefore, the buffer won't be too small.
             * Only ask for a new network buffer in case none was supplied. */
            if( pxNetworkBuffer == NULL )
 8012998:	68bb      	ldr	r3, [r7, #8]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d102      	bne.n	80129a4 <prvTCPBufferResize+0x28>
            {
                xResize = pdTRUE;
 801299e:	2301      	movs	r3, #1
 80129a0:	617b      	str	r3, [r7, #20]
 80129a2:	e020      	b.n	80129e6 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 80129a4:	2300      	movs	r3, #0
 80129a6:	617b      	str	r3, [r7, #20]
 80129a8:	e01d      	b.n	80129e6 <prvTCPBufferResize+0x6a>
        }
        else
        {
            /* Network buffers are created with a variable size. See if it must
             * grow. */
            uxNeeded = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80129aa:	68f8      	ldr	r0, [r7, #12]
 80129ac:	f7f6 fade 	bl	8008f6c <uxIPHeaderSizeSocket>
 80129b0:	4602      	mov	r2, r0
 80129b2:	683b      	ldr	r3, [r7, #0]
 80129b4:	4413      	add	r3, r2
 80129b6:	3322      	adds	r3, #34	@ 0x22
 80129b8:	61bb      	str	r3, [r7, #24]
            uxNeeded += ( size_t ) lDataLen;
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	69ba      	ldr	r2, [r7, #24]
 80129be:	4413      	add	r3, r2
 80129c0:	61bb      	str	r3, [r7, #24]

            if( uxNeeded < sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) )
 80129c2:	69bb      	ldr	r3, [r7, #24]
 80129c4:	2b59      	cmp	r3, #89	@ 0x59
 80129c6:	d801      	bhi.n	80129cc <prvTCPBufferResize+0x50>
            {
                uxNeeded = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 80129c8:	235a      	movs	r3, #90	@ 0x5a
 80129ca:	61bb      	str	r3, [r7, #24]
            }

            /* In case we were called from a TCP timer event, a buffer must be
             *  created.  Otherwise, test 'xDataLength' of the provided buffer. */
            if( ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < uxNeeded ) )
 80129cc:	68bb      	ldr	r3, [r7, #8]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d004      	beq.n	80129dc <prvTCPBufferResize+0x60>
 80129d2:	68bb      	ldr	r3, [r7, #8]
 80129d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80129d6:	69ba      	ldr	r2, [r7, #24]
 80129d8:	429a      	cmp	r2, r3
 80129da:	d902      	bls.n	80129e2 <prvTCPBufferResize+0x66>
            {
                xResize = pdTRUE;
 80129dc:	2301      	movs	r3, #1
 80129de:	617b      	str	r3, [r7, #20]
 80129e0:	e001      	b.n	80129e6 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 80129e2:	2300      	movs	r3, #0
 80129e4:	617b      	str	r3, [r7, #20]
            }
        }

        if( xResize != pdFALSE )
 80129e6:	697b      	ldr	r3, [r7, #20]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d023      	beq.n	8012a34 <prvTCPBufferResize+0xb8>
        {
            /* The caller didn't provide a network buffer or the provided buffer is
             * too small.  As we must send-out a data packet, a buffer will be created
             * here. */
            pxReturn = pxGetNetworkBufferWithDescriptor( uxNeeded, 0U );
 80129ec:	2100      	movs	r1, #0
 80129ee:	69b8      	ldr	r0, [r7, #24]
 80129f0:	f003 fc4a 	bl	8016288 <pxGetNetworkBufferWithDescriptor>
 80129f4:	61f8      	str	r0, [r7, #28]

            if( pxReturn != NULL )
 80129f6:	69fb      	ldr	r3, [r7, #28]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d031      	beq.n	8012a60 <prvTCPBufferResize+0xe4>
            {
                /* Set the actual packet size, in case the returned buffer is larger. */
                pxReturn->xDataLength = uxNeeded;
 80129fc:	69fb      	ldr	r3, [r7, #28]
 80129fe:	69ba      	ldr	r2, [r7, #24]
 8012a00:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Copy the existing data to the new created buffer. */
                if( pxNetworkBuffer != NULL )
 8012a02:	68bb      	ldr	r3, [r7, #8]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d00c      	beq.n	8012a22 <prvTCPBufferResize+0xa6>
                {
                    /* Either from the previous buffer... */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 8012a08:	69fb      	ldr	r3, [r7, #28]
 8012a0a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8012a0c:	68bb      	ldr	r3, [r7, #8]
 8012a0e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012a10:	68bb      	ldr	r3, [r7, #8]
 8012a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a14:	461a      	mov	r2, r3
 8012a16:	f00d ffa5 	bl	8020964 <memcpy>

                    /* ...and release it. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8012a1a:	68b8      	ldr	r0, [r7, #8]
 8012a1c:	f003 fc9c 	bl	8016358 <vReleaseNetworkBufferAndDescriptor>
 8012a20:	e01e      	b.n	8012a60 <prvTCPBufferResize+0xe4>
                }
                else
                {
                    /* Or from the socket field 'xTCP.xPacket'. */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8012a22:	69fb      	ldr	r3, [r7, #28]
 8012a24:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	33aa      	adds	r3, #170	@ 0xaa
 8012a2a:	225a      	movs	r2, #90	@ 0x5a
 8012a2c:	4619      	mov	r1, r3
 8012a2e:	f00d ff99 	bl	8020964 <memcpy>
 8012a32:	e015      	b.n	8012a60 <prvTCPBufferResize+0xe4>
            }
        }
        else
        {
            /* xResize is false, the network buffer provided was big enough. */
            configASSERT( pxNetworkBuffer != NULL ); /* LCOV_EXCL_BR_LINE this branch will not be covered, since it would never be NULL. to tell lint: when xResize is false, pxNetworkBuffer is not NULL. */
 8012a34:	68bb      	ldr	r3, [r7, #8]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d104      	bne.n	8012a44 <prvTCPBufferResize+0xc8>
 8012a3a:	f240 21ca 	movw	r1, #714	@ 0x2ca
 8012a3e:	480c      	ldr	r0, [pc, #48]	@ (8012a70 <prvTCPBufferResize+0xf4>)
 8012a40:	f7ee fb6a 	bl	8001118 <vAssertCalled>
            pxReturn = pxNetworkBuffer;
 8012a44:	68bb      	ldr	r3, [r7, #8]
 8012a46:	61fb      	str	r3, [r7, #28]

            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 8012a48:	68f8      	ldr	r0, [r7, #12]
 8012a4a:	f7f6 fa8f 	bl	8008f6c <uxIPHeaderSizeSocket>
 8012a4e:	4602      	mov	r2, r0
 8012a50:	683b      	ldr	r3, [r7, #0]
 8012a52:	441a      	add	r2, r3
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	4413      	add	r3, r2
 8012a58:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8012a5c:	68bb      	ldr	r3, [r7, #8]
 8012a5e:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        return pxReturn;
 8012a60:	69fb      	ldr	r3, [r7, #28]
    }
 8012a62:	4618      	mov	r0, r3
 8012a64:	3720      	adds	r7, #32
 8012a66:	46bd      	mov	sp, r7
 8012a68:	bd80      	pop	{r7, pc}
 8012a6a:	bf00      	nop
 8012a6c:	08025cb0 	.word	0x08025cb0
 8012a70:	08024b50 	.word	0x08024b50

08012a74 <prvTCPReturn_SetEndPoint>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_SetEndPoint( const FreeRTOS_Socket_t * pxSocket,
                                   NetworkBufferDescriptor_t * pxNetworkBuffer,
                                   size_t uxIPHeaderSize )
    {
 8012a74:	b580      	push	{r7, lr}
 8012a76:	b086      	sub	sp, #24
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	60f8      	str	r0, [r7, #12]
 8012a7c:	60b9      	str	r1, [r7, #8]
 8012a7e:	607a      	str	r2, [r7, #4]
        #if ( ipconfigUSE_IPv4 != 0 )
            const IPHeader_t * pxIPHeader = NULL;
 8012a80:	2300      	movs	r3, #0
 8012a82:	617b      	str	r3, [r7, #20]
        #endif
        #if ( ipconfigUSE_IPv6 != 0 )
            const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
 8012a84:	2300      	movs	r3, #0
 8012a86:	613b      	str	r3, [r7, #16]
        #endif

        if( ( pxSocket != NULL ) && ( pxSocket->pxEndPoint != NULL ) )
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d008      	beq.n	8012aa0 <prvTCPReturn_SetEndPoint+0x2c>
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d004      	beq.n	8012aa0 <prvTCPReturn_SetEndPoint+0x2c>
        {
            pxNetworkBuffer->pxEndPoint = pxSocket->pxEndPoint;
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012a9a:	68bb      	ldr	r3, [r7, #8]
 8012a9c:	631a      	str	r2, [r3, #48]	@ 0x30
                FreeRTOS_printf( ( "prvTCPReturnPacket: packet's end-point %02x-%02x\n",
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 4 ],
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 5 ] ) );
            }
        }
    }
 8012a9e:	e078      	b.n	8012b92 <prvTCPReturn_SetEndPoint+0x11e>
            FreeRTOS_printf( ( "prvTCPReturnPacket: No pxEndPoint yet?\n" ) );
 8012aa0:	483e      	ldr	r0, [pc, #248]	@ (8012b9c <prvTCPReturn_SetEndPoint+0x128>)
 8012aa2:	f00d fd43 	bl	802052c <lUDPLoggingPrintf>
            switch( uxIPHeaderSize )
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	2b14      	cmp	r3, #20
 8012aaa:	d003      	beq.n	8012ab4 <prvTCPReturn_SetEndPoint+0x40>
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	2b28      	cmp	r3, #40	@ 0x28
 8012ab0:	d03d      	beq.n	8012b2e <prvTCPReturn_SetEndPoint+0xba>
 8012ab2:	e056      	b.n	8012b62 <prvTCPReturn_SetEndPoint+0xee>
                        pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8012ab4:	68bb      	ldr	r3, [r7, #8]
 8012ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ab8:	330e      	adds	r3, #14
 8012aba:	617b      	str	r3, [r7, #20]
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPHeader->ulDestinationIPAddress, 8 );
 8012abc:	697b      	ldr	r3, [r7, #20]
 8012abe:	691b      	ldr	r3, [r3, #16]
 8012ac0:	2108      	movs	r1, #8
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	f7f9 fea8 	bl	800c818 <FreeRTOS_FindEndPointOnNetMask>
 8012ac8:	4602      	mov	r2, r0
 8012aca:	68bb      	ldr	r3, [r7, #8]
 8012acc:	631a      	str	r2, [r3, #48]	@ 0x30
                        if( pxNetworkBuffer->pxEndPoint == NULL )
 8012ace:	68bb      	ldr	r3, [r7, #8]
 8012ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d149      	bne.n	8012b6a <prvTCPReturn_SetEndPoint+0xf6>
                            FreeRTOS_printf( ( "prvTCPReturnPacket: no such end-point %xip => %xip\n",
 8012ad6:	697b      	ldr	r3, [r7, #20]
 8012ad8:	68db      	ldr	r3, [r3, #12]
 8012ada:	061a      	lsls	r2, r3, #24
 8012adc:	697b      	ldr	r3, [r7, #20]
 8012ade:	68db      	ldr	r3, [r3, #12]
 8012ae0:	021b      	lsls	r3, r3, #8
 8012ae2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012ae6:	431a      	orrs	r2, r3
 8012ae8:	697b      	ldr	r3, [r7, #20]
 8012aea:	68db      	ldr	r3, [r3, #12]
 8012aec:	0a1b      	lsrs	r3, r3, #8
 8012aee:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012af2:	431a      	orrs	r2, r3
 8012af4:	697b      	ldr	r3, [r7, #20]
 8012af6:	68db      	ldr	r3, [r3, #12]
 8012af8:	0e1b      	lsrs	r3, r3, #24
 8012afa:	ea42 0103 	orr.w	r1, r2, r3
 8012afe:	697b      	ldr	r3, [r7, #20]
 8012b00:	691b      	ldr	r3, [r3, #16]
 8012b02:	061a      	lsls	r2, r3, #24
 8012b04:	697b      	ldr	r3, [r7, #20]
 8012b06:	691b      	ldr	r3, [r3, #16]
 8012b08:	021b      	lsls	r3, r3, #8
 8012b0a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012b0e:	431a      	orrs	r2, r3
 8012b10:	697b      	ldr	r3, [r7, #20]
 8012b12:	691b      	ldr	r3, [r3, #16]
 8012b14:	0a1b      	lsrs	r3, r3, #8
 8012b16:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012b1a:	431a      	orrs	r2, r3
 8012b1c:	697b      	ldr	r3, [r7, #20]
 8012b1e:	691b      	ldr	r3, [r3, #16]
 8012b20:	0e1b      	lsrs	r3, r3, #24
 8012b22:	4313      	orrs	r3, r2
 8012b24:	461a      	mov	r2, r3
 8012b26:	481e      	ldr	r0, [pc, #120]	@ (8012ba0 <prvTCPReturn_SetEndPoint+0x12c>)
 8012b28:	f00d fd00 	bl	802052c <lUDPLoggingPrintf>
                        break;
 8012b2c:	e01d      	b.n	8012b6a <prvTCPReturn_SetEndPoint+0xf6>
                        pxIPHeader_IPv6 = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8012b2e:	68bb      	ldr	r3, [r7, #8]
 8012b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b32:	330e      	adds	r3, #14
 8012b34:	613b      	str	r3, [r7, #16]
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv6( &( pxIPHeader_IPv6->xDestinationAddress ) );
 8012b36:	693b      	ldr	r3, [r7, #16]
 8012b38:	3318      	adds	r3, #24
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	f7f9 fe26 	bl	800c78c <FreeRTOS_FindEndPointOnIP_IPv6>
 8012b40:	4602      	mov	r2, r0
 8012b42:	68bb      	ldr	r3, [r7, #8]
 8012b44:	631a      	str	r2, [r3, #48]	@ 0x30
                        if( pxNetworkBuffer->pxEndPoint == NULL )
 8012b46:	68bb      	ldr	r3, [r7, #8]
 8012b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d10f      	bne.n	8012b6e <prvTCPReturn_SetEndPoint+0xfa>
                            FreeRTOS_printf( ( "prvTCPReturnPacket: no such end-point %pip => %pip\n",
 8012b4e:	693b      	ldr	r3, [r7, #16]
 8012b50:	f103 0108 	add.w	r1, r3, #8
 8012b54:	693b      	ldr	r3, [r7, #16]
 8012b56:	3318      	adds	r3, #24
 8012b58:	461a      	mov	r2, r3
 8012b5a:	4812      	ldr	r0, [pc, #72]	@ (8012ba4 <prvTCPReturn_SetEndPoint+0x130>)
 8012b5c:	f00d fce6 	bl	802052c <lUDPLoggingPrintf>
                        break;
 8012b60:	e005      	b.n	8012b6e <prvTCPReturn_SetEndPoint+0xfa>
                    pxNetworkBuffer->pxEndPoint = NULL;
 8012b62:	68bb      	ldr	r3, [r7, #8]
 8012b64:	2200      	movs	r2, #0
 8012b66:	631a      	str	r2, [r3, #48]	@ 0x30
                    break;
 8012b68:	e002      	b.n	8012b70 <prvTCPReturn_SetEndPoint+0xfc>
                        break;
 8012b6a:	bf00      	nop
 8012b6c:	e000      	b.n	8012b70 <prvTCPReturn_SetEndPoint+0xfc>
                        break;
 8012b6e:	bf00      	nop
            if( pxNetworkBuffer->pxEndPoint != NULL )
 8012b70:	68bb      	ldr	r3, [r7, #8]
 8012b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d00c      	beq.n	8012b92 <prvTCPReturn_SetEndPoint+0x11e>
                FreeRTOS_printf( ( "prvTCPReturnPacket: packet's end-point %02x-%02x\n",
 8012b78:	68bb      	ldr	r3, [r7, #8]
 8012b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012b7c:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8012b80:	4619      	mov	r1, r3
 8012b82:	68bb      	ldr	r3, [r7, #8]
 8012b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012b86:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 8012b8a:	461a      	mov	r2, r3
 8012b8c:	4806      	ldr	r0, [pc, #24]	@ (8012ba8 <prvTCPReturn_SetEndPoint+0x134>)
 8012b8e:	f00d fccd 	bl	802052c <lUDPLoggingPrintf>
    }
 8012b92:	bf00      	nop
 8012b94:	3718      	adds	r7, #24
 8012b96:	46bd      	mov	sp, r7
 8012b98:	bd80      	pop	{r7, pc}
 8012b9a:	bf00      	nop
 8012b9c:	08024c18 	.word	0x08024c18
 8012ba0:	08024c40 	.word	0x08024c40
 8012ba4:	08024c74 	.word	0x08024c74
 8012ba8:	08024ca8 	.word	0x08024ca8

08012bac <prvTCPPrepareSend>:
 *         is returned in case of any error.
 */
    int32_t prvTCPPrepareSend( FreeRTOS_Socket_t * pxSocket,
                               NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                               UBaseType_t uxOptionsLength )
    {
 8012bac:	b580      	push	{r7, lr}
 8012bae:	b096      	sub	sp, #88	@ 0x58
 8012bb0:	af02      	add	r7, sp, #8
 8012bb2:	60f8      	str	r0, [r7, #12]
 8012bb4:	60b9      	str	r1, [r7, #8]
 8012bb6:	607a      	str	r2, [r7, #4]
        size_t uxOffset;
        uint32_t ulDataGot, ulDistance;
        TCPWindow_t * pxTCPWindow;
        NetworkBufferDescriptor_t * pxNewBuffer;
        int32_t lStreamPos;
        UBaseType_t uxIntermediateResult = 0;
 8012bb8:	2300      	movs	r3, #0
 8012bba:	63fb      	str	r3, [r7, #60]	@ 0x3c

        if( ( *ppxNetworkBuffer ) != NULL )
 8012bbc:	68bb      	ldr	r3, [r7, #8]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d004      	beq.n	8012bce <prvTCPPrepareSend+0x22>
        {
            /* A network buffer descriptor was already supplied */
            pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 8012bc4:	68bb      	ldr	r3, [r7, #8]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012bca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012bcc:	e002      	b.n	8012bd4 <prvTCPPrepareSend+0x28>
        }
        else
        {
            /* For now let it point to the last packet header */
            pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	33aa      	adds	r3, #170	@ 0xaa
 8012bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8012bd4:	68f8      	ldr	r0, [r7, #12]
 8012bd6:	f7f6 f9c9 	bl	8008f6c <uxIPHeaderSizeSocket>
 8012bda:	4603      	mov	r3, r0
 8012bdc:	330e      	adds	r3, #14
 8012bde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012be0:	4413      	add	r3, r2
 8012be2:	647b      	str	r3, [r7, #68]	@ 0x44
        pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012bea:	63bb      	str	r3, [r7, #56]	@ 0x38
        lDataLen = 0;
 8012bec:	2300      	movs	r3, #0
 8012bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
        lStreamPos = 0;
 8012bf0:	2300      	movs	r3, #0
 8012bf2:	613b      	str	r3, [r7, #16]
        pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_ACK;
 8012bf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012bf6:	7b5b      	ldrb	r3, [r3, #13]
 8012bf8:	f043 0310 	orr.w	r3, r3, #16
 8012bfc:	b2da      	uxtb	r2, r3
 8012bfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012c00:	735a      	strb	r2, [r3, #13]

        if( pxSocket->u.xTCP.txStream != NULL )
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	f000 80a5 	beq.w	8012d58 <prvTCPPrepareSend+0x1ac>
        {
            /* ulTCPWindowTxGet will return the amount of data which may be sent
             * along with the position in the txStream.
             * Why check for MSS > 1 ?
             * Because some TCP-stacks (like uIP) use it for flow-control. */
            if( pxSocket->u.xTCP.usMSS > 1U )
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8012c14:	2b01      	cmp	r3, #1
 8012c16:	d90a      	bls.n	8012c2e <prvTCPPrepareSend+0x82>
            {
                lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8012c1e:	f107 0210 	add.w	r2, r7, #16
 8012c22:	4619      	mov	r1, r3
 8012c24:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012c26:	f002 fb13 	bl	8015250 <ulTCPWindowTxGet>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            if( lDataLen > 0 )
 8012c2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	f340 8091 	ble.w	8012d58 <prvTCPPrepareSend+0x1ac>
            {
                /* Check if the current network buffer is big enough, if not,
                 * resize it. */
                pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 8012c36:	68bb      	ldr	r3, [r7, #8]
 8012c38:	6819      	ldr	r1, [r3, #0]
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012c3e:	68f8      	ldr	r0, [r7, #12]
 8012c40:	f7ff fe9c 	bl	801297c <prvTCPBufferResize>
 8012c44:	6378      	str	r0, [r7, #52]	@ 0x34

                if( pxNewBuffer != NULL )
 8012c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	f000 8082 	beq.w	8012d52 <prvTCPPrepareSend+0x1a6>
                {
                    *ppxNetworkBuffer = pxNewBuffer;
 8012c4e:	68bb      	ldr	r3, [r7, #8]
 8012c50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012c52:	601a      	str	r2, [r3, #0]
                    pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 8012c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c58:	64bb      	str	r3, [r7, #72]	@ 0x48
                     * access to the fields. */

                    /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8012c5a:	68f8      	ldr	r0, [r7, #12]
 8012c5c:	f7f6 f986 	bl	8008f6c <uxIPHeaderSizeSocket>
 8012c60:	4603      	mov	r3, r0
 8012c62:	330e      	adds	r3, #14
 8012c64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012c66:	4413      	add	r3, r2
 8012c68:	647b      	str	r3, [r7, #68]	@ 0x44

                    pucSendData = &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ] );
 8012c6a:	68f8      	ldr	r0, [r7, #12]
 8012c6c:	f7f6 f97e 	bl	8008f6c <uxIPHeaderSizeSocket>
 8012c70:	4602      	mov	r2, r0
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	4413      	add	r3, r2
 8012c76:	3322      	adds	r3, #34	@ 0x22
 8012c78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012c7a:	4413      	add	r3, r2
 8012c7c:	633b      	str	r3, [r7, #48]	@ 0x30

                    /* Translate the position in txStream to an offset from the tail
                     * marker. */
                    uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	693a      	ldr	r2, [r7, #16]
 8012c8e:	4619      	mov	r1, r3
 8012c90:	f7fc fef9 	bl	800fa86 <uxStreamBufferDistance>
 8012c94:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* Here data is copied from the txStream in 'peek' mode.  Only
                     * when the packets are acked, the tail marker will be updated. */
                    ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8012c9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c9e:	2201      	movs	r2, #1
 8012ca0:	9200      	str	r2, [sp, #0]
 8012ca2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012ca4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012ca6:	f7fd f84c 	bl	800fd42 <uxStreamBufferGet>
 8012caa:	62b8      	str	r0, [r7, #40]	@ 0x28

                    #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    {
                        if( ulDataGot != ( uint32_t ) lDataLen )
 8012cac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012cae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012cb0:	429a      	cmp	r2, r3
 8012cb2:	d007      	beq.n	8012cc4 <prvTCPPrepareSend+0x118>
                        {
                            FreeRTOS_debug_printf( ( "uxStreamBufferGet: pos %d offs %u only %u != %d\n",
 8012cb4:	6939      	ldr	r1, [r7, #16]
 8012cb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012cb8:	9300      	str	r3, [sp, #0]
 8012cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012cbe:	4898      	ldr	r0, [pc, #608]	@ (8012f20 <prvTCPPrepareSend+0x374>)
 8012cc0:	f00d fc34 	bl	802052c <lUDPLoggingPrintf>
                    }
                    #endif

                    /* If the owner of the socket requests a closure, add the FIN
                     * flag to the last packet. */
                    if( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED )
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8012cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012cce:	b2db      	uxtb	r3, r3
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d041      	beq.n	8012d58 <prvTCPPrepareSend+0x1ac>
                    {
                        ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8012cda:	693b      	ldr	r3, [r7, #16]
 8012cdc:	4619      	mov	r1, r3
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012ce4:	689b      	ldr	r3, [r3, #8]
 8012ce6:	461a      	mov	r2, r3
 8012ce8:	f7fc fecd 	bl	800fa86 <uxStreamBufferDistance>
 8012cec:	6278      	str	r0, [r7, #36]	@ 0x24

                        if( ulDistance == ulDataGot )
 8012cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cf2:	429a      	cmp	r2, r3
 8012cf4:	d130      	bne.n	8012d58 <prvTCPPrepareSend+0x1ac>
                        {
                            #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                            {
                                /* the order of volatile accesses is undefined
                                 *  so such workaround */
                                size_t uxHead = pxSocket->u.xTCP.txStream->uxHead;
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012cfc:	689b      	ldr	r3, [r3, #8]
 8012cfe:	623b      	str	r3, [r7, #32]
                                size_t uxMid = pxSocket->u.xTCP.txStream->uxMid;
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012d06:	685b      	ldr	r3, [r3, #4]
 8012d08:	61fb      	str	r3, [r7, #28]
                                size_t uxTail = pxSocket->u.xTCP.txStream->uxTail;
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	61bb      	str	r3, [r7, #24]

                                FreeRTOS_debug_printf( ( "CheckClose %u <= %u (%u <= %u <= %u)\n",
 8012d14:	6a3b      	ldr	r3, [r7, #32]
 8012d16:	9301      	str	r3, [sp, #4]
 8012d18:	69fb      	ldr	r3, [r7, #28]
 8012d1a:	9300      	str	r3, [sp, #0]
 8012d1c:	69bb      	ldr	r3, [r7, #24]
 8012d1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012d20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012d22:	4880      	ldr	r0, [pc, #512]	@ (8012f24 <prvTCPPrepareSend+0x378>)
 8012d24:	f00d fc02 	bl	802052c <lUDPLoggingPrintf>
                            #endif /* if ( ipconfigHAS_DEBUG_PRINTF == 1 ) */

                            /* Although the socket sends a FIN, it will stay in
                             * ESTABLISHED until all current data has been received or
                             * delivered. */
                            pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 8012d28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012d2a:	7b5b      	ldrb	r3, [r3, #13]
 8012d2c:	f043 0301 	orr.w	r3, r3, #1
 8012d30:	b2da      	uxtb	r2, r3
 8012d32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012d34:	735a      	strb	r2, [r3, #13]
                            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 8012d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012d3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d3c:	441a      	add	r2, r3
 8012d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d40:	625a      	str	r2, [r3, #36]	@ 0x24
                            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8012d42:	68fa      	ldr	r2, [r7, #12]
 8012d44:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012d48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012d4c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 8012d50:	e002      	b.n	8012d58 <prvTCPPrepareSend+0x1ac>
                        }
                    }
                }
                else
                {
                    lDataLen = -1;
 8012d52:	f04f 33ff 	mov.w	r3, #4294967295
 8012d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }
            }
        }

        if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) )
 8012d58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	f2c0 8099 	blt.w	8012e92 <prvTCPPrepareSend+0x2e6>
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012d66:	2b05      	cmp	r3, #5
 8012d68:	f040 8093 	bne.w	8012e92 <prvTCPPrepareSend+0x2e6>
        {
            /* See if the socket owner wants to shutdown this connection. */
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8012d72:	f003 0320 	and.w	r3, r3, #32
 8012d76:	b2db      	uxtb	r3, r3
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d029      	beq.n	8012dd0 <prvTCPPrepareSend+0x224>
                ( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 8012d7c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012d7e:	f002 f8e7 	bl	8014f50 <xTCPWindowTxDone>
 8012d82:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d023      	beq.n	8012dd0 <prvTCPPrepareSend+0x224>
            {
                pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 8012d88:	68fa      	ldr	r2, [r7, #12]
 8012d8a:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8012d8e:	f36f 1345 	bfc	r3, #5, #1
 8012d92:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 8012d96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012d98:	7b5b      	ldrb	r3, [r3, #13]
 8012d9a:	f043 0301 	orr.w	r3, r3, #1
 8012d9e:	b2da      	uxtb	r2, r3
 8012da0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012da2:	735a      	strb	r2, [r3, #13]
                pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8012da4:	68fa      	ldr	r2, [r7, #12]
 8012da6:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012daa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012dae:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8012db2:	68fa      	ldr	r2, [r7, #12]
 8012db4:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012db8:	f043 0301 	orr.w	r3, r3, #1
 8012dbc:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8012dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dc2:	6a1a      	ldr	r2, [r3, #32]
 8012dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dc6:	625a      	str	r2, [r3, #36]	@ 0x24
                vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 8012dc8:	2106      	movs	r1, #6
 8012dca:	68f8      	ldr	r0, [r7, #12]
 8012dcc:	f7fd f960 	bl	8010090 <vTCPStateChange>
            }

            #if ( ipconfigTCP_KEEP_ALIVE != 0 )
            {
                if( pxSocket->u.xTCP.ucKeepRepCount > 3U ) /*_RB_ Magic number. */
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8012dd6:	2b03      	cmp	r3, #3
 8012dd8:	d90f      	bls.n	8012dfa <prvTCPPrepareSend+0x24e>
                {
                    FreeRTOS_debug_printf( ( "keep-alive: giving up %xip:%u\n",
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012de4:	461a      	mov	r2, r3
 8012de6:	4850      	ldr	r0, [pc, #320]	@ (8012f28 <prvTCPPrepareSend+0x37c>)
 8012de8:	f00d fba0 	bl	802052c <lUDPLoggingPrintf>
                                             ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                             pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8012dec:	2108      	movs	r1, #8
 8012dee:	68f8      	ldr	r0, [r7, #12]
 8012df0:	f7fd f94e 	bl	8010090 <vTCPStateChange>
                    lDataLen = -1;
 8012df4:	f04f 33ff 	mov.w	r3, #4294967295
 8012df8:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }

                if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 8012dfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d148      	bne.n	8012e92 <prvTCPPrepareSend+0x2e6>
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012e06:	f003 0301 	and.w	r3, r3, #1
 8012e0a:	b2db      	uxtb	r3, r3
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d140      	bne.n	8012e92 <prvTCPPrepareSend+0x2e6>
                {
                    /* If there is no data to be sent, and no window-update message,
                     * we might want to send a keep-alive message. */
                    TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 8012e10:	f7f0 fcfc 	bl	800380c <xTaskGetTickCount>
 8012e14:	4602      	mov	r2, r0
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012e1c:	1ad3      	subs	r3, r2, r3
 8012e1e:	617b      	str	r3, [r7, #20]
                    TickType_t xMax;
                    xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * ( TickType_t ) configTICK_RATE_HZ );
 8012e20:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8012e24:	643b      	str	r3, [r7, #64]	@ 0x40

                    if( pxSocket->u.xTCP.ucKeepRepCount != 0U )
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d002      	beq.n	8012e36 <prvTCPPrepareSend+0x28a>
                    {
                        xMax = 3U * configTICK_RATE_HZ;
 8012e30:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8012e34:	643b      	str	r3, [r7, #64]	@ 0x40
                    }

                    if( xAge > xMax )
 8012e36:	697a      	ldr	r2, [r7, #20]
 8012e38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012e3a:	429a      	cmp	r2, r3
 8012e3c:	d929      	bls.n	8012e92 <prvTCPPrepareSend+0x2e6>
                    {
                        pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 8012e3e:	f7f0 fce5 	bl	800380c <xTaskGetTickCount>
 8012e42:	4602      	mov	r2, r0
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

                        if( xTCPWindowLoggingLevel != 0 )
 8012e4a:	4b38      	ldr	r3, [pc, #224]	@ (8012f2c <prvTCPPrepareSend+0x380>)
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d00b      	beq.n	8012e6a <prvTCPPrepareSend+0x2be>
                        {
                            FreeRTOS_debug_printf( ( "keep-alive: %xip:%u count %u\n",
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012e5c:	461a      	mov	r2, r3
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8012e64:	4832      	ldr	r0, [pc, #200]	@ (8012f30 <prvTCPPrepareSend+0x384>)
 8012e66:	f00d fb61 	bl	802052c <lUDPLoggingPrintf>
                                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                     pxSocket->u.xTCP.usRemotePort,
                                                     pxSocket->u.xTCP.ucKeepRepCount ) );
                        }

                        pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 8012e6a:	68fa      	ldr	r2, [r7, #12]
 8012e6c:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012e70:	f043 0302 	orr.w	r3, r3, #2
 8012e74:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                        pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500U ) );
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8012e7e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                        pxSocket->u.xTCP.ucKeepRepCount++;
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8012e88:	3301      	adds	r3, #1
 8012e8a:	b2da      	uxtb	r2, r3
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
                }
            }
            #endif /* ipconfigTCP_KEEP_ALIVE */
        }

        if( lDataLen >= 0 )
 8012e92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	db3e      	blt.n	8012f16 <prvTCPPrepareSend+0x36a>
        {
            /* Anything to send, a change of the advertised window size, or maybe send a
             * keep-alive message? */
            if( ( lDataLen > 0 ) ||
 8012e98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	dc0f      	bgt.n	8012ebe <prvTCPPrepareSend+0x312>
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012ea4:	f003 0301 	and.w	r3, r3, #1
 8012ea8:	b2db      	uxtb	r3, r3
            if( ( lDataLen > 0 ) ||
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d107      	bne.n	8012ebe <prvTCPPrepareSend+0x312>
                ( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012eb4:	f003 0302 	and.w	r3, r3, #2
 8012eb8:	b2db      	uxtb	r3, r3
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d02b      	beq.n	8012f16 <prvTCPPrepareSend+0x36a>
            {
                pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 8012ebe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012ec0:	7b5b      	ldrb	r3, [r3, #13]
 8012ec2:	f023 0308 	bic.w	r3, r3, #8
 8012ec6:	b2da      	uxtb	r2, r3
 8012ec8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012eca:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	b2db      	uxtb	r3, r3
 8012ed0:	3314      	adds	r3, #20
 8012ed2:	b2db      	uxtb	r3, r3
 8012ed4:	009b      	lsls	r3, r3, #2
 8012ed6:	b2da      	uxtb	r2, r3
 8012ed8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012eda:	731a      	strb	r2, [r3, #12]

                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 8012edc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012ede:	7b5b      	ldrb	r3, [r3, #13]
 8012ee0:	f043 0310 	orr.w	r3, r3, #16
 8012ee4:	b2da      	uxtb	r2, r3
 8012ee6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012ee8:	735a      	strb	r2, [r3, #13]

                if( lDataLen != 0L )
 8012eea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d006      	beq.n	8012efe <prvTCPPrepareSend+0x352>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_PSH;
 8012ef0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012ef2:	7b5b      	ldrb	r3, [r3, #13]
 8012ef4:	f043 0308 	orr.w	r3, r3, #8
 8012ef8:	b2da      	uxtb	r2, r3
 8012efa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012efc:	735a      	strb	r2, [r3, #13]
                }

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012efe:	68f8      	ldr	r0, [r7, #12]
 8012f00:	f7f6 f834 	bl	8008f6c <uxIPHeaderSizeSocket>
 8012f04:	4602      	mov	r2, r0
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	4413      	add	r3, r2
 8012f0a:	3314      	adds	r3, #20
 8012f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                lDataLen += ( int32_t ) uxIntermediateResult;
 8012f0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012f12:	4413      	add	r3, r2
 8012f14:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

        return lDataLen;
 8012f16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 8012f18:	4618      	mov	r0, r3
 8012f1a:	3750      	adds	r7, #80	@ 0x50
 8012f1c:	46bd      	mov	sp, r7
 8012f1e:	bd80      	pop	{r7, pc}
 8012f20:	08024cdc 	.word	0x08024cdc
 8012f24:	08024d10 	.word	0x08024d10
 8012f28:	08024d38 	.word	0x08024d38
 8012f2c:	200012f4 	.word	0x200012f4
 8012f30:	08024d58 	.word	0x08024d58

08012f34 <prvTCPAddTxData>:
 *        this data to the windowing system to it can be transmitted.
 *
 * @param[in] pxSocket The socket owning the connection.
 */
    void prvTCPAddTxData( FreeRTOS_Socket_t * pxSocket )
    {
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b084      	sub	sp, #16
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
         * the sliding window.
         *
         * uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It
         * contains new Tx data which has not been passed to the sliding window yet.
         * The oldest data not-yet-confirmed can be found at rxTail. */
        lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012f42:	4618      	mov	r0, r3
 8012f44:	f7fc fdf0 	bl	800fb28 <uxStreamBufferMidSpace>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	60fb      	str	r3, [r7, #12]

        if( lLength > 0 )
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	dd1a      	ble.n	8012f88 <prvTCPAddTxData+0x54>
             * window manager, so it can start transmitting them.
             *
             * Hand over the new data to the sliding window handler.  It will be
             * split-up in chunks of 1460 bytes each (or less, depending on
             * ipconfigTCP_MSS). */
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8012f58:	68f9      	ldr	r1, [r7, #12]
                                      ( uint32_t ) lLength,
                                      ( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012f60:	685b      	ldr	r3, [r3, #4]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 8012f62:	461a      	mov	r2, r3
                                      ( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012f6a:	691b      	ldr	r3, [r3, #16]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 8012f6c:	f001 ff5c 	bl	8014e28 <lTCPWindowTxAdd>
 8012f70:	60b8      	str	r0, [r7, #8]

            /* Move the rxMid pointer forward up to rxHead. */
            if( lCount > 0 )
 8012f72:	68bb      	ldr	r3, [r7, #8]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	dd07      	ble.n	8012f88 <prvTCPAddTxData+0x54>
            {
                vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012f7e:	68ba      	ldr	r2, [r7, #8]
 8012f80:	4611      	mov	r1, r2
 8012f82:	4618      	mov	r0, r3
 8012f84:	f7fc fdf7 	bl	800fb76 <vStreamBufferMoveMid>
            }
        }
    }
 8012f88:	bf00      	nop
 8012f8a:	3710      	adds	r7, #16
 8012f8c:	46bd      	mov	sp, r7
 8012f8e:	bd80      	pop	{r7, pc}

08012f90 <prvSetOptions>:
 *
 * @return Length of the TCP options after they are set.
 */
    UBaseType_t prvSetOptions( FreeRTOS_Socket_t * pxSocket,
                               const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8012f90:	b590      	push	{r4, r7, lr}
 8012f92:	b08b      	sub	sp, #44	@ 0x2c
 8012f94:	af02      	add	r7, sp, #8
 8012f96:	6078      	str	r0, [r7, #4]
 8012f98:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8012f9a:	683b      	ldr	r3, [r7, #0]
 8012f9c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012f9e:	6838      	ldr	r0, [r7, #0]
 8012fa0:	f7f5 ffca 	bl	8008f38 <uxIPHeaderSizePacket>
 8012fa4:	4603      	mov	r3, r0
 8012fa6:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012fa8:	4423      	add	r3, r4
 8012faa:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8012fac:	69bb      	ldr	r3, [r7, #24]
 8012fae:	617b      	str	r3, [r7, #20]
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012fb6:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 8012fb8:	693b      	ldr	r3, [r7, #16]
 8012fba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012fbe:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
            const void * pvCopySource;
            void * pvCopyDest;

            if( uxOptionsLength != 0U )
 8012fc0:	69fb      	ldr	r3, [r7, #28]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d05c      	beq.n	8013080 <prvSetOptions+0xf0>
            {
                /* TCP options must be sent because a packet which is out-of-order
                 * was received. */
                if( xTCPWindowLoggingLevel >= 0 )
 8012fc6:	4b4f      	ldr	r3, [pc, #316]	@ (8013104 <prvSetOptions+0x174>)
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	db44      	blt.n	8013058 <prvSetOptions+0xc8>
                {
                    FreeRTOS_debug_printf( ( "SACK[%u,%u]: optlen %u sending %u - %u\n",
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012fda:	461c      	mov	r4, r3
 8012fdc:	693b      	ldr	r3, [r7, #16]
 8012fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012fe2:	061a      	lsls	r2, r3, #24
 8012fe4:	693b      	ldr	r3, [r7, #16]
 8012fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012fea:	021b      	lsls	r3, r3, #8
 8012fec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012ff0:	431a      	orrs	r2, r3
 8012ff2:	693b      	ldr	r3, [r7, #16]
 8012ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012ff8:	0a1b      	lsrs	r3, r3, #8
 8012ffa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012ffe:	431a      	orrs	r2, r3
 8013000:	693b      	ldr	r3, [r7, #16]
 8013002:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013006:	0e1b      	lsrs	r3, r3, #24
 8013008:	431a      	orrs	r2, r3
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8013010:	1ad3      	subs	r3, r2, r3
 8013012:	693a      	ldr	r2, [r7, #16]
 8013014:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8013018:	0611      	lsls	r1, r2, #24
 801301a:	693a      	ldr	r2, [r7, #16]
 801301c:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8013020:	0212      	lsls	r2, r2, #8
 8013022:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 8013026:	4311      	orrs	r1, r2
 8013028:	693a      	ldr	r2, [r7, #16]
 801302a:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 801302e:	0a12      	lsrs	r2, r2, #8
 8013030:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8013034:	4311      	orrs	r1, r2
 8013036:	693a      	ldr	r2, [r7, #16]
 8013038:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 801303c:	0e12      	lsrs	r2, r2, #24
 801303e:	4311      	orrs	r1, r2
 8013040:	687a      	ldr	r2, [r7, #4]
 8013042:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 8013046:	1a8a      	subs	r2, r1, r2
 8013048:	9201      	str	r2, [sp, #4]
 801304a:	9300      	str	r3, [sp, #0]
 801304c:	69fb      	ldr	r3, [r7, #28]
 801304e:	4622      	mov	r2, r4
 8013050:	4601      	mov	r1, r0
 8013052:	482d      	ldr	r0, [pc, #180]	@ (8013108 <prvSetOptions+0x178>)
 8013054:	f00d fa6a 	bl	802052c <lUDPLoggingPrintf>
                /*
                 * Use helper variables for memcpy() source & dest to remain
                 * compliant with MISRA Rule 21.15.  These should be
                 * optimized away.
                 */
                pvCopySource = pxTCPWindow->ulOptionsData;
 8013058:	693b      	ldr	r3, [r7, #16]
 801305a:	3380      	adds	r3, #128	@ 0x80
 801305c:	60fb      	str	r3, [r7, #12]
                pvCopyDest = pxTCPHeader->ucOptdata;
 801305e:	697b      	ldr	r3, [r7, #20]
 8013060:	3314      	adds	r3, #20
 8013062:	60bb      	str	r3, [r7, #8]
                ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) uxOptionsLength );
 8013064:	69fa      	ldr	r2, [r7, #28]
 8013066:	68f9      	ldr	r1, [r7, #12]
 8013068:	68b8      	ldr	r0, [r7, #8]
 801306a:	f00d fc7b 	bl	8020964 <memcpy>

                /* The header length divided by 4, goes into the higher nibble,
                 * effectively a shift-left 2. */
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 801306e:	69fb      	ldr	r3, [r7, #28]
 8013070:	b2db      	uxtb	r3, r3
 8013072:	3314      	adds	r3, #20
 8013074:	b2db      	uxtb	r3, r3
 8013076:	009b      	lsls	r3, r3, #2
 8013078:	b2da      	uxtb	r2, r3
 801307a:	697b      	ldr	r3, [r7, #20]
 801307c:	731a      	strb	r2, [r3, #12]
 801307e:	e03c      	b.n	80130fa <prvSetOptions+0x16a>
            }
            else
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8013086:	2b04      	cmp	r3, #4
 8013088:	d937      	bls.n	80130fa <prvSetOptions+0x16a>
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8013090:	f003 0301 	and.w	r3, r3, #1
 8013094:	b2db      	uxtb	r3, r3
 8013096:	2b00      	cmp	r3, #0
 8013098:	d02f      	beq.n	80130fa <prvSetOptions+0x16a>
        {
            /* TCP options must be sent because the MSS has changed. */
            pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 801309a:	687a      	ldr	r2, [r7, #4]
 801309c:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80130a0:	f36f 0300 	bfc	r3, #0, #1
 80130a4:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

            if( xTCPWindowLoggingLevel >= 0 )
 80130a8:	4b16      	ldr	r3, [pc, #88]	@ (8013104 <prvSetOptions+0x174>)
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	db06      	blt.n	80130be <prvSetOptions+0x12e>
            {
                FreeRTOS_debug_printf( ( "MSS: sending %u\n", pxSocket->u.xTCP.usMSS ) );
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80130b6:	4619      	mov	r1, r3
 80130b8:	4814      	ldr	r0, [pc, #80]	@ (801310c <prvSetOptions+0x17c>)
 80130ba:	f00d fa37 	bl	802052c <lUDPLoggingPrintf>
            }

            pxTCPHeader->ucOptdata[ 0 ] = tcpTCP_OPT_MSS;
 80130be:	697b      	ldr	r3, [r7, #20]
 80130c0:	2202      	movs	r2, #2
 80130c2:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ 1 ] = tcpTCP_OPT_MSS_LEN;
 80130c4:	697b      	ldr	r3, [r7, #20]
 80130c6:	2204      	movs	r2, #4
 80130c8:	755a      	strb	r2, [r3, #21]
            pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) >> 8 );
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80130d0:	0a1b      	lsrs	r3, r3, #8
 80130d2:	b29b      	uxth	r3, r3
 80130d4:	b2da      	uxtb	r2, r3
 80130d6:	697b      	ldr	r3, [r7, #20]
 80130d8:	759a      	strb	r2, [r3, #22]
            pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) & 0xffU );
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80130e0:	b2da      	uxtb	r2, r3
 80130e2:	697b      	ldr	r3, [r7, #20]
 80130e4:	75da      	strb	r2, [r3, #23]
            uxOptionsLength = 4U;
 80130e6:	2304      	movs	r3, #4
 80130e8:	61fb      	str	r3, [r7, #28]
            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80130ea:	69fb      	ldr	r3, [r7, #28]
 80130ec:	b2db      	uxtb	r3, r3
 80130ee:	3314      	adds	r3, #20
 80130f0:	b2db      	uxtb	r3, r3
 80130f2:	009b      	lsls	r3, r3, #2
 80130f4:	b2da      	uxtb	r2, r3
 80130f6:	697b      	ldr	r3, [r7, #20]
 80130f8:	731a      	strb	r2, [r3, #12]
        else
        {
            /* Nothing. */
        }

        return uxOptionsLength;
 80130fa:	69fb      	ldr	r3, [r7, #28]
    }
 80130fc:	4618      	mov	r0, r3
 80130fe:	3724      	adds	r7, #36	@ 0x24
 8013100:	46bd      	mov	sp, r7
 8013102:	bd90      	pop	{r4, r7, pc}
 8013104:	200012f4 	.word	0x200012f4
 8013108:	08024d78 	.word	0x08024d78
 801310c:	08024da0 	.word	0x08024da0

08013110 <prvSendData>:
 */
    BaseType_t prvSendData( FreeRTOS_Socket_t * pxSocket,
                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                            uint32_t ulReceiveLength,
                            BaseType_t xByteCount )
    {
 8013110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013112:	b093      	sub	sp, #76	@ 0x4c
 8013114:	af04      	add	r7, sp, #16
 8013116:	60f8      	str	r0, [r7, #12]
 8013118:	60b9      	str	r1, [r7, #8]
 801311a:	607a      	str	r2, [r7, #4]
 801311c:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 801311e:	68bb      	ldr	r3, [r7, #8]
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013124:	68bb      	ldr	r3, [r7, #8]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	4618      	mov	r0, r3
 801312a:	f7f5 ff05 	bl	8008f38 <uxIPHeaderSizePacket>
 801312e:	4603      	mov	r3, r0
 8013130:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8013132:	4423      	add	r3, r4
 8013134:	633b      	str	r3, [r7, #48]	@ 0x30
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8013136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013138:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8013140:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* Find out what window size we may advertised. */
        int32_t lRxSpace;
        BaseType_t xSendLength = xByteCount;
 8013142:	683b      	ldr	r3, [r7, #0]
 8013144:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulRxBufferSpace;

        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* Two steps to please MISRA. */
            size_t uxSize = uxIPHeaderSizePacket( *ppxNetworkBuffer ) + ipSIZE_OF_TCP_HEADER;
 8013146:	68bb      	ldr	r3, [r7, #8]
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	4618      	mov	r0, r3
 801314c:	f7f5 fef4 	bl	8008f38 <uxIPHeaderSizePacket>
 8013150:	4603      	mov	r3, r0
 8013152:	3314      	adds	r3, #20
 8013154:	627b      	str	r3, [r7, #36]	@ 0x24
            BaseType_t xSizeWithoutData = ( BaseType_t ) uxSize;
 8013156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013158:	623b      	str	r3, [r7, #32]
            int32_t lMinLength;
        #endif

        /* Set the time-out field, so that we'll be called by the IP-task in case no
         * next message will be received. */
        ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801315e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013160:	691b      	ldr	r3, [r3, #16]
 8013162:	1ad3      	subs	r3, r2, r3
 8013164:	61fb      	str	r3, [r7, #28]
        lRxSpace = ( int32_t ) ulRxBufferSpace;
 8013166:	69fb      	ldr	r3, [r7, #28]
 8013168:	61bb      	str	r3, [r7, #24]

        #if ipconfigUSE_TCP_WIN == 1
        {
            /* An ACK may be delayed if the peer has space for at least 2 x MSS. */
            lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usMSS );
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013170:	005b      	lsls	r3, r3, #1
 8013172:	617b      	str	r3, [r7, #20]

            /* In case we're receiving data continuously, we might postpone sending
             * an ACK to gain performance. */
            /* lint e9007 is OK because 'uxIPHeaderSizeSocket()' has no side-effects. */
            if( ( ulReceiveLength > 0U ) &&                               /* Data was sent to this socket. */
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d079      	beq.n	801326e <prvSendData+0x15e>
 801317a:	69ba      	ldr	r2, [r7, #24]
 801317c:	697b      	ldr	r3, [r7, #20]
 801317e:	429a      	cmp	r2, r3
 8013180:	db75      	blt.n	801326e <prvSendData+0x15e>
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801318c:	b2db      	uxtb	r3, r3
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
 801318e:	2b00      	cmp	r3, #0
 8013190:	d16d      	bne.n	801326e <prvSendData+0x15e>
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 8013192:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013194:	6a3b      	ldr	r3, [r7, #32]
 8013196:	429a      	cmp	r2, r3
 8013198:	d169      	bne.n	801326e <prvSendData+0x15e>
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
 80131a0:	2b05      	cmp	r3, #5
 80131a2:	d164      	bne.n	801326e <prvSendData+0x15e>
                ( pxTCPHeader->ucTCPFlags == tcpTCP_FLAG_ACK ) )          /* There are no other flags than an ACK. */
 80131a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131a6:	7b5b      	ldrb	r3, [r3, #13]
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 80131a8:	2b10      	cmp	r3, #16
 80131aa:	d160      	bne.n	801326e <prvSendData+0x15e>
            {
                uint32_t ulCurMSS = ( uint32_t ) pxSocket->u.xTCP.usMSS;
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80131b2:	613b      	str	r3, [r7, #16]

                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80131ba:	68bb      	ldr	r3, [r7, #8]
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	429a      	cmp	r2, r3
 80131c0:	d00f      	beq.n	80131e2 <prvSendData+0xd2>
                {
                    /* There was still a delayed in queue, delete it. */
                    if( pxSocket->u.xTCP.pxAckMessage != NULL )
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d005      	beq.n	80131d8 <prvSendData+0xc8>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80131d2:	4618      	mov	r0, r3
 80131d4:	f003 f8c0 	bl	8016358 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 80131d8:	68bb      	ldr	r3, [r7, #8]
 80131da:	681a      	ldr	r2, [r3, #0]
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                }

                if( ulReceiveLength < ulCurMSS ) /* Received a small message. */
 80131e2:	687a      	ldr	r2, [r7, #4]
 80131e4:	693b      	ldr	r3, [r7, #16]
 80131e6:	429a      	cmp	r2, r3
 80131e8:	d204      	bcs.n	80131f4 <prvSendData+0xe4>
                {
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) tcpDELAYED_ACK_SHORT_DELAY_MS;
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	2202      	movs	r2, #2
 80131ee:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 80131f2:	e00c      	b.n	801320e <prvSendData+0xfe>
                else
                {
                    /* Normally a delayed ACK should wait 200 ms for a next incoming
                     * packet.  Only wait 20 ms here to gain performance.  A slow ACK
                     * for full-size message. */
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_TICKS( tcpDELAYED_ACK_LONGER_DELAY_MS );
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	2214      	movs	r2, #20
 80131f8:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                    if( pxSocket->u.xTCP.usTimeout < 1U ) /* LCOV_EXCL_BR_LINE, the second branch will never be hit */
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8013202:	2b00      	cmp	r3, #0
 8013204:	d103      	bne.n	801320e <prvSendData+0xfe>
                    {
                        pxSocket->u.xTCP.usTimeout = 1U;  /* LCOV_EXCL_LINE, this line will not be reached */
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	2201      	movs	r2, #1
 801320a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                    }
                }

                if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 801320e:	4b3d      	ldr	r3, [pc, #244]	@ (8013304 <prvSendData+0x1f4>)
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	2b01      	cmp	r3, #1
 8013214:	dd25      	ble.n	8013262 <prvSendData+0x152>
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801321a:	2b17      	cmp	r3, #23
 801321c:	d021      	beq.n	8013262 <prvSendData+0x152>
                {
                    FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %u SEQ %u (len %u) tmout %u d %d\n",
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013222:	461d      	mov	r5, r3
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801322a:	461e      	mov	r6, r3
 801322c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801322e:	691a      	ldr	r2, [r3, #16]
 8013230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013232:	68db      	ldr	r3, [r3, #12]
 8013234:	1ad0      	subs	r0, r2, r3
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 801323c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801323e:	69db      	ldr	r3, [r3, #28]
 8013240:	1ad3      	subs	r3, r2, r3
 8013242:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013244:	68f9      	ldr	r1, [r7, #12]
 8013246:	f8b1 1070 	ldrh.w	r1, [r1, #112]	@ 0x70
 801324a:	460c      	mov	r4, r1
 801324c:	69b9      	ldr	r1, [r7, #24]
 801324e:	9103      	str	r1, [sp, #12]
 8013250:	9402      	str	r4, [sp, #8]
 8013252:	9201      	str	r2, [sp, #4]
 8013254:	9300      	str	r3, [sp, #0]
 8013256:	4603      	mov	r3, r0
 8013258:	4632      	mov	r2, r6
 801325a:	4629      	mov	r1, r5
 801325c:	482a      	ldr	r0, [pc, #168]	@ (8013308 <prvSendData+0x1f8>)
 801325e:	f00d f965 	bl	802052c <lUDPLoggingPrintf>
                                             ( unsigned ) xSendLength,
                                             pxSocket->u.xTCP.usTimeout,
                                             ( int ) lRxSpace ) );
                }

                *ppxNetworkBuffer = NULL;
 8013262:	68bb      	ldr	r3, [r7, #8]
 8013264:	2200      	movs	r2, #0
 8013266:	601a      	str	r2, [r3, #0]
                xSendLength = 0;
 8013268:	2300      	movs	r3, #0
 801326a:	637b      	str	r3, [r7, #52]	@ 0x34
            {
 801326c:	e015      	b.n	801329a <prvSendData+0x18a>
            }
            else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8013274:	2b00      	cmp	r3, #0
 8013276:	d010      	beq.n	801329a <prvSendData+0x18a>
            {
                /* As an ACK is not being delayed, remove any earlier delayed ACK
                 * message. */
                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 801327e:	68bb      	ldr	r3, [r7, #8]
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	429a      	cmp	r2, r3
 8013284:	d005      	beq.n	8013292 <prvSendData+0x182>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801328c:	4618      	mov	r0, r3
 801328e:	f003 f863 	bl	8016358 <vReleaseNetworkBufferAndDescriptor>
                }

                pxSocket->u.xTCP.pxAckMessage = NULL;
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	2200      	movs	r2, #0
 8013296:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
            ( void ) pxTCPHeader;
            ( void ) lRxSpace;
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xSendLength != 0 )
 801329a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801329c:	2b00      	cmp	r3, #0
 801329e:	d02b      	beq.n	80132f8 <prvSendData+0x1e8>
        {
            if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 80132a0:	4b18      	ldr	r3, [pc, #96]	@ (8013304 <prvSendData+0x1f4>)
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	2b01      	cmp	r3, #1
 80132a6:	dd1d      	ble.n	80132e4 <prvSendData+0x1d4>
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80132ac:	2b17      	cmp	r3, #23
 80132ae:	d019      	beq.n	80132e4 <prvSendData+0x1d4>
            {
                FreeRTOS_debug_printf( ( "Send[%u->%u] imm ACK %u SEQ %u (len %u)\n",
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80132b4:	4618      	mov	r0, r3
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80132bc:	461c      	mov	r4, r3
 80132be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132c0:	691a      	ldr	r2, [r3, #16]
 80132c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132c4:	68db      	ldr	r3, [r3, #12]
 80132c6:	1ad1      	subs	r1, r2, r3
 80132c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80132cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132ce:	69db      	ldr	r3, [r3, #28]
 80132d0:	1ad3      	subs	r3, r2, r3
 80132d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80132d4:	9201      	str	r2, [sp, #4]
 80132d6:	9300      	str	r3, [sp, #0]
 80132d8:	460b      	mov	r3, r1
 80132da:	4622      	mov	r2, r4
 80132dc:	4601      	mov	r1, r0
 80132de:	480b      	ldr	r0, [pc, #44]	@ (801330c <prvSendData+0x1fc>)
 80132e0:	f00d f924 	bl	802052c <lUDPLoggingPrintf>
                                         ( unsigned ) xSendLength ) );
            }

            /* Set the parameter 'xReleaseAfterSend' to the value of
             * ipconfigZERO_COPY_TX_DRIVER. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 80132e4:	68bb      	ldr	r3, [r7, #8]
 80132e6:	6819      	ldr	r1, [r3, #0]
 80132e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80132ea:	2301      	movs	r3, #1
 80132ec:	68f8      	ldr	r0, [r7, #12]
 80132ee:	f7ff f8ff 	bl	80124f0 <prvTCPReturnPacket>
            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                /* The driver has taken ownership of the Network Buffer. */
                *ppxNetworkBuffer = NULL;
 80132f2:	68bb      	ldr	r3, [r7, #8]
 80132f4:	2200      	movs	r2, #0
 80132f6:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        return xSendLength;
 80132f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80132fa:	4618      	mov	r0, r3
 80132fc:	373c      	adds	r7, #60	@ 0x3c
 80132fe:	46bd      	mov	sp, r7
 8013300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013302:	bf00      	nop
 8013304:	200012f4 	.word	0x200012f4
 8013308:	08024db4 	.word	0x08024db4
 801330c:	08024dec 	.word	0x08024dec

08013310 <prvTCPSendSpecialPacketHelper>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
    BaseType_t prvTCPSendSpecialPacketHelper( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                              uint8_t ucTCPFlags )
    {
 8013310:	b580      	push	{r7, lr}
 8013312:	b084      	sub	sp, #16
 8013314:	af00      	add	r7, sp, #0
 8013316:	6078      	str	r0, [r7, #4]
 8013318:	460b      	mov	r3, r1
 801331a:	70fb      	strb	r3, [r7, #3]
        BaseType_t xReturn = pdTRUE;
 801331c:	2301      	movs	r3, #1
 801331e:	60fb      	str	r3, [r7, #12]
            /* Configured to ignore unknown packets just suppress a compiler warning. */
            ( void ) pxNetworkBuffer;
            ( void ) ucTCPFlags;
        #else
        {
            switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 8013320:	6878      	ldr	r0, [r7, #4]
 8013322:	f7f5 fe09 	bl	8008f38 <uxIPHeaderSizePacket>
 8013326:	4603      	mov	r3, r0
 8013328:	2b14      	cmp	r3, #20
 801332a:	d002      	beq.n	8013332 <prvTCPSendSpecialPacketHelper+0x22>
 801332c:	2b28      	cmp	r3, #40	@ 0x28
 801332e:	d007      	beq.n	8013340 <prvTCPSendSpecialPacketHelper+0x30>
 8013330:	e00d      	b.n	801334e <prvTCPSendSpecialPacketHelper+0x3e>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipSIZE_OF_IPv4_HEADER:
                        xReturn = prvTCPSendSpecialPktHelper_IPV4( pxNetworkBuffer, ucTCPFlags );
 8013332:	78fb      	ldrb	r3, [r7, #3]
 8013334:	4619      	mov	r1, r3
 8013336:	6878      	ldr	r0, [r7, #4]
 8013338:	f000 fb18 	bl	801396c <prvTCPSendSpecialPktHelper_IPV4>
 801333c:	60f8      	str	r0, [r7, #12]
                        break;
 801333e:	e009      	b.n	8013354 <prvTCPSendSpecialPacketHelper+0x44>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case ipSIZE_OF_IPv6_HEADER:
                        xReturn = prvTCPSendSpecialPktHelper_IPV6( pxNetworkBuffer, ucTCPFlags );
 8013340:	78fb      	ldrb	r3, [r7, #3]
 8013342:	4619      	mov	r1, r3
 8013344:	6878      	ldr	r0, [r7, #4]
 8013346:	f000 fe8b 	bl	8014060 <prvTCPSendSpecialPktHelper_IPV6>
 801334a:	60f8      	str	r0, [r7, #12]
                        break;
 801334c:	e002      	b.n	8013354 <prvTCPSendSpecialPacketHelper+0x44>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    xReturn = pdFAIL;
 801334e:	2300      	movs	r3, #0
 8013350:	60fb      	str	r3, [r7, #12]
                    break;
 8013352:	bf00      	nop
            }
        }
        #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

        /* The packet was not consumed. */
        return xReturn;
 8013354:	68fb      	ldr	r3, [r7, #12]
    }
 8013356:	4618      	mov	r0, r3
 8013358:	3710      	adds	r7, #16
 801335a:	46bd      	mov	sp, r7
 801335c:	bd80      	pop	{r7, pc}

0801335e <prvTCPSendChallengeAck>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendChallengeAck( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 801335e:	b580      	push	{r7, lr}
 8013360:	b082      	sub	sp, #8
 8013362:	af00      	add	r7, sp, #0
 8013364:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer, tcpTCP_FLAG_ACK );
 8013366:	2110      	movs	r1, #16
 8013368:	6878      	ldr	r0, [r7, #4]
 801336a:	f7ff ffd1 	bl	8013310 <prvTCPSendSpecialPacketHelper>
 801336e:	4603      	mov	r3, r0
    }
 8013370:	4618      	mov	r0, r3
 8013372:	3708      	adds	r7, #8
 8013374:	46bd      	mov	sp, r7
 8013376:	bd80      	pop	{r7, pc}

08013378 <prvTCPSendReset>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8013378:	b580      	push	{r7, lr}
 801337a:	b082      	sub	sp, #8
 801337c:	af00      	add	r7, sp, #0
 801337e:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer,
 8013380:	2114      	movs	r1, #20
 8013382:	6878      	ldr	r0, [r7, #4]
 8013384:	f7ff ffc4 	bl	8013310 <prvTCPSendSpecialPacketHelper>
 8013388:	4603      	mov	r3, r0
                                              ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_RST );
    }
 801338a:	4618      	mov	r0, r3
 801338c:	3708      	adds	r7, #8
 801338e:	46bd      	mov	sp, r7
 8013390:	bd80      	pop	{r7, pc}
	...

08013394 <prvTCPReturnPacket_IPV4>:
 */
void prvTCPReturnPacket_IPV4( FreeRTOS_Socket_t * pxSocket,
                              NetworkBufferDescriptor_t * pxDescriptor,
                              uint32_t ulLen,
                              BaseType_t xReleaseAfterSend )
{
 8013394:	b580      	push	{r7, lr}
 8013396:	b0a6      	sub	sp, #152	@ 0x98
 8013398:	af00      	add	r7, sp, #0
 801339a:	60f8      	str	r0, [r7, #12]
 801339c:	60b9      	str	r1, [r7, #8]
 801339e:	607a      	str	r2, [r7, #4]
 80133a0:	603b      	str	r3, [r7, #0]
    TCPPacket_t * pxTCPPacket = NULL;
 80133a2:	2300      	movs	r3, #0
 80133a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 80133a8:	2300      	movs	r3, #0
 80133aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    IPHeader_t * pxIPHeader = NULL;
 80133ae:	2300      	movs	r3, #0
 80133b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    BaseType_t xDoRelease = xReleaseAfterSend;
 80133b2:	683b      	ldr	r3, [r7, #0]
 80133b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    EthernetHeader_t * pxEthernetHeader = NULL;
 80133b8:	2300      	movs	r3, #0
 80133ba:	67bb      	str	r3, [r7, #120]	@ 0x78
    NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 80133bc:	68bb      	ldr	r3, [r7, #8]
 80133be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    NetworkBufferDescriptor_t xTempBuffer;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    MACAddress_t xMACAddress;
    const void * pvCopySource = NULL;
 80133c2:	2300      	movs	r3, #0
 80133c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    void * pvCopyDest = NULL;
 80133c8:	2300      	movs	r3, #0
 80133ca:	677b      	str	r3, [r7, #116]	@ 0x74
    const size_t uxIPHeaderSize = ipSIZE_OF_IPv4_HEADER;
 80133cc:	2314      	movs	r3, #20
 80133ce:	673b      	str	r3, [r7, #112]	@ 0x70
    uint32_t ulDestinationIPAddress;
    eARPLookupResult_t eResult;
    NetworkEndPoint_t * pxEndPoint = NULL;
 80133d0:	2300      	movs	r3, #0
 80133d2:	617b      	str	r3, [r7, #20]

    do
    {
        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 80133d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d117      	bne.n	801340c <prvTCPReturnPacket_IPV4+0x78>
        {
            pxNetworkBuffer = &xTempBuffer;
 80133dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80133e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

            ( void ) memset( &xTempBuffer, 0, sizeof( xTempBuffer ) );
 80133e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80133e8:	2238      	movs	r2, #56	@ 0x38
 80133ea:	2100      	movs	r1, #0
 80133ec:	4618      	mov	r0, r3
 80133ee:	f00d fbc6 	bl	8020b7e <memset>
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	f103 02aa 	add.w	r2, r3, #170	@ 0xaa
 80133f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80133fc:	625a      	str	r2, [r3, #36]	@ 0x24
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 80133fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013402:	225a      	movs	r2, #90	@ 0x5a
 8013404:	629a      	str	r2, [r3, #40]	@ 0x28
            xDoRelease = pdFALSE;
 8013406:	2300      	movs	r3, #0
 8013408:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        {
            if( xDoRelease == pdFALSE )
 801340c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013410:	2b00      	cmp	r3, #0
 8013412:	d114      	bne.n	801343e <prvTCPReturnPacket_IPV4+0xaa>
            {
                /* A zero-copy network driver wants to pass the packet buffer
                 * to DMA, so a new buffer must be created. */
                pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 8013414:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801341a:	4619      	mov	r1, r3
 801341c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8013420:	f7f6 f83c 	bl	800949c <pxDuplicateNetworkBufferWithDescriptor>
 8013424:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

                if( pxNetworkBuffer != NULL )
 8013428:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801342c:	2b00      	cmp	r3, #0
 801342e:	d003      	beq.n	8013438 <prvTCPReturnPacket_IPV4+0xa4>
                {
                    xDoRelease = pdTRUE;
 8013430:	2301      	movs	r3, #1
 8013432:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8013436:	e002      	b.n	801343e <prvTCPReturnPacket_IPV4+0xaa>
                }
                else
                {
                    FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 8013438:	48bc      	ldr	r0, [pc, #752]	@ (801372c <prvTCPReturnPacket_IPV4+0x398>)
 801343a:	f00d f877 	bl	802052c <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL ) /* LCOV_EXCL_BR_LINE the 2nd branch will never be reached */
 801343e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013442:	2b00      	cmp	r3, #0
 8013444:	f000 8166 	beq.w	8013714 <prvTCPReturnPacket_IPV4+0x380>
            NetworkInterface_t * pxInterface;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8013448:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801344c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801344e:	330e      	adds	r3, #14
 8013450:	67fb      	str	r3, [r7, #124]	@ 0x7c
            /* Map the Ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxTCPPacket = ( TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 8013452:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013458:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            pxEthernetHeader = ( EthernetHeader_t * ) &( pxTCPPacket->xEthernetHeader );
 801345c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013460:	67bb      	str	r3, [r7, #120]	@ 0x78
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] );
 8013462:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013466:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013468:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801346a:	330e      	adds	r3, #14
 801346c:	4413      	add	r3, r2
 801346e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8013472:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013478:	2b00      	cmp	r3, #0
 801347a:	d10b      	bne.n	8013494 <prvTCPReturnPacket_IPV4+0x100>
            {
                prvTCPReturn_SetEndPoint( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 801347c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801347e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8013482:	68f8      	ldr	r0, [r7, #12]
 8013484:	f7ff faf6 	bl	8012a74 <prvTCPReturn_SetEndPoint>

                if( pxNetworkBuffer->pxEndPoint == NULL )
 8013488:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801348c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801348e:	2b00      	cmp	r3, #0
 8013490:	f000 813d 	beq.w	801370e <prvTCPReturnPacket_IPV4+0x37a>
                    break;
                }
            }

            /* Fill the packet, using hton translations. */
            if( pxSocket != NULL )
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d028      	beq.n	80134ec <prvTCPReturnPacket_IPV4+0x158>
            {
                prvTCPReturn_CheckTCPWindow( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 801349a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801349c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80134a0:	68f8      	ldr	r0, [r7, #12]
 80134a2:	f7ff f865 	bl	8012570 <prvTCPReturn_CheckTCPWindow>
                prvTCPReturn_SetSequenceNumber( pxSocket, pxNetworkBuffer, uxIPHeaderSize, ulLen );
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80134aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80134ae:	68f8      	ldr	r0, [r7, #12]
 80134b0:	f7ff f8d8 	bl	8012664 <prvTCPReturn_SetSequenceNumber>
                pxIPHeader->ulDestinationIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80134b8:	061a      	lsls	r2, r3, #24
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80134be:	021b      	lsls	r3, r3, #8
 80134c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80134c4:	431a      	orrs	r2, r3
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80134ca:	0a1b      	lsrs	r3, r3, #8
 80134cc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80134d0:	431a      	orrs	r2, r3
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80134d6:	0e1b      	lsrs	r3, r3, #24
 80134d8:	431a      	orrs	r2, r3
 80134da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80134dc:	611a      	str	r2, [r3, #16]
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 80134de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80134e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80134e4:	681a      	ldr	r2, [r3, #0]
 80134e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80134e8:	60da      	str	r2, [r3, #12]
 80134ea:	e017      	b.n	801351c <prvTCPReturnPacket_IPV4+0x188>
            }
            else
            {
                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxProtocolHeaders->xTCPHeader.ulSequenceNumber, pxProtocolHeaders->xTCPHeader.ulAckNr );
 80134ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80134f0:	685b      	ldr	r3, [r3, #4]
 80134f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80134f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80134f8:	689a      	ldr	r2, [r3, #8]
 80134fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80134fe:	605a      	str	r2, [r3, #4]
 8013500:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013504:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8013506:	609a      	str	r2, [r3, #8]
                vFlip_32( pxIPHeader->ulDestinationIPAddress, pxIPHeader->ulSourceIPAddress );
 8013508:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801350a:	691b      	ldr	r3, [r3, #16]
 801350c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801350e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013510:	68da      	ldr	r2, [r3, #12]
 8013512:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013514:	611a      	str	r2, [r3, #16]
 8013516:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013518:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801351a:	60da      	str	r2, [r3, #12]
            }

            pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 801351c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801351e:	2280      	movs	r2, #128	@ 0x80
 8013520:	721a      	strb	r2, [r3, #8]
            pxIPHeader->usLength = FreeRTOS_htons( ulLen );
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	b29b      	uxth	r3, r3
 8013526:	021b      	lsls	r3, r3, #8
 8013528:	b29a      	uxth	r2, r3
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	0a1b      	lsrs	r3, r3, #8
 801352e:	b29b      	uxth	r3, r3
 8013530:	4313      	orrs	r3, r2
 8013532:	b29a      	uxth	r2, r3
 8013534:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013536:	805a      	strh	r2, [r3, #2]

            /* Just an increasing number. */
            pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 8013538:	4b7d      	ldr	r3, [pc, #500]	@ (8013730 <prvTCPReturnPacket_IPV4+0x39c>)
 801353a:	881b      	ldrh	r3, [r3, #0]
 801353c:	021b      	lsls	r3, r3, #8
 801353e:	b21a      	sxth	r2, r3
 8013540:	4b7b      	ldr	r3, [pc, #492]	@ (8013730 <prvTCPReturnPacket_IPV4+0x39c>)
 8013542:	881b      	ldrh	r3, [r3, #0]
 8013544:	0a1b      	lsrs	r3, r3, #8
 8013546:	b29b      	uxth	r3, r3
 8013548:	b21b      	sxth	r3, r3
 801354a:	4313      	orrs	r3, r2
 801354c:	b21b      	sxth	r3, r3
 801354e:	b29a      	uxth	r2, r3
 8013550:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013552:	809a      	strh	r2, [r3, #4]
            usPacketIdentifier++;
 8013554:	4b76      	ldr	r3, [pc, #472]	@ (8013730 <prvTCPReturnPacket_IPV4+0x39c>)
 8013556:	881b      	ldrh	r3, [r3, #0]
 8013558:	3301      	adds	r3, #1
 801355a:	b29a      	uxth	r2, r3
 801355c:	4b74      	ldr	r3, [pc, #464]	@ (8013730 <prvTCPReturnPacket_IPV4+0x39c>)
 801355e:	801a      	strh	r2, [r3, #0]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 8013560:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013562:	2200      	movs	r2, #0
 8013564:	719a      	strb	r2, [r3, #6]
 8013566:	2200      	movs	r2, #0
 8013568:	71da      	strb	r2, [r3, #7]
                /* calculate the TCP checksum for an outgoing packet. */
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxTCPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            vFlip_16( pxProtocolHeaders->xTCPHeader.usSourcePort, pxProtocolHeaders->xTCPHeader.usDestinationPort );
 801356a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801356e:	781a      	ldrb	r2, [r3, #0]
 8013570:	785b      	ldrb	r3, [r3, #1]
 8013572:	021b      	lsls	r3, r3, #8
 8013574:	4313      	orrs	r3, r2
 8013576:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 801357a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801357e:	885b      	ldrh	r3, [r3, #2]
 8013580:	b29a      	uxth	r2, r3
 8013582:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013586:	801a      	strh	r2, [r3, #0]
 8013588:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801358c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8013590:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ( size_t ) ulLen;
 8013592:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013596:	687a      	ldr	r2, [r7, #4]
 8013598:	629a      	str	r2, [r3, #40]	@ 0x28
            pxNetworkBuffer->xDataLength += ipSIZE_OF_ETH_HEADER;
 801359a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801359e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80135a0:	f103 020e 	add.w	r2, r3, #14
 80135a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80135a8:	629a      	str	r2, [r3, #40]	@ 0x28
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif

            pvCopySource = &pxEthernetHeader->xSourceAddress;
 80135aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80135ac:	3306      	adds	r3, #6
 80135ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 80135b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80135b4:	691b      	ldr	r3, [r3, #16]
 80135b6:	61bb      	str	r3, [r7, #24]

            eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &pxEndPoint );
 80135b8:	f107 0214 	add.w	r2, r7, #20
 80135bc:	f107 011c 	add.w	r1, r7, #28
 80135c0:	f107 0318 	add.w	r3, r7, #24
 80135c4:	4618      	mov	r0, r3
 80135c6:	f7f2 fe9d 	bl	8006304 <eARPGetCacheEntry>
 80135ca:	4603      	mov	r3, r0
 80135cc:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

            if( eResult == eARPCacheHit )
 80135d0:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80135d4:	2b01      	cmp	r3, #1
 80135d6:	d108      	bne.n	80135ea <prvTCPReturnPacket_IPV4+0x256>
            {
                pvCopySource = &xMACAddress;
 80135d8:	f107 031c 	add.w	r3, r7, #28
 80135dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 80135e0:	697a      	ldr	r2, [r7, #20]
 80135e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80135e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80135e8:	e003      	b.n	80135f2 <prvTCPReturnPacket_IPV4+0x25e>
            }
            else
            {
                pvCopySource = &pxEthernetHeader->xSourceAddress;
 80135ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80135ec:	3306      	adds	r3, #6
 80135ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            }

            if( pxNetworkBuffer->pxEndPoint == NULL )
 80135f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80135f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	f000 808a 	beq.w	8013712 <prvTCPReturnPacket_IPV4+0x37e>
            {
                break;
            }

            /* Fill in the destination MAC addresses. */
            pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 80135fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013600:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 8013602:	2206      	movs	r2, #6
 8013604:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8013608:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 801360a:	f00d f9ab 	bl	8020964 <memcpy>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 801360e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013614:	33e8      	adds	r3, #232	@ 0xe8
 8013616:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 801361a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801361c:	3306      	adds	r3, #6
 801361e:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8013620:	2206      	movs	r2, #6
 8013622:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8013626:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8013628:	f00d f99c 	bl	8020964 <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 801362c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013632:	2b3b      	cmp	r3, #59	@ 0x3b
 8013634:	d81a      	bhi.n	801366c <prvTCPReturnPacket_IPV4+0x2d8>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8013636:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801363a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801363c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8013640:	e00c      	b.n	801365c <prvTCPReturnPacket_IPV4+0x2c8>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8013642:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013646:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013648:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801364c:	4413      	add	r3, r2
 801364e:	2200      	movs	r2, #0
 8013650:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8013652:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013656:	3301      	adds	r3, #1
 8013658:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801365c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013660:	2b3b      	cmp	r3, #59	@ 0x3b
 8013662:	ddee      	ble.n	8013642 <prvTCPReturnPacket_IPV4+0x2ae>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8013664:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013668:	223c      	movs	r2, #60	@ 0x3c
 801366a:	629a      	str	r2, [r3, #40]	@ 0x28
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface != NULL );
 801366c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013672:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8013676:	2b00      	cmp	r3, #0
 8013678:	d104      	bne.n	8013684 <prvTCPReturnPacket_IPV4+0x2f0>
 801367a:	f240 111d 	movw	r1, #285	@ 0x11d
 801367e:	482d      	ldr	r0, [pc, #180]	@ (8013734 <prvTCPReturnPacket_IPV4+0x3a0>)
 8013680:	f7ed fd4a 	bl	8001118 <vAssertCalled>
            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface->pfOutput != NULL );
 8013684:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801368a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801368e:	68db      	ldr	r3, [r3, #12]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d104      	bne.n	801369e <prvTCPReturnPacket_IPV4+0x30a>
 8013694:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8013698:	4826      	ldr	r0, [pc, #152]	@ (8013734 <prvTCPReturnPacket_IPV4+0x3a0>)
 801369a:	f7ed fd3d 	bl	8001118 <vAssertCalled>

            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 801369e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80136a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80136a4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80136a8:	663b      	str	r3, [r7, #96]	@ 0x60
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xDoRelease );
 80136aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80136ac:	68db      	ldr	r3, [r3, #12]
 80136ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80136b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80136b6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80136b8:	4798      	blx	r3

            if( xDoRelease == pdFALSE )
 80136ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d121      	bne.n	8013706 <prvTCPReturnPacket_IPV4+0x372>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 80136c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80136c6:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80136ca:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80136ce:	021b      	lsls	r3, r3, #8
 80136d0:	4313      	orrs	r3, r2
 80136d2:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80136d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80136da:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80136dc:	b29a      	uxth	r2, r3
 80136de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80136e2:	845a      	strh	r2, [r3, #34]	@ 0x22
 80136e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80136e8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 80136ec:	849a      	strh	r2, [r3, #36]	@ 0x24

                pxIPHeader->ulSourceIPAddress = pxIPHeader->ulDestinationIPAddress;
 80136ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80136f0:	691a      	ldr	r2, [r3, #16]
 80136f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80136f4:	60da      	str	r2, [r3, #12]

                ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 80136f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80136f8:	3306      	adds	r3, #6
 80136fa:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80136fc:	2206      	movs	r2, #6
 80136fe:	4618      	mov	r0, r3
 8013700:	f00d f930 	bl	8020964 <memcpy>
 8013704:	e006      	b.n	8013714 <prvTCPReturnPacket_IPV4+0x380>
            }
            else
            {
                xDoRelease = pdFALSE;
 8013706:	2300      	movs	r3, #0
 8013708:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801370c:	e002      	b.n	8013714 <prvTCPReturnPacket_IPV4+0x380>
                    break;
 801370e:	bf00      	nop
 8013710:	e000      	b.n	8013714 <prvTCPReturnPacket_IPV4+0x380>
                break;
 8013712:	bf00      	nop
                /* The buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    } while( ipFALSE_BOOL );

    if( xDoRelease == pdTRUE )
 8013714:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013718:	2b01      	cmp	r3, #1
 801371a:	d103      	bne.n	8013724 <prvTCPReturnPacket_IPV4+0x390>
    {
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801371c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8013720:	f002 fe1a 	bl	8016358 <vReleaseNetworkBufferAndDescriptor>
    }
}
 8013724:	bf00      	nop
 8013726:	3798      	adds	r7, #152	@ 0x98
 8013728:	46bd      	mov	sp, r7
 801372a:	bd80      	pop	{r7, pc}
 801372c:	08024e18 	.word	0x08024e18
 8013730:	20000e4c 	.word	0x20000e4c
 8013734:	08024e40 	.word	0x08024e40

08013738 <prvTCPPrepareConnect_IPV4>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
BaseType_t prvTCPPrepareConnect_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 8013738:	b5f0      	push	{r4, r5, r6, r7, lr}
 801373a:	b093      	sub	sp, #76	@ 0x4c
 801373c:	af06      	add	r7, sp, #24
 801373e:	6078      	str	r0, [r7, #4]
    TCPPacket_t * pxTCPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulRemoteIP;
    MACAddress_t xEthAddress;
    BaseType_t xReturn = pdTRUE;
 8013740:	2301      	movs	r3, #1
 8013742:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t ulInitialSequenceNumber = 0;
 8013744:	2300      	movs	r3, #0
 8013746:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ( ipconfigHAS_PRINTF != 0 )
    {
        /* Only necessary for nicer logging. */
        ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 8013748:	f107 030c 	add.w	r3, r7, #12
 801374c:	2206      	movs	r2, #6
 801374e:	2100      	movs	r1, #0
 8013750:	4618      	mov	r0, r3
 8013752:	f00d fa14 	bl	8020b7e <memset>
    }
    #endif /* ipconfigHAS_PRINTF != 0 */

    ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801375a:	061a      	lsls	r2, r3, #24
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013760:	021b      	lsls	r3, r3, #8
 8013762:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013766:	431a      	orrs	r2, r3
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801376c:	0a1b      	lsrs	r3, r3, #8
 801376e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013772:	431a      	orrs	r2, r3
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013778:	0e1b      	lsrs	r3, r3, #24
 801377a:	4313      	orrs	r3, r2
 801377c:	617b      	str	r3, [r7, #20]
    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ), &( pxSocket->pxEndPoint ) );
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8013784:	f107 010c 	add.w	r1, r7, #12
 8013788:	f107 0314 	add.w	r3, r7, #20
 801378c:	4618      	mov	r0, r3
 801378e:	f7f2 fdb9 	bl	8006304 <eARPGetCacheEntry>
 8013792:	4603      	mov	r3, r0
 8013794:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    switch( eReturned )
 8013798:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801379c:	2b01      	cmp	r3, #1
 801379e:	d037      	beq.n	8013810 <prvTCPPrepareConnect_IPV4+0xd8>

        case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
        case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
        default:
            /* Count the number of times it could not find the ARP address. */
            pxSocket->u.xTCP.ucRepCount++;
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80137a6:	3301      	adds	r3, #1
 80137a8:	b2da      	uxtb	r2, r3
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

            FreeRTOS_debug_printf( ( "ARP for %xip (using %xip): rc=%d %02x-%02x-%02x-%02x-%02x-%02x\n",
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80137b4:	697b      	ldr	r3, [r7, #20]
 80137b6:	061a      	lsls	r2, r3, #24
 80137b8:	697b      	ldr	r3, [r7, #20]
 80137ba:	021b      	lsls	r3, r3, #8
 80137bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80137c0:	431a      	orrs	r2, r3
 80137c2:	697b      	ldr	r3, [r7, #20]
 80137c4:	0a1b      	lsrs	r3, r3, #8
 80137c6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80137ca:	431a      	orrs	r2, r3
 80137cc:	697b      	ldr	r3, [r7, #20]
 80137ce:	0e1b      	lsrs	r3, r3, #24
 80137d0:	431a      	orrs	r2, r3
 80137d2:	f897 e027 	ldrb.w	lr, [r7, #39]	@ 0x27
 80137d6:	7b38      	ldrb	r0, [r7, #12]
 80137d8:	7b7c      	ldrb	r4, [r7, #13]
 80137da:	7bbd      	ldrb	r5, [r7, #14]
 80137dc:	7bfe      	ldrb	r6, [r7, #15]
 80137de:	f897 c010 	ldrb.w	ip, [r7, #16]
 80137e2:	f8c7 c000 	str.w	ip, [r7]
 80137e6:	f897 c011 	ldrb.w	ip, [r7, #17]
 80137ea:	4663      	mov	r3, ip
 80137ec:	9305      	str	r3, [sp, #20]
 80137ee:	683b      	ldr	r3, [r7, #0]
 80137f0:	9304      	str	r3, [sp, #16]
 80137f2:	9603      	str	r6, [sp, #12]
 80137f4:	9502      	str	r5, [sp, #8]
 80137f6:	9401      	str	r4, [sp, #4]
 80137f8:	9000      	str	r0, [sp, #0]
 80137fa:	4673      	mov	r3, lr
 80137fc:	485a      	ldr	r0, [pc, #360]	@ (8013968 <prvTCPPrepareConnect_IPV4+0x230>)
 80137fe:	f00c fe95 	bl	802052c <lUDPLoggingPrintf>
                                     xEthAddress.ucBytes[ 3 ],
                                     xEthAddress.ucBytes[ 4 ],
                                     xEthAddress.ucBytes[ 5 ] ) );

            /* And issue a (new) ARP request */
            FreeRTOS_OutputARPRequest( ulRemoteIP );
 8013802:	697b      	ldr	r3, [r7, #20]
 8013804:	4618      	mov	r0, r3
 8013806:	f7f2 ffd1 	bl	80067ac <FreeRTOS_OutputARPRequest>
            xReturn = pdFALSE;
 801380a:	2300      	movs	r3, #0
 801380c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 801380e:	e000      	b.n	8013812 <prvTCPPrepareConnect_IPV4+0xda>
            break;            /* We can now prepare the SYN packet. */
 8013810:	bf00      	nop
    }

    if( xReturn != pdFALSE )
 8013812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013814:	2b00      	cmp	r3, #0
 8013816:	d010      	beq.n	801383a <prvTCPPrepareConnect_IPV4+0x102>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxSocket->xLocalAddress.ulIP_IPv4,
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801382a:	f7ed fc95 	bl	8001158 <ulApplicationGetNextSequenceNumber>
 801382e:	62b8      	str	r0, [r7, #40]	@ 0x28
                                                                      pxSocket->usLocalPort,
                                                                      pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                                      pxSocket->u.xTCP.usRemotePort );

        /* Check for a random number generation error. */
        if( ulInitialSequenceNumber == 0U )
 8013830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013832:	2b00      	cmp	r3, #0
 8013834:	d101      	bne.n	801383a <prvTCPPrepareConnect_IPV4+0x102>
        {
            xReturn = pdFALSE;
 8013836:	2300      	movs	r3, #0
 8013838:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if( xReturn != pdFALSE )
 801383a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801383c:	2b00      	cmp	r3, #0
 801383e:	f000 808d 	beq.w	801395c <prvTCPPrepareConnect_IPV4+0x224>
         * the buffer onto the TCPPacket_t struct to easily access it's field. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( TCPPacket_t * ) pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	33aa      	adds	r3, #170	@ 0xaa
 8013846:	623b      	str	r3, [r7, #32]
        pxIPHeader = &pxTCPPacket->xIPHeader;
 8013848:	6a3b      	ldr	r3, [r7, #32]
 801384a:	330e      	adds	r3, #14
 801384c:	61fb      	str	r3, [r7, #28]

        /* reset the retry counter to zero. */
        pxSocket->u.xTCP.ucRepCount = 0U;
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	2200      	movs	r2, #0
 8013852:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        /* And remember that the connect/SYN data are prepared. */
        pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 8013856:	687a      	ldr	r2, [r7, #4]
 8013858:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801385c:	f043 0308 	orr.w	r3, r3, #8
 8013860:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Now that the Ethernet address is known, the initial packet can be
         * prepared. */
        ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	33aa      	adds	r3, #170	@ 0xaa
 8013868:	225a      	movs	r2, #90	@ 0x5a
 801386a:	2100      	movs	r1, #0
 801386c:	4618      	mov	r0, r3
 801386e:	f00d f986 	bl	8020b7e <memset>

        /* Write the Ethernet address in Source, because it will be swapped by
         * prvTCPReturnPacket(). */
        ( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 8013872:	6a3b      	ldr	r3, [r7, #32]
 8013874:	3306      	adds	r3, #6
 8013876:	461a      	mov	r2, r3
 8013878:	f107 030c 	add.w	r3, r7, #12
 801387c:	6818      	ldr	r0, [r3, #0]
 801387e:	6010      	str	r0, [r2, #0]
 8013880:	889b      	ldrh	r3, [r3, #4]
 8013882:	8093      	strh	r3, [r2, #4]

        /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
        pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 8013884:	6a3b      	ldr	r3, [r7, #32]
 8013886:	2200      	movs	r2, #0
 8013888:	f042 0208 	orr.w	r2, r2, #8
 801388c:	731a      	strb	r2, [r3, #12]
 801388e:	2200      	movs	r2, #0
 8013890:	735a      	strb	r2, [r3, #13]

        pxIPHeader->ucVersionHeaderLength = 0x45U;
 8013892:	69fb      	ldr	r3, [r7, #28]
 8013894:	2245      	movs	r2, #69	@ 0x45
 8013896:	701a      	strb	r2, [r3, #0]
        usLength = ( uint16_t ) ( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 8013898:	2338      	movs	r3, #56	@ 0x38
 801389a:	837b      	strh	r3, [r7, #26]
        pxIPHeader->usLength = FreeRTOS_htons( usLength );
 801389c:	8b7b      	ldrh	r3, [r7, #26]
 801389e:	021b      	lsls	r3, r3, #8
 80138a0:	b21a      	sxth	r2, r3
 80138a2:	8b7b      	ldrh	r3, [r7, #26]
 80138a4:	0a1b      	lsrs	r3, r3, #8
 80138a6:	b29b      	uxth	r3, r3
 80138a8:	b21b      	sxth	r3, r3
 80138aa:	4313      	orrs	r3, r2
 80138ac:	b21b      	sxth	r3, r3
 80138ae:	b29a      	uxth	r2, r3
 80138b0:	69fb      	ldr	r3, [r7, #28]
 80138b2:	805a      	strh	r2, [r3, #2]
        pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 80138b4:	69fb      	ldr	r3, [r7, #28]
 80138b6:	2280      	movs	r2, #128	@ 0x80
 80138b8:	721a      	strb	r2, [r3, #8]

        pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 80138ba:	69fb      	ldr	r3, [r7, #28]
 80138bc:	2206      	movs	r2, #6
 80138be:	725a      	strb	r2, [r3, #9]

        /* Addresses and ports will be stored swapped because prvTCPReturnPacket
         * will swap them back while replying. */
        pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80138c4:	061a      	lsls	r2, r3, #24
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80138ca:	021b      	lsls	r3, r3, #8
 80138cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80138d0:	431a      	orrs	r2, r3
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80138d6:	0a1b      	lsrs	r3, r3, #8
 80138d8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80138dc:	431a      	orrs	r2, r3
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80138e2:	0e1b      	lsrs	r3, r3, #24
 80138e4:	431a      	orrs	r2, r3
 80138e6:	69fb      	ldr	r3, [r7, #28]
 80138e8:	60da      	str	r2, [r3, #12]

        pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80138f0:	021b      	lsls	r3, r3, #8
 80138f2:	b21a      	sxth	r2, r3
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80138fa:	0a1b      	lsrs	r3, r3, #8
 80138fc:	b29b      	uxth	r3, r3
 80138fe:	b21b      	sxth	r3, r3
 8013900:	4313      	orrs	r3, r2
 8013902:	b21b      	sxth	r3, r3
 8013904:	b29a      	uxth	r2, r3
 8013906:	6a3b      	ldr	r3, [r7, #32]
 8013908:	845a      	strh	r2, [r3, #34]	@ 0x22
        pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801390e:	021b      	lsls	r3, r3, #8
 8013910:	b21a      	sxth	r2, r3
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013916:	0a1b      	lsrs	r3, r3, #8
 8013918:	b29b      	uxth	r3, r3
 801391a:	b21b      	sxth	r3, r3
 801391c:	4313      	orrs	r3, r2
 801391e:	b21b      	sxth	r3, r3
 8013920:	b29a      	uxth	r2, r3
 8013922:	6a3b      	ldr	r3, [r7, #32]
 8013924:	849a      	strh	r2, [r3, #36]	@ 0x24

        /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
         * isn't known yet. */
        pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0U;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	2200      	movs	r2, #0
 801392a:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Start with ISN (Initial Sequence Number). */
        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013932:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
         * the high nibble of the TCP offset field. */
        pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50U;
 8013936:	6a3b      	ldr	r3, [r7, #32]
 8013938:	2250      	movs	r2, #80	@ 0x50
 801393a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

        /* Only set the SYN flag. */
        pxTCPPacket->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 801393e:	6a3b      	ldr	r3, [r7, #32]
 8013940:	2202      	movs	r2, #2
 8013942:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

        /* Set the value of usMSS for this socket. */
        prvSocketSetMSS( pxSocket );
 8013946:	6878      	ldr	r0, [r7, #4]
 8013948:	f000 fc3c 	bl	80141c4 <prvSocketSetMSS>

        /* The initial sequence numbers at our side are known.  Later
         * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
         * first wait for a SYN+ACK reply. */
        if( prvTCPCreateWindow( pxSocket ) != pdTRUE )
 801394c:	6878      	ldr	r0, [r7, #4]
 801394e:	f7fe ff2b 	bl	80127a8 <prvTCPCreateWindow>
 8013952:	4603      	mov	r3, r0
 8013954:	2b01      	cmp	r3, #1
 8013956:	d001      	beq.n	801395c <prvTCPPrepareConnect_IPV4+0x224>
        {
            xReturn = pdFALSE;
 8013958:	2300      	movs	r3, #0
 801395a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    return xReturn;
 801395c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 801395e:	4618      	mov	r0, r3
 8013960:	3734      	adds	r7, #52	@ 0x34
 8013962:	46bd      	mov	sp, r7
 8013964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013966:	bf00      	nop
 8013968:	08024e80 	.word	0x08024e80

0801396c <prvTCPSendSpecialPktHelper_IPV4>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
BaseType_t prvTCPSendSpecialPktHelper_IPV4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint8_t ucTCPFlags )
{
 801396c:	b580      	push	{r7, lr}
 801396e:	b086      	sub	sp, #24
 8013970:	af00      	add	r7, sp, #0
 8013972:	6078      	str	r0, [r7, #4]
 8013974:	460b      	mov	r3, r1
 8013976:	70fb      	strb	r3, [r7, #3]
        /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        TCPPacket_t * pxTCPPacket = ( ( TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801397c:	617b      	str	r3, [r7, #20]
        const uint32_t ulSendLength =
 801397e:	2328      	movs	r3, #40	@ 0x28
 8013980:	613b      	str	r3, [r7, #16]
            ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER; /* Plus 0 options. */

        uint8_t ucFlagsReceived = pxTCPPacket->xTCPHeader.ucTCPFlags;
 8013982:	697b      	ldr	r3, [r7, #20]
 8013984:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013988:	73fb      	strb	r3, [r7, #15]
        pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 801398a:	697b      	ldr	r3, [r7, #20]
 801398c:	78fa      	ldrb	r2, [r7, #3]
 801398e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
        pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 8013992:	697b      	ldr	r3, [r7, #20]
 8013994:	2250      	movs	r2, #80	@ 0x50
 8013996:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

        if( ( ucFlagsReceived & tcpTCP_FLAG_SYN ) != 0U )
 801399a:	7bfb      	ldrb	r3, [r7, #15]
 801399c:	f003 0302 	and.w	r3, r3, #2
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d02c      	beq.n	80139fe <prvTCPSendSpecialPktHelper_IPV4+0x92>
        {
            /* A synchronize packet is received. It counts as 1 pseudo byte of data,
             * so increase the variable with 1. Before sending a reply, the values of
             * 'ulSequenceNumber' and 'ulAckNr' will be swapped. */
            uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 80139a4:	697b      	ldr	r3, [r7, #20]
 80139a6:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 80139aa:	061a      	lsls	r2, r3, #24
 80139ac:	697b      	ldr	r3, [r7, #20]
 80139ae:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 80139b2:	021b      	lsls	r3, r3, #8
 80139b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80139b8:	431a      	orrs	r2, r3
 80139ba:	697b      	ldr	r3, [r7, #20]
 80139bc:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 80139c0:	0a1b      	lsrs	r3, r3, #8
 80139c2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80139c6:	431a      	orrs	r2, r3
 80139c8:	697b      	ldr	r3, [r7, #20]
 80139ca:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 80139ce:	0e1b      	lsrs	r3, r3, #24
 80139d0:	4313      	orrs	r3, r2
 80139d2:	60bb      	str	r3, [r7, #8]
            ulSequenceNumber++;
 80139d4:	68bb      	ldr	r3, [r7, #8]
 80139d6:	3301      	adds	r3, #1
 80139d8:	60bb      	str	r3, [r7, #8]
            pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( ulSequenceNumber );
 80139da:	68bb      	ldr	r3, [r7, #8]
 80139dc:	061a      	lsls	r2, r3, #24
 80139de:	68bb      	ldr	r3, [r7, #8]
 80139e0:	021b      	lsls	r3, r3, #8
 80139e2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80139e6:	431a      	orrs	r2, r3
 80139e8:	68bb      	ldr	r3, [r7, #8]
 80139ea:	0a1b      	lsrs	r3, r3, #8
 80139ec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80139f0:	431a      	orrs	r2, r3
 80139f2:	68bb      	ldr	r3, [r7, #8]
 80139f4:	0e1b      	lsrs	r3, r3, #24
 80139f6:	431a      	orrs	r2, r3
 80139f8:	697b      	ldr	r3, [r7, #20]
 80139fa:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26
        }

        prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 80139fe:	2300      	movs	r3, #0
 8013a00:	693a      	ldr	r2, [r7, #16]
 8013a02:	6879      	ldr	r1, [r7, #4]
 8013a04:	2000      	movs	r0, #0
 8013a06:	f7fe fd73 	bl	80124f0 <prvTCPReturnPacket>
    }
    #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

    /* The packet was not consumed. */
    return pdFAIL;
 8013a0a:	2300      	movs	r3, #0
}
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	3718      	adds	r7, #24
 8013a10:	46bd      	mov	sp, r7
 8013a12:	bd80      	pop	{r7, pc}

08013a14 <prvTCPReturnPacket_IPV6>:
 */
void prvTCPReturnPacket_IPV6( FreeRTOS_Socket_t * pxSocket,
                              NetworkBufferDescriptor_t * pxDescriptor,
                              uint32_t ulLen,
                              BaseType_t xReleaseAfterSend )
{
 8013a14:	b5b0      	push	{r4, r5, r7, lr}
 8013a16:	b0aa      	sub	sp, #168	@ 0xa8
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	60f8      	str	r0, [r7, #12]
 8013a1c:	60b9      	str	r1, [r7, #8]
 8013a1e:	607a      	str	r2, [r7, #4]
 8013a20:	603b      	str	r3, [r7, #0]
    TCPPacket_IPv6_t * pxTCPPacket = NULL;
 8013a22:	2300      	movs	r3, #0
 8013a24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 8013a28:	2300      	movs	r3, #0
 8013a2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    IPHeader_IPv6_t * pxIPHeader = NULL;
 8013a2e:	2300      	movs	r3, #0
 8013a30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    BaseType_t xDoRelease = xReleaseAfterSend;
 8013a34:	683b      	ldr	r3, [r7, #0]
 8013a36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    EthernetHeader_t * pxEthernetHeader = NULL;
 8013a3a:	2300      	movs	r3, #0
 8013a3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 8013a40:	68bb      	ldr	r3, [r7, #8]
 8013a42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    NetworkBufferDescriptor_t xTempBuffer;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    MACAddress_t xMACAddress;
    const void * pvCopySource = NULL;
 8013a46:	2300      	movs	r3, #0
 8013a48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    void * pvCopyDest = NULL;
 8013a4c:	2300      	movs	r3, #0
 8013a4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    const size_t uxIPHeaderSize = ipSIZE_OF_IPv6_HEADER;
 8013a52:	2328      	movs	r3, #40	@ 0x28
 8013a54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    IPv6_Address_t xDestinationIPAddress;

    do
    {
        /* Use do/while to be able to break out of the flow */
        if( ( pxNetworkBuffer == NULL ) && ( pxSocket == NULL ) )
 8013a58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d103      	bne.n	8013a68 <prvTCPReturnPacket_IPV6+0x54>
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	f000 81ae 	beq.w	8013dc4 <prvTCPReturnPacket_IPV6+0x3b0>
            break;
        }

        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 8013a68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d117      	bne.n	8013aa0 <prvTCPReturnPacket_IPV6+0x8c>
        {
            pxNetworkBuffer = &xTempBuffer;
 8013a70:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8013a74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

            ( void ) memset( &xTempBuffer, 0, sizeof( xTempBuffer ) );
 8013a78:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8013a7c:	2238      	movs	r2, #56	@ 0x38
 8013a7e:	2100      	movs	r1, #0
 8013a80:	4618      	mov	r0, r3
 8013a82:	f00d f87c 	bl	8020b7e <memset>
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	f103 02aa 	add.w	r2, r3, #170	@ 0xaa
 8013a8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013a90:	625a      	str	r2, [r3, #36]	@ 0x24
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8013a92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013a96:	225a      	movs	r2, #90	@ 0x5a
 8013a98:	629a      	str	r2, [r3, #40]	@ 0x28
            xDoRelease = pdFALSE;
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        {
            if( xDoRelease == pdFALSE )
 8013aa0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d114      	bne.n	8013ad2 <prvTCPReturnPacket_IPV6+0xbe>
            {
                /* A zero-copy network driver wants to pass the packet buffer
                 * to DMA, so a new buffer must be created. */
                pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 8013aa8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013aae:	4619      	mov	r1, r3
 8013ab0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8013ab4:	f7f5 fcf2 	bl	800949c <pxDuplicateNetworkBufferWithDescriptor>
 8013ab8:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

                if( pxNetworkBuffer != NULL )
 8013abc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d003      	beq.n	8013acc <prvTCPReturnPacket_IPV6+0xb8>
                {
                    xDoRelease = pdTRUE;
 8013ac4:	2301      	movs	r3, #1
 8013ac6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8013aca:	e002      	b.n	8013ad2 <prvTCPReturnPacket_IPV6+0xbe>
                }
                else
                {
                    FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 8013acc:	48c0      	ldr	r0, [pc, #768]	@ (8013dd0 <prvTCPReturnPacket_IPV6+0x3bc>)
 8013ace:	f00c fd2d 	bl	802052c <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL ) /* LCOV_EXCL_BR_LINE the 2nd branch will never be reached */
 8013ad2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	f000 8175 	beq.w	8013dc6 <prvTCPReturnPacket_IPV6+0x3b2>
        #endif
        {
            eARPLookupResult_t eResult;
            NetworkInterface_t * pxInterface;

            configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8013adc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d103      	bne.n	8013aee <prvTCPReturnPacket_IPV6+0xda>
 8013ae6:	219d      	movs	r1, #157	@ 0x9d
 8013ae8:	48ba      	ldr	r0, [pc, #744]	@ (8013dd4 <prvTCPReturnPacket_IPV6+0x3c0>)
 8013aea:	f7ed fb15 	bl	8001118 <vAssertCalled>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8013aee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013af4:	330e      	adds	r3, #14
 8013af6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            /* Map the Ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxTCPPacket = ( TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer;
 8013afa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            pxEthernetHeader = ( EthernetHeader_t * ) &( pxTCPPacket->xEthernetHeader );
 8013b04:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013b08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] );
 8013b0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013b10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013b12:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013b16:	330e      	adds	r3, #14
 8013b18:	4413      	add	r3, r2
 8013b1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8013b1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d117      	bne.n	8013b58 <prvTCPReturnPacket_IPV6+0x144>
            {
                prvTCPReturn_SetEndPoint( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8013b28:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8013b2c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8013b30:	68f8      	ldr	r0, [r7, #12]
 8013b32:	f7fe ff9f 	bl	8012a74 <prvTCPReturn_SetEndPoint>

                if( pxNetworkBuffer->pxEndPoint == NULL )
 8013b36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d10b      	bne.n	8013b58 <prvTCPReturnPacket_IPV6+0x144>
                {
                    if( xDoRelease != pdFALSE )
 8013b40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d003      	beq.n	8013b50 <prvTCPReturnPacket_IPV6+0x13c>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8013b48:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8013b4c:	f002 fc04 	bl	8016358 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxNetworkBuffer = NULL;
 8013b50:	2300      	movs	r3, #0
 8013b52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                    break;
 8013b56:	e136      	b.n	8013dc6 <prvTCPReturnPacket_IPV6+0x3b2>
                }
            }

            /* Fill the packet, swapping from- and to-addresses. */
            if( pxSocket != NULL )
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d025      	beq.n	8013baa <prvTCPReturnPacket_IPV6+0x196>
            {
                prvTCPReturn_CheckTCPWindow( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8013b5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8013b62:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8013b66:	68f8      	ldr	r0, [r7, #12]
 8013b68:	f7fe fd02 	bl	8012570 <prvTCPReturn_CheckTCPWindow>
                prvTCPReturn_SetSequenceNumber( pxSocket, pxNetworkBuffer, uxIPHeaderSize, ulLen );
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8013b72:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8013b76:	68f8      	ldr	r0, [r7, #12]
 8013b78:	f7fe fd74 	bl	8012664 <prvTCPReturn_SetSequenceNumber>
                ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8013b7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013b80:	f103 0018 	add.w	r0, r3, #24
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	3354      	adds	r3, #84	@ 0x54
 8013b88:	2210      	movs	r2, #16
 8013b8a:	4619      	mov	r1, r3
 8013b8c:	f00c feea 	bl	8020964 <memcpy>
                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8013b90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013b94:	f103 0008 	add.w	r0, r3, #8
 8013b98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013b9e:	3338      	adds	r3, #56	@ 0x38
 8013ba0:	2210      	movs	r2, #16
 8013ba2:	4619      	mov	r1, r3
 8013ba4:	f00c fede 	bl	8020964 <memcpy>
 8013ba8:	e02d      	b.n	8013c06 <prvTCPReturnPacket_IPV6+0x1f2>
            {
                IPv6_Address_t xTempAddress;

                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxProtocolHeaders->xTCPHeader.ulSequenceNumber, pxProtocolHeaders->xTCPHeader.ulAckNr );
 8013baa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013bae:	685b      	ldr	r3, [r3, #4]
 8013bb0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013bb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013bb6:	689a      	ldr	r2, [r3, #8]
 8013bb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013bbc:	605a      	str	r2, [r3, #4]
 8013bbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013bc2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8013bc4:	609a      	str	r2, [r3, #8]
                ( void ) memcpy( xTempAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8013bc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013bca:	3318      	adds	r3, #24
 8013bcc:	f107 0410 	add.w	r4, r7, #16
 8013bd0:	6818      	ldr	r0, [r3, #0]
 8013bd2:	6859      	ldr	r1, [r3, #4]
 8013bd4:	689a      	ldr	r2, [r3, #8]
 8013bd6:	68db      	ldr	r3, [r3, #12]
 8013bd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxIPHeader->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8013bda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013bde:	f103 0018 	add.w	r0, r3, #24
 8013be2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013be6:	3308      	adds	r3, #8
 8013be8:	2210      	movs	r2, #16
 8013bea:	4619      	mov	r1, r3
 8013bec:	f00c feba 	bl	8020964 <memcpy>
                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, xTempAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8013bf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013bf4:	3308      	adds	r3, #8
 8013bf6:	461d      	mov	r5, r3
 8013bf8:	f107 0410 	add.w	r4, r7, #16
 8013bfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013bfe:	6028      	str	r0, [r5, #0]
 8013c00:	6069      	str	r1, [r5, #4]
 8013c02:	60aa      	str	r2, [r5, #8]
 8013c04:	60eb      	str	r3, [r5, #12]
            }

            /* In IPv6, the "payload length" does not include the size of the IP-header */
            pxIPHeader->usPayloadLength = FreeRTOS_htons( ulLen - sizeof( IPHeader_IPv6_t ) );
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	b29b      	uxth	r3, r3
 8013c0a:	3b28      	subs	r3, #40	@ 0x28
 8013c0c:	b29b      	uxth	r3, r3
 8013c0e:	021b      	lsls	r3, r3, #8
 8013c10:	b29a      	uxth	r2, r3
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	3b28      	subs	r3, #40	@ 0x28
 8013c16:	0a1b      	lsrs	r3, r3, #8
 8013c18:	b29b      	uxth	r3, r3
 8013c1a:	4313      	orrs	r3, r2
 8013c1c:	b29a      	uxth	r2, r3
 8013c1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013c22:	809a      	strh	r2, [r3, #4]
                uint32_t ulTotalLength = ulLen + ipSIZE_OF_ETH_HEADER;
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxNetworkBuffer->pucEthernetBuffer, ulTotalLength, pdTRUE );
            }
            #endif /* ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 */

            vFlip_16( pxProtocolHeaders->xTCPHeader.usSourcePort, pxProtocolHeaders->xTCPHeader.usDestinationPort );
 8013c24:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013c28:	781a      	ldrb	r2, [r3, #0]
 8013c2a:	785b      	ldrb	r3, [r3, #1]
 8013c2c:	021b      	lsls	r3, r3, #8
 8013c2e:	4313      	orrs	r3, r2
 8013c30:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 8013c34:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013c38:	885b      	ldrh	r3, [r3, #2]
 8013c3a:	b29a      	uxth	r2, r3
 8013c3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013c40:	801a      	strh	r2, [r3, #0]
 8013c42:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013c46:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8013c4a:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ( size_t ) ulLen;
 8013c4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013c50:	687a      	ldr	r2, [r7, #4]
 8013c52:	629a      	str	r2, [r3, #40]	@ 0x28
            pxNetworkBuffer->xDataLength += ipSIZE_OF_ETH_HEADER;
 8013c54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013c5a:	f103 020e 	add.w	r2, r3, #14
 8013c5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013c62:	629a      	str	r2, [r3, #40]	@ 0x28
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif

            ( void ) memcpy( xDestinationIPAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8013c64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013c68:	3318      	adds	r3, #24
 8013c6a:	f107 0420 	add.w	r4, r7, #32
 8013c6e:	6818      	ldr	r0, [r3, #0]
 8013c70:	6859      	ldr	r1, [r3, #4]
 8013c72:	689a      	ldr	r2, [r3, #8]
 8013c74:	68db      	ldr	r3, [r3, #12]
 8013c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}

            eResult = eNDGetCacheEntry( &xDestinationIPAddress, &xMACAddress, &( pxNetworkBuffer->pxEndPoint ) );
 8013c78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013c7c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8013c80:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8013c84:	f107 0320 	add.w	r3, r7, #32
 8013c88:	4618      	mov	r0, r3
 8013c8a:	f7f6 ffa7 	bl	800abdc <eNDGetCacheEntry>
 8013c8e:	4603      	mov	r3, r0
 8013c90:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79

            if( eResult == eARPCacheHit )
 8013c94:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8013c98:	2b01      	cmp	r3, #1
 8013c9a:	d104      	bne.n	8013ca6 <prvTCPReturnPacket_IPV6+0x292>
            {
                pvCopySource = &xMACAddress;
 8013c9c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013ca0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8013ca4:	e004      	b.n	8013cb0 <prvTCPReturnPacket_IPV6+0x29c>
            }
            else
            {
                pvCopySource = &pxEthernetHeader->xSourceAddress;
 8013ca6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013caa:	3306      	adds	r3, #6
 8013cac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            }

            /* Fill in the destination MAC addresses. */
            pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 8013cb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013cb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 8013cb8:	2206      	movs	r2, #6
 8013cba:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8013cbe:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8013cc2:	f00c fe4f 	bl	8020964 <memcpy>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8013cc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013ccc:	33e8      	adds	r3, #232	@ 0xe8
 8013cce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 8013cd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013cd6:	3306      	adds	r3, #6
 8013cd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8013cdc:	2206      	movs	r2, #6
 8013cde:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8013ce2:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8013ce6:	f00c fe3d 	bl	8020964 <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8013cea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013cf0:	2b3b      	cmp	r3, #59	@ 0x3b
 8013cf2:	d81a      	bhi.n	8013d2a <prvTCPReturnPacket_IPV6+0x316>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8013cf4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013cfa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8013cfe:	e00c      	b.n	8013d1a <prvTCPReturnPacket_IPV6+0x306>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8013d00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013d04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013d06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013d0a:	4413      	add	r3, r2
 8013d0c:	2200      	movs	r2, #0
 8013d0e:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8013d10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013d14:	3301      	adds	r3, #1
 8013d16:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8013d1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013d1e:	2b3b      	cmp	r3, #59	@ 0x3b
 8013d20:	ddee      	ble.n	8013d00 <prvTCPReturnPacket_IPV6+0x2ec>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8013d22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013d26:	223c      	movs	r2, #60	@ 0x3c
 8013d28:	629a      	str	r2, [r3, #40]	@ 0x28
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface != NULL );
 8013d2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013d30:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d104      	bne.n	8013d42 <prvTCPReturnPacket_IPV6+0x32e>
 8013d38:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8013d3c:	4825      	ldr	r0, [pc, #148]	@ (8013dd4 <prvTCPReturnPacket_IPV6+0x3c0>)
 8013d3e:	f7ed f9eb 	bl	8001118 <vAssertCalled>
            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface->pfOutput != NULL );
 8013d42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013d48:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8013d4c:	68db      	ldr	r3, [r3, #12]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d104      	bne.n	8013d5c <prvTCPReturnPacket_IPV6+0x348>
 8013d52:	f240 1119 	movw	r1, #281	@ 0x119
 8013d56:	481f      	ldr	r0, [pc, #124]	@ (8013dd4 <prvTCPReturnPacket_IPV6+0x3c0>)
 8013d58:	f7ed f9de 	bl	8001118 <vAssertCalled>

            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8013d5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013d62:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8013d66:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xDoRelease );
 8013d68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013d6a:	68db      	ldr	r3, [r3, #12]
 8013d6c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8013d70:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8013d74:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8013d76:	4798      	blx	r3

            if( xDoRelease == pdFALSE )
 8013d78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d122      	bne.n	8013dc6 <prvTCPReturnPacket_IPV6+0x3b2>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 8013d80:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013d84:	f893 2036 	ldrb.w	r2, [r3, #54]	@ 0x36
 8013d88:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8013d8c:	021b      	lsls	r3, r3, #8
 8013d8e:	4313      	orrs	r3, r2
 8013d90:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
 8013d94:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013d98:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013d9a:	b29a      	uxth	r2, r3
 8013d9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013da0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8013da2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013da6:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 8013daa:	871a      	strh	r2, [r3, #56]	@ 0x38

                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8013dac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013db0:	f103 0008 	add.w	r0, r3, #8
 8013db4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013db8:	3318      	adds	r3, #24
 8013dba:	2210      	movs	r2, #16
 8013dbc:	4619      	mov	r1, r3
 8013dbe:	f00c fdd1 	bl	8020964 <memcpy>
            {
                /* Nothing to do: the buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    } while( ipFALSE_BOOL );
}
 8013dc2:	e000      	b.n	8013dc6 <prvTCPReturnPacket_IPV6+0x3b2>
            break;
 8013dc4:	bf00      	nop
}
 8013dc6:	bf00      	nop
 8013dc8:	37a8      	adds	r7, #168	@ 0xa8
 8013dca:	46bd      	mov	sp, r7
 8013dcc:	bdb0      	pop	{r4, r5, r7, pc}
 8013dce:	bf00      	nop
 8013dd0:	08024ec0 	.word	0x08024ec0
 8013dd4:	08024ee8 	.word	0x08024ee8

08013dd8 <prvTCPPrepareConnect_IPV6>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
BaseType_t prvTCPPrepareConnect_IPV6( FreeRTOS_Socket_t * pxSocket )
{
 8013dd8:	b590      	push	{r4, r7, lr}
 8013dda:	b093      	sub	sp, #76	@ 0x4c
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	6078      	str	r0, [r7, #4]
    TCPPacket_IPv6_t * pxTCPPacket = NULL;
 8013de0:	2300      	movs	r3, #0
 8013de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    IPHeader_IPv6_t * pxIPHeader = NULL;
 8013de4:	2300      	movs	r3, #0
 8013de6:	63bb      	str	r3, [r7, #56]	@ 0x38
    eARPLookupResult_t eReturned;
    IP_Address_t xRemoteIP;
    MACAddress_t xEthAddress;
    BaseType_t xReturn = pdTRUE;
 8013de8:	2301      	movs	r3, #1
 8013dea:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t ulInitialSequenceNumber = 0;
 8013dec:	2300      	movs	r3, #0
 8013dee:	643b      	str	r3, [r7, #64]	@ 0x40
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 8013df0:	2300      	movs	r3, #0
 8013df2:	637b      	str	r3, [r7, #52]	@ 0x34
    NetworkEndPoint_t * pxEndPoint = NULL;
 8013df4:	2300      	movs	r3, #0
 8013df6:	60fb      	str	r3, [r7, #12]

    #if ( ipconfigHAS_PRINTF != 0 )
    {
        /* Only necessary for nicer logging. */
        ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 8013df8:	f107 0310 	add.w	r3, r7, #16
 8013dfc:	2206      	movs	r2, #6
 8013dfe:	2100      	movs	r1, #0
 8013e00:	4618      	mov	r0, r3
 8013e02:	f00c febc 	bl	8020b7e <memset>
    }
    #endif /* ipconfigHAS_PRINTF != 0 */

    ( void ) memset( xRemoteIP.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 8013e06:	f107 0318 	add.w	r3, r7, #24
 8013e0a:	2210      	movs	r2, #16
 8013e0c:	2100      	movs	r1, #0
 8013e0e:	4618      	mov	r0, r3
 8013e10:	f00c feb5 	bl	8020b7e <memset>
    ( void ) memcpy( xRemoteIP.xIP_IPv6.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	3354      	adds	r3, #84	@ 0x54
 8013e18:	f107 0418 	add.w	r4, r7, #24
 8013e1c:	6818      	ldr	r0, [r3, #0]
 8013e1e:	6859      	ldr	r1, [r3, #4]
 8013e20:	689a      	ldr	r2, [r3, #8]
 8013e22:	68db      	ldr	r3, [r3, #12]
 8013e24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    eReturned = eNDGetCacheEntry( &( xRemoteIP.xIP_IPv6 ), &( xEthAddress ), &( pxEndPoint ) );
 8013e26:	f107 020c 	add.w	r2, r7, #12
 8013e2a:	f107 0110 	add.w	r1, r7, #16
 8013e2e:	f107 0318 	add.w	r3, r7, #24
 8013e32:	4618      	mov	r0, r3
 8013e34:	f7f6 fed2 	bl	800abdc <eNDGetCacheEntry>
 8013e38:	4603      	mov	r3, r0
 8013e3a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    FreeRTOS_printf( ( "eNDGetCacheEntry: %d with end-point %p\n", eReturned, ( void * ) pxEndPoint ) );
 8013e3e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013e42:	68fa      	ldr	r2, [r7, #12]
 8013e44:	4619      	mov	r1, r3
 8013e46:	4881      	ldr	r0, [pc, #516]	@ (801404c <prvTCPPrepareConnect_IPV6+0x274>)
 8013e48:	f00c fb70 	bl	802052c <lUDPLoggingPrintf>

    if( pxEndPoint != NULL )
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d002      	beq.n	8013e58 <prvTCPPrepareConnect_IPV6+0x80>
    {
        pxSocket->pxEndPoint = pxEndPoint;
 8013e52:	68fa      	ldr	r2, [r7, #12]
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                          &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8013e58:	6878      	ldr	r0, [r7, #4]
 8013e5a:	f7f5 f887 	bl	8008f6c <uxIPHeaderSizeSocket>
 8013e5e:	4603      	mov	r3, r0
 8013e60:	330e      	adds	r3, #14
    pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8013e62:	33a0      	adds	r3, #160	@ 0xa0
 8013e64:	687a      	ldr	r2, [r7, #4]
 8013e66:	4413      	add	r3, r2
 8013e68:	330a      	adds	r3, #10
 8013e6a:	637b      	str	r3, [r7, #52]	@ 0x34

    switch( eReturned )
 8013e6c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013e70:	2b01      	cmp	r3, #1
 8013e72:	d02c      	beq.n	8013ece <prvTCPPrepareConnect_IPV6+0xf6>

        case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
        case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
        default:
            /* Count the number of times it could not find the ARP address. */
            pxSocket->u.xTCP.ucRepCount++;
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8013e7a:	3301      	adds	r3, #1
 8013e7c:	b2da      	uxtb	r2, r3
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

            FreeRTOS_printf( ( "Looking up %pip with%s end-point\n", ( void * ) xRemoteIP.xIP_IPv6.ucBytes, ( pxEndPoint != NULL ) ? "" : "out" ) );
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d001      	beq.n	8013e8e <prvTCPPrepareConnect_IPV6+0xb6>
 8013e8a:	4a71      	ldr	r2, [pc, #452]	@ (8014050 <prvTCPPrepareConnect_IPV6+0x278>)
 8013e8c:	e000      	b.n	8013e90 <prvTCPPrepareConnect_IPV6+0xb8>
 8013e8e:	4a71      	ldr	r2, [pc, #452]	@ (8014054 <prvTCPPrepareConnect_IPV6+0x27c>)
 8013e90:	f107 0318 	add.w	r3, r7, #24
 8013e94:	4619      	mov	r1, r3
 8013e96:	4870      	ldr	r0, [pc, #448]	@ (8014058 <prvTCPPrepareConnect_IPV6+0x280>)
 8013e98:	f00c fb48 	bl	802052c <lUDPLoggingPrintf>

            if( pxEndPoint != NULL )
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d012      	beq.n	8013ec8 <prvTCPPrepareConnect_IPV6+0xf0>
            {
                size_t uxNeededSize;
                NetworkBufferDescriptor_t * pxNetworkBuffer;

                uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 8013ea2:	2356      	movs	r3, #86	@ 0x56
 8013ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, 0U );
 8013ea6:	2100      	movs	r1, #0
 8013ea8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013eaa:	f002 f9ed 	bl	8016288 <pxGetNetworkBufferWithDescriptor>
 8013eae:	62b8      	str	r0, [r7, #40]	@ 0x28

                if( pxNetworkBuffer != NULL )
 8013eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d008      	beq.n	8013ec8 <prvTCPPrepareConnect_IPV6+0xf0>
                {
                    pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8013eb6:	68fa      	ldr	r2, [r7, #12]
 8013eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013eba:	631a      	str	r2, [r3, #48]	@ 0x30
                    vNDSendNeighbourSolicitation( pxNetworkBuffer, &( xRemoteIP.xIP_IPv6 ) );
 8013ebc:	f107 0318 	add.w	r3, r7, #24
 8013ec0:	4619      	mov	r1, r3
 8013ec2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013ec4:	f7f7 f8f6 	bl	800b0b4 <vNDSendNeighbourSolicitation>
                }
            }

            xReturn = pdFALSE;
 8013ec8:	2300      	movs	r3, #0
 8013eca:	647b      	str	r3, [r7, #68]	@ 0x44
            break;
 8013ecc:	e000      	b.n	8013ed0 <prvTCPPrepareConnect_IPV6+0xf8>
            break;            /* We can now prepare the SYN packet. */
 8013ece:	bf00      	nop
    }

    if( xReturn != pdFALSE )
 8013ed0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d010      	beq.n	8013ef8 <prvTCPPrepareConnect_IPV6+0x120>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxSocket->xLocalAddress.ulIP_IPv4,
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013ee8:	f7ed f936 	bl	8001158 <ulApplicationGetNextSequenceNumber>
 8013eec:	6438      	str	r0, [r7, #64]	@ 0x40
                                                                      pxSocket->usLocalPort,
                                                                      pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                                      pxSocket->u.xTCP.usRemotePort );

        /* Check for a random number generation error. */
        if( ulInitialSequenceNumber == 0U )
 8013eee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d101      	bne.n	8013ef8 <prvTCPPrepareConnect_IPV6+0x120>
        {
            xReturn = pdFALSE;
 8013ef4:	2300      	movs	r3, #0
 8013ef6:	647b      	str	r3, [r7, #68]	@ 0x44
        }
    }

    if( xReturn != pdFALSE )
 8013ef8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d05d      	beq.n	8013fba <prvTCPPrepareConnect_IPV6+0x1e2>
         * the buffer onto the TCPPacket_IPv6_t struct to easily access it's field. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( TCPPacket_IPv6_t * ) pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	33aa      	adds	r3, #170	@ 0xaa
 8013f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pxIPHeader = &( pxTCPPacket->xIPHeader );
 8013f04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f06:	330e      	adds	r3, #14
 8013f08:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* reset the retry counter to zero. */
        pxSocket->u.xTCP.ucRepCount = 0U;
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	2200      	movs	r2, #0
 8013f0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        /* And remember that the connect/SYN data are prepared. */
        pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 8013f12:	687a      	ldr	r2, [r7, #4]
 8013f14:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013f18:	f043 0308 	orr.w	r3, r3, #8
 8013f1c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Now that the Ethernet address is known, the initial packet can be
         * prepared. */
        ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	33aa      	adds	r3, #170	@ 0xaa
 8013f24:	225a      	movs	r2, #90	@ 0x5a
 8013f26:	2100      	movs	r1, #0
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f00c fe28 	bl	8020b7e <memset>

        /* Write the Ethernet address in Source, because it will be swapped by
         * prvTCPReturnPacket(). */
        ( void ) memcpy( ( void * ) ( &( pxTCPPacket->xEthernetHeader.xSourceAddress ) ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 8013f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f30:	3306      	adds	r3, #6
 8013f32:	461a      	mov	r2, r3
 8013f34:	f107 0310 	add.w	r3, r7, #16
 8013f38:	6818      	ldr	r0, [r3, #0]
 8013f3a:	6010      	str	r0, [r2, #0]
 8013f3c:	889b      	ldrh	r3, [r3, #4]
 8013f3e:	8093      	strh	r3, [r2, #4]

        if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	7a1b      	ldrb	r3, [r3, #8]
 8013f44:	f003 0301 	and.w	r3, r3, #1
 8013f48:	b2db      	uxtb	r3, r3
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d035      	beq.n	8013fba <prvTCPPrepareConnect_IPV6+0x1e2>
        {
            /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
            pxTCPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 8013f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f50:	2200      	movs	r2, #0
 8013f52:	f062 0279 	orn	r2, r2, #121	@ 0x79
 8013f56:	731a      	strb	r2, [r3, #12]
 8013f58:	2200      	movs	r2, #0
 8013f5a:	f062 0222 	orn	r2, r2, #34	@ 0x22
 8013f5e:	735a      	strb	r2, [r3, #13]

            pxIPHeader->ucVersionTrafficClass = ( uint8_t ) 0x60U;
 8013f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f62:	2260      	movs	r2, #96	@ 0x60
 8013f64:	701a      	strb	r2, [r3, #0]
            pxIPHeader->ucTrafficClassFlow = ( uint8_t ) 0x00;
 8013f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f68:	2200      	movs	r2, #0
 8013f6a:	705a      	strb	r2, [r3, #1]
            pxIPHeader->usFlowLabel = ( uint16_t ) 0x0000U;
 8013f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f6e:	2200      	movs	r2, #0
 8013f70:	709a      	strb	r2, [r3, #2]
 8013f72:	2200      	movs	r2, #0
 8013f74:	70da      	strb	r2, [r3, #3]
            pxIPHeader->usPayloadLength = FreeRTOS_htons( sizeof( TCPHeader_t ) );
 8013f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f78:	2200      	movs	r2, #0
 8013f7a:	711a      	strb	r2, [r3, #4]
 8013f7c:	2200      	movs	r2, #0
 8013f7e:	f042 0224 	orr.w	r2, r2, #36	@ 0x24
 8013f82:	715a      	strb	r2, [r3, #5]
            pxIPHeader->ucNextHeader = ( uint8_t ) ipPROTOCOL_TCP;
 8013f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f86:	2206      	movs	r2, #6
 8013f88:	719a      	strb	r2, [r3, #6]
            pxIPHeader->ucHopLimit = 128;
 8013f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f8c:	2280      	movs	r2, #128	@ 0x80
 8013f8e:	71da      	strb	r2, [r3, #7]
            /* The Source and Destination addresses will be swapped later. */
            ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, sizeof( pxIPHeader->xSourceAddress.ucBytes ) );
 8013f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f92:	f103 0008 	add.w	r0, r3, #8
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	3354      	adds	r3, #84	@ 0x54
 8013f9a:	2210      	movs	r2, #16
 8013f9c:	4619      	mov	r1, r3
 8013f9e:	f00c fce1 	bl	8020964 <memcpy>
            ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( pxIPHeader->xDestinationAddress.ucBytes ) );
 8013fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fa4:	f103 0018 	add.w	r0, r3, #24
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	3328      	adds	r3, #40	@ 0x28
 8013fac:	2210      	movs	r2, #16
 8013fae:	4619      	mov	r1, r3
 8013fb0:	f00c fcd8 	bl	8020964 <memcpy>
            pxEndPoint = pxSocket->pxEndPoint;
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013fb8:	60fb      	str	r3, [r7, #12]
        }
    }

    if( pxEndPoint != NULL )
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d03a      	beq.n	8014036 <prvTCPPrepareConnect_IPV6+0x25e>
    {
        pxSocket->pxEndPoint = pxEndPoint;
 8013fc0:	68fa      	ldr	r2, [r7, #12]
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	64da      	str	r2, [r3, #76]	@ 0x4c

        pxProtocolHeaders->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013fcc:	021b      	lsls	r3, r3, #8
 8013fce:	b21a      	sxth	r2, r3
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013fd6:	0a1b      	lsrs	r3, r3, #8
 8013fd8:	b29b      	uxth	r3, r3
 8013fda:	b21b      	sxth	r3, r3
 8013fdc:	4313      	orrs	r3, r2
 8013fde:	b21b      	sxth	r3, r3
 8013fe0:	b29a      	uxth	r2, r3
 8013fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013fe4:	801a      	strh	r2, [r3, #0]
        pxProtocolHeaders->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013fea:	021b      	lsls	r3, r3, #8
 8013fec:	b21a      	sxth	r2, r3
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013ff2:	0a1b      	lsrs	r3, r3, #8
 8013ff4:	b29b      	uxth	r3, r3
 8013ff6:	b21b      	sxth	r3, r3
 8013ff8:	4313      	orrs	r3, r2
 8013ffa:	b21b      	sxth	r3, r3
 8013ffc:	b29a      	uxth	r2, r3
 8013ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014000:	805a      	strh	r2, [r3, #2]

        /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
         * isn't known yet. */
        pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0U;
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	2200      	movs	r2, #0
 8014006:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Start with ISN (Initial Sequence Number). */
        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801400e:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
         * the high nibble of the TCP offset field. */
        pxProtocolHeaders->xTCPHeader.ucTCPOffset = 0x50U;
 8014012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014014:	2250      	movs	r2, #80	@ 0x50
 8014016:	731a      	strb	r2, [r3, #12]

        /* Only set the SYN flag. */
        pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 8014018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801401a:	2202      	movs	r2, #2
 801401c:	735a      	strb	r2, [r3, #13]

        /* Set the value of usMSS for this socket. */
        prvSocketSetMSS( pxSocket );
 801401e:	6878      	ldr	r0, [r7, #4]
 8014020:	f000 f8d0 	bl	80141c4 <prvSocketSetMSS>

        /* The initial sequence numbers at our side are known.  Later
         * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
         * first wait for a SYN+ACK reply. */
        if( prvTCPCreateWindow( pxSocket ) != pdTRUE )
 8014024:	6878      	ldr	r0, [r7, #4]
 8014026:	f7fe fbbf 	bl	80127a8 <prvTCPCreateWindow>
 801402a:	4603      	mov	r3, r0
 801402c:	2b01      	cmp	r3, #1
 801402e:	d007      	beq.n	8014040 <prvTCPPrepareConnect_IPV6+0x268>
        {
            xReturn = pdFAIL;
 8014030:	2300      	movs	r3, #0
 8014032:	647b      	str	r3, [r7, #68]	@ 0x44
 8014034:	e004      	b.n	8014040 <prvTCPPrepareConnect_IPV6+0x268>
        }
    }
    else
    {
        FreeRTOS_printf( ( "prvTCPPrepareConnect: No pxEndPoint yet?\n" ) );
 8014036:	4809      	ldr	r0, [pc, #36]	@ (801405c <prvTCPPrepareConnect_IPV6+0x284>)
 8014038:	f00c fa78 	bl	802052c <lUDPLoggingPrintf>
        xReturn = pdFAIL;
 801403c:	2300      	movs	r3, #0
 801403e:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    return xReturn;
 8014040:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8014042:	4618      	mov	r0, r3
 8014044:	374c      	adds	r7, #76	@ 0x4c
 8014046:	46bd      	mov	sp, r7
 8014048:	bd90      	pop	{r4, r7, pc}
 801404a:	bf00      	nop
 801404c:	08024f28 	.word	0x08024f28
 8014050:	08024f50 	.word	0x08024f50
 8014054:	08024f54 	.word	0x08024f54
 8014058:	08024f58 	.word	0x08024f58
 801405c:	08024f7c 	.word	0x08024f7c

08014060 <prvTCPSendSpecialPktHelper_IPV6>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
BaseType_t prvTCPSendSpecialPktHelper_IPV6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint8_t ucTCPFlags )
{
 8014060:	b580      	push	{r7, lr}
 8014062:	b086      	sub	sp, #24
 8014064:	af00      	add	r7, sp, #0
 8014066:	6078      	str	r0, [r7, #4]
 8014068:	460b      	mov	r3, r1
 801406a:	70fb      	strb	r3, [r7, #3]
        /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        TCPPacket_IPv6_t * pxTCPPacket = ( ( TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014070:	617b      	str	r3, [r7, #20]
        const uint32_t ulSendLength =
 8014072:	233c      	movs	r3, #60	@ 0x3c
 8014074:	613b      	str	r3, [r7, #16]
            ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_TCP_HEADER; /* Plus 0 options. */

        uint8_t ucFlagsReceived = pxTCPPacket->xTCPHeader.ucTCPFlags;
 8014076:	697b      	ldr	r3, [r7, #20]
 8014078:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801407c:	73fb      	strb	r3, [r7, #15]
        pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 801407e:	697b      	ldr	r3, [r7, #20]
 8014080:	78fa      	ldrb	r2, [r7, #3]
 8014082:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
        pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 8014086:	697b      	ldr	r3, [r7, #20]
 8014088:	2250      	movs	r2, #80	@ 0x50
 801408a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        if( ( ucFlagsReceived & tcpTCP_FLAG_SYN ) != 0U )
 801408e:	7bfb      	ldrb	r3, [r7, #15]
 8014090:	f003 0302 	and.w	r3, r3, #2
 8014094:	2b00      	cmp	r3, #0
 8014096:	d02c      	beq.n	80140f2 <prvTCPSendSpecialPktHelper_IPV6+0x92>
        {
            /* A synchronize packet is received. It counts as 1 pseudo byte of data,
             * so increase the variable with 1. Before sending a reply, the values of
             * 'ulSequenceNumber' and 'ulAckNr' will be swapped. */
            uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 8014098:	697b      	ldr	r3, [r7, #20]
 801409a:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 801409e:	061a      	lsls	r2, r3, #24
 80140a0:	697b      	ldr	r3, [r7, #20]
 80140a2:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 80140a6:	021b      	lsls	r3, r3, #8
 80140a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80140ac:	431a      	orrs	r2, r3
 80140ae:	697b      	ldr	r3, [r7, #20]
 80140b0:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 80140b4:	0a1b      	lsrs	r3, r3, #8
 80140b6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80140ba:	431a      	orrs	r2, r3
 80140bc:	697b      	ldr	r3, [r7, #20]
 80140be:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 80140c2:	0e1b      	lsrs	r3, r3, #24
 80140c4:	4313      	orrs	r3, r2
 80140c6:	60bb      	str	r3, [r7, #8]
            ulSequenceNumber++;
 80140c8:	68bb      	ldr	r3, [r7, #8]
 80140ca:	3301      	adds	r3, #1
 80140cc:	60bb      	str	r3, [r7, #8]
            pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( ulSequenceNumber );
 80140ce:	68bb      	ldr	r3, [r7, #8]
 80140d0:	061a      	lsls	r2, r3, #24
 80140d2:	68bb      	ldr	r3, [r7, #8]
 80140d4:	021b      	lsls	r3, r3, #8
 80140d6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80140da:	431a      	orrs	r2, r3
 80140dc:	68bb      	ldr	r3, [r7, #8]
 80140de:	0a1b      	lsrs	r3, r3, #8
 80140e0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80140e4:	431a      	orrs	r2, r3
 80140e6:	68bb      	ldr	r3, [r7, #8]
 80140e8:	0e1b      	lsrs	r3, r3, #24
 80140ea:	431a      	orrs	r2, r3
 80140ec:	697b      	ldr	r3, [r7, #20]
 80140ee:	f8c3 203a 	str.w	r2, [r3, #58]	@ 0x3a
        }

        prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 80140f2:	2300      	movs	r3, #0
 80140f4:	693a      	ldr	r2, [r7, #16]
 80140f6:	6879      	ldr	r1, [r7, #4]
 80140f8:	2000      	movs	r0, #0
 80140fa:	f7fe f9f9 	bl	80124f0 <prvTCPReturnPacket>
    }
    #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

    /* The packet was not consumed. */
    return pdFAIL;
 80140fe:	2300      	movs	r3, #0
}
 8014100:	4618      	mov	r0, r3
 8014102:	3718      	adds	r7, #24
 8014104:	46bd      	mov	sp, r7
 8014106:	bd80      	pop	{r7, pc}

08014108 <prvTCPFlagMeaning>:
 * @param[in] xFlags The TCP flags.
 *
 * @return The string containing the flags.
 */
        const char * prvTCPFlagMeaning( UBaseType_t xFlags )
        {
 8014108:	b5f0      	push	{r4, r5, r6, r7, lr}
 801410a:	b08d      	sub	sp, #52	@ 0x34
 801410c:	af08      	add	r7, sp, #32
 801410e:	6078      	str	r0, [r7, #4]
            size_t uxFlags = ( size_t ) xFlags;
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	60fb      	str	r3, [r7, #12]

            ( void ) snprintf( retString,
                               sizeof( retString ), "%c%c%c%c%c%c%c%c",
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_FIN ) != 0 ) ? 'F' : '.',   /* 0x0001: No more data from sender */
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	f003 0301 	and.w	r3, r3, #1
            ( void ) snprintf( retString,
 801411a:	2b00      	cmp	r3, #0
 801411c:	d002      	beq.n	8014124 <prvTCPFlagMeaning+0x1c>
 801411e:	f04f 0c46 	mov.w	ip, #70	@ 0x46
 8014122:	e001      	b.n	8014128 <prvTCPFlagMeaning+0x20>
 8014124:	f04f 0c2e 	mov.w	ip, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_SYN ) != 0 ) ? 'S' : '.',   /* 0x0002: Synchronize sequence numbers */
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	f003 0302 	and.w	r3, r3, #2
            ( void ) snprintf( retString,
 801412e:	2b00      	cmp	r3, #0
 8014130:	d001      	beq.n	8014136 <prvTCPFlagMeaning+0x2e>
 8014132:	2353      	movs	r3, #83	@ 0x53
 8014134:	e000      	b.n	8014138 <prvTCPFlagMeaning+0x30>
 8014136:	232e      	movs	r3, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_RST ) != 0 ) ? 'R' : '.',   /* 0x0004: Reset the connection */
 8014138:	68fa      	ldr	r2, [r7, #12]
 801413a:	f002 0204 	and.w	r2, r2, #4
            ( void ) snprintf( retString,
 801413e:	2a00      	cmp	r2, #0
 8014140:	d001      	beq.n	8014146 <prvTCPFlagMeaning+0x3e>
 8014142:	2252      	movs	r2, #82	@ 0x52
 8014144:	e000      	b.n	8014148 <prvTCPFlagMeaning+0x40>
 8014146:	222e      	movs	r2, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_PSH ) != 0 ) ? 'P' : '.',   /* 0x0008: Push function: please push buffered data to the recv application */
 8014148:	68f9      	ldr	r1, [r7, #12]
 801414a:	f001 0108 	and.w	r1, r1, #8
            ( void ) snprintf( retString,
 801414e:	2900      	cmp	r1, #0
 8014150:	d001      	beq.n	8014156 <prvTCPFlagMeaning+0x4e>
 8014152:	2150      	movs	r1, #80	@ 0x50
 8014154:	e000      	b.n	8014158 <prvTCPFlagMeaning+0x50>
 8014156:	212e      	movs	r1, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ACK ) != 0 ) ? 'A' : '.',   /* 0x0010: Acknowledgment field is significant */
 8014158:	68f8      	ldr	r0, [r7, #12]
 801415a:	f000 0010 	and.w	r0, r0, #16
            ( void ) snprintf( retString,
 801415e:	2800      	cmp	r0, #0
 8014160:	d001      	beq.n	8014166 <prvTCPFlagMeaning+0x5e>
 8014162:	2041      	movs	r0, #65	@ 0x41
 8014164:	e000      	b.n	8014168 <prvTCPFlagMeaning+0x60>
 8014166:	202e      	movs	r0, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_URG ) != 0 ) ? 'U' : '.',   /* 0x0020: Urgent pointer field is significant */
 8014168:	68fc      	ldr	r4, [r7, #12]
 801416a:	f004 0420 	and.w	r4, r4, #32
            ( void ) snprintf( retString,
 801416e:	2c00      	cmp	r4, #0
 8014170:	d001      	beq.n	8014176 <prvTCPFlagMeaning+0x6e>
 8014172:	2455      	movs	r4, #85	@ 0x55
 8014174:	e000      	b.n	8014178 <prvTCPFlagMeaning+0x70>
 8014176:	242e      	movs	r4, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ECN ) != 0 ) ? 'E' : '.',   /* 0x0040: ECN-Echo */
 8014178:	68fd      	ldr	r5, [r7, #12]
 801417a:	f005 0540 	and.w	r5, r5, #64	@ 0x40
            ( void ) snprintf( retString,
 801417e:	2d00      	cmp	r5, #0
 8014180:	d001      	beq.n	8014186 <prvTCPFlagMeaning+0x7e>
 8014182:	2545      	movs	r5, #69	@ 0x45
 8014184:	e000      	b.n	8014188 <prvTCPFlagMeaning+0x80>
 8014186:	252e      	movs	r5, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_CWR ) != 0 ) ? 'C' : '.' ); /* 0x0080: Congestion Window Reduced */
 8014188:	68fe      	ldr	r6, [r7, #12]
 801418a:	f006 0680 	and.w	r6, r6, #128	@ 0x80
            ( void ) snprintf( retString,
 801418e:	2e00      	cmp	r6, #0
 8014190:	d001      	beq.n	8014196 <prvTCPFlagMeaning+0x8e>
 8014192:	2643      	movs	r6, #67	@ 0x43
 8014194:	e000      	b.n	8014198 <prvTCPFlagMeaning+0x90>
 8014196:	262e      	movs	r6, #46	@ 0x2e
 8014198:	9606      	str	r6, [sp, #24]
 801419a:	9505      	str	r5, [sp, #20]
 801419c:	9404      	str	r4, [sp, #16]
 801419e:	9003      	str	r0, [sp, #12]
 80141a0:	9102      	str	r1, [sp, #8]
 80141a2:	9201      	str	r2, [sp, #4]
 80141a4:	9300      	str	r3, [sp, #0]
 80141a6:	4663      	mov	r3, ip
 80141a8:	4a04      	ldr	r2, [pc, #16]	@ (80141bc <prvTCPFlagMeaning+0xb4>)
 80141aa:	210a      	movs	r1, #10
 80141ac:	4804      	ldr	r0, [pc, #16]	@ (80141c0 <prvTCPFlagMeaning+0xb8>)
 80141ae:	f00d f9e9 	bl	8021584 <snprintf>
            return retString;
 80141b2:	4b03      	ldr	r3, [pc, #12]	@ (80141c0 <prvTCPFlagMeaning+0xb8>)
        }
 80141b4:	4618      	mov	r0, r3
 80141b6:	3714      	adds	r7, #20
 80141b8:	46bd      	mov	sp, r7
 80141ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141bc:	08024fa8 	.word	0x08024fa8
 80141c0:	200012d0 	.word	0x200012d0

080141c4 <prvSocketSetMSS>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
    void prvSocketSetMSS( FreeRTOS_Socket_t * pxSocket )
    {
 80141c4:	b580      	push	{r7, lr}
 80141c6:	b082      	sub	sp, #8
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	6078      	str	r0, [r7, #4]
        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	7a1b      	ldrb	r3, [r3, #8]
 80141d0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80141d4:	b2db      	uxtb	r3, r3
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d002      	beq.n	80141e0 <prvSocketSetMSS+0x1c>
 80141da:	2b01      	cmp	r3, #1
 80141dc:	d004      	beq.n	80141e8 <prvSocketSetMSS+0x24>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default: /* LCOV_EXCL_LINE */
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 80141de:	e007      	b.n	80141f0 <prvSocketSetMSS+0x2c>
                    prvSocketSetMSS_IPV4( pxSocket );
 80141e0:	6878      	ldr	r0, [r7, #4]
 80141e2:	f000 f809 	bl	80141f8 <prvSocketSetMSS_IPV4>
                    break;
 80141e6:	e003      	b.n	80141f0 <prvSocketSetMSS+0x2c>
                    prvSocketSetMSS_IPV6( pxSocket );
 80141e8:	6878      	ldr	r0, [r7, #4]
 80141ea:	f000 f84b 	bl	8014284 <prvSocketSetMSS_IPV6>
                    break;
 80141ee:	bf00      	nop
        }
    }
 80141f0:	bf00      	nop
 80141f2:	3708      	adds	r7, #8
 80141f4:	46bd      	mov	sp, r7
 80141f6:	bd80      	pop	{r7, pc}

080141f8 <prvSocketSetMSS_IPV4>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
void prvSocketSetMSS_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b084      	sub	sp, #16
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
    uint32_t ulMSS = ipconfigTCP_MSS;
 8014200:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8014204:	60fb      	str	r3, [r7, #12]
    const NetworkEndPoint_t * pxEndPoint = pxSocket->pxEndPoint;
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801420a:	60bb      	str	r3, [r7, #8]

    if( pxEndPoint != NULL )
 801420c:	68bb      	ldr	r3, [r7, #8]
 801420e:	2b00      	cmp	r3, #0
 8014210:	d023      	beq.n	801425a <prvSocketSetMSS_IPV4+0x62>
    {
        /* Do not allow MSS smaller than tcpMINIMUM_SEGMENT_LENGTH. */
        #if ( ipconfigTCP_MSS >= tcpMINIMUM_SEGMENT_LENGTH )
        {
            ulMSS = ipconfigTCP_MSS;
 8014212:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8014216:	60fb      	str	r3, [r7, #12]
            ulMSS = tcpMINIMUM_SEGMENT_LENGTH;
        }
        #endif

        /* Check if the remote IP-address belongs to the same netmask. */
        if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 ) ^ pxEndPoint->ipv4_settings.ulIPAddress ) & pxEndPoint->ipv4_settings.ulNetMask ) != 0U )
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801421c:	061a      	lsls	r2, r3, #24
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014222:	021b      	lsls	r3, r3, #8
 8014224:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014228:	431a      	orrs	r2, r3
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801422e:	0a1b      	lsrs	r3, r3, #8
 8014230:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014234:	431a      	orrs	r2, r3
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801423a:	0e1b      	lsrs	r3, r3, #24
 801423c:	431a      	orrs	r2, r3
 801423e:	68bb      	ldr	r3, [r7, #8]
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	405a      	eors	r2, r3
 8014244:	68bb      	ldr	r3, [r7, #8]
 8014246:	685b      	ldr	r3, [r3, #4]
 8014248:	4013      	ands	r3, r2
 801424a:	2b00      	cmp	r3, #0
 801424c:	d005      	beq.n	801425a <prvSocketSetMSS_IPV4+0x62>
        {
            /* Data for this peer will pass through a router, and maybe through
             * the internet.  Limit the MSS to 1400 bytes or less. */
            ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 801424e:	68f9      	ldr	r1, [r7, #12]
 8014250:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 8014254:	f7f5 fbbe 	bl	80099d4 <FreeRTOS_min_uint32>
 8014258:	60f8      	str	r0, [r7, #12]
        }
    }

    FreeRTOS_debug_printf( ( "prvSocketSetMSS: %u bytes for %xip port %u\n", ( unsigned ) ulMSS, ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort ) );
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014264:	68f9      	ldr	r1, [r7, #12]
 8014266:	4806      	ldr	r0, [pc, #24]	@ (8014280 <prvSocketSetMSS_IPV4+0x88>)
 8014268:	f00c f960 	bl	802052c <lUDPLoggingPrintf>

    pxSocket->u.xTCP.usMSS = ( uint16_t ) ulMSS;
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	b29a      	uxth	r2, r3
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8014276:	bf00      	nop
 8014278:	3710      	adds	r7, #16
 801427a:	46bd      	mov	sp, r7
 801427c:	bd80      	pop	{r7, pc}
 801427e:	bf00      	nop
 8014280:	08024fbc 	.word	0x08024fbc

08014284 <prvSocketSetMSS_IPV6>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
void prvSocketSetMSS_IPV6( FreeRTOS_Socket_t * pxSocket )
{
 8014284:	b580      	push	{r7, lr}
 8014286:	b090      	sub	sp, #64	@ 0x40
 8014288:	af00      	add	r7, sp, #0
 801428a:	6078      	str	r0, [r7, #4]
    uint32_t ulMSS = ipconfigTCP_MSS;
 801428c:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8014290:	63fb      	str	r3, [r7, #60]	@ 0x3c

    #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        char cIPv6Address[ 40 ];
    #endif

    const NetworkEndPoint_t * pxEndPoint = NULL;
 8014292:	2300      	movs	r3, #0
 8014294:	63bb      	str	r3, [r7, #56]	@ 0x38

    do
    {
        if( pxSocket == NULL )
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d103      	bne.n	80142a4 <prvSocketSetMSS_IPV6+0x20>
        {
            /* If NULL socket handler, skip all following steps. */
            FreeRTOS_debug_printf( ( "prvSocketSetMSS_IPV6: NULL socket handler\n" ) );
 801429c:	481f      	ldr	r0, [pc, #124]	@ (801431c <prvSocketSetMSS_IPV6+0x98>)
 801429e:	f00c f945 	bl	802052c <lUDPLoggingPrintf>

            break;
 80142a2:	e036      	b.n	8014312 <prvSocketSetMSS_IPV6+0x8e>
        }

        pxEndPoint = pxSocket->pxEndPoint;
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80142a8:	63bb      	str	r3, [r7, #56]	@ 0x38

        if( pxEndPoint != NULL )
 80142aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d018      	beq.n	80142e2 <prvSocketSetMSS_IPV6+0x5e>
        {
            IPv6_Type_t eType;

            /* Compared to IPv4, an IPv6 header is 20 bytes longer.
             * It must be subtracted from the MSS. */
            size_t uxDifference = ipSIZE_OF_IPv6_HEADER - ipSIZE_OF_IPv4_HEADER;
 80142b0:	2314      	movs	r3, #20
 80142b2:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Because ipconfigTCP_MSS is guaranteed not less than tcpMINIMUM_SEGMENT_LENGTH by FreeRTOSIPConfigDefaults.h,
             * it's unnecessary to check if xSocket->u.xTCP.usMSS is greater than difference. */
            ulMSS = ( uint32_t ) ( ipconfigTCP_MSS - uxDifference );
 80142b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80142b6:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 80142ba:	1a9b      	subs	r3, r3, r2
 80142bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
            eType = xIPv6_GetIPType( &( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6 ) );
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	3354      	adds	r3, #84	@ 0x54
 80142c2:	4618      	mov	r0, r3
 80142c4:	f7f8 fdb4 	bl	800ce30 <xIPv6_GetIPType>
 80142c8:	4603      	mov	r3, r0
 80142ca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

            if( eType == eIPv6_Global )
 80142ce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d105      	bne.n	80142e2 <prvSocketSetMSS_IPV6+0x5e>
            {
                /* The packet will travel through Internet, make the MSS
                 * smaller. */
                ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 80142d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80142d8:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 80142dc:	f7f5 fb7a 	bl	80099d4 <FreeRTOS_min_uint32>
 80142e0:	63f8      	str	r0, [r7, #60]	@ 0x3c
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        {
            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6, ( const void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, cIPv6Address, sizeof( cIPv6Address ) );
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 80142e8:	f107 0208 	add.w	r2, r7, #8
 80142ec:	2328      	movs	r3, #40	@ 0x28
 80142ee:	200a      	movs	r0, #10
 80142f0:	f7fa f8c0 	bl	800e474 <FreeRTOS_inet_ntop>
            FreeRTOS_debug_printf( ( "prvSocketSetMSS: %u bytes for %s ip port %u\n", ( unsigned ) ulMSS, cIPv6Address, pxSocket->u.xTCP.usRemotePort ) );
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80142fa:	f107 0208 	add.w	r2, r7, #8
 80142fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014300:	4807      	ldr	r0, [pc, #28]	@ (8014320 <prvSocketSetMSS_IPV6+0x9c>)
 8014302:	f00c f913 	bl	802052c <lUDPLoggingPrintf>
        }
        #endif

        pxSocket->u.xTCP.usMSS = ( uint16_t ) ulMSS;
 8014306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014308:	b29a      	uxth	r2, r3
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
    } while( ipFALSE_BOOL );
}
 8014310:	bf00      	nop
 8014312:	bf00      	nop
 8014314:	3740      	adds	r7, #64	@ 0x40
 8014316:	46bd      	mov	sp, r7
 8014318:	bd80      	pop	{r7, pc}
 801431a:	bf00      	nop
 801431c:	08024fe8 	.word	0x08024fe8
 8014320:	08025014 	.word	0x08025014

08014324 <xSequenceLessThanOrEqual>:
 *
 * @return pdTRUE when "( b - a ) < 0x80000000". Else, pdFALSE.
 */
        static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a,
                                                               uint32_t b )
        {
 8014324:	b480      	push	{r7}
 8014326:	b085      	sub	sp, #20
 8014328:	af00      	add	r7, sp, #0
 801432a:	6078      	str	r0, [r7, #4]
 801432c:	6039      	str	r1, [r7, #0]
            BaseType_t xResult = pdFALSE;
 801432e:	2300      	movs	r3, #0
 8014330:	60fb      	str	r3, [r7, #12]

            /* Test if a <= b
             * Return true if the unsigned subtraction of (b-a) doesn't generate an
             * arithmetic overflow. */
            if( ( ( b - a ) & 0x80000000U ) == 0U )
 8014332:	683a      	ldr	r2, [r7, #0]
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	1ad3      	subs	r3, r2, r3
 8014338:	2b00      	cmp	r3, #0
 801433a:	db01      	blt.n	8014340 <xSequenceLessThanOrEqual+0x1c>
            {
                xResult = pdTRUE;
 801433c:	2301      	movs	r3, #1
 801433e:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 8014340:	68fb      	ldr	r3, [r7, #12]
        }
 8014342:	4618      	mov	r0, r3
 8014344:	3714      	adds	r7, #20
 8014346:	46bd      	mov	sp, r7
 8014348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801434c:	4770      	bx	lr

0801434e <xSequenceLessThan>:
 *
 * @return pdTRUE when "( b - ( a + 1 ) ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceLessThan( uint32_t a,
                                  uint32_t b )
    {
 801434e:	b480      	push	{r7}
 8014350:	b085      	sub	sp, #20
 8014352:	af00      	add	r7, sp, #0
 8014354:	6078      	str	r0, [r7, #4]
 8014356:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8014358:	2300      	movs	r3, #0
 801435a:	60fb      	str	r3, [r7, #12]

        /* Test if a < b */
        if( ( ( b - ( a + 1U ) ) & 0x80000000U ) == 0U )
 801435c:	683a      	ldr	r2, [r7, #0]
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	1ad3      	subs	r3, r2, r3
 8014362:	3b01      	subs	r3, #1
 8014364:	2b00      	cmp	r3, #0
 8014366:	db01      	blt.n	801436c <xSequenceLessThan+0x1e>
        {
            xResult = pdTRUE;
 8014368:	2301      	movs	r3, #1
 801436a:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 801436c:	68fb      	ldr	r3, [r7, #12]
    }
 801436e:	4618      	mov	r0, r3
 8014370:	3714      	adds	r7, #20
 8014372:	46bd      	mov	sp, r7
 8014374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014378:	4770      	bx	lr

0801437a <xSequenceGreaterThan>:
 *
 * @return pdTRUE when "( a - b ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceGreaterThan( uint32_t a,
                                     uint32_t b )
    {
 801437a:	b480      	push	{r7}
 801437c:	b085      	sub	sp, #20
 801437e:	af00      	add	r7, sp, #0
 8014380:	6078      	str	r0, [r7, #4]
 8014382:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8014384:	2300      	movs	r3, #0
 8014386:	60fb      	str	r3, [r7, #12]

        /* Test if a > b */
        if( ( ( a - ( b + 1U ) ) & 0x80000000U ) == 0U )
 8014388:	687a      	ldr	r2, [r7, #4]
 801438a:	683b      	ldr	r3, [r7, #0]
 801438c:	1ad3      	subs	r3, r2, r3
 801438e:	3b01      	subs	r3, #1
 8014390:	2b00      	cmp	r3, #0
 8014392:	db01      	blt.n	8014398 <xSequenceGreaterThan+0x1e>
        {
            xResult = pdTRUE;
 8014394:	2301      	movs	r3, #1
 8014396:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8014398:	68fb      	ldr	r3, [r7, #12]
    }
 801439a:	4618      	mov	r0, r3
 801439c:	3714      	adds	r7, #20
 801439e:	46bd      	mov	sp, r7
 80143a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a4:	4770      	bx	lr

080143a6 <xSequenceGreaterThanOrEqual>:
 *
 * @return pdTRUE if a>=b, else pdFALSE.
 */
    static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a,
                                                              uint32_t b )
    {
 80143a6:	b480      	push	{r7}
 80143a8:	b085      	sub	sp, #20
 80143aa:	af00      	add	r7, sp, #0
 80143ac:	6078      	str	r0, [r7, #4]
 80143ae:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 80143b0:	2300      	movs	r3, #0
 80143b2:	60fb      	str	r3, [r7, #12]

        /* Test if a >= b */
        if( ( ( a - b ) & 0x80000000U ) == 0U )
 80143b4:	687a      	ldr	r2, [r7, #4]
 80143b6:	683b      	ldr	r3, [r7, #0]
 80143b8:	1ad3      	subs	r3, r2, r3
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	db01      	blt.n	80143c2 <xSequenceGreaterThanOrEqual+0x1c>
        {
            xResult = pdTRUE;
 80143be:	2301      	movs	r3, #1
 80143c0:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 80143c2:	68fb      	ldr	r3, [r7, #12]
    }
 80143c4:	4618      	mov	r0, r3
 80143c6:	3714      	adds	r7, #20
 80143c8:	46bd      	mov	sp, r7
 80143ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ce:	4770      	bx	lr

080143d0 <vListInsertFifo>:
 * @param[in] pxList The list in which the item is to inserted.
 * @param[in] pxNewListItem The item to be inserted.
 */
        static portINLINE void vListInsertFifo( List_t * const pxList,
                                                ListItem_t * const pxNewListItem )
        {
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b082      	sub	sp, #8
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
 80143d8:	6039      	str	r1, [r7, #0]
            vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	3308      	adds	r3, #8
 80143de:	461a      	mov	r2, r3
 80143e0:	6839      	ldr	r1, [r7, #0]
 80143e2:	6878      	ldr	r0, [r7, #4]
 80143e4:	f000 f822 	bl	801442c <vListInsertGeneric>
        }
 80143e8:	bf00      	nop
 80143ea:	3708      	adds	r7, #8
 80143ec:	46bd      	mov	sp, r7
 80143ee:	bd80      	pop	{r7, pc}

080143f0 <vTCPTimerSet>:
 * @brief Set the timer's "born" time.
 *
 * @param[in] pxTimer The TCP timer.
 */
    static portINLINE void vTCPTimerSet( TCPTimer_t * pxTimer )
    {
 80143f0:	b580      	push	{r7, lr}
 80143f2:	b082      	sub	sp, #8
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
        pxTimer->uxBorn = xTaskGetTickCount();
 80143f8:	f7ef fa08 	bl	800380c <xTaskGetTickCount>
 80143fc:	4602      	mov	r2, r0
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	601a      	str	r2, [r3, #0]
    }
 8014402:	bf00      	nop
 8014404:	3708      	adds	r7, #8
 8014406:	46bd      	mov	sp, r7
 8014408:	bd80      	pop	{r7, pc}

0801440a <ulTimerGetAge>:
 * @param[in] pxTimer The timer whose age is to be fetched.
 *
 * @return The time in milliseconds since the timer was born.
 */
    static portINLINE uint32_t ulTimerGetAge( const TCPTimer_t * pxTimer )
    {
 801440a:	b580      	push	{r7, lr}
 801440c:	b084      	sub	sp, #16
 801440e:	af00      	add	r7, sp, #0
 8014410:	6078      	str	r0, [r7, #4]
        TickType_t uxNow = xTaskGetTickCount();
 8014412:	f7ef f9fb 	bl	800380c <xTaskGetTickCount>
 8014416:	60f8      	str	r0, [r7, #12]
        TickType_t uxDiff = uxNow - pxTimer->uxBorn;
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	68fa      	ldr	r2, [r7, #12]
 801441e:	1ad3      	subs	r3, r2, r3
 8014420:	60bb      	str	r3, [r7, #8]

        return ( uint32_t ) ( uxDiff * portTICK_PERIOD_MS );
 8014422:	68bb      	ldr	r3, [r7, #8]
    }
 8014424:	4618      	mov	r0, r3
 8014426:	3710      	adds	r7, #16
 8014428:	46bd      	mov	sp, r7
 801442a:	bd80      	pop	{r7, pc}

0801442c <vListInsertGeneric>:
 */
    #if ( ipconfigUSE_TCP_WIN == 1 )
        static void vListInsertGeneric( List_t * const pxList,
                                        ListItem_t * const pxNewListItem,
                                        MiniListItem_t * pxWhere )
        {
 801442c:	b480      	push	{r7}
 801442e:	b085      	sub	sp, #20
 8014430:	af00      	add	r7, sp, #0
 8014432:	60f8      	str	r0, [r7, #12]
 8014434:	60b9      	str	r1, [r7, #8]
 8014436:	607a      	str	r2, [r7, #4]
             * returned by listGET_HEAD_ENTRY() */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewListItem->pxNext = ( ( ListItem_t * ) pxWhere );
 8014438:	68bb      	ldr	r3, [r7, #8]
 801443a:	687a      	ldr	r2, [r7, #4]
 801443c:	605a      	str	r2, [r3, #4]

            pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	689a      	ldr	r2, [r3, #8]
 8014442:	68bb      	ldr	r3, [r7, #8]
 8014444:	609a      	str	r2, [r3, #8]
            pxWhere->pxPrevious->pxNext = pxNewListItem;
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	689b      	ldr	r3, [r3, #8]
 801444a:	68ba      	ldr	r2, [r7, #8]
 801444c:	605a      	str	r2, [r3, #4]
            pxWhere->pxPrevious = pxNewListItem;
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	68ba      	ldr	r2, [r7, #8]
 8014452:	609a      	str	r2, [r3, #8]

            /* Remember which list the item is in. */
            listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 8014454:	68bb      	ldr	r3, [r7, #8]
 8014456:	68fa      	ldr	r2, [r7, #12]
 8014458:	611a      	str	r2, [r3, #16]

            ( pxList->uxNumberOfItems )++;
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	1c5a      	adds	r2, r3, #1
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	601a      	str	r2, [r3, #0]
        }
 8014464:	bf00      	nop
 8014466:	3714      	adds	r7, #20
 8014468:	46bd      	mov	sp, r7
 801446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801446e:	4770      	bx	lr

08014470 <prvCreateSectors>:
 * @brief Creates a pool of 'ipconfigTCP_WIN_SEG_COUNT' sector buffers. Should be called once only.
 *
 * @return When the allocation was successful: pdPASS, otherwise pdFAIL.
 */
        static BaseType_t prvCreateSectors( void )
        {
 8014470:	b580      	push	{r7, lr}
 8014472:	b082      	sub	sp, #8
 8014474:	af00      	add	r7, sp, #0
            BaseType_t xIndex;
            BaseType_t xReturn;

            /* Allocate space for 'xTCPSegments' and store them in 'xSegmentList'. */

            vListInitialise( &xSegmentList );
 8014476:	4827      	ldr	r0, [pc, #156]	@ (8014514 <prvCreateSectors+0xa4>)
 8014478:	f7ed ffe2 	bl	8002440 <vListInitialise>
            xTCPSegments = ( ( TCPSegment_t * ) pvPortMallocLarge( ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );
 801447c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8014480:	f7f1 f830 	bl	80054e4 <pvPortMalloc>
 8014484:	4603      	mov	r3, r0
 8014486:	4a24      	ldr	r2, [pc, #144]	@ (8014518 <prvCreateSectors+0xa8>)
 8014488:	6013      	str	r3, [r2, #0]

            if( xTCPSegments == NULL )
 801448a:	4b23      	ldr	r3, [pc, #140]	@ (8014518 <prvCreateSectors+0xa8>)
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d107      	bne.n	80144a2 <prvCreateSectors+0x32>
            {
                FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %u failed\n",
 8014492:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8014496:	4821      	ldr	r0, [pc, #132]	@ (801451c <prvCreateSectors+0xac>)
 8014498:	f00c f848 	bl	802052c <lUDPLoggingPrintf>
                                         ( unsigned ) ( ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) ) );

                xReturn = pdFAIL;
 801449c:	2300      	movs	r3, #0
 801449e:	603b      	str	r3, [r7, #0]
 80144a0:	e032      	b.n	8014508 <prvCreateSectors+0x98>
            }
            else
            {
                /* Clear the allocated space. */
                ( void ) memset( xTCPSegments, 0, ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 80144a2:	4b1d      	ldr	r3, [pc, #116]	@ (8014518 <prvCreateSectors+0xa8>)
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80144aa:	2100      	movs	r1, #0
 80144ac:	4618      	mov	r0, r3
 80144ae:	f00c fb66 	bl	8020b7e <memset>

                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 80144b2:	2300      	movs	r3, #0
 80144b4:	607b      	str	r3, [r7, #4]
 80144b6:	e022      	b.n	80144fe <prvCreateSectors+0x8e>
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xSegmentItem ) );
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xQueueItem ) );
                    }
                    #endif

                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xSegmentItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 80144b8:	4b17      	ldr	r3, [pc, #92]	@ (8014518 <prvCreateSectors+0xa8>)
 80144ba:	6819      	ldr	r1, [r3, #0]
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	019a      	lsls	r2, r3, #6
 80144c0:	4b15      	ldr	r3, [pc, #84]	@ (8014518 <prvCreateSectors+0xa8>)
 80144c2:	6818      	ldr	r0, [r3, #0]
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	019b      	lsls	r3, r3, #6
 80144c8:	4403      	add	r3, r0
 80144ca:	440a      	add	r2, r1
 80144cc:	639a      	str	r2, [r3, #56]	@ 0x38
                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 80144ce:	4b12      	ldr	r3, [pc, #72]	@ (8014518 <prvCreateSectors+0xa8>)
 80144d0:	6819      	ldr	r1, [r3, #0]
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	019a      	lsls	r2, r3, #6
 80144d6:	4b10      	ldr	r3, [pc, #64]	@ (8014518 <prvCreateSectors+0xa8>)
 80144d8:	6818      	ldr	r0, [r3, #0]
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	019b      	lsls	r3, r3, #6
 80144de:	4403      	add	r3, r0
 80144e0:	440a      	add	r2, r1
 80144e2:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* And add it to the pool of available segments */
                    vListInsertFifo( &xSegmentList, &( xTCPSegments[ xIndex ].xSegmentItem ) );
 80144e4:	4b0c      	ldr	r3, [pc, #48]	@ (8014518 <prvCreateSectors+0xa8>)
 80144e6:	681a      	ldr	r2, [r3, #0]
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	019b      	lsls	r3, r3, #6
 80144ec:	4413      	add	r3, r2
 80144ee:	332c      	adds	r3, #44	@ 0x2c
 80144f0:	4619      	mov	r1, r3
 80144f2:	4808      	ldr	r0, [pc, #32]	@ (8014514 <prvCreateSectors+0xa4>)
 80144f4:	f7ff ff6c 	bl	80143d0 <vListInsertFifo>
                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	3301      	adds	r3, #1
 80144fc:	607b      	str	r3, [r7, #4]
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	2b3f      	cmp	r3, #63	@ 0x3f
 8014502:	ddd9      	ble.n	80144b8 <prvCreateSectors+0x48>
                }

                xReturn = pdPASS;
 8014504:	2301      	movs	r3, #1
 8014506:	603b      	str	r3, [r7, #0]
            }

            return xReturn;
 8014508:	683b      	ldr	r3, [r7, #0]
        }
 801450a:	4618      	mov	r0, r3
 801450c:	3708      	adds	r7, #8
 801450e:	46bd      	mov	sp, r7
 8014510:	bd80      	pop	{r7, pc}
 8014512:	bf00      	nop
 8014514:	200012e0 	.word	0x200012e0
 8014518:	200012dc 	.word	0x200012dc
 801451c:	08025044 	.word	0x08025044

08014520 <xTCPWindowRxFind>:
 *
 * @return The address of the segment descriptor found, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowRxFind( const TCPWindow_t * pxWindow,
                                                uint32_t ulSequenceNumber )
        {
 8014520:	b480      	push	{r7}
 8014522:	b087      	sub	sp, #28
 8014524:	af00      	add	r7, sp, #0
 8014526:	6078      	str	r0, [r7, #4]
 8014528:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment, * pxReturn = NULL;
 801452a:	2300      	movs	r3, #0
 801452c:	613b      	str	r3, [r7, #16]
             * segments. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	33ac      	adds	r3, #172	@ 0xac
 8014532:	60fb      	str	r3, [r7, #12]

            for( pxIterator = listGET_NEXT( pxEnd );
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	685b      	ldr	r3, [r3, #4]
 8014538:	617b      	str	r3, [r7, #20]
 801453a:	e00d      	b.n	8014558 <xTCPWindowRxFind+0x38>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 801453c:	697b      	ldr	r3, [r7, #20]
 801453e:	68db      	ldr	r3, [r3, #12]
 8014540:	60bb      	str	r3, [r7, #8]

                if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 8014542:	68bb      	ldr	r3, [r7, #8]
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	683a      	ldr	r2, [r7, #0]
 8014548:	429a      	cmp	r2, r3
 801454a:	d102      	bne.n	8014552 <xTCPWindowRxFind+0x32>
                {
                    pxReturn = pxSegment;
 801454c:	68bb      	ldr	r3, [r7, #8]
 801454e:	613b      	str	r3, [r7, #16]
                    break;
 8014550:	e006      	b.n	8014560 <xTCPWindowRxFind+0x40>
                 pxIterator = listGET_NEXT( pxIterator ) )
 8014552:	697b      	ldr	r3, [r7, #20]
 8014554:	685b      	ldr	r3, [r3, #4]
 8014556:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 8014558:	697a      	ldr	r2, [r7, #20]
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	429a      	cmp	r2, r3
 801455e:	d1ed      	bne.n	801453c <xTCPWindowRxFind+0x1c>
                }
            }

            return pxReturn;
 8014560:	693b      	ldr	r3, [r7, #16]
        }
 8014562:	4618      	mov	r0, r3
 8014564:	371c      	adds	r7, #28
 8014566:	46bd      	mov	sp, r7
 8014568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801456c:	4770      	bx	lr
	...

08014570 <xTCPWindowNew>:
 */
        static TCPSegment_t * xTCPWindowNew( TCPWindow_t * pxWindow,
                                             uint32_t ulSequenceNumber,
                                             int32_t lCount,
                                             BaseType_t xIsForRx )
        {
 8014570:	b580      	push	{r7, lr}
 8014572:	b088      	sub	sp, #32
 8014574:	af00      	add	r7, sp, #0
 8014576:	60f8      	str	r0, [r7, #12]
 8014578:	60b9      	str	r1, [r7, #8]
 801457a:	607a      	str	r2, [r7, #4]
 801457c:	603b      	str	r3, [r7, #0]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Allocate a new segment.  The socket will borrow all segments from a
             * common pool: 'xSegmentList', which is a list of 'TCPSegment_t' */
            if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 801457e:	4b33      	ldr	r3, [pc, #204]	@ (801464c <xTCPWindowNew+0xdc>)
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d10c      	bne.n	80145a0 <xTCPWindowNew+0x30>
            {
                /* If the TCP-stack runs out of segments, you might consider
                 * increasing 'ipconfigTCP_WIN_SEG_COUNT'. */
                FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", ( xIsForRx != 0 ) ? 'R' : 'T' ) );
 8014586:	683b      	ldr	r3, [r7, #0]
 8014588:	2b00      	cmp	r3, #0
 801458a:	d001      	beq.n	8014590 <xTCPWindowNew+0x20>
 801458c:	2352      	movs	r3, #82	@ 0x52
 801458e:	e000      	b.n	8014592 <xTCPWindowNew+0x22>
 8014590:	2354      	movs	r3, #84	@ 0x54
 8014592:	4619      	mov	r1, r3
 8014594:	482e      	ldr	r0, [pc, #184]	@ (8014650 <xTCPWindowNew+0xe0>)
 8014596:	f00b ffc9 	bl	802052c <lUDPLoggingPrintf>
                pxSegment = NULL;
 801459a:	2300      	movs	r3, #0
 801459c:	61fb      	str	r3, [r7, #28]
 801459e:	e04f      	b.n	8014640 <xTCPWindowNew+0xd0>
            }
            else
            {
                /* Pop the item at the head of the list.  Semaphore protection is
                * not required as only the IP task will call these functions.  */
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 80145a0:	4b2a      	ldr	r3, [pc, #168]	@ (801464c <xTCPWindowNew+0xdc>)
 80145a2:	68db      	ldr	r3, [r3, #12]
 80145a4:	61bb      	str	r3, [r7, #24]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 80145a6:	69bb      	ldr	r3, [r7, #24]
 80145a8:	68db      	ldr	r3, [r3, #12]
 80145aa:	61fb      	str	r3, [r7, #28]

                configASSERT( pxItem != NULL );
 80145ac:	69bb      	ldr	r3, [r7, #24]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d104      	bne.n	80145bc <xTCPWindowNew+0x4c>
 80145b2:	f240 2125 	movw	r1, #549	@ 0x225
 80145b6:	4827      	ldr	r0, [pc, #156]	@ (8014654 <xTCPWindowNew+0xe4>)
 80145b8:	f7ec fdae 	bl	8001118 <vAssertCalled>
                configASSERT( pxSegment != NULL );
 80145bc:	69fb      	ldr	r3, [r7, #28]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d104      	bne.n	80145cc <xTCPWindowNew+0x5c>
 80145c2:	f240 2126 	movw	r1, #550	@ 0x226
 80145c6:	4823      	ldr	r0, [pc, #140]	@ (8014654 <xTCPWindowNew+0xe4>)
 80145c8:	f7ec fda6 	bl	8001118 <vAssertCalled>

                /* Remove the item from xSegmentList. */
                ( void ) uxListRemove( pxItem );
 80145cc:	69b8      	ldr	r0, [r7, #24]
 80145ce:	f7ed ffc1 	bl	8002554 <uxListRemove>

                /* Add it to either the connections' Rx or Tx queue. */
                if( xIsForRx != 0 )
 80145d2:	683b      	ldr	r3, [r7, #0]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d006      	beq.n	80145e6 <xTCPWindowNew+0x76>
                {
                    vListInsertFifo( &pxWindow->xRxSegments, pxItem );
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	33a4      	adds	r3, #164	@ 0xa4
 80145dc:	69b9      	ldr	r1, [r7, #24]
 80145de:	4618      	mov	r0, r3
 80145e0:	f7ff fef6 	bl	80143d0 <vListInsertFifo>
 80145e4:	e005      	b.n	80145f2 <xTCPWindowNew+0x82>
                }
                else
                {
                    vListInsertFifo( &pxWindow->xTxSegments, pxItem );
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	3390      	adds	r3, #144	@ 0x90
 80145ea:	69b9      	ldr	r1, [r7, #24]
 80145ec:	4618      	mov	r0, r3
 80145ee:	f7ff feef 	bl	80143d0 <vListInsertFifo>
                }

                /* And set the segment's timer to zero */
                vTCPTimerSet( &pxSegment->xTransmitTimer );
 80145f2:	69fb      	ldr	r3, [r7, #28]
 80145f4:	3310      	adds	r3, #16
 80145f6:	4618      	mov	r0, r3
 80145f8:	f7ff fefa 	bl	80143f0 <vTCPTimerSet>

                pxSegment->u.ulFlags = 0;
 80145fc:	69fb      	ldr	r3, [r7, #28]
 80145fe:	2200      	movs	r2, #0
 8014600:	615a      	str	r2, [r3, #20]
                pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 8014602:	683b      	ldr	r3, [r7, #0]
 8014604:	2b00      	cmp	r3, #0
 8014606:	d001      	beq.n	801460c <xTCPWindowNew+0x9c>
 8014608:	2101      	movs	r1, #1
 801460a:	e000      	b.n	801460e <xTCPWindowNew+0x9e>
 801460c:	2100      	movs	r1, #0
 801460e:	69fa      	ldr	r2, [r7, #28]
 8014610:	7d93      	ldrb	r3, [r2, #22]
 8014612:	f361 0382 	bfi	r3, r1, #2, #1
 8014616:	7593      	strb	r3, [r2, #22]
                pxSegment->lMaxLength = lCount;
 8014618:	69fb      	ldr	r3, [r7, #28]
 801461a:	687a      	ldr	r2, [r7, #4]
 801461c:	605a      	str	r2, [r3, #4]
                pxSegment->lDataLength = lCount;
 801461e:	69fb      	ldr	r3, [r7, #28]
 8014620:	687a      	ldr	r2, [r7, #4]
 8014622:	609a      	str	r2, [r3, #8]
                pxSegment->ulSequenceNumber = ulSequenceNumber;
 8014624:	69fb      	ldr	r3, [r7, #28]
 8014626:	68ba      	ldr	r2, [r7, #8]
 8014628:	601a      	str	r2, [r3, #0]
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                {
                    static UBaseType_t xLowestLength = ipconfigTCP_WIN_SEG_COUNT;
                    UBaseType_t xLength = listCURRENT_LIST_LENGTH( &xSegmentList );
 801462a:	4b08      	ldr	r3, [pc, #32]	@ (801464c <xTCPWindowNew+0xdc>)
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	617b      	str	r3, [r7, #20]

                    if( xLowestLength > xLength )
 8014630:	4b09      	ldr	r3, [pc, #36]	@ (8014658 <xTCPWindowNew+0xe8>)
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	697a      	ldr	r2, [r7, #20]
 8014636:	429a      	cmp	r2, r3
 8014638:	d202      	bcs.n	8014640 <xTCPWindowNew+0xd0>
                    {
                        xLowestLength = xLength;
 801463a:	4a07      	ldr	r2, [pc, #28]	@ (8014658 <xTCPWindowNew+0xe8>)
 801463c:	697b      	ldr	r3, [r7, #20]
 801463e:	6013      	str	r3, [r2, #0]
                    }
                }
                #endif /* ipconfigHAS_DEBUG_PRINTF */
            }

            return pxSegment;
 8014640:	69fb      	ldr	r3, [r7, #28]
        }
 8014642:	4618      	mov	r0, r3
 8014644:	3720      	adds	r7, #32
 8014646:	46bd      	mov	sp, r7
 8014648:	bd80      	pop	{r7, pc}
 801464a:	bf00      	nop
 801464c:	200012e0 	.word	0x200012e0
 8014650:	08025068 	.word	0x08025068
 8014654:	08025098 	.word	0x08025098
 8014658:	2000001c 	.word	0x2000001c

0801465c <xTCPWindowRxEmpty>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if the connection can be closed. Else, pdFALSE.
 */
        BaseType_t xTCPWindowRxEmpty( const TCPWindow_t * pxWindow )
        {
 801465c:	b580      	push	{r7, lr}
 801465e:	b084      	sub	sp, #16
 8014660:	af00      	add	r7, sp, #0
 8014662:	6078      	str	r0, [r7, #4]
            /* When the peer has a close request (FIN flag), the driver will check
             * if there are missing packets in the Rx-queue.  It will accept the
             * closure of the connection if both conditions are true:
             * - the Rx-queue is empty
             * - the highest Rx sequence number has been ACK'ed */
            if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801466a:	2b00      	cmp	r3, #0
 801466c:	d002      	beq.n	8014674 <xTCPWindowRxEmpty+0x18>
            {
                /* Rx data has been stored while earlier packets were missing. */
                xReturn = pdFALSE;
 801466e:	2300      	movs	r3, #0
 8014670:	60fb      	str	r3, [r7, #12]
 8014672:	e01e      	b.n	80146b2 <xTCPWindowRxEmpty+0x56>
            }
            else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber + 1U, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	691b      	ldr	r3, [r3, #16]
 8014678:	1c5a      	adds	r2, r3, #1
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	699b      	ldr	r3, [r3, #24]
 801467e:	4619      	mov	r1, r3
 8014680:	4610      	mov	r0, r2
 8014682:	f7ff fe90 	bl	80143a6 <xSequenceGreaterThanOrEqual>
 8014686:	4603      	mov	r3, r0
 8014688:	2b00      	cmp	r3, #0
 801468a:	d002      	beq.n	8014692 <xTCPWindowRxEmpty+0x36>
            {
                /* No Rx packets are being stored and the highest sequence number
                 * that has been received has been ACKed. */
                xReturn = pdTRUE;
 801468c:	2301      	movs	r3, #1
 801468e:	60fb      	str	r3, [r7, #12]
 8014690:	e00f      	b.n	80146b2 <xTCPWindowRxEmpty+0x56>
            }
            else
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %u highest %u (empty)\n",
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	691a      	ldr	r2, [r3, #16]
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	68db      	ldr	r3, [r3, #12]
 801469a:	1ad1      	subs	r1, r2, r3
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	699a      	ldr	r2, [r3, #24]
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	68db      	ldr	r3, [r3, #12]
 80146a4:	1ad3      	subs	r3, r2, r3
 80146a6:	461a      	mov	r2, r3
 80146a8:	4804      	ldr	r0, [pc, #16]	@ (80146bc <xTCPWindowRxEmpty+0x60>)
 80146aa:	f00b ff3f 	bl	802052c <lUDPLoggingPrintf>
                                         ( unsigned ) ( pxWindow->rx.ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->rx.ulHighestSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ) ) );
                xReturn = pdFALSE;
 80146ae:	2300      	movs	r3, #0
 80146b0:	60fb      	str	r3, [r7, #12]
            }

            return xReturn;
 80146b2:	68fb      	ldr	r3, [r7, #12]
        }
 80146b4:	4618      	mov	r0, r3
 80146b6:	3710      	adds	r7, #16
 80146b8:	46bd      	mov	sp, r7
 80146ba:	bd80      	pop	{r7, pc}
 80146bc:	080250c8 	.word	0x080250c8

080146c0 <xTCPWindowGetHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowGetHead( const List_t * pxList )
        {
 80146c0:	b580      	push	{r7, lr}
 80146c2:	b084      	sub	sp, #16
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Detaches and returns the head of a queue. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d102      	bne.n	80146d6 <xTCPWindowGetHead+0x16>
            {
                pxSegment = NULL;
 80146d0:	2300      	movs	r3, #0
 80146d2:	60fb      	str	r3, [r7, #12]
 80146d4:	e008      	b.n	80146e8 <xTCPWindowGetHead+0x28>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	68db      	ldr	r3, [r3, #12]
 80146da:	60bb      	str	r3, [r7, #8]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 80146dc:	68bb      	ldr	r3, [r7, #8]
 80146de:	68db      	ldr	r3, [r3, #12]
 80146e0:	60fb      	str	r3, [r7, #12]

                ( void ) uxListRemove( pxItem );
 80146e2:	68b8      	ldr	r0, [r7, #8]
 80146e4:	f7ed ff36 	bl	8002554 <uxListRemove>
            }

            return pxSegment;
 80146e8:	68fb      	ldr	r3, [r7, #12]
        }
 80146ea:	4618      	mov	r0, r3
 80146ec:	3710      	adds	r7, #16
 80146ee:	46bd      	mov	sp, r7
 80146f0:	bd80      	pop	{r7, pc}

080146f2 <xTCPWindowPeekHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when the list is empty.
 */
        static TCPSegment_t * xTCPWindowPeekHead( const List_t * pxList )
        {
 80146f2:	b480      	push	{r7}
 80146f4:	b085      	sub	sp, #20
 80146f6:	af00      	add	r7, sp, #0
 80146f8:	6078      	str	r0, [r7, #4]
            const ListItem_t * pxItem;
            TCPSegment_t * pxReturn;

            /* Returns the head of a queue but it won't be detached. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d102      	bne.n	8014708 <xTCPWindowPeekHead+0x16>
            {
                pxReturn = NULL;
 8014702:	2300      	movs	r3, #0
 8014704:	60fb      	str	r3, [r7, #12]
 8014706:	e005      	b.n	8014714 <xTCPWindowPeekHead+0x22>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	68db      	ldr	r3, [r3, #12]
 801470c:	60bb      	str	r3, [r7, #8]
                pxReturn = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 801470e:	68bb      	ldr	r3, [r7, #8]
 8014710:	68db      	ldr	r3, [r3, #12]
 8014712:	60fb      	str	r3, [r7, #12]
            }

            return pxReturn;
 8014714:	68fb      	ldr	r3, [r7, #12]
        }
 8014716:	4618      	mov	r0, r3
 8014718:	3714      	adds	r7, #20
 801471a:	46bd      	mov	sp, r7
 801471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014720:	4770      	bx	lr
	...

08014724 <vTCPWindowFree>:
 * @brief Release a segment object, return it to the list of available segment holders.
 *
 * @param[in] pxSegment The segment descriptor that must be freed.
 */
        static void vTCPWindowFree( TCPSegment_t * pxSegment )
        {
 8014724:	b580      	push	{r7, lr}
 8014726:	b082      	sub	sp, #8
 8014728:	af00      	add	r7, sp, #0
 801472a:	6078      	str	r0, [r7, #4]
            /*  Free entry pxSegment because it's not used any more.  The ownership
             * will be passed back to the segment pool.
             *
             * Unlink it from one of the queues, if any. */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014730:	2b00      	cmp	r3, #0
 8014732:	d004      	beq.n	801473e <vTCPWindowFree+0x1a>
            {
                ( void ) uxListRemove( &( pxSegment->xQueueItem ) );
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	3318      	adds	r3, #24
 8014738:	4618      	mov	r0, r3
 801473a:	f7ed ff0b 	bl	8002554 <uxListRemove>
            }

            pxSegment->ulSequenceNumber = 0U;
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	2200      	movs	r2, #0
 8014742:	601a      	str	r2, [r3, #0]
            pxSegment->lDataLength = 0;
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	2200      	movs	r2, #0
 8014748:	609a      	str	r2, [r3, #8]
            pxSegment->u.ulFlags = 0U;
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	2200      	movs	r2, #0
 801474e:	615a      	str	r2, [r3, #20]

            /* Take it out of xRxSegments/xTxSegments */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014754:	2b00      	cmp	r3, #0
 8014756:	d004      	beq.n	8014762 <vTCPWindowFree+0x3e>
            {
                ( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	332c      	adds	r3, #44	@ 0x2c
 801475c:	4618      	mov	r0, r3
 801475e:	f7ed fef9 	bl	8002554 <uxListRemove>
            }

            /* Return it to xSegmentList */
            vListInsertFifo( &xSegmentList, &( pxSegment->xSegmentItem ) );
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	332c      	adds	r3, #44	@ 0x2c
 8014766:	4619      	mov	r1, r3
 8014768:	4803      	ldr	r0, [pc, #12]	@ (8014778 <vTCPWindowFree+0x54>)
 801476a:	f7ff fe31 	bl	80143d0 <vListInsertFifo>
        }
 801476e:	bf00      	nop
 8014770:	3708      	adds	r7, #8
 8014772:	46bd      	mov	sp, r7
 8014774:	bd80      	pop	{r7, pc}
 8014776:	bf00      	nop
 8014778:	200012e0 	.word	0x200012e0

0801477c <vTCPWindowDestroy>:
 * @brief Return all segment descriptor to the poll of descriptors, before deleting a socket.
 *
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        void vTCPWindowDestroy( TCPWindow_t const * pxWindow )
        {
 801477c:	b580      	push	{r7, lr}
 801477e:	b086      	sub	sp, #24
 8014780:	af00      	add	r7, sp, #0
 8014782:	6078      	str	r0, [r7, #4]

            /*  Destroy a window.  A TCP window doesn't serve any more.  Return all
             * owned segments to the pool.  In order to save code, it will make 2 rounds,
             * one to remove the segments from xRxSegments, and a second round to clear
             * xTxSegments*/
            for( xRound = 0; xRound < 2; xRound++ )
 8014784:	2300      	movs	r3, #0
 8014786:	613b      	str	r3, [r7, #16]
 8014788:	e01d      	b.n	80147c6 <vTCPWindowDestroy+0x4a>
            {
                if( xRound != 0 )
 801478a:	693b      	ldr	r3, [r7, #16]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d003      	beq.n	8014798 <vTCPWindowDestroy+0x1c>
                {
                    pxSegments = &( pxWindow->xRxSegments );
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	33a4      	adds	r3, #164	@ 0xa4
 8014794:	617b      	str	r3, [r7, #20]
 8014796:	e002      	b.n	801479e <vTCPWindowDestroy+0x22>
                }
                else
                {
                    pxSegments = &( pxWindow->xTxSegments );
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	3390      	adds	r3, #144	@ 0x90
 801479c:	617b      	str	r3, [r7, #20]
                }

                if( listLIST_IS_INITIALISED( pxSegments ) )
 801479e:	697b      	ldr	r3, [r7, #20]
 80147a0:	689b      	ldr	r3, [r3, #8]
 80147a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147a6:	d10b      	bne.n	80147c0 <vTCPWindowDestroy+0x44>
                {
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 80147a8:	e006      	b.n	80147b8 <vTCPWindowDestroy+0x3c>
                    {
                        pxSegment = ( ( TCPSegment_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxSegments ) );
 80147aa:	697b      	ldr	r3, [r7, #20]
 80147ac:	68db      	ldr	r3, [r3, #12]
 80147ae:	68db      	ldr	r3, [r3, #12]
 80147b0:	60fb      	str	r3, [r7, #12]
                        vTCPWindowFree( pxSegment );
 80147b2:	68f8      	ldr	r0, [r7, #12]
 80147b4:	f7ff ffb6 	bl	8014724 <vTCPWindowFree>
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 80147b8:	697b      	ldr	r3, [r7, #20]
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d1f4      	bne.n	80147aa <vTCPWindowDestroy+0x2e>
            for( xRound = 0; xRound < 2; xRound++ )
 80147c0:	693b      	ldr	r3, [r7, #16]
 80147c2:	3301      	adds	r3, #1
 80147c4:	613b      	str	r3, [r7, #16]
 80147c6:	693b      	ldr	r3, [r7, #16]
 80147c8:	2b01      	cmp	r3, #1
 80147ca:	ddde      	ble.n	801478a <vTCPWindowDestroy+0xe>
                    }
                }
            }
        }
 80147cc:	bf00      	nop
 80147ce:	bf00      	nop
 80147d0:	3718      	adds	r7, #24
 80147d2:	46bd      	mov	sp, r7
 80147d4:	bd80      	pop	{r7, pc}
	...

080147d8 <xTCPWindowCreate>:
                                 uint32_t ulRxWindowLength,
                                 uint32_t ulTxWindowLength,
                                 uint32_t ulAckNumber,
                                 uint32_t ulSequenceNumber,
                                 uint32_t ulMSS )
    {
 80147d8:	b580      	push	{r7, lr}
 80147da:	b086      	sub	sp, #24
 80147dc:	af00      	add	r7, sp, #0
 80147de:	60f8      	str	r0, [r7, #12]
 80147e0:	60b9      	str	r1, [r7, #8]
 80147e2:	607a      	str	r2, [r7, #4]
 80147e4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdPASS;
 80147e6:	2301      	movs	r3, #1
 80147e8:	617b      	str	r3, [r7, #20]

        /* Create and initialize a window. */

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( xTCPSegments == NULL )
 80147ea:	4b1d      	ldr	r3, [pc, #116]	@ (8014860 <xTCPWindowCreate+0x88>)
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d102      	bne.n	80147f8 <xTCPWindowCreate+0x20>
            {
                xReturn = prvCreateSectors();
 80147f2:	f7ff fe3d 	bl	8014470 <prvCreateSectors>
 80147f6:	6178      	str	r0, [r7, #20]
            }

            vListInitialise( &( pxWindow->xTxSegments ) );
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	3390      	adds	r3, #144	@ 0x90
 80147fc:	4618      	mov	r0, r3
 80147fe:	f7ed fe1f 	bl	8002440 <vListInitialise>
            vListInitialise( &( pxWindow->xRxSegments ) );
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	33a4      	adds	r3, #164	@ 0xa4
 8014806:	4618      	mov	r0, r3
 8014808:	f7ed fe1a 	bl	8002440 <vListInitialise>

            vListInitialise( &( pxWindow->xPriorityQueue ) ); /* Priority queue: segments which must be sent immediately */
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	3340      	adds	r3, #64	@ 0x40
 8014810:	4618      	mov	r0, r3
 8014812:	f7ed fe15 	bl	8002440 <vListInitialise>
            vListInitialise( &( pxWindow->xTxQueue ) );       /* Transmit queue: segments queued for transmission */
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	3354      	adds	r3, #84	@ 0x54
 801481a:	4618      	mov	r0, r3
 801481c:	f7ed fe10 	bl	8002440 <vListInitialise>
            vListInitialise( &( pxWindow->xWaitQueue ) );     /* Waiting queue:  outstanding segments */
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	3368      	adds	r3, #104	@ 0x68
 8014824:	4618      	mov	r0, r3
 8014826:	f7ed fe0b 	bl	8002440 <vListInitialise>
        }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        if( xTCPWindowLoggingLevel != 0 )
 801482a:	4b0e      	ldr	r3, [pc, #56]	@ (8014864 <xTCPWindowCreate+0x8c>)
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d004      	beq.n	801483c <xTCPWindowCreate+0x64>
        {
            FreeRTOS_debug_printf( ( "xTCPWindowCreate: for WinLen = Rx/Tx: %u/%u\n",
 8014832:	687a      	ldr	r2, [r7, #4]
 8014834:	68b9      	ldr	r1, [r7, #8]
 8014836:	480c      	ldr	r0, [pc, #48]	@ (8014868 <xTCPWindowCreate+0x90>)
 8014838:	f00b fe78 	bl	802052c <lUDPLoggingPrintf>
                                     ( unsigned ) ulRxWindowLength, ( unsigned ) ulTxWindowLength ) );
        }

        pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	68ba      	ldr	r2, [r7, #8]
 8014840:	605a      	str	r2, [r3, #4]
        pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	687a      	ldr	r2, [r7, #4]
 8014846:	609a      	str	r2, [r3, #8]

        vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 8014848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801484a:	6a3a      	ldr	r2, [r7, #32]
 801484c:	6839      	ldr	r1, [r7, #0]
 801484e:	68f8      	ldr	r0, [r7, #12]
 8014850:	f000 f80c 	bl	801486c <vTCPWindowInit>

        return xReturn;
 8014854:	697b      	ldr	r3, [r7, #20]
    }
 8014856:	4618      	mov	r0, r3
 8014858:	3718      	adds	r7, #24
 801485a:	46bd      	mov	sp, r7
 801485c:	bd80      	pop	{r7, pc}
 801485e:	bf00      	nop
 8014860:	200012dc 	.word	0x200012dc
 8014864:	200012f4 	.word	0x200012f4
 8014868:	080250f8 	.word	0x080250f8

0801486c <vTCPWindowInit>:
 */
    void vTCPWindowInit( TCPWindow_t * pxWindow,
                         uint32_t ulAckNumber,
                         uint32_t ulSequenceNumber,
                         uint32_t ulMSS )
    {
 801486c:	b480      	push	{r7}
 801486e:	b087      	sub	sp, #28
 8014870:	af00      	add	r7, sp, #0
 8014872:	60f8      	str	r0, [r7, #12]
 8014874:	60b9      	str	r1, [r7, #8]
 8014876:	607a      	str	r2, [r7, #4]
 8014878:	603b      	str	r3, [r7, #0]
        const int32_t l500ms = 500;
 801487a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801487e:	617b      	str	r3, [r7, #20]

        pxWindow->u.ulFlags = 0U;
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	2200      	movs	r2, #0
 8014884:	601a      	str	r2, [r3, #0]
        pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 8014886:	68fa      	ldr	r2, [r7, #12]
 8014888:	7813      	ldrb	r3, [r2, #0]
 801488a:	f043 0301 	orr.w	r3, r3, #1
 801488e:	7013      	strb	r3, [r2, #0]

        if( ulMSS != 0U )
 8014890:	683b      	ldr	r3, [r7, #0]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d024      	beq.n	80148e0 <vTCPWindowInit+0x74>
        {
            if( pxWindow->usMSSInit != 0U )
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	f8b3 30be 	ldrh.w	r3, [r3, #190]	@ 0xbe
 801489c:	2b00      	cmp	r3, #0
 801489e:	d004      	beq.n	80148aa <vTCPWindowInit+0x3e>
            {
                pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 80148a0:	683b      	ldr	r3, [r7, #0]
 80148a2:	b29a      	uxth	r2, r3
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
            }

            if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0U ) )
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 80148b0:	461a      	mov	r2, r3
 80148b2:	683b      	ldr	r3, [r7, #0]
 80148b4:	4293      	cmp	r3, r2
 80148b6:	d304      	bcc.n	80148c2 <vTCPWindowInit+0x56>
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d10e      	bne.n	80148e0 <vTCPWindowInit+0x74>
            {
                pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	685a      	ldr	r2, [r3, #4]
 80148c6:	683b      	ldr	r3, [r7, #0]
 80148c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80148cc:	683a      	ldr	r2, [r7, #0]
 80148ce:	fb03 f202 	mul.w	r2, r3, r2
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	605a      	str	r2, [r3, #4]
                pxWindow->usMSS = ( uint16_t ) ulMSS;
 80148d6:	683b      	ldr	r3, [r7, #0]
 80148d8:	b29a      	uxth	r2, r3
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
            pxWindow->xTxSegment.lMaxLength = ( int32_t ) pxWindow->usMSS;
        }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        /*Start with a timeout of 2 * 500 ms (1 sec). */
        pxWindow->lSRTT = l500ms;
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	697a      	ldr	r2, [r7, #20]
 80148e4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Just for logging, to print relative sequence numbers. */
        pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	68ba      	ldr	r2, [r7, #8]
 80148ea:	60da      	str	r2, [r3, #12]

        /* The segment asked for in the next transmission. */
        pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	68ba      	ldr	r2, [r7, #8]
 80148f0:	611a      	str	r2, [r3, #16]

        /* The right-hand side of the receive window. */
        pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	68ba      	ldr	r2, [r7, #8]
 80148f6:	619a      	str	r2, [r3, #24]

        pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	687a      	ldr	r2, [r7, #4]
 80148fc:	61da      	str	r2, [r3, #28]

        /* The segment asked for in next transmission. */
        pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	687a      	ldr	r2, [r7, #4]
 8014902:	621a      	str	r2, [r3, #32]

        /* The sequence number given to the next outgoing byte to be added is
         * maintained by lTCPWindowTxAdd(). */
        pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	687a      	ldr	r2, [r7, #4]
 8014908:	635a      	str	r2, [r3, #52]	@ 0x34

        /* The right-hand side of the transmit window. */
        pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	687a      	ldr	r2, [r7, #4]
 801490e:	629a      	str	r2, [r3, #40]	@ 0x28
        pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	687a      	ldr	r2, [r7, #4]
 8014914:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
 8014916:	bf00      	nop
 8014918:	371c      	adds	r7, #28
 801491a:	46bd      	mov	sp, r7
 801491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014920:	4770      	bx	lr
	...

08014924 <xTCPWindowRxConfirm>:
 * @return The first segment descriptor involved, or NULL when no matching descriptor was found.
 */
        static TCPSegment_t * xTCPWindowRxConfirm( const TCPWindow_t * pxWindow,
                                                   uint32_t ulSequenceNumber,
                                                   uint32_t ulLength )
        {
 8014924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014926:	b08f      	sub	sp, #60	@ 0x3c
 8014928:	af04      	add	r7, sp, #16
 801492a:	60f8      	str	r0, [r7, #12]
 801492c:	60b9      	str	r1, [r7, #8]
 801492e:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxBest = NULL;
 8014930:	2300      	movs	r3, #0
 8014932:	627b      	str	r3, [r7, #36]	@ 0x24
            const ListItem_t * pxIterator;
            uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 8014934:	68ba      	ldr	r2, [r7, #8]
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	4413      	add	r3, r2
 801493a:	61fb      	str	r3, [r7, #28]

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	33ac      	adds	r3, #172	@ 0xac
 8014940:	61bb      	str	r3, [r7, #24]
             * and (ulSequenceNumber+ulLength).  Normally none will be found, because
             * the next RX segment should have a sequence number equal to
             * '(ulSequenceNumber+ulLength)'. */

            /* Iterate through all RX segments that are stored: */
            for( pxIterator = listGET_NEXT( pxEnd );
 8014942:	69bb      	ldr	r3, [r7, #24]
 8014944:	685b      	ldr	r3, [r3, #4]
 8014946:	623b      	str	r3, [r7, #32]
 8014948:	e027      	b.n	801499a <xTCPWindowRxConfirm+0x76>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 801494a:	6a3b      	ldr	r3, [r7, #32]
 801494c:	68db      	ldr	r3, [r3, #12]
 801494e:	617b      	str	r3, [r7, #20]

                /* And see if there is a segment for which:
                 * 'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < 'ulNextSequenceNumber'
                 * If there are more matching segments, the one with the lowest sequence number
                 * shall be taken */
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 8014950:	697b      	ldr	r3, [r7, #20]
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	68b9      	ldr	r1, [r7, #8]
 8014956:	4618      	mov	r0, r3
 8014958:	f7ff fd25 	bl	80143a6 <xSequenceGreaterThanOrEqual>
 801495c:	4603      	mov	r3, r0
 801495e:	2b00      	cmp	r3, #0
 8014960:	d018      	beq.n	8014994 <xTCPWindowRxConfirm+0x70>
                    ( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 8014962:	697b      	ldr	r3, [r7, #20]
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	69f9      	ldr	r1, [r7, #28]
 8014968:	4618      	mov	r0, r3
 801496a:	f7ff fcf0 	bl	801434e <xSequenceLessThan>
 801496e:	4603      	mov	r3, r0
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 8014970:	2b00      	cmp	r3, #0
 8014972:	d00f      	beq.n	8014994 <xTCPWindowRxConfirm+0x70>
                {
                    if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 8014974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014976:	2b00      	cmp	r3, #0
 8014978:	d00a      	beq.n	8014990 <xTCPWindowRxConfirm+0x6c>
 801497a:	697b      	ldr	r3, [r7, #20]
 801497c:	681a      	ldr	r2, [r3, #0]
 801497e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	4619      	mov	r1, r3
 8014984:	4610      	mov	r0, r2
 8014986:	f7ff fce2 	bl	801434e <xSequenceLessThan>
 801498a:	4603      	mov	r3, r0
 801498c:	2b00      	cmp	r3, #0
 801498e:	d001      	beq.n	8014994 <xTCPWindowRxConfirm+0x70>
                    {
                        pxBest = pxSegment;
 8014990:	697b      	ldr	r3, [r7, #20]
 8014992:	627b      	str	r3, [r7, #36]	@ 0x24
                 pxIterator = listGET_NEXT( pxIterator ) )
 8014994:	6a3b      	ldr	r3, [r7, #32]
 8014996:	685b      	ldr	r3, [r3, #4]
 8014998:	623b      	str	r3, [r7, #32]
                 pxIterator != pxEnd;
 801499a:	6a3a      	ldr	r2, [r7, #32]
 801499c:	69bb      	ldr	r3, [r7, #24]
 801499e:	429a      	cmp	r2, r3
 80149a0:	d1d3      	bne.n	801494a <xTCPWindowRxConfirm+0x26>
                    }
                }
            }

            if( ( pxBest != NULL ) &&
 80149a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d030      	beq.n	8014a0a <xTCPWindowRxConfirm+0xe6>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 80149a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149aa:	681b      	ldr	r3, [r3, #0]
            if( ( pxBest != NULL ) &&
 80149ac:	68ba      	ldr	r2, [r7, #8]
 80149ae:	429a      	cmp	r2, r3
 80149b0:	d104      	bne.n	80149bc <xTCPWindowRxConfirm+0x98>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 80149b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149b4:	689a      	ldr	r2, [r3, #8]
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	429a      	cmp	r2, r3
 80149ba:	d026      	beq.n	8014a0a <xTCPWindowRxConfirm+0xe6>
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxConfirm[%u]: search %u (+%u=%u) found %u (+%d=%u)\n",
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80149c2:	461e      	mov	r6, r3
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	68db      	ldr	r3, [r3, #12]
 80149c8:	68ba      	ldr	r2, [r7, #8]
 80149ca:	1ad5      	subs	r5, r2, r3
 80149cc:	68ba      	ldr	r2, [r7, #8]
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	441a      	add	r2, r3
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	68db      	ldr	r3, [r3, #12]
 80149d6:	1ad3      	subs	r3, r2, r3
 80149d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80149da:	6811      	ldr	r1, [r2, #0]
 80149dc:	68fa      	ldr	r2, [r7, #12]
 80149de:	68d2      	ldr	r2, [r2, #12]
 80149e0:	1a8a      	subs	r2, r1, r2
 80149e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80149e4:	6889      	ldr	r1, [r1, #8]
 80149e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80149e8:	6800      	ldr	r0, [r0, #0]
 80149ea:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80149ec:	68a4      	ldr	r4, [r4, #8]
 80149ee:	4404      	add	r4, r0
 80149f0:	68f8      	ldr	r0, [r7, #12]
 80149f2:	68c0      	ldr	r0, [r0, #12]
 80149f4:	1a20      	subs	r0, r4, r0
 80149f6:	9003      	str	r0, [sp, #12]
 80149f8:	9102      	str	r1, [sp, #8]
 80149fa:	9201      	str	r2, [sp, #4]
 80149fc:	9300      	str	r3, [sp, #0]
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	462a      	mov	r2, r5
 8014a02:	4631      	mov	r1, r6
 8014a04:	4803      	ldr	r0, [pc, #12]	@ (8014a14 <xTCPWindowRxConfirm+0xf0>)
 8014a06:	f00b fd91 	bl	802052c <lUDPLoggingPrintf>
                                         ( unsigned ) ( pxBest->ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) pxBest->lDataLength,
                                         ( unsigned ) ( pxBest->ulSequenceNumber + ( ( uint32_t ) pxBest->lDataLength ) - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            return pxBest;
 8014a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	372c      	adds	r7, #44	@ 0x2c
 8014a10:	46bd      	mov	sp, r7
 8014a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a14:	08025128 	.word	0x08025128

08014a18 <prvTCPWindowRx_ExpectedRX>:
 * @param[in] pxWindow The TCP sliding window data of the socket.
 * @param[in] ulLength The number of bytes that can be added.
 */
        static void prvTCPWindowRx_ExpectedRX( TCPWindow_t * pxWindow,
                                               uint32_t ulLength )
        {
 8014a18:	b5b0      	push	{r4, r5, r7, lr}
 8014a1a:	b08a      	sub	sp, #40	@ 0x28
 8014a1c:	af04      	add	r7, sp, #16
 8014a1e:	6078      	str	r0, [r7, #4]
 8014a20:	6039      	str	r1, [r7, #0]
            uint32_t ulSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	691b      	ldr	r3, [r3, #16]
 8014a26:	613b      	str	r3, [r7, #16]
            uint32_t ulCurrentSequenceNumber = ulSequenceNumber + ulLength;
 8014a28:	693a      	ldr	r2, [r7, #16]
 8014a2a:	683b      	ldr	r3, [r7, #0]
 8014a2c:	4413      	add	r3, r2
 8014a2e:	617b      	str	r3, [r7, #20]

            if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0U )
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d04e      	beq.n	8014ad8 <prvTCPWindowRx_ExpectedRX+0xc0>
            {
                uint32_t ulSavedSequenceNumber = ulCurrentSequenceNumber;
 8014a3a:	697b      	ldr	r3, [r7, #20]
 8014a3c:	60fb      	str	r3, [r7, #12]
                 * If the server is forced to retransmit packets several time in a row it might send a batch of concatenated packet for speed.
                 * So we cannot rely on the packets between ulSequenceNumber and ulSequenceNumber + ulLength to be sequential and it is better to just
                 * clean them out. */
                do
                {
                    pxFound = xTCPWindowRxConfirm( pxWindow, ulSequenceNumber, ulLength );
 8014a3e:	683a      	ldr	r2, [r7, #0]
 8014a40:	6939      	ldr	r1, [r7, #16]
 8014a42:	6878      	ldr	r0, [r7, #4]
 8014a44:	f7ff ff6e 	bl	8014924 <xTCPWindowRxConfirm>
 8014a48:	60b8      	str	r0, [r7, #8]

                    if( pxFound != NULL )
 8014a4a:	68bb      	ldr	r3, [r7, #8]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d002      	beq.n	8014a56 <prvTCPWindowRx_ExpectedRX+0x3e>
                    {
                        /* Remove it because it will be passed to user directly. */
                        vTCPWindowFree( pxFound );
 8014a50:	68b8      	ldr	r0, [r7, #8]
 8014a52:	f7ff fe67 	bl	8014724 <vTCPWindowFree>
                    }
                } while( pxFound != NULL );
 8014a56:	68bb      	ldr	r3, [r7, #8]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d1f0      	bne.n	8014a3e <prvTCPWindowRx_ExpectedRX+0x26>

                /*  Check for following segments that are already in the
                 * queue and increment ulCurrentSequenceNumber. */
                for( ; ; )
                {
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 8014a5c:	6979      	ldr	r1, [r7, #20]
 8014a5e:	6878      	ldr	r0, [r7, #4]
 8014a60:	f7ff fd5e 	bl	8014520 <xTCPWindowRxFind>
 8014a64:	60b8      	str	r0, [r7, #8]

                    if( pxFound == NULL )
 8014a66:	68bb      	ldr	r3, [r7, #8]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d009      	beq.n	8014a80 <prvTCPWindowRx_ExpectedRX+0x68>
                    {
                        break;
                    }

                    ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 8014a6c:	68bb      	ldr	r3, [r7, #8]
 8014a6e:	689b      	ldr	r3, [r3, #8]
 8014a70:	461a      	mov	r2, r3
 8014a72:	697b      	ldr	r3, [r7, #20]
 8014a74:	4413      	add	r3, r2
 8014a76:	617b      	str	r3, [r7, #20]

                    /* As all packet below this one have been passed to the
                     * user it can be discarded. */
                    vTCPWindowFree( pxFound );
 8014a78:	68b8      	ldr	r0, [r7, #8]
 8014a7a:	f7ff fe53 	bl	8014724 <vTCPWindowFree>
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 8014a7e:	e7ed      	b.n	8014a5c <prvTCPWindowRx_ExpectedRX+0x44>
                        break;
 8014a80:	bf00      	nop
                }

                if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 8014a82:	68fa      	ldr	r2, [r7, #12]
 8014a84:	697b      	ldr	r3, [r7, #20]
 8014a86:	429a      	cmp	r2, r3
 8014a88:	d026      	beq.n	8014ad8 <prvTCPWindowRx_ExpectedRX+0xc0>
                {
                    /*  After the current data-package, there is more data
                     * to be popped. */
                    pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 8014a8a:	697a      	ldr	r2, [r7, #20]
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	1ad2      	subs	r2, r2, r3
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	631a      	str	r2, [r3, #48]	@ 0x30

                    if( xTCPWindowLoggingLevel >= 1 )
 8014a94:	4b14      	ldr	r3, [pc, #80]	@ (8014ae8 <prvTCPWindowRx_ExpectedRX+0xd0>)
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	dd1d      	ble.n	8014ad8 <prvTCPWindowRx_ExpectedRX+0xc0>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: retran %u (Found %u bytes at %u cnt %d)\n",
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8014aa2:	461c      	mov	r4, r3
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8014aaa:	461d      	mov	r5, r3
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	68db      	ldr	r3, [r3, #12]
 8014ab0:	693a      	ldr	r2, [r7, #16]
 8014ab2:	1ad0      	subs	r0, r2, r3
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014ab8:	687a      	ldr	r2, [r7, #4]
 8014aba:	68d2      	ldr	r2, [r2, #12]
 8014abc:	68f9      	ldr	r1, [r7, #12]
 8014abe:	1a8a      	subs	r2, r1, r2
 8014ac0:	6879      	ldr	r1, [r7, #4]
 8014ac2:	f8d1 10a4 	ldr.w	r1, [r1, #164]	@ 0xa4
 8014ac6:	9102      	str	r1, [sp, #8]
 8014ac8:	9201      	str	r2, [sp, #4]
 8014aca:	9300      	str	r3, [sp, #0]
 8014acc:	4603      	mov	r3, r0
 8014ace:	462a      	mov	r2, r5
 8014ad0:	4621      	mov	r1, r4
 8014ad2:	4806      	ldr	r0, [pc, #24]	@ (8014aec <prvTCPWindowRx_ExpectedRX+0xd4>)
 8014ad4:	f00b fd2a 	bl	802052c <lUDPLoggingPrintf>
                                                 ( int ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }
                }
            }

            pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	697a      	ldr	r2, [r7, #20]
 8014adc:	611a      	str	r2, [r3, #16]
        }
 8014ade:	bf00      	nop
 8014ae0:	3718      	adds	r7, #24
 8014ae2:	46bd      	mov	sp, r7
 8014ae4:	bdb0      	pop	{r4, r5, r7, pc}
 8014ae6:	bf00      	nop
 8014ae8:	200012f4 	.word	0x200012f4
 8014aec:	08025168 	.word	0x08025168

08014af0 <prvTCPWindowRx_UnexpectedRX>:
 *         offset ( from the head ) at which the data can be placed.
 */
        static int32_t prvTCPWindowRx_UnexpectedRX( TCPWindow_t * pxWindow,
                                                    uint32_t ulSequenceNumber,
                                                    uint32_t ulLength )
        {
 8014af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014af2:	b08f      	sub	sp, #60	@ 0x3c
 8014af4:	af04      	add	r7, sp, #16
 8014af6:	60f8      	str	r0, [r7, #12]
 8014af8:	60b9      	str	r1, [r7, #8]
 8014afa:	607a      	str	r2, [r7, #4]
            int32_t lReturn = -1;
 8014afc:	f04f 33ff 	mov.w	r3, #4294967295
 8014b00:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t ulLast = ulSequenceNumber + ulLength;
 8014b02:	68ba      	ldr	r2, [r7, #8]
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	4413      	add	r3, r2
 8014b08:	623b      	str	r3, [r7, #32]
            uint32_t ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	691b      	ldr	r3, [r3, #16]
 8014b0e:	61fb      	str	r3, [r7, #28]
             * This is useful because subsequent packets will be SACK'd with
             * single one message
             */
            for( ; ; )
            {
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 8014b10:	6a39      	ldr	r1, [r7, #32]
 8014b12:	68f8      	ldr	r0, [r7, #12]
 8014b14:	f7ff fd04 	bl	8014520 <xTCPWindowRxFind>
 8014b18:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 8014b1a:	69bb      	ldr	r3, [r7, #24]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d006      	beq.n	8014b2e <prvTCPWindowRx_UnexpectedRX+0x3e>
                {
                    break;
                }

                ulLast += ( uint32_t ) pxFound->lDataLength;
 8014b20:	69bb      	ldr	r3, [r7, #24]
 8014b22:	689b      	ldr	r3, [r3, #8]
 8014b24:	461a      	mov	r2, r3
 8014b26:	6a3b      	ldr	r3, [r7, #32]
 8014b28:	4413      	add	r3, r2
 8014b2a:	623b      	str	r3, [r7, #32]
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 8014b2c:	e7f0      	b.n	8014b10 <prvTCPWindowRx_UnexpectedRX+0x20>
                    break;
 8014b2e:	bf00      	nop
            }

            if( xTCPWindowLoggingLevel >= 1 )
 8014b30:	4b45      	ldr	r3, [pc, #276]	@ (8014c48 <prvTCPWindowRx_UnexpectedRX+0x158>)
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	dd20      	ble.n	8014b7a <prvTCPWindowRx_UnexpectedRX+0x8a>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%d,%d]: seqnr %u exp %u (dist %d) SACK to %u\n",
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8014b3e:	461d      	mov	r5, r3
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8014b46:	461e      	mov	r6, r3
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	68db      	ldr	r3, [r3, #12]
 8014b4c:	68ba      	ldr	r2, [r7, #8]
 8014b4e:	1ad0      	subs	r0, r2, r3
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	68db      	ldr	r3, [r3, #12]
 8014b54:	69fa      	ldr	r2, [r7, #28]
 8014b56:	1ad3      	subs	r3, r2, r3
 8014b58:	68b9      	ldr	r1, [r7, #8]
 8014b5a:	69fa      	ldr	r2, [r7, #28]
 8014b5c:	1a8a      	subs	r2, r1, r2
 8014b5e:	4614      	mov	r4, r2
 8014b60:	68fa      	ldr	r2, [r7, #12]
 8014b62:	68d2      	ldr	r2, [r2, #12]
 8014b64:	6a39      	ldr	r1, [r7, #32]
 8014b66:	1a8a      	subs	r2, r1, r2
 8014b68:	9202      	str	r2, [sp, #8]
 8014b6a:	9401      	str	r4, [sp, #4]
 8014b6c:	9300      	str	r3, [sp, #0]
 8014b6e:	4603      	mov	r3, r0
 8014b70:	4632      	mov	r2, r6
 8014b72:	4629      	mov	r1, r5
 8014b74:	4835      	ldr	r0, [pc, #212]	@ (8014c4c <prvTCPWindowRx_UnexpectedRX+0x15c>)
 8014b76:	f00b fcd9 	bl	802052c <lUDPLoggingPrintf>
                                         ( unsigned ) ( ulLast - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            /* Now prepare the SACK message.
             * Code OPTION_CODE_SINGLE_SACK already in network byte order. */
            pxWindow->ulOptionsData[ 0 ] = OPTION_CODE_SINGLE_SACK;
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	4a34      	ldr	r2, [pc, #208]	@ (8014c50 <prvTCPWindowRx_UnexpectedRX+0x160>)
 8014b7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* First sequence number that we received. */
            pxWindow->ulOptionsData[ 1 ] = FreeRTOS_htonl( ulSequenceNumber );
 8014b82:	68bb      	ldr	r3, [r7, #8]
 8014b84:	061a      	lsls	r2, r3, #24
 8014b86:	68bb      	ldr	r3, [r7, #8]
 8014b88:	021b      	lsls	r3, r3, #8
 8014b8a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014b8e:	431a      	orrs	r2, r3
 8014b90:	68bb      	ldr	r3, [r7, #8]
 8014b92:	0a1b      	lsrs	r3, r3, #8
 8014b94:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014b98:	431a      	orrs	r2, r3
 8014b9a:	68bb      	ldr	r3, [r7, #8]
 8014b9c:	0e1b      	lsrs	r3, r3, #24
 8014b9e:	431a      	orrs	r2, r3
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Last + 1 */
            pxWindow->ulOptionsData[ 2 ] = FreeRTOS_htonl( ulLast );
 8014ba6:	6a3b      	ldr	r3, [r7, #32]
 8014ba8:	061a      	lsls	r2, r3, #24
 8014baa:	6a3b      	ldr	r3, [r7, #32]
 8014bac:	021b      	lsls	r3, r3, #8
 8014bae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014bb2:	431a      	orrs	r2, r3
 8014bb4:	6a3b      	ldr	r3, [r7, #32]
 8014bb6:	0a1b      	lsrs	r3, r3, #8
 8014bb8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014bbc:	431a      	orrs	r2, r3
 8014bbe:	6a3b      	ldr	r3, [r7, #32]
 8014bc0:	0e1b      	lsrs	r3, r3, #24
 8014bc2:	431a      	orrs	r2, r3
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

            /* Which make 12 (3*4) option bytes. */
            pxWindow->ucOptionLength = ( uint8_t ) ( 3U * sizeof( pxWindow->ulOptionsData[ 0 ] ) );
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	220c      	movs	r2, #12
 8014bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 8014bd2:	68b9      	ldr	r1, [r7, #8]
 8014bd4:	68f8      	ldr	r0, [r7, #12]
 8014bd6:	f7ff fca3 	bl	8014520 <xTCPWindowRxFind>
 8014bda:	61b8      	str	r0, [r7, #24]

            if( pxFound != NULL )
 8014bdc:	69bb      	ldr	r3, [r7, #24]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d12d      	bne.n	8014c3e <prvTCPWindowRx_UnexpectedRX+0x14e>
                 * again. */
                /* A negative value will be returned to indicate than error. */
            }
            else
            {
                pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 8014be2:	687a      	ldr	r2, [r7, #4]
 8014be4:	2301      	movs	r3, #1
 8014be6:	68b9      	ldr	r1, [r7, #8]
 8014be8:	68f8      	ldr	r0, [r7, #12]
 8014bea:	f7ff fcc1 	bl	8014570 <xTCPWindowNew>
 8014bee:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 8014bf0:	69bb      	ldr	r3, [r7, #24]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d104      	bne.n	8014c00 <prvTCPWindowRx_UnexpectedRX+0x110>
                {
                    /* Can not send a SACK, because the segment cannot be
                     * stored. */
                    pxWindow->ucOptionLength = 0U;
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	2200      	movs	r2, #0
 8014bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8014bfe:	e01e      	b.n	8014c3e <prvTCPWindowRx_UnexpectedRX+0x14e>
                }
                else
                {
                    uint32_t ulIntermediateResult;

                    if( xTCPWindowLoggingLevel != 0 )
 8014c00:	4b11      	ldr	r3, [pc, #68]	@ (8014c48 <prvTCPWindowRx_UnexpectedRX+0x158>)
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d014      	beq.n	8014c32 <prvTCPWindowRx_UnexpectedRX+0x142>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: seqnr %u (cnt %u)\n",
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8014c0e:	4619      	mov	r1, r3
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8014c16:	4618      	mov	r0, r3
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	68db      	ldr	r3, [r3, #12]
 8014c1c:	68ba      	ldr	r2, [r7, #8]
 8014c1e:	1ad2      	subs	r2, r2, r3
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014c26:	9300      	str	r3, [sp, #0]
 8014c28:	4613      	mov	r3, r2
 8014c2a:	4602      	mov	r2, r0
 8014c2c:	4809      	ldr	r0, [pc, #36]	@ (8014c54 <prvTCPWindowRx_UnexpectedRX+0x164>)
 8014c2e:	f00b fc7d 	bl	802052c <lUDPLoggingPrintf>
                                                 ( unsigned ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }

                    /* Return a positive value.  The packet may be accepted
                    * and stored but an earlier packet is still missing. */
                    ulIntermediateResult = ulSequenceNumber - ulCurrentSequenceNumber;
 8014c32:	68ba      	ldr	r2, [r7, #8]
 8014c34:	69fb      	ldr	r3, [r7, #28]
 8014c36:	1ad3      	subs	r3, r2, r3
 8014c38:	617b      	str	r3, [r7, #20]
                    lReturn = ( int32_t ) ulIntermediateResult;
 8014c3a:	697b      	ldr	r3, [r7, #20]
 8014c3c:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            return lReturn;
 8014c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 8014c40:	4618      	mov	r0, r3
 8014c42:	372c      	adds	r7, #44	@ 0x2c
 8014c44:	46bd      	mov	sp, r7
 8014c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c48:	200012f4 	.word	0x200012f4
 8014c4c:	080251ac 	.word	0x080251ac
 8014c50:	0a050101 	.word	0x0a050101
 8014c54:	080251ec 	.word	0x080251ec

08014c58 <lTCPWindowRxCheck>:
        int32_t lTCPWindowRxCheck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber,
                                   uint32_t ulLength,
                                   uint32_t ulSpace,
                                   uint32_t * pulSkipCount )
        {
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	b08c      	sub	sp, #48	@ 0x30
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	60f8      	str	r0, [r7, #12]
 8014c60:	60b9      	str	r1, [r7, #8]
 8014c62:	607a      	str	r2, [r7, #4]
 8014c64:	603b      	str	r3, [r7, #0]
            uint32_t ulCurrentSequenceNumber;
            uint32_t ulIntermediateResult;
            int32_t lReturn = -1;
 8014c66:	f04f 33ff 	mov.w	r3, #4294967295
 8014c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            int32_t lStartDistance;
            int32_t lLastDistance;
            uint32_t ulLast;
            uint32_t ulRxSequenceNumber = ulSequenceNumber;
 8014c6c:	68bb      	ldr	r3, [r7, #8]
 8014c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t ulRxLength = ulLength;
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Only in an exceptional case, where a packet starts before
             * ulCurrentSequenceNumber, and ends after it, the skip-count
             * will be set. See below. */

            *( pulSkipCount ) = 0U;
 8014c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c76:	2200      	movs	r2, #0
 8014c78:	601a      	str	r2, [r3, #0]

            ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	691b      	ldr	r3, [r3, #16]
 8014c7e:	623b      	str	r3, [r7, #32]

            ulLast = ulRxSequenceNumber + ulRxLength;
 8014c80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c84:	4413      	add	r3, r2
 8014c86:	61fb      	str	r3, [r7, #28]
            ulIntermediateResult = ulLast - ulCurrentSequenceNumber;
 8014c88:	69fa      	ldr	r2, [r7, #28]
 8014c8a:	6a3b      	ldr	r3, [r7, #32]
 8014c8c:	1ad3      	subs	r3, r2, r3
 8014c8e:	61bb      	str	r3, [r7, #24]
            /* The cast from unsigned long to signed long is on purpose. */
            lLastDistance = ( int32_t ) ulIntermediateResult;
 8014c90:	69bb      	ldr	r3, [r7, #24]
 8014c92:	617b      	str	r3, [r7, #20]

            ulIntermediateResult = ulRxSequenceNumber - ulCurrentSequenceNumber;
 8014c94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014c96:	6a3b      	ldr	r3, [r7, #32]
 8014c98:	1ad3      	subs	r3, r2, r3
 8014c9a:	61bb      	str	r3, [r7, #24]
            lStartDistance = ( int32_t ) ulIntermediateResult;
 8014c9c:	69bb      	ldr	r3, [r7, #24]
 8014c9e:	613b      	str	r3, [r7, #16]

            if( ( lStartDistance < 0 ) && ( lLastDistance > 0 ) )
 8014ca0:	693b      	ldr	r3, [r7, #16]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	da18      	bge.n	8014cd8 <lTCPWindowRxCheck+0x80>
 8014ca6:	697b      	ldr	r3, [r7, #20]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	dd15      	ble.n	8014cd8 <lTCPWindowRxCheck+0x80>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Received +%u bytes for %u, only using %d\n",
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	68db      	ldr	r3, [r3, #12]
 8014cb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014cb2:	1ad2      	subs	r2, r2, r3
 8014cb4:	697b      	ldr	r3, [r7, #20]
 8014cb6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014cb8:	4824      	ldr	r0, [pc, #144]	@ (8014d4c <lTCPWindowRxCheck+0xf4>)
 8014cba:	f00b fc37 	bl	802052c <lUDPLoggingPrintf>
                                         ( unsigned ) ulRxLength,
                                         ( unsigned ) ( ulRxSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) lLastDistance ) );
                /* Increase the sequence number, decrease the length. */
                ulRxSequenceNumber += ( uint32_t ) ( -lStartDistance );
 8014cbe:	693b      	ldr	r3, [r7, #16]
 8014cc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014cc2:	1ad3      	subs	r3, r2, r3
 8014cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
                ulRxLength += ( uint32_t ) lStartDistance;
 8014cc6:	693b      	ldr	r3, [r7, #16]
 8014cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014cca:	4413      	add	r3, r2
 8014ccc:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Tell the caller that the first 'pulSkipCount' bytes don't
                 * need to be stored. */
                *( pulSkipCount ) = ( uint32_t ) ( -lStartDistance );
 8014cce:	693b      	ldr	r3, [r7, #16]
 8014cd0:	425b      	negs	r3, r3
 8014cd2:	461a      	mov	r2, r3
 8014cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cd6:	601a      	str	r2, [r3, #0]
            }

            /* For Selective Ack (SACK), used when out-of-sequence data come in. */
            pxWindow->ucOptionLength = 0U;
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	2200      	movs	r2, #0
 8014cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            /* Non-zero if TCP-windows contains data which must be popped. */
            pxWindow->ulUserDataLength = 0U;
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	2200      	movs	r2, #0
 8014ce4:	631a      	str	r2, [r3, #48]	@ 0x30

            if( ulCurrentSequenceNumber == ulRxSequenceNumber )
 8014ce6:	6a3a      	ldr	r2, [r7, #32]
 8014ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cea:	429a      	cmp	r2, r3
 8014cec:	d110      	bne.n	8014d10 <lTCPWindowRxCheck+0xb8>
            {
                /* This is the packet with the lowest sequence number we're waiting
                 * for.  It can be passed directly to the rx stream. */
                if( ulRxLength > ulSpace )
 8014cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014cf0:	683b      	ldr	r3, [r7, #0]
 8014cf2:	429a      	cmp	r2, r3
 8014cf4:	d905      	bls.n	8014d02 <lTCPWindowRxCheck+0xaa>
                {
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %u bytes, due to lack of space (%u)\n", ( unsigned ) ulRxLength, ( unsigned ) ulSpace ) );
 8014cf6:	683a      	ldr	r2, [r7, #0]
 8014cf8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014cfa:	4815      	ldr	r0, [pc, #84]	@ (8014d50 <lTCPWindowRxCheck+0xf8>)
 8014cfc:	f00b fc16 	bl	802052c <lUDPLoggingPrintf>
 8014d00:	e01f      	b.n	8014d42 <lTCPWindowRxCheck+0xea>
                }
                else
                {
                    /* Packet was expected, may be passed directly to the socket
                     * buffer or application.  Store the packet at offset 0. */
                    prvTCPWindowRx_ExpectedRX( pxWindow, ulRxLength );
 8014d02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014d04:	68f8      	ldr	r0, [r7, #12]
 8014d06:	f7ff fe87 	bl	8014a18 <prvTCPWindowRx_ExpectedRX>
                    lReturn = 0;
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014d0e:	e018      	b.n	8014d42 <lTCPWindowRxCheck+0xea>
                }
            }
            else if( ulCurrentSequenceNumber == ( ulRxSequenceNumber + 1U ) )
 8014d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d12:	3301      	adds	r3, #1
 8014d14:	6a3a      	ldr	r2, [r7, #32]
 8014d16:	429a      	cmp	r2, r3
 8014d18:	d013      	beq.n	8014d42 <lTCPWindowRxCheck+0xea>
                 * window so it can be stored. */

                /*  An "out-of-sequence" segment was received, must have missed one.
                 * Prepare a SACK (Selective ACK). */

                if( lLastDistance <= 0 )
 8014d1a:	697b      	ldr	r3, [r7, #20]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	dd10      	ble.n	8014d42 <lTCPWindowRxCheck+0xea>
                {
                    /* An earlier packet has been received, must be a retransmission of a
                     * packet that has been accepted already.  No need to send out a
                     * Selective ACK (SACK). */
                }
                else if( lLastDistance > ( int32_t ) ulSpace )
 8014d20:	683b      	ldr	r3, [r7, #0]
 8014d22:	697a      	ldr	r2, [r7, #20]
 8014d24:	429a      	cmp	r2, r3
 8014d26:	dd06      	ble.n	8014d36 <lTCPWindowRxCheck+0xde>
                {
                    /* The new segment is ahead of rx.ulCurrentSequenceNumber.  The
                     * sequence number of this packet is too far ahead, ignore it. */
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %d+%u bytes, due to lack of space (%u)\n",
 8014d28:	683b      	ldr	r3, [r7, #0]
 8014d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d2c:	6979      	ldr	r1, [r7, #20]
 8014d2e:	4809      	ldr	r0, [pc, #36]	@ (8014d54 <lTCPWindowRxCheck+0xfc>)
 8014d30:	f00b fbfc 	bl	802052c <lUDPLoggingPrintf>
 8014d34:	e005      	b.n	8014d42 <lTCPWindowRxCheck+0xea>
                                             ( unsigned ) ulRxLength,
                                             ( unsigned ) ulSpace ) );
                }
                else
                {
                    lReturn = prvTCPWindowRx_UnexpectedRX( pxWindow, ulRxSequenceNumber, ulRxLength );
 8014d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014d3a:	68f8      	ldr	r0, [r7, #12]
 8014d3c:	f7ff fed8 	bl	8014af0 <prvTCPWindowRx_UnexpectedRX>
 8014d40:	62f8      	str	r0, [r7, #44]	@ 0x2c
                }
            }

            return lReturn;
 8014d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 8014d44:	4618      	mov	r0, r3
 8014d46:	3730      	adds	r7, #48	@ 0x30
 8014d48:	46bd      	mov	sp, r7
 8014d4a:	bd80      	pop	{r7, pc}
 8014d4c:	0802521c 	.word	0x0802521c
 8014d50:	0802525c 	.word	0x0802525c
 8014d54:	0802529c 	.word	0x0802529c

08014d58 <lTCPIncrementTxPosition>:
 * @return The new incremented position, or "( lPosition + lCount ) % lMax".
 */
        static int32_t lTCPIncrementTxPosition( int32_t lPosition,
                                                int32_t lMax,
                                                int32_t lCount )
        {
 8014d58:	b480      	push	{r7}
 8014d5a:	b087      	sub	sp, #28
 8014d5c:	af00      	add	r7, sp, #0
 8014d5e:	60f8      	str	r0, [r7, #12]
 8014d60:	60b9      	str	r1, [r7, #8]
 8014d62:	607a      	str	r2, [r7, #4]
            int32_t lReturn;


            /* +TCP stores data in circular buffers.  Calculate the next position to
             * store. */
            lReturn = lPosition + lCount;
 8014d64:	68fa      	ldr	r2, [r7, #12]
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	4413      	add	r3, r2
 8014d6a:	617b      	str	r3, [r7, #20]

            if( lReturn >= lMax )
 8014d6c:	697a      	ldr	r2, [r7, #20]
 8014d6e:	68bb      	ldr	r3, [r7, #8]
 8014d70:	429a      	cmp	r2, r3
 8014d72:	db03      	blt.n	8014d7c <lTCPIncrementTxPosition+0x24>
            {
                lReturn -= lMax;
 8014d74:	697a      	ldr	r2, [r7, #20]
 8014d76:	68bb      	ldr	r3, [r7, #8]
 8014d78:	1ad3      	subs	r3, r2, r3
 8014d7a:	617b      	str	r3, [r7, #20]
            }

            return lReturn;
 8014d7c:	697b      	ldr	r3, [r7, #20]
        }
 8014d7e:	4618      	mov	r0, r3
 8014d80:	371c      	adds	r7, #28
 8014d82:	46bd      	mov	sp, r7
 8014d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d88:	4770      	bx	lr
	...

08014d8c <prvTCPWindowTxAdd_FrontSegment>:
 * @return lToWrite: the number of bytes added to the segment.
 */
        static int32_t prvTCPWindowTxAdd_FrontSegment( TCPWindow_t * pxWindow,
                                                       TCPSegment_t * pxSegment,
                                                       int32_t lBytesLeft )
        {
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b088      	sub	sp, #32
 8014d90:	af02      	add	r7, sp, #8
 8014d92:	60f8      	str	r0, [r7, #12]
 8014d94:	60b9      	str	r1, [r7, #8]
 8014d96:	607a      	str	r2, [r7, #4]
            int32_t lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 8014d98:	68bb      	ldr	r3, [r7, #8]
 8014d9a:	685a      	ldr	r2, [r3, #4]
 8014d9c:	68bb      	ldr	r3, [r7, #8]
 8014d9e:	689b      	ldr	r3, [r3, #8]
 8014da0:	1ad3      	subs	r3, r2, r3
 8014da2:	4619      	mov	r1, r3
 8014da4:	6878      	ldr	r0, [r7, #4]
 8014da6:	f7f4 fe05 	bl	80099b4 <FreeRTOS_min_int32>
 8014daa:	6178      	str	r0, [r7, #20]

            pxSegment->lDataLength += lToWrite;
 8014dac:	68bb      	ldr	r3, [r7, #8]
 8014dae:	689a      	ldr	r2, [r3, #8]
 8014db0:	697b      	ldr	r3, [r7, #20]
 8014db2:	441a      	add	r2, r3
 8014db4:	68bb      	ldr	r3, [r7, #8]
 8014db6:	609a      	str	r2, [r3, #8]

            if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 8014db8:	68bb      	ldr	r3, [r7, #8]
 8014dba:	689a      	ldr	r2, [r3, #8]
 8014dbc:	68bb      	ldr	r3, [r7, #8]
 8014dbe:	685b      	ldr	r3, [r3, #4]
 8014dc0:	429a      	cmp	r2, r3
 8014dc2:	db02      	blt.n	8014dca <prvTCPWindowTxAdd_FrontSegment+0x3e>
            {
                /* This segment is full, don't add more bytes. */
                pxWindow->pxHeadSegment = NULL;
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	2200      	movs	r2, #0
 8014dc8:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            /* ulNextTxSequenceNumber is the sequence number of the next byte to
             * be stored for transmission. */
            pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014dce:	697b      	ldr	r3, [r7, #20]
 8014dd0:	441a      	add	r2, r3
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Some detailed logging, for those who're interested. */
            if( ( xTCPWindowLoggingLevel >= 2 ) && ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 8014dd6:	4b12      	ldr	r3, [pc, #72]	@ (8014e20 <prvTCPWindowTxAdd_FrontSegment+0x94>)
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	2b01      	cmp	r3, #1
 8014ddc:	dd1a      	ble.n	8014e14 <prvTCPWindowTxAdd_FrontSegment+0x88>
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8014de4:	2b17      	cmp	r3, #23
 8014de6:	d015      	beq.n	8014e14 <prvTCPWindowTxAdd_FrontSegment+0x88>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Add %4d bytes for seqNr %u len %4d (nxt %u) pos %d\n",
 8014de8:	68bb      	ldr	r3, [r7, #8]
 8014dea:	681a      	ldr	r2, [r3, #0]
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	69db      	ldr	r3, [r3, #28]
 8014df0:	1ad1      	subs	r1, r2, r3
 8014df2:	68bb      	ldr	r3, [r7, #8]
 8014df4:	6898      	ldr	r0, [r3, #8]
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	69db      	ldr	r3, [r3, #28]
 8014dfe:	1ad3      	subs	r3, r2, r3
 8014e00:	68ba      	ldr	r2, [r7, #8]
 8014e02:	68d2      	ldr	r2, [r2, #12]
 8014e04:	9201      	str	r2, [sp, #4]
 8014e06:	9300      	str	r3, [sp, #0]
 8014e08:	4603      	mov	r3, r0
 8014e0a:	460a      	mov	r2, r1
 8014e0c:	6879      	ldr	r1, [r7, #4]
 8014e0e:	4805      	ldr	r0, [pc, #20]	@ (8014e24 <prvTCPWindowTxAdd_FrontSegment+0x98>)
 8014e10:	f00b fb8c 	bl	802052c <lUDPLoggingPrintf>
                                         ( int ) pxSegment->lDataLength,
                                         ( unsigned ) ( pxWindow->ulNextTxSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( int ) pxSegment->lStreamPos ) );
            }

            return lToWrite;
 8014e14:	697b      	ldr	r3, [r7, #20]
        }
 8014e16:	4618      	mov	r0, r3
 8014e18:	3718      	adds	r7, #24
 8014e1a:	46bd      	mov	sp, r7
 8014e1c:	bd80      	pop	{r7, pc}
 8014e1e:	bf00      	nop
 8014e20:	200012f4 	.word	0x200012f4
 8014e24:	080252e0 	.word	0x080252e0

08014e28 <lTCPWindowTxAdd>:
 */
        int32_t lTCPWindowTxAdd( TCPWindow_t * pxWindow,
                                 uint32_t ulLength,
                                 int32_t lPosition,
                                 int32_t lMax )
        {
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	b08a      	sub	sp, #40	@ 0x28
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	60f8      	str	r0, [r7, #12]
 8014e30:	60b9      	str	r1, [r7, #8]
 8014e32:	607a      	str	r2, [r7, #4]
 8014e34:	603b      	str	r3, [r7, #0]
            int32_t lBytesLeft = ( int32_t ) ulLength;
 8014e36:	68bb      	ldr	r3, [r7, #8]
 8014e38:	627b      	str	r3, [r7, #36]	@ 0x24
            int32_t lToWrite;
            int32_t lDone = 0;
 8014e3a:	2300      	movs	r3, #0
 8014e3c:	623b      	str	r3, [r7, #32]
            int32_t lBufferIndex = lPosition;
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	61fb      	str	r3, [r7, #28]
            TCPSegment_t * pxSegment = pxWindow->pxHeadSegment;
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014e46:	61bb      	str	r3, [r7, #24]

            /* Puts a message in the Tx-window (after buffer size has been
             * verified). */
            if( ( pxSegment != NULL ) &&
 8014e48:	69bb      	ldr	r3, [r7, #24]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d073      	beq.n	8014f36 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 8014e4e:	69bb      	ldr	r3, [r7, #24]
 8014e50:	689a      	ldr	r2, [r3, #8]
 8014e52:	69bb      	ldr	r3, [r7, #24]
 8014e54:	685b      	ldr	r3, [r3, #4]
            if( ( pxSegment != NULL ) &&
 8014e56:	429a      	cmp	r2, r3
 8014e58:	da6d      	bge.n	8014f36 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 8014e5a:	69bb      	ldr	r3, [r7, #24]
 8014e5c:	7d9b      	ldrb	r3, [r3, #22]
 8014e5e:	f003 0301 	and.w	r3, r3, #1
 8014e62:	b2db      	uxtb	r3, r3
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d166      	bne.n	8014f36 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->lDataLength != 0 ) )
 8014e68:	69bb      	ldr	r3, [r7, #24]
 8014e6a:	689b      	ldr	r3, [r3, #8]
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d062      	beq.n	8014f36 <lTCPWindowTxAdd+0x10e>
            {
                lToWrite = prvTCPWindowTxAdd_FrontSegment( pxWindow, pxSegment, lBytesLeft );
 8014e70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014e72:	69b9      	ldr	r1, [r7, #24]
 8014e74:	68f8      	ldr	r0, [r7, #12]
 8014e76:	f7ff ff89 	bl	8014d8c <prvTCPWindowTxAdd_FrontSegment>
 8014e7a:	6178      	str	r0, [r7, #20]
                lBytesLeft -= lToWrite;
 8014e7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014e7e:	697b      	ldr	r3, [r7, #20]
 8014e80:	1ad3      	subs	r3, r2, r3
 8014e82:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Increased the return value. */
                lDone += lToWrite;
 8014e84:	6a3a      	ldr	r2, [r7, #32]
 8014e86:	697b      	ldr	r3, [r7, #20]
 8014e88:	4413      	add	r3, r2
 8014e8a:	623b      	str	r3, [r7, #32]

                /* Calculate the next position in the circular data buffer, knowing
                 * its maximum length 'lMax'. */
                lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 8014e8c:	697a      	ldr	r2, [r7, #20]
 8014e8e:	6839      	ldr	r1, [r7, #0]
 8014e90:	69f8      	ldr	r0, [r7, #28]
 8014e92:	f7ff ff61 	bl	8014d58 <lTCPIncrementTxPosition>
 8014e96:	61f8      	str	r0, [r7, #28]
            }

            while( lBytesLeft > 0 )
 8014e98:	e04d      	b.n	8014f36 <lTCPWindowTxAdd+0x10e>
            {
                /* The current transmission segment is full, create new segments as
                 * needed. */
                pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, ( int32_t ) pxWindow->usMSS );
 8014e9a:	68fb      	ldr	r3, [r7, #12]
 8014e9c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8014ea4:	461a      	mov	r2, r3
 8014ea6:	2300      	movs	r3, #0
 8014ea8:	68f8      	ldr	r0, [r7, #12]
 8014eaa:	f7ff fb61 	bl	8014570 <xTCPWindowNew>
 8014eae:	61b8      	str	r0, [r7, #24]

                if( pxSegment != NULL )
 8014eb0:	69bb      	ldr	r3, [r7, #24]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d037      	beq.n	8014f26 <lTCPWindowTxAdd+0xfe>
                {
                    /* Store as many as needed, but no more than the maximum
                     * (MSS). */
                    lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 8014eb6:	69bb      	ldr	r3, [r7, #24]
 8014eb8:	685b      	ldr	r3, [r3, #4]
 8014eba:	4619      	mov	r1, r3
 8014ebc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014ebe:	f7f4 fd79 	bl	80099b4 <FreeRTOS_min_int32>
 8014ec2:	6178      	str	r0, [r7, #20]

                    pxSegment->lDataLength = lToWrite;
 8014ec4:	69bb      	ldr	r3, [r7, #24]
 8014ec6:	697a      	ldr	r2, [r7, #20]
 8014ec8:	609a      	str	r2, [r3, #8]
                    pxSegment->lStreamPos = lBufferIndex;
 8014eca:	69bb      	ldr	r3, [r7, #24]
 8014ecc:	69fa      	ldr	r2, [r7, #28]
 8014ece:	60da      	str	r2, [r3, #12]
                    lBytesLeft -= lToWrite;
 8014ed0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014ed2:	697b      	ldr	r3, [r7, #20]
 8014ed4:	1ad3      	subs	r3, r2, r3
 8014ed6:	627b      	str	r3, [r7, #36]	@ 0x24
                    lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 8014ed8:	697a      	ldr	r2, [r7, #20]
 8014eda:	6839      	ldr	r1, [r7, #0]
 8014edc:	69f8      	ldr	r0, [r7, #28]
 8014ede:	f7ff ff3b 	bl	8014d58 <lTCPIncrementTxPosition>
 8014ee2:	61f8      	str	r0, [r7, #28]
                    pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014ee8:	697b      	ldr	r3, [r7, #20]
 8014eea:	441a      	add	r2, r3
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	635a      	str	r2, [r3, #52]	@ 0x34
                    lDone += lToWrite;
 8014ef0:	6a3a      	ldr	r2, [r7, #32]
 8014ef2:	697b      	ldr	r3, [r7, #20]
 8014ef4:	4413      	add	r3, r2
 8014ef6:	623b      	str	r3, [r7, #32]

                    /* Link this segment in the Tx-Queue. */
                    vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 8014efe:	69bb      	ldr	r3, [r7, #24]
 8014f00:	3318      	adds	r3, #24
 8014f02:	4619      	mov	r1, r3
 8014f04:	4610      	mov	r0, r2
 8014f06:	f7ff fa63 	bl	80143d0 <vListInsertFifo>

                    /* Let 'pxHeadSegment' point to this segment if there is still
                     * space. */
                    if( pxSegment->lDataLength < pxSegment->lMaxLength )
 8014f0a:	69bb      	ldr	r3, [r7, #24]
 8014f0c:	689a      	ldr	r2, [r3, #8]
 8014f0e:	69bb      	ldr	r3, [r7, #24]
 8014f10:	685b      	ldr	r3, [r3, #4]
 8014f12:	429a      	cmp	r2, r3
 8014f14:	da03      	bge.n	8014f1e <lTCPWindowTxAdd+0xf6>
                    {
                        pxWindow->pxHeadSegment = pxSegment;
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	69ba      	ldr	r2, [r7, #24]
 8014f1a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8014f1c:	e00b      	b.n	8014f36 <lTCPWindowTxAdd+0x10e>
                    }
                    else
                    {
                        pxWindow->pxHeadSegment = NULL;
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	2200      	movs	r2, #0
 8014f22:	67da      	str	r2, [r3, #124]	@ 0x7c
 8014f24:	e007      	b.n	8014f36 <lTCPWindowTxAdd+0x10e>
                }
                else
                {
                    /* A sever situation: running out of segments for transmission.
                     * No more data can be sent at the moment. */
                    if( lDone != 0 )
 8014f26:	6a3b      	ldr	r3, [r7, #32]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d008      	beq.n	8014f3e <lTCPWindowTxAdd+0x116>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %d bytes)\n", ( int ) lBytesLeft ) );
 8014f2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014f2e:	4807      	ldr	r0, [pc, #28]	@ (8014f4c <lTCPWindowTxAdd+0x124>)
 8014f30:	f00b fafc 	bl	802052c <lUDPLoggingPrintf>
                    }

                    break;
 8014f34:	e003      	b.n	8014f3e <lTCPWindowTxAdd+0x116>
            while( lBytesLeft > 0 )
 8014f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	dcae      	bgt.n	8014e9a <lTCPWindowTxAdd+0x72>
 8014f3c:	e000      	b.n	8014f40 <lTCPWindowTxAdd+0x118>
                    break;
 8014f3e:	bf00      	nop
                }
            }

            return lDone;
 8014f40:	6a3b      	ldr	r3, [r7, #32]
        }
 8014f42:	4618      	mov	r0, r3
 8014f44:	3728      	adds	r7, #40	@ 0x28
 8014f46:	46bd      	mov	sp, r7
 8014f48:	bd80      	pop	{r7, pc}
 8014f4a:	bf00      	nop
 8014f4c:	08025328 	.word	0x08025328

08014f50 <xTCPWindowTxDone>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if there are no more outstanding Tx segments, else pdFALSE.
 */
        BaseType_t xTCPWindowTxDone( const TCPWindow_t * pxWindow )
        {
 8014f50:	b480      	push	{r7}
 8014f52:	b083      	sub	sp, #12
 8014f54:	af00      	add	r7, sp, #0
 8014f56:	6078      	str	r0, [r7, #4]
            return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments ) );
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d101      	bne.n	8014f66 <xTCPWindowTxDone+0x16>
 8014f62:	2301      	movs	r3, #1
 8014f64:	e000      	b.n	8014f68 <xTCPWindowTxDone+0x18>
 8014f66:	2300      	movs	r3, #0
        }
 8014f68:	4618      	mov	r0, r3
 8014f6a:	370c      	adds	r7, #12
 8014f6c:	46bd      	mov	sp, r7
 8014f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f72:	4770      	bx	lr

08014f74 <prvTCPWindowTxHasSpace>:
 *
 * @return True if the peer has space in it window to receive more data.
 */
        static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t const * pxWindow,
                                                  uint32_t ulWindowSize )
        {
 8014f74:	b580      	push	{r7, lr}
 8014f76:	b086      	sub	sp, #24
 8014f78:	af00      	add	r7, sp, #0
 8014f7a:	6078      	str	r0, [r7, #4]
 8014f7c:	6039      	str	r1, [r7, #0]
            uint32_t ulNettSize;

            /* This function will look if there is new transmission data.  It will
             * return true if there is data to be sent. */

            pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	3354      	adds	r3, #84	@ 0x54
 8014f82:	4618      	mov	r0, r3
 8014f84:	f7ff fbb5 	bl	80146f2 <xTCPWindowPeekHead>
 8014f88:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d102      	bne.n	8014f96 <prvTCPWindowTxHasSpace+0x22>
            {
                xHasSpace = pdFALSE;
 8014f90:	2300      	movs	r3, #0
 8014f92:	613b      	str	r3, [r7, #16]
 8014f94:	e02f      	b.n	8014ff6 <prvTCPWindowTxHasSpace+0x82>
            }
            else
            {
                /* How much data is outstanding, i.e. how much data has been sent
                 * but not yet acknowledged ? */
                if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	6a1b      	ldr	r3, [r3, #32]
 8014f9e:	429a      	cmp	r2, r3
 8014fa0:	d306      	bcc.n	8014fb0 <prvTCPWindowTxHasSpace+0x3c>
                {
                    ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	6a1b      	ldr	r3, [r3, #32]
 8014faa:	1ad3      	subs	r3, r2, r3
 8014fac:	617b      	str	r3, [r7, #20]
 8014fae:	e001      	b.n	8014fb4 <prvTCPWindowTxHasSpace+0x40>
                }
                else
                {
                    ulTxOutstanding = 0U;
 8014fb0:	2300      	movs	r3, #0
 8014fb2:	617b      	str	r3, [r7, #20]
                }

                /* Subtract this from the peer's space. */
                ulNettSize = ulWindowSize - FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 8014fb4:	6979      	ldr	r1, [r7, #20]
 8014fb6:	6838      	ldr	r0, [r7, #0]
 8014fb8:	f7f4 fd0c 	bl	80099d4 <FreeRTOS_min_uint32>
 8014fbc:	4602      	mov	r2, r0
 8014fbe:	683b      	ldr	r3, [r7, #0]
 8014fc0:	1a9b      	subs	r3, r3, r2
 8014fc2:	60bb      	str	r3, [r7, #8]

                /* See if the next segment may be sent. */
                if( ulNettSize >= ( uint32_t ) pxSegment->lDataLength )
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	689b      	ldr	r3, [r3, #8]
 8014fc8:	461a      	mov	r2, r3
 8014fca:	68bb      	ldr	r3, [r7, #8]
 8014fcc:	4293      	cmp	r3, r2
 8014fce:	d302      	bcc.n	8014fd6 <prvTCPWindowTxHasSpace+0x62>
                {
                    xHasSpace = pdTRUE;
 8014fd0:	2301      	movs	r3, #1
 8014fd2:	613b      	str	r3, [r7, #16]
 8014fd4:	e001      	b.n	8014fda <prvTCPWindowTxHasSpace+0x66>
                }
                else
                {
                    xHasSpace = pdFALSE;
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	613b      	str	r3, [r7, #16]

                /* If 'xHasSpace', it looks like the peer has at least space for 1
                 * more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
                 * limitation of the transmission window (in case of many resends it
                 * may be decreased). */
                if( ( ulTxOutstanding != 0U ) &&
 8014fda:	697b      	ldr	r3, [r7, #20]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d00a      	beq.n	8014ff6 <prvTCPWindowTxHasSpace+0x82>
                    ( pxWindow->xSize.ulTxWindowLength <
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	689a      	ldr	r2, [r3, #8]
                      ( ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) ) )
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	689b      	ldr	r3, [r3, #8]
 8014fe8:	4619      	mov	r1, r3
 8014fea:	697b      	ldr	r3, [r7, #20]
 8014fec:	440b      	add	r3, r1
                if( ( ulTxOutstanding != 0U ) &&
 8014fee:	429a      	cmp	r2, r3
 8014ff0:	d201      	bcs.n	8014ff6 <prvTCPWindowTxHasSpace+0x82>
                {
                    xHasSpace = pdFALSE;
 8014ff2:	2300      	movs	r3, #0
 8014ff4:	613b      	str	r3, [r7, #16]
                }
            }

            return xHasSpace;
 8014ff6:	693b      	ldr	r3, [r7, #16]
        }
 8014ff8:	4618      	mov	r0, r3
 8014ffa:	3718      	adds	r7, #24
 8014ffc:	46bd      	mov	sp, r7
 8014ffe:	bd80      	pop	{r7, pc}

08015000 <xTCPWindowTxHasData>:
 * @return pdTRUE if there is Tx data that can be sent, else pdFALSE.
 */
        BaseType_t xTCPWindowTxHasData( TCPWindow_t const * pxWindow,
                                        uint32_t ulWindowSize,
                                        TickType_t * pulDelay )
        {
 8015000:	b580      	push	{r7, lr}
 8015002:	b08a      	sub	sp, #40	@ 0x28
 8015004:	af00      	add	r7, sp, #0
 8015006:	60f8      	str	r0, [r7, #12]
 8015008:	60b9      	str	r1, [r7, #8]
 801500a:	607a      	str	r2, [r7, #4]
            TCPSegment_t const * pxSegment;
            BaseType_t xReturn;
            TickType_t ulAge, ulMaxAge;

            *pulDelay = 0U;
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	2200      	movs	r2, #0
 8015010:	601a      	str	r2, [r3, #0]

            if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015016:	2b00      	cmp	r3, #0
 8015018:	d002      	beq.n	8015020 <xTCPWindowTxHasData+0x20>
            {
                /* No need to look at retransmissions or new transmission as long as
                 * there are priority segments.  *pulDelay equals zero, meaning it must
                 * be sent out immediately. */
                xReturn = pdTRUE;
 801501a:	2301      	movs	r3, #1
 801501c:	627b      	str	r3, [r7, #36]	@ 0x24
 801501e:	e050      	b.n	80150c2 <xTCPWindowTxHasData+0xc2>
            }
            else
            {
                pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	3368      	adds	r3, #104	@ 0x68
 8015024:	4618      	mov	r0, r3
 8015026:	f7ff fb64 	bl	80146f2 <xTCPWindowPeekHead>
 801502a:	6238      	str	r0, [r7, #32]

                if( pxSegment != NULL )
 801502c:	6a3b      	ldr	r3, [r7, #32]
 801502e:	2b00      	cmp	r3, #0
 8015030:	d01f      	beq.n	8015072 <xTCPWindowTxHasData+0x72>
                {
                    uint32_t ulSRTT = ( uint32_t ) pxWindow->lSRTT;
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015036:	61fb      	str	r3, [r7, #28]

                    /* There is an outstanding segment, see if it is time to resend
                     * it. */
                    ulAge = ulTimerGetAge( &pxSegment->xTransmitTimer );
 8015038:	6a3b      	ldr	r3, [r7, #32]
 801503a:	3310      	adds	r3, #16
 801503c:	4618      	mov	r0, r3
 801503e:	f7ff f9e4 	bl	801440a <ulTimerGetAge>
 8015042:	61b8      	str	r0, [r7, #24]

                    /* After a packet has been sent for the first time, it will wait
                     * '1 * ulSRTT' ms for an ACK. A second time it will wait '2 * ulSRTT' ms,
                     * each time doubling the time-out */
                    ulMaxAge = ( ( uint32_t ) 1U << pxSegment->u.bits.ucTransmitCount );
 8015044:	6a3b      	ldr	r3, [r7, #32]
 8015046:	7d1b      	ldrb	r3, [r3, #20]
 8015048:	461a      	mov	r2, r3
 801504a:	2301      	movs	r3, #1
 801504c:	4093      	lsls	r3, r2
 801504e:	617b      	str	r3, [r7, #20]
                    ulMaxAge *= ulSRTT;
 8015050:	697b      	ldr	r3, [r7, #20]
 8015052:	69fa      	ldr	r2, [r7, #28]
 8015054:	fb02 f303 	mul.w	r3, r2, r3
 8015058:	617b      	str	r3, [r7, #20]

                    if( ulMaxAge > ulAge )
 801505a:	697a      	ldr	r2, [r7, #20]
 801505c:	69bb      	ldr	r3, [r7, #24]
 801505e:	429a      	cmp	r2, r3
 8015060:	d904      	bls.n	801506c <xTCPWindowTxHasData+0x6c>
                    {
                        /* A segment must be sent after this amount of msecs */
                        *pulDelay = ulMaxAge - ulAge;
 8015062:	697a      	ldr	r2, [r7, #20]
 8015064:	69bb      	ldr	r3, [r7, #24]
 8015066:	1ad2      	subs	r2, r2, r3
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	601a      	str	r2, [r3, #0]
                    }

                    xReturn = pdTRUE;
 801506c:	2301      	movs	r3, #1
 801506e:	627b      	str	r3, [r7, #36]	@ 0x24
 8015070:	e027      	b.n	80150c2 <xTCPWindowTxHasData+0xc2>
                }
                else
                {
                    /* No priority segment, no outstanding data, see if there is new
                     * transmission data. */
                    pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	3354      	adds	r3, #84	@ 0x54
 8015076:	4618      	mov	r0, r3
 8015078:	f7ff fb3b 	bl	80146f2 <xTCPWindowPeekHead>
 801507c:	6238      	str	r0, [r7, #32]

                    /* See if it fits in the peer's reception window. */
                    if( pxSegment == NULL )
 801507e:	6a3b      	ldr	r3, [r7, #32]
 8015080:	2b00      	cmp	r3, #0
 8015082:	d102      	bne.n	801508a <xTCPWindowTxHasData+0x8a>
                    {
                        xReturn = pdFALSE;
 8015084:	2300      	movs	r3, #0
 8015086:	627b      	str	r3, [r7, #36]	@ 0x24
 8015088:	e01b      	b.n	80150c2 <xTCPWindowTxHasData+0xc2>
                    }
                    else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 801508a:	68b9      	ldr	r1, [r7, #8]
 801508c:	68f8      	ldr	r0, [r7, #12]
 801508e:	f7ff ff71 	bl	8014f74 <prvTCPWindowTxHasSpace>
 8015092:	4603      	mov	r3, r0
 8015094:	2b00      	cmp	r3, #0
 8015096:	d102      	bne.n	801509e <xTCPWindowTxHasData+0x9e>
                    {
                        /* Too many outstanding messages. */
                        xReturn = pdFALSE;
 8015098:	2300      	movs	r3, #0
 801509a:	627b      	str	r3, [r7, #36]	@ 0x24
 801509c:	e011      	b.n	80150c2 <xTCPWindowTxHasData+0xc2>
                    }
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	781b      	ldrb	r3, [r3, #0]
 80150a2:	f003 0302 	and.w	r3, r3, #2
 80150a6:	b2db      	uxtb	r3, r3
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d008      	beq.n	80150be <xTCPWindowTxHasData+0xbe>
                             ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 80150ac:	6a3b      	ldr	r3, [r7, #32]
 80150ae:	689a      	ldr	r2, [r3, #8]
 80150b0:	6a3b      	ldr	r3, [r7, #32]
 80150b2:	685b      	ldr	r3, [r3, #4]
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 80150b4:	429a      	cmp	r2, r3
 80150b6:	da02      	bge.n	80150be <xTCPWindowTxHasData+0xbe>
                    {
                        /* 'bSendFullSize' is a special optimisation.  If true, the
                         * driver will only sent completely filled packets (of MSS
                         * bytes). */
                        xReturn = pdFALSE;
 80150b8:	2300      	movs	r3, #0
 80150ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80150bc:	e001      	b.n	80150c2 <xTCPWindowTxHasData+0xc2>
                    }
                    else
                    {
                        xReturn = pdTRUE;
 80150be:	2301      	movs	r3, #1
 80150c0:	627b      	str	r3, [r7, #36]	@ 0x24
                    }
                }
            }

            return xReturn;
 80150c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 80150c4:	4618      	mov	r0, r3
 80150c6:	3728      	adds	r7, #40	@ 0x28
 80150c8:	46bd      	mov	sp, r7
 80150ca:	bd80      	pop	{r7, pc}

080150cc <pxTCPWindowTx_GetWaitQueue>:
 *        the normal TX queue of unsent data.  Message in the waiting queue will
 *        be sent when their timer has expired.
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        static TCPSegment_t * pxTCPWindowTx_GetWaitQueue( const TCPWindow_t * pxWindow )
        {
 80150cc:	b590      	push	{r4, r7, lr}
 80150ce:	b087      	sub	sp, #28
 80150d0:	af02      	add	r7, sp, #8
 80150d2:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	3368      	adds	r3, #104	@ 0x68
 80150d8:	4618      	mov	r0, r3
 80150da:	f7ff fb0a 	bl	80146f2 <xTCPWindowPeekHead>
 80150de:	60f8      	str	r0, [r7, #12]

            if( pxSegment != NULL )
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d043      	beq.n	801516e <pxTCPWindowTx_GetWaitQueue+0xa2>
            {
                /* Do check the timing. */
                uint32_t ulMaxTime;

                ulMaxTime = ( ( uint32_t ) 1U ) << pxSegment->u.bits.ucTransmitCount;
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	7d1b      	ldrb	r3, [r3, #20]
 80150ea:	461a      	mov	r2, r3
 80150ec:	2301      	movs	r3, #1
 80150ee:	4093      	lsls	r3, r2
 80150f0:	60bb      	str	r3, [r7, #8]
                ulMaxTime *= ( uint32_t ) pxWindow->lSRTT;
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80150f6:	461a      	mov	r2, r3
 80150f8:	68bb      	ldr	r3, [r7, #8]
 80150fa:	fb02 f303 	mul.w	r3, r2, r3
 80150fe:	60bb      	str	r3, [r7, #8]

                if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	3310      	adds	r3, #16
 8015104:	4618      	mov	r0, r3
 8015106:	f7ff f980 	bl	801440a <ulTimerGetAge>
 801510a:	4602      	mov	r2, r0
 801510c:	68bb      	ldr	r3, [r7, #8]
 801510e:	4293      	cmp	r3, r2
 8015110:	d22b      	bcs.n	801516a <pxTCPWindowTx_GetWaitQueue+0x9e>
                {
                    /* A normal (non-fast) retransmission.  Move it from the
                     * head of the waiting queue. */
                    pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	3368      	adds	r3, #104	@ 0x68
 8015116:	4618      	mov	r0, r3
 8015118:	f7ff fad2 	bl	80146c0 <xTCPWindowGetHead>
 801511c:	60f8      	str	r0, [r7, #12]
                    pxSegment->u.bits.ucDupAckCount = ( uint8_t ) pdFALSE_UNSIGNED;
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	2200      	movs	r2, #0
 8015122:	755a      	strb	r2, [r3, #21]

                    /* Some detailed logging. */
                    if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8015124:	4b14      	ldr	r3, [pc, #80]	@ (8015178 <pxTCPWindowTx_GetWaitQueue+0xac>)
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	2b00      	cmp	r3, #0
 801512a:	d020      	beq.n	801516e <pxTCPWindowTx_GetWaitQueue+0xa2>
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015132:	2b17      	cmp	r3, #23
 8015134:	d01b      	beq.n	801516e <pxTCPWindowTx_GetWaitQueue+0xa2>
                    {
                        FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: WaitQueue %d bytes for sequence number %u (0x%X)\n",
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 801513c:	4618      	mov	r0, r3
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015144:	461c      	mov	r4, r3
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	6899      	ldr	r1, [r3, #8]
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	681a      	ldr	r2, [r3, #0]
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	69db      	ldr	r3, [r3, #28]
 8015152:	1ad3      	subs	r3, r2, r3
 8015154:	68fa      	ldr	r2, [r7, #12]
 8015156:	6812      	ldr	r2, [r2, #0]
 8015158:	9201      	str	r2, [sp, #4]
 801515a:	9300      	str	r3, [sp, #0]
 801515c:	460b      	mov	r3, r1
 801515e:	4622      	mov	r2, r4
 8015160:	4601      	mov	r1, r0
 8015162:	4806      	ldr	r0, [pc, #24]	@ (801517c <pxTCPWindowTx_GetWaitQueue+0xb0>)
 8015164:	f00b f9e2 	bl	802052c <lUDPLoggingPrintf>
 8015168:	e001      	b.n	801516e <pxTCPWindowTx_GetWaitQueue+0xa2>
                                                 ( unsigned ) pxSegment->ulSequenceNumber ) );
                    }
                }
                else
                {
                    pxSegment = NULL;
 801516a:	2300      	movs	r3, #0
 801516c:	60fb      	str	r3, [r7, #12]
                }
            }

            return pxSegment;
 801516e:	68fb      	ldr	r3, [r7, #12]
        }
 8015170:	4618      	mov	r0, r3
 8015172:	3714      	adds	r7, #20
 8015174:	46bd      	mov	sp, r7
 8015176:	bd90      	pop	{r4, r7, pc}
 8015178:	200012f4 	.word	0x200012f4
 801517c:	08025364 	.word	0x08025364

08015180 <pxTCPWindowTx_GetTXQueue>:
 *                          reception window.
 * @return Either a segment that has to be sent, or NULL.
 */
        static TCPSegment_t * pxTCPWindowTx_GetTXQueue( TCPWindow_t * pxWindow,
                                                        uint32_t ulWindowSize )
        {
 8015180:	b590      	push	{r4, r7, lr}
 8015182:	b087      	sub	sp, #28
 8015184:	af02      	add	r7, sp, #8
 8015186:	6078      	str	r0, [r7, #4]
 8015188:	6039      	str	r1, [r7, #0]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	3354      	adds	r3, #84	@ 0x54
 801518e:	4618      	mov	r0, r3
 8015190:	f7ff faaf 	bl	80146f2 <xTCPWindowPeekHead>
 8015194:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	2b00      	cmp	r3, #0
 801519a:	d04f      	beq.n	801523c <pxTCPWindowTx_GetTXQueue+0xbc>
            {
                /* No segments queued. */
            }
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	781b      	ldrb	r3, [r3, #0]
 80151a0:	f003 0302 	and.w	r3, r3, #2
 80151a4:	b2db      	uxtb	r3, r3
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d008      	beq.n	80151bc <pxTCPWindowTx_GetTXQueue+0x3c>
                     ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	689a      	ldr	r2, [r3, #8]
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	685b      	ldr	r3, [r3, #4]
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 80151b2:	429a      	cmp	r2, r3
 80151b4:	da02      	bge.n	80151bc <pxTCPWindowTx_GetTXQueue+0x3c>
            {
                /* A segment has been queued but the driver waits until it
                 * has a full size of MSS. */
                pxSegment = NULL;
 80151b6:	2300      	movs	r3, #0
 80151b8:	60fb      	str	r3, [r7, #12]
 80151ba:	e03f      	b.n	801523c <pxTCPWindowTx_GetTXQueue+0xbc>
            }
            else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 80151bc:	6839      	ldr	r1, [r7, #0]
 80151be:	6878      	ldr	r0, [r7, #4]
 80151c0:	f7ff fed8 	bl	8014f74 <prvTCPWindowTxHasSpace>
 80151c4:	4603      	mov	r3, r0
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d102      	bne.n	80151d0 <pxTCPWindowTx_GetTXQueue+0x50>
            {
                /* Peer has no more space at this moment. */
                pxSegment = NULL;
 80151ca:	2300      	movs	r3, #0
 80151cc:	60fb      	str	r3, [r7, #12]
 80151ce:	e035      	b.n	801523c <pxTCPWindowTx_GetTXQueue+0xbc>
            }
            else
            {
                /* pxSegment was just obtained with a peek function,
                 * now remove it from of the Tx queue. */
                pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	3354      	adds	r3, #84	@ 0x54
 80151d4:	4618      	mov	r0, r3
 80151d6:	f7ff fa73 	bl	80146c0 <xTCPWindowGetHead>
 80151da:	60f8      	str	r0, [r7, #12]

                /* Don't let pxHeadSegment point to this segment any more,
                 * so no more data will be added. */
                if( pxWindow->pxHeadSegment == pxSegment )
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80151e0:	68fa      	ldr	r2, [r7, #12]
 80151e2:	429a      	cmp	r2, r3
 80151e4:	d102      	bne.n	80151ec <pxTCPWindowTx_GetTXQueue+0x6c>
                {
                    pxWindow->pxHeadSegment = NULL;
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	2200      	movs	r2, #0
 80151ea:	67da      	str	r2, [r3, #124]	@ 0x7c
                }

                /* pxWindow->tx.highest registers the highest sequence
                 * number in our transmission window. */
                pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	68fa      	ldr	r2, [r7, #12]
 80151f2:	6892      	ldr	r2, [r2, #8]
 80151f4:	441a      	add	r2, r3
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	629a      	str	r2, [r3, #40]	@ 0x28

                /* ...and more detailed logging */
                if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 80151fa:	4b13      	ldr	r3, [pc, #76]	@ (8015248 <pxTCPWindowTx_GetTXQueue+0xc8>)
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	2b01      	cmp	r3, #1
 8015200:	dd1c      	ble.n	801523c <pxTCPWindowTx_GetTXQueue+0xbc>
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015208:	2b17      	cmp	r3, #23
 801520a:	d017      	beq.n	801523c <pxTCPWindowTx_GetTXQueue+0xbc>
                {
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: XmitQueue %d bytes for sequence number %u (ws %u)\n",
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015212:	4618      	mov	r0, r3
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 801521a:	461c      	mov	r4, r3
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	6899      	ldr	r1, [r3, #8]
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	681a      	ldr	r2, [r3, #0]
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	69db      	ldr	r3, [r3, #28]
 8015228:	1ad3      	subs	r3, r2, r3
 801522a:	683a      	ldr	r2, [r7, #0]
 801522c:	9201      	str	r2, [sp, #4]
 801522e:	9300      	str	r3, [sp, #0]
 8015230:	460b      	mov	r3, r1
 8015232:	4622      	mov	r2, r4
 8015234:	4601      	mov	r1, r0
 8015236:	4805      	ldr	r0, [pc, #20]	@ (801524c <pxTCPWindowTx_GetTXQueue+0xcc>)
 8015238:	f00b f978 	bl	802052c <lUDPLoggingPrintf>
                                             ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulWindowSize ) );
                }
            }

            return pxSegment;
 801523c:	68fb      	ldr	r3, [r7, #12]
        }
 801523e:	4618      	mov	r0, r3
 8015240:	3714      	adds	r7, #20
 8015242:	46bd      	mov	sp, r7
 8015244:	bd90      	pop	{r4, r7, pc}
 8015246:	bf00      	nop
 8015248:	200012f4 	.word	0x200012f4
 801524c:	080253b0 	.word	0x080253b0

08015250 <ulTCPWindowTxGet>:
 * @return The amount of data in bytes that can be transmitted right now.
 */
        uint32_t ulTCPWindowTxGet( TCPWindow_t * pxWindow,
                                   uint32_t ulWindowSize,
                                   int32_t * plPosition )
        {
 8015250:	b590      	push	{r4, r7, lr}
 8015252:	b08b      	sub	sp, #44	@ 0x2c
 8015254:	af02      	add	r7, sp, #8
 8015256:	60f8      	str	r0, [r7, #12]
 8015258:	60b9      	str	r1, [r7, #8]
 801525a:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxSegment;
            uint32_t ulReturn = 0U;
 801525c:	2300      	movs	r3, #0
 801525e:	61bb      	str	r3, [r7, #24]

            /* Fetches data to be sent-out now.
             *
             * Priority messages: segments with a resend need no check current sliding
             * window size. */
            pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	3340      	adds	r3, #64	@ 0x40
 8015264:	4618      	mov	r0, r3
 8015266:	f7ff fa2b 	bl	80146c0 <xTCPWindowGetHead>
 801526a:	61f8      	str	r0, [r7, #28]
            pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	62da      	str	r2, [r3, #44]	@ 0x2c

            if( pxSegment != NULL )
 8015274:	69fb      	ldr	r3, [r7, #28]
 8015276:	2b00      	cmp	r3, #0
 8015278:	d01c      	beq.n	80152b4 <ulTCPWindowTxGet+0x64>
            {
                /* There is a priority segment. It doesn't need any checking for
                 * space or timeouts. */
                if( xTCPWindowLoggingLevel != 0 )
 801527a:	4b41      	ldr	r3, [pc, #260]	@ (8015380 <ulTCPWindowTxGet+0x130>)
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	2b00      	cmp	r3, #0
 8015280:	d024      	beq.n	80152cc <ulTCPWindowTxGet+0x7c>
                {
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: PrioQueue %d bytes for sequence number %u (ws %u)\n",
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015288:	4618      	mov	r0, r3
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015290:	461c      	mov	r4, r3
 8015292:	69fb      	ldr	r3, [r7, #28]
 8015294:	6899      	ldr	r1, [r3, #8]
 8015296:	69fb      	ldr	r3, [r7, #28]
 8015298:	681a      	ldr	r2, [r3, #0]
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	69db      	ldr	r3, [r3, #28]
 801529e:	1ad3      	subs	r3, r2, r3
 80152a0:	68ba      	ldr	r2, [r7, #8]
 80152a2:	9201      	str	r2, [sp, #4]
 80152a4:	9300      	str	r3, [sp, #0]
 80152a6:	460b      	mov	r3, r1
 80152a8:	4622      	mov	r2, r4
 80152aa:	4601      	mov	r1, r0
 80152ac:	4835      	ldr	r0, [pc, #212]	@ (8015384 <ulTCPWindowTxGet+0x134>)
 80152ae:	f00b f93d 	bl	802052c <lUDPLoggingPrintf>
 80152b2:	e00b      	b.n	80152cc <ulTCPWindowTxGet+0x7c>
            else
            {
                /* Waiting messages: outstanding messages with a running timer
                 * neither check peer's reception window size because these packets
                 * have been sent earlier. */
                pxSegment = pxTCPWindowTx_GetWaitQueue( pxWindow );
 80152b4:	68f8      	ldr	r0, [r7, #12]
 80152b6:	f7ff ff09 	bl	80150cc <pxTCPWindowTx_GetWaitQueue>
 80152ba:	61f8      	str	r0, [r7, #28]

                if( pxSegment == NULL )
 80152bc:	69fb      	ldr	r3, [r7, #28]
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d104      	bne.n	80152cc <ulTCPWindowTxGet+0x7c>
                {
                    /* New messages: sent-out for the first time.  Check current
                     * sliding window size of peer. */
                    pxSegment = pxTCPWindowTx_GetTXQueue( pxWindow, ulWindowSize );
 80152c2:	68b9      	ldr	r1, [r7, #8]
 80152c4:	68f8      	ldr	r0, [r7, #12]
 80152c6:	f7ff ff5b 	bl	8015180 <pxTCPWindowTx_GetTXQueue>
 80152ca:	61f8      	str	r0, [r7, #28]
                }
            }

            /* See if it has already been determined to return 0. */
            if( pxSegment != NULL )
 80152cc:	69fb      	ldr	r3, [r7, #28]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d051      	beq.n	8015376 <ulTCPWindowTxGet+0x126>
            {
                configASSERT( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) == NULL );
 80152d2:	69fb      	ldr	r3, [r7, #28]
 80152d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d004      	beq.n	80152e4 <ulTCPWindowTxGet+0x94>
 80152da:	f240 7136 	movw	r1, #1846	@ 0x736
 80152de:	482a      	ldr	r0, [pc, #168]	@ (8015388 <ulTCPWindowTxGet+0x138>)
 80152e0:	f7eb ff1a 	bl	8001118 <vAssertCalled>

                /* Now that the segment will be transmitted, add it to the tail of
                 * the waiting queue. */
                vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80152ea:	69fb      	ldr	r3, [r7, #28]
 80152ec:	3318      	adds	r3, #24
 80152ee:	4619      	mov	r1, r3
 80152f0:	4610      	mov	r0, r2
 80152f2:	f7ff f86d 	bl	80143d0 <vListInsertFifo>

                /* And mark it as outstanding. */
                pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 80152f6:	69fa      	ldr	r2, [r7, #28]
 80152f8:	7d93      	ldrb	r3, [r2, #22]
 80152fa:	f043 0301 	orr.w	r3, r3, #1
 80152fe:	7593      	strb	r3, [r2, #22]

                /* Administer the transmit count, needed for fast
                 * retransmissions. */
                ( pxSegment->u.bits.ucTransmitCount )++;
 8015300:	69fb      	ldr	r3, [r7, #28]
 8015302:	7d1b      	ldrb	r3, [r3, #20]
 8015304:	3301      	adds	r3, #1
 8015306:	b2da      	uxtb	r2, r3
 8015308:	69fb      	ldr	r3, [r7, #28]
 801530a:	751a      	strb	r2, [r3, #20]

                /* If there have been several retransmissions (4), decrease the
                 * size of the transmission window to at most 2 times MSS. */
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 801530c:	69fb      	ldr	r3, [r7, #28]
 801530e:	7d1b      	ldrb	r3, [r3, #20]
 8015310:	2b04      	cmp	r3, #4
 8015312:	d120      	bne.n	8015356 <ulTCPWindowTxGet+0x106>
                    ( pxWindow->xSize.ulTxWindowLength > ( 2U * ( ( uint32_t ) pxWindow->usMSS ) ) ) )
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	689a      	ldr	r2, [r3, #8]
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 801531e:	005b      	lsls	r3, r3, #1
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 8015320:	429a      	cmp	r2, r3
 8015322:	d918      	bls.n	8015356 <ulTCPWindowTxGet+0x106>
                {
                    uint16_t usMSS2 = ( uint16_t ) ( pxWindow->usMSS * 2U );
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 801532a:	005b      	lsls	r3, r3, #1
 801532c:	82fb      	strh	r3, [r7, #22]
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %u]: Change Tx window: %u -> %u\n",
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015334:	4619      	mov	r1, r3
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 801533c:	4618      	mov	r0, r3
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	689a      	ldr	r2, [r3, #8]
 8015342:	8afb      	ldrh	r3, [r7, #22]
 8015344:	9300      	str	r3, [sp, #0]
 8015346:	4613      	mov	r3, r2
 8015348:	4602      	mov	r2, r0
 801534a:	4810      	ldr	r0, [pc, #64]	@ (801538c <ulTCPWindowTxGet+0x13c>)
 801534c:	f00b f8ee 	bl	802052c <lUDPLoggingPrintf>
                                             pxWindow->usPeerPortNumber,
                                             pxWindow->usOurPortNumber,
                                             ( unsigned ) pxWindow->xSize.ulTxWindowLength,
                                             usMSS2 ) );
                    pxWindow->xSize.ulTxWindowLength = usMSS2;
 8015350:	8afa      	ldrh	r2, [r7, #22]
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	609a      	str	r2, [r3, #8]
                }

                /* Clear the transmit timer. */
                vTCPTimerSet( &( pxSegment->xTransmitTimer ) );
 8015356:	69fb      	ldr	r3, [r7, #28]
 8015358:	3310      	adds	r3, #16
 801535a:	4618      	mov	r0, r3
 801535c:	f7ff f848 	bl	80143f0 <vTCPTimerSet>

                pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 8015360:	69fb      	ldr	r3, [r7, #28]
 8015362:	681a      	ldr	r2, [r3, #0]
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Inform the caller where to find the data within the queue. */
                *plPosition = pxSegment->lStreamPos;
 8015368:	69fb      	ldr	r3, [r7, #28]
 801536a:	68da      	ldr	r2, [r3, #12]
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	601a      	str	r2, [r3, #0]

                /* And return the length of the data segment */
                ulReturn = ( uint32_t ) pxSegment->lDataLength;
 8015370:	69fb      	ldr	r3, [r7, #28]
 8015372:	689b      	ldr	r3, [r3, #8]
 8015374:	61bb      	str	r3, [r7, #24]
            }

            return ulReturn;
 8015376:	69bb      	ldr	r3, [r7, #24]
        }
 8015378:	4618      	mov	r0, r3
 801537a:	3724      	adds	r7, #36	@ 0x24
 801537c:	46bd      	mov	sp, r7
 801537e:	bd90      	pop	{r4, r7, pc}
 8015380:	200012f4 	.word	0x200012f4
 8015384:	080253fc 	.word	0x080253fc
 8015388:	08025098 	.word	0x08025098
 801538c:	08025448 	.word	0x08025448

08015390 <prvTCPWindowTxCheckAck_CalcSRTT>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 * @param[in] pxSegment The segment that was just acknowledged.
 */
        static void prvTCPWindowTxCheckAck_CalcSRTT( TCPWindow_t * pxWindow,
                                                     const TCPSegment_t * pxSegment )
        {
 8015390:	b580      	push	{r7, lr}
 8015392:	b084      	sub	sp, #16
 8015394:	af00      	add	r7, sp, #0
 8015396:	6078      	str	r0, [r7, #4]
 8015398:	6039      	str	r1, [r7, #0]
            int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );
 801539a:	683b      	ldr	r3, [r7, #0]
 801539c:	3310      	adds	r3, #16
 801539e:	4618      	mov	r0, r3
 80153a0:	f7ff f833 	bl	801440a <ulTimerGetAge>
 80153a4:	4603      	mov	r3, r0
 80153a6:	60fb      	str	r3, [r7, #12]

            if( pxWindow->lSRTT >= mS )
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80153ac:	68fa      	ldr	r2, [r7, #12]
 80153ae:	429a      	cmp	r2, r3
 80153b0:	dc0e      	bgt.n	80153d0 <prvTCPWindowTxCheckAck_CalcSRTT+0x40>
            {
                /* RTT becomes smaller: adapt slowly. */
                pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80153b6:	4613      	mov	r3, r2
 80153b8:	00db      	lsls	r3, r3, #3
 80153ba:	1a9a      	subs	r2, r3, r2
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	4413      	add	r3, r2
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	da00      	bge.n	80153c6 <prvTCPWindowTxCheckAck_CalcSRTT+0x36>
 80153c4:	3307      	adds	r3, #7
 80153c6:	10db      	asrs	r3, r3, #3
 80153c8:	461a      	mov	r2, r3
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80153ce:	e00d      	b.n	80153ec <prvTCPWindowTxCheckAck_CalcSRTT+0x5c>
            }
            else
            {
                /* RTT becomes larger: adapt quicker */
                pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80153d4:	4613      	mov	r3, r2
 80153d6:	005b      	lsls	r3, r3, #1
 80153d8:	441a      	add	r2, r3
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	4413      	add	r3, r2
 80153de:	2b00      	cmp	r3, #0
 80153e0:	da00      	bge.n	80153e4 <prvTCPWindowTxCheckAck_CalcSRTT+0x54>
 80153e2:	3303      	adds	r3, #3
 80153e4:	109b      	asrs	r3, r3, #2
 80153e6:	461a      	mov	r2, r3
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* Cap to the minimum of 50ms. */
            if( pxWindow->lSRTT < winSRTT_CAP_mS )
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80153f0:	2b31      	cmp	r3, #49	@ 0x31
 80153f2:	dc02      	bgt.n	80153fa <prvTCPWindowTxCheckAck_CalcSRTT+0x6a>
            {
                pxWindow->lSRTT = winSRTT_CAP_mS;
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	2232      	movs	r2, #50	@ 0x32
 80153f8:	639a      	str	r2, [r3, #56]	@ 0x38
            }
        }
 80153fa:	bf00      	nop
 80153fc:	3710      	adds	r7, #16
 80153fe:	46bd      	mov	sp, r7
 8015400:	bd80      	pop	{r7, pc}
	...

08015404 <prvTCPWindowTxCheckAck>:
 * @return number of bytes that the tail of txStream may be advanced.
 */
        static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t * pxWindow,
                                                uint32_t ulFirst,
                                                uint32_t ulLast )
        {
 8015404:	b5b0      	push	{r4, r5, r7, lr}
 8015406:	b090      	sub	sp, #64	@ 0x40
 8015408:	af04      	add	r7, sp, #16
 801540a:	60f8      	str	r0, [r7, #12]
 801540c:	60b9      	str	r1, [r7, #8]
 801540e:	607a      	str	r2, [r7, #4]
            uint32_t ulBytesConfirmed = 0U;
 8015410:	2300      	movs	r3, #0
 8015412:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint32_t ulSequenceNumber = ulFirst;
 8015414:	68bb      	ldr	r3, [r7, #8]
 8015416:	62bb      	str	r3, [r7, #40]	@ 0x28
            const ListItem_t * pxIterator;

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xTxSegments.xListEnd ) );
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	3398      	adds	r3, #152	@ 0x98
 801541c:	61fb      	str	r3, [r7, #28]
             * RTO is Retransmit timeout
             *
             * A Smoothed RTT will increase quickly, but it is conservative when
             * becoming smaller. */

            pxIterator = listGET_NEXT( pxEnd );
 801541e:	69fb      	ldr	r3, [r7, #28]
 8015420:	685b      	ldr	r3, [r3, #4]
 8015422:	627b      	str	r3, [r7, #36]	@ 0x24

            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8015424:	e0a6      	b.n	8015574 <prvTCPWindowTxCheckAck+0x170>
            {
                xDoUnlink = pdFALSE;
 8015426:	2300      	movs	r3, #0
 8015428:	623b      	str	r3, [r7, #32]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 801542a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801542c:	68db      	ldr	r3, [r3, #12]
 801542e:	61bb      	str	r3, [r7, #24]

                /* Move to the next item because the current item might get
                 * removed. */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8015430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015432:	685b      	ldr	r3, [r3, #4]
 8015434:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Continue if this segment does not fall within the ACK'd range. */
                if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 8015436:	69bb      	ldr	r3, [r7, #24]
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	4619      	mov	r1, r3
 801543c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801543e:	f7fe ff9c 	bl	801437a <xSequenceGreaterThan>
 8015442:	4603      	mov	r3, r0
 8015444:	2b00      	cmp	r3, #0
 8015446:	f040 8094 	bne.w	8015572 <prvTCPWindowTxCheckAck+0x16e>
                {
                    continue;
                }

                /* Is it ready? */
                if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 801544a:	69bb      	ldr	r3, [r7, #24]
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015450:	429a      	cmp	r2, r3
 8015452:	f040 809c 	bne.w	801558e <prvTCPWindowTxCheckAck+0x18a>
                {
                    /* coverity[break_stmt] : Break statement terminating the loop */
                    break;
                }

                ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 8015456:	69bb      	ldr	r3, [r7, #24]
 8015458:	689b      	ldr	r3, [r3, #8]
 801545a:	617b      	str	r3, [r7, #20]

                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 801545c:	69bb      	ldr	r3, [r7, #24]
 801545e:	7d9b      	ldrb	r3, [r3, #22]
 8015460:	f003 0302 	and.w	r3, r3, #2
 8015464:	b2db      	uxtb	r3, r3
 8015466:	2b00      	cmp	r3, #0
 8015468:	d144      	bne.n	80154f4 <prvTCPWindowTxCheckAck+0xf0>
                {
                    if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t ) ulDataLength, ulLast ) != pdFALSE )
 801546a:	69bb      	ldr	r3, [r7, #24]
 801546c:	681a      	ldr	r2, [r3, #0]
 801546e:	697b      	ldr	r3, [r7, #20]
 8015470:	4413      	add	r3, r2
 8015472:	6879      	ldr	r1, [r7, #4]
 8015474:	4618      	mov	r0, r3
 8015476:	f7fe ff80 	bl	801437a <xSequenceGreaterThan>
 801547a:	4603      	mov	r3, r0
 801547c:	2b00      	cmp	r3, #0
 801547e:	d023      	beq.n	80154c8 <prvTCPWindowTxCheckAck+0xc4>
                         *
                         * AAAAAAA BBBBBBB << acked
                         * aaaaaaa aaaa    << sent */
                        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                        {
                            uint32_t ulFirstSeq = pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber;
 8015480:	69bb      	ldr	r3, [r7, #24]
 8015482:	681a      	ldr	r2, [r3, #0]
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	69db      	ldr	r3, [r3, #28]
 8015488:	1ad3      	subs	r3, r2, r3
 801548a:	613b      	str	r3, [r7, #16]
                            FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck[%u.%u]: %u - %u Partial sequence number %u - %u\n",
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015492:	461c      	mov	r4, r3
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 801549a:	461d      	mov	r5, r3
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	69db      	ldr	r3, [r3, #28]
 80154a0:	693a      	ldr	r2, [r7, #16]
 80154a2:	1ad0      	subs	r0, r2, r3
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	69db      	ldr	r3, [r3, #28]
 80154a8:	687a      	ldr	r2, [r7, #4]
 80154aa:	1ad3      	subs	r3, r2, r3
 80154ac:	6939      	ldr	r1, [r7, #16]
 80154ae:	697a      	ldr	r2, [r7, #20]
 80154b0:	440a      	add	r2, r1
 80154b2:	9202      	str	r2, [sp, #8]
 80154b4:	693a      	ldr	r2, [r7, #16]
 80154b6:	9201      	str	r2, [sp, #4]
 80154b8:	9300      	str	r3, [sp, #0]
 80154ba:	4603      	mov	r3, r0
 80154bc:	462a      	mov	r2, r5
 80154be:	4621      	mov	r1, r4
 80154c0:	4836      	ldr	r0, [pc, #216]	@ (801559c <prvTCPWindowTxCheckAck+0x198>)
 80154c2:	f00b f833 	bl	802052c <lUDPLoggingPrintf>
                                                     ( unsigned ) ulFirstSeq,
                                                     ( unsigned ) ( ulFirstSeq + ulDataLength ) ) );
                        }
                        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                        break;
 80154c6:	e063      	b.n	8015590 <prvTCPWindowTxCheckAck+0x18c>
                    }

                    /* This segment is fully ACK'd, set the flag. */
                    pxSegment->u.bits.bAcked = pdTRUE;
 80154c8:	69ba      	ldr	r2, [r7, #24]
 80154ca:	7d93      	ldrb	r3, [r2, #22]
 80154cc:	f043 0302 	orr.w	r3, r3, #2
 80154d0:	7593      	strb	r3, [r2, #22]

                    /* Calculate the RTT only if the segment was sent-out for the
                     * first time and if this is the last ACK'd segment in a range. */
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 80154d2:	69bb      	ldr	r3, [r7, #24]
 80154d4:	7d1b      	ldrb	r3, [r3, #20]
 80154d6:	2b01      	cmp	r3, #1
 80154d8:	d10a      	bne.n	80154f0 <prvTCPWindowTxCheckAck+0xec>
                        ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 80154da:	69bb      	ldr	r3, [r7, #24]
 80154dc:	681a      	ldr	r2, [r3, #0]
 80154de:	697b      	ldr	r3, [r7, #20]
 80154e0:	4413      	add	r3, r2
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 80154e2:	687a      	ldr	r2, [r7, #4]
 80154e4:	429a      	cmp	r2, r3
 80154e6:	d103      	bne.n	80154f0 <prvTCPWindowTxCheckAck+0xec>
                    {
                        prvTCPWindowTxCheckAck_CalcSRTT( pxWindow, pxSegment );
 80154e8:	69b9      	ldr	r1, [r7, #24]
 80154ea:	68f8      	ldr	r0, [r7, #12]
 80154ec:	f7ff ff50 	bl	8015390 <prvTCPWindowTxCheckAck_CalcSRTT>
                    }

                    /* Unlink it from the 3 queues, but do not destroy it (yet). */
                    xDoUnlink = pdTRUE;
 80154f0:	2301      	movs	r3, #1
 80154f2:	623b      	str	r3, [r7, #32]
                }

                /* pxSegment->u.bits.bAcked is now true.  Is it located at the left
                 * side of the transmission queue?  If so, it may be freed. */
                if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 80154f4:	68fb      	ldr	r3, [r7, #12]
 80154f6:	6a1b      	ldr	r3, [r3, #32]
 80154f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80154fa:	429a      	cmp	r2, r3
 80154fc:	d128      	bne.n	8015550 <prvTCPWindowTxCheckAck+0x14c>
                {
                    if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 80154fe:	4b28      	ldr	r3, [pc, #160]	@ (80155a0 <prvTCPWindowTxCheckAck+0x19c>)
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	2b01      	cmp	r3, #1
 8015504:	dd15      	ble.n	8015532 <prvTCPWindowTxCheckAck+0x12e>
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 801550c:	2b17      	cmp	r3, #23
 801550e:	d010      	beq.n	8015532 <prvTCPWindowTxCheckAck+0x12e>
                    {
                        FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck: %u - %u Ready sequence number %u\n",
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	69db      	ldr	r3, [r3, #28]
 8015514:	68ba      	ldr	r2, [r7, #8]
 8015516:	1ad1      	subs	r1, r2, r3
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	69db      	ldr	r3, [r3, #28]
 801551c:	687a      	ldr	r2, [r7, #4]
 801551e:	1ad0      	subs	r0, r2, r3
 8015520:	69bb      	ldr	r3, [r7, #24]
 8015522:	681a      	ldr	r2, [r3, #0]
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	69db      	ldr	r3, [r3, #28]
 8015528:	1ad3      	subs	r3, r2, r3
 801552a:	4602      	mov	r2, r0
 801552c:	481d      	ldr	r0, [pc, #116]	@ (80155a4 <prvTCPWindowTxCheckAck+0x1a0>)
 801552e:	f00a fffd 	bl	802052c <lUDPLoggingPrintf>
                                                 ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                                 ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
                    }

                    /* Increase the left-hand value of the transmission window. */
                    pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 8015532:	68fb      	ldr	r3, [r7, #12]
 8015534:	6a1a      	ldr	r2, [r3, #32]
 8015536:	697b      	ldr	r3, [r7, #20]
 8015538:	441a      	add	r2, r3
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	621a      	str	r2, [r3, #32]

                    /* This function will return the number of bytes that the tail
                     * of txStream may be advanced. */
                    ulBytesConfirmed += ulDataLength;
 801553e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015540:	697b      	ldr	r3, [r7, #20]
 8015542:	4413      	add	r3, r2
 8015544:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* All segments below tx.ulCurrentSequenceNumber may be freed. */
                    vTCPWindowFree( pxSegment );
 8015546:	69b8      	ldr	r0, [r7, #24]
 8015548:	f7ff f8ec 	bl	8014724 <vTCPWindowFree>

                    /* No need to unlink it any more. */
                    xDoUnlink = pdFALSE;
 801554c:	2300      	movs	r3, #0
 801554e:	623b      	str	r3, [r7, #32]
                }

                if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 8015550:	6a3b      	ldr	r3, [r7, #32]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d008      	beq.n	8015568 <prvTCPWindowTxCheckAck+0x164>
 8015556:	69bb      	ldr	r3, [r7, #24]
 8015558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801555a:	2b00      	cmp	r3, #0
 801555c:	d004      	beq.n	8015568 <prvTCPWindowTxCheckAck+0x164>
                {
                    /* Remove item from its queues. */
                    ( void ) uxListRemove( &pxSegment->xQueueItem );
 801555e:	69bb      	ldr	r3, [r7, #24]
 8015560:	3318      	adds	r3, #24
 8015562:	4618      	mov	r0, r3
 8015564:	f7ec fff6 	bl	8002554 <uxListRemove>
                }

                ulSequenceNumber += ulDataLength;
 8015568:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801556a:	697b      	ldr	r3, [r7, #20]
 801556c:	4413      	add	r3, r2
 801556e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015570:	e000      	b.n	8015574 <prvTCPWindowTxCheckAck+0x170>
                    continue;
 8015572:	bf00      	nop
            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8015574:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015576:	69fb      	ldr	r3, [r7, #28]
 8015578:	429a      	cmp	r2, r3
 801557a:	d009      	beq.n	8015590 <prvTCPWindowTxCheckAck+0x18c>
 801557c:	6879      	ldr	r1, [r7, #4]
 801557e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015580:	f7fe fee5 	bl	801434e <xSequenceLessThan>
 8015584:	4603      	mov	r3, r0
 8015586:	2b00      	cmp	r3, #0
 8015588:	f47f af4d 	bne.w	8015426 <prvTCPWindowTxCheckAck+0x22>
 801558c:	e000      	b.n	8015590 <prvTCPWindowTxCheckAck+0x18c>
                    break;
 801558e:	bf00      	nop
            }

            return ulBytesConfirmed;
 8015590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 8015592:	4618      	mov	r0, r3
 8015594:	3730      	adds	r7, #48	@ 0x30
 8015596:	46bd      	mov	sp, r7
 8015598:	bdb0      	pop	{r4, r5, r7, pc}
 801559a:	bf00      	nop
 801559c:	08025480 	.word	0x08025480
 80155a0:	200012f4 	.word	0x200012f4
 80155a4:	080254c8 	.word	0x080254c8

080155a8 <prvTCPWindowFastRetransmit>:
 *
 * @return The number of segments that need a fast retransmission.
 */
        static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t * pxWindow,
                                                    uint32_t ulFirst )
        {
 80155a8:	b580      	push	{r7, lr}
 80155aa:	b086      	sub	sp, #24
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	6078      	str	r0, [r7, #4]
 80155b0:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment;
            uint32_t ulCount = 0U;
 80155b2:	2300      	movs	r3, #0
 80155b4:	613b      	str	r3, [r7, #16]
             * xWaitQueue to find a possible condition for a FAST retransmission. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xWaitQueue.xListEnd ) );
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	3370      	adds	r3, #112	@ 0x70
 80155ba:	60fb      	str	r3, [r7, #12]

            pxIterator = listGET_NEXT( pxEnd );
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	685b      	ldr	r3, [r3, #4]
 80155c0:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 80155c2:	e049      	b.n	8015658 <prvTCPWindowFastRetransmit+0xb0>
            {
                /* Get the owner, which is a TCP segment. */
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80155c4:	697b      	ldr	r3, [r7, #20]
 80155c6:	68db      	ldr	r3, [r3, #12]
 80155c8:	60bb      	str	r3, [r7, #8]

                /* Hop to the next item before the current gets unlinked. */
                pxIterator = listGET_NEXT( pxIterator );
 80155ca:	697b      	ldr	r3, [r7, #20]
 80155cc:	685b      	ldr	r3, [r3, #4]
 80155ce:	617b      	str	r3, [r7, #20]

                /* Fast retransmission:
                 * When 3 packets with a higher sequence number have been acknowledged
                 * by the peer, it is very unlikely a current packet will ever arrive.
                 * It will be retransmitted far before the RTO. */
                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 80155d0:	68bb      	ldr	r3, [r7, #8]
 80155d2:	7d9b      	ldrb	r3, [r3, #22]
 80155d4:	f003 0302 	and.w	r3, r3, #2
 80155d8:	b2db      	uxtb	r3, r3
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d13c      	bne.n	8015658 <prvTCPWindowFastRetransmit+0xb0>
                {
                    if( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE )
 80155de:	68bb      	ldr	r3, [r7, #8]
 80155e0:	681b      	ldr	r3, [r3, #0]
 80155e2:	6839      	ldr	r1, [r7, #0]
 80155e4:	4618      	mov	r0, r3
 80155e6:	f7fe feb2 	bl	801434e <xSequenceLessThan>
 80155ea:	4603      	mov	r3, r0
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d033      	beq.n	8015658 <prvTCPWindowFastRetransmit+0xb0>
                    {
                        pxSegment->u.bits.ucDupAckCount++;
 80155f0:	68bb      	ldr	r3, [r7, #8]
 80155f2:	7d5b      	ldrb	r3, [r3, #21]
 80155f4:	3301      	adds	r3, #1
 80155f6:	b2da      	uxtb	r2, r3
 80155f8:	68bb      	ldr	r3, [r7, #8]
 80155fa:	755a      	strb	r2, [r3, #21]

                        if( pxSegment->u.bits.ucDupAckCount == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT )
 80155fc:	68bb      	ldr	r3, [r7, #8]
 80155fe:	7d5b      	ldrb	r3, [r3, #21]
 8015600:	2b03      	cmp	r3, #3
 8015602:	d129      	bne.n	8015658 <prvTCPWindowFastRetransmit+0xb0>
                        {
                            pxSegment->u.bits.ucTransmitCount = ( uint8_t ) pdFALSE;
 8015604:	68bb      	ldr	r3, [r7, #8]
 8015606:	2200      	movs	r2, #0
 8015608:	751a      	strb	r2, [r3, #20]

                            /* Not clearing 'ucDupAckCount' yet as more SACK's might come in
                             * which might lead to a second fast rexmit. */
                            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 801560a:	4b18      	ldr	r3, [pc, #96]	@ (801566c <prvTCPWindowFastRetransmit+0xc4>)
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	2b00      	cmp	r3, #0
 8015610:	db11      	blt.n	8015636 <prvTCPWindowFastRetransmit+0x8e>
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015618:	2b17      	cmp	r3, #23
 801561a:	d00c      	beq.n	8015636 <prvTCPWindowFastRetransmit+0x8e>
                            {
                                FreeRTOS_debug_printf( ( "prvTCPWindowFastRetransmit: Requeue sequence number %u < %u\n",
 801561c:	68bb      	ldr	r3, [r7, #8]
 801561e:	681a      	ldr	r2, [r3, #0]
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	69db      	ldr	r3, [r3, #28]
 8015624:	1ad1      	subs	r1, r2, r3
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	69db      	ldr	r3, [r3, #28]
 801562a:	683a      	ldr	r2, [r7, #0]
 801562c:	1ad3      	subs	r3, r2, r3
 801562e:	461a      	mov	r2, r3
 8015630:	480f      	ldr	r0, [pc, #60]	@ (8015670 <prvTCPWindowFastRetransmit+0xc8>)
 8015632:	f00a ff7b 	bl	802052c <lUDPLoggingPrintf>
                                                         ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ) ) );
                            }

                            /* Remove it from xWaitQueue. */
                            ( void ) uxListRemove( &pxSegment->xQueueItem );
 8015636:	68bb      	ldr	r3, [r7, #8]
 8015638:	3318      	adds	r3, #24
 801563a:	4618      	mov	r0, r3
 801563c:	f7ec ff8a 	bl	8002554 <uxListRemove>

                            /* Add this segment to the priority queue so it gets
                             * retransmitted immediately. */
                            vListInsertFifo( &( pxWindow->xPriorityQueue ), &( pxSegment->xQueueItem ) );
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8015646:	68bb      	ldr	r3, [r7, #8]
 8015648:	3318      	adds	r3, #24
 801564a:	4619      	mov	r1, r3
 801564c:	4610      	mov	r0, r2
 801564e:	f7fe febf 	bl	80143d0 <vListInsertFifo>
                            ulCount++;
 8015652:	693b      	ldr	r3, [r7, #16]
 8015654:	3301      	adds	r3, #1
 8015656:	613b      	str	r3, [r7, #16]
            while( pxIterator != pxEnd )
 8015658:	697a      	ldr	r2, [r7, #20]
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	429a      	cmp	r2, r3
 801565e:	d1b1      	bne.n	80155c4 <prvTCPWindowFastRetransmit+0x1c>
                        }
                    }
                }
            }

            return ulCount;
 8015660:	693b      	ldr	r3, [r7, #16]
        }
 8015662:	4618      	mov	r0, r3
 8015664:	3718      	adds	r7, #24
 8015666:	46bd      	mov	sp, r7
 8015668:	bd80      	pop	{r7, pc}
 801566a:	bf00      	nop
 801566c:	200012f4 	.word	0x200012f4
 8015670:	08025504 	.word	0x08025504

08015674 <ulTCPWindowTxAck>:
 *
 * @return The location where the packet should be added.
 */
        uint32_t ulTCPWindowTxAck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber )
        {
 8015674:	b580      	push	{r7, lr}
 8015676:	b084      	sub	sp, #16
 8015678:	af00      	add	r7, sp, #0
 801567a:	6078      	str	r0, [r7, #4]
 801567c:	6039      	str	r1, [r7, #0]
            uint32_t ulFirstSequence;
            uint32_t ulReturn;

            /* Receive a normal ACK. */

            ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	6a1b      	ldr	r3, [r3, #32]
 8015682:	60bb      	str	r3, [r7, #8]

            if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 8015684:	68b9      	ldr	r1, [r7, #8]
 8015686:	6838      	ldr	r0, [r7, #0]
 8015688:	f7fe fe4c 	bl	8014324 <xSequenceLessThanOrEqual>
 801568c:	4603      	mov	r3, r0
 801568e:	2b00      	cmp	r3, #0
 8015690:	d002      	beq.n	8015698 <ulTCPWindowTxAck+0x24>
            {
                ulReturn = 0U;
 8015692:	2300      	movs	r3, #0
 8015694:	60fb      	str	r3, [r7, #12]
 8015696:	e005      	b.n	80156a4 <ulTCPWindowTxAck+0x30>
            }
            else
            {
                ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 8015698:	683a      	ldr	r2, [r7, #0]
 801569a:	68b9      	ldr	r1, [r7, #8]
 801569c:	6878      	ldr	r0, [r7, #4]
 801569e:	f7ff feb1 	bl	8015404 <prvTCPWindowTxCheckAck>
 80156a2:	60f8      	str	r0, [r7, #12]
            }

            return ulReturn;
 80156a4:	68fb      	ldr	r3, [r7, #12]
        }
 80156a6:	4618      	mov	r0, r3
 80156a8:	3710      	adds	r7, #16
 80156aa:	46bd      	mov	sp, r7
 80156ac:	bd80      	pop	{r7, pc}
	...

080156b0 <ulTCPWindowTxSack>:
 *         the head position.
 */
        uint32_t ulTCPWindowTxSack( TCPWindow_t * pxWindow,
                                    uint32_t ulFirst,
                                    uint32_t ulLast )
        {
 80156b0:	b5b0      	push	{r4, r5, r7, lr}
 80156b2:	b088      	sub	sp, #32
 80156b4:	af02      	add	r7, sp, #8
 80156b6:	60f8      	str	r0, [r7, #12]
 80156b8:	60b9      	str	r1, [r7, #8]
 80156ba:	607a      	str	r2, [r7, #4]
            uint32_t ulAckCount;
            uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	6a1b      	ldr	r3, [r3, #32]
 80156c0:	617b      	str	r3, [r7, #20]

            /* Receive a SACK option. */
            ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 80156c2:	687a      	ldr	r2, [r7, #4]
 80156c4:	68b9      	ldr	r1, [r7, #8]
 80156c6:	68f8      	ldr	r0, [r7, #12]
 80156c8:	f7ff fe9c 	bl	8015404 <prvTCPWindowTxCheckAck>
 80156cc:	6138      	str	r0, [r7, #16]
            ( void ) prvTCPWindowFastRetransmit( pxWindow, ulFirst );
 80156ce:	68b9      	ldr	r1, [r7, #8]
 80156d0:	68f8      	ldr	r0, [r7, #12]
 80156d2:	f7ff ff69 	bl	80155a8 <prvTCPWindowFastRetransmit>

            if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 80156d6:	4b16      	ldr	r3, [pc, #88]	@ (8015730 <ulTCPWindowTxSack+0x80>)
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	dd23      	ble.n	8015726 <ulTCPWindowTxSack+0x76>
 80156de:	6979      	ldr	r1, [r7, #20]
 80156e0:	68b8      	ldr	r0, [r7, #8]
 80156e2:	f7fe fe4a 	bl	801437a <xSequenceGreaterThan>
 80156e6:	4603      	mov	r3, r0
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d01c      	beq.n	8015726 <ulTCPWindowTxSack+0x76>
            {
                FreeRTOS_debug_printf( ( "ulTCPWindowTxSack[%u,%u]: from %u to %u (ack = %u)\n",
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80156f2:	461c      	mov	r4, r3
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80156fa:	461d      	mov	r5, r3
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	69db      	ldr	r3, [r3, #28]
 8015700:	68ba      	ldr	r2, [r7, #8]
 8015702:	1ad0      	subs	r0, r2, r3
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	69db      	ldr	r3, [r3, #28]
 8015708:	687a      	ldr	r2, [r7, #4]
 801570a:	1ad3      	subs	r3, r2, r3
 801570c:	68fa      	ldr	r2, [r7, #12]
 801570e:	6a11      	ldr	r1, [r2, #32]
 8015710:	68fa      	ldr	r2, [r7, #12]
 8015712:	69d2      	ldr	r2, [r2, #28]
 8015714:	1a8a      	subs	r2, r1, r2
 8015716:	9201      	str	r2, [sp, #4]
 8015718:	9300      	str	r3, [sp, #0]
 801571a:	4603      	mov	r3, r0
 801571c:	462a      	mov	r2, r5
 801571e:	4621      	mov	r1, r4
 8015720:	4804      	ldr	r0, [pc, #16]	@ (8015734 <ulTCPWindowTxSack+0x84>)
 8015722:	f00a ff03 	bl	802052c <lUDPLoggingPrintf>
                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
            }

            return ulAckCount;
 8015726:	693b      	ldr	r3, [r7, #16]
        }
 8015728:	4618      	mov	r0, r3
 801572a:	3718      	adds	r7, #24
 801572c:	46bd      	mov	sp, r7
 801572e:	bdb0      	pop	{r4, r5, r7, pc}
 8015730:	200012f4 	.word	0x200012f4
 8015734:	08025544 	.word	0x08025544

08015738 <vProcessGeneratedUDPPacket>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8015738:	b580      	push	{r7, lr}
 801573a:	b084      	sub	sp, #16
 801573c:	af00      	add	r7, sp, #0
 801573e:	6078      	str	r0, [r7, #4]
    const UDPPacket_t * pxUDPPacket;

    if( pxNetworkBuffer != NULL )
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	2b00      	cmp	r3, #0
 8015744:	d014      	beq.n	8015770 <vProcessGeneratedUDPPacket+0x38>
        /* Map the UDP packet onto the start of the frame. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801574a:	60fb      	str	r3, [r7, #12]

        switch( pxUDPPacket->xEthernetHeader.usFrameType )
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	899b      	ldrh	r3, [r3, #12]
 8015750:	b29b      	uxth	r3, r3
 8015752:	2b08      	cmp	r3, #8
 8015754:	d004      	beq.n	8015760 <vProcessGeneratedUDPPacket+0x28>
 8015756:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 801575a:	4293      	cmp	r3, r2
 801575c:	d004      	beq.n	8015768 <vProcessGeneratedUDPPacket+0x30>
                    vProcessGeneratedUDPPacket_IPv6( pxNetworkBuffer );
                    break;
            #endif
            default:
                /* do nothing, coverity happy */
                break;
 801575e:	e007      	b.n	8015770 <vProcessGeneratedUDPPacket+0x38>
                    vProcessGeneratedUDPPacket_IPv4( pxNetworkBuffer );
 8015760:	6878      	ldr	r0, [r7, #4]
 8015762:	f000 f845 	bl	80157f0 <vProcessGeneratedUDPPacket_IPv4>
                    break;
 8015766:	e003      	b.n	8015770 <vProcessGeneratedUDPPacket+0x38>
                    vProcessGeneratedUDPPacket_IPv6( pxNetworkBuffer );
 8015768:	6878      	ldr	r0, [r7, #4]
 801576a:	f000 fae3 	bl	8015d34 <vProcessGeneratedUDPPacket_IPv6>
                    break;
 801576e:	bf00      	nop
        }
    }
}
 8015770:	bf00      	nop
 8015772:	3710      	adds	r7, #16
 8015774:	46bd      	mov	sp, r7
 8015776:	bd80      	pop	{r7, pc}

08015778 <xProcessReceivedUDPPacket>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint16_t usPort,
                                      BaseType_t * pxIsWaitingForARPResolution )
{
 8015778:	b580      	push	{r7, lr}
 801577a:	b086      	sub	sp, #24
 801577c:	af00      	add	r7, sp, #0
 801577e:	60f8      	str	r0, [r7, #12]
 8015780:	460b      	mov	r3, r1
 8015782:	607a      	str	r2, [r7, #4]
 8015784:	817b      	strh	r3, [r7, #10]
    /* Returning pdPASS means that the packet was consumed, released. */
    BaseType_t xReturn = pdFAIL;
 8015786:	2300      	movs	r3, #0
 8015788:	617b      	str	r3, [r7, #20]
    const UDPPacket_t * pxUDPPacket;

    configASSERT( pxNetworkBuffer != NULL );
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	2b00      	cmp	r3, #0
 801578e:	d103      	bne.n	8015798 <xProcessReceivedUDPPacket+0x20>
 8015790:	2178      	movs	r1, #120	@ 0x78
 8015792:	4816      	ldr	r0, [pc, #88]	@ (80157ec <xProcessReceivedUDPPacket+0x74>)
 8015794:	f7eb fcc0 	bl	8001118 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801579c:	2b00      	cmp	r3, #0
 801579e:	d103      	bne.n	80157a8 <xProcessReceivedUDPPacket+0x30>
 80157a0:	2179      	movs	r1, #121	@ 0x79
 80157a2:	4812      	ldr	r0, [pc, #72]	@ (80157ec <xProcessReceivedUDPPacket+0x74>)
 80157a4:	f7eb fcb8 	bl	8001118 <vAssertCalled>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( const UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80157a8:	68fb      	ldr	r3, [r7, #12]
 80157aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80157ac:	613b      	str	r3, [r7, #16]

    switch( pxUDPPacket->xEthernetHeader.usFrameType )
 80157ae:	693b      	ldr	r3, [r7, #16]
 80157b0:	899b      	ldrh	r3, [r3, #12]
 80157b2:	b29b      	uxth	r3, r3
 80157b4:	2b08      	cmp	r3, #8
 80157b6:	d004      	beq.n	80157c2 <xProcessReceivedUDPPacket+0x4a>
 80157b8:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 80157bc:	4293      	cmp	r3, r2
 80157be:	d008      	beq.n	80157d2 <xProcessReceivedUDPPacket+0x5a>
                                                          usPort, pxIsWaitingForARPResolution );
                break;
        #endif
        default:
            /* do nothing, coverity happy */
            break;
 80157c0:	e00f      	b.n	80157e2 <xProcessReceivedUDPPacket+0x6a>
                xReturn = xProcessReceivedUDPPacket_IPv4( pxNetworkBuffer,
 80157c2:	897b      	ldrh	r3, [r7, #10]
 80157c4:	687a      	ldr	r2, [r7, #4]
 80157c6:	4619      	mov	r1, r3
 80157c8:	68f8      	ldr	r0, [r7, #12]
 80157ca:	f000 f92f 	bl	8015a2c <xProcessReceivedUDPPacket_IPv4>
 80157ce:	6178      	str	r0, [r7, #20]
                break;
 80157d0:	e007      	b.n	80157e2 <xProcessReceivedUDPPacket+0x6a>
                xReturn = xProcessReceivedUDPPacket_IPv6( pxNetworkBuffer,
 80157d2:	897b      	ldrh	r3, [r7, #10]
 80157d4:	687a      	ldr	r2, [r7, #4]
 80157d6:	4619      	mov	r1, r3
 80157d8:	68f8      	ldr	r0, [r7, #12]
 80157da:	f000 fbdd 	bl	8015f98 <xProcessReceivedUDPPacket_IPv6>
 80157de:	6178      	str	r0, [r7, #20]
                break;
 80157e0:	bf00      	nop
    }

    return xReturn;
 80157e2:	697b      	ldr	r3, [r7, #20]
}
 80157e4:	4618      	mov	r0, r3
 80157e6:	3718      	adds	r7, #24
 80157e8:	46bd      	mov	sp, r7
 80157ea:	bd80      	pop	{r7, pc}
 80157ec:	08025578 	.word	0x08025578

080157f0 <vProcessGeneratedUDPPacket_IPv4>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket_IPv4( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 80157f0:	b580      	push	{r7, lr}
 80157f2:	b08e      	sub	sp, #56	@ 0x38
 80157f4:	af00      	add	r7, sp, #0
 80157f6:	6078      	str	r0, [r7, #4]
    UDPPacket_t * pxUDPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	695b      	ldr	r3, [r3, #20]
 80157fc:	60fb      	str	r3, [r7, #12]
    NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015802:	60bb      	str	r3, [r7, #8]
    /* Map the UDP packet onto the start of the frame. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015808:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ipconfigSUPPORT_OUTGOING_PINGS == 1
        if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801580e:	2b00      	cmp	r3, #0
 8015810:	d104      	bne.n	801581c <vProcessGeneratedUDPPacket_IPv4+0x2c>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( ICMPPacket_t );
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015816:	3b2a      	subs	r3, #42	@ 0x2a
 8015818:	633b      	str	r3, [r7, #48]	@ 0x30
 801581a:	e003      	b.n	8015824 <vProcessGeneratedUDPPacket_IPv4+0x34>
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015820:	3b2a      	subs	r3, #42	@ 0x2a
 8015822:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ), &( pxEndPoint ) );
 8015824:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015826:	f107 0208 	add.w	r2, r7, #8
 801582a:	f107 030c 	add.w	r3, r7, #12
 801582e:	4618      	mov	r0, r3
 8015830:	f7f0 fd68 	bl	8006304 <eARPGetCacheEntry>
 8015834:	4603      	mov	r3, r0
 8015836:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( pxNetworkBuffer->pxEndPoint == NULL )
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801583e:	2b00      	cmp	r3, #0
 8015840:	d102      	bne.n	8015848 <vProcessGeneratedUDPPacket_IPv4+0x58>
    {
        pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8015842:	68ba      	ldr	r2, [r7, #8]
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    if( eReturned != eCantSendPacket )
 8015848:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801584c:	2b02      	cmp	r3, #2
 801584e:	f000 80a0 	beq.w	8015992 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
    {
        if( eReturned == eARPCacheHit )
 8015852:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015856:	2b01      	cmp	r3, #1
 8015858:	d176      	bne.n	8015948 <vProcessGeneratedUDPPacket_IPv4+0x158>
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* Create short cuts to the data within the packet. */
            pxIPHeader = &( pxUDPPacket->xIPHeader );
 801585a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801585c:	330e      	adds	r3, #14
 801585e:	627b      	str	r3, [r7, #36]	@ 0x24

            #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

                /* Is it possible that the packet is not actually a UDP packet
                 * after all, but an ICMP packet. */
                if( pxNetworkBuffer->usPort != ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8015864:	2b00      	cmp	r3, #0
 8015866:	d025      	beq.n	80158b4 <vProcessGeneratedUDPPacket_IPv4+0xc4>
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader;

                pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 8015868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801586a:	3322      	adds	r3, #34	@ 0x22
 801586c:	623b      	str	r3, [r7, #32]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8015872:	6a3b      	ldr	r3, [r7, #32]
 8015874:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 801587a:	6a3b      	ldr	r3, [r7, #32]
 801587c:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( UDPHeader_t ) );
 801587e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015880:	b29b      	uxth	r3, r3
 8015882:	3308      	adds	r3, #8
 8015884:	b29a      	uxth	r2, r3
 8015886:	6a3b      	ldr	r3, [r7, #32]
 8015888:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 801588a:	6a3b      	ldr	r3, [r7, #32]
 801588c:	889b      	ldrh	r3, [r3, #4]
 801588e:	b29b      	uxth	r3, r3
 8015890:	021b      	lsls	r3, r3, #8
 8015892:	b21a      	sxth	r2, r3
 8015894:	6a3b      	ldr	r3, [r7, #32]
 8015896:	889b      	ldrh	r3, [r3, #4]
 8015898:	b29b      	uxth	r3, r3
 801589a:	0a1b      	lsrs	r3, r3, #8
 801589c:	b29b      	uxth	r3, r3
 801589e:	b21b      	sxth	r3, r3
 80158a0:	4313      	orrs	r3, r2
 80158a2:	b21b      	sxth	r3, r3
 80158a4:	b29a      	uxth	r2, r3
 80158a6:	6a3b      	ldr	r3, [r7, #32]
 80158a8:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 80158aa:	6a3b      	ldr	r3, [r7, #32]
 80158ac:	2200      	movs	r2, #0
 80158ae:	719a      	strb	r2, [r3, #6]
 80158b0:	2200      	movs	r2, #0
 80158b2:	71da      	strb	r2, [r3, #7]
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = ucDefaultPartUDPPacketHeader;
 80158b4:	4b5b      	ldr	r3, [pc, #364]	@ (8015a24 <vProcessGeneratedUDPPacket_IPv4+0x234>)
 80158b6:	61fb      	str	r3, [r7, #28]
            /* The Ethernet source address is at offset 6. */
            pvCopyDest = &pxNetworkBuffer->pucEthernetBuffer[ sizeof( MACAddress_t ) ];
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80158bc:	3306      	adds	r3, #6
 80158be:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ucDefaultPartUDPPacketHeader ) );
 80158c0:	2218      	movs	r2, #24
 80158c2:	69f9      	ldr	r1, [r7, #28]
 80158c4:	69b8      	ldr	r0, [r7, #24]
 80158c6:	f00b f84d 	bl	8020964 <memcpy>

            #if ipconfigSUPPORT_OUTGOING_PINGS == 1
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d109      	bne.n	80158e6 <vProcessGeneratedUDPPacket_IPv4+0xf6>
                {
                    pxIPHeader->ucProtocol = ipPROTOCOL_ICMP;
 80158d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158d4:	2201      	movs	r2, #1
 80158d6:	725a      	strb	r2, [r3, #9]
                    pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( ICMPHeader_t ) );
 80158d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158da:	b29b      	uxth	r3, r3
 80158dc:	331c      	adds	r3, #28
 80158de:	b29a      	uxth	r2, r3
 80158e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158e2:	805a      	strh	r2, [r3, #2]
 80158e4:	e005      	b.n	80158f2 <vProcessGeneratedUDPPacket_IPv4+0x102>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 80158e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158e8:	b29b      	uxth	r3, r3
 80158ea:	331c      	adds	r3, #28
 80158ec:	b29a      	uxth	r2, r3
 80158ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158f0:	805a      	strh	r2, [r3, #2]
            }

            pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 80158f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158f4:	885b      	ldrh	r3, [r3, #2]
 80158f6:	b29b      	uxth	r3, r3
 80158f8:	021b      	lsls	r3, r3, #8
 80158fa:	b21a      	sxth	r2, r3
 80158fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158fe:	885b      	ldrh	r3, [r3, #2]
 8015900:	b29b      	uxth	r3, r3
 8015902:	0a1b      	lsrs	r3, r3, #8
 8015904:	b29b      	uxth	r3, r3
 8015906:	b21b      	sxth	r3, r3
 8015908:	4313      	orrs	r3, r2
 801590a:	b21b      	sxth	r3, r3
 801590c:	b29a      	uxth	r2, r3
 801590e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015910:	805a      	strh	r2, [r3, #2]
            pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	695a      	ldr	r2, [r3, #20]
 8015916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015918:	611a      	str	r2, [r3, #16]

            if( pxNetworkBuffer->pxEndPoint != NULL )
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801591e:	2b00      	cmp	r3, #0
 8015920:	d004      	beq.n	801592c <vProcessGeneratedUDPPacket_IPv4+0x13c>
            {
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015926:	681a      	ldr	r2, [r3, #0]
 8015928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801592a:	60da      	str	r2, [r3, #12]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 801592c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801592e:	2200      	movs	r2, #0
 8015930:	719a      	strb	r2, [r3, #6]
 8015932:	2200      	movs	r2, #0
 8015934:	71da      	strb	r2, [r3, #7]

            #if ( ipconfigUSE_LLMNR == 1 )
            {
                /* LLMNR messages are typically used on a LAN and they're
                 * not supposed to cross routers */
                if( pxNetworkBuffer->xIPAddress.ulIP_IPv4 == ipLLMNR_IP_ADDR )
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	695b      	ldr	r3, [r3, #20]
 801593a:	4a3b      	ldr	r2, [pc, #236]	@ (8015a28 <vProcessGeneratedUDPPacket_IPv4+0x238>)
 801593c:	4293      	cmp	r3, r2
 801593e:	d128      	bne.n	8015992 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
                {
                    pxIPHeader->ucTimeToLive = 0x01;
 8015940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015942:	2201      	movs	r2, #1
 8015944:	721a      	strb	r2, [r3, #8]
 8015946:	e024      	b.n	8015992 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
                    pxUDPPacket->xUDPHeader.usChecksum = 0U;
                }
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 8015948:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801594c:	2b00      	cmp	r3, #0
 801594e:	d11d      	bne.n	801598c <vProcessGeneratedUDPPacket_IPv4+0x19c>
        {
            /* Add an entry to the ARP table with a null hardware address.
             * This allows the ARP timer to know that an ARP reply is
             * outstanding, and perform retransmissions if necessary. */
            vARPRefreshCacheEntry( NULL, ulIPAddress, NULL );
 8015950:	68fb      	ldr	r3, [r7, #12]
 8015952:	2200      	movs	r2, #0
 8015954:	4619      	mov	r1, r3
 8015956:	2000      	movs	r0, #0
 8015958:	f7f0 fbc0 	bl	80060dc <vARPRefreshCacheEntry>
            iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* 'ulIPAddress' might have become the address of the Gateway.
             * Find the route again. */

            pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxNetworkBuffer->xIPAddress.ulIP_IPv4, 11 );
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	695b      	ldr	r3, [r3, #20]
 8015960:	210b      	movs	r1, #11
 8015962:	4618      	mov	r0, r3
 8015964:	f7f6 ff58 	bl	800c818 <FreeRTOS_FindEndPointOnNetMask>
 8015968:	4602      	mov	r2, r0
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	631a      	str	r2, [r3, #48]	@ 0x30

            if( pxNetworkBuffer->pxEndPoint == NULL )
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015972:	2b00      	cmp	r3, #0
 8015974:	d103      	bne.n	801597e <vProcessGeneratedUDPPacket_IPv4+0x18e>
            {
                eReturned = eCantSendPacket;
 8015976:	2302      	movs	r3, #2
 8015978:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801597c:	e009      	b.n	8015992 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
            }
            else
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 801597e:	68fa      	ldr	r2, [r7, #12]
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	615a      	str	r2, [r3, #20]
                vARPGenerateRequestPacket( pxNetworkBuffer );
 8015984:	6878      	ldr	r0, [r7, #4]
 8015986:	f7f0 ff25 	bl	80067d4 <vARPGenerateRequestPacket>
 801598a:	e002      	b.n	8015992 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 801598c:	2302      	movs	r3, #2
 801598e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if( eReturned != eCantSendPacket )
 8015992:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015996:	2b02      	cmp	r3, #2
 8015998:	d03d      	beq.n	8015a16 <vProcessGeneratedUDPPacket_IPv4+0x226>
    {
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        if( pxNetworkBuffer->pxEndPoint != NULL )
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d035      	beq.n	8015a0e <vProcessGeneratedUDPPacket_IPv4+0x21e>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80159a6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80159aa:	617b      	str	r3, [r7, #20]
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            EthernetHeader_t * pxEthernetHeader = ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80159b0:	613b      	str	r3, [r7, #16]
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 80159b2:	693b      	ldr	r3, [r7, #16]
 80159b4:	1d98      	adds	r0, r3, #6
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80159ba:	33e8      	adds	r3, #232	@ 0xe8
 80159bc:	2206      	movs	r2, #6
 80159be:	4619      	mov	r1, r3
 80159c0:	f00a ffd0 	bl	8020964 <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80159c8:	2b3b      	cmp	r3, #59	@ 0x3b
 80159ca:	d812      	bhi.n	80159f2 <vProcessGeneratedUDPPacket_IPv4+0x202>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80159d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80159d2:	e008      	b.n	80159e6 <vProcessGeneratedUDPPacket_IPv4+0x1f6>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80159d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159da:	4413      	add	r3, r2
 80159dc:	2200      	movs	r2, #0
 80159de:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80159e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159e2:	3301      	adds	r3, #1
 80159e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80159e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159e8:	2b3b      	cmp	r3, #59	@ 0x3b
 80159ea:	ddf3      	ble.n	80159d4 <vProcessGeneratedUDPPacket_IPv4+0x1e4>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	223c      	movs	r2, #60	@ 0x3c
 80159f0:	629a      	str	r2, [r3, #40]	@ 0x28
                }
            }
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            if( ( pxInterface != NULL ) && ( pxInterface->pfOutput != NULL ) )
 80159f2:	697b      	ldr	r3, [r7, #20]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d011      	beq.n	8015a1c <vProcessGeneratedUDPPacket_IPv4+0x22c>
 80159f8:	697b      	ldr	r3, [r7, #20]
 80159fa:	68db      	ldr	r3, [r3, #12]
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d00d      	beq.n	8015a1c <vProcessGeneratedUDPPacket_IPv4+0x22c>
            {
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 8015a00:	697b      	ldr	r3, [r7, #20]
 8015a02:	68db      	ldr	r3, [r3, #12]
 8015a04:	2201      	movs	r2, #1
 8015a06:	6879      	ldr	r1, [r7, #4]
 8015a08:	6978      	ldr	r0, [r7, #20]
 8015a0a:	4798      	blx	r3
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 8015a0c:	e006      	b.n	8015a1c <vProcessGeneratedUDPPacket_IPv4+0x22c>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8015a0e:	6878      	ldr	r0, [r7, #4]
 8015a10:	f000 fca2 	bl	8016358 <vReleaseNetworkBufferAndDescriptor>
}
 8015a14:	e002      	b.n	8015a1c <vProcessGeneratedUDPPacket_IPv4+0x22c>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8015a16:	6878      	ldr	r0, [r7, #4]
 8015a18:	f000 fc9e 	bl	8016358 <vReleaseNetworkBufferAndDescriptor>
}
 8015a1c:	bf00      	nop
 8015a1e:	3738      	adds	r7, #56	@ 0x38
 8015a20:	46bd      	mov	sp, r7
 8015a22:	bd80      	pop	{r7, pc}
 8015a24:	08025c98 	.word	0x08025c98
 8015a28:	fc0000e0 	.word	0xfc0000e0

08015a2c <xProcessReceivedUDPPacket_IPv4>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket_IPv4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                           uint16_t usPort,
                                           BaseType_t * pxIsWaitingForARPResolution )
{
 8015a2c:	b590      	push	{r4, r7, lr}
 8015a2e:	b099      	sub	sp, #100	@ 0x64
 8015a30:	af02      	add	r7, sp, #8
 8015a32:	60f8      	str	r0, [r7, #12]
 8015a34:	460b      	mov	r3, r1
 8015a36:	607a      	str	r2, [r7, #4]
 8015a38:	817b      	strh	r3, [r7, #10]
    BaseType_t xReturn = pdPASS;
 8015a3a:	2301      	movs	r3, #1
 8015a3c:	657b      	str	r3, [r7, #84]	@ 0x54
    FreeRTOS_Socket_t * pxSocket;
    const UDPPacket_t * pxUDPPacket;
    const NetworkEndPoint_t * pxEndpoint;

    configASSERT( pxNetworkBuffer != NULL );
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d104      	bne.n	8015a4e <xProcessReceivedUDPPacket_IPv4+0x22>
 8015a44:	f240 116f 	movw	r1, #367	@ 0x16f
 8015a48:	4872      	ldr	r0, [pc, #456]	@ (8015c14 <xProcessReceivedUDPPacket_IPv4+0x1e8>)
 8015a4a:	f7eb fb65 	bl	8001118 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d104      	bne.n	8015a60 <xProcessReceivedUDPPacket_IPv4+0x34>
 8015a56:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8015a5a:	486e      	ldr	r0, [pc, #440]	@ (8015c14 <xProcessReceivedUDPPacket_IPv4+0x1e8>)
 8015a5c:	f7eb fb5c 	bl	8001118 <vAssertCalled>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a64:	653b      	str	r3, [r7, #80]	@ 0x50
    pxEndpoint = pxNetworkBuffer->pxEndPoint;
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 8015a6c:	897b      	ldrh	r3, [r7, #10]
 8015a6e:	4618      	mov	r0, r3
 8015a70:	f7f8 fc60 	bl	800e334 <pxUDPSocketLookup>
 8015a74:	64b8      	str	r0, [r7, #72]	@ 0x48

    *pxIsWaitingForARPResolution = pdFALSE;
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	2200      	movs	r2, #0
 8015a7a:	601a      	str	r2, [r3, #0]

    do
    {
        if( pxSocket != NULL )
 8015a7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	f000 8085 	beq.w	8015b8e <xProcessReceivedUDPPacket_IPv4+0x162>
        {
            if( ( pxEndpoint != NULL ) && ( pxEndpoint->ipv4_settings.ulIPAddress != 0U ) )
 8015a84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d018      	beq.n	8015abc <xProcessReceivedUDPPacket_IPv4+0x90>
 8015a8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d014      	beq.n	8015abc <xProcessReceivedUDPPacket_IPv4+0x90>
            {
                if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 8015a92:	68f8      	ldr	r0, [r7, #12]
 8015a94:	f7f0 fa0c 	bl	8005eb0 <xCheckRequiresARPResolution>
 8015a98:	4603      	mov	r3, r0
 8015a9a:	2b01      	cmp	r3, #1
 8015a9c:	d105      	bne.n	8015aaa <xProcessReceivedUDPPacket_IPv4+0x7e>
                {
                    /* Mark this packet as waiting for ARP resolution. */
                    *pxIsWaitingForARPResolution = pdTRUE;
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	2201      	movs	r2, #1
 8015aa2:	601a      	str	r2, [r3, #0]

                    /* Return a fail to show that the frame will not be processed right now. */
                    xReturn = pdFAIL;
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	657b      	str	r3, [r7, #84]	@ 0x54
                    break;
 8015aa8:	e0ae      	b.n	8015c08 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                }
                else
                {
                    /* Update the age of this cache entry since a packet was received. */
                    vARPRefreshCacheEntryAge( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 8015aaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015aac:	1d9a      	adds	r2, r3, #6
 8015aae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015ab0:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8015ab4:	4619      	mov	r1, r3
 8015ab6:	4610      	mov	r0, r2
 8015ab8:	f7f0 fada 	bl	8006070 <vARPRefreshCacheEntryAge>
            }

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                /* Did the owner of this socket register a reception handler ? */
                if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
 8015abc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015abe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d02f      	beq.n	8015b24 <xProcessReceivedUDPPacket_IPv4+0xf8>
                {
                    struct freertos_sockaddr xSourceAddress, destinationAddress;
                    void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ac8:	332a      	adds	r3, #42	@ 0x2a
 8015aca:	647b      	str	r3, [r7, #68]	@ 0x44
                    FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
 8015acc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015ace:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015ad0:	643b      	str	r3, [r7, #64]	@ 0x40

                    xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8015ad6:	857b      	strh	r3, [r7, #42]	@ 0x2a
                    xSourceAddress.sin_address.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	695b      	ldr	r3, [r3, #20]
 8015adc:	633b      	str	r3, [r7, #48]	@ 0x30
                    xSourceAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 8015ade:	2302      	movs	r3, #2
 8015ae0:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                    xSourceAddress.sin_len = ( uint8_t ) sizeof( xSourceAddress );
 8015ae4:	2318      	movs	r3, #24
 8015ae6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
                    destinationAddress.sin_port = usPort;
 8015aea:	897b      	ldrh	r3, [r7, #10]
 8015aec:	827b      	strh	r3, [r7, #18]
                    destinationAddress.sin_address.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulDestinationIPAddress;
 8015aee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015af0:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8015af4:	61bb      	str	r3, [r7, #24]
                    destinationAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 8015af6:	2302      	movs	r3, #2
 8015af8:	747b      	strb	r3, [r7, #17]
                    destinationAddress.sin_len = ( uint8_t ) sizeof( destinationAddress );
 8015afa:	2318      	movs	r3, #24
 8015afc:	743b      	strb	r3, [r7, #16]

                    /* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
                    if( xHandler( ( Socket_t ) pxSocket,
                                  ( void * ) pcData,
                                  ( size_t ) ( pxNetworkBuffer->xDataLength - ipUDP_PAYLOAD_OFFSET_IPv4 ),
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015b02:	f1a3 022a 	sub.w	r2, r3, #42	@ 0x2a
                    if( xHandler( ( Socket_t ) pxSocket,
 8015b06:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8015b0a:	f107 0310 	add.w	r3, r7, #16
 8015b0e:	9300      	str	r3, [sp, #0]
 8015b10:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8015b12:	460b      	mov	r3, r1
 8015b14:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8015b16:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8015b18:	47a0      	blx	r4
 8015b1a:	4603      	mov	r3, r0
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d001      	beq.n	8015b24 <xProcessReceivedUDPPacket_IPv4+0xf8>
                                  &( xSourceAddress ),
                                  &( destinationAddress ) ) != 0 )
                    {
                        xReturn = pdFAIL; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
 8015b20:	2300      	movs	r3, #0
 8015b22:	657b      	str	r3, [r7, #84]	@ 0x54
                }
            }
            #endif /* if ( ipconfigUDP_MAX_RX_PACKETS > 0U ) */

            #if ( ipconfigUSE_CALLBACKS == 1 ) || ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
 8015b24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015b26:	2b01      	cmp	r3, #1
 8015b28:	d16e      	bne.n	8015c08 <xProcessReceivedUDPPacket_IPv4+0x1dc>
            #else
                /* xReturn is still pdPASS. */
            #endif
            {
                vTaskSuspendAll();
 8015b2a:	f7ed fd5d 	bl	80035e8 <vTaskSuspendAll>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 8015b2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015b30:	3354      	adds	r3, #84	@ 0x54
 8015b32:	68fa      	ldr	r2, [r7, #12]
 8015b34:	4611      	mov	r1, r2
 8015b36:	4618      	mov	r0, r3
 8015b38:	f7ec fcaf 	bl	800249a <vListInsertEnd>
                }
                ( void ) xTaskResumeAll();
 8015b3c:	f7ed fd62 	bl	8003604 <xTaskResumeAll>

                /* Set the socket's receive event */
                if( pxSocket->xEventGroup != NULL )
 8015b40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015b42:	685b      	ldr	r3, [r3, #4]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d005      	beq.n	8015b54 <xProcessReceivedUDPPacket_IPv4+0x128>
                {
                    ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 8015b48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015b4a:	685b      	ldr	r3, [r3, #4]
 8015b4c:	2101      	movs	r1, #1
 8015b4e:	4618      	mov	r0, r3
 8015b50:	f7ec fb9e 	bl	8002290 <xEventGroupSetBits>
                }

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 8015b54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d00c      	beq.n	8015b76 <xProcessReceivedUDPPacket_IPv4+0x14a>
 8015b5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015b60:	f003 0301 	and.w	r3, r3, #1
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d006      	beq.n	8015b76 <xProcessReceivedUDPPacket_IPv4+0x14a>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 8015b68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	2101      	movs	r1, #1
 8015b70:	4618      	mov	r0, r3
 8015b72:	f7ec fb8d 	bl	8002290 <xEventGroupSetBits>
                }
                #endif

                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
                {
                    if( pxSocket->pxUserSemaphore != NULL )
 8015b76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d044      	beq.n	8015c08 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                    {
                        ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 8015b7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015b80:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015b82:	2300      	movs	r3, #0
 8015b84:	2200      	movs	r2, #0
 8015b86:	2100      	movs	r1, #0
 8015b88:	f7ec fe5e 	bl	8002848 <xQueueGenericSend>
 8015b8c:	e03c      	b.n	8015c08 <xProcessReceivedUDPPacket_IPv4+0x1dc>

                /* A DNS reply, check for the source port.  Although the DNS client
                 * does open a UDP socket to send a messages, this socket will be
                 * closed after a short timeout.  Messages that come late (after the
                 * socket is closed) will be treated here. */
                if( FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usSourcePort ) == ( uint16_t ) ipDNS_PORT )
 8015b8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015b90:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8015b92:	b29b      	uxth	r3, r3
 8015b94:	021b      	lsls	r3, r3, #8
 8015b96:	b21a      	sxth	r2, r3
 8015b98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015b9a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8015b9c:	b29b      	uxth	r3, r3
 8015b9e:	0a1b      	lsrs	r3, r3, #8
 8015ba0:	b29b      	uxth	r3, r3
 8015ba2:	b21b      	sxth	r3, r3
 8015ba4:	4313      	orrs	r3, r2
 8015ba6:	b21b      	sxth	r3, r3
 8015ba8:	2b35      	cmp	r3, #53	@ 0x35
 8015baa:	d10f      	bne.n	8015bcc <xProcessReceivedUDPPacket_IPv4+0x1a0>
                {
                    vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress,
 8015bac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015bae:	1d98      	adds	r0, r3, #6
 8015bb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015bb2:	f8d3 101a 	ldr.w	r1, [r3, #26]
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015bba:	461a      	mov	r2, r3
 8015bbc:	f7f0 fa8e 	bl	80060dc <vARPRefreshCacheEntry>
                                           pxNetworkBuffer->pxEndPoint );
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8015bc0:	68f8      	ldr	r0, [r7, #12]
 8015bc2:	f7f0 ff20 	bl	8006a06 <ulDNSHandlePacket>
 8015bc6:	4603      	mov	r3, r0
 8015bc8:	657b      	str	r3, [r7, #84]	@ 0x54
 8015bca:	e01d      	b.n	8015c08 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                else
            #endif

            #if ( ipconfigUSE_DNS == 1 ) && ( ipconfigUSE_LLMNR == 1 )
                /* A LLMNR request, check for the destination port. */
                if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 8015bcc:	897b      	ldrh	r3, [r7, #10]
 8015bce:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 8015bd2:	4293      	cmp	r3, r2
 8015bd4:	d006      	beq.n	8015be4 <xProcessReceivedUDPPacket_IPv4+0x1b8>
                    ( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) )
 8015bd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015bd8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8015bda:	b29b      	uxth	r3, r3
                if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 8015bdc:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 8015be0:	4293      	cmp	r3, r2
 8015be2:	d10f      	bne.n	8015c04 <xProcessReceivedUDPPacket_IPv4+0x1d8>
                {
                    vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress,
 8015be4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015be6:	1d98      	adds	r0, r3, #6
 8015be8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015bea:	f8d3 101a 	ldr.w	r1, [r3, #26]
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015bf2:	461a      	mov	r2, r3
 8015bf4:	f7f0 fa72 	bl	80060dc <vARPRefreshCacheEntry>
                                           pxNetworkBuffer->pxEndPoint );
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8015bf8:	68f8      	ldr	r0, [r7, #12]
 8015bfa:	f7f0 ff04 	bl	8006a06 <ulDNSHandlePacket>
 8015bfe:	4603      	mov	r3, r0
 8015c00:	657b      	str	r3, [r7, #84]	@ 0x54
 8015c02:	e001      	b.n	8015c08 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                    xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
                }
                else
            #endif /* ipconfigUSE_NBNS */
            {
                xReturn = pdFAIL;
 8015c04:	2300      	movs	r3, #0
 8015c06:	657b      	str	r3, [r7, #84]	@ 0x54
            }
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 8015c08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 8015c0a:	4618      	mov	r0, r3
 8015c0c:	375c      	adds	r7, #92	@ 0x5c
 8015c0e:	46bd      	mov	sp, r7
 8015c10:	bd90      	pop	{r4, r7, pc}
 8015c12:	bf00      	nop
 8015c14:	080255a8 	.word	0x080255a8

08015c18 <pxGetEndpoint>:
 * @returns Pointer to the first end point of the given IP type from the
 *          list of end points.
 */
static NetworkEndPoint_t * pxGetEndpoint( BaseType_t xIPType,
                                          BaseType_t xIsGlobal )
{
 8015c18:	b580      	push	{r7, lr}
 8015c1a:	b086      	sub	sp, #24
 8015c1c:	af00      	add	r7, sp, #0
 8015c1e:	6078      	str	r0, [r7, #4]
 8015c20:	6039      	str	r1, [r7, #0]
    NetworkEndPoint_t * pxEndPoint;

    for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8015c22:	2000      	movs	r0, #0
 8015c24:	f7f6 fd20 	bl	800c668 <FreeRTOS_FirstEndPoint>
 8015c28:	6178      	str	r0, [r7, #20]
 8015c2a:	e021      	b.n	8015c70 <pxGetEndpoint+0x58>
         pxEndPoint != NULL;
         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
    {
        if( xIPType == ( BaseType_t ) ipTYPE_IPv6 )
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	2b60      	cmp	r3, #96	@ 0x60
 8015c30:	d119      	bne.n	8015c66 <pxGetEndpoint+0x4e>
        {
            if( pxEndPoint->bits.bIPv6 != 0U )
 8015c32:	697b      	ldr	r3, [r7, #20]
 8015c34:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8015c38:	f003 0304 	and.w	r3, r3, #4
 8015c3c:	b2db      	uxtb	r3, r3
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d011      	beq.n	8015c66 <pxGetEndpoint+0x4e>
            {
                IPv6_Type_t eEndpointType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 8015c42:	697b      	ldr	r3, [r7, #20]
 8015c44:	3338      	adds	r3, #56	@ 0x38
 8015c46:	4618      	mov	r0, r3
 8015c48:	f7f7 f8f2 	bl	800ce30 <xIPv6_GetIPType>
 8015c4c:	4603      	mov	r3, r0
 8015c4e:	74fb      	strb	r3, [r7, #19]
                BaseType_t xEndpointGlobal = ( eEndpointType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 8015c50:	7cfb      	ldrb	r3, [r7, #19]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d101      	bne.n	8015c5a <pxGetEndpoint+0x42>
 8015c56:	2301      	movs	r3, #1
 8015c58:	e000      	b.n	8015c5c <pxGetEndpoint+0x44>
 8015c5a:	2300      	movs	r3, #0
 8015c5c:	60fb      	str	r3, [r7, #12]

                if( xEndpointGlobal == xIsGlobal )
 8015c5e:	68fa      	ldr	r2, [r7, #12]
 8015c60:	683b      	ldr	r3, [r7, #0]
 8015c62:	429a      	cmp	r2, r3
 8015c64:	d008      	beq.n	8015c78 <pxGetEndpoint+0x60>
         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8015c66:	6979      	ldr	r1, [r7, #20]
 8015c68:	2000      	movs	r0, #0
 8015c6a:	f7f6 fd1f 	bl	800c6ac <FreeRTOS_NextEndPoint>
 8015c6e:	6178      	str	r0, [r7, #20]
         pxEndPoint != NULL;
 8015c70:	697b      	ldr	r3, [r7, #20]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d1da      	bne.n	8015c2c <pxGetEndpoint+0x14>
 8015c76:	e000      	b.n	8015c7a <pxGetEndpoint+0x62>
                {
                    break;
 8015c78:	bf00      	nop
                }
            }
        }
    }

    return pxEndPoint;
 8015c7a:	697b      	ldr	r3, [r7, #20]
}
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	3718      	adds	r7, #24
 8015c80:	46bd      	mov	sp, r7
 8015c82:	bd80      	pop	{r7, pc}

08015c84 <prvStartLookup>:
 * @param[out] pxLostBuffer  The pointee will be set to true in case the network packet got released
 *                            ( the ownership was taken ).
 */
static eARPLookupResult_t prvStartLookup( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                          BaseType_t * pxLostBuffer )
{
 8015c84:	b580      	push	{r7, lr}
 8015c86:	b084      	sub	sp, #16
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	6078      	str	r0, [r7, #4]
 8015c8c:	6039      	str	r1, [r7, #0]
    eARPLookupResult_t eReturned = eARPCacheMiss;
 8015c8e:	2300      	movs	r3, #0
 8015c90:	73fb      	strb	r3, [r7, #15]

    FreeRTOS_printf( ( "Looking up %pip with%s end-point\n",
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	f103 0114 	add.w	r1, r3, #20
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d001      	beq.n	8015ca4 <prvStartLookup+0x20>
 8015ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8015d1c <prvStartLookup+0x98>)
 8015ca2:	e000      	b.n	8015ca6 <prvStartLookup+0x22>
 8015ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8015d20 <prvStartLookup+0x9c>)
 8015ca6:	461a      	mov	r2, r3
 8015ca8:	481e      	ldr	r0, [pc, #120]	@ (8015d24 <prvStartLookup+0xa0>)
 8015caa:	f00a fc3f 	bl	802052c <lUDPLoggingPrintf>
                       ( void * ) pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes,
                       ( pxNetworkBuffer->pxEndPoint != NULL ) ? "" : "out" ) );

    if( pxNetworkBuffer->pxEndPoint == NULL )
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d11f      	bne.n	8015cf6 <prvStartLookup+0x72>
    {
        IPv6_Type_t eTargetType = xIPv6_GetIPType( &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ) );
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	3314      	adds	r3, #20
 8015cba:	4618      	mov	r0, r3
 8015cbc:	f7f7 f8b8 	bl	800ce30 <xIPv6_GetIPType>
 8015cc0:	4603      	mov	r3, r0
 8015cc2:	73bb      	strb	r3, [r7, #14]
        BaseType_t xIsGlobal = ( eTargetType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 8015cc4:	7bbb      	ldrb	r3, [r7, #14]
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d101      	bne.n	8015cce <prvStartLookup+0x4a>
 8015cca:	2301      	movs	r3, #1
 8015ccc:	e000      	b.n	8015cd0 <prvStartLookup+0x4c>
 8015cce:	2300      	movs	r3, #0
 8015cd0:	60bb      	str	r3, [r7, #8]
        pxNetworkBuffer->pxEndPoint = pxGetEndpoint( ( BaseType_t ) ipTYPE_IPv6, xIsGlobal );
 8015cd2:	68b9      	ldr	r1, [r7, #8]
 8015cd4:	2060      	movs	r0, #96	@ 0x60
 8015cd6:	f7ff ff9f 	bl	8015c18 <pxGetEndpoint>
 8015cda:	4602      	mov	r2, r0
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	631a      	str	r2, [r3, #48]	@ 0x30
        FreeRTOS_printf( ( "prvStartLookup: Got an end-point: %s\n", pxNetworkBuffer->pxEndPoint ? "yes" : "no" ) );
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d001      	beq.n	8015cec <prvStartLookup+0x68>
 8015ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8015d28 <prvStartLookup+0xa4>)
 8015cea:	e000      	b.n	8015cee <prvStartLookup+0x6a>
 8015cec:	4b0f      	ldr	r3, [pc, #60]	@ (8015d2c <prvStartLookup+0xa8>)
 8015cee:	4619      	mov	r1, r3
 8015cf0:	480f      	ldr	r0, [pc, #60]	@ (8015d30 <prvStartLookup+0xac>)
 8015cf2:	f00a fc1b 	bl	802052c <lUDPLoggingPrintf>
    }

    if( pxNetworkBuffer->pxEndPoint != NULL )
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d008      	beq.n	8015d10 <prvStartLookup+0x8c>
    {
        vNDSendNeighbourSolicitation( pxNetworkBuffer, &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ) );
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	3314      	adds	r3, #20
 8015d02:	4619      	mov	r1, r3
 8015d04:	6878      	ldr	r0, [r7, #4]
 8015d06:	f7f5 f9d5 	bl	800b0b4 <vNDSendNeighbourSolicitation>

        /* pxNetworkBuffer has been sent and released.
         * Make sure it won't be used again.. */
        *pxLostBuffer = pdTRUE;
 8015d0a:	683b      	ldr	r3, [r7, #0]
 8015d0c:	2201      	movs	r2, #1
 8015d0e:	601a      	str	r2, [r3, #0]
    }

    return eReturned;
 8015d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d12:	4618      	mov	r0, r3
 8015d14:	3710      	adds	r7, #16
 8015d16:	46bd      	mov	sp, r7
 8015d18:	bd80      	pop	{r7, pc}
 8015d1a:	bf00      	nop
 8015d1c:	080255dc 	.word	0x080255dc
 8015d20:	080255e0 	.word	0x080255e0
 8015d24:	080255e4 	.word	0x080255e4
 8015d28:	08025608 	.word	0x08025608
 8015d2c:	0802560c 	.word	0x0802560c
 8015d30:	08025610 	.word	0x08025610

08015d34 <vProcessGeneratedUDPPacket_IPv6>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8015d34:	b590      	push	{r4, r7, lr}
 8015d36:	b093      	sub	sp, #76	@ 0x4c
 8015d38:	af00      	add	r7, sp, #0
 8015d3a:	6078      	str	r0, [r7, #4]
    UDPPacket_IPv6_t * pxUDPPacket_IPv6;
    IPHeader_IPv6_t * pxIPHeader_IPv6;
    eARPLookupResult_t eReturned;
    size_t uxPayloadSize;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    NetworkInterface_t * pxInterface = NULL;
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
    EthernetHeader_t * pxEthernetHeader = NULL;
 8015d40:	2300      	movs	r3, #0
 8015d42:	637b      	str	r3, [r7, #52]	@ 0x34
    BaseType_t xLostBuffer = pdFALSE;
 8015d44:	2300      	movs	r3, #0
 8015d46:	623b      	str	r3, [r7, #32]
    NetworkEndPoint_t * pxEndPoint = NULL;
 8015d48:	2300      	movs	r3, #0
 8015d4a:	61fb      	str	r3, [r7, #28]
    /* Map the UDP packet onto the start of the frame. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d50:	633b      	str	r3, [r7, #48]	@ 0x30
    pxIPHeader_IPv6 = &( pxUDPPacket_IPv6->xIPHeader );
 8015d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d54:	330e      	adds	r3, #14
 8015d56:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Remember the original address. It might get replaced with
     * the address of the gateway. */
    ( void ) memcpy( xIPv6Address.ucBytes, pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, sizeof( xIPv6Address.ucBytes ) );
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	3314      	adds	r3, #20
 8015d5c:	f107 040c 	add.w	r4, r7, #12
 8015d60:	6818      	ldr	r0, [r3, #0]
 8015d62:	6859      	ldr	r1, [r3, #4]
 8015d64:	689a      	ldr	r2, [r3, #8]
 8015d66:	68db      	ldr	r3, [r3, #12]
 8015d68:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    #if ipconfigSUPPORT_OUTGOING_PINGS == 1
        if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d107      	bne.n	8015d82 <vProcessGeneratedUDPPacket_IPv6+0x4e>
        {
            size_t uxHeadersSize = sizeof( EthernetHeader_t ) + sizeof( IPHeader_IPv6_t ) + sizeof( ICMPHeader_t );
 8015d72:	233e      	movs	r3, #62	@ 0x3e
 8015d74:	62bb      	str	r3, [r7, #40]	@ 0x28
            uxPayloadSize = pxNetworkBuffer->xDataLength - uxHeadersSize;
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d7c:	1ad3      	subs	r3, r2, r3
 8015d7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8015d80:	e003      	b.n	8015d8a <vProcessGeneratedUDPPacket_IPv6+0x56>
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_IPv6_t );
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015d86:	3b3e      	subs	r3, #62	@ 0x3e
 8015d88:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    /* Look in the IPv6 MAC-address cache for the target IP-address. */
    eReturned = eNDGetCacheEntry( &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ), &( pxUDPPacket_IPv6->xEthernetHeader.xDestinationAddress ),
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	3314      	adds	r3, #20
 8015d8e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015d90:	f107 021c 	add.w	r2, r7, #28
 8015d94:	4618      	mov	r0, r3
 8015d96:	f7f4 ff21 	bl	800abdc <eNDGetCacheEntry>
 8015d9a:	4603      	mov	r3, r0
 8015d9c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                                  &( pxEndPoint ) );

    if( eReturned != eCantSendPacket )
 8015da0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015da4:	2b02      	cmp	r3, #2
 8015da6:	f000 80b1 	beq.w	8015f0c <vProcessGeneratedUDPPacket_IPv6+0x1d8>
    {
        if( eReturned == eARPCacheHit )
 8015daa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015dae:	2b01      	cmp	r3, #1
 8015db0:	f040 8095 	bne.w	8015ede <vProcessGeneratedUDPPacket_IPv6+0x1aa>
            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8015db4:	69fa      	ldr	r2, [r7, #28]
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

                /* Is it possible that the packet is not actually a UDP packet
                 * after all, but an ICMP packet. */
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d109      	bne.n	8015dd6 <vProcessGeneratedUDPPacket_IPv6+0xa2>
                {
                    pxIPHeader_IPv6->ucVersionTrafficClass = 0x60;
 8015dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dc4:	2260      	movs	r2, #96	@ 0x60
 8015dc6:	701a      	strb	r2, [r3, #0]
                    pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 8015dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dca:	223a      	movs	r2, #58	@ 0x3a
 8015dcc:	719a      	strb	r2, [r3, #6]
                    pxIPHeader_IPv6->ucHopLimit = 128;
 8015dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dd0:	2280      	movs	r2, #128	@ 0x80
 8015dd2:	71da      	strb	r2, [r3, #7]
 8015dd4:	e05e      	b.n	8015e94 <vProcessGeneratedUDPPacket_IPv6+0x160>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader = NULL;
 8015dd6:	2300      	movs	r3, #0
 8015dd8:	627b      	str	r3, [r7, #36]	@ 0x24

                pxUDPHeader = &( pxUDPPacket_IPv6->xUDPHeader );
 8015dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ddc:	3336      	adds	r3, #54	@ 0x36
 8015dde:	627b      	str	r3, [r7, #36]	@ 0x24

                pxIPHeader_IPv6->ucVersionTrafficClass = 0x60;
 8015de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015de2:	2260      	movs	r2, #96	@ 0x60
 8015de4:	701a      	strb	r2, [r3, #0]
                pxIPHeader_IPv6->ucTrafficClassFlow = 0;
 8015de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015de8:	2200      	movs	r2, #0
 8015dea:	705a      	strb	r2, [r3, #1]
                pxIPHeader_IPv6->usFlowLabel = 0;
 8015dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dee:	2200      	movs	r2, #0
 8015df0:	709a      	strb	r2, [r3, #2]
 8015df2:	2200      	movs	r2, #0
 8015df4:	70da      	strb	r2, [r3, #3]
                pxIPHeader_IPv6->ucHopLimit = 255;
 8015df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015df8:	22ff      	movs	r2, #255	@ 0xff
 8015dfa:	71da      	strb	r2, [r3, #7]
                pxUDPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ) );
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e00:	b29b      	uxth	r3, r3
 8015e02:	3b36      	subs	r3, #54	@ 0x36
 8015e04:	b29a      	uxth	r2, r3
 8015e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e08:	809a      	strh	r2, [r3, #4]

                pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_UDP;
 8015e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e0c:	2211      	movs	r2, #17
 8015e0e:	719a      	strb	r2, [r3, #6]
                pxIPHeader_IPv6->usPayloadLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength - sizeof( IPPacket_IPv6_t ) );
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e14:	b29b      	uxth	r3, r3
 8015e16:	3b36      	subs	r3, #54	@ 0x36
 8015e18:	b29a      	uxth	r2, r3
 8015e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e1c:	809a      	strh	r2, [r3, #4]
                /* The total transmit size adds on the Ethernet header. */
                pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( pxIPHeader_IPv6->usPayloadLength );
 8015e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e20:	889b      	ldrh	r3, [r3, #4]
 8015e22:	b29b      	uxth	r3, r3
 8015e24:	021b      	lsls	r3, r3, #8
 8015e26:	b21a      	sxth	r2, r3
 8015e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e2a:	889b      	ldrh	r3, [r3, #4]
 8015e2c:	b29b      	uxth	r3, r3
 8015e2e:	0a1b      	lsrs	r3, r3, #8
 8015e30:	b29b      	uxth	r3, r3
 8015e32:	b21b      	sxth	r3, r3
 8015e34:	4313      	orrs	r3, r2
 8015e36:	b21b      	sxth	r3, r3
 8015e38:	b29a      	uxth	r2, r3
 8015e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e3c:	809a      	strh	r2, [r3, #4]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8015e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e44:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 8015e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e4c:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 8015e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e50:	889b      	ldrh	r3, [r3, #4]
 8015e52:	b29b      	uxth	r3, r3
 8015e54:	021b      	lsls	r3, r3, #8
 8015e56:	b21a      	sxth	r2, r3
 8015e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e5a:	889b      	ldrh	r3, [r3, #4]
 8015e5c:	b29b      	uxth	r3, r3
 8015e5e:	0a1b      	lsrs	r3, r3, #8
 8015e60:	b29b      	uxth	r3, r3
 8015e62:	b21b      	sxth	r3, r3
 8015e64:	4313      	orrs	r3, r2
 8015e66:	b21b      	sxth	r3, r3
 8015e68:	b29a      	uxth	r2, r3
 8015e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e6c:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 8015e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e70:	2200      	movs	r2, #0
 8015e72:	719a      	strb	r2, [r3, #6]
 8015e74:	2200      	movs	r2, #0
 8015e76:	71da      	strb	r2, [r3, #7]

                if( pxNetworkBuffer->pxEndPoint != NULL )
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d009      	beq.n	8015e94 <vProcessGeneratedUDPPacket_IPv6+0x160>
                {
                    ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes,
 8015e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e82:	f103 0008 	add.w	r0, r3, #8
                                     pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes,
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015e8a:	3338      	adds	r3, #56	@ 0x38
                    ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes,
 8015e8c:	2210      	movs	r2, #16
 8015e8e:	4619      	mov	r1, r3
 8015e90:	f00a fd68 	bl	8020964 <memcpy>
                ucSocketOptions = pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ];
            }
            #endif

            #if ipconfigSUPPORT_OUTGOING_PINGS == 1
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d10e      	bne.n	8015eba <vProcessGeneratedUDPPacket_IPv6+0x186>
                {
                    pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( sizeof( ICMPEcho_IPv6_t ) + uxPayloadSize );
 8015e9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015e9e:	b29b      	uxth	r3, r3
 8015ea0:	3308      	adds	r3, #8
 8015ea2:	b29b      	uxth	r3, r3
 8015ea4:	021b      	lsls	r3, r3, #8
 8015ea6:	b29a      	uxth	r2, r3
 8015ea8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015eaa:	3308      	adds	r3, #8
 8015eac:	0a1b      	lsrs	r3, r3, #8
 8015eae:	b29b      	uxth	r3, r3
 8015eb0:	4313      	orrs	r3, r2
 8015eb2:	b29a      	uxth	r2, r3
 8015eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015eb6:	809a      	strh	r2, [r3, #4]
 8015eb8:	e028      	b.n	8015f0c <vProcessGeneratedUDPPacket_IPv6+0x1d8>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_UDP;
 8015eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ebc:	2211      	movs	r2, #17
 8015ebe:	719a      	strb	r2, [r3, #6]
                pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( sizeof( UDPHeader_t ) + uxPayloadSize );
 8015ec0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015ec2:	b29b      	uxth	r3, r3
 8015ec4:	3308      	adds	r3, #8
 8015ec6:	b29b      	uxth	r3, r3
 8015ec8:	021b      	lsls	r3, r3, #8
 8015eca:	b29a      	uxth	r2, r3
 8015ecc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015ece:	3308      	adds	r3, #8
 8015ed0:	0a1b      	lsrs	r3, r3, #8
 8015ed2:	b29b      	uxth	r3, r3
 8015ed4:	4313      	orrs	r3, r2
 8015ed6:	b29a      	uxth	r2, r3
 8015ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015eda:	809a      	strh	r2, [r3, #4]
 8015edc:	e016      	b.n	8015f0c <vProcessGeneratedUDPPacket_IPv6+0x1d8>
                    pxUDPPacket_IPv6->xUDPHeader.usChecksum = 0U;
                }
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 8015ede:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d10f      	bne.n	8015f06 <vProcessGeneratedUDPPacket_IPv6+0x1d2>
        {
            if( pxEndPoint != NULL )
 8015ee6:	69fb      	ldr	r3, [r7, #28]
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d002      	beq.n	8015ef2 <vProcessGeneratedUDPPacket_IPv6+0x1be>
            {
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8015eec:	69fa      	ldr	r2, [r7, #28]
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	631a      	str	r2, [r3, #48]	@ 0x30
            }

            eReturned = prvStartLookup( pxNetworkBuffer, &( xLostBuffer ) );
 8015ef2:	f107 0320 	add.w	r3, r7, #32
 8015ef6:	4619      	mov	r1, r3
 8015ef8:	6878      	ldr	r0, [r7, #4]
 8015efa:	f7ff fec3 	bl	8015c84 <prvStartLookup>
 8015efe:	4603      	mov	r3, r0
 8015f00:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8015f04:	e002      	b.n	8015f0c <vProcessGeneratedUDPPacket_IPv6+0x1d8>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 8015f06:	2302      	movs	r3, #2
 8015f08:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }
    }

    if( xLostBuffer == pdTRUE )
 8015f0c:	6a3b      	ldr	r3, [r7, #32]
 8015f0e:	2b01      	cmp	r3, #1
 8015f10:	d03d      	beq.n	8015f8e <vProcessGeneratedUDPPacket_IPv6+0x25a>
    {
        /* An ND solicitation or ARP request has been sent. */
    }
    else if( eReturned != eCantSendPacket )
 8015f12:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015f16:	2b02      	cmp	r3, #2
 8015f18:	d036      	beq.n	8015f88 <vProcessGeneratedUDPPacket_IPv6+0x254>
    {
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        if( pxNetworkBuffer->pxEndPoint != NULL )
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d02e      	beq.n	8015f80 <vProcessGeneratedUDPPacket_IPv6+0x24c>
        {
            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015f26:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8015f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEthernetHeader = ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f30:	637b      	str	r3, [r7, #52]	@ 0x34
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes,
 8015f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015f34:	1d98      	adds	r0, r3, #6
                             pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes,
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015f3a:	33e8      	adds	r3, #232	@ 0xe8
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes,
 8015f3c:	2206      	movs	r2, #6
 8015f3e:	4619      	mov	r1, r3
 8015f40:	f00a fd10 	bl	8020964 <memcpy>
                             ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015f48:	2b3b      	cmp	r3, #59	@ 0x3b
 8015f4a:	d812      	bhi.n	8015f72 <vProcessGeneratedUDPPacket_IPv6+0x23e>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015f52:	e008      	b.n	8015f66 <vProcessGeneratedUDPPacket_IPv6+0x232>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015f58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015f5a:	4413      	add	r3, r2
 8015f5c:	2200      	movs	r2, #0
 8015f5e:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8015f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015f62:	3301      	adds	r3, #1
 8015f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015f68:	2b3b      	cmp	r3, #59	@ 0x3b
 8015f6a:	ddf3      	ble.n	8015f54 <vProcessGeneratedUDPPacket_IPv6+0x220>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	223c      	movs	r2, #60	@ 0x3c
 8015f70:	629a      	str	r2, [r3, #40]	@ 0x28
                }
            }
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 8015f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015f74:	68db      	ldr	r3, [r3, #12]
 8015f76:	2201      	movs	r2, #1
 8015f78:	6879      	ldr	r1, [r7, #4]
 8015f7a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015f7c:	4798      	blx	r3
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 8015f7e:	e006      	b.n	8015f8e <vProcessGeneratedUDPPacket_IPv6+0x25a>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8015f80:	6878      	ldr	r0, [r7, #4]
 8015f82:	f000 f9e9 	bl	8016358 <vReleaseNetworkBufferAndDescriptor>
}
 8015f86:	e002      	b.n	8015f8e <vProcessGeneratedUDPPacket_IPv6+0x25a>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8015f88:	6878      	ldr	r0, [r7, #4]
 8015f8a:	f000 f9e5 	bl	8016358 <vReleaseNetworkBufferAndDescriptor>
}
 8015f8e:	bf00      	nop
 8015f90:	374c      	adds	r7, #76	@ 0x4c
 8015f92:	46bd      	mov	sp, r7
 8015f94:	bd90      	pop	{r4, r7, pc}
	...

08015f98 <xProcessReceivedUDPPacket_IPv6>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket_IPv6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                           uint16_t usPort,
                                           BaseType_t * pxIsWaitingForARPResolution )
{
 8015f98:	b590      	push	{r4, r7, lr}
 8015f9a:	b09b      	sub	sp, #108	@ 0x6c
 8015f9c:	af02      	add	r7, sp, #8
 8015f9e:	60f8      	str	r0, [r7, #12]
 8015fa0:	460b      	mov	r3, r1
 8015fa2:	607a      	str	r2, [r7, #4]
 8015fa4:	817b      	strh	r3, [r7, #10]
    /* Returning pdPASS means that the packet was consumed, released. */
    BaseType_t xReturn = pdPASS;
 8015fa6:	2301      	movs	r3, #1
 8015fa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    FreeRTOS_Socket_t * pxSocket;
    const UDPPacket_IPv6_t * pxUDPPacket_IPv6;

    configASSERT( pxNetworkBuffer != NULL );
 8015faa:	68fb      	ldr	r3, [r7, #12]
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d104      	bne.n	8015fba <xProcessReceivedUDPPacket_IPv6+0x22>
 8015fb0:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 8015fb4:	4874      	ldr	r0, [pc, #464]	@ (8016188 <xProcessReceivedUDPPacket_IPv6+0x1f0>)
 8015fb6:	f7eb f8af 	bl	8001118 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d104      	bne.n	8015fcc <xProcessReceivedUDPPacket_IPv6+0x34>
 8015fc2:	f240 1187 	movw	r1, #391	@ 0x187
 8015fc6:	4870      	ldr	r0, [pc, #448]	@ (8016188 <xProcessReceivedUDPPacket_IPv6+0x1f0>)
 8015fc8:	f7eb f8a6 	bl	8001118 <vAssertCalled>
     * handling them, no use to fill the cache with those IP addresses. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015fd0:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 8015fd2:	897b      	ldrh	r3, [r7, #10]
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	f7f8 f9ad 	bl	800e334 <pxUDPSocketLookup>
 8015fda:	6578      	str	r0, [r7, #84]	@ 0x54

    *pxIsWaitingForARPResolution = pdFALSE;
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	2200      	movs	r2, #0
 8015fe0:	601a      	str	r2, [r3, #0]

    do
    {
        /* UDPv6 doesn't allow zero-checksum, refer to RFC2460 - section 8.1.
         * Some platforms (such as Zynq) pass the packet to upper layer for flexibility to allow zero-checksum. */
        if( pxUDPPacket_IPv6->xUDPHeader.usChecksum == 0U )
 8015fe2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015fe4:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8015fe6:	b29b      	uxth	r3, r3
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d109      	bne.n	8016000 <xProcessReceivedUDPPacket_IPv6+0x68>
        {
            FreeRTOS_debug_printf( ( "xProcessReceivedUDPPacket_IPv6: Drop packets with checksum %d\n",
 8015fec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015fee:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8015ff0:	b29b      	uxth	r3, r3
 8015ff2:	4619      	mov	r1, r3
 8015ff4:	4865      	ldr	r0, [pc, #404]	@ (801618c <xProcessReceivedUDPPacket_IPv6+0x1f4>)
 8015ff6:	f00a fa99 	bl	802052c <lUDPLoggingPrintf>
                                     pxUDPPacket_IPv6->xUDPHeader.usChecksum ) );

            xReturn = pdFAIL;
 8015ffa:	2300      	movs	r3, #0
 8015ffc:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 8015ffe:	e0bd      	b.n	801617c <xProcessReceivedUDPPacket_IPv6+0x1e4>
        }

        if( pxSocket != NULL )
 8016000:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016002:	2b00      	cmp	r3, #0
 8016004:	f000 8091 	beq.w	801612a <xProcessReceivedUDPPacket_IPv6+0x192>
        {
            if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 8016008:	68f8      	ldr	r0, [r7, #12]
 801600a:	f7ef ff51 	bl	8005eb0 <xCheckRequiresARPResolution>
 801600e:	4603      	mov	r3, r0
 8016010:	2b01      	cmp	r3, #1
 8016012:	d105      	bne.n	8016020 <xProcessReceivedUDPPacket_IPv6+0x88>
            {
                /* Mark this packet as waiting for ARP resolution. */
                *pxIsWaitingForARPResolution = pdTRUE;
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	2201      	movs	r2, #1
 8016018:	601a      	str	r2, [r3, #0]

                /* Return a fail to show that the frame will not be processed right now. */
                xReturn = pdFAIL;
 801601a:	2300      	movs	r3, #0
 801601c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                break;
 801601e:	e0ad      	b.n	801617c <xProcessReceivedUDPPacket_IPv6+0x1e4>
            }

            vNDRefreshCacheEntry( &( pxUDPPacket_IPv6->xEthernetHeader.xSourceAddress ), &( pxUDPPacket_IPv6->xIPHeader.xSourceAddress ),
 8016020:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016022:	1d98      	adds	r0, r3, #6
 8016024:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016026:	f103 0116 	add.w	r1, r3, #22
                                  pxNetworkBuffer->pxEndPoint );
 801602a:	68fb      	ldr	r3, [r7, #12]
 801602c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            vNDRefreshCacheEntry( &( pxUDPPacket_IPv6->xEthernetHeader.xSourceAddress ), &( pxUDPPacket_IPv6->xIPHeader.xSourceAddress ),
 801602e:	461a      	mov	r2, r3
 8016030:	f7f4 fe82 	bl	800ad38 <vNDRefreshCacheEntry>

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                size_t uxIPLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 8016034:	68f8      	ldr	r0, [r7, #12]
 8016036:	f7f2 ff7f 	bl	8008f38 <uxIPHeaderSizePacket>
 801603a:	6538      	str	r0, [r7, #80]	@ 0x50
                size_t uxPayloadSize;

                /* Did the owner of this socket register a reception handler ? */
                if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
 801603c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801603e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016040:	2b00      	cmp	r3, #0
 8016042:	d03d      	beq.n	80160c0 <xProcessReceivedUDPPacket_IPv6+0x128>
                {
                    struct freertos_sockaddr xSourceAddress, destinationAddress;
                    /* The application hook needs to know the from- and to-addresses. */

                    void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPLength + ipSIZE_OF_UDP_HEADER ] );
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016048:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801604a:	3316      	adds	r3, #22
 801604c:	4413      	add	r3, r2
 801604e:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
 8016050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016052:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016054:	64bb      	str	r3, [r7, #72]	@ 0x48

                    xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801605a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                    destinationAddress.sin_port = usPort;
 801605c:	897b      	ldrh	r3, [r7, #10]
 801605e:	82fb      	strh	r3, [r7, #22]
                    ( void ) memcpy( xSourceAddress.sin_address.xIP_IPv6.ucBytes, pxUDPPacket_IPv6->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8016060:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016062:	3316      	adds	r3, #22
 8016064:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8016068:	6818      	ldr	r0, [r3, #0]
 801606a:	6859      	ldr	r1, [r3, #4]
 801606c:	689a      	ldr	r2, [r3, #8]
 801606e:	68db      	ldr	r3, [r3, #12]
 8016070:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                    ( void ) memcpy( destinationAddress.sin_address.xIP_IPv6.ucBytes, pxUDPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8016072:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016074:	3326      	adds	r3, #38	@ 0x26
 8016076:	f107 041c 	add.w	r4, r7, #28
 801607a:	6818      	ldr	r0, [r3, #0]
 801607c:	6859      	ldr	r1, [r3, #4]
 801607e:	689a      	ldr	r2, [r3, #8]
 8016080:	68db      	ldr	r3, [r3, #12]
 8016082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                    xSourceAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET6;
 8016084:	230a      	movs	r3, #10
 8016086:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                    destinationAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET6;
 801608a:	230a      	movs	r3, #10
 801608c:	757b      	strb	r3, [r7, #21]
                    xSourceAddress.sin_len = ( uint8_t ) sizeof( xSourceAddress );
 801608e:	2318      	movs	r3, #24
 8016090:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    destinationAddress.sin_len = ( uint8_t ) sizeof( destinationAddress );
 8016094:	2318      	movs	r3, #24
 8016096:	753b      	strb	r3, [r7, #20]
                    uxPayloadSize = pxNetworkBuffer->xDataLength - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER + ( size_t ) ipSIZE_OF_IPv6_HEADER );
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801609c:	3b3e      	subs	r3, #62	@ 0x3e
 801609e:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
                    if( xHandler( ( Socket_t ) pxSocket,
 80160a0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80160a4:	f107 0314 	add.w	r3, r7, #20
 80160a8:	9300      	str	r3, [sp, #0]
 80160aa:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 80160ac:	4613      	mov	r3, r2
 80160ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80160b0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80160b2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80160b4:	47a0      	blx	r4
 80160b6:	4603      	mov	r3, r0
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d001      	beq.n	80160c0 <xProcessReceivedUDPPacket_IPv6+0x128>
                                  ( void * ) pcData,
                                  uxPayloadSize,
                                  &( xSourceAddress ),
                                  &( destinationAddress ) ) != 0 )
                    {
                        xReturn = pdFAIL; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
 80160bc:	2300      	movs	r3, #0
 80160be:	65fb      	str	r3, [r7, #92]	@ 0x5c
                }
            }
            #endif /* if ( ipconfigUDP_MAX_RX_PACKETS > 0U ) */

            #if ( ipconfigUSE_CALLBACKS == 1 ) || ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
 80160c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80160c2:	2b01      	cmp	r3, #1
 80160c4:	d15a      	bne.n	801617c <xProcessReceivedUDPPacket_IPv6+0x1e4>
            #else
                /* xReturn is still pdPASS. */
            #endif
            {
                vTaskSuspendAll();
 80160c6:	f7ed fa8f 	bl	80035e8 <vTaskSuspendAll>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 80160ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80160cc:	3354      	adds	r3, #84	@ 0x54
 80160ce:	68fa      	ldr	r2, [r7, #12]
 80160d0:	4611      	mov	r1, r2
 80160d2:	4618      	mov	r0, r3
 80160d4:	f7ec f9e1 	bl	800249a <vListInsertEnd>
                }
                ( void ) xTaskResumeAll();
 80160d8:	f7ed fa94 	bl	8003604 <xTaskResumeAll>

                /* Set the socket's receive event */
                if( pxSocket->xEventGroup != NULL )
 80160dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80160de:	685b      	ldr	r3, [r3, #4]
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d005      	beq.n	80160f0 <xProcessReceivedUDPPacket_IPv6+0x158>
                {
                    ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 80160e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80160e6:	685b      	ldr	r3, [r3, #4]
 80160e8:	2101      	movs	r1, #1
 80160ea:	4618      	mov	r0, r3
 80160ec:	f7ec f8d0 	bl	8002290 <xEventGroupSetBits>
                }

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 80160f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80160f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d00c      	beq.n	8016112 <xProcessReceivedUDPPacket_IPv6+0x17a>
 80160f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80160fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80160fc:	f003 0301 	and.w	r3, r3, #1
 8016100:	2b00      	cmp	r3, #0
 8016102:	d006      	beq.n	8016112 <xProcessReceivedUDPPacket_IPv6+0x17a>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 8016104:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	2101      	movs	r1, #1
 801610c:	4618      	mov	r0, r3
 801610e:	f7ec f8bf 	bl	8002290 <xEventGroupSetBits>
                }
                #endif

                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
                {
                    if( pxSocket->pxUserSemaphore != NULL )
 8016112:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016116:	2b00      	cmp	r3, #0
 8016118:	d030      	beq.n	801617c <xProcessReceivedUDPPacket_IPv6+0x1e4>
                    {
                        ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 801611a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801611c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801611e:	2300      	movs	r3, #0
 8016120:	2200      	movs	r2, #0
 8016122:	2100      	movs	r1, #0
 8016124:	f7ec fb90 	bl	8002848 <xQueueGenericSend>
 8016128:	e028      	b.n	801617c <xProcessReceivedUDPPacket_IPv6+0x1e4>

                /* A DNS reply, check for the source port.  Although the DNS client
                 * does open a UDP socket to send a messages, this socket will be
                 * closed after a short timeout.  Messages that come late (after the
                 * socket is closed) will be treated here. */
                if( FreeRTOS_ntohs( pxUDPPacket_IPv6->xUDPHeader.usSourcePort ) == ( uint16_t ) ipDNS_PORT )
 801612a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801612c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801612e:	b29b      	uxth	r3, r3
 8016130:	021b      	lsls	r3, r3, #8
 8016132:	b21a      	sxth	r2, r3
 8016134:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016136:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8016138:	b29b      	uxth	r3, r3
 801613a:	0a1b      	lsrs	r3, r3, #8
 801613c:	b29b      	uxth	r3, r3
 801613e:	b21b      	sxth	r3, r3
 8016140:	4313      	orrs	r3, r2
 8016142:	b21b      	sxth	r3, r3
 8016144:	2b35      	cmp	r3, #53	@ 0x35
 8016146:	d105      	bne.n	8016154 <xProcessReceivedUDPPacket_IPv6+0x1bc>
                {
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8016148:	68f8      	ldr	r0, [r7, #12]
 801614a:	f7f0 fc5c 	bl	8006a06 <ulDNSHandlePacket>
 801614e:	4603      	mov	r3, r0
 8016150:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8016152:	e013      	b.n	801617c <xProcessReceivedUDPPacket_IPv6+0x1e4>
                else
            #endif

            #if ( ipconfigUSE_DNS == 1 ) && ( ipconfigUSE_LLMNR == 1 )
                /* A LLMNR request, check for the destination port. */
                if( ( usPort == FreeRTOS_htons( ipLLMNR_PORT ) ) ||
 8016154:	897b      	ldrh	r3, [r7, #10]
 8016156:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 801615a:	4293      	cmp	r3, r2
 801615c:	d006      	beq.n	801616c <xProcessReceivedUDPPacket_IPv6+0x1d4>
                    ( pxUDPPacket_IPv6->xUDPHeader.usSourcePort == FreeRTOS_htons( ipLLMNR_PORT ) ) )
 801615e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016160:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8016162:	b29b      	uxth	r3, r3
                if( ( usPort == FreeRTOS_htons( ipLLMNR_PORT ) ) ||
 8016164:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 8016168:	4293      	cmp	r3, r2
 801616a:	d105      	bne.n	8016178 <xProcessReceivedUDPPacket_IPv6+0x1e0>
                {
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 801616c:	68f8      	ldr	r0, [r7, #12]
 801616e:	f7f0 fc4a 	bl	8006a06 <ulDNSHandlePacket>
 8016172:	4603      	mov	r3, r0
 8016174:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8016176:	e001      	b.n	801617c <xProcessReceivedUDPPacket_IPv6+0x1e4>
                    xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
                }
                else
            #endif /* ipconfigUSE_NBNS */
            {
                xReturn = pdFAIL;
 8016178:	2300      	movs	r3, #0
 801617a:	65fb      	str	r3, [r7, #92]	@ 0x5c
            }
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 801617c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 801617e:	4618      	mov	r0, r3
 8016180:	3764      	adds	r7, #100	@ 0x64
 8016182:	46bd      	mov	sp, r7
 8016184:	bd90      	pop	{r4, r7, pc}
 8016186:	bf00      	nop
 8016188:	08025638 	.word	0x08025638
 801618c:	0802566c 	.word	0x0802566c

08016190 <bIsValidNetworkDescriptor>:
    }
    /*-----------------------------------------------------------*/

#else /* if ( ipconfigTCP_IP_SANITY != 0 ) */
    static UBaseType_t bIsValidNetworkDescriptor( const NetworkBufferDescriptor_t * pxDesc )
    {
 8016190:	b480      	push	{r7}
 8016192:	b083      	sub	sp, #12
 8016194:	af00      	add	r7, sp, #0
 8016196:	6078      	str	r0, [r7, #4]
        ( void ) pxDesc;
        return ( UBaseType_t ) pdTRUE;
 8016198:	2301      	movs	r3, #1
    }
 801619a:	4618      	mov	r0, r3
 801619c:	370c      	adds	r7, #12
 801619e:	46bd      	mov	sp, r7
 80161a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161a4:	4770      	bx	lr

080161a6 <prvShowWarnings>:
    /*-----------------------------------------------------------*/

    static void prvShowWarnings( void )
    {
 80161a6:	b480      	push	{r7}
 80161a8:	af00      	add	r7, sp, #0
    }
 80161aa:	bf00      	nop
 80161ac:	46bd      	mov	sp, r7
 80161ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161b2:	4770      	bx	lr

080161b4 <xNetworkBuffersInitialise>:
    /*-----------------------------------------------------------*/

#endif /* ipconfigTCP_IP_SANITY */

BaseType_t xNetworkBuffersInitialise( void )
{
 80161b4:	b580      	push	{r7, lr}
 80161b6:	b082      	sub	sp, #8
 80161b8:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    uint32_t x;

    /* Only initialise the buffers and their associated kernel objects if they
     * have not been initialised before. */
    if( xNetworkBufferSemaphore == NULL )
 80161ba:	4b2e      	ldr	r3, [pc, #184]	@ (8016274 <xNetworkBuffersInitialise+0xc0>)
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d149      	bne.n	8016256 <xNetworkBuffersInitialise+0xa2>
                ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS,
                &xNetworkBufferSemaphoreBuffer );
        }
        #else
        {
            xNetworkBufferSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
 80161c2:	2140      	movs	r1, #64	@ 0x40
 80161c4:	2040      	movs	r0, #64	@ 0x40
 80161c6:	f7ec fb15 	bl	80027f4 <xQueueCreateCountingSemaphore>
 80161ca:	4603      	mov	r3, r0
 80161cc:	4a29      	ldr	r2, [pc, #164]	@ (8016274 <xNetworkBuffersInitialise+0xc0>)
 80161ce:	6013      	str	r3, [r2, #0]
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        configASSERT( xNetworkBufferSemaphore != NULL );
 80161d0:	4b28      	ldr	r3, [pc, #160]	@ (8016274 <xNetworkBuffersInitialise+0xc0>)
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d103      	bne.n	80161e0 <xNetworkBuffersInitialise+0x2c>
 80161d8:	21c3      	movs	r1, #195	@ 0xc3
 80161da:	4827      	ldr	r0, [pc, #156]	@ (8016278 <xNetworkBuffersInitialise+0xc4>)
 80161dc:	f7ea ff9c 	bl	8001118 <vAssertCalled>

        if( xNetworkBufferSemaphore != NULL )
 80161e0:	4b24      	ldr	r3, [pc, #144]	@ (8016274 <xNetworkBuffersInitialise+0xc0>)
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d036      	beq.n	8016256 <xNetworkBuffersInitialise+0xa2>
        {
            vListInitialise( &xFreeBuffersList );
 80161e8:	4824      	ldr	r0, [pc, #144]	@ (801627c <xNetworkBuffersInitialise+0xc8>)
 80161ea:	f7ec f929 	bl	8002440 <vListInitialise>

            /* Initialise all the network buffers.  The buffer storage comes
             * from the network interface, and different hardware has different
             * requirements. */
            vNetworkInterfaceAllocateRAMToBuffers( xNetworkBuffers );
 80161ee:	4824      	ldr	r0, [pc, #144]	@ (8016280 <xNetworkBuffersInitialise+0xcc>)
 80161f0:	f001 fa24 	bl	801763c <vNetworkInterfaceAllocateRAMToBuffers>

            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 80161f4:	2300      	movs	r3, #0
 80161f6:	603b      	str	r3, [r7, #0]
 80161f8:	e027      	b.n	801624a <xNetworkBuffersInitialise+0x96>
            {
                /* Initialise and set the owner of the buffer list items. */
                vListInitialiseItem( &( xNetworkBuffers[ x ].xBufferListItem ) );
 80161fa:	683a      	ldr	r2, [r7, #0]
 80161fc:	4613      	mov	r3, r2
 80161fe:	00db      	lsls	r3, r3, #3
 8016200:	1a9b      	subs	r3, r3, r2
 8016202:	00db      	lsls	r3, r3, #3
 8016204:	4a1e      	ldr	r2, [pc, #120]	@ (8016280 <xNetworkBuffersInitialise+0xcc>)
 8016206:	4413      	add	r3, r2
 8016208:	4618      	mov	r0, r3
 801620a:	f7ec f939 	bl	8002480 <vListInitialiseItem>
                listSET_LIST_ITEM_OWNER( &( xNetworkBuffers[ x ].xBufferListItem ), &xNetworkBuffers[ x ] );
 801620e:	683a      	ldr	r2, [r7, #0]
 8016210:	4613      	mov	r3, r2
 8016212:	00db      	lsls	r3, r3, #3
 8016214:	1a9b      	subs	r3, r3, r2
 8016216:	00db      	lsls	r3, r3, #3
 8016218:	4a19      	ldr	r2, [pc, #100]	@ (8016280 <xNetworkBuffersInitialise+0xcc>)
 801621a:	1899      	adds	r1, r3, r2
 801621c:	4818      	ldr	r0, [pc, #96]	@ (8016280 <xNetworkBuffersInitialise+0xcc>)
 801621e:	683a      	ldr	r2, [r7, #0]
 8016220:	4613      	mov	r3, r2
 8016222:	00db      	lsls	r3, r3, #3
 8016224:	1a9b      	subs	r3, r3, r2
 8016226:	00db      	lsls	r3, r3, #3
 8016228:	4403      	add	r3, r0
 801622a:	330c      	adds	r3, #12
 801622c:	6019      	str	r1, [r3, #0]

                /* Currently, all buffers are available for use. */
                vListInsert( &xFreeBuffersList, &( xNetworkBuffers[ x ].xBufferListItem ) );
 801622e:	683a      	ldr	r2, [r7, #0]
 8016230:	4613      	mov	r3, r2
 8016232:	00db      	lsls	r3, r3, #3
 8016234:	1a9b      	subs	r3, r3, r2
 8016236:	00db      	lsls	r3, r3, #3
 8016238:	4a11      	ldr	r2, [pc, #68]	@ (8016280 <xNetworkBuffersInitialise+0xcc>)
 801623a:	4413      	add	r3, r2
 801623c:	4619      	mov	r1, r3
 801623e:	480f      	ldr	r0, [pc, #60]	@ (801627c <xNetworkBuffersInitialise+0xc8>)
 8016240:	f7ec f94f 	bl	80024e2 <vListInsert>
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 8016244:	683b      	ldr	r3, [r7, #0]
 8016246:	3301      	adds	r3, #1
 8016248:	603b      	str	r3, [r7, #0]
 801624a:	683b      	ldr	r3, [r7, #0]
 801624c:	2b3f      	cmp	r3, #63	@ 0x3f
 801624e:	d9d4      	bls.n	80161fa <xNetworkBuffersInitialise+0x46>
            }

            uxMinimumFreeNetworkBuffers = ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 8016250:	4b0c      	ldr	r3, [pc, #48]	@ (8016284 <xNetworkBuffersInitialise+0xd0>)
 8016252:	2240      	movs	r2, #64	@ 0x40
 8016254:	601a      	str	r2, [r3, #0]
        }
    }

    if( xNetworkBufferSemaphore == NULL )
 8016256:	4b07      	ldr	r3, [pc, #28]	@ (8016274 <xNetworkBuffersInitialise+0xc0>)
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	2b00      	cmp	r3, #0
 801625c:	d102      	bne.n	8016264 <xNetworkBuffersInitialise+0xb0>
    {
        xReturn = pdFAIL;
 801625e:	2300      	movs	r3, #0
 8016260:	607b      	str	r3, [r7, #4]
 8016262:	e001      	b.n	8016268 <xNetworkBuffersInitialise+0xb4>
    }
    else
    {
        xReturn = pdPASS;
 8016264:	2301      	movs	r3, #1
 8016266:	607b      	str	r3, [r7, #4]
    }

    return xReturn;
 8016268:	687b      	ldr	r3, [r7, #4]
}
 801626a:	4618      	mov	r0, r3
 801626c:	3708      	adds	r7, #8
 801626e:	46bd      	mov	sp, r7
 8016270:	bd80      	pop	{r7, pc}
 8016272:	bf00      	nop
 8016274:	20002110 	.word	0x20002110
 8016278:	080256ac 	.word	0x080256ac
 801627c:	200012f8 	.word	0x200012f8
 8016280:	20001310 	.word	0x20001310
 8016284:	2000130c 	.word	0x2000130c

08016288 <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t * pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes,
                                                              TickType_t xBlockTimeTicks )
{
 8016288:	b580      	push	{r7, lr}
 801628a:	b086      	sub	sp, #24
 801628c:	af00      	add	r7, sp, #0
 801628e:	6078      	str	r0, [r7, #4]
 8016290:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxReturn = NULL;
 8016292:	2300      	movs	r3, #0
 8016294:	617b      	str	r3, [r7, #20]
    BaseType_t xInvalid = pdFALSE;
 8016296:	2300      	movs	r3, #0
 8016298:	613b      	str	r3, [r7, #16]

    /* The current implementation only has a single size memory block, so
     * the requested size parameter is not used (yet). */
    ( void ) xRequestedSizeBytes;

    if( xNetworkBufferSemaphore != NULL )
 801629a:	4b2a      	ldr	r3, [pc, #168]	@ (8016344 <pxGetNetworkBufferWithDescriptor+0xbc>)
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d04b      	beq.n	801633a <pxGetNetworkBufferWithDescriptor+0xb2>
    {
        /* If there is a semaphore available, there is a network buffer
         * available. */
        if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 80162a2:	4b28      	ldr	r3, [pc, #160]	@ (8016344 <pxGetNetworkBufferWithDescriptor+0xbc>)
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	6839      	ldr	r1, [r7, #0]
 80162a8:	4618      	mov	r0, r3
 80162aa:	f7ec fc85 	bl	8002bb8 <xQueueSemaphoreTake>
 80162ae:	4603      	mov	r3, r0
 80162b0:	2b01      	cmp	r3, #1
 80162b2:	d13d      	bne.n	8016330 <pxGetNetworkBufferWithDescriptor+0xa8>
        {
            /* Protect the structure as it is accessed from tasks and
             * interrupts. */
            ipconfigBUFFER_ALLOC_LOCK();
 80162b4:	f7ef f814 	bl	80052e0 <vPortEnterCritical>
            {
                pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 80162b8:	4b23      	ldr	r3, [pc, #140]	@ (8016348 <pxGetNetworkBufferWithDescriptor+0xc0>)
 80162ba:	68db      	ldr	r3, [r3, #12]
 80162bc:	68db      	ldr	r3, [r3, #12]
 80162be:	617b      	str	r3, [r7, #20]

                if( ( bIsValidNetworkDescriptor( pxReturn ) != pdFALSE_UNSIGNED ) &&
 80162c0:	6978      	ldr	r0, [r7, #20]
 80162c2:	f7ff ff65 	bl	8016190 <bIsValidNetworkDescriptor>
 80162c6:	4603      	mov	r3, r0
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d009      	beq.n	80162e0 <pxGetNetworkBufferWithDescriptor+0x58>
                    listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxReturn->xBufferListItem ) ) )
 80162cc:	697b      	ldr	r3, [r7, #20]
 80162ce:	691b      	ldr	r3, [r3, #16]
                if( ( bIsValidNetworkDescriptor( pxReturn ) != pdFALSE_UNSIGNED ) &&
 80162d0:	4a1d      	ldr	r2, [pc, #116]	@ (8016348 <pxGetNetworkBufferWithDescriptor+0xc0>)
 80162d2:	4293      	cmp	r3, r2
 80162d4:	d104      	bne.n	80162e0 <pxGetNetworkBufferWithDescriptor+0x58>
                {
                    ( void ) uxListRemove( &( pxReturn->xBufferListItem ) );
 80162d6:	697b      	ldr	r3, [r7, #20]
 80162d8:	4618      	mov	r0, r3
 80162da:	f7ec f93b 	bl	8002554 <uxListRemove>
 80162de:	e001      	b.n	80162e4 <pxGetNetworkBufferWithDescriptor+0x5c>
                }
                else
                {
                    xInvalid = pdTRUE;
 80162e0:	2301      	movs	r3, #1
 80162e2:	613b      	str	r3, [r7, #16]
                }
            }
            ipconfigBUFFER_ALLOC_UNLOCK();
 80162e4:	f7ef f828 	bl	8005338 <vPortExitCritical>

            if( xInvalid == pdTRUE )
 80162e8:	693b      	ldr	r3, [r7, #16]
 80162ea:	2b01      	cmp	r3, #1
 80162ec:	d10b      	bne.n	8016306 <pxGetNetworkBufferWithDescriptor+0x7e>
                 * above says this can be called from an interrupt too) */

                /* _HT_ The function shall not be called from an ISR. Comment
                 * was indeed misleading. Hopefully clear now?
                 * So the printf()is OK here. */
                FreeRTOS_debug_printf( ( "pxGetNetworkBufferWithDescriptor: INVALID BUFFER: %p (valid %lu)\n",
 80162ee:	6978      	ldr	r0, [r7, #20]
 80162f0:	f7ff ff4e 	bl	8016190 <bIsValidNetworkDescriptor>
 80162f4:	4603      	mov	r3, r0
 80162f6:	461a      	mov	r2, r3
 80162f8:	6979      	ldr	r1, [r7, #20]
 80162fa:	4814      	ldr	r0, [pc, #80]	@ (801634c <pxGetNetworkBufferWithDescriptor+0xc4>)
 80162fc:	f00a f916 	bl	802052c <lUDPLoggingPrintf>
                                         pxReturn, bIsValidNetworkDescriptor( pxReturn ) ) );
                pxReturn = NULL;
 8016300:	2300      	movs	r3, #0
 8016302:	617b      	str	r3, [r7, #20]
 8016304:	e019      	b.n	801633a <pxGetNetworkBufferWithDescriptor+0xb2>
            }
            else
            {
                /* Reading UBaseType_t, no critical section needed. */
                uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8016306:	4b10      	ldr	r3, [pc, #64]	@ (8016348 <pxGetNetworkBufferWithDescriptor+0xc0>)
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	60fb      	str	r3, [r7, #12]

                /* For stats, latch the lowest number of network buffers since
                 * booting. */
                if( uxMinimumFreeNetworkBuffers > uxCount )
 801630c:	4b10      	ldr	r3, [pc, #64]	@ (8016350 <pxGetNetworkBufferWithDescriptor+0xc8>)
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	68fa      	ldr	r2, [r7, #12]
 8016312:	429a      	cmp	r2, r3
 8016314:	d202      	bcs.n	801631c <pxGetNetworkBufferWithDescriptor+0x94>
                {
                    uxMinimumFreeNetworkBuffers = uxCount;
 8016316:	4a0e      	ldr	r2, [pc, #56]	@ (8016350 <pxGetNetworkBufferWithDescriptor+0xc8>)
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	6013      	str	r3, [r2, #0]
                }

                pxReturn->xDataLength = xRequestedSizeBytes;
 801631c:	697b      	ldr	r3, [r7, #20]
 801631e:	687a      	ldr	r2, [r7, #4]
 8016320:	629a      	str	r2, [r3, #40]	@ 0x28
                pxReturn->pxInterface = NULL;
 8016322:	697b      	ldr	r3, [r7, #20]
 8016324:	2200      	movs	r2, #0
 8016326:	62da      	str	r2, [r3, #44]	@ 0x2c
                pxReturn->pxEndPoint = NULL;
 8016328:	697b      	ldr	r3, [r7, #20]
 801632a:	2200      	movs	r2, #0
 801632c:	631a      	str	r2, [r3, #48]	@ 0x30
 801632e:	e004      	b.n	801633a <pxGetNetworkBufferWithDescriptor+0xb2>
            iptraceNETWORK_BUFFER_OBTAINED( pxReturn );
        }
        else
        {
            /* lint wants to see at least a comment. */
            iptraceFAILED_TO_OBTAIN_NETWORK_BUFFER();
 8016330:	f240 113b 	movw	r1, #315	@ 0x13b
 8016334:	4807      	ldr	r0, [pc, #28]	@ (8016354 <pxGetNetworkBufferWithDescriptor+0xcc>)
 8016336:	f7ea feef 	bl	8001118 <vAssertCalled>
        }
    }

    return pxReturn;
 801633a:	697b      	ldr	r3, [r7, #20]
}
 801633c:	4618      	mov	r0, r3
 801633e:	3718      	adds	r7, #24
 8016340:	46bd      	mov	sp, r7
 8016342:	bd80      	pop	{r7, pc}
 8016344:	20002110 	.word	0x20002110
 8016348:	200012f8 	.word	0x200012f8
 801634c:	080256f8 	.word	0x080256f8
 8016350:	2000130c 	.word	0x2000130c
 8016354:	080256ac 	.word	0x080256ac

08016358 <vReleaseNetworkBufferAndDescriptor>:
    return xHigherPriorityTaskWoken;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8016358:	b580      	push	{r7, lr}
 801635a:	b084      	sub	sp, #16
 801635c:	af00      	add	r7, sp, #0
 801635e:	6078      	str	r0, [r7, #4]
    BaseType_t xListItemAlreadyInFreeList;

    if( bIsValidNetworkDescriptor( pxNetworkBuffer ) == pdFALSE_UNSIGNED )
 8016360:	6878      	ldr	r0, [r7, #4]
 8016362:	f7ff ff15 	bl	8016190 <bIsValidNetworkDescriptor>
 8016366:	4603      	mov	r3, r0
 8016368:	2b00      	cmp	r3, #0
 801636a:	d104      	bne.n	8016376 <vReleaseNetworkBufferAndDescriptor+0x1e>
    {
        FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: Invalid buffer %p\n", pxNetworkBuffer ) );
 801636c:	6879      	ldr	r1, [r7, #4]
 801636e:	4819      	ldr	r0, [pc, #100]	@ (80163d4 <vReleaseNetworkBufferAndDescriptor+0x7c>)
 8016370:	f00a f8dc 	bl	802052c <lUDPLoggingPrintf>
            prvShowWarnings();
        }

        iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
    }
}
 8016374:	e029      	b.n	80163ca <vReleaseNetworkBufferAndDescriptor+0x72>
        ipconfigBUFFER_ALLOC_LOCK();
 8016376:	f7ee ffb3 	bl	80052e0 <vPortEnterCritical>
                xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	691b      	ldr	r3, [r3, #16]
 801637e:	4a16      	ldr	r2, [pc, #88]	@ (80163d8 <vReleaseNetworkBufferAndDescriptor+0x80>)
 8016380:	4293      	cmp	r3, r2
 8016382:	d101      	bne.n	8016388 <vReleaseNetworkBufferAndDescriptor+0x30>
 8016384:	2301      	movs	r3, #1
 8016386:	e000      	b.n	801638a <vReleaseNetworkBufferAndDescriptor+0x32>
 8016388:	2300      	movs	r3, #0
 801638a:	60fb      	str	r3, [r7, #12]
                if( xListItemAlreadyInFreeList == pdFALSE )
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	2b00      	cmp	r3, #0
 8016390:	d104      	bne.n	801639c <vReleaseNetworkBufferAndDescriptor+0x44>
                    vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	4619      	mov	r1, r3
 8016396:	4810      	ldr	r0, [pc, #64]	@ (80163d8 <vReleaseNetworkBufferAndDescriptor+0x80>)
 8016398:	f7ec f87f 	bl	800249a <vListInsertEnd>
        ipconfigBUFFER_ALLOC_UNLOCK();
 801639c:	f7ee ffcc 	bl	8005338 <vPortExitCritical>
        if( xListItemAlreadyInFreeList )
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d008      	beq.n	80163b8 <vReleaseNetworkBufferAndDescriptor+0x60>
            FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: %p ALREADY RELEASED (now %lu)\n",
 80163a6:	f000 f829 	bl	80163fc <uxGetNumberOfFreeNetworkBuffers>
 80163aa:	4603      	mov	r3, r0
 80163ac:	461a      	mov	r2, r3
 80163ae:	6879      	ldr	r1, [r7, #4]
 80163b0:	480a      	ldr	r0, [pc, #40]	@ (80163dc <vReleaseNetworkBufferAndDescriptor+0x84>)
 80163b2:	f00a f8bb 	bl	802052c <lUDPLoggingPrintf>
}
 80163b6:	e008      	b.n	80163ca <vReleaseNetworkBufferAndDescriptor+0x72>
            ( void ) xSemaphoreGive( xNetworkBufferSemaphore );
 80163b8:	4b09      	ldr	r3, [pc, #36]	@ (80163e0 <vReleaseNetworkBufferAndDescriptor+0x88>)
 80163ba:	6818      	ldr	r0, [r3, #0]
 80163bc:	2300      	movs	r3, #0
 80163be:	2200      	movs	r2, #0
 80163c0:	2100      	movs	r1, #0
 80163c2:	f7ec fa41 	bl	8002848 <xQueueGenericSend>
            prvShowWarnings();
 80163c6:	f7ff feee 	bl	80161a6 <prvShowWarnings>
}
 80163ca:	bf00      	nop
 80163cc:	3710      	adds	r7, #16
 80163ce:	46bd      	mov	sp, r7
 80163d0:	bd80      	pop	{r7, pc}
 80163d2:	bf00      	nop
 80163d4:	0802573c 	.word	0x0802573c
 80163d8:	200012f8 	.word	0x200012f8
 80163dc:	08025774 	.word	0x08025774
 80163e0:	20002110 	.word	0x20002110

080163e4 <uxGetMinimumFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetMinimumFreeNetworkBuffers( void )
{
 80163e4:	b480      	push	{r7}
 80163e6:	af00      	add	r7, sp, #0
    return uxMinimumFreeNetworkBuffers;
 80163e8:	4b03      	ldr	r3, [pc, #12]	@ (80163f8 <uxGetMinimumFreeNetworkBuffers+0x14>)
 80163ea:	681b      	ldr	r3, [r3, #0]
}
 80163ec:	4618      	mov	r0, r3
 80163ee:	46bd      	mov	sp, r7
 80163f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163f4:	4770      	bx	lr
 80163f6:	bf00      	nop
 80163f8:	2000130c 	.word	0x2000130c

080163fc <uxGetNumberOfFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetNumberOfFreeNetworkBuffers( void )
{
 80163fc:	b480      	push	{r7}
 80163fe:	af00      	add	r7, sp, #0
    return listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8016400:	4b03      	ldr	r3, [pc, #12]	@ (8016410 <uxGetNumberOfFreeNetworkBuffers+0x14>)
 8016402:	681b      	ldr	r3, [r3, #0]
}
 8016404:	4618      	mov	r0, r3
 8016406:	46bd      	mov	sp, r7
 8016408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801640c:	4770      	bx	lr
 801640e:	bf00      	nop
 8016410:	200012f8 	.word	0x200012f8

08016414 <xHas_1F_PHYSPCS>:
/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask );

static BaseType_t xHas_1F_PHYSPCS( uint32_t ulPhyID )
{
 8016414:	b480      	push	{r7}
 8016416:	b085      	sub	sp, #20
 8016418:	af00      	add	r7, sp, #0
 801641a:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 801641c:	2300      	movs	r3, #0
 801641e:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	4a11      	ldr	r2, [pc, #68]	@ (8016468 <xHas_1F_PHYSPCS+0x54>)
 8016424:	4293      	cmp	r3, r2
 8016426:	d016      	beq.n	8016456 <xHas_1F_PHYSPCS+0x42>
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	4a0f      	ldr	r2, [pc, #60]	@ (8016468 <xHas_1F_PHYSPCS+0x54>)
 801642c:	4293      	cmp	r3, r2
 801642e:	d80f      	bhi.n	8016450 <xHas_1F_PHYSPCS+0x3c>
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	4a0e      	ldr	r2, [pc, #56]	@ (801646c <xHas_1F_PHYSPCS+0x58>)
 8016434:	4293      	cmp	r3, r2
 8016436:	d00e      	beq.n	8016456 <xHas_1F_PHYSPCS+0x42>
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	4a0c      	ldr	r2, [pc, #48]	@ (801646c <xHas_1F_PHYSPCS+0x58>)
 801643c:	4293      	cmp	r3, r2
 801643e:	d807      	bhi.n	8016450 <xHas_1F_PHYSPCS+0x3c>
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	4a0b      	ldr	r2, [pc, #44]	@ (8016470 <xHas_1F_PHYSPCS+0x5c>)
 8016444:	4293      	cmp	r3, r2
 8016446:	d006      	beq.n	8016456 <xHas_1F_PHYSPCS+0x42>
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	4a0a      	ldr	r2, [pc, #40]	@ (8016474 <xHas_1F_PHYSPCS+0x60>)
 801644c:	4293      	cmp	r3, r2
 801644e:	d002      	beq.n	8016456 <xHas_1F_PHYSPCS+0x42>
        case PHY_ID_KSZ8081MNXIA:

        case PHY_ID_KSZ8863:
        default:
            /* Most PHY's have a 1F_PHYSPCS */
            xResult = pdTRUE;
 8016450:	2301      	movs	r3, #1
 8016452:	60fb      	str	r3, [r7, #12]
            break;
 8016454:	e000      	b.n	8016458 <xHas_1F_PHYSPCS+0x44>
        case PHY_ID_DP83848I:
        case PHY_ID_DP83TC811S:
        case PHY_ID_TM4C129X:
        case PHY_ID_MV88E6071:
            /* Has no 0x1F register "PHY Special Control Status". */
            break;
 8016456:	bf00      	nop
    }

    return xResult;
 8016458:	68fb      	ldr	r3, [r7, #12]
}
 801645a:	4618      	mov	r0, r3
 801645c:	3714      	adds	r7, #20
 801645e:	46bd      	mov	sp, r7
 8016460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016464:	4770      	bx	lr
 8016466:	bf00      	nop
 8016468:	ff000710 	.word	0xff000710
 801646c:	2000a250 	.word	0x2000a250
 8016470:	20005c90 	.word	0x20005c90
 8016474:	2000a221 	.word	0x2000a221

08016478 <xHas_19_PHYCR>:
/*-----------------------------------------------------------*/

static BaseType_t xHas_19_PHYCR( uint32_t ulPhyID )
{
 8016478:	b480      	push	{r7}
 801647a:	b085      	sub	sp, #20
 801647c:	af00      	add	r7, sp, #0
 801647e:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 8016480:	2300      	movs	r3, #0
 8016482:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	4a0d      	ldr	r2, [pc, #52]	@ (80164bc <xHas_19_PHYCR+0x44>)
 8016488:	4293      	cmp	r3, r2
 801648a:	d00b      	beq.n	80164a4 <xHas_19_PHYCR+0x2c>
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	4a0b      	ldr	r2, [pc, #44]	@ (80164bc <xHas_19_PHYCR+0x44>)
 8016490:	4293      	cmp	r3, r2
 8016492:	d80a      	bhi.n	80164aa <xHas_19_PHYCR+0x32>
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	4a0a      	ldr	r2, [pc, #40]	@ (80164c0 <xHas_19_PHYCR+0x48>)
 8016498:	4293      	cmp	r3, r2
 801649a:	d003      	beq.n	80164a4 <xHas_19_PHYCR+0x2c>
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	4a09      	ldr	r2, [pc, #36]	@ (80164c4 <xHas_19_PHYCR+0x4c>)
 80164a0:	4293      	cmp	r3, r2
 80164a2:	d102      	bne.n	80164aa <xHas_19_PHYCR+0x32>
    {
        case PHY_ID_LAN8742A:
        case PHY_ID_DP83848I:
        case PHY_ID_TM4C129X:
            xResult = pdTRUE;
 80164a4:	2301      	movs	r3, #1
 80164a6:	60fb      	str	r3, [r7, #12]
            break;
 80164a8:	e000      	b.n	80164ac <xHas_19_PHYCR+0x34>

        case PHY_ID_MV88E6071: /* Marvell 88E6071 */
        default:
            /* Most PHY's do not have a 19_PHYCR */
            break;
 80164aa:	bf00      	nop
    }

    return xResult;
 80164ac:	68fb      	ldr	r3, [r7, #12]
}
 80164ae:	4618      	mov	r0, r3
 80164b0:	3714      	adds	r7, #20
 80164b2:	46bd      	mov	sp, r7
 80164b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164b8:	4770      	bx	lr
 80164ba:	bf00      	nop
 80164bc:	2000a221 	.word	0x2000a221
 80164c0:	0007c130 	.word	0x0007c130
 80164c4:	20005c90 	.word	0x20005c90

080164c8 <vPhyInitialise>:

/* Initialise the struct and assign a PHY-read and -write function. */
void vPhyInitialise( EthernetPhy_t * pxPhyObject,
                     xApplicationPhyReadHook_t fnPhyRead,
                     xApplicationPhyWriteHook_t fnPhyWrite )
{
 80164c8:	b580      	push	{r7, lr}
 80164ca:	b084      	sub	sp, #16
 80164cc:	af00      	add	r7, sp, #0
 80164ce:	60f8      	str	r0, [r7, #12]
 80164d0:	60b9      	str	r1, [r7, #8]
 80164d2:	607a      	str	r2, [r7, #4]
    memset( ( void * ) pxPhyObject, 0, sizeof( *pxPhyObject ) );
 80164d4:	2240      	movs	r2, #64	@ 0x40
 80164d6:	2100      	movs	r1, #0
 80164d8:	68f8      	ldr	r0, [r7, #12]
 80164da:	f00a fb50 	bl	8020b7e <memset>

    pxPhyObject->fnPhyRead = fnPhyRead;
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	68ba      	ldr	r2, [r7, #8]
 80164e2:	601a      	str	r2, [r3, #0]
    pxPhyObject->fnPhyWrite = fnPhyWrite;
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	687a      	ldr	r2, [r7, #4]
 80164e8:	605a      	str	r2, [r3, #4]
}
 80164ea:	bf00      	nop
 80164ec:	3710      	adds	r7, #16
 80164ee:	46bd      	mov	sp, r7
 80164f0:	bd80      	pop	{r7, pc}
	...

080164f4 <xPhyDiscover>:
/*-----------------------------------------------------------*/

/* Discover all PHY's connected by polling 32 indexes ( zero-based ) */
BaseType_t xPhyDiscover( EthernetPhy_t * pxPhyObject )
{
 80164f4:	b580      	push	{r7, lr}
 80164f6:	b086      	sub	sp, #24
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	6078      	str	r0, [r7, #4]
    BaseType_t xPhyAddress;

    pxPhyObject->xPortCount = 0;
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	2200      	movs	r2, #0
 8016500:	629a      	str	r2, [r3, #40]	@ 0x28

    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8016502:	2300      	movs	r3, #0
 8016504:	617b      	str	r3, [r7, #20]
 8016506:	e03a      	b.n	801657e <xPhyDiscover+0x8a>
    {
        uint32_t ulLowerID = 0U;
 8016508:	2300      	movs	r3, #0
 801650a:	60fb      	str	r3, [r7, #12]

        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_03_PHYSID2, &ulLowerID );
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	f107 020c 	add.w	r2, r7, #12
 8016514:	2103      	movs	r1, #3
 8016516:	6978      	ldr	r0, [r7, #20]
 8016518:	4798      	blx	r3

        /* A valid PHY id can not be all zeros or all ones. */
        if( ( ulLowerID != ( uint16_t ) ~0U ) && ( ulLowerID != ( uint16_t ) 0U ) )
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016520:	4293      	cmp	r3, r2
 8016522:	d029      	beq.n	8016578 <xPhyDiscover+0x84>
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	2b00      	cmp	r3, #0
 8016528:	d026      	beq.n	8016578 <xPhyDiscover+0x84>
        {
            uint32_t ulUpperID;
            uint32_t ulPhyID;

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_02_PHYSID1, &ulUpperID );
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	f107 0208 	add.w	r2, r7, #8
 8016532:	2102      	movs	r1, #2
 8016534:	6978      	ldr	r0, [r7, #20]
 8016536:	4798      	blx	r3
            ulPhyID = ( ( ( uint32_t ) ulUpperID ) << 16 ) | ( ulLowerID & 0xFFF0U );
 8016538:	68bb      	ldr	r3, [r7, #8]
 801653a:	041a      	lsls	r2, r3, #16
 801653c:	68f9      	ldr	r1, [r7, #12]
 801653e:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8016542:	400b      	ands	r3, r1
 8016544:	4313      	orrs	r3, r2
 8016546:	613b      	str	r3, [r7, #16]

            pxPhyObject->ucPhyIndexes[ pxPhyObject->xPortCount ] = ( uint8_t ) xPhyAddress;
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801654c:	697a      	ldr	r2, [r7, #20]
 801654e:	b2d1      	uxtb	r1, r2
 8016550:	687a      	ldr	r2, [r7, #4]
 8016552:	4413      	add	r3, r2
 8016554:	460a      	mov	r2, r1
 8016556:	761a      	strb	r2, [r3, #24]
            pxPhyObject->ulPhyIDs[ pxPhyObject->xPortCount ] = ulPhyID;
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	3202      	adds	r2, #2
 8016560:	6939      	ldr	r1, [r7, #16]
 8016562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            pxPhyObject->xPortCount++;
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801656a:	1c5a      	adds	r2, r3, #1
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* See if there is more storage space. */
            if( pxPhyObject->xPortCount == ipconfigPHY_MAX_PORTS )
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016574:	2b04      	cmp	r3, #4
 8016576:	d005      	beq.n	8016584 <xPhyDiscover+0x90>
    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8016578:	697b      	ldr	r3, [r7, #20]
 801657a:	3301      	adds	r3, #1
 801657c:	617b      	str	r3, [r7, #20]
 801657e:	697b      	ldr	r3, [r7, #20]
 8016580:	2b1f      	cmp	r3, #31
 8016582:	ddc1      	ble.n	8016508 <xPhyDiscover+0x14>
                break;
            }
        }
    }

    if( pxPhyObject->xPortCount > 0 )
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016588:	2b00      	cmp	r3, #0
 801658a:	dd05      	ble.n	8016598 <xPhyDiscover+0xa4>
    {
        FreeRTOS_printf( ( "PHY ID %X\n", ( unsigned int ) pxPhyObject->ulPhyIDs[ 0 ] ) );
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	689b      	ldr	r3, [r3, #8]
 8016590:	4619      	mov	r1, r3
 8016592:	4804      	ldr	r0, [pc, #16]	@ (80165a4 <xPhyDiscover+0xb0>)
 8016594:	f009 ffca 	bl	802052c <lUDPLoggingPrintf>
    }

    return pxPhyObject->xPortCount;
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 801659c:	4618      	mov	r0, r3
 801659e:	3718      	adds	r7, #24
 80165a0:	46bd      	mov	sp, r7
 80165a2:	bd80      	pop	{r7, pc}
 80165a4:	080257b8 	.word	0x080257b8

080165a8 <xPhyReset>:
/*-----------------------------------------------------------*/

/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask )
{
 80165a8:	b580      	push	{r7, lr}
 80165aa:	b08c      	sub	sp, #48	@ 0x30
 80165ac:	af00      	add	r7, sp, #0
 80165ae:	6078      	str	r0, [r7, #4]
 80165b0:	6039      	str	r1, [r7, #0]
    TickType_t xRemainingTime;
    TimeOut_t xTimer;
    BaseType_t xPhyIndex;

    /* A bit-mask of PHY ports that are ready. */
    ulDoneMask = 0U;
 80165b2:	2300      	movs	r3, #0
 80165b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set the RESET bits high. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 80165b6:	2300      	movs	r3, #0
 80165b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80165ba:	e017      	b.n	80165ec <xPhyReset+0x44>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80165bc:	687a      	ldr	r2, [r7, #4]
 80165be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165c0:	4413      	add	r3, r2
 80165c2:	3318      	adds	r3, #24
 80165c4:	781b      	ldrb	r3, [r3, #0]
 80165c6:	61fb      	str	r3, [r7, #28]

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	f107 0218 	add.w	r2, r7, #24
 80165d0:	2100      	movs	r1, #0
 80165d2:	69f8      	ldr	r0, [r7, #28]
 80165d4:	4798      	blx	r3
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig | phyBMCR_RESET );
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	685b      	ldr	r3, [r3, #4]
 80165da:	69ba      	ldr	r2, [r7, #24]
 80165dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80165e0:	2100      	movs	r1, #0
 80165e2:	69f8      	ldr	r0, [r7, #28]
 80165e4:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 80165e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165e8:	3301      	adds	r3, #1
 80165ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80165f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80165f2:	429a      	cmp	r2, r3
 80165f4:	dbe2      	blt.n	80165bc <xPhyReset+0x14>
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_RESET_TIME_MS );
 80165f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80165fa:	617b      	str	r3, [r7, #20]
    vTaskSetTimeOutState( &xTimer );
 80165fc:	f107 030c 	add.w	r3, r7, #12
 8016600:	4618      	mov	r0, r3
 8016602:	f7ed fcad 	bl	8003f60 <vTaskSetTimeOutState>

    /* The reset should last less than a second. */
    for( ; ; )
    {
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016606:	2300      	movs	r3, #0
 8016608:	62bb      	str	r3, [r7, #40]	@ 0x28
 801660a:	e01f      	b.n	801664c <xPhyReset+0xa4>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 801660c:	687a      	ldr	r2, [r7, #4]
 801660e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016610:	4413      	add	r3, r2
 8016612:	3318      	adds	r3, #24
 8016614:	781b      	ldrb	r3, [r3, #0]
 8016616:	623b      	str	r3, [r7, #32]

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	f107 0218 	add.w	r2, r7, #24
 8016620:	2100      	movs	r1, #0
 8016622:	6a38      	ldr	r0, [r7, #32]
 8016624:	4798      	blx	r3

            if( ( ulConfig & phyBMCR_RESET ) == 0 )
 8016626:	69bb      	ldr	r3, [r7, #24]
 8016628:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801662c:	2b00      	cmp	r3, #0
 801662e:	d10a      	bne.n	8016646 <xPhyReset+0x9e>
            {
                FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET %d ready\n", ( int ) xPhyIndex ) );
 8016630:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016632:	482d      	ldr	r0, [pc, #180]	@ (80166e8 <xPhyReset+0x140>)
 8016634:	f009 ff7a 	bl	802052c <lUDPLoggingPrintf>
                ulDoneMask |= ( 1U << xPhyIndex );
 8016638:	2201      	movs	r2, #1
 801663a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801663c:	fa02 f303 	lsl.w	r3, r2, r3
 8016640:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016642:	4313      	orrs	r3, r2
 8016644:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016648:	3301      	adds	r3, #1
 801664a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016650:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016652:	429a      	cmp	r2, r3
 8016654:	dbda      	blt.n	801660c <xPhyReset+0x64>
            }
        }

        if( ulDoneMask == ulPhyMask )
 8016656:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016658:	683b      	ldr	r3, [r7, #0]
 801665a:	429a      	cmp	r2, r3
 801665c:	d013      	beq.n	8016686 <xPhyReset+0xde>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 801665e:	f107 0214 	add.w	r2, r7, #20
 8016662:	f107 030c 	add.w	r3, r7, #12
 8016666:	4611      	mov	r1, r2
 8016668:	4618      	mov	r0, r3
 801666a:	f7ed fcb1 	bl	8003fd0 <xTaskCheckForTimeOut>
 801666e:	4603      	mov	r3, r0
 8016670:	2b00      	cmp	r3, #0
 8016672:	d004      	beq.n	801667e <xPhyReset+0xd6>
        {
            FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
 8016674:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016676:	481d      	ldr	r0, [pc, #116]	@ (80166ec <xPhyReset+0x144>)
 8016678:	f009 ff58 	bl	802052c <lUDPLoggingPrintf>
            break;
 801667c:	e004      	b.n	8016688 <xPhyReset+0xe0>
        }

        /* Block for a while */
        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 801667e:	2032      	movs	r0, #50	@ 0x32
 8016680:	f7ec fefa 	bl	8003478 <vTaskDelay>
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016684:	e7bf      	b.n	8016606 <xPhyReset+0x5e>
            break;
 8016686:	bf00      	nop
    }

    /* Clear the reset bits. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016688:	2300      	movs	r3, #0
 801668a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801668c:	e01e      	b.n	80166cc <xPhyReset+0x124>
    {
        if( ( ulDoneMask & ( 1U << xPhyIndex ) ) == 0U )
 801668e:	2201      	movs	r2, #1
 8016690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016692:	409a      	lsls	r2, r3
 8016694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016696:	4013      	ands	r3, r2
 8016698:	2b00      	cmp	r3, #0
 801669a:	d114      	bne.n	80166c6 <xPhyReset+0x11e>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 801669c:	687a      	ldr	r2, [r7, #4]
 801669e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80166a0:	4413      	add	r3, r2
 80166a2:	3318      	adds	r3, #24
 80166a4:	781b      	ldrb	r3, [r3, #0]
 80166a6:	627b      	str	r3, [r7, #36]	@ 0x24

            /* The reset operation timed out, clear the bit manually. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	681b      	ldr	r3, [r3, #0]
 80166ac:	f107 0218 	add.w	r2, r7, #24
 80166b0:	2100      	movs	r1, #0
 80166b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80166b4:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig & ~phyBMCR_RESET );
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	685b      	ldr	r3, [r3, #4]
 80166ba:	69ba      	ldr	r2, [r7, #24]
 80166bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80166c0:	2100      	movs	r1, #0
 80166c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80166c4:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 80166c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80166c8:	3301      	adds	r3, #1
 80166ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80166d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80166d2:	429a      	cmp	r2, r3
 80166d4:	dbdb      	blt.n	801668e <xPhyReset+0xe6>
        }
    }

    vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 80166d6:	2032      	movs	r0, #50	@ 0x32
 80166d8:	f7ec fece 	bl	8003478 <vTaskDelay>

    return ulDoneMask;
 80166dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80166de:	4618      	mov	r0, r3
 80166e0:	3730      	adds	r7, #48	@ 0x30
 80166e2:	46bd      	mov	sp, r7
 80166e4:	bd80      	pop	{r7, pc}
 80166e6:	bf00      	nop
 80166e8:	080257c4 	.word	0x080257c4
 80166ec:	080257e8 	.word	0x080257e8

080166f0 <xPhyConfigure>:
/*-----------------------------------------------------------*/

BaseType_t xPhyConfigure( EthernetPhy_t * pxPhyObject,
                          const PhyProperties_t * pxPhyProperties )
{
 80166f0:	b580      	push	{r7, lr}
 80166f2:	b088      	sub	sp, #32
 80166f4:	af00      	add	r7, sp, #0
 80166f6:	6078      	str	r0, [r7, #4]
 80166f8:	6039      	str	r1, [r7, #0]
    uint32_t ulConfig, ulAdvertise;
    BaseType_t xPhyIndex;

    if( pxPhyObject->xPortCount < 1 )
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80166fe:	2b00      	cmp	r3, #0
 8016700:	dc05      	bgt.n	801670e <xPhyConfigure+0x1e>
    {
        FreeRTOS_printf( ( "xPhyConfigure: No PHY's detected.\n" ) );
 8016702:	487c      	ldr	r0, [pc, #496]	@ (80168f4 <xPhyConfigure+0x204>)
 8016704:	f009 ff12 	bl	802052c <lUDPLoggingPrintf>
        return -1;
 8016708:	f04f 33ff 	mov.w	r3, #4294967295
 801670c:	e0ed      	b.n	80168ea <xPhyConfigure+0x1fa>
    /* The expected ID for the 'LAN8742A'  is 0x0007c130. */
    /* The expected ID for the 'LAN8720'   is 0x0007c0f0. */
    /* The expected ID for the 'DP83848I'  is 0x20005C90. */

    /* Set advertise register. */
    if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) && ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 801670e:	683b      	ldr	r3, [r7, #0]
 8016710:	781b      	ldrb	r3, [r3, #0]
 8016712:	2b03      	cmp	r3, #3
 8016714:	d107      	bne.n	8016726 <xPhyConfigure+0x36>
 8016716:	683b      	ldr	r3, [r7, #0]
 8016718:	789b      	ldrb	r3, [r3, #2]
 801671a:	2b03      	cmp	r3, #3
 801671c:	d103      	bne.n	8016726 <xPhyConfigure+0x36>
    {
        ulAdvertise = phyADVERTISE_ALL;
 801671e:	f240 13e1 	movw	r3, #481	@ 0x1e1
 8016722:	61fb      	str	r3, [r7, #28]
 8016724:	e044      	b.n	80167b0 <xPhyConfigure+0xc0>
        /* Reset auto-negotiation capability. */
    }
    else
    {
        /* Always select protocol 802.3u. */
        ulAdvertise = phyADVERTISE_CSMA;
 8016726:	2301      	movs	r3, #1
 8016728:	61fb      	str	r3, [r7, #28]

        if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO )
 801672a:	683b      	ldr	r3, [r7, #0]
 801672c:	781b      	ldrb	r3, [r3, #0]
 801672e:	2b03      	cmp	r3, #3
 8016730:	d10d      	bne.n	801674e <xPhyConfigure+0x5e>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8016732:	683b      	ldr	r3, [r7, #0]
 8016734:	789b      	ldrb	r3, [r3, #2]
 8016736:	2b02      	cmp	r3, #2
 8016738:	d104      	bne.n	8016744 <xPhyConfigure+0x54>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_100FULL;
 801673a:	69fb      	ldr	r3, [r7, #28]
 801673c:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8016740:	61fb      	str	r3, [r7, #28]
 8016742:	e035      	b.n	80167b0 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF | phyADVERTISE_100HALF;
 8016744:	69fb      	ldr	r3, [r7, #28]
 8016746:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 801674a:	61fb      	str	r3, [r7, #28]
 801674c:	e030      	b.n	80167b0 <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO )
 801674e:	683b      	ldr	r3, [r7, #0]
 8016750:	789b      	ldrb	r3, [r3, #2]
 8016752:	2b03      	cmp	r3, #3
 8016754:	d10d      	bne.n	8016772 <xPhyConfigure+0x82>
        {
            if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8016756:	683b      	ldr	r3, [r7, #0]
 8016758:	781b      	ldrb	r3, [r3, #0]
 801675a:	2b01      	cmp	r3, #1
 801675c:	d104      	bne.n	8016768 <xPhyConfigure+0x78>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_10HALF;
 801675e:	69fb      	ldr	r3, [r7, #28]
 8016760:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8016764:	61fb      	str	r3, [r7, #28]
 8016766:	e023      	b.n	80167b0 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100FULL | phyADVERTISE_100HALF;
 8016768:	69fb      	ldr	r3, [r7, #28]
 801676a:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 801676e:	61fb      	str	r3, [r7, #28]
 8016770:	e01e      	b.n	80167b0 <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 )
 8016772:	683b      	ldr	r3, [r7, #0]
 8016774:	781b      	ldrb	r3, [r3, #0]
 8016776:	2b02      	cmp	r3, #2
 8016778:	d10d      	bne.n	8016796 <xPhyConfigure+0xa6>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 801677a:	683b      	ldr	r3, [r7, #0]
 801677c:	789b      	ldrb	r3, [r3, #2]
 801677e:	2b02      	cmp	r3, #2
 8016780:	d104      	bne.n	801678c <xPhyConfigure+0x9c>
            {
                ulAdvertise |= phyADVERTISE_100FULL;
 8016782:	69fb      	ldr	r3, [r7, #28]
 8016784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8016788:	61fb      	str	r3, [r7, #28]
 801678a:	e011      	b.n	80167b0 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100HALF;
 801678c:	69fb      	ldr	r3, [r7, #28]
 801678e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016792:	61fb      	str	r3, [r7, #28]
 8016794:	e00c      	b.n	80167b0 <xPhyConfigure+0xc0>
            }
        }
        else
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8016796:	683b      	ldr	r3, [r7, #0]
 8016798:	789b      	ldrb	r3, [r3, #2]
 801679a:	2b02      	cmp	r3, #2
 801679c:	d104      	bne.n	80167a8 <xPhyConfigure+0xb8>
            {
                ulAdvertise |= phyADVERTISE_10FULL;
 801679e:	69fb      	ldr	r3, [r7, #28]
 80167a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80167a4:	61fb      	str	r3, [r7, #28]
 80167a6:	e003      	b.n	80167b0 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF;
 80167a8:	69fb      	ldr	r3, [r7, #28]
 80167aa:	f043 0320 	orr.w	r3, r3, #32
 80167ae:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Send a reset command to a set of PHY-ports. */
    xPhyReset( pxPhyObject, xPhyGetMask( pxPhyObject ) );
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80167b4:	2201      	movs	r2, #1
 80167b6:	fa02 f303 	lsl.w	r3, r2, r3
 80167ba:	3b01      	subs	r3, #1
 80167bc:	4619      	mov	r1, r3
 80167be:	6878      	ldr	r0, [r7, #4]
 80167c0:	f7ff fef2 	bl	80165a8 <xPhyReset>

    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 80167c4:	2300      	movs	r3, #0
 80167c6:	61bb      	str	r3, [r7, #24]
 80167c8:	e080      	b.n	80168cc <xPhyConfigure+0x1dc>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80167ca:	687a      	ldr	r2, [r7, #4]
 80167cc:	69bb      	ldr	r3, [r7, #24]
 80167ce:	4413      	add	r3, r2
 80167d0:	3318      	adds	r3, #24
 80167d2:	781b      	ldrb	r3, [r3, #0]
 80167d4:	617b      	str	r3, [r7, #20]
        uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	69ba      	ldr	r2, [r7, #24]
 80167da:	3202      	adds	r2, #2
 80167dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80167e0:	613b      	str	r3, [r7, #16]

        /* Write advertise register. */
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, ulAdvertise );
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	685b      	ldr	r3, [r3, #4]
 80167e6:	69fa      	ldr	r2, [r7, #28]
 80167e8:	2104      	movs	r1, #4
 80167ea:	6978      	ldr	r0, [r7, #20]
 80167ec:	4798      	blx	r3
         *        1           1           1        10BASE-T, Half/Full-Duplex
         *                                         100BASE-TX, Half/Full-Duplex
         */

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	681b      	ldr	r3, [r3, #0]
 80167f2:	f107 020c 	add.w	r2, r7, #12
 80167f6:	2100      	movs	r1, #0
 80167f8:	6978      	ldr	r0, [r7, #20]
 80167fa:	4798      	blx	r3

        ulConfig &= ~( phyBMCR_SPEED_100 | phyBMCR_FULL_DUPLEX );
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	f423 5304 	bic.w	r3, r3, #8448	@ 0x2100
 8016802:	60fb      	str	r3, [r7, #12]

        ulConfig |= phyBMCR_AN_ENABLE;
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801680a:	60fb      	str	r3, [r7, #12]

        if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 ) || ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) )
 801680c:	683b      	ldr	r3, [r7, #0]
 801680e:	781b      	ldrb	r3, [r3, #0]
 8016810:	2b02      	cmp	r3, #2
 8016812:	d003      	beq.n	801681c <xPhyConfigure+0x12c>
 8016814:	683b      	ldr	r3, [r7, #0]
 8016816:	781b      	ldrb	r3, [r3, #0]
 8016818:	2b03      	cmp	r3, #3
 801681a:	d104      	bne.n	8016826 <xPhyConfigure+0x136>
        {
            ulConfig |= phyBMCR_SPEED_100;
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8016822:	60fb      	str	r3, [r7, #12]
 8016824:	e007      	b.n	8016836 <xPhyConfigure+0x146>
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8016826:	683b      	ldr	r3, [r7, #0]
 8016828:	781b      	ldrb	r3, [r3, #0]
 801682a:	2b01      	cmp	r3, #1
 801682c:	d103      	bne.n	8016836 <xPhyConfigure+0x146>
        {
            ulConfig &= ~phyBMCR_SPEED_100;
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8016834:	60fb      	str	r3, [r7, #12]
        }

        if( ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL ) || ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 8016836:	683b      	ldr	r3, [r7, #0]
 8016838:	789b      	ldrb	r3, [r3, #2]
 801683a:	2b02      	cmp	r3, #2
 801683c:	d003      	beq.n	8016846 <xPhyConfigure+0x156>
 801683e:	683b      	ldr	r3, [r7, #0]
 8016840:	789b      	ldrb	r3, [r3, #2]
 8016842:	2b03      	cmp	r3, #3
 8016844:	d104      	bne.n	8016850 <xPhyConfigure+0x160>
        {
            ulConfig |= phyBMCR_FULL_DUPLEX;
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801684c:	60fb      	str	r3, [r7, #12]
 801684e:	e007      	b.n	8016860 <xPhyConfigure+0x170>
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_HALF )
 8016850:	683b      	ldr	r3, [r7, #0]
 8016852:	789b      	ldrb	r3, [r3, #2]
 8016854:	2b01      	cmp	r3, #1
 8016856:	d103      	bne.n	8016860 <xPhyConfigure+0x170>
        {
            ulConfig &= ~phyBMCR_FULL_DUPLEX;
 8016858:	68fb      	ldr	r3, [r7, #12]
 801685a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801685e:	60fb      	str	r3, [r7, #12]
        }

        if( xHas_19_PHYCR( ulPhyID ) )
 8016860:	6938      	ldr	r0, [r7, #16]
 8016862:	f7ff fe09 	bl	8016478 <xHas_19_PHYCR>
 8016866:	4603      	mov	r3, r0
 8016868:	2b00      	cmp	r3, #0
 801686a:	d026      	beq.n	80168ba <xPhyConfigure+0x1ca>
        {
            uint32_t ulPhyControl;
            /* Read PHY Control register. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_19_PHYCR, &ulPhyControl );
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	f107 0208 	add.w	r2, r7, #8
 8016874:	2119      	movs	r1, #25
 8016876:	6978      	ldr	r0, [r7, #20]
 8016878:	4798      	blx	r3

            /* Clear bits which might get set: */
            ulPhyControl &= ~( PHYCR_MDIX_EN | PHYCR_MDIX_FORCE );
 801687a:	68bb      	ldr	r3, [r7, #8]
 801687c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8016880:	60bb      	str	r3, [r7, #8]

            if( pxPhyProperties->ucMDI_X == PHY_MDIX_AUTO )
 8016882:	683b      	ldr	r3, [r7, #0]
 8016884:	785b      	ldrb	r3, [r3, #1]
 8016886:	2b03      	cmp	r3, #3
 8016888:	d104      	bne.n	8016894 <xPhyConfigure+0x1a4>
            {
                ulPhyControl |= PHYCR_MDIX_EN;
 801688a:	68bb      	ldr	r3, [r7, #8]
 801688c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8016890:	60bb      	str	r3, [r7, #8]
 8016892:	e00c      	b.n	80168ae <xPhyConfigure+0x1be>
            }
            else if( pxPhyProperties->ucMDI_X == PHY_MDIX_CROSSED )
 8016894:	683b      	ldr	r3, [r7, #0]
 8016896:	785b      	ldrb	r3, [r3, #1]
 8016898:	2b02      	cmp	r3, #2
 801689a:	d104      	bne.n	80168a6 <xPhyConfigure+0x1b6>
            {
                /* Force direct link = Use crossed RJ45 cable. */
                ulPhyControl &= ~PHYCR_MDIX_FORCE;
 801689c:	68bb      	ldr	r3, [r7, #8]
 801689e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80168a2:	60bb      	str	r3, [r7, #8]
 80168a4:	e003      	b.n	80168ae <xPhyConfigure+0x1be>
            }
            else
            {
                /* Force crossed link = Use direct RJ45 cable. */
                ulPhyControl |= PHYCR_MDIX_FORCE;
 80168a6:	68bb      	ldr	r3, [r7, #8]
 80168a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80168ac:	60bb      	str	r3, [r7, #8]
            }

            /* update PHY Control Register. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_19_PHYCR, ulPhyControl );
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	685b      	ldr	r3, [r3, #4]
 80168b2:	68ba      	ldr	r2, [r7, #8]
 80168b4:	2119      	movs	r1, #25
 80168b6:	6978      	ldr	r0, [r7, #20]
 80168b8:	4798      	blx	r3
        }

        FreeRTOS_printf( ( "+TCP: advertise: %04X config %04X\n", ( unsigned int ) ulAdvertise, ( unsigned int ) ulConfig ) );
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	461a      	mov	r2, r3
 80168be:	69f9      	ldr	r1, [r7, #28]
 80168c0:	480d      	ldr	r0, [pc, #52]	@ (80168f8 <xPhyConfigure+0x208>)
 80168c2:	f009 fe33 	bl	802052c <lUDPLoggingPrintf>
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 80168c6:	69bb      	ldr	r3, [r7, #24]
 80168c8:	3301      	adds	r3, #1
 80168ca:	61bb      	str	r3, [r7, #24]
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80168d0:	69ba      	ldr	r2, [r7, #24]
 80168d2:	429a      	cmp	r2, r3
 80168d4:	f6ff af79 	blt.w	80167ca <xPhyConfigure+0xda>
    }

    /* Keep these values for later use. */
    pxPhyObject->ulBCRValue = ulConfig & ~phyBMCR_ISOLATE;
 80168d8:	68fb      	ldr	r3, [r7, #12]
 80168da:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    pxPhyObject->ulACRValue = ulAdvertise;
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	69fa      	ldr	r2, [r7, #28]
 80168e6:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 80168e8:	2300      	movs	r3, #0
}
 80168ea:	4618      	mov	r0, r3
 80168ec:	3720      	adds	r7, #32
 80168ee:	46bd      	mov	sp, r7
 80168f0:	bd80      	pop	{r7, pc}
 80168f2:	bf00      	nop
 80168f4:	0802581c 	.word	0x0802581c
 80168f8:	08025840 	.word	0x08025840

080168fc <xPhyStartAutoNegotiation>:
/* xPhyStartAutoNegotiation() is the alternative xPhyFixedValue():
 * It sets the BMCR_AN_RESTART bit and waits for the auto-negotiation completion
 * ( phyBMSR_AN_COMPLETE ). */
BaseType_t xPhyStartAutoNegotiation( EthernetPhy_t * pxPhyObject,
                                     uint32_t ulPhyMask )
{
 80168fc:	b590      	push	{r4, r7, lr}
 80168fe:	b095      	sub	sp, #84	@ 0x54
 8016900:	af02      	add	r7, sp, #8
 8016902:	6078      	str	r0, [r7, #4]
 8016904:	6039      	str	r1, [r7, #0]
    uint32_t xPhyIndex, ulDoneMask, ulBitMask;
    uint32_t ulRegValue;
    TickType_t xRemainingTime;
    TimeOut_t xTimer;

    if( ulPhyMask == ( uint32_t ) 0U )
 8016906:	683b      	ldr	r3, [r7, #0]
 8016908:	2b00      	cmp	r3, #0
 801690a:	d101      	bne.n	8016910 <xPhyStartAutoNegotiation+0x14>
    {
        return 0;
 801690c:	2300      	movs	r3, #0
 801690e:	e18d      	b.n	8016c2c <xPhyStartAutoNegotiation+0x330>
    }

    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8016910:	2300      	movs	r3, #0
 8016912:	647b      	str	r3, [r7, #68]	@ 0x44
 8016914:	e020      	b.n	8016958 <xPhyStartAutoNegotiation+0x5c>
    {
        if( ( ulPhyMask & ( 1lu << xPhyIndex ) ) != 0lu )
 8016916:	683a      	ldr	r2, [r7, #0]
 8016918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801691a:	fa22 f303 	lsr.w	r3, r2, r3
 801691e:	f003 0301 	and.w	r3, r3, #1
 8016922:	2b00      	cmp	r3, #0
 8016924:	d015      	beq.n	8016952 <xPhyStartAutoNegotiation+0x56>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8016926:	687a      	ldr	r2, [r7, #4]
 8016928:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801692a:	4413      	add	r3, r2
 801692c:	3318      	adds	r3, #24
 801692e:	781b      	ldrb	r3, [r3, #0]
 8016930:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Enable Auto-Negotiation. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, pxPhyObject->ulACRValue );
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	685b      	ldr	r3, [r3, #4]
 8016936:	687a      	ldr	r2, [r7, #4]
 8016938:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801693a:	2104      	movs	r1, #4
 801693c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801693e:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue | phyBMCR_AN_RESTART );
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	685b      	ldr	r3, [r3, #4]
 8016944:	687a      	ldr	r2, [r7, #4]
 8016946:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8016948:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801694c:	2100      	movs	r1, #0
 801694e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016950:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8016952:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016954:	3301      	adds	r3, #1
 8016956:	647b      	str	r3, [r7, #68]	@ 0x44
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801695c:	461a      	mov	r2, r3
 801695e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016960:	4293      	cmp	r3, r2
 8016962:	d3d8      	bcc.n	8016916 <xPhyStartAutoNegotiation+0x1a>
        }
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_NEGOTIATE_TIME_MS );
 8016964:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8016968:	623b      	str	r3, [r7, #32]
    vTaskSetTimeOutState( &xTimer );
 801696a:	f107 0318 	add.w	r3, r7, #24
 801696e:	4618      	mov	r0, r3
 8016970:	f7ed faf6 	bl	8003f60 <vTaskSetTimeOutState>
    ulDoneMask = 0;
 8016974:	2300      	movs	r3, #0
 8016976:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Wait until the auto-negotiation will be completed */
    for( ; ; )
    {
        ulBitMask = ( uint32_t ) 1U;
 8016978:	2301      	movs	r3, #1
 801697a:	63fb      	str	r3, [r7, #60]	@ 0x3c

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801697c:	2300      	movs	r3, #0
 801697e:	647b      	str	r3, [r7, #68]	@ 0x44
 8016980:	e025      	b.n	80169ce <xPhyStartAutoNegotiation+0xd2>
        {
            if( ( ulPhyMask & ulBitMask ) != 0lu )
 8016982:	683a      	ldr	r2, [r7, #0]
 8016984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016986:	4013      	ands	r3, r2
 8016988:	2b00      	cmp	r3, #0
 801698a:	d01a      	beq.n	80169c2 <xPhyStartAutoNegotiation+0xc6>
            {
                if( ( ulDoneMask & ulBitMask ) == 0lu )
 801698c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801698e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016990:	4013      	ands	r3, r2
 8016992:	2b00      	cmp	r3, #0
 8016994:	d115      	bne.n	80169c2 <xPhyStartAutoNegotiation+0xc6>
                {
                    BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8016996:	687a      	ldr	r2, [r7, #4]
 8016998:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801699a:	4413      	add	r3, r2
 801699c:	3318      	adds	r3, #24
 801699e:	781b      	ldrb	r3, [r3, #0]
 80169a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80169aa:	2101      	movs	r1, #1
 80169ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80169ae:	4798      	blx	r3

                    if( ( ulRegValue & phyBMSR_AN_COMPLETE ) != 0 )
 80169b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169b2:	f003 0320 	and.w	r3, r3, #32
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d003      	beq.n	80169c2 <xPhyStartAutoNegotiation+0xc6>
                    {
                        ulDoneMask |= ulBitMask;
 80169ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80169bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80169be:	4313      	orrs	r3, r2
 80169c0:	643b      	str	r3, [r7, #64]	@ 0x40
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80169c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80169c4:	3301      	adds	r3, #1
 80169c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80169c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80169ca:	005b      	lsls	r3, r3, #1
 80169cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80169d2:	461a      	mov	r2, r3
 80169d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80169d6:	4293      	cmp	r3, r2
 80169d8:	d3d3      	bcc.n	8016982 <xPhyStartAutoNegotiation+0x86>
                    }
                }
            }
        }

        if( ulPhyMask == ulDoneMask )
 80169da:	683a      	ldr	r2, [r7, #0]
 80169dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80169de:	429a      	cmp	r2, r3
 80169e0:	d013      	beq.n	8016a0a <xPhyStartAutoNegotiation+0x10e>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 80169e2:	f107 0220 	add.w	r2, r7, #32
 80169e6:	f107 0318 	add.w	r3, r7, #24
 80169ea:	4611      	mov	r1, r2
 80169ec:	4618      	mov	r0, r3
 80169ee:	f7ed faef 	bl	8003fd0 <xTaskCheckForTimeOut>
 80169f2:	4603      	mov	r3, r0
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d004      	beq.n	8016a02 <xPhyStartAutoNegotiation+0x106>
        {
            FreeRTOS_printf( ( "xPhyStartAutoNegotiation: phyBMSR_AN_COMPLETE timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
 80169f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80169fa:	488e      	ldr	r0, [pc, #568]	@ (8016c34 <xPhyStartAutoNegotiation+0x338>)
 80169fc:	f009 fd96 	bl	802052c <lUDPLoggingPrintf>
            break;
 8016a00:	e004      	b.n	8016a0c <xPhyStartAutoNegotiation+0x110>
        }

        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8016a02:	2032      	movs	r0, #50	@ 0x32
 8016a04:	f7ec fd38 	bl	8003478 <vTaskDelay>
        ulBitMask = ( uint32_t ) 1U;
 8016a08:	e7b6      	b.n	8016978 <xPhyStartAutoNegotiation+0x7c>
            break;
 8016a0a:	bf00      	nop
    }

    if( ulDoneMask != ( uint32_t ) 0U )
 8016a0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	f000 810b 	beq.w	8016c2a <xPhyStartAutoNegotiation+0x32e>
    {
        ulBitMask = ( uint32_t ) 1U;
 8016a14:	2301      	movs	r3, #1
 8016a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pxPhyObject->ulLinkStatusMask &= ~( ulDoneMask );
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016a1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016a1e:	43db      	mvns	r3, r3
 8016a20:	401a      	ands	r2, r3
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	635a      	str	r2, [r3, #52]	@ 0x34

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8016a26:	2300      	movs	r3, #0
 8016a28:	647b      	str	r3, [r7, #68]	@ 0x44
 8016a2a:	e0f7      	b.n	8016c1c <xPhyStartAutoNegotiation+0x320>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8016a2c:	687a      	ldr	r2, [r7, #4]
 8016a2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016a30:	4413      	add	r3, r2
 8016a32:	3318      	adds	r3, #24
 8016a34:	781b      	ldrb	r3, [r3, #0]
 8016a36:	63bb      	str	r3, [r7, #56]	@ 0x38
            uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016a3c:	3202      	adds	r2, #2
 8016a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a42:	637b      	str	r3, [r7, #52]	@ 0x34

            if( ( ulDoneMask & ulBitMask ) == ( uint32_t ) 0U )
 8016a44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016a46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016a48:	4013      	ands	r3, r2
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	f000 80df 	beq.w	8016c0e <xPhyStartAutoNegotiation+0x312>
            {
                continue;
            }

            /* Clear the 'phyBMCR_AN_RESTART'  bit. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue );
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	685b      	ldr	r3, [r3, #4]
 8016a54:	687a      	ldr	r2, [r7, #4]
 8016a56:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8016a58:	2100      	movs	r1, #0
 8016a5a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016a5c:	4798      	blx	r3

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8016a66:	2101      	movs	r1, #1
 8016a68:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016a6a:	4798      	blx	r3

            if( ( ulRegValue & phyBMSR_LINK_STATUS ) != 0U )
 8016a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a6e:	f003 0304 	and.w	r3, r3, #4
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d005      	beq.n	8016a82 <xPhyStartAutoNegotiation+0x186>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016a7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016a7c:	431a      	orrs	r2, r3
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	635a      	str	r2, [r3, #52]	@ 0x34
            }

            if( ulPhyID == PHY_ID_KSZ8081MNXIA )
 8016a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016a84:	4a6c      	ldr	r2, [pc, #432]	@ (8016c38 <xPhyStartAutoNegotiation+0x33c>)
 8016a86:	4293      	cmp	r3, r2
 8016a88:	d130      	bne.n	8016aec <xPhyStartAutoNegotiation+0x1f0>
            {
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, 0x1E, &ulControlStatus );
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	f107 0214 	add.w	r2, r7, #20
 8016a92:	211e      	movs	r1, #30
 8016a94:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016a96:	4798      	blx	r3

                switch( ulControlStatus & 0x07 )
 8016a98:	697b      	ldr	r3, [r7, #20]
 8016a9a:	f003 0307 	and.w	r3, r3, #7
 8016a9e:	3b01      	subs	r3, #1
 8016aa0:	2b05      	cmp	r3, #5
 8016aa2:	d814      	bhi.n	8016ace <xPhyStartAutoNegotiation+0x1d2>
 8016aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8016aac <xPhyStartAutoNegotiation+0x1b0>)
 8016aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016aaa:	bf00      	nop
 8016aac:	08016ac5 	.word	0x08016ac5
 8016ab0:	08016acf 	.word	0x08016acf
 8016ab4:	08016acf 	.word	0x08016acf
 8016ab8:	08016acf 	.word	0x08016acf
 8016abc:	08016ac5 	.word	0x08016ac5
 8016ac0:	08016acf 	.word	0x08016acf
                    case 0x01:
                    case 0x05:
/*	[001] = 10BASE-T half-duplex */
/*	[101] = 10BASE-T full-duplex */
                        /* 10 Mbps. */
                        ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8016ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ac6:	f043 0302 	orr.w	r3, r3, #2
 8016aca:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 8016acc:	bf00      	nop
/*	[010] = 100BASE-TX half-duplex */
/*	[110] = 100BASE-TX full-duplex */
                        break;
                }

                switch( ulControlStatus & 0x07 )
 8016ace:	697b      	ldr	r3, [r7, #20]
 8016ad0:	f003 0307 	and.w	r3, r3, #7
 8016ad4:	2b02      	cmp	r3, #2
 8016ad6:	d801      	bhi.n	8016adc <xPhyStartAutoNegotiation+0x1e0>
 8016ad8:	2b00      	cmp	r3, #0

                    case 0x01:
                    case 0x02:
/*	[001] = 10BASE-T half-duplex */
/*	[010] = 100BASE-TX half-duplex */
                        break;
 8016ada:	e05b      	b.n	8016b94 <xPhyStartAutoNegotiation+0x298>
 8016adc:	3b05      	subs	r3, #5
                switch( ulControlStatus & 0x07 )
 8016ade:	2b01      	cmp	r3, #1
 8016ae0:	d858      	bhi.n	8016b94 <xPhyStartAutoNegotiation+0x298>
                        ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8016ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ae4:	f043 0304 	orr.w	r3, r3, #4
 8016ae8:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 8016aea:	e053      	b.n	8016b94 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else if( ulPhyID == PHY_ID_KSZ8795 )
 8016aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016aee:	4a53      	ldr	r2, [pc, #332]	@ (8016c3c <xPhyStartAutoNegotiation+0x340>)
 8016af0:	4293      	cmp	r3, r2
 8016af2:	d126      	bne.n	8016b42 <xPhyStartAutoNegotiation+0x246>
                 *     010 = 10BASE-T half-duplex
                 *     101 = 10BASE-T full-duplex
                 *     011 = 100BASE-TX half-duplex
                 *     110 = 100BASE-TX full-duplex
                 */
                uint32_t ulControlStatus = 0u;
 8016af4:	2300      	movs	r3, #0
 8016af6:	613b      	str	r3, [r7, #16]
                uint32_t ulPortOperationMode = 0u;
 8016af8:	2300      	movs	r3, #0
 8016afa:	633b      	str	r3, [r7, #48]	@ 0x30
                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	f107 0210 	add.w	r2, r7, #16
 8016b04:	211f      	movs	r1, #31
 8016b06:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016b08:	4798      	blx	r3
                ulPortOperationMode = ( ulControlStatus >> 8u ) & 0x07u;
 8016b0a:	693b      	ldr	r3, [r7, #16]
 8016b0c:	0a1b      	lsrs	r3, r3, #8
 8016b0e:	f003 0307 	and.w	r3, r3, #7
 8016b12:	633b      	str	r3, [r7, #48]	@ 0x30

                ulRegValue = 0;
 8016b14:	2300      	movs	r3, #0
 8016b16:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Detect 10baseT operation */
                if( ( 0x02u == ulPortOperationMode ) || ( 0x05u == ulPortOperationMode ) )
 8016b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b1a:	2b02      	cmp	r3, #2
 8016b1c:	d002      	beq.n	8016b24 <xPhyStartAutoNegotiation+0x228>
 8016b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b20:	2b05      	cmp	r3, #5
 8016b22:	d103      	bne.n	8016b2c <xPhyStartAutoNegotiation+0x230>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8016b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b26:	f043 0302 	orr.w	r3, r3, #2
 8016b2a:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                /* Detect full duplex operation */
                if( ( 0x05u == ulPortOperationMode ) || ( 0x06u == ulPortOperationMode ) )
 8016b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b2e:	2b05      	cmp	r3, #5
 8016b30:	d002      	beq.n	8016b38 <xPhyStartAutoNegotiation+0x23c>
 8016b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b34:	2b06      	cmp	r3, #6
 8016b36:	d12d      	bne.n	8016b94 <xPhyStartAutoNegotiation+0x298>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8016b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b3a:	f043 0304 	orr.w	r3, r3, #4
 8016b3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8016b40:	e028      	b.n	8016b94 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else if( xHas_1F_PHYSPCS( ulPhyID ) )
 8016b42:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016b44:	f7ff fc66 	bl	8016414 <xHas_1F_PHYSPCS>
 8016b48:	4603      	mov	r3, r0
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d01b      	beq.n	8016b86 <xPhyStartAutoNegotiation+0x28a>
            {
                /* 31 RW PHY Special Control Status */
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	f107 020c 	add.w	r2, r7, #12
 8016b56:	211f      	movs	r1, #31
 8016b58:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016b5a:	4798      	blx	r3
                ulRegValue = 0;
 8016b5c:	2300      	movs	r3, #0
 8016b5e:	627b      	str	r3, [r7, #36]	@ 0x24

                if( ( ulControlStatus & phyPHYSPCS_FULL_DUPLEX ) != 0 )
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	f003 0310 	and.w	r3, r3, #16
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d003      	beq.n	8016b72 <xPhyStartAutoNegotiation+0x276>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8016b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b6c:	f043 0304 	orr.w	r3, r3, #4
 8016b70:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                if( ( ulControlStatus & phyPHYSPCS_SPEED_MASK ) == phyPHYSPCS_SPEED_10 )
 8016b72:	68fb      	ldr	r3, [r7, #12]
 8016b74:	f003 030c 	and.w	r3, r3, #12
 8016b78:	2b04      	cmp	r3, #4
 8016b7a:	d10b      	bne.n	8016b94 <xPhyStartAutoNegotiation+0x298>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8016b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b7e:	f043 0302 	orr.w	r3, r3, #2
 8016b82:	627b      	str	r3, [r7, #36]	@ 0x24
 8016b84:	e006      	b.n	8016b94 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else
            {
                /* Read the result of the auto-negotiation. */
                pxPhyObject->fnPhyRead( xPhyAddress, PHYREG_10_PHYSTS, &ulRegValue );
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8016b8e:	2110      	movs	r1, #16
 8016b90:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016b92:	4798      	blx	r3
            }

            FreeRTOS_printf( ( "Autonego ready: %08x: %s duplex %u mbit %s status\n",
 8016b94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b98:	f003 0304 	and.w	r3, r3, #4
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d001      	beq.n	8016ba4 <xPhyStartAutoNegotiation+0x2a8>
 8016ba0:	4827      	ldr	r0, [pc, #156]	@ (8016c40 <xPhyStartAutoNegotiation+0x344>)
 8016ba2:	e000      	b.n	8016ba6 <xPhyStartAutoNegotiation+0x2aa>
 8016ba4:	4827      	ldr	r0, [pc, #156]	@ (8016c44 <xPhyStartAutoNegotiation+0x348>)
 8016ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ba8:	f003 0302 	and.w	r3, r3, #2
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d001      	beq.n	8016bb4 <xPhyStartAutoNegotiation+0x2b8>
 8016bb0:	240a      	movs	r4, #10
 8016bb2:	e000      	b.n	8016bb6 <xPhyStartAutoNegotiation+0x2ba>
 8016bb4:	2464      	movs	r4, #100	@ 0x64
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016bba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016bbc:	4013      	ands	r3, r2
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d001      	beq.n	8016bc6 <xPhyStartAutoNegotiation+0x2ca>
 8016bc2:	4b21      	ldr	r3, [pc, #132]	@ (8016c48 <xPhyStartAutoNegotiation+0x34c>)
 8016bc4:	e000      	b.n	8016bc8 <xPhyStartAutoNegotiation+0x2cc>
 8016bc6:	4b21      	ldr	r3, [pc, #132]	@ (8016c4c <xPhyStartAutoNegotiation+0x350>)
 8016bc8:	9300      	str	r3, [sp, #0]
 8016bca:	4623      	mov	r3, r4
 8016bcc:	4602      	mov	r2, r0
 8016bce:	4820      	ldr	r0, [pc, #128]	@ (8016c50 <xPhyStartAutoNegotiation+0x354>)
 8016bd0:	f009 fcac 	bl	802052c <lUDPLoggingPrintf>
                               ( unsigned int ) ulRegValue,
                               ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) ? "full" : "half",
                               ( ulRegValue & phyPHYSTS_SPEED_STATUS ) ? 10 : 100,
                               ( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) != 0U ) ? "high" : "low" ) );

            if( ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) != ( uint32_t ) 0U )
 8016bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016bd6:	f003 0304 	and.w	r3, r3, #4
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d004      	beq.n	8016be8 <xPhyStartAutoNegotiation+0x2ec>
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_FULL;
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	2202      	movs	r2, #2
 8016be2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016be6:	e003      	b.n	8016bf0 <xPhyStartAutoNegotiation+0x2f4>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_HALF;
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	2201      	movs	r2, #1
 8016bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            }

            if( ( ulRegValue & phyPHYSTS_SPEED_STATUS ) != 0 )
 8016bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016bf2:	f003 0302 	and.w	r3, r3, #2
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d004      	beq.n	8016c04 <xPhyStartAutoNegotiation+0x308>
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_10;
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	2201      	movs	r2, #1
 8016bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8016c02:	e005      	b.n	8016c10 <xPhyStartAutoNegotiation+0x314>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_100;
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	2202      	movs	r2, #2
 8016c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8016c0c:	e000      	b.n	8016c10 <xPhyStartAutoNegotiation+0x314>
                continue;
 8016c0e:	bf00      	nop
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8016c10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016c12:	3301      	adds	r3, #1
 8016c14:	647b      	str	r3, [r7, #68]	@ 0x44
 8016c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016c18:	005b      	lsls	r3, r3, #1
 8016c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016c20:	461a      	mov	r2, r3
 8016c22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016c24:	4293      	cmp	r3, r2
 8016c26:	f4ff af01 	bcc.w	8016a2c <xPhyStartAutoNegotiation+0x130>
            }
        }
    } /* if( ulDoneMask != ( uint32_t) 0U ) */

    return 0;
 8016c2a:	2300      	movs	r3, #0
}
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	374c      	adds	r7, #76	@ 0x4c
 8016c30:	46bd      	mov	sp, r7
 8016c32:	bd90      	pop	{r4, r7, pc}
 8016c34:	08025864 	.word	0x08025864
 8016c38:	00221560 	.word	0x00221560
 8016c3c:	00221550 	.word	0x00221550
 8016c40:	080258b0 	.word	0x080258b0
 8016c44:	080258b8 	.word	0x080258b8
 8016c48:	080258c0 	.word	0x080258c0
 8016c4c:	080258c8 	.word	0x080258c8
 8016c50:	080258cc 	.word	0x080258cc

08016c54 <xPhyCheckLinkStatus>:
/*-----------------------------------------------------------*/

BaseType_t xPhyCheckLinkStatus( EthernetPhy_t * pxPhyObject,
                                BaseType_t xHadReception )
{
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b088      	sub	sp, #32
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	6078      	str	r0, [r7, #4]
 8016c5c:	6039      	str	r1, [r7, #0]
    uint32_t ulStatus, ulBitMask = 1U;
 8016c5e:	2301      	movs	r3, #1
 8016c60:	61fb      	str	r3, [r7, #28]
    BaseType_t xPhyIndex;
    BaseType_t xNeedCheck = pdFALSE;
 8016c62:	2300      	movs	r3, #0
 8016c64:	617b      	str	r3, [r7, #20]

    if( xHadReception > 0 )
 8016c66:	683b      	ldr	r3, [r7, #0]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	dd2b      	ble.n	8016cc4 <xPhyCheckLinkStatus+0x70>
    {
        /* A packet was received. No need to check for the PHY status now,
         * but set a timer to check it later on. */
        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	331c      	adds	r3, #28
 8016c70:	4618      	mov	r0, r3
 8016c72:	f7ed f975 	bl	8003f60 <vTaskSetTimeOutState>
        pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8016c7c:	625a      	str	r2, [r3, #36]	@ 0x24

        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8016c7e:	2300      	movs	r3, #0
 8016c80:	61bb      	str	r3, [r7, #24]
 8016c82:	e019      	b.n	8016cb8 <xPhyCheckLinkStatus+0x64>
        {
            if( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) == 0UL )
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016c88:	69fb      	ldr	r3, [r7, #28]
 8016c8a:	4013      	ands	r3, r2
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d10d      	bne.n	8016cac <xPhyCheckLinkStatus+0x58>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016c94:	69fb      	ldr	r3, [r7, #28]
 8016c96:	431a      	orrs	r2, r3
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	635a      	str	r2, [r3, #52]	@ 0x34
                FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016ca0:	4619      	mov	r1, r3
 8016ca2:	4842      	ldr	r0, [pc, #264]	@ (8016dac <xPhyCheckLinkStatus+0x158>)
 8016ca4:	f009 fc42 	bl	802052c <lUDPLoggingPrintf>
                xNeedCheck = pdTRUE;
 8016ca8:	2301      	movs	r3, #1
 8016caa:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8016cac:	69bb      	ldr	r3, [r7, #24]
 8016cae:	3301      	adds	r3, #1
 8016cb0:	61bb      	str	r3, [r7, #24]
 8016cb2:	69fb      	ldr	r3, [r7, #28]
 8016cb4:	005b      	lsls	r3, r3, #1
 8016cb6:	61fb      	str	r3, [r7, #28]
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016cbc:	69ba      	ldr	r2, [r7, #24]
 8016cbe:	429a      	cmp	r2, r3
 8016cc0:	dbe0      	blt.n	8016c84 <xPhyCheckLinkStatus+0x30>
 8016cc2:	e06e      	b.n	8016da2 <xPhyCheckLinkStatus+0x14e>
            }
        }
    }
    else if( xTaskCheckForTimeOut( &( pxPhyObject->xLinkStatusTimer ), &( pxPhyObject->xLinkStatusRemaining ) ) != pdFALSE )
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	f103 021c 	add.w	r2, r3, #28
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	3324      	adds	r3, #36	@ 0x24
 8016cce:	4619      	mov	r1, r3
 8016cd0:	4610      	mov	r0, r2
 8016cd2:	f7ed f97d 	bl	8003fd0 <xTaskCheckForTimeOut>
 8016cd6:	4603      	mov	r3, r0
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d062      	beq.n	8016da2 <xPhyCheckLinkStatus+0x14e>
    {
        /* Frequent checking the PHY Link Status can affect for the performance of Ethernet controller.
         * As long as packets are received, no polling is needed.
         * Otherwise, polling will be done when the 'xLinkStatusTimer' expires. */
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8016cdc:	2300      	movs	r3, #0
 8016cde:	61bb      	str	r3, [r7, #24]
 8016ce0:	e045      	b.n	8016d6e <xPhyCheckLinkStatus+0x11a>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8016ce2:	687a      	ldr	r2, [r7, #4]
 8016ce4:	69bb      	ldr	r3, [r7, #24]
 8016ce6:	4413      	add	r3, r2
 8016ce8:	3318      	adds	r3, #24
 8016cea:	781b      	ldrb	r3, [r3, #0]
 8016cec:	613b      	str	r3, [r7, #16]

            if( pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulStatus ) == 0 )
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	f107 020c 	add.w	r2, r7, #12
 8016cf6:	2101      	movs	r1, #1
 8016cf8:	6938      	ldr	r0, [r7, #16]
 8016cfa:	4798      	blx	r3
 8016cfc:	4603      	mov	r3, r0
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d12f      	bne.n	8016d62 <xPhyCheckLinkStatus+0x10e>
            {
                if( !!( pxPhyObject->ulLinkStatusMask & ulBitMask ) != !!( ulStatus & phyBMSR_LINK_STATUS ) )
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016d06:	69fb      	ldr	r3, [r7, #28]
 8016d08:	4013      	ands	r3, r2
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	bf14      	ite	ne
 8016d0e:	2301      	movne	r3, #1
 8016d10:	2300      	moveq	r3, #0
 8016d12:	b2da      	uxtb	r2, r3
 8016d14:	68fb      	ldr	r3, [r7, #12]
 8016d16:	f003 0304 	and.w	r3, r3, #4
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	bf14      	ite	ne
 8016d1e:	2301      	movne	r3, #1
 8016d20:	2300      	moveq	r3, #0
 8016d22:	b2db      	uxtb	r3, r3
 8016d24:	4053      	eors	r3, r2
 8016d26:	b2db      	uxtb	r3, r3
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d01a      	beq.n	8016d62 <xPhyCheckLinkStatus+0x10e>
                {
                    if( ( ulStatus & phyBMSR_LINK_STATUS ) != 0 )
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	f003 0304 	and.w	r3, r3, #4
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d006      	beq.n	8016d44 <xPhyCheckLinkStatus+0xf0>
                    {
                        pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016d3a:	69fb      	ldr	r3, [r7, #28]
 8016d3c:	431a      	orrs	r2, r3
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	635a      	str	r2, [r3, #52]	@ 0x34
 8016d42:	e006      	b.n	8016d52 <xPhyCheckLinkStatus+0xfe>
                    }
                    else
                    {
                        pxPhyObject->ulLinkStatusMask &= ~( ulBitMask );
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016d48:	69fb      	ldr	r3, [r7, #28]
 8016d4a:	43db      	mvns	r3, r3
 8016d4c:	401a      	ands	r2, r3
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	635a      	str	r2, [r3, #52]	@ 0x34
                    }

                    FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016d56:	4619      	mov	r1, r3
 8016d58:	4814      	ldr	r0, [pc, #80]	@ (8016dac <xPhyCheckLinkStatus+0x158>)
 8016d5a:	f009 fbe7 	bl	802052c <lUDPLoggingPrintf>
                    xNeedCheck = pdTRUE;
 8016d5e:	2301      	movs	r3, #1
 8016d60:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8016d62:	69bb      	ldr	r3, [r7, #24]
 8016d64:	3301      	adds	r3, #1
 8016d66:	61bb      	str	r3, [r7, #24]
 8016d68:	69fb      	ldr	r3, [r7, #28]
 8016d6a:	005b      	lsls	r3, r3, #1
 8016d6c:	61fb      	str	r3, [r7, #28]
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016d72:	69ba      	ldr	r2, [r7, #24]
 8016d74:	429a      	cmp	r2, r3
 8016d76:	dbb4      	blt.n	8016ce2 <xPhyCheckLinkStatus+0x8e>
                }
            }
        }

        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	331c      	adds	r3, #28
 8016d7c:	4618      	mov	r0, r3
 8016d7e:	f7ed f8ef 	bl	8003f60 <vTaskSetTimeOutState>

        if( ( pxPhyObject->ulLinkStatusMask & ( ulBitMask >> 1 ) ) != 0 )
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016d86:	69fb      	ldr	r3, [r7, #28]
 8016d88:	085b      	lsrs	r3, r3, #1
 8016d8a:	4013      	ands	r3, r2
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d004      	beq.n	8016d9a <xPhyCheckLinkStatus+0x146>
        {
            /* The link status is high, so don't poll the PHY too often. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8016d96:	625a      	str	r2, [r3, #36]	@ 0x24
 8016d98:	e003      	b.n	8016da2 <xPhyCheckLinkStatus+0x14e>
        }
        else
        {
            /* The link status is low, polling may be done more frequently. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_LOW_CHECK_TIME_MS );
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016da0:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }

    return xNeedCheck;
 8016da2:	697b      	ldr	r3, [r7, #20]
}
 8016da4:	4618      	mov	r0, r3
 8016da6:	3720      	adds	r7, #32
 8016da8:	46bd      	mov	sp, r7
 8016daa:	bd80      	pop	{r7, pc}
 8016dac:	08025900 	.word	0x08025900

08016db0 <prvRevBits32>:
};
/*-----------------------------------------------------------*/

/* Reverse the bits of a 32 bit unsigned integer */
static uint32_t prvRevBits32( uint32_t ulValue )
{
 8016db0:	b480      	push	{r7}
 8016db2:	b085      	sub	sp, #20
 8016db4:	af00      	add	r7, sp, #0
 8016db6:	6078      	str	r0, [r7, #4]
    uint32_t ulRev32;
    int iIndex;

    ulRev32 = 0;
 8016db8:	2300      	movs	r3, #0
 8016dba:	60fb      	str	r3, [r7, #12]

    for( iIndex = 0; iIndex < 32; iIndex++ )
 8016dbc:	2300      	movs	r3, #0
 8016dbe:	60bb      	str	r3, [r7, #8]
 8016dc0:	e013      	b.n	8016dea <prvRevBits32+0x3a>
    {
        if( ulValue & ( 1 << iIndex ) )
 8016dc2:	2201      	movs	r2, #1
 8016dc4:	68bb      	ldr	r3, [r7, #8]
 8016dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8016dca:	461a      	mov	r2, r3
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	4013      	ands	r3, r2
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d007      	beq.n	8016de4 <prvRevBits32+0x34>
        {
            {
                ulRev32 |= 1 << ( 31 - iIndex );
 8016dd4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8016dd8:	68bb      	ldr	r3, [r7, #8]
 8016dda:	fa22 f303 	lsr.w	r3, r2, r3
 8016dde:	68fa      	ldr	r2, [r7, #12]
 8016de0:	4313      	orrs	r3, r2
 8016de2:	60fb      	str	r3, [r7, #12]
    for( iIndex = 0; iIndex < 32; iIndex++ )
 8016de4:	68bb      	ldr	r3, [r7, #8]
 8016de6:	3301      	adds	r3, #1
 8016de8:	60bb      	str	r3, [r7, #8]
 8016dea:	68bb      	ldr	r3, [r7, #8]
 8016dec:	2b1f      	cmp	r3, #31
 8016dee:	dde8      	ble.n	8016dc2 <prvRevBits32+0x12>
            }
        }
    }

    return ulRev32;
 8016df0:	68fb      	ldr	r3, [r7, #12]
}
 8016df2:	4618      	mov	r0, r3
 8016df4:	3714      	adds	r7, #20
 8016df6:	46bd      	mov	sp, r7
 8016df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dfc:	4770      	bx	lr
	...

08016e00 <prvComputeCRC32_MAC>:

/* Compute the CRC32 of the given MAC address as per IEEE 802.3 CRC32 */
static uint32_t prvComputeCRC32_MAC( const uint8_t * pucMAC )
{
 8016e00:	b590      	push	{r4, r7, lr}
 8016e02:	b087      	sub	sp, #28
 8016e04:	af00      	add	r7, sp, #0
 8016e06:	6078      	str	r0, [r7, #4]
    int iiIndex, ijIndex;
    uint32_t ulCRC32 = 0xFFFFFFFF;
 8016e08:	f04f 33ff 	mov.w	r3, #4294967295
 8016e0c:	60fb      	str	r3, [r7, #12]

    for( ijIndex = 0; ijIndex < 6; ijIndex++ )
 8016e0e:	2300      	movs	r3, #0
 8016e10:	613b      	str	r3, [r7, #16]
 8016e12:	e024      	b.n	8016e5e <prvComputeCRC32_MAC+0x5e>
    {
        ulCRC32 = ulCRC32 ^ ( uint32_t ) pucMAC[ ijIndex ];
 8016e14:	693b      	ldr	r3, [r7, #16]
 8016e16:	687a      	ldr	r2, [r7, #4]
 8016e18:	4413      	add	r3, r2
 8016e1a:	781b      	ldrb	r3, [r3, #0]
 8016e1c:	461a      	mov	r2, r3
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	4053      	eors	r3, r2
 8016e22:	60fb      	str	r3, [r7, #12]

        for( iiIndex = 0; iiIndex < 8; iiIndex++ )
 8016e24:	2300      	movs	r3, #0
 8016e26:	617b      	str	r3, [r7, #20]
 8016e28:	e013      	b.n	8016e52 <prvComputeCRC32_MAC+0x52>
        {
            if( ulCRC32 & 1 )
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	f003 0301 	and.w	r3, r3, #1
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d008      	beq.n	8016e46 <prvComputeCRC32_MAC+0x46>
            {
                ulCRC32 = ( ulCRC32 >> 1 ) ^ prvRevBits32( 0x04C11DB7 ); /* IEEE 802.3 CRC32 polynomial - 0x04C11DB7 */
 8016e34:	68fb      	ldr	r3, [r7, #12]
 8016e36:	085c      	lsrs	r4, r3, #1
 8016e38:	480e      	ldr	r0, [pc, #56]	@ (8016e74 <prvComputeCRC32_MAC+0x74>)
 8016e3a:	f7ff ffb9 	bl	8016db0 <prvRevBits32>
 8016e3e:	4603      	mov	r3, r0
 8016e40:	4063      	eors	r3, r4
 8016e42:	60fb      	str	r3, [r7, #12]
 8016e44:	e002      	b.n	8016e4c <prvComputeCRC32_MAC+0x4c>
            }
            else
            {
                ulCRC32 = ( ulCRC32 >> 1 );
 8016e46:	68fb      	ldr	r3, [r7, #12]
 8016e48:	085b      	lsrs	r3, r3, #1
 8016e4a:	60fb      	str	r3, [r7, #12]
        for( iiIndex = 0; iiIndex < 8; iiIndex++ )
 8016e4c:	697b      	ldr	r3, [r7, #20]
 8016e4e:	3301      	adds	r3, #1
 8016e50:	617b      	str	r3, [r7, #20]
 8016e52:	697b      	ldr	r3, [r7, #20]
 8016e54:	2b07      	cmp	r3, #7
 8016e56:	dde8      	ble.n	8016e2a <prvComputeCRC32_MAC+0x2a>
    for( ijIndex = 0; ijIndex < 6; ijIndex++ )
 8016e58:	693b      	ldr	r3, [r7, #16]
 8016e5a:	3301      	adds	r3, #1
 8016e5c:	613b      	str	r3, [r7, #16]
 8016e5e:	693b      	ldr	r3, [r7, #16]
 8016e60:	2b05      	cmp	r3, #5
 8016e62:	ddd7      	ble.n	8016e14 <prvComputeCRC32_MAC+0x14>
            }
        }
    }

    ulCRC32 = ~( ulCRC32 );
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	43db      	mvns	r3, r3
 8016e68:	60fb      	str	r3, [r7, #12]
    return ulCRC32;
 8016e6a:	68fb      	ldr	r3, [r7, #12]
}
 8016e6c:	4618      	mov	r0, r3
 8016e6e:	371c      	adds	r7, #28
 8016e70:	46bd      	mov	sp, r7
 8016e72:	bd90      	pop	{r4, r7, pc}
 8016e74:	04c11db7 	.word	0x04c11db7

08016e78 <prvComputeEthernet_MACHash>:

/* Compute the hash value of a given MAC address to index the bits in the Hash Table
 * Registers (ETH_MACHT0R and ETH_MACHT1R) */
static uint32_t prvComputeEthernet_MACHash( const uint8_t * pucMAC )
{
 8016e78:	b580      	push	{r7, lr}
 8016e7a:	b084      	sub	sp, #16
 8016e7c:	af00      	add	r7, sp, #0
 8016e7e:	6078      	str	r0, [r7, #4]
    uint32_t ulCRC32;
    uint32_t ulHash;

    /*  Calculate the 32-bit CRC for the MAC */
    ulCRC32 = prvComputeCRC32_MAC( pucMAC );
 8016e80:	6878      	ldr	r0, [r7, #4]
 8016e82:	f7ff ffbd 	bl	8016e00 <prvComputeCRC32_MAC>
 8016e86:	60f8      	str	r0, [r7, #12]

    /* Perform bitwise reversal on the CRC32 */
    ulHash = prvRevBits32( ulCRC32 );
 8016e88:	68f8      	ldr	r0, [r7, #12]
 8016e8a:	f7ff ff91 	bl	8016db0 <prvRevBits32>
 8016e8e:	60b8      	str	r0, [r7, #8]

    /* Take the upper 6 bits of the above result */
    return( ulHash >> 26 );
 8016e90:	68bb      	ldr	r3, [r7, #8]
 8016e92:	0e9b      	lsrs	r3, r3, #26
}
 8016e94:	4618      	mov	r0, r3
 8016e96:	3710      	adds	r7, #16
 8016e98:	46bd      	mov	sp, r7
 8016e9a:	bd80      	pop	{r7, pc}

08016e9c <prvSetMAC_HashFilter>:

/* Update the Hash Table Registers
 * (ETH_MACHT0R and ETH_MACHT1R) with hash value of the given MAC address */
static void prvSetMAC_HashFilter( ETH_HandleTypeDef * pxEthHandle,
                                  const uint8_t * pucMAC )
{
 8016e9c:	b580      	push	{r7, lr}
 8016e9e:	b084      	sub	sp, #16
 8016ea0:	af00      	add	r7, sp, #0
 8016ea2:	6078      	str	r0, [r7, #4]
 8016ea4:	6039      	str	r1, [r7, #0]
    uint32_t ulHash;

    /* Compute the hash */
    ulHash = prvComputeEthernet_MACHash( pucMAC );
 8016ea6:	6838      	ldr	r0, [r7, #0]
 8016ea8:	f7ff ffe6 	bl	8016e78 <prvComputeEthernet_MACHash>
 8016eac:	60f8      	str	r0, [r7, #12]

    /* Use the upper (MACHT1R) or lower (MACHT0R) Hash Table Registers
     * to set the required bit based on the ulHash */
    if( ulHash < 32 )
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	2b1f      	cmp	r3, #31
 8016eb2:	d80c      	bhi.n	8016ece <prvSetMAC_HashFilter+0x32>
    {
        pxEthHandle->Instance->MACHT0R |= ( 1 << ulHash );
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	681b      	ldr	r3, [r3, #0]
 8016eb8:	691a      	ldr	r2, [r3, #16]
 8016eba:	2101      	movs	r1, #1
 8016ebc:	68fb      	ldr	r3, [r7, #12]
 8016ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8016ec2:	4619      	mov	r1, r3
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	430a      	orrs	r2, r1
 8016eca:	611a      	str	r2, [r3, #16]
    }
    else
    {
        pxEthHandle->Instance->MACHT1R |= ( 1 << ( ulHash % 32 ) );
    }
}
 8016ecc:	e00d      	b.n	8016eea <prvSetMAC_HashFilter+0x4e>
        pxEthHandle->Instance->MACHT1R |= ( 1 << ( ulHash % 32 ) );
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	695a      	ldr	r2, [r3, #20]
 8016ed4:	68fb      	ldr	r3, [r7, #12]
 8016ed6:	f003 031f 	and.w	r3, r3, #31
 8016eda:	2101      	movs	r1, #1
 8016edc:	fa01 f303 	lsl.w	r3, r1, r3
 8016ee0:	4619      	mov	r1, r3
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	681b      	ldr	r3, [r3, #0]
 8016ee6:	430a      	orrs	r2, r1
 8016ee8:	615a      	str	r2, [r3, #20]
}
 8016eea:	bf00      	nop
 8016eec:	3710      	adds	r7, #16
 8016eee:	46bd      	mov	sp, r7
 8016ef0:	bd80      	pop	{r7, pc}

08016ef2 <pucGetRXBuffer>:
/*******************************************************************************
*                      Network Interface API Functions
*******************************************************************************/

static uint8_t * pucGetRXBuffer( size_t uxSize )
{
 8016ef2:	b580      	push	{r7, lr}
 8016ef4:	b086      	sub	sp, #24
 8016ef6:	af00      	add	r7, sp, #0
 8016ef8:	6078      	str	r0, [r7, #4]
    TickType_t uxBlockTimeTicks = ipMS_TO_MIN_TICKS( 10U );
 8016efa:	230a      	movs	r3, #10
 8016efc:	613b      	str	r3, [r7, #16]
    NetworkBufferDescriptor_t * pxBufferDescriptor;
    uint8_t * pucReturn = NULL;
 8016efe:	2300      	movs	r3, #0
 8016f00:	617b      	str	r3, [r7, #20]

    pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxSize, uxBlockTimeTicks );
 8016f02:	6939      	ldr	r1, [r7, #16]
 8016f04:	6878      	ldr	r0, [r7, #4]
 8016f06:	f7ff f9bf 	bl	8016288 <pxGetNetworkBufferWithDescriptor>
 8016f0a:	60f8      	str	r0, [r7, #12]

    if( pxBufferDescriptor != NULL )
 8016f0c:	68fb      	ldr	r3, [r7, #12]
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d002      	beq.n	8016f18 <pucGetRXBuffer+0x26>
    {
        pucReturn = pxBufferDescriptor->pucEthernetBuffer;
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f16:	617b      	str	r3, [r7, #20]
    }

    return pucReturn;
 8016f18:	697b      	ldr	r3, [r7, #20]
}
 8016f1a:	4618      	mov	r0, r3
 8016f1c:	3718      	adds	r7, #24
 8016f1e:	46bd      	mov	sp, r7
 8016f20:	bd80      	pop	{r7, pc}
	...

08016f24 <xSTM32H_NetworkInterfaceInitialise>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_NetworkInterfaceInitialise( NetworkInterface_t * pxInterface )
{
 8016f24:	b580      	push	{r7, lr}
 8016f26:	b08e      	sub	sp, #56	@ 0x38
 8016f28:	af02      	add	r7, sp, #8
 8016f2a:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFAIL;
 8016f2c:	2300      	movs	r3, #0
 8016f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NetworkEndPoint_t * pxEndPoint;
    HAL_StatusTypeDef xHalEthInitStatus;
    size_t uxIndex = 0;
 8016f30:	2300      	movs	r3, #0
 8016f32:	627b      	str	r3, [r7, #36]	@ 0x24

    if( xMacInitStatus == eMACInit )
 8016f34:	4b8d      	ldr	r3, [pc, #564]	@ (801716c <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8016f36:	781b      	ldrb	r3, [r3, #0]
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	f040 8104 	bne.w	8017146 <xSTM32H_NetworkInterfaceInitialise+0x222>
    {
        pxMyInterface = pxInterface;
 8016f3e:	4a8c      	ldr	r2, [pc, #560]	@ (8017170 <xSTM32H_NetworkInterfaceInitialise+0x24c>)
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	6013      	str	r3, [r2, #0]

        pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 8016f44:	6878      	ldr	r0, [r7, #4]
 8016f46:	f7f5 fb8f 	bl	800c668 <FreeRTOS_FirstEndPoint>
 8016f4a:	62b8      	str	r0, [r7, #40]	@ 0x28
        configASSERT( pxEndPoint != NULL );
 8016f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d104      	bne.n	8016f5c <xSTM32H_NetworkInterfaceInitialise+0x38>
 8016f52:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8016f56:	4887      	ldr	r0, [pc, #540]	@ (8017174 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8016f58:	f7ea f8de 	bl	8001118 <vAssertCalled>
        /*
         * Initialize ETH Handler
         * It assumes that Ethernet GPIO and clock configuration
         * are already done in the ETH_MspInit()
         */
        xEthHandle.Instance = ETH;
 8016f5c:	4b86      	ldr	r3, [pc, #536]	@ (8017178 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8016f5e:	4a87      	ldr	r2, [pc, #540]	@ (801717c <xSTM32H_NetworkInterfaceInitialise+0x258>)
 8016f60:	601a      	str	r2, [r3, #0]
        xEthHandle.Init.MACAddr = ( uint8_t * ) pxEndPoint->xMACAddress.ucBytes;
 8016f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f64:	33e8      	adds	r3, #232	@ 0xe8
 8016f66:	4a84      	ldr	r2, [pc, #528]	@ (8017178 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8016f68:	6053      	str	r3, [r2, #4]
        xEthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8016f6a:	4b83      	ldr	r3, [pc, #524]	@ (8017178 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8016f6c:	2201      	movs	r2, #1
 8016f6e:	721a      	strb	r2, [r3, #8]
        xEthHandle.Init.TxDesc = DMATxDscrTab;
 8016f70:	4b81      	ldr	r3, [pc, #516]	@ (8017178 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8016f72:	4a83      	ldr	r2, [pc, #524]	@ (8017180 <xSTM32H_NetworkInterfaceInitialise+0x25c>)
 8016f74:	60da      	str	r2, [r3, #12]
        xEthHandle.Init.RxDesc = DMARxDscrTab;
 8016f76:	4b80      	ldr	r3, [pc, #512]	@ (8017178 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8016f78:	4a82      	ldr	r2, [pc, #520]	@ (8017184 <xSTM32H_NetworkInterfaceInitialise+0x260>)
 8016f7a:	611a      	str	r2, [r3, #16]
        xEthHandle.Init.RxBuffLen = ( ETH_RX_BUF_SIZE - ipBUFFER_PADDING ) & ~( ( uint32_t ) 3U );
 8016f7c:	4b7e      	ldr	r3, [pc, #504]	@ (8017178 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8016f7e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8016f82:	615a      	str	r2, [r3, #20]

        /* Make sure that all unused fields are cleared. */
        memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 8016f84:	2260      	movs	r2, #96	@ 0x60
 8016f86:	2100      	movs	r1, #0
 8016f88:	487d      	ldr	r0, [pc, #500]	@ (8017180 <xSTM32H_NetworkInterfaceInitialise+0x25c>)
 8016f8a:	f009 fdf8 	bl	8020b7e <memset>
        memset( &( DMARxDscrTab ), '\0', sizeof( DMARxDscrTab ) );
 8016f8e:	2260      	movs	r2, #96	@ 0x60
 8016f90:	2100      	movs	r1, #0
 8016f92:	487c      	ldr	r0, [pc, #496]	@ (8017184 <xSTM32H_NetworkInterfaceInitialise+0x260>)
 8016f94:	f009 fdf3 	bl	8020b7e <memset>

        xHalEthInitStatus = HAL_ETH_Init( &( xEthHandle ) );
 8016f98:	4877      	ldr	r0, [pc, #476]	@ (8017178 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8016f9a:	f000 fc71 	bl	8017880 <HAL_ETH_Init>
 8016f9e:	4603      	mov	r3, r0
 8016fa0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

        if( xHalEthInitStatus == HAL_OK )
 8016fa4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	f040 80c9 	bne.w	8017140 <xSTM32H_NetworkInterfaceInitialise+0x21c>
        {
            /* Update MAC filter settings */
            xEthHandle.Instance->MACPFR |= ENABLE_HASH_FILTER_SETTINGS;
 8016fae:	4b72      	ldr	r3, [pc, #456]	@ (8017178 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	6899      	ldr	r1, [r3, #8]
 8016fb4:	4b70      	ldr	r3, [pc, #448]	@ (8017178 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8016fb6:	681a      	ldr	r2, [r3, #0]
 8016fb8:	f240 4316 	movw	r3, #1046	@ 0x416
 8016fbc:	430b      	orrs	r3, r1
 8016fbe:	6093      	str	r3, [r2, #8]

            /* Configuration for HAL_ETH_Transmit(_IT). */
            memset( &( xTxConfig ), 0, sizeof( ETH_TxPacketConfig ) );
 8016fc0:	2234      	movs	r2, #52	@ 0x34
 8016fc2:	2100      	movs	r1, #0
 8016fc4:	4870      	ldr	r0, [pc, #448]	@ (8017188 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8016fc6:	f009 fdda 	bl	8020b7e <memset>
            xTxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CRCPAD;
 8016fca:	4b6f      	ldr	r3, [pc, #444]	@ (8017188 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8016fcc:	2220      	movs	r2, #32
 8016fce:	601a      	str	r2, [r3, #0]

            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM != 0 )
            {
                /*xTxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC; */
                xTxConfig.Attributes |= ETH_TX_PACKETS_FEATURES_CSUM;
 8016fd0:	4b6d      	ldr	r3, [pc, #436]	@ (8017188 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8016fd2:	681b      	ldr	r3, [r3, #0]
 8016fd4:	f043 0301 	orr.w	r3, r3, #1
 8016fd8:	4a6b      	ldr	r2, [pc, #428]	@ (8017188 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8016fda:	6013      	str	r3, [r2, #0]
                xTxConfig.ChecksumCtrl = ETH_DMATXNDESCRF_CIC_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8016fdc:	4b6a      	ldr	r3, [pc, #424]	@ (8017188 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8016fde:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8016fe2:	615a      	str	r2, [r3, #20]
            #else
            {
                xTxConfig.ChecksumCtrl = ETH_CHECKSUM_DISABLE;
            }
            #endif
            xTxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8016fe4:	4b68      	ldr	r3, [pc, #416]	@ (8017188 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8016fe6:	2200      	movs	r2, #0
 8016fe8:	611a      	str	r2, [r3, #16]

            /* This counting semaphore will count the number of free TX DMA descriptors. */
            xTXDescriptorSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ETH_TX_DESC_CNT, ( UBaseType_t ) ETH_TX_DESC_CNT );
 8016fea:	2104      	movs	r1, #4
 8016fec:	2004      	movs	r0, #4
 8016fee:	f7eb fc01 	bl	80027f4 <xQueueCreateCountingSemaphore>
 8016ff2:	4603      	mov	r3, r0
 8016ff4:	4a65      	ldr	r2, [pc, #404]	@ (801718c <xSTM32H_NetworkInterfaceInitialise+0x268>)
 8016ff6:	6013      	str	r3, [r2, #0]
            configASSERT( xTXDescriptorSemaphore );
 8016ff8:	4b64      	ldr	r3, [pc, #400]	@ (801718c <xSTM32H_NetworkInterfaceInitialise+0x268>)
 8016ffa:	681b      	ldr	r3, [r3, #0]
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d104      	bne.n	801700a <xSTM32H_NetworkInterfaceInitialise+0xe6>
 8017000:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8017004:	485b      	ldr	r0, [pc, #364]	@ (8017174 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8017006:	f7ea f887 	bl	8001118 <vAssertCalled>

            xTransmissionMutex = xSemaphoreCreateMutex();
 801700a:	2001      	movs	r0, #1
 801700c:	f7eb fbd9 	bl	80027c2 <xQueueCreateMutex>
 8017010:	4603      	mov	r3, r0
 8017012:	4a5f      	ldr	r2, [pc, #380]	@ (8017190 <xSTM32H_NetworkInterfaceInitialise+0x26c>)
 8017014:	6013      	str	r3, [r2, #0]
            configASSERT( xTransmissionMutex );
 8017016:	4b5e      	ldr	r3, [pc, #376]	@ (8017190 <xSTM32H_NetworkInterfaceInitialise+0x26c>)
 8017018:	681b      	ldr	r3, [r3, #0]
 801701a:	2b00      	cmp	r3, #0
 801701c:	d104      	bne.n	8017028 <xSTM32H_NetworkInterfaceInitialise+0x104>
 801701e:	f240 117f 	movw	r1, #383	@ 0x17f
 8017022:	4854      	ldr	r0, [pc, #336]	@ (8017174 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8017024:	f7ea f878 	bl	8001118 <vAssertCalled>

            /* Assign Rx memory buffers to a DMA Rx descriptor */
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 8017028:	2300      	movs	r3, #0
 801702a:	627b      	str	r3, [r7, #36]	@ 0x24
 801702c:	e015      	b.n	801705a <xSTM32H_NetworkInterfaceInitialise+0x136>
            {
                uint8_t * pucBuffer;

                #if ( ipconfigZERO_COPY_RX_DRIVER != 0 )
                {
                    pucBuffer = pucGetRXBuffer( ETH_RX_BUF_SIZE );
 801702e:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8017032:	f7ff ff5e 	bl	8016ef2 <pucGetRXBuffer>
 8017036:	61f8      	str	r0, [r7, #28]
                    configASSERT( pucBuffer != NULL );
 8017038:	69fb      	ldr	r3, [r7, #28]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d104      	bne.n	8017048 <xSTM32H_NetworkInterfaceInitialise+0x124>
 801703e:	f240 1189 	movw	r1, #393	@ 0x189
 8017042:	484c      	ldr	r0, [pc, #304]	@ (8017174 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8017044:	f7ea f868 	bl	8001118 <vAssertCalled>
                {
                    pucBuffer = Rx_Buff[ uxIndex ];
                }
                #endif

                HAL_ETH_DescAssignMemory( &( xEthHandle ), uxIndex, pucBuffer, NULL );
 8017048:	2300      	movs	r3, #0
 801704a:	69fa      	ldr	r2, [r7, #28]
 801704c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801704e:	484a      	ldr	r0, [pc, #296]	@ (8017178 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017050:	f000 fd02 	bl	8017a58 <HAL_ETH_DescAssignMemory>
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 8017054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017056:	3301      	adds	r3, #1
 8017058:	627b      	str	r3, [r7, #36]	@ 0x24
 801705a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801705c:	2b03      	cmp	r3, #3
 801705e:	d9e6      	bls.n	801702e <xSTM32H_NetworkInterfaceInitialise+0x10a>
            }
            #endif
            #if ( ipconfigUSE_LLMNR == 1 )
            {
                /* Program the LLMNR address. */
                prvSetMAC_HashFilter( &xEthHandle, ( uint8_t * ) xLLMNR_MacAddress.ucBytes );
 8017060:	494c      	ldr	r1, [pc, #304]	@ (8017194 <xSTM32H_NetworkInterfaceInitialise+0x270>)
 8017062:	4845      	ldr	r0, [pc, #276]	@ (8017178 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017064:	f7ff ff1a 	bl	8016e9c <prvSetMAC_HashFilter>
            }
            #endif
            #if ( ( ipconfigUSE_LLMNR == 1 ) && ( ipconfigUSE_IPv6 != 0 ) )
            {
                prvSetMAC_HashFilter( &xEthHandle, ( uint8_t * ) xLLMNR_MacAddressIPv6.ucBytes );
 8017068:	494b      	ldr	r1, [pc, #300]	@ (8017198 <xSTM32H_NetworkInterfaceInitialise+0x274>)
 801706a:	4843      	ldr	r0, [pc, #268]	@ (8017178 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801706c:	f7ff ff16 	bl	8016e9c <prvSetMAC_HashFilter>
            }
            #endif

            {
                /* The EMAC address of the first end-point has been registered in HAL_ETH_Init(). */
                for( ;
 8017070:	e03a      	b.n	80170e8 <xSTM32H_NetworkInterfaceInitialise+0x1c4>
                     pxEndPoint != NULL;
                     pxEndPoint = FreeRTOS_NextEndPoint( pxMyInterface, pxEndPoint ) )
                {
                    switch( pxEndPoint->bits.bIPv6 )
 8017072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017074:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8017078:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801707c:	b2db      	uxtb	r3, r3
 801707e:	2b00      	cmp	r3, #0
 8017080:	d002      	beq.n	8017088 <xSTM32H_NetworkInterfaceInitialise+0x164>
 8017082:	2b01      	cmp	r3, #1
 8017084:	d00d      	beq.n	80170a2 <xSTM32H_NetworkInterfaceInitialise+0x17e>
                               break;
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        default:
                            /* MISRA 16.4 Compliance */
                            break;
 8017086:	e028      	b.n	80170da <xSTM32H_NetworkInterfaceInitialise+0x1b6>
                                if( xEthHandle.Init.MACAddr != ( uint8_t * ) pxEndPoint->xMACAddress.ucBytes )
 8017088:	4b3b      	ldr	r3, [pc, #236]	@ (8017178 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801708a:	685a      	ldr	r2, [r3, #4]
 801708c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801708e:	33e8      	adds	r3, #232	@ 0xe8
 8017090:	429a      	cmp	r2, r3
 8017092:	d021      	beq.n	80170d8 <xSTM32H_NetworkInterfaceInitialise+0x1b4>
                                    prvSetMAC_HashFilter( &xEthHandle, pxEndPoint->xMACAddress.ucBytes );
 8017094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017096:	33e8      	adds	r3, #232	@ 0xe8
 8017098:	4619      	mov	r1, r3
 801709a:	4837      	ldr	r0, [pc, #220]	@ (8017178 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801709c:	f7ff fefe 	bl	8016e9c <prvSetMAC_HashFilter>
                                break;
 80170a0:	e01a      	b.n	80170d8 <xSTM32H_NetworkInterfaceInitialise+0x1b4>
                                   uint8_t ucMACAddress[ 6 ] = { 0x33, 0x33, 0xff, 0, 0, 0 };
 80170a2:	4a3e      	ldr	r2, [pc, #248]	@ (801719c <xSTM32H_NetworkInterfaceInitialise+0x278>)
 80170a4:	f107 0314 	add.w	r3, r7, #20
 80170a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80170ac:	6018      	str	r0, [r3, #0]
 80170ae:	3304      	adds	r3, #4
 80170b0:	8019      	strh	r1, [r3, #0]
                                   ucMACAddress[ 3 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 13 ];
 80170b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80170b8:	75fb      	strb	r3, [r7, #23]
                                   ucMACAddress[ 4 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 14 ];
 80170ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170bc:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80170c0:	763b      	strb	r3, [r7, #24]
                                   ucMACAddress[ 5 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 15 ];
 80170c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170c4:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80170c8:	767b      	strb	r3, [r7, #25]
                                   prvSetMAC_HashFilter( &xEthHandle, ucMACAddress );
 80170ca:	f107 0314 	add.w	r3, r7, #20
 80170ce:	4619      	mov	r1, r3
 80170d0:	4829      	ldr	r0, [pc, #164]	@ (8017178 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80170d2:	f7ff fee3 	bl	8016e9c <prvSetMAC_HashFilter>
                               break;
 80170d6:	e000      	b.n	80170da <xSTM32H_NetworkInterfaceInitialise+0x1b6>
                                break;
 80170d8:	bf00      	nop
                     pxEndPoint = FreeRTOS_NextEndPoint( pxMyInterface, pxEndPoint ) )
 80170da:	4b25      	ldr	r3, [pc, #148]	@ (8017170 <xSTM32H_NetworkInterfaceInitialise+0x24c>)
 80170dc:	681b      	ldr	r3, [r3, #0]
 80170de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80170e0:	4618      	mov	r0, r3
 80170e2:	f7f5 fae3 	bl	800c6ac <FreeRTOS_NextEndPoint>
 80170e6:	62b8      	str	r0, [r7, #40]	@ 0x28
                     pxEndPoint != NULL;
 80170e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d1c1      	bne.n	8017072 <xSTM32H_NetworkInterfaceInitialise+0x14e>
            }

            #if ( ipconfigUSE_IPv6 != 0 )
            {
                /* Allow traffic destined to IPv6 all nodes multicast MAC 33:33:00:00:00:01 */
                const uint8_t ucMACAddress[ 6 ] = { 0x33, 0x33, 0, 0, 0, 0x01 };
 80170ee:	4a2c      	ldr	r2, [pc, #176]	@ (80171a0 <xSTM32H_NetworkInterfaceInitialise+0x27c>)
 80170f0:	f107 030c 	add.w	r3, r7, #12
 80170f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80170f8:	6018      	str	r0, [r3, #0]
 80170fa:	3304      	adds	r3, #4
 80170fc:	8019      	strh	r1, [r3, #0]
                prvSetMAC_HashFilter( &xEthHandle, ucMACAddress );
 80170fe:	f107 030c 	add.w	r3, r7, #12
 8017102:	4619      	mov	r1, r3
 8017104:	481c      	ldr	r0, [pc, #112]	@ (8017178 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017106:	f7ff fec9 	bl	8016e9c <prvSetMAC_HashFilter>
            }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            /* Initialize the MACB and set all PHY properties */
            prvMACBProbePhy();
 801710a:	f000 f911 	bl	8017330 <prvMACBProbePhy>

            /* Force a negotiation with the Switch or Router and wait for LS. */
            prvEthernetUpdateConfig( pdTRUE );
 801710e:	2001      	movs	r0, #1
 8017110:	f000 f926 	bl	8017360 <prvEthernetUpdateConfig>

            /* The deferred interrupt handler task is created at the highest
             *  possible priority to ensure the interrupt handler can return directly
             *  to it.  The task's handle is stored in xEMACTaskHandle so interrupts can
             *  notify the task when there is something to process. */
            if( xTaskCreate( prvEMACHandlerTask, niEMAC_HANDLER_TASK_NAME, niEMAC_HANDLER_TASK_STACK_SIZE, NULL, niEMAC_HANDLER_TASK_PRIORITY, &( xEMACTaskHandle ) ) == pdPASS )
 8017114:	4b23      	ldr	r3, [pc, #140]	@ (80171a4 <xSTM32H_NetworkInterfaceInitialise+0x280>)
 8017116:	9301      	str	r3, [sp, #4]
 8017118:	2305      	movs	r3, #5
 801711a:	9300      	str	r3, [sp, #0]
 801711c:	2300      	movs	r3, #0
 801711e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8017122:	4921      	ldr	r1, [pc, #132]	@ (80171a8 <xSTM32H_NetworkInterfaceInitialise+0x284>)
 8017124:	4821      	ldr	r0, [pc, #132]	@ (80171ac <xSTM32H_NetworkInterfaceInitialise+0x288>)
 8017126:	f7ec f867 	bl	80031f8 <xTaskCreate>
 801712a:	4603      	mov	r3, r0
 801712c:	2b01      	cmp	r3, #1
 801712e:	d103      	bne.n	8017138 <xSTM32H_NetworkInterfaceInitialise+0x214>
            {
                /* The task was created successfully. */
                xMacInitStatus = eMACPass;
 8017130:	4b0e      	ldr	r3, [pc, #56]	@ (801716c <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8017132:	2201      	movs	r2, #1
 8017134:	701a      	strb	r2, [r3, #0]
 8017136:	e006      	b.n	8017146 <xSTM32H_NetworkInterfaceInitialise+0x222>
            }
            else
            {
                xMacInitStatus = eMACFailed;
 8017138:	4b0c      	ldr	r3, [pc, #48]	@ (801716c <xSTM32H_NetworkInterfaceInitialise+0x248>)
 801713a:	2202      	movs	r2, #2
 801713c:	701a      	strb	r2, [r3, #0]
 801713e:	e002      	b.n	8017146 <xSTM32H_NetworkInterfaceInitialise+0x222>
            }
        }
        else
        {
            /* HAL_ETH_Init() returned an error, the driver gets into a fatal error sate. */
            xMacInitStatus = eMACFailed;
 8017140:	4b0a      	ldr	r3, [pc, #40]	@ (801716c <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8017142:	2202      	movs	r2, #2
 8017144:	701a      	strb	r2, [r3, #0]
        }
    } /* ( xMacInitStatus == eMACInit ) */

    if( xMacInitStatus == eMACPass )
 8017146:	4b09      	ldr	r3, [pc, #36]	@ (801716c <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8017148:	781b      	ldrb	r3, [r3, #0]
 801714a:	2b01      	cmp	r3, #1
 801714c:	d108      	bne.n	8017160 <xSTM32H_NetworkInterfaceInitialise+0x23c>
    {
        if( xPhyObject.ulLinkStatusMask != 0U )
 801714e:	4b18      	ldr	r3, [pc, #96]	@ (80171b0 <xSTM32H_NetworkInterfaceInitialise+0x28c>)
 8017150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017152:	2b00      	cmp	r3, #0
 8017154:	d004      	beq.n	8017160 <xSTM32H_NetworkInterfaceInitialise+0x23c>
        {
            xResult = pdPASS;
 8017156:	2301      	movs	r3, #1
 8017158:	62fb      	str	r3, [r7, #44]	@ 0x2c
            FreeRTOS_printf( ( "Link Status is high\n" ) );
 801715a:	4816      	ldr	r0, [pc, #88]	@ (80171b4 <xSTM32H_NetworkInterfaceInitialise+0x290>)
 801715c:	f009 f9e6 	bl	802052c <lUDPLoggingPrintf>
            /* For now pdFAIL will be returned. But prvEMACHandlerTask() is running
             * and it will keep on checking the PHY and set 'ulLinkStatusMask' when necessary. */
        }
    }

    return xResult;
 8017160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8017162:	4618      	mov	r0, r3
 8017164:	3730      	adds	r7, #48	@ 0x30
 8017166:	46bd      	mov	sp, r7
 8017168:	bd80      	pop	{r7, pc}
 801716a:	bf00      	nop
 801716c:	20002118 	.word	0x20002118
 8017170:	200021cc 	.word	0x200021cc
 8017174:	08025928 	.word	0x08025928
 8017178:	20002124 	.word	0x20002124
 801717c:	40028000 	.word	0x40028000
 8017180:	24040060 	.word	0x24040060
 8017184:	24040000 	.word	0x24040000
 8017188:	20002198 	.word	0x20002198
 801718c:	2000211c 	.word	0x2000211c
 8017190:	20002120 	.word	0x20002120
 8017194:	08025bb4 	.word	0x08025bb4
 8017198:	08025bbc 	.word	0x08025bbc
 801719c:	080259a0 	.word	0x080259a0
 80171a0:	080259a8 	.word	0x080259a8
 80171a4:	200021d0 	.word	0x200021d0
 80171a8:	0802597c 	.word	0x0802597c
 80171ac:	08017715 	.word	0x08017715
 80171b0:	200021d4 	.word	0x200021d4
 80171b4:	08025988 	.word	0x08025988

080171b8 <xSTM32H_GetPhyLinkStatus>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_GetPhyLinkStatus( NetworkInterface_t * pxInterface )
{
 80171b8:	b480      	push	{r7}
 80171ba:	b085      	sub	sp, #20
 80171bc:	af00      	add	r7, sp, #0
 80171be:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( xPhyObject.ulLinkStatusMask != 0U )
 80171c0:	4b07      	ldr	r3, [pc, #28]	@ (80171e0 <xSTM32H_GetPhyLinkStatus+0x28>)
 80171c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d002      	beq.n	80171ce <xSTM32H_GetPhyLinkStatus+0x16>
    {
        xReturn = pdPASS;
 80171c8:	2301      	movs	r3, #1
 80171ca:	60fb      	str	r3, [r7, #12]
 80171cc:	e001      	b.n	80171d2 <xSTM32H_GetPhyLinkStatus+0x1a>
    }
    else
    {
        xReturn = pdFAIL;
 80171ce:	2300      	movs	r3, #0
 80171d0:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 80171d2:	68fb      	ldr	r3, [r7, #12]
}
 80171d4:	4618      	mov	r0, r3
 80171d6:	3714      	adds	r7, #20
 80171d8:	46bd      	mov	sp, r7
 80171da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171de:	4770      	bx	lr
 80171e0:	200021d4 	.word	0x200021d4

080171e4 <pxSTM32H_FillInterfaceDescriptor>:
#endif
/*-----------------------------------------------------------*/

NetworkInterface_t * pxSTM32H_FillInterfaceDescriptor( BaseType_t xEMACIndex,
                                                       NetworkInterface_t * pxInterface )
{
 80171e4:	b580      	push	{r7, lr}
 80171e6:	b082      	sub	sp, #8
 80171e8:	af00      	add	r7, sp, #0
 80171ea:	6078      	str	r0, [r7, #4]
 80171ec:	6039      	str	r1, [r7, #0]

/* This function pxSTM32Hxx_FillInterfaceDescriptor() adds a network-interface.
 * Make sure that the object pointed to by 'pxInterface'
 * is declared static or global, and that it will remain to exist. */

    snprintf( pcName, sizeof( pcName ), "eth%u", ( unsigned ) xEMACIndex );
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	4a10      	ldr	r2, [pc, #64]	@ (8017234 <pxSTM32H_FillInterfaceDescriptor+0x50>)
 80171f2:	2111      	movs	r1, #17
 80171f4:	4810      	ldr	r0, [pc, #64]	@ (8017238 <pxSTM32H_FillInterfaceDescriptor+0x54>)
 80171f6:	f00a f9c5 	bl	8021584 <snprintf>

    memset( pxInterface, '\0', sizeof( *pxInterface ) );
 80171fa:	2228      	movs	r2, #40	@ 0x28
 80171fc:	2100      	movs	r1, #0
 80171fe:	6838      	ldr	r0, [r7, #0]
 8017200:	f009 fcbd 	bl	8020b7e <memset>
    pxInterface->pcName = pcName;                    /* Just for logging, debugging. */
 8017204:	683b      	ldr	r3, [r7, #0]
 8017206:	4a0c      	ldr	r2, [pc, #48]	@ (8017238 <pxSTM32H_FillInterfaceDescriptor+0x54>)
 8017208:	601a      	str	r2, [r3, #0]
    pxInterface->pvArgument = ( void * ) xEMACIndex; /* Has only meaning for the driver functions. */
 801720a:	687a      	ldr	r2, [r7, #4]
 801720c:	683b      	ldr	r3, [r7, #0]
 801720e:	605a      	str	r2, [r3, #4]
    pxInterface->pfInitialise = xSTM32H_NetworkInterfaceInitialise;
 8017210:	683b      	ldr	r3, [r7, #0]
 8017212:	4a0a      	ldr	r2, [pc, #40]	@ (801723c <pxSTM32H_FillInterfaceDescriptor+0x58>)
 8017214:	609a      	str	r2, [r3, #8]
    pxInterface->pfOutput = xSTM32H_NetworkInterfaceOutput;
 8017216:	683b      	ldr	r3, [r7, #0]
 8017218:	4a09      	ldr	r2, [pc, #36]	@ (8017240 <pxSTM32H_FillInterfaceDescriptor+0x5c>)
 801721a:	60da      	str	r2, [r3, #12]
    pxInterface->pfGetPhyLinkStatus = xSTM32H_GetPhyLinkStatus;
 801721c:	683b      	ldr	r3, [r7, #0]
 801721e:	4a09      	ldr	r2, [pc, #36]	@ (8017244 <pxSTM32H_FillInterfaceDescriptor+0x60>)
 8017220:	611a      	str	r2, [r3, #16]

    FreeRTOS_AddNetworkInterface( pxInterface );
 8017222:	6838      	ldr	r0, [r7, #0]
 8017224:	f7f5 f94c 	bl	800c4c0 <FreeRTOS_AddNetworkInterface>

    return pxInterface;
 8017228:	683b      	ldr	r3, [r7, #0]
}
 801722a:	4618      	mov	r0, r3
 801722c:	3708      	adds	r7, #8
 801722e:	46bd      	mov	sp, r7
 8017230:	bd80      	pop	{r7, pc}
 8017232:	bf00      	nop
 8017234:	080259b0 	.word	0x080259b0
 8017238:	20002214 	.word	0x20002214
 801723c:	08016f25 	.word	0x08016f25
 8017240:	08017249 	.word	0x08017249
 8017244:	080171b9 	.word	0x080171b9

08017248 <xSTM32H_NetworkInterfaceOutput>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_NetworkInterfaceOutput( NetworkInterface_t * pxInterface,
                                                  NetworkBufferDescriptor_t * const pxBuffer,
                                                  BaseType_t xReleaseAfterSend )
{
 8017248:	b580      	push	{r7, lr}
 801724a:	b08a      	sub	sp, #40	@ 0x28
 801724c:	af00      	add	r7, sp, #0
 801724e:	60f8      	str	r0, [r7, #12]
 8017250:	60b9      	str	r1, [r7, #8]
 8017252:	607a      	str	r2, [r7, #4]
    BaseType_t xResult = pdFAIL;
 8017254:	2300      	movs	r3, #0
 8017256:	627b      	str	r3, [r7, #36]	@ 0x24
    TickType_t xBlockTimeTicks = pdMS_TO_TICKS( 100U );
 8017258:	2364      	movs	r3, #100	@ 0x64
 801725a:	623b      	str	r3, [r7, #32]
    uint8_t * pucTXBuffer;

    if( xSTM32H_GetPhyLinkStatus( pxInterface ) == pdPASS )
 801725c:	68f8      	ldr	r0, [r7, #12]
 801725e:	f7ff ffab 	bl	80171b8 <xSTM32H_GetPhyLinkStatus>
 8017262:	4603      	mov	r3, r0
 8017264:	2b01      	cmp	r3, #1
 8017266:	d14c      	bne.n	8017302 <xSTM32H_NetworkInterfaceOutput+0xba>
    {
        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            /* Zero-copy method, pass the buffer. */
            pucTXBuffer = pxBuffer->pucEthernetBuffer;
 8017268:	68bb      	ldr	r3, [r7, #8]
 801726a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801726c:	61fb      	str	r3, [r7, #28]

            /* As the buffer is passed to the driver, it must exist.
             * The library takes care of this. */
            configASSERT( xReleaseAfterSend != pdFALSE );
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	2b00      	cmp	r3, #0
 8017272:	d104      	bne.n	801727e <xSTM32H_NetworkInterfaceOutput+0x36>
 8017274:	f44f 7114 	mov.w	r1, #592	@ 0x250
 8017278:	4827      	ldr	r0, [pc, #156]	@ (8017318 <xSTM32H_NetworkInterfaceOutput+0xd0>)
 801727a:	f7e9 ff4d 	bl	8001118 <vAssertCalled>
            pucTXBuffer = Tx_Buff[ xEthHandle.TxDescList.CurTxDesc ];
            /* The copy method, left here for educational purposes. */
            configASSERT( pxBuffer->xDataLength <= sizeof( Tx_Buff[ 0 ] ) );
        #endif

        ETH_BufferTypeDef xTransmitBuffer =
 801727e:	69fb      	ldr	r3, [r7, #28]
 8017280:	613b      	str	r3, [r7, #16]
        {
            .buffer = pucTXBuffer,
            .len    = pxBuffer->xDataLength,
 8017282:	68bb      	ldr	r3, [r7, #8]
 8017284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        ETH_BufferTypeDef xTransmitBuffer =
 8017286:	617b      	str	r3, [r7, #20]
 8017288:	2300      	movs	r3, #0
 801728a:	61bb      	str	r3, [r7, #24]
            .next   = NULL /* FreeRTOS+TCP does not use linked buffers. */
        };
        /* This is the total length, which is equal to the buffer. */
        xTxConfig.Length = pxBuffer->xDataLength;
 801728c:	68bb      	ldr	r3, [r7, #8]
 801728e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017290:	4a22      	ldr	r2, [pc, #136]	@ (801731c <xSTM32H_NetworkInterfaceOutput+0xd4>)
 8017292:	6053      	str	r3, [r2, #4]
        xTxConfig.TxBuffer = &( xTransmitBuffer );
 8017294:	4a21      	ldr	r2, [pc, #132]	@ (801731c <xSTM32H_NetworkInterfaceOutput+0xd4>)
 8017296:	f107 0310 	add.w	r3, r7, #16
 801729a:	6093      	str	r3, [r2, #8]

        /* This counting semaphore counts the number of free TX DMA descriptors. */
        if( xSemaphoreTake( xTXDescriptorSemaphore, xBlockTimeTicks ) != pdPASS )
 801729c:	4b20      	ldr	r3, [pc, #128]	@ (8017320 <xSTM32H_NetworkInterfaceOutput+0xd8>)
 801729e:	681b      	ldr	r3, [r3, #0]
 80172a0:	6a39      	ldr	r1, [r7, #32]
 80172a2:	4618      	mov	r0, r3
 80172a4:	f7eb fc88 	bl	8002bb8 <xQueueSemaphoreTake>
 80172a8:	4603      	mov	r3, r0
 80172aa:	2b01      	cmp	r3, #1
 80172ac:	d003      	beq.n	80172b6 <xSTM32H_NetworkInterfaceOutput+0x6e>
        {
            /* If the logging routine is using the network, the following message
             * may cause a new error message. */
            FreeRTOS_printf( ( "emacps_send_message: Time-out waiting for TX buffer\n" ) );
 80172ae:	481d      	ldr	r0, [pc, #116]	@ (8017324 <xSTM32H_NetworkInterfaceOutput+0xdc>)
 80172b0:	f009 f93c 	bl	802052c <lUDPLoggingPrintf>
 80172b4:	e025      	b.n	8017302 <xSTM32H_NetworkInterfaceOutput+0xba>
  __ASM volatile ("dsb 0xF":::"memory");
 80172b6:	f3bf 8f4f 	dsb	sy
}
 80172ba:	bf00      	nop
            /* Memory barrier: Make sure that the data written to the packet buffer got written. */
            __DSB();

            /* Get exclusive access to the TX process.
             * Both the IP-task and the EMAC task will work on the TX process. */
            if( xSemaphoreTake( xTransmissionMutex, xBlockTimeTicks ) != pdFAIL )
 80172bc:	4b1a      	ldr	r3, [pc, #104]	@ (8017328 <xSTM32H_NetworkInterfaceOutput+0xe0>)
 80172be:	681b      	ldr	r3, [r3, #0]
 80172c0:	6a39      	ldr	r1, [r7, #32]
 80172c2:	4618      	mov	r0, r3
 80172c4:	f7eb fc78 	bl	8002bb8 <xQueueSemaphoreTake>
 80172c8:	4603      	mov	r3, r0
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d019      	beq.n	8017302 <xSTM32H_NetworkInterfaceOutput+0xba>
            {
                #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    /* Do not release the buffer. */
                    xReleaseAfterSend = pdFALSE;
 80172ce:	2300      	movs	r3, #0
 80172d0:	607b      	str	r3, [r7, #4]
                     * to the physical memory. */
                    __DSB();
                }
                #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */

                if( HAL_ETH_Transmit_IT( &( xEthHandle ), &( xTxConfig ) ) == HAL_OK )
 80172d2:	4912      	ldr	r1, [pc, #72]	@ (801731c <xSTM32H_NetworkInterfaceOutput+0xd4>)
 80172d4:	4815      	ldr	r0, [pc, #84]	@ (801732c <xSTM32H_NetworkInterfaceOutput+0xe4>)
 80172d6:	f000 fcef 	bl	8017cb8 <HAL_ETH_Transmit_IT>
 80172da:	4603      	mov	r3, r0
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d102      	bne.n	80172e6 <xSTM32H_NetworkInterfaceOutput+0x9e>
                {
                    xResult = pdPASS;
 80172e0:	2301      	movs	r3, #1
 80172e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80172e4:	e006      	b.n	80172f4 <xSTM32H_NetworkInterfaceOutput+0xac>
                }
                else
                {
                    /* As the transmission packet was not queued,
                     * the counting semaphore should be given. */
                    xSemaphoreGive( xTXDescriptorSemaphore );
 80172e6:	4b0e      	ldr	r3, [pc, #56]	@ (8017320 <xSTM32H_NetworkInterfaceOutput+0xd8>)
 80172e8:	6818      	ldr	r0, [r3, #0]
 80172ea:	2300      	movs	r3, #0
 80172ec:	2200      	movs	r2, #0
 80172ee:	2100      	movs	r1, #0
 80172f0:	f7eb faaa 	bl	8002848 <xQueueGenericSend>
                }

                /* And release the mutex. */
                xSemaphoreGive( xTransmissionMutex );
 80172f4:	4b0c      	ldr	r3, [pc, #48]	@ (8017328 <xSTM32H_NetworkInterfaceOutput+0xe0>)
 80172f6:	6818      	ldr	r0, [r3, #0]
 80172f8:	2300      	movs	r3, #0
 80172fa:	2200      	movs	r2, #0
 80172fc:	2100      	movs	r1, #0
 80172fe:	f7eb faa3 	bl	8002848 <xQueueGenericSend>
            /* Call the standard trace macro to log the send event. */
            iptraceNETWORK_INTERFACE_TRANSMIT();
        }
    }

    if( xReleaseAfterSend != pdFALSE )
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	2b00      	cmp	r3, #0
 8017306:	d002      	beq.n	801730e <xSTM32H_NetworkInterfaceOutput+0xc6>
    {
        vReleaseNetworkBufferAndDescriptor( pxBuffer );
 8017308:	68b8      	ldr	r0, [r7, #8]
 801730a:	f7ff f825 	bl	8016358 <vReleaseNetworkBufferAndDescriptor>
    }

    return xResult;
 801730e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8017310:	4618      	mov	r0, r3
 8017312:	3728      	adds	r7, #40	@ 0x28
 8017314:	46bd      	mov	sp, r7
 8017316:	bd80      	pop	{r7, pc}
 8017318:	08025928 	.word	0x08025928
 801731c:	20002198 	.word	0x20002198
 8017320:	2000211c 	.word	0x2000211c
 8017324:	080259b8 	.word	0x080259b8
 8017328:	20002120 	.word	0x20002120
 801732c:	20002124 	.word	0x20002124

08017330 <prvMACBProbePhy>:
/*******************************************************************************
*                      Network Interface Static Functions
*******************************************************************************/

static void prvMACBProbePhy( void )
{
 8017330:	b580      	push	{r7, lr}
 8017332:	af00      	add	r7, sp, #0
    /* Bind the write and read access functions. */
    vPhyInitialise( &( xPhyObject ),
 8017334:	4a06      	ldr	r2, [pc, #24]	@ (8017350 <prvMACBProbePhy+0x20>)
 8017336:	4907      	ldr	r1, [pc, #28]	@ (8017354 <prvMACBProbePhy+0x24>)
 8017338:	4807      	ldr	r0, [pc, #28]	@ (8017358 <prvMACBProbePhy+0x28>)
 801733a:	f7ff f8c5 	bl	80164c8 <vPhyInitialise>
                    ( xApplicationPhyReadHook_t ) ETH_PHY_IO_ReadReg,
                    ( xApplicationPhyWriteHook_t ) ETH_PHY_IO_WriteReg );
    /* Poll the bus for all connected PHY's. */
    xPhyDiscover( &( xPhyObject ) );
 801733e:	4806      	ldr	r0, [pc, #24]	@ (8017358 <prvMACBProbePhy+0x28>)
 8017340:	f7ff f8d8 	bl	80164f4 <xPhyDiscover>
    /* Configure them using the properties provided. */
    xPhyConfigure( &( xPhyObject ), &( xPHYProperties ) );
 8017344:	4905      	ldr	r1, [pc, #20]	@ (801735c <prvMACBProbePhy+0x2c>)
 8017346:	4804      	ldr	r0, [pc, #16]	@ (8017358 <prvMACBProbePhy+0x28>)
 8017348:	f7ff f9d2 	bl	80166f0 <xPhyConfigure>
}
 801734c:	bf00      	nop
 801734e:	bd80      	pop	{r7, pc}
 8017350:	08017551 	.word	0x08017551
 8017354:	08017519 	.word	0x08017519
 8017358:	200021d4 	.word	0x200021d4
 801735c:	08025cb4 	.word	0x08025cb4

08017360 <prvEthernetUpdateConfig>:
/*-----------------------------------------------------------*/

static void prvEthernetUpdateConfig( BaseType_t xForce )
{
 8017360:	b580      	push	{r7, lr}
 8017362:	b09e      	sub	sp, #120	@ 0x78
 8017364:	af00      	add	r7, sp, #0
 8017366:	6078      	str	r0, [r7, #4]
    ETH_MACConfigTypeDef MACConf;
    uint32_t speed = 0, duplex = 0;
 8017368:	2300      	movs	r3, #0
 801736a:	677b      	str	r3, [r7, #116]	@ 0x74
 801736c:	2300      	movs	r3, #0
 801736e:	673b      	str	r3, [r7, #112]	@ 0x70

    FreeRTOS_printf( ( "prvEthernetUpdateConfig: LS mask %02lX Force %d\n",
 8017370:	4b25      	ldr	r3, [pc, #148]	@ (8017408 <prvEthernetUpdateConfig+0xa8>)
 8017372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017374:	687a      	ldr	r2, [r7, #4]
 8017376:	4619      	mov	r1, r3
 8017378:	4824      	ldr	r0, [pc, #144]	@ (801740c <prvEthernetUpdateConfig+0xac>)
 801737a:	f009 f8d7 	bl	802052c <lUDPLoggingPrintf>
                       xPhyObject.ulLinkStatusMask,
                       ( int ) xForce ) );

    if( ( xForce != pdFALSE ) || ( xPhyObject.ulLinkStatusMask != 0 ) )
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	2b00      	cmp	r3, #0
 8017382:	d103      	bne.n	801738c <prvEthernetUpdateConfig+0x2c>
 8017384:	4b20      	ldr	r3, [pc, #128]	@ (8017408 <prvEthernetUpdateConfig+0xa8>)
 8017386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017388:	2b00      	cmp	r3, #0
 801738a:	d035      	beq.n	80173f8 <prvEthernetUpdateConfig+0x98>
    {
        /* Restart the auto-negotiation. */
        xPhyStartAutoNegotiation( &xPhyObject, xPhyGetMask( &( xPhyObject ) ) );
 801738c:	4b1e      	ldr	r3, [pc, #120]	@ (8017408 <prvEthernetUpdateConfig+0xa8>)
 801738e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017390:	2201      	movs	r2, #1
 8017392:	fa02 f303 	lsl.w	r3, r2, r3
 8017396:	3b01      	subs	r3, #1
 8017398:	4619      	mov	r1, r3
 801739a:	481b      	ldr	r0, [pc, #108]	@ (8017408 <prvEthernetUpdateConfig+0xa8>)
 801739c:	f7ff faae 	bl	80168fc <xPhyStartAutoNegotiation>

        /* Configure the MAC with the Duplex Mode fixed by the
         * auto-negotiation process. */
        if( xPhyObject.xPhyProperties.ucDuplex == PHY_DUPLEX_FULL )
 80173a0:	4b19      	ldr	r3, [pc, #100]	@ (8017408 <prvEthernetUpdateConfig+0xa8>)
 80173a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80173a6:	2b02      	cmp	r3, #2
 80173a8:	d103      	bne.n	80173b2 <prvEthernetUpdateConfig+0x52>
        {
            duplex = ETH_FULLDUPLEX_MODE;
 80173aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80173ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80173b0:	e001      	b.n	80173b6 <prvEthernetUpdateConfig+0x56>
        }
        else
        {
            duplex = ETH_HALFDUPLEX_MODE;
 80173b2:	2300      	movs	r3, #0
 80173b4:	673b      	str	r3, [r7, #112]	@ 0x70
        }

        /* Configure the MAC with the speed fixed by the
         * auto-negotiation process. */
        if( xPhyObject.xPhyProperties.ucSpeed == PHY_SPEED_10 )
 80173b6:	4b14      	ldr	r3, [pc, #80]	@ (8017408 <prvEthernetUpdateConfig+0xa8>)
 80173b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80173bc:	2b01      	cmp	r3, #1
 80173be:	d102      	bne.n	80173c6 <prvEthernetUpdateConfig+0x66>
        {
            speed = ETH_SPEED_10M;
 80173c0:	2300      	movs	r3, #0
 80173c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80173c4:	e002      	b.n	80173cc <prvEthernetUpdateConfig+0x6c>
        }
        else
        {
            speed = ETH_SPEED_100M;
 80173c6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80173ca:	677b      	str	r3, [r7, #116]	@ 0x74
        }

        /* Get MAC and configure it */
        HAL_ETH_GetMACConfig( &( xEthHandle ), &( MACConf ) );
 80173cc:	f107 030c 	add.w	r3, r7, #12
 80173d0:	4619      	mov	r1, r3
 80173d2:	480f      	ldr	r0, [pc, #60]	@ (8017410 <prvEthernetUpdateConfig+0xb0>)
 80173d4:	f000 ffcc 	bl	8018370 <HAL_ETH_GetMACConfig>
        MACConf.DuplexMode = duplex;
 80173d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80173da:	627b      	str	r3, [r7, #36]	@ 0x24
        MACConf.Speed = speed;
 80173dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80173de:	623b      	str	r3, [r7, #32]
        HAL_ETH_SetMACConfig( &( xEthHandle ), &( MACConf ) );
 80173e0:	f107 030c 	add.w	r3, r7, #12
 80173e4:	4619      	mov	r1, r3
 80173e6:	480a      	ldr	r0, [pc, #40]	@ (8017410 <prvEthernetUpdateConfig+0xb0>)
 80173e8:	f001 f996 	bl	8018718 <HAL_ETH_SetMACConfig>
        #if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM != 0 )
        {
            MACConf.ChecksumOffload = ENABLE;
 80173ec:	2301      	movs	r3, #1
 80173ee:	743b      	strb	r3, [r7, #16]
            MACConf.ChecksumOffload = DISABLE;
        }
        #endif /* ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM != 0 ) */

        /* Restart MAC interface */
        HAL_ETH_Start_IT( &( xEthHandle ) );
 80173f0:	4807      	ldr	r0, [pc, #28]	@ (8017410 <prvEthernetUpdateConfig+0xb0>)
 80173f2:	f000 fb64 	bl	8017abe <HAL_ETH_Start_IT>
 80173f6:	e003      	b.n	8017400 <prvEthernetUpdateConfig+0xa0>
    }
    else
    {
        /* Stop MAC interface */
        HAL_ETH_Stop_IT( &( xEthHandle ) );
 80173f8:	4805      	ldr	r0, [pc, #20]	@ (8017410 <prvEthernetUpdateConfig+0xb0>)
 80173fa:	f000 fbe5 	bl	8017bc8 <HAL_ETH_Stop_IT>
    }
}
 80173fe:	bf00      	nop
 8017400:	bf00      	nop
 8017402:	3778      	adds	r7, #120	@ 0x78
 8017404:	46bd      	mov	sp, r7
 8017406:	bd80      	pop	{r7, pc}
 8017408:	200021d4 	.word	0x200021d4
 801740c:	080259f0 	.word	0x080259f0
 8017410:	20002124 	.word	0x20002124

08017414 <prvNetworkInterfaceInput>:
/*-----------------------------------------------------------*/

static BaseType_t prvNetworkInterfaceInput( void )
{
 8017414:	b580      	push	{r7, lr}
 8017416:	b08c      	sub	sp, #48	@ 0x30
 8017418:	af00      	add	r7, sp, #0
    BaseType_t xReturn = 0;
 801741a:	2300      	movs	r3, #0
 801741c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* For as long as a packet is immediately available. */
    for( ; ; )
    {
        NetworkBufferDescriptor_t * pxBufferDescriptor;
        NetworkBufferDescriptor_t * pxReceivedBuffer = NULL;
 801741e:	2300      	movs	r3, #0
 8017420:	62bb      	str	r3, [r7, #40]	@ 0x28
        ETH_BufferTypeDef data_buffer;
        size_t uxDataLength;
        size_t uxLength;

        uxDataLength = HAL_ETH_GetRxData( &( xEthHandle ), &( data_buffer ) );
 8017422:	f107 0308 	add.w	r3, r7, #8
 8017426:	4619      	mov	r1, r3
 8017428:	4838      	ldr	r0, [pc, #224]	@ (801750c <prvNetworkInterfaceInput+0xf8>)
 801742a:	f000 fd19 	bl	8017e60 <HAL_ETH_GetRxData>
 801742e:	61f8      	str	r0, [r7, #28]

        if( uxDataLength == 0U )
 8017430:	69fb      	ldr	r3, [r7, #28]
 8017432:	2b00      	cmp	r3, #0
 8017434:	d101      	bne.n	801743a <prvNetworkInterfaceInput+0x26>
                vReleaseNetworkBufferAndDescriptor( pxReceivedBuffer );
            }
        }
    }

    return xReturn;
 8017436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017438:	e064      	b.n	8017504 <prvNetworkInterfaceInput+0xf0>
        xReturn++;
 801743a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801743c:	3301      	adds	r3, #1
 801743e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uxLength = ETH_RX_BUF_SIZE;
 8017440:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8017444:	61bb      	str	r3, [r7, #24]
            if( data_buffer.buffer != NULL )
 8017446:	68bb      	ldr	r3, [r7, #8]
 8017448:	2b00      	cmp	r3, #0
 801744a:	d004      	beq.n	8017456 <prvNetworkInterfaceInput+0x42>
                pxReceivedBuffer = pxPacketBuffer_to_NetworkBuffer( data_buffer.buffer );
 801744c:	68bb      	ldr	r3, [r7, #8]
 801744e:	4618      	mov	r0, r3
 8017450:	f7f2 f8ab 	bl	80095aa <pxPacketBuffer_to_NetworkBuffer>
 8017454:	62b8      	str	r0, [r7, #40]	@ 0x28
            if( pxReceivedBuffer == NULL )
 8017456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017458:	2b00      	cmp	r3, #0
 801745a:	d102      	bne.n	8017462 <prvNetworkInterfaceInput+0x4e>
                FreeRTOS_printf( ( "Strange: no descriptor received\n" ) );
 801745c:	482c      	ldr	r0, [pc, #176]	@ (8017510 <prvNetworkInterfaceInput+0xfc>)
 801745e:	f009 f865 	bl	802052c <lUDPLoggingPrintf>
        pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxLength, 0u );
 8017462:	2100      	movs	r1, #0
 8017464:	69b8      	ldr	r0, [r7, #24]
 8017466:	f7fe ff0f 	bl	8016288 <pxGetNetworkBufferWithDescriptor>
 801746a:	6178      	str	r0, [r7, #20]
            if( pxBufferDescriptor == NULL )
 801746c:	697b      	ldr	r3, [r7, #20]
 801746e:	2b00      	cmp	r3, #0
 8017470:	d102      	bne.n	8017478 <prvNetworkInterfaceInput+0x64>
                pxReceivedBuffer = NULL;
 8017472:	2300      	movs	r3, #0
 8017474:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017476:	e005      	b.n	8017484 <prvNetworkInterfaceInput+0x70>
            else if( pxReceivedBuffer != NULL )
 8017478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801747a:	2b00      	cmp	r3, #0
 801747c:	d002      	beq.n	8017484 <prvNetworkInterfaceInput+0x70>
                pxReceivedBuffer->xDataLength = uxDataLength;
 801747e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017480:	69fa      	ldr	r2, [r7, #28]
 8017482:	629a      	str	r2, [r3, #40]	@ 0x28
            uint8_t * pucBuffer = NULL;
 8017484:	2300      	movs	r3, #0
 8017486:	627b      	str	r3, [r7, #36]	@ 0x24
            if( pxBufferDescriptor != NULL )
 8017488:	697b      	ldr	r3, [r7, #20]
 801748a:	2b00      	cmp	r3, #0
 801748c:	d002      	beq.n	8017494 <prvNetworkInterfaceInput+0x80>
                pucBuffer = pxBufferDescriptor->pucEthernetBuffer;
 801748e:	697b      	ldr	r3, [r7, #20]
 8017490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017492:	627b      	str	r3, [r7, #36]	@ 0x24
            HAL_ETH_BuildRxDescriptors( &( xEthHandle ), pucBuffer );
 8017494:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017496:	481d      	ldr	r0, [pc, #116]	@ (801750c <prvNetworkInterfaceInput+0xf8>)
 8017498:	f000 fd2a 	bl	8017ef0 <HAL_ETH_BuildRxDescriptors>
        if( pxReceivedBuffer != NULL )
 801749c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d0bd      	beq.n	801741e <prvNetworkInterfaceInput+0xa>
            BaseType_t xDoRelease = pdFALSE;
 80174a2:	2300      	movs	r3, #0
 80174a4:	623b      	str	r3, [r7, #32]
            if( eConsiderFrameForProcessing( pxReceivedBuffer->pucEthernetBuffer ) != eProcessBuffer )
 80174a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80174aa:	4618      	mov	r0, r3
 80174ac:	f7f1 f9e4 	bl	8008878 <eConsiderFrameForProcessing>
 80174b0:	4603      	mov	r3, r0
 80174b2:	2b01      	cmp	r3, #1
 80174b4:	d002      	beq.n	80174bc <prvNetworkInterfaceInput+0xa8>
                xDoRelease = pdTRUE;
 80174b6:	2301      	movs	r3, #1
 80174b8:	623b      	str	r3, [r7, #32]
 80174ba:	e01c      	b.n	80174f6 <prvNetworkInterfaceInput+0xe2>
                IPStackEvent_t xRxEvent =
 80174bc:	2301      	movs	r3, #1
 80174be:	703b      	strb	r3, [r7, #0]
 80174c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174c2:	607b      	str	r3, [r7, #4]
                pxReceivedBuffer->pxInterface = pxMyInterface;
 80174c4:	4b13      	ldr	r3, [pc, #76]	@ (8017514 <prvNetworkInterfaceInput+0x100>)
 80174c6:	681a      	ldr	r2, [r3, #0]
 80174c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174ca:	62da      	str	r2, [r3, #44]	@ 0x2c
                pxReceivedBuffer->pxEndPoint = FreeRTOS_MatchingEndpoint( pxMyInterface, pxReceivedBuffer->pucEthernetBuffer );
 80174cc:	4b11      	ldr	r3, [pc, #68]	@ (8017514 <prvNetworkInterfaceInput+0x100>)
 80174ce:	681a      	ldr	r2, [r3, #0]
 80174d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80174d4:	4619      	mov	r1, r3
 80174d6:	4610      	mov	r0, r2
 80174d8:	f7f5 fb96 	bl	800cc08 <FreeRTOS_MatchingEndpoint>
 80174dc:	4602      	mov	r2, r0
 80174de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174e0:	631a      	str	r2, [r3, #48]	@ 0x30
                if( xSendEventStructToIPTask( &( xRxEvent ), 0 ) != pdFALSE )
 80174e2:	463b      	mov	r3, r7
 80174e4:	2100      	movs	r1, #0
 80174e6:	4618      	mov	r0, r3
 80174e8:	f7f1 f972 	bl	80087d0 <xSendEventStructToIPTask>
 80174ec:	4603      	mov	r3, r0
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d101      	bne.n	80174f6 <prvNetworkInterfaceInput+0xe2>
                    xDoRelease = pdTRUE;
 80174f2:	2301      	movs	r3, #1
 80174f4:	623b      	str	r3, [r7, #32]
            if( xDoRelease != pdFALSE )
 80174f6:	6a3b      	ldr	r3, [r7, #32]
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d090      	beq.n	801741e <prvNetworkInterfaceInput+0xa>
                vReleaseNetworkBufferAndDescriptor( pxReceivedBuffer );
 80174fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80174fe:	f7fe ff2b 	bl	8016358 <vReleaseNetworkBufferAndDescriptor>
    {
 8017502:	e78c      	b.n	801741e <prvNetworkInterfaceInput+0xa>
}
 8017504:	4618      	mov	r0, r3
 8017506:	3730      	adds	r7, #48	@ 0x30
 8017508:	46bd      	mov	sp, r7
 801750a:	bd80      	pop	{r7, pc}
 801750c:	20002124 	.word	0x20002124
 8017510:	08025a24 	.word	0x08025a24
 8017514:	200021cc 	.word	0x200021cc

08017518 <ETH_PHY_IO_ReadReg>:
 * @retval 0 if OK -1 if Error
 */
static int32_t ETH_PHY_IO_ReadReg( uint32_t ulDevAddr,
                                   uint32_t ulRegAddr,
                                   uint32_t * pulRegVal )
{
 8017518:	b580      	push	{r7, lr}
 801751a:	b086      	sub	sp, #24
 801751c:	af00      	add	r7, sp, #0
 801751e:	60f8      	str	r0, [r7, #12]
 8017520:	60b9      	str	r1, [r7, #8]
 8017522:	607a      	str	r2, [r7, #4]
    int32_t iResult = -1;
 8017524:	f04f 33ff 	mov.w	r3, #4294967295
 8017528:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_ReadPHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	68ba      	ldr	r2, [r7, #8]
 801752e:	68f9      	ldr	r1, [r7, #12]
 8017530:	4806      	ldr	r0, [pc, #24]	@ (801754c <ETH_PHY_IO_ReadReg+0x34>)
 8017532:	f000 fe75 	bl	8018220 <HAL_ETH_ReadPHYRegister>
 8017536:	4603      	mov	r3, r0
 8017538:	2b00      	cmp	r3, #0
 801753a:	d101      	bne.n	8017540 <ETH_PHY_IO_ReadReg+0x28>
    {
        iResult = 0;
 801753c:	2300      	movs	r3, #0
 801753e:	617b      	str	r3, [r7, #20]
    }

    return iResult;
 8017540:	697b      	ldr	r3, [r7, #20]
}
 8017542:	4618      	mov	r0, r3
 8017544:	3718      	adds	r7, #24
 8017546:	46bd      	mov	sp, r7
 8017548:	bd80      	pop	{r7, pc}
 801754a:	bf00      	nop
 801754c:	20002124 	.word	0x20002124

08017550 <ETH_PHY_IO_WriteReg>:
 * @retval 0 if OK -1 if Error
 */
static int32_t ETH_PHY_IO_WriteReg( uint32_t ulDevAddr,
                                    uint32_t ulRegAddr,
                                    uint32_t pulRegVal )
{
 8017550:	b580      	push	{r7, lr}
 8017552:	b086      	sub	sp, #24
 8017554:	af00      	add	r7, sp, #0
 8017556:	60f8      	str	r0, [r7, #12]
 8017558:	60b9      	str	r1, [r7, #8]
 801755a:	607a      	str	r2, [r7, #4]
    int32_t iResult = -1;
 801755c:	f04f 33ff 	mov.w	r3, #4294967295
 8017560:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_WritePHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	68ba      	ldr	r2, [r7, #8]
 8017566:	68f9      	ldr	r1, [r7, #12]
 8017568:	4806      	ldr	r0, [pc, #24]	@ (8017584 <ETH_PHY_IO_WriteReg+0x34>)
 801756a:	f000 fead 	bl	80182c8 <HAL_ETH_WritePHYRegister>
 801756e:	4603      	mov	r3, r0
 8017570:	2b00      	cmp	r3, #0
 8017572:	d101      	bne.n	8017578 <ETH_PHY_IO_WriteReg+0x28>
    {
        iResult = 0;
 8017574:	2300      	movs	r3, #0
 8017576:	617b      	str	r3, [r7, #20]
    }

    return iResult;
 8017578:	697b      	ldr	r3, [r7, #20]
}
 801757a:	4618      	mov	r0, r3
 801757c:	3718      	adds	r7, #24
 801757e:	46bd      	mov	sp, r7
 8017580:	bd80      	pop	{r7, pc}
 8017582:	bf00      	nop
 8017584:	20002124 	.word	0x20002124

08017588 <ETH_IRQHandler>:
/*******************************************************************************
*                   Ethernet Handling Functions
*******************************************************************************/

void ETH_IRQHandler( void )
{
 8017588:	b580      	push	{r7, lr}
 801758a:	af00      	add	r7, sp, #0
    HAL_ETH_IRQHandler( &( xEthHandle ) );
 801758c:	4802      	ldr	r0, [pc, #8]	@ (8017598 <ETH_IRQHandler+0x10>)
 801758e:	f000 fd27 	bl	8017fe0 <HAL_ETH_IRQHandler>
}
 8017592:	bf00      	nop
 8017594:	bd80      	pop	{r7, pc}
 8017596:	bf00      	nop
 8017598:	20002124 	.word	0x20002124

0801759c <prvSetFlagsAndNotify>:
/*-----------------------------------------------------------*/

static void prvSetFlagsAndNotify( uint32_t ulFlags )
{
 801759c:	b580      	push	{r7, lr}
 801759e:	b084      	sub	sp, #16
 80175a0:	af00      	add	r7, sp, #0
 80175a2:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80175a4:	2300      	movs	r3, #0
 80175a6:	60fb      	str	r3, [r7, #12]

    /* Ethernet RX-Complete callback function, elsewhere declared as weak.
     * No critical section needed, this function is called from an ISR. */
    ulISREvents |= ulFlags;
 80175a8:	4b10      	ldr	r3, [pc, #64]	@ (80175ec <prvSetFlagsAndNotify+0x50>)
 80175aa:	681a      	ldr	r2, [r3, #0]
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	4313      	orrs	r3, r2
 80175b0:	4a0e      	ldr	r2, [pc, #56]	@ (80175ec <prvSetFlagsAndNotify+0x50>)
 80175b2:	6013      	str	r3, [r2, #0]

    /* Wakeup the prvEMACHandlerTask. */
    if( xEMACTaskHandle != NULL )
 80175b4:	4b0e      	ldr	r3, [pc, #56]	@ (80175f0 <prvSetFlagsAndNotify+0x54>)
 80175b6:	681b      	ldr	r3, [r3, #0]
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d012      	beq.n	80175e2 <prvSetFlagsAndNotify+0x46>
    {
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &( xHigherPriorityTaskWoken ) );
 80175bc:	4b0c      	ldr	r3, [pc, #48]	@ (80175f0 <prvSetFlagsAndNotify+0x54>)
 80175be:	681b      	ldr	r3, [r3, #0]
 80175c0:	f107 020c 	add.w	r2, r7, #12
 80175c4:	2100      	movs	r1, #0
 80175c6:	4618      	mov	r0, r3
 80175c8:	f7ed fbd6 	bl	8004d78 <vTaskGenericNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d007      	beq.n	80175e2 <prvSetFlagsAndNotify+0x46>
 80175d2:	4b08      	ldr	r3, [pc, #32]	@ (80175f4 <prvSetFlagsAndNotify+0x58>)
 80175d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80175d8:	601a      	str	r2, [r3, #0]
 80175da:	f3bf 8f4f 	dsb	sy
 80175de:	f3bf 8f6f 	isb	sy
    }
}
 80175e2:	bf00      	nop
 80175e4:	3710      	adds	r7, #16
 80175e6:	46bd      	mov	sp, r7
 80175e8:	bd80      	pop	{r7, pc}
 80175ea:	bf00      	nop
 80175ec:	20002114 	.word	0x20002114
 80175f0:	200021d0 	.word	0x200021d0
 80175f4:	e000ed04 	.word	0xe000ed04

080175f8 <HAL_ETH_TxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef * heth )
{
 80175f8:	b580      	push	{r7, lr}
 80175fa:	b082      	sub	sp, #8
 80175fc:	af00      	add	r7, sp, #0
 80175fe:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_TX_EVENT );
 8017600:	2002      	movs	r0, #2
 8017602:	f7ff ffcb 	bl	801759c <prvSetFlagsAndNotify>
}
 8017606:	bf00      	nop
 8017608:	3708      	adds	r7, #8
 801760a:	46bd      	mov	sp, r7
 801760c:	bd80      	pop	{r7, pc}

0801760e <HAL_ETH_RxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef * heth )
{
 801760e:	b580      	push	{r7, lr}
 8017610:	b082      	sub	sp, #8
 8017612:	af00      	add	r7, sp, #0
 8017614:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_RX_EVENT );
 8017616:	2001      	movs	r0, #1
 8017618:	f7ff ffc0 	bl	801759c <prvSetFlagsAndNotify>
}
 801761c:	bf00      	nop
 801761e:	3708      	adds	r7, #8
 8017620:	46bd      	mov	sp, r7
 8017622:	bd80      	pop	{r7, pc}

08017624 <HAL_ETH_DMAErrorCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_DMAErrorCallback( ETH_HandleTypeDef * heth )
{
 8017624:	b580      	push	{r7, lr}
 8017626:	b082      	sub	sp, #8
 8017628:	af00      	add	r7, sp, #0
 801762a:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_ERR_EVENT );
 801762c:	2004      	movs	r0, #4
 801762e:	f7ff ffb5 	bl	801759c <prvSetFlagsAndNotify>
}
 8017632:	bf00      	nop
 8017634:	3708      	adds	r7, #8
 8017636:	46bd      	mov	sp, r7
 8017638:	bd80      	pop	{r7, pc}
	...

0801763c <vNetworkInterfaceAllocateRAMToBuffers>:
    __attribute__( ( section( ".ethernet_data" ) ) )
#endif /* ( ipconfigZERO_COPY_RX_DRIVER != 0 || ipconfigZERO_COPY_TX_DRIVER != 0 ) */
__attribute__( ( aligned( 32 ) ) );

void vNetworkInterfaceAllocateRAMToBuffers( NetworkBufferDescriptor_t pxNetworkBuffers[ ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ] )
{
 801763c:	b480      	push	{r7}
 801763e:	b085      	sub	sp, #20
 8017640:	af00      	add	r7, sp, #0
 8017642:	6078      	str	r0, [r7, #4]
    uint8_t * ucRAMBuffer = ucNetworkPackets;
 8017644:	4b15      	ldr	r3, [pc, #84]	@ (801769c <vNetworkInterfaceAllocateRAMToBuffers+0x60>)
 8017646:	60fb      	str	r3, [r7, #12]
    uint32_t ul;

    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 8017648:	2300      	movs	r3, #0
 801764a:	60bb      	str	r3, [r7, #8]
 801764c:	e01c      	b.n	8017688 <vNetworkInterfaceAllocateRAMToBuffers+0x4c>
    {
        pxNetworkBuffers[ ul ].pucEthernetBuffer = ucRAMBuffer + ipBUFFER_PADDING;
 801764e:	68ba      	ldr	r2, [r7, #8]
 8017650:	4613      	mov	r3, r2
 8017652:	00db      	lsls	r3, r3, #3
 8017654:	1a9b      	subs	r3, r3, r2
 8017656:	00db      	lsls	r3, r3, #3
 8017658:	461a      	mov	r2, r3
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	4413      	add	r3, r2
 801765e:	68fa      	ldr	r2, [r7, #12]
 8017660:	320a      	adds	r2, #10
 8017662:	625a      	str	r2, [r3, #36]	@ 0x24
        *( ( unsigned * ) ucRAMBuffer ) = ( unsigned ) ( &( pxNetworkBuffers[ ul ] ) );
 8017664:	68ba      	ldr	r2, [r7, #8]
 8017666:	4613      	mov	r3, r2
 8017668:	00db      	lsls	r3, r3, #3
 801766a:	1a9b      	subs	r3, r3, r2
 801766c:	00db      	lsls	r3, r3, #3
 801766e:	461a      	mov	r2, r3
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	4413      	add	r3, r2
 8017674:	461a      	mov	r2, r3
 8017676:	68fb      	ldr	r3, [r7, #12]
 8017678:	601a      	str	r2, [r3, #0]
        ucRAMBuffer += ETH_RX_BUF_SIZE;
 801767a:	68fb      	ldr	r3, [r7, #12]
 801767c:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8017680:	60fb      	str	r3, [r7, #12]
    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 8017682:	68bb      	ldr	r3, [r7, #8]
 8017684:	3301      	adds	r3, #1
 8017686:	60bb      	str	r3, [r7, #8]
 8017688:	68bb      	ldr	r3, [r7, #8]
 801768a:	2b3f      	cmp	r3, #63	@ 0x3f
 801768c:	d9df      	bls.n	801764e <vNetworkInterfaceAllocateRAMToBuffers+0x12>
    }
}
 801768e:	bf00      	nop
 8017690:	bf00      	nop
 8017692:	3714      	adds	r7, #20
 8017694:	46bd      	mov	sp, r7
 8017696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801769a:	4770      	bx	lr
 801769c:	240400c0 	.word	0x240400c0

080176a0 <vClearOptionBit>:
/*-----------------------------------------------------------*/

static void vClearOptionBit( volatile uint32_t * pulValue,
                             uint32_t ulValue )
{
 80176a0:	b580      	push	{r7, lr}
 80176a2:	b082      	sub	sp, #8
 80176a4:	af00      	add	r7, sp, #0
 80176a6:	6078      	str	r0, [r7, #4]
 80176a8:	6039      	str	r1, [r7, #0]
    portENTER_CRITICAL();
 80176aa:	f7ed fe19 	bl	80052e0 <vPortEnterCritical>
    *( pulValue ) &= ~( ulValue );
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	681a      	ldr	r2, [r3, #0]
 80176b2:	683b      	ldr	r3, [r7, #0]
 80176b4:	43db      	mvns	r3, r3
 80176b6:	401a      	ands	r2, r3
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	601a      	str	r2, [r3, #0]
    portEXIT_CRITICAL();
 80176bc:	f7ed fe3c 	bl	8005338 <vPortExitCritical>
}
 80176c0:	bf00      	nop
 80176c2:	3708      	adds	r7, #8
 80176c4:	46bd      	mov	sp, r7
 80176c6:	bd80      	pop	{r7, pc}

080176c8 <uxGetOwnCount>:
/*-----------------------------------------------------------*/

#if ( ipconfigHAS_PRINTF != 0 )
    static size_t uxGetOwnCount( ETH_HandleTypeDef * heth )
    {
 80176c8:	b480      	push	{r7}
 80176ca:	b087      	sub	sp, #28
 80176cc:	af00      	add	r7, sp, #0
 80176ce:	6078      	str	r0, [r7, #4]
        BaseType_t xIndex;
        BaseType_t xCount = 0;
 80176d0:	2300      	movs	r3, #0
 80176d2:	613b      	str	r3, [r7, #16]
        ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	3330      	adds	r3, #48	@ 0x30
 80176d8:	60fb      	str	r3, [r7, #12]

        /* Count the number of RX descriptors that are owned by DMA. */
        for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 80176da:	2300      	movs	r3, #0
 80176dc:	617b      	str	r3, [r7, #20]
 80176de:	e00e      	b.n	80176fe <uxGetOwnCount+0x36>
        {
            __IO const ETH_DMADescTypeDef * dmarxdesc =
                ( __IO const ETH_DMADescTypeDef * )dmarxdesclist->RxDesc[ xIndex ];
 80176e0:	68fb      	ldr	r3, [r7, #12]
 80176e2:	697a      	ldr	r2, [r7, #20]
 80176e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
            __IO const ETH_DMADescTypeDef * dmarxdesc =
 80176e8:	60bb      	str	r3, [r7, #8]

            if( ( dmarxdesc->DESC3 & ETH_DMARXNDESCWBF_OWN ) != 0U )
 80176ea:	68bb      	ldr	r3, [r7, #8]
 80176ec:	68db      	ldr	r3, [r3, #12]
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	da02      	bge.n	80176f8 <uxGetOwnCount+0x30>
            {
                xCount++;
 80176f2:	693b      	ldr	r3, [r7, #16]
 80176f4:	3301      	adds	r3, #1
 80176f6:	613b      	str	r3, [r7, #16]
        for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 80176f8:	697b      	ldr	r3, [r7, #20]
 80176fa:	3301      	adds	r3, #1
 80176fc:	617b      	str	r3, [r7, #20]
 80176fe:	697b      	ldr	r3, [r7, #20]
 8017700:	2b03      	cmp	r3, #3
 8017702:	d9ed      	bls.n	80176e0 <uxGetOwnCount+0x18>
            }
        }

        return xCount;
 8017704:	693b      	ldr	r3, [r7, #16]
    }
 8017706:	4618      	mov	r0, r3
 8017708:	371c      	adds	r7, #28
 801770a:	46bd      	mov	sp, r7
 801770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017710:	4770      	bx	lr
	...

08017714 <prvEMACHandlerTask>:
#endif /* if ( ipconfigHAS_PRINTF != 0 ) */
/*-----------------------------------------------------------*/

static void prvEMACHandlerTask( void * pvParameters )
{
 8017714:	b580      	push	{r7, lr}
 8017716:	b088      	sub	sp, #32
 8017718:	af00      	add	r7, sp, #0
 801771a:	6078      	str	r0, [r7, #4]
/* When sending a packet, all descriptors in the transmission channel may
 * be occupied.  In stat case, the program will wait (block) for the counting
 * semaphore. */
    const TickType_t ulMaxBlockTime = pdMS_TO_TICKS( 100U );
 801771c:	2364      	movs	r3, #100	@ 0x64
 801771e:	613b      	str	r3, [r7, #16]

    #if ( ipconfigHAS_PRINTF != 0 )
        size_t uxTXDescriptorsUsed = 0U;
 8017720:	2300      	movs	r3, #0
 8017722:	61fb      	str	r3, [r7, #28]
        size_t uxRXDescriptorsUsed = ETH_RX_DESC_CNT;
 8017724:	2304      	movs	r3, #4
 8017726:	61bb      	str	r3, [r7, #24]

    ( void ) pvParameters;

    for( ; ; )
    {
        BaseType_t xResult = 0;
 8017728:	2300      	movs	r3, #0
 801772a:	617b      	str	r3, [r7, #20]
            size_t uxOwnCount;

            /* Call a function that monitors resources: the amount of free network
             * buffers and the amount of free space on the heap.  See FreeRTOS_IP.c
             * for more detailed comments. */
            vPrintResourceStats();
 801772c:	f7f2 f8d6 	bl	80098dc <vPrintResourceStats>

            /* Some more statistics: number of free descriptors. */
            uxUsed = ETH_TX_DESC_CNT - uxSemaphoreGetCount( xTXDescriptorSemaphore );
 8017730:	4b43      	ldr	r3, [pc, #268]	@ (8017840 <prvEMACHandlerTask+0x12c>)
 8017732:	681b      	ldr	r3, [r3, #0]
 8017734:	4618      	mov	r0, r3
 8017736:	f7eb fb2d 	bl	8002d94 <uxQueueMessagesWaiting>
 801773a:	4603      	mov	r3, r0
 801773c:	f1c3 0304 	rsb	r3, r3, #4
 8017740:	60fb      	str	r3, [r7, #12]

            if( uxTXDescriptorsUsed < uxUsed )
 8017742:	69fa      	ldr	r2, [r7, #28]
 8017744:	68fb      	ldr	r3, [r7, #12]
 8017746:	429a      	cmp	r2, r3
 8017748:	d206      	bcs.n	8017758 <prvEMACHandlerTask+0x44>
            {
                uxTXDescriptorsUsed = uxUsed;
 801774a:	68fb      	ldr	r3, [r7, #12]
 801774c:	61fb      	str	r3, [r7, #28]
                FreeRTOS_printf( ( "TX descriptors %u/%u\n",
 801774e:	2204      	movs	r2, #4
 8017750:	69f9      	ldr	r1, [r7, #28]
 8017752:	483c      	ldr	r0, [pc, #240]	@ (8017844 <prvEMACHandlerTask+0x130>)
 8017754:	f008 feea 	bl	802052c <lUDPLoggingPrintf>
                                   uxTXDescriptorsUsed,
                                   ETH_TX_DESC_CNT ) );
            }

            uxOwnCount = uxGetOwnCount( &( xEthHandle ) );
 8017758:	483b      	ldr	r0, [pc, #236]	@ (8017848 <prvEMACHandlerTask+0x134>)
 801775a:	f7ff ffb5 	bl	80176c8 <uxGetOwnCount>
 801775e:	60b8      	str	r0, [r7, #8]

            if( uxRXDescriptorsUsed > uxOwnCount )
 8017760:	69ba      	ldr	r2, [r7, #24]
 8017762:	68bb      	ldr	r3, [r7, #8]
 8017764:	429a      	cmp	r2, r3
 8017766:	d906      	bls.n	8017776 <prvEMACHandlerTask+0x62>
            {
                uxRXDescriptorsUsed = uxOwnCount;
 8017768:	68bb      	ldr	r3, [r7, #8]
 801776a:	61bb      	str	r3, [r7, #24]
                FreeRTOS_printf( ( "RX descriptors %u/%u\n",
 801776c:	2204      	movs	r2, #4
 801776e:	69b9      	ldr	r1, [r7, #24]
 8017770:	4836      	ldr	r0, [pc, #216]	@ (801784c <prvEMACHandlerTask+0x138>)
 8017772:	f008 fedb 	bl	802052c <lUDPLoggingPrintf>
                                   ETH_RX_DESC_CNT ) );
            }
        }
        #endif /* ( ipconfigHAS_PRINTF != 0 ) */

        ulTaskNotifyTake( pdFALSE, ulMaxBlockTime );
 8017776:	693a      	ldr	r2, [r7, #16]
 8017778:	2100      	movs	r1, #0
 801777a:	2000      	movs	r0, #0
 801777c:	f7ec ff8c 	bl	8004698 <ulTaskGenericNotifyTake>

        /* Wait for the Ethernet MAC interrupt to indicate that another packet
         * has been received. */
        if( ( ulISREvents & EMAC_IF_RX_EVENT ) != 0U )
 8017780:	4b33      	ldr	r3, [pc, #204]	@ (8017850 <prvEMACHandlerTask+0x13c>)
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	f003 0301 	and.w	r3, r3, #1
 8017788:	2b00      	cmp	r3, #0
 801778a:	d006      	beq.n	801779a <prvEMACHandlerTask+0x86>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_RX_EVENT );
 801778c:	2101      	movs	r1, #1
 801778e:	4830      	ldr	r0, [pc, #192]	@ (8017850 <prvEMACHandlerTask+0x13c>)
 8017790:	f7ff ff86 	bl	80176a0 <vClearOptionBit>
            xResult = prvNetworkInterfaceInput();
 8017794:	f7ff fe3e 	bl	8017414 <prvNetworkInterfaceInput>
 8017798:	6178      	str	r0, [r7, #20]
        /* When a packet has been transmitted, the descriptor must be
         * prepared for a next transmission.
         * When using zero-copy, the network buffer must be released
         * ( i.e. returned to the pool of network buffers ). */

        if( ( ulISREvents & EMAC_IF_TX_EVENT ) != 0U )
 801779a:	4b2d      	ldr	r3, [pc, #180]	@ (8017850 <prvEMACHandlerTask+0x13c>)
 801779c:	681b      	ldr	r3, [r3, #0]
 801779e:	f003 0302 	and.w	r3, r3, #2
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d017      	beq.n	80177d6 <prvEMACHandlerTask+0xc2>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_TX_EVENT );
 80177a6:	2102      	movs	r1, #2
 80177a8:	4829      	ldr	r0, [pc, #164]	@ (8017850 <prvEMACHandlerTask+0x13c>)
 80177aa:	f7ff ff79 	bl	80176a0 <vClearOptionBit>

            if( xSemaphoreTake( xTransmissionMutex, 10000U ) != pdFAIL )
 80177ae:	4b29      	ldr	r3, [pc, #164]	@ (8017854 <prvEMACHandlerTask+0x140>)
 80177b0:	681b      	ldr	r3, [r3, #0]
 80177b2:	f242 7110 	movw	r1, #10000	@ 0x2710
 80177b6:	4618      	mov	r0, r3
 80177b8:	f7eb f9fe 	bl	8002bb8 <xQueueSemaphoreTake>
 80177bc:	4603      	mov	r3, r0
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d009      	beq.n	80177d6 <prvEMACHandlerTask+0xc2>
            {
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 80177c2:	4821      	ldr	r0, [pc, #132]	@ (8017848 <prvEMACHandlerTask+0x134>)
 80177c4:	f001 fb04 	bl	8018dd0 <ETH_Clear_Tx_Descriptors>
                xSemaphoreGive( xTransmissionMutex );
 80177c8:	4b22      	ldr	r3, [pc, #136]	@ (8017854 <prvEMACHandlerTask+0x140>)
 80177ca:	6818      	ldr	r0, [r3, #0]
 80177cc:	2300      	movs	r3, #0
 80177ce:	2200      	movs	r2, #0
 80177d0:	2100      	movs	r1, #0
 80177d2:	f7eb f839 	bl	8002848 <xQueueGenericSend>
            }
        }

        /* Some error has occurred, possibly an overflow or an underflow. */
        if( ( ulISREvents & EMAC_IF_ERR_EVENT ) != 0U )
 80177d6:	4b1e      	ldr	r3, [pc, #120]	@ (8017850 <prvEMACHandlerTask+0x13c>)
 80177d8:	681b      	ldr	r3, [r3, #0]
 80177da:	f003 0304 	and.w	r3, r3, #4
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d00f      	beq.n	8017802 <prvEMACHandlerTask+0xee>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_ERR_EVENT );
 80177e2:	2104      	movs	r1, #4
 80177e4:	481a      	ldr	r0, [pc, #104]	@ (8017850 <prvEMACHandlerTask+0x13c>)
 80177e6:	f7ff ff5b 	bl	80176a0 <vClearOptionBit>

            xEthHandle.gState = HAL_ETH_STATE_READY;
 80177ea:	4b17      	ldr	r3, [pc, #92]	@ (8017848 <prvEMACHandlerTask+0x134>)
 80177ec:	2210      	movs	r2, #16
 80177ee:	659a      	str	r2, [r3, #88]	@ 0x58
            /* Enable all interrupts */
            HAL_ETH_Start_IT( &( xEthHandle ) );
 80177f0:	4815      	ldr	r0, [pc, #84]	@ (8017848 <prvEMACHandlerTask+0x134>)
 80177f2:	f000 f964 	bl	8017abe <HAL_ETH_Start_IT>
            xResult += prvNetworkInterfaceInput();
 80177f6:	f7ff fe0d 	bl	8017414 <prvNetworkInterfaceInput>
 80177fa:	4602      	mov	r2, r0
 80177fc:	697b      	ldr	r3, [r7, #20]
 80177fe:	4413      	add	r3, r2
 8017800:	617b      	str	r3, [r7, #20]
        }

        if( xPhyCheckLinkStatus( &xPhyObject, xResult ) != pdFALSE )
 8017802:	6979      	ldr	r1, [r7, #20]
 8017804:	4814      	ldr	r0, [pc, #80]	@ (8017858 <prvEMACHandlerTask+0x144>)
 8017806:	f7ff fa25 	bl	8016c54 <xPhyCheckLinkStatus>
 801780a:	4603      	mov	r3, r0
 801780c:	2b00      	cmp	r3, #0
 801780e:	d08b      	beq.n	8017728 <prvEMACHandlerTask+0x14>
        {
            /*
             * The function xPhyCheckLinkStatus() returns pdTRUE if the
             * Link Status has changes since it was called the last time.
             */
            if( xSTM32H_GetPhyLinkStatus( pxMyInterface ) == pdFALSE )
 8017810:	4b12      	ldr	r3, [pc, #72]	@ (801785c <prvEMACHandlerTask+0x148>)
 8017812:	681b      	ldr	r3, [r3, #0]
 8017814:	4618      	mov	r0, r3
 8017816:	f7ff fccf 	bl	80171b8 <xSTM32H_GetPhyLinkStatus>
 801781a:	4603      	mov	r3, r0
 801781c:	2b00      	cmp	r3, #0
 801781e:	d10b      	bne.n	8017838 <prvEMACHandlerTask+0x124>
            {
                /* Stop the DMA transfer. */
                HAL_ETH_Stop_IT( &( xEthHandle ) );
 8017820:	4809      	ldr	r0, [pc, #36]	@ (8017848 <prvEMACHandlerTask+0x134>)
 8017822:	f000 f9d1 	bl	8017bc8 <HAL_ETH_Stop_IT>
                /* Clear the Transmit buffers. */
                memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 8017826:	2260      	movs	r2, #96	@ 0x60
 8017828:	2100      	movs	r1, #0
 801782a:	480d      	ldr	r0, [pc, #52]	@ (8017860 <prvEMACHandlerTask+0x14c>)
 801782c:	f009 f9a7 	bl	8020b7e <memset>
                /* Since the link is down, clear the descriptors. */
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 8017830:	4805      	ldr	r0, [pc, #20]	@ (8017848 <prvEMACHandlerTask+0x134>)
 8017832:	f001 facd 	bl	8018dd0 <ETH_Clear_Tx_Descriptors>
 8017836:	e777      	b.n	8017728 <prvEMACHandlerTask+0x14>
            }
            else
            {
                /* Something has changed to a Link Status, need re-check. */
                prvEthernetUpdateConfig( pdFALSE );
 8017838:	2000      	movs	r0, #0
 801783a:	f7ff fd91 	bl	8017360 <prvEthernetUpdateConfig>
    {
 801783e:	e773      	b.n	8017728 <prvEMACHandlerTask+0x14>
 8017840:	2000211c 	.word	0x2000211c
 8017844:	08025a48 	.word	0x08025a48
 8017848:	20002124 	.word	0x20002124
 801784c:	08025a60 	.word	0x08025a60
 8017850:	20002114 	.word	0x20002114
 8017854:	20002120 	.word	0x20002120
 8017858:	200021d4 	.word	0x200021d4
 801785c:	200021cc 	.word	0x200021cc
 8017860:	24040060 	.word	0x24040060

08017864 <set_error_state>:
 */
#ifdef HAL_ETH_MODULE_ENABLED

    static void set_error_state( ETH_HandleTypeDef * heth,
                                 uint32_t ulState )
    {
 8017864:	b480      	push	{r7}
 8017866:	b083      	sub	sp, #12
 8017868:	af00      	add	r7, sp, #0
 801786a:	6078      	str	r0, [r7, #4]
 801786c:	6039      	str	r1, [r7, #0]
        heth->gState = ulState;
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	683a      	ldr	r2, [r7, #0]
 8017872:	659a      	str	r2, [r3, #88]	@ 0x58
    }
 8017874:	bf00      	nop
 8017876:	370c      	adds	r7, #12
 8017878:	46bd      	mov	sp, r7
 801787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801787e:	4770      	bx	lr

08017880 <HAL_ETH_Init>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Init( ETH_HandleTypeDef * heth )
        {
 8017880:	b580      	push	{r7, lr}
 8017882:	b084      	sub	sp, #16
 8017884:	af00      	add	r7, sp, #0
 8017886:	6078      	str	r0, [r7, #4]
            uint32_t tickstart;

            if( heth == NULL )
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	2b00      	cmp	r3, #0
 801788c:	d101      	bne.n	8017892 <HAL_ETH_Init+0x12>
            {
                return HAL_ERROR;
 801788e:	2301      	movs	r3, #1
 8017890:	e0d4      	b.n	8017a3c <HAL_ETH_Init+0x1bc>
                    /* Init the low level hardware */
                    heth->MspInitCallback( heth );
                }
            #else /* if ( USE_HAL_ETH_REGISTER_CALLBACKS == 1 ) */
                /* Check the ETH peripheral state */
                if( heth->gState == HAL_ETH_STATE_RESET )
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017896:	2b00      	cmp	r3, #0
 8017898:	d102      	bne.n	80178a0 <HAL_ETH_Init+0x20>
                {
                    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
                    HAL_ETH_MspInit( heth );
 801789a:	6878      	ldr	r0, [r7, #4]
 801789c:	f7e9 fe72 	bl	8001584 <HAL_ETH_MspInit>
                }
            #endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

            heth->gState = HAL_ETH_STATE_BUSY;
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	2223      	movs	r2, #35	@ 0x23
 80178a4:	659a      	str	r2, [r3, #88]	@ 0x58

            __HAL_RCC_SYSCFG_CLK_ENABLE();
 80178a6:	4b67      	ldr	r3, [pc, #412]	@ (8017a44 <HAL_ETH_Init+0x1c4>)
 80178a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80178ac:	4a65      	ldr	r2, [pc, #404]	@ (8017a44 <HAL_ETH_Init+0x1c4>)
 80178ae:	f043 0302 	orr.w	r3, r3, #2
 80178b2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80178b6:	4b63      	ldr	r3, [pc, #396]	@ (8017a44 <HAL_ETH_Init+0x1c4>)
 80178b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80178bc:	f003 0302 	and.w	r3, r3, #2
 80178c0:	60bb      	str	r3, [r7, #8]
 80178c2:	68bb      	ldr	r3, [r7, #8]

            if( heth->Init.MediaInterface == HAL_ETH_MII_MODE )
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	7a1b      	ldrb	r3, [r3, #8]
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d103      	bne.n	80178d4 <HAL_ETH_Init+0x54>
            {
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_MII );
 80178cc:	2000      	movs	r0, #0
 80178ce:	f001 fbf3 	bl	80190b8 <HAL_SYSCFG_ETHInterfaceSelect>
 80178d2:	e003      	b.n	80178dc <HAL_ETH_Init+0x5c>
            }
            else
            {
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_RMII );
 80178d4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80178d8:	f001 fbee 	bl	80190b8 <HAL_SYSCFG_ETHInterfaceSelect>
            }

            /* Ethernet Software reset */
            /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
            /* After reset all the registers holds their respective reset values */
            SET_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR );
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	681b      	ldr	r3, [r3, #0]
 80178e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80178e4:	681b      	ldr	r3, [r3, #0]
 80178e6:	687a      	ldr	r2, [r7, #4]
 80178e8:	6812      	ldr	r2, [r2, #0]
 80178ea:	f043 0301 	orr.w	r3, r3, #1
 80178ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80178f2:	6013      	str	r3, [r2, #0]

            /* Get tick */
            tickstart = HAL_GetTick();
 80178f4:	f001 fbc8 	bl	8019088 <HAL_GetTick>
 80178f8:	60f8      	str	r0, [r7, #12]

            /* Wait for software reset */
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 80178fa:	e010      	b.n	801791e <HAL_ETH_Init+0x9e>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT ) )
 80178fc:	f001 fbc4 	bl	8019088 <HAL_GetTick>
 8017900:	4602      	mov	r2, r0
 8017902:	68fb      	ldr	r3, [r7, #12]
 8017904:	1ad3      	subs	r3, r2, r3
 8017906:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 801790a:	d908      	bls.n	801791e <HAL_ETH_Init+0x9e>
                {
                    /* Set Error Code */
                    heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	2204      	movs	r2, #4
 8017910:	661a      	str	r2, [r3, #96]	@ 0x60
                    /* Set State as Error */
                    set_error_state( heth, HAL_ETH_STATE_ERROR );
 8017912:	21e0      	movs	r1, #224	@ 0xe0
 8017914:	6878      	ldr	r0, [r7, #4]
 8017916:	f7ff ffa5 	bl	8017864 <set_error_state>
                    /* Return Error */
                    return HAL_ERROR;
 801791a:	2301      	movs	r3, #1
 801791c:	e08e      	b.n	8017a3c <HAL_ETH_Init+0x1bc>
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	681b      	ldr	r3, [r3, #0]
 8017922:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017926:	681b      	ldr	r3, [r3, #0]
 8017928:	f003 0301 	and.w	r3, r3, #1
 801792c:	2b00      	cmp	r3, #0
 801792e:	d1e5      	bne.n	80178fc <HAL_ETH_Init+0x7c>
                }
            }

            /*------------------ MDIO CSR Clock Range Configuration --------------------*/
            ETH_MAC_MDIO_ClkConfig( heth );
 8017930:	6878      	ldr	r0, [r7, #4]
 8017932:	f001 f94b 	bl	8018bcc <ETH_MAC_MDIO_ClkConfig>

            /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
            WRITE_REG( heth->Instance->MAC1USTCR, ( ( ( uint32_t ) HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK ) - 1U ) );
 8017936:	f004 fdd7 	bl	801c4e8 <HAL_RCC_GetHCLKFreq>
 801793a:	4603      	mov	r3, r0
 801793c:	4a42      	ldr	r2, [pc, #264]	@ (8017a48 <HAL_ETH_Init+0x1c8>)
 801793e:	fba2 2303 	umull	r2, r3, r2, r3
 8017942:	0c9a      	lsrs	r2, r3, #18
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	681b      	ldr	r3, [r3, #0]
 8017948:	3a01      	subs	r2, #1
 801794a:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

            /*------------------ MAC, MTL and DMA default Configuration ----------------*/
            ETH_MACDMAConfig( heth );
 801794e:	6878      	ldr	r0, [r7, #4]
 8017950:	f001 f89e 	bl	8018a90 <ETH_MACDMAConfig>

            /* SET DSL to 64 bit */
            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT );
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	681b      	ldr	r3, [r3, #0]
 8017958:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801795c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8017960:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8017964:	687a      	ldr	r2, [r7, #4]
 8017966:	6812      	ldr	r2, [r2, #0]
 8017968:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801796c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017970:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

            /* Set Receive Buffers Length (must be a multiple of 4) */
            if( ( heth->Init.RxBuffLen % 0x4U ) != 0x0U )
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	695b      	ldr	r3, [r3, #20]
 8017978:	f003 0303 	and.w	r3, r3, #3
 801797c:	2b00      	cmp	r3, #0
 801797e:	d008      	beq.n	8017992 <HAL_ETH_Init+0x112>
            {
                /* Set Error Code */
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	2201      	movs	r2, #1
 8017984:	661a      	str	r2, [r3, #96]	@ 0x60
                /* Set State as Error */
                set_error_state( heth, HAL_ETH_STATE_ERROR );
 8017986:	21e0      	movs	r1, #224	@ 0xe0
 8017988:	6878      	ldr	r0, [r7, #4]
 801798a:	f7ff ff6b 	bl	8017864 <set_error_state>
                /* Return Error */
                return HAL_ERROR;
 801798e:	2301      	movs	r3, #1
 8017990:	e054      	b.n	8017a3c <HAL_ETH_Init+0x1bc>
            }
            else
            {
                MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ( ( heth->Init.RxBuffLen ) << 1 ) );
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801799a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 801799e:	4b2b      	ldr	r3, [pc, #172]	@ (8017a4c <HAL_ETH_Init+0x1cc>)
 80179a0:	4013      	ands	r3, r2
 80179a2:	687a      	ldr	r2, [r7, #4]
 80179a4:	6952      	ldr	r2, [r2, #20]
 80179a6:	0051      	lsls	r1, r2, #1
 80179a8:	687a      	ldr	r2, [r7, #4]
 80179aa:	6812      	ldr	r2, [r2, #0]
 80179ac:	430b      	orrs	r3, r1
 80179ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80179b2:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
            }

            /*------------------ DMA Tx Descriptors Configuration ----------------------*/
            ETH_DMATxDescListInit( heth );
 80179b6:	6878      	ldr	r0, [r7, #4]
 80179b8:	f001 f960 	bl	8018c7c <ETH_DMATxDescListInit>

            /*------------------ DMA Rx Descriptors Configuration ----------------------*/
            ETH_DMARxDescListInit( heth );
 80179bc:	6878      	ldr	r0, [r7, #4]
 80179be:	f001 f9a9 	bl	8018d14 <ETH_DMARxDescListInit>

            /*--------------------- ETHERNET MAC Address Configuration ------------------*/
            /* Set MAC addr bits 32 to 47 */
            heth->Instance->MACA0HR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 5 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 4 ] );
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	685b      	ldr	r3, [r3, #4]
 80179c6:	3305      	adds	r3, #5
 80179c8:	781b      	ldrb	r3, [r3, #0]
 80179ca:	021a      	lsls	r2, r3, #8
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	685b      	ldr	r3, [r3, #4]
 80179d0:	3304      	adds	r3, #4
 80179d2:	781b      	ldrb	r3, [r3, #0]
 80179d4:	4619      	mov	r1, r3
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	430a      	orrs	r2, r1
 80179dc:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
            /* Set MAC addr bits 0 to 31 */
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	685b      	ldr	r3, [r3, #4]
 80179e4:	3303      	adds	r3, #3
 80179e6:	781b      	ldrb	r3, [r3, #0]
 80179e8:	061a      	lsls	r2, r3, #24
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	685b      	ldr	r3, [r3, #4]
 80179ee:	3302      	adds	r3, #2
 80179f0:	781b      	ldrb	r3, [r3, #0]
 80179f2:	041b      	lsls	r3, r3, #16
 80179f4:	431a      	orrs	r2, r3
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	685b      	ldr	r3, [r3, #4]
 80179fa:	3301      	adds	r3, #1
 80179fc:	781b      	ldrb	r3, [r3, #0]
 80179fe:	021b      	lsls	r3, r3, #8
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 8017a00:	431a      	orrs	r2, r3
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	685b      	ldr	r3, [r3, #4]
 8017a06:	781b      	ldrb	r3, [r3, #0]
 8017a08:	4619      	mov	r1, r3
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	681b      	ldr	r3, [r3, #0]
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 8017a0e:	430a      	orrs	r2, r1
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 8017a10:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

            heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	2200      	movs	r2, #0
 8017a18:	661a      	str	r2, [r3, #96]	@ 0x60
            heth->gState = HAL_ETH_STATE_READY;
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	2210      	movs	r2, #16
 8017a1e:	659a      	str	r2, [r3, #88]	@ 0x58
            heth->RxState = HAL_ETH_STATE_READY;
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	2210      	movs	r2, #16
 8017a24:	65da      	str	r2, [r3, #92]	@ 0x5c
             * Disable the interrupts that are related to the MMC counters.
             * These interrupts are enabled by default. The interrupt can
             * only be acknowledged by reading the corresponding counter.
             */

            heth->Instance->MMCRIMR =
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	4a09      	ldr	r2, [pc, #36]	@ (8017a50 <HAL_ETH_Init+0x1d0>)
 8017a2c:	f8c3 270c 	str.w	r2, [r3, #1804]	@ 0x70c
                ETH_MMCRIMR_RXLPIUSCIM |  /* RXLPIUSC */
                ETH_MMCRIMR_RXUCGPIM |    /* RXUCASTG */
                ETH_MMCRIMR_RXALGNERPIM | /* RXALGNERR */
                ETH_MMCRIMR_RXCRCERPIM;   /* RXCRCERR */

            heth->Instance->MMCTIMR =
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	681b      	ldr	r3, [r3, #0]
 8017a34:	4a07      	ldr	r2, [pc, #28]	@ (8017a54 <HAL_ETH_Init+0x1d4>)
 8017a36:	f8c3 2710 	str.w	r2, [r3, #1808]	@ 0x710
                ETH_MMCTIMR_TXLPIUSCIM | /* TXLPIUSC */
                ETH_MMCTIMR_TXGPKTIM |   /* TXPKTG */
                ETH_MMCTIMR_TXMCOLGPIM | /* TXMULTCOLG */
                ETH_MMCTIMR_TXSCOLGPIM;  /* TXSNGLCOLG */

            return HAL_OK;
 8017a3a:	2300      	movs	r3, #0
        }
 8017a3c:	4618      	mov	r0, r3
 8017a3e:	3710      	adds	r7, #16
 8017a40:	46bd      	mov	sp, r7
 8017a42:	bd80      	pop	{r7, pc}
 8017a44:	58024400 	.word	0x58024400
 8017a48:	431bde83 	.word	0x431bde83
 8017a4c:	ffff8001 	.word	0xffff8001
 8017a50:	0c020060 	.word	0x0c020060
 8017a54:	0c20c000 	.word	0x0c20c000

08017a58 <HAL_ETH_DescAssignMemory>:
 */
        HAL_StatusTypeDef HAL_ETH_DescAssignMemory( ETH_HandleTypeDef * heth,
                                                    uint32_t Index,
                                                    uint8_t * pBuffer1,
                                                    uint8_t * pBuffer2 )
        {
 8017a58:	b480      	push	{r7}
 8017a5a:	b087      	sub	sp, #28
 8017a5c:	af00      	add	r7, sp, #0
 8017a5e:	60f8      	str	r0, [r7, #12]
 8017a60:	60b9      	str	r1, [r7, #8]
 8017a62:	607a      	str	r2, [r7, #4]
 8017a64:	603b      	str	r3, [r7, #0]
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ Index ];
 8017a66:	68fb      	ldr	r3, [r7, #12]
 8017a68:	68ba      	ldr	r2, [r7, #8]
 8017a6a:	320c      	adds	r2, #12
 8017a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017a70:	617b      	str	r3, [r7, #20]

            if( ( pBuffer1 == NULL ) || ( Index >= ( uint32_t ) ETH_RX_DESC_CNT ) )
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	d002      	beq.n	8017a7e <HAL_ETH_DescAssignMemory+0x26>
 8017a78:	68bb      	ldr	r3, [r7, #8]
 8017a7a:	2b03      	cmp	r3, #3
 8017a7c:	d904      	bls.n	8017a88 <HAL_ETH_DescAssignMemory+0x30>
            {
                /* Set Error Code */
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8017a7e:	68fb      	ldr	r3, [r7, #12]
 8017a80:	2201      	movs	r2, #1
 8017a82:	661a      	str	r2, [r3, #96]	@ 0x60
                /* Return Error */
                return HAL_ERROR;
 8017a84:	2301      	movs	r3, #1
 8017a86:	e014      	b.n	8017ab2 <HAL_ETH_DescAssignMemory+0x5a>
            }

            /* write buffer address to RDES0 */
            WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pBuffer1 );
 8017a88:	687a      	ldr	r2, [r7, #4]
 8017a8a:	697b      	ldr	r3, [r7, #20]
 8017a8c:	601a      	str	r2, [r3, #0]
            /* store buffer address */
            WRITE_REG( dmarxdesc->BackupAddr0, ( uint32_t ) pBuffer1 );
 8017a8e:	687a      	ldr	r2, [r7, #4]
 8017a90:	697b      	ldr	r3, [r7, #20]
 8017a92:	611a      	str	r2, [r3, #16]
            /* set buffer address valid bit to RDES3 */
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V );
 8017a94:	697b      	ldr	r3, [r7, #20]
 8017a96:	68db      	ldr	r3, [r3, #12]
 8017a98:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8017a9c:	697b      	ldr	r3, [r7, #20]
 8017a9e:	60da      	str	r2, [r3, #12]
/*		/ * set buffer 2 address valid bit to RDES3 * / */
/*		SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V); */
/*	} */

            /* set OWN bit to RDES3 */
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN );
 8017aa0:	697b      	ldr	r3, [r7, #20]
 8017aa2:	68db      	ldr	r3, [r3, #12]
 8017aa4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8017aa8:	697b      	ldr	r3, [r7, #20]
 8017aaa:	60da      	str	r2, [r3, #12]
            ( void ) dmarxdesc->DESC3;
 8017aac:	697b      	ldr	r3, [r7, #20]
 8017aae:	68db      	ldr	r3, [r3, #12]

            return HAL_OK;
 8017ab0:	2300      	movs	r3, #0
        }
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	371c      	adds	r7, #28
 8017ab6:	46bd      	mov	sp, r7
 8017ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017abc:	4770      	bx	lr

08017abe <HAL_ETH_Start_IT>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Start_IT( ETH_HandleTypeDef * heth )
        {
 8017abe:	b480      	push	{r7}
 8017ac0:	b085      	sub	sp, #20
 8017ac2:	af00      	add	r7, sp, #0
 8017ac4:	6078      	str	r0, [r7, #4]
            uint32_t desc_index;

            if( heth->gState == HAL_ETH_STATE_READY )
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017aca:	2b10      	cmp	r3, #16
 8017acc:	d175      	bne.n	8017bba <HAL_ETH_Start_IT+0xfc>
            {
                heth->gState = HAL_ETH_STATE_BUSY;
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	2223      	movs	r2, #35	@ 0x23
 8017ad2:	659a      	str	r2, [r3, #88]	@ 0x58

                /* Set IOC bit (Interrupt Enabled on Completion) to all Rx descriptors */
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 8017ad4:	2300      	movs	r3, #0
 8017ad6:	60fb      	str	r3, [r7, #12]
 8017ad8:	e00e      	b.n	8017af8 <HAL_ETH_Start_IT+0x3a>
                {
                    ETH_DMADescTypeDef * dma_rx_desc;

                    dma_rx_desc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ desc_index ];
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	68fa      	ldr	r2, [r7, #12]
 8017ade:	320c      	adds	r2, #12
 8017ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017ae4:	60bb      	str	r3, [r7, #8]
                    SET_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCRF_IOC );
 8017ae6:	68bb      	ldr	r3, [r7, #8]
 8017ae8:	68db      	ldr	r3, [r3, #12]
 8017aea:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8017aee:	68bb      	ldr	r3, [r7, #8]
 8017af0:	60da      	str	r2, [r3, #12]
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 8017af2:	68fb      	ldr	r3, [r7, #12]
 8017af4:	3301      	adds	r3, #1
 8017af6:	60fb      	str	r3, [r7, #12]
 8017af8:	68fb      	ldr	r3, [r7, #12]
 8017afa:	2b03      	cmp	r3, #3
 8017afc:	d9ed      	bls.n	8017ada <HAL_ETH_Start_IT+0x1c>
                }

                /* save IT mode to ETH Handle */
                heth->RxDescList.ItMode = 1U;
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	2201      	movs	r2, #1
 8017b02:	651a      	str	r2, [r3, #80]	@ 0x50

                /* Enable the MAC transmission */
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	681b      	ldr	r3, [r3, #0]
 8017b08:	681a      	ldr	r2, [r3, #0]
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	681b      	ldr	r3, [r3, #0]
 8017b0e:	f042 0202 	orr.w	r2, r2, #2
 8017b12:	601a      	str	r2, [r3, #0]

                /* Enable the MAC reception */
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	681b      	ldr	r3, [r3, #0]
 8017b18:	681a      	ldr	r2, [r3, #0]
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	681b      	ldr	r3, [r3, #0]
 8017b1e:	f042 0201 	orr.w	r2, r2, #1
 8017b22:	601a      	str	r2, [r3, #0]

                /* Set the Flush Transmit FIFO bit */
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	681b      	ldr	r3, [r3, #0]
 8017b30:	f042 0201 	orr.w	r2, r2, #1
 8017b34:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

                /* Enable the DMA transmission */
                SET_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	681b      	ldr	r3, [r3, #0]
 8017b3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017b40:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8017b44:	687a      	ldr	r2, [r7, #4]
 8017b46:	6812      	ldr	r2, [r2, #0]
 8017b48:	f043 0301 	orr.w	r3, r3, #1
 8017b4c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017b50:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

                /* Enable the DMA reception */
                SET_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	681b      	ldr	r3, [r3, #0]
 8017b58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017b5c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8017b60:	687a      	ldr	r2, [r7, #4]
 8017b62:	6812      	ldr	r2, [r2, #0]
 8017b64:	f043 0301 	orr.w	r3, r3, #1
 8017b68:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017b6c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

                /* Clear Tx and Rx process stopped flags */
                heth->Instance->DMACSR |= ( ETH_DMACSR_TPS | ETH_DMACSR_RPS );
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	681b      	ldr	r3, [r3, #0]
 8017b74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017b78:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8017b7c:	687a      	ldr	r2, [r7, #4]
 8017b7e:	6812      	ldr	r2, [r2, #0]
 8017b80:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8017b84:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017b88:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                /* Enable ETH DMA interrupts:
                 * - Tx complete interrupt
                 * - Rx complete interrupt
                 * - Fatal bus interrupt
                 */
                __HAL_ETH_DMA_ENABLE_IT( heth,
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	681b      	ldr	r3, [r3, #0]
 8017b90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017b94:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	681a      	ldr	r2, [r3, #0]
 8017b9c:	f24d 0341 	movw	r3, #53313	@ 0xd041
 8017ba0:	430b      	orrs	r3, r1
 8017ba2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017ba6:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                         ETH_DMACIER_RIE |  /* Receive Interrupt Enable */
                                         ETH_DMACIER_TIE |  /* Transmit Interrupt Enable */
                                         ETH_DMACIER_FBEE | /* Fatal Bus Error Enable */
                                         ETH_DMACIER_AIE ); /* Abnormal Interrupt Summary Enable */

                heth->gState = HAL_ETH_STATE_READY;
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	2210      	movs	r2, #16
 8017bae:	659a      	str	r2, [r3, #88]	@ 0x58
                heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	2222      	movs	r2, #34	@ 0x22
 8017bb4:	65da      	str	r2, [r3, #92]	@ 0x5c

                return HAL_OK;
 8017bb6:	2300      	movs	r3, #0
 8017bb8:	e000      	b.n	8017bbc <HAL_ETH_Start_IT+0xfe>
            }
            else
            {
                return HAL_ERROR;
 8017bba:	2301      	movs	r3, #1
            }
        }
 8017bbc:	4618      	mov	r0, r3
 8017bbe:	3714      	adds	r7, #20
 8017bc0:	46bd      	mov	sp, r7
 8017bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bc6:	4770      	bx	lr

08017bc8 <HAL_ETH_Stop_IT>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Stop_IT( ETH_HandleTypeDef * heth )
        {
 8017bc8:	b480      	push	{r7}
 8017bca:	b085      	sub	sp, #20
 8017bcc:	af00      	add	r7, sp, #0
 8017bce:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmarxdesc;
            uint32_t descindex;

            if( heth->gState != HAL_ETH_STATE_RESET )
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	d066      	beq.n	8017ca6 <HAL_ETH_Stop_IT+0xde>
            {
                /* Set the ETH peripheral state to BUSY */
                heth->gState = HAL_ETH_STATE_BUSY;
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	2223      	movs	r2, #35	@ 0x23
 8017bdc:	659a      	str	r2, [r3, #88]	@ 0x58
                /* Disable interrupts:
                 * - Tx complete interrupt
                 * - Rx complete interrupt
                 * - Fatal bus interrupt
                 */
                __HAL_ETH_DMA_DISABLE_IT( heth, ( ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE |
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017be6:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	681a      	ldr	r2, [r3, #0]
 8017bee:	4b31      	ldr	r3, [pc, #196]	@ (8017cb4 <HAL_ETH_Stop_IT+0xec>)
 8017bf0:	400b      	ands	r3, r1
 8017bf2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017bf6:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                                  ETH_DMACIER_FBEE | ETH_DMACIER_AIE ) );

                /* Disable the DMA transmission */
                CLEAR_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017c02:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8017c06:	687a      	ldr	r2, [r7, #4]
 8017c08:	6812      	ldr	r2, [r2, #0]
 8017c0a:	f023 0301 	bic.w	r3, r3, #1
 8017c0e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017c12:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

                /* Disable the DMA reception */
                CLEAR_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	681b      	ldr	r3, [r3, #0]
 8017c1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017c1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8017c22:	687a      	ldr	r2, [r7, #4]
 8017c24:	6812      	ldr	r2, [r2, #0]
 8017c26:	f023 0301 	bic.w	r3, r3, #1
 8017c2a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017c2e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

                /* Disable the MAC reception */
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	681b      	ldr	r3, [r3, #0]
 8017c36:	681a      	ldr	r2, [r3, #0]
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	681b      	ldr	r3, [r3, #0]
 8017c3c:	f022 0201 	bic.w	r2, r2, #1
 8017c40:	601a      	str	r2, [r3, #0]

                /* Set the Flush Transmit FIFO bit */
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	681b      	ldr	r3, [r3, #0]
 8017c4e:	f042 0201 	orr.w	r2, r2, #1
 8017c52:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

                /* Disable the MAC transmission */
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	681a      	ldr	r2, [r3, #0]
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	f022 0202 	bic.w	r2, r2, #2
 8017c64:	601a      	str	r2, [r3, #0]

                /* Clear IOC bit (Interrupt Enabled on Completion) to all Rx descriptors */
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 8017c66:	2300      	movs	r3, #0
 8017c68:	60fb      	str	r3, [r7, #12]
 8017c6a:	e00e      	b.n	8017c8a <HAL_ETH_Stop_IT+0xc2>
                {
                    dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ descindex ];
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	68fa      	ldr	r2, [r7, #12]
 8017c70:	320c      	adds	r2, #12
 8017c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017c76:	60bb      	str	r3, [r7, #8]
                    CLEAR_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC );
 8017c78:	68bb      	ldr	r3, [r7, #8]
 8017c7a:	68db      	ldr	r3, [r3, #12]
 8017c7c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8017c80:	68bb      	ldr	r3, [r7, #8]
 8017c82:	60da      	str	r2, [r3, #12]
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 8017c84:	68fb      	ldr	r3, [r7, #12]
 8017c86:	3301      	adds	r3, #1
 8017c88:	60fb      	str	r3, [r7, #12]
 8017c8a:	68fb      	ldr	r3, [r7, #12]
 8017c8c:	2b03      	cmp	r3, #3
 8017c8e:	d9ed      	bls.n	8017c6c <HAL_ETH_Stop_IT+0xa4>
                }

                heth->RxDescList.ItMode = 0U;
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	2200      	movs	r2, #0
 8017c94:	651a      	str	r2, [r3, #80]	@ 0x50

                heth->gState = HAL_ETH_STATE_READY;
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	2210      	movs	r2, #16
 8017c9a:	659a      	str	r2, [r3, #88]	@ 0x58
                heth->RxState = HAL_ETH_STATE_READY;
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	2210      	movs	r2, #16
 8017ca0:	65da      	str	r2, [r3, #92]	@ 0x5c

                /* Return function status */
                return HAL_OK;
 8017ca2:	2300      	movs	r3, #0
 8017ca4:	e000      	b.n	8017ca8 <HAL_ETH_Stop_IT+0xe0>
            }
            else
            {
                return HAL_ERROR;
 8017ca6:	2301      	movs	r3, #1
            }
        }
 8017ca8:	4618      	mov	r0, r3
 8017caa:	3714      	adds	r7, #20
 8017cac:	46bd      	mov	sp, r7
 8017cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cb2:	4770      	bx	lr
 8017cb4:	ffff2fbe 	.word	0xffff2fbe

08017cb8 <HAL_ETH_Transmit_IT>:
 * @param  pTxConfig: Hold the configuration of packet to be transmitted
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Transmit_IT( ETH_HandleTypeDef * heth,
                                               ETH_TxPacketConfig * pTxConfig )
        {
 8017cb8:	b580      	push	{r7, lr}
 8017cba:	b082      	sub	sp, #8
 8017cbc:	af00      	add	r7, sp, #0
 8017cbe:	6078      	str	r0, [r7, #4]
 8017cc0:	6039      	str	r1, [r7, #0]
            if( pTxConfig == NULL )
 8017cc2:	683b      	ldr	r3, [r7, #0]
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	d107      	bne.n	8017cd8 <HAL_ETH_Transmit_IT+0x20>
            {
                heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017ccc:	f043 0201 	orr.w	r2, r3, #1
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	661a      	str	r2, [r3, #96]	@ 0x60
                return HAL_ERROR;
 8017cd4:	2301      	movs	r3, #1
 8017cd6:	e039      	b.n	8017d4c <HAL_ETH_Transmit_IT+0x94>
            }

            if( heth->gState == HAL_ETH_STATE_READY )
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017cdc:	2b10      	cmp	r3, #16
 8017cde:	d134      	bne.n	8017d4a <HAL_ETH_Transmit_IT+0x92>
            {
                /* Config DMA Tx descriptor by Tx Packet info */
                if( ETH_Prepare_Tx_Descriptors( heth, pTxConfig, 1 ) != HAL_ETH_ERROR_NONE )
 8017ce0:	2201      	movs	r2, #1
 8017ce2:	6839      	ldr	r1, [r7, #0]
 8017ce4:	6878      	ldr	r0, [r7, #4]
 8017ce6:	f001 f8c1 	bl	8018e6c <ETH_Prepare_Tx_Descriptors>
 8017cea:	4603      	mov	r3, r0
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d007      	beq.n	8017d00 <HAL_ETH_Transmit_IT+0x48>
                {
                    heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017cf4:	f043 0202 	orr.w	r2, r3, #2
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	661a      	str	r2, [r3, #96]	@ 0x60
                    return HAL_ERROR;
 8017cfc:	2301      	movs	r3, #1
 8017cfe:	e025      	b.n	8017d4c <HAL_ETH_Transmit_IT+0x94>
                }

                /* Incr current tx desc index */
                INCR_TX_DESC_INDEX( heth->TxDescList.CurTxDesc, 1U );
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017d04:	1c5a      	adds	r2, r3, #1
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	629a      	str	r2, [r3, #40]	@ 0x28
 8017d0a:	687b      	ldr	r3, [r7, #4]
 8017d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017d0e:	2b03      	cmp	r3, #3
 8017d10:	d904      	bls.n	8017d1c <HAL_ETH_Transmit_IT+0x64>
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017d16:	1f1a      	subs	r2, r3, #4
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	629a      	str	r2, [r3, #40]	@ 0x28
                 * DMACTDTPR: "Channel Tx descriptor tail pointer register (ETH_DMACTXDTPR)
                 * The hardware tries to transmit all packets referenced by the
                 * descriptors between the head and the tail pointer registers.
                 */

                WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) ( heth->TxDescList.TxDesc[ heth->TxDescList.CurTxDesc ] ) );
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	681a      	ldr	r2, [r3, #0]
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	3106      	adds	r1, #6
 8017d28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017d2c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017d30:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
  __ASM volatile ("dsb 0xF":::"memory");
 8017d34:	f3bf 8f4f 	dsb	sy
}
 8017d38:	bf00      	nop
                /* Memory barrier. */
                __DSB();
                /* Read-back the value just written. */
                ( void ) heth->Instance->DMACTDTPR;
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	681b      	ldr	r3, [r3, #0]
 8017d3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017d42:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120

                return HAL_OK;
 8017d46:	2300      	movs	r3, #0
 8017d48:	e000      	b.n	8017d4c <HAL_ETH_Transmit_IT+0x94>
            }
            else
            {
                return HAL_ERROR;
 8017d4a:	2301      	movs	r3, #1
            }
        }
 8017d4c:	4618      	mov	r0, r3
 8017d4e:	3708      	adds	r7, #8
 8017d50:	46bd      	mov	sp, r7
 8017d52:	bd80      	pop	{r7, pc}

08017d54 <HAL_ETH_IsRxDataAvailable>:
 *         the configuration information for ETHERNET module
 * @retval  1: A Packet is received
 *          0: no Packet received
 */
        uint8_t HAL_ETH_IsRxDataAvailable( ETH_HandleTypeDef * heth )
        {
 8017d54:	b580      	push	{r7, lr}
 8017d56:	b08a      	sub	sp, #40	@ 0x28
 8017d58:	af00      	add	r7, sp, #0
 8017d5a:	6078      	str	r0, [r7, #4]
            ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	3330      	adds	r3, #48	@ 0x30
 8017d60:	61bb      	str	r3, [r7, #24]
            uint32_t desc_index = dmarxdesclist->CurRxDesc;
 8017d62:	69bb      	ldr	r3, [r7, #24]
 8017d64:	691b      	ldr	r3, [r3, #16]
 8017d66:	627b      	str	r3, [r7, #36]	@ 0x24
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8017d68:	69bb      	ldr	r3, [r7, #24]
 8017d6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017d70:	617b      	str	r3, [r7, #20]
            uint32_t desc_scan_count = 0;
 8017d72:	2300      	movs	r3, #0
 8017d74:	623b      	str	r3, [r7, #32]
            uint32_t app_desc_count = 0;       /* Number of descriptors in received packet. */
 8017d76:	2300      	movs	r3, #0
 8017d78:	613b      	str	r3, [r7, #16]
            uint32_t first_app_desc_index = 0; /* Index of the first descriptor of received packet.. */
 8017d7a:	2300      	movs	r3, #0
 8017d7c:	61fb      	str	r3, [r7, #28]

            /* Check if descriptor is not owned by DMA */
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 8017d7e:	e055      	b.n	8017e2c <HAL_ETH_IsRxDataAvailable+0xd8>
                   ( desc_scan_count < ( uint32_t ) ETH_RX_DESC_CNT ) )
            {
                uint32_t ulDesc3 = dmarxdesc->DESC3;
 8017d80:	697b      	ldr	r3, [r7, #20]
 8017d82:	68db      	ldr	r3, [r3, #12]
 8017d84:	60fb      	str	r3, [r7, #12]
                desc_scan_count++;
 8017d86:	6a3b      	ldr	r3, [r7, #32]
 8017d88:	3301      	adds	r3, #1
 8017d8a:	623b      	str	r3, [r7, #32]

                /* FreeRTOS+TCP only handles packets that fit in 1 descriptor. */
                configASSERT( ( ( ulDesc3 & ETH_DMATXNDESCWBF_FD ) != 0U ) && ( ( ulDesc3 & ETH_DMATXNDESCWBF_LD ) != 0U ) );
 8017d8c:	68fb      	ldr	r3, [r7, #12]
 8017d8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d006      	beq.n	8017da4 <HAL_ETH_IsRxDataAvailable+0x50>
 8017d96:	68fb      	ldr	r3, [r7, #12]
 8017d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d001      	beq.n	8017da4 <HAL_ETH_IsRxDataAvailable+0x50>
 8017da0:	2301      	movs	r3, #1
 8017da2:	e000      	b.n	8017da6 <HAL_ETH_IsRxDataAvailable+0x52>
 8017da4:	2300      	movs	r3, #0
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	d104      	bne.n	8017db4 <HAL_ETH_IsRxDataAvailable+0x60>
 8017daa:	f240 4195 	movw	r1, #1173	@ 0x495
 8017dae:	482b      	ldr	r0, [pc, #172]	@ (8017e5c <HAL_ETH_IsRxDataAvailable+0x108>)
 8017db0:	f7e9 f9b2 	bl	8001118 <vAssertCalled>

                /* Check if last descriptor */
                if( READ_BIT( ulDesc3, ETH_DMARXNDESCWBF_LD ) != ( uint32_t ) RESET )
 8017db4:	68fb      	ldr	r3, [r7, #12]
 8017db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	d036      	beq.n	8017e2c <HAL_ETH_IsRxDataAvailable+0xd8>
                {
                    /* Increment the number of descriptors to be passed to the application */
                    app_desc_count += 1U;
 8017dbe:	693b      	ldr	r3, [r7, #16]
 8017dc0:	3301      	adds	r3, #1
 8017dc2:	613b      	str	r3, [r7, #16]

                    if( app_desc_count == 1U )
 8017dc4:	693b      	ldr	r3, [r7, #16]
 8017dc6:	2b01      	cmp	r3, #1
 8017dc8:	d101      	bne.n	8017dce <HAL_ETH_IsRxDataAvailable+0x7a>
                    {
                        first_app_desc_index = desc_index;
 8017dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017dcc:	61fb      	str	r3, [r7, #28]
                    }

                    /* Increment current rx descriptor index */
                    INCR_RX_DESC_INDEX( desc_index, 1U );
 8017dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017dd0:	3301      	adds	r3, #1
 8017dd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8017dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017dd6:	2b03      	cmp	r3, #3
 8017dd8:	d902      	bls.n	8017de0 <HAL_ETH_IsRxDataAvailable+0x8c>
 8017dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ddc:	3b04      	subs	r3, #4
 8017dde:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* Check for Context descriptor */
                    /* Get current descriptor address */
                    dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8017de0:	69bb      	ldr	r3, [r7, #24]
 8017de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017de8:	617b      	str	r3, [r7, #20]

                    if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET )
 8017dea:	697b      	ldr	r3, [r7, #20]
 8017dec:	68db      	ldr	r3, [r3, #12]
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	db11      	blt.n	8017e16 <HAL_ETH_IsRxDataAvailable+0xc2>
                    {
                        /* If IEEE 1588 timestamp feature is enabled, the DMA stores the timestamp
                        * (if available). The DMA writes the context descriptor after the last
                        * descriptor for the current packet (in the next available descriptor). */
                        if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_CTXT ) != ( uint32_t ) RESET )
 8017df2:	697b      	ldr	r3, [r7, #20]
 8017df4:	68db      	ldr	r3, [r3, #12]
 8017df6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	d00b      	beq.n	8017e16 <HAL_ETH_IsRxDataAvailable+0xc2>
                        {
                            /* Increment the number of descriptors to be passed to the application */
                            dmarxdesclist->AppContextDesc = 1;
 8017dfe:	69bb      	ldr	r3, [r7, #24]
 8017e00:	2201      	movs	r2, #1
 8017e02:	61da      	str	r2, [r3, #28]
                            /* Increment current rx descriptor index */
                            INCR_RX_DESC_INDEX( desc_index, 1U );
 8017e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e06:	3301      	adds	r3, #1
 8017e08:	627b      	str	r3, [r7, #36]	@ 0x24
 8017e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e0c:	2b03      	cmp	r3, #3
 8017e0e:	d902      	bls.n	8017e16 <HAL_ETH_IsRxDataAvailable+0xc2>
 8017e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e12:	3b04      	subs	r3, #4
 8017e14:	627b      	str	r3, [r7, #36]	@ 0x24
                        }
                    }

                    /* Fill information to Rx descriptors list */
                    dmarxdesclist->CurRxDesc = desc_index;
 8017e16:	69bb      	ldr	r3, [r7, #24]
 8017e18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017e1a:	611a      	str	r2, [r3, #16]
                    dmarxdesclist->FirstAppDesc = first_app_desc_index;
 8017e1c:	69bb      	ldr	r3, [r7, #24]
 8017e1e:	69fa      	ldr	r2, [r7, #28]
 8017e20:	615a      	str	r2, [r3, #20]
                    dmarxdesclist->AppDescNbr = app_desc_count;
 8017e22:	69bb      	ldr	r3, [r7, #24]
 8017e24:	693a      	ldr	r2, [r7, #16]
 8017e26:	619a      	str	r2, [r3, #24]

                    /* Return function status */
                    return 1;
 8017e28:	2301      	movs	r3, #1
 8017e2a:	e012      	b.n	8017e52 <HAL_ETH_IsRxDataAvailable+0xfe>
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 8017e2c:	697b      	ldr	r3, [r7, #20]
 8017e2e:	68db      	ldr	r3, [r3, #12]
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	db02      	blt.n	8017e3a <HAL_ETH_IsRxDataAvailable+0xe6>
 8017e34:	6a3b      	ldr	r3, [r7, #32]
 8017e36:	2b03      	cmp	r3, #3
 8017e38:	d9a2      	bls.n	8017d80 <HAL_ETH_IsRxDataAvailable+0x2c>
/*			/ * Get current descriptor address * / */
/*			dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[desc_index]; */
/*		} */
            } /* while ( OWN == 0 ) */

            configASSERT( app_desc_count == 0 );
 8017e3a:	693b      	ldr	r3, [r7, #16]
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d004      	beq.n	8017e4a <HAL_ETH_IsRxDataAvailable+0xf6>
 8017e40:	f240 41db 	movw	r1, #1243	@ 0x4db
 8017e44:	4805      	ldr	r0, [pc, #20]	@ (8017e5c <HAL_ETH_IsRxDataAvailable+0x108>)
 8017e46:	f7e9 f967 	bl	8001118 <vAssertCalled>
/*		/ * Set the Tail pointer address to the last rx descriptor hold by the app * / */
/*		WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc); */
/*	} */

            /* Fill information to Rx descriptors list: No received Packet */
            dmarxdesclist->AppDescNbr = 0U;
 8017e4a:	69bb      	ldr	r3, [r7, #24]
 8017e4c:	2200      	movs	r2, #0
 8017e4e:	619a      	str	r2, [r3, #24]

            return 0;
 8017e50:	2300      	movs	r3, #0
        }
 8017e52:	4618      	mov	r0, r3
 8017e54:	3728      	adds	r7, #40	@ 0x28
 8017e56:	46bd      	mov	sp, r7
 8017e58:	bd80      	pop	{r7, pc}
 8017e5a:	bf00      	nop
 8017e5c:	08025a78 	.word	0x08025a78

08017e60 <HAL_ETH_GetRxData>:
 * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
 * @retval HAL status
 */
        size_t HAL_ETH_GetRxData( ETH_HandleTypeDef * heth,
                                  ETH_BufferTypeDef * RxBuffer )
        {
 8017e60:	b580      	push	{r7, lr}
 8017e62:	b086      	sub	sp, #24
 8017e64:	af00      	add	r7, sp, #0
 8017e66:	6078      	str	r0, [r7, #4]
 8017e68:	6039      	str	r1, [r7, #0]
            ETH_RxDescListTypeDef * dmarxdesclist = &( heth->RxDescList );
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	3330      	adds	r3, #48	@ 0x30
 8017e6e:	617b      	str	r3, [r7, #20]
            uint32_t desc_index;
            uint32_t packet_length;
            __IO const ETH_DMADescTypeDef * dma_rx_desc;

            configASSERT( RxBuffer != NULL );
 8017e70:	683b      	ldr	r3, [r7, #0]
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	d104      	bne.n	8017e80 <HAL_ETH_GetRxData+0x20>
 8017e76:	f240 511f 	movw	r1, #1311	@ 0x51f
 8017e7a:	481c      	ldr	r0, [pc, #112]	@ (8017eec <HAL_ETH_GetRxData+0x8c>)
 8017e7c:	f7e9 f94c 	bl	8001118 <vAssertCalled>

            if( HAL_ETH_IsRxDataAvailable( heth ) == 0U )
 8017e80:	6878      	ldr	r0, [r7, #4]
 8017e82:	f7ff ff67 	bl	8017d54 <HAL_ETH_IsRxDataAvailable>
 8017e86:	4603      	mov	r3, r0
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d101      	bne.n	8017e90 <HAL_ETH_GetRxData+0x30>
            {
                /* No data to be transferred to the application */
                return 0U;
 8017e8c:	2300      	movs	r3, #0
 8017e8e:	e028      	b.n	8017ee2 <HAL_ETH_GetRxData+0x82>
            }

            desc_index = dmarxdesclist->FirstAppDesc;
 8017e90:	697b      	ldr	r3, [r7, #20]
 8017e92:	695b      	ldr	r3, [r3, #20]
 8017e94:	613b      	str	r3, [r7, #16]
            dma_rx_desc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8017e96:	697b      	ldr	r3, [r7, #20]
 8017e98:	693a      	ldr	r2, [r7, #16]
 8017e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e9e:	60fb      	str	r3, [r7, #12]

            configASSERT( dmarxdesclist->AppDescNbr == 1 );
 8017ea0:	697b      	ldr	r3, [r7, #20]
 8017ea2:	699b      	ldr	r3, [r3, #24]
 8017ea4:	2b01      	cmp	r3, #1
 8017ea6:	d004      	beq.n	8017eb2 <HAL_ETH_GetRxData+0x52>
 8017ea8:	f240 512a 	movw	r1, #1322	@ 0x52a
 8017eac:	480f      	ldr	r0, [pc, #60]	@ (8017eec <HAL_ETH_GetRxData+0x8c>)
 8017eae:	f7e9 f933 	bl	8001118 <vAssertCalled>

            /* last descriptor data length */
            packet_length = READ_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCWBF_PL );
 8017eb2:	68fb      	ldr	r3, [r7, #12]
 8017eb4:	68db      	ldr	r3, [r3, #12]
 8017eb6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017eba:	60bb      	str	r3, [r7, #8]

            RxBuffer->buffer = ( uint8_t * ) dma_rx_desc->BackupAddr0;
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	691b      	ldr	r3, [r3, #16]
 8017ec0:	461a      	mov	r2, r3
 8017ec2:	683b      	ldr	r3, [r7, #0]
 8017ec4:	601a      	str	r2, [r3, #0]
            RxBuffer->len = packet_length;
 8017ec6:	683b      	ldr	r3, [r7, #0]
 8017ec8:	68ba      	ldr	r2, [r7, #8]
 8017eca:	605a      	str	r2, [r3, #4]

            /* data is in only one buffer */
            configASSERT( packet_length <= heth->Init.RxBuffLen );
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	695b      	ldr	r3, [r3, #20]
 8017ed0:	68ba      	ldr	r2, [r7, #8]
 8017ed2:	429a      	cmp	r2, r3
 8017ed4:	d904      	bls.n	8017ee0 <HAL_ETH_GetRxData+0x80>
 8017ed6:	f240 5133 	movw	r1, #1331	@ 0x533
 8017eda:	4804      	ldr	r0, [pc, #16]	@ (8017eec <HAL_ETH_GetRxData+0x8c>)
 8017edc:	f7e9 f91c 	bl	8001118 <vAssertCalled>

            return packet_length;
 8017ee0:	68bb      	ldr	r3, [r7, #8]
        }
 8017ee2:	4618      	mov	r0, r3
 8017ee4:	3718      	adds	r7, #24
 8017ee6:	46bd      	mov	sp, r7
 8017ee8:	bd80      	pop	{r7, pc}
 8017eea:	bf00      	nop
 8017eec:	08025a78 	.word	0x08025a78

08017ef0 <HAL_ETH_BuildRxDescriptors>:
 *         the configuration information for ETHERNET module
 * @retval HAL status.
 */
        HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors( ETH_HandleTypeDef * heth,
                                                      uint8_t * pucNewBuffer )
        {
 8017ef0:	b480      	push	{r7}
 8017ef2:	b08b      	sub	sp, #44	@ 0x2c
 8017ef4:	af00      	add	r7, sp, #0
 8017ef6:	6078      	str	r0, [r7, #4]
 8017ef8:	6039      	str	r1, [r7, #0]
            ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	3330      	adds	r3, #48	@ 0x30
 8017efe:	60fb      	str	r3, [r7, #12]
            uint32_t desc_index = dmarxdesclist->FirstAppDesc;
 8017f00:	68fb      	ldr	r3, [r7, #12]
 8017f02:	695b      	ldr	r3, [r3, #20]
 8017f04:	627b      	str	r3, [r7, #36]	@ 0x24
            __IO ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8017f06:	68fb      	ldr	r3, [r7, #12]
 8017f08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017f0e:	623b      	str	r3, [r7, #32]
            uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8017f10:	68fb      	ldr	r3, [r7, #12]
 8017f12:	699b      	ldr	r3, [r3, #24]
 8017f14:	61fb      	str	r3, [r7, #28]
            uint32_t descscan;

            if( dmarxdesclist->AppDescNbr == 0U )
 8017f16:	68fb      	ldr	r3, [r7, #12]
 8017f18:	699b      	ldr	r3, [r3, #24]
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	d101      	bne.n	8017f22 <HAL_ETH_BuildRxDescriptors+0x32>
            {
                /* No Rx descriptors to build */
                return HAL_ERROR;
 8017f1e:	2301      	movs	r3, #1
 8017f20:	e057      	b.n	8017fd2 <HAL_ETH_BuildRxDescriptors+0xe2>
            }

            if( dmarxdesclist->AppContextDesc != 0U )
 8017f22:	68fb      	ldr	r3, [r7, #12]
 8017f24:	69db      	ldr	r3, [r3, #28]
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d002      	beq.n	8017f30 <HAL_ETH_BuildRxDescriptors+0x40>
            {
                /* A context descriptor is available */
                totalappdescnbr += 1U;
 8017f2a:	69fb      	ldr	r3, [r7, #28]
 8017f2c:	3301      	adds	r3, #1
 8017f2e:	61fb      	str	r3, [r7, #28]
            }

            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 8017f30:	2300      	movs	r3, #0
 8017f32:	61bb      	str	r3, [r7, #24]
            {
                uint32_t DESC3;
                uint8_t * pucBuffer;

                if( pucNewBuffer != NULL )
 8017f34:	683b      	ldr	r3, [r7, #0]
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	d005      	beq.n	8017f46 <HAL_ETH_BuildRxDescriptors+0x56>
                {
                    /* Earlier zero-copy RX only: buffer was passed to the application. */
                    pucBuffer = pucNewBuffer;
 8017f3a:	683b      	ldr	r3, [r7, #0]
 8017f3c:	613b      	str	r3, [r7, #16]
                    dmarxdesc->BackupAddr0 = ( uint32_t ) pucNewBuffer;
 8017f3e:	683a      	ldr	r2, [r7, #0]
 8017f40:	6a3b      	ldr	r3, [r7, #32]
 8017f42:	611a      	str	r2, [r3, #16]
 8017f44:	e002      	b.n	8017f4c <HAL_ETH_BuildRxDescriptors+0x5c>
                }
                else
                {
                    /* Keep on using the same buffer as before. */
                    pucBuffer = ( uint8_t * ) dmarxdesc->BackupAddr0;
 8017f46:	6a3b      	ldr	r3, [r7, #32]
 8017f48:	691b      	ldr	r3, [r3, #16]
 8017f4a:	613b      	str	r3, [r7, #16]
                }

                WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pucBuffer );
 8017f4c:	693a      	ldr	r2, [r7, #16]
 8017f4e:	6a3b      	ldr	r3, [r7, #32]
 8017f50:	601a      	str	r2, [r3, #0]
                /* Buffer 1 Address Valid */

                DESC3 = READ_REG( dmarxdesc->DESC3 );
 8017f52:	6a3b      	ldr	r3, [r7, #32]
 8017f54:	68db      	ldr	r3, [r3, #12]
 8017f56:	617b      	str	r3, [r7, #20]
                WRITE_REG( DESC3, ETH_DMARXNDESCRF_BUF1V );
 8017f58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8017f5c:	617b      	str	r3, [r7, #20]
/*		} */

                /* Should be the last change. */
/*		SET_BIT(DESC3, ETH_DMARXNDESCRF_OWN); */

                if( dmarxdesclist->ItMode != 0U )
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	6a1b      	ldr	r3, [r3, #32]
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	d003      	beq.n	8017f6e <HAL_ETH_BuildRxDescriptors+0x7e>
                {
                    /* Interrupt Enabled on Completion */
                    SET_BIT( DESC3, ETH_DMARXNDESCRF_IOC );
 8017f66:	697b      	ldr	r3, [r7, #20]
 8017f68:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8017f6c:	617b      	str	r3, [r7, #20]
                }

                /* Now all is ready.. */
                SET_BIT( DESC3, ETH_DMARXNDESCRF_OWN );
 8017f6e:	697b      	ldr	r3, [r7, #20]
 8017f70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8017f74:	617b      	str	r3, [r7, #20]

                WRITE_REG( dmarxdesc->DESC3, DESC3 );
 8017f76:	6a3b      	ldr	r3, [r7, #32]
 8017f78:	697a      	ldr	r2, [r7, #20]
 8017f7a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8017f7c:	f3bf 8f4f 	dsb	sy
}
 8017f80:	bf00      	nop

                __DSB();

                /* And read it back. */
                ( void ) dmarxdesc->DESC3;
 8017f82:	6a3b      	ldr	r3, [r7, #32]
 8017f84:	68db      	ldr	r3, [r3, #12]

                if( descscan >= ( totalappdescnbr - 1U ) )
 8017f86:	69fb      	ldr	r3, [r7, #28]
 8017f88:	3b01      	subs	r3, #1
 8017f8a:	69ba      	ldr	r2, [r7, #24]
 8017f8c:	429a      	cmp	r2, r3
 8017f8e:	d211      	bcs.n	8017fb4 <HAL_ETH_BuildRxDescriptors+0xc4>
                {
                    break;
                }

                /* Increment rx descriptor index */
                INCR_RX_DESC_INDEX( desc_index, 1U );
 8017f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f92:	3301      	adds	r3, #1
 8017f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8017f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f98:	2b03      	cmp	r3, #3
 8017f9a:	d902      	bls.n	8017fa2 <HAL_ETH_BuildRxDescriptors+0xb2>
 8017f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f9e:	3b04      	subs	r3, #4
 8017fa0:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Get descriptor address */
                dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8017fa2:	68fb      	ldr	r3, [r7, #12]
 8017fa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017faa:	623b      	str	r3, [r7, #32]
            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 8017fac:	69bb      	ldr	r3, [r7, #24]
 8017fae:	3301      	adds	r3, #1
 8017fb0:	61bb      	str	r3, [r7, #24]
            {
 8017fb2:	e7bf      	b.n	8017f34 <HAL_ETH_BuildRxDescriptors+0x44>
                    break;
 8017fb4:	bf00      	nop
            }

            /* Set the Tail pointer address to the last rx descriptor hold by the app */
            WRITE_REG( heth->Instance->DMACRDTPR, ( uint32_t ) dmarxdesc );
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	681a      	ldr	r2, [r3, #0]
 8017fba:	6a3b      	ldr	r3, [r7, #32]
 8017fbc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017fc0:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128

            /* reset the Application desc number */
            dmarxdesclist->AppDescNbr = 0;
 8017fc4:	68fb      	ldr	r3, [r7, #12]
 8017fc6:	2200      	movs	r2, #0
 8017fc8:	619a      	str	r2, [r3, #24]

            /*  reset the application context descriptor */
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	2200      	movs	r2, #0
 8017fce:	64da      	str	r2, [r3, #76]	@ 0x4c

            return HAL_OK;
 8017fd0:	2300      	movs	r3, #0
        }
 8017fd2:	4618      	mov	r0, r3
 8017fd4:	372c      	adds	r7, #44	@ 0x2c
 8017fd6:	46bd      	mov	sp, r7
 8017fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fdc:	4770      	bx	lr
	...

08017fe0 <HAL_ETH_IRQHandler>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        void HAL_ETH_IRQHandler( ETH_HandleTypeDef * heth )
        {
 8017fe0:	b580      	push	{r7, lr}
 8017fe2:	b082      	sub	sp, #8
 8017fe4:	af00      	add	r7, sp, #0
 8017fe6:	6078      	str	r0, [r7, #4]
            /* ETH interrupt. See heth->DMACSR for details.
             */

            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_RI ) )
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017ff0:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8017ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017ff8:	2b40      	cmp	r3, #64	@ 0x40
 8017ffa:	d115      	bne.n	8018028 <HAL_ETH_IRQHandler+0x48>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_RIE ) )
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	681b      	ldr	r3, [r3, #0]
 8018000:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018004:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8018008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801800c:	2b40      	cmp	r3, #64	@ 0x40
 801800e:	d10b      	bne.n	8018028 <HAL_ETH_IRQHandler+0x48>
                        heth->RxCpltCallback( heth );
                    }
                    #else
                    {
                        /* Receive complete callback */
                        HAL_ETH_RxCpltCallback( heth );
 8018010:	6878      	ldr	r0, [r7, #4]
 8018012:	f7ff fafc 	bl	801760e <HAL_ETH_RxCpltCallback>
                    }
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                    /* Clear the Eth DMA Rx IT pending bits */
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_RI | ETH_DMACSR_NIS );
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801801e:	461a      	mov	r2, r3
 8018020:	f248 0340 	movw	r3, #32832	@ 0x8040
 8018024:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                }
            }

            /* Packet transmitted */
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_TI ) )
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	681b      	ldr	r3, [r3, #0]
 801802c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018030:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8018034:	f003 0301 	and.w	r3, r3, #1
 8018038:	2b01      	cmp	r3, #1
 801803a:	d115      	bne.n	8018068 <HAL_ETH_IRQHandler+0x88>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_TIE ) )
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	681b      	ldr	r3, [r3, #0]
 8018040:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018044:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8018048:	f003 0301 	and.w	r3, r3, #1
 801804c:	2b01      	cmp	r3, #1
 801804e:	d10b      	bne.n	8018068 <HAL_ETH_IRQHandler+0x88>
                        heth->TxCpltCallback( heth );
                    }
                    #else
                    {
                        /* Transfer complete callback */
                        HAL_ETH_TxCpltCallback( heth );
 8018050:	6878      	ldr	r0, [r7, #4]
 8018052:	f7ff fad1 	bl	80175f8 <HAL_ETH_TxCpltCallback>
                    }
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                    /* Clear the Eth DMA Tx IT pending bits */
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_TI | ETH_DMACSR_NIS );
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	681b      	ldr	r3, [r3, #0]
 801805a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801805e:	461a      	mov	r2, r3
 8018060:	f248 0301 	movw	r3, #32769	@ 0x8001
 8018064:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                }
            }

            /* ETH DMA Error */
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_AIS ) )
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	681b      	ldr	r3, [r3, #0]
 801806c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018070:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8018074:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8018078:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801807c:	d14f      	bne.n	801811e <HAL_ETH_IRQHandler+0x13e>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_AIE ) )
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	681b      	ldr	r3, [r3, #0]
 8018082:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018086:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 801808a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801808e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8018092:	d144      	bne.n	801811e <HAL_ETH_IRQHandler+0x13e>
                {
                    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018098:	f043 0208 	orr.w	r2, r3, #8
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	661a      	str	r2, [r3, #96]	@ 0x60

                    /* if fatal bus error occurred */
                    if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_FBE ) )
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	681b      	ldr	r3, [r3, #0]
 80180a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80180a8:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80180ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80180b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80180b4:	d11d      	bne.n	80180f2 <HAL_ETH_IRQHandler+0x112>
                    {
                        /* Get DMA error code  */
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS ) );
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	681b      	ldr	r3, [r3, #0]
 80180ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80180be:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 80180c2:	f241 1302 	movw	r3, #4354	@ 0x1102
 80180c6:	4013      	ands	r3, r2
 80180c8:	687a      	ldr	r2, [r7, #4]
 80180ca:	6653      	str	r3, [r2, #100]	@ 0x64

                        /* Disable all interrupts */
                        __HAL_ETH_DMA_DISABLE_IT( heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE );
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	681b      	ldr	r3, [r3, #0]
 80180d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80180d4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80180d8:	687a      	ldr	r2, [r7, #4]
 80180da:	6812      	ldr	r2, [r2, #0]
 80180dc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80180e0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80180e4:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

                        /* Set HAL state to ERROR */
                        set_error_state( heth, HAL_ETH_STATE_ERROR );
 80180e8:	21e0      	movs	r1, #224	@ 0xe0
 80180ea:	6878      	ldr	r0, [r7, #4]
 80180ec:	f7ff fbba 	bl	8017864 <set_error_state>
 80180f0:	e012      	b.n	8018118 <HAL_ETH_IRQHandler+0x138>
                    }
                    else
                    {
                        /* Get DMA error status  */
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	681b      	ldr	r3, [r3, #0]
 80180f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80180fa:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80180fe:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	665a      	str	r2, [r3, #100]	@ 0x64
                                                                                 ETH_DMACSR_RBU | ETH_DMACSR_AIS ) );

                        /* Clear the interrupt summary flag */
                        __HAL_ETH_DMA_CLEAR_IT( heth, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801810e:	461a      	mov	r2, r3
 8018110:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8018114:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                        heth->DMAErrorCallback( heth );
                    }
                    #else
                    {
                        /* Ethernet DMA Error callback */
                        HAL_ETH_DMAErrorCallback( heth );
 8018118:	6878      	ldr	r0, [r7, #4]
 801811a:	f7ff fa83 	bl	8017624 <HAL_ETH_DMAErrorCallback>
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
                }
            }

            /* ETH MAC Error IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ( ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE ) ) )
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	681b      	ldr	r3, [r3, #0]
 8018122:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018126:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 801812a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801812e:	d10f      	bne.n	8018150 <HAL_ETH_IRQHandler+0x170>
            {
                /* Get MAC Rx Tx status and clear Status register pending bit */
                heth->MACErrorCode = READ_REG( heth->Instance->MACRXTXSR );
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	669a      	str	r2, [r3, #104]	@ 0x68

                set_error_state( heth, HAL_ETH_STATE_ERROR );
 801813c:	21e0      	movs	r1, #224	@ 0xe0
 801813e:	6878      	ldr	r0, [r7, #4]
 8018140:	f7ff fb90 	bl	8017864 <set_error_state>
                    heth->DMAErrorCallback( heth );
                }
                #else
                {
                    /* Ethernet MAC Error callback */
                    HAL_ETH_MACErrorCallback( heth );
 8018144:	6878      	ldr	r0, [r7, #4]
 8018146:	f000 f843 	bl	80181d0 <HAL_ETH_MACErrorCallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACErrorCode = ( uint32_t ) ( 0x0U );
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	2200      	movs	r2, #0
 801814e:	669a      	str	r2, [r3, #104]	@ 0x68
            }

            /* ETH PMT IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_PMT_IT ) )
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	681b      	ldr	r3, [r3, #0]
 8018154:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018158:	f003 0310 	and.w	r3, r3, #16
 801815c:	2b10      	cmp	r3, #16
 801815e:	d10d      	bne.n	801817c <HAL_ETH_IRQHandler+0x19c>
            {
                /* Get MAC Wake-up source and clear the status register pending bit */
                heth->MACWakeUpEvent = READ_BIT( heth->Instance->MACPCSR, ( ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD ) );
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	681b      	ldr	r3, [r3, #0]
 8018164:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8018168:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	66da      	str	r2, [r3, #108]	@ 0x6c
                    heth->PMTCallback( heth );
                }
                #else
                {
                    /* Ethernet PMT callback */
                    HAL_ETH_PMTCallback( heth );
 8018170:	6878      	ldr	r0, [r7, #4]
 8018172:	f000 f837 	bl	80181e4 <HAL_ETH_PMTCallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACWakeUpEvent = ( uint32_t ) ( 0x0U );
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	2200      	movs	r2, #0
 801817a:	66da      	str	r2, [r3, #108]	@ 0x6c
            }

            /* ETH EEE IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_LPI_IT ) )
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	681b      	ldr	r3, [r3, #0]
 8018180:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018184:	f003 0320 	and.w	r3, r3, #32
 8018188:	2b20      	cmp	r3, #32
 801818a:	d10d      	bne.n	80181a8 <HAL_ETH_IRQHandler+0x1c8>
            {
                /* Get MAC LPI interrupt source and clear the status register pending bit */
                heth->MACLPIEvent = READ_BIT( heth->Instance->MACPCSR, 0x0000000FU );
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8018194:	f003 020f 	and.w	r2, r3, #15
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	671a      	str	r2, [r3, #112]	@ 0x70
                    heth->EEECallback( heth );
                }
                #else
                {
                    /* Ethernet EEE callback */
                    HAL_ETH_EEECallback( heth );
 801819c:	6878      	ldr	r0, [r7, #4]
 801819e:	f000 f82b 	bl	80181f8 <HAL_ETH_EEECallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACLPIEvent = ( uint32_t ) ( 0x0U );
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	2200      	movs	r2, #0
 80181a6:	671a      	str	r2, [r3, #112]	@ 0x70
                        #endif
                    }
                }
            #else /* #if defined(DUAL_CORE) */
                /* check ETH WAKEUP exti flag */
                if( __HAL_ETH_WAKEUP_EXTI_GET_FLAG( ETH_WAKEUP_EXTI_LINE ) != ( uint32_t ) RESET )
 80181a8:	4b08      	ldr	r3, [pc, #32]	@ (80181cc <HAL_ETH_IRQHandler+0x1ec>)
 80181aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80181ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d006      	beq.n	80181c2 <HAL_ETH_IRQHandler+0x1e2>
                {
                    /* Clear ETH WAKEUP Exti pending bit */
                    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG( ETH_WAKEUP_EXTI_LINE );
 80181b4:	4b05      	ldr	r3, [pc, #20]	@ (80181cc <HAL_ETH_IRQHandler+0x1ec>)
 80181b6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80181ba:	629a      	str	r2, [r3, #40]	@ 0x28
                        heth->WakeUpCallback( heth );
                    }
                    #else
                    {
                        /* ETH WAKEUP callback */
                        HAL_ETH_WakeUpCallback( heth );
 80181bc:	6878      	ldr	r0, [r7, #4]
 80181be:	f000 f825 	bl	801820c <HAL_ETH_WakeUpCallback>
                    }
                    #endif
                }
            #endif /* #if defined(DUAL_CORE) */
        }
 80181c2:	bf00      	nop
 80181c4:	3708      	adds	r7, #8
 80181c6:	46bd      	mov	sp, r7
 80181c8:	bd80      	pop	{r7, pc}
 80181ca:	bf00      	nop
 80181cc:	58000080 	.word	0x58000080

080181d0 <HAL_ETH_MACErrorCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_MACErrorCallback( ETH_HandleTypeDef * heth )
        {
 80181d0:	b480      	push	{r7}
 80181d2:	b083      	sub	sp, #12
 80181d4:	af00      	add	r7, sp, #0
 80181d6:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_MACErrorCallback could be implemented in the user file
             */
        }
 80181d8:	bf00      	nop
 80181da:	370c      	adds	r7, #12
 80181dc:	46bd      	mov	sp, r7
 80181de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181e2:	4770      	bx	lr

080181e4 <HAL_ETH_PMTCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_PMTCallback( ETH_HandleTypeDef * heth )
        {
 80181e4:	b480      	push	{r7}
 80181e6:	b083      	sub	sp, #12
 80181e8:	af00      	add	r7, sp, #0
 80181ea:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_PMTCallback could be implemented in the user file
             */
        }
 80181ec:	bf00      	nop
 80181ee:	370c      	adds	r7, #12
 80181f0:	46bd      	mov	sp, r7
 80181f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181f6:	4770      	bx	lr

080181f8 <HAL_ETH_EEECallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_EEECallback( ETH_HandleTypeDef * heth )
        {
 80181f8:	b480      	push	{r7}
 80181fa:	b083      	sub	sp, #12
 80181fc:	af00      	add	r7, sp, #0
 80181fe:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_EEECallback could be implemented in the user file
             */
        }
 8018200:	bf00      	nop
 8018202:	370c      	adds	r7, #12
 8018204:	46bd      	mov	sp, r7
 8018206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801820a:	4770      	bx	lr

0801820c <HAL_ETH_WakeUpCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_WakeUpCallback( ETH_HandleTypeDef * heth )
        {
 801820c:	b480      	push	{r7}
 801820e:	b083      	sub	sp, #12
 8018210:	af00      	add	r7, sp, #0
 8018212:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             *        the HAL_ETH_WakeUpCallback could be implemented in the user file
             */
        }
 8018214:	bf00      	nop
 8018216:	370c      	adds	r7, #12
 8018218:	46bd      	mov	sp, r7
 801821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801821e:	4770      	bx	lr

08018220 <HAL_ETH_ReadPHYRegister>:
 */
        HAL_StatusTypeDef HAL_ETH_ReadPHYRegister( ETH_HandleTypeDef * heth,
                                                   uint32_t PHYAddr,
                                                   uint32_t PHYReg,
                                                   uint32_t * pRegValue )
        {
 8018220:	b580      	push	{r7, lr}
 8018222:	b086      	sub	sp, #24
 8018224:	af00      	add	r7, sp, #0
 8018226:	60f8      	str	r0, [r7, #12]
 8018228:	60b9      	str	r1, [r7, #8]
 801822a:	607a      	str	r2, [r7, #4]
 801822c:	603b      	str	r3, [r7, #0]
            uint32_t tmpreg, tickstart;

            /* Check for the Busy flag */
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 801822e:	68fb      	ldr	r3, [r7, #12]
 8018230:	681b      	ldr	r3, [r3, #0]
 8018232:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018236:	f003 0301 	and.w	r3, r3, #1
 801823a:	2b00      	cmp	r3, #0
 801823c:	d001      	beq.n	8018242 <HAL_ETH_ReadPHYRegister+0x22>
            {
                return HAL_ERROR;
 801823e:	2301      	movs	r3, #1
 8018240:	e03e      	b.n	80182c0 <HAL_ETH_ReadPHYRegister+0xa0>
            }

            /* Get the  MACMDIOAR value */
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 8018242:	68fb      	ldr	r3, [r7, #12]
 8018244:	681b      	ldr	r3, [r3, #0]
 8018246:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801824a:	617b      	str	r3, [r7, #20]
             * - Set the PHY device address
             * - Set the PHY register address
             * - Set the read mode
             * - Set the MII Busy bit */

            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 801824c:	697b      	ldr	r3, [r7, #20]
 801824e:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8018252:	68bb      	ldr	r3, [r7, #8]
 8018254:	055b      	lsls	r3, r3, #21
 8018256:	4313      	orrs	r3, r2
 8018258:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 801825a:	697b      	ldr	r3, [r7, #20]
 801825c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	041b      	lsls	r3, r3, #16
 8018264:	4313      	orrs	r3, r2
 8018266:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD );
 8018268:	697b      	ldr	r3, [r7, #20]
 801826a:	f043 030c 	orr.w	r3, r3, #12
 801826e:	617b      	str	r3, [r7, #20]
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 8018270:	697b      	ldr	r3, [r7, #20]
 8018272:	f043 0301 	orr.w	r3, r3, #1
 8018276:	617b      	str	r3, [r7, #20]

            /* Write the result value into the MDII Address register */
            WRITE_REG( heth->Instance->MACMDIOAR, tmpreg );
 8018278:	68fb      	ldr	r3, [r7, #12]
 801827a:	681b      	ldr	r3, [r3, #0]
 801827c:	697a      	ldr	r2, [r7, #20]
 801827e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

            tickstart = HAL_GetTick();
 8018282:	f000 ff01 	bl	8019088 <HAL_GetTick>
 8018286:	6138      	str	r0, [r7, #16]

            /* Wait for the Busy flag */
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8018288:	e009      	b.n	801829e <HAL_ETH_ReadPHYRegister+0x7e>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 801828a:	f000 fefd 	bl	8019088 <HAL_GetTick>
 801828e:	4602      	mov	r2, r0
 8018290:	693b      	ldr	r3, [r7, #16]
 8018292:	1ad3      	subs	r3, r2, r3
 8018294:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8018298:	d901      	bls.n	801829e <HAL_ETH_ReadPHYRegister+0x7e>
                {
                    return HAL_ERROR;
 801829a:	2301      	movs	r3, #1
 801829c:	e010      	b.n	80182c0 <HAL_ETH_ReadPHYRegister+0xa0>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 801829e:	68fb      	ldr	r3, [r7, #12]
 80182a0:	681b      	ldr	r3, [r3, #0]
 80182a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80182a6:	f003 0301 	and.w	r3, r3, #1
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	d1ed      	bne.n	801828a <HAL_ETH_ReadPHYRegister+0x6a>
                }
            }

            /* Get MACMIIDR value */
            WRITE_REG( *pRegValue, ( uint16_t ) heth->Instance->MACMDIODR );
 80182ae:	68fb      	ldr	r3, [r7, #12]
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80182b6:	b29b      	uxth	r3, r3
 80182b8:	461a      	mov	r2, r3
 80182ba:	683b      	ldr	r3, [r7, #0]
 80182bc:	601a      	str	r2, [r3, #0]

            return HAL_OK;
 80182be:	2300      	movs	r3, #0
        }
 80182c0:	4618      	mov	r0, r3
 80182c2:	3718      	adds	r7, #24
 80182c4:	46bd      	mov	sp, r7
 80182c6:	bd80      	pop	{r7, pc}

080182c8 <HAL_ETH_WritePHYRegister>:
 */
        HAL_StatusTypeDef HAL_ETH_WritePHYRegister( ETH_HandleTypeDef * heth,
                                                    uint32_t PHYAddr,
                                                    uint32_t PHYReg,
                                                    uint32_t RegValue )
        {
 80182c8:	b580      	push	{r7, lr}
 80182ca:	b086      	sub	sp, #24
 80182cc:	af00      	add	r7, sp, #0
 80182ce:	60f8      	str	r0, [r7, #12]
 80182d0:	60b9      	str	r1, [r7, #8]
 80182d2:	607a      	str	r2, [r7, #4]
 80182d4:	603b      	str	r3, [r7, #0]
            uint32_t tmpreg, tickstart;

            /* Check for the Busy flag */
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 80182d6:	68fb      	ldr	r3, [r7, #12]
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80182de:	f003 0301 	and.w	r3, r3, #1
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	d001      	beq.n	80182ea <HAL_ETH_WritePHYRegister+0x22>
            {
                return HAL_ERROR;
 80182e6:	2301      	movs	r3, #1
 80182e8:	e03c      	b.n	8018364 <HAL_ETH_WritePHYRegister+0x9c>
            }

            /* Get the  MACMDIOAR value */
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 80182ea:	68fb      	ldr	r3, [r7, #12]
 80182ec:	681b      	ldr	r3, [r3, #0]
 80182ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80182f2:	617b      	str	r3, [r7, #20]
             * - Set the PHY device address
             * - Set the PHY register address
             * - Set the write mode
             * - Set the MII Busy bit */

            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 80182f4:	697b      	ldr	r3, [r7, #20]
 80182f6:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80182fa:	68bb      	ldr	r3, [r7, #8]
 80182fc:	055b      	lsls	r3, r3, #21
 80182fe:	4313      	orrs	r3, r2
 8018300:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 8018302:	697b      	ldr	r3, [r7, #20]
 8018304:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	041b      	lsls	r3, r3, #16
 801830c:	4313      	orrs	r3, r2
 801830e:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR );
 8018310:	697b      	ldr	r3, [r7, #20]
 8018312:	f023 030c 	bic.w	r3, r3, #12
 8018316:	f043 0304 	orr.w	r3, r3, #4
 801831a:	617b      	str	r3, [r7, #20]
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 801831c:	697b      	ldr	r3, [r7, #20]
 801831e:	f043 0301 	orr.w	r3, r3, #1
 8018322:	617b      	str	r3, [r7, #20]


            /* Give the value to the MII data register */
            WRITE_REG( ETH->MACMDIODR, ( uint16_t ) RegValue );
 8018324:	683b      	ldr	r3, [r7, #0]
 8018326:	b29a      	uxth	r2, r3
 8018328:	4b10      	ldr	r3, [pc, #64]	@ (801836c <HAL_ETH_WritePHYRegister+0xa4>)
 801832a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

            /* Write the result value into the MII Address register */
            WRITE_REG( ETH->MACMDIOAR, tmpreg );
 801832e:	4a0f      	ldr	r2, [pc, #60]	@ (801836c <HAL_ETH_WritePHYRegister+0xa4>)
 8018330:	697b      	ldr	r3, [r7, #20]
 8018332:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

            tickstart = HAL_GetTick();
 8018336:	f000 fea7 	bl	8019088 <HAL_GetTick>
 801833a:	6138      	str	r0, [r7, #16]

            /* Wait for the Busy flag */
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 801833c:	e009      	b.n	8018352 <HAL_ETH_WritePHYRegister+0x8a>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 801833e:	f000 fea3 	bl	8019088 <HAL_GetTick>
 8018342:	4602      	mov	r2, r0
 8018344:	693b      	ldr	r3, [r7, #16]
 8018346:	1ad3      	subs	r3, r2, r3
 8018348:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801834c:	d901      	bls.n	8018352 <HAL_ETH_WritePHYRegister+0x8a>
                {
                    return HAL_ERROR;
 801834e:	2301      	movs	r3, #1
 8018350:	e008      	b.n	8018364 <HAL_ETH_WritePHYRegister+0x9c>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8018352:	68fb      	ldr	r3, [r7, #12]
 8018354:	681b      	ldr	r3, [r3, #0]
 8018356:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801835a:	f003 0301 	and.w	r3, r3, #1
 801835e:	2b00      	cmp	r3, #0
 8018360:	d1ed      	bne.n	801833e <HAL_ETH_WritePHYRegister+0x76>
                }
            }

            return HAL_OK;
 8018362:	2300      	movs	r3, #0
        }
 8018364:	4618      	mov	r0, r3
 8018366:	3718      	adds	r7, #24
 8018368:	46bd      	mov	sp, r7
 801836a:	bd80      	pop	{r7, pc}
 801836c:	40028000 	.word	0x40028000

08018370 <HAL_ETH_GetMACConfig>:
 *         the configuration of the MAC.
 * @retval HAL Status
 */
        HAL_StatusTypeDef HAL_ETH_GetMACConfig( ETH_HandleTypeDef * heth,
                                                ETH_MACConfigTypeDef * macconf )
        {
 8018370:	b480      	push	{r7}
 8018372:	b083      	sub	sp, #12
 8018374:	af00      	add	r7, sp, #0
 8018376:	6078      	str	r0, [r7, #4]
 8018378:	6039      	str	r1, [r7, #0]
            if( macconf == NULL )
 801837a:	683b      	ldr	r3, [r7, #0]
 801837c:	2b00      	cmp	r3, #0
 801837e:	d101      	bne.n	8018384 <HAL_ETH_GetMACConfig+0x14>
            {
                return HAL_ERROR;
 8018380:	2301      	movs	r3, #1
 8018382:	e1c3      	b.n	801870c <HAL_ETH_GetMACConfig+0x39c>
            }

            /* Get MAC parameters */
            macconf->PreambleLength = READ_BIT( heth->Instance->MACCR, ETH_MACCR_PRELEN );
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	681b      	ldr	r3, [r3, #0]
 8018388:	681b      	ldr	r3, [r3, #0]
 801838a:	f003 020c 	and.w	r2, r3, #12
 801838e:	683b      	ldr	r3, [r7, #0]
 8018390:	62da      	str	r2, [r3, #44]	@ 0x2c
            macconf->DeferralCheck = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DC ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	681b      	ldr	r3, [r3, #0]
 8018396:	681b      	ldr	r3, [r3, #0]
 8018398:	f003 0310 	and.w	r3, r3, #16
 801839c:	2b00      	cmp	r3, #0
 801839e:	bf14      	ite	ne
 80183a0:	2301      	movne	r3, #1
 80183a2:	2300      	moveq	r3, #0
 80183a4:	b2db      	uxtb	r3, r3
 80183a6:	461a      	mov	r2, r3
 80183a8:	683b      	ldr	r3, [r7, #0]
 80183aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            macconf->BackOffLimit = READ_BIT( heth->Instance->MACCR, ETH_MACCR_BL );
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	681b      	ldr	r3, [r3, #0]
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80183b8:	683b      	ldr	r3, [r7, #0]
 80183ba:	625a      	str	r2, [r3, #36]	@ 0x24
            macconf->RetryTransmission = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DR ) >> 8 ) == 0U ) ? ENABLE : DISABLE;
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	681b      	ldr	r3, [r3, #0]
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	bf0c      	ite	eq
 80183ca:	2301      	moveq	r3, #1
 80183cc:	2300      	movne	r3, #0
 80183ce:	b2db      	uxtb	r3, r3
 80183d0:	461a      	mov	r2, r3
 80183d2:	683b      	ldr	r3, [r7, #0]
 80183d4:	f883 2020 	strb.w	r2, [r3, #32]
            macconf->CarrierSenseDuringTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DCRS ) >> 9 ) > 0U ) ? ENABLE : DISABLE;
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	681b      	ldr	r3, [r3, #0]
 80183dc:	681b      	ldr	r3, [r3, #0]
 80183de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80183e2:	2b00      	cmp	r3, #0
 80183e4:	bf14      	ite	ne
 80183e6:	2301      	movne	r3, #1
 80183e8:	2300      	moveq	r3, #0
 80183ea:	b2db      	uxtb	r3, r3
 80183ec:	461a      	mov	r2, r3
 80183ee:	683b      	ldr	r3, [r7, #0]
 80183f0:	77da      	strb	r2, [r3, #31]
            macconf->ReceiveOwn = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DO ) >> 10 ) == 0U ) ? ENABLE : DISABLE;
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	681b      	ldr	r3, [r3, #0]
 80183f6:	681b      	ldr	r3, [r3, #0]
 80183f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	bf0c      	ite	eq
 8018400:	2301      	moveq	r3, #1
 8018402:	2300      	movne	r3, #0
 8018404:	b2db      	uxtb	r3, r3
 8018406:	461a      	mov	r2, r3
 8018408:	683b      	ldr	r3, [r7, #0]
 801840a:	779a      	strb	r2, [r3, #30]
            macconf->CarrierSenseBeforeTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ECRSFD ) >> 11 ) > 0U ) ? ENABLE : DISABLE;
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	681b      	ldr	r3, [r3, #0]
 8018410:	681b      	ldr	r3, [r3, #0]
 8018412:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8018416:	2b00      	cmp	r3, #0
 8018418:	bf14      	ite	ne
 801841a:	2301      	movne	r3, #1
 801841c:	2300      	moveq	r3, #0
 801841e:	b2db      	uxtb	r3, r3
 8018420:	461a      	mov	r2, r3
 8018422:	683b      	ldr	r3, [r7, #0]
 8018424:	775a      	strb	r2, [r3, #29]
            macconf->LoopbackMode = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_LM ) >> 12 ) > 0U ) ? ENABLE : DISABLE;
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8018430:	2b00      	cmp	r3, #0
 8018432:	bf14      	ite	ne
 8018434:	2301      	movne	r3, #1
 8018436:	2300      	moveq	r3, #0
 8018438:	b2db      	uxtb	r3, r3
 801843a:	461a      	mov	r2, r3
 801843c:	683b      	ldr	r3, [r7, #0]
 801843e:	771a      	strb	r2, [r3, #28]
            macconf->DuplexMode = READ_BIT( heth->Instance->MACCR, ETH_MACCR_DM );
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	681b      	ldr	r3, [r3, #0]
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 801844a:	683b      	ldr	r3, [r7, #0]
 801844c:	619a      	str	r2, [r3, #24]
            macconf->Speed = READ_BIT( heth->Instance->MACCR, ETH_MACCR_FES );
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	681b      	ldr	r3, [r3, #0]
 8018452:	681b      	ldr	r3, [r3, #0]
 8018454:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8018458:	683b      	ldr	r3, [r7, #0]
 801845a:	615a      	str	r2, [r3, #20]
            macconf->JumboPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JE ) >> 16 ) > 0U ) ? ENABLE : DISABLE;
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	681b      	ldr	r3, [r3, #0]
 8018460:	681b      	ldr	r3, [r3, #0]
 8018462:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8018466:	2b00      	cmp	r3, #0
 8018468:	bf14      	ite	ne
 801846a:	2301      	movne	r3, #1
 801846c:	2300      	moveq	r3, #0
 801846e:	b2db      	uxtb	r3, r3
 8018470:	461a      	mov	r2, r3
 8018472:	683b      	ldr	r3, [r7, #0]
 8018474:	749a      	strb	r2, [r3, #18]
            macconf->Jabber = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JD ) >> 17 ) == 0U ) ? ENABLE : DISABLE;
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	681b      	ldr	r3, [r3, #0]
 801847a:	681b      	ldr	r3, [r3, #0]
 801847c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8018480:	2b00      	cmp	r3, #0
 8018482:	bf0c      	ite	eq
 8018484:	2301      	moveq	r3, #1
 8018486:	2300      	movne	r3, #0
 8018488:	b2db      	uxtb	r3, r3
 801848a:	461a      	mov	r2, r3
 801848c:	683b      	ldr	r3, [r7, #0]
 801848e:	745a      	strb	r2, [r3, #17]
            macconf->Watchdog = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_WD ) >> 19 ) == 0U ) ? ENABLE : DISABLE;
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	681b      	ldr	r3, [r3, #0]
 8018494:	681b      	ldr	r3, [r3, #0]
 8018496:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801849a:	2b00      	cmp	r3, #0
 801849c:	bf0c      	ite	eq
 801849e:	2301      	moveq	r3, #1
 80184a0:	2300      	movne	r3, #0
 80184a2:	b2db      	uxtb	r3, r3
 80184a4:	461a      	mov	r2, r3
 80184a6:	683b      	ldr	r3, [r7, #0]
 80184a8:	741a      	strb	r2, [r3, #16]
            macconf->AutomaticPadCRCStrip = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ACS ) >> 20 ) > 0U ) ? ENABLE : DISABLE;
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	681b      	ldr	r3, [r3, #0]
 80184b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	bf14      	ite	ne
 80184b8:	2301      	movne	r3, #1
 80184ba:	2300      	moveq	r3, #0
 80184bc:	b2db      	uxtb	r3, r3
 80184be:	461a      	mov	r2, r3
 80184c0:	683b      	ldr	r3, [r7, #0]
 80184c2:	73da      	strb	r2, [r3, #15]
            macconf->CRCStripTypePacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_CST ) >> 21 ) > 0U ) ? ENABLE : DISABLE;
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	681b      	ldr	r3, [r3, #0]
 80184ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	bf14      	ite	ne
 80184d2:	2301      	movne	r3, #1
 80184d4:	2300      	moveq	r3, #0
 80184d6:	b2db      	uxtb	r3, r3
 80184d8:	461a      	mov	r2, r3
 80184da:	683b      	ldr	r3, [r7, #0]
 80184dc:	739a      	strb	r2, [r3, #14]
            macconf->Support2KPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_S2KP ) >> 22 ) > 0U ) ? ENABLE : DISABLE;
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	681b      	ldr	r3, [r3, #0]
 80184e2:	681b      	ldr	r3, [r3, #0]
 80184e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	bf14      	ite	ne
 80184ec:	2301      	movne	r3, #1
 80184ee:	2300      	moveq	r3, #0
 80184f0:	b2db      	uxtb	r3, r3
 80184f2:	461a      	mov	r2, r3
 80184f4:	683b      	ldr	r3, [r7, #0]
 80184f6:	735a      	strb	r2, [r3, #13]
            macconf->GiantPacketSizeLimitControl = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_GPSLCE ) >> 23 ) > 0U ) ? ENABLE : DISABLE;
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	681b      	ldr	r3, [r3, #0]
 80184fc:	681b      	ldr	r3, [r3, #0]
 80184fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8018502:	2b00      	cmp	r3, #0
 8018504:	bf14      	ite	ne
 8018506:	2301      	movne	r3, #1
 8018508:	2300      	moveq	r3, #0
 801850a:	b2db      	uxtb	r3, r3
 801850c:	461a      	mov	r2, r3
 801850e:	683b      	ldr	r3, [r7, #0]
 8018510:	731a      	strb	r2, [r3, #12]
            macconf->InterPacketGapVal = READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPG );
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	681b      	ldr	r3, [r3, #0]
 8018516:	681b      	ldr	r3, [r3, #0]
 8018518:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 801851c:	683b      	ldr	r3, [r7, #0]
 801851e:	609a      	str	r2, [r3, #8]
            macconf->ChecksumOffload = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPC ) >> 27 ) > 0U ) ? ENABLE : DISABLE;
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	681b      	ldr	r3, [r3, #0]
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801852a:	2b00      	cmp	r3, #0
 801852c:	bf14      	ite	ne
 801852e:	2301      	movne	r3, #1
 8018530:	2300      	moveq	r3, #0
 8018532:	b2db      	uxtb	r3, r3
 8018534:	461a      	mov	r2, r3
 8018536:	683b      	ldr	r3, [r7, #0]
 8018538:	711a      	strb	r2, [r3, #4]
            macconf->SourceAddrControl = READ_BIT( heth->Instance->MACCR, ETH_MACCR_SARC );
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8018544:	683b      	ldr	r3, [r7, #0]
 8018546:	601a      	str	r2, [r3, #0]

            macconf->GiantPacketSizeLimit = READ_BIT( heth->Instance->MACECR, ETH_MACECR_GPSL );
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	685b      	ldr	r3, [r3, #4]
 801854e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8018552:	683b      	ldr	r3, [r7, #0]
 8018554:	635a      	str	r2, [r3, #52]	@ 0x34
            macconf->CRCCheckingRxPackets = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_DCRCC ) >> 16 ) == 0U ) ? ENABLE : DISABLE;
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	681b      	ldr	r3, [r3, #0]
 801855a:	685b      	ldr	r3, [r3, #4]
 801855c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8018560:	2b00      	cmp	r3, #0
 8018562:	bf0c      	ite	eq
 8018564:	2301      	moveq	r3, #1
 8018566:	2300      	movne	r3, #0
 8018568:	b2db      	uxtb	r3, r3
 801856a:	461a      	mov	r2, r3
 801856c:	683b      	ldr	r3, [r7, #0]
 801856e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
            macconf->SlowProtocolDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_SPEN ) >> 17 ) > 0U ) ? ENABLE : DISABLE;
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	685b      	ldr	r3, [r3, #4]
 8018578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801857c:	2b00      	cmp	r3, #0
 801857e:	bf14      	ite	ne
 8018580:	2301      	movne	r3, #1
 8018582:	2300      	moveq	r3, #0
 8018584:	b2db      	uxtb	r3, r3
 8018586:	461a      	mov	r2, r3
 8018588:	683b      	ldr	r3, [r7, #0]
 801858a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
            macconf->UnicastSlowProtocolPacketDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_USP ) >> 18 ) > 0U ) ? ENABLE : DISABLE;
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	681b      	ldr	r3, [r3, #0]
 8018592:	685b      	ldr	r3, [r3, #4]
 8018594:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8018598:	2b00      	cmp	r3, #0
 801859a:	bf14      	ite	ne
 801859c:	2301      	movne	r3, #1
 801859e:	2300      	moveq	r3, #0
 80185a0:	b2db      	uxtb	r3, r3
 80185a2:	461a      	mov	r2, r3
 80185a4:	683b      	ldr	r3, [r7, #0]
 80185a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
            macconf->ExtendedInterPacketGap = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPGEN ) >> 24 ) > 0U ) ? ENABLE : DISABLE;
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	681b      	ldr	r3, [r3, #0]
 80185ae:	685b      	ldr	r3, [r3, #4]
 80185b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	bf14      	ite	ne
 80185b8:	2301      	movne	r3, #1
 80185ba:	2300      	moveq	r3, #0
 80185bc:	b2db      	uxtb	r3, r3
 80185be:	461a      	mov	r2, r3
 80185c0:	683b      	ldr	r3, [r7, #0]
 80185c2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            macconf->ExtendedInterPacketGapVal = READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPG ) >> 25;
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	681b      	ldr	r3, [r3, #0]
 80185ca:	685b      	ldr	r3, [r3, #4]
 80185cc:	0e5b      	lsrs	r3, r3, #25
 80185ce:	f003 021f 	and.w	r2, r3, #31
 80185d2:	683b      	ldr	r3, [r7, #0]
 80185d4:	63da      	str	r2, [r3, #60]	@ 0x3c


            macconf->ProgrammableWatchdog = ( ( READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_PWE ) >> 8 ) > 0U ) ? ENABLE : DISABLE;
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	681b      	ldr	r3, [r3, #0]
 80185da:	68db      	ldr	r3, [r3, #12]
 80185dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	bf14      	ite	ne
 80185e4:	2301      	movne	r3, #1
 80185e6:	2300      	moveq	r3, #0
 80185e8:	b2db      	uxtb	r3, r3
 80185ea:	461a      	mov	r2, r3
 80185ec:	683b      	ldr	r3, [r7, #0]
 80185ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            macconf->WatchdogTimeout = READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_WTO );
 80185f2:	687b      	ldr	r3, [r7, #4]
 80185f4:	681b      	ldr	r3, [r3, #0]
 80185f6:	68db      	ldr	r3, [r3, #12]
 80185f8:	f003 020f 	and.w	r2, r3, #15
 80185fc:	683b      	ldr	r3, [r7, #0]
 80185fe:	645a      	str	r2, [r3, #68]	@ 0x44

            macconf->TransmitFlowControl = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_TFE ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	681b      	ldr	r3, [r3, #0]
 8018604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018606:	f003 0302 	and.w	r3, r3, #2
 801860a:	2b00      	cmp	r3, #0
 801860c:	bf14      	ite	ne
 801860e:	2301      	movne	r3, #1
 8018610:	2300      	moveq	r3, #0
 8018612:	b2db      	uxtb	r3, r3
 8018614:	461a      	mov	r2, r3
 8018616:	683b      	ldr	r3, [r7, #0]
 8018618:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
            macconf->ZeroQuantaPause = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ ) >> 7 ) == 0U ) ? ENABLE : DISABLE;
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	681b      	ldr	r3, [r3, #0]
 8018620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018626:	2b00      	cmp	r3, #0
 8018628:	bf0c      	ite	eq
 801862a:	2301      	moveq	r3, #1
 801862c:	2300      	movne	r3, #0
 801862e:	b2db      	uxtb	r3, r3
 8018630:	461a      	mov	r2, r3
 8018632:	683b      	ldr	r3, [r7, #0]
 8018634:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            macconf->PauseLowThreshold = READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PLT );
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	681b      	ldr	r3, [r3, #0]
 801863c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801863e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8018642:	683b      	ldr	r3, [r7, #0]
 8018644:	651a      	str	r2, [r3, #80]	@ 0x50
            macconf->PauseTime = ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PT ) >> 16 );
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	681b      	ldr	r3, [r3, #0]
 801864a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801864c:	0c1b      	lsrs	r3, r3, #16
 801864e:	b29a      	uxth	r2, r3
 8018650:	683b      	ldr	r3, [r7, #0]
 8018652:	649a      	str	r2, [r3, #72]	@ 0x48


            macconf->ReceiveFlowControl = ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_RFE ) > 0U ) ? ENABLE : DISABLE;
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	681b      	ldr	r3, [r3, #0]
 8018658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801865c:	f003 0301 	and.w	r3, r3, #1
 8018660:	2b00      	cmp	r3, #0
 8018662:	bf14      	ite	ne
 8018664:	2301      	movne	r3, #1
 8018666:	2300      	moveq	r3, #0
 8018668:	b2db      	uxtb	r3, r3
 801866a:	461a      	mov	r2, r3
 801866c:	683b      	ldr	r3, [r7, #0]
 801866e:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
            macconf->UnicastPausePacketDetect = ( ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_UP ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	681b      	ldr	r3, [r3, #0]
 8018676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801867a:	f003 0302 	and.w	r3, r3, #2
 801867e:	2b00      	cmp	r3, #0
 8018680:	bf14      	ite	ne
 8018682:	2301      	movne	r3, #1
 8018684:	2300      	moveq	r3, #0
 8018686:	b2db      	uxtb	r3, r3
 8018688:	461a      	mov	r2, r3
 801868a:	683b      	ldr	r3, [r7, #0]
 801868c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

            macconf->TransmitQueueMode = READ_BIT( heth->Instance->MTLTQOMR, ( ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF ) );
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	681b      	ldr	r3, [r3, #0]
 8018694:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8018698:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 801869c:	683b      	ldr	r3, [r7, #0]
 801869e:	659a      	str	r2, [r3, #88]	@ 0x58

            macconf->ReceiveQueueMode = READ_BIT( heth->Instance->MTLRQOMR, ( ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF ) );
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	681b      	ldr	r3, [r3, #0]
 80186a4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80186a8:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 80186ac:	683b      	ldr	r3, [r7, #0]
 80186ae:	65da      	str	r2, [r3, #92]	@ 0x5c
            macconf->ForwardRxUndersizedGoodPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP ) >> 3 ) > 0U ) ? ENABLE : DISABLE;
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80186b8:	f003 0308 	and.w	r3, r3, #8
 80186bc:	2b00      	cmp	r3, #0
 80186be:	bf14      	ite	ne
 80186c0:	2301      	movne	r3, #1
 80186c2:	2300      	moveq	r3, #0
 80186c4:	b2db      	uxtb	r3, r3
 80186c6:	461a      	mov	r2, r3
 80186c8:	683b      	ldr	r3, [r7, #0]
 80186ca:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
            macconf->ForwardRxErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	681b      	ldr	r3, [r3, #0]
 80186d2:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80186d6:	f003 0310 	and.w	r3, r3, #16
 80186da:	2b00      	cmp	r3, #0
 80186dc:	bf14      	ite	ne
 80186de:	2301      	movne	r3, #1
 80186e0:	2300      	moveq	r3, #0
 80186e2:	b2db      	uxtb	r3, r3
 80186e4:	461a      	mov	r2, r3
 80186e6:	683b      	ldr	r3, [r7, #0]
 80186e8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
            macconf->DropTCPIPChecksumErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF ) >> 6 ) == 0U ) ? ENABLE : DISABLE;
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80186f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	bf0c      	ite	eq
 80186fc:	2301      	moveq	r3, #1
 80186fe:	2300      	movne	r3, #0
 8018700:	b2db      	uxtb	r3, r3
 8018702:	461a      	mov	r2, r3
 8018704:	683b      	ldr	r3, [r7, #0]
 8018706:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

            return HAL_OK;
 801870a:	2300      	movs	r3, #0
        }
 801870c:	4618      	mov	r0, r3
 801870e:	370c      	adds	r7, #12
 8018710:	46bd      	mov	sp, r7
 8018712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018716:	4770      	bx	lr

08018718 <HAL_ETH_SetMACConfig>:
 *         the configuration of the MAC.
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                                ETH_MACConfigTypeDef * macconf )
        {
 8018718:	b580      	push	{r7, lr}
 801871a:	b082      	sub	sp, #8
 801871c:	af00      	add	r7, sp, #0
 801871e:	6078      	str	r0, [r7, #4]
 8018720:	6039      	str	r1, [r7, #0]
            if( macconf == NULL )
 8018722:	683b      	ldr	r3, [r7, #0]
 8018724:	2b00      	cmp	r3, #0
 8018726:	d101      	bne.n	801872c <HAL_ETH_SetMACConfig+0x14>
            {
                return HAL_ERROR;
 8018728:	2301      	movs	r3, #1
 801872a:	e00a      	b.n	8018742 <HAL_ETH_SetMACConfig+0x2a>
            }

            if( heth->RxState == HAL_ETH_STATE_READY )
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018730:	2b10      	cmp	r3, #16
 8018732:	d105      	bne.n	8018740 <HAL_ETH_SetMACConfig+0x28>
            {
                ETH_SetMACConfig( heth, macconf );
 8018734:	6839      	ldr	r1, [r7, #0]
 8018736:	6878      	ldr	r0, [r7, #4]
 8018738:	f000 f808 	bl	801874c <ETH_SetMACConfig>

                return HAL_OK;
 801873c:	2300      	movs	r3, #0
 801873e:	e000      	b.n	8018742 <HAL_ETH_SetMACConfig+0x2a>
            }
            else
            {
                return HAL_ERROR;
 8018740:	2301      	movs	r3, #1
            }
        }
 8018742:	4618      	mov	r0, r3
 8018744:	3708      	adds	r7, #8
 8018746:	46bd      	mov	sp, r7
 8018748:	bd80      	pop	{r7, pc}
	...

0801874c <ETH_SetMACConfig>:
 * @{
 */

        static void ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                      ETH_MACConfigTypeDef * macconf )
        {
 801874c:	b480      	push	{r7}
 801874e:	b085      	sub	sp, #20
 8018750:	af00      	add	r7, sp, #0
 8018752:	6078      	str	r0, [r7, #4]
 8018754:	6039      	str	r1, [r7, #0]
            uint32_t macregval;

            /*------------------------ MACCR Configuration --------------------*/
            macregval = ( macconf->InterPacketGapVal |
 8018756:	683b      	ldr	r3, [r7, #0]
 8018758:	689a      	ldr	r2, [r3, #8]
                          macconf->SourceAddrControl |
 801875a:	683b      	ldr	r3, [r7, #0]
 801875c:	681b      	ldr	r3, [r3, #0]
            macregval = ( macconf->InterPacketGapVal |
 801875e:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 8018760:	683b      	ldr	r3, [r7, #0]
 8018762:	791b      	ldrb	r3, [r3, #4]
 8018764:	06db      	lsls	r3, r3, #27
                          macconf->SourceAddrControl |
 8018766:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 8018768:	683b      	ldr	r3, [r7, #0]
 801876a:	7b1b      	ldrb	r3, [r3, #12]
 801876c:	05db      	lsls	r3, r3, #23
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 801876e:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 8018770:	683b      	ldr	r3, [r7, #0]
 8018772:	7b5b      	ldrb	r3, [r3, #13]
 8018774:	059b      	lsls	r3, r3, #22
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 8018776:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 8018778:	683b      	ldr	r3, [r7, #0]
 801877a:	7b9b      	ldrb	r3, [r3, #14]
 801877c:	055b      	lsls	r3, r3, #21
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 801877e:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 8018780:	683b      	ldr	r3, [r7, #0]
 8018782:	7bdb      	ldrb	r3, [r3, #15]
 8018784:	051b      	lsls	r3, r3, #20
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 8018786:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 8018788:	683a      	ldr	r2, [r7, #0]
 801878a:	7c12      	ldrb	r2, [r2, #16]
 801878c:	2a00      	cmp	r2, #0
 801878e:	d102      	bne.n	8018796 <ETH_SetMACConfig+0x4a>
 8018790:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8018794:	e000      	b.n	8018798 <ETH_SetMACConfig+0x4c>
 8018796:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 8018798:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 801879a:	683a      	ldr	r2, [r7, #0]
 801879c:	7c52      	ldrb	r2, [r2, #17]
 801879e:	2a00      	cmp	r2, #0
 80187a0:	d102      	bne.n	80187a8 <ETH_SetMACConfig+0x5c>
 80187a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80187a6:	e000      	b.n	80187aa <ETH_SetMACConfig+0x5e>
 80187a8:	2200      	movs	r2, #0
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 80187aa:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 80187ac:	683b      	ldr	r3, [r7, #0]
 80187ae:	7c9b      	ldrb	r3, [r3, #18]
 80187b0:	041b      	lsls	r3, r3, #16
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 80187b2:	431a      	orrs	r2, r3
                          macconf->Speed |
 80187b4:	683b      	ldr	r3, [r7, #0]
 80187b6:	695b      	ldr	r3, [r3, #20]
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 80187b8:	431a      	orrs	r2, r3
                          macconf->DuplexMode |
 80187ba:	683b      	ldr	r3, [r7, #0]
 80187bc:	699b      	ldr	r3, [r3, #24]
                          macconf->Speed |
 80187be:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 80187c0:	683b      	ldr	r3, [r7, #0]
 80187c2:	7f1b      	ldrb	r3, [r3, #28]
 80187c4:	031b      	lsls	r3, r3, #12
                          macconf->DuplexMode |
 80187c6:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 80187c8:	683b      	ldr	r3, [r7, #0]
 80187ca:	7f5b      	ldrb	r3, [r3, #29]
 80187cc:	02db      	lsls	r3, r3, #11
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 80187ce:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 80187d0:	683a      	ldr	r2, [r7, #0]
 80187d2:	7f92      	ldrb	r2, [r2, #30]
 80187d4:	2a00      	cmp	r2, #0
 80187d6:	d102      	bne.n	80187de <ETH_SetMACConfig+0x92>
 80187d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80187dc:	e000      	b.n	80187e0 <ETH_SetMACConfig+0x94>
 80187de:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 80187e0:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 80187e2:	683b      	ldr	r3, [r7, #0]
 80187e4:	7fdb      	ldrb	r3, [r3, #31]
 80187e6:	025b      	lsls	r3, r3, #9
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 80187e8:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 80187ea:	683a      	ldr	r2, [r7, #0]
 80187ec:	f892 2020 	ldrb.w	r2, [r2, #32]
 80187f0:	2a00      	cmp	r2, #0
 80187f2:	d102      	bne.n	80187fa <ETH_SetMACConfig+0xae>
 80187f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80187f8:	e000      	b.n	80187fc <ETH_SetMACConfig+0xb0>
 80187fa:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 80187fc:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 80187fe:	683b      	ldr	r3, [r7, #0]
 8018800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 8018802:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->DeferralCheck << 4 ) |
 8018804:	683b      	ldr	r3, [r7, #0]
 8018806:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801880a:	011b      	lsls	r3, r3, #4
                          macconf->BackOffLimit |
 801880c:	431a      	orrs	r2, r3
                          macconf->PreambleLength );
 801880e:	683b      	ldr	r3, [r7, #0]
 8018810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            macregval = ( macconf->InterPacketGapVal |
 8018812:	4313      	orrs	r3, r2
 8018814:	60fb      	str	r3, [r7, #12]

            /* Write to MACCR */
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	681b      	ldr	r3, [r3, #0]
 801881a:	681a      	ldr	r2, [r3, #0]
 801881c:	4b56      	ldr	r3, [pc, #344]	@ (8018978 <ETH_SetMACConfig+0x22c>)
 801881e:	4013      	ands	r3, r2
 8018820:	687a      	ldr	r2, [r7, #4]
 8018822:	6812      	ldr	r2, [r2, #0]
 8018824:	68f9      	ldr	r1, [r7, #12]
 8018826:	430b      	orrs	r3, r1
 8018828:	6013      	str	r3, [r2, #0]

            /*------------------------ MACECR Configuration --------------------*/
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 801882a:	683b      	ldr	r3, [r7, #0]
 801882c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801882e:	065a      	lsls	r2, r3, #25
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 8018830:	683b      	ldr	r3, [r7, #0]
 8018832:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8018836:	061b      	lsls	r3, r3, #24
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 8018838:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 801883a:	683b      	ldr	r3, [r7, #0]
 801883c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018840:	049b      	lsls	r3, r3, #18
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 8018842:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 8018844:	683b      	ldr	r3, [r7, #0]
 8018846:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801884a:	045b      	lsls	r3, r3, #17
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 801884c:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->CRCCheckingRxPackets == DISABLE ) ? 1U : 0U ) << 16 ) |
 801884e:	683a      	ldr	r2, [r7, #0]
 8018850:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8018854:	2a00      	cmp	r2, #0
 8018856:	d102      	bne.n	801885e <ETH_SetMACConfig+0x112>
 8018858:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801885c:	e000      	b.n	8018860 <ETH_SetMACConfig+0x114>
 801885e:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 8018860:	431a      	orrs	r2, r3
                          macconf->GiantPacketSizeLimit );
 8018862:	683b      	ldr	r3, [r7, #0]
 8018864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 8018866:	4313      	orrs	r3, r2
 8018868:	60fb      	str	r3, [r7, #12]

            /* Write to MACECR */
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	681b      	ldr	r3, [r3, #0]
 801886e:	685a      	ldr	r2, [r3, #4]
 8018870:	4b42      	ldr	r3, [pc, #264]	@ (801897c <ETH_SetMACConfig+0x230>)
 8018872:	4013      	ands	r3, r2
 8018874:	687a      	ldr	r2, [r7, #4]
 8018876:	6812      	ldr	r2, [r2, #0]
 8018878:	68f9      	ldr	r1, [r7, #12]
 801887a:	430b      	orrs	r3, r1
 801887c:	6053      	str	r3, [r2, #4]

            /*------------------------ MACWTR Configuration --------------------*/
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 801887e:	683b      	ldr	r3, [r7, #0]
 8018880:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8018884:	021a      	lsls	r2, r3, #8
                          macconf->WatchdogTimeout );
 8018886:	683b      	ldr	r3, [r7, #0]
 8018888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 801888a:	4313      	orrs	r3, r2
 801888c:	60fb      	str	r3, [r7, #12]

            /* Write to MACWTR */
            MODIFY_REG( heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval );
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	681b      	ldr	r3, [r3, #0]
 8018892:	68da      	ldr	r2, [r3, #12]
 8018894:	4b3a      	ldr	r3, [pc, #232]	@ (8018980 <ETH_SetMACConfig+0x234>)
 8018896:	4013      	ands	r3, r2
 8018898:	687a      	ldr	r2, [r7, #4]
 801889a:	6812      	ldr	r2, [r2, #0]
 801889c:	68f9      	ldr	r1, [r7, #12]
 801889e:	430b      	orrs	r3, r1
 80188a0:	60d3      	str	r3, [r2, #12]

            /*------------------------ MACTFCR Configuration --------------------*/
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 80188a2:	683b      	ldr	r3, [r7, #0]
 80188a4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80188a8:	005a      	lsls	r2, r3, #1
                          macconf->PauseLowThreshold |
 80188aa:	683b      	ldr	r3, [r7, #0]
 80188ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 80188ae:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->ZeroQuantaPause == DISABLE ) ? 1U : 0U ) << 7 ) |
 80188b0:	683a      	ldr	r2, [r7, #0]
 80188b2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80188b6:	2a00      	cmp	r2, #0
 80188b8:	d101      	bne.n	80188be <ETH_SetMACConfig+0x172>
 80188ba:	2280      	movs	r2, #128	@ 0x80
 80188bc:	e000      	b.n	80188c0 <ETH_SetMACConfig+0x174>
 80188be:	2200      	movs	r2, #0
                          macconf->PauseLowThreshold |
 80188c0:	431a      	orrs	r2, r3
                          ( macconf->PauseTime << 16 ) );
 80188c2:	683b      	ldr	r3, [r7, #0]
 80188c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80188c6:	041b      	lsls	r3, r3, #16
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 80188c8:	4313      	orrs	r3, r2
 80188ca:	60fb      	str	r3, [r7, #12]

            /* Write to MACTFCR */
            MODIFY_REG( heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval );
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	681b      	ldr	r3, [r3, #0]
 80188d0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80188d2:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80188d6:	4013      	ands	r3, r2
 80188d8:	687a      	ldr	r2, [r7, #4]
 80188da:	6812      	ldr	r2, [r2, #0]
 80188dc:	68f9      	ldr	r1, [r7, #12]
 80188de:	430b      	orrs	r3, r1
 80188e0:	6713      	str	r3, [r2, #112]	@ 0x70

            /*------------------------ MACRFCR Configuration --------------------*/
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 80188e2:	683b      	ldr	r3, [r7, #0]
 80188e4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80188e8:	461a      	mov	r2, r3
                          ( ( uint32_t ) macconf->UnicastPausePacketDetect << 1 ) );
 80188ea:	683b      	ldr	r3, [r7, #0]
 80188ec:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80188f0:	005b      	lsls	r3, r3, #1
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 80188f2:	4313      	orrs	r3, r2
 80188f4:	60fb      	str	r3, [r7, #12]

            /* Write to MACRFCR */
            MODIFY_REG( heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval );
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	681b      	ldr	r3, [r3, #0]
 80188fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80188fe:	f023 0103 	bic.w	r1, r3, #3
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	681b      	ldr	r3, [r3, #0]
 8018906:	68fa      	ldr	r2, [r7, #12]
 8018908:	430a      	orrs	r2, r1
 801890a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

            /*------------------------ MTLTQOMR Configuration --------------------*/
            /* Write to MTLTQOMR */
            MODIFY_REG( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode );
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	681b      	ldr	r3, [r3, #0]
 8018912:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8018916:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 801891a:	683b      	ldr	r3, [r7, #0]
 801891c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	681b      	ldr	r3, [r3, #0]
 8018922:	430a      	orrs	r2, r1
 8018924:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

            /*------------------------ MTLRQOMR Configuration --------------------*/
            macregval = ( macconf->ReceiveQueueMode |
 8018928:	683b      	ldr	r3, [r7, #0]
 801892a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 801892c:	683a      	ldr	r2, [r7, #0]
 801892e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8018932:	2a00      	cmp	r2, #0
 8018934:	d101      	bne.n	801893a <ETH_SetMACConfig+0x1ee>
 8018936:	2240      	movs	r2, #64	@ 0x40
 8018938:	e000      	b.n	801893c <ETH_SetMACConfig+0x1f0>
 801893a:	2200      	movs	r2, #0
            macregval = ( macconf->ReceiveQueueMode |
 801893c:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ForwardRxErrorPacket << 4 ) |
 801893e:	683b      	ldr	r3, [r7, #0]
 8018940:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8018944:	011b      	lsls	r3, r3, #4
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 8018946:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ForwardRxUndersizedGoodPacket << 3 ) );
 8018948:	683b      	ldr	r3, [r7, #0]
 801894a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 801894e:	00db      	lsls	r3, r3, #3
            macregval = ( macconf->ReceiveQueueMode |
 8018950:	4313      	orrs	r3, r2
 8018952:	60fb      	str	r3, [r7, #12]

            /* Write to MTLRQOMR */
            MODIFY_REG( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval );
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	681b      	ldr	r3, [r3, #0]
 8018958:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 801895c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	681b      	ldr	r3, [r3, #0]
 8018964:	68fa      	ldr	r2, [r7, #12]
 8018966:	430a      	orrs	r2, r1
 8018968:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
        }
 801896c:	bf00      	nop
 801896e:	3714      	adds	r7, #20
 8018970:	46bd      	mov	sp, r7
 8018972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018976:	4770      	bx	lr
 8018978:	00048083 	.word	0x00048083
 801897c:	c0f88000 	.word	0xc0f88000
 8018980:	fffffef0 	.word	0xfffffef0

08018984 <ETH_SetDMAConfig>:

        static void ETH_SetDMAConfig( ETH_HandleTypeDef * heth,
                                      ETH_DMAConfigTypeDef * dmaconf )
        {
 8018984:	b480      	push	{r7}
 8018986:	b085      	sub	sp, #20
 8018988:	af00      	add	r7, sp, #0
 801898a:	6078      	str	r0, [r7, #4]
 801898c:	6039      	str	r1, [r7, #0]
            uint32_t dmaregval;

            /*------------------------ DMAMR Configuration --------------------*/
            MODIFY_REG( heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration );
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	681b      	ldr	r3, [r3, #0]
 8018992:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018996:	681a      	ldr	r2, [r3, #0]
 8018998:	4b38      	ldr	r3, [pc, #224]	@ (8018a7c <ETH_SetDMAConfig+0xf8>)
 801899a:	4013      	ands	r3, r2
 801899c:	683a      	ldr	r2, [r7, #0]
 801899e:	6811      	ldr	r1, [r2, #0]
 80189a0:	687a      	ldr	r2, [r7, #4]
 80189a2:	6812      	ldr	r2, [r2, #0]
 80189a4:	430b      	orrs	r3, r1
 80189a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80189aa:	6013      	str	r3, [r2, #0]

            /*------------------------ DMASBMR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 80189ac:	683b      	ldr	r3, [r7, #0]
 80189ae:	791b      	ldrb	r3, [r3, #4]
 80189b0:	031a      	lsls	r2, r3, #12
                          dmaconf->BurstMode |
 80189b2:	683b      	ldr	r3, [r7, #0]
 80189b4:	689b      	ldr	r3, [r3, #8]
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 80189b6:	431a      	orrs	r2, r3
                          ( ( uint32_t ) dmaconf->RebuildINCRxBurst << 15 ) );
 80189b8:	683b      	ldr	r3, [r7, #0]
 80189ba:	7b1b      	ldrb	r3, [r3, #12]
 80189bc:	03db      	lsls	r3, r3, #15
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 80189be:	4313      	orrs	r3, r2
 80189c0:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval );
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	681b      	ldr	r3, [r3, #0]
 80189c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80189ca:	685a      	ldr	r2, [r3, #4]
 80189cc:	4b2c      	ldr	r3, [pc, #176]	@ (8018a80 <ETH_SetDMAConfig+0xfc>)
 80189ce:	4013      	ands	r3, r2
 80189d0:	687a      	ldr	r2, [r7, #4]
 80189d2:	6812      	ldr	r2, [r2, #0]
 80189d4:	68f9      	ldr	r1, [r7, #12]
 80189d6:	430b      	orrs	r3, r1
 80189d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80189dc:	6053      	str	r3, [r2, #4]

            /*------------------------ DMACCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 80189de:	683b      	ldr	r3, [r7, #0]
 80189e0:	7b5b      	ldrb	r3, [r3, #13]
 80189e2:	041a      	lsls	r2, r3, #16
                          dmaconf->MaximumSegmentSize );
 80189e4:	683b      	ldr	r3, [r7, #0]
 80189e6:	6a1b      	ldr	r3, [r3, #32]
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 80189e8:	4313      	orrs	r3, r2
 80189ea:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval );
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	681b      	ldr	r3, [r3, #0]
 80189f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80189f4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80189f8:	4b22      	ldr	r3, [pc, #136]	@ (8018a84 <ETH_SetDMAConfig+0x100>)
 80189fa:	4013      	ands	r3, r2
 80189fc:	687a      	ldr	r2, [r7, #4]
 80189fe:	6812      	ldr	r2, [r2, #0]
 8018a00:	68f9      	ldr	r1, [r7, #12]
 8018a02:	430b      	orrs	r3, r1
 8018a04:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018a08:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

            /*------------------------ DMACTCR Configuration --------------------*/
            dmaregval = ( dmaconf->TxDMABurstLength |
 8018a0c:	683b      	ldr	r3, [r7, #0]
 8018a0e:	691a      	ldr	r2, [r3, #16]
                          ( ( uint32_t ) dmaconf->SecondPacketOperate << 4 ) |
 8018a10:	683b      	ldr	r3, [r7, #0]
 8018a12:	7d1b      	ldrb	r3, [r3, #20]
 8018a14:	011b      	lsls	r3, r3, #4
            dmaregval = ( dmaconf->TxDMABurstLength |
 8018a16:	431a      	orrs	r2, r3
                          ( ( uint32_t ) dmaconf->TCPSegmentation << 12 ) );
 8018a18:	683b      	ldr	r3, [r7, #0]
 8018a1a:	7f5b      	ldrb	r3, [r3, #29]
 8018a1c:	031b      	lsls	r3, r3, #12
            dmaregval = ( dmaconf->TxDMABurstLength |
 8018a1e:	4313      	orrs	r3, r2
 8018a20:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval );
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018a2a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8018a2e:	4b16      	ldr	r3, [pc, #88]	@ (8018a88 <ETH_SetDMAConfig+0x104>)
 8018a30:	4013      	ands	r3, r2
 8018a32:	687a      	ldr	r2, [r7, #4]
 8018a34:	6812      	ldr	r2, [r2, #0]
 8018a36:	68f9      	ldr	r1, [r7, #12]
 8018a38:	430b      	orrs	r3, r1
 8018a3a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018a3e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

            /*------------------------ DMACRCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 8018a42:	683b      	ldr	r3, [r7, #0]
 8018a44:	7f1b      	ldrb	r3, [r3, #28]
 8018a46:	07da      	lsls	r2, r3, #31
                          dmaconf->RxDMABurstLength );
 8018a48:	683b      	ldr	r3, [r7, #0]
 8018a4a:	699b      	ldr	r3, [r3, #24]
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 8018a4c:	4313      	orrs	r3, r2
 8018a4e:	60fb      	str	r3, [r7, #12]

            /* Write to DMACRCR */
            MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval );
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	681b      	ldr	r3, [r3, #0]
 8018a54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018a58:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8018a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8018a8c <ETH_SetDMAConfig+0x108>)
 8018a5e:	4013      	ands	r3, r2
 8018a60:	687a      	ldr	r2, [r7, #4]
 8018a62:	6812      	ldr	r2, [r2, #0]
 8018a64:	68f9      	ldr	r1, [r7, #12]
 8018a66:	430b      	orrs	r3, r1
 8018a68:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018a6c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
        }
 8018a70:	bf00      	nop
 8018a72:	3714      	adds	r7, #20
 8018a74:	46bd      	mov	sp, r7
 8018a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a7a:	4770      	bx	lr
 8018a7c:	ffff87fd 	.word	0xffff87fd
 8018a80:	ffff2ffe 	.word	0xffff2ffe
 8018a84:	fffec000 	.word	0xfffec000
 8018a88:	ffc0efef 	.word	0xffc0efef
 8018a8c:	7fc0ffff 	.word	0x7fc0ffff

08018a90 <ETH_MACDMAConfig>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        static void ETH_MACDMAConfig( ETH_HandleTypeDef * heth )
        {
 8018a90:	b580      	push	{r7, lr}
 8018a92:	b0a4      	sub	sp, #144	@ 0x90
 8018a94:	af00      	add	r7, sp, #0
 8018a96:	6078      	str	r0, [r7, #4]
            ETH_MACConfigTypeDef macDefaultConf;
            ETH_DMAConfigTypeDef dmaDefaultConf;

            /*--------------- ETHERNET MAC registers default Configuration --------------*/
            macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8018a98:	2301      	movs	r3, #1
 8018a9a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8018a9e:	2300      	movs	r3, #0
 8018aa0:	653b      	str	r3, [r7, #80]	@ 0x50
            macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8018aa2:	2300      	movs	r3, #0
 8018aa4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
            macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8018aa8:	2300      	movs	r3, #0
 8018aaa:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            macDefaultConf.ChecksumOffload = ENABLE;
 8018aae:	2301      	movs	r3, #1
 8018ab0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
            macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8018ab4:	2301      	movs	r3, #1
 8018ab6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            macDefaultConf.CRCStripTypePacket = ENABLE;
 8018aba:	2301      	movs	r3, #1
 8018abc:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
            macDefaultConf.DeferralCheck = DISABLE;
 8018ac0:	2300      	movs	r3, #0
 8018ac2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
            macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8018ac6:	2301      	movs	r3, #1
 8018ac8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
            macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8018acc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8018ad0:	647b      	str	r3, [r7, #68]	@ 0x44
            macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8018ad2:	2300      	movs	r3, #0
 8018ad4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
            macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8018ad8:	2300      	movs	r3, #0
 8018ada:	66bb      	str	r3, [r7, #104]	@ 0x68
            macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8018adc:	2300      	movs	r3, #0
 8018ade:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
            macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8018ae2:	2300      	movs	r3, #0
 8018ae4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
            macDefaultConf.GiantPacketSizeLimit = 0x618;
 8018ae8:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8018aec:	663b      	str	r3, [r7, #96]	@ 0x60
            macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8018aee:	2300      	movs	r3, #0
 8018af0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8018af4:	2300      	movs	r3, #0
 8018af6:	637b      	str	r3, [r7, #52]	@ 0x34
            macDefaultConf.Jabber = ENABLE;
 8018af8:	2301      	movs	r3, #1
 8018afa:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            macDefaultConf.JumboPacket = DISABLE;
 8018afe:	2300      	movs	r3, #0
 8018b00:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            macDefaultConf.LoopbackMode = DISABLE;
 8018b04:	2300      	movs	r3, #0
 8018b06:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
            macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8018b0a:	2300      	movs	r3, #0
 8018b0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
            macDefaultConf.PauseTime = 0x0;
 8018b0e:	2300      	movs	r3, #0
 8018b10:	677b      	str	r3, [r7, #116]	@ 0x74
            macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8018b12:	2300      	movs	r3, #0
 8018b14:	65bb      	str	r3, [r7, #88]	@ 0x58
            macDefaultConf.ProgrammableWatchdog = DISABLE;
 8018b16:	2300      	movs	r3, #0
 8018b18:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
            macDefaultConf.ReceiveFlowControl = DISABLE;
 8018b1c:	2300      	movs	r3, #0
 8018b1e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
            macDefaultConf.ReceiveOwn = ENABLE;
 8018b22:	2301      	movs	r3, #1
 8018b24:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
            macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8018b28:	2320      	movs	r3, #32
 8018b2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            macDefaultConf.RetryTransmission = ENABLE;
 8018b2e:	2301      	movs	r3, #1
 8018b30:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
            macDefaultConf.SlowProtocolDetect = DISABLE;
 8018b34:	2300      	movs	r3, #0
 8018b36:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
            macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8018b3a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8018b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            macDefaultConf.Speed = ETH_SPEED_100M;
 8018b40:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8018b44:	643b      	str	r3, [r7, #64]	@ 0x40
            macDefaultConf.Support2KPacket = DISABLE;
 8018b46:	2300      	movs	r3, #0
 8018b48:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
            macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8018b4c:	2302      	movs	r3, #2
 8018b4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            macDefaultConf.TransmitFlowControl = DISABLE;
 8018b52:	2300      	movs	r3, #0
 8018b54:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
            macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8018b58:	2300      	movs	r3, #0
 8018b5a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
            macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8018b5e:	2300      	movs	r3, #0
 8018b60:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
            macDefaultConf.Watchdog = ENABLE;
 8018b64:	2301      	movs	r3, #1
 8018b66:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            macDefaultConf.WatchdogTimeout = ETH_MACWTR_WTO_2KB;
 8018b6a:	2300      	movs	r3, #0
 8018b6c:	673b      	str	r3, [r7, #112]	@ 0x70
            macDefaultConf.ZeroQuantaPause = ENABLE;
 8018b6e:	2301      	movs	r3, #1
 8018b70:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

            /* MAC default configuration */
            ETH_SetMACConfig( heth, &macDefaultConf );
 8018b74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018b78:	4619      	mov	r1, r3
 8018b7a:	6878      	ldr	r0, [r7, #4]
 8018b7c:	f7ff fde6 	bl	801874c <ETH_SetMACConfig>

            /*--------------- ETHERNET DMA registers default Configuration --------------*/
            dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8018b80:	2301      	movs	r3, #1
 8018b82:	733b      	strb	r3, [r7, #12]
            dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8018b84:	2301      	movs	r3, #1
 8018b86:	613b      	str	r3, [r7, #16]
            dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8018b88:	2300      	movs	r3, #0
 8018b8a:	60bb      	str	r3, [r7, #8]
            dmaDefaultConf.FlushRxPacket = DISABLE;
 8018b8c:	2300      	movs	r3, #0
 8018b8e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            dmaDefaultConf.PBLx8Mode = DISABLE;
 8018b92:	2300      	movs	r3, #0
 8018b94:	757b      	strb	r3, [r7, #21]
            dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8018b96:	2300      	movs	r3, #0
 8018b98:	753b      	strb	r3, [r7, #20]
            dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8018b9a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8018b9e:	623b      	str	r3, [r7, #32]
            dmaDefaultConf.SecondPacketOperate = DISABLE;
 8018ba0:	2300      	movs	r3, #0
 8018ba2:	773b      	strb	r3, [r7, #28]
            dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8018ba4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8018ba8:	61bb      	str	r3, [r7, #24]
            dmaDefaultConf.TCPSegmentation = DISABLE;
 8018baa:	2300      	movs	r3, #0
 8018bac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            dmaDefaultConf.MaximumSegmentSize = 536;
 8018bb0:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8018bb4:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* DMA default configuration */
            ETH_SetDMAConfig( heth, &dmaDefaultConf );
 8018bb6:	f107 0308 	add.w	r3, r7, #8
 8018bba:	4619      	mov	r1, r3
 8018bbc:	6878      	ldr	r0, [r7, #4]
 8018bbe:	f7ff fee1 	bl	8018984 <ETH_SetDMAConfig>
        }
 8018bc2:	bf00      	nop
 8018bc4:	3790      	adds	r7, #144	@ 0x90
 8018bc6:	46bd      	mov	sp, r7
 8018bc8:	bd80      	pop	{r7, pc}
	...

08018bcc <ETH_MAC_MDIO_ClkConfig>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MAC_MDIO_ClkConfig( ETH_HandleTypeDef * heth )
        {
 8018bcc:	b580      	push	{r7, lr}
 8018bce:	b084      	sub	sp, #16
 8018bd0:	af00      	add	r7, sp, #0
 8018bd2:	6078      	str	r0, [r7, #4]
            uint32_t tmpreg, hclk;

            /* Get the ETHERNET MACMDIOAR value */
            tmpreg = ( heth->Instance )->MACMDIOAR;
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	681b      	ldr	r3, [r3, #0]
 8018bd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018bdc:	60fb      	str	r3, [r7, #12]

            /* Clear CSR Clock Range bits */
            tmpreg &= ~ETH_MACMDIOAR_CR;
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8018be4:	60fb      	str	r3, [r7, #12]

            /* Get hclk frequency value */
            hclk = HAL_RCC_GetHCLKFreq();
 8018be6:	f003 fc7f 	bl	801c4e8 <HAL_RCC_GetHCLKFreq>
 8018bea:	60b8      	str	r0, [r7, #8]

            /* Set CR bits depending on hclk value */
            if( ( hclk >= 20000000U ) && ( hclk < 35000000U ) )
 8018bec:	68bb      	ldr	r3, [r7, #8]
 8018bee:	4a1e      	ldr	r2, [pc, #120]	@ (8018c68 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8018bf0:	4293      	cmp	r3, r2
 8018bf2:	d908      	bls.n	8018c06 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8018bf4:	68bb      	ldr	r3, [r7, #8]
 8018bf6:	4a1d      	ldr	r2, [pc, #116]	@ (8018c6c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8018bf8:	4293      	cmp	r3, r2
 8018bfa:	d804      	bhi.n	8018c06 <ETH_MAC_MDIO_ClkConfig+0x3a>
            {
                /* CSR Clock Range between 20-35 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV16;
 8018bfc:	68fb      	ldr	r3, [r7, #12]
 8018bfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8018c02:	60fb      	str	r3, [r7, #12]
 8018c04:	e027      	b.n	8018c56 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else if( ( hclk >= 35000000U ) && ( hclk < 60000000U ) )
 8018c06:	68bb      	ldr	r3, [r7, #8]
 8018c08:	4a18      	ldr	r2, [pc, #96]	@ (8018c6c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8018c0a:	4293      	cmp	r3, r2
 8018c0c:	d908      	bls.n	8018c20 <ETH_MAC_MDIO_ClkConfig+0x54>
 8018c0e:	68bb      	ldr	r3, [r7, #8]
 8018c10:	4a17      	ldr	r2, [pc, #92]	@ (8018c70 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8018c12:	4293      	cmp	r3, r2
 8018c14:	d204      	bcs.n	8018c20 <ETH_MAC_MDIO_ClkConfig+0x54>
            {
                /* CSR Clock Range between 35-60 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV26;
 8018c16:	68fb      	ldr	r3, [r7, #12]
 8018c18:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8018c1c:	60fb      	str	r3, [r7, #12]
 8018c1e:	e01a      	b.n	8018c56 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else if( ( hclk >= 60000000U ) && ( hclk < 100000000U ) )
 8018c20:	68bb      	ldr	r3, [r7, #8]
 8018c22:	4a13      	ldr	r2, [pc, #76]	@ (8018c70 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8018c24:	4293      	cmp	r3, r2
 8018c26:	d303      	bcc.n	8018c30 <ETH_MAC_MDIO_ClkConfig+0x64>
 8018c28:	68bb      	ldr	r3, [r7, #8]
 8018c2a:	4a12      	ldr	r2, [pc, #72]	@ (8018c74 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8018c2c:	4293      	cmp	r3, r2
 8018c2e:	d911      	bls.n	8018c54 <ETH_MAC_MDIO_ClkConfig+0x88>
            {
                /* CSR Clock Range between 60-100 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
            }
            else if( ( hclk >= 100000000U ) && ( hclk < 150000000U ) )
 8018c30:	68bb      	ldr	r3, [r7, #8]
 8018c32:	4a10      	ldr	r2, [pc, #64]	@ (8018c74 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8018c34:	4293      	cmp	r3, r2
 8018c36:	d908      	bls.n	8018c4a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8018c38:	68bb      	ldr	r3, [r7, #8]
 8018c3a:	4a0f      	ldr	r2, [pc, #60]	@ (8018c78 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8018c3c:	4293      	cmp	r3, r2
 8018c3e:	d804      	bhi.n	8018c4a <ETH_MAC_MDIO_ClkConfig+0x7e>
            {
                /* CSR Clock Range between 100-150 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV62;
 8018c40:	68fb      	ldr	r3, [r7, #12]
 8018c42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8018c46:	60fb      	str	r3, [r7, #12]
 8018c48:	e005      	b.n	8018c56 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else /* (hclk >= 150000000)&&(hclk <= 200000000) */
            {
                /* CSR Clock Range between 150-200 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV102;
 8018c4a:	68fb      	ldr	r3, [r7, #12]
 8018c4c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8018c50:	60fb      	str	r3, [r7, #12]
 8018c52:	e000      	b.n	8018c56 <ETH_MAC_MDIO_ClkConfig+0x8a>
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
 8018c54:	bf00      	nop
            }

            /* Configure the CSR Clock Range */
            ( heth->Instance )->MACMDIOAR = ( uint32_t ) tmpreg;
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	681b      	ldr	r3, [r3, #0]
 8018c5a:	68fa      	ldr	r2, [r7, #12]
 8018c5c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
        }
 8018c60:	bf00      	nop
 8018c62:	3710      	adds	r7, #16
 8018c64:	46bd      	mov	sp, r7
 8018c66:	bd80      	pop	{r7, pc}
 8018c68:	01312cff 	.word	0x01312cff
 8018c6c:	02160ebf 	.word	0x02160ebf
 8018c70:	03938700 	.word	0x03938700
 8018c74:	05f5e0ff 	.word	0x05f5e0ff
 8018c78:	08f0d17f 	.word	0x08f0d17f

08018c7c <ETH_DMATxDescListInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMATxDescListInit( ETH_HandleTypeDef * heth )
        {
 8018c7c:	b480      	push	{r7}
 8018c7e:	b085      	sub	sp, #20
 8018c80:	af00      	add	r7, sp, #0
 8018c82:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmatxdesc;
            uint32_t i;

            /* Fill each DMATxDesc descriptor with the right values */
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 8018c84:	2300      	movs	r3, #0
 8018c86:	60fb      	str	r3, [r7, #12]
 8018c88:	e01d      	b.n	8018cc6 <ETH_DMATxDescListInit+0x4a>
            {
                dmatxdesc = heth->Init.TxDesc + i;
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	68d9      	ldr	r1, [r3, #12]
 8018c8e:	68fa      	ldr	r2, [r7, #12]
 8018c90:	4613      	mov	r3, r2
 8018c92:	005b      	lsls	r3, r3, #1
 8018c94:	4413      	add	r3, r2
 8018c96:	00db      	lsls	r3, r3, #3
 8018c98:	440b      	add	r3, r1
 8018c9a:	60bb      	str	r3, [r7, #8]

                WRITE_REG( dmatxdesc->DESC0, 0x0 );
 8018c9c:	68bb      	ldr	r3, [r7, #8]
 8018c9e:	2200      	movs	r2, #0
 8018ca0:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmatxdesc->DESC1, 0x0 );
 8018ca2:	68bb      	ldr	r3, [r7, #8]
 8018ca4:	2200      	movs	r2, #0
 8018ca6:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmatxdesc->DESC2, 0x0 );
 8018ca8:	68bb      	ldr	r3, [r7, #8]
 8018caa:	2200      	movs	r2, #0
 8018cac:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmatxdesc->DESC3, 0x0 );
 8018cae:	68bb      	ldr	r3, [r7, #8]
 8018cb0:	2200      	movs	r2, #0
 8018cb2:	60da      	str	r2, [r3, #12]

                WRITE_REG( heth->TxDescList.TxDesc[ i ], ( uint32_t ) dmatxdesc );
 8018cb4:	68b9      	ldr	r1, [r7, #8]
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	68fa      	ldr	r2, [r7, #12]
 8018cba:	3206      	adds	r2, #6
 8018cbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 8018cc0:	68fb      	ldr	r3, [r7, #12]
 8018cc2:	3301      	adds	r3, #1
 8018cc4:	60fb      	str	r3, [r7, #12]
 8018cc6:	68fb      	ldr	r3, [r7, #12]
 8018cc8:	2b03      	cmp	r3, #3
 8018cca:	d9de      	bls.n	8018c8a <ETH_DMATxDescListInit+0xe>
            }

            heth->TxDescList.CurTxDesc = 0;
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	2200      	movs	r2, #0
 8018cd0:	629a      	str	r2, [r3, #40]	@ 0x28
            heth->TxDescList.TailTxDesc = 0;
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	2200      	movs	r2, #0
 8018cd6:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set Transmit Descriptor Ring Length */
            WRITE_REG( heth->Instance->DMACTDRLR, ( ETH_TX_DESC_CNT - 1 ) );
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	681b      	ldr	r3, [r3, #0]
 8018cdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018ce0:	461a      	mov	r2, r3
 8018ce2:	2303      	movs	r3, #3
 8018ce4:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

            /* Set Transmit Descriptor List Address */
            /* Channel Tx descriptor list address register (ETH_DMACTXDLAR)). */
            WRITE_REG( heth->Instance->DMACTDLAR, ( uint32_t ) heth->Init.TxDesc );
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	68da      	ldr	r2, [r3, #12]
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	681b      	ldr	r3, [r3, #0]
 8018cf0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018cf4:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

            /* Set Transmit Descriptor Tail pointer */
            WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) heth->Init.TxDesc );
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	68da      	ldr	r2, [r3, #12]
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	681b      	ldr	r3, [r3, #0]
 8018d00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018d04:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
        }
 8018d08:	bf00      	nop
 8018d0a:	3714      	adds	r7, #20
 8018d0c:	46bd      	mov	sp, r7
 8018d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d12:	4770      	bx	lr

08018d14 <ETH_DMARxDescListInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMARxDescListInit( ETH_HandleTypeDef * heth )
        {
 8018d14:	b480      	push	{r7}
 8018d16:	b085      	sub	sp, #20
 8018d18:	af00      	add	r7, sp, #0
 8018d1a:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmarxdesc;
            uint32_t i;

            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 8018d1c:	2300      	movs	r3, #0
 8018d1e:	60fb      	str	r3, [r7, #12]
 8018d20:	e023      	b.n	8018d6a <ETH_DMARxDescListInit+0x56>
            {
                dmarxdesc = heth->Init.RxDesc + i;
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	6919      	ldr	r1, [r3, #16]
 8018d26:	68fa      	ldr	r2, [r7, #12]
 8018d28:	4613      	mov	r3, r2
 8018d2a:	005b      	lsls	r3, r3, #1
 8018d2c:	4413      	add	r3, r2
 8018d2e:	00db      	lsls	r3, r3, #3
 8018d30:	440b      	add	r3, r1
 8018d32:	60bb      	str	r3, [r7, #8]

                WRITE_REG( dmarxdesc->DESC0, 0x0 );
 8018d34:	68bb      	ldr	r3, [r7, #8]
 8018d36:	2200      	movs	r2, #0
 8018d38:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmarxdesc->DESC1, 0x0 );
 8018d3a:	68bb      	ldr	r3, [r7, #8]
 8018d3c:	2200      	movs	r2, #0
 8018d3e:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmarxdesc->DESC2, 0x0 );
 8018d40:	68bb      	ldr	r3, [r7, #8]
 8018d42:	2200      	movs	r2, #0
 8018d44:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmarxdesc->DESC3, 0x0 );
 8018d46:	68bb      	ldr	r3, [r7, #8]
 8018d48:	2200      	movs	r2, #0
 8018d4a:	60da      	str	r2, [r3, #12]
                WRITE_REG( dmarxdesc->BackupAddr0, 0x0 );
 8018d4c:	68bb      	ldr	r3, [r7, #8]
 8018d4e:	2200      	movs	r2, #0
 8018d50:	611a      	str	r2, [r3, #16]
                WRITE_REG( dmarxdesc->BackupAddr1, 0x0 );
 8018d52:	68bb      	ldr	r3, [r7, #8]
 8018d54:	2200      	movs	r2, #0
 8018d56:	615a      	str	r2, [r3, #20]

                /* Set Rx descritors addresses */
                WRITE_REG( heth->RxDescList.RxDesc[ i ], ( uint32_t ) dmarxdesc );
 8018d58:	68b9      	ldr	r1, [r7, #8]
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	68fa      	ldr	r2, [r7, #12]
 8018d5e:	320c      	adds	r2, #12
 8018d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 8018d64:	68fb      	ldr	r3, [r7, #12]
 8018d66:	3301      	adds	r3, #1
 8018d68:	60fb      	str	r3, [r7, #12]
 8018d6a:	68fb      	ldr	r3, [r7, #12]
 8018d6c:	2b03      	cmp	r3, #3
 8018d6e:	d9d8      	bls.n	8018d22 <ETH_DMARxDescListInit+0xe>
            }

            WRITE_REG( heth->RxDescList.CurRxDesc, 0 );
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	2200      	movs	r2, #0
 8018d74:	641a      	str	r2, [r3, #64]	@ 0x40
            WRITE_REG( heth->RxDescList.FirstAppDesc, 0 );
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	2200      	movs	r2, #0
 8018d7a:	645a      	str	r2, [r3, #68]	@ 0x44
            WRITE_REG( heth->RxDescList.AppDescNbr, 0 );
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	2200      	movs	r2, #0
 8018d80:	649a      	str	r2, [r3, #72]	@ 0x48
            WRITE_REG( heth->RxDescList.ItMode, 0 );
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	2200      	movs	r2, #0
 8018d86:	651a      	str	r2, [r3, #80]	@ 0x50
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	2200      	movs	r2, #0
 8018d8c:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Set Receive Descriptor Ring Length */
            WRITE_REG( heth->Instance->DMACRDRLR, ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) );
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	681b      	ldr	r3, [r3, #0]
 8018d92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018d96:	461a      	mov	r2, r3
 8018d98:	2303      	movs	r3, #3
 8018d9a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

            /* Set Receive Descriptor List Address */
            /* Channel Rx descriptor list address register (ETH_DMACRXDLAR)). */
            WRITE_REG( heth->Instance->DMACRDLAR, ( uint32_t ) heth->Init.RxDesc );
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	691a      	ldr	r2, [r3, #16]
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	681b      	ldr	r3, [r3, #0]
 8018da6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018daa:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

            /* Set Receive Descriptor Tail pointer Address */
            WRITE_REG( heth->Instance->DMACRDTPR, ( ( uint32_t ) ( heth->Init.RxDesc + ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) ) ) );
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	691b      	ldr	r3, [r3, #16]
 8018db2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018dbe:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
        }
 8018dc2:	bf00      	nop
 8018dc4:	3714      	adds	r7, #20
 8018dc6:	46bd      	mov	sp, r7
 8018dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dcc:	4770      	bx	lr
	...

08018dd0 <ETH_Clear_Tx_Descriptors>:

        void ETH_Clear_Tx_Descriptors( ETH_HandleTypeDef * heth )
        {
 8018dd0:	b580      	push	{r7, lr}
 8018dd2:	b086      	sub	sp, #24
 8018dd4:	af00      	add	r7, sp, #0
 8018dd6:	6078      	str	r0, [r7, #4]
            uint32_t ulTailTxDesc = heth->TxDescList.TailTxDesc;
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018ddc:	617b      	str	r3, [r7, #20]

            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 8018dde:	e032      	b.n	8018e46 <ETH_Clear_Tx_Descriptors+0x76>
            {
                ETH_DMADescTypeDef * xDMATxDescriptor = ( ETH_DMADescTypeDef * ) heth->TxDescList.TxDesc[ ulTailTxDesc ];
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	697a      	ldr	r2, [r7, #20]
 8018de4:	3206      	adds	r2, #6
 8018de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018dea:	613b      	str	r3, [r7, #16]

                if( ( xDMATxDescriptor->DESC3 & ETH_DMATXNDESCRF_OWN ) != 0 )
 8018dec:	693b      	ldr	r3, [r7, #16]
 8018dee:	68db      	ldr	r3, [r3, #12]
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	db31      	blt.n	8018e58 <ETH_Clear_Tx_Descriptors+0x88>
                #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    NetworkBufferDescriptor_t * pxNetworkBuffer;
                    uint8_t * ucPayLoad;

                    ucPayLoad = ( uint8_t * ) xDMATxDescriptor->DESC0;
 8018df4:	693b      	ldr	r3, [r7, #16]
 8018df6:	681b      	ldr	r3, [r3, #0]
 8018df8:	60fb      	str	r3, [r7, #12]

                    if( ucPayLoad == NULL )
 8018dfa:	68fb      	ldr	r3, [r7, #12]
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	d02d      	beq.n	8018e5c <ETH_Clear_Tx_Descriptors+0x8c>
                    {
                        /* No buffer is assigned or DMA still OWNs this descriptor. */
                        break;
                    }

                    pxNetworkBuffer = pxPacketBuffer_to_NetworkBuffer( ucPayLoad );
 8018e00:	68f8      	ldr	r0, [r7, #12]
 8018e02:	f7f0 fbd2 	bl	80095aa <pxPacketBuffer_to_NetworkBuffer>
 8018e06:	60b8      	str	r0, [r7, #8]

                    if( pxNetworkBuffer != NULL )
 8018e08:	68bb      	ldr	r3, [r7, #8]
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d002      	beq.n	8018e14 <ETH_Clear_Tx_Descriptors+0x44>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8018e0e:	68b8      	ldr	r0, [r7, #8]
 8018e10:	f7fd faa2 	bl	8016358 <vReleaseNetworkBufferAndDescriptor>
                    }
                }
                #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */

                xDMATxDescriptor->DESC0 = ( uint32_t ) 0u;
 8018e14:	693b      	ldr	r3, [r7, #16]
 8018e16:	2200      	movs	r2, #0
 8018e18:	601a      	str	r2, [r3, #0]

                INCR_TX_DESC_INDEX( ulTailTxDesc, 1U );
 8018e1a:	697b      	ldr	r3, [r7, #20]
 8018e1c:	3301      	adds	r3, #1
 8018e1e:	617b      	str	r3, [r7, #20]
 8018e20:	697b      	ldr	r3, [r7, #20]
 8018e22:	2b03      	cmp	r3, #3
 8018e24:	d902      	bls.n	8018e2c <ETH_Clear_Tx_Descriptors+0x5c>
 8018e26:	697b      	ldr	r3, [r7, #20]
 8018e28:	3b04      	subs	r3, #4
 8018e2a:	617b      	str	r3, [r7, #20]
                heth->TxDescList.TailTxDesc = ulTailTxDesc;
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	697a      	ldr	r2, [r7, #20]
 8018e30:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("dsb 0xF":::"memory");
 8018e32:	f3bf 8f4f 	dsb	sy
}
 8018e36:	bf00      	nop

                __DSB();

                xSemaphoreGive( xTXDescriptorSemaphore );
 8018e38:	4b0b      	ldr	r3, [pc, #44]	@ (8018e68 <ETH_Clear_Tx_Descriptors+0x98>)
 8018e3a:	6818      	ldr	r0, [r3, #0]
 8018e3c:	2300      	movs	r3, #0
 8018e3e:	2200      	movs	r2, #0
 8018e40:	2100      	movs	r1, #0
 8018e42:	f7e9 fd01 	bl	8002848 <xQueueGenericSend>
            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 8018e46:	4b08      	ldr	r3, [pc, #32]	@ (8018e68 <ETH_Clear_Tx_Descriptors+0x98>)
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	4618      	mov	r0, r3
 8018e4c:	f7e9 ffa2 	bl	8002d94 <uxQueueMessagesWaiting>
 8018e50:	4603      	mov	r3, r0
 8018e52:	2b04      	cmp	r3, #4
 8018e54:	d1c4      	bne.n	8018de0 <ETH_Clear_Tx_Descriptors+0x10>
            }
        }
 8018e56:	e002      	b.n	8018e5e <ETH_Clear_Tx_Descriptors+0x8e>
                    break;
 8018e58:	bf00      	nop
 8018e5a:	e000      	b.n	8018e5e <ETH_Clear_Tx_Descriptors+0x8e>
                        break;
 8018e5c:	bf00      	nop
        }
 8018e5e:	bf00      	nop
 8018e60:	3718      	adds	r7, #24
 8018e62:	46bd      	mov	sp, r7
 8018e64:	bd80      	pop	{r7, pc}
 8018e66:	bf00      	nop
 8018e68:	2000211c 	.word	0x2000211c

08018e6c <ETH_Prepare_Tx_Descriptors>:
 * @retval Status
 */
        static uint32_t ETH_Prepare_Tx_Descriptors( ETH_HandleTypeDef * heth,
                                                    ETH_TxPacketConfig * pTxConfig,
                                                    uint32_t ItMode )
        {
 8018e6c:	b480      	push	{r7}
 8018e6e:	b08b      	sub	sp, #44	@ 0x2c
 8018e70:	af00      	add	r7, sp, #0
 8018e72:	60f8      	str	r0, [r7, #12]
 8018e74:	60b9      	str	r1, [r7, #8]
 8018e76:	607a      	str	r2, [r7, #4]
            ETH_TxDescListTypeDef * dmatxdesclist = &heth->TxDescList;
 8018e78:	68fb      	ldr	r3, [r7, #12]
 8018e7a:	3318      	adds	r3, #24
 8018e7c:	623b      	str	r3, [r7, #32]
            uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8018e7e:	6a3b      	ldr	r3, [r7, #32]
 8018e80:	691b      	ldr	r3, [r3, #16]
 8018e82:	61fb      	str	r3, [r7, #28]
            uint32_t DESC3;
            ETH_DMADescTypeDef * dmatxdesc = ( ETH_DMADescTypeDef * ) dmatxdesclist->TxDesc[ firstdescidx ];
 8018e84:	6a3b      	ldr	r3, [r7, #32]
 8018e86:	69fa      	ldr	r2, [r7, #28]
 8018e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018e8c:	61bb      	str	r3, [r7, #24]
            ETH_BufferTypeDef * txbuffer = pTxConfig->TxBuffer;
 8018e8e:	68bb      	ldr	r3, [r7, #8]
 8018e90:	689b      	ldr	r3, [r3, #8]
 8018e92:	617b      	str	r3, [r7, #20]

            /* FreeRTOS+TCP doesn't support linked buffers. */
            txbuffer->next = NULL;
 8018e94:	697b      	ldr	r3, [r7, #20]
 8018e96:	2200      	movs	r2, #0
 8018e98:	609a      	str	r2, [r3, #8]
            DESC3 = READ_REG( dmatxdesc->DESC3 );
 8018e9a:	69bb      	ldr	r3, [r7, #24]
 8018e9c:	68db      	ldr	r3, [r3, #12]
 8018e9e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Current TX Descriptor Owned by DMA: cannot be used by the application  */
            if( READ_BIT( DESC3, ETH_DMATXNDESCWBF_OWN ) != 0U )
 8018ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ea2:	2b00      	cmp	r3, #0
 8018ea4:	da01      	bge.n	8018eaa <ETH_Prepare_Tx_Descriptors+0x3e>
            {
                /* Should not get here because TX descriptors are protected by a counting semaphore. */
                return HAL_ETH_ERROR_BUSY;
 8018ea6:	2302      	movs	r3, #2
 8018ea8:	e05c      	b.n	8018f64 <ETH_Prepare_Tx_Descriptors+0xf8>
            /***************************************************************************/
            /*****************    Normal descriptors configuration     *****************/
            /***************************************************************************/

            /* Set header or buffer 1 address */
            WRITE_REG( dmatxdesc->DESC0, ( uint32_t ) txbuffer->buffer );
 8018eaa:	697b      	ldr	r3, [r7, #20]
 8018eac:	681b      	ldr	r3, [r3, #0]
 8018eae:	461a      	mov	r2, r3
 8018eb0:	69bb      	ldr	r3, [r7, #24]
 8018eb2:	601a      	str	r2, [r3, #0]
            /* Set header or buffer 1 Length */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len );
 8018eb4:	69bb      	ldr	r3, [r7, #24]
 8018eb6:	689a      	ldr	r2, [r3, #8]
 8018eb8:	4b2d      	ldr	r3, [pc, #180]	@ (8018f70 <ETH_Prepare_Tx_Descriptors+0x104>)
 8018eba:	4013      	ands	r3, r2
 8018ebc:	697a      	ldr	r2, [r7, #20]
 8018ebe:	6852      	ldr	r2, [r2, #4]
 8018ec0:	431a      	orrs	r2, r3
 8018ec2:	69bb      	ldr	r3, [r7, #24]
 8018ec4:	609a      	str	r2, [r3, #8]

            WRITE_REG( dmatxdesc->DESC1, 0x0 );
 8018ec6:	69bb      	ldr	r3, [r7, #24]
 8018ec8:	2200      	movs	r2, #0
 8018eca:	605a      	str	r2, [r3, #4]
            /* Set buffer 2 Length to zero */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U );
 8018ecc:	69bb      	ldr	r3, [r7, #24]
 8018ece:	689a      	ldr	r2, [r3, #8]
 8018ed0:	4b28      	ldr	r3, [pc, #160]	@ (8018f74 <ETH_Prepare_Tx_Descriptors+0x108>)
 8018ed2:	4013      	ands	r3, r2
 8018ed4:	69ba      	ldr	r2, [r7, #24]
 8018ed6:	6093      	str	r3, [r2, #8]

            MODIFY_REG( DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length );
 8018ed8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018eda:	4b27      	ldr	r3, [pc, #156]	@ (8018f78 <ETH_Prepare_Tx_Descriptors+0x10c>)
 8018edc:	4013      	ands	r3, r2
 8018ede:	68ba      	ldr	r2, [r7, #8]
 8018ee0:	6852      	ldr	r2, [r2, #4]
 8018ee2:	4313      	orrs	r3, r2
 8018ee4:	627b      	str	r3, [r7, #36]	@ 0x24

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM ) != 0U )
 8018ee6:	68bb      	ldr	r3, [r7, #8]
 8018ee8:	681b      	ldr	r3, [r3, #0]
 8018eea:	f003 0301 	and.w	r3, r3, #1
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	d006      	beq.n	8018f00 <ETH_Prepare_Tx_Descriptors+0x94>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl );
 8018ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ef4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8018ef8:	68bb      	ldr	r3, [r7, #8]
 8018efa:	695b      	ldr	r3, [r3, #20]
 8018efc:	4313      	orrs	r3, r2
 8018efe:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD ) != 0U )
 8018f00:	68bb      	ldr	r3, [r7, #8]
 8018f02:	681b      	ldr	r3, [r3, #0]
 8018f04:	f003 0320 	and.w	r3, r3, #32
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	d006      	beq.n	8018f1a <ETH_Prepare_Tx_Descriptors+0xae>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl );
 8018f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f0e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8018f12:	68bb      	ldr	r3, [r7, #8]
 8018f14:	691b      	ldr	r3, [r3, #16]
 8018f16:	4313      	orrs	r3, r2
 8018f18:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Mark it as First and the last Descriptor */
            SET_BIT( DESC3, ETH_DMATXNDESCRF_FD | ETH_DMATXNDESCRF_LD );
 8018f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f1c:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8018f20:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark it as NORMAL descriptor */
            CLEAR_BIT( DESC3, ETH_DMATXNDESCRF_CTXT );
 8018f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f24:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8018f28:	627b      	str	r3, [r7, #36]	@ 0x24

            /* set OWN bit of FIRST descriptor */
            SET_BIT( DESC3, ETH_DMATXNDESCRF_OWN );
 8018f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f2c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8018f30:	627b      	str	r3, [r7, #36]	@ 0x24

            if( ItMode != ( ( uint32_t ) RESET ) )
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	2b00      	cmp	r3, #0
 8018f36:	d006      	beq.n	8018f46 <ETH_Prepare_Tx_Descriptors+0xda>
            {
                /* Set Interrupt on competition bit */
                SET_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 8018f38:	69bb      	ldr	r3, [r7, #24]
 8018f3a:	689b      	ldr	r3, [r3, #8]
 8018f3c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8018f40:	69bb      	ldr	r3, [r7, #24]
 8018f42:	609a      	str	r2, [r3, #8]
 8018f44:	e005      	b.n	8018f52 <ETH_Prepare_Tx_Descriptors+0xe6>
            }
            else
            {
                /* Clear Interrupt on competition bit */
                CLEAR_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 8018f46:	69bb      	ldr	r3, [r7, #24]
 8018f48:	689b      	ldr	r3, [r3, #8]
 8018f4a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8018f4e:	69bb      	ldr	r3, [r7, #24]
 8018f50:	609a      	str	r2, [r3, #8]
            }

            WRITE_REG( dmatxdesc->DESC3, DESC3 );
 8018f52:	69bb      	ldr	r3, [r7, #24]
 8018f54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018f56:	60da      	str	r2, [r3, #12]

            /* Read back the value. */
            if( READ_REG( dmatxdesc->DESC3 ) )
 8018f58:	69bb      	ldr	r3, [r7, #24]
 8018f5a:	68db      	ldr	r3, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8018f5c:	f3bf 8f4f 	dsb	sy
}
 8018f60:	bf00      	nop
            }

            __DSB();

            /* Return function status */
            return HAL_ETH_ERROR_NONE;
 8018f62:	2300      	movs	r3, #0
        }
 8018f64:	4618      	mov	r0, r3
 8018f66:	372c      	adds	r7, #44	@ 0x2c
 8018f68:	46bd      	mov	sp, r7
 8018f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f6e:	4770      	bx	lr
 8018f70:	ffffc000 	.word	0xffffc000
 8018f74:	c000ffff 	.word	0xc000ffff
 8018f78:	ffff8000 	.word	0xffff8000

08018f7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8018f7c:	b580      	push	{r7, lr}
 8018f7e:	b082      	sub	sp, #8
 8018f80:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8018f82:	2003      	movs	r0, #3
 8018f84:	f000 f97c 	bl	8019280 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8018f88:	f003 f934 	bl	801c1f4 <HAL_RCC_GetSysClockFreq>
 8018f8c:	4602      	mov	r2, r0
 8018f8e:	4b15      	ldr	r3, [pc, #84]	@ (8018fe4 <HAL_Init+0x68>)
 8018f90:	699b      	ldr	r3, [r3, #24]
 8018f92:	0a1b      	lsrs	r3, r3, #8
 8018f94:	f003 030f 	and.w	r3, r3, #15
 8018f98:	4913      	ldr	r1, [pc, #76]	@ (8018fe8 <HAL_Init+0x6c>)
 8018f9a:	5ccb      	ldrb	r3, [r1, r3]
 8018f9c:	f003 031f 	and.w	r3, r3, #31
 8018fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8018fa4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8018fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8018fe4 <HAL_Init+0x68>)
 8018fa8:	699b      	ldr	r3, [r3, #24]
 8018faa:	f003 030f 	and.w	r3, r3, #15
 8018fae:	4a0e      	ldr	r2, [pc, #56]	@ (8018fe8 <HAL_Init+0x6c>)
 8018fb0:	5cd3      	ldrb	r3, [r2, r3]
 8018fb2:	f003 031f 	and.w	r3, r3, #31
 8018fb6:	687a      	ldr	r2, [r7, #4]
 8018fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8018fbc:	4a0b      	ldr	r2, [pc, #44]	@ (8018fec <HAL_Init+0x70>)
 8018fbe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8018fc0:	4a0b      	ldr	r2, [pc, #44]	@ (8018ff0 <HAL_Init+0x74>)
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8018fc6:	2000      	movs	r0, #0
 8018fc8:	f000 f814 	bl	8018ff4 <HAL_InitTick>
 8018fcc:	4603      	mov	r3, r0
 8018fce:	2b00      	cmp	r3, #0
 8018fd0:	d001      	beq.n	8018fd6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8018fd2:	2301      	movs	r3, #1
 8018fd4:	e002      	b.n	8018fdc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8018fd6:	f7e8 fabb 	bl	8001550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8018fda:	2300      	movs	r3, #0
}
 8018fdc:	4618      	mov	r0, r3
 8018fde:	3708      	adds	r7, #8
 8018fe0:	46bd      	mov	sp, r7
 8018fe2:	bd80      	pop	{r7, pc}
 8018fe4:	58024400 	.word	0x58024400
 8018fe8:	08025b7c 	.word	0x08025b7c
 8018fec:	20000004 	.word	0x20000004
 8018ff0:	20000000 	.word	0x20000000

08018ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8018ff4:	b580      	push	{r7, lr}
 8018ff6:	b082      	sub	sp, #8
 8018ff8:	af00      	add	r7, sp, #0
 8018ffa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8018ffc:	4b15      	ldr	r3, [pc, #84]	@ (8019054 <HAL_InitTick+0x60>)
 8018ffe:	781b      	ldrb	r3, [r3, #0]
 8019000:	2b00      	cmp	r3, #0
 8019002:	d101      	bne.n	8019008 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8019004:	2301      	movs	r3, #1
 8019006:	e021      	b.n	801904c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8019008:	4b13      	ldr	r3, [pc, #76]	@ (8019058 <HAL_InitTick+0x64>)
 801900a:	681a      	ldr	r2, [r3, #0]
 801900c:	4b11      	ldr	r3, [pc, #68]	@ (8019054 <HAL_InitTick+0x60>)
 801900e:	781b      	ldrb	r3, [r3, #0]
 8019010:	4619      	mov	r1, r3
 8019012:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8019016:	fbb3 f3f1 	udiv	r3, r3, r1
 801901a:	fbb2 f3f3 	udiv	r3, r2, r3
 801901e:	4618      	mov	r0, r3
 8019020:	f000 f961 	bl	80192e6 <HAL_SYSTICK_Config>
 8019024:	4603      	mov	r3, r0
 8019026:	2b00      	cmp	r3, #0
 8019028:	d001      	beq.n	801902e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 801902a:	2301      	movs	r3, #1
 801902c:	e00e      	b.n	801904c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801902e:	687b      	ldr	r3, [r7, #4]
 8019030:	2b0f      	cmp	r3, #15
 8019032:	d80a      	bhi.n	801904a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8019034:	2200      	movs	r2, #0
 8019036:	6879      	ldr	r1, [r7, #4]
 8019038:	f04f 30ff 	mov.w	r0, #4294967295
 801903c:	f000 f92b 	bl	8019296 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8019040:	4a06      	ldr	r2, [pc, #24]	@ (801905c <HAL_InitTick+0x68>)
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8019046:	2300      	movs	r3, #0
 8019048:	e000      	b.n	801904c <HAL_InitTick+0x58>
    return HAL_ERROR;
 801904a:	2301      	movs	r3, #1
}
 801904c:	4618      	mov	r0, r3
 801904e:	3708      	adds	r7, #8
 8019050:	46bd      	mov	sp, r7
 8019052:	bd80      	pop	{r7, pc}
 8019054:	20000024 	.word	0x20000024
 8019058:	20000000 	.word	0x20000000
 801905c:	20000020 	.word	0x20000020

08019060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8019060:	b480      	push	{r7}
 8019062:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8019064:	4b06      	ldr	r3, [pc, #24]	@ (8019080 <HAL_IncTick+0x20>)
 8019066:	781b      	ldrb	r3, [r3, #0]
 8019068:	461a      	mov	r2, r3
 801906a:	4b06      	ldr	r3, [pc, #24]	@ (8019084 <HAL_IncTick+0x24>)
 801906c:	681b      	ldr	r3, [r3, #0]
 801906e:	4413      	add	r3, r2
 8019070:	4a04      	ldr	r2, [pc, #16]	@ (8019084 <HAL_IncTick+0x24>)
 8019072:	6013      	str	r3, [r2, #0]
}
 8019074:	bf00      	nop
 8019076:	46bd      	mov	sp, r7
 8019078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801907c:	4770      	bx	lr
 801907e:	bf00      	nop
 8019080:	20000024 	.word	0x20000024
 8019084:	20002228 	.word	0x20002228

08019088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8019088:	b480      	push	{r7}
 801908a:	af00      	add	r7, sp, #0
  return uwTick;
 801908c:	4b03      	ldr	r3, [pc, #12]	@ (801909c <HAL_GetTick+0x14>)
 801908e:	681b      	ldr	r3, [r3, #0]
}
 8019090:	4618      	mov	r0, r3
 8019092:	46bd      	mov	sp, r7
 8019094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019098:	4770      	bx	lr
 801909a:	bf00      	nop
 801909c:	20002228 	.word	0x20002228

080190a0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80190a0:	b480      	push	{r7}
 80190a2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80190a4:	4b03      	ldr	r3, [pc, #12]	@ (80190b4 <HAL_GetREVID+0x14>)
 80190a6:	681b      	ldr	r3, [r3, #0]
 80190a8:	0c1b      	lsrs	r3, r3, #16
}
 80190aa:	4618      	mov	r0, r3
 80190ac:	46bd      	mov	sp, r7
 80190ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190b2:	4770      	bx	lr
 80190b4:	5c001000 	.word	0x5c001000

080190b8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80190b8:	b480      	push	{r7}
 80190ba:	b083      	sub	sp, #12
 80190bc:	af00      	add	r7, sp, #0
 80190be:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80190c0:	4b06      	ldr	r3, [pc, #24]	@ (80190dc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80190c2:	685b      	ldr	r3, [r3, #4]
 80190c4:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80190c8:	4904      	ldr	r1, [pc, #16]	@ (80190dc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80190ca:	687b      	ldr	r3, [r7, #4]
 80190cc:	4313      	orrs	r3, r2
 80190ce:	604b      	str	r3, [r1, #4]
}
 80190d0:	bf00      	nop
 80190d2:	370c      	adds	r7, #12
 80190d4:	46bd      	mov	sp, r7
 80190d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190da:	4770      	bx	lr
 80190dc:	58000400 	.word	0x58000400

080190e0 <__NVIC_SetPriorityGrouping>:
{
 80190e0:	b480      	push	{r7}
 80190e2:	b085      	sub	sp, #20
 80190e4:	af00      	add	r7, sp, #0
 80190e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	f003 0307 	and.w	r3, r3, #7
 80190ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80190f0:	4b0b      	ldr	r3, [pc, #44]	@ (8019120 <__NVIC_SetPriorityGrouping+0x40>)
 80190f2:	68db      	ldr	r3, [r3, #12]
 80190f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80190f6:	68ba      	ldr	r2, [r7, #8]
 80190f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80190fc:	4013      	ands	r3, r2
 80190fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8019100:	68fb      	ldr	r3, [r7, #12]
 8019102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8019104:	68bb      	ldr	r3, [r7, #8]
 8019106:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8019108:	4b06      	ldr	r3, [pc, #24]	@ (8019124 <__NVIC_SetPriorityGrouping+0x44>)
 801910a:	4313      	orrs	r3, r2
 801910c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801910e:	4a04      	ldr	r2, [pc, #16]	@ (8019120 <__NVIC_SetPriorityGrouping+0x40>)
 8019110:	68bb      	ldr	r3, [r7, #8]
 8019112:	60d3      	str	r3, [r2, #12]
}
 8019114:	bf00      	nop
 8019116:	3714      	adds	r7, #20
 8019118:	46bd      	mov	sp, r7
 801911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801911e:	4770      	bx	lr
 8019120:	e000ed00 	.word	0xe000ed00
 8019124:	05fa0000 	.word	0x05fa0000

08019128 <__NVIC_GetPriorityGrouping>:
{
 8019128:	b480      	push	{r7}
 801912a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801912c:	4b04      	ldr	r3, [pc, #16]	@ (8019140 <__NVIC_GetPriorityGrouping+0x18>)
 801912e:	68db      	ldr	r3, [r3, #12]
 8019130:	0a1b      	lsrs	r3, r3, #8
 8019132:	f003 0307 	and.w	r3, r3, #7
}
 8019136:	4618      	mov	r0, r3
 8019138:	46bd      	mov	sp, r7
 801913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801913e:	4770      	bx	lr
 8019140:	e000ed00 	.word	0xe000ed00

08019144 <__NVIC_EnableIRQ>:
{
 8019144:	b480      	push	{r7}
 8019146:	b083      	sub	sp, #12
 8019148:	af00      	add	r7, sp, #0
 801914a:	4603      	mov	r3, r0
 801914c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801914e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019152:	2b00      	cmp	r3, #0
 8019154:	db0b      	blt.n	801916e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8019156:	88fb      	ldrh	r3, [r7, #6]
 8019158:	f003 021f 	and.w	r2, r3, #31
 801915c:	4907      	ldr	r1, [pc, #28]	@ (801917c <__NVIC_EnableIRQ+0x38>)
 801915e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019162:	095b      	lsrs	r3, r3, #5
 8019164:	2001      	movs	r0, #1
 8019166:	fa00 f202 	lsl.w	r2, r0, r2
 801916a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801916e:	bf00      	nop
 8019170:	370c      	adds	r7, #12
 8019172:	46bd      	mov	sp, r7
 8019174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019178:	4770      	bx	lr
 801917a:	bf00      	nop
 801917c:	e000e100 	.word	0xe000e100

08019180 <__NVIC_SetPriority>:
{
 8019180:	b480      	push	{r7}
 8019182:	b083      	sub	sp, #12
 8019184:	af00      	add	r7, sp, #0
 8019186:	4603      	mov	r3, r0
 8019188:	6039      	str	r1, [r7, #0]
 801918a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801918c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019190:	2b00      	cmp	r3, #0
 8019192:	db0a      	blt.n	80191aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019194:	683b      	ldr	r3, [r7, #0]
 8019196:	b2da      	uxtb	r2, r3
 8019198:	490c      	ldr	r1, [pc, #48]	@ (80191cc <__NVIC_SetPriority+0x4c>)
 801919a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801919e:	0112      	lsls	r2, r2, #4
 80191a0:	b2d2      	uxtb	r2, r2
 80191a2:	440b      	add	r3, r1
 80191a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80191a8:	e00a      	b.n	80191c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80191aa:	683b      	ldr	r3, [r7, #0]
 80191ac:	b2da      	uxtb	r2, r3
 80191ae:	4908      	ldr	r1, [pc, #32]	@ (80191d0 <__NVIC_SetPriority+0x50>)
 80191b0:	88fb      	ldrh	r3, [r7, #6]
 80191b2:	f003 030f 	and.w	r3, r3, #15
 80191b6:	3b04      	subs	r3, #4
 80191b8:	0112      	lsls	r2, r2, #4
 80191ba:	b2d2      	uxtb	r2, r2
 80191bc:	440b      	add	r3, r1
 80191be:	761a      	strb	r2, [r3, #24]
}
 80191c0:	bf00      	nop
 80191c2:	370c      	adds	r7, #12
 80191c4:	46bd      	mov	sp, r7
 80191c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ca:	4770      	bx	lr
 80191cc:	e000e100 	.word	0xe000e100
 80191d0:	e000ed00 	.word	0xe000ed00

080191d4 <NVIC_EncodePriority>:
{
 80191d4:	b480      	push	{r7}
 80191d6:	b089      	sub	sp, #36	@ 0x24
 80191d8:	af00      	add	r7, sp, #0
 80191da:	60f8      	str	r0, [r7, #12]
 80191dc:	60b9      	str	r1, [r7, #8]
 80191de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80191e0:	68fb      	ldr	r3, [r7, #12]
 80191e2:	f003 0307 	and.w	r3, r3, #7
 80191e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80191e8:	69fb      	ldr	r3, [r7, #28]
 80191ea:	f1c3 0307 	rsb	r3, r3, #7
 80191ee:	2b04      	cmp	r3, #4
 80191f0:	bf28      	it	cs
 80191f2:	2304      	movcs	r3, #4
 80191f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80191f6:	69fb      	ldr	r3, [r7, #28]
 80191f8:	3304      	adds	r3, #4
 80191fa:	2b06      	cmp	r3, #6
 80191fc:	d902      	bls.n	8019204 <NVIC_EncodePriority+0x30>
 80191fe:	69fb      	ldr	r3, [r7, #28]
 8019200:	3b03      	subs	r3, #3
 8019202:	e000      	b.n	8019206 <NVIC_EncodePriority+0x32>
 8019204:	2300      	movs	r3, #0
 8019206:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019208:	f04f 32ff 	mov.w	r2, #4294967295
 801920c:	69bb      	ldr	r3, [r7, #24]
 801920e:	fa02 f303 	lsl.w	r3, r2, r3
 8019212:	43da      	mvns	r2, r3
 8019214:	68bb      	ldr	r3, [r7, #8]
 8019216:	401a      	ands	r2, r3
 8019218:	697b      	ldr	r3, [r7, #20]
 801921a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801921c:	f04f 31ff 	mov.w	r1, #4294967295
 8019220:	697b      	ldr	r3, [r7, #20]
 8019222:	fa01 f303 	lsl.w	r3, r1, r3
 8019226:	43d9      	mvns	r1, r3
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801922c:	4313      	orrs	r3, r2
}
 801922e:	4618      	mov	r0, r3
 8019230:	3724      	adds	r7, #36	@ 0x24
 8019232:	46bd      	mov	sp, r7
 8019234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019238:	4770      	bx	lr
	...

0801923c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801923c:	b580      	push	{r7, lr}
 801923e:	b082      	sub	sp, #8
 8019240:	af00      	add	r7, sp, #0
 8019242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	3b01      	subs	r3, #1
 8019248:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801924c:	d301      	bcc.n	8019252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801924e:	2301      	movs	r3, #1
 8019250:	e00f      	b.n	8019272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8019252:	4a0a      	ldr	r2, [pc, #40]	@ (801927c <SysTick_Config+0x40>)
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	3b01      	subs	r3, #1
 8019258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801925a:	210f      	movs	r1, #15
 801925c:	f04f 30ff 	mov.w	r0, #4294967295
 8019260:	f7ff ff8e 	bl	8019180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8019264:	4b05      	ldr	r3, [pc, #20]	@ (801927c <SysTick_Config+0x40>)
 8019266:	2200      	movs	r2, #0
 8019268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801926a:	4b04      	ldr	r3, [pc, #16]	@ (801927c <SysTick_Config+0x40>)
 801926c:	2207      	movs	r2, #7
 801926e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8019270:	2300      	movs	r3, #0
}
 8019272:	4618      	mov	r0, r3
 8019274:	3708      	adds	r7, #8
 8019276:	46bd      	mov	sp, r7
 8019278:	bd80      	pop	{r7, pc}
 801927a:	bf00      	nop
 801927c:	e000e010 	.word	0xe000e010

08019280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8019280:	b580      	push	{r7, lr}
 8019282:	b082      	sub	sp, #8
 8019284:	af00      	add	r7, sp, #0
 8019286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8019288:	6878      	ldr	r0, [r7, #4]
 801928a:	f7ff ff29 	bl	80190e0 <__NVIC_SetPriorityGrouping>
}
 801928e:	bf00      	nop
 8019290:	3708      	adds	r7, #8
 8019292:	46bd      	mov	sp, r7
 8019294:	bd80      	pop	{r7, pc}

08019296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8019296:	b580      	push	{r7, lr}
 8019298:	b086      	sub	sp, #24
 801929a:	af00      	add	r7, sp, #0
 801929c:	4603      	mov	r3, r0
 801929e:	60b9      	str	r1, [r7, #8]
 80192a0:	607a      	str	r2, [r7, #4]
 80192a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80192a4:	f7ff ff40 	bl	8019128 <__NVIC_GetPriorityGrouping>
 80192a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80192aa:	687a      	ldr	r2, [r7, #4]
 80192ac:	68b9      	ldr	r1, [r7, #8]
 80192ae:	6978      	ldr	r0, [r7, #20]
 80192b0:	f7ff ff90 	bl	80191d4 <NVIC_EncodePriority>
 80192b4:	4602      	mov	r2, r0
 80192b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80192ba:	4611      	mov	r1, r2
 80192bc:	4618      	mov	r0, r3
 80192be:	f7ff ff5f 	bl	8019180 <__NVIC_SetPriority>
}
 80192c2:	bf00      	nop
 80192c4:	3718      	adds	r7, #24
 80192c6:	46bd      	mov	sp, r7
 80192c8:	bd80      	pop	{r7, pc}

080192ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80192ca:	b580      	push	{r7, lr}
 80192cc:	b082      	sub	sp, #8
 80192ce:	af00      	add	r7, sp, #0
 80192d0:	4603      	mov	r3, r0
 80192d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80192d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80192d8:	4618      	mov	r0, r3
 80192da:	f7ff ff33 	bl	8019144 <__NVIC_EnableIRQ>
}
 80192de:	bf00      	nop
 80192e0:	3708      	adds	r7, #8
 80192e2:	46bd      	mov	sp, r7
 80192e4:	bd80      	pop	{r7, pc}

080192e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80192e6:	b580      	push	{r7, lr}
 80192e8:	b082      	sub	sp, #8
 80192ea:	af00      	add	r7, sp, #0
 80192ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80192ee:	6878      	ldr	r0, [r7, #4]
 80192f0:	f7ff ffa4 	bl	801923c <SysTick_Config>
 80192f4:	4603      	mov	r3, r0
}
 80192f6:	4618      	mov	r0, r3
 80192f8:	3708      	adds	r7, #8
 80192fa:	46bd      	mov	sp, r7
 80192fc:	bd80      	pop	{r7, pc}
	...

08019300 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8019300:	b480      	push	{r7}
 8019302:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8019304:	f3bf 8f5f 	dmb	sy
}
 8019308:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 801930a:	4b07      	ldr	r3, [pc, #28]	@ (8019328 <HAL_MPU_Disable+0x28>)
 801930c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801930e:	4a06      	ldr	r2, [pc, #24]	@ (8019328 <HAL_MPU_Disable+0x28>)
 8019310:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8019314:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8019316:	4b05      	ldr	r3, [pc, #20]	@ (801932c <HAL_MPU_Disable+0x2c>)
 8019318:	2200      	movs	r2, #0
 801931a:	605a      	str	r2, [r3, #4]
}
 801931c:	bf00      	nop
 801931e:	46bd      	mov	sp, r7
 8019320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019324:	4770      	bx	lr
 8019326:	bf00      	nop
 8019328:	e000ed00 	.word	0xe000ed00
 801932c:	e000ed90 	.word	0xe000ed90

08019330 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8019330:	b480      	push	{r7}
 8019332:	b083      	sub	sp, #12
 8019334:	af00      	add	r7, sp, #0
 8019336:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8019338:	4a0b      	ldr	r2, [pc, #44]	@ (8019368 <HAL_MPU_Enable+0x38>)
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	f043 0301 	orr.w	r3, r3, #1
 8019340:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8019342:	4b0a      	ldr	r3, [pc, #40]	@ (801936c <HAL_MPU_Enable+0x3c>)
 8019344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019346:	4a09      	ldr	r2, [pc, #36]	@ (801936c <HAL_MPU_Enable+0x3c>)
 8019348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801934c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 801934e:	f3bf 8f4f 	dsb	sy
}
 8019352:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8019354:	f3bf 8f6f 	isb	sy
}
 8019358:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 801935a:	bf00      	nop
 801935c:	370c      	adds	r7, #12
 801935e:	46bd      	mov	sp, r7
 8019360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019364:	4770      	bx	lr
 8019366:	bf00      	nop
 8019368:	e000ed90 	.word	0xe000ed90
 801936c:	e000ed00 	.word	0xe000ed00

08019370 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8019370:	b480      	push	{r7}
 8019372:	b083      	sub	sp, #12
 8019374:	af00      	add	r7, sp, #0
 8019376:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8019378:	687b      	ldr	r3, [r7, #4]
 801937a:	785a      	ldrb	r2, [r3, #1]
 801937c:	4b1b      	ldr	r3, [pc, #108]	@ (80193ec <HAL_MPU_ConfigRegion+0x7c>)
 801937e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8019380:	4b1a      	ldr	r3, [pc, #104]	@ (80193ec <HAL_MPU_ConfigRegion+0x7c>)
 8019382:	691b      	ldr	r3, [r3, #16]
 8019384:	4a19      	ldr	r2, [pc, #100]	@ (80193ec <HAL_MPU_ConfigRegion+0x7c>)
 8019386:	f023 0301 	bic.w	r3, r3, #1
 801938a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 801938c:	4a17      	ldr	r2, [pc, #92]	@ (80193ec <HAL_MPU_ConfigRegion+0x7c>)
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	685b      	ldr	r3, [r3, #4]
 8019392:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	7b1b      	ldrb	r3, [r3, #12]
 8019398:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	7adb      	ldrb	r3, [r3, #11]
 801939e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80193a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	7a9b      	ldrb	r3, [r3, #10]
 80193a6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80193a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	7b5b      	ldrb	r3, [r3, #13]
 80193ae:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80193b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	7b9b      	ldrb	r3, [r3, #14]
 80193b6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80193b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	7bdb      	ldrb	r3, [r3, #15]
 80193be:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80193c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	7a5b      	ldrb	r3, [r3, #9]
 80193c6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80193c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80193ca:	687b      	ldr	r3, [r7, #4]
 80193cc:	7a1b      	ldrb	r3, [r3, #8]
 80193ce:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80193d0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80193d2:	687a      	ldr	r2, [r7, #4]
 80193d4:	7812      	ldrb	r2, [r2, #0]
 80193d6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80193d8:	4a04      	ldr	r2, [pc, #16]	@ (80193ec <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80193da:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80193dc:	6113      	str	r3, [r2, #16]
}
 80193de:	bf00      	nop
 80193e0:	370c      	adds	r7, #12
 80193e2:	46bd      	mov	sp, r7
 80193e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193e8:	4770      	bx	lr
 80193ea:	bf00      	nop
 80193ec:	e000ed90 	.word	0xe000ed90

080193f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80193f0:	b580      	push	{r7, lr}
 80193f2:	b086      	sub	sp, #24
 80193f4:	af00      	add	r7, sp, #0
 80193f6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80193f8:	f7ff fe46 	bl	8019088 <HAL_GetTick>
 80193fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	2b00      	cmp	r3, #0
 8019402:	d101      	bne.n	8019408 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8019404:	2301      	movs	r3, #1
 8019406:	e316      	b.n	8019a36 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	681b      	ldr	r3, [r3, #0]
 801940c:	4a66      	ldr	r2, [pc, #408]	@ (80195a8 <HAL_DMA_Init+0x1b8>)
 801940e:	4293      	cmp	r3, r2
 8019410:	d04a      	beq.n	80194a8 <HAL_DMA_Init+0xb8>
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	681b      	ldr	r3, [r3, #0]
 8019416:	4a65      	ldr	r2, [pc, #404]	@ (80195ac <HAL_DMA_Init+0x1bc>)
 8019418:	4293      	cmp	r3, r2
 801941a:	d045      	beq.n	80194a8 <HAL_DMA_Init+0xb8>
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	681b      	ldr	r3, [r3, #0]
 8019420:	4a63      	ldr	r2, [pc, #396]	@ (80195b0 <HAL_DMA_Init+0x1c0>)
 8019422:	4293      	cmp	r3, r2
 8019424:	d040      	beq.n	80194a8 <HAL_DMA_Init+0xb8>
 8019426:	687b      	ldr	r3, [r7, #4]
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	4a62      	ldr	r2, [pc, #392]	@ (80195b4 <HAL_DMA_Init+0x1c4>)
 801942c:	4293      	cmp	r3, r2
 801942e:	d03b      	beq.n	80194a8 <HAL_DMA_Init+0xb8>
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	681b      	ldr	r3, [r3, #0]
 8019434:	4a60      	ldr	r2, [pc, #384]	@ (80195b8 <HAL_DMA_Init+0x1c8>)
 8019436:	4293      	cmp	r3, r2
 8019438:	d036      	beq.n	80194a8 <HAL_DMA_Init+0xb8>
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	681b      	ldr	r3, [r3, #0]
 801943e:	4a5f      	ldr	r2, [pc, #380]	@ (80195bc <HAL_DMA_Init+0x1cc>)
 8019440:	4293      	cmp	r3, r2
 8019442:	d031      	beq.n	80194a8 <HAL_DMA_Init+0xb8>
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	681b      	ldr	r3, [r3, #0]
 8019448:	4a5d      	ldr	r2, [pc, #372]	@ (80195c0 <HAL_DMA_Init+0x1d0>)
 801944a:	4293      	cmp	r3, r2
 801944c:	d02c      	beq.n	80194a8 <HAL_DMA_Init+0xb8>
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	681b      	ldr	r3, [r3, #0]
 8019452:	4a5c      	ldr	r2, [pc, #368]	@ (80195c4 <HAL_DMA_Init+0x1d4>)
 8019454:	4293      	cmp	r3, r2
 8019456:	d027      	beq.n	80194a8 <HAL_DMA_Init+0xb8>
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	681b      	ldr	r3, [r3, #0]
 801945c:	4a5a      	ldr	r2, [pc, #360]	@ (80195c8 <HAL_DMA_Init+0x1d8>)
 801945e:	4293      	cmp	r3, r2
 8019460:	d022      	beq.n	80194a8 <HAL_DMA_Init+0xb8>
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	681b      	ldr	r3, [r3, #0]
 8019466:	4a59      	ldr	r2, [pc, #356]	@ (80195cc <HAL_DMA_Init+0x1dc>)
 8019468:	4293      	cmp	r3, r2
 801946a:	d01d      	beq.n	80194a8 <HAL_DMA_Init+0xb8>
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	4a57      	ldr	r2, [pc, #348]	@ (80195d0 <HAL_DMA_Init+0x1e0>)
 8019472:	4293      	cmp	r3, r2
 8019474:	d018      	beq.n	80194a8 <HAL_DMA_Init+0xb8>
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	681b      	ldr	r3, [r3, #0]
 801947a:	4a56      	ldr	r2, [pc, #344]	@ (80195d4 <HAL_DMA_Init+0x1e4>)
 801947c:	4293      	cmp	r3, r2
 801947e:	d013      	beq.n	80194a8 <HAL_DMA_Init+0xb8>
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	681b      	ldr	r3, [r3, #0]
 8019484:	4a54      	ldr	r2, [pc, #336]	@ (80195d8 <HAL_DMA_Init+0x1e8>)
 8019486:	4293      	cmp	r3, r2
 8019488:	d00e      	beq.n	80194a8 <HAL_DMA_Init+0xb8>
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	681b      	ldr	r3, [r3, #0]
 801948e:	4a53      	ldr	r2, [pc, #332]	@ (80195dc <HAL_DMA_Init+0x1ec>)
 8019490:	4293      	cmp	r3, r2
 8019492:	d009      	beq.n	80194a8 <HAL_DMA_Init+0xb8>
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	681b      	ldr	r3, [r3, #0]
 8019498:	4a51      	ldr	r2, [pc, #324]	@ (80195e0 <HAL_DMA_Init+0x1f0>)
 801949a:	4293      	cmp	r3, r2
 801949c:	d004      	beq.n	80194a8 <HAL_DMA_Init+0xb8>
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	4a50      	ldr	r2, [pc, #320]	@ (80195e4 <HAL_DMA_Init+0x1f4>)
 80194a4:	4293      	cmp	r3, r2
 80194a6:	d101      	bne.n	80194ac <HAL_DMA_Init+0xbc>
 80194a8:	2301      	movs	r3, #1
 80194aa:	e000      	b.n	80194ae <HAL_DMA_Init+0xbe>
 80194ac:	2300      	movs	r3, #0
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	f000 813b 	beq.w	801972a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80194b4:	687b      	ldr	r3, [r7, #4]
 80194b6:	2202      	movs	r2, #2
 80194b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	2200      	movs	r2, #0
 80194c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	681b      	ldr	r3, [r3, #0]
 80194c8:	4a37      	ldr	r2, [pc, #220]	@ (80195a8 <HAL_DMA_Init+0x1b8>)
 80194ca:	4293      	cmp	r3, r2
 80194cc:	d04a      	beq.n	8019564 <HAL_DMA_Init+0x174>
 80194ce:	687b      	ldr	r3, [r7, #4]
 80194d0:	681b      	ldr	r3, [r3, #0]
 80194d2:	4a36      	ldr	r2, [pc, #216]	@ (80195ac <HAL_DMA_Init+0x1bc>)
 80194d4:	4293      	cmp	r3, r2
 80194d6:	d045      	beq.n	8019564 <HAL_DMA_Init+0x174>
 80194d8:	687b      	ldr	r3, [r7, #4]
 80194da:	681b      	ldr	r3, [r3, #0]
 80194dc:	4a34      	ldr	r2, [pc, #208]	@ (80195b0 <HAL_DMA_Init+0x1c0>)
 80194de:	4293      	cmp	r3, r2
 80194e0:	d040      	beq.n	8019564 <HAL_DMA_Init+0x174>
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	681b      	ldr	r3, [r3, #0]
 80194e6:	4a33      	ldr	r2, [pc, #204]	@ (80195b4 <HAL_DMA_Init+0x1c4>)
 80194e8:	4293      	cmp	r3, r2
 80194ea:	d03b      	beq.n	8019564 <HAL_DMA_Init+0x174>
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	681b      	ldr	r3, [r3, #0]
 80194f0:	4a31      	ldr	r2, [pc, #196]	@ (80195b8 <HAL_DMA_Init+0x1c8>)
 80194f2:	4293      	cmp	r3, r2
 80194f4:	d036      	beq.n	8019564 <HAL_DMA_Init+0x174>
 80194f6:	687b      	ldr	r3, [r7, #4]
 80194f8:	681b      	ldr	r3, [r3, #0]
 80194fa:	4a30      	ldr	r2, [pc, #192]	@ (80195bc <HAL_DMA_Init+0x1cc>)
 80194fc:	4293      	cmp	r3, r2
 80194fe:	d031      	beq.n	8019564 <HAL_DMA_Init+0x174>
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	681b      	ldr	r3, [r3, #0]
 8019504:	4a2e      	ldr	r2, [pc, #184]	@ (80195c0 <HAL_DMA_Init+0x1d0>)
 8019506:	4293      	cmp	r3, r2
 8019508:	d02c      	beq.n	8019564 <HAL_DMA_Init+0x174>
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	681b      	ldr	r3, [r3, #0]
 801950e:	4a2d      	ldr	r2, [pc, #180]	@ (80195c4 <HAL_DMA_Init+0x1d4>)
 8019510:	4293      	cmp	r3, r2
 8019512:	d027      	beq.n	8019564 <HAL_DMA_Init+0x174>
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	681b      	ldr	r3, [r3, #0]
 8019518:	4a2b      	ldr	r2, [pc, #172]	@ (80195c8 <HAL_DMA_Init+0x1d8>)
 801951a:	4293      	cmp	r3, r2
 801951c:	d022      	beq.n	8019564 <HAL_DMA_Init+0x174>
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	681b      	ldr	r3, [r3, #0]
 8019522:	4a2a      	ldr	r2, [pc, #168]	@ (80195cc <HAL_DMA_Init+0x1dc>)
 8019524:	4293      	cmp	r3, r2
 8019526:	d01d      	beq.n	8019564 <HAL_DMA_Init+0x174>
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	681b      	ldr	r3, [r3, #0]
 801952c:	4a28      	ldr	r2, [pc, #160]	@ (80195d0 <HAL_DMA_Init+0x1e0>)
 801952e:	4293      	cmp	r3, r2
 8019530:	d018      	beq.n	8019564 <HAL_DMA_Init+0x174>
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	681b      	ldr	r3, [r3, #0]
 8019536:	4a27      	ldr	r2, [pc, #156]	@ (80195d4 <HAL_DMA_Init+0x1e4>)
 8019538:	4293      	cmp	r3, r2
 801953a:	d013      	beq.n	8019564 <HAL_DMA_Init+0x174>
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	681b      	ldr	r3, [r3, #0]
 8019540:	4a25      	ldr	r2, [pc, #148]	@ (80195d8 <HAL_DMA_Init+0x1e8>)
 8019542:	4293      	cmp	r3, r2
 8019544:	d00e      	beq.n	8019564 <HAL_DMA_Init+0x174>
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	681b      	ldr	r3, [r3, #0]
 801954a:	4a24      	ldr	r2, [pc, #144]	@ (80195dc <HAL_DMA_Init+0x1ec>)
 801954c:	4293      	cmp	r3, r2
 801954e:	d009      	beq.n	8019564 <HAL_DMA_Init+0x174>
 8019550:	687b      	ldr	r3, [r7, #4]
 8019552:	681b      	ldr	r3, [r3, #0]
 8019554:	4a22      	ldr	r2, [pc, #136]	@ (80195e0 <HAL_DMA_Init+0x1f0>)
 8019556:	4293      	cmp	r3, r2
 8019558:	d004      	beq.n	8019564 <HAL_DMA_Init+0x174>
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	681b      	ldr	r3, [r3, #0]
 801955e:	4a21      	ldr	r2, [pc, #132]	@ (80195e4 <HAL_DMA_Init+0x1f4>)
 8019560:	4293      	cmp	r3, r2
 8019562:	d108      	bne.n	8019576 <HAL_DMA_Init+0x186>
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	681b      	ldr	r3, [r3, #0]
 8019568:	681a      	ldr	r2, [r3, #0]
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	681b      	ldr	r3, [r3, #0]
 801956e:	f022 0201 	bic.w	r2, r2, #1
 8019572:	601a      	str	r2, [r3, #0]
 8019574:	e007      	b.n	8019586 <HAL_DMA_Init+0x196>
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	681b      	ldr	r3, [r3, #0]
 801957a:	681a      	ldr	r2, [r3, #0]
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	681b      	ldr	r3, [r3, #0]
 8019580:	f022 0201 	bic.w	r2, r2, #1
 8019584:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8019586:	e02f      	b.n	80195e8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8019588:	f7ff fd7e 	bl	8019088 <HAL_GetTick>
 801958c:	4602      	mov	r2, r0
 801958e:	693b      	ldr	r3, [r7, #16]
 8019590:	1ad3      	subs	r3, r2, r3
 8019592:	2b05      	cmp	r3, #5
 8019594:	d928      	bls.n	80195e8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	2220      	movs	r2, #32
 801959a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	2203      	movs	r2, #3
 80195a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80195a4:	2301      	movs	r3, #1
 80195a6:	e246      	b.n	8019a36 <HAL_DMA_Init+0x646>
 80195a8:	40020010 	.word	0x40020010
 80195ac:	40020028 	.word	0x40020028
 80195b0:	40020040 	.word	0x40020040
 80195b4:	40020058 	.word	0x40020058
 80195b8:	40020070 	.word	0x40020070
 80195bc:	40020088 	.word	0x40020088
 80195c0:	400200a0 	.word	0x400200a0
 80195c4:	400200b8 	.word	0x400200b8
 80195c8:	40020410 	.word	0x40020410
 80195cc:	40020428 	.word	0x40020428
 80195d0:	40020440 	.word	0x40020440
 80195d4:	40020458 	.word	0x40020458
 80195d8:	40020470 	.word	0x40020470
 80195dc:	40020488 	.word	0x40020488
 80195e0:	400204a0 	.word	0x400204a0
 80195e4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	681b      	ldr	r3, [r3, #0]
 80195ec:	681b      	ldr	r3, [r3, #0]
 80195ee:	f003 0301 	and.w	r3, r3, #1
 80195f2:	2b00      	cmp	r3, #0
 80195f4:	d1c8      	bne.n	8019588 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	681b      	ldr	r3, [r3, #0]
 80195fc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80195fe:	697a      	ldr	r2, [r7, #20]
 8019600:	4b83      	ldr	r3, [pc, #524]	@ (8019810 <HAL_DMA_Init+0x420>)
 8019602:	4013      	ands	r3, r2
 8019604:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 801960e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	691b      	ldr	r3, [r3, #16]
 8019614:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801961a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	699b      	ldr	r3, [r3, #24]
 8019620:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8019626:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	6a1b      	ldr	r3, [r3, #32]
 801962c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 801962e:	697a      	ldr	r2, [r7, #20]
 8019630:	4313      	orrs	r3, r2
 8019632:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8019634:	687b      	ldr	r3, [r7, #4]
 8019636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019638:	2b04      	cmp	r3, #4
 801963a:	d107      	bne.n	801964c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019644:	4313      	orrs	r3, r2
 8019646:	697a      	ldr	r2, [r7, #20]
 8019648:	4313      	orrs	r3, r2
 801964a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 801964c:	4b71      	ldr	r3, [pc, #452]	@ (8019814 <HAL_DMA_Init+0x424>)
 801964e:	681a      	ldr	r2, [r3, #0]
 8019650:	4b71      	ldr	r3, [pc, #452]	@ (8019818 <HAL_DMA_Init+0x428>)
 8019652:	4013      	ands	r3, r2
 8019654:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8019658:	d328      	bcc.n	80196ac <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	685b      	ldr	r3, [r3, #4]
 801965e:	2b28      	cmp	r3, #40	@ 0x28
 8019660:	d903      	bls.n	801966a <HAL_DMA_Init+0x27a>
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	685b      	ldr	r3, [r3, #4]
 8019666:	2b2e      	cmp	r3, #46	@ 0x2e
 8019668:	d917      	bls.n	801969a <HAL_DMA_Init+0x2aa>
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	685b      	ldr	r3, [r3, #4]
 801966e:	2b3e      	cmp	r3, #62	@ 0x3e
 8019670:	d903      	bls.n	801967a <HAL_DMA_Init+0x28a>
 8019672:	687b      	ldr	r3, [r7, #4]
 8019674:	685b      	ldr	r3, [r3, #4]
 8019676:	2b42      	cmp	r3, #66	@ 0x42
 8019678:	d90f      	bls.n	801969a <HAL_DMA_Init+0x2aa>
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	685b      	ldr	r3, [r3, #4]
 801967e:	2b46      	cmp	r3, #70	@ 0x46
 8019680:	d903      	bls.n	801968a <HAL_DMA_Init+0x29a>
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	685b      	ldr	r3, [r3, #4]
 8019686:	2b48      	cmp	r3, #72	@ 0x48
 8019688:	d907      	bls.n	801969a <HAL_DMA_Init+0x2aa>
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	685b      	ldr	r3, [r3, #4]
 801968e:	2b4e      	cmp	r3, #78	@ 0x4e
 8019690:	d905      	bls.n	801969e <HAL_DMA_Init+0x2ae>
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	685b      	ldr	r3, [r3, #4]
 8019696:	2b52      	cmp	r3, #82	@ 0x52
 8019698:	d801      	bhi.n	801969e <HAL_DMA_Init+0x2ae>
 801969a:	2301      	movs	r3, #1
 801969c:	e000      	b.n	80196a0 <HAL_DMA_Init+0x2b0>
 801969e:	2300      	movs	r3, #0
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	d003      	beq.n	80196ac <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80196a4:	697b      	ldr	r3, [r7, #20]
 80196a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80196aa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	681b      	ldr	r3, [r3, #0]
 80196b0:	697a      	ldr	r2, [r7, #20]
 80196b2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80196b4:	687b      	ldr	r3, [r7, #4]
 80196b6:	681b      	ldr	r3, [r3, #0]
 80196b8:	695b      	ldr	r3, [r3, #20]
 80196ba:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80196bc:	697b      	ldr	r3, [r7, #20]
 80196be:	f023 0307 	bic.w	r3, r3, #7
 80196c2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80196c8:	697a      	ldr	r2, [r7, #20]
 80196ca:	4313      	orrs	r3, r2
 80196cc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80196d2:	2b04      	cmp	r3, #4
 80196d4:	d117      	bne.n	8019706 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80196da:	697a      	ldr	r2, [r7, #20]
 80196dc:	4313      	orrs	r3, r2
 80196de:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	d00e      	beq.n	8019706 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80196e8:	6878      	ldr	r0, [r7, #4]
 80196ea:	f001 fbff 	bl	801aeec <DMA_CheckFifoParam>
 80196ee:	4603      	mov	r3, r0
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	d008      	beq.n	8019706 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80196f4:	687b      	ldr	r3, [r7, #4]
 80196f6:	2240      	movs	r2, #64	@ 0x40
 80196f8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80196fa:	687b      	ldr	r3, [r7, #4]
 80196fc:	2201      	movs	r2, #1
 80196fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8019702:	2301      	movs	r3, #1
 8019704:	e197      	b.n	8019a36 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	681b      	ldr	r3, [r3, #0]
 801970a:	697a      	ldr	r2, [r7, #20]
 801970c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801970e:	6878      	ldr	r0, [r7, #4]
 8019710:	f001 fb3a 	bl	801ad88 <DMA_CalcBaseAndBitshift>
 8019714:	4603      	mov	r3, r0
 8019716:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801971c:	f003 031f 	and.w	r3, r3, #31
 8019720:	223f      	movs	r2, #63	@ 0x3f
 8019722:	409a      	lsls	r2, r3
 8019724:	68bb      	ldr	r3, [r7, #8]
 8019726:	609a      	str	r2, [r3, #8]
 8019728:	e0cd      	b.n	80198c6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	681b      	ldr	r3, [r3, #0]
 801972e:	4a3b      	ldr	r2, [pc, #236]	@ (801981c <HAL_DMA_Init+0x42c>)
 8019730:	4293      	cmp	r3, r2
 8019732:	d022      	beq.n	801977a <HAL_DMA_Init+0x38a>
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	681b      	ldr	r3, [r3, #0]
 8019738:	4a39      	ldr	r2, [pc, #228]	@ (8019820 <HAL_DMA_Init+0x430>)
 801973a:	4293      	cmp	r3, r2
 801973c:	d01d      	beq.n	801977a <HAL_DMA_Init+0x38a>
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	681b      	ldr	r3, [r3, #0]
 8019742:	4a38      	ldr	r2, [pc, #224]	@ (8019824 <HAL_DMA_Init+0x434>)
 8019744:	4293      	cmp	r3, r2
 8019746:	d018      	beq.n	801977a <HAL_DMA_Init+0x38a>
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	681b      	ldr	r3, [r3, #0]
 801974c:	4a36      	ldr	r2, [pc, #216]	@ (8019828 <HAL_DMA_Init+0x438>)
 801974e:	4293      	cmp	r3, r2
 8019750:	d013      	beq.n	801977a <HAL_DMA_Init+0x38a>
 8019752:	687b      	ldr	r3, [r7, #4]
 8019754:	681b      	ldr	r3, [r3, #0]
 8019756:	4a35      	ldr	r2, [pc, #212]	@ (801982c <HAL_DMA_Init+0x43c>)
 8019758:	4293      	cmp	r3, r2
 801975a:	d00e      	beq.n	801977a <HAL_DMA_Init+0x38a>
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	4a33      	ldr	r2, [pc, #204]	@ (8019830 <HAL_DMA_Init+0x440>)
 8019762:	4293      	cmp	r3, r2
 8019764:	d009      	beq.n	801977a <HAL_DMA_Init+0x38a>
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	681b      	ldr	r3, [r3, #0]
 801976a:	4a32      	ldr	r2, [pc, #200]	@ (8019834 <HAL_DMA_Init+0x444>)
 801976c:	4293      	cmp	r3, r2
 801976e:	d004      	beq.n	801977a <HAL_DMA_Init+0x38a>
 8019770:	687b      	ldr	r3, [r7, #4]
 8019772:	681b      	ldr	r3, [r3, #0]
 8019774:	4a30      	ldr	r2, [pc, #192]	@ (8019838 <HAL_DMA_Init+0x448>)
 8019776:	4293      	cmp	r3, r2
 8019778:	d101      	bne.n	801977e <HAL_DMA_Init+0x38e>
 801977a:	2301      	movs	r3, #1
 801977c:	e000      	b.n	8019780 <HAL_DMA_Init+0x390>
 801977e:	2300      	movs	r3, #0
 8019780:	2b00      	cmp	r3, #0
 8019782:	f000 8097 	beq.w	80198b4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8019786:	687b      	ldr	r3, [r7, #4]
 8019788:	681b      	ldr	r3, [r3, #0]
 801978a:	4a24      	ldr	r2, [pc, #144]	@ (801981c <HAL_DMA_Init+0x42c>)
 801978c:	4293      	cmp	r3, r2
 801978e:	d021      	beq.n	80197d4 <HAL_DMA_Init+0x3e4>
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	681b      	ldr	r3, [r3, #0]
 8019794:	4a22      	ldr	r2, [pc, #136]	@ (8019820 <HAL_DMA_Init+0x430>)
 8019796:	4293      	cmp	r3, r2
 8019798:	d01c      	beq.n	80197d4 <HAL_DMA_Init+0x3e4>
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	681b      	ldr	r3, [r3, #0]
 801979e:	4a21      	ldr	r2, [pc, #132]	@ (8019824 <HAL_DMA_Init+0x434>)
 80197a0:	4293      	cmp	r3, r2
 80197a2:	d017      	beq.n	80197d4 <HAL_DMA_Init+0x3e4>
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	681b      	ldr	r3, [r3, #0]
 80197a8:	4a1f      	ldr	r2, [pc, #124]	@ (8019828 <HAL_DMA_Init+0x438>)
 80197aa:	4293      	cmp	r3, r2
 80197ac:	d012      	beq.n	80197d4 <HAL_DMA_Init+0x3e4>
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	4a1e      	ldr	r2, [pc, #120]	@ (801982c <HAL_DMA_Init+0x43c>)
 80197b4:	4293      	cmp	r3, r2
 80197b6:	d00d      	beq.n	80197d4 <HAL_DMA_Init+0x3e4>
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	681b      	ldr	r3, [r3, #0]
 80197bc:	4a1c      	ldr	r2, [pc, #112]	@ (8019830 <HAL_DMA_Init+0x440>)
 80197be:	4293      	cmp	r3, r2
 80197c0:	d008      	beq.n	80197d4 <HAL_DMA_Init+0x3e4>
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	681b      	ldr	r3, [r3, #0]
 80197c6:	4a1b      	ldr	r2, [pc, #108]	@ (8019834 <HAL_DMA_Init+0x444>)
 80197c8:	4293      	cmp	r3, r2
 80197ca:	d003      	beq.n	80197d4 <HAL_DMA_Init+0x3e4>
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	681b      	ldr	r3, [r3, #0]
 80197d0:	4a19      	ldr	r2, [pc, #100]	@ (8019838 <HAL_DMA_Init+0x448>)
 80197d2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	2202      	movs	r2, #2
 80197d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	2200      	movs	r2, #0
 80197e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	681b      	ldr	r3, [r3, #0]
 80197e8:	681b      	ldr	r3, [r3, #0]
 80197ea:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80197ec:	697a      	ldr	r2, [r7, #20]
 80197ee:	4b13      	ldr	r3, [pc, #76]	@ (801983c <HAL_DMA_Init+0x44c>)
 80197f0:	4013      	ands	r3, r2
 80197f2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	689b      	ldr	r3, [r3, #8]
 80197f8:	2b40      	cmp	r3, #64	@ 0x40
 80197fa:	d021      	beq.n	8019840 <HAL_DMA_Init+0x450>
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	689b      	ldr	r3, [r3, #8]
 8019800:	2b80      	cmp	r3, #128	@ 0x80
 8019802:	d102      	bne.n	801980a <HAL_DMA_Init+0x41a>
 8019804:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8019808:	e01b      	b.n	8019842 <HAL_DMA_Init+0x452>
 801980a:	2300      	movs	r3, #0
 801980c:	e019      	b.n	8019842 <HAL_DMA_Init+0x452>
 801980e:	bf00      	nop
 8019810:	fe10803f 	.word	0xfe10803f
 8019814:	5c001000 	.word	0x5c001000
 8019818:	ffff0000 	.word	0xffff0000
 801981c:	58025408 	.word	0x58025408
 8019820:	5802541c 	.word	0x5802541c
 8019824:	58025430 	.word	0x58025430
 8019828:	58025444 	.word	0x58025444
 801982c:	58025458 	.word	0x58025458
 8019830:	5802546c 	.word	0x5802546c
 8019834:	58025480 	.word	0x58025480
 8019838:	58025494 	.word	0x58025494
 801983c:	fffe000f 	.word	0xfffe000f
 8019840:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8019842:	687a      	ldr	r2, [r7, #4]
 8019844:	68d2      	ldr	r2, [r2, #12]
 8019846:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8019848:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	691b      	ldr	r3, [r3, #16]
 801984e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8019850:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	695b      	ldr	r3, [r3, #20]
 8019856:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8019858:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	699b      	ldr	r3, [r3, #24]
 801985e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8019860:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	69db      	ldr	r3, [r3, #28]
 8019866:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8019868:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	6a1b      	ldr	r3, [r3, #32]
 801986e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8019870:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8019872:	697a      	ldr	r2, [r7, #20]
 8019874:	4313      	orrs	r3, r2
 8019876:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	681b      	ldr	r3, [r3, #0]
 801987c:	697a      	ldr	r2, [r7, #20]
 801987e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	681b      	ldr	r3, [r3, #0]
 8019884:	461a      	mov	r2, r3
 8019886:	4b6e      	ldr	r3, [pc, #440]	@ (8019a40 <HAL_DMA_Init+0x650>)
 8019888:	4413      	add	r3, r2
 801988a:	4a6e      	ldr	r2, [pc, #440]	@ (8019a44 <HAL_DMA_Init+0x654>)
 801988c:	fba2 2303 	umull	r2, r3, r2, r3
 8019890:	091b      	lsrs	r3, r3, #4
 8019892:	009a      	lsls	r2, r3, #2
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8019898:	6878      	ldr	r0, [r7, #4]
 801989a:	f001 fa75 	bl	801ad88 <DMA_CalcBaseAndBitshift>
 801989e:	4603      	mov	r3, r0
 80198a0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80198a6:	f003 031f 	and.w	r3, r3, #31
 80198aa:	2201      	movs	r2, #1
 80198ac:	409a      	lsls	r2, r3
 80198ae:	68fb      	ldr	r3, [r7, #12]
 80198b0:	605a      	str	r2, [r3, #4]
 80198b2:	e008      	b.n	80198c6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	2240      	movs	r2, #64	@ 0x40
 80198b8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	2203      	movs	r2, #3
 80198be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80198c2:	2301      	movs	r3, #1
 80198c4:	e0b7      	b.n	8019a36 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	4a5f      	ldr	r2, [pc, #380]	@ (8019a48 <HAL_DMA_Init+0x658>)
 80198cc:	4293      	cmp	r3, r2
 80198ce:	d072      	beq.n	80199b6 <HAL_DMA_Init+0x5c6>
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	681b      	ldr	r3, [r3, #0]
 80198d4:	4a5d      	ldr	r2, [pc, #372]	@ (8019a4c <HAL_DMA_Init+0x65c>)
 80198d6:	4293      	cmp	r3, r2
 80198d8:	d06d      	beq.n	80199b6 <HAL_DMA_Init+0x5c6>
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	681b      	ldr	r3, [r3, #0]
 80198de:	4a5c      	ldr	r2, [pc, #368]	@ (8019a50 <HAL_DMA_Init+0x660>)
 80198e0:	4293      	cmp	r3, r2
 80198e2:	d068      	beq.n	80199b6 <HAL_DMA_Init+0x5c6>
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	681b      	ldr	r3, [r3, #0]
 80198e8:	4a5a      	ldr	r2, [pc, #360]	@ (8019a54 <HAL_DMA_Init+0x664>)
 80198ea:	4293      	cmp	r3, r2
 80198ec:	d063      	beq.n	80199b6 <HAL_DMA_Init+0x5c6>
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	681b      	ldr	r3, [r3, #0]
 80198f2:	4a59      	ldr	r2, [pc, #356]	@ (8019a58 <HAL_DMA_Init+0x668>)
 80198f4:	4293      	cmp	r3, r2
 80198f6:	d05e      	beq.n	80199b6 <HAL_DMA_Init+0x5c6>
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	681b      	ldr	r3, [r3, #0]
 80198fc:	4a57      	ldr	r2, [pc, #348]	@ (8019a5c <HAL_DMA_Init+0x66c>)
 80198fe:	4293      	cmp	r3, r2
 8019900:	d059      	beq.n	80199b6 <HAL_DMA_Init+0x5c6>
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	681b      	ldr	r3, [r3, #0]
 8019906:	4a56      	ldr	r2, [pc, #344]	@ (8019a60 <HAL_DMA_Init+0x670>)
 8019908:	4293      	cmp	r3, r2
 801990a:	d054      	beq.n	80199b6 <HAL_DMA_Init+0x5c6>
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	681b      	ldr	r3, [r3, #0]
 8019910:	4a54      	ldr	r2, [pc, #336]	@ (8019a64 <HAL_DMA_Init+0x674>)
 8019912:	4293      	cmp	r3, r2
 8019914:	d04f      	beq.n	80199b6 <HAL_DMA_Init+0x5c6>
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	681b      	ldr	r3, [r3, #0]
 801991a:	4a53      	ldr	r2, [pc, #332]	@ (8019a68 <HAL_DMA_Init+0x678>)
 801991c:	4293      	cmp	r3, r2
 801991e:	d04a      	beq.n	80199b6 <HAL_DMA_Init+0x5c6>
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	681b      	ldr	r3, [r3, #0]
 8019924:	4a51      	ldr	r2, [pc, #324]	@ (8019a6c <HAL_DMA_Init+0x67c>)
 8019926:	4293      	cmp	r3, r2
 8019928:	d045      	beq.n	80199b6 <HAL_DMA_Init+0x5c6>
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	681b      	ldr	r3, [r3, #0]
 801992e:	4a50      	ldr	r2, [pc, #320]	@ (8019a70 <HAL_DMA_Init+0x680>)
 8019930:	4293      	cmp	r3, r2
 8019932:	d040      	beq.n	80199b6 <HAL_DMA_Init+0x5c6>
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	681b      	ldr	r3, [r3, #0]
 8019938:	4a4e      	ldr	r2, [pc, #312]	@ (8019a74 <HAL_DMA_Init+0x684>)
 801993a:	4293      	cmp	r3, r2
 801993c:	d03b      	beq.n	80199b6 <HAL_DMA_Init+0x5c6>
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	681b      	ldr	r3, [r3, #0]
 8019942:	4a4d      	ldr	r2, [pc, #308]	@ (8019a78 <HAL_DMA_Init+0x688>)
 8019944:	4293      	cmp	r3, r2
 8019946:	d036      	beq.n	80199b6 <HAL_DMA_Init+0x5c6>
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	681b      	ldr	r3, [r3, #0]
 801994c:	4a4b      	ldr	r2, [pc, #300]	@ (8019a7c <HAL_DMA_Init+0x68c>)
 801994e:	4293      	cmp	r3, r2
 8019950:	d031      	beq.n	80199b6 <HAL_DMA_Init+0x5c6>
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	681b      	ldr	r3, [r3, #0]
 8019956:	4a4a      	ldr	r2, [pc, #296]	@ (8019a80 <HAL_DMA_Init+0x690>)
 8019958:	4293      	cmp	r3, r2
 801995a:	d02c      	beq.n	80199b6 <HAL_DMA_Init+0x5c6>
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	681b      	ldr	r3, [r3, #0]
 8019960:	4a48      	ldr	r2, [pc, #288]	@ (8019a84 <HAL_DMA_Init+0x694>)
 8019962:	4293      	cmp	r3, r2
 8019964:	d027      	beq.n	80199b6 <HAL_DMA_Init+0x5c6>
 8019966:	687b      	ldr	r3, [r7, #4]
 8019968:	681b      	ldr	r3, [r3, #0]
 801996a:	4a47      	ldr	r2, [pc, #284]	@ (8019a88 <HAL_DMA_Init+0x698>)
 801996c:	4293      	cmp	r3, r2
 801996e:	d022      	beq.n	80199b6 <HAL_DMA_Init+0x5c6>
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	681b      	ldr	r3, [r3, #0]
 8019974:	4a45      	ldr	r2, [pc, #276]	@ (8019a8c <HAL_DMA_Init+0x69c>)
 8019976:	4293      	cmp	r3, r2
 8019978:	d01d      	beq.n	80199b6 <HAL_DMA_Init+0x5c6>
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	681b      	ldr	r3, [r3, #0]
 801997e:	4a44      	ldr	r2, [pc, #272]	@ (8019a90 <HAL_DMA_Init+0x6a0>)
 8019980:	4293      	cmp	r3, r2
 8019982:	d018      	beq.n	80199b6 <HAL_DMA_Init+0x5c6>
 8019984:	687b      	ldr	r3, [r7, #4]
 8019986:	681b      	ldr	r3, [r3, #0]
 8019988:	4a42      	ldr	r2, [pc, #264]	@ (8019a94 <HAL_DMA_Init+0x6a4>)
 801998a:	4293      	cmp	r3, r2
 801998c:	d013      	beq.n	80199b6 <HAL_DMA_Init+0x5c6>
 801998e:	687b      	ldr	r3, [r7, #4]
 8019990:	681b      	ldr	r3, [r3, #0]
 8019992:	4a41      	ldr	r2, [pc, #260]	@ (8019a98 <HAL_DMA_Init+0x6a8>)
 8019994:	4293      	cmp	r3, r2
 8019996:	d00e      	beq.n	80199b6 <HAL_DMA_Init+0x5c6>
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	681b      	ldr	r3, [r3, #0]
 801999c:	4a3f      	ldr	r2, [pc, #252]	@ (8019a9c <HAL_DMA_Init+0x6ac>)
 801999e:	4293      	cmp	r3, r2
 80199a0:	d009      	beq.n	80199b6 <HAL_DMA_Init+0x5c6>
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	681b      	ldr	r3, [r3, #0]
 80199a6:	4a3e      	ldr	r2, [pc, #248]	@ (8019aa0 <HAL_DMA_Init+0x6b0>)
 80199a8:	4293      	cmp	r3, r2
 80199aa:	d004      	beq.n	80199b6 <HAL_DMA_Init+0x5c6>
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	681b      	ldr	r3, [r3, #0]
 80199b0:	4a3c      	ldr	r2, [pc, #240]	@ (8019aa4 <HAL_DMA_Init+0x6b4>)
 80199b2:	4293      	cmp	r3, r2
 80199b4:	d101      	bne.n	80199ba <HAL_DMA_Init+0x5ca>
 80199b6:	2301      	movs	r3, #1
 80199b8:	e000      	b.n	80199bc <HAL_DMA_Init+0x5cc>
 80199ba:	2300      	movs	r3, #0
 80199bc:	2b00      	cmp	r3, #0
 80199be:	d032      	beq.n	8019a26 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80199c0:	6878      	ldr	r0, [r7, #4]
 80199c2:	f001 fb0f 	bl	801afe4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	689b      	ldr	r3, [r3, #8]
 80199ca:	2b80      	cmp	r3, #128	@ 0x80
 80199cc:	d102      	bne.n	80199d4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	2200      	movs	r2, #0
 80199d2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	685a      	ldr	r2, [r3, #4]
 80199d8:	687b      	ldr	r3, [r7, #4]
 80199da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80199dc:	b2d2      	uxtb	r2, r2
 80199de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80199e0:	687b      	ldr	r3, [r7, #4]
 80199e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80199e4:	687a      	ldr	r2, [r7, #4]
 80199e6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80199e8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	685b      	ldr	r3, [r3, #4]
 80199ee:	2b00      	cmp	r3, #0
 80199f0:	d010      	beq.n	8019a14 <HAL_DMA_Init+0x624>
 80199f2:	687b      	ldr	r3, [r7, #4]
 80199f4:	685b      	ldr	r3, [r3, #4]
 80199f6:	2b08      	cmp	r3, #8
 80199f8:	d80c      	bhi.n	8019a14 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80199fa:	6878      	ldr	r0, [r7, #4]
 80199fc:	f001 fb8c 	bl	801b118 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8019a00:	687b      	ldr	r3, [r7, #4]
 8019a02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019a04:	2200      	movs	r2, #0
 8019a06:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019a0c:	687a      	ldr	r2, [r7, #4]
 8019a0e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8019a10:	605a      	str	r2, [r3, #4]
 8019a12:	e008      	b.n	8019a26 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8019a14:	687b      	ldr	r3, [r7, #4]
 8019a16:	2200      	movs	r2, #0
 8019a18:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	2200      	movs	r2, #0
 8019a1e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8019a20:	687b      	ldr	r3, [r7, #4]
 8019a22:	2200      	movs	r2, #0
 8019a24:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8019a26:	687b      	ldr	r3, [r7, #4]
 8019a28:	2200      	movs	r2, #0
 8019a2a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	2201      	movs	r2, #1
 8019a30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8019a34:	2300      	movs	r3, #0
}
 8019a36:	4618      	mov	r0, r3
 8019a38:	3718      	adds	r7, #24
 8019a3a:	46bd      	mov	sp, r7
 8019a3c:	bd80      	pop	{r7, pc}
 8019a3e:	bf00      	nop
 8019a40:	a7fdabf8 	.word	0xa7fdabf8
 8019a44:	cccccccd 	.word	0xcccccccd
 8019a48:	40020010 	.word	0x40020010
 8019a4c:	40020028 	.word	0x40020028
 8019a50:	40020040 	.word	0x40020040
 8019a54:	40020058 	.word	0x40020058
 8019a58:	40020070 	.word	0x40020070
 8019a5c:	40020088 	.word	0x40020088
 8019a60:	400200a0 	.word	0x400200a0
 8019a64:	400200b8 	.word	0x400200b8
 8019a68:	40020410 	.word	0x40020410
 8019a6c:	40020428 	.word	0x40020428
 8019a70:	40020440 	.word	0x40020440
 8019a74:	40020458 	.word	0x40020458
 8019a78:	40020470 	.word	0x40020470
 8019a7c:	40020488 	.word	0x40020488
 8019a80:	400204a0 	.word	0x400204a0
 8019a84:	400204b8 	.word	0x400204b8
 8019a88:	58025408 	.word	0x58025408
 8019a8c:	5802541c 	.word	0x5802541c
 8019a90:	58025430 	.word	0x58025430
 8019a94:	58025444 	.word	0x58025444
 8019a98:	58025458 	.word	0x58025458
 8019a9c:	5802546c 	.word	0x5802546c
 8019aa0:	58025480 	.word	0x58025480
 8019aa4:	58025494 	.word	0x58025494

08019aa8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8019aa8:	b580      	push	{r7, lr}
 8019aaa:	b084      	sub	sp, #16
 8019aac:	af00      	add	r7, sp, #0
 8019aae:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	2b00      	cmp	r3, #0
 8019ab4:	d101      	bne.n	8019aba <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8019ab6:	2301      	movs	r3, #1
 8019ab8:	e237      	b.n	8019f2a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8019ac0:	b2db      	uxtb	r3, r3
 8019ac2:	2b02      	cmp	r3, #2
 8019ac4:	d004      	beq.n	8019ad0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	2280      	movs	r2, #128	@ 0x80
 8019aca:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8019acc:	2301      	movs	r3, #1
 8019ace:	e22c      	b.n	8019f2a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	681b      	ldr	r3, [r3, #0]
 8019ad4:	4a5c      	ldr	r2, [pc, #368]	@ (8019c48 <HAL_DMA_Abort_IT+0x1a0>)
 8019ad6:	4293      	cmp	r3, r2
 8019ad8:	d04a      	beq.n	8019b70 <HAL_DMA_Abort_IT+0xc8>
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	681b      	ldr	r3, [r3, #0]
 8019ade:	4a5b      	ldr	r2, [pc, #364]	@ (8019c4c <HAL_DMA_Abort_IT+0x1a4>)
 8019ae0:	4293      	cmp	r3, r2
 8019ae2:	d045      	beq.n	8019b70 <HAL_DMA_Abort_IT+0xc8>
 8019ae4:	687b      	ldr	r3, [r7, #4]
 8019ae6:	681b      	ldr	r3, [r3, #0]
 8019ae8:	4a59      	ldr	r2, [pc, #356]	@ (8019c50 <HAL_DMA_Abort_IT+0x1a8>)
 8019aea:	4293      	cmp	r3, r2
 8019aec:	d040      	beq.n	8019b70 <HAL_DMA_Abort_IT+0xc8>
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	681b      	ldr	r3, [r3, #0]
 8019af2:	4a58      	ldr	r2, [pc, #352]	@ (8019c54 <HAL_DMA_Abort_IT+0x1ac>)
 8019af4:	4293      	cmp	r3, r2
 8019af6:	d03b      	beq.n	8019b70 <HAL_DMA_Abort_IT+0xc8>
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	681b      	ldr	r3, [r3, #0]
 8019afc:	4a56      	ldr	r2, [pc, #344]	@ (8019c58 <HAL_DMA_Abort_IT+0x1b0>)
 8019afe:	4293      	cmp	r3, r2
 8019b00:	d036      	beq.n	8019b70 <HAL_DMA_Abort_IT+0xc8>
 8019b02:	687b      	ldr	r3, [r7, #4]
 8019b04:	681b      	ldr	r3, [r3, #0]
 8019b06:	4a55      	ldr	r2, [pc, #340]	@ (8019c5c <HAL_DMA_Abort_IT+0x1b4>)
 8019b08:	4293      	cmp	r3, r2
 8019b0a:	d031      	beq.n	8019b70 <HAL_DMA_Abort_IT+0xc8>
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	681b      	ldr	r3, [r3, #0]
 8019b10:	4a53      	ldr	r2, [pc, #332]	@ (8019c60 <HAL_DMA_Abort_IT+0x1b8>)
 8019b12:	4293      	cmp	r3, r2
 8019b14:	d02c      	beq.n	8019b70 <HAL_DMA_Abort_IT+0xc8>
 8019b16:	687b      	ldr	r3, [r7, #4]
 8019b18:	681b      	ldr	r3, [r3, #0]
 8019b1a:	4a52      	ldr	r2, [pc, #328]	@ (8019c64 <HAL_DMA_Abort_IT+0x1bc>)
 8019b1c:	4293      	cmp	r3, r2
 8019b1e:	d027      	beq.n	8019b70 <HAL_DMA_Abort_IT+0xc8>
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	681b      	ldr	r3, [r3, #0]
 8019b24:	4a50      	ldr	r2, [pc, #320]	@ (8019c68 <HAL_DMA_Abort_IT+0x1c0>)
 8019b26:	4293      	cmp	r3, r2
 8019b28:	d022      	beq.n	8019b70 <HAL_DMA_Abort_IT+0xc8>
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	681b      	ldr	r3, [r3, #0]
 8019b2e:	4a4f      	ldr	r2, [pc, #316]	@ (8019c6c <HAL_DMA_Abort_IT+0x1c4>)
 8019b30:	4293      	cmp	r3, r2
 8019b32:	d01d      	beq.n	8019b70 <HAL_DMA_Abort_IT+0xc8>
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	681b      	ldr	r3, [r3, #0]
 8019b38:	4a4d      	ldr	r2, [pc, #308]	@ (8019c70 <HAL_DMA_Abort_IT+0x1c8>)
 8019b3a:	4293      	cmp	r3, r2
 8019b3c:	d018      	beq.n	8019b70 <HAL_DMA_Abort_IT+0xc8>
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	681b      	ldr	r3, [r3, #0]
 8019b42:	4a4c      	ldr	r2, [pc, #304]	@ (8019c74 <HAL_DMA_Abort_IT+0x1cc>)
 8019b44:	4293      	cmp	r3, r2
 8019b46:	d013      	beq.n	8019b70 <HAL_DMA_Abort_IT+0xc8>
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	681b      	ldr	r3, [r3, #0]
 8019b4c:	4a4a      	ldr	r2, [pc, #296]	@ (8019c78 <HAL_DMA_Abort_IT+0x1d0>)
 8019b4e:	4293      	cmp	r3, r2
 8019b50:	d00e      	beq.n	8019b70 <HAL_DMA_Abort_IT+0xc8>
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	681b      	ldr	r3, [r3, #0]
 8019b56:	4a49      	ldr	r2, [pc, #292]	@ (8019c7c <HAL_DMA_Abort_IT+0x1d4>)
 8019b58:	4293      	cmp	r3, r2
 8019b5a:	d009      	beq.n	8019b70 <HAL_DMA_Abort_IT+0xc8>
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	681b      	ldr	r3, [r3, #0]
 8019b60:	4a47      	ldr	r2, [pc, #284]	@ (8019c80 <HAL_DMA_Abort_IT+0x1d8>)
 8019b62:	4293      	cmp	r3, r2
 8019b64:	d004      	beq.n	8019b70 <HAL_DMA_Abort_IT+0xc8>
 8019b66:	687b      	ldr	r3, [r7, #4]
 8019b68:	681b      	ldr	r3, [r3, #0]
 8019b6a:	4a46      	ldr	r2, [pc, #280]	@ (8019c84 <HAL_DMA_Abort_IT+0x1dc>)
 8019b6c:	4293      	cmp	r3, r2
 8019b6e:	d101      	bne.n	8019b74 <HAL_DMA_Abort_IT+0xcc>
 8019b70:	2301      	movs	r3, #1
 8019b72:	e000      	b.n	8019b76 <HAL_DMA_Abort_IT+0xce>
 8019b74:	2300      	movs	r3, #0
 8019b76:	2b00      	cmp	r3, #0
 8019b78:	f000 8086 	beq.w	8019c88 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	2204      	movs	r2, #4
 8019b80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	681b      	ldr	r3, [r3, #0]
 8019b88:	4a2f      	ldr	r2, [pc, #188]	@ (8019c48 <HAL_DMA_Abort_IT+0x1a0>)
 8019b8a:	4293      	cmp	r3, r2
 8019b8c:	d04a      	beq.n	8019c24 <HAL_DMA_Abort_IT+0x17c>
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	681b      	ldr	r3, [r3, #0]
 8019b92:	4a2e      	ldr	r2, [pc, #184]	@ (8019c4c <HAL_DMA_Abort_IT+0x1a4>)
 8019b94:	4293      	cmp	r3, r2
 8019b96:	d045      	beq.n	8019c24 <HAL_DMA_Abort_IT+0x17c>
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	681b      	ldr	r3, [r3, #0]
 8019b9c:	4a2c      	ldr	r2, [pc, #176]	@ (8019c50 <HAL_DMA_Abort_IT+0x1a8>)
 8019b9e:	4293      	cmp	r3, r2
 8019ba0:	d040      	beq.n	8019c24 <HAL_DMA_Abort_IT+0x17c>
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	681b      	ldr	r3, [r3, #0]
 8019ba6:	4a2b      	ldr	r2, [pc, #172]	@ (8019c54 <HAL_DMA_Abort_IT+0x1ac>)
 8019ba8:	4293      	cmp	r3, r2
 8019baa:	d03b      	beq.n	8019c24 <HAL_DMA_Abort_IT+0x17c>
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	681b      	ldr	r3, [r3, #0]
 8019bb0:	4a29      	ldr	r2, [pc, #164]	@ (8019c58 <HAL_DMA_Abort_IT+0x1b0>)
 8019bb2:	4293      	cmp	r3, r2
 8019bb4:	d036      	beq.n	8019c24 <HAL_DMA_Abort_IT+0x17c>
 8019bb6:	687b      	ldr	r3, [r7, #4]
 8019bb8:	681b      	ldr	r3, [r3, #0]
 8019bba:	4a28      	ldr	r2, [pc, #160]	@ (8019c5c <HAL_DMA_Abort_IT+0x1b4>)
 8019bbc:	4293      	cmp	r3, r2
 8019bbe:	d031      	beq.n	8019c24 <HAL_DMA_Abort_IT+0x17c>
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	681b      	ldr	r3, [r3, #0]
 8019bc4:	4a26      	ldr	r2, [pc, #152]	@ (8019c60 <HAL_DMA_Abort_IT+0x1b8>)
 8019bc6:	4293      	cmp	r3, r2
 8019bc8:	d02c      	beq.n	8019c24 <HAL_DMA_Abort_IT+0x17c>
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	681b      	ldr	r3, [r3, #0]
 8019bce:	4a25      	ldr	r2, [pc, #148]	@ (8019c64 <HAL_DMA_Abort_IT+0x1bc>)
 8019bd0:	4293      	cmp	r3, r2
 8019bd2:	d027      	beq.n	8019c24 <HAL_DMA_Abort_IT+0x17c>
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	681b      	ldr	r3, [r3, #0]
 8019bd8:	4a23      	ldr	r2, [pc, #140]	@ (8019c68 <HAL_DMA_Abort_IT+0x1c0>)
 8019bda:	4293      	cmp	r3, r2
 8019bdc:	d022      	beq.n	8019c24 <HAL_DMA_Abort_IT+0x17c>
 8019bde:	687b      	ldr	r3, [r7, #4]
 8019be0:	681b      	ldr	r3, [r3, #0]
 8019be2:	4a22      	ldr	r2, [pc, #136]	@ (8019c6c <HAL_DMA_Abort_IT+0x1c4>)
 8019be4:	4293      	cmp	r3, r2
 8019be6:	d01d      	beq.n	8019c24 <HAL_DMA_Abort_IT+0x17c>
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	681b      	ldr	r3, [r3, #0]
 8019bec:	4a20      	ldr	r2, [pc, #128]	@ (8019c70 <HAL_DMA_Abort_IT+0x1c8>)
 8019bee:	4293      	cmp	r3, r2
 8019bf0:	d018      	beq.n	8019c24 <HAL_DMA_Abort_IT+0x17c>
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	681b      	ldr	r3, [r3, #0]
 8019bf6:	4a1f      	ldr	r2, [pc, #124]	@ (8019c74 <HAL_DMA_Abort_IT+0x1cc>)
 8019bf8:	4293      	cmp	r3, r2
 8019bfa:	d013      	beq.n	8019c24 <HAL_DMA_Abort_IT+0x17c>
 8019bfc:	687b      	ldr	r3, [r7, #4]
 8019bfe:	681b      	ldr	r3, [r3, #0]
 8019c00:	4a1d      	ldr	r2, [pc, #116]	@ (8019c78 <HAL_DMA_Abort_IT+0x1d0>)
 8019c02:	4293      	cmp	r3, r2
 8019c04:	d00e      	beq.n	8019c24 <HAL_DMA_Abort_IT+0x17c>
 8019c06:	687b      	ldr	r3, [r7, #4]
 8019c08:	681b      	ldr	r3, [r3, #0]
 8019c0a:	4a1c      	ldr	r2, [pc, #112]	@ (8019c7c <HAL_DMA_Abort_IT+0x1d4>)
 8019c0c:	4293      	cmp	r3, r2
 8019c0e:	d009      	beq.n	8019c24 <HAL_DMA_Abort_IT+0x17c>
 8019c10:	687b      	ldr	r3, [r7, #4]
 8019c12:	681b      	ldr	r3, [r3, #0]
 8019c14:	4a1a      	ldr	r2, [pc, #104]	@ (8019c80 <HAL_DMA_Abort_IT+0x1d8>)
 8019c16:	4293      	cmp	r3, r2
 8019c18:	d004      	beq.n	8019c24 <HAL_DMA_Abort_IT+0x17c>
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	681b      	ldr	r3, [r3, #0]
 8019c1e:	4a19      	ldr	r2, [pc, #100]	@ (8019c84 <HAL_DMA_Abort_IT+0x1dc>)
 8019c20:	4293      	cmp	r3, r2
 8019c22:	d108      	bne.n	8019c36 <HAL_DMA_Abort_IT+0x18e>
 8019c24:	687b      	ldr	r3, [r7, #4]
 8019c26:	681b      	ldr	r3, [r3, #0]
 8019c28:	681a      	ldr	r2, [r3, #0]
 8019c2a:	687b      	ldr	r3, [r7, #4]
 8019c2c:	681b      	ldr	r3, [r3, #0]
 8019c2e:	f022 0201 	bic.w	r2, r2, #1
 8019c32:	601a      	str	r2, [r3, #0]
 8019c34:	e178      	b.n	8019f28 <HAL_DMA_Abort_IT+0x480>
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	681b      	ldr	r3, [r3, #0]
 8019c3a:	681a      	ldr	r2, [r3, #0]
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	681b      	ldr	r3, [r3, #0]
 8019c40:	f022 0201 	bic.w	r2, r2, #1
 8019c44:	601a      	str	r2, [r3, #0]
 8019c46:	e16f      	b.n	8019f28 <HAL_DMA_Abort_IT+0x480>
 8019c48:	40020010 	.word	0x40020010
 8019c4c:	40020028 	.word	0x40020028
 8019c50:	40020040 	.word	0x40020040
 8019c54:	40020058 	.word	0x40020058
 8019c58:	40020070 	.word	0x40020070
 8019c5c:	40020088 	.word	0x40020088
 8019c60:	400200a0 	.word	0x400200a0
 8019c64:	400200b8 	.word	0x400200b8
 8019c68:	40020410 	.word	0x40020410
 8019c6c:	40020428 	.word	0x40020428
 8019c70:	40020440 	.word	0x40020440
 8019c74:	40020458 	.word	0x40020458
 8019c78:	40020470 	.word	0x40020470
 8019c7c:	40020488 	.word	0x40020488
 8019c80:	400204a0 	.word	0x400204a0
 8019c84:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	681b      	ldr	r3, [r3, #0]
 8019c8c:	681a      	ldr	r2, [r3, #0]
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	681b      	ldr	r3, [r3, #0]
 8019c92:	f022 020e 	bic.w	r2, r2, #14
 8019c96:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	681b      	ldr	r3, [r3, #0]
 8019c9c:	4a6c      	ldr	r2, [pc, #432]	@ (8019e50 <HAL_DMA_Abort_IT+0x3a8>)
 8019c9e:	4293      	cmp	r3, r2
 8019ca0:	d04a      	beq.n	8019d38 <HAL_DMA_Abort_IT+0x290>
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	681b      	ldr	r3, [r3, #0]
 8019ca6:	4a6b      	ldr	r2, [pc, #428]	@ (8019e54 <HAL_DMA_Abort_IT+0x3ac>)
 8019ca8:	4293      	cmp	r3, r2
 8019caa:	d045      	beq.n	8019d38 <HAL_DMA_Abort_IT+0x290>
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	681b      	ldr	r3, [r3, #0]
 8019cb0:	4a69      	ldr	r2, [pc, #420]	@ (8019e58 <HAL_DMA_Abort_IT+0x3b0>)
 8019cb2:	4293      	cmp	r3, r2
 8019cb4:	d040      	beq.n	8019d38 <HAL_DMA_Abort_IT+0x290>
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	681b      	ldr	r3, [r3, #0]
 8019cba:	4a68      	ldr	r2, [pc, #416]	@ (8019e5c <HAL_DMA_Abort_IT+0x3b4>)
 8019cbc:	4293      	cmp	r3, r2
 8019cbe:	d03b      	beq.n	8019d38 <HAL_DMA_Abort_IT+0x290>
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	681b      	ldr	r3, [r3, #0]
 8019cc4:	4a66      	ldr	r2, [pc, #408]	@ (8019e60 <HAL_DMA_Abort_IT+0x3b8>)
 8019cc6:	4293      	cmp	r3, r2
 8019cc8:	d036      	beq.n	8019d38 <HAL_DMA_Abort_IT+0x290>
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	4a65      	ldr	r2, [pc, #404]	@ (8019e64 <HAL_DMA_Abort_IT+0x3bc>)
 8019cd0:	4293      	cmp	r3, r2
 8019cd2:	d031      	beq.n	8019d38 <HAL_DMA_Abort_IT+0x290>
 8019cd4:	687b      	ldr	r3, [r7, #4]
 8019cd6:	681b      	ldr	r3, [r3, #0]
 8019cd8:	4a63      	ldr	r2, [pc, #396]	@ (8019e68 <HAL_DMA_Abort_IT+0x3c0>)
 8019cda:	4293      	cmp	r3, r2
 8019cdc:	d02c      	beq.n	8019d38 <HAL_DMA_Abort_IT+0x290>
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	4a62      	ldr	r2, [pc, #392]	@ (8019e6c <HAL_DMA_Abort_IT+0x3c4>)
 8019ce4:	4293      	cmp	r3, r2
 8019ce6:	d027      	beq.n	8019d38 <HAL_DMA_Abort_IT+0x290>
 8019ce8:	687b      	ldr	r3, [r7, #4]
 8019cea:	681b      	ldr	r3, [r3, #0]
 8019cec:	4a60      	ldr	r2, [pc, #384]	@ (8019e70 <HAL_DMA_Abort_IT+0x3c8>)
 8019cee:	4293      	cmp	r3, r2
 8019cf0:	d022      	beq.n	8019d38 <HAL_DMA_Abort_IT+0x290>
 8019cf2:	687b      	ldr	r3, [r7, #4]
 8019cf4:	681b      	ldr	r3, [r3, #0]
 8019cf6:	4a5f      	ldr	r2, [pc, #380]	@ (8019e74 <HAL_DMA_Abort_IT+0x3cc>)
 8019cf8:	4293      	cmp	r3, r2
 8019cfa:	d01d      	beq.n	8019d38 <HAL_DMA_Abort_IT+0x290>
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	681b      	ldr	r3, [r3, #0]
 8019d00:	4a5d      	ldr	r2, [pc, #372]	@ (8019e78 <HAL_DMA_Abort_IT+0x3d0>)
 8019d02:	4293      	cmp	r3, r2
 8019d04:	d018      	beq.n	8019d38 <HAL_DMA_Abort_IT+0x290>
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	681b      	ldr	r3, [r3, #0]
 8019d0a:	4a5c      	ldr	r2, [pc, #368]	@ (8019e7c <HAL_DMA_Abort_IT+0x3d4>)
 8019d0c:	4293      	cmp	r3, r2
 8019d0e:	d013      	beq.n	8019d38 <HAL_DMA_Abort_IT+0x290>
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	681b      	ldr	r3, [r3, #0]
 8019d14:	4a5a      	ldr	r2, [pc, #360]	@ (8019e80 <HAL_DMA_Abort_IT+0x3d8>)
 8019d16:	4293      	cmp	r3, r2
 8019d18:	d00e      	beq.n	8019d38 <HAL_DMA_Abort_IT+0x290>
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	681b      	ldr	r3, [r3, #0]
 8019d1e:	4a59      	ldr	r2, [pc, #356]	@ (8019e84 <HAL_DMA_Abort_IT+0x3dc>)
 8019d20:	4293      	cmp	r3, r2
 8019d22:	d009      	beq.n	8019d38 <HAL_DMA_Abort_IT+0x290>
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	681b      	ldr	r3, [r3, #0]
 8019d28:	4a57      	ldr	r2, [pc, #348]	@ (8019e88 <HAL_DMA_Abort_IT+0x3e0>)
 8019d2a:	4293      	cmp	r3, r2
 8019d2c:	d004      	beq.n	8019d38 <HAL_DMA_Abort_IT+0x290>
 8019d2e:	687b      	ldr	r3, [r7, #4]
 8019d30:	681b      	ldr	r3, [r3, #0]
 8019d32:	4a56      	ldr	r2, [pc, #344]	@ (8019e8c <HAL_DMA_Abort_IT+0x3e4>)
 8019d34:	4293      	cmp	r3, r2
 8019d36:	d108      	bne.n	8019d4a <HAL_DMA_Abort_IT+0x2a2>
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	681b      	ldr	r3, [r3, #0]
 8019d3c:	681a      	ldr	r2, [r3, #0]
 8019d3e:	687b      	ldr	r3, [r7, #4]
 8019d40:	681b      	ldr	r3, [r3, #0]
 8019d42:	f022 0201 	bic.w	r2, r2, #1
 8019d46:	601a      	str	r2, [r3, #0]
 8019d48:	e007      	b.n	8019d5a <HAL_DMA_Abort_IT+0x2b2>
 8019d4a:	687b      	ldr	r3, [r7, #4]
 8019d4c:	681b      	ldr	r3, [r3, #0]
 8019d4e:	681a      	ldr	r2, [r3, #0]
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	681b      	ldr	r3, [r3, #0]
 8019d54:	f022 0201 	bic.w	r2, r2, #1
 8019d58:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8019d5a:	687b      	ldr	r3, [r7, #4]
 8019d5c:	681b      	ldr	r3, [r3, #0]
 8019d5e:	4a3c      	ldr	r2, [pc, #240]	@ (8019e50 <HAL_DMA_Abort_IT+0x3a8>)
 8019d60:	4293      	cmp	r3, r2
 8019d62:	d072      	beq.n	8019e4a <HAL_DMA_Abort_IT+0x3a2>
 8019d64:	687b      	ldr	r3, [r7, #4]
 8019d66:	681b      	ldr	r3, [r3, #0]
 8019d68:	4a3a      	ldr	r2, [pc, #232]	@ (8019e54 <HAL_DMA_Abort_IT+0x3ac>)
 8019d6a:	4293      	cmp	r3, r2
 8019d6c:	d06d      	beq.n	8019e4a <HAL_DMA_Abort_IT+0x3a2>
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	681b      	ldr	r3, [r3, #0]
 8019d72:	4a39      	ldr	r2, [pc, #228]	@ (8019e58 <HAL_DMA_Abort_IT+0x3b0>)
 8019d74:	4293      	cmp	r3, r2
 8019d76:	d068      	beq.n	8019e4a <HAL_DMA_Abort_IT+0x3a2>
 8019d78:	687b      	ldr	r3, [r7, #4]
 8019d7a:	681b      	ldr	r3, [r3, #0]
 8019d7c:	4a37      	ldr	r2, [pc, #220]	@ (8019e5c <HAL_DMA_Abort_IT+0x3b4>)
 8019d7e:	4293      	cmp	r3, r2
 8019d80:	d063      	beq.n	8019e4a <HAL_DMA_Abort_IT+0x3a2>
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	681b      	ldr	r3, [r3, #0]
 8019d86:	4a36      	ldr	r2, [pc, #216]	@ (8019e60 <HAL_DMA_Abort_IT+0x3b8>)
 8019d88:	4293      	cmp	r3, r2
 8019d8a:	d05e      	beq.n	8019e4a <HAL_DMA_Abort_IT+0x3a2>
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	681b      	ldr	r3, [r3, #0]
 8019d90:	4a34      	ldr	r2, [pc, #208]	@ (8019e64 <HAL_DMA_Abort_IT+0x3bc>)
 8019d92:	4293      	cmp	r3, r2
 8019d94:	d059      	beq.n	8019e4a <HAL_DMA_Abort_IT+0x3a2>
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	681b      	ldr	r3, [r3, #0]
 8019d9a:	4a33      	ldr	r2, [pc, #204]	@ (8019e68 <HAL_DMA_Abort_IT+0x3c0>)
 8019d9c:	4293      	cmp	r3, r2
 8019d9e:	d054      	beq.n	8019e4a <HAL_DMA_Abort_IT+0x3a2>
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	681b      	ldr	r3, [r3, #0]
 8019da4:	4a31      	ldr	r2, [pc, #196]	@ (8019e6c <HAL_DMA_Abort_IT+0x3c4>)
 8019da6:	4293      	cmp	r3, r2
 8019da8:	d04f      	beq.n	8019e4a <HAL_DMA_Abort_IT+0x3a2>
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	4a30      	ldr	r2, [pc, #192]	@ (8019e70 <HAL_DMA_Abort_IT+0x3c8>)
 8019db0:	4293      	cmp	r3, r2
 8019db2:	d04a      	beq.n	8019e4a <HAL_DMA_Abort_IT+0x3a2>
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	4a2e      	ldr	r2, [pc, #184]	@ (8019e74 <HAL_DMA_Abort_IT+0x3cc>)
 8019dba:	4293      	cmp	r3, r2
 8019dbc:	d045      	beq.n	8019e4a <HAL_DMA_Abort_IT+0x3a2>
 8019dbe:	687b      	ldr	r3, [r7, #4]
 8019dc0:	681b      	ldr	r3, [r3, #0]
 8019dc2:	4a2d      	ldr	r2, [pc, #180]	@ (8019e78 <HAL_DMA_Abort_IT+0x3d0>)
 8019dc4:	4293      	cmp	r3, r2
 8019dc6:	d040      	beq.n	8019e4a <HAL_DMA_Abort_IT+0x3a2>
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	681b      	ldr	r3, [r3, #0]
 8019dcc:	4a2b      	ldr	r2, [pc, #172]	@ (8019e7c <HAL_DMA_Abort_IT+0x3d4>)
 8019dce:	4293      	cmp	r3, r2
 8019dd0:	d03b      	beq.n	8019e4a <HAL_DMA_Abort_IT+0x3a2>
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	681b      	ldr	r3, [r3, #0]
 8019dd6:	4a2a      	ldr	r2, [pc, #168]	@ (8019e80 <HAL_DMA_Abort_IT+0x3d8>)
 8019dd8:	4293      	cmp	r3, r2
 8019dda:	d036      	beq.n	8019e4a <HAL_DMA_Abort_IT+0x3a2>
 8019ddc:	687b      	ldr	r3, [r7, #4]
 8019dde:	681b      	ldr	r3, [r3, #0]
 8019de0:	4a28      	ldr	r2, [pc, #160]	@ (8019e84 <HAL_DMA_Abort_IT+0x3dc>)
 8019de2:	4293      	cmp	r3, r2
 8019de4:	d031      	beq.n	8019e4a <HAL_DMA_Abort_IT+0x3a2>
 8019de6:	687b      	ldr	r3, [r7, #4]
 8019de8:	681b      	ldr	r3, [r3, #0]
 8019dea:	4a27      	ldr	r2, [pc, #156]	@ (8019e88 <HAL_DMA_Abort_IT+0x3e0>)
 8019dec:	4293      	cmp	r3, r2
 8019dee:	d02c      	beq.n	8019e4a <HAL_DMA_Abort_IT+0x3a2>
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	681b      	ldr	r3, [r3, #0]
 8019df4:	4a25      	ldr	r2, [pc, #148]	@ (8019e8c <HAL_DMA_Abort_IT+0x3e4>)
 8019df6:	4293      	cmp	r3, r2
 8019df8:	d027      	beq.n	8019e4a <HAL_DMA_Abort_IT+0x3a2>
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	681b      	ldr	r3, [r3, #0]
 8019dfe:	4a24      	ldr	r2, [pc, #144]	@ (8019e90 <HAL_DMA_Abort_IT+0x3e8>)
 8019e00:	4293      	cmp	r3, r2
 8019e02:	d022      	beq.n	8019e4a <HAL_DMA_Abort_IT+0x3a2>
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	681b      	ldr	r3, [r3, #0]
 8019e08:	4a22      	ldr	r2, [pc, #136]	@ (8019e94 <HAL_DMA_Abort_IT+0x3ec>)
 8019e0a:	4293      	cmp	r3, r2
 8019e0c:	d01d      	beq.n	8019e4a <HAL_DMA_Abort_IT+0x3a2>
 8019e0e:	687b      	ldr	r3, [r7, #4]
 8019e10:	681b      	ldr	r3, [r3, #0]
 8019e12:	4a21      	ldr	r2, [pc, #132]	@ (8019e98 <HAL_DMA_Abort_IT+0x3f0>)
 8019e14:	4293      	cmp	r3, r2
 8019e16:	d018      	beq.n	8019e4a <HAL_DMA_Abort_IT+0x3a2>
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	681b      	ldr	r3, [r3, #0]
 8019e1c:	4a1f      	ldr	r2, [pc, #124]	@ (8019e9c <HAL_DMA_Abort_IT+0x3f4>)
 8019e1e:	4293      	cmp	r3, r2
 8019e20:	d013      	beq.n	8019e4a <HAL_DMA_Abort_IT+0x3a2>
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	681b      	ldr	r3, [r3, #0]
 8019e26:	4a1e      	ldr	r2, [pc, #120]	@ (8019ea0 <HAL_DMA_Abort_IT+0x3f8>)
 8019e28:	4293      	cmp	r3, r2
 8019e2a:	d00e      	beq.n	8019e4a <HAL_DMA_Abort_IT+0x3a2>
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	681b      	ldr	r3, [r3, #0]
 8019e30:	4a1c      	ldr	r2, [pc, #112]	@ (8019ea4 <HAL_DMA_Abort_IT+0x3fc>)
 8019e32:	4293      	cmp	r3, r2
 8019e34:	d009      	beq.n	8019e4a <HAL_DMA_Abort_IT+0x3a2>
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	681b      	ldr	r3, [r3, #0]
 8019e3a:	4a1b      	ldr	r2, [pc, #108]	@ (8019ea8 <HAL_DMA_Abort_IT+0x400>)
 8019e3c:	4293      	cmp	r3, r2
 8019e3e:	d004      	beq.n	8019e4a <HAL_DMA_Abort_IT+0x3a2>
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	681b      	ldr	r3, [r3, #0]
 8019e44:	4a19      	ldr	r2, [pc, #100]	@ (8019eac <HAL_DMA_Abort_IT+0x404>)
 8019e46:	4293      	cmp	r3, r2
 8019e48:	d132      	bne.n	8019eb0 <HAL_DMA_Abort_IT+0x408>
 8019e4a:	2301      	movs	r3, #1
 8019e4c:	e031      	b.n	8019eb2 <HAL_DMA_Abort_IT+0x40a>
 8019e4e:	bf00      	nop
 8019e50:	40020010 	.word	0x40020010
 8019e54:	40020028 	.word	0x40020028
 8019e58:	40020040 	.word	0x40020040
 8019e5c:	40020058 	.word	0x40020058
 8019e60:	40020070 	.word	0x40020070
 8019e64:	40020088 	.word	0x40020088
 8019e68:	400200a0 	.word	0x400200a0
 8019e6c:	400200b8 	.word	0x400200b8
 8019e70:	40020410 	.word	0x40020410
 8019e74:	40020428 	.word	0x40020428
 8019e78:	40020440 	.word	0x40020440
 8019e7c:	40020458 	.word	0x40020458
 8019e80:	40020470 	.word	0x40020470
 8019e84:	40020488 	.word	0x40020488
 8019e88:	400204a0 	.word	0x400204a0
 8019e8c:	400204b8 	.word	0x400204b8
 8019e90:	58025408 	.word	0x58025408
 8019e94:	5802541c 	.word	0x5802541c
 8019e98:	58025430 	.word	0x58025430
 8019e9c:	58025444 	.word	0x58025444
 8019ea0:	58025458 	.word	0x58025458
 8019ea4:	5802546c 	.word	0x5802546c
 8019ea8:	58025480 	.word	0x58025480
 8019eac:	58025494 	.word	0x58025494
 8019eb0:	2300      	movs	r3, #0
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	d028      	beq.n	8019f08 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019eba:	681a      	ldr	r2, [r3, #0]
 8019ebc:	687b      	ldr	r3, [r7, #4]
 8019ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019ec0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8019ec4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019eca:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019ed0:	f003 031f 	and.w	r3, r3, #31
 8019ed4:	2201      	movs	r2, #1
 8019ed6:	409a      	lsls	r2, r3
 8019ed8:	68fb      	ldr	r3, [r7, #12]
 8019eda:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019ee0:	687a      	ldr	r2, [r7, #4]
 8019ee2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8019ee4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	d00c      	beq.n	8019f08 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8019eee:	687b      	ldr	r3, [r7, #4]
 8019ef0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019ef2:	681a      	ldr	r2, [r3, #0]
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019ef8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8019efc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019f02:	687a      	ldr	r2, [r7, #4]
 8019f04:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8019f06:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	2201      	movs	r2, #1
 8019f0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8019f10:	687b      	ldr	r3, [r7, #4]
 8019f12:	2200      	movs	r2, #0
 8019f14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019f1c:	2b00      	cmp	r3, #0
 8019f1e:	d003      	beq.n	8019f28 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8019f20:	687b      	ldr	r3, [r7, #4]
 8019f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019f24:	6878      	ldr	r0, [r7, #4]
 8019f26:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8019f28:	2300      	movs	r3, #0
}
 8019f2a:	4618      	mov	r0, r3
 8019f2c:	3710      	adds	r7, #16
 8019f2e:	46bd      	mov	sp, r7
 8019f30:	bd80      	pop	{r7, pc}
 8019f32:	bf00      	nop

08019f34 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8019f34:	b580      	push	{r7, lr}
 8019f36:	b08a      	sub	sp, #40	@ 0x28
 8019f38:	af00      	add	r7, sp, #0
 8019f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8019f3c:	2300      	movs	r3, #0
 8019f3e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8019f40:	4b67      	ldr	r3, [pc, #412]	@ (801a0e0 <HAL_DMA_IRQHandler+0x1ac>)
 8019f42:	681b      	ldr	r3, [r3, #0]
 8019f44:	4a67      	ldr	r2, [pc, #412]	@ (801a0e4 <HAL_DMA_IRQHandler+0x1b0>)
 8019f46:	fba2 2303 	umull	r2, r3, r2, r3
 8019f4a:	0a9b      	lsrs	r3, r3, #10
 8019f4c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019f52:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019f58:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8019f5a:	6a3b      	ldr	r3, [r7, #32]
 8019f5c:	681b      	ldr	r3, [r3, #0]
 8019f5e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8019f60:	69fb      	ldr	r3, [r7, #28]
 8019f62:	681b      	ldr	r3, [r3, #0]
 8019f64:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	681b      	ldr	r3, [r3, #0]
 8019f6a:	4a5f      	ldr	r2, [pc, #380]	@ (801a0e8 <HAL_DMA_IRQHandler+0x1b4>)
 8019f6c:	4293      	cmp	r3, r2
 8019f6e:	d04a      	beq.n	801a006 <HAL_DMA_IRQHandler+0xd2>
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	4a5d      	ldr	r2, [pc, #372]	@ (801a0ec <HAL_DMA_IRQHandler+0x1b8>)
 8019f76:	4293      	cmp	r3, r2
 8019f78:	d045      	beq.n	801a006 <HAL_DMA_IRQHandler+0xd2>
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	681b      	ldr	r3, [r3, #0]
 8019f7e:	4a5c      	ldr	r2, [pc, #368]	@ (801a0f0 <HAL_DMA_IRQHandler+0x1bc>)
 8019f80:	4293      	cmp	r3, r2
 8019f82:	d040      	beq.n	801a006 <HAL_DMA_IRQHandler+0xd2>
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	681b      	ldr	r3, [r3, #0]
 8019f88:	4a5a      	ldr	r2, [pc, #360]	@ (801a0f4 <HAL_DMA_IRQHandler+0x1c0>)
 8019f8a:	4293      	cmp	r3, r2
 8019f8c:	d03b      	beq.n	801a006 <HAL_DMA_IRQHandler+0xd2>
 8019f8e:	687b      	ldr	r3, [r7, #4]
 8019f90:	681b      	ldr	r3, [r3, #0]
 8019f92:	4a59      	ldr	r2, [pc, #356]	@ (801a0f8 <HAL_DMA_IRQHandler+0x1c4>)
 8019f94:	4293      	cmp	r3, r2
 8019f96:	d036      	beq.n	801a006 <HAL_DMA_IRQHandler+0xd2>
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	681b      	ldr	r3, [r3, #0]
 8019f9c:	4a57      	ldr	r2, [pc, #348]	@ (801a0fc <HAL_DMA_IRQHandler+0x1c8>)
 8019f9e:	4293      	cmp	r3, r2
 8019fa0:	d031      	beq.n	801a006 <HAL_DMA_IRQHandler+0xd2>
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	4a56      	ldr	r2, [pc, #344]	@ (801a100 <HAL_DMA_IRQHandler+0x1cc>)
 8019fa8:	4293      	cmp	r3, r2
 8019faa:	d02c      	beq.n	801a006 <HAL_DMA_IRQHandler+0xd2>
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	681b      	ldr	r3, [r3, #0]
 8019fb0:	4a54      	ldr	r2, [pc, #336]	@ (801a104 <HAL_DMA_IRQHandler+0x1d0>)
 8019fb2:	4293      	cmp	r3, r2
 8019fb4:	d027      	beq.n	801a006 <HAL_DMA_IRQHandler+0xd2>
 8019fb6:	687b      	ldr	r3, [r7, #4]
 8019fb8:	681b      	ldr	r3, [r3, #0]
 8019fba:	4a53      	ldr	r2, [pc, #332]	@ (801a108 <HAL_DMA_IRQHandler+0x1d4>)
 8019fbc:	4293      	cmp	r3, r2
 8019fbe:	d022      	beq.n	801a006 <HAL_DMA_IRQHandler+0xd2>
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	681b      	ldr	r3, [r3, #0]
 8019fc4:	4a51      	ldr	r2, [pc, #324]	@ (801a10c <HAL_DMA_IRQHandler+0x1d8>)
 8019fc6:	4293      	cmp	r3, r2
 8019fc8:	d01d      	beq.n	801a006 <HAL_DMA_IRQHandler+0xd2>
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	681b      	ldr	r3, [r3, #0]
 8019fce:	4a50      	ldr	r2, [pc, #320]	@ (801a110 <HAL_DMA_IRQHandler+0x1dc>)
 8019fd0:	4293      	cmp	r3, r2
 8019fd2:	d018      	beq.n	801a006 <HAL_DMA_IRQHandler+0xd2>
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	681b      	ldr	r3, [r3, #0]
 8019fd8:	4a4e      	ldr	r2, [pc, #312]	@ (801a114 <HAL_DMA_IRQHandler+0x1e0>)
 8019fda:	4293      	cmp	r3, r2
 8019fdc:	d013      	beq.n	801a006 <HAL_DMA_IRQHandler+0xd2>
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	681b      	ldr	r3, [r3, #0]
 8019fe2:	4a4d      	ldr	r2, [pc, #308]	@ (801a118 <HAL_DMA_IRQHandler+0x1e4>)
 8019fe4:	4293      	cmp	r3, r2
 8019fe6:	d00e      	beq.n	801a006 <HAL_DMA_IRQHandler+0xd2>
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	681b      	ldr	r3, [r3, #0]
 8019fec:	4a4b      	ldr	r2, [pc, #300]	@ (801a11c <HAL_DMA_IRQHandler+0x1e8>)
 8019fee:	4293      	cmp	r3, r2
 8019ff0:	d009      	beq.n	801a006 <HAL_DMA_IRQHandler+0xd2>
 8019ff2:	687b      	ldr	r3, [r7, #4]
 8019ff4:	681b      	ldr	r3, [r3, #0]
 8019ff6:	4a4a      	ldr	r2, [pc, #296]	@ (801a120 <HAL_DMA_IRQHandler+0x1ec>)
 8019ff8:	4293      	cmp	r3, r2
 8019ffa:	d004      	beq.n	801a006 <HAL_DMA_IRQHandler+0xd2>
 8019ffc:	687b      	ldr	r3, [r7, #4]
 8019ffe:	681b      	ldr	r3, [r3, #0]
 801a000:	4a48      	ldr	r2, [pc, #288]	@ (801a124 <HAL_DMA_IRQHandler+0x1f0>)
 801a002:	4293      	cmp	r3, r2
 801a004:	d101      	bne.n	801a00a <HAL_DMA_IRQHandler+0xd6>
 801a006:	2301      	movs	r3, #1
 801a008:	e000      	b.n	801a00c <HAL_DMA_IRQHandler+0xd8>
 801a00a:	2300      	movs	r3, #0
 801a00c:	2b00      	cmp	r3, #0
 801a00e:	f000 842b 	beq.w	801a868 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a016:	f003 031f 	and.w	r3, r3, #31
 801a01a:	2208      	movs	r2, #8
 801a01c:	409a      	lsls	r2, r3
 801a01e:	69bb      	ldr	r3, [r7, #24]
 801a020:	4013      	ands	r3, r2
 801a022:	2b00      	cmp	r3, #0
 801a024:	f000 80a2 	beq.w	801a16c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	4a2e      	ldr	r2, [pc, #184]	@ (801a0e8 <HAL_DMA_IRQHandler+0x1b4>)
 801a02e:	4293      	cmp	r3, r2
 801a030:	d04a      	beq.n	801a0c8 <HAL_DMA_IRQHandler+0x194>
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	681b      	ldr	r3, [r3, #0]
 801a036:	4a2d      	ldr	r2, [pc, #180]	@ (801a0ec <HAL_DMA_IRQHandler+0x1b8>)
 801a038:	4293      	cmp	r3, r2
 801a03a:	d045      	beq.n	801a0c8 <HAL_DMA_IRQHandler+0x194>
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	681b      	ldr	r3, [r3, #0]
 801a040:	4a2b      	ldr	r2, [pc, #172]	@ (801a0f0 <HAL_DMA_IRQHandler+0x1bc>)
 801a042:	4293      	cmp	r3, r2
 801a044:	d040      	beq.n	801a0c8 <HAL_DMA_IRQHandler+0x194>
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	681b      	ldr	r3, [r3, #0]
 801a04a:	4a2a      	ldr	r2, [pc, #168]	@ (801a0f4 <HAL_DMA_IRQHandler+0x1c0>)
 801a04c:	4293      	cmp	r3, r2
 801a04e:	d03b      	beq.n	801a0c8 <HAL_DMA_IRQHandler+0x194>
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	681b      	ldr	r3, [r3, #0]
 801a054:	4a28      	ldr	r2, [pc, #160]	@ (801a0f8 <HAL_DMA_IRQHandler+0x1c4>)
 801a056:	4293      	cmp	r3, r2
 801a058:	d036      	beq.n	801a0c8 <HAL_DMA_IRQHandler+0x194>
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	681b      	ldr	r3, [r3, #0]
 801a05e:	4a27      	ldr	r2, [pc, #156]	@ (801a0fc <HAL_DMA_IRQHandler+0x1c8>)
 801a060:	4293      	cmp	r3, r2
 801a062:	d031      	beq.n	801a0c8 <HAL_DMA_IRQHandler+0x194>
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	681b      	ldr	r3, [r3, #0]
 801a068:	4a25      	ldr	r2, [pc, #148]	@ (801a100 <HAL_DMA_IRQHandler+0x1cc>)
 801a06a:	4293      	cmp	r3, r2
 801a06c:	d02c      	beq.n	801a0c8 <HAL_DMA_IRQHandler+0x194>
 801a06e:	687b      	ldr	r3, [r7, #4]
 801a070:	681b      	ldr	r3, [r3, #0]
 801a072:	4a24      	ldr	r2, [pc, #144]	@ (801a104 <HAL_DMA_IRQHandler+0x1d0>)
 801a074:	4293      	cmp	r3, r2
 801a076:	d027      	beq.n	801a0c8 <HAL_DMA_IRQHandler+0x194>
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	681b      	ldr	r3, [r3, #0]
 801a07c:	4a22      	ldr	r2, [pc, #136]	@ (801a108 <HAL_DMA_IRQHandler+0x1d4>)
 801a07e:	4293      	cmp	r3, r2
 801a080:	d022      	beq.n	801a0c8 <HAL_DMA_IRQHandler+0x194>
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	681b      	ldr	r3, [r3, #0]
 801a086:	4a21      	ldr	r2, [pc, #132]	@ (801a10c <HAL_DMA_IRQHandler+0x1d8>)
 801a088:	4293      	cmp	r3, r2
 801a08a:	d01d      	beq.n	801a0c8 <HAL_DMA_IRQHandler+0x194>
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	681b      	ldr	r3, [r3, #0]
 801a090:	4a1f      	ldr	r2, [pc, #124]	@ (801a110 <HAL_DMA_IRQHandler+0x1dc>)
 801a092:	4293      	cmp	r3, r2
 801a094:	d018      	beq.n	801a0c8 <HAL_DMA_IRQHandler+0x194>
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	681b      	ldr	r3, [r3, #0]
 801a09a:	4a1e      	ldr	r2, [pc, #120]	@ (801a114 <HAL_DMA_IRQHandler+0x1e0>)
 801a09c:	4293      	cmp	r3, r2
 801a09e:	d013      	beq.n	801a0c8 <HAL_DMA_IRQHandler+0x194>
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	681b      	ldr	r3, [r3, #0]
 801a0a4:	4a1c      	ldr	r2, [pc, #112]	@ (801a118 <HAL_DMA_IRQHandler+0x1e4>)
 801a0a6:	4293      	cmp	r3, r2
 801a0a8:	d00e      	beq.n	801a0c8 <HAL_DMA_IRQHandler+0x194>
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	681b      	ldr	r3, [r3, #0]
 801a0ae:	4a1b      	ldr	r2, [pc, #108]	@ (801a11c <HAL_DMA_IRQHandler+0x1e8>)
 801a0b0:	4293      	cmp	r3, r2
 801a0b2:	d009      	beq.n	801a0c8 <HAL_DMA_IRQHandler+0x194>
 801a0b4:	687b      	ldr	r3, [r7, #4]
 801a0b6:	681b      	ldr	r3, [r3, #0]
 801a0b8:	4a19      	ldr	r2, [pc, #100]	@ (801a120 <HAL_DMA_IRQHandler+0x1ec>)
 801a0ba:	4293      	cmp	r3, r2
 801a0bc:	d004      	beq.n	801a0c8 <HAL_DMA_IRQHandler+0x194>
 801a0be:	687b      	ldr	r3, [r7, #4]
 801a0c0:	681b      	ldr	r3, [r3, #0]
 801a0c2:	4a18      	ldr	r2, [pc, #96]	@ (801a124 <HAL_DMA_IRQHandler+0x1f0>)
 801a0c4:	4293      	cmp	r3, r2
 801a0c6:	d12f      	bne.n	801a128 <HAL_DMA_IRQHandler+0x1f4>
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	681b      	ldr	r3, [r3, #0]
 801a0cc:	681b      	ldr	r3, [r3, #0]
 801a0ce:	f003 0304 	and.w	r3, r3, #4
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	bf14      	ite	ne
 801a0d6:	2301      	movne	r3, #1
 801a0d8:	2300      	moveq	r3, #0
 801a0da:	b2db      	uxtb	r3, r3
 801a0dc:	e02e      	b.n	801a13c <HAL_DMA_IRQHandler+0x208>
 801a0de:	bf00      	nop
 801a0e0:	20000000 	.word	0x20000000
 801a0e4:	1b4e81b5 	.word	0x1b4e81b5
 801a0e8:	40020010 	.word	0x40020010
 801a0ec:	40020028 	.word	0x40020028
 801a0f0:	40020040 	.word	0x40020040
 801a0f4:	40020058 	.word	0x40020058
 801a0f8:	40020070 	.word	0x40020070
 801a0fc:	40020088 	.word	0x40020088
 801a100:	400200a0 	.word	0x400200a0
 801a104:	400200b8 	.word	0x400200b8
 801a108:	40020410 	.word	0x40020410
 801a10c:	40020428 	.word	0x40020428
 801a110:	40020440 	.word	0x40020440
 801a114:	40020458 	.word	0x40020458
 801a118:	40020470 	.word	0x40020470
 801a11c:	40020488 	.word	0x40020488
 801a120:	400204a0 	.word	0x400204a0
 801a124:	400204b8 	.word	0x400204b8
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	681b      	ldr	r3, [r3, #0]
 801a12c:	681b      	ldr	r3, [r3, #0]
 801a12e:	f003 0308 	and.w	r3, r3, #8
 801a132:	2b00      	cmp	r3, #0
 801a134:	bf14      	ite	ne
 801a136:	2301      	movne	r3, #1
 801a138:	2300      	moveq	r3, #0
 801a13a:	b2db      	uxtb	r3, r3
 801a13c:	2b00      	cmp	r3, #0
 801a13e:	d015      	beq.n	801a16c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	681b      	ldr	r3, [r3, #0]
 801a144:	681a      	ldr	r2, [r3, #0]
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	f022 0204 	bic.w	r2, r2, #4
 801a14e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a154:	f003 031f 	and.w	r3, r3, #31
 801a158:	2208      	movs	r2, #8
 801a15a:	409a      	lsls	r2, r3
 801a15c:	6a3b      	ldr	r3, [r7, #32]
 801a15e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801a160:	687b      	ldr	r3, [r7, #4]
 801a162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a164:	f043 0201 	orr.w	r2, r3, #1
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a170:	f003 031f 	and.w	r3, r3, #31
 801a174:	69ba      	ldr	r2, [r7, #24]
 801a176:	fa22 f303 	lsr.w	r3, r2, r3
 801a17a:	f003 0301 	and.w	r3, r3, #1
 801a17e:	2b00      	cmp	r3, #0
 801a180:	d06e      	beq.n	801a260 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	681b      	ldr	r3, [r3, #0]
 801a186:	4a69      	ldr	r2, [pc, #420]	@ (801a32c <HAL_DMA_IRQHandler+0x3f8>)
 801a188:	4293      	cmp	r3, r2
 801a18a:	d04a      	beq.n	801a222 <HAL_DMA_IRQHandler+0x2ee>
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	681b      	ldr	r3, [r3, #0]
 801a190:	4a67      	ldr	r2, [pc, #412]	@ (801a330 <HAL_DMA_IRQHandler+0x3fc>)
 801a192:	4293      	cmp	r3, r2
 801a194:	d045      	beq.n	801a222 <HAL_DMA_IRQHandler+0x2ee>
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	681b      	ldr	r3, [r3, #0]
 801a19a:	4a66      	ldr	r2, [pc, #408]	@ (801a334 <HAL_DMA_IRQHandler+0x400>)
 801a19c:	4293      	cmp	r3, r2
 801a19e:	d040      	beq.n	801a222 <HAL_DMA_IRQHandler+0x2ee>
 801a1a0:	687b      	ldr	r3, [r7, #4]
 801a1a2:	681b      	ldr	r3, [r3, #0]
 801a1a4:	4a64      	ldr	r2, [pc, #400]	@ (801a338 <HAL_DMA_IRQHandler+0x404>)
 801a1a6:	4293      	cmp	r3, r2
 801a1a8:	d03b      	beq.n	801a222 <HAL_DMA_IRQHandler+0x2ee>
 801a1aa:	687b      	ldr	r3, [r7, #4]
 801a1ac:	681b      	ldr	r3, [r3, #0]
 801a1ae:	4a63      	ldr	r2, [pc, #396]	@ (801a33c <HAL_DMA_IRQHandler+0x408>)
 801a1b0:	4293      	cmp	r3, r2
 801a1b2:	d036      	beq.n	801a222 <HAL_DMA_IRQHandler+0x2ee>
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	681b      	ldr	r3, [r3, #0]
 801a1b8:	4a61      	ldr	r2, [pc, #388]	@ (801a340 <HAL_DMA_IRQHandler+0x40c>)
 801a1ba:	4293      	cmp	r3, r2
 801a1bc:	d031      	beq.n	801a222 <HAL_DMA_IRQHandler+0x2ee>
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	681b      	ldr	r3, [r3, #0]
 801a1c2:	4a60      	ldr	r2, [pc, #384]	@ (801a344 <HAL_DMA_IRQHandler+0x410>)
 801a1c4:	4293      	cmp	r3, r2
 801a1c6:	d02c      	beq.n	801a222 <HAL_DMA_IRQHandler+0x2ee>
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	681b      	ldr	r3, [r3, #0]
 801a1cc:	4a5e      	ldr	r2, [pc, #376]	@ (801a348 <HAL_DMA_IRQHandler+0x414>)
 801a1ce:	4293      	cmp	r3, r2
 801a1d0:	d027      	beq.n	801a222 <HAL_DMA_IRQHandler+0x2ee>
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	681b      	ldr	r3, [r3, #0]
 801a1d6:	4a5d      	ldr	r2, [pc, #372]	@ (801a34c <HAL_DMA_IRQHandler+0x418>)
 801a1d8:	4293      	cmp	r3, r2
 801a1da:	d022      	beq.n	801a222 <HAL_DMA_IRQHandler+0x2ee>
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	681b      	ldr	r3, [r3, #0]
 801a1e0:	4a5b      	ldr	r2, [pc, #364]	@ (801a350 <HAL_DMA_IRQHandler+0x41c>)
 801a1e2:	4293      	cmp	r3, r2
 801a1e4:	d01d      	beq.n	801a222 <HAL_DMA_IRQHandler+0x2ee>
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	681b      	ldr	r3, [r3, #0]
 801a1ea:	4a5a      	ldr	r2, [pc, #360]	@ (801a354 <HAL_DMA_IRQHandler+0x420>)
 801a1ec:	4293      	cmp	r3, r2
 801a1ee:	d018      	beq.n	801a222 <HAL_DMA_IRQHandler+0x2ee>
 801a1f0:	687b      	ldr	r3, [r7, #4]
 801a1f2:	681b      	ldr	r3, [r3, #0]
 801a1f4:	4a58      	ldr	r2, [pc, #352]	@ (801a358 <HAL_DMA_IRQHandler+0x424>)
 801a1f6:	4293      	cmp	r3, r2
 801a1f8:	d013      	beq.n	801a222 <HAL_DMA_IRQHandler+0x2ee>
 801a1fa:	687b      	ldr	r3, [r7, #4]
 801a1fc:	681b      	ldr	r3, [r3, #0]
 801a1fe:	4a57      	ldr	r2, [pc, #348]	@ (801a35c <HAL_DMA_IRQHandler+0x428>)
 801a200:	4293      	cmp	r3, r2
 801a202:	d00e      	beq.n	801a222 <HAL_DMA_IRQHandler+0x2ee>
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	681b      	ldr	r3, [r3, #0]
 801a208:	4a55      	ldr	r2, [pc, #340]	@ (801a360 <HAL_DMA_IRQHandler+0x42c>)
 801a20a:	4293      	cmp	r3, r2
 801a20c:	d009      	beq.n	801a222 <HAL_DMA_IRQHandler+0x2ee>
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	681b      	ldr	r3, [r3, #0]
 801a212:	4a54      	ldr	r2, [pc, #336]	@ (801a364 <HAL_DMA_IRQHandler+0x430>)
 801a214:	4293      	cmp	r3, r2
 801a216:	d004      	beq.n	801a222 <HAL_DMA_IRQHandler+0x2ee>
 801a218:	687b      	ldr	r3, [r7, #4]
 801a21a:	681b      	ldr	r3, [r3, #0]
 801a21c:	4a52      	ldr	r2, [pc, #328]	@ (801a368 <HAL_DMA_IRQHandler+0x434>)
 801a21e:	4293      	cmp	r3, r2
 801a220:	d10a      	bne.n	801a238 <HAL_DMA_IRQHandler+0x304>
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	695b      	ldr	r3, [r3, #20]
 801a228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a22c:	2b00      	cmp	r3, #0
 801a22e:	bf14      	ite	ne
 801a230:	2301      	movne	r3, #1
 801a232:	2300      	moveq	r3, #0
 801a234:	b2db      	uxtb	r3, r3
 801a236:	e003      	b.n	801a240 <HAL_DMA_IRQHandler+0x30c>
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	681b      	ldr	r3, [r3, #0]
 801a23c:	681b      	ldr	r3, [r3, #0]
 801a23e:	2300      	movs	r3, #0
 801a240:	2b00      	cmp	r3, #0
 801a242:	d00d      	beq.n	801a260 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801a244:	687b      	ldr	r3, [r7, #4]
 801a246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a248:	f003 031f 	and.w	r3, r3, #31
 801a24c:	2201      	movs	r2, #1
 801a24e:	409a      	lsls	r2, r3
 801a250:	6a3b      	ldr	r3, [r7, #32]
 801a252:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a258:	f043 0202 	orr.w	r2, r3, #2
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801a260:	687b      	ldr	r3, [r7, #4]
 801a262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a264:	f003 031f 	and.w	r3, r3, #31
 801a268:	2204      	movs	r2, #4
 801a26a:	409a      	lsls	r2, r3
 801a26c:	69bb      	ldr	r3, [r7, #24]
 801a26e:	4013      	ands	r3, r2
 801a270:	2b00      	cmp	r3, #0
 801a272:	f000 808f 	beq.w	801a394 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 801a276:	687b      	ldr	r3, [r7, #4]
 801a278:	681b      	ldr	r3, [r3, #0]
 801a27a:	4a2c      	ldr	r2, [pc, #176]	@ (801a32c <HAL_DMA_IRQHandler+0x3f8>)
 801a27c:	4293      	cmp	r3, r2
 801a27e:	d04a      	beq.n	801a316 <HAL_DMA_IRQHandler+0x3e2>
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	4a2a      	ldr	r2, [pc, #168]	@ (801a330 <HAL_DMA_IRQHandler+0x3fc>)
 801a286:	4293      	cmp	r3, r2
 801a288:	d045      	beq.n	801a316 <HAL_DMA_IRQHandler+0x3e2>
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	681b      	ldr	r3, [r3, #0]
 801a28e:	4a29      	ldr	r2, [pc, #164]	@ (801a334 <HAL_DMA_IRQHandler+0x400>)
 801a290:	4293      	cmp	r3, r2
 801a292:	d040      	beq.n	801a316 <HAL_DMA_IRQHandler+0x3e2>
 801a294:	687b      	ldr	r3, [r7, #4]
 801a296:	681b      	ldr	r3, [r3, #0]
 801a298:	4a27      	ldr	r2, [pc, #156]	@ (801a338 <HAL_DMA_IRQHandler+0x404>)
 801a29a:	4293      	cmp	r3, r2
 801a29c:	d03b      	beq.n	801a316 <HAL_DMA_IRQHandler+0x3e2>
 801a29e:	687b      	ldr	r3, [r7, #4]
 801a2a0:	681b      	ldr	r3, [r3, #0]
 801a2a2:	4a26      	ldr	r2, [pc, #152]	@ (801a33c <HAL_DMA_IRQHandler+0x408>)
 801a2a4:	4293      	cmp	r3, r2
 801a2a6:	d036      	beq.n	801a316 <HAL_DMA_IRQHandler+0x3e2>
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	681b      	ldr	r3, [r3, #0]
 801a2ac:	4a24      	ldr	r2, [pc, #144]	@ (801a340 <HAL_DMA_IRQHandler+0x40c>)
 801a2ae:	4293      	cmp	r3, r2
 801a2b0:	d031      	beq.n	801a316 <HAL_DMA_IRQHandler+0x3e2>
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	681b      	ldr	r3, [r3, #0]
 801a2b6:	4a23      	ldr	r2, [pc, #140]	@ (801a344 <HAL_DMA_IRQHandler+0x410>)
 801a2b8:	4293      	cmp	r3, r2
 801a2ba:	d02c      	beq.n	801a316 <HAL_DMA_IRQHandler+0x3e2>
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	681b      	ldr	r3, [r3, #0]
 801a2c0:	4a21      	ldr	r2, [pc, #132]	@ (801a348 <HAL_DMA_IRQHandler+0x414>)
 801a2c2:	4293      	cmp	r3, r2
 801a2c4:	d027      	beq.n	801a316 <HAL_DMA_IRQHandler+0x3e2>
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	681b      	ldr	r3, [r3, #0]
 801a2ca:	4a20      	ldr	r2, [pc, #128]	@ (801a34c <HAL_DMA_IRQHandler+0x418>)
 801a2cc:	4293      	cmp	r3, r2
 801a2ce:	d022      	beq.n	801a316 <HAL_DMA_IRQHandler+0x3e2>
 801a2d0:	687b      	ldr	r3, [r7, #4]
 801a2d2:	681b      	ldr	r3, [r3, #0]
 801a2d4:	4a1e      	ldr	r2, [pc, #120]	@ (801a350 <HAL_DMA_IRQHandler+0x41c>)
 801a2d6:	4293      	cmp	r3, r2
 801a2d8:	d01d      	beq.n	801a316 <HAL_DMA_IRQHandler+0x3e2>
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	681b      	ldr	r3, [r3, #0]
 801a2de:	4a1d      	ldr	r2, [pc, #116]	@ (801a354 <HAL_DMA_IRQHandler+0x420>)
 801a2e0:	4293      	cmp	r3, r2
 801a2e2:	d018      	beq.n	801a316 <HAL_DMA_IRQHandler+0x3e2>
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	681b      	ldr	r3, [r3, #0]
 801a2e8:	4a1b      	ldr	r2, [pc, #108]	@ (801a358 <HAL_DMA_IRQHandler+0x424>)
 801a2ea:	4293      	cmp	r3, r2
 801a2ec:	d013      	beq.n	801a316 <HAL_DMA_IRQHandler+0x3e2>
 801a2ee:	687b      	ldr	r3, [r7, #4]
 801a2f0:	681b      	ldr	r3, [r3, #0]
 801a2f2:	4a1a      	ldr	r2, [pc, #104]	@ (801a35c <HAL_DMA_IRQHandler+0x428>)
 801a2f4:	4293      	cmp	r3, r2
 801a2f6:	d00e      	beq.n	801a316 <HAL_DMA_IRQHandler+0x3e2>
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	681b      	ldr	r3, [r3, #0]
 801a2fc:	4a18      	ldr	r2, [pc, #96]	@ (801a360 <HAL_DMA_IRQHandler+0x42c>)
 801a2fe:	4293      	cmp	r3, r2
 801a300:	d009      	beq.n	801a316 <HAL_DMA_IRQHandler+0x3e2>
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	681b      	ldr	r3, [r3, #0]
 801a306:	4a17      	ldr	r2, [pc, #92]	@ (801a364 <HAL_DMA_IRQHandler+0x430>)
 801a308:	4293      	cmp	r3, r2
 801a30a:	d004      	beq.n	801a316 <HAL_DMA_IRQHandler+0x3e2>
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	681b      	ldr	r3, [r3, #0]
 801a310:	4a15      	ldr	r2, [pc, #84]	@ (801a368 <HAL_DMA_IRQHandler+0x434>)
 801a312:	4293      	cmp	r3, r2
 801a314:	d12a      	bne.n	801a36c <HAL_DMA_IRQHandler+0x438>
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	681b      	ldr	r3, [r3, #0]
 801a31a:	681b      	ldr	r3, [r3, #0]
 801a31c:	f003 0302 	and.w	r3, r3, #2
 801a320:	2b00      	cmp	r3, #0
 801a322:	bf14      	ite	ne
 801a324:	2301      	movne	r3, #1
 801a326:	2300      	moveq	r3, #0
 801a328:	b2db      	uxtb	r3, r3
 801a32a:	e023      	b.n	801a374 <HAL_DMA_IRQHandler+0x440>
 801a32c:	40020010 	.word	0x40020010
 801a330:	40020028 	.word	0x40020028
 801a334:	40020040 	.word	0x40020040
 801a338:	40020058 	.word	0x40020058
 801a33c:	40020070 	.word	0x40020070
 801a340:	40020088 	.word	0x40020088
 801a344:	400200a0 	.word	0x400200a0
 801a348:	400200b8 	.word	0x400200b8
 801a34c:	40020410 	.word	0x40020410
 801a350:	40020428 	.word	0x40020428
 801a354:	40020440 	.word	0x40020440
 801a358:	40020458 	.word	0x40020458
 801a35c:	40020470 	.word	0x40020470
 801a360:	40020488 	.word	0x40020488
 801a364:	400204a0 	.word	0x400204a0
 801a368:	400204b8 	.word	0x400204b8
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	681b      	ldr	r3, [r3, #0]
 801a370:	681b      	ldr	r3, [r3, #0]
 801a372:	2300      	movs	r3, #0
 801a374:	2b00      	cmp	r3, #0
 801a376:	d00d      	beq.n	801a394 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a37c:	f003 031f 	and.w	r3, r3, #31
 801a380:	2204      	movs	r2, #4
 801a382:	409a      	lsls	r2, r3
 801a384:	6a3b      	ldr	r3, [r7, #32]
 801a386:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a38c:	f043 0204 	orr.w	r2, r3, #4
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801a394:	687b      	ldr	r3, [r7, #4]
 801a396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a398:	f003 031f 	and.w	r3, r3, #31
 801a39c:	2210      	movs	r2, #16
 801a39e:	409a      	lsls	r2, r3
 801a3a0:	69bb      	ldr	r3, [r7, #24]
 801a3a2:	4013      	ands	r3, r2
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	f000 80a6 	beq.w	801a4f6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	4a85      	ldr	r2, [pc, #532]	@ (801a5c4 <HAL_DMA_IRQHandler+0x690>)
 801a3b0:	4293      	cmp	r3, r2
 801a3b2:	d04a      	beq.n	801a44a <HAL_DMA_IRQHandler+0x516>
 801a3b4:	687b      	ldr	r3, [r7, #4]
 801a3b6:	681b      	ldr	r3, [r3, #0]
 801a3b8:	4a83      	ldr	r2, [pc, #524]	@ (801a5c8 <HAL_DMA_IRQHandler+0x694>)
 801a3ba:	4293      	cmp	r3, r2
 801a3bc:	d045      	beq.n	801a44a <HAL_DMA_IRQHandler+0x516>
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	681b      	ldr	r3, [r3, #0]
 801a3c2:	4a82      	ldr	r2, [pc, #520]	@ (801a5cc <HAL_DMA_IRQHandler+0x698>)
 801a3c4:	4293      	cmp	r3, r2
 801a3c6:	d040      	beq.n	801a44a <HAL_DMA_IRQHandler+0x516>
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	681b      	ldr	r3, [r3, #0]
 801a3cc:	4a80      	ldr	r2, [pc, #512]	@ (801a5d0 <HAL_DMA_IRQHandler+0x69c>)
 801a3ce:	4293      	cmp	r3, r2
 801a3d0:	d03b      	beq.n	801a44a <HAL_DMA_IRQHandler+0x516>
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	681b      	ldr	r3, [r3, #0]
 801a3d6:	4a7f      	ldr	r2, [pc, #508]	@ (801a5d4 <HAL_DMA_IRQHandler+0x6a0>)
 801a3d8:	4293      	cmp	r3, r2
 801a3da:	d036      	beq.n	801a44a <HAL_DMA_IRQHandler+0x516>
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	681b      	ldr	r3, [r3, #0]
 801a3e0:	4a7d      	ldr	r2, [pc, #500]	@ (801a5d8 <HAL_DMA_IRQHandler+0x6a4>)
 801a3e2:	4293      	cmp	r3, r2
 801a3e4:	d031      	beq.n	801a44a <HAL_DMA_IRQHandler+0x516>
 801a3e6:	687b      	ldr	r3, [r7, #4]
 801a3e8:	681b      	ldr	r3, [r3, #0]
 801a3ea:	4a7c      	ldr	r2, [pc, #496]	@ (801a5dc <HAL_DMA_IRQHandler+0x6a8>)
 801a3ec:	4293      	cmp	r3, r2
 801a3ee:	d02c      	beq.n	801a44a <HAL_DMA_IRQHandler+0x516>
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	681b      	ldr	r3, [r3, #0]
 801a3f4:	4a7a      	ldr	r2, [pc, #488]	@ (801a5e0 <HAL_DMA_IRQHandler+0x6ac>)
 801a3f6:	4293      	cmp	r3, r2
 801a3f8:	d027      	beq.n	801a44a <HAL_DMA_IRQHandler+0x516>
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	681b      	ldr	r3, [r3, #0]
 801a3fe:	4a79      	ldr	r2, [pc, #484]	@ (801a5e4 <HAL_DMA_IRQHandler+0x6b0>)
 801a400:	4293      	cmp	r3, r2
 801a402:	d022      	beq.n	801a44a <HAL_DMA_IRQHandler+0x516>
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	681b      	ldr	r3, [r3, #0]
 801a408:	4a77      	ldr	r2, [pc, #476]	@ (801a5e8 <HAL_DMA_IRQHandler+0x6b4>)
 801a40a:	4293      	cmp	r3, r2
 801a40c:	d01d      	beq.n	801a44a <HAL_DMA_IRQHandler+0x516>
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	681b      	ldr	r3, [r3, #0]
 801a412:	4a76      	ldr	r2, [pc, #472]	@ (801a5ec <HAL_DMA_IRQHandler+0x6b8>)
 801a414:	4293      	cmp	r3, r2
 801a416:	d018      	beq.n	801a44a <HAL_DMA_IRQHandler+0x516>
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	681b      	ldr	r3, [r3, #0]
 801a41c:	4a74      	ldr	r2, [pc, #464]	@ (801a5f0 <HAL_DMA_IRQHandler+0x6bc>)
 801a41e:	4293      	cmp	r3, r2
 801a420:	d013      	beq.n	801a44a <HAL_DMA_IRQHandler+0x516>
 801a422:	687b      	ldr	r3, [r7, #4]
 801a424:	681b      	ldr	r3, [r3, #0]
 801a426:	4a73      	ldr	r2, [pc, #460]	@ (801a5f4 <HAL_DMA_IRQHandler+0x6c0>)
 801a428:	4293      	cmp	r3, r2
 801a42a:	d00e      	beq.n	801a44a <HAL_DMA_IRQHandler+0x516>
 801a42c:	687b      	ldr	r3, [r7, #4]
 801a42e:	681b      	ldr	r3, [r3, #0]
 801a430:	4a71      	ldr	r2, [pc, #452]	@ (801a5f8 <HAL_DMA_IRQHandler+0x6c4>)
 801a432:	4293      	cmp	r3, r2
 801a434:	d009      	beq.n	801a44a <HAL_DMA_IRQHandler+0x516>
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	4a70      	ldr	r2, [pc, #448]	@ (801a5fc <HAL_DMA_IRQHandler+0x6c8>)
 801a43c:	4293      	cmp	r3, r2
 801a43e:	d004      	beq.n	801a44a <HAL_DMA_IRQHandler+0x516>
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	681b      	ldr	r3, [r3, #0]
 801a444:	4a6e      	ldr	r2, [pc, #440]	@ (801a600 <HAL_DMA_IRQHandler+0x6cc>)
 801a446:	4293      	cmp	r3, r2
 801a448:	d10a      	bne.n	801a460 <HAL_DMA_IRQHandler+0x52c>
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	681b      	ldr	r3, [r3, #0]
 801a44e:	681b      	ldr	r3, [r3, #0]
 801a450:	f003 0308 	and.w	r3, r3, #8
 801a454:	2b00      	cmp	r3, #0
 801a456:	bf14      	ite	ne
 801a458:	2301      	movne	r3, #1
 801a45a:	2300      	moveq	r3, #0
 801a45c:	b2db      	uxtb	r3, r3
 801a45e:	e009      	b.n	801a474 <HAL_DMA_IRQHandler+0x540>
 801a460:	687b      	ldr	r3, [r7, #4]
 801a462:	681b      	ldr	r3, [r3, #0]
 801a464:	681b      	ldr	r3, [r3, #0]
 801a466:	f003 0304 	and.w	r3, r3, #4
 801a46a:	2b00      	cmp	r3, #0
 801a46c:	bf14      	ite	ne
 801a46e:	2301      	movne	r3, #1
 801a470:	2300      	moveq	r3, #0
 801a472:	b2db      	uxtb	r3, r3
 801a474:	2b00      	cmp	r3, #0
 801a476:	d03e      	beq.n	801a4f6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a47c:	f003 031f 	and.w	r3, r3, #31
 801a480:	2210      	movs	r2, #16
 801a482:	409a      	lsls	r2, r3
 801a484:	6a3b      	ldr	r3, [r7, #32]
 801a486:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801a488:	687b      	ldr	r3, [r7, #4]
 801a48a:	681b      	ldr	r3, [r3, #0]
 801a48c:	681b      	ldr	r3, [r3, #0]
 801a48e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801a492:	2b00      	cmp	r3, #0
 801a494:	d018      	beq.n	801a4c8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801a496:	687b      	ldr	r3, [r7, #4]
 801a498:	681b      	ldr	r3, [r3, #0]
 801a49a:	681b      	ldr	r3, [r3, #0]
 801a49c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801a4a0:	2b00      	cmp	r3, #0
 801a4a2:	d108      	bne.n	801a4b6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 801a4a4:	687b      	ldr	r3, [r7, #4]
 801a4a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	d024      	beq.n	801a4f6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 801a4ac:	687b      	ldr	r3, [r7, #4]
 801a4ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a4b0:	6878      	ldr	r0, [r7, #4]
 801a4b2:	4798      	blx	r3
 801a4b4:	e01f      	b.n	801a4f6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 801a4b6:	687b      	ldr	r3, [r7, #4]
 801a4b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a4ba:	2b00      	cmp	r3, #0
 801a4bc:	d01b      	beq.n	801a4f6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 801a4be:	687b      	ldr	r3, [r7, #4]
 801a4c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a4c2:	6878      	ldr	r0, [r7, #4]
 801a4c4:	4798      	blx	r3
 801a4c6:	e016      	b.n	801a4f6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	681b      	ldr	r3, [r3, #0]
 801a4cc:	681b      	ldr	r3, [r3, #0]
 801a4ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a4d2:	2b00      	cmp	r3, #0
 801a4d4:	d107      	bne.n	801a4e6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801a4d6:	687b      	ldr	r3, [r7, #4]
 801a4d8:	681b      	ldr	r3, [r3, #0]
 801a4da:	681a      	ldr	r2, [r3, #0]
 801a4dc:	687b      	ldr	r3, [r7, #4]
 801a4de:	681b      	ldr	r3, [r3, #0]
 801a4e0:	f022 0208 	bic.w	r2, r2, #8
 801a4e4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a4ea:	2b00      	cmp	r3, #0
 801a4ec:	d003      	beq.n	801a4f6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801a4ee:	687b      	ldr	r3, [r7, #4]
 801a4f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a4f2:	6878      	ldr	r0, [r7, #4]
 801a4f4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801a4f6:	687b      	ldr	r3, [r7, #4]
 801a4f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a4fa:	f003 031f 	and.w	r3, r3, #31
 801a4fe:	2220      	movs	r2, #32
 801a500:	409a      	lsls	r2, r3
 801a502:	69bb      	ldr	r3, [r7, #24]
 801a504:	4013      	ands	r3, r2
 801a506:	2b00      	cmp	r3, #0
 801a508:	f000 8110 	beq.w	801a72c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	681b      	ldr	r3, [r3, #0]
 801a510:	4a2c      	ldr	r2, [pc, #176]	@ (801a5c4 <HAL_DMA_IRQHandler+0x690>)
 801a512:	4293      	cmp	r3, r2
 801a514:	d04a      	beq.n	801a5ac <HAL_DMA_IRQHandler+0x678>
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	681b      	ldr	r3, [r3, #0]
 801a51a:	4a2b      	ldr	r2, [pc, #172]	@ (801a5c8 <HAL_DMA_IRQHandler+0x694>)
 801a51c:	4293      	cmp	r3, r2
 801a51e:	d045      	beq.n	801a5ac <HAL_DMA_IRQHandler+0x678>
 801a520:	687b      	ldr	r3, [r7, #4]
 801a522:	681b      	ldr	r3, [r3, #0]
 801a524:	4a29      	ldr	r2, [pc, #164]	@ (801a5cc <HAL_DMA_IRQHandler+0x698>)
 801a526:	4293      	cmp	r3, r2
 801a528:	d040      	beq.n	801a5ac <HAL_DMA_IRQHandler+0x678>
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	681b      	ldr	r3, [r3, #0]
 801a52e:	4a28      	ldr	r2, [pc, #160]	@ (801a5d0 <HAL_DMA_IRQHandler+0x69c>)
 801a530:	4293      	cmp	r3, r2
 801a532:	d03b      	beq.n	801a5ac <HAL_DMA_IRQHandler+0x678>
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	681b      	ldr	r3, [r3, #0]
 801a538:	4a26      	ldr	r2, [pc, #152]	@ (801a5d4 <HAL_DMA_IRQHandler+0x6a0>)
 801a53a:	4293      	cmp	r3, r2
 801a53c:	d036      	beq.n	801a5ac <HAL_DMA_IRQHandler+0x678>
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	681b      	ldr	r3, [r3, #0]
 801a542:	4a25      	ldr	r2, [pc, #148]	@ (801a5d8 <HAL_DMA_IRQHandler+0x6a4>)
 801a544:	4293      	cmp	r3, r2
 801a546:	d031      	beq.n	801a5ac <HAL_DMA_IRQHandler+0x678>
 801a548:	687b      	ldr	r3, [r7, #4]
 801a54a:	681b      	ldr	r3, [r3, #0]
 801a54c:	4a23      	ldr	r2, [pc, #140]	@ (801a5dc <HAL_DMA_IRQHandler+0x6a8>)
 801a54e:	4293      	cmp	r3, r2
 801a550:	d02c      	beq.n	801a5ac <HAL_DMA_IRQHandler+0x678>
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	681b      	ldr	r3, [r3, #0]
 801a556:	4a22      	ldr	r2, [pc, #136]	@ (801a5e0 <HAL_DMA_IRQHandler+0x6ac>)
 801a558:	4293      	cmp	r3, r2
 801a55a:	d027      	beq.n	801a5ac <HAL_DMA_IRQHandler+0x678>
 801a55c:	687b      	ldr	r3, [r7, #4]
 801a55e:	681b      	ldr	r3, [r3, #0]
 801a560:	4a20      	ldr	r2, [pc, #128]	@ (801a5e4 <HAL_DMA_IRQHandler+0x6b0>)
 801a562:	4293      	cmp	r3, r2
 801a564:	d022      	beq.n	801a5ac <HAL_DMA_IRQHandler+0x678>
 801a566:	687b      	ldr	r3, [r7, #4]
 801a568:	681b      	ldr	r3, [r3, #0]
 801a56a:	4a1f      	ldr	r2, [pc, #124]	@ (801a5e8 <HAL_DMA_IRQHandler+0x6b4>)
 801a56c:	4293      	cmp	r3, r2
 801a56e:	d01d      	beq.n	801a5ac <HAL_DMA_IRQHandler+0x678>
 801a570:	687b      	ldr	r3, [r7, #4]
 801a572:	681b      	ldr	r3, [r3, #0]
 801a574:	4a1d      	ldr	r2, [pc, #116]	@ (801a5ec <HAL_DMA_IRQHandler+0x6b8>)
 801a576:	4293      	cmp	r3, r2
 801a578:	d018      	beq.n	801a5ac <HAL_DMA_IRQHandler+0x678>
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	681b      	ldr	r3, [r3, #0]
 801a57e:	4a1c      	ldr	r2, [pc, #112]	@ (801a5f0 <HAL_DMA_IRQHandler+0x6bc>)
 801a580:	4293      	cmp	r3, r2
 801a582:	d013      	beq.n	801a5ac <HAL_DMA_IRQHandler+0x678>
 801a584:	687b      	ldr	r3, [r7, #4]
 801a586:	681b      	ldr	r3, [r3, #0]
 801a588:	4a1a      	ldr	r2, [pc, #104]	@ (801a5f4 <HAL_DMA_IRQHandler+0x6c0>)
 801a58a:	4293      	cmp	r3, r2
 801a58c:	d00e      	beq.n	801a5ac <HAL_DMA_IRQHandler+0x678>
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	681b      	ldr	r3, [r3, #0]
 801a592:	4a19      	ldr	r2, [pc, #100]	@ (801a5f8 <HAL_DMA_IRQHandler+0x6c4>)
 801a594:	4293      	cmp	r3, r2
 801a596:	d009      	beq.n	801a5ac <HAL_DMA_IRQHandler+0x678>
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	681b      	ldr	r3, [r3, #0]
 801a59c:	4a17      	ldr	r2, [pc, #92]	@ (801a5fc <HAL_DMA_IRQHandler+0x6c8>)
 801a59e:	4293      	cmp	r3, r2
 801a5a0:	d004      	beq.n	801a5ac <HAL_DMA_IRQHandler+0x678>
 801a5a2:	687b      	ldr	r3, [r7, #4]
 801a5a4:	681b      	ldr	r3, [r3, #0]
 801a5a6:	4a16      	ldr	r2, [pc, #88]	@ (801a600 <HAL_DMA_IRQHandler+0x6cc>)
 801a5a8:	4293      	cmp	r3, r2
 801a5aa:	d12b      	bne.n	801a604 <HAL_DMA_IRQHandler+0x6d0>
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	681b      	ldr	r3, [r3, #0]
 801a5b0:	681b      	ldr	r3, [r3, #0]
 801a5b2:	f003 0310 	and.w	r3, r3, #16
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	bf14      	ite	ne
 801a5ba:	2301      	movne	r3, #1
 801a5bc:	2300      	moveq	r3, #0
 801a5be:	b2db      	uxtb	r3, r3
 801a5c0:	e02a      	b.n	801a618 <HAL_DMA_IRQHandler+0x6e4>
 801a5c2:	bf00      	nop
 801a5c4:	40020010 	.word	0x40020010
 801a5c8:	40020028 	.word	0x40020028
 801a5cc:	40020040 	.word	0x40020040
 801a5d0:	40020058 	.word	0x40020058
 801a5d4:	40020070 	.word	0x40020070
 801a5d8:	40020088 	.word	0x40020088
 801a5dc:	400200a0 	.word	0x400200a0
 801a5e0:	400200b8 	.word	0x400200b8
 801a5e4:	40020410 	.word	0x40020410
 801a5e8:	40020428 	.word	0x40020428
 801a5ec:	40020440 	.word	0x40020440
 801a5f0:	40020458 	.word	0x40020458
 801a5f4:	40020470 	.word	0x40020470
 801a5f8:	40020488 	.word	0x40020488
 801a5fc:	400204a0 	.word	0x400204a0
 801a600:	400204b8 	.word	0x400204b8
 801a604:	687b      	ldr	r3, [r7, #4]
 801a606:	681b      	ldr	r3, [r3, #0]
 801a608:	681b      	ldr	r3, [r3, #0]
 801a60a:	f003 0302 	and.w	r3, r3, #2
 801a60e:	2b00      	cmp	r3, #0
 801a610:	bf14      	ite	ne
 801a612:	2301      	movne	r3, #1
 801a614:	2300      	moveq	r3, #0
 801a616:	b2db      	uxtb	r3, r3
 801a618:	2b00      	cmp	r3, #0
 801a61a:	f000 8087 	beq.w	801a72c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a622:	f003 031f 	and.w	r3, r3, #31
 801a626:	2220      	movs	r2, #32
 801a628:	409a      	lsls	r2, r3
 801a62a:	6a3b      	ldr	r3, [r7, #32]
 801a62c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a634:	b2db      	uxtb	r3, r3
 801a636:	2b04      	cmp	r3, #4
 801a638:	d139      	bne.n	801a6ae <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801a63a:	687b      	ldr	r3, [r7, #4]
 801a63c:	681b      	ldr	r3, [r3, #0]
 801a63e:	681a      	ldr	r2, [r3, #0]
 801a640:	687b      	ldr	r3, [r7, #4]
 801a642:	681b      	ldr	r3, [r3, #0]
 801a644:	f022 0216 	bic.w	r2, r2, #22
 801a648:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 801a64a:	687b      	ldr	r3, [r7, #4]
 801a64c:	681b      	ldr	r3, [r3, #0]
 801a64e:	695a      	ldr	r2, [r3, #20]
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	681b      	ldr	r3, [r3, #0]
 801a654:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801a658:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a65e:	2b00      	cmp	r3, #0
 801a660:	d103      	bne.n	801a66a <HAL_DMA_IRQHandler+0x736>
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a666:	2b00      	cmp	r3, #0
 801a668:	d007      	beq.n	801a67a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	681b      	ldr	r3, [r3, #0]
 801a66e:	681a      	ldr	r2, [r3, #0]
 801a670:	687b      	ldr	r3, [r7, #4]
 801a672:	681b      	ldr	r3, [r3, #0]
 801a674:	f022 0208 	bic.w	r2, r2, #8
 801a678:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a67e:	f003 031f 	and.w	r3, r3, #31
 801a682:	223f      	movs	r2, #63	@ 0x3f
 801a684:	409a      	lsls	r2, r3
 801a686:	6a3b      	ldr	r3, [r7, #32]
 801a688:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801a68a:	687b      	ldr	r3, [r7, #4]
 801a68c:	2201      	movs	r2, #1
 801a68e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	2200      	movs	r2, #0
 801a696:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a69e:	2b00      	cmp	r3, #0
 801a6a0:	f000 834a 	beq.w	801ad38 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 801a6a4:	687b      	ldr	r3, [r7, #4]
 801a6a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a6a8:	6878      	ldr	r0, [r7, #4]
 801a6aa:	4798      	blx	r3
          }
          return;
 801a6ac:	e344      	b.n	801ad38 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801a6ae:	687b      	ldr	r3, [r7, #4]
 801a6b0:	681b      	ldr	r3, [r3, #0]
 801a6b2:	681b      	ldr	r3, [r3, #0]
 801a6b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801a6b8:	2b00      	cmp	r3, #0
 801a6ba:	d018      	beq.n	801a6ee <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	681b      	ldr	r3, [r3, #0]
 801a6c0:	681b      	ldr	r3, [r3, #0]
 801a6c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801a6c6:	2b00      	cmp	r3, #0
 801a6c8:	d108      	bne.n	801a6dc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 801a6ca:	687b      	ldr	r3, [r7, #4]
 801a6cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a6ce:	2b00      	cmp	r3, #0
 801a6d0:	d02c      	beq.n	801a72c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 801a6d2:	687b      	ldr	r3, [r7, #4]
 801a6d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a6d6:	6878      	ldr	r0, [r7, #4]
 801a6d8:	4798      	blx	r3
 801a6da:	e027      	b.n	801a72c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 801a6dc:	687b      	ldr	r3, [r7, #4]
 801a6de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a6e0:	2b00      	cmp	r3, #0
 801a6e2:	d023      	beq.n	801a72c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 801a6e4:	687b      	ldr	r3, [r7, #4]
 801a6e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a6e8:	6878      	ldr	r0, [r7, #4]
 801a6ea:	4798      	blx	r3
 801a6ec:	e01e      	b.n	801a72c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	681b      	ldr	r3, [r3, #0]
 801a6f2:	681b      	ldr	r3, [r3, #0]
 801a6f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a6f8:	2b00      	cmp	r3, #0
 801a6fa:	d10f      	bne.n	801a71c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	681b      	ldr	r3, [r3, #0]
 801a700:	681a      	ldr	r2, [r3, #0]
 801a702:	687b      	ldr	r3, [r7, #4]
 801a704:	681b      	ldr	r3, [r3, #0]
 801a706:	f022 0210 	bic.w	r2, r2, #16
 801a70a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 801a70c:	687b      	ldr	r3, [r7, #4]
 801a70e:	2201      	movs	r2, #1
 801a710:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	2200      	movs	r2, #0
 801a718:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 801a71c:	687b      	ldr	r3, [r7, #4]
 801a71e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a720:	2b00      	cmp	r3, #0
 801a722:	d003      	beq.n	801a72c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a728:	6878      	ldr	r0, [r7, #4]
 801a72a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a730:	2b00      	cmp	r3, #0
 801a732:	f000 8306 	beq.w	801ad42 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a73a:	f003 0301 	and.w	r3, r3, #1
 801a73e:	2b00      	cmp	r3, #0
 801a740:	f000 8088 	beq.w	801a854 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 801a744:	687b      	ldr	r3, [r7, #4]
 801a746:	2204      	movs	r2, #4
 801a748:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 801a74c:	687b      	ldr	r3, [r7, #4]
 801a74e:	681b      	ldr	r3, [r3, #0]
 801a750:	4a7a      	ldr	r2, [pc, #488]	@ (801a93c <HAL_DMA_IRQHandler+0xa08>)
 801a752:	4293      	cmp	r3, r2
 801a754:	d04a      	beq.n	801a7ec <HAL_DMA_IRQHandler+0x8b8>
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	681b      	ldr	r3, [r3, #0]
 801a75a:	4a79      	ldr	r2, [pc, #484]	@ (801a940 <HAL_DMA_IRQHandler+0xa0c>)
 801a75c:	4293      	cmp	r3, r2
 801a75e:	d045      	beq.n	801a7ec <HAL_DMA_IRQHandler+0x8b8>
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	681b      	ldr	r3, [r3, #0]
 801a764:	4a77      	ldr	r2, [pc, #476]	@ (801a944 <HAL_DMA_IRQHandler+0xa10>)
 801a766:	4293      	cmp	r3, r2
 801a768:	d040      	beq.n	801a7ec <HAL_DMA_IRQHandler+0x8b8>
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	681b      	ldr	r3, [r3, #0]
 801a76e:	4a76      	ldr	r2, [pc, #472]	@ (801a948 <HAL_DMA_IRQHandler+0xa14>)
 801a770:	4293      	cmp	r3, r2
 801a772:	d03b      	beq.n	801a7ec <HAL_DMA_IRQHandler+0x8b8>
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	681b      	ldr	r3, [r3, #0]
 801a778:	4a74      	ldr	r2, [pc, #464]	@ (801a94c <HAL_DMA_IRQHandler+0xa18>)
 801a77a:	4293      	cmp	r3, r2
 801a77c:	d036      	beq.n	801a7ec <HAL_DMA_IRQHandler+0x8b8>
 801a77e:	687b      	ldr	r3, [r7, #4]
 801a780:	681b      	ldr	r3, [r3, #0]
 801a782:	4a73      	ldr	r2, [pc, #460]	@ (801a950 <HAL_DMA_IRQHandler+0xa1c>)
 801a784:	4293      	cmp	r3, r2
 801a786:	d031      	beq.n	801a7ec <HAL_DMA_IRQHandler+0x8b8>
 801a788:	687b      	ldr	r3, [r7, #4]
 801a78a:	681b      	ldr	r3, [r3, #0]
 801a78c:	4a71      	ldr	r2, [pc, #452]	@ (801a954 <HAL_DMA_IRQHandler+0xa20>)
 801a78e:	4293      	cmp	r3, r2
 801a790:	d02c      	beq.n	801a7ec <HAL_DMA_IRQHandler+0x8b8>
 801a792:	687b      	ldr	r3, [r7, #4]
 801a794:	681b      	ldr	r3, [r3, #0]
 801a796:	4a70      	ldr	r2, [pc, #448]	@ (801a958 <HAL_DMA_IRQHandler+0xa24>)
 801a798:	4293      	cmp	r3, r2
 801a79a:	d027      	beq.n	801a7ec <HAL_DMA_IRQHandler+0x8b8>
 801a79c:	687b      	ldr	r3, [r7, #4]
 801a79e:	681b      	ldr	r3, [r3, #0]
 801a7a0:	4a6e      	ldr	r2, [pc, #440]	@ (801a95c <HAL_DMA_IRQHandler+0xa28>)
 801a7a2:	4293      	cmp	r3, r2
 801a7a4:	d022      	beq.n	801a7ec <HAL_DMA_IRQHandler+0x8b8>
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	681b      	ldr	r3, [r3, #0]
 801a7aa:	4a6d      	ldr	r2, [pc, #436]	@ (801a960 <HAL_DMA_IRQHandler+0xa2c>)
 801a7ac:	4293      	cmp	r3, r2
 801a7ae:	d01d      	beq.n	801a7ec <HAL_DMA_IRQHandler+0x8b8>
 801a7b0:	687b      	ldr	r3, [r7, #4]
 801a7b2:	681b      	ldr	r3, [r3, #0]
 801a7b4:	4a6b      	ldr	r2, [pc, #428]	@ (801a964 <HAL_DMA_IRQHandler+0xa30>)
 801a7b6:	4293      	cmp	r3, r2
 801a7b8:	d018      	beq.n	801a7ec <HAL_DMA_IRQHandler+0x8b8>
 801a7ba:	687b      	ldr	r3, [r7, #4]
 801a7bc:	681b      	ldr	r3, [r3, #0]
 801a7be:	4a6a      	ldr	r2, [pc, #424]	@ (801a968 <HAL_DMA_IRQHandler+0xa34>)
 801a7c0:	4293      	cmp	r3, r2
 801a7c2:	d013      	beq.n	801a7ec <HAL_DMA_IRQHandler+0x8b8>
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	681b      	ldr	r3, [r3, #0]
 801a7c8:	4a68      	ldr	r2, [pc, #416]	@ (801a96c <HAL_DMA_IRQHandler+0xa38>)
 801a7ca:	4293      	cmp	r3, r2
 801a7cc:	d00e      	beq.n	801a7ec <HAL_DMA_IRQHandler+0x8b8>
 801a7ce:	687b      	ldr	r3, [r7, #4]
 801a7d0:	681b      	ldr	r3, [r3, #0]
 801a7d2:	4a67      	ldr	r2, [pc, #412]	@ (801a970 <HAL_DMA_IRQHandler+0xa3c>)
 801a7d4:	4293      	cmp	r3, r2
 801a7d6:	d009      	beq.n	801a7ec <HAL_DMA_IRQHandler+0x8b8>
 801a7d8:	687b      	ldr	r3, [r7, #4]
 801a7da:	681b      	ldr	r3, [r3, #0]
 801a7dc:	4a65      	ldr	r2, [pc, #404]	@ (801a974 <HAL_DMA_IRQHandler+0xa40>)
 801a7de:	4293      	cmp	r3, r2
 801a7e0:	d004      	beq.n	801a7ec <HAL_DMA_IRQHandler+0x8b8>
 801a7e2:	687b      	ldr	r3, [r7, #4]
 801a7e4:	681b      	ldr	r3, [r3, #0]
 801a7e6:	4a64      	ldr	r2, [pc, #400]	@ (801a978 <HAL_DMA_IRQHandler+0xa44>)
 801a7e8:	4293      	cmp	r3, r2
 801a7ea:	d108      	bne.n	801a7fe <HAL_DMA_IRQHandler+0x8ca>
 801a7ec:	687b      	ldr	r3, [r7, #4]
 801a7ee:	681b      	ldr	r3, [r3, #0]
 801a7f0:	681a      	ldr	r2, [r3, #0]
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	681b      	ldr	r3, [r3, #0]
 801a7f6:	f022 0201 	bic.w	r2, r2, #1
 801a7fa:	601a      	str	r2, [r3, #0]
 801a7fc:	e007      	b.n	801a80e <HAL_DMA_IRQHandler+0x8da>
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	681b      	ldr	r3, [r3, #0]
 801a802:	681a      	ldr	r2, [r3, #0]
 801a804:	687b      	ldr	r3, [r7, #4]
 801a806:	681b      	ldr	r3, [r3, #0]
 801a808:	f022 0201 	bic.w	r2, r2, #1
 801a80c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 801a80e:	68fb      	ldr	r3, [r7, #12]
 801a810:	3301      	adds	r3, #1
 801a812:	60fb      	str	r3, [r7, #12]
 801a814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a816:	429a      	cmp	r2, r3
 801a818:	d307      	bcc.n	801a82a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	681b      	ldr	r3, [r3, #0]
 801a81e:	681b      	ldr	r3, [r3, #0]
 801a820:	f003 0301 	and.w	r3, r3, #1
 801a824:	2b00      	cmp	r3, #0
 801a826:	d1f2      	bne.n	801a80e <HAL_DMA_IRQHandler+0x8da>
 801a828:	e000      	b.n	801a82c <HAL_DMA_IRQHandler+0x8f8>
            break;
 801a82a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	681b      	ldr	r3, [r3, #0]
 801a830:	681b      	ldr	r3, [r3, #0]
 801a832:	f003 0301 	and.w	r3, r3, #1
 801a836:	2b00      	cmp	r3, #0
 801a838:	d004      	beq.n	801a844 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	2203      	movs	r2, #3
 801a83e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 801a842:	e003      	b.n	801a84c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	2201      	movs	r2, #1
 801a848:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	2200      	movs	r2, #0
 801a850:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a858:	2b00      	cmp	r3, #0
 801a85a:	f000 8272 	beq.w	801ad42 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801a85e:	687b      	ldr	r3, [r7, #4]
 801a860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a862:	6878      	ldr	r0, [r7, #4]
 801a864:	4798      	blx	r3
 801a866:	e26c      	b.n	801ad42 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 801a868:	687b      	ldr	r3, [r7, #4]
 801a86a:	681b      	ldr	r3, [r3, #0]
 801a86c:	4a43      	ldr	r2, [pc, #268]	@ (801a97c <HAL_DMA_IRQHandler+0xa48>)
 801a86e:	4293      	cmp	r3, r2
 801a870:	d022      	beq.n	801a8b8 <HAL_DMA_IRQHandler+0x984>
 801a872:	687b      	ldr	r3, [r7, #4]
 801a874:	681b      	ldr	r3, [r3, #0]
 801a876:	4a42      	ldr	r2, [pc, #264]	@ (801a980 <HAL_DMA_IRQHandler+0xa4c>)
 801a878:	4293      	cmp	r3, r2
 801a87a:	d01d      	beq.n	801a8b8 <HAL_DMA_IRQHandler+0x984>
 801a87c:	687b      	ldr	r3, [r7, #4]
 801a87e:	681b      	ldr	r3, [r3, #0]
 801a880:	4a40      	ldr	r2, [pc, #256]	@ (801a984 <HAL_DMA_IRQHandler+0xa50>)
 801a882:	4293      	cmp	r3, r2
 801a884:	d018      	beq.n	801a8b8 <HAL_DMA_IRQHandler+0x984>
 801a886:	687b      	ldr	r3, [r7, #4]
 801a888:	681b      	ldr	r3, [r3, #0]
 801a88a:	4a3f      	ldr	r2, [pc, #252]	@ (801a988 <HAL_DMA_IRQHandler+0xa54>)
 801a88c:	4293      	cmp	r3, r2
 801a88e:	d013      	beq.n	801a8b8 <HAL_DMA_IRQHandler+0x984>
 801a890:	687b      	ldr	r3, [r7, #4]
 801a892:	681b      	ldr	r3, [r3, #0]
 801a894:	4a3d      	ldr	r2, [pc, #244]	@ (801a98c <HAL_DMA_IRQHandler+0xa58>)
 801a896:	4293      	cmp	r3, r2
 801a898:	d00e      	beq.n	801a8b8 <HAL_DMA_IRQHandler+0x984>
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	681b      	ldr	r3, [r3, #0]
 801a89e:	4a3c      	ldr	r2, [pc, #240]	@ (801a990 <HAL_DMA_IRQHandler+0xa5c>)
 801a8a0:	4293      	cmp	r3, r2
 801a8a2:	d009      	beq.n	801a8b8 <HAL_DMA_IRQHandler+0x984>
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	681b      	ldr	r3, [r3, #0]
 801a8a8:	4a3a      	ldr	r2, [pc, #232]	@ (801a994 <HAL_DMA_IRQHandler+0xa60>)
 801a8aa:	4293      	cmp	r3, r2
 801a8ac:	d004      	beq.n	801a8b8 <HAL_DMA_IRQHandler+0x984>
 801a8ae:	687b      	ldr	r3, [r7, #4]
 801a8b0:	681b      	ldr	r3, [r3, #0]
 801a8b2:	4a39      	ldr	r2, [pc, #228]	@ (801a998 <HAL_DMA_IRQHandler+0xa64>)
 801a8b4:	4293      	cmp	r3, r2
 801a8b6:	d101      	bne.n	801a8bc <HAL_DMA_IRQHandler+0x988>
 801a8b8:	2301      	movs	r3, #1
 801a8ba:	e000      	b.n	801a8be <HAL_DMA_IRQHandler+0x98a>
 801a8bc:	2300      	movs	r3, #0
 801a8be:	2b00      	cmp	r3, #0
 801a8c0:	f000 823f 	beq.w	801ad42 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	681b      	ldr	r3, [r3, #0]
 801a8c8:	681b      	ldr	r3, [r3, #0]
 801a8ca:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 801a8cc:	687b      	ldr	r3, [r7, #4]
 801a8ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a8d0:	f003 031f 	and.w	r3, r3, #31
 801a8d4:	2204      	movs	r2, #4
 801a8d6:	409a      	lsls	r2, r3
 801a8d8:	697b      	ldr	r3, [r7, #20]
 801a8da:	4013      	ands	r3, r2
 801a8dc:	2b00      	cmp	r3, #0
 801a8de:	f000 80cd 	beq.w	801aa7c <HAL_DMA_IRQHandler+0xb48>
 801a8e2:	693b      	ldr	r3, [r7, #16]
 801a8e4:	f003 0304 	and.w	r3, r3, #4
 801a8e8:	2b00      	cmp	r3, #0
 801a8ea:	f000 80c7 	beq.w	801aa7c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 801a8ee:	687b      	ldr	r3, [r7, #4]
 801a8f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a8f2:	f003 031f 	and.w	r3, r3, #31
 801a8f6:	2204      	movs	r2, #4
 801a8f8:	409a      	lsls	r2, r3
 801a8fa:	69fb      	ldr	r3, [r7, #28]
 801a8fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801a8fe:	693b      	ldr	r3, [r7, #16]
 801a900:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801a904:	2b00      	cmp	r3, #0
 801a906:	d049      	beq.n	801a99c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801a908:	693b      	ldr	r3, [r7, #16]
 801a90a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801a90e:	2b00      	cmp	r3, #0
 801a910:	d109      	bne.n	801a926 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a916:	2b00      	cmp	r3, #0
 801a918:	f000 8210 	beq.w	801ad3c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a920:	6878      	ldr	r0, [r7, #4]
 801a922:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801a924:	e20a      	b.n	801ad3c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801a926:	687b      	ldr	r3, [r7, #4]
 801a928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a92a:	2b00      	cmp	r3, #0
 801a92c:	f000 8206 	beq.w	801ad3c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 801a930:	687b      	ldr	r3, [r7, #4]
 801a932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a934:	6878      	ldr	r0, [r7, #4]
 801a936:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801a938:	e200      	b.n	801ad3c <HAL_DMA_IRQHandler+0xe08>
 801a93a:	bf00      	nop
 801a93c:	40020010 	.word	0x40020010
 801a940:	40020028 	.word	0x40020028
 801a944:	40020040 	.word	0x40020040
 801a948:	40020058 	.word	0x40020058
 801a94c:	40020070 	.word	0x40020070
 801a950:	40020088 	.word	0x40020088
 801a954:	400200a0 	.word	0x400200a0
 801a958:	400200b8 	.word	0x400200b8
 801a95c:	40020410 	.word	0x40020410
 801a960:	40020428 	.word	0x40020428
 801a964:	40020440 	.word	0x40020440
 801a968:	40020458 	.word	0x40020458
 801a96c:	40020470 	.word	0x40020470
 801a970:	40020488 	.word	0x40020488
 801a974:	400204a0 	.word	0x400204a0
 801a978:	400204b8 	.word	0x400204b8
 801a97c:	58025408 	.word	0x58025408
 801a980:	5802541c 	.word	0x5802541c
 801a984:	58025430 	.word	0x58025430
 801a988:	58025444 	.word	0x58025444
 801a98c:	58025458 	.word	0x58025458
 801a990:	5802546c 	.word	0x5802546c
 801a994:	58025480 	.word	0x58025480
 801a998:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801a99c:	693b      	ldr	r3, [r7, #16]
 801a99e:	f003 0320 	and.w	r3, r3, #32
 801a9a2:	2b00      	cmp	r3, #0
 801a9a4:	d160      	bne.n	801aa68 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801a9a6:	687b      	ldr	r3, [r7, #4]
 801a9a8:	681b      	ldr	r3, [r3, #0]
 801a9aa:	4a7f      	ldr	r2, [pc, #508]	@ (801aba8 <HAL_DMA_IRQHandler+0xc74>)
 801a9ac:	4293      	cmp	r3, r2
 801a9ae:	d04a      	beq.n	801aa46 <HAL_DMA_IRQHandler+0xb12>
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	681b      	ldr	r3, [r3, #0]
 801a9b4:	4a7d      	ldr	r2, [pc, #500]	@ (801abac <HAL_DMA_IRQHandler+0xc78>)
 801a9b6:	4293      	cmp	r3, r2
 801a9b8:	d045      	beq.n	801aa46 <HAL_DMA_IRQHandler+0xb12>
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	681b      	ldr	r3, [r3, #0]
 801a9be:	4a7c      	ldr	r2, [pc, #496]	@ (801abb0 <HAL_DMA_IRQHandler+0xc7c>)
 801a9c0:	4293      	cmp	r3, r2
 801a9c2:	d040      	beq.n	801aa46 <HAL_DMA_IRQHandler+0xb12>
 801a9c4:	687b      	ldr	r3, [r7, #4]
 801a9c6:	681b      	ldr	r3, [r3, #0]
 801a9c8:	4a7a      	ldr	r2, [pc, #488]	@ (801abb4 <HAL_DMA_IRQHandler+0xc80>)
 801a9ca:	4293      	cmp	r3, r2
 801a9cc:	d03b      	beq.n	801aa46 <HAL_DMA_IRQHandler+0xb12>
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	681b      	ldr	r3, [r3, #0]
 801a9d2:	4a79      	ldr	r2, [pc, #484]	@ (801abb8 <HAL_DMA_IRQHandler+0xc84>)
 801a9d4:	4293      	cmp	r3, r2
 801a9d6:	d036      	beq.n	801aa46 <HAL_DMA_IRQHandler+0xb12>
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	681b      	ldr	r3, [r3, #0]
 801a9dc:	4a77      	ldr	r2, [pc, #476]	@ (801abbc <HAL_DMA_IRQHandler+0xc88>)
 801a9de:	4293      	cmp	r3, r2
 801a9e0:	d031      	beq.n	801aa46 <HAL_DMA_IRQHandler+0xb12>
 801a9e2:	687b      	ldr	r3, [r7, #4]
 801a9e4:	681b      	ldr	r3, [r3, #0]
 801a9e6:	4a76      	ldr	r2, [pc, #472]	@ (801abc0 <HAL_DMA_IRQHandler+0xc8c>)
 801a9e8:	4293      	cmp	r3, r2
 801a9ea:	d02c      	beq.n	801aa46 <HAL_DMA_IRQHandler+0xb12>
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	681b      	ldr	r3, [r3, #0]
 801a9f0:	4a74      	ldr	r2, [pc, #464]	@ (801abc4 <HAL_DMA_IRQHandler+0xc90>)
 801a9f2:	4293      	cmp	r3, r2
 801a9f4:	d027      	beq.n	801aa46 <HAL_DMA_IRQHandler+0xb12>
 801a9f6:	687b      	ldr	r3, [r7, #4]
 801a9f8:	681b      	ldr	r3, [r3, #0]
 801a9fa:	4a73      	ldr	r2, [pc, #460]	@ (801abc8 <HAL_DMA_IRQHandler+0xc94>)
 801a9fc:	4293      	cmp	r3, r2
 801a9fe:	d022      	beq.n	801aa46 <HAL_DMA_IRQHandler+0xb12>
 801aa00:	687b      	ldr	r3, [r7, #4]
 801aa02:	681b      	ldr	r3, [r3, #0]
 801aa04:	4a71      	ldr	r2, [pc, #452]	@ (801abcc <HAL_DMA_IRQHandler+0xc98>)
 801aa06:	4293      	cmp	r3, r2
 801aa08:	d01d      	beq.n	801aa46 <HAL_DMA_IRQHandler+0xb12>
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	681b      	ldr	r3, [r3, #0]
 801aa0e:	4a70      	ldr	r2, [pc, #448]	@ (801abd0 <HAL_DMA_IRQHandler+0xc9c>)
 801aa10:	4293      	cmp	r3, r2
 801aa12:	d018      	beq.n	801aa46 <HAL_DMA_IRQHandler+0xb12>
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	681b      	ldr	r3, [r3, #0]
 801aa18:	4a6e      	ldr	r2, [pc, #440]	@ (801abd4 <HAL_DMA_IRQHandler+0xca0>)
 801aa1a:	4293      	cmp	r3, r2
 801aa1c:	d013      	beq.n	801aa46 <HAL_DMA_IRQHandler+0xb12>
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	681b      	ldr	r3, [r3, #0]
 801aa22:	4a6d      	ldr	r2, [pc, #436]	@ (801abd8 <HAL_DMA_IRQHandler+0xca4>)
 801aa24:	4293      	cmp	r3, r2
 801aa26:	d00e      	beq.n	801aa46 <HAL_DMA_IRQHandler+0xb12>
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	681b      	ldr	r3, [r3, #0]
 801aa2c:	4a6b      	ldr	r2, [pc, #428]	@ (801abdc <HAL_DMA_IRQHandler+0xca8>)
 801aa2e:	4293      	cmp	r3, r2
 801aa30:	d009      	beq.n	801aa46 <HAL_DMA_IRQHandler+0xb12>
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	681b      	ldr	r3, [r3, #0]
 801aa36:	4a6a      	ldr	r2, [pc, #424]	@ (801abe0 <HAL_DMA_IRQHandler+0xcac>)
 801aa38:	4293      	cmp	r3, r2
 801aa3a:	d004      	beq.n	801aa46 <HAL_DMA_IRQHandler+0xb12>
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	681b      	ldr	r3, [r3, #0]
 801aa40:	4a68      	ldr	r2, [pc, #416]	@ (801abe4 <HAL_DMA_IRQHandler+0xcb0>)
 801aa42:	4293      	cmp	r3, r2
 801aa44:	d108      	bne.n	801aa58 <HAL_DMA_IRQHandler+0xb24>
 801aa46:	687b      	ldr	r3, [r7, #4]
 801aa48:	681b      	ldr	r3, [r3, #0]
 801aa4a:	681a      	ldr	r2, [r3, #0]
 801aa4c:	687b      	ldr	r3, [r7, #4]
 801aa4e:	681b      	ldr	r3, [r3, #0]
 801aa50:	f022 0208 	bic.w	r2, r2, #8
 801aa54:	601a      	str	r2, [r3, #0]
 801aa56:	e007      	b.n	801aa68 <HAL_DMA_IRQHandler+0xb34>
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	681b      	ldr	r3, [r3, #0]
 801aa5c:	681a      	ldr	r2, [r3, #0]
 801aa5e:	687b      	ldr	r3, [r7, #4]
 801aa60:	681b      	ldr	r3, [r3, #0]
 801aa62:	f022 0204 	bic.w	r2, r2, #4
 801aa66:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 801aa68:	687b      	ldr	r3, [r7, #4]
 801aa6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801aa6c:	2b00      	cmp	r3, #0
 801aa6e:	f000 8165 	beq.w	801ad3c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801aa72:	687b      	ldr	r3, [r7, #4]
 801aa74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801aa76:	6878      	ldr	r0, [r7, #4]
 801aa78:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801aa7a:	e15f      	b.n	801ad3c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801aa80:	f003 031f 	and.w	r3, r3, #31
 801aa84:	2202      	movs	r2, #2
 801aa86:	409a      	lsls	r2, r3
 801aa88:	697b      	ldr	r3, [r7, #20]
 801aa8a:	4013      	ands	r3, r2
 801aa8c:	2b00      	cmp	r3, #0
 801aa8e:	f000 80c5 	beq.w	801ac1c <HAL_DMA_IRQHandler+0xce8>
 801aa92:	693b      	ldr	r3, [r7, #16]
 801aa94:	f003 0302 	and.w	r3, r3, #2
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	f000 80bf 	beq.w	801ac1c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 801aa9e:	687b      	ldr	r3, [r7, #4]
 801aaa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801aaa2:	f003 031f 	and.w	r3, r3, #31
 801aaa6:	2202      	movs	r2, #2
 801aaa8:	409a      	lsls	r2, r3
 801aaaa:	69fb      	ldr	r3, [r7, #28]
 801aaac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801aaae:	693b      	ldr	r3, [r7, #16]
 801aab0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	d018      	beq.n	801aaea <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801aab8:	693b      	ldr	r3, [r7, #16]
 801aaba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801aabe:	2b00      	cmp	r3, #0
 801aac0:	d109      	bne.n	801aad6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801aac2:	687b      	ldr	r3, [r7, #4]
 801aac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801aac6:	2b00      	cmp	r3, #0
 801aac8:	f000 813a 	beq.w	801ad40 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 801aacc:	687b      	ldr	r3, [r7, #4]
 801aace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801aad0:	6878      	ldr	r0, [r7, #4]
 801aad2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801aad4:	e134      	b.n	801ad40 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801aad6:	687b      	ldr	r3, [r7, #4]
 801aad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801aada:	2b00      	cmp	r3, #0
 801aadc:	f000 8130 	beq.w	801ad40 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801aae4:	6878      	ldr	r0, [r7, #4]
 801aae6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801aae8:	e12a      	b.n	801ad40 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801aaea:	693b      	ldr	r3, [r7, #16]
 801aaec:	f003 0320 	and.w	r3, r3, #32
 801aaf0:	2b00      	cmp	r3, #0
 801aaf2:	f040 8089 	bne.w	801ac08 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801aaf6:	687b      	ldr	r3, [r7, #4]
 801aaf8:	681b      	ldr	r3, [r3, #0]
 801aafa:	4a2b      	ldr	r2, [pc, #172]	@ (801aba8 <HAL_DMA_IRQHandler+0xc74>)
 801aafc:	4293      	cmp	r3, r2
 801aafe:	d04a      	beq.n	801ab96 <HAL_DMA_IRQHandler+0xc62>
 801ab00:	687b      	ldr	r3, [r7, #4]
 801ab02:	681b      	ldr	r3, [r3, #0]
 801ab04:	4a29      	ldr	r2, [pc, #164]	@ (801abac <HAL_DMA_IRQHandler+0xc78>)
 801ab06:	4293      	cmp	r3, r2
 801ab08:	d045      	beq.n	801ab96 <HAL_DMA_IRQHandler+0xc62>
 801ab0a:	687b      	ldr	r3, [r7, #4]
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	4a28      	ldr	r2, [pc, #160]	@ (801abb0 <HAL_DMA_IRQHandler+0xc7c>)
 801ab10:	4293      	cmp	r3, r2
 801ab12:	d040      	beq.n	801ab96 <HAL_DMA_IRQHandler+0xc62>
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	681b      	ldr	r3, [r3, #0]
 801ab18:	4a26      	ldr	r2, [pc, #152]	@ (801abb4 <HAL_DMA_IRQHandler+0xc80>)
 801ab1a:	4293      	cmp	r3, r2
 801ab1c:	d03b      	beq.n	801ab96 <HAL_DMA_IRQHandler+0xc62>
 801ab1e:	687b      	ldr	r3, [r7, #4]
 801ab20:	681b      	ldr	r3, [r3, #0]
 801ab22:	4a25      	ldr	r2, [pc, #148]	@ (801abb8 <HAL_DMA_IRQHandler+0xc84>)
 801ab24:	4293      	cmp	r3, r2
 801ab26:	d036      	beq.n	801ab96 <HAL_DMA_IRQHandler+0xc62>
 801ab28:	687b      	ldr	r3, [r7, #4]
 801ab2a:	681b      	ldr	r3, [r3, #0]
 801ab2c:	4a23      	ldr	r2, [pc, #140]	@ (801abbc <HAL_DMA_IRQHandler+0xc88>)
 801ab2e:	4293      	cmp	r3, r2
 801ab30:	d031      	beq.n	801ab96 <HAL_DMA_IRQHandler+0xc62>
 801ab32:	687b      	ldr	r3, [r7, #4]
 801ab34:	681b      	ldr	r3, [r3, #0]
 801ab36:	4a22      	ldr	r2, [pc, #136]	@ (801abc0 <HAL_DMA_IRQHandler+0xc8c>)
 801ab38:	4293      	cmp	r3, r2
 801ab3a:	d02c      	beq.n	801ab96 <HAL_DMA_IRQHandler+0xc62>
 801ab3c:	687b      	ldr	r3, [r7, #4]
 801ab3e:	681b      	ldr	r3, [r3, #0]
 801ab40:	4a20      	ldr	r2, [pc, #128]	@ (801abc4 <HAL_DMA_IRQHandler+0xc90>)
 801ab42:	4293      	cmp	r3, r2
 801ab44:	d027      	beq.n	801ab96 <HAL_DMA_IRQHandler+0xc62>
 801ab46:	687b      	ldr	r3, [r7, #4]
 801ab48:	681b      	ldr	r3, [r3, #0]
 801ab4a:	4a1f      	ldr	r2, [pc, #124]	@ (801abc8 <HAL_DMA_IRQHandler+0xc94>)
 801ab4c:	4293      	cmp	r3, r2
 801ab4e:	d022      	beq.n	801ab96 <HAL_DMA_IRQHandler+0xc62>
 801ab50:	687b      	ldr	r3, [r7, #4]
 801ab52:	681b      	ldr	r3, [r3, #0]
 801ab54:	4a1d      	ldr	r2, [pc, #116]	@ (801abcc <HAL_DMA_IRQHandler+0xc98>)
 801ab56:	4293      	cmp	r3, r2
 801ab58:	d01d      	beq.n	801ab96 <HAL_DMA_IRQHandler+0xc62>
 801ab5a:	687b      	ldr	r3, [r7, #4]
 801ab5c:	681b      	ldr	r3, [r3, #0]
 801ab5e:	4a1c      	ldr	r2, [pc, #112]	@ (801abd0 <HAL_DMA_IRQHandler+0xc9c>)
 801ab60:	4293      	cmp	r3, r2
 801ab62:	d018      	beq.n	801ab96 <HAL_DMA_IRQHandler+0xc62>
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	681b      	ldr	r3, [r3, #0]
 801ab68:	4a1a      	ldr	r2, [pc, #104]	@ (801abd4 <HAL_DMA_IRQHandler+0xca0>)
 801ab6a:	4293      	cmp	r3, r2
 801ab6c:	d013      	beq.n	801ab96 <HAL_DMA_IRQHandler+0xc62>
 801ab6e:	687b      	ldr	r3, [r7, #4]
 801ab70:	681b      	ldr	r3, [r3, #0]
 801ab72:	4a19      	ldr	r2, [pc, #100]	@ (801abd8 <HAL_DMA_IRQHandler+0xca4>)
 801ab74:	4293      	cmp	r3, r2
 801ab76:	d00e      	beq.n	801ab96 <HAL_DMA_IRQHandler+0xc62>
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	681b      	ldr	r3, [r3, #0]
 801ab7c:	4a17      	ldr	r2, [pc, #92]	@ (801abdc <HAL_DMA_IRQHandler+0xca8>)
 801ab7e:	4293      	cmp	r3, r2
 801ab80:	d009      	beq.n	801ab96 <HAL_DMA_IRQHandler+0xc62>
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	681b      	ldr	r3, [r3, #0]
 801ab86:	4a16      	ldr	r2, [pc, #88]	@ (801abe0 <HAL_DMA_IRQHandler+0xcac>)
 801ab88:	4293      	cmp	r3, r2
 801ab8a:	d004      	beq.n	801ab96 <HAL_DMA_IRQHandler+0xc62>
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	681b      	ldr	r3, [r3, #0]
 801ab90:	4a14      	ldr	r2, [pc, #80]	@ (801abe4 <HAL_DMA_IRQHandler+0xcb0>)
 801ab92:	4293      	cmp	r3, r2
 801ab94:	d128      	bne.n	801abe8 <HAL_DMA_IRQHandler+0xcb4>
 801ab96:	687b      	ldr	r3, [r7, #4]
 801ab98:	681b      	ldr	r3, [r3, #0]
 801ab9a:	681a      	ldr	r2, [r3, #0]
 801ab9c:	687b      	ldr	r3, [r7, #4]
 801ab9e:	681b      	ldr	r3, [r3, #0]
 801aba0:	f022 0214 	bic.w	r2, r2, #20
 801aba4:	601a      	str	r2, [r3, #0]
 801aba6:	e027      	b.n	801abf8 <HAL_DMA_IRQHandler+0xcc4>
 801aba8:	40020010 	.word	0x40020010
 801abac:	40020028 	.word	0x40020028
 801abb0:	40020040 	.word	0x40020040
 801abb4:	40020058 	.word	0x40020058
 801abb8:	40020070 	.word	0x40020070
 801abbc:	40020088 	.word	0x40020088
 801abc0:	400200a0 	.word	0x400200a0
 801abc4:	400200b8 	.word	0x400200b8
 801abc8:	40020410 	.word	0x40020410
 801abcc:	40020428 	.word	0x40020428
 801abd0:	40020440 	.word	0x40020440
 801abd4:	40020458 	.word	0x40020458
 801abd8:	40020470 	.word	0x40020470
 801abdc:	40020488 	.word	0x40020488
 801abe0:	400204a0 	.word	0x400204a0
 801abe4:	400204b8 	.word	0x400204b8
 801abe8:	687b      	ldr	r3, [r7, #4]
 801abea:	681b      	ldr	r3, [r3, #0]
 801abec:	681a      	ldr	r2, [r3, #0]
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	681b      	ldr	r3, [r3, #0]
 801abf2:	f022 020a 	bic.w	r2, r2, #10
 801abf6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	2201      	movs	r2, #1
 801abfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	2200      	movs	r2, #0
 801ac04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ac0c:	2b00      	cmp	r3, #0
 801ac0e:	f000 8097 	beq.w	801ad40 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801ac12:	687b      	ldr	r3, [r7, #4]
 801ac14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ac16:	6878      	ldr	r0, [r7, #4]
 801ac18:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801ac1a:	e091      	b.n	801ad40 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ac20:	f003 031f 	and.w	r3, r3, #31
 801ac24:	2208      	movs	r2, #8
 801ac26:	409a      	lsls	r2, r3
 801ac28:	697b      	ldr	r3, [r7, #20]
 801ac2a:	4013      	ands	r3, r2
 801ac2c:	2b00      	cmp	r3, #0
 801ac2e:	f000 8088 	beq.w	801ad42 <HAL_DMA_IRQHandler+0xe0e>
 801ac32:	693b      	ldr	r3, [r7, #16]
 801ac34:	f003 0308 	and.w	r3, r3, #8
 801ac38:	2b00      	cmp	r3, #0
 801ac3a:	f000 8082 	beq.w	801ad42 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	681b      	ldr	r3, [r3, #0]
 801ac42:	4a41      	ldr	r2, [pc, #260]	@ (801ad48 <HAL_DMA_IRQHandler+0xe14>)
 801ac44:	4293      	cmp	r3, r2
 801ac46:	d04a      	beq.n	801acde <HAL_DMA_IRQHandler+0xdaa>
 801ac48:	687b      	ldr	r3, [r7, #4]
 801ac4a:	681b      	ldr	r3, [r3, #0]
 801ac4c:	4a3f      	ldr	r2, [pc, #252]	@ (801ad4c <HAL_DMA_IRQHandler+0xe18>)
 801ac4e:	4293      	cmp	r3, r2
 801ac50:	d045      	beq.n	801acde <HAL_DMA_IRQHandler+0xdaa>
 801ac52:	687b      	ldr	r3, [r7, #4]
 801ac54:	681b      	ldr	r3, [r3, #0]
 801ac56:	4a3e      	ldr	r2, [pc, #248]	@ (801ad50 <HAL_DMA_IRQHandler+0xe1c>)
 801ac58:	4293      	cmp	r3, r2
 801ac5a:	d040      	beq.n	801acde <HAL_DMA_IRQHandler+0xdaa>
 801ac5c:	687b      	ldr	r3, [r7, #4]
 801ac5e:	681b      	ldr	r3, [r3, #0]
 801ac60:	4a3c      	ldr	r2, [pc, #240]	@ (801ad54 <HAL_DMA_IRQHandler+0xe20>)
 801ac62:	4293      	cmp	r3, r2
 801ac64:	d03b      	beq.n	801acde <HAL_DMA_IRQHandler+0xdaa>
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	681b      	ldr	r3, [r3, #0]
 801ac6a:	4a3b      	ldr	r2, [pc, #236]	@ (801ad58 <HAL_DMA_IRQHandler+0xe24>)
 801ac6c:	4293      	cmp	r3, r2
 801ac6e:	d036      	beq.n	801acde <HAL_DMA_IRQHandler+0xdaa>
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	681b      	ldr	r3, [r3, #0]
 801ac74:	4a39      	ldr	r2, [pc, #228]	@ (801ad5c <HAL_DMA_IRQHandler+0xe28>)
 801ac76:	4293      	cmp	r3, r2
 801ac78:	d031      	beq.n	801acde <HAL_DMA_IRQHandler+0xdaa>
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	681b      	ldr	r3, [r3, #0]
 801ac7e:	4a38      	ldr	r2, [pc, #224]	@ (801ad60 <HAL_DMA_IRQHandler+0xe2c>)
 801ac80:	4293      	cmp	r3, r2
 801ac82:	d02c      	beq.n	801acde <HAL_DMA_IRQHandler+0xdaa>
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	4a36      	ldr	r2, [pc, #216]	@ (801ad64 <HAL_DMA_IRQHandler+0xe30>)
 801ac8a:	4293      	cmp	r3, r2
 801ac8c:	d027      	beq.n	801acde <HAL_DMA_IRQHandler+0xdaa>
 801ac8e:	687b      	ldr	r3, [r7, #4]
 801ac90:	681b      	ldr	r3, [r3, #0]
 801ac92:	4a35      	ldr	r2, [pc, #212]	@ (801ad68 <HAL_DMA_IRQHandler+0xe34>)
 801ac94:	4293      	cmp	r3, r2
 801ac96:	d022      	beq.n	801acde <HAL_DMA_IRQHandler+0xdaa>
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	681b      	ldr	r3, [r3, #0]
 801ac9c:	4a33      	ldr	r2, [pc, #204]	@ (801ad6c <HAL_DMA_IRQHandler+0xe38>)
 801ac9e:	4293      	cmp	r3, r2
 801aca0:	d01d      	beq.n	801acde <HAL_DMA_IRQHandler+0xdaa>
 801aca2:	687b      	ldr	r3, [r7, #4]
 801aca4:	681b      	ldr	r3, [r3, #0]
 801aca6:	4a32      	ldr	r2, [pc, #200]	@ (801ad70 <HAL_DMA_IRQHandler+0xe3c>)
 801aca8:	4293      	cmp	r3, r2
 801acaa:	d018      	beq.n	801acde <HAL_DMA_IRQHandler+0xdaa>
 801acac:	687b      	ldr	r3, [r7, #4]
 801acae:	681b      	ldr	r3, [r3, #0]
 801acb0:	4a30      	ldr	r2, [pc, #192]	@ (801ad74 <HAL_DMA_IRQHandler+0xe40>)
 801acb2:	4293      	cmp	r3, r2
 801acb4:	d013      	beq.n	801acde <HAL_DMA_IRQHandler+0xdaa>
 801acb6:	687b      	ldr	r3, [r7, #4]
 801acb8:	681b      	ldr	r3, [r3, #0]
 801acba:	4a2f      	ldr	r2, [pc, #188]	@ (801ad78 <HAL_DMA_IRQHandler+0xe44>)
 801acbc:	4293      	cmp	r3, r2
 801acbe:	d00e      	beq.n	801acde <HAL_DMA_IRQHandler+0xdaa>
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	681b      	ldr	r3, [r3, #0]
 801acc4:	4a2d      	ldr	r2, [pc, #180]	@ (801ad7c <HAL_DMA_IRQHandler+0xe48>)
 801acc6:	4293      	cmp	r3, r2
 801acc8:	d009      	beq.n	801acde <HAL_DMA_IRQHandler+0xdaa>
 801acca:	687b      	ldr	r3, [r7, #4]
 801accc:	681b      	ldr	r3, [r3, #0]
 801acce:	4a2c      	ldr	r2, [pc, #176]	@ (801ad80 <HAL_DMA_IRQHandler+0xe4c>)
 801acd0:	4293      	cmp	r3, r2
 801acd2:	d004      	beq.n	801acde <HAL_DMA_IRQHandler+0xdaa>
 801acd4:	687b      	ldr	r3, [r7, #4]
 801acd6:	681b      	ldr	r3, [r3, #0]
 801acd8:	4a2a      	ldr	r2, [pc, #168]	@ (801ad84 <HAL_DMA_IRQHandler+0xe50>)
 801acda:	4293      	cmp	r3, r2
 801acdc:	d108      	bne.n	801acf0 <HAL_DMA_IRQHandler+0xdbc>
 801acde:	687b      	ldr	r3, [r7, #4]
 801ace0:	681b      	ldr	r3, [r3, #0]
 801ace2:	681a      	ldr	r2, [r3, #0]
 801ace4:	687b      	ldr	r3, [r7, #4]
 801ace6:	681b      	ldr	r3, [r3, #0]
 801ace8:	f022 021c 	bic.w	r2, r2, #28
 801acec:	601a      	str	r2, [r3, #0]
 801acee:	e007      	b.n	801ad00 <HAL_DMA_IRQHandler+0xdcc>
 801acf0:	687b      	ldr	r3, [r7, #4]
 801acf2:	681b      	ldr	r3, [r3, #0]
 801acf4:	681a      	ldr	r2, [r3, #0]
 801acf6:	687b      	ldr	r3, [r7, #4]
 801acf8:	681b      	ldr	r3, [r3, #0]
 801acfa:	f022 020e 	bic.w	r2, r2, #14
 801acfe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 801ad00:	687b      	ldr	r3, [r7, #4]
 801ad02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ad04:	f003 031f 	and.w	r3, r3, #31
 801ad08:	2201      	movs	r2, #1
 801ad0a:	409a      	lsls	r2, r3
 801ad0c:	69fb      	ldr	r3, [r7, #28]
 801ad0e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801ad10:	687b      	ldr	r3, [r7, #4]
 801ad12:	2201      	movs	r2, #1
 801ad14:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	2201      	movs	r2, #1
 801ad1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	2200      	movs	r2, #0
 801ad22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ad2a:	2b00      	cmp	r3, #0
 801ad2c:	d009      	beq.n	801ad42 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801ad2e:	687b      	ldr	r3, [r7, #4]
 801ad30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ad32:	6878      	ldr	r0, [r7, #4]
 801ad34:	4798      	blx	r3
 801ad36:	e004      	b.n	801ad42 <HAL_DMA_IRQHandler+0xe0e>
          return;
 801ad38:	bf00      	nop
 801ad3a:	e002      	b.n	801ad42 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801ad3c:	bf00      	nop
 801ad3e:	e000      	b.n	801ad42 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801ad40:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 801ad42:	3728      	adds	r7, #40	@ 0x28
 801ad44:	46bd      	mov	sp, r7
 801ad46:	bd80      	pop	{r7, pc}
 801ad48:	40020010 	.word	0x40020010
 801ad4c:	40020028 	.word	0x40020028
 801ad50:	40020040 	.word	0x40020040
 801ad54:	40020058 	.word	0x40020058
 801ad58:	40020070 	.word	0x40020070
 801ad5c:	40020088 	.word	0x40020088
 801ad60:	400200a0 	.word	0x400200a0
 801ad64:	400200b8 	.word	0x400200b8
 801ad68:	40020410 	.word	0x40020410
 801ad6c:	40020428 	.word	0x40020428
 801ad70:	40020440 	.word	0x40020440
 801ad74:	40020458 	.word	0x40020458
 801ad78:	40020470 	.word	0x40020470
 801ad7c:	40020488 	.word	0x40020488
 801ad80:	400204a0 	.word	0x400204a0
 801ad84:	400204b8 	.word	0x400204b8

0801ad88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801ad88:	b480      	push	{r7}
 801ad8a:	b085      	sub	sp, #20
 801ad8c:	af00      	add	r7, sp, #0
 801ad8e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801ad90:	687b      	ldr	r3, [r7, #4]
 801ad92:	681b      	ldr	r3, [r3, #0]
 801ad94:	4a42      	ldr	r2, [pc, #264]	@ (801aea0 <DMA_CalcBaseAndBitshift+0x118>)
 801ad96:	4293      	cmp	r3, r2
 801ad98:	d04a      	beq.n	801ae30 <DMA_CalcBaseAndBitshift+0xa8>
 801ad9a:	687b      	ldr	r3, [r7, #4]
 801ad9c:	681b      	ldr	r3, [r3, #0]
 801ad9e:	4a41      	ldr	r2, [pc, #260]	@ (801aea4 <DMA_CalcBaseAndBitshift+0x11c>)
 801ada0:	4293      	cmp	r3, r2
 801ada2:	d045      	beq.n	801ae30 <DMA_CalcBaseAndBitshift+0xa8>
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	681b      	ldr	r3, [r3, #0]
 801ada8:	4a3f      	ldr	r2, [pc, #252]	@ (801aea8 <DMA_CalcBaseAndBitshift+0x120>)
 801adaa:	4293      	cmp	r3, r2
 801adac:	d040      	beq.n	801ae30 <DMA_CalcBaseAndBitshift+0xa8>
 801adae:	687b      	ldr	r3, [r7, #4]
 801adb0:	681b      	ldr	r3, [r3, #0]
 801adb2:	4a3e      	ldr	r2, [pc, #248]	@ (801aeac <DMA_CalcBaseAndBitshift+0x124>)
 801adb4:	4293      	cmp	r3, r2
 801adb6:	d03b      	beq.n	801ae30 <DMA_CalcBaseAndBitshift+0xa8>
 801adb8:	687b      	ldr	r3, [r7, #4]
 801adba:	681b      	ldr	r3, [r3, #0]
 801adbc:	4a3c      	ldr	r2, [pc, #240]	@ (801aeb0 <DMA_CalcBaseAndBitshift+0x128>)
 801adbe:	4293      	cmp	r3, r2
 801adc0:	d036      	beq.n	801ae30 <DMA_CalcBaseAndBitshift+0xa8>
 801adc2:	687b      	ldr	r3, [r7, #4]
 801adc4:	681b      	ldr	r3, [r3, #0]
 801adc6:	4a3b      	ldr	r2, [pc, #236]	@ (801aeb4 <DMA_CalcBaseAndBitshift+0x12c>)
 801adc8:	4293      	cmp	r3, r2
 801adca:	d031      	beq.n	801ae30 <DMA_CalcBaseAndBitshift+0xa8>
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	681b      	ldr	r3, [r3, #0]
 801add0:	4a39      	ldr	r2, [pc, #228]	@ (801aeb8 <DMA_CalcBaseAndBitshift+0x130>)
 801add2:	4293      	cmp	r3, r2
 801add4:	d02c      	beq.n	801ae30 <DMA_CalcBaseAndBitshift+0xa8>
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	681b      	ldr	r3, [r3, #0]
 801adda:	4a38      	ldr	r2, [pc, #224]	@ (801aebc <DMA_CalcBaseAndBitshift+0x134>)
 801addc:	4293      	cmp	r3, r2
 801adde:	d027      	beq.n	801ae30 <DMA_CalcBaseAndBitshift+0xa8>
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	681b      	ldr	r3, [r3, #0]
 801ade4:	4a36      	ldr	r2, [pc, #216]	@ (801aec0 <DMA_CalcBaseAndBitshift+0x138>)
 801ade6:	4293      	cmp	r3, r2
 801ade8:	d022      	beq.n	801ae30 <DMA_CalcBaseAndBitshift+0xa8>
 801adea:	687b      	ldr	r3, [r7, #4]
 801adec:	681b      	ldr	r3, [r3, #0]
 801adee:	4a35      	ldr	r2, [pc, #212]	@ (801aec4 <DMA_CalcBaseAndBitshift+0x13c>)
 801adf0:	4293      	cmp	r3, r2
 801adf2:	d01d      	beq.n	801ae30 <DMA_CalcBaseAndBitshift+0xa8>
 801adf4:	687b      	ldr	r3, [r7, #4]
 801adf6:	681b      	ldr	r3, [r3, #0]
 801adf8:	4a33      	ldr	r2, [pc, #204]	@ (801aec8 <DMA_CalcBaseAndBitshift+0x140>)
 801adfa:	4293      	cmp	r3, r2
 801adfc:	d018      	beq.n	801ae30 <DMA_CalcBaseAndBitshift+0xa8>
 801adfe:	687b      	ldr	r3, [r7, #4]
 801ae00:	681b      	ldr	r3, [r3, #0]
 801ae02:	4a32      	ldr	r2, [pc, #200]	@ (801aecc <DMA_CalcBaseAndBitshift+0x144>)
 801ae04:	4293      	cmp	r3, r2
 801ae06:	d013      	beq.n	801ae30 <DMA_CalcBaseAndBitshift+0xa8>
 801ae08:	687b      	ldr	r3, [r7, #4]
 801ae0a:	681b      	ldr	r3, [r3, #0]
 801ae0c:	4a30      	ldr	r2, [pc, #192]	@ (801aed0 <DMA_CalcBaseAndBitshift+0x148>)
 801ae0e:	4293      	cmp	r3, r2
 801ae10:	d00e      	beq.n	801ae30 <DMA_CalcBaseAndBitshift+0xa8>
 801ae12:	687b      	ldr	r3, [r7, #4]
 801ae14:	681b      	ldr	r3, [r3, #0]
 801ae16:	4a2f      	ldr	r2, [pc, #188]	@ (801aed4 <DMA_CalcBaseAndBitshift+0x14c>)
 801ae18:	4293      	cmp	r3, r2
 801ae1a:	d009      	beq.n	801ae30 <DMA_CalcBaseAndBitshift+0xa8>
 801ae1c:	687b      	ldr	r3, [r7, #4]
 801ae1e:	681b      	ldr	r3, [r3, #0]
 801ae20:	4a2d      	ldr	r2, [pc, #180]	@ (801aed8 <DMA_CalcBaseAndBitshift+0x150>)
 801ae22:	4293      	cmp	r3, r2
 801ae24:	d004      	beq.n	801ae30 <DMA_CalcBaseAndBitshift+0xa8>
 801ae26:	687b      	ldr	r3, [r7, #4]
 801ae28:	681b      	ldr	r3, [r3, #0]
 801ae2a:	4a2c      	ldr	r2, [pc, #176]	@ (801aedc <DMA_CalcBaseAndBitshift+0x154>)
 801ae2c:	4293      	cmp	r3, r2
 801ae2e:	d101      	bne.n	801ae34 <DMA_CalcBaseAndBitshift+0xac>
 801ae30:	2301      	movs	r3, #1
 801ae32:	e000      	b.n	801ae36 <DMA_CalcBaseAndBitshift+0xae>
 801ae34:	2300      	movs	r3, #0
 801ae36:	2b00      	cmp	r3, #0
 801ae38:	d024      	beq.n	801ae84 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	681b      	ldr	r3, [r3, #0]
 801ae3e:	b2db      	uxtb	r3, r3
 801ae40:	3b10      	subs	r3, #16
 801ae42:	4a27      	ldr	r2, [pc, #156]	@ (801aee0 <DMA_CalcBaseAndBitshift+0x158>)
 801ae44:	fba2 2303 	umull	r2, r3, r2, r3
 801ae48:	091b      	lsrs	r3, r3, #4
 801ae4a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 801ae4c:	68fb      	ldr	r3, [r7, #12]
 801ae4e:	f003 0307 	and.w	r3, r3, #7
 801ae52:	4a24      	ldr	r2, [pc, #144]	@ (801aee4 <DMA_CalcBaseAndBitshift+0x15c>)
 801ae54:	5cd3      	ldrb	r3, [r2, r3]
 801ae56:	461a      	mov	r2, r3
 801ae58:	687b      	ldr	r3, [r7, #4]
 801ae5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 801ae5c:	68fb      	ldr	r3, [r7, #12]
 801ae5e:	2b03      	cmp	r3, #3
 801ae60:	d908      	bls.n	801ae74 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 801ae62:	687b      	ldr	r3, [r7, #4]
 801ae64:	681b      	ldr	r3, [r3, #0]
 801ae66:	461a      	mov	r2, r3
 801ae68:	4b1f      	ldr	r3, [pc, #124]	@ (801aee8 <DMA_CalcBaseAndBitshift+0x160>)
 801ae6a:	4013      	ands	r3, r2
 801ae6c:	1d1a      	adds	r2, r3, #4
 801ae6e:	687b      	ldr	r3, [r7, #4]
 801ae70:	659a      	str	r2, [r3, #88]	@ 0x58
 801ae72:	e00d      	b.n	801ae90 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 801ae74:	687b      	ldr	r3, [r7, #4]
 801ae76:	681b      	ldr	r3, [r3, #0]
 801ae78:	461a      	mov	r2, r3
 801ae7a:	4b1b      	ldr	r3, [pc, #108]	@ (801aee8 <DMA_CalcBaseAndBitshift+0x160>)
 801ae7c:	4013      	ands	r3, r2
 801ae7e:	687a      	ldr	r2, [r7, #4]
 801ae80:	6593      	str	r3, [r2, #88]	@ 0x58
 801ae82:	e005      	b.n	801ae90 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	681b      	ldr	r3, [r3, #0]
 801ae88:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801ae8c:	687b      	ldr	r3, [r7, #4]
 801ae8e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 801ae90:	687b      	ldr	r3, [r7, #4]
 801ae92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 801ae94:	4618      	mov	r0, r3
 801ae96:	3714      	adds	r7, #20
 801ae98:	46bd      	mov	sp, r7
 801ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae9e:	4770      	bx	lr
 801aea0:	40020010 	.word	0x40020010
 801aea4:	40020028 	.word	0x40020028
 801aea8:	40020040 	.word	0x40020040
 801aeac:	40020058 	.word	0x40020058
 801aeb0:	40020070 	.word	0x40020070
 801aeb4:	40020088 	.word	0x40020088
 801aeb8:	400200a0 	.word	0x400200a0
 801aebc:	400200b8 	.word	0x400200b8
 801aec0:	40020410 	.word	0x40020410
 801aec4:	40020428 	.word	0x40020428
 801aec8:	40020440 	.word	0x40020440
 801aecc:	40020458 	.word	0x40020458
 801aed0:	40020470 	.word	0x40020470
 801aed4:	40020488 	.word	0x40020488
 801aed8:	400204a0 	.word	0x400204a0
 801aedc:	400204b8 	.word	0x400204b8
 801aee0:	aaaaaaab 	.word	0xaaaaaaab
 801aee4:	08025cb8 	.word	0x08025cb8
 801aee8:	fffffc00 	.word	0xfffffc00

0801aeec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801aeec:	b480      	push	{r7}
 801aeee:	b085      	sub	sp, #20
 801aef0:	af00      	add	r7, sp, #0
 801aef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801aef4:	2300      	movs	r3, #0
 801aef6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801aef8:	687b      	ldr	r3, [r7, #4]
 801aefa:	699b      	ldr	r3, [r3, #24]
 801aefc:	2b00      	cmp	r3, #0
 801aefe:	d120      	bne.n	801af42 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 801af00:	687b      	ldr	r3, [r7, #4]
 801af02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801af04:	2b03      	cmp	r3, #3
 801af06:	d858      	bhi.n	801afba <DMA_CheckFifoParam+0xce>
 801af08:	a201      	add	r2, pc, #4	@ (adr r2, 801af10 <DMA_CheckFifoParam+0x24>)
 801af0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801af0e:	bf00      	nop
 801af10:	0801af21 	.word	0x0801af21
 801af14:	0801af33 	.word	0x0801af33
 801af18:	0801af21 	.word	0x0801af21
 801af1c:	0801afbb 	.word	0x0801afbb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801af20:	687b      	ldr	r3, [r7, #4]
 801af22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801af24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801af28:	2b00      	cmp	r3, #0
 801af2a:	d048      	beq.n	801afbe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 801af2c:	2301      	movs	r3, #1
 801af2e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801af30:	e045      	b.n	801afbe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801af32:	687b      	ldr	r3, [r7, #4]
 801af34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801af36:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801af3a:	d142      	bne.n	801afc2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 801af3c:	2301      	movs	r3, #1
 801af3e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801af40:	e03f      	b.n	801afc2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	699b      	ldr	r3, [r3, #24]
 801af46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801af4a:	d123      	bne.n	801af94 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801af50:	2b03      	cmp	r3, #3
 801af52:	d838      	bhi.n	801afc6 <DMA_CheckFifoParam+0xda>
 801af54:	a201      	add	r2, pc, #4	@ (adr r2, 801af5c <DMA_CheckFifoParam+0x70>)
 801af56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801af5a:	bf00      	nop
 801af5c:	0801af6d 	.word	0x0801af6d
 801af60:	0801af73 	.word	0x0801af73
 801af64:	0801af6d 	.word	0x0801af6d
 801af68:	0801af85 	.word	0x0801af85
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 801af6c:	2301      	movs	r3, #1
 801af6e:	73fb      	strb	r3, [r7, #15]
        break;
 801af70:	e030      	b.n	801afd4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801af72:	687b      	ldr	r3, [r7, #4]
 801af74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801af76:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801af7a:	2b00      	cmp	r3, #0
 801af7c:	d025      	beq.n	801afca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 801af7e:	2301      	movs	r3, #1
 801af80:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801af82:	e022      	b.n	801afca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801af84:	687b      	ldr	r3, [r7, #4]
 801af86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801af88:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801af8c:	d11f      	bne.n	801afce <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 801af8e:	2301      	movs	r3, #1
 801af90:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801af92:	e01c      	b.n	801afce <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 801af94:	687b      	ldr	r3, [r7, #4]
 801af96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801af98:	2b02      	cmp	r3, #2
 801af9a:	d902      	bls.n	801afa2 <DMA_CheckFifoParam+0xb6>
 801af9c:	2b03      	cmp	r3, #3
 801af9e:	d003      	beq.n	801afa8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 801afa0:	e018      	b.n	801afd4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 801afa2:	2301      	movs	r3, #1
 801afa4:	73fb      	strb	r3, [r7, #15]
        break;
 801afa6:	e015      	b.n	801afd4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801afa8:	687b      	ldr	r3, [r7, #4]
 801afaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801afac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801afb0:	2b00      	cmp	r3, #0
 801afb2:	d00e      	beq.n	801afd2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 801afb4:	2301      	movs	r3, #1
 801afb6:	73fb      	strb	r3, [r7, #15]
    break;
 801afb8:	e00b      	b.n	801afd2 <DMA_CheckFifoParam+0xe6>
        break;
 801afba:	bf00      	nop
 801afbc:	e00a      	b.n	801afd4 <DMA_CheckFifoParam+0xe8>
        break;
 801afbe:	bf00      	nop
 801afc0:	e008      	b.n	801afd4 <DMA_CheckFifoParam+0xe8>
        break;
 801afc2:	bf00      	nop
 801afc4:	e006      	b.n	801afd4 <DMA_CheckFifoParam+0xe8>
        break;
 801afc6:	bf00      	nop
 801afc8:	e004      	b.n	801afd4 <DMA_CheckFifoParam+0xe8>
        break;
 801afca:	bf00      	nop
 801afcc:	e002      	b.n	801afd4 <DMA_CheckFifoParam+0xe8>
        break;
 801afce:	bf00      	nop
 801afd0:	e000      	b.n	801afd4 <DMA_CheckFifoParam+0xe8>
    break;
 801afd2:	bf00      	nop
    }
  }

  return status;
 801afd4:	7bfb      	ldrb	r3, [r7, #15]
}
 801afd6:	4618      	mov	r0, r3
 801afd8:	3714      	adds	r7, #20
 801afda:	46bd      	mov	sp, r7
 801afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afe0:	4770      	bx	lr
 801afe2:	bf00      	nop

0801afe4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801afe4:	b480      	push	{r7}
 801afe6:	b085      	sub	sp, #20
 801afe8:	af00      	add	r7, sp, #0
 801afea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	681b      	ldr	r3, [r3, #0]
 801aff0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801aff2:	687b      	ldr	r3, [r7, #4]
 801aff4:	681b      	ldr	r3, [r3, #0]
 801aff6:	4a38      	ldr	r2, [pc, #224]	@ (801b0d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 801aff8:	4293      	cmp	r3, r2
 801affa:	d022      	beq.n	801b042 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801affc:	687b      	ldr	r3, [r7, #4]
 801affe:	681b      	ldr	r3, [r3, #0]
 801b000:	4a36      	ldr	r2, [pc, #216]	@ (801b0dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 801b002:	4293      	cmp	r3, r2
 801b004:	d01d      	beq.n	801b042 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	681b      	ldr	r3, [r3, #0]
 801b00a:	4a35      	ldr	r2, [pc, #212]	@ (801b0e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 801b00c:	4293      	cmp	r3, r2
 801b00e:	d018      	beq.n	801b042 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b010:	687b      	ldr	r3, [r7, #4]
 801b012:	681b      	ldr	r3, [r3, #0]
 801b014:	4a33      	ldr	r2, [pc, #204]	@ (801b0e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 801b016:	4293      	cmp	r3, r2
 801b018:	d013      	beq.n	801b042 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b01a:	687b      	ldr	r3, [r7, #4]
 801b01c:	681b      	ldr	r3, [r3, #0]
 801b01e:	4a32      	ldr	r2, [pc, #200]	@ (801b0e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 801b020:	4293      	cmp	r3, r2
 801b022:	d00e      	beq.n	801b042 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b024:	687b      	ldr	r3, [r7, #4]
 801b026:	681b      	ldr	r3, [r3, #0]
 801b028:	4a30      	ldr	r2, [pc, #192]	@ (801b0ec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 801b02a:	4293      	cmp	r3, r2
 801b02c:	d009      	beq.n	801b042 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b02e:	687b      	ldr	r3, [r7, #4]
 801b030:	681b      	ldr	r3, [r3, #0]
 801b032:	4a2f      	ldr	r2, [pc, #188]	@ (801b0f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 801b034:	4293      	cmp	r3, r2
 801b036:	d004      	beq.n	801b042 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b038:	687b      	ldr	r3, [r7, #4]
 801b03a:	681b      	ldr	r3, [r3, #0]
 801b03c:	4a2d      	ldr	r2, [pc, #180]	@ (801b0f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 801b03e:	4293      	cmp	r3, r2
 801b040:	d101      	bne.n	801b046 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 801b042:	2301      	movs	r3, #1
 801b044:	e000      	b.n	801b048 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 801b046:	2300      	movs	r3, #0
 801b048:	2b00      	cmp	r3, #0
 801b04a:	d01a      	beq.n	801b082 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 801b04c:	687b      	ldr	r3, [r7, #4]
 801b04e:	681b      	ldr	r3, [r3, #0]
 801b050:	b2db      	uxtb	r3, r3
 801b052:	3b08      	subs	r3, #8
 801b054:	4a28      	ldr	r2, [pc, #160]	@ (801b0f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 801b056:	fba2 2303 	umull	r2, r3, r2, r3
 801b05a:	091b      	lsrs	r3, r3, #4
 801b05c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 801b05e:	68fa      	ldr	r2, [r7, #12]
 801b060:	4b26      	ldr	r3, [pc, #152]	@ (801b0fc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 801b062:	4413      	add	r3, r2
 801b064:	009b      	lsls	r3, r3, #2
 801b066:	461a      	mov	r2, r3
 801b068:	687b      	ldr	r3, [r7, #4]
 801b06a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 801b06c:	687b      	ldr	r3, [r7, #4]
 801b06e:	4a24      	ldr	r2, [pc, #144]	@ (801b100 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 801b070:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801b072:	68fb      	ldr	r3, [r7, #12]
 801b074:	f003 031f 	and.w	r3, r3, #31
 801b078:	2201      	movs	r2, #1
 801b07a:	409a      	lsls	r2, r3
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 801b080:	e024      	b.n	801b0cc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801b082:	687b      	ldr	r3, [r7, #4]
 801b084:	681b      	ldr	r3, [r3, #0]
 801b086:	b2db      	uxtb	r3, r3
 801b088:	3b10      	subs	r3, #16
 801b08a:	4a1e      	ldr	r2, [pc, #120]	@ (801b104 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 801b08c:	fba2 2303 	umull	r2, r3, r2, r3
 801b090:	091b      	lsrs	r3, r3, #4
 801b092:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 801b094:	68bb      	ldr	r3, [r7, #8]
 801b096:	4a1c      	ldr	r2, [pc, #112]	@ (801b108 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 801b098:	4293      	cmp	r3, r2
 801b09a:	d806      	bhi.n	801b0aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 801b09c:	68bb      	ldr	r3, [r7, #8]
 801b09e:	4a1b      	ldr	r2, [pc, #108]	@ (801b10c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 801b0a0:	4293      	cmp	r3, r2
 801b0a2:	d902      	bls.n	801b0aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 801b0a4:	68fb      	ldr	r3, [r7, #12]
 801b0a6:	3308      	adds	r3, #8
 801b0a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 801b0aa:	68fa      	ldr	r2, [r7, #12]
 801b0ac:	4b18      	ldr	r3, [pc, #96]	@ (801b110 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 801b0ae:	4413      	add	r3, r2
 801b0b0:	009b      	lsls	r3, r3, #2
 801b0b2:	461a      	mov	r2, r3
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801b0b8:	687b      	ldr	r3, [r7, #4]
 801b0ba:	4a16      	ldr	r2, [pc, #88]	@ (801b114 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 801b0bc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801b0be:	68fb      	ldr	r3, [r7, #12]
 801b0c0:	f003 031f 	and.w	r3, r3, #31
 801b0c4:	2201      	movs	r2, #1
 801b0c6:	409a      	lsls	r2, r3
 801b0c8:	687b      	ldr	r3, [r7, #4]
 801b0ca:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801b0cc:	bf00      	nop
 801b0ce:	3714      	adds	r7, #20
 801b0d0:	46bd      	mov	sp, r7
 801b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0d6:	4770      	bx	lr
 801b0d8:	58025408 	.word	0x58025408
 801b0dc:	5802541c 	.word	0x5802541c
 801b0e0:	58025430 	.word	0x58025430
 801b0e4:	58025444 	.word	0x58025444
 801b0e8:	58025458 	.word	0x58025458
 801b0ec:	5802546c 	.word	0x5802546c
 801b0f0:	58025480 	.word	0x58025480
 801b0f4:	58025494 	.word	0x58025494
 801b0f8:	cccccccd 	.word	0xcccccccd
 801b0fc:	16009600 	.word	0x16009600
 801b100:	58025880 	.word	0x58025880
 801b104:	aaaaaaab 	.word	0xaaaaaaab
 801b108:	400204b8 	.word	0x400204b8
 801b10c:	4002040f 	.word	0x4002040f
 801b110:	10008200 	.word	0x10008200
 801b114:	40020880 	.word	0x40020880

0801b118 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801b118:	b480      	push	{r7}
 801b11a:	b085      	sub	sp, #20
 801b11c:	af00      	add	r7, sp, #0
 801b11e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801b120:	687b      	ldr	r3, [r7, #4]
 801b122:	685b      	ldr	r3, [r3, #4]
 801b124:	b2db      	uxtb	r3, r3
 801b126:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 801b128:	68fb      	ldr	r3, [r7, #12]
 801b12a:	2b00      	cmp	r3, #0
 801b12c:	d04a      	beq.n	801b1c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 801b12e:	68fb      	ldr	r3, [r7, #12]
 801b130:	2b08      	cmp	r3, #8
 801b132:	d847      	bhi.n	801b1c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801b134:	687b      	ldr	r3, [r7, #4]
 801b136:	681b      	ldr	r3, [r3, #0]
 801b138:	4a25      	ldr	r2, [pc, #148]	@ (801b1d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 801b13a:	4293      	cmp	r3, r2
 801b13c:	d022      	beq.n	801b184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b13e:	687b      	ldr	r3, [r7, #4]
 801b140:	681b      	ldr	r3, [r3, #0]
 801b142:	4a24      	ldr	r2, [pc, #144]	@ (801b1d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 801b144:	4293      	cmp	r3, r2
 801b146:	d01d      	beq.n	801b184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	681b      	ldr	r3, [r3, #0]
 801b14c:	4a22      	ldr	r2, [pc, #136]	@ (801b1d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 801b14e:	4293      	cmp	r3, r2
 801b150:	d018      	beq.n	801b184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	681b      	ldr	r3, [r3, #0]
 801b156:	4a21      	ldr	r2, [pc, #132]	@ (801b1dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 801b158:	4293      	cmp	r3, r2
 801b15a:	d013      	beq.n	801b184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b15c:	687b      	ldr	r3, [r7, #4]
 801b15e:	681b      	ldr	r3, [r3, #0]
 801b160:	4a1f      	ldr	r2, [pc, #124]	@ (801b1e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 801b162:	4293      	cmp	r3, r2
 801b164:	d00e      	beq.n	801b184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b166:	687b      	ldr	r3, [r7, #4]
 801b168:	681b      	ldr	r3, [r3, #0]
 801b16a:	4a1e      	ldr	r2, [pc, #120]	@ (801b1e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 801b16c:	4293      	cmp	r3, r2
 801b16e:	d009      	beq.n	801b184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b170:	687b      	ldr	r3, [r7, #4]
 801b172:	681b      	ldr	r3, [r3, #0]
 801b174:	4a1c      	ldr	r2, [pc, #112]	@ (801b1e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 801b176:	4293      	cmp	r3, r2
 801b178:	d004      	beq.n	801b184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b17a:	687b      	ldr	r3, [r7, #4]
 801b17c:	681b      	ldr	r3, [r3, #0]
 801b17e:	4a1b      	ldr	r2, [pc, #108]	@ (801b1ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 801b180:	4293      	cmp	r3, r2
 801b182:	d101      	bne.n	801b188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 801b184:	2301      	movs	r3, #1
 801b186:	e000      	b.n	801b18a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 801b188:	2300      	movs	r3, #0
 801b18a:	2b00      	cmp	r3, #0
 801b18c:	d00a      	beq.n	801b1a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 801b18e:	68fa      	ldr	r2, [r7, #12]
 801b190:	4b17      	ldr	r3, [pc, #92]	@ (801b1f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 801b192:	4413      	add	r3, r2
 801b194:	009b      	lsls	r3, r3, #2
 801b196:	461a      	mov	r2, r3
 801b198:	687b      	ldr	r3, [r7, #4]
 801b19a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 801b19c:	687b      	ldr	r3, [r7, #4]
 801b19e:	4a15      	ldr	r2, [pc, #84]	@ (801b1f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 801b1a0:	671a      	str	r2, [r3, #112]	@ 0x70
 801b1a2:	e009      	b.n	801b1b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801b1a4:	68fa      	ldr	r2, [r7, #12]
 801b1a6:	4b14      	ldr	r3, [pc, #80]	@ (801b1f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 801b1a8:	4413      	add	r3, r2
 801b1aa:	009b      	lsls	r3, r3, #2
 801b1ac:	461a      	mov	r2, r3
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	4a11      	ldr	r2, [pc, #68]	@ (801b1fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 801b1b6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 801b1b8:	68fb      	ldr	r3, [r7, #12]
 801b1ba:	3b01      	subs	r3, #1
 801b1bc:	2201      	movs	r2, #1
 801b1be:	409a      	lsls	r2, r3
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 801b1c4:	bf00      	nop
 801b1c6:	3714      	adds	r7, #20
 801b1c8:	46bd      	mov	sp, r7
 801b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1ce:	4770      	bx	lr
 801b1d0:	58025408 	.word	0x58025408
 801b1d4:	5802541c 	.word	0x5802541c
 801b1d8:	58025430 	.word	0x58025430
 801b1dc:	58025444 	.word	0x58025444
 801b1e0:	58025458 	.word	0x58025458
 801b1e4:	5802546c 	.word	0x5802546c
 801b1e8:	58025480 	.word	0x58025480
 801b1ec:	58025494 	.word	0x58025494
 801b1f0:	1600963f 	.word	0x1600963f
 801b1f4:	58025940 	.word	0x58025940
 801b1f8:	1000823f 	.word	0x1000823f
 801b1fc:	40020940 	.word	0x40020940

0801b200 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801b200:	b480      	push	{r7}
 801b202:	b089      	sub	sp, #36	@ 0x24
 801b204:	af00      	add	r7, sp, #0
 801b206:	6078      	str	r0, [r7, #4]
 801b208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801b20a:	2300      	movs	r3, #0
 801b20c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801b20e:	4b89      	ldr	r3, [pc, #548]	@ (801b434 <HAL_GPIO_Init+0x234>)
 801b210:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801b212:	e194      	b.n	801b53e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801b214:	683b      	ldr	r3, [r7, #0]
 801b216:	681a      	ldr	r2, [r3, #0]
 801b218:	2101      	movs	r1, #1
 801b21a:	69fb      	ldr	r3, [r7, #28]
 801b21c:	fa01 f303 	lsl.w	r3, r1, r3
 801b220:	4013      	ands	r3, r2
 801b222:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801b224:	693b      	ldr	r3, [r7, #16]
 801b226:	2b00      	cmp	r3, #0
 801b228:	f000 8186 	beq.w	801b538 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801b22c:	683b      	ldr	r3, [r7, #0]
 801b22e:	685b      	ldr	r3, [r3, #4]
 801b230:	f003 0303 	and.w	r3, r3, #3
 801b234:	2b01      	cmp	r3, #1
 801b236:	d005      	beq.n	801b244 <HAL_GPIO_Init+0x44>
 801b238:	683b      	ldr	r3, [r7, #0]
 801b23a:	685b      	ldr	r3, [r3, #4]
 801b23c:	f003 0303 	and.w	r3, r3, #3
 801b240:	2b02      	cmp	r3, #2
 801b242:	d130      	bne.n	801b2a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801b244:	687b      	ldr	r3, [r7, #4]
 801b246:	689b      	ldr	r3, [r3, #8]
 801b248:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801b24a:	69fb      	ldr	r3, [r7, #28]
 801b24c:	005b      	lsls	r3, r3, #1
 801b24e:	2203      	movs	r2, #3
 801b250:	fa02 f303 	lsl.w	r3, r2, r3
 801b254:	43db      	mvns	r3, r3
 801b256:	69ba      	ldr	r2, [r7, #24]
 801b258:	4013      	ands	r3, r2
 801b25a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801b25c:	683b      	ldr	r3, [r7, #0]
 801b25e:	68da      	ldr	r2, [r3, #12]
 801b260:	69fb      	ldr	r3, [r7, #28]
 801b262:	005b      	lsls	r3, r3, #1
 801b264:	fa02 f303 	lsl.w	r3, r2, r3
 801b268:	69ba      	ldr	r2, [r7, #24]
 801b26a:	4313      	orrs	r3, r2
 801b26c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	69ba      	ldr	r2, [r7, #24]
 801b272:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801b274:	687b      	ldr	r3, [r7, #4]
 801b276:	685b      	ldr	r3, [r3, #4]
 801b278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801b27a:	2201      	movs	r2, #1
 801b27c:	69fb      	ldr	r3, [r7, #28]
 801b27e:	fa02 f303 	lsl.w	r3, r2, r3
 801b282:	43db      	mvns	r3, r3
 801b284:	69ba      	ldr	r2, [r7, #24]
 801b286:	4013      	ands	r3, r2
 801b288:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801b28a:	683b      	ldr	r3, [r7, #0]
 801b28c:	685b      	ldr	r3, [r3, #4]
 801b28e:	091b      	lsrs	r3, r3, #4
 801b290:	f003 0201 	and.w	r2, r3, #1
 801b294:	69fb      	ldr	r3, [r7, #28]
 801b296:	fa02 f303 	lsl.w	r3, r2, r3
 801b29a:	69ba      	ldr	r2, [r7, #24]
 801b29c:	4313      	orrs	r3, r2
 801b29e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801b2a0:	687b      	ldr	r3, [r7, #4]
 801b2a2:	69ba      	ldr	r2, [r7, #24]
 801b2a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801b2a6:	683b      	ldr	r3, [r7, #0]
 801b2a8:	685b      	ldr	r3, [r3, #4]
 801b2aa:	f003 0303 	and.w	r3, r3, #3
 801b2ae:	2b03      	cmp	r3, #3
 801b2b0:	d017      	beq.n	801b2e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801b2b2:	687b      	ldr	r3, [r7, #4]
 801b2b4:	68db      	ldr	r3, [r3, #12]
 801b2b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801b2b8:	69fb      	ldr	r3, [r7, #28]
 801b2ba:	005b      	lsls	r3, r3, #1
 801b2bc:	2203      	movs	r2, #3
 801b2be:	fa02 f303 	lsl.w	r3, r2, r3
 801b2c2:	43db      	mvns	r3, r3
 801b2c4:	69ba      	ldr	r2, [r7, #24]
 801b2c6:	4013      	ands	r3, r2
 801b2c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801b2ca:	683b      	ldr	r3, [r7, #0]
 801b2cc:	689a      	ldr	r2, [r3, #8]
 801b2ce:	69fb      	ldr	r3, [r7, #28]
 801b2d0:	005b      	lsls	r3, r3, #1
 801b2d2:	fa02 f303 	lsl.w	r3, r2, r3
 801b2d6:	69ba      	ldr	r2, [r7, #24]
 801b2d8:	4313      	orrs	r3, r2
 801b2da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801b2dc:	687b      	ldr	r3, [r7, #4]
 801b2de:	69ba      	ldr	r2, [r7, #24]
 801b2e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801b2e2:	683b      	ldr	r3, [r7, #0]
 801b2e4:	685b      	ldr	r3, [r3, #4]
 801b2e6:	f003 0303 	and.w	r3, r3, #3
 801b2ea:	2b02      	cmp	r3, #2
 801b2ec:	d123      	bne.n	801b336 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801b2ee:	69fb      	ldr	r3, [r7, #28]
 801b2f0:	08da      	lsrs	r2, r3, #3
 801b2f2:	687b      	ldr	r3, [r7, #4]
 801b2f4:	3208      	adds	r2, #8
 801b2f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b2fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801b2fc:	69fb      	ldr	r3, [r7, #28]
 801b2fe:	f003 0307 	and.w	r3, r3, #7
 801b302:	009b      	lsls	r3, r3, #2
 801b304:	220f      	movs	r2, #15
 801b306:	fa02 f303 	lsl.w	r3, r2, r3
 801b30a:	43db      	mvns	r3, r3
 801b30c:	69ba      	ldr	r2, [r7, #24]
 801b30e:	4013      	ands	r3, r2
 801b310:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801b312:	683b      	ldr	r3, [r7, #0]
 801b314:	691a      	ldr	r2, [r3, #16]
 801b316:	69fb      	ldr	r3, [r7, #28]
 801b318:	f003 0307 	and.w	r3, r3, #7
 801b31c:	009b      	lsls	r3, r3, #2
 801b31e:	fa02 f303 	lsl.w	r3, r2, r3
 801b322:	69ba      	ldr	r2, [r7, #24]
 801b324:	4313      	orrs	r3, r2
 801b326:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801b328:	69fb      	ldr	r3, [r7, #28]
 801b32a:	08da      	lsrs	r2, r3, #3
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	3208      	adds	r2, #8
 801b330:	69b9      	ldr	r1, [r7, #24]
 801b332:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801b336:	687b      	ldr	r3, [r7, #4]
 801b338:	681b      	ldr	r3, [r3, #0]
 801b33a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801b33c:	69fb      	ldr	r3, [r7, #28]
 801b33e:	005b      	lsls	r3, r3, #1
 801b340:	2203      	movs	r2, #3
 801b342:	fa02 f303 	lsl.w	r3, r2, r3
 801b346:	43db      	mvns	r3, r3
 801b348:	69ba      	ldr	r2, [r7, #24]
 801b34a:	4013      	ands	r3, r2
 801b34c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801b34e:	683b      	ldr	r3, [r7, #0]
 801b350:	685b      	ldr	r3, [r3, #4]
 801b352:	f003 0203 	and.w	r2, r3, #3
 801b356:	69fb      	ldr	r3, [r7, #28]
 801b358:	005b      	lsls	r3, r3, #1
 801b35a:	fa02 f303 	lsl.w	r3, r2, r3
 801b35e:	69ba      	ldr	r2, [r7, #24]
 801b360:	4313      	orrs	r3, r2
 801b362:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801b364:	687b      	ldr	r3, [r7, #4]
 801b366:	69ba      	ldr	r2, [r7, #24]
 801b368:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801b36a:	683b      	ldr	r3, [r7, #0]
 801b36c:	685b      	ldr	r3, [r3, #4]
 801b36e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801b372:	2b00      	cmp	r3, #0
 801b374:	f000 80e0 	beq.w	801b538 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801b378:	4b2f      	ldr	r3, [pc, #188]	@ (801b438 <HAL_GPIO_Init+0x238>)
 801b37a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801b37e:	4a2e      	ldr	r2, [pc, #184]	@ (801b438 <HAL_GPIO_Init+0x238>)
 801b380:	f043 0302 	orr.w	r3, r3, #2
 801b384:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 801b388:	4b2b      	ldr	r3, [pc, #172]	@ (801b438 <HAL_GPIO_Init+0x238>)
 801b38a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801b38e:	f003 0302 	and.w	r3, r3, #2
 801b392:	60fb      	str	r3, [r7, #12]
 801b394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801b396:	4a29      	ldr	r2, [pc, #164]	@ (801b43c <HAL_GPIO_Init+0x23c>)
 801b398:	69fb      	ldr	r3, [r7, #28]
 801b39a:	089b      	lsrs	r3, r3, #2
 801b39c:	3302      	adds	r3, #2
 801b39e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b3a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801b3a4:	69fb      	ldr	r3, [r7, #28]
 801b3a6:	f003 0303 	and.w	r3, r3, #3
 801b3aa:	009b      	lsls	r3, r3, #2
 801b3ac:	220f      	movs	r2, #15
 801b3ae:	fa02 f303 	lsl.w	r3, r2, r3
 801b3b2:	43db      	mvns	r3, r3
 801b3b4:	69ba      	ldr	r2, [r7, #24]
 801b3b6:	4013      	ands	r3, r2
 801b3b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801b3ba:	687b      	ldr	r3, [r7, #4]
 801b3bc:	4a20      	ldr	r2, [pc, #128]	@ (801b440 <HAL_GPIO_Init+0x240>)
 801b3be:	4293      	cmp	r3, r2
 801b3c0:	d052      	beq.n	801b468 <HAL_GPIO_Init+0x268>
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	4a1f      	ldr	r2, [pc, #124]	@ (801b444 <HAL_GPIO_Init+0x244>)
 801b3c6:	4293      	cmp	r3, r2
 801b3c8:	d031      	beq.n	801b42e <HAL_GPIO_Init+0x22e>
 801b3ca:	687b      	ldr	r3, [r7, #4]
 801b3cc:	4a1e      	ldr	r2, [pc, #120]	@ (801b448 <HAL_GPIO_Init+0x248>)
 801b3ce:	4293      	cmp	r3, r2
 801b3d0:	d02b      	beq.n	801b42a <HAL_GPIO_Init+0x22a>
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	4a1d      	ldr	r2, [pc, #116]	@ (801b44c <HAL_GPIO_Init+0x24c>)
 801b3d6:	4293      	cmp	r3, r2
 801b3d8:	d025      	beq.n	801b426 <HAL_GPIO_Init+0x226>
 801b3da:	687b      	ldr	r3, [r7, #4]
 801b3dc:	4a1c      	ldr	r2, [pc, #112]	@ (801b450 <HAL_GPIO_Init+0x250>)
 801b3de:	4293      	cmp	r3, r2
 801b3e0:	d01f      	beq.n	801b422 <HAL_GPIO_Init+0x222>
 801b3e2:	687b      	ldr	r3, [r7, #4]
 801b3e4:	4a1b      	ldr	r2, [pc, #108]	@ (801b454 <HAL_GPIO_Init+0x254>)
 801b3e6:	4293      	cmp	r3, r2
 801b3e8:	d019      	beq.n	801b41e <HAL_GPIO_Init+0x21e>
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	4a1a      	ldr	r2, [pc, #104]	@ (801b458 <HAL_GPIO_Init+0x258>)
 801b3ee:	4293      	cmp	r3, r2
 801b3f0:	d013      	beq.n	801b41a <HAL_GPIO_Init+0x21a>
 801b3f2:	687b      	ldr	r3, [r7, #4]
 801b3f4:	4a19      	ldr	r2, [pc, #100]	@ (801b45c <HAL_GPIO_Init+0x25c>)
 801b3f6:	4293      	cmp	r3, r2
 801b3f8:	d00d      	beq.n	801b416 <HAL_GPIO_Init+0x216>
 801b3fa:	687b      	ldr	r3, [r7, #4]
 801b3fc:	4a18      	ldr	r2, [pc, #96]	@ (801b460 <HAL_GPIO_Init+0x260>)
 801b3fe:	4293      	cmp	r3, r2
 801b400:	d007      	beq.n	801b412 <HAL_GPIO_Init+0x212>
 801b402:	687b      	ldr	r3, [r7, #4]
 801b404:	4a17      	ldr	r2, [pc, #92]	@ (801b464 <HAL_GPIO_Init+0x264>)
 801b406:	4293      	cmp	r3, r2
 801b408:	d101      	bne.n	801b40e <HAL_GPIO_Init+0x20e>
 801b40a:	2309      	movs	r3, #9
 801b40c:	e02d      	b.n	801b46a <HAL_GPIO_Init+0x26a>
 801b40e:	230a      	movs	r3, #10
 801b410:	e02b      	b.n	801b46a <HAL_GPIO_Init+0x26a>
 801b412:	2308      	movs	r3, #8
 801b414:	e029      	b.n	801b46a <HAL_GPIO_Init+0x26a>
 801b416:	2307      	movs	r3, #7
 801b418:	e027      	b.n	801b46a <HAL_GPIO_Init+0x26a>
 801b41a:	2306      	movs	r3, #6
 801b41c:	e025      	b.n	801b46a <HAL_GPIO_Init+0x26a>
 801b41e:	2305      	movs	r3, #5
 801b420:	e023      	b.n	801b46a <HAL_GPIO_Init+0x26a>
 801b422:	2304      	movs	r3, #4
 801b424:	e021      	b.n	801b46a <HAL_GPIO_Init+0x26a>
 801b426:	2303      	movs	r3, #3
 801b428:	e01f      	b.n	801b46a <HAL_GPIO_Init+0x26a>
 801b42a:	2302      	movs	r3, #2
 801b42c:	e01d      	b.n	801b46a <HAL_GPIO_Init+0x26a>
 801b42e:	2301      	movs	r3, #1
 801b430:	e01b      	b.n	801b46a <HAL_GPIO_Init+0x26a>
 801b432:	bf00      	nop
 801b434:	58000080 	.word	0x58000080
 801b438:	58024400 	.word	0x58024400
 801b43c:	58000400 	.word	0x58000400
 801b440:	58020000 	.word	0x58020000
 801b444:	58020400 	.word	0x58020400
 801b448:	58020800 	.word	0x58020800
 801b44c:	58020c00 	.word	0x58020c00
 801b450:	58021000 	.word	0x58021000
 801b454:	58021400 	.word	0x58021400
 801b458:	58021800 	.word	0x58021800
 801b45c:	58021c00 	.word	0x58021c00
 801b460:	58022000 	.word	0x58022000
 801b464:	58022400 	.word	0x58022400
 801b468:	2300      	movs	r3, #0
 801b46a:	69fa      	ldr	r2, [r7, #28]
 801b46c:	f002 0203 	and.w	r2, r2, #3
 801b470:	0092      	lsls	r2, r2, #2
 801b472:	4093      	lsls	r3, r2
 801b474:	69ba      	ldr	r2, [r7, #24]
 801b476:	4313      	orrs	r3, r2
 801b478:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801b47a:	4938      	ldr	r1, [pc, #224]	@ (801b55c <HAL_GPIO_Init+0x35c>)
 801b47c:	69fb      	ldr	r3, [r7, #28]
 801b47e:	089b      	lsrs	r3, r3, #2
 801b480:	3302      	adds	r3, #2
 801b482:	69ba      	ldr	r2, [r7, #24]
 801b484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801b488:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801b48c:	681b      	ldr	r3, [r3, #0]
 801b48e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801b490:	693b      	ldr	r3, [r7, #16]
 801b492:	43db      	mvns	r3, r3
 801b494:	69ba      	ldr	r2, [r7, #24]
 801b496:	4013      	ands	r3, r2
 801b498:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801b49a:	683b      	ldr	r3, [r7, #0]
 801b49c:	685b      	ldr	r3, [r3, #4]
 801b49e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801b4a2:	2b00      	cmp	r3, #0
 801b4a4:	d003      	beq.n	801b4ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801b4a6:	69ba      	ldr	r2, [r7, #24]
 801b4a8:	693b      	ldr	r3, [r7, #16]
 801b4aa:	4313      	orrs	r3, r2
 801b4ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801b4ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801b4b2:	69bb      	ldr	r3, [r7, #24]
 801b4b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801b4b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801b4ba:	685b      	ldr	r3, [r3, #4]
 801b4bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801b4be:	693b      	ldr	r3, [r7, #16]
 801b4c0:	43db      	mvns	r3, r3
 801b4c2:	69ba      	ldr	r2, [r7, #24]
 801b4c4:	4013      	ands	r3, r2
 801b4c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801b4c8:	683b      	ldr	r3, [r7, #0]
 801b4ca:	685b      	ldr	r3, [r3, #4]
 801b4cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801b4d0:	2b00      	cmp	r3, #0
 801b4d2:	d003      	beq.n	801b4dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 801b4d4:	69ba      	ldr	r2, [r7, #24]
 801b4d6:	693b      	ldr	r3, [r7, #16]
 801b4d8:	4313      	orrs	r3, r2
 801b4da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801b4dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801b4e0:	69bb      	ldr	r3, [r7, #24]
 801b4e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801b4e4:	697b      	ldr	r3, [r7, #20]
 801b4e6:	685b      	ldr	r3, [r3, #4]
 801b4e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801b4ea:	693b      	ldr	r3, [r7, #16]
 801b4ec:	43db      	mvns	r3, r3
 801b4ee:	69ba      	ldr	r2, [r7, #24]
 801b4f0:	4013      	ands	r3, r2
 801b4f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801b4f4:	683b      	ldr	r3, [r7, #0]
 801b4f6:	685b      	ldr	r3, [r3, #4]
 801b4f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801b4fc:	2b00      	cmp	r3, #0
 801b4fe:	d003      	beq.n	801b508 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 801b500:	69ba      	ldr	r2, [r7, #24]
 801b502:	693b      	ldr	r3, [r7, #16]
 801b504:	4313      	orrs	r3, r2
 801b506:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801b508:	697b      	ldr	r3, [r7, #20]
 801b50a:	69ba      	ldr	r2, [r7, #24]
 801b50c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801b50e:	697b      	ldr	r3, [r7, #20]
 801b510:	681b      	ldr	r3, [r3, #0]
 801b512:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801b514:	693b      	ldr	r3, [r7, #16]
 801b516:	43db      	mvns	r3, r3
 801b518:	69ba      	ldr	r2, [r7, #24]
 801b51a:	4013      	ands	r3, r2
 801b51c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801b51e:	683b      	ldr	r3, [r7, #0]
 801b520:	685b      	ldr	r3, [r3, #4]
 801b522:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801b526:	2b00      	cmp	r3, #0
 801b528:	d003      	beq.n	801b532 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 801b52a:	69ba      	ldr	r2, [r7, #24]
 801b52c:	693b      	ldr	r3, [r7, #16]
 801b52e:	4313      	orrs	r3, r2
 801b530:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801b532:	697b      	ldr	r3, [r7, #20]
 801b534:	69ba      	ldr	r2, [r7, #24]
 801b536:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801b538:	69fb      	ldr	r3, [r7, #28]
 801b53a:	3301      	adds	r3, #1
 801b53c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801b53e:	683b      	ldr	r3, [r7, #0]
 801b540:	681a      	ldr	r2, [r3, #0]
 801b542:	69fb      	ldr	r3, [r7, #28]
 801b544:	fa22 f303 	lsr.w	r3, r2, r3
 801b548:	2b00      	cmp	r3, #0
 801b54a:	f47f ae63 	bne.w	801b214 <HAL_GPIO_Init+0x14>
  }
}
 801b54e:	bf00      	nop
 801b550:	bf00      	nop
 801b552:	3724      	adds	r7, #36	@ 0x24
 801b554:	46bd      	mov	sp, r7
 801b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b55a:	4770      	bx	lr
 801b55c:	58000400 	.word	0x58000400

0801b560 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801b560:	b580      	push	{r7, lr}
 801b562:	b084      	sub	sp, #16
 801b564:	af00      	add	r7, sp, #0
 801b566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801b568:	4b19      	ldr	r3, [pc, #100]	@ (801b5d0 <HAL_PWREx_ConfigSupply+0x70>)
 801b56a:	68db      	ldr	r3, [r3, #12]
 801b56c:	f003 0304 	and.w	r3, r3, #4
 801b570:	2b04      	cmp	r3, #4
 801b572:	d00a      	beq.n	801b58a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801b574:	4b16      	ldr	r3, [pc, #88]	@ (801b5d0 <HAL_PWREx_ConfigSupply+0x70>)
 801b576:	68db      	ldr	r3, [r3, #12]
 801b578:	f003 0307 	and.w	r3, r3, #7
 801b57c:	687a      	ldr	r2, [r7, #4]
 801b57e:	429a      	cmp	r2, r3
 801b580:	d001      	beq.n	801b586 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801b582:	2301      	movs	r3, #1
 801b584:	e01f      	b.n	801b5c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801b586:	2300      	movs	r3, #0
 801b588:	e01d      	b.n	801b5c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801b58a:	4b11      	ldr	r3, [pc, #68]	@ (801b5d0 <HAL_PWREx_ConfigSupply+0x70>)
 801b58c:	68db      	ldr	r3, [r3, #12]
 801b58e:	f023 0207 	bic.w	r2, r3, #7
 801b592:	490f      	ldr	r1, [pc, #60]	@ (801b5d0 <HAL_PWREx_ConfigSupply+0x70>)
 801b594:	687b      	ldr	r3, [r7, #4]
 801b596:	4313      	orrs	r3, r2
 801b598:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801b59a:	f7fd fd75 	bl	8019088 <HAL_GetTick>
 801b59e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801b5a0:	e009      	b.n	801b5b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801b5a2:	f7fd fd71 	bl	8019088 <HAL_GetTick>
 801b5a6:	4602      	mov	r2, r0
 801b5a8:	68fb      	ldr	r3, [r7, #12]
 801b5aa:	1ad3      	subs	r3, r2, r3
 801b5ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801b5b0:	d901      	bls.n	801b5b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801b5b2:	2301      	movs	r3, #1
 801b5b4:	e007      	b.n	801b5c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801b5b6:	4b06      	ldr	r3, [pc, #24]	@ (801b5d0 <HAL_PWREx_ConfigSupply+0x70>)
 801b5b8:	685b      	ldr	r3, [r3, #4]
 801b5ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801b5be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801b5c2:	d1ee      	bne.n	801b5a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801b5c4:	2300      	movs	r3, #0
}
 801b5c6:	4618      	mov	r0, r3
 801b5c8:	3710      	adds	r7, #16
 801b5ca:	46bd      	mov	sp, r7
 801b5cc:	bd80      	pop	{r7, pc}
 801b5ce:	bf00      	nop
 801b5d0:	58024800 	.word	0x58024800

0801b5d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801b5d4:	b580      	push	{r7, lr}
 801b5d6:	b08c      	sub	sp, #48	@ 0x30
 801b5d8:	af00      	add	r7, sp, #0
 801b5da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801b5dc:	687b      	ldr	r3, [r7, #4]
 801b5de:	2b00      	cmp	r3, #0
 801b5e0:	d102      	bne.n	801b5e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801b5e2:	2301      	movs	r3, #1
 801b5e4:	f000 bc48 	b.w	801be78 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801b5e8:	687b      	ldr	r3, [r7, #4]
 801b5ea:	681b      	ldr	r3, [r3, #0]
 801b5ec:	f003 0301 	and.w	r3, r3, #1
 801b5f0:	2b00      	cmp	r3, #0
 801b5f2:	f000 8088 	beq.w	801b706 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b5f6:	4b99      	ldr	r3, [pc, #612]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b5f8:	691b      	ldr	r3, [r3, #16]
 801b5fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801b5fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801b600:	4b96      	ldr	r3, [pc, #600]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b604:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801b606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b608:	2b10      	cmp	r3, #16
 801b60a:	d007      	beq.n	801b61c <HAL_RCC_OscConfig+0x48>
 801b60c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b60e:	2b18      	cmp	r3, #24
 801b610:	d111      	bne.n	801b636 <HAL_RCC_OscConfig+0x62>
 801b612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b614:	f003 0303 	and.w	r3, r3, #3
 801b618:	2b02      	cmp	r3, #2
 801b61a:	d10c      	bne.n	801b636 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b61c:	4b8f      	ldr	r3, [pc, #572]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b61e:	681b      	ldr	r3, [r3, #0]
 801b620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801b624:	2b00      	cmp	r3, #0
 801b626:	d06d      	beq.n	801b704 <HAL_RCC_OscConfig+0x130>
 801b628:	687b      	ldr	r3, [r7, #4]
 801b62a:	685b      	ldr	r3, [r3, #4]
 801b62c:	2b00      	cmp	r3, #0
 801b62e:	d169      	bne.n	801b704 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801b630:	2301      	movs	r3, #1
 801b632:	f000 bc21 	b.w	801be78 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801b636:	687b      	ldr	r3, [r7, #4]
 801b638:	685b      	ldr	r3, [r3, #4]
 801b63a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b63e:	d106      	bne.n	801b64e <HAL_RCC_OscConfig+0x7a>
 801b640:	4b86      	ldr	r3, [pc, #536]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b642:	681b      	ldr	r3, [r3, #0]
 801b644:	4a85      	ldr	r2, [pc, #532]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b646:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801b64a:	6013      	str	r3, [r2, #0]
 801b64c:	e02e      	b.n	801b6ac <HAL_RCC_OscConfig+0xd8>
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	685b      	ldr	r3, [r3, #4]
 801b652:	2b00      	cmp	r3, #0
 801b654:	d10c      	bne.n	801b670 <HAL_RCC_OscConfig+0x9c>
 801b656:	4b81      	ldr	r3, [pc, #516]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b658:	681b      	ldr	r3, [r3, #0]
 801b65a:	4a80      	ldr	r2, [pc, #512]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b65c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801b660:	6013      	str	r3, [r2, #0]
 801b662:	4b7e      	ldr	r3, [pc, #504]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b664:	681b      	ldr	r3, [r3, #0]
 801b666:	4a7d      	ldr	r2, [pc, #500]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b668:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801b66c:	6013      	str	r3, [r2, #0]
 801b66e:	e01d      	b.n	801b6ac <HAL_RCC_OscConfig+0xd8>
 801b670:	687b      	ldr	r3, [r7, #4]
 801b672:	685b      	ldr	r3, [r3, #4]
 801b674:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801b678:	d10c      	bne.n	801b694 <HAL_RCC_OscConfig+0xc0>
 801b67a:	4b78      	ldr	r3, [pc, #480]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b67c:	681b      	ldr	r3, [r3, #0]
 801b67e:	4a77      	ldr	r2, [pc, #476]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b680:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801b684:	6013      	str	r3, [r2, #0]
 801b686:	4b75      	ldr	r3, [pc, #468]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b688:	681b      	ldr	r3, [r3, #0]
 801b68a:	4a74      	ldr	r2, [pc, #464]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b68c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801b690:	6013      	str	r3, [r2, #0]
 801b692:	e00b      	b.n	801b6ac <HAL_RCC_OscConfig+0xd8>
 801b694:	4b71      	ldr	r3, [pc, #452]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b696:	681b      	ldr	r3, [r3, #0]
 801b698:	4a70      	ldr	r2, [pc, #448]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b69a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801b69e:	6013      	str	r3, [r2, #0]
 801b6a0:	4b6e      	ldr	r3, [pc, #440]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b6a2:	681b      	ldr	r3, [r3, #0]
 801b6a4:	4a6d      	ldr	r2, [pc, #436]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b6a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801b6aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801b6ac:	687b      	ldr	r3, [r7, #4]
 801b6ae:	685b      	ldr	r3, [r3, #4]
 801b6b0:	2b00      	cmp	r3, #0
 801b6b2:	d013      	beq.n	801b6dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b6b4:	f7fd fce8 	bl	8019088 <HAL_GetTick>
 801b6b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b6ba:	e008      	b.n	801b6ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801b6bc:	f7fd fce4 	bl	8019088 <HAL_GetTick>
 801b6c0:	4602      	mov	r2, r0
 801b6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b6c4:	1ad3      	subs	r3, r2, r3
 801b6c6:	2b64      	cmp	r3, #100	@ 0x64
 801b6c8:	d901      	bls.n	801b6ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801b6ca:	2303      	movs	r3, #3
 801b6cc:	e3d4      	b.n	801be78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b6ce:	4b63      	ldr	r3, [pc, #396]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b6d0:	681b      	ldr	r3, [r3, #0]
 801b6d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801b6d6:	2b00      	cmp	r3, #0
 801b6d8:	d0f0      	beq.n	801b6bc <HAL_RCC_OscConfig+0xe8>
 801b6da:	e014      	b.n	801b706 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b6dc:	f7fd fcd4 	bl	8019088 <HAL_GetTick>
 801b6e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801b6e2:	e008      	b.n	801b6f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801b6e4:	f7fd fcd0 	bl	8019088 <HAL_GetTick>
 801b6e8:	4602      	mov	r2, r0
 801b6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b6ec:	1ad3      	subs	r3, r2, r3
 801b6ee:	2b64      	cmp	r3, #100	@ 0x64
 801b6f0:	d901      	bls.n	801b6f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801b6f2:	2303      	movs	r3, #3
 801b6f4:	e3c0      	b.n	801be78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801b6f6:	4b59      	ldr	r3, [pc, #356]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b6f8:	681b      	ldr	r3, [r3, #0]
 801b6fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801b6fe:	2b00      	cmp	r3, #0
 801b700:	d1f0      	bne.n	801b6e4 <HAL_RCC_OscConfig+0x110>
 801b702:	e000      	b.n	801b706 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801b706:	687b      	ldr	r3, [r7, #4]
 801b708:	681b      	ldr	r3, [r3, #0]
 801b70a:	f003 0302 	and.w	r3, r3, #2
 801b70e:	2b00      	cmp	r3, #0
 801b710:	f000 80ca 	beq.w	801b8a8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b714:	4b51      	ldr	r3, [pc, #324]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b716:	691b      	ldr	r3, [r3, #16]
 801b718:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801b71c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801b71e:	4b4f      	ldr	r3, [pc, #316]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b722:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801b724:	6a3b      	ldr	r3, [r7, #32]
 801b726:	2b00      	cmp	r3, #0
 801b728:	d007      	beq.n	801b73a <HAL_RCC_OscConfig+0x166>
 801b72a:	6a3b      	ldr	r3, [r7, #32]
 801b72c:	2b18      	cmp	r3, #24
 801b72e:	d156      	bne.n	801b7de <HAL_RCC_OscConfig+0x20a>
 801b730:	69fb      	ldr	r3, [r7, #28]
 801b732:	f003 0303 	and.w	r3, r3, #3
 801b736:	2b00      	cmp	r3, #0
 801b738:	d151      	bne.n	801b7de <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b73a:	4b48      	ldr	r3, [pc, #288]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b73c:	681b      	ldr	r3, [r3, #0]
 801b73e:	f003 0304 	and.w	r3, r3, #4
 801b742:	2b00      	cmp	r3, #0
 801b744:	d005      	beq.n	801b752 <HAL_RCC_OscConfig+0x17e>
 801b746:	687b      	ldr	r3, [r7, #4]
 801b748:	68db      	ldr	r3, [r3, #12]
 801b74a:	2b00      	cmp	r3, #0
 801b74c:	d101      	bne.n	801b752 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801b74e:	2301      	movs	r3, #1
 801b750:	e392      	b.n	801be78 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801b752:	4b42      	ldr	r3, [pc, #264]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b754:	681b      	ldr	r3, [r3, #0]
 801b756:	f023 0219 	bic.w	r2, r3, #25
 801b75a:	687b      	ldr	r3, [r7, #4]
 801b75c:	68db      	ldr	r3, [r3, #12]
 801b75e:	493f      	ldr	r1, [pc, #252]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b760:	4313      	orrs	r3, r2
 801b762:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b764:	f7fd fc90 	bl	8019088 <HAL_GetTick>
 801b768:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b76a:	e008      	b.n	801b77e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b76c:	f7fd fc8c 	bl	8019088 <HAL_GetTick>
 801b770:	4602      	mov	r2, r0
 801b772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b774:	1ad3      	subs	r3, r2, r3
 801b776:	2b02      	cmp	r3, #2
 801b778:	d901      	bls.n	801b77e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801b77a:	2303      	movs	r3, #3
 801b77c:	e37c      	b.n	801be78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b77e:	4b37      	ldr	r3, [pc, #220]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b780:	681b      	ldr	r3, [r3, #0]
 801b782:	f003 0304 	and.w	r3, r3, #4
 801b786:	2b00      	cmp	r3, #0
 801b788:	d0f0      	beq.n	801b76c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b78a:	f7fd fc89 	bl	80190a0 <HAL_GetREVID>
 801b78e:	4603      	mov	r3, r0
 801b790:	f241 0203 	movw	r2, #4099	@ 0x1003
 801b794:	4293      	cmp	r3, r2
 801b796:	d817      	bhi.n	801b7c8 <HAL_RCC_OscConfig+0x1f4>
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	691b      	ldr	r3, [r3, #16]
 801b79c:	2b40      	cmp	r3, #64	@ 0x40
 801b79e:	d108      	bne.n	801b7b2 <HAL_RCC_OscConfig+0x1de>
 801b7a0:	4b2e      	ldr	r3, [pc, #184]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b7a2:	685b      	ldr	r3, [r3, #4]
 801b7a4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801b7a8:	4a2c      	ldr	r2, [pc, #176]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b7aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801b7ae:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b7b0:	e07a      	b.n	801b8a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b7b2:	4b2a      	ldr	r3, [pc, #168]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b7b4:	685b      	ldr	r3, [r3, #4]
 801b7b6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801b7ba:	687b      	ldr	r3, [r7, #4]
 801b7bc:	691b      	ldr	r3, [r3, #16]
 801b7be:	031b      	lsls	r3, r3, #12
 801b7c0:	4926      	ldr	r1, [pc, #152]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b7c2:	4313      	orrs	r3, r2
 801b7c4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b7c6:	e06f      	b.n	801b8a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b7c8:	4b24      	ldr	r3, [pc, #144]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b7ca:	685b      	ldr	r3, [r3, #4]
 801b7cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801b7d0:	687b      	ldr	r3, [r7, #4]
 801b7d2:	691b      	ldr	r3, [r3, #16]
 801b7d4:	061b      	lsls	r3, r3, #24
 801b7d6:	4921      	ldr	r1, [pc, #132]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b7d8:	4313      	orrs	r3, r2
 801b7da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b7dc:	e064      	b.n	801b8a8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801b7de:	687b      	ldr	r3, [r7, #4]
 801b7e0:	68db      	ldr	r3, [r3, #12]
 801b7e2:	2b00      	cmp	r3, #0
 801b7e4:	d047      	beq.n	801b876 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801b7e6:	4b1d      	ldr	r3, [pc, #116]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b7e8:	681b      	ldr	r3, [r3, #0]
 801b7ea:	f023 0219 	bic.w	r2, r3, #25
 801b7ee:	687b      	ldr	r3, [r7, #4]
 801b7f0:	68db      	ldr	r3, [r3, #12]
 801b7f2:	491a      	ldr	r1, [pc, #104]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b7f4:	4313      	orrs	r3, r2
 801b7f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b7f8:	f7fd fc46 	bl	8019088 <HAL_GetTick>
 801b7fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b7fe:	e008      	b.n	801b812 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b800:	f7fd fc42 	bl	8019088 <HAL_GetTick>
 801b804:	4602      	mov	r2, r0
 801b806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b808:	1ad3      	subs	r3, r2, r3
 801b80a:	2b02      	cmp	r3, #2
 801b80c:	d901      	bls.n	801b812 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801b80e:	2303      	movs	r3, #3
 801b810:	e332      	b.n	801be78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b812:	4b12      	ldr	r3, [pc, #72]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b814:	681b      	ldr	r3, [r3, #0]
 801b816:	f003 0304 	and.w	r3, r3, #4
 801b81a:	2b00      	cmp	r3, #0
 801b81c:	d0f0      	beq.n	801b800 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b81e:	f7fd fc3f 	bl	80190a0 <HAL_GetREVID>
 801b822:	4603      	mov	r3, r0
 801b824:	f241 0203 	movw	r2, #4099	@ 0x1003
 801b828:	4293      	cmp	r3, r2
 801b82a:	d819      	bhi.n	801b860 <HAL_RCC_OscConfig+0x28c>
 801b82c:	687b      	ldr	r3, [r7, #4]
 801b82e:	691b      	ldr	r3, [r3, #16]
 801b830:	2b40      	cmp	r3, #64	@ 0x40
 801b832:	d108      	bne.n	801b846 <HAL_RCC_OscConfig+0x272>
 801b834:	4b09      	ldr	r3, [pc, #36]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b836:	685b      	ldr	r3, [r3, #4]
 801b838:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801b83c:	4a07      	ldr	r2, [pc, #28]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b83e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801b842:	6053      	str	r3, [r2, #4]
 801b844:	e030      	b.n	801b8a8 <HAL_RCC_OscConfig+0x2d4>
 801b846:	4b05      	ldr	r3, [pc, #20]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b848:	685b      	ldr	r3, [r3, #4]
 801b84a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801b84e:	687b      	ldr	r3, [r7, #4]
 801b850:	691b      	ldr	r3, [r3, #16]
 801b852:	031b      	lsls	r3, r3, #12
 801b854:	4901      	ldr	r1, [pc, #4]	@ (801b85c <HAL_RCC_OscConfig+0x288>)
 801b856:	4313      	orrs	r3, r2
 801b858:	604b      	str	r3, [r1, #4]
 801b85a:	e025      	b.n	801b8a8 <HAL_RCC_OscConfig+0x2d4>
 801b85c:	58024400 	.word	0x58024400
 801b860:	4b9a      	ldr	r3, [pc, #616]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801b862:	685b      	ldr	r3, [r3, #4]
 801b864:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801b868:	687b      	ldr	r3, [r7, #4]
 801b86a:	691b      	ldr	r3, [r3, #16]
 801b86c:	061b      	lsls	r3, r3, #24
 801b86e:	4997      	ldr	r1, [pc, #604]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801b870:	4313      	orrs	r3, r2
 801b872:	604b      	str	r3, [r1, #4]
 801b874:	e018      	b.n	801b8a8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801b876:	4b95      	ldr	r3, [pc, #596]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801b878:	681b      	ldr	r3, [r3, #0]
 801b87a:	4a94      	ldr	r2, [pc, #592]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801b87c:	f023 0301 	bic.w	r3, r3, #1
 801b880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b882:	f7fd fc01 	bl	8019088 <HAL_GetTick>
 801b886:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b888:	e008      	b.n	801b89c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b88a:	f7fd fbfd 	bl	8019088 <HAL_GetTick>
 801b88e:	4602      	mov	r2, r0
 801b890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b892:	1ad3      	subs	r3, r2, r3
 801b894:	2b02      	cmp	r3, #2
 801b896:	d901      	bls.n	801b89c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 801b898:	2303      	movs	r3, #3
 801b89a:	e2ed      	b.n	801be78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b89c:	4b8b      	ldr	r3, [pc, #556]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801b89e:	681b      	ldr	r3, [r3, #0]
 801b8a0:	f003 0304 	and.w	r3, r3, #4
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	d1f0      	bne.n	801b88a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801b8a8:	687b      	ldr	r3, [r7, #4]
 801b8aa:	681b      	ldr	r3, [r3, #0]
 801b8ac:	f003 0310 	and.w	r3, r3, #16
 801b8b0:	2b00      	cmp	r3, #0
 801b8b2:	f000 80a9 	beq.w	801ba08 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b8b6:	4b85      	ldr	r3, [pc, #532]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801b8b8:	691b      	ldr	r3, [r3, #16]
 801b8ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801b8be:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801b8c0:	4b82      	ldr	r3, [pc, #520]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801b8c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b8c4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801b8c6:	69bb      	ldr	r3, [r7, #24]
 801b8c8:	2b08      	cmp	r3, #8
 801b8ca:	d007      	beq.n	801b8dc <HAL_RCC_OscConfig+0x308>
 801b8cc:	69bb      	ldr	r3, [r7, #24]
 801b8ce:	2b18      	cmp	r3, #24
 801b8d0:	d13a      	bne.n	801b948 <HAL_RCC_OscConfig+0x374>
 801b8d2:	697b      	ldr	r3, [r7, #20]
 801b8d4:	f003 0303 	and.w	r3, r3, #3
 801b8d8:	2b01      	cmp	r3, #1
 801b8da:	d135      	bne.n	801b948 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801b8dc:	4b7b      	ldr	r3, [pc, #492]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801b8de:	681b      	ldr	r3, [r3, #0]
 801b8e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b8e4:	2b00      	cmp	r3, #0
 801b8e6:	d005      	beq.n	801b8f4 <HAL_RCC_OscConfig+0x320>
 801b8e8:	687b      	ldr	r3, [r7, #4]
 801b8ea:	69db      	ldr	r3, [r3, #28]
 801b8ec:	2b80      	cmp	r3, #128	@ 0x80
 801b8ee:	d001      	beq.n	801b8f4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 801b8f0:	2301      	movs	r3, #1
 801b8f2:	e2c1      	b.n	801be78 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801b8f4:	f7fd fbd4 	bl	80190a0 <HAL_GetREVID>
 801b8f8:	4603      	mov	r3, r0
 801b8fa:	f241 0203 	movw	r2, #4099	@ 0x1003
 801b8fe:	4293      	cmp	r3, r2
 801b900:	d817      	bhi.n	801b932 <HAL_RCC_OscConfig+0x35e>
 801b902:	687b      	ldr	r3, [r7, #4]
 801b904:	6a1b      	ldr	r3, [r3, #32]
 801b906:	2b20      	cmp	r3, #32
 801b908:	d108      	bne.n	801b91c <HAL_RCC_OscConfig+0x348>
 801b90a:	4b70      	ldr	r3, [pc, #448]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801b90c:	685b      	ldr	r3, [r3, #4]
 801b90e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801b912:	4a6e      	ldr	r2, [pc, #440]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801b914:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801b918:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801b91a:	e075      	b.n	801ba08 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801b91c:	4b6b      	ldr	r3, [pc, #428]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801b91e:	685b      	ldr	r3, [r3, #4]
 801b920:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801b924:	687b      	ldr	r3, [r7, #4]
 801b926:	6a1b      	ldr	r3, [r3, #32]
 801b928:	069b      	lsls	r3, r3, #26
 801b92a:	4968      	ldr	r1, [pc, #416]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801b92c:	4313      	orrs	r3, r2
 801b92e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801b930:	e06a      	b.n	801ba08 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801b932:	4b66      	ldr	r3, [pc, #408]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801b934:	68db      	ldr	r3, [r3, #12]
 801b936:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801b93a:	687b      	ldr	r3, [r7, #4]
 801b93c:	6a1b      	ldr	r3, [r3, #32]
 801b93e:	061b      	lsls	r3, r3, #24
 801b940:	4962      	ldr	r1, [pc, #392]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801b942:	4313      	orrs	r3, r2
 801b944:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801b946:	e05f      	b.n	801ba08 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801b948:	687b      	ldr	r3, [r7, #4]
 801b94a:	69db      	ldr	r3, [r3, #28]
 801b94c:	2b00      	cmp	r3, #0
 801b94e:	d042      	beq.n	801b9d6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801b950:	4b5e      	ldr	r3, [pc, #376]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801b952:	681b      	ldr	r3, [r3, #0]
 801b954:	4a5d      	ldr	r2, [pc, #372]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801b956:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b95a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b95c:	f7fd fb94 	bl	8019088 <HAL_GetTick>
 801b960:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801b962:	e008      	b.n	801b976 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801b964:	f7fd fb90 	bl	8019088 <HAL_GetTick>
 801b968:	4602      	mov	r2, r0
 801b96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b96c:	1ad3      	subs	r3, r2, r3
 801b96e:	2b02      	cmp	r3, #2
 801b970:	d901      	bls.n	801b976 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 801b972:	2303      	movs	r3, #3
 801b974:	e280      	b.n	801be78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801b976:	4b55      	ldr	r3, [pc, #340]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801b978:	681b      	ldr	r3, [r3, #0]
 801b97a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b97e:	2b00      	cmp	r3, #0
 801b980:	d0f0      	beq.n	801b964 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801b982:	f7fd fb8d 	bl	80190a0 <HAL_GetREVID>
 801b986:	4603      	mov	r3, r0
 801b988:	f241 0203 	movw	r2, #4099	@ 0x1003
 801b98c:	4293      	cmp	r3, r2
 801b98e:	d817      	bhi.n	801b9c0 <HAL_RCC_OscConfig+0x3ec>
 801b990:	687b      	ldr	r3, [r7, #4]
 801b992:	6a1b      	ldr	r3, [r3, #32]
 801b994:	2b20      	cmp	r3, #32
 801b996:	d108      	bne.n	801b9aa <HAL_RCC_OscConfig+0x3d6>
 801b998:	4b4c      	ldr	r3, [pc, #304]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801b99a:	685b      	ldr	r3, [r3, #4]
 801b99c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801b9a0:	4a4a      	ldr	r2, [pc, #296]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801b9a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801b9a6:	6053      	str	r3, [r2, #4]
 801b9a8:	e02e      	b.n	801ba08 <HAL_RCC_OscConfig+0x434>
 801b9aa:	4b48      	ldr	r3, [pc, #288]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801b9ac:	685b      	ldr	r3, [r3, #4]
 801b9ae:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	6a1b      	ldr	r3, [r3, #32]
 801b9b6:	069b      	lsls	r3, r3, #26
 801b9b8:	4944      	ldr	r1, [pc, #272]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801b9ba:	4313      	orrs	r3, r2
 801b9bc:	604b      	str	r3, [r1, #4]
 801b9be:	e023      	b.n	801ba08 <HAL_RCC_OscConfig+0x434>
 801b9c0:	4b42      	ldr	r3, [pc, #264]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801b9c2:	68db      	ldr	r3, [r3, #12]
 801b9c4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801b9c8:	687b      	ldr	r3, [r7, #4]
 801b9ca:	6a1b      	ldr	r3, [r3, #32]
 801b9cc:	061b      	lsls	r3, r3, #24
 801b9ce:	493f      	ldr	r1, [pc, #252]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801b9d0:	4313      	orrs	r3, r2
 801b9d2:	60cb      	str	r3, [r1, #12]
 801b9d4:	e018      	b.n	801ba08 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801b9d6:	4b3d      	ldr	r3, [pc, #244]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801b9d8:	681b      	ldr	r3, [r3, #0]
 801b9da:	4a3c      	ldr	r2, [pc, #240]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801b9dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801b9e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b9e2:	f7fd fb51 	bl	8019088 <HAL_GetTick>
 801b9e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801b9e8:	e008      	b.n	801b9fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801b9ea:	f7fd fb4d 	bl	8019088 <HAL_GetTick>
 801b9ee:	4602      	mov	r2, r0
 801b9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9f2:	1ad3      	subs	r3, r2, r3
 801b9f4:	2b02      	cmp	r3, #2
 801b9f6:	d901      	bls.n	801b9fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801b9f8:	2303      	movs	r3, #3
 801b9fa:	e23d      	b.n	801be78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801b9fc:	4b33      	ldr	r3, [pc, #204]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801b9fe:	681b      	ldr	r3, [r3, #0]
 801ba00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ba04:	2b00      	cmp	r3, #0
 801ba06:	d1f0      	bne.n	801b9ea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801ba08:	687b      	ldr	r3, [r7, #4]
 801ba0a:	681b      	ldr	r3, [r3, #0]
 801ba0c:	f003 0308 	and.w	r3, r3, #8
 801ba10:	2b00      	cmp	r3, #0
 801ba12:	d036      	beq.n	801ba82 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	695b      	ldr	r3, [r3, #20]
 801ba18:	2b00      	cmp	r3, #0
 801ba1a:	d019      	beq.n	801ba50 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801ba1c:	4b2b      	ldr	r3, [pc, #172]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801ba1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ba20:	4a2a      	ldr	r2, [pc, #168]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801ba22:	f043 0301 	orr.w	r3, r3, #1
 801ba26:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ba28:	f7fd fb2e 	bl	8019088 <HAL_GetTick>
 801ba2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801ba2e:	e008      	b.n	801ba42 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801ba30:	f7fd fb2a 	bl	8019088 <HAL_GetTick>
 801ba34:	4602      	mov	r2, r0
 801ba36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba38:	1ad3      	subs	r3, r2, r3
 801ba3a:	2b02      	cmp	r3, #2
 801ba3c:	d901      	bls.n	801ba42 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801ba3e:	2303      	movs	r3, #3
 801ba40:	e21a      	b.n	801be78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801ba42:	4b22      	ldr	r3, [pc, #136]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801ba44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ba46:	f003 0302 	and.w	r3, r3, #2
 801ba4a:	2b00      	cmp	r3, #0
 801ba4c:	d0f0      	beq.n	801ba30 <HAL_RCC_OscConfig+0x45c>
 801ba4e:	e018      	b.n	801ba82 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801ba50:	4b1e      	ldr	r3, [pc, #120]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801ba52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ba54:	4a1d      	ldr	r2, [pc, #116]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801ba56:	f023 0301 	bic.w	r3, r3, #1
 801ba5a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ba5c:	f7fd fb14 	bl	8019088 <HAL_GetTick>
 801ba60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801ba62:	e008      	b.n	801ba76 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801ba64:	f7fd fb10 	bl	8019088 <HAL_GetTick>
 801ba68:	4602      	mov	r2, r0
 801ba6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba6c:	1ad3      	subs	r3, r2, r3
 801ba6e:	2b02      	cmp	r3, #2
 801ba70:	d901      	bls.n	801ba76 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 801ba72:	2303      	movs	r3, #3
 801ba74:	e200      	b.n	801be78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801ba76:	4b15      	ldr	r3, [pc, #84]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801ba78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ba7a:	f003 0302 	and.w	r3, r3, #2
 801ba7e:	2b00      	cmp	r3, #0
 801ba80:	d1f0      	bne.n	801ba64 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801ba82:	687b      	ldr	r3, [r7, #4]
 801ba84:	681b      	ldr	r3, [r3, #0]
 801ba86:	f003 0320 	and.w	r3, r3, #32
 801ba8a:	2b00      	cmp	r3, #0
 801ba8c:	d039      	beq.n	801bb02 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801ba8e:	687b      	ldr	r3, [r7, #4]
 801ba90:	699b      	ldr	r3, [r3, #24]
 801ba92:	2b00      	cmp	r3, #0
 801ba94:	d01c      	beq.n	801bad0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801ba96:	4b0d      	ldr	r3, [pc, #52]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801ba98:	681b      	ldr	r3, [r3, #0]
 801ba9a:	4a0c      	ldr	r2, [pc, #48]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801ba9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801baa0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801baa2:	f7fd faf1 	bl	8019088 <HAL_GetTick>
 801baa6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801baa8:	e008      	b.n	801babc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801baaa:	f7fd faed 	bl	8019088 <HAL_GetTick>
 801baae:	4602      	mov	r2, r0
 801bab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bab2:	1ad3      	subs	r3, r2, r3
 801bab4:	2b02      	cmp	r3, #2
 801bab6:	d901      	bls.n	801babc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 801bab8:	2303      	movs	r3, #3
 801baba:	e1dd      	b.n	801be78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801babc:	4b03      	ldr	r3, [pc, #12]	@ (801bacc <HAL_RCC_OscConfig+0x4f8>)
 801babe:	681b      	ldr	r3, [r3, #0]
 801bac0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801bac4:	2b00      	cmp	r3, #0
 801bac6:	d0f0      	beq.n	801baaa <HAL_RCC_OscConfig+0x4d6>
 801bac8:	e01b      	b.n	801bb02 <HAL_RCC_OscConfig+0x52e>
 801baca:	bf00      	nop
 801bacc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801bad0:	4b9b      	ldr	r3, [pc, #620]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bad2:	681b      	ldr	r3, [r3, #0]
 801bad4:	4a9a      	ldr	r2, [pc, #616]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bad6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801bada:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801badc:	f7fd fad4 	bl	8019088 <HAL_GetTick>
 801bae0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801bae2:	e008      	b.n	801baf6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801bae4:	f7fd fad0 	bl	8019088 <HAL_GetTick>
 801bae8:	4602      	mov	r2, r0
 801baea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801baec:	1ad3      	subs	r3, r2, r3
 801baee:	2b02      	cmp	r3, #2
 801baf0:	d901      	bls.n	801baf6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 801baf2:	2303      	movs	r3, #3
 801baf4:	e1c0      	b.n	801be78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801baf6:	4b92      	ldr	r3, [pc, #584]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801baf8:	681b      	ldr	r3, [r3, #0]
 801bafa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801bafe:	2b00      	cmp	r3, #0
 801bb00:	d1f0      	bne.n	801bae4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801bb02:	687b      	ldr	r3, [r7, #4]
 801bb04:	681b      	ldr	r3, [r3, #0]
 801bb06:	f003 0304 	and.w	r3, r3, #4
 801bb0a:	2b00      	cmp	r3, #0
 801bb0c:	f000 8081 	beq.w	801bc12 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801bb10:	4b8c      	ldr	r3, [pc, #560]	@ (801bd44 <HAL_RCC_OscConfig+0x770>)
 801bb12:	681b      	ldr	r3, [r3, #0]
 801bb14:	4a8b      	ldr	r2, [pc, #556]	@ (801bd44 <HAL_RCC_OscConfig+0x770>)
 801bb16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801bb1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801bb1c:	f7fd fab4 	bl	8019088 <HAL_GetTick>
 801bb20:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801bb22:	e008      	b.n	801bb36 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801bb24:	f7fd fab0 	bl	8019088 <HAL_GetTick>
 801bb28:	4602      	mov	r2, r0
 801bb2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb2c:	1ad3      	subs	r3, r2, r3
 801bb2e:	2b64      	cmp	r3, #100	@ 0x64
 801bb30:	d901      	bls.n	801bb36 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 801bb32:	2303      	movs	r3, #3
 801bb34:	e1a0      	b.n	801be78 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801bb36:	4b83      	ldr	r3, [pc, #524]	@ (801bd44 <HAL_RCC_OscConfig+0x770>)
 801bb38:	681b      	ldr	r3, [r3, #0]
 801bb3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bb3e:	2b00      	cmp	r3, #0
 801bb40:	d0f0      	beq.n	801bb24 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801bb42:	687b      	ldr	r3, [r7, #4]
 801bb44:	689b      	ldr	r3, [r3, #8]
 801bb46:	2b01      	cmp	r3, #1
 801bb48:	d106      	bne.n	801bb58 <HAL_RCC_OscConfig+0x584>
 801bb4a:	4b7d      	ldr	r3, [pc, #500]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bb4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bb4e:	4a7c      	ldr	r2, [pc, #496]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bb50:	f043 0301 	orr.w	r3, r3, #1
 801bb54:	6713      	str	r3, [r2, #112]	@ 0x70
 801bb56:	e02d      	b.n	801bbb4 <HAL_RCC_OscConfig+0x5e0>
 801bb58:	687b      	ldr	r3, [r7, #4]
 801bb5a:	689b      	ldr	r3, [r3, #8]
 801bb5c:	2b00      	cmp	r3, #0
 801bb5e:	d10c      	bne.n	801bb7a <HAL_RCC_OscConfig+0x5a6>
 801bb60:	4b77      	ldr	r3, [pc, #476]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bb62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bb64:	4a76      	ldr	r2, [pc, #472]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bb66:	f023 0301 	bic.w	r3, r3, #1
 801bb6a:	6713      	str	r3, [r2, #112]	@ 0x70
 801bb6c:	4b74      	ldr	r3, [pc, #464]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bb6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bb70:	4a73      	ldr	r2, [pc, #460]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bb72:	f023 0304 	bic.w	r3, r3, #4
 801bb76:	6713      	str	r3, [r2, #112]	@ 0x70
 801bb78:	e01c      	b.n	801bbb4 <HAL_RCC_OscConfig+0x5e0>
 801bb7a:	687b      	ldr	r3, [r7, #4]
 801bb7c:	689b      	ldr	r3, [r3, #8]
 801bb7e:	2b05      	cmp	r3, #5
 801bb80:	d10c      	bne.n	801bb9c <HAL_RCC_OscConfig+0x5c8>
 801bb82:	4b6f      	ldr	r3, [pc, #444]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bb84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bb86:	4a6e      	ldr	r2, [pc, #440]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bb88:	f043 0304 	orr.w	r3, r3, #4
 801bb8c:	6713      	str	r3, [r2, #112]	@ 0x70
 801bb8e:	4b6c      	ldr	r3, [pc, #432]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bb90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bb92:	4a6b      	ldr	r2, [pc, #428]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bb94:	f043 0301 	orr.w	r3, r3, #1
 801bb98:	6713      	str	r3, [r2, #112]	@ 0x70
 801bb9a:	e00b      	b.n	801bbb4 <HAL_RCC_OscConfig+0x5e0>
 801bb9c:	4b68      	ldr	r3, [pc, #416]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bb9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bba0:	4a67      	ldr	r2, [pc, #412]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bba2:	f023 0301 	bic.w	r3, r3, #1
 801bba6:	6713      	str	r3, [r2, #112]	@ 0x70
 801bba8:	4b65      	ldr	r3, [pc, #404]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bbaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bbac:	4a64      	ldr	r2, [pc, #400]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bbae:	f023 0304 	bic.w	r3, r3, #4
 801bbb2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801bbb4:	687b      	ldr	r3, [r7, #4]
 801bbb6:	689b      	ldr	r3, [r3, #8]
 801bbb8:	2b00      	cmp	r3, #0
 801bbba:	d015      	beq.n	801bbe8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bbbc:	f7fd fa64 	bl	8019088 <HAL_GetTick>
 801bbc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801bbc2:	e00a      	b.n	801bbda <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801bbc4:	f7fd fa60 	bl	8019088 <HAL_GetTick>
 801bbc8:	4602      	mov	r2, r0
 801bbca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbcc:	1ad3      	subs	r3, r2, r3
 801bbce:	f241 3288 	movw	r2, #5000	@ 0x1388
 801bbd2:	4293      	cmp	r3, r2
 801bbd4:	d901      	bls.n	801bbda <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 801bbd6:	2303      	movs	r3, #3
 801bbd8:	e14e      	b.n	801be78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801bbda:	4b59      	ldr	r3, [pc, #356]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bbdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bbde:	f003 0302 	and.w	r3, r3, #2
 801bbe2:	2b00      	cmp	r3, #0
 801bbe4:	d0ee      	beq.n	801bbc4 <HAL_RCC_OscConfig+0x5f0>
 801bbe6:	e014      	b.n	801bc12 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bbe8:	f7fd fa4e 	bl	8019088 <HAL_GetTick>
 801bbec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801bbee:	e00a      	b.n	801bc06 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801bbf0:	f7fd fa4a 	bl	8019088 <HAL_GetTick>
 801bbf4:	4602      	mov	r2, r0
 801bbf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbf8:	1ad3      	subs	r3, r2, r3
 801bbfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 801bbfe:	4293      	cmp	r3, r2
 801bc00:	d901      	bls.n	801bc06 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 801bc02:	2303      	movs	r3, #3
 801bc04:	e138      	b.n	801be78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801bc06:	4b4e      	ldr	r3, [pc, #312]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bc08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bc0a:	f003 0302 	and.w	r3, r3, #2
 801bc0e:	2b00      	cmp	r3, #0
 801bc10:	d1ee      	bne.n	801bbf0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801bc12:	687b      	ldr	r3, [r7, #4]
 801bc14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bc16:	2b00      	cmp	r3, #0
 801bc18:	f000 812d 	beq.w	801be76 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801bc1c:	4b48      	ldr	r3, [pc, #288]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bc1e:	691b      	ldr	r3, [r3, #16]
 801bc20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801bc24:	2b18      	cmp	r3, #24
 801bc26:	f000 80bd 	beq.w	801bda4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801bc2a:	687b      	ldr	r3, [r7, #4]
 801bc2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bc2e:	2b02      	cmp	r3, #2
 801bc30:	f040 809e 	bne.w	801bd70 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801bc34:	4b42      	ldr	r3, [pc, #264]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bc36:	681b      	ldr	r3, [r3, #0]
 801bc38:	4a41      	ldr	r2, [pc, #260]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bc3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801bc3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bc40:	f7fd fa22 	bl	8019088 <HAL_GetTick>
 801bc44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801bc46:	e008      	b.n	801bc5a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801bc48:	f7fd fa1e 	bl	8019088 <HAL_GetTick>
 801bc4c:	4602      	mov	r2, r0
 801bc4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bc50:	1ad3      	subs	r3, r2, r3
 801bc52:	2b02      	cmp	r3, #2
 801bc54:	d901      	bls.n	801bc5a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 801bc56:	2303      	movs	r3, #3
 801bc58:	e10e      	b.n	801be78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801bc5a:	4b39      	ldr	r3, [pc, #228]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bc5c:	681b      	ldr	r3, [r3, #0]
 801bc5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801bc62:	2b00      	cmp	r3, #0
 801bc64:	d1f0      	bne.n	801bc48 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801bc66:	4b36      	ldr	r3, [pc, #216]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bc68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801bc6a:	4b37      	ldr	r3, [pc, #220]	@ (801bd48 <HAL_RCC_OscConfig+0x774>)
 801bc6c:	4013      	ands	r3, r2
 801bc6e:	687a      	ldr	r2, [r7, #4]
 801bc70:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801bc72:	687a      	ldr	r2, [r7, #4]
 801bc74:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801bc76:	0112      	lsls	r2, r2, #4
 801bc78:	430a      	orrs	r2, r1
 801bc7a:	4931      	ldr	r1, [pc, #196]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bc7c:	4313      	orrs	r3, r2
 801bc7e:	628b      	str	r3, [r1, #40]	@ 0x28
 801bc80:	687b      	ldr	r3, [r7, #4]
 801bc82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bc84:	3b01      	subs	r3, #1
 801bc86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801bc8a:	687b      	ldr	r3, [r7, #4]
 801bc8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801bc8e:	3b01      	subs	r3, #1
 801bc90:	025b      	lsls	r3, r3, #9
 801bc92:	b29b      	uxth	r3, r3
 801bc94:	431a      	orrs	r2, r3
 801bc96:	687b      	ldr	r3, [r7, #4]
 801bc98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801bc9a:	3b01      	subs	r3, #1
 801bc9c:	041b      	lsls	r3, r3, #16
 801bc9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801bca2:	431a      	orrs	r2, r3
 801bca4:	687b      	ldr	r3, [r7, #4]
 801bca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bca8:	3b01      	subs	r3, #1
 801bcaa:	061b      	lsls	r3, r3, #24
 801bcac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801bcb0:	4923      	ldr	r1, [pc, #140]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bcb2:	4313      	orrs	r3, r2
 801bcb4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801bcb6:	4b22      	ldr	r3, [pc, #136]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bcb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bcba:	4a21      	ldr	r2, [pc, #132]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bcbc:	f023 0301 	bic.w	r3, r3, #1
 801bcc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801bcc2:	4b1f      	ldr	r3, [pc, #124]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bcc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801bcc6:	4b21      	ldr	r3, [pc, #132]	@ (801bd4c <HAL_RCC_OscConfig+0x778>)
 801bcc8:	4013      	ands	r3, r2
 801bcca:	687a      	ldr	r2, [r7, #4]
 801bccc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801bcce:	00d2      	lsls	r2, r2, #3
 801bcd0:	491b      	ldr	r1, [pc, #108]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bcd2:	4313      	orrs	r3, r2
 801bcd4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801bcd6:	4b1a      	ldr	r3, [pc, #104]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bcd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bcda:	f023 020c 	bic.w	r2, r3, #12
 801bcde:	687b      	ldr	r3, [r7, #4]
 801bce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bce2:	4917      	ldr	r1, [pc, #92]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bce4:	4313      	orrs	r3, r2
 801bce6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801bce8:	4b15      	ldr	r3, [pc, #84]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bcea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bcec:	f023 0202 	bic.w	r2, r3, #2
 801bcf0:	687b      	ldr	r3, [r7, #4]
 801bcf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801bcf4:	4912      	ldr	r1, [pc, #72]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bcf6:	4313      	orrs	r3, r2
 801bcf8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801bcfa:	4b11      	ldr	r3, [pc, #68]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bcfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bcfe:	4a10      	ldr	r2, [pc, #64]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bd00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801bd04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801bd06:	4b0e      	ldr	r3, [pc, #56]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bd08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bd0a:	4a0d      	ldr	r2, [pc, #52]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bd0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801bd10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801bd12:	4b0b      	ldr	r3, [pc, #44]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bd14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bd16:	4a0a      	ldr	r2, [pc, #40]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bd18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801bd1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801bd1e:	4b08      	ldr	r3, [pc, #32]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bd20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bd22:	4a07      	ldr	r2, [pc, #28]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bd24:	f043 0301 	orr.w	r3, r3, #1
 801bd28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801bd2a:	4b05      	ldr	r3, [pc, #20]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bd2c:	681b      	ldr	r3, [r3, #0]
 801bd2e:	4a04      	ldr	r2, [pc, #16]	@ (801bd40 <HAL_RCC_OscConfig+0x76c>)
 801bd30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801bd34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bd36:	f7fd f9a7 	bl	8019088 <HAL_GetTick>
 801bd3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801bd3c:	e011      	b.n	801bd62 <HAL_RCC_OscConfig+0x78e>
 801bd3e:	bf00      	nop
 801bd40:	58024400 	.word	0x58024400
 801bd44:	58024800 	.word	0x58024800
 801bd48:	fffffc0c 	.word	0xfffffc0c
 801bd4c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801bd50:	f7fd f99a 	bl	8019088 <HAL_GetTick>
 801bd54:	4602      	mov	r2, r0
 801bd56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd58:	1ad3      	subs	r3, r2, r3
 801bd5a:	2b02      	cmp	r3, #2
 801bd5c:	d901      	bls.n	801bd62 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801bd5e:	2303      	movs	r3, #3
 801bd60:	e08a      	b.n	801be78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801bd62:	4b47      	ldr	r3, [pc, #284]	@ (801be80 <HAL_RCC_OscConfig+0x8ac>)
 801bd64:	681b      	ldr	r3, [r3, #0]
 801bd66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801bd6a:	2b00      	cmp	r3, #0
 801bd6c:	d0f0      	beq.n	801bd50 <HAL_RCC_OscConfig+0x77c>
 801bd6e:	e082      	b.n	801be76 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801bd70:	4b43      	ldr	r3, [pc, #268]	@ (801be80 <HAL_RCC_OscConfig+0x8ac>)
 801bd72:	681b      	ldr	r3, [r3, #0]
 801bd74:	4a42      	ldr	r2, [pc, #264]	@ (801be80 <HAL_RCC_OscConfig+0x8ac>)
 801bd76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801bd7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bd7c:	f7fd f984 	bl	8019088 <HAL_GetTick>
 801bd80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801bd82:	e008      	b.n	801bd96 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801bd84:	f7fd f980 	bl	8019088 <HAL_GetTick>
 801bd88:	4602      	mov	r2, r0
 801bd8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd8c:	1ad3      	subs	r3, r2, r3
 801bd8e:	2b02      	cmp	r3, #2
 801bd90:	d901      	bls.n	801bd96 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 801bd92:	2303      	movs	r3, #3
 801bd94:	e070      	b.n	801be78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801bd96:	4b3a      	ldr	r3, [pc, #232]	@ (801be80 <HAL_RCC_OscConfig+0x8ac>)
 801bd98:	681b      	ldr	r3, [r3, #0]
 801bd9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801bd9e:	2b00      	cmp	r3, #0
 801bda0:	d1f0      	bne.n	801bd84 <HAL_RCC_OscConfig+0x7b0>
 801bda2:	e068      	b.n	801be76 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801bda4:	4b36      	ldr	r3, [pc, #216]	@ (801be80 <HAL_RCC_OscConfig+0x8ac>)
 801bda6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bda8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801bdaa:	4b35      	ldr	r3, [pc, #212]	@ (801be80 <HAL_RCC_OscConfig+0x8ac>)
 801bdac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bdae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801bdb0:	687b      	ldr	r3, [r7, #4]
 801bdb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bdb4:	2b01      	cmp	r3, #1
 801bdb6:	d031      	beq.n	801be1c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801bdb8:	693b      	ldr	r3, [r7, #16]
 801bdba:	f003 0203 	and.w	r2, r3, #3
 801bdbe:	687b      	ldr	r3, [r7, #4]
 801bdc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801bdc2:	429a      	cmp	r2, r3
 801bdc4:	d12a      	bne.n	801be1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801bdc6:	693b      	ldr	r3, [r7, #16]
 801bdc8:	091b      	lsrs	r3, r3, #4
 801bdca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801bdce:	687b      	ldr	r3, [r7, #4]
 801bdd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801bdd2:	429a      	cmp	r2, r3
 801bdd4:	d122      	bne.n	801be1c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801bdd6:	68fb      	ldr	r3, [r7, #12]
 801bdd8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801bddc:	687b      	ldr	r3, [r7, #4]
 801bdde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bde0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801bde2:	429a      	cmp	r2, r3
 801bde4:	d11a      	bne.n	801be1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801bde6:	68fb      	ldr	r3, [r7, #12]
 801bde8:	0a5b      	lsrs	r3, r3, #9
 801bdea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801bdee:	687b      	ldr	r3, [r7, #4]
 801bdf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801bdf2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801bdf4:	429a      	cmp	r2, r3
 801bdf6:	d111      	bne.n	801be1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801bdf8:	68fb      	ldr	r3, [r7, #12]
 801bdfa:	0c1b      	lsrs	r3, r3, #16
 801bdfc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801be00:	687b      	ldr	r3, [r7, #4]
 801be02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801be04:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801be06:	429a      	cmp	r2, r3
 801be08:	d108      	bne.n	801be1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801be0a:	68fb      	ldr	r3, [r7, #12]
 801be0c:	0e1b      	lsrs	r3, r3, #24
 801be0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801be16:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801be18:	429a      	cmp	r2, r3
 801be1a:	d001      	beq.n	801be20 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 801be1c:	2301      	movs	r3, #1
 801be1e:	e02b      	b.n	801be78 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801be20:	4b17      	ldr	r3, [pc, #92]	@ (801be80 <HAL_RCC_OscConfig+0x8ac>)
 801be22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801be24:	08db      	lsrs	r3, r3, #3
 801be26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801be2a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801be2c:	687b      	ldr	r3, [r7, #4]
 801be2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801be30:	693a      	ldr	r2, [r7, #16]
 801be32:	429a      	cmp	r2, r3
 801be34:	d01f      	beq.n	801be76 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801be36:	4b12      	ldr	r3, [pc, #72]	@ (801be80 <HAL_RCC_OscConfig+0x8ac>)
 801be38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801be3a:	4a11      	ldr	r2, [pc, #68]	@ (801be80 <HAL_RCC_OscConfig+0x8ac>)
 801be3c:	f023 0301 	bic.w	r3, r3, #1
 801be40:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801be42:	f7fd f921 	bl	8019088 <HAL_GetTick>
 801be46:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801be48:	bf00      	nop
 801be4a:	f7fd f91d 	bl	8019088 <HAL_GetTick>
 801be4e:	4602      	mov	r2, r0
 801be50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be52:	4293      	cmp	r3, r2
 801be54:	d0f9      	beq.n	801be4a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801be56:	4b0a      	ldr	r3, [pc, #40]	@ (801be80 <HAL_RCC_OscConfig+0x8ac>)
 801be58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801be5a:	4b0a      	ldr	r3, [pc, #40]	@ (801be84 <HAL_RCC_OscConfig+0x8b0>)
 801be5c:	4013      	ands	r3, r2
 801be5e:	687a      	ldr	r2, [r7, #4]
 801be60:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801be62:	00d2      	lsls	r2, r2, #3
 801be64:	4906      	ldr	r1, [pc, #24]	@ (801be80 <HAL_RCC_OscConfig+0x8ac>)
 801be66:	4313      	orrs	r3, r2
 801be68:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801be6a:	4b05      	ldr	r3, [pc, #20]	@ (801be80 <HAL_RCC_OscConfig+0x8ac>)
 801be6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801be6e:	4a04      	ldr	r2, [pc, #16]	@ (801be80 <HAL_RCC_OscConfig+0x8ac>)
 801be70:	f043 0301 	orr.w	r3, r3, #1
 801be74:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801be76:	2300      	movs	r3, #0
}
 801be78:	4618      	mov	r0, r3
 801be7a:	3730      	adds	r7, #48	@ 0x30
 801be7c:	46bd      	mov	sp, r7
 801be7e:	bd80      	pop	{r7, pc}
 801be80:	58024400 	.word	0x58024400
 801be84:	ffff0007 	.word	0xffff0007

0801be88 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801be88:	b580      	push	{r7, lr}
 801be8a:	b086      	sub	sp, #24
 801be8c:	af00      	add	r7, sp, #0
 801be8e:	6078      	str	r0, [r7, #4]
 801be90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801be92:	687b      	ldr	r3, [r7, #4]
 801be94:	2b00      	cmp	r3, #0
 801be96:	d101      	bne.n	801be9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801be98:	2301      	movs	r3, #1
 801be9a:	e19c      	b.n	801c1d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801be9c:	4b8a      	ldr	r3, [pc, #552]	@ (801c0c8 <HAL_RCC_ClockConfig+0x240>)
 801be9e:	681b      	ldr	r3, [r3, #0]
 801bea0:	f003 030f 	and.w	r3, r3, #15
 801bea4:	683a      	ldr	r2, [r7, #0]
 801bea6:	429a      	cmp	r2, r3
 801bea8:	d910      	bls.n	801becc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801beaa:	4b87      	ldr	r3, [pc, #540]	@ (801c0c8 <HAL_RCC_ClockConfig+0x240>)
 801beac:	681b      	ldr	r3, [r3, #0]
 801beae:	f023 020f 	bic.w	r2, r3, #15
 801beb2:	4985      	ldr	r1, [pc, #532]	@ (801c0c8 <HAL_RCC_ClockConfig+0x240>)
 801beb4:	683b      	ldr	r3, [r7, #0]
 801beb6:	4313      	orrs	r3, r2
 801beb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801beba:	4b83      	ldr	r3, [pc, #524]	@ (801c0c8 <HAL_RCC_ClockConfig+0x240>)
 801bebc:	681b      	ldr	r3, [r3, #0]
 801bebe:	f003 030f 	and.w	r3, r3, #15
 801bec2:	683a      	ldr	r2, [r7, #0]
 801bec4:	429a      	cmp	r2, r3
 801bec6:	d001      	beq.n	801becc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801bec8:	2301      	movs	r3, #1
 801beca:	e184      	b.n	801c1d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801becc:	687b      	ldr	r3, [r7, #4]
 801bece:	681b      	ldr	r3, [r3, #0]
 801bed0:	f003 0304 	and.w	r3, r3, #4
 801bed4:	2b00      	cmp	r3, #0
 801bed6:	d010      	beq.n	801befa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801bed8:	687b      	ldr	r3, [r7, #4]
 801beda:	691a      	ldr	r2, [r3, #16]
 801bedc:	4b7b      	ldr	r3, [pc, #492]	@ (801c0cc <HAL_RCC_ClockConfig+0x244>)
 801bede:	699b      	ldr	r3, [r3, #24]
 801bee0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801bee4:	429a      	cmp	r2, r3
 801bee6:	d908      	bls.n	801befa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801bee8:	4b78      	ldr	r3, [pc, #480]	@ (801c0cc <HAL_RCC_ClockConfig+0x244>)
 801beea:	699b      	ldr	r3, [r3, #24]
 801beec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	691b      	ldr	r3, [r3, #16]
 801bef4:	4975      	ldr	r1, [pc, #468]	@ (801c0cc <HAL_RCC_ClockConfig+0x244>)
 801bef6:	4313      	orrs	r3, r2
 801bef8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801befa:	687b      	ldr	r3, [r7, #4]
 801befc:	681b      	ldr	r3, [r3, #0]
 801befe:	f003 0308 	and.w	r3, r3, #8
 801bf02:	2b00      	cmp	r3, #0
 801bf04:	d010      	beq.n	801bf28 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801bf06:	687b      	ldr	r3, [r7, #4]
 801bf08:	695a      	ldr	r2, [r3, #20]
 801bf0a:	4b70      	ldr	r3, [pc, #448]	@ (801c0cc <HAL_RCC_ClockConfig+0x244>)
 801bf0c:	69db      	ldr	r3, [r3, #28]
 801bf0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801bf12:	429a      	cmp	r2, r3
 801bf14:	d908      	bls.n	801bf28 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801bf16:	4b6d      	ldr	r3, [pc, #436]	@ (801c0cc <HAL_RCC_ClockConfig+0x244>)
 801bf18:	69db      	ldr	r3, [r3, #28]
 801bf1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801bf1e:	687b      	ldr	r3, [r7, #4]
 801bf20:	695b      	ldr	r3, [r3, #20]
 801bf22:	496a      	ldr	r1, [pc, #424]	@ (801c0cc <HAL_RCC_ClockConfig+0x244>)
 801bf24:	4313      	orrs	r3, r2
 801bf26:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801bf28:	687b      	ldr	r3, [r7, #4]
 801bf2a:	681b      	ldr	r3, [r3, #0]
 801bf2c:	f003 0310 	and.w	r3, r3, #16
 801bf30:	2b00      	cmp	r3, #0
 801bf32:	d010      	beq.n	801bf56 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801bf34:	687b      	ldr	r3, [r7, #4]
 801bf36:	699a      	ldr	r2, [r3, #24]
 801bf38:	4b64      	ldr	r3, [pc, #400]	@ (801c0cc <HAL_RCC_ClockConfig+0x244>)
 801bf3a:	69db      	ldr	r3, [r3, #28]
 801bf3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801bf40:	429a      	cmp	r2, r3
 801bf42:	d908      	bls.n	801bf56 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801bf44:	4b61      	ldr	r3, [pc, #388]	@ (801c0cc <HAL_RCC_ClockConfig+0x244>)
 801bf46:	69db      	ldr	r3, [r3, #28]
 801bf48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801bf4c:	687b      	ldr	r3, [r7, #4]
 801bf4e:	699b      	ldr	r3, [r3, #24]
 801bf50:	495e      	ldr	r1, [pc, #376]	@ (801c0cc <HAL_RCC_ClockConfig+0x244>)
 801bf52:	4313      	orrs	r3, r2
 801bf54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801bf56:	687b      	ldr	r3, [r7, #4]
 801bf58:	681b      	ldr	r3, [r3, #0]
 801bf5a:	f003 0320 	and.w	r3, r3, #32
 801bf5e:	2b00      	cmp	r3, #0
 801bf60:	d010      	beq.n	801bf84 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801bf62:	687b      	ldr	r3, [r7, #4]
 801bf64:	69da      	ldr	r2, [r3, #28]
 801bf66:	4b59      	ldr	r3, [pc, #356]	@ (801c0cc <HAL_RCC_ClockConfig+0x244>)
 801bf68:	6a1b      	ldr	r3, [r3, #32]
 801bf6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801bf6e:	429a      	cmp	r2, r3
 801bf70:	d908      	bls.n	801bf84 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801bf72:	4b56      	ldr	r3, [pc, #344]	@ (801c0cc <HAL_RCC_ClockConfig+0x244>)
 801bf74:	6a1b      	ldr	r3, [r3, #32]
 801bf76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801bf7a:	687b      	ldr	r3, [r7, #4]
 801bf7c:	69db      	ldr	r3, [r3, #28]
 801bf7e:	4953      	ldr	r1, [pc, #332]	@ (801c0cc <HAL_RCC_ClockConfig+0x244>)
 801bf80:	4313      	orrs	r3, r2
 801bf82:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	681b      	ldr	r3, [r3, #0]
 801bf88:	f003 0302 	and.w	r3, r3, #2
 801bf8c:	2b00      	cmp	r3, #0
 801bf8e:	d010      	beq.n	801bfb2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801bf90:	687b      	ldr	r3, [r7, #4]
 801bf92:	68da      	ldr	r2, [r3, #12]
 801bf94:	4b4d      	ldr	r3, [pc, #308]	@ (801c0cc <HAL_RCC_ClockConfig+0x244>)
 801bf96:	699b      	ldr	r3, [r3, #24]
 801bf98:	f003 030f 	and.w	r3, r3, #15
 801bf9c:	429a      	cmp	r2, r3
 801bf9e:	d908      	bls.n	801bfb2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801bfa0:	4b4a      	ldr	r3, [pc, #296]	@ (801c0cc <HAL_RCC_ClockConfig+0x244>)
 801bfa2:	699b      	ldr	r3, [r3, #24]
 801bfa4:	f023 020f 	bic.w	r2, r3, #15
 801bfa8:	687b      	ldr	r3, [r7, #4]
 801bfaa:	68db      	ldr	r3, [r3, #12]
 801bfac:	4947      	ldr	r1, [pc, #284]	@ (801c0cc <HAL_RCC_ClockConfig+0x244>)
 801bfae:	4313      	orrs	r3, r2
 801bfb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801bfb2:	687b      	ldr	r3, [r7, #4]
 801bfb4:	681b      	ldr	r3, [r3, #0]
 801bfb6:	f003 0301 	and.w	r3, r3, #1
 801bfba:	2b00      	cmp	r3, #0
 801bfbc:	d055      	beq.n	801c06a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801bfbe:	4b43      	ldr	r3, [pc, #268]	@ (801c0cc <HAL_RCC_ClockConfig+0x244>)
 801bfc0:	699b      	ldr	r3, [r3, #24]
 801bfc2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801bfc6:	687b      	ldr	r3, [r7, #4]
 801bfc8:	689b      	ldr	r3, [r3, #8]
 801bfca:	4940      	ldr	r1, [pc, #256]	@ (801c0cc <HAL_RCC_ClockConfig+0x244>)
 801bfcc:	4313      	orrs	r3, r2
 801bfce:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801bfd0:	687b      	ldr	r3, [r7, #4]
 801bfd2:	685b      	ldr	r3, [r3, #4]
 801bfd4:	2b02      	cmp	r3, #2
 801bfd6:	d107      	bne.n	801bfe8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801bfd8:	4b3c      	ldr	r3, [pc, #240]	@ (801c0cc <HAL_RCC_ClockConfig+0x244>)
 801bfda:	681b      	ldr	r3, [r3, #0]
 801bfdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	d121      	bne.n	801c028 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801bfe4:	2301      	movs	r3, #1
 801bfe6:	e0f6      	b.n	801c1d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801bfe8:	687b      	ldr	r3, [r7, #4]
 801bfea:	685b      	ldr	r3, [r3, #4]
 801bfec:	2b03      	cmp	r3, #3
 801bfee:	d107      	bne.n	801c000 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801bff0:	4b36      	ldr	r3, [pc, #216]	@ (801c0cc <HAL_RCC_ClockConfig+0x244>)
 801bff2:	681b      	ldr	r3, [r3, #0]
 801bff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801bff8:	2b00      	cmp	r3, #0
 801bffa:	d115      	bne.n	801c028 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801bffc:	2301      	movs	r3, #1
 801bffe:	e0ea      	b.n	801c1d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801c000:	687b      	ldr	r3, [r7, #4]
 801c002:	685b      	ldr	r3, [r3, #4]
 801c004:	2b01      	cmp	r3, #1
 801c006:	d107      	bne.n	801c018 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801c008:	4b30      	ldr	r3, [pc, #192]	@ (801c0cc <HAL_RCC_ClockConfig+0x244>)
 801c00a:	681b      	ldr	r3, [r3, #0]
 801c00c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c010:	2b00      	cmp	r3, #0
 801c012:	d109      	bne.n	801c028 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801c014:	2301      	movs	r3, #1
 801c016:	e0de      	b.n	801c1d6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c018:	4b2c      	ldr	r3, [pc, #176]	@ (801c0cc <HAL_RCC_ClockConfig+0x244>)
 801c01a:	681b      	ldr	r3, [r3, #0]
 801c01c:	f003 0304 	and.w	r3, r3, #4
 801c020:	2b00      	cmp	r3, #0
 801c022:	d101      	bne.n	801c028 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801c024:	2301      	movs	r3, #1
 801c026:	e0d6      	b.n	801c1d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801c028:	4b28      	ldr	r3, [pc, #160]	@ (801c0cc <HAL_RCC_ClockConfig+0x244>)
 801c02a:	691b      	ldr	r3, [r3, #16]
 801c02c:	f023 0207 	bic.w	r2, r3, #7
 801c030:	687b      	ldr	r3, [r7, #4]
 801c032:	685b      	ldr	r3, [r3, #4]
 801c034:	4925      	ldr	r1, [pc, #148]	@ (801c0cc <HAL_RCC_ClockConfig+0x244>)
 801c036:	4313      	orrs	r3, r2
 801c038:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c03a:	f7fd f825 	bl	8019088 <HAL_GetTick>
 801c03e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c040:	e00a      	b.n	801c058 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801c042:	f7fd f821 	bl	8019088 <HAL_GetTick>
 801c046:	4602      	mov	r2, r0
 801c048:	697b      	ldr	r3, [r7, #20]
 801c04a:	1ad3      	subs	r3, r2, r3
 801c04c:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c050:	4293      	cmp	r3, r2
 801c052:	d901      	bls.n	801c058 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801c054:	2303      	movs	r3, #3
 801c056:	e0be      	b.n	801c1d6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c058:	4b1c      	ldr	r3, [pc, #112]	@ (801c0cc <HAL_RCC_ClockConfig+0x244>)
 801c05a:	691b      	ldr	r3, [r3, #16]
 801c05c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 801c060:	687b      	ldr	r3, [r7, #4]
 801c062:	685b      	ldr	r3, [r3, #4]
 801c064:	00db      	lsls	r3, r3, #3
 801c066:	429a      	cmp	r2, r3
 801c068:	d1eb      	bne.n	801c042 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801c06a:	687b      	ldr	r3, [r7, #4]
 801c06c:	681b      	ldr	r3, [r3, #0]
 801c06e:	f003 0302 	and.w	r3, r3, #2
 801c072:	2b00      	cmp	r3, #0
 801c074:	d010      	beq.n	801c098 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801c076:	687b      	ldr	r3, [r7, #4]
 801c078:	68da      	ldr	r2, [r3, #12]
 801c07a:	4b14      	ldr	r3, [pc, #80]	@ (801c0cc <HAL_RCC_ClockConfig+0x244>)
 801c07c:	699b      	ldr	r3, [r3, #24]
 801c07e:	f003 030f 	and.w	r3, r3, #15
 801c082:	429a      	cmp	r2, r3
 801c084:	d208      	bcs.n	801c098 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801c086:	4b11      	ldr	r3, [pc, #68]	@ (801c0cc <HAL_RCC_ClockConfig+0x244>)
 801c088:	699b      	ldr	r3, [r3, #24]
 801c08a:	f023 020f 	bic.w	r2, r3, #15
 801c08e:	687b      	ldr	r3, [r7, #4]
 801c090:	68db      	ldr	r3, [r3, #12]
 801c092:	490e      	ldr	r1, [pc, #56]	@ (801c0cc <HAL_RCC_ClockConfig+0x244>)
 801c094:	4313      	orrs	r3, r2
 801c096:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801c098:	4b0b      	ldr	r3, [pc, #44]	@ (801c0c8 <HAL_RCC_ClockConfig+0x240>)
 801c09a:	681b      	ldr	r3, [r3, #0]
 801c09c:	f003 030f 	and.w	r3, r3, #15
 801c0a0:	683a      	ldr	r2, [r7, #0]
 801c0a2:	429a      	cmp	r2, r3
 801c0a4:	d214      	bcs.n	801c0d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c0a6:	4b08      	ldr	r3, [pc, #32]	@ (801c0c8 <HAL_RCC_ClockConfig+0x240>)
 801c0a8:	681b      	ldr	r3, [r3, #0]
 801c0aa:	f023 020f 	bic.w	r2, r3, #15
 801c0ae:	4906      	ldr	r1, [pc, #24]	@ (801c0c8 <HAL_RCC_ClockConfig+0x240>)
 801c0b0:	683b      	ldr	r3, [r7, #0]
 801c0b2:	4313      	orrs	r3, r2
 801c0b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c0b6:	4b04      	ldr	r3, [pc, #16]	@ (801c0c8 <HAL_RCC_ClockConfig+0x240>)
 801c0b8:	681b      	ldr	r3, [r3, #0]
 801c0ba:	f003 030f 	and.w	r3, r3, #15
 801c0be:	683a      	ldr	r2, [r7, #0]
 801c0c0:	429a      	cmp	r2, r3
 801c0c2:	d005      	beq.n	801c0d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801c0c4:	2301      	movs	r3, #1
 801c0c6:	e086      	b.n	801c1d6 <HAL_RCC_ClockConfig+0x34e>
 801c0c8:	52002000 	.word	0x52002000
 801c0cc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801c0d0:	687b      	ldr	r3, [r7, #4]
 801c0d2:	681b      	ldr	r3, [r3, #0]
 801c0d4:	f003 0304 	and.w	r3, r3, #4
 801c0d8:	2b00      	cmp	r3, #0
 801c0da:	d010      	beq.n	801c0fe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	691a      	ldr	r2, [r3, #16]
 801c0e0:	4b3f      	ldr	r3, [pc, #252]	@ (801c1e0 <HAL_RCC_ClockConfig+0x358>)
 801c0e2:	699b      	ldr	r3, [r3, #24]
 801c0e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801c0e8:	429a      	cmp	r2, r3
 801c0ea:	d208      	bcs.n	801c0fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801c0ec:	4b3c      	ldr	r3, [pc, #240]	@ (801c1e0 <HAL_RCC_ClockConfig+0x358>)
 801c0ee:	699b      	ldr	r3, [r3, #24]
 801c0f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801c0f4:	687b      	ldr	r3, [r7, #4]
 801c0f6:	691b      	ldr	r3, [r3, #16]
 801c0f8:	4939      	ldr	r1, [pc, #228]	@ (801c1e0 <HAL_RCC_ClockConfig+0x358>)
 801c0fa:	4313      	orrs	r3, r2
 801c0fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c0fe:	687b      	ldr	r3, [r7, #4]
 801c100:	681b      	ldr	r3, [r3, #0]
 801c102:	f003 0308 	and.w	r3, r3, #8
 801c106:	2b00      	cmp	r3, #0
 801c108:	d010      	beq.n	801c12c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801c10a:	687b      	ldr	r3, [r7, #4]
 801c10c:	695a      	ldr	r2, [r3, #20]
 801c10e:	4b34      	ldr	r3, [pc, #208]	@ (801c1e0 <HAL_RCC_ClockConfig+0x358>)
 801c110:	69db      	ldr	r3, [r3, #28]
 801c112:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801c116:	429a      	cmp	r2, r3
 801c118:	d208      	bcs.n	801c12c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801c11a:	4b31      	ldr	r3, [pc, #196]	@ (801c1e0 <HAL_RCC_ClockConfig+0x358>)
 801c11c:	69db      	ldr	r3, [r3, #28]
 801c11e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801c122:	687b      	ldr	r3, [r7, #4]
 801c124:	695b      	ldr	r3, [r3, #20]
 801c126:	492e      	ldr	r1, [pc, #184]	@ (801c1e0 <HAL_RCC_ClockConfig+0x358>)
 801c128:	4313      	orrs	r3, r2
 801c12a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c12c:	687b      	ldr	r3, [r7, #4]
 801c12e:	681b      	ldr	r3, [r3, #0]
 801c130:	f003 0310 	and.w	r3, r3, #16
 801c134:	2b00      	cmp	r3, #0
 801c136:	d010      	beq.n	801c15a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801c138:	687b      	ldr	r3, [r7, #4]
 801c13a:	699a      	ldr	r2, [r3, #24]
 801c13c:	4b28      	ldr	r3, [pc, #160]	@ (801c1e0 <HAL_RCC_ClockConfig+0x358>)
 801c13e:	69db      	ldr	r3, [r3, #28]
 801c140:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801c144:	429a      	cmp	r2, r3
 801c146:	d208      	bcs.n	801c15a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801c148:	4b25      	ldr	r3, [pc, #148]	@ (801c1e0 <HAL_RCC_ClockConfig+0x358>)
 801c14a:	69db      	ldr	r3, [r3, #28]
 801c14c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	699b      	ldr	r3, [r3, #24]
 801c154:	4922      	ldr	r1, [pc, #136]	@ (801c1e0 <HAL_RCC_ClockConfig+0x358>)
 801c156:	4313      	orrs	r3, r2
 801c158:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801c15a:	687b      	ldr	r3, [r7, #4]
 801c15c:	681b      	ldr	r3, [r3, #0]
 801c15e:	f003 0320 	and.w	r3, r3, #32
 801c162:	2b00      	cmp	r3, #0
 801c164:	d010      	beq.n	801c188 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801c166:	687b      	ldr	r3, [r7, #4]
 801c168:	69da      	ldr	r2, [r3, #28]
 801c16a:	4b1d      	ldr	r3, [pc, #116]	@ (801c1e0 <HAL_RCC_ClockConfig+0x358>)
 801c16c:	6a1b      	ldr	r3, [r3, #32]
 801c16e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801c172:	429a      	cmp	r2, r3
 801c174:	d208      	bcs.n	801c188 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801c176:	4b1a      	ldr	r3, [pc, #104]	@ (801c1e0 <HAL_RCC_ClockConfig+0x358>)
 801c178:	6a1b      	ldr	r3, [r3, #32]
 801c17a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801c17e:	687b      	ldr	r3, [r7, #4]
 801c180:	69db      	ldr	r3, [r3, #28]
 801c182:	4917      	ldr	r1, [pc, #92]	@ (801c1e0 <HAL_RCC_ClockConfig+0x358>)
 801c184:	4313      	orrs	r3, r2
 801c186:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801c188:	f000 f834 	bl	801c1f4 <HAL_RCC_GetSysClockFreq>
 801c18c:	4602      	mov	r2, r0
 801c18e:	4b14      	ldr	r3, [pc, #80]	@ (801c1e0 <HAL_RCC_ClockConfig+0x358>)
 801c190:	699b      	ldr	r3, [r3, #24]
 801c192:	0a1b      	lsrs	r3, r3, #8
 801c194:	f003 030f 	and.w	r3, r3, #15
 801c198:	4912      	ldr	r1, [pc, #72]	@ (801c1e4 <HAL_RCC_ClockConfig+0x35c>)
 801c19a:	5ccb      	ldrb	r3, [r1, r3]
 801c19c:	f003 031f 	and.w	r3, r3, #31
 801c1a0:	fa22 f303 	lsr.w	r3, r2, r3
 801c1a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801c1a6:	4b0e      	ldr	r3, [pc, #56]	@ (801c1e0 <HAL_RCC_ClockConfig+0x358>)
 801c1a8:	699b      	ldr	r3, [r3, #24]
 801c1aa:	f003 030f 	and.w	r3, r3, #15
 801c1ae:	4a0d      	ldr	r2, [pc, #52]	@ (801c1e4 <HAL_RCC_ClockConfig+0x35c>)
 801c1b0:	5cd3      	ldrb	r3, [r2, r3]
 801c1b2:	f003 031f 	and.w	r3, r3, #31
 801c1b6:	693a      	ldr	r2, [r7, #16]
 801c1b8:	fa22 f303 	lsr.w	r3, r2, r3
 801c1bc:	4a0a      	ldr	r2, [pc, #40]	@ (801c1e8 <HAL_RCC_ClockConfig+0x360>)
 801c1be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801c1c0:	4a0a      	ldr	r2, [pc, #40]	@ (801c1ec <HAL_RCC_ClockConfig+0x364>)
 801c1c2:	693b      	ldr	r3, [r7, #16]
 801c1c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801c1c6:	4b0a      	ldr	r3, [pc, #40]	@ (801c1f0 <HAL_RCC_ClockConfig+0x368>)
 801c1c8:	681b      	ldr	r3, [r3, #0]
 801c1ca:	4618      	mov	r0, r3
 801c1cc:	f7fc ff12 	bl	8018ff4 <HAL_InitTick>
 801c1d0:	4603      	mov	r3, r0
 801c1d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801c1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 801c1d6:	4618      	mov	r0, r3
 801c1d8:	3718      	adds	r7, #24
 801c1da:	46bd      	mov	sp, r7
 801c1dc:	bd80      	pop	{r7, pc}
 801c1de:	bf00      	nop
 801c1e0:	58024400 	.word	0x58024400
 801c1e4:	08025b7c 	.word	0x08025b7c
 801c1e8:	20000004 	.word	0x20000004
 801c1ec:	20000000 	.word	0x20000000
 801c1f0:	20000020 	.word	0x20000020

0801c1f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801c1f4:	b480      	push	{r7}
 801c1f6:	b089      	sub	sp, #36	@ 0x24
 801c1f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801c1fa:	4bb3      	ldr	r3, [pc, #716]	@ (801c4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c1fc:	691b      	ldr	r3, [r3, #16]
 801c1fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c202:	2b18      	cmp	r3, #24
 801c204:	f200 8155 	bhi.w	801c4b2 <HAL_RCC_GetSysClockFreq+0x2be>
 801c208:	a201      	add	r2, pc, #4	@ (adr r2, 801c210 <HAL_RCC_GetSysClockFreq+0x1c>)
 801c20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c20e:	bf00      	nop
 801c210:	0801c275 	.word	0x0801c275
 801c214:	0801c4b3 	.word	0x0801c4b3
 801c218:	0801c4b3 	.word	0x0801c4b3
 801c21c:	0801c4b3 	.word	0x0801c4b3
 801c220:	0801c4b3 	.word	0x0801c4b3
 801c224:	0801c4b3 	.word	0x0801c4b3
 801c228:	0801c4b3 	.word	0x0801c4b3
 801c22c:	0801c4b3 	.word	0x0801c4b3
 801c230:	0801c29b 	.word	0x0801c29b
 801c234:	0801c4b3 	.word	0x0801c4b3
 801c238:	0801c4b3 	.word	0x0801c4b3
 801c23c:	0801c4b3 	.word	0x0801c4b3
 801c240:	0801c4b3 	.word	0x0801c4b3
 801c244:	0801c4b3 	.word	0x0801c4b3
 801c248:	0801c4b3 	.word	0x0801c4b3
 801c24c:	0801c4b3 	.word	0x0801c4b3
 801c250:	0801c2a1 	.word	0x0801c2a1
 801c254:	0801c4b3 	.word	0x0801c4b3
 801c258:	0801c4b3 	.word	0x0801c4b3
 801c25c:	0801c4b3 	.word	0x0801c4b3
 801c260:	0801c4b3 	.word	0x0801c4b3
 801c264:	0801c4b3 	.word	0x0801c4b3
 801c268:	0801c4b3 	.word	0x0801c4b3
 801c26c:	0801c4b3 	.word	0x0801c4b3
 801c270:	0801c2a7 	.word	0x0801c2a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801c274:	4b94      	ldr	r3, [pc, #592]	@ (801c4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c276:	681b      	ldr	r3, [r3, #0]
 801c278:	f003 0320 	and.w	r3, r3, #32
 801c27c:	2b00      	cmp	r3, #0
 801c27e:	d009      	beq.n	801c294 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801c280:	4b91      	ldr	r3, [pc, #580]	@ (801c4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c282:	681b      	ldr	r3, [r3, #0]
 801c284:	08db      	lsrs	r3, r3, #3
 801c286:	f003 0303 	and.w	r3, r3, #3
 801c28a:	4a90      	ldr	r2, [pc, #576]	@ (801c4cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 801c28c:	fa22 f303 	lsr.w	r3, r2, r3
 801c290:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801c292:	e111      	b.n	801c4b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801c294:	4b8d      	ldr	r3, [pc, #564]	@ (801c4cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 801c296:	61bb      	str	r3, [r7, #24]
      break;
 801c298:	e10e      	b.n	801c4b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801c29a:	4b8d      	ldr	r3, [pc, #564]	@ (801c4d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801c29c:	61bb      	str	r3, [r7, #24]
      break;
 801c29e:	e10b      	b.n	801c4b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801c2a0:	4b8c      	ldr	r3, [pc, #560]	@ (801c4d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801c2a2:	61bb      	str	r3, [r7, #24]
      break;
 801c2a4:	e108      	b.n	801c4b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801c2a6:	4b88      	ldr	r3, [pc, #544]	@ (801c4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c2a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c2aa:	f003 0303 	and.w	r3, r3, #3
 801c2ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801c2b0:	4b85      	ldr	r3, [pc, #532]	@ (801c4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c2b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c2b4:	091b      	lsrs	r3, r3, #4
 801c2b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c2ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801c2bc:	4b82      	ldr	r3, [pc, #520]	@ (801c4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c2be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c2c0:	f003 0301 	and.w	r3, r3, #1
 801c2c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801c2c6:	4b80      	ldr	r3, [pc, #512]	@ (801c4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c2c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c2ca:	08db      	lsrs	r3, r3, #3
 801c2cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c2d0:	68fa      	ldr	r2, [r7, #12]
 801c2d2:	fb02 f303 	mul.w	r3, r2, r3
 801c2d6:	ee07 3a90 	vmov	s15, r3
 801c2da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c2de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801c2e2:	693b      	ldr	r3, [r7, #16]
 801c2e4:	2b00      	cmp	r3, #0
 801c2e6:	f000 80e1 	beq.w	801c4ac <HAL_RCC_GetSysClockFreq+0x2b8>
 801c2ea:	697b      	ldr	r3, [r7, #20]
 801c2ec:	2b02      	cmp	r3, #2
 801c2ee:	f000 8083 	beq.w	801c3f8 <HAL_RCC_GetSysClockFreq+0x204>
 801c2f2:	697b      	ldr	r3, [r7, #20]
 801c2f4:	2b02      	cmp	r3, #2
 801c2f6:	f200 80a1 	bhi.w	801c43c <HAL_RCC_GetSysClockFreq+0x248>
 801c2fa:	697b      	ldr	r3, [r7, #20]
 801c2fc:	2b00      	cmp	r3, #0
 801c2fe:	d003      	beq.n	801c308 <HAL_RCC_GetSysClockFreq+0x114>
 801c300:	697b      	ldr	r3, [r7, #20]
 801c302:	2b01      	cmp	r3, #1
 801c304:	d056      	beq.n	801c3b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 801c306:	e099      	b.n	801c43c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801c308:	4b6f      	ldr	r3, [pc, #444]	@ (801c4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c30a:	681b      	ldr	r3, [r3, #0]
 801c30c:	f003 0320 	and.w	r3, r3, #32
 801c310:	2b00      	cmp	r3, #0
 801c312:	d02d      	beq.n	801c370 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801c314:	4b6c      	ldr	r3, [pc, #432]	@ (801c4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c316:	681b      	ldr	r3, [r3, #0]
 801c318:	08db      	lsrs	r3, r3, #3
 801c31a:	f003 0303 	and.w	r3, r3, #3
 801c31e:	4a6b      	ldr	r2, [pc, #428]	@ (801c4cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 801c320:	fa22 f303 	lsr.w	r3, r2, r3
 801c324:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c326:	687b      	ldr	r3, [r7, #4]
 801c328:	ee07 3a90 	vmov	s15, r3
 801c32c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c330:	693b      	ldr	r3, [r7, #16]
 801c332:	ee07 3a90 	vmov	s15, r3
 801c336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c33a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c33e:	4b62      	ldr	r3, [pc, #392]	@ (801c4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c346:	ee07 3a90 	vmov	s15, r3
 801c34a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c34e:	ed97 6a02 	vldr	s12, [r7, #8]
 801c352:	eddf 5a61 	vldr	s11, [pc, #388]	@ 801c4d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 801c356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c35a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c35e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c366:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c36a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801c36e:	e087      	b.n	801c480 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c370:	693b      	ldr	r3, [r7, #16]
 801c372:	ee07 3a90 	vmov	s15, r3
 801c376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c37a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 801c4dc <HAL_RCC_GetSysClockFreq+0x2e8>
 801c37e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c382:	4b51      	ldr	r3, [pc, #324]	@ (801c4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c38a:	ee07 3a90 	vmov	s15, r3
 801c38e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c392:	ed97 6a02 	vldr	s12, [r7, #8]
 801c396:	eddf 5a50 	vldr	s11, [pc, #320]	@ 801c4d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 801c39a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c39e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c3a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c3a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c3aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c3ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801c3b2:	e065      	b.n	801c480 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c3b4:	693b      	ldr	r3, [r7, #16]
 801c3b6:	ee07 3a90 	vmov	s15, r3
 801c3ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c3be:	eddf 6a48 	vldr	s13, [pc, #288]	@ 801c4e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 801c3c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c3c6:	4b40      	ldr	r3, [pc, #256]	@ (801c4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c3c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c3ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c3ce:	ee07 3a90 	vmov	s15, r3
 801c3d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c3d6:	ed97 6a02 	vldr	s12, [r7, #8]
 801c3da:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801c4d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 801c3de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c3e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c3e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c3ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c3ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c3f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801c3f6:	e043      	b.n	801c480 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c3f8:	693b      	ldr	r3, [r7, #16]
 801c3fa:	ee07 3a90 	vmov	s15, r3
 801c3fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c402:	eddf 6a38 	vldr	s13, [pc, #224]	@ 801c4e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 801c406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c40a:	4b2f      	ldr	r3, [pc, #188]	@ (801c4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c40c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c40e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c412:	ee07 3a90 	vmov	s15, r3
 801c416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c41a:	ed97 6a02 	vldr	s12, [r7, #8]
 801c41e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801c4d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 801c422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c42a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c42e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c432:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c436:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801c43a:	e021      	b.n	801c480 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c43c:	693b      	ldr	r3, [r7, #16]
 801c43e:	ee07 3a90 	vmov	s15, r3
 801c442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c446:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801c4e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 801c44a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c44e:	4b1e      	ldr	r3, [pc, #120]	@ (801c4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c456:	ee07 3a90 	vmov	s15, r3
 801c45a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c45e:	ed97 6a02 	vldr	s12, [r7, #8]
 801c462:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 801c4d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 801c466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c46a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c46e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c476:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c47a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801c47e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801c480:	4b11      	ldr	r3, [pc, #68]	@ (801c4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c484:	0a5b      	lsrs	r3, r3, #9
 801c486:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c48a:	3301      	adds	r3, #1
 801c48c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801c48e:	683b      	ldr	r3, [r7, #0]
 801c490:	ee07 3a90 	vmov	s15, r3
 801c494:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801c498:	edd7 6a07 	vldr	s13, [r7, #28]
 801c49c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801c4a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c4a4:	ee17 3a90 	vmov	r3, s15
 801c4a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801c4aa:	e005      	b.n	801c4b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801c4ac:	2300      	movs	r3, #0
 801c4ae:	61bb      	str	r3, [r7, #24]
      break;
 801c4b0:	e002      	b.n	801c4b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801c4b2:	4b07      	ldr	r3, [pc, #28]	@ (801c4d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801c4b4:	61bb      	str	r3, [r7, #24]
      break;
 801c4b6:	bf00      	nop
  }

  return sysclockfreq;
 801c4b8:	69bb      	ldr	r3, [r7, #24]
}
 801c4ba:	4618      	mov	r0, r3
 801c4bc:	3724      	adds	r7, #36	@ 0x24
 801c4be:	46bd      	mov	sp, r7
 801c4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4c4:	4770      	bx	lr
 801c4c6:	bf00      	nop
 801c4c8:	58024400 	.word	0x58024400
 801c4cc:	03d09000 	.word	0x03d09000
 801c4d0:	003d0900 	.word	0x003d0900
 801c4d4:	017d7840 	.word	0x017d7840
 801c4d8:	46000000 	.word	0x46000000
 801c4dc:	4c742400 	.word	0x4c742400
 801c4e0:	4a742400 	.word	0x4a742400
 801c4e4:	4bbebc20 	.word	0x4bbebc20

0801c4e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801c4e8:	b580      	push	{r7, lr}
 801c4ea:	b082      	sub	sp, #8
 801c4ec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801c4ee:	f7ff fe81 	bl	801c1f4 <HAL_RCC_GetSysClockFreq>
 801c4f2:	4602      	mov	r2, r0
 801c4f4:	4b10      	ldr	r3, [pc, #64]	@ (801c538 <HAL_RCC_GetHCLKFreq+0x50>)
 801c4f6:	699b      	ldr	r3, [r3, #24]
 801c4f8:	0a1b      	lsrs	r3, r3, #8
 801c4fa:	f003 030f 	and.w	r3, r3, #15
 801c4fe:	490f      	ldr	r1, [pc, #60]	@ (801c53c <HAL_RCC_GetHCLKFreq+0x54>)
 801c500:	5ccb      	ldrb	r3, [r1, r3]
 801c502:	f003 031f 	and.w	r3, r3, #31
 801c506:	fa22 f303 	lsr.w	r3, r2, r3
 801c50a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801c50c:	4b0a      	ldr	r3, [pc, #40]	@ (801c538 <HAL_RCC_GetHCLKFreq+0x50>)
 801c50e:	699b      	ldr	r3, [r3, #24]
 801c510:	f003 030f 	and.w	r3, r3, #15
 801c514:	4a09      	ldr	r2, [pc, #36]	@ (801c53c <HAL_RCC_GetHCLKFreq+0x54>)
 801c516:	5cd3      	ldrb	r3, [r2, r3]
 801c518:	f003 031f 	and.w	r3, r3, #31
 801c51c:	687a      	ldr	r2, [r7, #4]
 801c51e:	fa22 f303 	lsr.w	r3, r2, r3
 801c522:	4a07      	ldr	r2, [pc, #28]	@ (801c540 <HAL_RCC_GetHCLKFreq+0x58>)
 801c524:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801c526:	4a07      	ldr	r2, [pc, #28]	@ (801c544 <HAL_RCC_GetHCLKFreq+0x5c>)
 801c528:	687b      	ldr	r3, [r7, #4]
 801c52a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801c52c:	4b04      	ldr	r3, [pc, #16]	@ (801c540 <HAL_RCC_GetHCLKFreq+0x58>)
 801c52e:	681b      	ldr	r3, [r3, #0]
}
 801c530:	4618      	mov	r0, r3
 801c532:	3708      	adds	r7, #8
 801c534:	46bd      	mov	sp, r7
 801c536:	bd80      	pop	{r7, pc}
 801c538:	58024400 	.word	0x58024400
 801c53c:	08025b7c 	.word	0x08025b7c
 801c540:	20000004 	.word	0x20000004
 801c544:	20000000 	.word	0x20000000

0801c548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801c548:	b580      	push	{r7, lr}
 801c54a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801c54c:	f7ff ffcc 	bl	801c4e8 <HAL_RCC_GetHCLKFreq>
 801c550:	4602      	mov	r2, r0
 801c552:	4b06      	ldr	r3, [pc, #24]	@ (801c56c <HAL_RCC_GetPCLK1Freq+0x24>)
 801c554:	69db      	ldr	r3, [r3, #28]
 801c556:	091b      	lsrs	r3, r3, #4
 801c558:	f003 0307 	and.w	r3, r3, #7
 801c55c:	4904      	ldr	r1, [pc, #16]	@ (801c570 <HAL_RCC_GetPCLK1Freq+0x28>)
 801c55e:	5ccb      	ldrb	r3, [r1, r3]
 801c560:	f003 031f 	and.w	r3, r3, #31
 801c564:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801c568:	4618      	mov	r0, r3
 801c56a:	bd80      	pop	{r7, pc}
 801c56c:	58024400 	.word	0x58024400
 801c570:	08025b7c 	.word	0x08025b7c

0801c574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801c574:	b580      	push	{r7, lr}
 801c576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801c578:	f7ff ffb6 	bl	801c4e8 <HAL_RCC_GetHCLKFreq>
 801c57c:	4602      	mov	r2, r0
 801c57e:	4b06      	ldr	r3, [pc, #24]	@ (801c598 <HAL_RCC_GetPCLK2Freq+0x24>)
 801c580:	69db      	ldr	r3, [r3, #28]
 801c582:	0a1b      	lsrs	r3, r3, #8
 801c584:	f003 0307 	and.w	r3, r3, #7
 801c588:	4904      	ldr	r1, [pc, #16]	@ (801c59c <HAL_RCC_GetPCLK2Freq+0x28>)
 801c58a:	5ccb      	ldrb	r3, [r1, r3]
 801c58c:	f003 031f 	and.w	r3, r3, #31
 801c590:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801c594:	4618      	mov	r0, r3
 801c596:	bd80      	pop	{r7, pc}
 801c598:	58024400 	.word	0x58024400
 801c59c:	08025b7c 	.word	0x08025b7c

0801c5a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801c5a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801c5a4:	b0ca      	sub	sp, #296	@ 0x128
 801c5a6:	af00      	add	r7, sp, #0
 801c5a8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801c5ac:	2300      	movs	r3, #0
 801c5ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801c5b2:	2300      	movs	r3, #0
 801c5b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801c5b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5c0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 801c5c4:	2500      	movs	r5, #0
 801c5c6:	ea54 0305 	orrs.w	r3, r4, r5
 801c5ca:	d049      	beq.n	801c660 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801c5cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c5d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801c5d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801c5d6:	d02f      	beq.n	801c638 <HAL_RCCEx_PeriphCLKConfig+0x98>
 801c5d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801c5dc:	d828      	bhi.n	801c630 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801c5de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801c5e2:	d01a      	beq.n	801c61a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801c5e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801c5e8:	d822      	bhi.n	801c630 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801c5ea:	2b00      	cmp	r3, #0
 801c5ec:	d003      	beq.n	801c5f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 801c5ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801c5f2:	d007      	beq.n	801c604 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801c5f4:	e01c      	b.n	801c630 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c5f6:	4bb8      	ldr	r3, [pc, #736]	@ (801c8d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801c5f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c5fa:	4ab7      	ldr	r2, [pc, #732]	@ (801c8d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801c5fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c600:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801c602:	e01a      	b.n	801c63a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801c604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c608:	3308      	adds	r3, #8
 801c60a:	2102      	movs	r1, #2
 801c60c:	4618      	mov	r0, r3
 801c60e:	f001 fc8f 	bl	801df30 <RCCEx_PLL2_Config>
 801c612:	4603      	mov	r3, r0
 801c614:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801c618:	e00f      	b.n	801c63a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801c61a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c61e:	3328      	adds	r3, #40	@ 0x28
 801c620:	2102      	movs	r1, #2
 801c622:	4618      	mov	r0, r3
 801c624:	f001 fd36 	bl	801e094 <RCCEx_PLL3_Config>
 801c628:	4603      	mov	r3, r0
 801c62a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801c62e:	e004      	b.n	801c63a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c630:	2301      	movs	r3, #1
 801c632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801c636:	e000      	b.n	801c63a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801c638:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c63a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c63e:	2b00      	cmp	r3, #0
 801c640:	d10a      	bne.n	801c658 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801c642:	4ba5      	ldr	r3, [pc, #660]	@ (801c8d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801c644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c646:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801c64a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c64e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801c650:	4aa1      	ldr	r2, [pc, #644]	@ (801c8d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801c652:	430b      	orrs	r3, r1
 801c654:	6513      	str	r3, [r2, #80]	@ 0x50
 801c656:	e003      	b.n	801c660 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c658:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c65c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801c660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c664:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c668:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 801c66c:	f04f 0900 	mov.w	r9, #0
 801c670:	ea58 0309 	orrs.w	r3, r8, r9
 801c674:	d047      	beq.n	801c706 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801c676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c67a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c67c:	2b04      	cmp	r3, #4
 801c67e:	d82a      	bhi.n	801c6d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 801c680:	a201      	add	r2, pc, #4	@ (adr r2, 801c688 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801c682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c686:	bf00      	nop
 801c688:	0801c69d 	.word	0x0801c69d
 801c68c:	0801c6ab 	.word	0x0801c6ab
 801c690:	0801c6c1 	.word	0x0801c6c1
 801c694:	0801c6df 	.word	0x0801c6df
 801c698:	0801c6df 	.word	0x0801c6df
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c69c:	4b8e      	ldr	r3, [pc, #568]	@ (801c8d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801c69e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c6a0:	4a8d      	ldr	r2, [pc, #564]	@ (801c8d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801c6a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c6a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c6a8:	e01a      	b.n	801c6e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c6aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c6ae:	3308      	adds	r3, #8
 801c6b0:	2100      	movs	r1, #0
 801c6b2:	4618      	mov	r0, r3
 801c6b4:	f001 fc3c 	bl	801df30 <RCCEx_PLL2_Config>
 801c6b8:	4603      	mov	r3, r0
 801c6ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c6be:	e00f      	b.n	801c6e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801c6c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c6c4:	3328      	adds	r3, #40	@ 0x28
 801c6c6:	2100      	movs	r1, #0
 801c6c8:	4618      	mov	r0, r3
 801c6ca:	f001 fce3 	bl	801e094 <RCCEx_PLL3_Config>
 801c6ce:	4603      	mov	r3, r0
 801c6d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c6d4:	e004      	b.n	801c6e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c6d6:	2301      	movs	r3, #1
 801c6d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801c6dc:	e000      	b.n	801c6e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801c6de:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c6e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c6e4:	2b00      	cmp	r3, #0
 801c6e6:	d10a      	bne.n	801c6fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801c6e8:	4b7b      	ldr	r3, [pc, #492]	@ (801c8d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801c6ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c6ec:	f023 0107 	bic.w	r1, r3, #7
 801c6f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c6f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c6f6:	4a78      	ldr	r2, [pc, #480]	@ (801c8d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801c6f8:	430b      	orrs	r3, r1
 801c6fa:	6513      	str	r3, [r2, #80]	@ 0x50
 801c6fc:	e003      	b.n	801c706 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c6fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c702:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801c706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c70e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 801c712:	f04f 0b00 	mov.w	fp, #0
 801c716:	ea5a 030b 	orrs.w	r3, sl, fp
 801c71a:	d04c      	beq.n	801c7b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 801c71c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c722:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c726:	d030      	beq.n	801c78a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 801c728:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c72c:	d829      	bhi.n	801c782 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801c72e:	2bc0      	cmp	r3, #192	@ 0xc0
 801c730:	d02d      	beq.n	801c78e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801c732:	2bc0      	cmp	r3, #192	@ 0xc0
 801c734:	d825      	bhi.n	801c782 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801c736:	2b80      	cmp	r3, #128	@ 0x80
 801c738:	d018      	beq.n	801c76c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801c73a:	2b80      	cmp	r3, #128	@ 0x80
 801c73c:	d821      	bhi.n	801c782 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801c73e:	2b00      	cmp	r3, #0
 801c740:	d002      	beq.n	801c748 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801c742:	2b40      	cmp	r3, #64	@ 0x40
 801c744:	d007      	beq.n	801c756 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 801c746:	e01c      	b.n	801c782 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c748:	4b63      	ldr	r3, [pc, #396]	@ (801c8d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801c74a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c74c:	4a62      	ldr	r2, [pc, #392]	@ (801c8d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801c74e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c752:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801c754:	e01c      	b.n	801c790 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c75a:	3308      	adds	r3, #8
 801c75c:	2100      	movs	r1, #0
 801c75e:	4618      	mov	r0, r3
 801c760:	f001 fbe6 	bl	801df30 <RCCEx_PLL2_Config>
 801c764:	4603      	mov	r3, r0
 801c766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801c76a:	e011      	b.n	801c790 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801c76c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c770:	3328      	adds	r3, #40	@ 0x28
 801c772:	2100      	movs	r1, #0
 801c774:	4618      	mov	r0, r3
 801c776:	f001 fc8d 	bl	801e094 <RCCEx_PLL3_Config>
 801c77a:	4603      	mov	r3, r0
 801c77c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801c780:	e006      	b.n	801c790 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c782:	2301      	movs	r3, #1
 801c784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801c788:	e002      	b.n	801c790 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801c78a:	bf00      	nop
 801c78c:	e000      	b.n	801c790 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801c78e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c790:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c794:	2b00      	cmp	r3, #0
 801c796:	d10a      	bne.n	801c7ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801c798:	4b4f      	ldr	r3, [pc, #316]	@ (801c8d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801c79a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c79c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 801c7a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c7a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c7a6:	4a4c      	ldr	r2, [pc, #304]	@ (801c8d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801c7a8:	430b      	orrs	r3, r1
 801c7aa:	6513      	str	r3, [r2, #80]	@ 0x50
 801c7ac:	e003      	b.n	801c7b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c7ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c7b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801c7b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7be:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 801c7c2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801c7c6:	2300      	movs	r3, #0
 801c7c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 801c7cc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 801c7d0:	460b      	mov	r3, r1
 801c7d2:	4313      	orrs	r3, r2
 801c7d4:	d053      	beq.n	801c87e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801c7d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c7da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801c7de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801c7e2:	d035      	beq.n	801c850 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801c7e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801c7e8:	d82e      	bhi.n	801c848 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801c7ea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801c7ee:	d031      	beq.n	801c854 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801c7f0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801c7f4:	d828      	bhi.n	801c848 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801c7f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801c7fa:	d01a      	beq.n	801c832 <HAL_RCCEx_PeriphCLKConfig+0x292>
 801c7fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801c800:	d822      	bhi.n	801c848 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801c802:	2b00      	cmp	r3, #0
 801c804:	d003      	beq.n	801c80e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 801c806:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801c80a:	d007      	beq.n	801c81c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 801c80c:	e01c      	b.n	801c848 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c80e:	4b32      	ldr	r3, [pc, #200]	@ (801c8d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801c810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c812:	4a31      	ldr	r2, [pc, #196]	@ (801c8d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801c814:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c818:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c81a:	e01c      	b.n	801c856 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c81c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c820:	3308      	adds	r3, #8
 801c822:	2100      	movs	r1, #0
 801c824:	4618      	mov	r0, r3
 801c826:	f001 fb83 	bl	801df30 <RCCEx_PLL2_Config>
 801c82a:	4603      	mov	r3, r0
 801c82c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801c830:	e011      	b.n	801c856 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801c832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c836:	3328      	adds	r3, #40	@ 0x28
 801c838:	2100      	movs	r1, #0
 801c83a:	4618      	mov	r0, r3
 801c83c:	f001 fc2a 	bl	801e094 <RCCEx_PLL3_Config>
 801c840:	4603      	mov	r3, r0
 801c842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c846:	e006      	b.n	801c856 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801c848:	2301      	movs	r3, #1
 801c84a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801c84e:	e002      	b.n	801c856 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801c850:	bf00      	nop
 801c852:	e000      	b.n	801c856 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801c854:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c856:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c85a:	2b00      	cmp	r3, #0
 801c85c:	d10b      	bne.n	801c876 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801c85e:	4b1e      	ldr	r3, [pc, #120]	@ (801c8d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801c860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c862:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801c866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c86a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801c86e:	4a1a      	ldr	r2, [pc, #104]	@ (801c8d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801c870:	430b      	orrs	r3, r1
 801c872:	6593      	str	r3, [r2, #88]	@ 0x58
 801c874:	e003      	b.n	801c87e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c87a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801c87e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c882:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c886:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801c88a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801c88e:	2300      	movs	r3, #0
 801c890:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801c894:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 801c898:	460b      	mov	r3, r1
 801c89a:	4313      	orrs	r3, r2
 801c89c:	d056      	beq.n	801c94c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801c89e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c8a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801c8a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801c8aa:	d038      	beq.n	801c91e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801c8ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801c8b0:	d831      	bhi.n	801c916 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801c8b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801c8b6:	d034      	beq.n	801c922 <HAL_RCCEx_PeriphCLKConfig+0x382>
 801c8b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801c8bc:	d82b      	bhi.n	801c916 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801c8be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801c8c2:	d01d      	beq.n	801c900 <HAL_RCCEx_PeriphCLKConfig+0x360>
 801c8c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801c8c8:	d825      	bhi.n	801c916 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801c8ca:	2b00      	cmp	r3, #0
 801c8cc:	d006      	beq.n	801c8dc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801c8ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801c8d2:	d00a      	beq.n	801c8ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801c8d4:	e01f      	b.n	801c916 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801c8d6:	bf00      	nop
 801c8d8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c8dc:	4ba2      	ldr	r3, [pc, #648]	@ (801cb68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801c8de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c8e0:	4aa1      	ldr	r2, [pc, #644]	@ (801cb68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801c8e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c8e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c8e8:	e01c      	b.n	801c924 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c8ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c8ee:	3308      	adds	r3, #8
 801c8f0:	2100      	movs	r1, #0
 801c8f2:	4618      	mov	r0, r3
 801c8f4:	f001 fb1c 	bl	801df30 <RCCEx_PLL2_Config>
 801c8f8:	4603      	mov	r3, r0
 801c8fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801c8fe:	e011      	b.n	801c924 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801c900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c904:	3328      	adds	r3, #40	@ 0x28
 801c906:	2100      	movs	r1, #0
 801c908:	4618      	mov	r0, r3
 801c90a:	f001 fbc3 	bl	801e094 <RCCEx_PLL3_Config>
 801c90e:	4603      	mov	r3, r0
 801c910:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c914:	e006      	b.n	801c924 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801c916:	2301      	movs	r3, #1
 801c918:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801c91c:	e002      	b.n	801c924 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801c91e:	bf00      	nop
 801c920:	e000      	b.n	801c924 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801c922:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c924:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c928:	2b00      	cmp	r3, #0
 801c92a:	d10b      	bne.n	801c944 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801c92c:	4b8e      	ldr	r3, [pc, #568]	@ (801cb68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801c92e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c930:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801c934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c938:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801c93c:	4a8a      	ldr	r2, [pc, #552]	@ (801cb68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801c93e:	430b      	orrs	r3, r1
 801c940:	6593      	str	r3, [r2, #88]	@ 0x58
 801c942:	e003      	b.n	801c94c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c944:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c948:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801c94c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c950:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c954:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801c958:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801c95c:	2300      	movs	r3, #0
 801c95e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801c962:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801c966:	460b      	mov	r3, r1
 801c968:	4313      	orrs	r3, r2
 801c96a:	d03a      	beq.n	801c9e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 801c96c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c972:	2b30      	cmp	r3, #48	@ 0x30
 801c974:	d01f      	beq.n	801c9b6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 801c976:	2b30      	cmp	r3, #48	@ 0x30
 801c978:	d819      	bhi.n	801c9ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801c97a:	2b20      	cmp	r3, #32
 801c97c:	d00c      	beq.n	801c998 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801c97e:	2b20      	cmp	r3, #32
 801c980:	d815      	bhi.n	801c9ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801c982:	2b00      	cmp	r3, #0
 801c984:	d019      	beq.n	801c9ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801c986:	2b10      	cmp	r3, #16
 801c988:	d111      	bne.n	801c9ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c98a:	4b77      	ldr	r3, [pc, #476]	@ (801cb68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801c98c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c98e:	4a76      	ldr	r2, [pc, #472]	@ (801cb68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801c990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c994:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801c996:	e011      	b.n	801c9bc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801c998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c99c:	3308      	adds	r3, #8
 801c99e:	2102      	movs	r1, #2
 801c9a0:	4618      	mov	r0, r3
 801c9a2:	f001 fac5 	bl	801df30 <RCCEx_PLL2_Config>
 801c9a6:	4603      	mov	r3, r0
 801c9a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801c9ac:	e006      	b.n	801c9bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801c9ae:	2301      	movs	r3, #1
 801c9b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801c9b4:	e002      	b.n	801c9bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801c9b6:	bf00      	nop
 801c9b8:	e000      	b.n	801c9bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801c9ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c9bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c9c0:	2b00      	cmp	r3, #0
 801c9c2:	d10a      	bne.n	801c9da <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801c9c4:	4b68      	ldr	r3, [pc, #416]	@ (801cb68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801c9c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c9c8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801c9cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c9d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c9d2:	4a65      	ldr	r2, [pc, #404]	@ (801cb68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801c9d4:	430b      	orrs	r3, r1
 801c9d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801c9d8:	e003      	b.n	801c9e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c9da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c9de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801c9e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9ea:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801c9ee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801c9f2:	2300      	movs	r3, #0
 801c9f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801c9f8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801c9fc:	460b      	mov	r3, r1
 801c9fe:	4313      	orrs	r3, r2
 801ca00:	d051      	beq.n	801caa6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801ca02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ca06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ca08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801ca0c:	d035      	beq.n	801ca7a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801ca0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801ca12:	d82e      	bhi.n	801ca72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801ca14:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801ca18:	d031      	beq.n	801ca7e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801ca1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801ca1e:	d828      	bhi.n	801ca72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801ca20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ca24:	d01a      	beq.n	801ca5c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801ca26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ca2a:	d822      	bhi.n	801ca72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801ca2c:	2b00      	cmp	r3, #0
 801ca2e:	d003      	beq.n	801ca38 <HAL_RCCEx_PeriphCLKConfig+0x498>
 801ca30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ca34:	d007      	beq.n	801ca46 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801ca36:	e01c      	b.n	801ca72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ca38:	4b4b      	ldr	r3, [pc, #300]	@ (801cb68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801ca3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ca3c:	4a4a      	ldr	r2, [pc, #296]	@ (801cb68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801ca3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801ca42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801ca44:	e01c      	b.n	801ca80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801ca46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ca4a:	3308      	adds	r3, #8
 801ca4c:	2100      	movs	r1, #0
 801ca4e:	4618      	mov	r0, r3
 801ca50:	f001 fa6e 	bl	801df30 <RCCEx_PLL2_Config>
 801ca54:	4603      	mov	r3, r0
 801ca56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801ca5a:	e011      	b.n	801ca80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801ca5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ca60:	3328      	adds	r3, #40	@ 0x28
 801ca62:	2100      	movs	r1, #0
 801ca64:	4618      	mov	r0, r3
 801ca66:	f001 fb15 	bl	801e094 <RCCEx_PLL3_Config>
 801ca6a:	4603      	mov	r3, r0
 801ca6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801ca70:	e006      	b.n	801ca80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ca72:	2301      	movs	r3, #1
 801ca74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ca78:	e002      	b.n	801ca80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801ca7a:	bf00      	nop
 801ca7c:	e000      	b.n	801ca80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801ca7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ca80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ca84:	2b00      	cmp	r3, #0
 801ca86:	d10a      	bne.n	801ca9e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801ca88:	4b37      	ldr	r3, [pc, #220]	@ (801cb68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801ca8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ca8c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801ca90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ca94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ca96:	4a34      	ldr	r2, [pc, #208]	@ (801cb68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801ca98:	430b      	orrs	r3, r1
 801ca9a:	6513      	str	r3, [r2, #80]	@ 0x50
 801ca9c:	e003      	b.n	801caa6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ca9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801caa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801caa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801caaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801caae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801cab2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801cab6:	2300      	movs	r3, #0
 801cab8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801cabc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 801cac0:	460b      	mov	r3, r1
 801cac2:	4313      	orrs	r3, r2
 801cac4:	d056      	beq.n	801cb74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801cac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801caca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801cacc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801cad0:	d033      	beq.n	801cb3a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 801cad2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801cad6:	d82c      	bhi.n	801cb32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801cad8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801cadc:	d02f      	beq.n	801cb3e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801cade:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801cae2:	d826      	bhi.n	801cb32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801cae4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801cae8:	d02b      	beq.n	801cb42 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 801caea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801caee:	d820      	bhi.n	801cb32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801caf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801caf4:	d012      	beq.n	801cb1c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 801caf6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801cafa:	d81a      	bhi.n	801cb32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801cafc:	2b00      	cmp	r3, #0
 801cafe:	d022      	beq.n	801cb46 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 801cb00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801cb04:	d115      	bne.n	801cb32 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801cb06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cb0a:	3308      	adds	r3, #8
 801cb0c:	2101      	movs	r1, #1
 801cb0e:	4618      	mov	r0, r3
 801cb10:	f001 fa0e 	bl	801df30 <RCCEx_PLL2_Config>
 801cb14:	4603      	mov	r3, r0
 801cb16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801cb1a:	e015      	b.n	801cb48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801cb1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cb20:	3328      	adds	r3, #40	@ 0x28
 801cb22:	2101      	movs	r1, #1
 801cb24:	4618      	mov	r0, r3
 801cb26:	f001 fab5 	bl	801e094 <RCCEx_PLL3_Config>
 801cb2a:	4603      	mov	r3, r0
 801cb2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801cb30:	e00a      	b.n	801cb48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cb32:	2301      	movs	r3, #1
 801cb34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801cb38:	e006      	b.n	801cb48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801cb3a:	bf00      	nop
 801cb3c:	e004      	b.n	801cb48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801cb3e:	bf00      	nop
 801cb40:	e002      	b.n	801cb48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801cb42:	bf00      	nop
 801cb44:	e000      	b.n	801cb48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801cb46:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cb48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cb4c:	2b00      	cmp	r3, #0
 801cb4e:	d10d      	bne.n	801cb6c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801cb50:	4b05      	ldr	r3, [pc, #20]	@ (801cb68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801cb52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801cb54:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801cb58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cb5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801cb5e:	4a02      	ldr	r2, [pc, #8]	@ (801cb68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801cb60:	430b      	orrs	r3, r1
 801cb62:	6513      	str	r3, [r2, #80]	@ 0x50
 801cb64:	e006      	b.n	801cb74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801cb66:	bf00      	nop
 801cb68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cb6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cb70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801cb74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb7c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 801cb80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801cb84:	2300      	movs	r3, #0
 801cb86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801cb8a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801cb8e:	460b      	mov	r3, r1
 801cb90:	4313      	orrs	r3, r2
 801cb92:	d055      	beq.n	801cc40 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801cb94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cb98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801cb9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801cba0:	d033      	beq.n	801cc0a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 801cba2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801cba6:	d82c      	bhi.n	801cc02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801cba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801cbac:	d02f      	beq.n	801cc0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 801cbae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801cbb2:	d826      	bhi.n	801cc02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801cbb4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801cbb8:	d02b      	beq.n	801cc12 <HAL_RCCEx_PeriphCLKConfig+0x672>
 801cbba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801cbbe:	d820      	bhi.n	801cc02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801cbc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801cbc4:	d012      	beq.n	801cbec <HAL_RCCEx_PeriphCLKConfig+0x64c>
 801cbc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801cbca:	d81a      	bhi.n	801cc02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801cbcc:	2b00      	cmp	r3, #0
 801cbce:	d022      	beq.n	801cc16 <HAL_RCCEx_PeriphCLKConfig+0x676>
 801cbd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801cbd4:	d115      	bne.n	801cc02 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801cbd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cbda:	3308      	adds	r3, #8
 801cbdc:	2101      	movs	r1, #1
 801cbde:	4618      	mov	r0, r3
 801cbe0:	f001 f9a6 	bl	801df30 <RCCEx_PLL2_Config>
 801cbe4:	4603      	mov	r3, r0
 801cbe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801cbea:	e015      	b.n	801cc18 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801cbec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cbf0:	3328      	adds	r3, #40	@ 0x28
 801cbf2:	2101      	movs	r1, #1
 801cbf4:	4618      	mov	r0, r3
 801cbf6:	f001 fa4d 	bl	801e094 <RCCEx_PLL3_Config>
 801cbfa:	4603      	mov	r3, r0
 801cbfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801cc00:	e00a      	b.n	801cc18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801cc02:	2301      	movs	r3, #1
 801cc04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801cc08:	e006      	b.n	801cc18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801cc0a:	bf00      	nop
 801cc0c:	e004      	b.n	801cc18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801cc0e:	bf00      	nop
 801cc10:	e002      	b.n	801cc18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801cc12:	bf00      	nop
 801cc14:	e000      	b.n	801cc18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801cc16:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cc18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cc1c:	2b00      	cmp	r3, #0
 801cc1e:	d10b      	bne.n	801cc38 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801cc20:	4ba3      	ldr	r3, [pc, #652]	@ (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801cc22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cc24:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801cc28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cc2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801cc30:	4a9f      	ldr	r2, [pc, #636]	@ (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801cc32:	430b      	orrs	r3, r1
 801cc34:	6593      	str	r3, [r2, #88]	@ 0x58
 801cc36:	e003      	b.n	801cc40 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cc38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cc3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801cc40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc48:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 801cc4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801cc50:	2300      	movs	r3, #0
 801cc52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801cc56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801cc5a:	460b      	mov	r3, r1
 801cc5c:	4313      	orrs	r3, r2
 801cc5e:	d037      	beq.n	801ccd0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801cc60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cc64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cc66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801cc6a:	d00e      	beq.n	801cc8a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 801cc6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801cc70:	d816      	bhi.n	801cca0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 801cc72:	2b00      	cmp	r3, #0
 801cc74:	d018      	beq.n	801cca8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 801cc76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801cc7a:	d111      	bne.n	801cca0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cc7c:	4b8c      	ldr	r3, [pc, #560]	@ (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801cc7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cc80:	4a8b      	ldr	r2, [pc, #556]	@ (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801cc82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801cc86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801cc88:	e00f      	b.n	801ccaa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801cc8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cc8e:	3308      	adds	r3, #8
 801cc90:	2101      	movs	r1, #1
 801cc92:	4618      	mov	r0, r3
 801cc94:	f001 f94c 	bl	801df30 <RCCEx_PLL2_Config>
 801cc98:	4603      	mov	r3, r0
 801cc9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801cc9e:	e004      	b.n	801ccaa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cca0:	2301      	movs	r3, #1
 801cca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801cca6:	e000      	b.n	801ccaa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 801cca8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ccaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ccae:	2b00      	cmp	r3, #0
 801ccb0:	d10a      	bne.n	801ccc8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801ccb2:	4b7f      	ldr	r3, [pc, #508]	@ (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801ccb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ccb6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801ccba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ccbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ccc0:	4a7b      	ldr	r2, [pc, #492]	@ (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801ccc2:	430b      	orrs	r3, r1
 801ccc4:	6513      	str	r3, [r2, #80]	@ 0x50
 801ccc6:	e003      	b.n	801ccd0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ccc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cccc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801ccd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ccd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccd8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 801ccdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801cce0:	2300      	movs	r3, #0
 801cce2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801cce6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801ccea:	460b      	mov	r3, r1
 801ccec:	4313      	orrs	r3, r2
 801ccee:	d039      	beq.n	801cd64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801ccf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ccf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ccf6:	2b03      	cmp	r3, #3
 801ccf8:	d81c      	bhi.n	801cd34 <HAL_RCCEx_PeriphCLKConfig+0x794>
 801ccfa:	a201      	add	r2, pc, #4	@ (adr r2, 801cd00 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 801ccfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cd00:	0801cd3d 	.word	0x0801cd3d
 801cd04:	0801cd11 	.word	0x0801cd11
 801cd08:	0801cd1f 	.word	0x0801cd1f
 801cd0c:	0801cd3d 	.word	0x0801cd3d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cd10:	4b67      	ldr	r3, [pc, #412]	@ (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801cd12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cd14:	4a66      	ldr	r2, [pc, #408]	@ (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801cd16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801cd1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801cd1c:	e00f      	b.n	801cd3e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801cd1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cd22:	3308      	adds	r3, #8
 801cd24:	2102      	movs	r1, #2
 801cd26:	4618      	mov	r0, r3
 801cd28:	f001 f902 	bl	801df30 <RCCEx_PLL2_Config>
 801cd2c:	4603      	mov	r3, r0
 801cd2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 801cd32:	e004      	b.n	801cd3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801cd34:	2301      	movs	r3, #1
 801cd36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801cd3a:	e000      	b.n	801cd3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 801cd3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cd3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cd42:	2b00      	cmp	r3, #0
 801cd44:	d10a      	bne.n	801cd5c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801cd46:	4b5a      	ldr	r3, [pc, #360]	@ (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801cd48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801cd4a:	f023 0103 	bic.w	r1, r3, #3
 801cd4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cd52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801cd54:	4a56      	ldr	r2, [pc, #344]	@ (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801cd56:	430b      	orrs	r3, r1
 801cd58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801cd5a:	e003      	b.n	801cd64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cd5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cd60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801cd64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd6c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 801cd70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801cd74:	2300      	movs	r3, #0
 801cd76:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801cd7a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801cd7e:	460b      	mov	r3, r1
 801cd80:	4313      	orrs	r3, r2
 801cd82:	f000 809f 	beq.w	801cec4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801cd86:	4b4b      	ldr	r3, [pc, #300]	@ (801ceb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801cd88:	681b      	ldr	r3, [r3, #0]
 801cd8a:	4a4a      	ldr	r2, [pc, #296]	@ (801ceb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801cd8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801cd90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801cd92:	f7fc f979 	bl	8019088 <HAL_GetTick>
 801cd96:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801cd9a:	e00b      	b.n	801cdb4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801cd9c:	f7fc f974 	bl	8019088 <HAL_GetTick>
 801cda0:	4602      	mov	r2, r0
 801cda2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801cda6:	1ad3      	subs	r3, r2, r3
 801cda8:	2b64      	cmp	r3, #100	@ 0x64
 801cdaa:	d903      	bls.n	801cdb4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 801cdac:	2303      	movs	r3, #3
 801cdae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801cdb2:	e005      	b.n	801cdc0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801cdb4:	4b3f      	ldr	r3, [pc, #252]	@ (801ceb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801cdb6:	681b      	ldr	r3, [r3, #0]
 801cdb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cdbc:	2b00      	cmp	r3, #0
 801cdbe:	d0ed      	beq.n	801cd9c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 801cdc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cdc4:	2b00      	cmp	r3, #0
 801cdc6:	d179      	bne.n	801cebc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801cdc8:	4b39      	ldr	r3, [pc, #228]	@ (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801cdca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801cdcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cdd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801cdd4:	4053      	eors	r3, r2
 801cdd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801cdda:	2b00      	cmp	r3, #0
 801cddc:	d015      	beq.n	801ce0a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801cdde:	4b34      	ldr	r3, [pc, #208]	@ (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801cde0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cde2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801cde6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801cdea:	4b31      	ldr	r3, [pc, #196]	@ (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801cdec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cdee:	4a30      	ldr	r2, [pc, #192]	@ (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801cdf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801cdf4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801cdf6:	4b2e      	ldr	r3, [pc, #184]	@ (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801cdf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cdfa:	4a2d      	ldr	r2, [pc, #180]	@ (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801cdfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801ce00:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801ce02:	4a2b      	ldr	r2, [pc, #172]	@ (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801ce04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801ce08:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801ce0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ce0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801ce12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ce16:	d118      	bne.n	801ce4a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ce18:	f7fc f936 	bl	8019088 <HAL_GetTick>
 801ce1c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801ce20:	e00d      	b.n	801ce3e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801ce22:	f7fc f931 	bl	8019088 <HAL_GetTick>
 801ce26:	4602      	mov	r2, r0
 801ce28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801ce2c:	1ad2      	subs	r2, r2, r3
 801ce2e:	f241 3388 	movw	r3, #5000	@ 0x1388
 801ce32:	429a      	cmp	r2, r3
 801ce34:	d903      	bls.n	801ce3e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 801ce36:	2303      	movs	r3, #3
 801ce38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 801ce3c:	e005      	b.n	801ce4a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801ce3e:	4b1c      	ldr	r3, [pc, #112]	@ (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801ce40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ce42:	f003 0302 	and.w	r3, r3, #2
 801ce46:	2b00      	cmp	r3, #0
 801ce48:	d0eb      	beq.n	801ce22 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 801ce4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ce4e:	2b00      	cmp	r3, #0
 801ce50:	d129      	bne.n	801cea6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801ce52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ce56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801ce5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801ce5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801ce62:	d10e      	bne.n	801ce82 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 801ce64:	4b12      	ldr	r3, [pc, #72]	@ (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801ce66:	691b      	ldr	r3, [r3, #16]
 801ce68:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801ce6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ce70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801ce74:	091a      	lsrs	r2, r3, #4
 801ce76:	4b10      	ldr	r3, [pc, #64]	@ (801ceb8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 801ce78:	4013      	ands	r3, r2
 801ce7a:	4a0d      	ldr	r2, [pc, #52]	@ (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801ce7c:	430b      	orrs	r3, r1
 801ce7e:	6113      	str	r3, [r2, #16]
 801ce80:	e005      	b.n	801ce8e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 801ce82:	4b0b      	ldr	r3, [pc, #44]	@ (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801ce84:	691b      	ldr	r3, [r3, #16]
 801ce86:	4a0a      	ldr	r2, [pc, #40]	@ (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801ce88:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801ce8c:	6113      	str	r3, [r2, #16]
 801ce8e:	4b08      	ldr	r3, [pc, #32]	@ (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801ce90:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801ce92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ce96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801ce9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ce9e:	4a04      	ldr	r2, [pc, #16]	@ (801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801cea0:	430b      	orrs	r3, r1
 801cea2:	6713      	str	r3, [r2, #112]	@ 0x70
 801cea4:	e00e      	b.n	801cec4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801cea6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ceaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801ceae:	e009      	b.n	801cec4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 801ceb0:	58024400 	.word	0x58024400
 801ceb4:	58024800 	.word	0x58024800
 801ceb8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cebc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cec0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801cec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cecc:	f002 0301 	and.w	r3, r2, #1
 801ced0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801ced4:	2300      	movs	r3, #0
 801ced6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801ceda:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801cede:	460b      	mov	r3, r1
 801cee0:	4313      	orrs	r3, r2
 801cee2:	f000 8089 	beq.w	801cff8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801cee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ceea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801ceec:	2b28      	cmp	r3, #40	@ 0x28
 801ceee:	d86b      	bhi.n	801cfc8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 801cef0:	a201      	add	r2, pc, #4	@ (adr r2, 801cef8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801cef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cef6:	bf00      	nop
 801cef8:	0801cfd1 	.word	0x0801cfd1
 801cefc:	0801cfc9 	.word	0x0801cfc9
 801cf00:	0801cfc9 	.word	0x0801cfc9
 801cf04:	0801cfc9 	.word	0x0801cfc9
 801cf08:	0801cfc9 	.word	0x0801cfc9
 801cf0c:	0801cfc9 	.word	0x0801cfc9
 801cf10:	0801cfc9 	.word	0x0801cfc9
 801cf14:	0801cfc9 	.word	0x0801cfc9
 801cf18:	0801cf9d 	.word	0x0801cf9d
 801cf1c:	0801cfc9 	.word	0x0801cfc9
 801cf20:	0801cfc9 	.word	0x0801cfc9
 801cf24:	0801cfc9 	.word	0x0801cfc9
 801cf28:	0801cfc9 	.word	0x0801cfc9
 801cf2c:	0801cfc9 	.word	0x0801cfc9
 801cf30:	0801cfc9 	.word	0x0801cfc9
 801cf34:	0801cfc9 	.word	0x0801cfc9
 801cf38:	0801cfb3 	.word	0x0801cfb3
 801cf3c:	0801cfc9 	.word	0x0801cfc9
 801cf40:	0801cfc9 	.word	0x0801cfc9
 801cf44:	0801cfc9 	.word	0x0801cfc9
 801cf48:	0801cfc9 	.word	0x0801cfc9
 801cf4c:	0801cfc9 	.word	0x0801cfc9
 801cf50:	0801cfc9 	.word	0x0801cfc9
 801cf54:	0801cfc9 	.word	0x0801cfc9
 801cf58:	0801cfd1 	.word	0x0801cfd1
 801cf5c:	0801cfc9 	.word	0x0801cfc9
 801cf60:	0801cfc9 	.word	0x0801cfc9
 801cf64:	0801cfc9 	.word	0x0801cfc9
 801cf68:	0801cfc9 	.word	0x0801cfc9
 801cf6c:	0801cfc9 	.word	0x0801cfc9
 801cf70:	0801cfc9 	.word	0x0801cfc9
 801cf74:	0801cfc9 	.word	0x0801cfc9
 801cf78:	0801cfd1 	.word	0x0801cfd1
 801cf7c:	0801cfc9 	.word	0x0801cfc9
 801cf80:	0801cfc9 	.word	0x0801cfc9
 801cf84:	0801cfc9 	.word	0x0801cfc9
 801cf88:	0801cfc9 	.word	0x0801cfc9
 801cf8c:	0801cfc9 	.word	0x0801cfc9
 801cf90:	0801cfc9 	.word	0x0801cfc9
 801cf94:	0801cfc9 	.word	0x0801cfc9
 801cf98:	0801cfd1 	.word	0x0801cfd1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801cf9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cfa0:	3308      	adds	r3, #8
 801cfa2:	2101      	movs	r1, #1
 801cfa4:	4618      	mov	r0, r3
 801cfa6:	f000 ffc3 	bl	801df30 <RCCEx_PLL2_Config>
 801cfaa:	4603      	mov	r3, r0
 801cfac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801cfb0:	e00f      	b.n	801cfd2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801cfb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cfb6:	3328      	adds	r3, #40	@ 0x28
 801cfb8:	2101      	movs	r1, #1
 801cfba:	4618      	mov	r0, r3
 801cfbc:	f001 f86a 	bl	801e094 <RCCEx_PLL3_Config>
 801cfc0:	4603      	mov	r3, r0
 801cfc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801cfc6:	e004      	b.n	801cfd2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cfc8:	2301      	movs	r3, #1
 801cfca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801cfce:	e000      	b.n	801cfd2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 801cfd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cfd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cfd6:	2b00      	cmp	r3, #0
 801cfd8:	d10a      	bne.n	801cff0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801cfda:	4bbf      	ldr	r3, [pc, #764]	@ (801d2d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801cfdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801cfde:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801cfe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cfe6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801cfe8:	4abb      	ldr	r2, [pc, #748]	@ (801d2d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801cfea:	430b      	orrs	r3, r1
 801cfec:	6553      	str	r3, [r2, #84]	@ 0x54
 801cfee:	e003      	b.n	801cff8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cff0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cff4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801cff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d000:	f002 0302 	and.w	r3, r2, #2
 801d004:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801d008:	2300      	movs	r3, #0
 801d00a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801d00e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801d012:	460b      	mov	r3, r1
 801d014:	4313      	orrs	r3, r2
 801d016:	d041      	beq.n	801d09c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801d018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d01c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801d01e:	2b05      	cmp	r3, #5
 801d020:	d824      	bhi.n	801d06c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 801d022:	a201      	add	r2, pc, #4	@ (adr r2, 801d028 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 801d024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d028:	0801d075 	.word	0x0801d075
 801d02c:	0801d041 	.word	0x0801d041
 801d030:	0801d057 	.word	0x0801d057
 801d034:	0801d075 	.word	0x0801d075
 801d038:	0801d075 	.word	0x0801d075
 801d03c:	0801d075 	.word	0x0801d075
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d044:	3308      	adds	r3, #8
 801d046:	2101      	movs	r1, #1
 801d048:	4618      	mov	r0, r3
 801d04a:	f000 ff71 	bl	801df30 <RCCEx_PLL2_Config>
 801d04e:	4603      	mov	r3, r0
 801d050:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801d054:	e00f      	b.n	801d076 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d05a:	3328      	adds	r3, #40	@ 0x28
 801d05c:	2101      	movs	r1, #1
 801d05e:	4618      	mov	r0, r3
 801d060:	f001 f818 	bl	801e094 <RCCEx_PLL3_Config>
 801d064:	4603      	mov	r3, r0
 801d066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801d06a:	e004      	b.n	801d076 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d06c:	2301      	movs	r3, #1
 801d06e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d072:	e000      	b.n	801d076 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 801d074:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d076:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d07a:	2b00      	cmp	r3, #0
 801d07c:	d10a      	bne.n	801d094 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801d07e:	4b96      	ldr	r3, [pc, #600]	@ (801d2d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d082:	f023 0107 	bic.w	r1, r3, #7
 801d086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d08a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801d08c:	4a92      	ldr	r2, [pc, #584]	@ (801d2d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d08e:	430b      	orrs	r3, r1
 801d090:	6553      	str	r3, [r2, #84]	@ 0x54
 801d092:	e003      	b.n	801d09c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d094:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d098:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801d09c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0a4:	f002 0304 	and.w	r3, r2, #4
 801d0a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801d0ac:	2300      	movs	r3, #0
 801d0ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801d0b2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 801d0b6:	460b      	mov	r3, r1
 801d0b8:	4313      	orrs	r3, r2
 801d0ba:	d044      	beq.n	801d146 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801d0bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d0c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801d0c4:	2b05      	cmp	r3, #5
 801d0c6:	d825      	bhi.n	801d114 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 801d0c8:	a201      	add	r2, pc, #4	@ (adr r2, 801d0d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 801d0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d0ce:	bf00      	nop
 801d0d0:	0801d11d 	.word	0x0801d11d
 801d0d4:	0801d0e9 	.word	0x0801d0e9
 801d0d8:	0801d0ff 	.word	0x0801d0ff
 801d0dc:	0801d11d 	.word	0x0801d11d
 801d0e0:	0801d11d 	.word	0x0801d11d
 801d0e4:	0801d11d 	.word	0x0801d11d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d0e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d0ec:	3308      	adds	r3, #8
 801d0ee:	2101      	movs	r1, #1
 801d0f0:	4618      	mov	r0, r3
 801d0f2:	f000 ff1d 	bl	801df30 <RCCEx_PLL2_Config>
 801d0f6:	4603      	mov	r3, r0
 801d0f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801d0fc:	e00f      	b.n	801d11e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d0fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d102:	3328      	adds	r3, #40	@ 0x28
 801d104:	2101      	movs	r1, #1
 801d106:	4618      	mov	r0, r3
 801d108:	f000 ffc4 	bl	801e094 <RCCEx_PLL3_Config>
 801d10c:	4603      	mov	r3, r0
 801d10e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801d112:	e004      	b.n	801d11e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d114:	2301      	movs	r3, #1
 801d116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d11a:	e000      	b.n	801d11e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 801d11c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d11e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d122:	2b00      	cmp	r3, #0
 801d124:	d10b      	bne.n	801d13e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801d126:	4b6c      	ldr	r3, [pc, #432]	@ (801d2d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d12a:	f023 0107 	bic.w	r1, r3, #7
 801d12e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d132:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801d136:	4a68      	ldr	r2, [pc, #416]	@ (801d2d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d138:	430b      	orrs	r3, r1
 801d13a:	6593      	str	r3, [r2, #88]	@ 0x58
 801d13c:	e003      	b.n	801d146 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d13e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d142:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801d146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d14e:	f002 0320 	and.w	r3, r2, #32
 801d152:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801d156:	2300      	movs	r3, #0
 801d158:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801d15c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801d160:	460b      	mov	r3, r1
 801d162:	4313      	orrs	r3, r2
 801d164:	d055      	beq.n	801d212 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801d166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d16a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d16e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d172:	d033      	beq.n	801d1dc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 801d174:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d178:	d82c      	bhi.n	801d1d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801d17a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d17e:	d02f      	beq.n	801d1e0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 801d180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d184:	d826      	bhi.n	801d1d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801d186:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801d18a:	d02b      	beq.n	801d1e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 801d18c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801d190:	d820      	bhi.n	801d1d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801d192:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d196:	d012      	beq.n	801d1be <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 801d198:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d19c:	d81a      	bhi.n	801d1d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801d19e:	2b00      	cmp	r3, #0
 801d1a0:	d022      	beq.n	801d1e8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 801d1a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d1a6:	d115      	bne.n	801d1d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d1a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d1ac:	3308      	adds	r3, #8
 801d1ae:	2100      	movs	r1, #0
 801d1b0:	4618      	mov	r0, r3
 801d1b2:	f000 febd 	bl	801df30 <RCCEx_PLL2_Config>
 801d1b6:	4603      	mov	r3, r0
 801d1b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801d1bc:	e015      	b.n	801d1ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d1be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d1c2:	3328      	adds	r3, #40	@ 0x28
 801d1c4:	2102      	movs	r1, #2
 801d1c6:	4618      	mov	r0, r3
 801d1c8:	f000 ff64 	bl	801e094 <RCCEx_PLL3_Config>
 801d1cc:	4603      	mov	r3, r0
 801d1ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801d1d2:	e00a      	b.n	801d1ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d1d4:	2301      	movs	r3, #1
 801d1d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d1da:	e006      	b.n	801d1ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801d1dc:	bf00      	nop
 801d1de:	e004      	b.n	801d1ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801d1e0:	bf00      	nop
 801d1e2:	e002      	b.n	801d1ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801d1e4:	bf00      	nop
 801d1e6:	e000      	b.n	801d1ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801d1e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d1ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d1ee:	2b00      	cmp	r3, #0
 801d1f0:	d10b      	bne.n	801d20a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801d1f2:	4b39      	ldr	r3, [pc, #228]	@ (801d2d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d1f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d1f6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801d1fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d1fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d202:	4a35      	ldr	r2, [pc, #212]	@ (801d2d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d204:	430b      	orrs	r3, r1
 801d206:	6553      	str	r3, [r2, #84]	@ 0x54
 801d208:	e003      	b.n	801d212 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d20a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d20e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801d212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d21a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 801d21e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801d222:	2300      	movs	r3, #0
 801d224:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801d228:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801d22c:	460b      	mov	r3, r1
 801d22e:	4313      	orrs	r3, r2
 801d230:	d058      	beq.n	801d2e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801d232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d236:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801d23a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801d23e:	d033      	beq.n	801d2a8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 801d240:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801d244:	d82c      	bhi.n	801d2a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801d246:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d24a:	d02f      	beq.n	801d2ac <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 801d24c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d250:	d826      	bhi.n	801d2a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801d252:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801d256:	d02b      	beq.n	801d2b0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 801d258:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801d25c:	d820      	bhi.n	801d2a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801d25e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801d262:	d012      	beq.n	801d28a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 801d264:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801d268:	d81a      	bhi.n	801d2a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801d26a:	2b00      	cmp	r3, #0
 801d26c:	d022      	beq.n	801d2b4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 801d26e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801d272:	d115      	bne.n	801d2a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d278:	3308      	adds	r3, #8
 801d27a:	2100      	movs	r1, #0
 801d27c:	4618      	mov	r0, r3
 801d27e:	f000 fe57 	bl	801df30 <RCCEx_PLL2_Config>
 801d282:	4603      	mov	r3, r0
 801d284:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801d288:	e015      	b.n	801d2b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d28a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d28e:	3328      	adds	r3, #40	@ 0x28
 801d290:	2102      	movs	r1, #2
 801d292:	4618      	mov	r0, r3
 801d294:	f000 fefe 	bl	801e094 <RCCEx_PLL3_Config>
 801d298:	4603      	mov	r3, r0
 801d29a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801d29e:	e00a      	b.n	801d2b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d2a0:	2301      	movs	r3, #1
 801d2a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d2a6:	e006      	b.n	801d2b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801d2a8:	bf00      	nop
 801d2aa:	e004      	b.n	801d2b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801d2ac:	bf00      	nop
 801d2ae:	e002      	b.n	801d2b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801d2b0:	bf00      	nop
 801d2b2:	e000      	b.n	801d2b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801d2b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d2b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d2ba:	2b00      	cmp	r3, #0
 801d2bc:	d10e      	bne.n	801d2dc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801d2be:	4b06      	ldr	r3, [pc, #24]	@ (801d2d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d2c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d2c2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 801d2c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d2ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801d2ce:	4a02      	ldr	r2, [pc, #8]	@ (801d2d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d2d0:	430b      	orrs	r3, r1
 801d2d2:	6593      	str	r3, [r2, #88]	@ 0x58
 801d2d4:	e006      	b.n	801d2e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 801d2d6:	bf00      	nop
 801d2d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d2dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d2e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801d2e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2ec:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 801d2f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801d2f4:	2300      	movs	r3, #0
 801d2f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801d2fa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 801d2fe:	460b      	mov	r3, r1
 801d300:	4313      	orrs	r3, r2
 801d302:	d055      	beq.n	801d3b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801d304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d308:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801d30c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801d310:	d033      	beq.n	801d37a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 801d312:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801d316:	d82c      	bhi.n	801d372 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801d318:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801d31c:	d02f      	beq.n	801d37e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 801d31e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801d322:	d826      	bhi.n	801d372 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801d324:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801d328:	d02b      	beq.n	801d382 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 801d32a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801d32e:	d820      	bhi.n	801d372 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801d330:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801d334:	d012      	beq.n	801d35c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 801d336:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801d33a:	d81a      	bhi.n	801d372 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801d33c:	2b00      	cmp	r3, #0
 801d33e:	d022      	beq.n	801d386 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 801d340:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801d344:	d115      	bne.n	801d372 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d34a:	3308      	adds	r3, #8
 801d34c:	2100      	movs	r1, #0
 801d34e:	4618      	mov	r0, r3
 801d350:	f000 fdee 	bl	801df30 <RCCEx_PLL2_Config>
 801d354:	4603      	mov	r3, r0
 801d356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801d35a:	e015      	b.n	801d388 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d35c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d360:	3328      	adds	r3, #40	@ 0x28
 801d362:	2102      	movs	r1, #2
 801d364:	4618      	mov	r0, r3
 801d366:	f000 fe95 	bl	801e094 <RCCEx_PLL3_Config>
 801d36a:	4603      	mov	r3, r0
 801d36c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801d370:	e00a      	b.n	801d388 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d372:	2301      	movs	r3, #1
 801d374:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d378:	e006      	b.n	801d388 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801d37a:	bf00      	nop
 801d37c:	e004      	b.n	801d388 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801d37e:	bf00      	nop
 801d380:	e002      	b.n	801d388 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801d382:	bf00      	nop
 801d384:	e000      	b.n	801d388 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801d386:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d388:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d38c:	2b00      	cmp	r3, #0
 801d38e:	d10b      	bne.n	801d3a8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801d390:	4ba1      	ldr	r3, [pc, #644]	@ (801d618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d394:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 801d398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d39c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801d3a0:	4a9d      	ldr	r2, [pc, #628]	@ (801d618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d3a2:	430b      	orrs	r3, r1
 801d3a4:	6593      	str	r3, [r2, #88]	@ 0x58
 801d3a6:	e003      	b.n	801d3b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d3a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d3ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801d3b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3b8:	f002 0308 	and.w	r3, r2, #8
 801d3bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801d3c0:	2300      	movs	r3, #0
 801d3c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801d3c6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 801d3ca:	460b      	mov	r3, r1
 801d3cc:	4313      	orrs	r3, r2
 801d3ce:	d01e      	beq.n	801d40e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 801d3d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d3d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801d3d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d3dc:	d10c      	bne.n	801d3f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801d3de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d3e2:	3328      	adds	r3, #40	@ 0x28
 801d3e4:	2102      	movs	r1, #2
 801d3e6:	4618      	mov	r0, r3
 801d3e8:	f000 fe54 	bl	801e094 <RCCEx_PLL3_Config>
 801d3ec:	4603      	mov	r3, r0
 801d3ee:	2b00      	cmp	r3, #0
 801d3f0:	d002      	beq.n	801d3f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 801d3f2:	2301      	movs	r3, #1
 801d3f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801d3f8:	4b87      	ldr	r3, [pc, #540]	@ (801d618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d3fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d3fc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801d400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d404:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801d408:	4a83      	ldr	r2, [pc, #524]	@ (801d618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d40a:	430b      	orrs	r3, r1
 801d40c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801d40e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d412:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d416:	f002 0310 	and.w	r3, r2, #16
 801d41a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801d41e:	2300      	movs	r3, #0
 801d420:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801d424:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 801d428:	460b      	mov	r3, r1
 801d42a:	4313      	orrs	r3, r2
 801d42c:	d01e      	beq.n	801d46c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801d42e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d432:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801d436:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d43a:	d10c      	bne.n	801d456 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801d43c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d440:	3328      	adds	r3, #40	@ 0x28
 801d442:	2102      	movs	r1, #2
 801d444:	4618      	mov	r0, r3
 801d446:	f000 fe25 	bl	801e094 <RCCEx_PLL3_Config>
 801d44a:	4603      	mov	r3, r0
 801d44c:	2b00      	cmp	r3, #0
 801d44e:	d002      	beq.n	801d456 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 801d450:	2301      	movs	r3, #1
 801d452:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801d456:	4b70      	ldr	r3, [pc, #448]	@ (801d618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d45a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801d45e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d462:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801d466:	4a6c      	ldr	r2, [pc, #432]	@ (801d618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d468:	430b      	orrs	r3, r1
 801d46a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801d46c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d470:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d474:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 801d478:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801d47c:	2300      	movs	r3, #0
 801d47e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801d482:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 801d486:	460b      	mov	r3, r1
 801d488:	4313      	orrs	r3, r2
 801d48a:	d03e      	beq.n	801d50a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801d48c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d490:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801d494:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d498:	d022      	beq.n	801d4e0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 801d49a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d49e:	d81b      	bhi.n	801d4d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 801d4a0:	2b00      	cmp	r3, #0
 801d4a2:	d003      	beq.n	801d4ac <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 801d4a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d4a8:	d00b      	beq.n	801d4c2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 801d4aa:	e015      	b.n	801d4d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d4ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d4b0:	3308      	adds	r3, #8
 801d4b2:	2100      	movs	r1, #0
 801d4b4:	4618      	mov	r0, r3
 801d4b6:	f000 fd3b 	bl	801df30 <RCCEx_PLL2_Config>
 801d4ba:	4603      	mov	r3, r0
 801d4bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801d4c0:	e00f      	b.n	801d4e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d4c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d4c6:	3328      	adds	r3, #40	@ 0x28
 801d4c8:	2102      	movs	r1, #2
 801d4ca:	4618      	mov	r0, r3
 801d4cc:	f000 fde2 	bl	801e094 <RCCEx_PLL3_Config>
 801d4d0:	4603      	mov	r3, r0
 801d4d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801d4d6:	e004      	b.n	801d4e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d4d8:	2301      	movs	r3, #1
 801d4da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d4de:	e000      	b.n	801d4e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 801d4e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d4e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d4e6:	2b00      	cmp	r3, #0
 801d4e8:	d10b      	bne.n	801d502 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801d4ea:	4b4b      	ldr	r3, [pc, #300]	@ (801d618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d4ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d4ee:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 801d4f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d4f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801d4fa:	4a47      	ldr	r2, [pc, #284]	@ (801d618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d4fc:	430b      	orrs	r3, r1
 801d4fe:	6593      	str	r3, [r2, #88]	@ 0x58
 801d500:	e003      	b.n	801d50a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d502:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d506:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801d50a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d512:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 801d516:	67bb      	str	r3, [r7, #120]	@ 0x78
 801d518:	2300      	movs	r3, #0
 801d51a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801d51c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 801d520:	460b      	mov	r3, r1
 801d522:	4313      	orrs	r3, r2
 801d524:	d03b      	beq.n	801d59e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801d526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d52a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d52e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801d532:	d01f      	beq.n	801d574 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 801d534:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801d538:	d818      	bhi.n	801d56c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 801d53a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801d53e:	d003      	beq.n	801d548 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 801d540:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801d544:	d007      	beq.n	801d556 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 801d546:	e011      	b.n	801d56c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d548:	4b33      	ldr	r3, [pc, #204]	@ (801d618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d54a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d54c:	4a32      	ldr	r2, [pc, #200]	@ (801d618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d54e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d552:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801d554:	e00f      	b.n	801d576 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d55a:	3328      	adds	r3, #40	@ 0x28
 801d55c:	2101      	movs	r1, #1
 801d55e:	4618      	mov	r0, r3
 801d560:	f000 fd98 	bl	801e094 <RCCEx_PLL3_Config>
 801d564:	4603      	mov	r3, r0
 801d566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 801d56a:	e004      	b.n	801d576 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d56c:	2301      	movs	r3, #1
 801d56e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d572:	e000      	b.n	801d576 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 801d574:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d576:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d57a:	2b00      	cmp	r3, #0
 801d57c:	d10b      	bne.n	801d596 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801d57e:	4b26      	ldr	r3, [pc, #152]	@ (801d618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d582:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801d586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d58a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d58e:	4a22      	ldr	r2, [pc, #136]	@ (801d618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d590:	430b      	orrs	r3, r1
 801d592:	6553      	str	r3, [r2, #84]	@ 0x54
 801d594:	e003      	b.n	801d59e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d59a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801d59e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5a6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801d5aa:	673b      	str	r3, [r7, #112]	@ 0x70
 801d5ac:	2300      	movs	r3, #0
 801d5ae:	677b      	str	r3, [r7, #116]	@ 0x74
 801d5b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 801d5b4:	460b      	mov	r3, r1
 801d5b6:	4313      	orrs	r3, r2
 801d5b8:	d034      	beq.n	801d624 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801d5ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d5be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d5c0:	2b00      	cmp	r3, #0
 801d5c2:	d003      	beq.n	801d5cc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 801d5c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d5c8:	d007      	beq.n	801d5da <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801d5ca:	e011      	b.n	801d5f0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d5cc:	4b12      	ldr	r3, [pc, #72]	@ (801d618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d5ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d5d0:	4a11      	ldr	r2, [pc, #68]	@ (801d618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d5d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d5d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801d5d8:	e00e      	b.n	801d5f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d5da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d5de:	3308      	adds	r3, #8
 801d5e0:	2102      	movs	r1, #2
 801d5e2:	4618      	mov	r0, r3
 801d5e4:	f000 fca4 	bl	801df30 <RCCEx_PLL2_Config>
 801d5e8:	4603      	mov	r3, r0
 801d5ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801d5ee:	e003      	b.n	801d5f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 801d5f0:	2301      	movs	r3, #1
 801d5f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d5f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d5f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d5fc:	2b00      	cmp	r3, #0
 801d5fe:	d10d      	bne.n	801d61c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801d600:	4b05      	ldr	r3, [pc, #20]	@ (801d618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d604:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801d608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d60c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d60e:	4a02      	ldr	r2, [pc, #8]	@ (801d618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d610:	430b      	orrs	r3, r1
 801d612:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801d614:	e006      	b.n	801d624 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 801d616:	bf00      	nop
 801d618:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d61c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d620:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801d624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d62c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 801d630:	66bb      	str	r3, [r7, #104]	@ 0x68
 801d632:	2300      	movs	r3, #0
 801d634:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801d636:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 801d63a:	460b      	mov	r3, r1
 801d63c:	4313      	orrs	r3, r2
 801d63e:	d00c      	beq.n	801d65a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801d640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d644:	3328      	adds	r3, #40	@ 0x28
 801d646:	2102      	movs	r1, #2
 801d648:	4618      	mov	r0, r3
 801d64a:	f000 fd23 	bl	801e094 <RCCEx_PLL3_Config>
 801d64e:	4603      	mov	r3, r0
 801d650:	2b00      	cmp	r3, #0
 801d652:	d002      	beq.n	801d65a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 801d654:	2301      	movs	r3, #1
 801d656:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801d65a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d662:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801d666:	663b      	str	r3, [r7, #96]	@ 0x60
 801d668:	2300      	movs	r3, #0
 801d66a:	667b      	str	r3, [r7, #100]	@ 0x64
 801d66c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 801d670:	460b      	mov	r3, r1
 801d672:	4313      	orrs	r3, r2
 801d674:	d038      	beq.n	801d6e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 801d676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d67a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d67e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801d682:	d018      	beq.n	801d6b6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 801d684:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801d688:	d811      	bhi.n	801d6ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801d68a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d68e:	d014      	beq.n	801d6ba <HAL_RCCEx_PeriphCLKConfig+0x111a>
 801d690:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d694:	d80b      	bhi.n	801d6ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801d696:	2b00      	cmp	r3, #0
 801d698:	d011      	beq.n	801d6be <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801d69a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d69e:	d106      	bne.n	801d6ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d6a0:	4bc3      	ldr	r3, [pc, #780]	@ (801d9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d6a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d6a4:	4ac2      	ldr	r2, [pc, #776]	@ (801d9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d6a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d6aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801d6ac:	e008      	b.n	801d6c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d6ae:	2301      	movs	r3, #1
 801d6b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d6b4:	e004      	b.n	801d6c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801d6b6:	bf00      	nop
 801d6b8:	e002      	b.n	801d6c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801d6ba:	bf00      	nop
 801d6bc:	e000      	b.n	801d6c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801d6be:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d6c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d6c4:	2b00      	cmp	r3, #0
 801d6c6:	d10b      	bne.n	801d6e0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801d6c8:	4bb9      	ldr	r3, [pc, #740]	@ (801d9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d6ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d6cc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801d6d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d6d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d6d8:	4ab5      	ldr	r2, [pc, #724]	@ (801d9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d6da:	430b      	orrs	r3, r1
 801d6dc:	6553      	str	r3, [r2, #84]	@ 0x54
 801d6de:	e003      	b.n	801d6e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d6e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d6e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801d6e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6f0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 801d6f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 801d6f6:	2300      	movs	r3, #0
 801d6f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d6fa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 801d6fe:	460b      	mov	r3, r1
 801d700:	4313      	orrs	r3, r2
 801d702:	d009      	beq.n	801d718 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801d704:	4baa      	ldr	r3, [pc, #680]	@ (801d9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d708:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801d70c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d712:	4aa7      	ldr	r2, [pc, #668]	@ (801d9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d714:	430b      	orrs	r3, r1
 801d716:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 801d718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d720:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 801d724:	653b      	str	r3, [r7, #80]	@ 0x50
 801d726:	2300      	movs	r3, #0
 801d728:	657b      	str	r3, [r7, #84]	@ 0x54
 801d72a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801d72e:	460b      	mov	r3, r1
 801d730:	4313      	orrs	r3, r2
 801d732:	d00a      	beq.n	801d74a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801d734:	4b9e      	ldr	r3, [pc, #632]	@ (801d9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d736:	691b      	ldr	r3, [r3, #16]
 801d738:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 801d73c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d740:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801d744:	4a9a      	ldr	r2, [pc, #616]	@ (801d9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d746:	430b      	orrs	r3, r1
 801d748:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801d74a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d752:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 801d756:	64bb      	str	r3, [r7, #72]	@ 0x48
 801d758:	2300      	movs	r3, #0
 801d75a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801d75c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801d760:	460b      	mov	r3, r1
 801d762:	4313      	orrs	r3, r2
 801d764:	d009      	beq.n	801d77a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801d766:	4b92      	ldr	r3, [pc, #584]	@ (801d9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d76a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 801d76e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d772:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d774:	4a8e      	ldr	r2, [pc, #568]	@ (801d9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d776:	430b      	orrs	r3, r1
 801d778:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801d77a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d782:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 801d786:	643b      	str	r3, [r7, #64]	@ 0x40
 801d788:	2300      	movs	r3, #0
 801d78a:	647b      	str	r3, [r7, #68]	@ 0x44
 801d78c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801d790:	460b      	mov	r3, r1
 801d792:	4313      	orrs	r3, r2
 801d794:	d00e      	beq.n	801d7b4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801d796:	4b86      	ldr	r3, [pc, #536]	@ (801d9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d798:	691b      	ldr	r3, [r3, #16]
 801d79a:	4a85      	ldr	r2, [pc, #532]	@ (801d9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d79c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801d7a0:	6113      	str	r3, [r2, #16]
 801d7a2:	4b83      	ldr	r3, [pc, #524]	@ (801d9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d7a4:	6919      	ldr	r1, [r3, #16]
 801d7a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801d7ae:	4a80      	ldr	r2, [pc, #512]	@ (801d9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d7b0:	430b      	orrs	r3, r1
 801d7b2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801d7b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7bc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 801d7c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 801d7c2:	2300      	movs	r3, #0
 801d7c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801d7c6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801d7ca:	460b      	mov	r3, r1
 801d7cc:	4313      	orrs	r3, r2
 801d7ce:	d009      	beq.n	801d7e4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801d7d0:	4b77      	ldr	r3, [pc, #476]	@ (801d9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d7d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d7d4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801d7d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d7de:	4a74      	ldr	r2, [pc, #464]	@ (801d9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d7e0:	430b      	orrs	r3, r1
 801d7e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801d7e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7ec:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801d7f0:	633b      	str	r3, [r7, #48]	@ 0x30
 801d7f2:	2300      	movs	r3, #0
 801d7f4:	637b      	str	r3, [r7, #52]	@ 0x34
 801d7f6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801d7fa:	460b      	mov	r3, r1
 801d7fc:	4313      	orrs	r3, r2
 801d7fe:	d00a      	beq.n	801d816 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801d800:	4b6b      	ldr	r3, [pc, #428]	@ (801d9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d804:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 801d808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d80c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801d810:	4a67      	ldr	r2, [pc, #412]	@ (801d9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d812:	430b      	orrs	r3, r1
 801d814:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801d816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d81e:	2100      	movs	r1, #0
 801d820:	62b9      	str	r1, [r7, #40]	@ 0x28
 801d822:	f003 0301 	and.w	r3, r3, #1
 801d826:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d828:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801d82c:	460b      	mov	r3, r1
 801d82e:	4313      	orrs	r3, r2
 801d830:	d011      	beq.n	801d856 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d836:	3308      	adds	r3, #8
 801d838:	2100      	movs	r1, #0
 801d83a:	4618      	mov	r0, r3
 801d83c:	f000 fb78 	bl	801df30 <RCCEx_PLL2_Config>
 801d840:	4603      	mov	r3, r0
 801d842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801d846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d84a:	2b00      	cmp	r3, #0
 801d84c:	d003      	beq.n	801d856 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d84e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d852:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801d856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d85e:	2100      	movs	r1, #0
 801d860:	6239      	str	r1, [r7, #32]
 801d862:	f003 0302 	and.w	r3, r3, #2
 801d866:	627b      	str	r3, [r7, #36]	@ 0x24
 801d868:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801d86c:	460b      	mov	r3, r1
 801d86e:	4313      	orrs	r3, r2
 801d870:	d011      	beq.n	801d896 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d876:	3308      	adds	r3, #8
 801d878:	2101      	movs	r1, #1
 801d87a:	4618      	mov	r0, r3
 801d87c:	f000 fb58 	bl	801df30 <RCCEx_PLL2_Config>
 801d880:	4603      	mov	r3, r0
 801d882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801d886:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d88a:	2b00      	cmp	r3, #0
 801d88c:	d003      	beq.n	801d896 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d88e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d892:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801d896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d89e:	2100      	movs	r1, #0
 801d8a0:	61b9      	str	r1, [r7, #24]
 801d8a2:	f003 0304 	and.w	r3, r3, #4
 801d8a6:	61fb      	str	r3, [r7, #28]
 801d8a8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801d8ac:	460b      	mov	r3, r1
 801d8ae:	4313      	orrs	r3, r2
 801d8b0:	d011      	beq.n	801d8d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d8b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8b6:	3308      	adds	r3, #8
 801d8b8:	2102      	movs	r1, #2
 801d8ba:	4618      	mov	r0, r3
 801d8bc:	f000 fb38 	bl	801df30 <RCCEx_PLL2_Config>
 801d8c0:	4603      	mov	r3, r0
 801d8c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801d8c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d8ca:	2b00      	cmp	r3, #0
 801d8cc:	d003      	beq.n	801d8d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d8ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d8d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801d8d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8de:	2100      	movs	r1, #0
 801d8e0:	6139      	str	r1, [r7, #16]
 801d8e2:	f003 0308 	and.w	r3, r3, #8
 801d8e6:	617b      	str	r3, [r7, #20]
 801d8e8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801d8ec:	460b      	mov	r3, r1
 801d8ee:	4313      	orrs	r3, r2
 801d8f0:	d011      	beq.n	801d916 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d8f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8f6:	3328      	adds	r3, #40	@ 0x28
 801d8f8:	2100      	movs	r1, #0
 801d8fa:	4618      	mov	r0, r3
 801d8fc:	f000 fbca 	bl	801e094 <RCCEx_PLL3_Config>
 801d900:	4603      	mov	r3, r0
 801d902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 801d906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d90a:	2b00      	cmp	r3, #0
 801d90c:	d003      	beq.n	801d916 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d90e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d912:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801d916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d91e:	2100      	movs	r1, #0
 801d920:	60b9      	str	r1, [r7, #8]
 801d922:	f003 0310 	and.w	r3, r3, #16
 801d926:	60fb      	str	r3, [r7, #12]
 801d928:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801d92c:	460b      	mov	r3, r1
 801d92e:	4313      	orrs	r3, r2
 801d930:	d011      	beq.n	801d956 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d936:	3328      	adds	r3, #40	@ 0x28
 801d938:	2101      	movs	r1, #1
 801d93a:	4618      	mov	r0, r3
 801d93c:	f000 fbaa 	bl	801e094 <RCCEx_PLL3_Config>
 801d940:	4603      	mov	r3, r0
 801d942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801d946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d94a:	2b00      	cmp	r3, #0
 801d94c:	d003      	beq.n	801d956 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d94e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d952:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801d956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d95e:	2100      	movs	r1, #0
 801d960:	6039      	str	r1, [r7, #0]
 801d962:	f003 0320 	and.w	r3, r3, #32
 801d966:	607b      	str	r3, [r7, #4]
 801d968:	e9d7 1200 	ldrd	r1, r2, [r7]
 801d96c:	460b      	mov	r3, r1
 801d96e:	4313      	orrs	r3, r2
 801d970:	d011      	beq.n	801d996 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d976:	3328      	adds	r3, #40	@ 0x28
 801d978:	2102      	movs	r1, #2
 801d97a:	4618      	mov	r0, r3
 801d97c:	f000 fb8a 	bl	801e094 <RCCEx_PLL3_Config>
 801d980:	4603      	mov	r3, r0
 801d982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801d986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d98a:	2b00      	cmp	r3, #0
 801d98c:	d003      	beq.n	801d996 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d98e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d992:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 801d996:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801d99a:	2b00      	cmp	r3, #0
 801d99c:	d101      	bne.n	801d9a2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 801d99e:	2300      	movs	r3, #0
 801d9a0:	e000      	b.n	801d9a4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 801d9a2:	2301      	movs	r3, #1
}
 801d9a4:	4618      	mov	r0, r3
 801d9a6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801d9aa:	46bd      	mov	sp, r7
 801d9ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801d9b0:	58024400 	.word	0x58024400

0801d9b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801d9b4:	b580      	push	{r7, lr}
 801d9b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801d9b8:	f7fe fd96 	bl	801c4e8 <HAL_RCC_GetHCLKFreq>
 801d9bc:	4602      	mov	r2, r0
 801d9be:	4b06      	ldr	r3, [pc, #24]	@ (801d9d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801d9c0:	6a1b      	ldr	r3, [r3, #32]
 801d9c2:	091b      	lsrs	r3, r3, #4
 801d9c4:	f003 0307 	and.w	r3, r3, #7
 801d9c8:	4904      	ldr	r1, [pc, #16]	@ (801d9dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801d9ca:	5ccb      	ldrb	r3, [r1, r3]
 801d9cc:	f003 031f 	and.w	r3, r3, #31
 801d9d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801d9d4:	4618      	mov	r0, r3
 801d9d6:	bd80      	pop	{r7, pc}
 801d9d8:	58024400 	.word	0x58024400
 801d9dc:	08025b7c 	.word	0x08025b7c

0801d9e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801d9e0:	b480      	push	{r7}
 801d9e2:	b089      	sub	sp, #36	@ 0x24
 801d9e4:	af00      	add	r7, sp, #0
 801d9e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801d9e8:	4ba1      	ldr	r3, [pc, #644]	@ (801dc70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d9ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d9ec:	f003 0303 	and.w	r3, r3, #3
 801d9f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801d9f2:	4b9f      	ldr	r3, [pc, #636]	@ (801dc70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d9f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d9f6:	0b1b      	lsrs	r3, r3, #12
 801d9f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d9fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801d9fe:	4b9c      	ldr	r3, [pc, #624]	@ (801dc70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801da00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801da02:	091b      	lsrs	r3, r3, #4
 801da04:	f003 0301 	and.w	r3, r3, #1
 801da08:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801da0a:	4b99      	ldr	r3, [pc, #612]	@ (801dc70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801da0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801da0e:	08db      	lsrs	r3, r3, #3
 801da10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801da14:	693a      	ldr	r2, [r7, #16]
 801da16:	fb02 f303 	mul.w	r3, r2, r3
 801da1a:	ee07 3a90 	vmov	s15, r3
 801da1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801da22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801da26:	697b      	ldr	r3, [r7, #20]
 801da28:	2b00      	cmp	r3, #0
 801da2a:	f000 8111 	beq.w	801dc50 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801da2e:	69bb      	ldr	r3, [r7, #24]
 801da30:	2b02      	cmp	r3, #2
 801da32:	f000 8083 	beq.w	801db3c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801da36:	69bb      	ldr	r3, [r7, #24]
 801da38:	2b02      	cmp	r3, #2
 801da3a:	f200 80a1 	bhi.w	801db80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801da3e:	69bb      	ldr	r3, [r7, #24]
 801da40:	2b00      	cmp	r3, #0
 801da42:	d003      	beq.n	801da4c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801da44:	69bb      	ldr	r3, [r7, #24]
 801da46:	2b01      	cmp	r3, #1
 801da48:	d056      	beq.n	801daf8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801da4a:	e099      	b.n	801db80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801da4c:	4b88      	ldr	r3, [pc, #544]	@ (801dc70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801da4e:	681b      	ldr	r3, [r3, #0]
 801da50:	f003 0320 	and.w	r3, r3, #32
 801da54:	2b00      	cmp	r3, #0
 801da56:	d02d      	beq.n	801dab4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801da58:	4b85      	ldr	r3, [pc, #532]	@ (801dc70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801da5a:	681b      	ldr	r3, [r3, #0]
 801da5c:	08db      	lsrs	r3, r3, #3
 801da5e:	f003 0303 	and.w	r3, r3, #3
 801da62:	4a84      	ldr	r2, [pc, #528]	@ (801dc74 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801da64:	fa22 f303 	lsr.w	r3, r2, r3
 801da68:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801da6a:	68bb      	ldr	r3, [r7, #8]
 801da6c:	ee07 3a90 	vmov	s15, r3
 801da70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801da74:	697b      	ldr	r3, [r7, #20]
 801da76:	ee07 3a90 	vmov	s15, r3
 801da7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801da7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801da82:	4b7b      	ldr	r3, [pc, #492]	@ (801dc70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801da84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801da86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801da8a:	ee07 3a90 	vmov	s15, r3
 801da8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801da92:	ed97 6a03 	vldr	s12, [r7, #12]
 801da96:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801dc78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801da9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801da9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801daa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801daa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801daaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 801daae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801dab2:	e087      	b.n	801dbc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801dab4:	697b      	ldr	r3, [r7, #20]
 801dab6:	ee07 3a90 	vmov	s15, r3
 801daba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dabe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801dc7c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801dac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dac6:	4b6a      	ldr	r3, [pc, #424]	@ (801dc70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801daca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dace:	ee07 3a90 	vmov	s15, r3
 801dad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dad6:	ed97 6a03 	vldr	s12, [r7, #12]
 801dada:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801dc78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801dade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dae6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801daea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801daee:	ee67 7a27 	vmul.f32	s15, s14, s15
 801daf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801daf6:	e065      	b.n	801dbc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801daf8:	697b      	ldr	r3, [r7, #20]
 801dafa:	ee07 3a90 	vmov	s15, r3
 801dafe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801db02:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801dc80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801db06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801db0a:	4b59      	ldr	r3, [pc, #356]	@ (801dc70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801db0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801db0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801db12:	ee07 3a90 	vmov	s15, r3
 801db16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801db1a:	ed97 6a03 	vldr	s12, [r7, #12]
 801db1e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801dc78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801db22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801db26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801db2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801db2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801db32:	ee67 7a27 	vmul.f32	s15, s14, s15
 801db36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801db3a:	e043      	b.n	801dbc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801db3c:	697b      	ldr	r3, [r7, #20]
 801db3e:	ee07 3a90 	vmov	s15, r3
 801db42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801db46:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801dc84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801db4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801db4e:	4b48      	ldr	r3, [pc, #288]	@ (801dc70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801db50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801db52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801db56:	ee07 3a90 	vmov	s15, r3
 801db5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801db5e:	ed97 6a03 	vldr	s12, [r7, #12]
 801db62:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801dc78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801db66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801db6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801db6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801db72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801db76:	ee67 7a27 	vmul.f32	s15, s14, s15
 801db7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801db7e:	e021      	b.n	801dbc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801db80:	697b      	ldr	r3, [r7, #20]
 801db82:	ee07 3a90 	vmov	s15, r3
 801db86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801db8a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801dc80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801db8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801db92:	4b37      	ldr	r3, [pc, #220]	@ (801dc70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801db94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801db96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801db9a:	ee07 3a90 	vmov	s15, r3
 801db9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dba2:	ed97 6a03 	vldr	s12, [r7, #12]
 801dba6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801dc78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801dbaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dbae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dbb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801dbb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dbba:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dbbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801dbc2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801dbc4:	4b2a      	ldr	r3, [pc, #168]	@ (801dc70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dbc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801dbc8:	0a5b      	lsrs	r3, r3, #9
 801dbca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801dbce:	ee07 3a90 	vmov	s15, r3
 801dbd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dbd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801dbda:	ee37 7a87 	vadd.f32	s14, s15, s14
 801dbde:	edd7 6a07 	vldr	s13, [r7, #28]
 801dbe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801dbe6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dbea:	ee17 2a90 	vmov	r2, s15
 801dbee:	687b      	ldr	r3, [r7, #4]
 801dbf0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801dbf2:	4b1f      	ldr	r3, [pc, #124]	@ (801dc70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dbf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801dbf6:	0c1b      	lsrs	r3, r3, #16
 801dbf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801dbfc:	ee07 3a90 	vmov	s15, r3
 801dc00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dc04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801dc08:	ee37 7a87 	vadd.f32	s14, s15, s14
 801dc0c:	edd7 6a07 	vldr	s13, [r7, #28]
 801dc10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801dc14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dc18:	ee17 2a90 	vmov	r2, s15
 801dc1c:	687b      	ldr	r3, [r7, #4]
 801dc1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801dc20:	4b13      	ldr	r3, [pc, #76]	@ (801dc70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dc22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801dc24:	0e1b      	lsrs	r3, r3, #24
 801dc26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801dc2a:	ee07 3a90 	vmov	s15, r3
 801dc2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dc32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801dc36:	ee37 7a87 	vadd.f32	s14, s15, s14
 801dc3a:	edd7 6a07 	vldr	s13, [r7, #28]
 801dc3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801dc42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dc46:	ee17 2a90 	vmov	r2, s15
 801dc4a:	687b      	ldr	r3, [r7, #4]
 801dc4c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801dc4e:	e008      	b.n	801dc62 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801dc50:	687b      	ldr	r3, [r7, #4]
 801dc52:	2200      	movs	r2, #0
 801dc54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801dc56:	687b      	ldr	r3, [r7, #4]
 801dc58:	2200      	movs	r2, #0
 801dc5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801dc5c:	687b      	ldr	r3, [r7, #4]
 801dc5e:	2200      	movs	r2, #0
 801dc60:	609a      	str	r2, [r3, #8]
}
 801dc62:	bf00      	nop
 801dc64:	3724      	adds	r7, #36	@ 0x24
 801dc66:	46bd      	mov	sp, r7
 801dc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc6c:	4770      	bx	lr
 801dc6e:	bf00      	nop
 801dc70:	58024400 	.word	0x58024400
 801dc74:	03d09000 	.word	0x03d09000
 801dc78:	46000000 	.word	0x46000000
 801dc7c:	4c742400 	.word	0x4c742400
 801dc80:	4a742400 	.word	0x4a742400
 801dc84:	4bbebc20 	.word	0x4bbebc20

0801dc88 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801dc88:	b480      	push	{r7}
 801dc8a:	b089      	sub	sp, #36	@ 0x24
 801dc8c:	af00      	add	r7, sp, #0
 801dc8e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801dc90:	4ba1      	ldr	r3, [pc, #644]	@ (801df18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dc92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dc94:	f003 0303 	and.w	r3, r3, #3
 801dc98:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801dc9a:	4b9f      	ldr	r3, [pc, #636]	@ (801df18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dc9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dc9e:	0d1b      	lsrs	r3, r3, #20
 801dca0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801dca4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801dca6:	4b9c      	ldr	r3, [pc, #624]	@ (801df18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dcaa:	0a1b      	lsrs	r3, r3, #8
 801dcac:	f003 0301 	and.w	r3, r3, #1
 801dcb0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801dcb2:	4b99      	ldr	r3, [pc, #612]	@ (801df18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dcb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801dcb6:	08db      	lsrs	r3, r3, #3
 801dcb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dcbc:	693a      	ldr	r2, [r7, #16]
 801dcbe:	fb02 f303 	mul.w	r3, r2, r3
 801dcc2:	ee07 3a90 	vmov	s15, r3
 801dcc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dcca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801dcce:	697b      	ldr	r3, [r7, #20]
 801dcd0:	2b00      	cmp	r3, #0
 801dcd2:	f000 8111 	beq.w	801def8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801dcd6:	69bb      	ldr	r3, [r7, #24]
 801dcd8:	2b02      	cmp	r3, #2
 801dcda:	f000 8083 	beq.w	801dde4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801dcde:	69bb      	ldr	r3, [r7, #24]
 801dce0:	2b02      	cmp	r3, #2
 801dce2:	f200 80a1 	bhi.w	801de28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801dce6:	69bb      	ldr	r3, [r7, #24]
 801dce8:	2b00      	cmp	r3, #0
 801dcea:	d003      	beq.n	801dcf4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801dcec:	69bb      	ldr	r3, [r7, #24]
 801dcee:	2b01      	cmp	r3, #1
 801dcf0:	d056      	beq.n	801dda0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801dcf2:	e099      	b.n	801de28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801dcf4:	4b88      	ldr	r3, [pc, #544]	@ (801df18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dcf6:	681b      	ldr	r3, [r3, #0]
 801dcf8:	f003 0320 	and.w	r3, r3, #32
 801dcfc:	2b00      	cmp	r3, #0
 801dcfe:	d02d      	beq.n	801dd5c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801dd00:	4b85      	ldr	r3, [pc, #532]	@ (801df18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dd02:	681b      	ldr	r3, [r3, #0]
 801dd04:	08db      	lsrs	r3, r3, #3
 801dd06:	f003 0303 	and.w	r3, r3, #3
 801dd0a:	4a84      	ldr	r2, [pc, #528]	@ (801df1c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801dd0c:	fa22 f303 	lsr.w	r3, r2, r3
 801dd10:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801dd12:	68bb      	ldr	r3, [r7, #8]
 801dd14:	ee07 3a90 	vmov	s15, r3
 801dd18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dd1c:	697b      	ldr	r3, [r7, #20]
 801dd1e:	ee07 3a90 	vmov	s15, r3
 801dd22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dd26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dd2a:	4b7b      	ldr	r3, [pc, #492]	@ (801df18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dd2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801dd2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dd32:	ee07 3a90 	vmov	s15, r3
 801dd36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dd3a:	ed97 6a03 	vldr	s12, [r7, #12]
 801dd3e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801df20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801dd42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dd46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dd4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801dd4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dd52:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dd56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801dd5a:	e087      	b.n	801de6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801dd5c:	697b      	ldr	r3, [r7, #20]
 801dd5e:	ee07 3a90 	vmov	s15, r3
 801dd62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dd66:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801df24 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801dd6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dd6e:	4b6a      	ldr	r3, [pc, #424]	@ (801df18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dd70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801dd72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dd76:	ee07 3a90 	vmov	s15, r3
 801dd7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dd7e:	ed97 6a03 	vldr	s12, [r7, #12]
 801dd82:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801df20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801dd86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dd8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dd8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801dd92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dd96:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dd9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801dd9e:	e065      	b.n	801de6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801dda0:	697b      	ldr	r3, [r7, #20]
 801dda2:	ee07 3a90 	vmov	s15, r3
 801dda6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ddaa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801df28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801ddae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ddb2:	4b59      	ldr	r3, [pc, #356]	@ (801df18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ddb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ddb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ddba:	ee07 3a90 	vmov	s15, r3
 801ddbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ddc2:	ed97 6a03 	vldr	s12, [r7, #12]
 801ddc6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801df20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801ddca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ddce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ddd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ddd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ddda:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ddde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801dde2:	e043      	b.n	801de6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801dde4:	697b      	ldr	r3, [r7, #20]
 801dde6:	ee07 3a90 	vmov	s15, r3
 801ddea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ddee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801df2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801ddf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ddf6:	4b48      	ldr	r3, [pc, #288]	@ (801df18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ddf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ddfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ddfe:	ee07 3a90 	vmov	s15, r3
 801de02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801de06:	ed97 6a03 	vldr	s12, [r7, #12]
 801de0a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801df20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801de0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801de12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801de16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801de1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801de1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801de22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801de26:	e021      	b.n	801de6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801de28:	697b      	ldr	r3, [r7, #20]
 801de2a:	ee07 3a90 	vmov	s15, r3
 801de2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801de32:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801df28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801de36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801de3a:	4b37      	ldr	r3, [pc, #220]	@ (801df18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801de3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801de3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801de42:	ee07 3a90 	vmov	s15, r3
 801de46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801de4a:	ed97 6a03 	vldr	s12, [r7, #12]
 801de4e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801df20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801de52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801de56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801de5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801de5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801de62:	ee67 7a27 	vmul.f32	s15, s14, s15
 801de66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801de6a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801de6c:	4b2a      	ldr	r3, [pc, #168]	@ (801df18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801de6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801de70:	0a5b      	lsrs	r3, r3, #9
 801de72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801de76:	ee07 3a90 	vmov	s15, r3
 801de7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801de7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801de82:	ee37 7a87 	vadd.f32	s14, s15, s14
 801de86:	edd7 6a07 	vldr	s13, [r7, #28]
 801de8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801de8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801de92:	ee17 2a90 	vmov	r2, s15
 801de96:	687b      	ldr	r3, [r7, #4]
 801de98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801de9a:	4b1f      	ldr	r3, [pc, #124]	@ (801df18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801de9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801de9e:	0c1b      	lsrs	r3, r3, #16
 801dea0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801dea4:	ee07 3a90 	vmov	s15, r3
 801dea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801deac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801deb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 801deb4:	edd7 6a07 	vldr	s13, [r7, #28]
 801deb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801debc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dec0:	ee17 2a90 	vmov	r2, s15
 801dec4:	687b      	ldr	r3, [r7, #4]
 801dec6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801dec8:	4b13      	ldr	r3, [pc, #76]	@ (801df18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801deca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801decc:	0e1b      	lsrs	r3, r3, #24
 801dece:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ded2:	ee07 3a90 	vmov	s15, r3
 801ded6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801deda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801dede:	ee37 7a87 	vadd.f32	s14, s15, s14
 801dee2:	edd7 6a07 	vldr	s13, [r7, #28]
 801dee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801deea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801deee:	ee17 2a90 	vmov	r2, s15
 801def2:	687b      	ldr	r3, [r7, #4]
 801def4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801def6:	e008      	b.n	801df0a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801def8:	687b      	ldr	r3, [r7, #4]
 801defa:	2200      	movs	r2, #0
 801defc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801defe:	687b      	ldr	r3, [r7, #4]
 801df00:	2200      	movs	r2, #0
 801df02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801df04:	687b      	ldr	r3, [r7, #4]
 801df06:	2200      	movs	r2, #0
 801df08:	609a      	str	r2, [r3, #8]
}
 801df0a:	bf00      	nop
 801df0c:	3724      	adds	r7, #36	@ 0x24
 801df0e:	46bd      	mov	sp, r7
 801df10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df14:	4770      	bx	lr
 801df16:	bf00      	nop
 801df18:	58024400 	.word	0x58024400
 801df1c:	03d09000 	.word	0x03d09000
 801df20:	46000000 	.word	0x46000000
 801df24:	4c742400 	.word	0x4c742400
 801df28:	4a742400 	.word	0x4a742400
 801df2c:	4bbebc20 	.word	0x4bbebc20

0801df30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801df30:	b580      	push	{r7, lr}
 801df32:	b084      	sub	sp, #16
 801df34:	af00      	add	r7, sp, #0
 801df36:	6078      	str	r0, [r7, #4]
 801df38:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801df3a:	2300      	movs	r3, #0
 801df3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801df3e:	4b53      	ldr	r3, [pc, #332]	@ (801e08c <RCCEx_PLL2_Config+0x15c>)
 801df40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801df42:	f003 0303 	and.w	r3, r3, #3
 801df46:	2b03      	cmp	r3, #3
 801df48:	d101      	bne.n	801df4e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801df4a:	2301      	movs	r3, #1
 801df4c:	e099      	b.n	801e082 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801df4e:	4b4f      	ldr	r3, [pc, #316]	@ (801e08c <RCCEx_PLL2_Config+0x15c>)
 801df50:	681b      	ldr	r3, [r3, #0]
 801df52:	4a4e      	ldr	r2, [pc, #312]	@ (801e08c <RCCEx_PLL2_Config+0x15c>)
 801df54:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801df58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801df5a:	f7fb f895 	bl	8019088 <HAL_GetTick>
 801df5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801df60:	e008      	b.n	801df74 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801df62:	f7fb f891 	bl	8019088 <HAL_GetTick>
 801df66:	4602      	mov	r2, r0
 801df68:	68bb      	ldr	r3, [r7, #8]
 801df6a:	1ad3      	subs	r3, r2, r3
 801df6c:	2b02      	cmp	r3, #2
 801df6e:	d901      	bls.n	801df74 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801df70:	2303      	movs	r3, #3
 801df72:	e086      	b.n	801e082 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801df74:	4b45      	ldr	r3, [pc, #276]	@ (801e08c <RCCEx_PLL2_Config+0x15c>)
 801df76:	681b      	ldr	r3, [r3, #0]
 801df78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801df7c:	2b00      	cmp	r3, #0
 801df7e:	d1f0      	bne.n	801df62 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801df80:	4b42      	ldr	r3, [pc, #264]	@ (801e08c <RCCEx_PLL2_Config+0x15c>)
 801df82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801df84:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801df88:	687b      	ldr	r3, [r7, #4]
 801df8a:	681b      	ldr	r3, [r3, #0]
 801df8c:	031b      	lsls	r3, r3, #12
 801df8e:	493f      	ldr	r1, [pc, #252]	@ (801e08c <RCCEx_PLL2_Config+0x15c>)
 801df90:	4313      	orrs	r3, r2
 801df92:	628b      	str	r3, [r1, #40]	@ 0x28
 801df94:	687b      	ldr	r3, [r7, #4]
 801df96:	685b      	ldr	r3, [r3, #4]
 801df98:	3b01      	subs	r3, #1
 801df9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801df9e:	687b      	ldr	r3, [r7, #4]
 801dfa0:	689b      	ldr	r3, [r3, #8]
 801dfa2:	3b01      	subs	r3, #1
 801dfa4:	025b      	lsls	r3, r3, #9
 801dfa6:	b29b      	uxth	r3, r3
 801dfa8:	431a      	orrs	r2, r3
 801dfaa:	687b      	ldr	r3, [r7, #4]
 801dfac:	68db      	ldr	r3, [r3, #12]
 801dfae:	3b01      	subs	r3, #1
 801dfb0:	041b      	lsls	r3, r3, #16
 801dfb2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801dfb6:	431a      	orrs	r2, r3
 801dfb8:	687b      	ldr	r3, [r7, #4]
 801dfba:	691b      	ldr	r3, [r3, #16]
 801dfbc:	3b01      	subs	r3, #1
 801dfbe:	061b      	lsls	r3, r3, #24
 801dfc0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801dfc4:	4931      	ldr	r1, [pc, #196]	@ (801e08c <RCCEx_PLL2_Config+0x15c>)
 801dfc6:	4313      	orrs	r3, r2
 801dfc8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801dfca:	4b30      	ldr	r3, [pc, #192]	@ (801e08c <RCCEx_PLL2_Config+0x15c>)
 801dfcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dfce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801dfd2:	687b      	ldr	r3, [r7, #4]
 801dfd4:	695b      	ldr	r3, [r3, #20]
 801dfd6:	492d      	ldr	r1, [pc, #180]	@ (801e08c <RCCEx_PLL2_Config+0x15c>)
 801dfd8:	4313      	orrs	r3, r2
 801dfda:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801dfdc:	4b2b      	ldr	r3, [pc, #172]	@ (801e08c <RCCEx_PLL2_Config+0x15c>)
 801dfde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dfe0:	f023 0220 	bic.w	r2, r3, #32
 801dfe4:	687b      	ldr	r3, [r7, #4]
 801dfe6:	699b      	ldr	r3, [r3, #24]
 801dfe8:	4928      	ldr	r1, [pc, #160]	@ (801e08c <RCCEx_PLL2_Config+0x15c>)
 801dfea:	4313      	orrs	r3, r2
 801dfec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801dfee:	4b27      	ldr	r3, [pc, #156]	@ (801e08c <RCCEx_PLL2_Config+0x15c>)
 801dff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dff2:	4a26      	ldr	r2, [pc, #152]	@ (801e08c <RCCEx_PLL2_Config+0x15c>)
 801dff4:	f023 0310 	bic.w	r3, r3, #16
 801dff8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801dffa:	4b24      	ldr	r3, [pc, #144]	@ (801e08c <RCCEx_PLL2_Config+0x15c>)
 801dffc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801dffe:	4b24      	ldr	r3, [pc, #144]	@ (801e090 <RCCEx_PLL2_Config+0x160>)
 801e000:	4013      	ands	r3, r2
 801e002:	687a      	ldr	r2, [r7, #4]
 801e004:	69d2      	ldr	r2, [r2, #28]
 801e006:	00d2      	lsls	r2, r2, #3
 801e008:	4920      	ldr	r1, [pc, #128]	@ (801e08c <RCCEx_PLL2_Config+0x15c>)
 801e00a:	4313      	orrs	r3, r2
 801e00c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801e00e:	4b1f      	ldr	r3, [pc, #124]	@ (801e08c <RCCEx_PLL2_Config+0x15c>)
 801e010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e012:	4a1e      	ldr	r2, [pc, #120]	@ (801e08c <RCCEx_PLL2_Config+0x15c>)
 801e014:	f043 0310 	orr.w	r3, r3, #16
 801e018:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801e01a:	683b      	ldr	r3, [r7, #0]
 801e01c:	2b00      	cmp	r3, #0
 801e01e:	d106      	bne.n	801e02e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801e020:	4b1a      	ldr	r3, [pc, #104]	@ (801e08c <RCCEx_PLL2_Config+0x15c>)
 801e022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e024:	4a19      	ldr	r2, [pc, #100]	@ (801e08c <RCCEx_PLL2_Config+0x15c>)
 801e026:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801e02a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801e02c:	e00f      	b.n	801e04e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801e02e:	683b      	ldr	r3, [r7, #0]
 801e030:	2b01      	cmp	r3, #1
 801e032:	d106      	bne.n	801e042 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801e034:	4b15      	ldr	r3, [pc, #84]	@ (801e08c <RCCEx_PLL2_Config+0x15c>)
 801e036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e038:	4a14      	ldr	r2, [pc, #80]	@ (801e08c <RCCEx_PLL2_Config+0x15c>)
 801e03a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801e03e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801e040:	e005      	b.n	801e04e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801e042:	4b12      	ldr	r3, [pc, #72]	@ (801e08c <RCCEx_PLL2_Config+0x15c>)
 801e044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e046:	4a11      	ldr	r2, [pc, #68]	@ (801e08c <RCCEx_PLL2_Config+0x15c>)
 801e048:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801e04c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801e04e:	4b0f      	ldr	r3, [pc, #60]	@ (801e08c <RCCEx_PLL2_Config+0x15c>)
 801e050:	681b      	ldr	r3, [r3, #0]
 801e052:	4a0e      	ldr	r2, [pc, #56]	@ (801e08c <RCCEx_PLL2_Config+0x15c>)
 801e054:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801e058:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e05a:	f7fb f815 	bl	8019088 <HAL_GetTick>
 801e05e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801e060:	e008      	b.n	801e074 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801e062:	f7fb f811 	bl	8019088 <HAL_GetTick>
 801e066:	4602      	mov	r2, r0
 801e068:	68bb      	ldr	r3, [r7, #8]
 801e06a:	1ad3      	subs	r3, r2, r3
 801e06c:	2b02      	cmp	r3, #2
 801e06e:	d901      	bls.n	801e074 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801e070:	2303      	movs	r3, #3
 801e072:	e006      	b.n	801e082 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801e074:	4b05      	ldr	r3, [pc, #20]	@ (801e08c <RCCEx_PLL2_Config+0x15c>)
 801e076:	681b      	ldr	r3, [r3, #0]
 801e078:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801e07c:	2b00      	cmp	r3, #0
 801e07e:	d0f0      	beq.n	801e062 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801e080:	7bfb      	ldrb	r3, [r7, #15]
}
 801e082:	4618      	mov	r0, r3
 801e084:	3710      	adds	r7, #16
 801e086:	46bd      	mov	sp, r7
 801e088:	bd80      	pop	{r7, pc}
 801e08a:	bf00      	nop
 801e08c:	58024400 	.word	0x58024400
 801e090:	ffff0007 	.word	0xffff0007

0801e094 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801e094:	b580      	push	{r7, lr}
 801e096:	b084      	sub	sp, #16
 801e098:	af00      	add	r7, sp, #0
 801e09a:	6078      	str	r0, [r7, #4]
 801e09c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801e09e:	2300      	movs	r3, #0
 801e0a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801e0a2:	4b53      	ldr	r3, [pc, #332]	@ (801e1f0 <RCCEx_PLL3_Config+0x15c>)
 801e0a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e0a6:	f003 0303 	and.w	r3, r3, #3
 801e0aa:	2b03      	cmp	r3, #3
 801e0ac:	d101      	bne.n	801e0b2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801e0ae:	2301      	movs	r3, #1
 801e0b0:	e099      	b.n	801e1e6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801e0b2:	4b4f      	ldr	r3, [pc, #316]	@ (801e1f0 <RCCEx_PLL3_Config+0x15c>)
 801e0b4:	681b      	ldr	r3, [r3, #0]
 801e0b6:	4a4e      	ldr	r2, [pc, #312]	@ (801e1f0 <RCCEx_PLL3_Config+0x15c>)
 801e0b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801e0bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e0be:	f7fa ffe3 	bl	8019088 <HAL_GetTick>
 801e0c2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801e0c4:	e008      	b.n	801e0d8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801e0c6:	f7fa ffdf 	bl	8019088 <HAL_GetTick>
 801e0ca:	4602      	mov	r2, r0
 801e0cc:	68bb      	ldr	r3, [r7, #8]
 801e0ce:	1ad3      	subs	r3, r2, r3
 801e0d0:	2b02      	cmp	r3, #2
 801e0d2:	d901      	bls.n	801e0d8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801e0d4:	2303      	movs	r3, #3
 801e0d6:	e086      	b.n	801e1e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801e0d8:	4b45      	ldr	r3, [pc, #276]	@ (801e1f0 <RCCEx_PLL3_Config+0x15c>)
 801e0da:	681b      	ldr	r3, [r3, #0]
 801e0dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801e0e0:	2b00      	cmp	r3, #0
 801e0e2:	d1f0      	bne.n	801e0c6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801e0e4:	4b42      	ldr	r3, [pc, #264]	@ (801e1f0 <RCCEx_PLL3_Config+0x15c>)
 801e0e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e0e8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 801e0ec:	687b      	ldr	r3, [r7, #4]
 801e0ee:	681b      	ldr	r3, [r3, #0]
 801e0f0:	051b      	lsls	r3, r3, #20
 801e0f2:	493f      	ldr	r1, [pc, #252]	@ (801e1f0 <RCCEx_PLL3_Config+0x15c>)
 801e0f4:	4313      	orrs	r3, r2
 801e0f6:	628b      	str	r3, [r1, #40]	@ 0x28
 801e0f8:	687b      	ldr	r3, [r7, #4]
 801e0fa:	685b      	ldr	r3, [r3, #4]
 801e0fc:	3b01      	subs	r3, #1
 801e0fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801e102:	687b      	ldr	r3, [r7, #4]
 801e104:	689b      	ldr	r3, [r3, #8]
 801e106:	3b01      	subs	r3, #1
 801e108:	025b      	lsls	r3, r3, #9
 801e10a:	b29b      	uxth	r3, r3
 801e10c:	431a      	orrs	r2, r3
 801e10e:	687b      	ldr	r3, [r7, #4]
 801e110:	68db      	ldr	r3, [r3, #12]
 801e112:	3b01      	subs	r3, #1
 801e114:	041b      	lsls	r3, r3, #16
 801e116:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801e11a:	431a      	orrs	r2, r3
 801e11c:	687b      	ldr	r3, [r7, #4]
 801e11e:	691b      	ldr	r3, [r3, #16]
 801e120:	3b01      	subs	r3, #1
 801e122:	061b      	lsls	r3, r3, #24
 801e124:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801e128:	4931      	ldr	r1, [pc, #196]	@ (801e1f0 <RCCEx_PLL3_Config+0x15c>)
 801e12a:	4313      	orrs	r3, r2
 801e12c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801e12e:	4b30      	ldr	r3, [pc, #192]	@ (801e1f0 <RCCEx_PLL3_Config+0x15c>)
 801e130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e132:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801e136:	687b      	ldr	r3, [r7, #4]
 801e138:	695b      	ldr	r3, [r3, #20]
 801e13a:	492d      	ldr	r1, [pc, #180]	@ (801e1f0 <RCCEx_PLL3_Config+0x15c>)
 801e13c:	4313      	orrs	r3, r2
 801e13e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801e140:	4b2b      	ldr	r3, [pc, #172]	@ (801e1f0 <RCCEx_PLL3_Config+0x15c>)
 801e142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e144:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801e148:	687b      	ldr	r3, [r7, #4]
 801e14a:	699b      	ldr	r3, [r3, #24]
 801e14c:	4928      	ldr	r1, [pc, #160]	@ (801e1f0 <RCCEx_PLL3_Config+0x15c>)
 801e14e:	4313      	orrs	r3, r2
 801e150:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801e152:	4b27      	ldr	r3, [pc, #156]	@ (801e1f0 <RCCEx_PLL3_Config+0x15c>)
 801e154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e156:	4a26      	ldr	r2, [pc, #152]	@ (801e1f0 <RCCEx_PLL3_Config+0x15c>)
 801e158:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801e15c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801e15e:	4b24      	ldr	r3, [pc, #144]	@ (801e1f0 <RCCEx_PLL3_Config+0x15c>)
 801e160:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801e162:	4b24      	ldr	r3, [pc, #144]	@ (801e1f4 <RCCEx_PLL3_Config+0x160>)
 801e164:	4013      	ands	r3, r2
 801e166:	687a      	ldr	r2, [r7, #4]
 801e168:	69d2      	ldr	r2, [r2, #28]
 801e16a:	00d2      	lsls	r2, r2, #3
 801e16c:	4920      	ldr	r1, [pc, #128]	@ (801e1f0 <RCCEx_PLL3_Config+0x15c>)
 801e16e:	4313      	orrs	r3, r2
 801e170:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801e172:	4b1f      	ldr	r3, [pc, #124]	@ (801e1f0 <RCCEx_PLL3_Config+0x15c>)
 801e174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e176:	4a1e      	ldr	r2, [pc, #120]	@ (801e1f0 <RCCEx_PLL3_Config+0x15c>)
 801e178:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801e17c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801e17e:	683b      	ldr	r3, [r7, #0]
 801e180:	2b00      	cmp	r3, #0
 801e182:	d106      	bne.n	801e192 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801e184:	4b1a      	ldr	r3, [pc, #104]	@ (801e1f0 <RCCEx_PLL3_Config+0x15c>)
 801e186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e188:	4a19      	ldr	r2, [pc, #100]	@ (801e1f0 <RCCEx_PLL3_Config+0x15c>)
 801e18a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801e18e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801e190:	e00f      	b.n	801e1b2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801e192:	683b      	ldr	r3, [r7, #0]
 801e194:	2b01      	cmp	r3, #1
 801e196:	d106      	bne.n	801e1a6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801e198:	4b15      	ldr	r3, [pc, #84]	@ (801e1f0 <RCCEx_PLL3_Config+0x15c>)
 801e19a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e19c:	4a14      	ldr	r2, [pc, #80]	@ (801e1f0 <RCCEx_PLL3_Config+0x15c>)
 801e19e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801e1a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801e1a4:	e005      	b.n	801e1b2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801e1a6:	4b12      	ldr	r3, [pc, #72]	@ (801e1f0 <RCCEx_PLL3_Config+0x15c>)
 801e1a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e1aa:	4a11      	ldr	r2, [pc, #68]	@ (801e1f0 <RCCEx_PLL3_Config+0x15c>)
 801e1ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801e1b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801e1b2:	4b0f      	ldr	r3, [pc, #60]	@ (801e1f0 <RCCEx_PLL3_Config+0x15c>)
 801e1b4:	681b      	ldr	r3, [r3, #0]
 801e1b6:	4a0e      	ldr	r2, [pc, #56]	@ (801e1f0 <RCCEx_PLL3_Config+0x15c>)
 801e1b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801e1bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e1be:	f7fa ff63 	bl	8019088 <HAL_GetTick>
 801e1c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801e1c4:	e008      	b.n	801e1d8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801e1c6:	f7fa ff5f 	bl	8019088 <HAL_GetTick>
 801e1ca:	4602      	mov	r2, r0
 801e1cc:	68bb      	ldr	r3, [r7, #8]
 801e1ce:	1ad3      	subs	r3, r2, r3
 801e1d0:	2b02      	cmp	r3, #2
 801e1d2:	d901      	bls.n	801e1d8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801e1d4:	2303      	movs	r3, #3
 801e1d6:	e006      	b.n	801e1e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801e1d8:	4b05      	ldr	r3, [pc, #20]	@ (801e1f0 <RCCEx_PLL3_Config+0x15c>)
 801e1da:	681b      	ldr	r3, [r3, #0]
 801e1dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801e1e0:	2b00      	cmp	r3, #0
 801e1e2:	d0f0      	beq.n	801e1c6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801e1e4:	7bfb      	ldrb	r3, [r7, #15]
}
 801e1e6:	4618      	mov	r0, r3
 801e1e8:	3710      	adds	r7, #16
 801e1ea:	46bd      	mov	sp, r7
 801e1ec:	bd80      	pop	{r7, pc}
 801e1ee:	bf00      	nop
 801e1f0:	58024400 	.word	0x58024400
 801e1f4:	ffff0007 	.word	0xffff0007

0801e1f8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801e1f8:	b580      	push	{r7, lr}
 801e1fa:	b084      	sub	sp, #16
 801e1fc:	af00      	add	r7, sp, #0
 801e1fe:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801e200:	687b      	ldr	r3, [r7, #4]
 801e202:	2b00      	cmp	r3, #0
 801e204:	d101      	bne.n	801e20a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801e206:	2301      	movs	r3, #1
 801e208:	e10f      	b.n	801e42a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801e20a:	687b      	ldr	r3, [r7, #4]
 801e20c:	2200      	movs	r2, #0
 801e20e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801e210:	687b      	ldr	r3, [r7, #4]
 801e212:	681b      	ldr	r3, [r3, #0]
 801e214:	4a87      	ldr	r2, [pc, #540]	@ (801e434 <HAL_SPI_Init+0x23c>)
 801e216:	4293      	cmp	r3, r2
 801e218:	d00f      	beq.n	801e23a <HAL_SPI_Init+0x42>
 801e21a:	687b      	ldr	r3, [r7, #4]
 801e21c:	681b      	ldr	r3, [r3, #0]
 801e21e:	4a86      	ldr	r2, [pc, #536]	@ (801e438 <HAL_SPI_Init+0x240>)
 801e220:	4293      	cmp	r3, r2
 801e222:	d00a      	beq.n	801e23a <HAL_SPI_Init+0x42>
 801e224:	687b      	ldr	r3, [r7, #4]
 801e226:	681b      	ldr	r3, [r3, #0]
 801e228:	4a84      	ldr	r2, [pc, #528]	@ (801e43c <HAL_SPI_Init+0x244>)
 801e22a:	4293      	cmp	r3, r2
 801e22c:	d005      	beq.n	801e23a <HAL_SPI_Init+0x42>
 801e22e:	687b      	ldr	r3, [r7, #4]
 801e230:	68db      	ldr	r3, [r3, #12]
 801e232:	2b0f      	cmp	r3, #15
 801e234:	d901      	bls.n	801e23a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801e236:	2301      	movs	r3, #1
 801e238:	e0f7      	b.n	801e42a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801e23a:	6878      	ldr	r0, [r7, #4]
 801e23c:	f000 fbba 	bl	801e9b4 <SPI_GetPacketSize>
 801e240:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801e242:	687b      	ldr	r3, [r7, #4]
 801e244:	681b      	ldr	r3, [r3, #0]
 801e246:	4a7b      	ldr	r2, [pc, #492]	@ (801e434 <HAL_SPI_Init+0x23c>)
 801e248:	4293      	cmp	r3, r2
 801e24a:	d00c      	beq.n	801e266 <HAL_SPI_Init+0x6e>
 801e24c:	687b      	ldr	r3, [r7, #4]
 801e24e:	681b      	ldr	r3, [r3, #0]
 801e250:	4a79      	ldr	r2, [pc, #484]	@ (801e438 <HAL_SPI_Init+0x240>)
 801e252:	4293      	cmp	r3, r2
 801e254:	d007      	beq.n	801e266 <HAL_SPI_Init+0x6e>
 801e256:	687b      	ldr	r3, [r7, #4]
 801e258:	681b      	ldr	r3, [r3, #0]
 801e25a:	4a78      	ldr	r2, [pc, #480]	@ (801e43c <HAL_SPI_Init+0x244>)
 801e25c:	4293      	cmp	r3, r2
 801e25e:	d002      	beq.n	801e266 <HAL_SPI_Init+0x6e>
 801e260:	68fb      	ldr	r3, [r7, #12]
 801e262:	2b08      	cmp	r3, #8
 801e264:	d811      	bhi.n	801e28a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801e266:	687b      	ldr	r3, [r7, #4]
 801e268:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801e26a:	4a72      	ldr	r2, [pc, #456]	@ (801e434 <HAL_SPI_Init+0x23c>)
 801e26c:	4293      	cmp	r3, r2
 801e26e:	d009      	beq.n	801e284 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801e270:	687b      	ldr	r3, [r7, #4]
 801e272:	681b      	ldr	r3, [r3, #0]
 801e274:	4a70      	ldr	r2, [pc, #448]	@ (801e438 <HAL_SPI_Init+0x240>)
 801e276:	4293      	cmp	r3, r2
 801e278:	d004      	beq.n	801e284 <HAL_SPI_Init+0x8c>
 801e27a:	687b      	ldr	r3, [r7, #4]
 801e27c:	681b      	ldr	r3, [r3, #0]
 801e27e:	4a6f      	ldr	r2, [pc, #444]	@ (801e43c <HAL_SPI_Init+0x244>)
 801e280:	4293      	cmp	r3, r2
 801e282:	d104      	bne.n	801e28e <HAL_SPI_Init+0x96>
 801e284:	68fb      	ldr	r3, [r7, #12]
 801e286:	2b10      	cmp	r3, #16
 801e288:	d901      	bls.n	801e28e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801e28a:	2301      	movs	r3, #1
 801e28c:	e0cd      	b.n	801e42a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801e28e:	687b      	ldr	r3, [r7, #4]
 801e290:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801e294:	b2db      	uxtb	r3, r3
 801e296:	2b00      	cmp	r3, #0
 801e298:	d106      	bne.n	801e2a8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801e29a:	687b      	ldr	r3, [r7, #4]
 801e29c:	2200      	movs	r2, #0
 801e29e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801e2a2:	6878      	ldr	r0, [r7, #4]
 801e2a4:	f7e3 fa2a 	bl	80016fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801e2a8:	687b      	ldr	r3, [r7, #4]
 801e2aa:	2202      	movs	r2, #2
 801e2ac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801e2b0:	687b      	ldr	r3, [r7, #4]
 801e2b2:	681b      	ldr	r3, [r3, #0]
 801e2b4:	681a      	ldr	r2, [r3, #0]
 801e2b6:	687b      	ldr	r3, [r7, #4]
 801e2b8:	681b      	ldr	r3, [r3, #0]
 801e2ba:	f022 0201 	bic.w	r2, r2, #1
 801e2be:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 801e2c0:	687b      	ldr	r3, [r7, #4]
 801e2c2:	681b      	ldr	r3, [r3, #0]
 801e2c4:	689b      	ldr	r3, [r3, #8]
 801e2c6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 801e2ca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801e2cc:	687b      	ldr	r3, [r7, #4]
 801e2ce:	699b      	ldr	r3, [r3, #24]
 801e2d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801e2d4:	d119      	bne.n	801e30a <HAL_SPI_Init+0x112>
 801e2d6:	687b      	ldr	r3, [r7, #4]
 801e2d8:	685b      	ldr	r3, [r3, #4]
 801e2da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801e2de:	d103      	bne.n	801e2e8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801e2e0:	687b      	ldr	r3, [r7, #4]
 801e2e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801e2e4:	2b00      	cmp	r3, #0
 801e2e6:	d008      	beq.n	801e2fa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801e2e8:	687b      	ldr	r3, [r7, #4]
 801e2ea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801e2ec:	2b00      	cmp	r3, #0
 801e2ee:	d10c      	bne.n	801e30a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 801e2f0:	687b      	ldr	r3, [r7, #4]
 801e2f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801e2f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e2f8:	d107      	bne.n	801e30a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801e2fa:	687b      	ldr	r3, [r7, #4]
 801e2fc:	681b      	ldr	r3, [r3, #0]
 801e2fe:	681a      	ldr	r2, [r3, #0]
 801e300:	687b      	ldr	r3, [r7, #4]
 801e302:	681b      	ldr	r3, [r3, #0]
 801e304:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801e308:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801e30a:	687b      	ldr	r3, [r7, #4]
 801e30c:	685b      	ldr	r3, [r3, #4]
 801e30e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801e312:	2b00      	cmp	r3, #0
 801e314:	d00f      	beq.n	801e336 <HAL_SPI_Init+0x13e>
 801e316:	687b      	ldr	r3, [r7, #4]
 801e318:	68db      	ldr	r3, [r3, #12]
 801e31a:	2b06      	cmp	r3, #6
 801e31c:	d90b      	bls.n	801e336 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801e31e:	687b      	ldr	r3, [r7, #4]
 801e320:	681b      	ldr	r3, [r3, #0]
 801e322:	681b      	ldr	r3, [r3, #0]
 801e324:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 801e328:	687b      	ldr	r3, [r7, #4]
 801e32a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801e32c:	687b      	ldr	r3, [r7, #4]
 801e32e:	681b      	ldr	r3, [r3, #0]
 801e330:	430a      	orrs	r2, r1
 801e332:	601a      	str	r2, [r3, #0]
 801e334:	e007      	b.n	801e346 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801e336:	687b      	ldr	r3, [r7, #4]
 801e338:	681b      	ldr	r3, [r3, #0]
 801e33a:	681a      	ldr	r2, [r3, #0]
 801e33c:	687b      	ldr	r3, [r7, #4]
 801e33e:	681b      	ldr	r3, [r3, #0]
 801e340:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801e344:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801e346:	687b      	ldr	r3, [r7, #4]
 801e348:	69da      	ldr	r2, [r3, #28]
 801e34a:	687b      	ldr	r3, [r7, #4]
 801e34c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e34e:	431a      	orrs	r2, r3
 801e350:	68bb      	ldr	r3, [r7, #8]
 801e352:	431a      	orrs	r2, r3
 801e354:	687b      	ldr	r3, [r7, #4]
 801e356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e358:	ea42 0103 	orr.w	r1, r2, r3
 801e35c:	687b      	ldr	r3, [r7, #4]
 801e35e:	68da      	ldr	r2, [r3, #12]
 801e360:	687b      	ldr	r3, [r7, #4]
 801e362:	681b      	ldr	r3, [r3, #0]
 801e364:	430a      	orrs	r2, r1
 801e366:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801e368:	687b      	ldr	r3, [r7, #4]
 801e36a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801e36c:	687b      	ldr	r3, [r7, #4]
 801e36e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e370:	431a      	orrs	r2, r3
 801e372:	687b      	ldr	r3, [r7, #4]
 801e374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e376:	431a      	orrs	r2, r3
 801e378:	687b      	ldr	r3, [r7, #4]
 801e37a:	699b      	ldr	r3, [r3, #24]
 801e37c:	431a      	orrs	r2, r3
 801e37e:	687b      	ldr	r3, [r7, #4]
 801e380:	691b      	ldr	r3, [r3, #16]
 801e382:	431a      	orrs	r2, r3
 801e384:	687b      	ldr	r3, [r7, #4]
 801e386:	695b      	ldr	r3, [r3, #20]
 801e388:	431a      	orrs	r2, r3
 801e38a:	687b      	ldr	r3, [r7, #4]
 801e38c:	6a1b      	ldr	r3, [r3, #32]
 801e38e:	431a      	orrs	r2, r3
 801e390:	687b      	ldr	r3, [r7, #4]
 801e392:	685b      	ldr	r3, [r3, #4]
 801e394:	431a      	orrs	r2, r3
 801e396:	687b      	ldr	r3, [r7, #4]
 801e398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e39a:	431a      	orrs	r2, r3
 801e39c:	687b      	ldr	r3, [r7, #4]
 801e39e:	689b      	ldr	r3, [r3, #8]
 801e3a0:	431a      	orrs	r2, r3
 801e3a2:	687b      	ldr	r3, [r7, #4]
 801e3a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e3a6:	ea42 0103 	orr.w	r1, r2, r3
 801e3aa:	687b      	ldr	r3, [r7, #4]
 801e3ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801e3ae:	687b      	ldr	r3, [r7, #4]
 801e3b0:	681b      	ldr	r3, [r3, #0]
 801e3b2:	430a      	orrs	r2, r1
 801e3b4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801e3b6:	687b      	ldr	r3, [r7, #4]
 801e3b8:	685b      	ldr	r3, [r3, #4]
 801e3ba:	2b00      	cmp	r3, #0
 801e3bc:	d113      	bne.n	801e3e6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801e3be:	687b      	ldr	r3, [r7, #4]
 801e3c0:	681b      	ldr	r3, [r3, #0]
 801e3c2:	689b      	ldr	r3, [r3, #8]
 801e3c4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 801e3c8:	687b      	ldr	r3, [r7, #4]
 801e3ca:	681b      	ldr	r3, [r3, #0]
 801e3cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801e3d0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801e3d2:	687b      	ldr	r3, [r7, #4]
 801e3d4:	681b      	ldr	r3, [r3, #0]
 801e3d6:	689b      	ldr	r3, [r3, #8]
 801e3d8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 801e3dc:	687b      	ldr	r3, [r7, #4]
 801e3de:	681b      	ldr	r3, [r3, #0]
 801e3e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801e3e4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801e3e6:	687b      	ldr	r3, [r7, #4]
 801e3e8:	681b      	ldr	r3, [r3, #0]
 801e3ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801e3ec:	687b      	ldr	r3, [r7, #4]
 801e3ee:	681b      	ldr	r3, [r3, #0]
 801e3f0:	f022 0201 	bic.w	r2, r2, #1
 801e3f4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801e3f6:	687b      	ldr	r3, [r7, #4]
 801e3f8:	685b      	ldr	r3, [r3, #4]
 801e3fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801e3fe:	2b00      	cmp	r3, #0
 801e400:	d00a      	beq.n	801e418 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801e402:	687b      	ldr	r3, [r7, #4]
 801e404:	681b      	ldr	r3, [r3, #0]
 801e406:	68db      	ldr	r3, [r3, #12]
 801e408:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801e40c:	687b      	ldr	r3, [r7, #4]
 801e40e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801e410:	687b      	ldr	r3, [r7, #4]
 801e412:	681b      	ldr	r3, [r3, #0]
 801e414:	430a      	orrs	r2, r1
 801e416:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801e418:	687b      	ldr	r3, [r7, #4]
 801e41a:	2200      	movs	r2, #0
 801e41c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 801e420:	687b      	ldr	r3, [r7, #4]
 801e422:	2201      	movs	r2, #1
 801e424:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 801e428:	2300      	movs	r3, #0
}
 801e42a:	4618      	mov	r0, r3
 801e42c:	3710      	adds	r7, #16
 801e42e:	46bd      	mov	sp, r7
 801e430:	bd80      	pop	{r7, pc}
 801e432:	bf00      	nop
 801e434:	40013000 	.word	0x40013000
 801e438:	40003800 	.word	0x40003800
 801e43c:	40003c00 	.word	0x40003c00

0801e440 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801e440:	b580      	push	{r7, lr}
 801e442:	b08a      	sub	sp, #40	@ 0x28
 801e444:	af00      	add	r7, sp, #0
 801e446:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 801e448:	687b      	ldr	r3, [r7, #4]
 801e44a:	681b      	ldr	r3, [r3, #0]
 801e44c:	691b      	ldr	r3, [r3, #16]
 801e44e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 801e450:	687b      	ldr	r3, [r7, #4]
 801e452:	681b      	ldr	r3, [r3, #0]
 801e454:	695b      	ldr	r3, [r3, #20]
 801e456:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 801e458:	6a3a      	ldr	r2, [r7, #32]
 801e45a:	69fb      	ldr	r3, [r7, #28]
 801e45c:	4013      	ands	r3, r2
 801e45e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 801e460:	687b      	ldr	r3, [r7, #4]
 801e462:	681b      	ldr	r3, [r3, #0]
 801e464:	689b      	ldr	r3, [r3, #8]
 801e466:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 801e468:	2300      	movs	r3, #0
 801e46a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 801e46c:	687b      	ldr	r3, [r7, #4]
 801e46e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801e472:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801e474:	687b      	ldr	r3, [r7, #4]
 801e476:	681b      	ldr	r3, [r3, #0]
 801e478:	3330      	adds	r3, #48	@ 0x30
 801e47a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 801e47c:	69fb      	ldr	r3, [r7, #28]
 801e47e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801e482:	2b00      	cmp	r3, #0
 801e484:	d010      	beq.n	801e4a8 <HAL_SPI_IRQHandler+0x68>
 801e486:	6a3b      	ldr	r3, [r7, #32]
 801e488:	f003 0308 	and.w	r3, r3, #8
 801e48c:	2b00      	cmp	r3, #0
 801e48e:	d00b      	beq.n	801e4a8 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801e490:	687b      	ldr	r3, [r7, #4]
 801e492:	681b      	ldr	r3, [r3, #0]
 801e494:	699a      	ldr	r2, [r3, #24]
 801e496:	687b      	ldr	r3, [r7, #4]
 801e498:	681b      	ldr	r3, [r3, #0]
 801e49a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801e49e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 801e4a0:	6878      	ldr	r0, [r7, #4]
 801e4a2:	f000 f9c3 	bl	801e82c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 801e4a6:	e192      	b.n	801e7ce <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801e4a8:	69bb      	ldr	r3, [r7, #24]
 801e4aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801e4ae:	2b00      	cmp	r3, #0
 801e4b0:	d113      	bne.n	801e4da <HAL_SPI_IRQHandler+0x9a>
 801e4b2:	69bb      	ldr	r3, [r7, #24]
 801e4b4:	f003 0320 	and.w	r3, r3, #32
 801e4b8:	2b00      	cmp	r3, #0
 801e4ba:	d10e      	bne.n	801e4da <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 801e4bc:	69bb      	ldr	r3, [r7, #24]
 801e4be:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801e4c2:	2b00      	cmp	r3, #0
 801e4c4:	d009      	beq.n	801e4da <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 801e4c6:	687b      	ldr	r3, [r7, #4]
 801e4c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e4ca:	6878      	ldr	r0, [r7, #4]
 801e4cc:	4798      	blx	r3
    hspi->RxISR(hspi);
 801e4ce:	687b      	ldr	r3, [r7, #4]
 801e4d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e4d2:	6878      	ldr	r0, [r7, #4]
 801e4d4:	4798      	blx	r3
    handled = 1UL;
 801e4d6:	2301      	movs	r3, #1
 801e4d8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801e4da:	69bb      	ldr	r3, [r7, #24]
 801e4dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801e4e0:	2b00      	cmp	r3, #0
 801e4e2:	d10f      	bne.n	801e504 <HAL_SPI_IRQHandler+0xc4>
 801e4e4:	69bb      	ldr	r3, [r7, #24]
 801e4e6:	f003 0301 	and.w	r3, r3, #1
 801e4ea:	2b00      	cmp	r3, #0
 801e4ec:	d00a      	beq.n	801e504 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801e4ee:	69bb      	ldr	r3, [r7, #24]
 801e4f0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801e4f4:	2b00      	cmp	r3, #0
 801e4f6:	d105      	bne.n	801e504 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 801e4f8:	687b      	ldr	r3, [r7, #4]
 801e4fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e4fc:	6878      	ldr	r0, [r7, #4]
 801e4fe:	4798      	blx	r3
    handled = 1UL;
 801e500:	2301      	movs	r3, #1
 801e502:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801e504:	69bb      	ldr	r3, [r7, #24]
 801e506:	f003 0320 	and.w	r3, r3, #32
 801e50a:	2b00      	cmp	r3, #0
 801e50c:	d10f      	bne.n	801e52e <HAL_SPI_IRQHandler+0xee>
 801e50e:	69bb      	ldr	r3, [r7, #24]
 801e510:	f003 0302 	and.w	r3, r3, #2
 801e514:	2b00      	cmp	r3, #0
 801e516:	d00a      	beq.n	801e52e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801e518:	69bb      	ldr	r3, [r7, #24]
 801e51a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801e51e:	2b00      	cmp	r3, #0
 801e520:	d105      	bne.n	801e52e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 801e522:	687b      	ldr	r3, [r7, #4]
 801e524:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e526:	6878      	ldr	r0, [r7, #4]
 801e528:	4798      	blx	r3
    handled = 1UL;
 801e52a:	2301      	movs	r3, #1
 801e52c:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 801e52e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e530:	2b00      	cmp	r3, #0
 801e532:	f040 8147 	bne.w	801e7c4 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 801e536:	69bb      	ldr	r3, [r7, #24]
 801e538:	f003 0308 	and.w	r3, r3, #8
 801e53c:	2b00      	cmp	r3, #0
 801e53e:	f000 808b 	beq.w	801e658 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801e542:	687b      	ldr	r3, [r7, #4]
 801e544:	681b      	ldr	r3, [r3, #0]
 801e546:	699a      	ldr	r2, [r3, #24]
 801e548:	687b      	ldr	r3, [r7, #4]
 801e54a:	681b      	ldr	r3, [r3, #0]
 801e54c:	f042 0208 	orr.w	r2, r2, #8
 801e550:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801e552:	687b      	ldr	r3, [r7, #4]
 801e554:	681b      	ldr	r3, [r3, #0]
 801e556:	699a      	ldr	r2, [r3, #24]
 801e558:	687b      	ldr	r3, [r7, #4]
 801e55a:	681b      	ldr	r3, [r3, #0]
 801e55c:	f042 0210 	orr.w	r2, r2, #16
 801e560:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801e562:	687b      	ldr	r3, [r7, #4]
 801e564:	681b      	ldr	r3, [r3, #0]
 801e566:	699a      	ldr	r2, [r3, #24]
 801e568:	687b      	ldr	r3, [r7, #4]
 801e56a:	681b      	ldr	r3, [r3, #0]
 801e56c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801e570:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 801e572:	687b      	ldr	r3, [r7, #4]
 801e574:	681b      	ldr	r3, [r3, #0]
 801e576:	691a      	ldr	r2, [r3, #16]
 801e578:	687b      	ldr	r3, [r7, #4]
 801e57a:	681b      	ldr	r3, [r3, #0]
 801e57c:	f022 0208 	bic.w	r2, r2, #8
 801e580:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801e582:	687b      	ldr	r3, [r7, #4]
 801e584:	681b      	ldr	r3, [r3, #0]
 801e586:	689b      	ldr	r3, [r3, #8]
 801e588:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801e58c:	2b00      	cmp	r3, #0
 801e58e:	d13d      	bne.n	801e60c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 801e590:	e036      	b.n	801e600 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801e592:	687b      	ldr	r3, [r7, #4]
 801e594:	68db      	ldr	r3, [r3, #12]
 801e596:	2b0f      	cmp	r3, #15
 801e598:	d90b      	bls.n	801e5b2 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801e59a:	687b      	ldr	r3, [r7, #4]
 801e59c:	681a      	ldr	r2, [r3, #0]
 801e59e:	687b      	ldr	r3, [r7, #4]
 801e5a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e5a2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801e5a4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801e5a6:	687b      	ldr	r3, [r7, #4]
 801e5a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e5aa:	1d1a      	adds	r2, r3, #4
 801e5ac:	687b      	ldr	r3, [r7, #4]
 801e5ae:	665a      	str	r2, [r3, #100]	@ 0x64
 801e5b0:	e01d      	b.n	801e5ee <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801e5b2:	687b      	ldr	r3, [r7, #4]
 801e5b4:	68db      	ldr	r3, [r3, #12]
 801e5b6:	2b07      	cmp	r3, #7
 801e5b8:	d90b      	bls.n	801e5d2 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801e5ba:	687b      	ldr	r3, [r7, #4]
 801e5bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e5be:	68fa      	ldr	r2, [r7, #12]
 801e5c0:	8812      	ldrh	r2, [r2, #0]
 801e5c2:	b292      	uxth	r2, r2
 801e5c4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801e5c6:	687b      	ldr	r3, [r7, #4]
 801e5c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e5ca:	1c9a      	adds	r2, r3, #2
 801e5cc:	687b      	ldr	r3, [r7, #4]
 801e5ce:	665a      	str	r2, [r3, #100]	@ 0x64
 801e5d0:	e00d      	b.n	801e5ee <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801e5d2:	687b      	ldr	r3, [r7, #4]
 801e5d4:	681b      	ldr	r3, [r3, #0]
 801e5d6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801e5da:	687b      	ldr	r3, [r7, #4]
 801e5dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e5de:	7812      	ldrb	r2, [r2, #0]
 801e5e0:	b2d2      	uxtb	r2, r2
 801e5e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801e5e4:	687b      	ldr	r3, [r7, #4]
 801e5e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e5e8:	1c5a      	adds	r2, r3, #1
 801e5ea:	687b      	ldr	r3, [r7, #4]
 801e5ec:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 801e5ee:	687b      	ldr	r3, [r7, #4]
 801e5f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801e5f4:	b29b      	uxth	r3, r3
 801e5f6:	3b01      	subs	r3, #1
 801e5f8:	b29a      	uxth	r2, r3
 801e5fa:	687b      	ldr	r3, [r7, #4]
 801e5fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 801e600:	687b      	ldr	r3, [r7, #4]
 801e602:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801e606:	b29b      	uxth	r3, r3
 801e608:	2b00      	cmp	r3, #0
 801e60a:	d1c2      	bne.n	801e592 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 801e60c:	6878      	ldr	r0, [r7, #4]
 801e60e:	f000 f931 	bl	801e874 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 801e612:	687b      	ldr	r3, [r7, #4]
 801e614:	2201      	movs	r2, #1
 801e616:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801e61a:	687b      	ldr	r3, [r7, #4]
 801e61c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e620:	2b00      	cmp	r3, #0
 801e622:	d003      	beq.n	801e62c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 801e624:	6878      	ldr	r0, [r7, #4]
 801e626:	f000 f8f7 	bl	801e818 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801e62a:	e0d0      	b.n	801e7ce <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 801e62c:	7cfb      	ldrb	r3, [r7, #19]
 801e62e:	2b05      	cmp	r3, #5
 801e630:	d103      	bne.n	801e63a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 801e632:	6878      	ldr	r0, [r7, #4]
 801e634:	f000 f8e6 	bl	801e804 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 801e638:	e0c6      	b.n	801e7c8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 801e63a:	7cfb      	ldrb	r3, [r7, #19]
 801e63c:	2b04      	cmp	r3, #4
 801e63e:	d103      	bne.n	801e648 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 801e640:	6878      	ldr	r0, [r7, #4]
 801e642:	f000 f8d5 	bl	801e7f0 <HAL_SPI_RxCpltCallback>
    return;
 801e646:	e0bf      	b.n	801e7c8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 801e648:	7cfb      	ldrb	r3, [r7, #19]
 801e64a:	2b03      	cmp	r3, #3
 801e64c:	f040 80bc 	bne.w	801e7c8 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 801e650:	6878      	ldr	r0, [r7, #4]
 801e652:	f000 f8c3 	bl	801e7dc <HAL_SPI_TxCpltCallback>
    return;
 801e656:	e0b7      	b.n	801e7c8 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 801e658:	69bb      	ldr	r3, [r7, #24]
 801e65a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 801e65e:	2b00      	cmp	r3, #0
 801e660:	f000 80b5 	beq.w	801e7ce <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 801e664:	69bb      	ldr	r3, [r7, #24]
 801e666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801e66a:	2b00      	cmp	r3, #0
 801e66c:	d00f      	beq.n	801e68e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801e66e:	687b      	ldr	r3, [r7, #4]
 801e670:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e674:	f043 0204 	orr.w	r2, r3, #4
 801e678:	687b      	ldr	r3, [r7, #4]
 801e67a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801e67e:	687b      	ldr	r3, [r7, #4]
 801e680:	681b      	ldr	r3, [r3, #0]
 801e682:	699a      	ldr	r2, [r3, #24]
 801e684:	687b      	ldr	r3, [r7, #4]
 801e686:	681b      	ldr	r3, [r3, #0]
 801e688:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801e68c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 801e68e:	69bb      	ldr	r3, [r7, #24]
 801e690:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801e694:	2b00      	cmp	r3, #0
 801e696:	d00f      	beq.n	801e6b8 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801e698:	687b      	ldr	r3, [r7, #4]
 801e69a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e69e:	f043 0201 	orr.w	r2, r3, #1
 801e6a2:	687b      	ldr	r3, [r7, #4]
 801e6a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801e6a8:	687b      	ldr	r3, [r7, #4]
 801e6aa:	681b      	ldr	r3, [r3, #0]
 801e6ac:	699a      	ldr	r2, [r3, #24]
 801e6ae:	687b      	ldr	r3, [r7, #4]
 801e6b0:	681b      	ldr	r3, [r3, #0]
 801e6b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801e6b6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 801e6b8:	69bb      	ldr	r3, [r7, #24]
 801e6ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e6be:	2b00      	cmp	r3, #0
 801e6c0:	d00f      	beq.n	801e6e2 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801e6c2:	687b      	ldr	r3, [r7, #4]
 801e6c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e6c8:	f043 0208 	orr.w	r2, r3, #8
 801e6cc:	687b      	ldr	r3, [r7, #4]
 801e6ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801e6d2:	687b      	ldr	r3, [r7, #4]
 801e6d4:	681b      	ldr	r3, [r3, #0]
 801e6d6:	699a      	ldr	r2, [r3, #24]
 801e6d8:	687b      	ldr	r3, [r7, #4]
 801e6da:	681b      	ldr	r3, [r3, #0]
 801e6dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801e6e0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 801e6e2:	69bb      	ldr	r3, [r7, #24]
 801e6e4:	f003 0320 	and.w	r3, r3, #32
 801e6e8:	2b00      	cmp	r3, #0
 801e6ea:	d00f      	beq.n	801e70c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801e6ec:	687b      	ldr	r3, [r7, #4]
 801e6ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e6f2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801e6f6:	687b      	ldr	r3, [r7, #4]
 801e6f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801e6fc:	687b      	ldr	r3, [r7, #4]
 801e6fe:	681b      	ldr	r3, [r3, #0]
 801e700:	699a      	ldr	r2, [r3, #24]
 801e702:	687b      	ldr	r3, [r7, #4]
 801e704:	681b      	ldr	r3, [r3, #0]
 801e706:	f042 0220 	orr.w	r2, r2, #32
 801e70a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801e70c:	687b      	ldr	r3, [r7, #4]
 801e70e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e712:	2b00      	cmp	r3, #0
 801e714:	d05a      	beq.n	801e7cc <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 801e716:	687b      	ldr	r3, [r7, #4]
 801e718:	681b      	ldr	r3, [r3, #0]
 801e71a:	681a      	ldr	r2, [r3, #0]
 801e71c:	687b      	ldr	r3, [r7, #4]
 801e71e:	681b      	ldr	r3, [r3, #0]
 801e720:	f022 0201 	bic.w	r2, r2, #1
 801e724:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 801e726:	687b      	ldr	r3, [r7, #4]
 801e728:	681b      	ldr	r3, [r3, #0]
 801e72a:	6919      	ldr	r1, [r3, #16]
 801e72c:	687b      	ldr	r3, [r7, #4]
 801e72e:	681a      	ldr	r2, [r3, #0]
 801e730:	4b28      	ldr	r3, [pc, #160]	@ (801e7d4 <HAL_SPI_IRQHandler+0x394>)
 801e732:	400b      	ands	r3, r1
 801e734:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801e736:	697b      	ldr	r3, [r7, #20]
 801e738:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801e73c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 801e740:	d138      	bne.n	801e7b4 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801e742:	687b      	ldr	r3, [r7, #4]
 801e744:	681b      	ldr	r3, [r3, #0]
 801e746:	689a      	ldr	r2, [r3, #8]
 801e748:	687b      	ldr	r3, [r7, #4]
 801e74a:	681b      	ldr	r3, [r3, #0]
 801e74c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801e750:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801e752:	687b      	ldr	r3, [r7, #4]
 801e754:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e756:	2b00      	cmp	r3, #0
 801e758:	d013      	beq.n	801e782 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801e75a:	687b      	ldr	r3, [r7, #4]
 801e75c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e75e:	4a1e      	ldr	r2, [pc, #120]	@ (801e7d8 <HAL_SPI_IRQHandler+0x398>)
 801e760:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801e762:	687b      	ldr	r3, [r7, #4]
 801e764:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e766:	4618      	mov	r0, r3
 801e768:	f7fb f99e 	bl	8019aa8 <HAL_DMA_Abort_IT>
 801e76c:	4603      	mov	r3, r0
 801e76e:	2b00      	cmp	r3, #0
 801e770:	d007      	beq.n	801e782 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801e772:	687b      	ldr	r3, [r7, #4]
 801e774:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e778:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801e77c:	687b      	ldr	r3, [r7, #4]
 801e77e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801e782:	687b      	ldr	r3, [r7, #4]
 801e784:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801e786:	2b00      	cmp	r3, #0
 801e788:	d020      	beq.n	801e7cc <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801e78a:	687b      	ldr	r3, [r7, #4]
 801e78c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801e78e:	4a12      	ldr	r2, [pc, #72]	@ (801e7d8 <HAL_SPI_IRQHandler+0x398>)
 801e790:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801e792:	687b      	ldr	r3, [r7, #4]
 801e794:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801e796:	4618      	mov	r0, r3
 801e798:	f7fb f986 	bl	8019aa8 <HAL_DMA_Abort_IT>
 801e79c:	4603      	mov	r3, r0
 801e79e:	2b00      	cmp	r3, #0
 801e7a0:	d014      	beq.n	801e7cc <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801e7a2:	687b      	ldr	r3, [r7, #4]
 801e7a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e7a8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801e7ac:	687b      	ldr	r3, [r7, #4]
 801e7ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801e7b2:	e00b      	b.n	801e7cc <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 801e7b4:	687b      	ldr	r3, [r7, #4]
 801e7b6:	2201      	movs	r2, #1
 801e7b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 801e7bc:	6878      	ldr	r0, [r7, #4]
 801e7be:	f000 f82b 	bl	801e818 <HAL_SPI_ErrorCallback>
    return;
 801e7c2:	e003      	b.n	801e7cc <HAL_SPI_IRQHandler+0x38c>
    return;
 801e7c4:	bf00      	nop
 801e7c6:	e002      	b.n	801e7ce <HAL_SPI_IRQHandler+0x38e>
    return;
 801e7c8:	bf00      	nop
 801e7ca:	e000      	b.n	801e7ce <HAL_SPI_IRQHandler+0x38e>
    return;
 801e7cc:	bf00      	nop
  }
}
 801e7ce:	3728      	adds	r7, #40	@ 0x28
 801e7d0:	46bd      	mov	sp, r7
 801e7d2:	bd80      	pop	{r7, pc}
 801e7d4:	fffffc94 	.word	0xfffffc94
 801e7d8:	0801e841 	.word	0x0801e841

0801e7dc <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801e7dc:	b480      	push	{r7}
 801e7de:	b083      	sub	sp, #12
 801e7e0:	af00      	add	r7, sp, #0
 801e7e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 801e7e4:	bf00      	nop
 801e7e6:	370c      	adds	r7, #12
 801e7e8:	46bd      	mov	sp, r7
 801e7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7ee:	4770      	bx	lr

0801e7f0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801e7f0:	b480      	push	{r7}
 801e7f2:	b083      	sub	sp, #12
 801e7f4:	af00      	add	r7, sp, #0
 801e7f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 801e7f8:	bf00      	nop
 801e7fa:	370c      	adds	r7, #12
 801e7fc:	46bd      	mov	sp, r7
 801e7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e802:	4770      	bx	lr

0801e804 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801e804:	b480      	push	{r7}
 801e806:	b083      	sub	sp, #12
 801e808:	af00      	add	r7, sp, #0
 801e80a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 801e80c:	bf00      	nop
 801e80e:	370c      	adds	r7, #12
 801e810:	46bd      	mov	sp, r7
 801e812:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e816:	4770      	bx	lr

0801e818 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801e818:	b480      	push	{r7}
 801e81a:	b083      	sub	sp, #12
 801e81c:	af00      	add	r7, sp, #0
 801e81e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801e820:	bf00      	nop
 801e822:	370c      	adds	r7, #12
 801e824:	46bd      	mov	sp, r7
 801e826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e82a:	4770      	bx	lr

0801e82c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801e82c:	b480      	push	{r7}
 801e82e:	b083      	sub	sp, #12
 801e830:	af00      	add	r7, sp, #0
 801e832:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 801e834:	bf00      	nop
 801e836:	370c      	adds	r7, #12
 801e838:	46bd      	mov	sp, r7
 801e83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e83e:	4770      	bx	lr

0801e840 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801e840:	b580      	push	{r7, lr}
 801e842:	b084      	sub	sp, #16
 801e844:	af00      	add	r7, sp, #0
 801e846:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801e848:	687b      	ldr	r3, [r7, #4]
 801e84a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e84c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 801e84e:	68fb      	ldr	r3, [r7, #12]
 801e850:	2200      	movs	r2, #0
 801e852:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 801e856:	68fb      	ldr	r3, [r7, #12]
 801e858:	2200      	movs	r2, #0
 801e85a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 801e85e:	68fb      	ldr	r3, [r7, #12]
 801e860:	2201      	movs	r2, #1
 801e862:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801e866:	68f8      	ldr	r0, [r7, #12]
 801e868:	f7ff ffd6 	bl	801e818 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801e86c:	bf00      	nop
 801e86e:	3710      	adds	r7, #16
 801e870:	46bd      	mov	sp, r7
 801e872:	bd80      	pop	{r7, pc}

0801e874 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 801e874:	b480      	push	{r7}
 801e876:	b085      	sub	sp, #20
 801e878:	af00      	add	r7, sp, #0
 801e87a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 801e87c:	687b      	ldr	r3, [r7, #4]
 801e87e:	681b      	ldr	r3, [r3, #0]
 801e880:	695b      	ldr	r3, [r3, #20]
 801e882:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801e884:	687b      	ldr	r3, [r7, #4]
 801e886:	681b      	ldr	r3, [r3, #0]
 801e888:	699a      	ldr	r2, [r3, #24]
 801e88a:	687b      	ldr	r3, [r7, #4]
 801e88c:	681b      	ldr	r3, [r3, #0]
 801e88e:	f042 0208 	orr.w	r2, r2, #8
 801e892:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801e894:	687b      	ldr	r3, [r7, #4]
 801e896:	681b      	ldr	r3, [r3, #0]
 801e898:	699a      	ldr	r2, [r3, #24]
 801e89a:	687b      	ldr	r3, [r7, #4]
 801e89c:	681b      	ldr	r3, [r3, #0]
 801e89e:	f042 0210 	orr.w	r2, r2, #16
 801e8a2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801e8a4:	687b      	ldr	r3, [r7, #4]
 801e8a6:	681b      	ldr	r3, [r3, #0]
 801e8a8:	681a      	ldr	r2, [r3, #0]
 801e8aa:	687b      	ldr	r3, [r7, #4]
 801e8ac:	681b      	ldr	r3, [r3, #0]
 801e8ae:	f022 0201 	bic.w	r2, r2, #1
 801e8b2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 801e8b4:	687b      	ldr	r3, [r7, #4]
 801e8b6:	681b      	ldr	r3, [r3, #0]
 801e8b8:	6919      	ldr	r1, [r3, #16]
 801e8ba:	687b      	ldr	r3, [r7, #4]
 801e8bc:	681a      	ldr	r2, [r3, #0]
 801e8be:	4b3c      	ldr	r3, [pc, #240]	@ (801e9b0 <SPI_CloseTransfer+0x13c>)
 801e8c0:	400b      	ands	r3, r1
 801e8c2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801e8c4:	687b      	ldr	r3, [r7, #4]
 801e8c6:	681b      	ldr	r3, [r3, #0]
 801e8c8:	689a      	ldr	r2, [r3, #8]
 801e8ca:	687b      	ldr	r3, [r7, #4]
 801e8cc:	681b      	ldr	r3, [r3, #0]
 801e8ce:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801e8d2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801e8d4:	687b      	ldr	r3, [r7, #4]
 801e8d6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801e8da:	b2db      	uxtb	r3, r3
 801e8dc:	2b04      	cmp	r3, #4
 801e8de:	d014      	beq.n	801e90a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 801e8e0:	68fb      	ldr	r3, [r7, #12]
 801e8e2:	f003 0320 	and.w	r3, r3, #32
 801e8e6:	2b00      	cmp	r3, #0
 801e8e8:	d00f      	beq.n	801e90a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801e8ea:	687b      	ldr	r3, [r7, #4]
 801e8ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e8f0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801e8f4:	687b      	ldr	r3, [r7, #4]
 801e8f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801e8fa:	687b      	ldr	r3, [r7, #4]
 801e8fc:	681b      	ldr	r3, [r3, #0]
 801e8fe:	699a      	ldr	r2, [r3, #24]
 801e900:	687b      	ldr	r3, [r7, #4]
 801e902:	681b      	ldr	r3, [r3, #0]
 801e904:	f042 0220 	orr.w	r2, r2, #32
 801e908:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801e90a:	687b      	ldr	r3, [r7, #4]
 801e90c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801e910:	b2db      	uxtb	r3, r3
 801e912:	2b03      	cmp	r3, #3
 801e914:	d014      	beq.n	801e940 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801e916:	68fb      	ldr	r3, [r7, #12]
 801e918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801e91c:	2b00      	cmp	r3, #0
 801e91e:	d00f      	beq.n	801e940 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801e920:	687b      	ldr	r3, [r7, #4]
 801e922:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e926:	f043 0204 	orr.w	r2, r3, #4
 801e92a:	687b      	ldr	r3, [r7, #4]
 801e92c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801e930:	687b      	ldr	r3, [r7, #4]
 801e932:	681b      	ldr	r3, [r3, #0]
 801e934:	699a      	ldr	r2, [r3, #24]
 801e936:	687b      	ldr	r3, [r7, #4]
 801e938:	681b      	ldr	r3, [r3, #0]
 801e93a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801e93e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 801e940:	68fb      	ldr	r3, [r7, #12]
 801e942:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801e946:	2b00      	cmp	r3, #0
 801e948:	d00f      	beq.n	801e96a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801e94a:	687b      	ldr	r3, [r7, #4]
 801e94c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e950:	f043 0201 	orr.w	r2, r3, #1
 801e954:	687b      	ldr	r3, [r7, #4]
 801e956:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801e95a:	687b      	ldr	r3, [r7, #4]
 801e95c:	681b      	ldr	r3, [r3, #0]
 801e95e:	699a      	ldr	r2, [r3, #24]
 801e960:	687b      	ldr	r3, [r7, #4]
 801e962:	681b      	ldr	r3, [r3, #0]
 801e964:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801e968:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801e96a:	68fb      	ldr	r3, [r7, #12]
 801e96c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e970:	2b00      	cmp	r3, #0
 801e972:	d00f      	beq.n	801e994 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801e974:	687b      	ldr	r3, [r7, #4]
 801e976:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e97a:	f043 0208 	orr.w	r2, r3, #8
 801e97e:	687b      	ldr	r3, [r7, #4]
 801e980:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 801e984:	687b      	ldr	r3, [r7, #4]
 801e986:	681b      	ldr	r3, [r3, #0]
 801e988:	699a      	ldr	r2, [r3, #24]
 801e98a:	687b      	ldr	r3, [r7, #4]
 801e98c:	681b      	ldr	r3, [r3, #0]
 801e98e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801e992:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 801e994:	687b      	ldr	r3, [r7, #4]
 801e996:	2200      	movs	r2, #0
 801e998:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 801e99c:	687b      	ldr	r3, [r7, #4]
 801e99e:	2200      	movs	r2, #0
 801e9a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 801e9a4:	bf00      	nop
 801e9a6:	3714      	adds	r7, #20
 801e9a8:	46bd      	mov	sp, r7
 801e9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9ae:	4770      	bx	lr
 801e9b0:	fffffc90 	.word	0xfffffc90

0801e9b4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 801e9b4:	b480      	push	{r7}
 801e9b6:	b085      	sub	sp, #20
 801e9b8:	af00      	add	r7, sp, #0
 801e9ba:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 801e9bc:	687b      	ldr	r3, [r7, #4]
 801e9be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e9c0:	095b      	lsrs	r3, r3, #5
 801e9c2:	3301      	adds	r3, #1
 801e9c4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801e9c6:	687b      	ldr	r3, [r7, #4]
 801e9c8:	68db      	ldr	r3, [r3, #12]
 801e9ca:	3301      	adds	r3, #1
 801e9cc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801e9ce:	68bb      	ldr	r3, [r7, #8]
 801e9d0:	3307      	adds	r3, #7
 801e9d2:	08db      	lsrs	r3, r3, #3
 801e9d4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801e9d6:	68bb      	ldr	r3, [r7, #8]
 801e9d8:	68fa      	ldr	r2, [r7, #12]
 801e9da:	fb02 f303 	mul.w	r3, r2, r3
}
 801e9de:	4618      	mov	r0, r3
 801e9e0:	3714      	adds	r7, #20
 801e9e2:	46bd      	mov	sp, r7
 801e9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9e8:	4770      	bx	lr

0801e9ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801e9ea:	b580      	push	{r7, lr}
 801e9ec:	b082      	sub	sp, #8
 801e9ee:	af00      	add	r7, sp, #0
 801e9f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801e9f2:	687b      	ldr	r3, [r7, #4]
 801e9f4:	2b00      	cmp	r3, #0
 801e9f6:	d101      	bne.n	801e9fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801e9f8:	2301      	movs	r3, #1
 801e9fa:	e049      	b.n	801ea90 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801e9fc:	687b      	ldr	r3, [r7, #4]
 801e9fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801ea02:	b2db      	uxtb	r3, r3
 801ea04:	2b00      	cmp	r3, #0
 801ea06:	d106      	bne.n	801ea16 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801ea08:	687b      	ldr	r3, [r7, #4]
 801ea0a:	2200      	movs	r2, #0
 801ea0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801ea10:	6878      	ldr	r0, [r7, #4]
 801ea12:	f7e3 f805 	bl	8001a20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ea16:	687b      	ldr	r3, [r7, #4]
 801ea18:	2202      	movs	r2, #2
 801ea1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801ea1e:	687b      	ldr	r3, [r7, #4]
 801ea20:	681a      	ldr	r2, [r3, #0]
 801ea22:	687b      	ldr	r3, [r7, #4]
 801ea24:	3304      	adds	r3, #4
 801ea26:	4619      	mov	r1, r3
 801ea28:	4610      	mov	r0, r2
 801ea2a:	f000 f9a5 	bl	801ed78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801ea2e:	687b      	ldr	r3, [r7, #4]
 801ea30:	2201      	movs	r2, #1
 801ea32:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ea36:	687b      	ldr	r3, [r7, #4]
 801ea38:	2201      	movs	r2, #1
 801ea3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801ea3e:	687b      	ldr	r3, [r7, #4]
 801ea40:	2201      	movs	r2, #1
 801ea42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801ea46:	687b      	ldr	r3, [r7, #4]
 801ea48:	2201      	movs	r2, #1
 801ea4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801ea4e:	687b      	ldr	r3, [r7, #4]
 801ea50:	2201      	movs	r2, #1
 801ea52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801ea56:	687b      	ldr	r3, [r7, #4]
 801ea58:	2201      	movs	r2, #1
 801ea5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801ea5e:	687b      	ldr	r3, [r7, #4]
 801ea60:	2201      	movs	r2, #1
 801ea62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ea66:	687b      	ldr	r3, [r7, #4]
 801ea68:	2201      	movs	r2, #1
 801ea6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801ea6e:	687b      	ldr	r3, [r7, #4]
 801ea70:	2201      	movs	r2, #1
 801ea72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801ea76:	687b      	ldr	r3, [r7, #4]
 801ea78:	2201      	movs	r2, #1
 801ea7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801ea7e:	687b      	ldr	r3, [r7, #4]
 801ea80:	2201      	movs	r2, #1
 801ea82:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ea86:	687b      	ldr	r3, [r7, #4]
 801ea88:	2201      	movs	r2, #1
 801ea8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801ea8e:	2300      	movs	r3, #0
}
 801ea90:	4618      	mov	r0, r3
 801ea92:	3708      	adds	r7, #8
 801ea94:	46bd      	mov	sp, r7
 801ea96:	bd80      	pop	{r7, pc}

0801ea98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801ea98:	b480      	push	{r7}
 801ea9a:	b085      	sub	sp, #20
 801ea9c:	af00      	add	r7, sp, #0
 801ea9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801eaa0:	687b      	ldr	r3, [r7, #4]
 801eaa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801eaa6:	b2db      	uxtb	r3, r3
 801eaa8:	2b01      	cmp	r3, #1
 801eaaa:	d001      	beq.n	801eab0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801eaac:	2301      	movs	r3, #1
 801eaae:	e054      	b.n	801eb5a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801eab0:	687b      	ldr	r3, [r7, #4]
 801eab2:	2202      	movs	r2, #2
 801eab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801eab8:	687b      	ldr	r3, [r7, #4]
 801eaba:	681b      	ldr	r3, [r3, #0]
 801eabc:	68da      	ldr	r2, [r3, #12]
 801eabe:	687b      	ldr	r3, [r7, #4]
 801eac0:	681b      	ldr	r3, [r3, #0]
 801eac2:	f042 0201 	orr.w	r2, r2, #1
 801eac6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801eac8:	687b      	ldr	r3, [r7, #4]
 801eaca:	681b      	ldr	r3, [r3, #0]
 801eacc:	4a26      	ldr	r2, [pc, #152]	@ (801eb68 <HAL_TIM_Base_Start_IT+0xd0>)
 801eace:	4293      	cmp	r3, r2
 801ead0:	d022      	beq.n	801eb18 <HAL_TIM_Base_Start_IT+0x80>
 801ead2:	687b      	ldr	r3, [r7, #4]
 801ead4:	681b      	ldr	r3, [r3, #0]
 801ead6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801eada:	d01d      	beq.n	801eb18 <HAL_TIM_Base_Start_IT+0x80>
 801eadc:	687b      	ldr	r3, [r7, #4]
 801eade:	681b      	ldr	r3, [r3, #0]
 801eae0:	4a22      	ldr	r2, [pc, #136]	@ (801eb6c <HAL_TIM_Base_Start_IT+0xd4>)
 801eae2:	4293      	cmp	r3, r2
 801eae4:	d018      	beq.n	801eb18 <HAL_TIM_Base_Start_IT+0x80>
 801eae6:	687b      	ldr	r3, [r7, #4]
 801eae8:	681b      	ldr	r3, [r3, #0]
 801eaea:	4a21      	ldr	r2, [pc, #132]	@ (801eb70 <HAL_TIM_Base_Start_IT+0xd8>)
 801eaec:	4293      	cmp	r3, r2
 801eaee:	d013      	beq.n	801eb18 <HAL_TIM_Base_Start_IT+0x80>
 801eaf0:	687b      	ldr	r3, [r7, #4]
 801eaf2:	681b      	ldr	r3, [r3, #0]
 801eaf4:	4a1f      	ldr	r2, [pc, #124]	@ (801eb74 <HAL_TIM_Base_Start_IT+0xdc>)
 801eaf6:	4293      	cmp	r3, r2
 801eaf8:	d00e      	beq.n	801eb18 <HAL_TIM_Base_Start_IT+0x80>
 801eafa:	687b      	ldr	r3, [r7, #4]
 801eafc:	681b      	ldr	r3, [r3, #0]
 801eafe:	4a1e      	ldr	r2, [pc, #120]	@ (801eb78 <HAL_TIM_Base_Start_IT+0xe0>)
 801eb00:	4293      	cmp	r3, r2
 801eb02:	d009      	beq.n	801eb18 <HAL_TIM_Base_Start_IT+0x80>
 801eb04:	687b      	ldr	r3, [r7, #4]
 801eb06:	681b      	ldr	r3, [r3, #0]
 801eb08:	4a1c      	ldr	r2, [pc, #112]	@ (801eb7c <HAL_TIM_Base_Start_IT+0xe4>)
 801eb0a:	4293      	cmp	r3, r2
 801eb0c:	d004      	beq.n	801eb18 <HAL_TIM_Base_Start_IT+0x80>
 801eb0e:	687b      	ldr	r3, [r7, #4]
 801eb10:	681b      	ldr	r3, [r3, #0]
 801eb12:	4a1b      	ldr	r2, [pc, #108]	@ (801eb80 <HAL_TIM_Base_Start_IT+0xe8>)
 801eb14:	4293      	cmp	r3, r2
 801eb16:	d115      	bne.n	801eb44 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801eb18:	687b      	ldr	r3, [r7, #4]
 801eb1a:	681b      	ldr	r3, [r3, #0]
 801eb1c:	689a      	ldr	r2, [r3, #8]
 801eb1e:	4b19      	ldr	r3, [pc, #100]	@ (801eb84 <HAL_TIM_Base_Start_IT+0xec>)
 801eb20:	4013      	ands	r3, r2
 801eb22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801eb24:	68fb      	ldr	r3, [r7, #12]
 801eb26:	2b06      	cmp	r3, #6
 801eb28:	d015      	beq.n	801eb56 <HAL_TIM_Base_Start_IT+0xbe>
 801eb2a:	68fb      	ldr	r3, [r7, #12]
 801eb2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801eb30:	d011      	beq.n	801eb56 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 801eb32:	687b      	ldr	r3, [r7, #4]
 801eb34:	681b      	ldr	r3, [r3, #0]
 801eb36:	681a      	ldr	r2, [r3, #0]
 801eb38:	687b      	ldr	r3, [r7, #4]
 801eb3a:	681b      	ldr	r3, [r3, #0]
 801eb3c:	f042 0201 	orr.w	r2, r2, #1
 801eb40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801eb42:	e008      	b.n	801eb56 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801eb44:	687b      	ldr	r3, [r7, #4]
 801eb46:	681b      	ldr	r3, [r3, #0]
 801eb48:	681a      	ldr	r2, [r3, #0]
 801eb4a:	687b      	ldr	r3, [r7, #4]
 801eb4c:	681b      	ldr	r3, [r3, #0]
 801eb4e:	f042 0201 	orr.w	r2, r2, #1
 801eb52:	601a      	str	r2, [r3, #0]
 801eb54:	e000      	b.n	801eb58 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801eb56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801eb58:	2300      	movs	r3, #0
}
 801eb5a:	4618      	mov	r0, r3
 801eb5c:	3714      	adds	r7, #20
 801eb5e:	46bd      	mov	sp, r7
 801eb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb64:	4770      	bx	lr
 801eb66:	bf00      	nop
 801eb68:	40010000 	.word	0x40010000
 801eb6c:	40000400 	.word	0x40000400
 801eb70:	40000800 	.word	0x40000800
 801eb74:	40000c00 	.word	0x40000c00
 801eb78:	40010400 	.word	0x40010400
 801eb7c:	40001800 	.word	0x40001800
 801eb80:	40014000 	.word	0x40014000
 801eb84:	00010007 	.word	0x00010007

0801eb88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801eb88:	b580      	push	{r7, lr}
 801eb8a:	b084      	sub	sp, #16
 801eb8c:	af00      	add	r7, sp, #0
 801eb8e:	6078      	str	r0, [r7, #4]
 801eb90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801eb92:	2300      	movs	r3, #0
 801eb94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801eb96:	687b      	ldr	r3, [r7, #4]
 801eb98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801eb9c:	2b01      	cmp	r3, #1
 801eb9e:	d101      	bne.n	801eba4 <HAL_TIM_ConfigClockSource+0x1c>
 801eba0:	2302      	movs	r3, #2
 801eba2:	e0dc      	b.n	801ed5e <HAL_TIM_ConfigClockSource+0x1d6>
 801eba4:	687b      	ldr	r3, [r7, #4]
 801eba6:	2201      	movs	r2, #1
 801eba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801ebac:	687b      	ldr	r3, [r7, #4]
 801ebae:	2202      	movs	r2, #2
 801ebb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801ebb4:	687b      	ldr	r3, [r7, #4]
 801ebb6:	681b      	ldr	r3, [r3, #0]
 801ebb8:	689b      	ldr	r3, [r3, #8]
 801ebba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801ebbc:	68ba      	ldr	r2, [r7, #8]
 801ebbe:	4b6a      	ldr	r3, [pc, #424]	@ (801ed68 <HAL_TIM_ConfigClockSource+0x1e0>)
 801ebc0:	4013      	ands	r3, r2
 801ebc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801ebc4:	68bb      	ldr	r3, [r7, #8]
 801ebc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801ebca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801ebcc:	687b      	ldr	r3, [r7, #4]
 801ebce:	681b      	ldr	r3, [r3, #0]
 801ebd0:	68ba      	ldr	r2, [r7, #8]
 801ebd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801ebd4:	683b      	ldr	r3, [r7, #0]
 801ebd6:	681b      	ldr	r3, [r3, #0]
 801ebd8:	4a64      	ldr	r2, [pc, #400]	@ (801ed6c <HAL_TIM_ConfigClockSource+0x1e4>)
 801ebda:	4293      	cmp	r3, r2
 801ebdc:	f000 80a9 	beq.w	801ed32 <HAL_TIM_ConfigClockSource+0x1aa>
 801ebe0:	4a62      	ldr	r2, [pc, #392]	@ (801ed6c <HAL_TIM_ConfigClockSource+0x1e4>)
 801ebe2:	4293      	cmp	r3, r2
 801ebe4:	f200 80ae 	bhi.w	801ed44 <HAL_TIM_ConfigClockSource+0x1bc>
 801ebe8:	4a61      	ldr	r2, [pc, #388]	@ (801ed70 <HAL_TIM_ConfigClockSource+0x1e8>)
 801ebea:	4293      	cmp	r3, r2
 801ebec:	f000 80a1 	beq.w	801ed32 <HAL_TIM_ConfigClockSource+0x1aa>
 801ebf0:	4a5f      	ldr	r2, [pc, #380]	@ (801ed70 <HAL_TIM_ConfigClockSource+0x1e8>)
 801ebf2:	4293      	cmp	r3, r2
 801ebf4:	f200 80a6 	bhi.w	801ed44 <HAL_TIM_ConfigClockSource+0x1bc>
 801ebf8:	4a5e      	ldr	r2, [pc, #376]	@ (801ed74 <HAL_TIM_ConfigClockSource+0x1ec>)
 801ebfa:	4293      	cmp	r3, r2
 801ebfc:	f000 8099 	beq.w	801ed32 <HAL_TIM_ConfigClockSource+0x1aa>
 801ec00:	4a5c      	ldr	r2, [pc, #368]	@ (801ed74 <HAL_TIM_ConfigClockSource+0x1ec>)
 801ec02:	4293      	cmp	r3, r2
 801ec04:	f200 809e 	bhi.w	801ed44 <HAL_TIM_ConfigClockSource+0x1bc>
 801ec08:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801ec0c:	f000 8091 	beq.w	801ed32 <HAL_TIM_ConfigClockSource+0x1aa>
 801ec10:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801ec14:	f200 8096 	bhi.w	801ed44 <HAL_TIM_ConfigClockSource+0x1bc>
 801ec18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801ec1c:	f000 8089 	beq.w	801ed32 <HAL_TIM_ConfigClockSource+0x1aa>
 801ec20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801ec24:	f200 808e 	bhi.w	801ed44 <HAL_TIM_ConfigClockSource+0x1bc>
 801ec28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ec2c:	d03e      	beq.n	801ecac <HAL_TIM_ConfigClockSource+0x124>
 801ec2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ec32:	f200 8087 	bhi.w	801ed44 <HAL_TIM_ConfigClockSource+0x1bc>
 801ec36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ec3a:	f000 8086 	beq.w	801ed4a <HAL_TIM_ConfigClockSource+0x1c2>
 801ec3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ec42:	d87f      	bhi.n	801ed44 <HAL_TIM_ConfigClockSource+0x1bc>
 801ec44:	2b70      	cmp	r3, #112	@ 0x70
 801ec46:	d01a      	beq.n	801ec7e <HAL_TIM_ConfigClockSource+0xf6>
 801ec48:	2b70      	cmp	r3, #112	@ 0x70
 801ec4a:	d87b      	bhi.n	801ed44 <HAL_TIM_ConfigClockSource+0x1bc>
 801ec4c:	2b60      	cmp	r3, #96	@ 0x60
 801ec4e:	d050      	beq.n	801ecf2 <HAL_TIM_ConfigClockSource+0x16a>
 801ec50:	2b60      	cmp	r3, #96	@ 0x60
 801ec52:	d877      	bhi.n	801ed44 <HAL_TIM_ConfigClockSource+0x1bc>
 801ec54:	2b50      	cmp	r3, #80	@ 0x50
 801ec56:	d03c      	beq.n	801ecd2 <HAL_TIM_ConfigClockSource+0x14a>
 801ec58:	2b50      	cmp	r3, #80	@ 0x50
 801ec5a:	d873      	bhi.n	801ed44 <HAL_TIM_ConfigClockSource+0x1bc>
 801ec5c:	2b40      	cmp	r3, #64	@ 0x40
 801ec5e:	d058      	beq.n	801ed12 <HAL_TIM_ConfigClockSource+0x18a>
 801ec60:	2b40      	cmp	r3, #64	@ 0x40
 801ec62:	d86f      	bhi.n	801ed44 <HAL_TIM_ConfigClockSource+0x1bc>
 801ec64:	2b30      	cmp	r3, #48	@ 0x30
 801ec66:	d064      	beq.n	801ed32 <HAL_TIM_ConfigClockSource+0x1aa>
 801ec68:	2b30      	cmp	r3, #48	@ 0x30
 801ec6a:	d86b      	bhi.n	801ed44 <HAL_TIM_ConfigClockSource+0x1bc>
 801ec6c:	2b20      	cmp	r3, #32
 801ec6e:	d060      	beq.n	801ed32 <HAL_TIM_ConfigClockSource+0x1aa>
 801ec70:	2b20      	cmp	r3, #32
 801ec72:	d867      	bhi.n	801ed44 <HAL_TIM_ConfigClockSource+0x1bc>
 801ec74:	2b00      	cmp	r3, #0
 801ec76:	d05c      	beq.n	801ed32 <HAL_TIM_ConfigClockSource+0x1aa>
 801ec78:	2b10      	cmp	r3, #16
 801ec7a:	d05a      	beq.n	801ed32 <HAL_TIM_ConfigClockSource+0x1aa>
 801ec7c:	e062      	b.n	801ed44 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801ec7e:	687b      	ldr	r3, [r7, #4]
 801ec80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801ec82:	683b      	ldr	r3, [r7, #0]
 801ec84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801ec86:	683b      	ldr	r3, [r7, #0]
 801ec88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801ec8a:	683b      	ldr	r3, [r7, #0]
 801ec8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801ec8e:	f000 f997 	bl	801efc0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801ec92:	687b      	ldr	r3, [r7, #4]
 801ec94:	681b      	ldr	r3, [r3, #0]
 801ec96:	689b      	ldr	r3, [r3, #8]
 801ec98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801ec9a:	68bb      	ldr	r3, [r7, #8]
 801ec9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 801eca0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801eca2:	687b      	ldr	r3, [r7, #4]
 801eca4:	681b      	ldr	r3, [r3, #0]
 801eca6:	68ba      	ldr	r2, [r7, #8]
 801eca8:	609a      	str	r2, [r3, #8]
      break;
 801ecaa:	e04f      	b.n	801ed4c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801ecac:	687b      	ldr	r3, [r7, #4]
 801ecae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801ecb0:	683b      	ldr	r3, [r7, #0]
 801ecb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801ecb4:	683b      	ldr	r3, [r7, #0]
 801ecb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801ecb8:	683b      	ldr	r3, [r7, #0]
 801ecba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801ecbc:	f000 f980 	bl	801efc0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801ecc0:	687b      	ldr	r3, [r7, #4]
 801ecc2:	681b      	ldr	r3, [r3, #0]
 801ecc4:	689a      	ldr	r2, [r3, #8]
 801ecc6:	687b      	ldr	r3, [r7, #4]
 801ecc8:	681b      	ldr	r3, [r3, #0]
 801ecca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801ecce:	609a      	str	r2, [r3, #8]
      break;
 801ecd0:	e03c      	b.n	801ed4c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801ecd2:	687b      	ldr	r3, [r7, #4]
 801ecd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801ecd6:	683b      	ldr	r3, [r7, #0]
 801ecd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801ecda:	683b      	ldr	r3, [r7, #0]
 801ecdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801ecde:	461a      	mov	r2, r3
 801ece0:	f000 f8f0 	bl	801eec4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801ece4:	687b      	ldr	r3, [r7, #4]
 801ece6:	681b      	ldr	r3, [r3, #0]
 801ece8:	2150      	movs	r1, #80	@ 0x50
 801ecea:	4618      	mov	r0, r3
 801ecec:	f000 f94a 	bl	801ef84 <TIM_ITRx_SetConfig>
      break;
 801ecf0:	e02c      	b.n	801ed4c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801ecf2:	687b      	ldr	r3, [r7, #4]
 801ecf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801ecf6:	683b      	ldr	r3, [r7, #0]
 801ecf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801ecfa:	683b      	ldr	r3, [r7, #0]
 801ecfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801ecfe:	461a      	mov	r2, r3
 801ed00:	f000 f90f 	bl	801ef22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801ed04:	687b      	ldr	r3, [r7, #4]
 801ed06:	681b      	ldr	r3, [r3, #0]
 801ed08:	2160      	movs	r1, #96	@ 0x60
 801ed0a:	4618      	mov	r0, r3
 801ed0c:	f000 f93a 	bl	801ef84 <TIM_ITRx_SetConfig>
      break;
 801ed10:	e01c      	b.n	801ed4c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801ed12:	687b      	ldr	r3, [r7, #4]
 801ed14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801ed16:	683b      	ldr	r3, [r7, #0]
 801ed18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801ed1a:	683b      	ldr	r3, [r7, #0]
 801ed1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801ed1e:	461a      	mov	r2, r3
 801ed20:	f000 f8d0 	bl	801eec4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801ed24:	687b      	ldr	r3, [r7, #4]
 801ed26:	681b      	ldr	r3, [r3, #0]
 801ed28:	2140      	movs	r1, #64	@ 0x40
 801ed2a:	4618      	mov	r0, r3
 801ed2c:	f000 f92a 	bl	801ef84 <TIM_ITRx_SetConfig>
      break;
 801ed30:	e00c      	b.n	801ed4c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801ed32:	687b      	ldr	r3, [r7, #4]
 801ed34:	681a      	ldr	r2, [r3, #0]
 801ed36:	683b      	ldr	r3, [r7, #0]
 801ed38:	681b      	ldr	r3, [r3, #0]
 801ed3a:	4619      	mov	r1, r3
 801ed3c:	4610      	mov	r0, r2
 801ed3e:	f000 f921 	bl	801ef84 <TIM_ITRx_SetConfig>
      break;
 801ed42:	e003      	b.n	801ed4c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801ed44:	2301      	movs	r3, #1
 801ed46:	73fb      	strb	r3, [r7, #15]
      break;
 801ed48:	e000      	b.n	801ed4c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801ed4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801ed4c:	687b      	ldr	r3, [r7, #4]
 801ed4e:	2201      	movs	r2, #1
 801ed50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801ed54:	687b      	ldr	r3, [r7, #4]
 801ed56:	2200      	movs	r2, #0
 801ed58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801ed5c:	7bfb      	ldrb	r3, [r7, #15]
}
 801ed5e:	4618      	mov	r0, r3
 801ed60:	3710      	adds	r7, #16
 801ed62:	46bd      	mov	sp, r7
 801ed64:	bd80      	pop	{r7, pc}
 801ed66:	bf00      	nop
 801ed68:	ffceff88 	.word	0xffceff88
 801ed6c:	00100040 	.word	0x00100040
 801ed70:	00100030 	.word	0x00100030
 801ed74:	00100020 	.word	0x00100020

0801ed78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801ed78:	b480      	push	{r7}
 801ed7a:	b085      	sub	sp, #20
 801ed7c:	af00      	add	r7, sp, #0
 801ed7e:	6078      	str	r0, [r7, #4]
 801ed80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801ed82:	687b      	ldr	r3, [r7, #4]
 801ed84:	681b      	ldr	r3, [r3, #0]
 801ed86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801ed88:	687b      	ldr	r3, [r7, #4]
 801ed8a:	4a46      	ldr	r2, [pc, #280]	@ (801eea4 <TIM_Base_SetConfig+0x12c>)
 801ed8c:	4293      	cmp	r3, r2
 801ed8e:	d013      	beq.n	801edb8 <TIM_Base_SetConfig+0x40>
 801ed90:	687b      	ldr	r3, [r7, #4]
 801ed92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801ed96:	d00f      	beq.n	801edb8 <TIM_Base_SetConfig+0x40>
 801ed98:	687b      	ldr	r3, [r7, #4]
 801ed9a:	4a43      	ldr	r2, [pc, #268]	@ (801eea8 <TIM_Base_SetConfig+0x130>)
 801ed9c:	4293      	cmp	r3, r2
 801ed9e:	d00b      	beq.n	801edb8 <TIM_Base_SetConfig+0x40>
 801eda0:	687b      	ldr	r3, [r7, #4]
 801eda2:	4a42      	ldr	r2, [pc, #264]	@ (801eeac <TIM_Base_SetConfig+0x134>)
 801eda4:	4293      	cmp	r3, r2
 801eda6:	d007      	beq.n	801edb8 <TIM_Base_SetConfig+0x40>
 801eda8:	687b      	ldr	r3, [r7, #4]
 801edaa:	4a41      	ldr	r2, [pc, #260]	@ (801eeb0 <TIM_Base_SetConfig+0x138>)
 801edac:	4293      	cmp	r3, r2
 801edae:	d003      	beq.n	801edb8 <TIM_Base_SetConfig+0x40>
 801edb0:	687b      	ldr	r3, [r7, #4]
 801edb2:	4a40      	ldr	r2, [pc, #256]	@ (801eeb4 <TIM_Base_SetConfig+0x13c>)
 801edb4:	4293      	cmp	r3, r2
 801edb6:	d108      	bne.n	801edca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801edb8:	68fb      	ldr	r3, [r7, #12]
 801edba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801edbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801edc0:	683b      	ldr	r3, [r7, #0]
 801edc2:	685b      	ldr	r3, [r3, #4]
 801edc4:	68fa      	ldr	r2, [r7, #12]
 801edc6:	4313      	orrs	r3, r2
 801edc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801edca:	687b      	ldr	r3, [r7, #4]
 801edcc:	4a35      	ldr	r2, [pc, #212]	@ (801eea4 <TIM_Base_SetConfig+0x12c>)
 801edce:	4293      	cmp	r3, r2
 801edd0:	d01f      	beq.n	801ee12 <TIM_Base_SetConfig+0x9a>
 801edd2:	687b      	ldr	r3, [r7, #4]
 801edd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801edd8:	d01b      	beq.n	801ee12 <TIM_Base_SetConfig+0x9a>
 801edda:	687b      	ldr	r3, [r7, #4]
 801eddc:	4a32      	ldr	r2, [pc, #200]	@ (801eea8 <TIM_Base_SetConfig+0x130>)
 801edde:	4293      	cmp	r3, r2
 801ede0:	d017      	beq.n	801ee12 <TIM_Base_SetConfig+0x9a>
 801ede2:	687b      	ldr	r3, [r7, #4]
 801ede4:	4a31      	ldr	r2, [pc, #196]	@ (801eeac <TIM_Base_SetConfig+0x134>)
 801ede6:	4293      	cmp	r3, r2
 801ede8:	d013      	beq.n	801ee12 <TIM_Base_SetConfig+0x9a>
 801edea:	687b      	ldr	r3, [r7, #4]
 801edec:	4a30      	ldr	r2, [pc, #192]	@ (801eeb0 <TIM_Base_SetConfig+0x138>)
 801edee:	4293      	cmp	r3, r2
 801edf0:	d00f      	beq.n	801ee12 <TIM_Base_SetConfig+0x9a>
 801edf2:	687b      	ldr	r3, [r7, #4]
 801edf4:	4a2f      	ldr	r2, [pc, #188]	@ (801eeb4 <TIM_Base_SetConfig+0x13c>)
 801edf6:	4293      	cmp	r3, r2
 801edf8:	d00b      	beq.n	801ee12 <TIM_Base_SetConfig+0x9a>
 801edfa:	687b      	ldr	r3, [r7, #4]
 801edfc:	4a2e      	ldr	r2, [pc, #184]	@ (801eeb8 <TIM_Base_SetConfig+0x140>)
 801edfe:	4293      	cmp	r3, r2
 801ee00:	d007      	beq.n	801ee12 <TIM_Base_SetConfig+0x9a>
 801ee02:	687b      	ldr	r3, [r7, #4]
 801ee04:	4a2d      	ldr	r2, [pc, #180]	@ (801eebc <TIM_Base_SetConfig+0x144>)
 801ee06:	4293      	cmp	r3, r2
 801ee08:	d003      	beq.n	801ee12 <TIM_Base_SetConfig+0x9a>
 801ee0a:	687b      	ldr	r3, [r7, #4]
 801ee0c:	4a2c      	ldr	r2, [pc, #176]	@ (801eec0 <TIM_Base_SetConfig+0x148>)
 801ee0e:	4293      	cmp	r3, r2
 801ee10:	d108      	bne.n	801ee24 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801ee12:	68fb      	ldr	r3, [r7, #12]
 801ee14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801ee18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801ee1a:	683b      	ldr	r3, [r7, #0]
 801ee1c:	68db      	ldr	r3, [r3, #12]
 801ee1e:	68fa      	ldr	r2, [r7, #12]
 801ee20:	4313      	orrs	r3, r2
 801ee22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801ee24:	68fb      	ldr	r3, [r7, #12]
 801ee26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801ee2a:	683b      	ldr	r3, [r7, #0]
 801ee2c:	695b      	ldr	r3, [r3, #20]
 801ee2e:	4313      	orrs	r3, r2
 801ee30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801ee32:	687b      	ldr	r3, [r7, #4]
 801ee34:	68fa      	ldr	r2, [r7, #12]
 801ee36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801ee38:	683b      	ldr	r3, [r7, #0]
 801ee3a:	689a      	ldr	r2, [r3, #8]
 801ee3c:	687b      	ldr	r3, [r7, #4]
 801ee3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801ee40:	683b      	ldr	r3, [r7, #0]
 801ee42:	681a      	ldr	r2, [r3, #0]
 801ee44:	687b      	ldr	r3, [r7, #4]
 801ee46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801ee48:	687b      	ldr	r3, [r7, #4]
 801ee4a:	4a16      	ldr	r2, [pc, #88]	@ (801eea4 <TIM_Base_SetConfig+0x12c>)
 801ee4c:	4293      	cmp	r3, r2
 801ee4e:	d00f      	beq.n	801ee70 <TIM_Base_SetConfig+0xf8>
 801ee50:	687b      	ldr	r3, [r7, #4]
 801ee52:	4a18      	ldr	r2, [pc, #96]	@ (801eeb4 <TIM_Base_SetConfig+0x13c>)
 801ee54:	4293      	cmp	r3, r2
 801ee56:	d00b      	beq.n	801ee70 <TIM_Base_SetConfig+0xf8>
 801ee58:	687b      	ldr	r3, [r7, #4]
 801ee5a:	4a17      	ldr	r2, [pc, #92]	@ (801eeb8 <TIM_Base_SetConfig+0x140>)
 801ee5c:	4293      	cmp	r3, r2
 801ee5e:	d007      	beq.n	801ee70 <TIM_Base_SetConfig+0xf8>
 801ee60:	687b      	ldr	r3, [r7, #4]
 801ee62:	4a16      	ldr	r2, [pc, #88]	@ (801eebc <TIM_Base_SetConfig+0x144>)
 801ee64:	4293      	cmp	r3, r2
 801ee66:	d003      	beq.n	801ee70 <TIM_Base_SetConfig+0xf8>
 801ee68:	687b      	ldr	r3, [r7, #4]
 801ee6a:	4a15      	ldr	r2, [pc, #84]	@ (801eec0 <TIM_Base_SetConfig+0x148>)
 801ee6c:	4293      	cmp	r3, r2
 801ee6e:	d103      	bne.n	801ee78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801ee70:	683b      	ldr	r3, [r7, #0]
 801ee72:	691a      	ldr	r2, [r3, #16]
 801ee74:	687b      	ldr	r3, [r7, #4]
 801ee76:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801ee78:	687b      	ldr	r3, [r7, #4]
 801ee7a:	2201      	movs	r2, #1
 801ee7c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801ee7e:	687b      	ldr	r3, [r7, #4]
 801ee80:	691b      	ldr	r3, [r3, #16]
 801ee82:	f003 0301 	and.w	r3, r3, #1
 801ee86:	2b01      	cmp	r3, #1
 801ee88:	d105      	bne.n	801ee96 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801ee8a:	687b      	ldr	r3, [r7, #4]
 801ee8c:	691b      	ldr	r3, [r3, #16]
 801ee8e:	f023 0201 	bic.w	r2, r3, #1
 801ee92:	687b      	ldr	r3, [r7, #4]
 801ee94:	611a      	str	r2, [r3, #16]
  }
}
 801ee96:	bf00      	nop
 801ee98:	3714      	adds	r7, #20
 801ee9a:	46bd      	mov	sp, r7
 801ee9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eea0:	4770      	bx	lr
 801eea2:	bf00      	nop
 801eea4:	40010000 	.word	0x40010000
 801eea8:	40000400 	.word	0x40000400
 801eeac:	40000800 	.word	0x40000800
 801eeb0:	40000c00 	.word	0x40000c00
 801eeb4:	40010400 	.word	0x40010400
 801eeb8:	40014000 	.word	0x40014000
 801eebc:	40014400 	.word	0x40014400
 801eec0:	40014800 	.word	0x40014800

0801eec4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801eec4:	b480      	push	{r7}
 801eec6:	b087      	sub	sp, #28
 801eec8:	af00      	add	r7, sp, #0
 801eeca:	60f8      	str	r0, [r7, #12]
 801eecc:	60b9      	str	r1, [r7, #8]
 801eece:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801eed0:	68fb      	ldr	r3, [r7, #12]
 801eed2:	6a1b      	ldr	r3, [r3, #32]
 801eed4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801eed6:	68fb      	ldr	r3, [r7, #12]
 801eed8:	6a1b      	ldr	r3, [r3, #32]
 801eeda:	f023 0201 	bic.w	r2, r3, #1
 801eede:	68fb      	ldr	r3, [r7, #12]
 801eee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801eee2:	68fb      	ldr	r3, [r7, #12]
 801eee4:	699b      	ldr	r3, [r3, #24]
 801eee6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801eee8:	693b      	ldr	r3, [r7, #16]
 801eeea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801eeee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801eef0:	687b      	ldr	r3, [r7, #4]
 801eef2:	011b      	lsls	r3, r3, #4
 801eef4:	693a      	ldr	r2, [r7, #16]
 801eef6:	4313      	orrs	r3, r2
 801eef8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801eefa:	697b      	ldr	r3, [r7, #20]
 801eefc:	f023 030a 	bic.w	r3, r3, #10
 801ef00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801ef02:	697a      	ldr	r2, [r7, #20]
 801ef04:	68bb      	ldr	r3, [r7, #8]
 801ef06:	4313      	orrs	r3, r2
 801ef08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801ef0a:	68fb      	ldr	r3, [r7, #12]
 801ef0c:	693a      	ldr	r2, [r7, #16]
 801ef0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801ef10:	68fb      	ldr	r3, [r7, #12]
 801ef12:	697a      	ldr	r2, [r7, #20]
 801ef14:	621a      	str	r2, [r3, #32]
}
 801ef16:	bf00      	nop
 801ef18:	371c      	adds	r7, #28
 801ef1a:	46bd      	mov	sp, r7
 801ef1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef20:	4770      	bx	lr

0801ef22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801ef22:	b480      	push	{r7}
 801ef24:	b087      	sub	sp, #28
 801ef26:	af00      	add	r7, sp, #0
 801ef28:	60f8      	str	r0, [r7, #12]
 801ef2a:	60b9      	str	r1, [r7, #8]
 801ef2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801ef2e:	68fb      	ldr	r3, [r7, #12]
 801ef30:	6a1b      	ldr	r3, [r3, #32]
 801ef32:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801ef34:	68fb      	ldr	r3, [r7, #12]
 801ef36:	6a1b      	ldr	r3, [r3, #32]
 801ef38:	f023 0210 	bic.w	r2, r3, #16
 801ef3c:	68fb      	ldr	r3, [r7, #12]
 801ef3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801ef40:	68fb      	ldr	r3, [r7, #12]
 801ef42:	699b      	ldr	r3, [r3, #24]
 801ef44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801ef46:	693b      	ldr	r3, [r7, #16]
 801ef48:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801ef4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801ef4e:	687b      	ldr	r3, [r7, #4]
 801ef50:	031b      	lsls	r3, r3, #12
 801ef52:	693a      	ldr	r2, [r7, #16]
 801ef54:	4313      	orrs	r3, r2
 801ef56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801ef58:	697b      	ldr	r3, [r7, #20]
 801ef5a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801ef5e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801ef60:	68bb      	ldr	r3, [r7, #8]
 801ef62:	011b      	lsls	r3, r3, #4
 801ef64:	697a      	ldr	r2, [r7, #20]
 801ef66:	4313      	orrs	r3, r2
 801ef68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801ef6a:	68fb      	ldr	r3, [r7, #12]
 801ef6c:	693a      	ldr	r2, [r7, #16]
 801ef6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801ef70:	68fb      	ldr	r3, [r7, #12]
 801ef72:	697a      	ldr	r2, [r7, #20]
 801ef74:	621a      	str	r2, [r3, #32]
}
 801ef76:	bf00      	nop
 801ef78:	371c      	adds	r7, #28
 801ef7a:	46bd      	mov	sp, r7
 801ef7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef80:	4770      	bx	lr
	...

0801ef84 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801ef84:	b480      	push	{r7}
 801ef86:	b085      	sub	sp, #20
 801ef88:	af00      	add	r7, sp, #0
 801ef8a:	6078      	str	r0, [r7, #4]
 801ef8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801ef8e:	687b      	ldr	r3, [r7, #4]
 801ef90:	689b      	ldr	r3, [r3, #8]
 801ef92:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801ef94:	68fa      	ldr	r2, [r7, #12]
 801ef96:	4b09      	ldr	r3, [pc, #36]	@ (801efbc <TIM_ITRx_SetConfig+0x38>)
 801ef98:	4013      	ands	r3, r2
 801ef9a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801ef9c:	683a      	ldr	r2, [r7, #0]
 801ef9e:	68fb      	ldr	r3, [r7, #12]
 801efa0:	4313      	orrs	r3, r2
 801efa2:	f043 0307 	orr.w	r3, r3, #7
 801efa6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801efa8:	687b      	ldr	r3, [r7, #4]
 801efaa:	68fa      	ldr	r2, [r7, #12]
 801efac:	609a      	str	r2, [r3, #8]
}
 801efae:	bf00      	nop
 801efb0:	3714      	adds	r7, #20
 801efb2:	46bd      	mov	sp, r7
 801efb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efb8:	4770      	bx	lr
 801efba:	bf00      	nop
 801efbc:	ffcfff8f 	.word	0xffcfff8f

0801efc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801efc0:	b480      	push	{r7}
 801efc2:	b087      	sub	sp, #28
 801efc4:	af00      	add	r7, sp, #0
 801efc6:	60f8      	str	r0, [r7, #12]
 801efc8:	60b9      	str	r1, [r7, #8]
 801efca:	607a      	str	r2, [r7, #4]
 801efcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801efce:	68fb      	ldr	r3, [r7, #12]
 801efd0:	689b      	ldr	r3, [r3, #8]
 801efd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801efd4:	697b      	ldr	r3, [r7, #20]
 801efd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801efda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801efdc:	683b      	ldr	r3, [r7, #0]
 801efde:	021a      	lsls	r2, r3, #8
 801efe0:	687b      	ldr	r3, [r7, #4]
 801efe2:	431a      	orrs	r2, r3
 801efe4:	68bb      	ldr	r3, [r7, #8]
 801efe6:	4313      	orrs	r3, r2
 801efe8:	697a      	ldr	r2, [r7, #20]
 801efea:	4313      	orrs	r3, r2
 801efec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801efee:	68fb      	ldr	r3, [r7, #12]
 801eff0:	697a      	ldr	r2, [r7, #20]
 801eff2:	609a      	str	r2, [r3, #8]
}
 801eff4:	bf00      	nop
 801eff6:	371c      	adds	r7, #28
 801eff8:	46bd      	mov	sp, r7
 801effa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801effe:	4770      	bx	lr

0801f000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801f000:	b480      	push	{r7}
 801f002:	b085      	sub	sp, #20
 801f004:	af00      	add	r7, sp, #0
 801f006:	6078      	str	r0, [r7, #4]
 801f008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801f00a:	687b      	ldr	r3, [r7, #4]
 801f00c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801f010:	2b01      	cmp	r3, #1
 801f012:	d101      	bne.n	801f018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801f014:	2302      	movs	r3, #2
 801f016:	e06d      	b.n	801f0f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 801f018:	687b      	ldr	r3, [r7, #4]
 801f01a:	2201      	movs	r2, #1
 801f01c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f020:	687b      	ldr	r3, [r7, #4]
 801f022:	2202      	movs	r2, #2
 801f024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801f028:	687b      	ldr	r3, [r7, #4]
 801f02a:	681b      	ldr	r3, [r3, #0]
 801f02c:	685b      	ldr	r3, [r3, #4]
 801f02e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801f030:	687b      	ldr	r3, [r7, #4]
 801f032:	681b      	ldr	r3, [r3, #0]
 801f034:	689b      	ldr	r3, [r3, #8]
 801f036:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801f038:	687b      	ldr	r3, [r7, #4]
 801f03a:	681b      	ldr	r3, [r3, #0]
 801f03c:	4a30      	ldr	r2, [pc, #192]	@ (801f100 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801f03e:	4293      	cmp	r3, r2
 801f040:	d004      	beq.n	801f04c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801f042:	687b      	ldr	r3, [r7, #4]
 801f044:	681b      	ldr	r3, [r3, #0]
 801f046:	4a2f      	ldr	r2, [pc, #188]	@ (801f104 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801f048:	4293      	cmp	r3, r2
 801f04a:	d108      	bne.n	801f05e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801f04c:	68fb      	ldr	r3, [r7, #12]
 801f04e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801f052:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801f054:	683b      	ldr	r3, [r7, #0]
 801f056:	685b      	ldr	r3, [r3, #4]
 801f058:	68fa      	ldr	r2, [r7, #12]
 801f05a:	4313      	orrs	r3, r2
 801f05c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801f05e:	68fb      	ldr	r3, [r7, #12]
 801f060:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801f064:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801f066:	683b      	ldr	r3, [r7, #0]
 801f068:	681b      	ldr	r3, [r3, #0]
 801f06a:	68fa      	ldr	r2, [r7, #12]
 801f06c:	4313      	orrs	r3, r2
 801f06e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801f070:	687b      	ldr	r3, [r7, #4]
 801f072:	681b      	ldr	r3, [r3, #0]
 801f074:	68fa      	ldr	r2, [r7, #12]
 801f076:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801f078:	687b      	ldr	r3, [r7, #4]
 801f07a:	681b      	ldr	r3, [r3, #0]
 801f07c:	4a20      	ldr	r2, [pc, #128]	@ (801f100 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801f07e:	4293      	cmp	r3, r2
 801f080:	d022      	beq.n	801f0c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801f082:	687b      	ldr	r3, [r7, #4]
 801f084:	681b      	ldr	r3, [r3, #0]
 801f086:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f08a:	d01d      	beq.n	801f0c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801f08c:	687b      	ldr	r3, [r7, #4]
 801f08e:	681b      	ldr	r3, [r3, #0]
 801f090:	4a1d      	ldr	r2, [pc, #116]	@ (801f108 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801f092:	4293      	cmp	r3, r2
 801f094:	d018      	beq.n	801f0c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801f096:	687b      	ldr	r3, [r7, #4]
 801f098:	681b      	ldr	r3, [r3, #0]
 801f09a:	4a1c      	ldr	r2, [pc, #112]	@ (801f10c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801f09c:	4293      	cmp	r3, r2
 801f09e:	d013      	beq.n	801f0c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801f0a0:	687b      	ldr	r3, [r7, #4]
 801f0a2:	681b      	ldr	r3, [r3, #0]
 801f0a4:	4a1a      	ldr	r2, [pc, #104]	@ (801f110 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801f0a6:	4293      	cmp	r3, r2
 801f0a8:	d00e      	beq.n	801f0c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801f0aa:	687b      	ldr	r3, [r7, #4]
 801f0ac:	681b      	ldr	r3, [r3, #0]
 801f0ae:	4a15      	ldr	r2, [pc, #84]	@ (801f104 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801f0b0:	4293      	cmp	r3, r2
 801f0b2:	d009      	beq.n	801f0c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801f0b4:	687b      	ldr	r3, [r7, #4]
 801f0b6:	681b      	ldr	r3, [r3, #0]
 801f0b8:	4a16      	ldr	r2, [pc, #88]	@ (801f114 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801f0ba:	4293      	cmp	r3, r2
 801f0bc:	d004      	beq.n	801f0c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801f0be:	687b      	ldr	r3, [r7, #4]
 801f0c0:	681b      	ldr	r3, [r3, #0]
 801f0c2:	4a15      	ldr	r2, [pc, #84]	@ (801f118 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801f0c4:	4293      	cmp	r3, r2
 801f0c6:	d10c      	bne.n	801f0e2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801f0c8:	68bb      	ldr	r3, [r7, #8]
 801f0ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801f0ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801f0d0:	683b      	ldr	r3, [r7, #0]
 801f0d2:	689b      	ldr	r3, [r3, #8]
 801f0d4:	68ba      	ldr	r2, [r7, #8]
 801f0d6:	4313      	orrs	r3, r2
 801f0d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801f0da:	687b      	ldr	r3, [r7, #4]
 801f0dc:	681b      	ldr	r3, [r3, #0]
 801f0de:	68ba      	ldr	r2, [r7, #8]
 801f0e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801f0e2:	687b      	ldr	r3, [r7, #4]
 801f0e4:	2201      	movs	r2, #1
 801f0e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801f0ea:	687b      	ldr	r3, [r7, #4]
 801f0ec:	2200      	movs	r2, #0
 801f0ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801f0f2:	2300      	movs	r3, #0
}
 801f0f4:	4618      	mov	r0, r3
 801f0f6:	3714      	adds	r7, #20
 801f0f8:	46bd      	mov	sp, r7
 801f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0fe:	4770      	bx	lr
 801f100:	40010000 	.word	0x40010000
 801f104:	40010400 	.word	0x40010400
 801f108:	40000400 	.word	0x40000400
 801f10c:	40000800 	.word	0x40000800
 801f110:	40000c00 	.word	0x40000c00
 801f114:	40001800 	.word	0x40001800
 801f118:	40014000 	.word	0x40014000

0801f11c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801f11c:	b580      	push	{r7, lr}
 801f11e:	b082      	sub	sp, #8
 801f120:	af00      	add	r7, sp, #0
 801f122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801f124:	687b      	ldr	r3, [r7, #4]
 801f126:	2b00      	cmp	r3, #0
 801f128:	d101      	bne.n	801f12e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801f12a:	2301      	movs	r3, #1
 801f12c:	e042      	b.n	801f1b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801f12e:	687b      	ldr	r3, [r7, #4]
 801f130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801f134:	2b00      	cmp	r3, #0
 801f136:	d106      	bne.n	801f146 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801f138:	687b      	ldr	r3, [r7, #4]
 801f13a:	2200      	movs	r2, #0
 801f13c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801f140:	6878      	ldr	r0, [r7, #4]
 801f142:	f7e2 fd1f 	bl	8001b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801f146:	687b      	ldr	r3, [r7, #4]
 801f148:	2224      	movs	r2, #36	@ 0x24
 801f14a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801f14e:	687b      	ldr	r3, [r7, #4]
 801f150:	681b      	ldr	r3, [r3, #0]
 801f152:	681a      	ldr	r2, [r3, #0]
 801f154:	687b      	ldr	r3, [r7, #4]
 801f156:	681b      	ldr	r3, [r3, #0]
 801f158:	f022 0201 	bic.w	r2, r2, #1
 801f15c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801f15e:	687b      	ldr	r3, [r7, #4]
 801f160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f162:	2b00      	cmp	r3, #0
 801f164:	d002      	beq.n	801f16c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801f166:	6878      	ldr	r0, [r7, #4]
 801f168:	f000 fd90 	bl	801fc8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801f16c:	6878      	ldr	r0, [r7, #4]
 801f16e:	f000 f825 	bl	801f1bc <UART_SetConfig>
 801f172:	4603      	mov	r3, r0
 801f174:	2b01      	cmp	r3, #1
 801f176:	d101      	bne.n	801f17c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801f178:	2301      	movs	r3, #1
 801f17a:	e01b      	b.n	801f1b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801f17c:	687b      	ldr	r3, [r7, #4]
 801f17e:	681b      	ldr	r3, [r3, #0]
 801f180:	685a      	ldr	r2, [r3, #4]
 801f182:	687b      	ldr	r3, [r7, #4]
 801f184:	681b      	ldr	r3, [r3, #0]
 801f186:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801f18a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801f18c:	687b      	ldr	r3, [r7, #4]
 801f18e:	681b      	ldr	r3, [r3, #0]
 801f190:	689a      	ldr	r2, [r3, #8]
 801f192:	687b      	ldr	r3, [r7, #4]
 801f194:	681b      	ldr	r3, [r3, #0]
 801f196:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801f19a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801f19c:	687b      	ldr	r3, [r7, #4]
 801f19e:	681b      	ldr	r3, [r3, #0]
 801f1a0:	681a      	ldr	r2, [r3, #0]
 801f1a2:	687b      	ldr	r3, [r7, #4]
 801f1a4:	681b      	ldr	r3, [r3, #0]
 801f1a6:	f042 0201 	orr.w	r2, r2, #1
 801f1aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801f1ac:	6878      	ldr	r0, [r7, #4]
 801f1ae:	f000 fe0f 	bl	801fdd0 <UART_CheckIdleState>
 801f1b2:	4603      	mov	r3, r0
}
 801f1b4:	4618      	mov	r0, r3
 801f1b6:	3708      	adds	r7, #8
 801f1b8:	46bd      	mov	sp, r7
 801f1ba:	bd80      	pop	{r7, pc}

0801f1bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801f1bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801f1c0:	b092      	sub	sp, #72	@ 0x48
 801f1c2:	af00      	add	r7, sp, #0
 801f1c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801f1c6:	2300      	movs	r3, #0
 801f1c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801f1cc:	697b      	ldr	r3, [r7, #20]
 801f1ce:	689a      	ldr	r2, [r3, #8]
 801f1d0:	697b      	ldr	r3, [r7, #20]
 801f1d2:	691b      	ldr	r3, [r3, #16]
 801f1d4:	431a      	orrs	r2, r3
 801f1d6:	697b      	ldr	r3, [r7, #20]
 801f1d8:	695b      	ldr	r3, [r3, #20]
 801f1da:	431a      	orrs	r2, r3
 801f1dc:	697b      	ldr	r3, [r7, #20]
 801f1de:	69db      	ldr	r3, [r3, #28]
 801f1e0:	4313      	orrs	r3, r2
 801f1e2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801f1e4:	697b      	ldr	r3, [r7, #20]
 801f1e6:	681b      	ldr	r3, [r3, #0]
 801f1e8:	681a      	ldr	r2, [r3, #0]
 801f1ea:	4bbe      	ldr	r3, [pc, #760]	@ (801f4e4 <UART_SetConfig+0x328>)
 801f1ec:	4013      	ands	r3, r2
 801f1ee:	697a      	ldr	r2, [r7, #20]
 801f1f0:	6812      	ldr	r2, [r2, #0]
 801f1f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801f1f4:	430b      	orrs	r3, r1
 801f1f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801f1f8:	697b      	ldr	r3, [r7, #20]
 801f1fa:	681b      	ldr	r3, [r3, #0]
 801f1fc:	685b      	ldr	r3, [r3, #4]
 801f1fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801f202:	697b      	ldr	r3, [r7, #20]
 801f204:	68da      	ldr	r2, [r3, #12]
 801f206:	697b      	ldr	r3, [r7, #20]
 801f208:	681b      	ldr	r3, [r3, #0]
 801f20a:	430a      	orrs	r2, r1
 801f20c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801f20e:	697b      	ldr	r3, [r7, #20]
 801f210:	699b      	ldr	r3, [r3, #24]
 801f212:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801f214:	697b      	ldr	r3, [r7, #20]
 801f216:	681b      	ldr	r3, [r3, #0]
 801f218:	4ab3      	ldr	r2, [pc, #716]	@ (801f4e8 <UART_SetConfig+0x32c>)
 801f21a:	4293      	cmp	r3, r2
 801f21c:	d004      	beq.n	801f228 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801f21e:	697b      	ldr	r3, [r7, #20]
 801f220:	6a1b      	ldr	r3, [r3, #32]
 801f222:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801f224:	4313      	orrs	r3, r2
 801f226:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801f228:	697b      	ldr	r3, [r7, #20]
 801f22a:	681b      	ldr	r3, [r3, #0]
 801f22c:	689a      	ldr	r2, [r3, #8]
 801f22e:	4baf      	ldr	r3, [pc, #700]	@ (801f4ec <UART_SetConfig+0x330>)
 801f230:	4013      	ands	r3, r2
 801f232:	697a      	ldr	r2, [r7, #20]
 801f234:	6812      	ldr	r2, [r2, #0]
 801f236:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801f238:	430b      	orrs	r3, r1
 801f23a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801f23c:	697b      	ldr	r3, [r7, #20]
 801f23e:	681b      	ldr	r3, [r3, #0]
 801f240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f242:	f023 010f 	bic.w	r1, r3, #15
 801f246:	697b      	ldr	r3, [r7, #20]
 801f248:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801f24a:	697b      	ldr	r3, [r7, #20]
 801f24c:	681b      	ldr	r3, [r3, #0]
 801f24e:	430a      	orrs	r2, r1
 801f250:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801f252:	697b      	ldr	r3, [r7, #20]
 801f254:	681b      	ldr	r3, [r3, #0]
 801f256:	4aa6      	ldr	r2, [pc, #664]	@ (801f4f0 <UART_SetConfig+0x334>)
 801f258:	4293      	cmp	r3, r2
 801f25a:	d177      	bne.n	801f34c <UART_SetConfig+0x190>
 801f25c:	4ba5      	ldr	r3, [pc, #660]	@ (801f4f4 <UART_SetConfig+0x338>)
 801f25e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f260:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801f264:	2b28      	cmp	r3, #40	@ 0x28
 801f266:	d86d      	bhi.n	801f344 <UART_SetConfig+0x188>
 801f268:	a201      	add	r2, pc, #4	@ (adr r2, 801f270 <UART_SetConfig+0xb4>)
 801f26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f26e:	bf00      	nop
 801f270:	0801f315 	.word	0x0801f315
 801f274:	0801f345 	.word	0x0801f345
 801f278:	0801f345 	.word	0x0801f345
 801f27c:	0801f345 	.word	0x0801f345
 801f280:	0801f345 	.word	0x0801f345
 801f284:	0801f345 	.word	0x0801f345
 801f288:	0801f345 	.word	0x0801f345
 801f28c:	0801f345 	.word	0x0801f345
 801f290:	0801f31d 	.word	0x0801f31d
 801f294:	0801f345 	.word	0x0801f345
 801f298:	0801f345 	.word	0x0801f345
 801f29c:	0801f345 	.word	0x0801f345
 801f2a0:	0801f345 	.word	0x0801f345
 801f2a4:	0801f345 	.word	0x0801f345
 801f2a8:	0801f345 	.word	0x0801f345
 801f2ac:	0801f345 	.word	0x0801f345
 801f2b0:	0801f325 	.word	0x0801f325
 801f2b4:	0801f345 	.word	0x0801f345
 801f2b8:	0801f345 	.word	0x0801f345
 801f2bc:	0801f345 	.word	0x0801f345
 801f2c0:	0801f345 	.word	0x0801f345
 801f2c4:	0801f345 	.word	0x0801f345
 801f2c8:	0801f345 	.word	0x0801f345
 801f2cc:	0801f345 	.word	0x0801f345
 801f2d0:	0801f32d 	.word	0x0801f32d
 801f2d4:	0801f345 	.word	0x0801f345
 801f2d8:	0801f345 	.word	0x0801f345
 801f2dc:	0801f345 	.word	0x0801f345
 801f2e0:	0801f345 	.word	0x0801f345
 801f2e4:	0801f345 	.word	0x0801f345
 801f2e8:	0801f345 	.word	0x0801f345
 801f2ec:	0801f345 	.word	0x0801f345
 801f2f0:	0801f335 	.word	0x0801f335
 801f2f4:	0801f345 	.word	0x0801f345
 801f2f8:	0801f345 	.word	0x0801f345
 801f2fc:	0801f345 	.word	0x0801f345
 801f300:	0801f345 	.word	0x0801f345
 801f304:	0801f345 	.word	0x0801f345
 801f308:	0801f345 	.word	0x0801f345
 801f30c:	0801f345 	.word	0x0801f345
 801f310:	0801f33d 	.word	0x0801f33d
 801f314:	2301      	movs	r3, #1
 801f316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f31a:	e222      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f31c:	2304      	movs	r3, #4
 801f31e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f322:	e21e      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f324:	2308      	movs	r3, #8
 801f326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f32a:	e21a      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f32c:	2310      	movs	r3, #16
 801f32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f332:	e216      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f334:	2320      	movs	r3, #32
 801f336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f33a:	e212      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f33c:	2340      	movs	r3, #64	@ 0x40
 801f33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f342:	e20e      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f344:	2380      	movs	r3, #128	@ 0x80
 801f346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f34a:	e20a      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f34c:	697b      	ldr	r3, [r7, #20]
 801f34e:	681b      	ldr	r3, [r3, #0]
 801f350:	4a69      	ldr	r2, [pc, #420]	@ (801f4f8 <UART_SetConfig+0x33c>)
 801f352:	4293      	cmp	r3, r2
 801f354:	d130      	bne.n	801f3b8 <UART_SetConfig+0x1fc>
 801f356:	4b67      	ldr	r3, [pc, #412]	@ (801f4f4 <UART_SetConfig+0x338>)
 801f358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f35a:	f003 0307 	and.w	r3, r3, #7
 801f35e:	2b05      	cmp	r3, #5
 801f360:	d826      	bhi.n	801f3b0 <UART_SetConfig+0x1f4>
 801f362:	a201      	add	r2, pc, #4	@ (adr r2, 801f368 <UART_SetConfig+0x1ac>)
 801f364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f368:	0801f381 	.word	0x0801f381
 801f36c:	0801f389 	.word	0x0801f389
 801f370:	0801f391 	.word	0x0801f391
 801f374:	0801f399 	.word	0x0801f399
 801f378:	0801f3a1 	.word	0x0801f3a1
 801f37c:	0801f3a9 	.word	0x0801f3a9
 801f380:	2300      	movs	r3, #0
 801f382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f386:	e1ec      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f388:	2304      	movs	r3, #4
 801f38a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f38e:	e1e8      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f390:	2308      	movs	r3, #8
 801f392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f396:	e1e4      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f398:	2310      	movs	r3, #16
 801f39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f39e:	e1e0      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f3a0:	2320      	movs	r3, #32
 801f3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f3a6:	e1dc      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f3a8:	2340      	movs	r3, #64	@ 0x40
 801f3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f3ae:	e1d8      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f3b0:	2380      	movs	r3, #128	@ 0x80
 801f3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f3b6:	e1d4      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f3b8:	697b      	ldr	r3, [r7, #20]
 801f3ba:	681b      	ldr	r3, [r3, #0]
 801f3bc:	4a4f      	ldr	r2, [pc, #316]	@ (801f4fc <UART_SetConfig+0x340>)
 801f3be:	4293      	cmp	r3, r2
 801f3c0:	d130      	bne.n	801f424 <UART_SetConfig+0x268>
 801f3c2:	4b4c      	ldr	r3, [pc, #304]	@ (801f4f4 <UART_SetConfig+0x338>)
 801f3c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f3c6:	f003 0307 	and.w	r3, r3, #7
 801f3ca:	2b05      	cmp	r3, #5
 801f3cc:	d826      	bhi.n	801f41c <UART_SetConfig+0x260>
 801f3ce:	a201      	add	r2, pc, #4	@ (adr r2, 801f3d4 <UART_SetConfig+0x218>)
 801f3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f3d4:	0801f3ed 	.word	0x0801f3ed
 801f3d8:	0801f3f5 	.word	0x0801f3f5
 801f3dc:	0801f3fd 	.word	0x0801f3fd
 801f3e0:	0801f405 	.word	0x0801f405
 801f3e4:	0801f40d 	.word	0x0801f40d
 801f3e8:	0801f415 	.word	0x0801f415
 801f3ec:	2300      	movs	r3, #0
 801f3ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f3f2:	e1b6      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f3f4:	2304      	movs	r3, #4
 801f3f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f3fa:	e1b2      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f3fc:	2308      	movs	r3, #8
 801f3fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f402:	e1ae      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f404:	2310      	movs	r3, #16
 801f406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f40a:	e1aa      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f40c:	2320      	movs	r3, #32
 801f40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f412:	e1a6      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f414:	2340      	movs	r3, #64	@ 0x40
 801f416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f41a:	e1a2      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f41c:	2380      	movs	r3, #128	@ 0x80
 801f41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f422:	e19e      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f424:	697b      	ldr	r3, [r7, #20]
 801f426:	681b      	ldr	r3, [r3, #0]
 801f428:	4a35      	ldr	r2, [pc, #212]	@ (801f500 <UART_SetConfig+0x344>)
 801f42a:	4293      	cmp	r3, r2
 801f42c:	d130      	bne.n	801f490 <UART_SetConfig+0x2d4>
 801f42e:	4b31      	ldr	r3, [pc, #196]	@ (801f4f4 <UART_SetConfig+0x338>)
 801f430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f432:	f003 0307 	and.w	r3, r3, #7
 801f436:	2b05      	cmp	r3, #5
 801f438:	d826      	bhi.n	801f488 <UART_SetConfig+0x2cc>
 801f43a:	a201      	add	r2, pc, #4	@ (adr r2, 801f440 <UART_SetConfig+0x284>)
 801f43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f440:	0801f459 	.word	0x0801f459
 801f444:	0801f461 	.word	0x0801f461
 801f448:	0801f469 	.word	0x0801f469
 801f44c:	0801f471 	.word	0x0801f471
 801f450:	0801f479 	.word	0x0801f479
 801f454:	0801f481 	.word	0x0801f481
 801f458:	2300      	movs	r3, #0
 801f45a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f45e:	e180      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f460:	2304      	movs	r3, #4
 801f462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f466:	e17c      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f468:	2308      	movs	r3, #8
 801f46a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f46e:	e178      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f470:	2310      	movs	r3, #16
 801f472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f476:	e174      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f478:	2320      	movs	r3, #32
 801f47a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f47e:	e170      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f480:	2340      	movs	r3, #64	@ 0x40
 801f482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f486:	e16c      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f488:	2380      	movs	r3, #128	@ 0x80
 801f48a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f48e:	e168      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f490:	697b      	ldr	r3, [r7, #20]
 801f492:	681b      	ldr	r3, [r3, #0]
 801f494:	4a1b      	ldr	r2, [pc, #108]	@ (801f504 <UART_SetConfig+0x348>)
 801f496:	4293      	cmp	r3, r2
 801f498:	d142      	bne.n	801f520 <UART_SetConfig+0x364>
 801f49a:	4b16      	ldr	r3, [pc, #88]	@ (801f4f4 <UART_SetConfig+0x338>)
 801f49c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f49e:	f003 0307 	and.w	r3, r3, #7
 801f4a2:	2b05      	cmp	r3, #5
 801f4a4:	d838      	bhi.n	801f518 <UART_SetConfig+0x35c>
 801f4a6:	a201      	add	r2, pc, #4	@ (adr r2, 801f4ac <UART_SetConfig+0x2f0>)
 801f4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f4ac:	0801f4c5 	.word	0x0801f4c5
 801f4b0:	0801f4cd 	.word	0x0801f4cd
 801f4b4:	0801f4d5 	.word	0x0801f4d5
 801f4b8:	0801f4dd 	.word	0x0801f4dd
 801f4bc:	0801f509 	.word	0x0801f509
 801f4c0:	0801f511 	.word	0x0801f511
 801f4c4:	2300      	movs	r3, #0
 801f4c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f4ca:	e14a      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f4cc:	2304      	movs	r3, #4
 801f4ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f4d2:	e146      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f4d4:	2308      	movs	r3, #8
 801f4d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f4da:	e142      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f4dc:	2310      	movs	r3, #16
 801f4de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f4e2:	e13e      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f4e4:	cfff69f3 	.word	0xcfff69f3
 801f4e8:	58000c00 	.word	0x58000c00
 801f4ec:	11fff4ff 	.word	0x11fff4ff
 801f4f0:	40011000 	.word	0x40011000
 801f4f4:	58024400 	.word	0x58024400
 801f4f8:	40004400 	.word	0x40004400
 801f4fc:	40004800 	.word	0x40004800
 801f500:	40004c00 	.word	0x40004c00
 801f504:	40005000 	.word	0x40005000
 801f508:	2320      	movs	r3, #32
 801f50a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f50e:	e128      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f510:	2340      	movs	r3, #64	@ 0x40
 801f512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f516:	e124      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f518:	2380      	movs	r3, #128	@ 0x80
 801f51a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f51e:	e120      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f520:	697b      	ldr	r3, [r7, #20]
 801f522:	681b      	ldr	r3, [r3, #0]
 801f524:	4acb      	ldr	r2, [pc, #812]	@ (801f854 <UART_SetConfig+0x698>)
 801f526:	4293      	cmp	r3, r2
 801f528:	d176      	bne.n	801f618 <UART_SetConfig+0x45c>
 801f52a:	4bcb      	ldr	r3, [pc, #812]	@ (801f858 <UART_SetConfig+0x69c>)
 801f52c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f52e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801f532:	2b28      	cmp	r3, #40	@ 0x28
 801f534:	d86c      	bhi.n	801f610 <UART_SetConfig+0x454>
 801f536:	a201      	add	r2, pc, #4	@ (adr r2, 801f53c <UART_SetConfig+0x380>)
 801f538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f53c:	0801f5e1 	.word	0x0801f5e1
 801f540:	0801f611 	.word	0x0801f611
 801f544:	0801f611 	.word	0x0801f611
 801f548:	0801f611 	.word	0x0801f611
 801f54c:	0801f611 	.word	0x0801f611
 801f550:	0801f611 	.word	0x0801f611
 801f554:	0801f611 	.word	0x0801f611
 801f558:	0801f611 	.word	0x0801f611
 801f55c:	0801f5e9 	.word	0x0801f5e9
 801f560:	0801f611 	.word	0x0801f611
 801f564:	0801f611 	.word	0x0801f611
 801f568:	0801f611 	.word	0x0801f611
 801f56c:	0801f611 	.word	0x0801f611
 801f570:	0801f611 	.word	0x0801f611
 801f574:	0801f611 	.word	0x0801f611
 801f578:	0801f611 	.word	0x0801f611
 801f57c:	0801f5f1 	.word	0x0801f5f1
 801f580:	0801f611 	.word	0x0801f611
 801f584:	0801f611 	.word	0x0801f611
 801f588:	0801f611 	.word	0x0801f611
 801f58c:	0801f611 	.word	0x0801f611
 801f590:	0801f611 	.word	0x0801f611
 801f594:	0801f611 	.word	0x0801f611
 801f598:	0801f611 	.word	0x0801f611
 801f59c:	0801f5f9 	.word	0x0801f5f9
 801f5a0:	0801f611 	.word	0x0801f611
 801f5a4:	0801f611 	.word	0x0801f611
 801f5a8:	0801f611 	.word	0x0801f611
 801f5ac:	0801f611 	.word	0x0801f611
 801f5b0:	0801f611 	.word	0x0801f611
 801f5b4:	0801f611 	.word	0x0801f611
 801f5b8:	0801f611 	.word	0x0801f611
 801f5bc:	0801f601 	.word	0x0801f601
 801f5c0:	0801f611 	.word	0x0801f611
 801f5c4:	0801f611 	.word	0x0801f611
 801f5c8:	0801f611 	.word	0x0801f611
 801f5cc:	0801f611 	.word	0x0801f611
 801f5d0:	0801f611 	.word	0x0801f611
 801f5d4:	0801f611 	.word	0x0801f611
 801f5d8:	0801f611 	.word	0x0801f611
 801f5dc:	0801f609 	.word	0x0801f609
 801f5e0:	2301      	movs	r3, #1
 801f5e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f5e6:	e0bc      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f5e8:	2304      	movs	r3, #4
 801f5ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f5ee:	e0b8      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f5f0:	2308      	movs	r3, #8
 801f5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f5f6:	e0b4      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f5f8:	2310      	movs	r3, #16
 801f5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f5fe:	e0b0      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f600:	2320      	movs	r3, #32
 801f602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f606:	e0ac      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f608:	2340      	movs	r3, #64	@ 0x40
 801f60a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f60e:	e0a8      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f610:	2380      	movs	r3, #128	@ 0x80
 801f612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f616:	e0a4      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f618:	697b      	ldr	r3, [r7, #20]
 801f61a:	681b      	ldr	r3, [r3, #0]
 801f61c:	4a8f      	ldr	r2, [pc, #572]	@ (801f85c <UART_SetConfig+0x6a0>)
 801f61e:	4293      	cmp	r3, r2
 801f620:	d130      	bne.n	801f684 <UART_SetConfig+0x4c8>
 801f622:	4b8d      	ldr	r3, [pc, #564]	@ (801f858 <UART_SetConfig+0x69c>)
 801f624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f626:	f003 0307 	and.w	r3, r3, #7
 801f62a:	2b05      	cmp	r3, #5
 801f62c:	d826      	bhi.n	801f67c <UART_SetConfig+0x4c0>
 801f62e:	a201      	add	r2, pc, #4	@ (adr r2, 801f634 <UART_SetConfig+0x478>)
 801f630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f634:	0801f64d 	.word	0x0801f64d
 801f638:	0801f655 	.word	0x0801f655
 801f63c:	0801f65d 	.word	0x0801f65d
 801f640:	0801f665 	.word	0x0801f665
 801f644:	0801f66d 	.word	0x0801f66d
 801f648:	0801f675 	.word	0x0801f675
 801f64c:	2300      	movs	r3, #0
 801f64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f652:	e086      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f654:	2304      	movs	r3, #4
 801f656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f65a:	e082      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f65c:	2308      	movs	r3, #8
 801f65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f662:	e07e      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f664:	2310      	movs	r3, #16
 801f666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f66a:	e07a      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f66c:	2320      	movs	r3, #32
 801f66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f672:	e076      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f674:	2340      	movs	r3, #64	@ 0x40
 801f676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f67a:	e072      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f67c:	2380      	movs	r3, #128	@ 0x80
 801f67e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f682:	e06e      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f684:	697b      	ldr	r3, [r7, #20]
 801f686:	681b      	ldr	r3, [r3, #0]
 801f688:	4a75      	ldr	r2, [pc, #468]	@ (801f860 <UART_SetConfig+0x6a4>)
 801f68a:	4293      	cmp	r3, r2
 801f68c:	d130      	bne.n	801f6f0 <UART_SetConfig+0x534>
 801f68e:	4b72      	ldr	r3, [pc, #456]	@ (801f858 <UART_SetConfig+0x69c>)
 801f690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f692:	f003 0307 	and.w	r3, r3, #7
 801f696:	2b05      	cmp	r3, #5
 801f698:	d826      	bhi.n	801f6e8 <UART_SetConfig+0x52c>
 801f69a:	a201      	add	r2, pc, #4	@ (adr r2, 801f6a0 <UART_SetConfig+0x4e4>)
 801f69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f6a0:	0801f6b9 	.word	0x0801f6b9
 801f6a4:	0801f6c1 	.word	0x0801f6c1
 801f6a8:	0801f6c9 	.word	0x0801f6c9
 801f6ac:	0801f6d1 	.word	0x0801f6d1
 801f6b0:	0801f6d9 	.word	0x0801f6d9
 801f6b4:	0801f6e1 	.word	0x0801f6e1
 801f6b8:	2300      	movs	r3, #0
 801f6ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f6be:	e050      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f6c0:	2304      	movs	r3, #4
 801f6c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f6c6:	e04c      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f6c8:	2308      	movs	r3, #8
 801f6ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f6ce:	e048      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f6d0:	2310      	movs	r3, #16
 801f6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f6d6:	e044      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f6d8:	2320      	movs	r3, #32
 801f6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f6de:	e040      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f6e0:	2340      	movs	r3, #64	@ 0x40
 801f6e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f6e6:	e03c      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f6e8:	2380      	movs	r3, #128	@ 0x80
 801f6ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f6ee:	e038      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f6f0:	697b      	ldr	r3, [r7, #20]
 801f6f2:	681b      	ldr	r3, [r3, #0]
 801f6f4:	4a5b      	ldr	r2, [pc, #364]	@ (801f864 <UART_SetConfig+0x6a8>)
 801f6f6:	4293      	cmp	r3, r2
 801f6f8:	d130      	bne.n	801f75c <UART_SetConfig+0x5a0>
 801f6fa:	4b57      	ldr	r3, [pc, #348]	@ (801f858 <UART_SetConfig+0x69c>)
 801f6fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801f6fe:	f003 0307 	and.w	r3, r3, #7
 801f702:	2b05      	cmp	r3, #5
 801f704:	d826      	bhi.n	801f754 <UART_SetConfig+0x598>
 801f706:	a201      	add	r2, pc, #4	@ (adr r2, 801f70c <UART_SetConfig+0x550>)
 801f708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f70c:	0801f725 	.word	0x0801f725
 801f710:	0801f72d 	.word	0x0801f72d
 801f714:	0801f735 	.word	0x0801f735
 801f718:	0801f73d 	.word	0x0801f73d
 801f71c:	0801f745 	.word	0x0801f745
 801f720:	0801f74d 	.word	0x0801f74d
 801f724:	2302      	movs	r3, #2
 801f726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f72a:	e01a      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f72c:	2304      	movs	r3, #4
 801f72e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f732:	e016      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f734:	2308      	movs	r3, #8
 801f736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f73a:	e012      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f73c:	2310      	movs	r3, #16
 801f73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f742:	e00e      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f744:	2320      	movs	r3, #32
 801f746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f74a:	e00a      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f74c:	2340      	movs	r3, #64	@ 0x40
 801f74e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f752:	e006      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f754:	2380      	movs	r3, #128	@ 0x80
 801f756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f75a:	e002      	b.n	801f762 <UART_SetConfig+0x5a6>
 801f75c:	2380      	movs	r3, #128	@ 0x80
 801f75e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801f762:	697b      	ldr	r3, [r7, #20]
 801f764:	681b      	ldr	r3, [r3, #0]
 801f766:	4a3f      	ldr	r2, [pc, #252]	@ (801f864 <UART_SetConfig+0x6a8>)
 801f768:	4293      	cmp	r3, r2
 801f76a:	f040 80f8 	bne.w	801f95e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801f76e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801f772:	2b20      	cmp	r3, #32
 801f774:	dc46      	bgt.n	801f804 <UART_SetConfig+0x648>
 801f776:	2b02      	cmp	r3, #2
 801f778:	f2c0 8082 	blt.w	801f880 <UART_SetConfig+0x6c4>
 801f77c:	3b02      	subs	r3, #2
 801f77e:	2b1e      	cmp	r3, #30
 801f780:	d87e      	bhi.n	801f880 <UART_SetConfig+0x6c4>
 801f782:	a201      	add	r2, pc, #4	@ (adr r2, 801f788 <UART_SetConfig+0x5cc>)
 801f784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f788:	0801f80b 	.word	0x0801f80b
 801f78c:	0801f881 	.word	0x0801f881
 801f790:	0801f813 	.word	0x0801f813
 801f794:	0801f881 	.word	0x0801f881
 801f798:	0801f881 	.word	0x0801f881
 801f79c:	0801f881 	.word	0x0801f881
 801f7a0:	0801f823 	.word	0x0801f823
 801f7a4:	0801f881 	.word	0x0801f881
 801f7a8:	0801f881 	.word	0x0801f881
 801f7ac:	0801f881 	.word	0x0801f881
 801f7b0:	0801f881 	.word	0x0801f881
 801f7b4:	0801f881 	.word	0x0801f881
 801f7b8:	0801f881 	.word	0x0801f881
 801f7bc:	0801f881 	.word	0x0801f881
 801f7c0:	0801f833 	.word	0x0801f833
 801f7c4:	0801f881 	.word	0x0801f881
 801f7c8:	0801f881 	.word	0x0801f881
 801f7cc:	0801f881 	.word	0x0801f881
 801f7d0:	0801f881 	.word	0x0801f881
 801f7d4:	0801f881 	.word	0x0801f881
 801f7d8:	0801f881 	.word	0x0801f881
 801f7dc:	0801f881 	.word	0x0801f881
 801f7e0:	0801f881 	.word	0x0801f881
 801f7e4:	0801f881 	.word	0x0801f881
 801f7e8:	0801f881 	.word	0x0801f881
 801f7ec:	0801f881 	.word	0x0801f881
 801f7f0:	0801f881 	.word	0x0801f881
 801f7f4:	0801f881 	.word	0x0801f881
 801f7f8:	0801f881 	.word	0x0801f881
 801f7fc:	0801f881 	.word	0x0801f881
 801f800:	0801f873 	.word	0x0801f873
 801f804:	2b40      	cmp	r3, #64	@ 0x40
 801f806:	d037      	beq.n	801f878 <UART_SetConfig+0x6bc>
 801f808:	e03a      	b.n	801f880 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801f80a:	f7fe f8d3 	bl	801d9b4 <HAL_RCCEx_GetD3PCLK1Freq>
 801f80e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801f810:	e03c      	b.n	801f88c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801f812:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801f816:	4618      	mov	r0, r3
 801f818:	f7fe f8e2 	bl	801d9e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801f81c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f81e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801f820:	e034      	b.n	801f88c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801f822:	f107 0318 	add.w	r3, r7, #24
 801f826:	4618      	mov	r0, r3
 801f828:	f7fe fa2e 	bl	801dc88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801f82c:	69fb      	ldr	r3, [r7, #28]
 801f82e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801f830:	e02c      	b.n	801f88c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801f832:	4b09      	ldr	r3, [pc, #36]	@ (801f858 <UART_SetConfig+0x69c>)
 801f834:	681b      	ldr	r3, [r3, #0]
 801f836:	f003 0320 	and.w	r3, r3, #32
 801f83a:	2b00      	cmp	r3, #0
 801f83c:	d016      	beq.n	801f86c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801f83e:	4b06      	ldr	r3, [pc, #24]	@ (801f858 <UART_SetConfig+0x69c>)
 801f840:	681b      	ldr	r3, [r3, #0]
 801f842:	08db      	lsrs	r3, r3, #3
 801f844:	f003 0303 	and.w	r3, r3, #3
 801f848:	4a07      	ldr	r2, [pc, #28]	@ (801f868 <UART_SetConfig+0x6ac>)
 801f84a:	fa22 f303 	lsr.w	r3, r2, r3
 801f84e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801f850:	e01c      	b.n	801f88c <UART_SetConfig+0x6d0>
 801f852:	bf00      	nop
 801f854:	40011400 	.word	0x40011400
 801f858:	58024400 	.word	0x58024400
 801f85c:	40007800 	.word	0x40007800
 801f860:	40007c00 	.word	0x40007c00
 801f864:	58000c00 	.word	0x58000c00
 801f868:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 801f86c:	4b9d      	ldr	r3, [pc, #628]	@ (801fae4 <UART_SetConfig+0x928>)
 801f86e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801f870:	e00c      	b.n	801f88c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801f872:	4b9d      	ldr	r3, [pc, #628]	@ (801fae8 <UART_SetConfig+0x92c>)
 801f874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801f876:	e009      	b.n	801f88c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801f878:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801f87c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801f87e:	e005      	b.n	801f88c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 801f880:	2300      	movs	r3, #0
 801f882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801f884:	2301      	movs	r3, #1
 801f886:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801f88a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801f88c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f88e:	2b00      	cmp	r3, #0
 801f890:	f000 81de 	beq.w	801fc50 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801f894:	697b      	ldr	r3, [r7, #20]
 801f896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f898:	4a94      	ldr	r2, [pc, #592]	@ (801faec <UART_SetConfig+0x930>)
 801f89a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801f89e:	461a      	mov	r2, r3
 801f8a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f8a2:	fbb3 f3f2 	udiv	r3, r3, r2
 801f8a6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801f8a8:	697b      	ldr	r3, [r7, #20]
 801f8aa:	685a      	ldr	r2, [r3, #4]
 801f8ac:	4613      	mov	r3, r2
 801f8ae:	005b      	lsls	r3, r3, #1
 801f8b0:	4413      	add	r3, r2
 801f8b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801f8b4:	429a      	cmp	r2, r3
 801f8b6:	d305      	bcc.n	801f8c4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801f8b8:	697b      	ldr	r3, [r7, #20]
 801f8ba:	685b      	ldr	r3, [r3, #4]
 801f8bc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801f8be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801f8c0:	429a      	cmp	r2, r3
 801f8c2:	d903      	bls.n	801f8cc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 801f8c4:	2301      	movs	r3, #1
 801f8c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801f8ca:	e1c1      	b.n	801fc50 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801f8cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f8ce:	2200      	movs	r2, #0
 801f8d0:	60bb      	str	r3, [r7, #8]
 801f8d2:	60fa      	str	r2, [r7, #12]
 801f8d4:	697b      	ldr	r3, [r7, #20]
 801f8d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f8d8:	4a84      	ldr	r2, [pc, #528]	@ (801faec <UART_SetConfig+0x930>)
 801f8da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801f8de:	b29b      	uxth	r3, r3
 801f8e0:	2200      	movs	r2, #0
 801f8e2:	603b      	str	r3, [r7, #0]
 801f8e4:	607a      	str	r2, [r7, #4]
 801f8e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f8ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801f8ee:	f7e0 fd5f 	bl	80003b0 <__aeabi_uldivmod>
 801f8f2:	4602      	mov	r2, r0
 801f8f4:	460b      	mov	r3, r1
 801f8f6:	4610      	mov	r0, r2
 801f8f8:	4619      	mov	r1, r3
 801f8fa:	f04f 0200 	mov.w	r2, #0
 801f8fe:	f04f 0300 	mov.w	r3, #0
 801f902:	020b      	lsls	r3, r1, #8
 801f904:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801f908:	0202      	lsls	r2, r0, #8
 801f90a:	6979      	ldr	r1, [r7, #20]
 801f90c:	6849      	ldr	r1, [r1, #4]
 801f90e:	0849      	lsrs	r1, r1, #1
 801f910:	2000      	movs	r0, #0
 801f912:	460c      	mov	r4, r1
 801f914:	4605      	mov	r5, r0
 801f916:	eb12 0804 	adds.w	r8, r2, r4
 801f91a:	eb43 0905 	adc.w	r9, r3, r5
 801f91e:	697b      	ldr	r3, [r7, #20]
 801f920:	685b      	ldr	r3, [r3, #4]
 801f922:	2200      	movs	r2, #0
 801f924:	469a      	mov	sl, r3
 801f926:	4693      	mov	fp, r2
 801f928:	4652      	mov	r2, sl
 801f92a:	465b      	mov	r3, fp
 801f92c:	4640      	mov	r0, r8
 801f92e:	4649      	mov	r1, r9
 801f930:	f7e0 fd3e 	bl	80003b0 <__aeabi_uldivmod>
 801f934:	4602      	mov	r2, r0
 801f936:	460b      	mov	r3, r1
 801f938:	4613      	mov	r3, r2
 801f93a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801f93c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f93e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801f942:	d308      	bcc.n	801f956 <UART_SetConfig+0x79a>
 801f944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f946:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801f94a:	d204      	bcs.n	801f956 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 801f94c:	697b      	ldr	r3, [r7, #20]
 801f94e:	681b      	ldr	r3, [r3, #0]
 801f950:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801f952:	60da      	str	r2, [r3, #12]
 801f954:	e17c      	b.n	801fc50 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801f956:	2301      	movs	r3, #1
 801f958:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801f95c:	e178      	b.n	801fc50 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801f95e:	697b      	ldr	r3, [r7, #20]
 801f960:	69db      	ldr	r3, [r3, #28]
 801f962:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801f966:	f040 80c5 	bne.w	801faf4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801f96a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801f96e:	2b20      	cmp	r3, #32
 801f970:	dc48      	bgt.n	801fa04 <UART_SetConfig+0x848>
 801f972:	2b00      	cmp	r3, #0
 801f974:	db7b      	blt.n	801fa6e <UART_SetConfig+0x8b2>
 801f976:	2b20      	cmp	r3, #32
 801f978:	d879      	bhi.n	801fa6e <UART_SetConfig+0x8b2>
 801f97a:	a201      	add	r2, pc, #4	@ (adr r2, 801f980 <UART_SetConfig+0x7c4>)
 801f97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f980:	0801fa0b 	.word	0x0801fa0b
 801f984:	0801fa13 	.word	0x0801fa13
 801f988:	0801fa6f 	.word	0x0801fa6f
 801f98c:	0801fa6f 	.word	0x0801fa6f
 801f990:	0801fa1b 	.word	0x0801fa1b
 801f994:	0801fa6f 	.word	0x0801fa6f
 801f998:	0801fa6f 	.word	0x0801fa6f
 801f99c:	0801fa6f 	.word	0x0801fa6f
 801f9a0:	0801fa2b 	.word	0x0801fa2b
 801f9a4:	0801fa6f 	.word	0x0801fa6f
 801f9a8:	0801fa6f 	.word	0x0801fa6f
 801f9ac:	0801fa6f 	.word	0x0801fa6f
 801f9b0:	0801fa6f 	.word	0x0801fa6f
 801f9b4:	0801fa6f 	.word	0x0801fa6f
 801f9b8:	0801fa6f 	.word	0x0801fa6f
 801f9bc:	0801fa6f 	.word	0x0801fa6f
 801f9c0:	0801fa3b 	.word	0x0801fa3b
 801f9c4:	0801fa6f 	.word	0x0801fa6f
 801f9c8:	0801fa6f 	.word	0x0801fa6f
 801f9cc:	0801fa6f 	.word	0x0801fa6f
 801f9d0:	0801fa6f 	.word	0x0801fa6f
 801f9d4:	0801fa6f 	.word	0x0801fa6f
 801f9d8:	0801fa6f 	.word	0x0801fa6f
 801f9dc:	0801fa6f 	.word	0x0801fa6f
 801f9e0:	0801fa6f 	.word	0x0801fa6f
 801f9e4:	0801fa6f 	.word	0x0801fa6f
 801f9e8:	0801fa6f 	.word	0x0801fa6f
 801f9ec:	0801fa6f 	.word	0x0801fa6f
 801f9f0:	0801fa6f 	.word	0x0801fa6f
 801f9f4:	0801fa6f 	.word	0x0801fa6f
 801f9f8:	0801fa6f 	.word	0x0801fa6f
 801f9fc:	0801fa6f 	.word	0x0801fa6f
 801fa00:	0801fa61 	.word	0x0801fa61
 801fa04:	2b40      	cmp	r3, #64	@ 0x40
 801fa06:	d02e      	beq.n	801fa66 <UART_SetConfig+0x8aa>
 801fa08:	e031      	b.n	801fa6e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801fa0a:	f7fc fd9d 	bl	801c548 <HAL_RCC_GetPCLK1Freq>
 801fa0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801fa10:	e033      	b.n	801fa7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801fa12:	f7fc fdaf 	bl	801c574 <HAL_RCC_GetPCLK2Freq>
 801fa16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801fa18:	e02f      	b.n	801fa7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801fa1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801fa1e:	4618      	mov	r0, r3
 801fa20:	f7fd ffde 	bl	801d9e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801fa24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fa26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801fa28:	e027      	b.n	801fa7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801fa2a:	f107 0318 	add.w	r3, r7, #24
 801fa2e:	4618      	mov	r0, r3
 801fa30:	f7fe f92a 	bl	801dc88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801fa34:	69fb      	ldr	r3, [r7, #28]
 801fa36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801fa38:	e01f      	b.n	801fa7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801fa3a:	4b2d      	ldr	r3, [pc, #180]	@ (801faf0 <UART_SetConfig+0x934>)
 801fa3c:	681b      	ldr	r3, [r3, #0]
 801fa3e:	f003 0320 	and.w	r3, r3, #32
 801fa42:	2b00      	cmp	r3, #0
 801fa44:	d009      	beq.n	801fa5a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801fa46:	4b2a      	ldr	r3, [pc, #168]	@ (801faf0 <UART_SetConfig+0x934>)
 801fa48:	681b      	ldr	r3, [r3, #0]
 801fa4a:	08db      	lsrs	r3, r3, #3
 801fa4c:	f003 0303 	and.w	r3, r3, #3
 801fa50:	4a24      	ldr	r2, [pc, #144]	@ (801fae4 <UART_SetConfig+0x928>)
 801fa52:	fa22 f303 	lsr.w	r3, r2, r3
 801fa56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801fa58:	e00f      	b.n	801fa7a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801fa5a:	4b22      	ldr	r3, [pc, #136]	@ (801fae4 <UART_SetConfig+0x928>)
 801fa5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801fa5e:	e00c      	b.n	801fa7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801fa60:	4b21      	ldr	r3, [pc, #132]	@ (801fae8 <UART_SetConfig+0x92c>)
 801fa62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801fa64:	e009      	b.n	801fa7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801fa66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801fa6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801fa6c:	e005      	b.n	801fa7a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801fa6e:	2300      	movs	r3, #0
 801fa70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801fa72:	2301      	movs	r3, #1
 801fa74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801fa78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801fa7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801fa7c:	2b00      	cmp	r3, #0
 801fa7e:	f000 80e7 	beq.w	801fc50 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801fa82:	697b      	ldr	r3, [r7, #20]
 801fa84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fa86:	4a19      	ldr	r2, [pc, #100]	@ (801faec <UART_SetConfig+0x930>)
 801fa88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801fa8c:	461a      	mov	r2, r3
 801fa8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801fa90:	fbb3 f3f2 	udiv	r3, r3, r2
 801fa94:	005a      	lsls	r2, r3, #1
 801fa96:	697b      	ldr	r3, [r7, #20]
 801fa98:	685b      	ldr	r3, [r3, #4]
 801fa9a:	085b      	lsrs	r3, r3, #1
 801fa9c:	441a      	add	r2, r3
 801fa9e:	697b      	ldr	r3, [r7, #20]
 801faa0:	685b      	ldr	r3, [r3, #4]
 801faa2:	fbb2 f3f3 	udiv	r3, r2, r3
 801faa6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801faa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801faaa:	2b0f      	cmp	r3, #15
 801faac:	d916      	bls.n	801fadc <UART_SetConfig+0x920>
 801faae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801fab4:	d212      	bcs.n	801fadc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801fab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fab8:	b29b      	uxth	r3, r3
 801faba:	f023 030f 	bic.w	r3, r3, #15
 801fabe:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801fac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fac2:	085b      	lsrs	r3, r3, #1
 801fac4:	b29b      	uxth	r3, r3
 801fac6:	f003 0307 	and.w	r3, r3, #7
 801faca:	b29a      	uxth	r2, r3
 801facc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801face:	4313      	orrs	r3, r2
 801fad0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 801fad2:	697b      	ldr	r3, [r7, #20]
 801fad4:	681b      	ldr	r3, [r3, #0]
 801fad6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801fad8:	60da      	str	r2, [r3, #12]
 801fada:	e0b9      	b.n	801fc50 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801fadc:	2301      	movs	r3, #1
 801fade:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801fae2:	e0b5      	b.n	801fc50 <UART_SetConfig+0xa94>
 801fae4:	03d09000 	.word	0x03d09000
 801fae8:	003d0900 	.word	0x003d0900
 801faec:	08025cc0 	.word	0x08025cc0
 801faf0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 801faf4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801faf8:	2b20      	cmp	r3, #32
 801fafa:	dc49      	bgt.n	801fb90 <UART_SetConfig+0x9d4>
 801fafc:	2b00      	cmp	r3, #0
 801fafe:	db7c      	blt.n	801fbfa <UART_SetConfig+0xa3e>
 801fb00:	2b20      	cmp	r3, #32
 801fb02:	d87a      	bhi.n	801fbfa <UART_SetConfig+0xa3e>
 801fb04:	a201      	add	r2, pc, #4	@ (adr r2, 801fb0c <UART_SetConfig+0x950>)
 801fb06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fb0a:	bf00      	nop
 801fb0c:	0801fb97 	.word	0x0801fb97
 801fb10:	0801fb9f 	.word	0x0801fb9f
 801fb14:	0801fbfb 	.word	0x0801fbfb
 801fb18:	0801fbfb 	.word	0x0801fbfb
 801fb1c:	0801fba7 	.word	0x0801fba7
 801fb20:	0801fbfb 	.word	0x0801fbfb
 801fb24:	0801fbfb 	.word	0x0801fbfb
 801fb28:	0801fbfb 	.word	0x0801fbfb
 801fb2c:	0801fbb7 	.word	0x0801fbb7
 801fb30:	0801fbfb 	.word	0x0801fbfb
 801fb34:	0801fbfb 	.word	0x0801fbfb
 801fb38:	0801fbfb 	.word	0x0801fbfb
 801fb3c:	0801fbfb 	.word	0x0801fbfb
 801fb40:	0801fbfb 	.word	0x0801fbfb
 801fb44:	0801fbfb 	.word	0x0801fbfb
 801fb48:	0801fbfb 	.word	0x0801fbfb
 801fb4c:	0801fbc7 	.word	0x0801fbc7
 801fb50:	0801fbfb 	.word	0x0801fbfb
 801fb54:	0801fbfb 	.word	0x0801fbfb
 801fb58:	0801fbfb 	.word	0x0801fbfb
 801fb5c:	0801fbfb 	.word	0x0801fbfb
 801fb60:	0801fbfb 	.word	0x0801fbfb
 801fb64:	0801fbfb 	.word	0x0801fbfb
 801fb68:	0801fbfb 	.word	0x0801fbfb
 801fb6c:	0801fbfb 	.word	0x0801fbfb
 801fb70:	0801fbfb 	.word	0x0801fbfb
 801fb74:	0801fbfb 	.word	0x0801fbfb
 801fb78:	0801fbfb 	.word	0x0801fbfb
 801fb7c:	0801fbfb 	.word	0x0801fbfb
 801fb80:	0801fbfb 	.word	0x0801fbfb
 801fb84:	0801fbfb 	.word	0x0801fbfb
 801fb88:	0801fbfb 	.word	0x0801fbfb
 801fb8c:	0801fbed 	.word	0x0801fbed
 801fb90:	2b40      	cmp	r3, #64	@ 0x40
 801fb92:	d02e      	beq.n	801fbf2 <UART_SetConfig+0xa36>
 801fb94:	e031      	b.n	801fbfa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801fb96:	f7fc fcd7 	bl	801c548 <HAL_RCC_GetPCLK1Freq>
 801fb9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801fb9c:	e033      	b.n	801fc06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801fb9e:	f7fc fce9 	bl	801c574 <HAL_RCC_GetPCLK2Freq>
 801fba2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801fba4:	e02f      	b.n	801fc06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801fba6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801fbaa:	4618      	mov	r0, r3
 801fbac:	f7fd ff18 	bl	801d9e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801fbb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fbb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801fbb4:	e027      	b.n	801fc06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801fbb6:	f107 0318 	add.w	r3, r7, #24
 801fbba:	4618      	mov	r0, r3
 801fbbc:	f7fe f864 	bl	801dc88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801fbc0:	69fb      	ldr	r3, [r7, #28]
 801fbc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801fbc4:	e01f      	b.n	801fc06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801fbc6:	4b2d      	ldr	r3, [pc, #180]	@ (801fc7c <UART_SetConfig+0xac0>)
 801fbc8:	681b      	ldr	r3, [r3, #0]
 801fbca:	f003 0320 	and.w	r3, r3, #32
 801fbce:	2b00      	cmp	r3, #0
 801fbd0:	d009      	beq.n	801fbe6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801fbd2:	4b2a      	ldr	r3, [pc, #168]	@ (801fc7c <UART_SetConfig+0xac0>)
 801fbd4:	681b      	ldr	r3, [r3, #0]
 801fbd6:	08db      	lsrs	r3, r3, #3
 801fbd8:	f003 0303 	and.w	r3, r3, #3
 801fbdc:	4a28      	ldr	r2, [pc, #160]	@ (801fc80 <UART_SetConfig+0xac4>)
 801fbde:	fa22 f303 	lsr.w	r3, r2, r3
 801fbe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801fbe4:	e00f      	b.n	801fc06 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801fbe6:	4b26      	ldr	r3, [pc, #152]	@ (801fc80 <UART_SetConfig+0xac4>)
 801fbe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801fbea:	e00c      	b.n	801fc06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801fbec:	4b25      	ldr	r3, [pc, #148]	@ (801fc84 <UART_SetConfig+0xac8>)
 801fbee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801fbf0:	e009      	b.n	801fc06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801fbf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801fbf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801fbf8:	e005      	b.n	801fc06 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801fbfa:	2300      	movs	r3, #0
 801fbfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801fbfe:	2301      	movs	r3, #1
 801fc00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801fc04:	bf00      	nop
    }

    if (pclk != 0U)
 801fc06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801fc08:	2b00      	cmp	r3, #0
 801fc0a:	d021      	beq.n	801fc50 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801fc0c:	697b      	ldr	r3, [r7, #20]
 801fc0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fc10:	4a1d      	ldr	r2, [pc, #116]	@ (801fc88 <UART_SetConfig+0xacc>)
 801fc12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801fc16:	461a      	mov	r2, r3
 801fc18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801fc1a:	fbb3 f2f2 	udiv	r2, r3, r2
 801fc1e:	697b      	ldr	r3, [r7, #20]
 801fc20:	685b      	ldr	r3, [r3, #4]
 801fc22:	085b      	lsrs	r3, r3, #1
 801fc24:	441a      	add	r2, r3
 801fc26:	697b      	ldr	r3, [r7, #20]
 801fc28:	685b      	ldr	r3, [r3, #4]
 801fc2a:	fbb2 f3f3 	udiv	r3, r2, r3
 801fc2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801fc30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fc32:	2b0f      	cmp	r3, #15
 801fc34:	d909      	bls.n	801fc4a <UART_SetConfig+0xa8e>
 801fc36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fc38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801fc3c:	d205      	bcs.n	801fc4a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801fc3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fc40:	b29a      	uxth	r2, r3
 801fc42:	697b      	ldr	r3, [r7, #20]
 801fc44:	681b      	ldr	r3, [r3, #0]
 801fc46:	60da      	str	r2, [r3, #12]
 801fc48:	e002      	b.n	801fc50 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801fc4a:	2301      	movs	r3, #1
 801fc4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801fc50:	697b      	ldr	r3, [r7, #20]
 801fc52:	2201      	movs	r2, #1
 801fc54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801fc58:	697b      	ldr	r3, [r7, #20]
 801fc5a:	2201      	movs	r2, #1
 801fc5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801fc60:	697b      	ldr	r3, [r7, #20]
 801fc62:	2200      	movs	r2, #0
 801fc64:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801fc66:	697b      	ldr	r3, [r7, #20]
 801fc68:	2200      	movs	r2, #0
 801fc6a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801fc6c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 801fc70:	4618      	mov	r0, r3
 801fc72:	3748      	adds	r7, #72	@ 0x48
 801fc74:	46bd      	mov	sp, r7
 801fc76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801fc7a:	bf00      	nop
 801fc7c:	58024400 	.word	0x58024400
 801fc80:	03d09000 	.word	0x03d09000
 801fc84:	003d0900 	.word	0x003d0900
 801fc88:	08025cc0 	.word	0x08025cc0

0801fc8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801fc8c:	b480      	push	{r7}
 801fc8e:	b083      	sub	sp, #12
 801fc90:	af00      	add	r7, sp, #0
 801fc92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801fc94:	687b      	ldr	r3, [r7, #4]
 801fc96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fc98:	f003 0308 	and.w	r3, r3, #8
 801fc9c:	2b00      	cmp	r3, #0
 801fc9e:	d00a      	beq.n	801fcb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801fca0:	687b      	ldr	r3, [r7, #4]
 801fca2:	681b      	ldr	r3, [r3, #0]
 801fca4:	685b      	ldr	r3, [r3, #4]
 801fca6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801fcaa:	687b      	ldr	r3, [r7, #4]
 801fcac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801fcae:	687b      	ldr	r3, [r7, #4]
 801fcb0:	681b      	ldr	r3, [r3, #0]
 801fcb2:	430a      	orrs	r2, r1
 801fcb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801fcb6:	687b      	ldr	r3, [r7, #4]
 801fcb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fcba:	f003 0301 	and.w	r3, r3, #1
 801fcbe:	2b00      	cmp	r3, #0
 801fcc0:	d00a      	beq.n	801fcd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801fcc2:	687b      	ldr	r3, [r7, #4]
 801fcc4:	681b      	ldr	r3, [r3, #0]
 801fcc6:	685b      	ldr	r3, [r3, #4]
 801fcc8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801fccc:	687b      	ldr	r3, [r7, #4]
 801fcce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801fcd0:	687b      	ldr	r3, [r7, #4]
 801fcd2:	681b      	ldr	r3, [r3, #0]
 801fcd4:	430a      	orrs	r2, r1
 801fcd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801fcd8:	687b      	ldr	r3, [r7, #4]
 801fcda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fcdc:	f003 0302 	and.w	r3, r3, #2
 801fce0:	2b00      	cmp	r3, #0
 801fce2:	d00a      	beq.n	801fcfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801fce4:	687b      	ldr	r3, [r7, #4]
 801fce6:	681b      	ldr	r3, [r3, #0]
 801fce8:	685b      	ldr	r3, [r3, #4]
 801fcea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801fcee:	687b      	ldr	r3, [r7, #4]
 801fcf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801fcf2:	687b      	ldr	r3, [r7, #4]
 801fcf4:	681b      	ldr	r3, [r3, #0]
 801fcf6:	430a      	orrs	r2, r1
 801fcf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801fcfa:	687b      	ldr	r3, [r7, #4]
 801fcfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fcfe:	f003 0304 	and.w	r3, r3, #4
 801fd02:	2b00      	cmp	r3, #0
 801fd04:	d00a      	beq.n	801fd1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801fd06:	687b      	ldr	r3, [r7, #4]
 801fd08:	681b      	ldr	r3, [r3, #0]
 801fd0a:	685b      	ldr	r3, [r3, #4]
 801fd0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801fd10:	687b      	ldr	r3, [r7, #4]
 801fd12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801fd14:	687b      	ldr	r3, [r7, #4]
 801fd16:	681b      	ldr	r3, [r3, #0]
 801fd18:	430a      	orrs	r2, r1
 801fd1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801fd1c:	687b      	ldr	r3, [r7, #4]
 801fd1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fd20:	f003 0310 	and.w	r3, r3, #16
 801fd24:	2b00      	cmp	r3, #0
 801fd26:	d00a      	beq.n	801fd3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801fd28:	687b      	ldr	r3, [r7, #4]
 801fd2a:	681b      	ldr	r3, [r3, #0]
 801fd2c:	689b      	ldr	r3, [r3, #8]
 801fd2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801fd32:	687b      	ldr	r3, [r7, #4]
 801fd34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801fd36:	687b      	ldr	r3, [r7, #4]
 801fd38:	681b      	ldr	r3, [r3, #0]
 801fd3a:	430a      	orrs	r2, r1
 801fd3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801fd3e:	687b      	ldr	r3, [r7, #4]
 801fd40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fd42:	f003 0320 	and.w	r3, r3, #32
 801fd46:	2b00      	cmp	r3, #0
 801fd48:	d00a      	beq.n	801fd60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801fd4a:	687b      	ldr	r3, [r7, #4]
 801fd4c:	681b      	ldr	r3, [r3, #0]
 801fd4e:	689b      	ldr	r3, [r3, #8]
 801fd50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801fd54:	687b      	ldr	r3, [r7, #4]
 801fd56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801fd58:	687b      	ldr	r3, [r7, #4]
 801fd5a:	681b      	ldr	r3, [r3, #0]
 801fd5c:	430a      	orrs	r2, r1
 801fd5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801fd60:	687b      	ldr	r3, [r7, #4]
 801fd62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fd64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801fd68:	2b00      	cmp	r3, #0
 801fd6a:	d01a      	beq.n	801fda2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801fd6c:	687b      	ldr	r3, [r7, #4]
 801fd6e:	681b      	ldr	r3, [r3, #0]
 801fd70:	685b      	ldr	r3, [r3, #4]
 801fd72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801fd76:	687b      	ldr	r3, [r7, #4]
 801fd78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801fd7a:	687b      	ldr	r3, [r7, #4]
 801fd7c:	681b      	ldr	r3, [r3, #0]
 801fd7e:	430a      	orrs	r2, r1
 801fd80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801fd82:	687b      	ldr	r3, [r7, #4]
 801fd84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801fd86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801fd8a:	d10a      	bne.n	801fda2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801fd8c:	687b      	ldr	r3, [r7, #4]
 801fd8e:	681b      	ldr	r3, [r3, #0]
 801fd90:	685b      	ldr	r3, [r3, #4]
 801fd92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801fd96:	687b      	ldr	r3, [r7, #4]
 801fd98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801fd9a:	687b      	ldr	r3, [r7, #4]
 801fd9c:	681b      	ldr	r3, [r3, #0]
 801fd9e:	430a      	orrs	r2, r1
 801fda0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801fda2:	687b      	ldr	r3, [r7, #4]
 801fda4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fda6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801fdaa:	2b00      	cmp	r3, #0
 801fdac:	d00a      	beq.n	801fdc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801fdae:	687b      	ldr	r3, [r7, #4]
 801fdb0:	681b      	ldr	r3, [r3, #0]
 801fdb2:	685b      	ldr	r3, [r3, #4]
 801fdb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801fdb8:	687b      	ldr	r3, [r7, #4]
 801fdba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801fdbc:	687b      	ldr	r3, [r7, #4]
 801fdbe:	681b      	ldr	r3, [r3, #0]
 801fdc0:	430a      	orrs	r2, r1
 801fdc2:	605a      	str	r2, [r3, #4]
  }
}
 801fdc4:	bf00      	nop
 801fdc6:	370c      	adds	r7, #12
 801fdc8:	46bd      	mov	sp, r7
 801fdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fdce:	4770      	bx	lr

0801fdd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801fdd0:	b580      	push	{r7, lr}
 801fdd2:	b098      	sub	sp, #96	@ 0x60
 801fdd4:	af02      	add	r7, sp, #8
 801fdd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801fdd8:	687b      	ldr	r3, [r7, #4]
 801fdda:	2200      	movs	r2, #0
 801fddc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801fde0:	f7f9 f952 	bl	8019088 <HAL_GetTick>
 801fde4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801fde6:	687b      	ldr	r3, [r7, #4]
 801fde8:	681b      	ldr	r3, [r3, #0]
 801fdea:	681b      	ldr	r3, [r3, #0]
 801fdec:	f003 0308 	and.w	r3, r3, #8
 801fdf0:	2b08      	cmp	r3, #8
 801fdf2:	d12f      	bne.n	801fe54 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801fdf4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801fdf8:	9300      	str	r3, [sp, #0]
 801fdfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801fdfc:	2200      	movs	r2, #0
 801fdfe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801fe02:	6878      	ldr	r0, [r7, #4]
 801fe04:	f000 f88e 	bl	801ff24 <UART_WaitOnFlagUntilTimeout>
 801fe08:	4603      	mov	r3, r0
 801fe0a:	2b00      	cmp	r3, #0
 801fe0c:	d022      	beq.n	801fe54 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801fe0e:	687b      	ldr	r3, [r7, #4]
 801fe10:	681b      	ldr	r3, [r3, #0]
 801fe12:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fe14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fe16:	e853 3f00 	ldrex	r3, [r3]
 801fe1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801fe1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fe1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801fe22:	653b      	str	r3, [r7, #80]	@ 0x50
 801fe24:	687b      	ldr	r3, [r7, #4]
 801fe26:	681b      	ldr	r3, [r3, #0]
 801fe28:	461a      	mov	r2, r3
 801fe2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fe2c:	647b      	str	r3, [r7, #68]	@ 0x44
 801fe2e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fe30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801fe32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801fe34:	e841 2300 	strex	r3, r2, [r1]
 801fe38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801fe3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801fe3c:	2b00      	cmp	r3, #0
 801fe3e:	d1e6      	bne.n	801fe0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801fe40:	687b      	ldr	r3, [r7, #4]
 801fe42:	2220      	movs	r2, #32
 801fe44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801fe48:	687b      	ldr	r3, [r7, #4]
 801fe4a:	2200      	movs	r2, #0
 801fe4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801fe50:	2303      	movs	r3, #3
 801fe52:	e063      	b.n	801ff1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801fe54:	687b      	ldr	r3, [r7, #4]
 801fe56:	681b      	ldr	r3, [r3, #0]
 801fe58:	681b      	ldr	r3, [r3, #0]
 801fe5a:	f003 0304 	and.w	r3, r3, #4
 801fe5e:	2b04      	cmp	r3, #4
 801fe60:	d149      	bne.n	801fef6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801fe62:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801fe66:	9300      	str	r3, [sp, #0]
 801fe68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801fe6a:	2200      	movs	r2, #0
 801fe6c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801fe70:	6878      	ldr	r0, [r7, #4]
 801fe72:	f000 f857 	bl	801ff24 <UART_WaitOnFlagUntilTimeout>
 801fe76:	4603      	mov	r3, r0
 801fe78:	2b00      	cmp	r3, #0
 801fe7a:	d03c      	beq.n	801fef6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801fe7c:	687b      	ldr	r3, [r7, #4]
 801fe7e:	681b      	ldr	r3, [r3, #0]
 801fe80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fe82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe84:	e853 3f00 	ldrex	r3, [r3]
 801fe88:	623b      	str	r3, [r7, #32]
   return(result);
 801fe8a:	6a3b      	ldr	r3, [r7, #32]
 801fe8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801fe90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801fe92:	687b      	ldr	r3, [r7, #4]
 801fe94:	681b      	ldr	r3, [r3, #0]
 801fe96:	461a      	mov	r2, r3
 801fe98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801fe9a:	633b      	str	r3, [r7, #48]	@ 0x30
 801fe9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fe9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801fea0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801fea2:	e841 2300 	strex	r3, r2, [r1]
 801fea6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801fea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801feaa:	2b00      	cmp	r3, #0
 801feac:	d1e6      	bne.n	801fe7c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801feae:	687b      	ldr	r3, [r7, #4]
 801feb0:	681b      	ldr	r3, [r3, #0]
 801feb2:	3308      	adds	r3, #8
 801feb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801feb6:	693b      	ldr	r3, [r7, #16]
 801feb8:	e853 3f00 	ldrex	r3, [r3]
 801febc:	60fb      	str	r3, [r7, #12]
   return(result);
 801febe:	68fb      	ldr	r3, [r7, #12]
 801fec0:	f023 0301 	bic.w	r3, r3, #1
 801fec4:	64bb      	str	r3, [r7, #72]	@ 0x48
 801fec6:	687b      	ldr	r3, [r7, #4]
 801fec8:	681b      	ldr	r3, [r3, #0]
 801feca:	3308      	adds	r3, #8
 801fecc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801fece:	61fa      	str	r2, [r7, #28]
 801fed0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fed2:	69b9      	ldr	r1, [r7, #24]
 801fed4:	69fa      	ldr	r2, [r7, #28]
 801fed6:	e841 2300 	strex	r3, r2, [r1]
 801feda:	617b      	str	r3, [r7, #20]
   return(result);
 801fedc:	697b      	ldr	r3, [r7, #20]
 801fede:	2b00      	cmp	r3, #0
 801fee0:	d1e5      	bne.n	801feae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801fee2:	687b      	ldr	r3, [r7, #4]
 801fee4:	2220      	movs	r2, #32
 801fee6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801feea:	687b      	ldr	r3, [r7, #4]
 801feec:	2200      	movs	r2, #0
 801feee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801fef2:	2303      	movs	r3, #3
 801fef4:	e012      	b.n	801ff1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801fef6:	687b      	ldr	r3, [r7, #4]
 801fef8:	2220      	movs	r2, #32
 801fefa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801fefe:	687b      	ldr	r3, [r7, #4]
 801ff00:	2220      	movs	r2, #32
 801ff02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ff06:	687b      	ldr	r3, [r7, #4]
 801ff08:	2200      	movs	r2, #0
 801ff0a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801ff0c:	687b      	ldr	r3, [r7, #4]
 801ff0e:	2200      	movs	r2, #0
 801ff10:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801ff12:	687b      	ldr	r3, [r7, #4]
 801ff14:	2200      	movs	r2, #0
 801ff16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801ff1a:	2300      	movs	r3, #0
}
 801ff1c:	4618      	mov	r0, r3
 801ff1e:	3758      	adds	r7, #88	@ 0x58
 801ff20:	46bd      	mov	sp, r7
 801ff22:	bd80      	pop	{r7, pc}

0801ff24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801ff24:	b580      	push	{r7, lr}
 801ff26:	b084      	sub	sp, #16
 801ff28:	af00      	add	r7, sp, #0
 801ff2a:	60f8      	str	r0, [r7, #12]
 801ff2c:	60b9      	str	r1, [r7, #8]
 801ff2e:	603b      	str	r3, [r7, #0]
 801ff30:	4613      	mov	r3, r2
 801ff32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801ff34:	e04f      	b.n	801ffd6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801ff36:	69bb      	ldr	r3, [r7, #24]
 801ff38:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ff3c:	d04b      	beq.n	801ffd6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ff3e:	f7f9 f8a3 	bl	8019088 <HAL_GetTick>
 801ff42:	4602      	mov	r2, r0
 801ff44:	683b      	ldr	r3, [r7, #0]
 801ff46:	1ad3      	subs	r3, r2, r3
 801ff48:	69ba      	ldr	r2, [r7, #24]
 801ff4a:	429a      	cmp	r2, r3
 801ff4c:	d302      	bcc.n	801ff54 <UART_WaitOnFlagUntilTimeout+0x30>
 801ff4e:	69bb      	ldr	r3, [r7, #24]
 801ff50:	2b00      	cmp	r3, #0
 801ff52:	d101      	bne.n	801ff58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801ff54:	2303      	movs	r3, #3
 801ff56:	e04e      	b.n	801fff6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801ff58:	68fb      	ldr	r3, [r7, #12]
 801ff5a:	681b      	ldr	r3, [r3, #0]
 801ff5c:	681b      	ldr	r3, [r3, #0]
 801ff5e:	f003 0304 	and.w	r3, r3, #4
 801ff62:	2b00      	cmp	r3, #0
 801ff64:	d037      	beq.n	801ffd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 801ff66:	68bb      	ldr	r3, [r7, #8]
 801ff68:	2b80      	cmp	r3, #128	@ 0x80
 801ff6a:	d034      	beq.n	801ffd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 801ff6c:	68bb      	ldr	r3, [r7, #8]
 801ff6e:	2b40      	cmp	r3, #64	@ 0x40
 801ff70:	d031      	beq.n	801ffd6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801ff72:	68fb      	ldr	r3, [r7, #12]
 801ff74:	681b      	ldr	r3, [r3, #0]
 801ff76:	69db      	ldr	r3, [r3, #28]
 801ff78:	f003 0308 	and.w	r3, r3, #8
 801ff7c:	2b08      	cmp	r3, #8
 801ff7e:	d110      	bne.n	801ffa2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801ff80:	68fb      	ldr	r3, [r7, #12]
 801ff82:	681b      	ldr	r3, [r3, #0]
 801ff84:	2208      	movs	r2, #8
 801ff86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801ff88:	68f8      	ldr	r0, [r7, #12]
 801ff8a:	f000 f839 	bl	8020000 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801ff8e:	68fb      	ldr	r3, [r7, #12]
 801ff90:	2208      	movs	r2, #8
 801ff92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801ff96:	68fb      	ldr	r3, [r7, #12]
 801ff98:	2200      	movs	r2, #0
 801ff9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801ff9e:	2301      	movs	r3, #1
 801ffa0:	e029      	b.n	801fff6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801ffa2:	68fb      	ldr	r3, [r7, #12]
 801ffa4:	681b      	ldr	r3, [r3, #0]
 801ffa6:	69db      	ldr	r3, [r3, #28]
 801ffa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801ffac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801ffb0:	d111      	bne.n	801ffd6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801ffb2:	68fb      	ldr	r3, [r7, #12]
 801ffb4:	681b      	ldr	r3, [r3, #0]
 801ffb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801ffba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801ffbc:	68f8      	ldr	r0, [r7, #12]
 801ffbe:	f000 f81f 	bl	8020000 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801ffc2:	68fb      	ldr	r3, [r7, #12]
 801ffc4:	2220      	movs	r2, #32
 801ffc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801ffca:	68fb      	ldr	r3, [r7, #12]
 801ffcc:	2200      	movs	r2, #0
 801ffce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801ffd2:	2303      	movs	r3, #3
 801ffd4:	e00f      	b.n	801fff6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801ffd6:	68fb      	ldr	r3, [r7, #12]
 801ffd8:	681b      	ldr	r3, [r3, #0]
 801ffda:	69da      	ldr	r2, [r3, #28]
 801ffdc:	68bb      	ldr	r3, [r7, #8]
 801ffde:	4013      	ands	r3, r2
 801ffe0:	68ba      	ldr	r2, [r7, #8]
 801ffe2:	429a      	cmp	r2, r3
 801ffe4:	bf0c      	ite	eq
 801ffe6:	2301      	moveq	r3, #1
 801ffe8:	2300      	movne	r3, #0
 801ffea:	b2db      	uxtb	r3, r3
 801ffec:	461a      	mov	r2, r3
 801ffee:	79fb      	ldrb	r3, [r7, #7]
 801fff0:	429a      	cmp	r2, r3
 801fff2:	d0a0      	beq.n	801ff36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801fff4:	2300      	movs	r3, #0
}
 801fff6:	4618      	mov	r0, r3
 801fff8:	3710      	adds	r7, #16
 801fffa:	46bd      	mov	sp, r7
 801fffc:	bd80      	pop	{r7, pc}
	...

08020000 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8020000:	b480      	push	{r7}
 8020002:	b095      	sub	sp, #84	@ 0x54
 8020004:	af00      	add	r7, sp, #0
 8020006:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8020008:	687b      	ldr	r3, [r7, #4]
 802000a:	681b      	ldr	r3, [r3, #0]
 802000c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802000e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020010:	e853 3f00 	ldrex	r3, [r3]
 8020014:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8020016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020018:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 802001c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802001e:	687b      	ldr	r3, [r7, #4]
 8020020:	681b      	ldr	r3, [r3, #0]
 8020022:	461a      	mov	r2, r3
 8020024:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020026:	643b      	str	r3, [r7, #64]	@ 0x40
 8020028:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802002a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 802002c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802002e:	e841 2300 	strex	r3, r2, [r1]
 8020032:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8020034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020036:	2b00      	cmp	r3, #0
 8020038:	d1e6      	bne.n	8020008 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 802003a:	687b      	ldr	r3, [r7, #4]
 802003c:	681b      	ldr	r3, [r3, #0]
 802003e:	3308      	adds	r3, #8
 8020040:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020042:	6a3b      	ldr	r3, [r7, #32]
 8020044:	e853 3f00 	ldrex	r3, [r3]
 8020048:	61fb      	str	r3, [r7, #28]
   return(result);
 802004a:	69fa      	ldr	r2, [r7, #28]
 802004c:	4b1e      	ldr	r3, [pc, #120]	@ (80200c8 <UART_EndRxTransfer+0xc8>)
 802004e:	4013      	ands	r3, r2
 8020050:	64bb      	str	r3, [r7, #72]	@ 0x48
 8020052:	687b      	ldr	r3, [r7, #4]
 8020054:	681b      	ldr	r3, [r3, #0]
 8020056:	3308      	adds	r3, #8
 8020058:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802005a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802005c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802005e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8020060:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8020062:	e841 2300 	strex	r3, r2, [r1]
 8020066:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8020068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802006a:	2b00      	cmp	r3, #0
 802006c:	d1e5      	bne.n	802003a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802006e:	687b      	ldr	r3, [r7, #4]
 8020070:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8020072:	2b01      	cmp	r3, #1
 8020074:	d118      	bne.n	80200a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8020076:	687b      	ldr	r3, [r7, #4]
 8020078:	681b      	ldr	r3, [r3, #0]
 802007a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802007c:	68fb      	ldr	r3, [r7, #12]
 802007e:	e853 3f00 	ldrex	r3, [r3]
 8020082:	60bb      	str	r3, [r7, #8]
   return(result);
 8020084:	68bb      	ldr	r3, [r7, #8]
 8020086:	f023 0310 	bic.w	r3, r3, #16
 802008a:	647b      	str	r3, [r7, #68]	@ 0x44
 802008c:	687b      	ldr	r3, [r7, #4]
 802008e:	681b      	ldr	r3, [r3, #0]
 8020090:	461a      	mov	r2, r3
 8020092:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020094:	61bb      	str	r3, [r7, #24]
 8020096:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020098:	6979      	ldr	r1, [r7, #20]
 802009a:	69ba      	ldr	r2, [r7, #24]
 802009c:	e841 2300 	strex	r3, r2, [r1]
 80200a0:	613b      	str	r3, [r7, #16]
   return(result);
 80200a2:	693b      	ldr	r3, [r7, #16]
 80200a4:	2b00      	cmp	r3, #0
 80200a6:	d1e6      	bne.n	8020076 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80200a8:	687b      	ldr	r3, [r7, #4]
 80200aa:	2220      	movs	r2, #32
 80200ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80200b0:	687b      	ldr	r3, [r7, #4]
 80200b2:	2200      	movs	r2, #0
 80200b4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80200b6:	687b      	ldr	r3, [r7, #4]
 80200b8:	2200      	movs	r2, #0
 80200ba:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80200bc:	bf00      	nop
 80200be:	3754      	adds	r7, #84	@ 0x54
 80200c0:	46bd      	mov	sp, r7
 80200c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200c6:	4770      	bx	lr
 80200c8:	effffffe 	.word	0xeffffffe

080200cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80200cc:	b480      	push	{r7}
 80200ce:	b085      	sub	sp, #20
 80200d0:	af00      	add	r7, sp, #0
 80200d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80200d4:	687b      	ldr	r3, [r7, #4]
 80200d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80200da:	2b01      	cmp	r3, #1
 80200dc:	d101      	bne.n	80200e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80200de:	2302      	movs	r3, #2
 80200e0:	e027      	b.n	8020132 <HAL_UARTEx_DisableFifoMode+0x66>
 80200e2:	687b      	ldr	r3, [r7, #4]
 80200e4:	2201      	movs	r2, #1
 80200e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80200ea:	687b      	ldr	r3, [r7, #4]
 80200ec:	2224      	movs	r2, #36	@ 0x24
 80200ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80200f2:	687b      	ldr	r3, [r7, #4]
 80200f4:	681b      	ldr	r3, [r3, #0]
 80200f6:	681b      	ldr	r3, [r3, #0]
 80200f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80200fa:	687b      	ldr	r3, [r7, #4]
 80200fc:	681b      	ldr	r3, [r3, #0]
 80200fe:	681a      	ldr	r2, [r3, #0]
 8020100:	687b      	ldr	r3, [r7, #4]
 8020102:	681b      	ldr	r3, [r3, #0]
 8020104:	f022 0201 	bic.w	r2, r2, #1
 8020108:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 802010a:	68fb      	ldr	r3, [r7, #12]
 802010c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8020110:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8020112:	687b      	ldr	r3, [r7, #4]
 8020114:	2200      	movs	r2, #0
 8020116:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8020118:	687b      	ldr	r3, [r7, #4]
 802011a:	681b      	ldr	r3, [r3, #0]
 802011c:	68fa      	ldr	r2, [r7, #12]
 802011e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8020120:	687b      	ldr	r3, [r7, #4]
 8020122:	2220      	movs	r2, #32
 8020124:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8020128:	687b      	ldr	r3, [r7, #4]
 802012a:	2200      	movs	r2, #0
 802012c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8020130:	2300      	movs	r3, #0
}
 8020132:	4618      	mov	r0, r3
 8020134:	3714      	adds	r7, #20
 8020136:	46bd      	mov	sp, r7
 8020138:	f85d 7b04 	ldr.w	r7, [sp], #4
 802013c:	4770      	bx	lr

0802013e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 802013e:	b580      	push	{r7, lr}
 8020140:	b084      	sub	sp, #16
 8020142:	af00      	add	r7, sp, #0
 8020144:	6078      	str	r0, [r7, #4]
 8020146:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8020148:	687b      	ldr	r3, [r7, #4]
 802014a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 802014e:	2b01      	cmp	r3, #1
 8020150:	d101      	bne.n	8020156 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8020152:	2302      	movs	r3, #2
 8020154:	e02d      	b.n	80201b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8020156:	687b      	ldr	r3, [r7, #4]
 8020158:	2201      	movs	r2, #1
 802015a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 802015e:	687b      	ldr	r3, [r7, #4]
 8020160:	2224      	movs	r2, #36	@ 0x24
 8020162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8020166:	687b      	ldr	r3, [r7, #4]
 8020168:	681b      	ldr	r3, [r3, #0]
 802016a:	681b      	ldr	r3, [r3, #0]
 802016c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802016e:	687b      	ldr	r3, [r7, #4]
 8020170:	681b      	ldr	r3, [r3, #0]
 8020172:	681a      	ldr	r2, [r3, #0]
 8020174:	687b      	ldr	r3, [r7, #4]
 8020176:	681b      	ldr	r3, [r3, #0]
 8020178:	f022 0201 	bic.w	r2, r2, #1
 802017c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 802017e:	687b      	ldr	r3, [r7, #4]
 8020180:	681b      	ldr	r3, [r3, #0]
 8020182:	689b      	ldr	r3, [r3, #8]
 8020184:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8020188:	687b      	ldr	r3, [r7, #4]
 802018a:	681b      	ldr	r3, [r3, #0]
 802018c:	683a      	ldr	r2, [r7, #0]
 802018e:	430a      	orrs	r2, r1
 8020190:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8020192:	6878      	ldr	r0, [r7, #4]
 8020194:	f000 f850 	bl	8020238 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8020198:	687b      	ldr	r3, [r7, #4]
 802019a:	681b      	ldr	r3, [r3, #0]
 802019c:	68fa      	ldr	r2, [r7, #12]
 802019e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80201a0:	687b      	ldr	r3, [r7, #4]
 80201a2:	2220      	movs	r2, #32
 80201a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80201a8:	687b      	ldr	r3, [r7, #4]
 80201aa:	2200      	movs	r2, #0
 80201ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80201b0:	2300      	movs	r3, #0
}
 80201b2:	4618      	mov	r0, r3
 80201b4:	3710      	adds	r7, #16
 80201b6:	46bd      	mov	sp, r7
 80201b8:	bd80      	pop	{r7, pc}

080201ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80201ba:	b580      	push	{r7, lr}
 80201bc:	b084      	sub	sp, #16
 80201be:	af00      	add	r7, sp, #0
 80201c0:	6078      	str	r0, [r7, #4]
 80201c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80201c4:	687b      	ldr	r3, [r7, #4]
 80201c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80201ca:	2b01      	cmp	r3, #1
 80201cc:	d101      	bne.n	80201d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80201ce:	2302      	movs	r3, #2
 80201d0:	e02d      	b.n	802022e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80201d2:	687b      	ldr	r3, [r7, #4]
 80201d4:	2201      	movs	r2, #1
 80201d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80201da:	687b      	ldr	r3, [r7, #4]
 80201dc:	2224      	movs	r2, #36	@ 0x24
 80201de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80201e2:	687b      	ldr	r3, [r7, #4]
 80201e4:	681b      	ldr	r3, [r3, #0]
 80201e6:	681b      	ldr	r3, [r3, #0]
 80201e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80201ea:	687b      	ldr	r3, [r7, #4]
 80201ec:	681b      	ldr	r3, [r3, #0]
 80201ee:	681a      	ldr	r2, [r3, #0]
 80201f0:	687b      	ldr	r3, [r7, #4]
 80201f2:	681b      	ldr	r3, [r3, #0]
 80201f4:	f022 0201 	bic.w	r2, r2, #1
 80201f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80201fa:	687b      	ldr	r3, [r7, #4]
 80201fc:	681b      	ldr	r3, [r3, #0]
 80201fe:	689b      	ldr	r3, [r3, #8]
 8020200:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8020204:	687b      	ldr	r3, [r7, #4]
 8020206:	681b      	ldr	r3, [r3, #0]
 8020208:	683a      	ldr	r2, [r7, #0]
 802020a:	430a      	orrs	r2, r1
 802020c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 802020e:	6878      	ldr	r0, [r7, #4]
 8020210:	f000 f812 	bl	8020238 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8020214:	687b      	ldr	r3, [r7, #4]
 8020216:	681b      	ldr	r3, [r3, #0]
 8020218:	68fa      	ldr	r2, [r7, #12]
 802021a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802021c:	687b      	ldr	r3, [r7, #4]
 802021e:	2220      	movs	r2, #32
 8020220:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8020224:	687b      	ldr	r3, [r7, #4]
 8020226:	2200      	movs	r2, #0
 8020228:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 802022c:	2300      	movs	r3, #0
}
 802022e:	4618      	mov	r0, r3
 8020230:	3710      	adds	r7, #16
 8020232:	46bd      	mov	sp, r7
 8020234:	bd80      	pop	{r7, pc}
	...

08020238 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8020238:	b480      	push	{r7}
 802023a:	b085      	sub	sp, #20
 802023c:	af00      	add	r7, sp, #0
 802023e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8020240:	687b      	ldr	r3, [r7, #4]
 8020242:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8020244:	2b00      	cmp	r3, #0
 8020246:	d108      	bne.n	802025a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8020248:	687b      	ldr	r3, [r7, #4]
 802024a:	2201      	movs	r2, #1
 802024c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8020250:	687b      	ldr	r3, [r7, #4]
 8020252:	2201      	movs	r2, #1
 8020254:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8020258:	e031      	b.n	80202be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 802025a:	2310      	movs	r3, #16
 802025c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 802025e:	2310      	movs	r3, #16
 8020260:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8020262:	687b      	ldr	r3, [r7, #4]
 8020264:	681b      	ldr	r3, [r3, #0]
 8020266:	689b      	ldr	r3, [r3, #8]
 8020268:	0e5b      	lsrs	r3, r3, #25
 802026a:	b2db      	uxtb	r3, r3
 802026c:	f003 0307 	and.w	r3, r3, #7
 8020270:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8020272:	687b      	ldr	r3, [r7, #4]
 8020274:	681b      	ldr	r3, [r3, #0]
 8020276:	689b      	ldr	r3, [r3, #8]
 8020278:	0f5b      	lsrs	r3, r3, #29
 802027a:	b2db      	uxtb	r3, r3
 802027c:	f003 0307 	and.w	r3, r3, #7
 8020280:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8020282:	7bbb      	ldrb	r3, [r7, #14]
 8020284:	7b3a      	ldrb	r2, [r7, #12]
 8020286:	4911      	ldr	r1, [pc, #68]	@ (80202cc <UARTEx_SetNbDataToProcess+0x94>)
 8020288:	5c8a      	ldrb	r2, [r1, r2]
 802028a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 802028e:	7b3a      	ldrb	r2, [r7, #12]
 8020290:	490f      	ldr	r1, [pc, #60]	@ (80202d0 <UARTEx_SetNbDataToProcess+0x98>)
 8020292:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8020294:	fb93 f3f2 	sdiv	r3, r3, r2
 8020298:	b29a      	uxth	r2, r3
 802029a:	687b      	ldr	r3, [r7, #4]
 802029c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80202a0:	7bfb      	ldrb	r3, [r7, #15]
 80202a2:	7b7a      	ldrb	r2, [r7, #13]
 80202a4:	4909      	ldr	r1, [pc, #36]	@ (80202cc <UARTEx_SetNbDataToProcess+0x94>)
 80202a6:	5c8a      	ldrb	r2, [r1, r2]
 80202a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80202ac:	7b7a      	ldrb	r2, [r7, #13]
 80202ae:	4908      	ldr	r1, [pc, #32]	@ (80202d0 <UARTEx_SetNbDataToProcess+0x98>)
 80202b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80202b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80202b6:	b29a      	uxth	r2, r3
 80202b8:	687b      	ldr	r3, [r7, #4]
 80202ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80202be:	bf00      	nop
 80202c0:	3714      	adds	r7, #20
 80202c2:	46bd      	mov	sp, r7
 80202c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202c8:	4770      	bx	lr
 80202ca:	bf00      	nop
 80202cc:	08025cd8 	.word	0x08025cd8
 80202d0:	08025ce0 	.word	0x08025ce0

080202d4 <prvInitialiseLogging>:

extern NetworkInterface_t xInterfaces[ 1 ];
/*-----------------------------------------------------------*/

static BaseType_t prvInitialiseLogging( void )
{
 80202d4:	b580      	push	{r7, lr}
 80202d6:	b082      	sub	sp, #8
 80202d8:	af00      	add	r7, sp, #0
size_t xSize;
static BaseType_t xLoggingInitialised = pdFALSE;

	if( xLoggingInitialised == pdFALSE )
 80202da:	4b15      	ldr	r3, [pc, #84]	@ (8020330 <prvInitialiseLogging+0x5c>)
 80202dc:	681b      	ldr	r3, [r3, #0]
 80202de:	2b00      	cmp	r3, #0
 80202e0:	d120      	bne.n	8020324 <prvInitialiseLogging+0x50>
	{
		/* Don't attempt to log unless the scheduler is running. */
		if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80202e2:	f7e3 ff9f 	bl	8004224 <xTaskGetSchedulerState>
 80202e6:	4603      	mov	r3, r0
 80202e8:	2b02      	cmp	r3, #2
 80202ea:	d11b      	bne.n	8020324 <prvInitialiseLogging+0x50>
		{
			/* Create a stream buffer large enough for the maximum number of
			bytes + 1. */ /*_RB_ Why is the size of pxStreamBuffer->ucArray
			subtracted here? */
			xSize = sizeof( StreamBuffer_t ) - sizeof( pxStreamBuffer->ucArray ) + logMESSAGE_BUFFER_SIZE_BYTES + 1;
 80202ec:	f640 73b5 	movw	r3, #4021	@ 0xfb5
 80202f0:	607b      	str	r3, [r7, #4]
			pxStreamBuffer = pvPortMalloc( xSize );
 80202f2:	6878      	ldr	r0, [r7, #4]
 80202f4:	f7e5 f8f6 	bl	80054e4 <pvPortMalloc>
 80202f8:	4603      	mov	r3, r0
 80202fa:	4a0e      	ldr	r2, [pc, #56]	@ (8020334 <prvInitialiseLogging+0x60>)
 80202fc:	6013      	str	r3, [r2, #0]

			if( pxStreamBuffer != NULL )
 80202fe:	4b0d      	ldr	r3, [pc, #52]	@ (8020334 <prvInitialiseLogging+0x60>)
 8020300:	681b      	ldr	r3, [r3, #0]
 8020302:	2b00      	cmp	r3, #0
 8020304:	d00e      	beq.n	8020324 <prvInitialiseLogging+0x50>
			{
				memset( pxStreamBuffer, '\0', xSize );
 8020306:	4b0b      	ldr	r3, [pc, #44]	@ (8020334 <prvInitialiseLogging+0x60>)
 8020308:	681b      	ldr	r3, [r3, #0]
 802030a:	687a      	ldr	r2, [r7, #4]
 802030c:	2100      	movs	r1, #0
 802030e:	4618      	mov	r0, r3
 8020310:	f000 fc35 	bl	8020b7e <memset>
				pxStreamBuffer->LENGTH = logMESSAGE_BUFFER_SIZE_BYTES + 1;
 8020314:	4b07      	ldr	r3, [pc, #28]	@ (8020334 <prvInitialiseLogging+0x60>)
 8020316:	681b      	ldr	r3, [r3, #0]
 8020318:	f640 72a1 	movw	r2, #4001	@ 0xfa1
 802031c:	611a      	str	r2, [r3, #16]

				xLoggingInitialised = pdTRUE;
 802031e:	4b04      	ldr	r3, [pc, #16]	@ (8020330 <prvInitialiseLogging+0x5c>)
 8020320:	2201      	movs	r2, #1
 8020322:	601a      	str	r2, [r3, #0]
			}
		}
	}

	return xLoggingInitialised;
 8020324:	4b02      	ldr	r3, [pc, #8]	@ (8020330 <prvInitialiseLogging+0x5c>)
 8020326:	681b      	ldr	r3, [r3, #0]
}
 8020328:	4618      	mov	r0, r3
 802032a:	3708      	adds	r7, #8
 802032c:	46bd      	mov	sp, r7
 802032e:	bd80      	pop	{r7, pc}
 8020330:	20002310 	.word	0x20002310
 8020334:	20002300 	.word	0x20002300

08020338 <prvGetMessageFromStreamBuffer>:
/*-----------------------------------------------------------*/

static size_t prvGetMessageFromStreamBuffer( char* pcBuffer, size_t xBufferLength )
{
 8020338:	b580      	push	{r7, lr}
 802033a:	b086      	sub	sp, #24
 802033c:	af02      	add	r7, sp, #8
 802033e:	6078      	str	r0, [r7, #4]
 8020340:	6039      	str	r1, [r7, #0]
size_t uxLength;
size_t xMessageLength = 0;
 8020342:	2300      	movs	r3, #0
 8020344:	60bb      	str	r3, [r7, #8]

	if( pxStreamBuffer != NULL )
 8020346:	4b24      	ldr	r3, [pc, #144]	@ (80203d8 <prvGetMessageFromStreamBuffer+0xa0>)
 8020348:	681b      	ldr	r3, [r3, #0]
 802034a:	2b00      	cmp	r3, #0
 802034c:	d03f      	beq.n	80203ce <prvGetMessageFromStreamBuffer+0x96>
	{
		/* Is there data in the stream buffer? */
		uxLength = uxStreamBufferGetSize( pxStreamBuffer );
 802034e:	4b22      	ldr	r3, [pc, #136]	@ (80203d8 <prvGetMessageFromStreamBuffer+0xa0>)
 8020350:	681b      	ldr	r3, [r3, #0]
 8020352:	4618      	mov	r0, r3
 8020354:	f7ef fbd7 	bl	800fb06 <uxStreamBufferGetSize>
 8020358:	60f8      	str	r0, [r7, #12]
		if( uxLength > sizeof( size_t ) )
 802035a:	68fb      	ldr	r3, [r7, #12]
 802035c:	2b04      	cmp	r3, #4
 802035e:	d936      	bls.n	80203ce <prvGetMessageFromStreamBuffer+0x96>
		{
			/* Avoid concurrent access to the buffer. */
			vTaskSuspendAll();
 8020360:	f7e3 f942 	bl	80035e8 <vTaskSuspendAll>
			{
				/* Every message is stored as a length followed by the string.
				Obtain the length of the data first. */
				uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) &xMessageLength, sizeof( xMessageLength ), pdFALSE );
 8020364:	4b1c      	ldr	r3, [pc, #112]	@ (80203d8 <prvGetMessageFromStreamBuffer+0xa0>)
 8020366:	6818      	ldr	r0, [r3, #0]
 8020368:	f107 0208 	add.w	r2, r7, #8
 802036c:	2300      	movs	r3, #0
 802036e:	9300      	str	r3, [sp, #0]
 8020370:	2304      	movs	r3, #4
 8020372:	2100      	movs	r1, #0
 8020374:	f7ef fce5 	bl	800fd42 <uxStreamBufferGet>

				if( xBufferLength < xMessageLength )
 8020378:	68bb      	ldr	r3, [r7, #8]
 802037a:	683a      	ldr	r2, [r7, #0]
 802037c:	429a      	cmp	r2, r3
 802037e:	d216      	bcs.n	80203ae <prvGetMessageFromStreamBuffer+0x76>
				{
					/* The 'pcBuffer' provided by the caller is too small.  Load
					the message first into 'xLogEntry.message', and then copy
					as much as possible to 'pcBuffer'. */
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) xLogEntry.cMessage, xMessageLength, pdFALSE );
 8020380:	4b15      	ldr	r3, [pc, #84]	@ (80203d8 <prvGetMessageFromStreamBuffer+0xa0>)
 8020382:	6818      	ldr	r0, [r3, #0]
 8020384:	68bb      	ldr	r3, [r7, #8]
 8020386:	2200      	movs	r2, #0
 8020388:	9200      	str	r2, [sp, #0]
 802038a:	4a14      	ldr	r2, [pc, #80]	@ (80203dc <prvGetMessageFromStreamBuffer+0xa4>)
 802038c:	2100      	movs	r1, #0
 802038e:	f7ef fcd8 	bl	800fd42 <uxStreamBufferGet>
					memcpy( pcBuffer, xLogEntry.cMessage, xBufferLength );
 8020392:	683a      	ldr	r2, [r7, #0]
 8020394:	4911      	ldr	r1, [pc, #68]	@ (80203dc <prvGetMessageFromStreamBuffer+0xa4>)
 8020396:	6878      	ldr	r0, [r7, #4]
 8020398:	f000 fae4 	bl	8020964 <memcpy>
					xMessageLength = xBufferLength;
 802039c:	683b      	ldr	r3, [r7, #0]
 802039e:	60bb      	str	r3, [r7, #8]

					/* Terminate the string at the very end of the buffer. */
					pcBuffer[ xBufferLength - 1 ] = 0x00;
 80203a0:	683b      	ldr	r3, [r7, #0]
 80203a2:	3b01      	subs	r3, #1
 80203a4:	687a      	ldr	r2, [r7, #4]
 80203a6:	4413      	add	r3, r2
 80203a8:	2200      	movs	r2, #0
 80203aa:	701a      	strb	r2, [r3, #0]
 80203ac:	e00d      	b.n	80203ca <prvGetMessageFromStreamBuffer+0x92>
				}
				else
				{
					/* The 'pcBuffer' provided by the caller is big enough. */
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) pcBuffer, xMessageLength, pdFALSE );
 80203ae:	4b0a      	ldr	r3, [pc, #40]	@ (80203d8 <prvGetMessageFromStreamBuffer+0xa0>)
 80203b0:	6818      	ldr	r0, [r3, #0]
 80203b2:	68bb      	ldr	r3, [r7, #8]
 80203b4:	2200      	movs	r2, #0
 80203b6:	9200      	str	r2, [sp, #0]
 80203b8:	687a      	ldr	r2, [r7, #4]
 80203ba:	2100      	movs	r1, #0
 80203bc:	f7ef fcc1 	bl	800fd42 <uxStreamBufferGet>

					/* Terminate the string after the string's last character. */
					pcBuffer[ xMessageLength ] = 0x00;
 80203c0:	68bb      	ldr	r3, [r7, #8]
 80203c2:	687a      	ldr	r2, [r7, #4]
 80203c4:	4413      	add	r3, r2
 80203c6:	2200      	movs	r2, #0
 80203c8:	701a      	strb	r2, [r3, #0]
				}
			}
			xTaskResumeAll();
 80203ca:	f7e3 f91b 	bl	8003604 <xTaskResumeAll>
		}
	}

	return xMessageLength;
 80203ce:	68bb      	ldr	r3, [r7, #8]
}
 80203d0:	4618      	mov	r0, r3
 80203d2:	3710      	adds	r7, #16
 80203d4:	46bd      	mov	sp, r7
 80203d6:	bd80      	pop	{r7, pc}
 80203d8:	20002300 	.word	0x20002300
 80203dc:	20002238 	.word	0x20002238

080203e0 <prvBufferFormattedString>:
/*-----------------------------------------------------------*/

static size_t prvBufferFormattedString( const char *pcFormatString, va_list xArgs )
{
 80203e0:	b580      	push	{r7, lr}
 80203e2:	b08e      	sub	sp, #56	@ 0x38
 80203e4:	af04      	add	r7, sp, #16
 80203e6:	6078      	str	r0, [r7, #4]
 80203e8:	6039      	str	r1, [r7, #0]
size_t xLength, xSpace;
uint64_t ullCurrentTime;
uint32_t ulSeconds, ulMilliSeconds, ulMicroSeconds;

	/* Sanity check. */
	configASSERT( pxStreamBuffer );
 80203ea:	4b49      	ldr	r3, [pc, #292]	@ (8020510 <prvBufferFormattedString+0x130>)
 80203ec:	681b      	ldr	r3, [r3, #0]
 80203ee:	2b00      	cmp	r3, #0
 80203f0:	d104      	bne.n	80203fc <prvBufferFormattedString+0x1c>
 80203f2:	f44f 7199 	mov.w	r1, #306	@ 0x132
 80203f6:	4847      	ldr	r0, [pc, #284]	@ (8020514 <prvBufferFormattedString+0x134>)
 80203f8:	f7e0 fe8e 	bl	8001118 <vAssertCalled>

	vTaskSuspendAll();
 80203fc:	f7e3 f8f4 	bl	80035e8 <vTaskSuspendAll>
	{
		ullCurrentTime = ullGetHighResolutionTime();
 8020400:	f000 fa2a 	bl	8020858 <ullGetHighResolutionTime>
 8020404:	e9c7 0108 	strd	r0, r1, [r7, #32]
		ulSeconds = ( uint32_t ) ( ullCurrentTime / 1000000ull );
 8020408:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802040c:	4a42      	ldr	r2, [pc, #264]	@ (8020518 <prvBufferFormattedString+0x138>)
 802040e:	f04f 0300 	mov.w	r3, #0
 8020412:	f7df ffcd 	bl	80003b0 <__aeabi_uldivmod>
 8020416:	4602      	mov	r2, r0
 8020418:	460b      	mov	r3, r1
 802041a:	4613      	mov	r3, r2
 802041c:	61fb      	str	r3, [r7, #28]
		ullCurrentTime = ullCurrentTime % 1000000ull;
 802041e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8020422:	4a3d      	ldr	r2, [pc, #244]	@ (8020518 <prvBufferFormattedString+0x138>)
 8020424:	f04f 0300 	mov.w	r3, #0
 8020428:	f7df ffc2 	bl	80003b0 <__aeabi_uldivmod>
 802042c:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ulMilliSeconds = ( uint32_t ) ( ullCurrentTime / 1000ull );
 8020430:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8020434:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8020438:	f04f 0300 	mov.w	r3, #0
 802043c:	f7df ffb8 	bl	80003b0 <__aeabi_uldivmod>
 8020440:	4602      	mov	r2, r0
 8020442:	460b      	mov	r3, r1
 8020444:	4613      	mov	r3, r2
 8020446:	61bb      	str	r3, [r7, #24]
		ulMicroSeconds = ( uint32_t ) ( ullCurrentTime % 1000ull );
 8020448:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802044c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8020450:	f04f 0300 	mov.w	r3, #0
 8020454:	f7df ffac 	bl	80003b0 <__aeabi_uldivmod>
 8020458:	4613      	mov	r3, r2
 802045a:	617b      	str	r3, [r7, #20]

		xLength = ( size_t ) snprintf( xLogEntry.cMessage, sizeof( xLogEntry.cMessage ), "%4u.%03u.%03u [%-10s] ",
 802045c:	2000      	movs	r0, #0
 802045e:	f7e3 f9e5 	bl	800382c <pcTaskGetName>
 8020462:	4603      	mov	r3, r0
 8020464:	9302      	str	r3, [sp, #8]
 8020466:	697b      	ldr	r3, [r7, #20]
 8020468:	9301      	str	r3, [sp, #4]
 802046a:	69bb      	ldr	r3, [r7, #24]
 802046c:	9300      	str	r3, [sp, #0]
 802046e:	69fb      	ldr	r3, [r7, #28]
 8020470:	4a2a      	ldr	r2, [pc, #168]	@ (802051c <prvBufferFormattedString+0x13c>)
 8020472:	21c8      	movs	r1, #200	@ 0xc8
 8020474:	482a      	ldr	r0, [pc, #168]	@ (8020520 <prvBufferFormattedString+0x140>)
 8020476:	f001 f885 	bl	8021584 <snprintf>
 802047a:	4603      	mov	r3, r0
 802047c:	60fb      	str	r3, [r7, #12]
			( unsigned int ) ulSeconds, ( unsigned int ) ulMilliSeconds, ( unsigned int ) ulMicroSeconds, pcTaskGetTaskName( NULL ) );
		xLength += ( size_t ) vsnprintf( xLogEntry.cMessage + xLength, sizeof( xLogEntry.cMessage ) - xLength, pcFormatString, xArgs );
 802047e:	68fb      	ldr	r3, [r7, #12]
 8020480:	4a27      	ldr	r2, [pc, #156]	@ (8020520 <prvBufferFormattedString+0x140>)
 8020482:	1898      	adds	r0, r3, r2
 8020484:	68fb      	ldr	r3, [r7, #12]
 8020486:	f1c3 01c8 	rsb	r1, r3, #200	@ 0xc8
 802048a:	683b      	ldr	r3, [r7, #0]
 802048c:	687a      	ldr	r2, [r7, #4]
 802048e:	f001 f85d 	bl	802154c <vsnprintf>
 8020492:	4603      	mov	r3, r0
 8020494:	461a      	mov	r2, r3
 8020496:	68fb      	ldr	r3, [r7, #12]
 8020498:	4413      	add	r3, r2
 802049a:	60fb      	str	r3, [r7, #12]

		xSpace = uxStreamBufferGetSpace( pxStreamBuffer );
 802049c:	4b1c      	ldr	r3, [pc, #112]	@ (8020510 <prvBufferFormattedString+0x130>)
 802049e:	681b      	ldr	r3, [r3, #0]
 80204a0:	4618      	mov	r0, r3
 80204a2:	f7ef fb0e 	bl	800fac2 <uxStreamBufferGetSpace>
 80204a6:	6138      	str	r0, [r7, #16]

		if( xSpace > ( xLength + sizeof( BaseType_t ) ) )
 80204a8:	68fb      	ldr	r3, [r7, #12]
 80204aa:	3304      	adds	r3, #4
 80204ac:	693a      	ldr	r2, [r7, #16]
 80204ae:	429a      	cmp	r2, r3
 80204b0:	d90e      	bls.n	80204d0 <prvBufferFormattedString+0xf0>
		{
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) &xLength, sizeof( xLength ) );
 80204b2:	4b17      	ldr	r3, [pc, #92]	@ (8020510 <prvBufferFormattedString+0x130>)
 80204b4:	6818      	ldr	r0, [r3, #0]
 80204b6:	f107 020c 	add.w	r2, r7, #12
 80204ba:	2304      	movs	r3, #4
 80204bc:	2100      	movs	r1, #0
 80204be:	f7ef fbc0 	bl	800fc42 <uxStreamBufferAdd>
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) ( xLogEntry.cMessage ), xLength );
 80204c2:	4b13      	ldr	r3, [pc, #76]	@ (8020510 <prvBufferFormattedString+0x130>)
 80204c4:	6818      	ldr	r0, [r3, #0]
 80204c6:	68fb      	ldr	r3, [r7, #12]
 80204c8:	4a15      	ldr	r2, [pc, #84]	@ (8020520 <prvBufferFormattedString+0x140>)
 80204ca:	2100      	movs	r1, #0
 80204cc:	f7ef fbb9 	bl	800fc42 <uxStreamBufferAdd>
		}
	}
	xTaskResumeAll();
 80204d0:	f7e3 f898 	bl	8003604 <xTaskResumeAll>

	if( xLoggingTask == NULL )
 80204d4:	4b13      	ldr	r3, [pc, #76]	@ (8020524 <prvBufferFormattedString+0x144>)
 80204d6:	681b      	ldr	r3, [r3, #0]
 80204d8:	2b00      	cmp	r3, #0
 80204da:	d10a      	bne.n	80204f2 <prvBufferFormattedString+0x112>
	{
		/* The task isn't running yet, call the hook directly. */
		vUDPLoggingHook( xLogEntry.cMessage, xLength );
 80204dc:	68fb      	ldr	r3, [r7, #12]
 80204de:	4619      	mov	r1, r3
 80204e0:	480f      	ldr	r0, [pc, #60]	@ (8020520 <prvBufferFormattedString+0x140>)
 80204e2:	f000 f85b 	bl	802059c <vUDPLoggingHook>
		uxSkipCount++;
 80204e6:	4b10      	ldr	r3, [pc, #64]	@ (8020528 <prvBufferFormattedString+0x148>)
 80204e8:	681b      	ldr	r3, [r3, #0]
 80204ea:	3301      	adds	r3, #1
 80204ec:	4a0e      	ldr	r2, [pc, #56]	@ (8020528 <prvBufferFormattedString+0x148>)
 80204ee:	6013      	str	r3, [r2, #0]
 80204f0:	e008      	b.n	8020504 <prvBufferFormattedString+0x124>
	}
	else
	{
		/* Unblock the logging task so it can output the message. */
		xTaskNotifyGive( xLoggingTask );
 80204f2:	4b0c      	ldr	r3, [pc, #48]	@ (8020524 <prvBufferFormattedString+0x144>)
 80204f4:	6818      	ldr	r0, [r3, #0]
 80204f6:	2300      	movs	r3, #0
 80204f8:	9300      	str	r3, [sp, #0]
 80204fa:	2302      	movs	r3, #2
 80204fc:	2200      	movs	r2, #0
 80204fe:	2100      	movs	r1, #0
 8020500:	f7e4 f9d6 	bl	80048b0 <xTaskGenericNotify>
	}

	return xLength;
 8020504:	68fb      	ldr	r3, [r7, #12]
}
 8020506:	4618      	mov	r0, r3
 8020508:	3728      	adds	r7, #40	@ 0x28
 802050a:	46bd      	mov	sp, r7
 802050c:	bd80      	pop	{r7, pc}
 802050e:	bf00      	nop
 8020510:	20002300 	.word	0x20002300
 8020514:	08025acc 	.word	0x08025acc
 8020518:	000f4240 	.word	0x000f4240
 802051c:	08025af4 	.word	0x08025af4
 8020520:	20002238 	.word	0x20002238
 8020524:	20002304 	.word	0x20002304
 8020528:	20002308 	.word	0x20002308

0802052c <lUDPLoggingPrintf>:
/*-----------------------------------------------------------*/

int lUDPLoggingPrintf( const char *pcFormatString, ... )
{
 802052c:	b40f      	push	{r0, r1, r2, r3}
 802052e:	b580      	push	{r7, lr}
 8020530:	b082      	sub	sp, #8
 8020532:	af00      	add	r7, sp, #0
size_t xLength;

	if( prvInitialiseLogging() != pdFALSE )
 8020534:	f7ff fece 	bl	80202d4 <prvInitialiseLogging>
 8020538:	4603      	mov	r3, r0
 802053a:	2b00      	cmp	r3, #0
 802053c:	d008      	beq.n	8020550 <lUDPLoggingPrintf+0x24>
	{
		va_list args;
		va_start (args, pcFormatString);
 802053e:	f107 0314 	add.w	r3, r7, #20
 8020542:	603b      	str	r3, [r7, #0]
		xLength = prvBufferFormattedString (pcFormatString, args);
 8020544:	6839      	ldr	r1, [r7, #0]
 8020546:	6938      	ldr	r0, [r7, #16]
 8020548:	f7ff ff4a 	bl	80203e0 <prvBufferFormattedString>
 802054c:	6078      	str	r0, [r7, #4]
 802054e:	e001      	b.n	8020554 <lUDPLoggingPrintf+0x28>
		va_end (args);
	}
	else
	{
		xLength = 0;
 8020550:	2300      	movs	r3, #0
 8020552:	607b      	str	r3, [r7, #4]
	}

	return ( int ) xLength;
 8020554:	687b      	ldr	r3, [r7, #4]
}
 8020556:	4618      	mov	r0, r3
 8020558:	3708      	adds	r7, #8
 802055a:	46bd      	mov	sp, r7
 802055c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8020560:	b004      	add	sp, #16
 8020562:	4770      	bx	lr

08020564 <vUDPLoggingTaskCreate>:
/*-----------------------------------------------------------*/

BaseType_t rc_create;

void vUDPLoggingTaskCreate( void )
{
 8020564:	b580      	push	{r7, lr}
 8020566:	b082      	sub	sp, #8
 8020568:	af02      	add	r7, sp, #8
	/* Start a task which will send out the logging lines to a UDP address. */
	rc_create = xTaskCreate( prvLoggingTask, "LogTask", configUDP_LOGGING_TASK_STACK_SIZE, NULL, configUDP_LOGGING_TASK_PRIORITY, &xLoggingTask );
 802056a:	4b08      	ldr	r3, [pc, #32]	@ (802058c <vUDPLoggingTaskCreate+0x28>)
 802056c:	9301      	str	r3, [sp, #4]
 802056e:	2302      	movs	r3, #2
 8020570:	9300      	str	r3, [sp, #0]
 8020572:	2300      	movs	r3, #0
 8020574:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8020578:	4905      	ldr	r1, [pc, #20]	@ (8020590 <vUDPLoggingTaskCreate+0x2c>)
 802057a:	4806      	ldr	r0, [pc, #24]	@ (8020594 <vUDPLoggingTaskCreate+0x30>)
 802057c:	f7e2 fe3c 	bl	80031f8 <xTaskCreate>
 8020580:	4603      	mov	r3, r0
 8020582:	4a05      	ldr	r2, [pc, #20]	@ (8020598 <vUDPLoggingTaskCreate+0x34>)
 8020584:	6013      	str	r3, [r2, #0]
}
 8020586:	bf00      	nop
 8020588:	46bd      	mov	sp, r7
 802058a:	bd80      	pop	{r7, pc}
 802058c:	20002304 	.word	0x20002304
 8020590:	08025b0c 	.word	0x08025b0c
 8020594:	080205b5 	.word	0x080205b5
 8020598:	2000230c 	.word	0x2000230c

0802059c <vUDPLoggingHook>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void __attribute__((weak)) vUDPLoggingHook( const char *pcMessage, BaseType_t xLength )
{
 802059c:	b480      	push	{r7}
 802059e:	b083      	sub	sp, #12
 80205a0:	af00      	add	r7, sp, #0
 80205a2:	6078      	str	r0, [r7, #4]
 80205a4:	6039      	str	r1, [r7, #0]
	( void ) pcMessage;
	( void ) xLength;
}
 80205a6:	bf00      	nop
 80205a8:	370c      	adds	r7, #12
 80205aa:	46bd      	mov	sp, r7
 80205ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205b0:	4770      	bx	lr
	...

080205b4 <prvLoggingTask>:
#if( ipconfigOLD_MULTI != 0 )
	#define ENDPOINT_IS_IPv4( pxEndPoint )	( 1 )
#endif

static void prvLoggingTask( void *pvParameters )
{
 80205b4:	b580      	push	{r7, lr}
 80205b6:	b098      	sub	sp, #96	@ 0x60
 80205b8:	af02      	add	r7, sp, #8
 80205ba:	6078      	str	r0, [r7, #4]
TickType_t xBlockingTime = pdMS_TO_TICKS( logUDP_LOGGING_BLOCK_TIME_MS );
 80205bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80205c0:	64bb      	str	r3, [r7, #72]	@ 0x48

	#if( ipconfigMULTI_INTERFACE != 0 )
	{
		for( ;; )
		{
			for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 80205c2:	2000      	movs	r0, #0
 80205c4:	f7ec f850 	bl	800c668 <FreeRTOS_FirstEndPoint>
 80205c8:	6538      	str	r0, [r7, #80]	@ 0x50
 80205ca:	e01c      	b.n	8020606 <prvLoggingTask+0x52>
				pxEndPoint != NULL;
				pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
			{
				if( ( pxEndPoint->bits.bEndPointUp ) && ( ENDPOINT_IS_IPv4( pxEndPoint ) != pdFALSE) )
 80205cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80205ce:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80205d2:	f003 0310 	and.w	r3, r3, #16
 80205d6:	b2db      	uxtb	r3, r3
 80205d8:	2b00      	cmp	r3, #0
 80205da:	d00f      	beq.n	80205fc <prvLoggingTask+0x48>
 80205dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80205de:	2b00      	cmp	r3, #0
 80205e0:	d009      	beq.n	80205f6 <prvLoggingTask+0x42>
 80205e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80205e4:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80205e8:	f003 0304 	and.w	r3, r3, #4
 80205ec:	b2db      	uxtb	r3, r3
 80205ee:	2b00      	cmp	r3, #0
 80205f0:	d101      	bne.n	80205f6 <prvLoggingTask+0x42>
 80205f2:	2301      	movs	r3, #1
 80205f4:	e000      	b.n	80205f8 <prvLoggingTask+0x44>
 80205f6:	2300      	movs	r3, #0
 80205f8:	2b00      	cmp	r3, #0
 80205fa:	d108      	bne.n	802060e <prvLoggingTask+0x5a>
				pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 80205fc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80205fe:	2000      	movs	r0, #0
 8020600:	f7ec f854 	bl	800c6ac <FreeRTOS_NextEndPoint>
 8020604:	6538      	str	r0, [r7, #80]	@ 0x50
				pxEndPoint != NULL;
 8020606:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020608:	2b00      	cmp	r3, #0
 802060a:	d1df      	bne.n	80205cc <prvLoggingTask+0x18>
 802060c:	e000      	b.n	8020610 <prvLoggingTask+0x5c>
				{
					break;
 802060e:	bf00      	nop
				}
			}
			if( pxEndPoint != pdFALSE )
 8020610:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020612:	2b00      	cmp	r3, #0
 8020614:	d000      	beq.n	8020618 <prvLoggingTask+0x64>
			{
				break;
 8020616:	e004      	b.n	8020622 <prvLoggingTask+0x6e>
			}
			vTaskDelay( 1000 );
 8020618:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 802061c:	f7e2 ff2c 	bl	8003478 <vTaskDelay>
			for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8020620:	e7cf      	b.n	80205c2 <prvLoggingTask+0xe>
	#endif	/* ( ipconfigMULTI_INTERFACE != 0 ) */

	/* Loop until a socket is created. */
	do
	{
		vTaskDelay( xBlockingTime );
 8020622:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8020624:	f7e2 ff28 	bl	8003478 <vTaskDelay>
		xUDPLoggingSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 8020628:	2211      	movs	r2, #17
 802062a:	2102      	movs	r1, #2
 802062c:	2002      	movs	r0, #2
 802062e:	f7ec fd97 	bl	800d160 <FreeRTOS_socket>
 8020632:	4603      	mov	r3, r0
 8020634:	4a4c      	ldr	r2, [pc, #304]	@ (8020768 <prvLoggingTask+0x1b4>)
 8020636:	6013      	str	r3, [r2, #0]
	} while( xUDPLoggingSocket == FREERTOS_INVALID_SOCKET );
 8020638:	4b4b      	ldr	r3, [pc, #300]	@ (8020768 <prvLoggingTask+0x1b4>)
 802063a:	681b      	ldr	r3, [r3, #0]
 802063c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020640:	d0ef      	beq.n	8020622 <prvLoggingTask+0x6e>

	#if( ipconfigMULTI_INTERFACE != 0 )
	{
//		pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
		configASSERT( pxEndPoint != NULL );
 8020642:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020644:	2b00      	cmp	r3, #0
 8020646:	d104      	bne.n	8020652 <prvLoggingTask+0x9e>
 8020648:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 802064c:	4847      	ldr	r0, [pc, #284]	@ (802076c <prvLoggingTask+0x1b8>)
 802064e:	f7e0 fd63 	bl	8001118 <vAssertCalled>
		configASSERT( pxEndPoint->pxNetworkInterface != NULL );
 8020652:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020654:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8020658:	2b00      	cmp	r3, #0
 802065a:	d104      	bne.n	8020666 <prvLoggingTask+0xb2>
 802065c:	f240 11df 	movw	r1, #479	@ 0x1df
 8020660:	4842      	ldr	r0, [pc, #264]	@ (802076c <prvLoggingTask+0x1b8>)
 8020662:	f7e0 fd59 	bl	8001118 <vAssertCalled>
		pxNetworkInterface = pxEndPoint->pxNetworkInterface;
 8020666:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020668:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 802066c:	647b      	str	r3, [r7, #68]	@ 0x44
		//xRemoteAddress.sin_addr = FREERTOS_INADDR_ANY;
	}
	#endif

	xLocalAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_LOCAL );
 802066e:	f246 2309 	movw	r3, #25097	@ 0x6209
 8020672:	857b      	strh	r3, [r7, #42]	@ 0x2a
	{
		xLocalAddress.sin_addr = pxEndPoint->ulIPAddress;
	}
	#else
	{
		xLocalAddress.sin_addr = pxEndPoint->ipv4_settings.ulIPAddress;
 8020674:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020676:	681b      	ldr	r3, [r3, #0]
 8020678:	633b      	str	r3, [r7, #48]	@ 0x30
	#endif
#else
	xLocalAddress.sin_addr = FreeRTOS_GetIPAddress();
#endif

	FreeRTOS_bind( xUDPLoggingSocket, &xLocalAddress, sizeof( xLocalAddress ) );
 802067a:	4b3b      	ldr	r3, [pc, #236]	@ (8020768 <prvLoggingTask+0x1b4>)
 802067c:	681b      	ldr	r3, [r3, #0]
 802067e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8020682:	2218      	movs	r2, #24
 8020684:	4618      	mov	r0, r3
 8020686:	f7ec ff5b 	bl	800d540 <FreeRTOS_bind>

	xSendTimeOut = xBlockingTime;
 802068a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802068c:	627b      	str	r3, [r7, #36]	@ 0x24
	FreeRTOS_setsockopt( xUDPLoggingSocket, 0, FREERTOS_SO_SNDTIMEO, &xSendTimeOut, sizeof( xSendTimeOut ) );
 802068e:	4b36      	ldr	r3, [pc, #216]	@ (8020768 <prvLoggingTask+0x1b4>)
 8020690:	6818      	ldr	r0, [r3, #0]
 8020692:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8020696:	2204      	movs	r2, #4
 8020698:	9200      	str	r2, [sp, #0]
 802069a:	2201      	movs	r2, #1
 802069c:	2100      	movs	r1, #0
 802069e:	f7ed fd19 	bl	800e0d4 <FreeRTOS_setsockopt>

	for( ;; )
	{
		/* Wait for another message to be placed into the stream buffer. */
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 80206a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80206a4:	2101      	movs	r1, #1
 80206a6:	2000      	movs	r0, #0
 80206a8:	f7e3 fff6 	bl	8004698 <ulTaskGenericNotifyTake>

	#if( ipconfigMULTI_INTERFACE != 0 )
		if( pxNetworkInterface->pfGetPhyLinkStatus( pxNetworkInterface ) != pdFALSE )
 80206ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80206ae:	691b      	ldr	r3, [r3, #16]
 80206b0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80206b2:	4798      	blx	r3
 80206b4:	4603      	mov	r3, r0
 80206b6:	2b00      	cmp	r3, #0
 80206b8:	d0f3      	beq.n	80206a2 <prvLoggingTask+0xee>
	#else
		if( xSTM32H_GetPhyLinkStatus(&( xInterfaces[ 0 ] )) != pdFALSE )
	#endif
		{
			/* Check for messages in the buffer. */
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
 80206ba:	2300      	movs	r3, #0
 80206bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80206be:	e04c      	b.n	802075a <prvLoggingTask+0x1a6>
			{
				xCount = prvGetMessageFromStreamBuffer ( cLoggingLine, sizeof( cLoggingLine ) );
 80206c0:	21c8      	movs	r1, #200	@ 0xc8
 80206c2:	482b      	ldr	r0, [pc, #172]	@ (8020770 <prvLoggingTask+0x1bc>)
 80206c4:	f7ff fe38 	bl	8020338 <prvGetMessageFromStreamBuffer>
 80206c8:	6438      	str	r0, [r7, #64]	@ 0x40

				if( xCount <= 0 )
 80206ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80206cc:	2b00      	cmp	r3, #0
 80206ce:	d048      	beq.n	8020762 <prvLoggingTask+0x1ae>
				#if( ipconfigMULTI_INTERFACE != 0 )
				{
				struct freertos_sockaddr xAddress;
				NetworkEndPoint_t *pxEndPoint;

					for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 80206d0:	2000      	movs	r0, #0
 80206d2:	f7eb ffc9 	bl	800c668 <FreeRTOS_FirstEndPoint>
 80206d6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80206d8:	e02a      	b.n	8020730 <prvLoggingTask+0x17c>
						pxEndPoint != NULL;
						)
					{
						if( ENDPOINT_IS_IPv4( pxEndPoint ) )
 80206da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80206dc:	2b00      	cmp	r3, #0
 80206de:	d022      	beq.n	8020726 <prvLoggingTask+0x172>
 80206e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80206e2:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80206e6:	f003 0304 	and.w	r3, r3, #4
 80206ea:	b2db      	uxtb	r3, r3
 80206ec:	2b00      	cmp	r3, #0
 80206ee:	d11a      	bne.n	8020726 <prvLoggingTask+0x172>
						{
							xAddress.sin_len = sizeof( xAddress );		/* length of this structure. */
 80206f0:	2318      	movs	r3, #24
 80206f2:	733b      	strb	r3, [r7, #12]
							xAddress.sin_family = FREERTOS_AF_INET;
 80206f4:	2302      	movs	r3, #2
 80206f6:	737b      	strb	r3, [r7, #13]
							{
								xAddress.sin_addr = pxEndPoint->ulIPAddress | ~( pxEndPoint->ulNetMask );
							}
							#else
							{
								xAddress.sin_addr = pxEndPoint->ipv4_settings.ulIPAddress | ~( pxEndPoint->ipv4_settings.ulNetMask );
 80206f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80206fa:	681a      	ldr	r2, [r3, #0]
 80206fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80206fe:	685b      	ldr	r3, [r3, #4]
 8020700:	43db      	mvns	r3, r3
 8020702:	4313      	orrs	r3, r2
 8020704:	617b      	str	r3, [r7, #20]
							}
							#endif
							xAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_REMOTE );
 8020706:	f246 3309 	movw	r3, #25353	@ 0x6309
 802070a:	81fb      	strh	r3, [r7, #14]
							//if( pxNextEndPoint == NULL )
							{
								FreeRTOS_sendto( xUDPLoggingSocket, ( void * ) cLoggingLine, xCount, 0, &xAddress, sizeof( xAddress ) );
 802070c:	4b16      	ldr	r3, [pc, #88]	@ (8020768 <prvLoggingTask+0x1b4>)
 802070e:	6818      	ldr	r0, [r3, #0]
 8020710:	2318      	movs	r3, #24
 8020712:	9301      	str	r3, [sp, #4]
 8020714:	f107 030c 	add.w	r3, r7, #12
 8020718:	9300      	str	r3, [sp, #0]
 802071a:	2300      	movs	r3, #0
 802071c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802071e:	4914      	ldr	r1, [pc, #80]	@ (8020770 <prvLoggingTask+0x1bc>)
 8020720:	f7ec fe9e 	bl	800d460 <FreeRTOS_sendto>
							}
							break;
 8020724:	e007      	b.n	8020736 <prvLoggingTask+0x182>
						}
						pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint );
 8020726:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8020728:	2000      	movs	r0, #0
 802072a:	f7eb ffbf 	bl	800c6ac <FreeRTOS_NextEndPoint>
 802072e:	64f8      	str	r0, [r7, #76]	@ 0x4c
						pxEndPoint != NULL;
 8020730:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020732:	2b00      	cmp	r3, #0
 8020734:	d1d1      	bne.n	80206da <prvLoggingTask+0x126>
				{
//#warning Do not send logging as a test
					FreeRTOS_sendto( xUDPLoggingSocket, ( void * ) cLoggingLine, xCount, 0, &xRemoteAddress, sizeof( xRemoteAddress ) );
				}
				#endif
				if( uxSkipCount != ( size_t )0u )
 8020736:	4b0f      	ldr	r3, [pc, #60]	@ (8020774 <prvLoggingTask+0x1c0>)
 8020738:	681b      	ldr	r3, [r3, #0]
 802073a:	2b00      	cmp	r3, #0
 802073c:	d005      	beq.n	802074a <prvLoggingTask+0x196>
				{
					uxSkipCount--;
 802073e:	4b0d      	ldr	r3, [pc, #52]	@ (8020774 <prvLoggingTask+0x1c0>)
 8020740:	681b      	ldr	r3, [r3, #0]
 8020742:	3b01      	subs	r3, #1
 8020744:	4a0b      	ldr	r2, [pc, #44]	@ (8020774 <prvLoggingTask+0x1c0>)
 8020746:	6013      	str	r3, [r2, #0]
 8020748:	e004      	b.n	8020754 <prvLoggingTask+0x1a0>
				}
				else
				{
					vUDPLoggingHook( cLoggingLine, xCount );
 802074a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802074c:	4619      	mov	r1, r3
 802074e:	4808      	ldr	r0, [pc, #32]	@ (8020770 <prvLoggingTask+0x1bc>)
 8020750:	f7ff ff24 	bl	802059c <vUDPLoggingHook>
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
 8020754:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020756:	3301      	adds	r3, #1
 8020758:	657b      	str	r3, [r7, #84]	@ 0x54
 802075a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802075c:	2b13      	cmp	r3, #19
 802075e:	ddaf      	ble.n	80206c0 <prvLoggingTask+0x10c>
 8020760:	e79f      	b.n	80206a2 <prvLoggingTask+0xee>
					break;
 8020762:	bf00      	nop
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 8020764:	e79d      	b.n	80206a2 <prvLoggingTask+0xee>
 8020766:	bf00      	nop
 8020768:	20000028 	.word	0x20000028
 802076c:	08025acc 	.word	0x08025acc
 8020770:	20002314 	.word	0x20002314
 8020774:	20002308 	.word	0x20002308

08020778 <TIM2_IRQHandler>:

static uint32_t ulInterruptCount = 0;

uint32_t ulTimer2Flags;
void TIM2_IRQHandler(void)
{
 8020778:	b480      	push	{r7}
 802077a:	af00      	add	r7, sp, #0
	ulTimer2Flags = htim2.Instance->SR;
 802077c:	4b0c      	ldr	r3, [pc, #48]	@ (80207b0 <TIM2_IRQHandler+0x38>)
 802077e:	681b      	ldr	r3, [r3, #0]
 8020780:	691b      	ldr	r3, [r3, #16]
 8020782:	4a0c      	ldr	r2, [pc, #48]	@ (80207b4 <TIM2_IRQHandler+0x3c>)
 8020784:	6013      	str	r3, [r2, #0]
	if( ( ulTimer2Flags & TIM_FLAG_UPDATE ) != 0 )
 8020786:	4b0b      	ldr	r3, [pc, #44]	@ (80207b4 <TIM2_IRQHandler+0x3c>)
 8020788:	681b      	ldr	r3, [r3, #0]
 802078a:	f003 0301 	and.w	r3, r3, #1
 802078e:	2b00      	cmp	r3, #0
 8020790:	d009      	beq.n	80207a6 <TIM2_IRQHandler+0x2e>
	{
		__HAL_TIM_CLEAR_FLAG( &htim2, TIM_FLAG_UPDATE );
 8020792:	4b07      	ldr	r3, [pc, #28]	@ (80207b0 <TIM2_IRQHandler+0x38>)
 8020794:	681b      	ldr	r3, [r3, #0]
 8020796:	f06f 0201 	mvn.w	r2, #1
 802079a:	611a      	str	r2, [r3, #16]
		ulInterruptCount++;
 802079c:	4b06      	ldr	r3, [pc, #24]	@ (80207b8 <TIM2_IRQHandler+0x40>)
 802079e:	681b      	ldr	r3, [r3, #0]
 80207a0:	3301      	adds	r3, #1
 80207a2:	4a05      	ldr	r2, [pc, #20]	@ (80207b8 <TIM2_IRQHandler+0x40>)
 80207a4:	6013      	str	r3, [r2, #0]
	}
}
 80207a6:	bf00      	nop
 80207a8:	46bd      	mov	sp, r7
 80207aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207ae:	4770      	bx	lr
 80207b0:	20000378 	.word	0x20000378
 80207b4:	200023e0 	.word	0x200023e0
 80207b8:	200023dc 	.word	0x200023dc

080207bc <vStartHighResolutionTimer>:


/* Timer2 initialization function */
void vStartHighResolutionTimer( void )
{
 80207bc:	b580      	push	{r7, lr}
 80207be:	b082      	sub	sp, #8
 80207c0:	af00      	add	r7, sp, #0
	/* TIM2 clock enable */
	__HAL_RCC_TIM2_CLK_ENABLE();
 80207c2:	4b20      	ldr	r3, [pc, #128]	@ (8020844 <vStartHighResolutionTimer+0x88>)
 80207c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80207c8:	4a1e      	ldr	r2, [pc, #120]	@ (8020844 <vStartHighResolutionTimer+0x88>)
 80207ca:	f043 0301 	orr.w	r3, r3, #1
 80207ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80207d2:	4b1c      	ldr	r3, [pc, #112]	@ (8020844 <vStartHighResolutionTimer+0x88>)
 80207d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80207d8:	f003 0301 	and.w	r3, r3, #1
 80207dc:	607b      	str	r3, [r7, #4]
 80207de:	687b      	ldr	r3, [r7, #4]

	htim2.Instance = TIM2;     /* Register base address             */
 80207e0:	4b19      	ldr	r3, [pc, #100]	@ (8020848 <vStartHighResolutionTimer+0x8c>)
 80207e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80207e6:	601a      	str	r2, [r3, #0]

	htim2.Init.Prescaler = ( ulPrescale - 1ul );			/* Specifies the prescaler value used to divide the TIM clock. */
 80207e8:	23c8      	movs	r3, #200	@ 0xc8
 80207ea:	3b01      	subs	r3, #1
 80207ec:	4a16      	ldr	r2, [pc, #88]	@ (8020848 <vStartHighResolutionTimer+0x8c>)
 80207ee:	6053      	str	r3, [r2, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;			/* Specifies the counter mode. */
 80207f0:	4b15      	ldr	r3, [pc, #84]	@ (8020848 <vStartHighResolutionTimer+0x8c>)
 80207f2:	2200      	movs	r2, #0
 80207f4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = ( ulReloadCount - 1ul );			/* Specifies the period value to be loaded into the active. */
 80207f6:	4b15      	ldr	r3, [pc, #84]	@ (802084c <vStartHighResolutionTimer+0x90>)
 80207f8:	3b01      	subs	r3, #1
 80207fa:	4a13      	ldr	r2, [pc, #76]	@ (8020848 <vStartHighResolutionTimer+0x8c>)
 80207fc:	60d3      	str	r3, [r2, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;	/* Specifies the clock division. */
 80207fe:	4b12      	ldr	r3, [pc, #72]	@ (8020848 <vStartHighResolutionTimer+0x8c>)
 8020800:	2200      	movs	r2, #0
 8020802:	611a      	str	r2, [r3, #16]
	htim2.Init.RepetitionCounter = 0ul;					/* Specifies the repetition counter value. */
 8020804:	4b10      	ldr	r3, [pc, #64]	@ (8020848 <vStartHighResolutionTimer+0x8c>)
 8020806:	2200      	movs	r2, #0
 8020808:	615a      	str	r2, [r3, #20]
	htim2.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 802080a:	4b0f      	ldr	r3, [pc, #60]	@ (8020848 <vStartHighResolutionTimer+0x8c>)
 802080c:	2201      	movs	r2, #1
 802080e:	771a      	strb	r2, [r3, #28]

	/* NVIC configuration for DMA transfer complete interrupt */
	HAL_NVIC_SetPriority( TIM2_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1, 0 );
 8020810:	2200      	movs	r2, #0
 8020812:	2105      	movs	r1, #5
 8020814:	201c      	movs	r0, #28
 8020816:	f7f8 fd3e 	bl	8019296 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ( TIM2_IRQn );
 802081a:	201c      	movs	r0, #28
 802081c:	f7f8 fd55 	bl	80192ca <HAL_NVIC_EnableIRQ>


	HAL_TIM_Base_Init( &htim2 );
 8020820:	4809      	ldr	r0, [pc, #36]	@ (8020848 <vStartHighResolutionTimer+0x8c>)
 8020822:	f7fe f8e2 	bl	801e9ea <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT( &htim2 );
 8020826:	4808      	ldr	r0, [pc, #32]	@ (8020848 <vStartHighResolutionTimer+0x8c>)
 8020828:	f7fe f936 	bl	801ea98 <HAL_TIM_Base_Start_IT>
	ulTimer2Flags = htim2.Instance->SR;
 802082c:	4b06      	ldr	r3, [pc, #24]	@ (8020848 <vStartHighResolutionTimer+0x8c>)
 802082e:	681b      	ldr	r3, [r3, #0]
 8020830:	691b      	ldr	r3, [r3, #16]
 8020832:	4a07      	ldr	r2, [pc, #28]	@ (8020850 <vStartHighResolutionTimer+0x94>)
 8020834:	6013      	str	r3, [r2, #0]
	/* Ignore the initial interrupt which sets ulInterruptCount = 1.*/
	ulInterruptCount = 0ul;
 8020836:	4b07      	ldr	r3, [pc, #28]	@ (8020854 <vStartHighResolutionTimer+0x98>)
 8020838:	2200      	movs	r2, #0
 802083a:	601a      	str	r2, [r3, #0]
}
 802083c:	bf00      	nop
 802083e:	3708      	adds	r7, #8
 8020840:	46bd      	mov	sp, r7
 8020842:	bd80      	pop	{r7, pc}
 8020844:	58024400 	.word	0x58024400
 8020848:	20000378 	.word	0x20000378
 802084c:	00989680 	.word	0x00989680
 8020850:	200023e0 	.word	0x200023e0
 8020854:	200023dc 	.word	0x200023dc

08020858 <ullGetHighResolutionTime>:

uint64_t ullGetHighResolutionTime()
{
 8020858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802085c:	b08e      	sub	sp, #56	@ 0x38
 802085e:	af00      	add	r7, sp, #0
uint64_t ullReturn;
	if( htim2.Instance == NULL )
 8020860:	493d      	ldr	r1, [pc, #244]	@ (8020958 <ullGetHighResolutionTime+0x100>)
 8020862:	6809      	ldr	r1, [r1, #0]
 8020864:	2900      	cmp	r1, #0
 8020866:	d132      	bne.n	80208ce <ullGetHighResolutionTime+0x76>
	{
		ullReturn = 1000ull * xTaskGetTickCount();
 8020868:	f7e2 ffd0 	bl	800380c <xTaskGetTickCount>
 802086c:	4603      	mov	r3, r0
 802086e:	2200      	movs	r2, #0
 8020870:	469a      	mov	sl, r3
 8020872:	4693      	mov	fp, r2
 8020874:	4652      	mov	r2, sl
 8020876:	465b      	mov	r3, fp
 8020878:	f04f 0000 	mov.w	r0, #0
 802087c:	f04f 0100 	mov.w	r1, #0
 8020880:	0159      	lsls	r1, r3, #5
 8020882:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8020886:	0150      	lsls	r0, r2, #5
 8020888:	4602      	mov	r2, r0
 802088a:	460b      	mov	r3, r1
 802088c:	ebb2 040a 	subs.w	r4, r2, sl
 8020890:	eb63 050b 	sbc.w	r5, r3, fp
 8020894:	f04f 0200 	mov.w	r2, #0
 8020898:	f04f 0300 	mov.w	r3, #0
 802089c:	00ab      	lsls	r3, r5, #2
 802089e:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80208a2:	00a2      	lsls	r2, r4, #2
 80208a4:	4614      	mov	r4, r2
 80208a6:	461d      	mov	r5, r3
 80208a8:	eb14 080a 	adds.w	r8, r4, sl
 80208ac:	eb45 090b 	adc.w	r9, r5, fp
 80208b0:	f04f 0200 	mov.w	r2, #0
 80208b4:	f04f 0300 	mov.w	r3, #0
 80208b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80208bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80208c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80208c4:	4690      	mov	r8, r2
 80208c6:	4699      	mov	r9, r3
 80208c8:	e9c7 890c 	strd	r8, r9, [r7, #48]	@ 0x30
 80208cc:	e03c      	b.n	8020948 <ullGetHighResolutionTime+0xf0>
	uint32_t ulCounts[2];
	uint32_t ulSlowCount;

		for( ;; )
		{
			ulCounts[ 0 ] = htim2.Instance->CNT;
 80208ce:	4922      	ldr	r1, [pc, #136]	@ (8020958 <ullGetHighResolutionTime+0x100>)
 80208d0:	6809      	ldr	r1, [r1, #0]
 80208d2:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 80208d4:	6279      	str	r1, [r7, #36]	@ 0x24
			ulSlowCount = ulInterruptCount;
 80208d6:	4921      	ldr	r1, [pc, #132]	@ (802095c <ullGetHighResolutionTime+0x104>)
 80208d8:	6809      	ldr	r1, [r1, #0]
 80208da:	62f9      	str	r1, [r7, #44]	@ 0x2c
			ulCounts[ 1 ] = htim2.Instance->CNT;
 80208dc:	491e      	ldr	r1, [pc, #120]	@ (8020958 <ullGetHighResolutionTime+0x100>)
 80208de:	6809      	ldr	r1, [r1, #0]
 80208e0:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 80208e2:	62b9      	str	r1, [r7, #40]	@ 0x28
			if( ulCounts[ 1 ] >= ulCounts[ 0 ] )
 80208e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80208e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80208e8:	4288      	cmp	r0, r1
 80208ea:	d200      	bcs.n	80208ee <ullGetHighResolutionTime+0x96>
			ulCounts[ 0 ] = htim2.Instance->CNT;
 80208ec:	e7ef      	b.n	80208ce <ullGetHighResolutionTime+0x76>
			{
				/* TIM2_IRQHandler() has not occurred in between. */
				break;
 80208ee:	bf00      	nop
			}
		}
		ullReturn = ( uint64_t )ulSlowCount * ulReloadCount + ulCounts[ 1 ];
 80208f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80208f2:	2000      	movs	r0, #0
 80208f4:	61b9      	str	r1, [r7, #24]
 80208f6:	61f8      	str	r0, [r7, #28]
 80208f8:	4819      	ldr	r0, [pc, #100]	@ (8020960 <ullGetHighResolutionTime+0x108>)
 80208fa:	2100      	movs	r1, #0
 80208fc:	6138      	str	r0, [r7, #16]
 80208fe:	6179      	str	r1, [r7, #20]
 8020900:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8020904:	4649      	mov	r1, r9
 8020906:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 802090a:	4650      	mov	r0, sl
 802090c:	fb00 f001 	mul.w	r0, r0, r1
 8020910:	4659      	mov	r1, fp
 8020912:	4644      	mov	r4, r8
 8020914:	fb04 f101 	mul.w	r1, r4, r1
 8020918:	4401      	add	r1, r0
 802091a:	4640      	mov	r0, r8
 802091c:	4654      	mov	r4, sl
 802091e:	fba0 2304 	umull	r2, r3, r0, r4
 8020922:	4419      	add	r1, r3
 8020924:	460b      	mov	r3, r1
 8020926:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8020928:	2000      	movs	r0, #0
 802092a:	60b9      	str	r1, [r7, #8]
 802092c:	60f8      	str	r0, [r7, #12]
 802092e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8020932:	4621      	mov	r1, r4
 8020934:	1851      	adds	r1, r2, r1
 8020936:	6039      	str	r1, [r7, #0]
 8020938:	4629      	mov	r1, r5
 802093a:	eb43 0101 	adc.w	r1, r3, r1
 802093e:	6079      	str	r1, [r7, #4]
 8020940:	e9d7 3400 	ldrd	r3, r4, [r7]
 8020944:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
	}

	return ullReturn;
 8020948:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
}
 802094c:	4610      	mov	r0, r2
 802094e:	4619      	mov	r1, r3
 8020950:	3738      	adds	r7, #56	@ 0x38
 8020952:	46bd      	mov	sp, r7
 8020954:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8020958:	20000378 	.word	0x20000378
 802095c:	200023dc 	.word	0x200023dc
 8020960:	00989680 	.word	0x00989680

08020964 <memcpy>:
	uint32_t uint32;
};

#if( SIMPLE_MEMCPY == 0 )
void *memcpy( void *pvDest, const void *pvSource, size_t ulBytes )
{
 8020964:	b480      	push	{r7}
 8020966:	b08d      	sub	sp, #52	@ 0x34
 8020968:	af00      	add	r7, sp, #0
 802096a:	60f8      	str	r0, [r7, #12]
 802096c:	60b9      	str	r1, [r7, #8]
 802096e:	607a      	str	r2, [r7, #4]
union xPointer pxDestination;
union xPointer pxSource;
union xPointer pxLastSource;
uint32_t ulAlignBits;

	pxDestination.u8 = ( uint8_t * ) pvDest;
 8020970:	68fb      	ldr	r3, [r7, #12]
 8020972:	61bb      	str	r3, [r7, #24]
	pxSource.u8 = ( uint8_t * ) pvSource;
 8020974:	68bb      	ldr	r3, [r7, #8]
 8020976:	617b      	str	r3, [r7, #20]
	pxLastSource.u8 = pxSource.u8 + ulBytes;
 8020978:	697a      	ldr	r2, [r7, #20]
 802097a:	687b      	ldr	r3, [r7, #4]
 802097c:	4413      	add	r3, r2
 802097e:	613b      	str	r3, [r7, #16]

	ulAlignBits = ( pxDestination.uint32 & 0x03 ) ^ ( pxSource.uint32 & 0x03 );
 8020980:	69ba      	ldr	r2, [r7, #24]
 8020982:	697b      	ldr	r3, [r7, #20]
 8020984:	4053      	eors	r3, r2
 8020986:	f003 0303 	and.w	r3, r3, #3
 802098a:	627b      	str	r3, [r7, #36]	@ 0x24

	if( ( ulAlignBits & 0x01 ) == 0 )
 802098c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802098e:	f003 0301 	and.w	r3, r3, #1
 8020992:	2b00      	cmp	r3, #0
 8020994:	f040 80a1 	bne.w	8020ada <memcpy+0x176>
	{
		if( ( ( pxSource.uint32 & 1 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 ) )
 8020998:	697b      	ldr	r3, [r7, #20]
 802099a:	f003 0301 	and.w	r3, r3, #1
 802099e:	2b00      	cmp	r3, #0
 80209a0:	d00b      	beq.n	80209ba <memcpy+0x56>
 80209a2:	697a      	ldr	r2, [r7, #20]
 80209a4:	693b      	ldr	r3, [r7, #16]
 80209a6:	429a      	cmp	r2, r3
 80209a8:	d207      	bcs.n	80209ba <memcpy+0x56>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++) ;
 80209aa:	697a      	ldr	r2, [r7, #20]
 80209ac:	1c53      	adds	r3, r2, #1
 80209ae:	617b      	str	r3, [r7, #20]
 80209b0:	69bb      	ldr	r3, [r7, #24]
 80209b2:	1c59      	adds	r1, r3, #1
 80209b4:	61b9      	str	r1, [r7, #24]
 80209b6:	7812      	ldrb	r2, [r2, #0]
 80209b8:	701a      	strb	r2, [r3, #0]
		}
		/* 16-bit aligned here */
		if( ( ulAlignBits & 0x02 ) != 0 )
 80209ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80209bc:	f003 0302 	and.w	r3, r3, #2
 80209c0:	2b00      	cmp	r3, #0
 80209c2:	d01f      	beq.n	8020a04 <memcpy+0xa0>
		{
			uint32_t extra = pxLastSource.uint32 & 0x01ul;
 80209c4:	693b      	ldr	r3, [r7, #16]
 80209c6:	f003 0301 	and.w	r3, r3, #1
 80209ca:	61fb      	str	r3, [r7, #28]

			pxLastSource.uint32 &= ~0x01ul;
 80209cc:	693b      	ldr	r3, [r7, #16]
 80209ce:	f023 0301 	bic.w	r3, r3, #1
 80209d2:	613b      	str	r3, [r7, #16]

			#if( MEMCPY_USES_LOOP_COUNTER != 0 )
			{
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 80209d4:	e00a      	b.n	80209ec <memcpy+0x88>
				{
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 80209d6:	697a      	ldr	r2, [r7, #20]
 80209d8:	1c93      	adds	r3, r2, #2
 80209da:	617b      	str	r3, [r7, #20]
 80209dc:	69bb      	ldr	r3, [r7, #24]
 80209de:	1c99      	adds	r1, r3, #2
 80209e0:	61b9      	str	r1, [r7, #24]
 80209e2:	8812      	ldrh	r2, [r2, #0]
 80209e4:	801a      	strh	r2, [r3, #0]
					ulBytes -= 2;
 80209e6:	687b      	ldr	r3, [r7, #4]
 80209e8:	3b02      	subs	r3, #2
 80209ea:	607b      	str	r3, [r7, #4]
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 80209ec:	697a      	ldr	r2, [r7, #20]
 80209ee:	693b      	ldr	r3, [r7, #16]
 80209f0:	429a      	cmp	r2, r3
 80209f2:	d202      	bcs.n	80209fa <memcpy+0x96>
 80209f4:	687b      	ldr	r3, [r7, #4]
 80209f6:	2b00      	cmp	r3, #0
 80209f8:	d1ed      	bne.n	80209d6 <memcpy+0x72>
				{
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
				}
			}
			#endif
			pxLastSource.uint32 |= extra;
 80209fa:	693a      	ldr	r2, [r7, #16]
 80209fc:	69fb      	ldr	r3, [r7, #28]
 80209fe:	4313      	orrs	r3, r2
 8020a00:	613b      	str	r3, [r7, #16]
 8020a02:	e0ae      	b.n	8020b62 <memcpy+0x1fe>
		else
		{
			int iCount;
			uint32_t extra;

			if( ( ( pxSource.uint32 & 2 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 - 1 ) )
 8020a04:	697b      	ldr	r3, [r7, #20]
 8020a06:	f003 0302 	and.w	r3, r3, #2
 8020a0a:	2b00      	cmp	r3, #0
 8020a0c:	d00c      	beq.n	8020a28 <memcpy+0xc4>
 8020a0e:	697a      	ldr	r2, [r7, #20]
 8020a10:	693b      	ldr	r3, [r7, #16]
 8020a12:	3b01      	subs	r3, #1
 8020a14:	429a      	cmp	r2, r3
 8020a16:	d207      	bcs.n	8020a28 <memcpy+0xc4>
			{
				*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 8020a18:	697a      	ldr	r2, [r7, #20]
 8020a1a:	1c93      	adds	r3, r2, #2
 8020a1c:	617b      	str	r3, [r7, #20]
 8020a1e:	69bb      	ldr	r3, [r7, #24]
 8020a20:	1c99      	adds	r1, r3, #2
 8020a22:	61b9      	str	r1, [r7, #24]
 8020a24:	8812      	ldrh	r2, [r2, #0]
 8020a26:	801a      	strh	r2, [r3, #0]
			}
			// 32-bit aligned
			extra = pxLastSource.uint32 & 0x03ul;
 8020a28:	693b      	ldr	r3, [r7, #16]
 8020a2a:	f003 0303 	and.w	r3, r3, #3
 8020a2e:	623b      	str	r3, [r7, #32]

			pxLastSource.uint32 &= ~0x03ul;
 8020a30:	693b      	ldr	r3, [r7, #16]
 8020a32:	f023 0303 	bic.w	r3, r3, #3
 8020a36:	613b      	str	r3, [r7, #16]
			iCount = pxLastSource.u32 - pxSource.u32;
 8020a38:	693a      	ldr	r2, [r7, #16]
 8020a3a:	697b      	ldr	r3, [r7, #20]
 8020a3c:	1ad3      	subs	r3, r2, r3
 8020a3e:	109b      	asrs	r3, r3, #2
 8020a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
			while( iCount > 8 )
 8020a42:	e02f      	b.n	8020aa4 <memcpy+0x140>
			{
				/* Copy 32 bytes */
				/* Normally it doesn't make sense to make this list much longer because
				the indexes will get too big, and therefore longer instructions are needed. */
				pxDestination.u32[ 0 ] = pxSource.u32[ 0 ];
 8020a44:	697a      	ldr	r2, [r7, #20]
 8020a46:	69bb      	ldr	r3, [r7, #24]
 8020a48:	6812      	ldr	r2, [r2, #0]
 8020a4a:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 1 ] = pxSource.u32[ 1 ];
 8020a4c:	697a      	ldr	r2, [r7, #20]
 8020a4e:	69bb      	ldr	r3, [r7, #24]
 8020a50:	3304      	adds	r3, #4
 8020a52:	6852      	ldr	r2, [r2, #4]
 8020a54:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 2 ] = pxSource.u32[ 2 ];
 8020a56:	697a      	ldr	r2, [r7, #20]
 8020a58:	69bb      	ldr	r3, [r7, #24]
 8020a5a:	3308      	adds	r3, #8
 8020a5c:	6892      	ldr	r2, [r2, #8]
 8020a5e:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 3 ] = pxSource.u32[ 3 ];
 8020a60:	697a      	ldr	r2, [r7, #20]
 8020a62:	69bb      	ldr	r3, [r7, #24]
 8020a64:	330c      	adds	r3, #12
 8020a66:	68d2      	ldr	r2, [r2, #12]
 8020a68:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 4 ] = pxSource.u32[ 4 ];
 8020a6a:	697a      	ldr	r2, [r7, #20]
 8020a6c:	69bb      	ldr	r3, [r7, #24]
 8020a6e:	3310      	adds	r3, #16
 8020a70:	6912      	ldr	r2, [r2, #16]
 8020a72:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 5 ] = pxSource.u32[ 5 ];
 8020a74:	697a      	ldr	r2, [r7, #20]
 8020a76:	69bb      	ldr	r3, [r7, #24]
 8020a78:	3314      	adds	r3, #20
 8020a7a:	6952      	ldr	r2, [r2, #20]
 8020a7c:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 6 ] = pxSource.u32[ 6 ];
 8020a7e:	697a      	ldr	r2, [r7, #20]
 8020a80:	69bb      	ldr	r3, [r7, #24]
 8020a82:	3318      	adds	r3, #24
 8020a84:	6992      	ldr	r2, [r2, #24]
 8020a86:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 7 ] = pxSource.u32[ 7 ];
 8020a88:	697a      	ldr	r2, [r7, #20]
 8020a8a:	69bb      	ldr	r3, [r7, #24]
 8020a8c:	331c      	adds	r3, #28
 8020a8e:	69d2      	ldr	r2, [r2, #28]
 8020a90:	601a      	str	r2, [r3, #0]
				pxDestination.u32 += 8;
 8020a92:	69bb      	ldr	r3, [r7, #24]
 8020a94:	3320      	adds	r3, #32
 8020a96:	61bb      	str	r3, [r7, #24]
				pxSource.u32 += 8;
 8020a98:	697b      	ldr	r3, [r7, #20]
 8020a9a:	3320      	adds	r3, #32
 8020a9c:	617b      	str	r3, [r7, #20]
				iCount -= 8;
 8020a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020aa0:	3b08      	subs	r3, #8
 8020aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
			while( iCount > 8 )
 8020aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020aa6:	2b08      	cmp	r3, #8
 8020aa8:	dccc      	bgt.n	8020a44 <memcpy+0xe0>
			}

			#if( MEMCPY_USES_LOOP_COUNTER != 0 )
			{
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 8020aaa:	e00a      	b.n	8020ac2 <memcpy+0x15e>
				{
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
 8020aac:	697a      	ldr	r2, [r7, #20]
 8020aae:	1d13      	adds	r3, r2, #4
 8020ab0:	617b      	str	r3, [r7, #20]
 8020ab2:	69bb      	ldr	r3, [r7, #24]
 8020ab4:	1d19      	adds	r1, r3, #4
 8020ab6:	61b9      	str	r1, [r7, #24]
 8020ab8:	6812      	ldr	r2, [r2, #0]
 8020aba:	601a      	str	r2, [r3, #0]
					ulBytes -= 4;
 8020abc:	687b      	ldr	r3, [r7, #4]
 8020abe:	3b04      	subs	r3, #4
 8020ac0:	607b      	str	r3, [r7, #4]
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 8020ac2:	697a      	ldr	r2, [r7, #20]
 8020ac4:	693b      	ldr	r3, [r7, #16]
 8020ac6:	429a      	cmp	r2, r3
 8020ac8:	d202      	bcs.n	8020ad0 <memcpy+0x16c>
 8020aca:	687b      	ldr	r3, [r7, #4]
 8020acc:	2b00      	cmp	r3, #0
 8020ace:	d1ed      	bne.n	8020aac <memcpy+0x148>
				{
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
				}
			}
			#endif
			pxLastSource.uint32 |= extra;
 8020ad0:	693a      	ldr	r2, [r7, #16]
 8020ad2:	6a3b      	ldr	r3, [r7, #32]
 8020ad4:	4313      	orrs	r3, r2
 8020ad6:	613b      	str	r3, [r7, #16]
 8020ad8:	e043      	b.n	8020b62 <memcpy+0x1fe>
	}
	else
	{
		/* This it the worst alignment, e.g. 0x80000 and 0xA0001,
		only 8-bits copying is possible. */
		int iCount = pxLastSource.u8 - pxSource.u8;
 8020ada:	693a      	ldr	r2, [r7, #16]
 8020adc:	697b      	ldr	r3, [r7, #20]
 8020ade:	1ad3      	subs	r3, r2, r3
 8020ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
		while( iCount > 8 )
 8020ae2:	e02f      	b.n	8020b44 <memcpy+0x1e0>
		{
			/* Copy 8 bytes the hard way */
			pxDestination.u8[ 0 ] = pxSource.u8[ 0 ];
 8020ae4:	697a      	ldr	r2, [r7, #20]
 8020ae6:	69bb      	ldr	r3, [r7, #24]
 8020ae8:	7812      	ldrb	r2, [r2, #0]
 8020aea:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 1 ] = pxSource.u8[ 1 ];
 8020aec:	697a      	ldr	r2, [r7, #20]
 8020aee:	69bb      	ldr	r3, [r7, #24]
 8020af0:	3301      	adds	r3, #1
 8020af2:	7852      	ldrb	r2, [r2, #1]
 8020af4:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 2 ] = pxSource.u8[ 2 ];
 8020af6:	697a      	ldr	r2, [r7, #20]
 8020af8:	69bb      	ldr	r3, [r7, #24]
 8020afa:	3302      	adds	r3, #2
 8020afc:	7892      	ldrb	r2, [r2, #2]
 8020afe:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 3 ] = pxSource.u8[ 3 ];
 8020b00:	697a      	ldr	r2, [r7, #20]
 8020b02:	69bb      	ldr	r3, [r7, #24]
 8020b04:	3303      	adds	r3, #3
 8020b06:	78d2      	ldrb	r2, [r2, #3]
 8020b08:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 4 ] = pxSource.u8[ 4 ];
 8020b0a:	697a      	ldr	r2, [r7, #20]
 8020b0c:	69bb      	ldr	r3, [r7, #24]
 8020b0e:	3304      	adds	r3, #4
 8020b10:	7912      	ldrb	r2, [r2, #4]
 8020b12:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 5 ] = pxSource.u8[ 5 ];
 8020b14:	697a      	ldr	r2, [r7, #20]
 8020b16:	69bb      	ldr	r3, [r7, #24]
 8020b18:	3305      	adds	r3, #5
 8020b1a:	7952      	ldrb	r2, [r2, #5]
 8020b1c:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 6 ] = pxSource.u8[ 6 ];
 8020b1e:	697a      	ldr	r2, [r7, #20]
 8020b20:	69bb      	ldr	r3, [r7, #24]
 8020b22:	3306      	adds	r3, #6
 8020b24:	7992      	ldrb	r2, [r2, #6]
 8020b26:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 7 ] = pxSource.u8[ 7 ];
 8020b28:	697a      	ldr	r2, [r7, #20]
 8020b2a:	69bb      	ldr	r3, [r7, #24]
 8020b2c:	3307      	adds	r3, #7
 8020b2e:	79d2      	ldrb	r2, [r2, #7]
 8020b30:	701a      	strb	r2, [r3, #0]
			pxDestination.u8 += 8;
 8020b32:	69bb      	ldr	r3, [r7, #24]
 8020b34:	3308      	adds	r3, #8
 8020b36:	61bb      	str	r3, [r7, #24]
			pxSource.u8 += 8;
 8020b38:	697b      	ldr	r3, [r7, #20]
 8020b3a:	3308      	adds	r3, #8
 8020b3c:	617b      	str	r3, [r7, #20]
			iCount -= 8;
 8020b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020b40:	3b08      	subs	r3, #8
 8020b42:	62bb      	str	r3, [r7, #40]	@ 0x28
		while( iCount > 8 )
 8020b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020b46:	2b08      	cmp	r3, #8
 8020b48:	dccc      	bgt.n	8020ae4 <memcpy+0x180>
		}
	}
	#if( MEMCPY_USES_LOOP_COUNTER != 0 )
	{
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 8020b4a:	e00a      	b.n	8020b62 <memcpy+0x1fe>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++ );
 8020b4c:	697a      	ldr	r2, [r7, #20]
 8020b4e:	1c53      	adds	r3, r2, #1
 8020b50:	617b      	str	r3, [r7, #20]
 8020b52:	69bb      	ldr	r3, [r7, #24]
 8020b54:	1c59      	adds	r1, r3, #1
 8020b56:	61b9      	str	r1, [r7, #24]
 8020b58:	7812      	ldrb	r2, [r2, #0]
 8020b5a:	701a      	strb	r2, [r3, #0]
			ulBytes--;
 8020b5c:	687b      	ldr	r3, [r7, #4]
 8020b5e:	3b01      	subs	r3, #1
 8020b60:	607b      	str	r3, [r7, #4]
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 8020b62:	697a      	ldr	r2, [r7, #20]
 8020b64:	693b      	ldr	r3, [r7, #16]
 8020b66:	429a      	cmp	r2, r3
 8020b68:	d202      	bcs.n	8020b70 <memcpy+0x20c>
 8020b6a:	687b      	ldr	r3, [r7, #4]
 8020b6c:	2b00      	cmp	r3, #0
 8020b6e:	d1ed      	bne.n	8020b4c <memcpy+0x1e8>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++ );
		}
	}
	#endif
	return pvDest;
 8020b70:	68fb      	ldr	r3, [r7, #12]
}
 8020b72:	4618      	mov	r0, r3
 8020b74:	3734      	adds	r7, #52	@ 0x34
 8020b76:	46bd      	mov	sp, r7
 8020b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b7c:	4770      	bx	lr

08020b7e <memset>:
/*-----------------------------------------------------------*/


#if( SIMPLE_MEMSET == 0 )
void *memset(void *pvDest, int iValue, size_t ulBytes)
{
 8020b7e:	b480      	push	{r7}
 8020b80:	b08b      	sub	sp, #44	@ 0x2c
 8020b82:	af00      	add	r7, sp, #0
 8020b84:	60f8      	str	r0, [r7, #12]
 8020b86:	60b9      	str	r1, [r7, #8]
 8020b88:	607a      	str	r2, [r7, #4]
union xPointer pxDestination;
union xPointer pxLast;
uint32_t ulPattern;

	pxDestination.u8 = ( uint8_t * ) pvDest;
 8020b8a:	68fb      	ldr	r3, [r7, #12]
 8020b8c:	617b      	str	r3, [r7, #20]
	pxLast.u8 = pxDestination.u8 + ulBytes;
 8020b8e:	697a      	ldr	r2, [r7, #20]
 8020b90:	687b      	ldr	r3, [r7, #4]
 8020b92:	4413      	add	r3, r2
 8020b94:	613b      	str	r3, [r7, #16]

	if( ulBytes >= 8 )
 8020b96:	687b      	ldr	r3, [r7, #4]
 8020b98:	2b07      	cmp	r3, #7
 8020b9a:	d97b      	bls.n	8020c94 <memset+0x116>
	{
	uint32_t ulAlignBits;
	uint32_t ulExtra;
	int iCount;

		ulPattern = iValue & 0xff;
 8020b9c:	68bb      	ldr	r3, [r7, #8]
 8020b9e:	b2db      	uxtb	r3, r3
 8020ba0:	61fb      	str	r3, [r7, #28]
		ulPattern |= ( ulPattern << 8 ) | ( ulPattern << 16 ) | ( ulPattern << 24 );
 8020ba2:	69fb      	ldr	r3, [r7, #28]
 8020ba4:	021a      	lsls	r2, r3, #8
 8020ba6:	69fb      	ldr	r3, [r7, #28]
 8020ba8:	041b      	lsls	r3, r3, #16
 8020baa:	431a      	orrs	r2, r3
 8020bac:	69fb      	ldr	r3, [r7, #28]
 8020bae:	061b      	lsls	r3, r3, #24
 8020bb0:	4313      	orrs	r3, r2
 8020bb2:	69fa      	ldr	r2, [r7, #28]
 8020bb4:	4313      	orrs	r3, r2
 8020bb6:	61fb      	str	r3, [r7, #28]
		ulAlignBits = ( pxDestination.uint32 & 0x03 );
 8020bb8:	697b      	ldr	r3, [r7, #20]
 8020bba:	f003 0303 	and.w	r3, r3, #3
 8020bbe:	627b      	str	r3, [r7, #36]	@ 0x24
		if( ulAlignBits != 0 )
 8020bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020bc2:	2b00      	cmp	r3, #0
 8020bc4:	d010      	beq.n	8020be8 <memset+0x6a>
		{
			ulAlignBits = 4 - ulAlignBits;
 8020bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020bc8:	f1c3 0304 	rsb	r3, r3, #4
 8020bcc:	627b      	str	r3, [r7, #36]	@ 0x24
			while( ulAlignBits-- > 0 )
 8020bce:	e006      	b.n	8020bde <memset+0x60>
			{
				pxDestination.u8[ 0 ] = ( uint8_t )iValue;
 8020bd0:	697b      	ldr	r3, [r7, #20]
 8020bd2:	68ba      	ldr	r2, [r7, #8]
 8020bd4:	b2d2      	uxtb	r2, r2
 8020bd6:	701a      	strb	r2, [r3, #0]
				pxDestination.u8++;
 8020bd8:	697b      	ldr	r3, [r7, #20]
 8020bda:	3301      	adds	r3, #1
 8020bdc:	617b      	str	r3, [r7, #20]
			while( ulAlignBits-- > 0 )
 8020bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020be0:	1e5a      	subs	r2, r3, #1
 8020be2:	627a      	str	r2, [r7, #36]	@ 0x24
 8020be4:	2b00      	cmp	r3, #0
 8020be6:	d1f3      	bne.n	8020bd0 <memset+0x52>
			}
		}
		/* Strip-off the last 1 up-to 3 bytes because they can not be set in a 32-bit
		memory instruction. */
		ulExtra = pxLast.uint32 & 0x03ul;
 8020be8:	693b      	ldr	r3, [r7, #16]
 8020bea:	f003 0303 	and.w	r3, r3, #3
 8020bee:	61bb      	str	r3, [r7, #24]

		pxLast.uint32 &= ~0x03ul;
 8020bf0:	693b      	ldr	r3, [r7, #16]
 8020bf2:	f023 0303 	bic.w	r3, r3, #3
 8020bf6:	613b      	str	r3, [r7, #16]
		iCount = ( int ) ( pxLast.u32 - pxDestination.u32 );
 8020bf8:	693a      	ldr	r2, [r7, #16]
 8020bfa:	697b      	ldr	r3, [r7, #20]
 8020bfc:	1ad3      	subs	r3, r2, r3
 8020bfe:	109b      	asrs	r3, r3, #2
 8020c00:	623b      	str	r3, [r7, #32]
		while( iCount > 8 )
 8020c02:	e024      	b.n	8020c4e <memset+0xd0>
		{
			/* Set 8 * 4 bytes and save some increments */
			/* It won't make sense to make this list much longer than 8 assignments. */
			pxDestination.u32[ 0 ] = ulPattern;
 8020c04:	697b      	ldr	r3, [r7, #20]
 8020c06:	69fa      	ldr	r2, [r7, #28]
 8020c08:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 1 ] = ulPattern;
 8020c0a:	697b      	ldr	r3, [r7, #20]
 8020c0c:	3304      	adds	r3, #4
 8020c0e:	69fa      	ldr	r2, [r7, #28]
 8020c10:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 2 ] = ulPattern;
 8020c12:	697b      	ldr	r3, [r7, #20]
 8020c14:	3308      	adds	r3, #8
 8020c16:	69fa      	ldr	r2, [r7, #28]
 8020c18:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 3 ] = ulPattern;
 8020c1a:	697b      	ldr	r3, [r7, #20]
 8020c1c:	330c      	adds	r3, #12
 8020c1e:	69fa      	ldr	r2, [r7, #28]
 8020c20:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 4 ] = ulPattern;
 8020c22:	697b      	ldr	r3, [r7, #20]
 8020c24:	3310      	adds	r3, #16
 8020c26:	69fa      	ldr	r2, [r7, #28]
 8020c28:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 5 ] = ulPattern;
 8020c2a:	697b      	ldr	r3, [r7, #20]
 8020c2c:	3314      	adds	r3, #20
 8020c2e:	69fa      	ldr	r2, [r7, #28]
 8020c30:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 6 ] = ulPattern;
 8020c32:	697b      	ldr	r3, [r7, #20]
 8020c34:	3318      	adds	r3, #24
 8020c36:	69fa      	ldr	r2, [r7, #28]
 8020c38:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 7 ] = ulPattern;
 8020c3a:	697b      	ldr	r3, [r7, #20]
 8020c3c:	331c      	adds	r3, #28
 8020c3e:	69fa      	ldr	r2, [r7, #28]
 8020c40:	601a      	str	r2, [r3, #0]
			pxDestination.u32 += 8;
 8020c42:	697b      	ldr	r3, [r7, #20]
 8020c44:	3320      	adds	r3, #32
 8020c46:	617b      	str	r3, [r7, #20]
			iCount -= 8;
 8020c48:	6a3b      	ldr	r3, [r7, #32]
 8020c4a:	3b08      	subs	r3, #8
 8020c4c:	623b      	str	r3, [r7, #32]
		while( iCount > 8 )
 8020c4e:	6a3b      	ldr	r3, [r7, #32]
 8020c50:	2b08      	cmp	r3, #8
 8020c52:	dcd7      	bgt.n	8020c04 <memset+0x86>
		}

		#if( MEMCPY_USES_LOOP_COUNTER != 0 )
		{
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 8020c54:	e008      	b.n	8020c68 <memset+0xea>
			{
				pxDestination.u32[0] = ulPattern;
 8020c56:	697b      	ldr	r3, [r7, #20]
 8020c58:	69fa      	ldr	r2, [r7, #28]
 8020c5a:	601a      	str	r2, [r3, #0]
				pxDestination.u32++;
 8020c5c:	697b      	ldr	r3, [r7, #20]
 8020c5e:	3304      	adds	r3, #4
 8020c60:	617b      	str	r3, [r7, #20]
				ulBytes += 4;
 8020c62:	687b      	ldr	r3, [r7, #4]
 8020c64:	3304      	adds	r3, #4
 8020c66:	607b      	str	r3, [r7, #4]
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 8020c68:	697a      	ldr	r2, [r7, #20]
 8020c6a:	693b      	ldr	r3, [r7, #16]
 8020c6c:	429a      	cmp	r2, r3
 8020c6e:	d202      	bcs.n	8020c76 <memset+0xf8>
 8020c70:	687b      	ldr	r3, [r7, #4]
 8020c72:	2b00      	cmp	r3, #0
 8020c74:	d1ef      	bne.n	8020c56 <memset+0xd8>
				pxDestination.u32[0] = ulPattern;
				pxDestination.u32++;
			}
		}
		#endif
		pxLast.uint32 |= ulExtra;
 8020c76:	693a      	ldr	r2, [r7, #16]
 8020c78:	69bb      	ldr	r3, [r7, #24]
 8020c7a:	4313      	orrs	r3, r2
 8020c7c:	613b      	str	r3, [r7, #16]
	}

	#if( MEMCPY_USES_LOOP_COUNTER != 0 )
	{
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 8020c7e:	e009      	b.n	8020c94 <memset+0x116>
		{
			pxDestination.u8[ 0 ] = ( uint8_t ) iValue;
 8020c80:	697b      	ldr	r3, [r7, #20]
 8020c82:	68ba      	ldr	r2, [r7, #8]
 8020c84:	b2d2      	uxtb	r2, r2
 8020c86:	701a      	strb	r2, [r3, #0]
			pxDestination.u8++;
 8020c88:	697b      	ldr	r3, [r7, #20]
 8020c8a:	3301      	adds	r3, #1
 8020c8c:	617b      	str	r3, [r7, #20]
			ulBytes++;
 8020c8e:	687b      	ldr	r3, [r7, #4]
 8020c90:	3301      	adds	r3, #1
 8020c92:	607b      	str	r3, [r7, #4]
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 8020c94:	697a      	ldr	r2, [r7, #20]
 8020c96:	693b      	ldr	r3, [r7, #16]
 8020c98:	429a      	cmp	r2, r3
 8020c9a:	d202      	bcs.n	8020ca2 <memset+0x124>
 8020c9c:	687b      	ldr	r3, [r7, #4]
 8020c9e:	2b00      	cmp	r3, #0
 8020ca0:	d1ee      	bne.n	8020c80 <memset+0x102>
			pxDestination.u8[ 0 ] = ( uint8_t ) iValue;
			pxDestination.u8++;
		}
	}
	#endif
	return pvDest;
 8020ca2:	68fb      	ldr	r3, [r7, #12]
}
 8020ca4:	4618      	mov	r0, r3
 8020ca6:	372c      	adds	r7, #44	@ 0x2c
 8020ca8:	46bd      	mov	sp, r7
 8020caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020cae:	4770      	bx	lr

08020cb0 <xApplicationMemoryPermissions>:
extern void vOutputChar( const char cChar, const TickType_t xTicksToWait  );

#ifdef __GNUC__

__attribute__((weak)) BaseType_t xApplicationMemoryPermissions( uint32_t aAddress )
{
 8020cb0:	b480      	push	{r7}
 8020cb2:	b083      	sub	sp, #12
 8020cb4:	af00      	add	r7, sp, #0
 8020cb6:	6078      	str	r0, [r7, #4]
	( void ) aAddress;
	/* Return 1 for readable, 2 for writeable, 3 for both. */
	return 0x03;
 8020cb8:	2303      	movs	r3, #3
}
 8020cba:	4618      	mov	r0, r3
 8020cbc:	370c      	adds	r7, #12
 8020cbe:	46bd      	mov	sp, r7
 8020cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020cc4:	4770      	bx	lr

08020cc6 <vOutputChar>:


__attribute__((weak)) void vOutputChar( const char cChar, const TickType_t xTicksToWait  )
{
 8020cc6:	b480      	push	{r7}
 8020cc8:	b083      	sub	sp, #12
 8020cca:	af00      	add	r7, sp, #0
 8020ccc:	4603      	mov	r3, r0
 8020cce:	6039      	str	r1, [r7, #0]
 8020cd0:	71fb      	strb	r3, [r7, #7]
	( void ) cChar;
	( void ) xTicksToWait;
	/* Do nothing. */
}
 8020cd2:	bf00      	nop
 8020cd4:	370c      	adds	r7, #12
 8020cd6:	46bd      	mov	sp, r7
 8020cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020cdc:	4770      	bx	lr

08020cde <strbuf_init>:
#else
	static const _U32 u32 = { 0, 1, 2, 3 };
#endif

static void strbuf_init( struct SStringBuf *apStr, char *apBuf, const char *apMaxStr )
{
 8020cde:	b580      	push	{r7, lr}
 8020ce0:	b084      	sub	sp, #16
 8020ce2:	af00      	add	r7, sp, #0
 8020ce4:	60f8      	str	r0, [r7, #12]
 8020ce6:	60b9      	str	r1, [r7, #8]
 8020ce8:	607a      	str	r2, [r7, #4]
	apStr->str = apBuf;
 8020cea:	68fb      	ldr	r3, [r7, #12]
 8020cec:	68ba      	ldr	r2, [r7, #8]
 8020cee:	601a      	str	r2, [r3, #0]
	apStr->orgStr = apBuf;
 8020cf0:	68fb      	ldr	r3, [r7, #12]
 8020cf2:	68ba      	ldr	r2, [r7, #8]
 8020cf4:	605a      	str	r2, [r3, #4]
	apStr->nulPos = apMaxStr-1;
 8020cf6:	687b      	ldr	r3, [r7, #4]
 8020cf8:	1e5a      	subs	r2, r3, #1
 8020cfa:	68fb      	ldr	r3, [r7, #12]
 8020cfc:	609a      	str	r2, [r3, #8]
	apStr->curLen = 0;
 8020cfe:	68fb      	ldr	r3, [r7, #12]
 8020d00:	2200      	movs	r2, #0
 8020d02:	60da      	str	r2, [r3, #12]

	memset( &apStr->flags, '\0', sizeof apStr->flags );
 8020d04:	68fb      	ldr	r3, [r7, #12]
 8020d06:	3310      	adds	r3, #16
 8020d08:	2210      	movs	r2, #16
 8020d0a:	2100      	movs	r1, #0
 8020d0c:	4618      	mov	r0, r3
 8020d0e:	f7ff ff36 	bl	8020b7e <memset>
}
 8020d12:	bf00      	nop
 8020d14:	3710      	adds	r7, #16
 8020d16:	46bd      	mov	sp, r7
 8020d18:	bd80      	pop	{r7, pc}

08020d1a <strbuf_printchar>:
/*-----------------------------------------------------------*/

static BaseType_t strbuf_printchar( struct SStringBuf *apStr, int c )
{
 8020d1a:	b580      	push	{r7, lr}
 8020d1c:	b082      	sub	sp, #8
 8020d1e:	af00      	add	r7, sp, #0
 8020d20:	6078      	str	r0, [r7, #4]
 8020d22:	6039      	str	r1, [r7, #0]
	if( apStr->str == NULL )
 8020d24:	687b      	ldr	r3, [r7, #4]
 8020d26:	681b      	ldr	r3, [r3, #0]
 8020d28:	2b00      	cmp	r3, #0
 8020d2a:	d10d      	bne.n	8020d48 <strbuf_printchar+0x2e>
	{
		vOutputChar( ( char ) c, xTicksToWait );
 8020d2c:	683b      	ldr	r3, [r7, #0]
 8020d2e:	b2db      	uxtb	r3, r3
 8020d30:	2214      	movs	r2, #20
 8020d32:	4611      	mov	r1, r2
 8020d34:	4618      	mov	r0, r3
 8020d36:	f7ff ffc6 	bl	8020cc6 <vOutputChar>
		apStr->curLen++;
 8020d3a:	687b      	ldr	r3, [r7, #4]
 8020d3c:	68db      	ldr	r3, [r3, #12]
 8020d3e:	1c5a      	adds	r2, r3, #1
 8020d40:	687b      	ldr	r3, [r7, #4]
 8020d42:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8020d44:	2301      	movs	r3, #1
 8020d46:	e022      	b.n	8020d8e <strbuf_printchar+0x74>
	}
	if( apStr->str < apStr->nulPos )
 8020d48:	687b      	ldr	r3, [r7, #4]
 8020d4a:	681a      	ldr	r2, [r3, #0]
 8020d4c:	687b      	ldr	r3, [r7, #4]
 8020d4e:	689b      	ldr	r3, [r3, #8]
 8020d50:	429a      	cmp	r2, r3
 8020d52:	d20e      	bcs.n	8020d72 <strbuf_printchar+0x58>
	{
		*( apStr->str++ ) = c;
 8020d54:	687b      	ldr	r3, [r7, #4]
 8020d56:	681b      	ldr	r3, [r3, #0]
 8020d58:	1c59      	adds	r1, r3, #1
 8020d5a:	687a      	ldr	r2, [r7, #4]
 8020d5c:	6011      	str	r1, [r2, #0]
 8020d5e:	683a      	ldr	r2, [r7, #0]
 8020d60:	b2d2      	uxtb	r2, r2
 8020d62:	701a      	strb	r2, [r3, #0]
		apStr->curLen++;
 8020d64:	687b      	ldr	r3, [r7, #4]
 8020d66:	68db      	ldr	r3, [r3, #12]
 8020d68:	1c5a      	adds	r2, r3, #1
 8020d6a:	687b      	ldr	r3, [r7, #4]
 8020d6c:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8020d6e:	2301      	movs	r3, #1
 8020d70:	e00d      	b.n	8020d8e <strbuf_printchar+0x74>
	}
	if( apStr->str == apStr->nulPos )
 8020d72:	687b      	ldr	r3, [r7, #4]
 8020d74:	681a      	ldr	r2, [r3, #0]
 8020d76:	687b      	ldr	r3, [r7, #4]
 8020d78:	689b      	ldr	r3, [r3, #8]
 8020d7a:	429a      	cmp	r2, r3
 8020d7c:	d106      	bne.n	8020d8c <strbuf_printchar+0x72>
	{
		*( apStr->str++ ) = '\0';
 8020d7e:	687b      	ldr	r3, [r7, #4]
 8020d80:	681b      	ldr	r3, [r3, #0]
 8020d82:	1c59      	adds	r1, r3, #1
 8020d84:	687a      	ldr	r2, [r7, #4]
 8020d86:	6011      	str	r1, [r2, #0]
 8020d88:	2200      	movs	r2, #0
 8020d8a:	701a      	strb	r2, [r3, #0]
	}
	return pdFALSE;
 8020d8c:	2300      	movs	r3, #0
}
 8020d8e:	4618      	mov	r0, r3
 8020d90:	3708      	adds	r7, #8
 8020d92:	46bd      	mov	sp, r7
 8020d94:	bd80      	pop	{r7, pc}

08020d96 <strbuf_printchar_inline>:
/*-----------------------------------------------------------*/

static __inline BaseType_t strbuf_printchar_inline( struct SStringBuf *apStr, int c )
{
 8020d96:	b580      	push	{r7, lr}
 8020d98:	b082      	sub	sp, #8
 8020d9a:	af00      	add	r7, sp, #0
 8020d9c:	6078      	str	r0, [r7, #4]
 8020d9e:	6039      	str	r1, [r7, #0]
	if( apStr->str == NULL )
 8020da0:	687b      	ldr	r3, [r7, #4]
 8020da2:	681b      	ldr	r3, [r3, #0]
 8020da4:	2b00      	cmp	r3, #0
 8020da6:	d112      	bne.n	8020dce <strbuf_printchar_inline+0x38>
	{
		vOutputChar( ( char ) c, xTicksToWait );
 8020da8:	683b      	ldr	r3, [r7, #0]
 8020daa:	b2db      	uxtb	r3, r3
 8020dac:	2214      	movs	r2, #20
 8020dae:	4611      	mov	r1, r2
 8020db0:	4618      	mov	r0, r3
 8020db2:	f7ff ff88 	bl	8020cc6 <vOutputChar>
		if( c == 0 )
 8020db6:	683b      	ldr	r3, [r7, #0]
 8020db8:	2b00      	cmp	r3, #0
 8020dba:	d101      	bne.n	8020dc0 <strbuf_printchar_inline+0x2a>
		{
			return pdFALSE;
 8020dbc:	2300      	movs	r3, #0
 8020dbe:	e02e      	b.n	8020e1e <strbuf_printchar_inline+0x88>
		}
		apStr->curLen++;
 8020dc0:	687b      	ldr	r3, [r7, #4]
 8020dc2:	68db      	ldr	r3, [r3, #12]
 8020dc4:	1c5a      	adds	r2, r3, #1
 8020dc6:	687b      	ldr	r3, [r7, #4]
 8020dc8:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8020dca:	2301      	movs	r3, #1
 8020dcc:	e027      	b.n	8020e1e <strbuf_printchar_inline+0x88>
	}
	if( apStr->str < apStr->nulPos )
 8020dce:	687b      	ldr	r3, [r7, #4]
 8020dd0:	681a      	ldr	r2, [r3, #0]
 8020dd2:	687b      	ldr	r3, [r7, #4]
 8020dd4:	689b      	ldr	r3, [r3, #8]
 8020dd6:	429a      	cmp	r2, r3
 8020dd8:	d213      	bcs.n	8020e02 <strbuf_printchar_inline+0x6c>
	{
		*(apStr->str++) = c;
 8020dda:	687b      	ldr	r3, [r7, #4]
 8020ddc:	681b      	ldr	r3, [r3, #0]
 8020dde:	1c59      	adds	r1, r3, #1
 8020de0:	687a      	ldr	r2, [r7, #4]
 8020de2:	6011      	str	r1, [r2, #0]
 8020de4:	683a      	ldr	r2, [r7, #0]
 8020de6:	b2d2      	uxtb	r2, r2
 8020de8:	701a      	strb	r2, [r3, #0]
		if( c == 0 )
 8020dea:	683b      	ldr	r3, [r7, #0]
 8020dec:	2b00      	cmp	r3, #0
 8020dee:	d101      	bne.n	8020df4 <strbuf_printchar_inline+0x5e>
		{
			return pdFALSE;
 8020df0:	2300      	movs	r3, #0
 8020df2:	e014      	b.n	8020e1e <strbuf_printchar_inline+0x88>
		}
		apStr->curLen++;
 8020df4:	687b      	ldr	r3, [r7, #4]
 8020df6:	68db      	ldr	r3, [r3, #12]
 8020df8:	1c5a      	adds	r2, r3, #1
 8020dfa:	687b      	ldr	r3, [r7, #4]
 8020dfc:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8020dfe:	2301      	movs	r3, #1
 8020e00:	e00d      	b.n	8020e1e <strbuf_printchar_inline+0x88>
	}
	if( apStr->str == apStr->nulPos )
 8020e02:	687b      	ldr	r3, [r7, #4]
 8020e04:	681a      	ldr	r2, [r3, #0]
 8020e06:	687b      	ldr	r3, [r7, #4]
 8020e08:	689b      	ldr	r3, [r3, #8]
 8020e0a:	429a      	cmp	r2, r3
 8020e0c:	d106      	bne.n	8020e1c <strbuf_printchar_inline+0x86>
	{
		*( apStr->str++ ) = '\0';
 8020e0e:	687b      	ldr	r3, [r7, #4]
 8020e10:	681b      	ldr	r3, [r3, #0]
 8020e12:	1c59      	adds	r1, r3, #1
 8020e14:	687a      	ldr	r2, [r7, #4]
 8020e16:	6011      	str	r1, [r2, #0]
 8020e18:	2200      	movs	r2, #0
 8020e1a:	701a      	strb	r2, [r3, #0]
	}
	return pdFALSE;
 8020e1c:	2300      	movs	r3, #0
}
 8020e1e:	4618      	mov	r0, r3
 8020e20:	3708      	adds	r7, #8
 8020e22:	46bd      	mov	sp, r7
 8020e24:	bd80      	pop	{r7, pc}
	...

08020e28 <prints>:
	return iResult;
}
/*-----------------------------------------------------------*/

static BaseType_t prints(struct SStringBuf *apBuf, const char *apString )
{
 8020e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020e2a:	b085      	sub	sp, #20
 8020e2c:	af00      	add	r7, sp, #0
 8020e2e:	6078      	str	r0, [r7, #4]
 8020e30:	6039      	str	r1, [r7, #0]
	register int padchar = ' ';
 8020e32:	2620      	movs	r6, #32
	int i,len;

	if( xApplicationMemoryPermissions( ( uint32_t )apString ) == 0 )
 8020e34:	683b      	ldr	r3, [r7, #0]
 8020e36:	4618      	mov	r0, r3
 8020e38:	f7ff ff3a 	bl	8020cb0 <xApplicationMemoryPermissions>
 8020e3c:	4603      	mov	r3, r0
 8020e3e:	2b00      	cmp	r3, #0
 8020e40:	d101      	bne.n	8020e46 <prints+0x1e>
	{
		/* The user has probably made a mistake with the parameter
		for '%s', the memory is not readbale. */
		apString = "INV_MEM";
 8020e42:	4b4c      	ldr	r3, [pc, #304]	@ (8020f74 <prints+0x14c>)
 8020e44:	603b      	str	r3, [r7, #0]
	}

	if( apBuf->flags.width > 0 )
 8020e46:	687b      	ldr	r3, [r7, #4]
 8020e48:	695b      	ldr	r3, [r3, #20]
 8020e4a:	2b00      	cmp	r3, #0
 8020e4c:	dd1b      	ble.n	8020e86 <prints+0x5e>
	{
		register int count = 0;
 8020e4e:	2400      	movs	r4, #0
		register const char *ptr;
		for( ptr = apString; *ptr; ++ptr )
 8020e50:	683d      	ldr	r5, [r7, #0]
 8020e52:	e001      	b.n	8020e58 <prints+0x30>
		{
			++count;
 8020e54:	3401      	adds	r4, #1
		for( ptr = apString; *ptr; ++ptr )
 8020e56:	3501      	adds	r5, #1
 8020e58:	782b      	ldrb	r3, [r5, #0]
 8020e5a:	2b00      	cmp	r3, #0
 8020e5c:	d1fa      	bne.n	8020e54 <prints+0x2c>
		}

		if( count >= apBuf->flags.width )
 8020e5e:	687b      	ldr	r3, [r7, #4]
 8020e60:	695b      	ldr	r3, [r3, #20]
 8020e62:	429c      	cmp	r4, r3
 8020e64:	db03      	blt.n	8020e6e <prints+0x46>
		{
			apBuf->flags.width = 0;
 8020e66:	687b      	ldr	r3, [r7, #4]
 8020e68:	2200      	movs	r2, #0
 8020e6a:	615a      	str	r2, [r3, #20]
 8020e6c:	e004      	b.n	8020e78 <prints+0x50>
		}
		else
		{
			apBuf->flags.width -= count;
 8020e6e:	687b      	ldr	r3, [r7, #4]
 8020e70:	695b      	ldr	r3, [r3, #20]
 8020e72:	1b1a      	subs	r2, r3, r4
 8020e74:	687b      	ldr	r3, [r7, #4]
 8020e76:	615a      	str	r2, [r3, #20]
		}

		if( apBuf->flags.pad & PAD_ZERO )
 8020e78:	687b      	ldr	r3, [r7, #4]
 8020e7a:	7f1b      	ldrb	r3, [r3, #28]
 8020e7c:	f003 0302 	and.w	r3, r3, #2
 8020e80:	2b00      	cmp	r3, #0
 8020e82:	d000      	beq.n	8020e86 <prints+0x5e>
		{
			padchar = '0';
 8020e84:	2630      	movs	r6, #48	@ 0x30
		}
	}
	if( ( apBuf->flags.pad & PAD_RIGHT ) == 0 )
 8020e86:	687b      	ldr	r3, [r7, #4]
 8020e88:	7f1b      	ldrb	r3, [r3, #28]
 8020e8a:	f003 0301 	and.w	r3, r3, #1
 8020e8e:	2b00      	cmp	r3, #0
 8020e90:	d112      	bne.n	8020eb8 <prints+0x90>
	{
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8020e92:	e00d      	b.n	8020eb0 <prints+0x88>
		{
			if( strbuf_printchar( apBuf, padchar ) == 0 )
 8020e94:	4631      	mov	r1, r6
 8020e96:	6878      	ldr	r0, [r7, #4]
 8020e98:	f7ff ff3f 	bl	8020d1a <strbuf_printchar>
 8020e9c:	4603      	mov	r3, r0
 8020e9e:	2b00      	cmp	r3, #0
 8020ea0:	d101      	bne.n	8020ea6 <prints+0x7e>
			{
				return pdFALSE;
 8020ea2:	2300      	movs	r3, #0
 8020ea4:	e062      	b.n	8020f6c <prints+0x144>
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8020ea6:	687b      	ldr	r3, [r7, #4]
 8020ea8:	695b      	ldr	r3, [r3, #20]
 8020eaa:	1e5a      	subs	r2, r3, #1
 8020eac:	687b      	ldr	r3, [r7, #4]
 8020eae:	615a      	str	r2, [r3, #20]
 8020eb0:	687b      	ldr	r3, [r7, #4]
 8020eb2:	695b      	ldr	r3, [r3, #20]
 8020eb4:	2b00      	cmp	r3, #0
 8020eb6:	dced      	bgt.n	8020e94 <prints+0x6c>
			}
		}
	}
	if( ( apBuf->flags.isNumber == pdTRUE ) && ( apBuf->flags.pad == pdTRUE ) )
 8020eb8:	687b      	ldr	r3, [r7, #4]
 8020eba:	7f9b      	ldrb	r3, [r3, #30]
 8020ebc:	f003 0302 	and.w	r3, r3, #2
 8020ec0:	b2db      	uxtb	r3, r3
 8020ec2:	2b00      	cmp	r3, #0
 8020ec4:	d036      	beq.n	8020f34 <prints+0x10c>
 8020ec6:	687b      	ldr	r3, [r7, #4]
 8020ec8:	7f1b      	ldrb	r3, [r3, #28]
 8020eca:	2b01      	cmp	r3, #1
 8020ecc:	d132      	bne.n	8020f34 <prints+0x10c>
		/* The string to print represents an integer number.
		 * In this case, printLimit is the min number of digits to print
		 * If the length of the number to print is less than the min nb of i
		 * digits to display, we add 0 before printing the number
		 */
		len = strlen( apString );
 8020ece:	6838      	ldr	r0, [r7, #0]
 8020ed0:	f7df fa10 	bl	80002f4 <strlen>
 8020ed4:	4603      	mov	r3, r0
 8020ed6:	60bb      	str	r3, [r7, #8]

		if( len < apBuf->flags.printLimit )
 8020ed8:	687b      	ldr	r3, [r7, #4]
 8020eda:	699b      	ldr	r3, [r3, #24]
 8020edc:	68ba      	ldr	r2, [r7, #8]
 8020ede:	429a      	cmp	r2, r3
 8020ee0:	da28      	bge.n	8020f34 <prints+0x10c>
		{
			i = apBuf->flags.printLimit - len;
 8020ee2:	687b      	ldr	r3, [r7, #4]
 8020ee4:	699a      	ldr	r2, [r3, #24]
 8020ee6:	68bb      	ldr	r3, [r7, #8]
 8020ee8:	1ad3      	subs	r3, r2, r3
 8020eea:	60fb      	str	r3, [r7, #12]
			for( ; i; i-- )
 8020eec:	e00b      	b.n	8020f06 <prints+0xde>
			{
				if( strbuf_printchar( apBuf, '0' )  == 0 )
 8020eee:	2130      	movs	r1, #48	@ 0x30
 8020ef0:	6878      	ldr	r0, [r7, #4]
 8020ef2:	f7ff ff12 	bl	8020d1a <strbuf_printchar>
 8020ef6:	4603      	mov	r3, r0
 8020ef8:	2b00      	cmp	r3, #0
 8020efa:	d101      	bne.n	8020f00 <prints+0xd8>
				{
					return pdFALSE;
 8020efc:	2300      	movs	r3, #0
 8020efe:	e035      	b.n	8020f6c <prints+0x144>
			for( ; i; i-- )
 8020f00:	68fb      	ldr	r3, [r7, #12]
 8020f02:	3b01      	subs	r3, #1
 8020f04:	60fb      	str	r3, [r7, #12]
 8020f06:	68fb      	ldr	r3, [r7, #12]
 8020f08:	2b00      	cmp	r3, #0
 8020f0a:	d1f0      	bne.n	8020eee <prints+0xc6>
		}
	}
	/* The string to print is not the result of a number conversion to ascii.
	 * For a string, printLimit is the max number of characters to display
	 */
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 8020f0c:	e012      	b.n	8020f34 <prints+0x10c>
	{
		if( !strbuf_printchar( apBuf, *apString ) )
 8020f0e:	683b      	ldr	r3, [r7, #0]
 8020f10:	781b      	ldrb	r3, [r3, #0]
 8020f12:	4619      	mov	r1, r3
 8020f14:	6878      	ldr	r0, [r7, #4]
 8020f16:	f7ff ff00 	bl	8020d1a <strbuf_printchar>
 8020f1a:	4603      	mov	r3, r0
 8020f1c:	2b00      	cmp	r3, #0
 8020f1e:	d101      	bne.n	8020f24 <prints+0xfc>
		{
			return pdFALSE;
 8020f20:	2300      	movs	r3, #0
 8020f22:	e023      	b.n	8020f6c <prints+0x144>
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 8020f24:	683b      	ldr	r3, [r7, #0]
 8020f26:	3301      	adds	r3, #1
 8020f28:	603b      	str	r3, [r7, #0]
 8020f2a:	687b      	ldr	r3, [r7, #4]
 8020f2c:	699b      	ldr	r3, [r3, #24]
 8020f2e:	1e5a      	subs	r2, r3, #1
 8020f30:	687b      	ldr	r3, [r7, #4]
 8020f32:	619a      	str	r2, [r3, #24]
 8020f34:	687b      	ldr	r3, [r7, #4]
 8020f36:	699b      	ldr	r3, [r3, #24]
 8020f38:	2b00      	cmp	r3, #0
 8020f3a:	d012      	beq.n	8020f62 <prints+0x13a>
 8020f3c:	683b      	ldr	r3, [r7, #0]
 8020f3e:	781b      	ldrb	r3, [r3, #0]
 8020f40:	2b00      	cmp	r3, #0
 8020f42:	d1e4      	bne.n	8020f0e <prints+0xe6>
		}
	}

	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8020f44:	e00d      	b.n	8020f62 <prints+0x13a>
	{
		if( !strbuf_printchar( apBuf, padchar ) )
 8020f46:	4631      	mov	r1, r6
 8020f48:	6878      	ldr	r0, [r7, #4]
 8020f4a:	f7ff fee6 	bl	8020d1a <strbuf_printchar>
 8020f4e:	4603      	mov	r3, r0
 8020f50:	2b00      	cmp	r3, #0
 8020f52:	d101      	bne.n	8020f58 <prints+0x130>
		{
			return pdFALSE;
 8020f54:	2300      	movs	r3, #0
 8020f56:	e009      	b.n	8020f6c <prints+0x144>
	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8020f58:	687b      	ldr	r3, [r7, #4]
 8020f5a:	695b      	ldr	r3, [r3, #20]
 8020f5c:	1e5a      	subs	r2, r3, #1
 8020f5e:	687b      	ldr	r3, [r7, #4]
 8020f60:	615a      	str	r2, [r3, #20]
 8020f62:	687b      	ldr	r3, [r7, #4]
 8020f64:	695b      	ldr	r3, [r3, #20]
 8020f66:	2b00      	cmp	r3, #0
 8020f68:	dced      	bgt.n	8020f46 <prints+0x11e>
		}
	}

	return pdTRUE;
 8020f6a:	2301      	movs	r3, #1
}
 8020f6c:	4618      	mov	r0, r3
 8020f6e:	3714      	adds	r7, #20
 8020f70:	46bd      	mov	sp, r7
 8020f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020f74:	08025b14 	.word	0x08025b14

08020f78 <printi>:
}
#endif	/* SPRINTF_LONG_LONG */
/*-----------------------------------------------------------*/

static BaseType_t printi( struct SStringBuf *apBuf, int i )
{
 8020f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020f7c:	b087      	sub	sp, #28
 8020f7e:	af00      	add	r7, sp, #0
 8020f80:	6078      	str	r0, [r7, #4]
 8020f82:	6039      	str	r1, [r7, #0]
	char print_buf[ PRINT_BUF_LEN ];
	register char *s;
	register int t, neg = 0;
 8020f84:	f04f 0900 	mov.w	r9, #0
	register unsigned int u = i;
 8020f88:	683d      	ldr	r5, [r7, #0]
	register unsigned base = apBuf->flags.base;
 8020f8a:	687b      	ldr	r3, [r7, #4]
 8020f8c:	691b      	ldr	r3, [r3, #16]
 8020f8e:	461e      	mov	r6, r3

	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 8020f90:	687a      	ldr	r2, [r7, #4]
 8020f92:	7f93      	ldrb	r3, [r2, #30]
 8020f94:	f043 0302 	orr.w	r3, r3, #2
 8020f98:	7793      	strb	r3, [r2, #30]

	if( i == 0 )
 8020f9a:	683b      	ldr	r3, [r7, #0]
 8020f9c:	2b00      	cmp	r3, #0
 8020f9e:	d10b      	bne.n	8020fb8 <printi+0x40>
	{
		print_buf[ 0 ] = '0';
 8020fa0:	2330      	movs	r3, #48	@ 0x30
 8020fa2:	733b      	strb	r3, [r7, #12]
		print_buf[ 1 ] = '\0';
 8020fa4:	2300      	movs	r3, #0
 8020fa6:	737b      	strb	r3, [r7, #13]
		return prints( apBuf, print_buf );
 8020fa8:	f107 030c 	add.w	r3, r7, #12
 8020fac:	4619      	mov	r1, r3
 8020fae:	6878      	ldr	r0, [r7, #4]
 8020fb0:	f7ff ff3a 	bl	8020e28 <prints>
 8020fb4:	4603      	mov	r3, r0
 8020fb6:	e067      	b.n	8021088 <printi+0x110>
	}

	if( ( apBuf->flags.isSigned == pdTRUE ) && ( base == 10 ) && ( i < 0 ) )
 8020fb8:	687b      	ldr	r3, [r7, #4]
 8020fba:	7f9b      	ldrb	r3, [r3, #30]
 8020fbc:	f003 0301 	and.w	r3, r3, #1
 8020fc0:	b2db      	uxtb	r3, r3
 8020fc2:	2b00      	cmp	r3, #0
 8020fc4:	d009      	beq.n	8020fda <printi+0x62>
 8020fc6:	2e0a      	cmp	r6, #10
 8020fc8:	d107      	bne.n	8020fda <printi+0x62>
 8020fca:	683b      	ldr	r3, [r7, #0]
 8020fcc:	2b00      	cmp	r3, #0
 8020fce:	da04      	bge.n	8020fda <printi+0x62>
	{
		neg = 1;
 8020fd0:	f04f 0901 	mov.w	r9, #1
		u = -i;
 8020fd4:	683b      	ldr	r3, [r7, #0]
 8020fd6:	425b      	negs	r3, r3
 8020fd8:	461d      	mov	r5, r3
	}

	s = print_buf + sizeof print_buf - 1;
 8020fda:	f107 040c 	add.w	r4, r7, #12
 8020fde:	340b      	adds	r4, #11

	*s = '\0';
 8020fe0:	2300      	movs	r3, #0
 8020fe2:	7023      	strb	r3, [r4, #0]
	switch( base )
 8020fe4:	2e10      	cmp	r6, #16
 8020fe6:	d017      	beq.n	8021018 <printi+0xa0>
 8020fe8:	2e10      	cmp	r6, #16
 8020fea:	d829      	bhi.n	8021040 <printi+0xc8>
 8020fec:	2e08      	cmp	r6, #8
 8020fee:	d024      	beq.n	802103a <printi+0xc2>
 8020ff0:	2e0a      	cmp	r6, #10
 8020ff2:	d022      	beq.n	802103a <printi+0xc2>
 8020ff4:	e024      	b.n	8021040 <printi+0xc8>
	{
	case 16:
		while( u != 0 )
		{
			t = u & 0xF;
 8020ff6:	462b      	mov	r3, r5
 8020ff8:	f003 080f 	and.w	r8, r3, #15
			if( t >= 10 )
 8020ffc:	f1b8 0f09 	cmp.w	r8, #9
 8021000:	dd03      	ble.n	802100a <printi+0x92>
			{
				t += apBuf->flags.letBase - '0' - 10;
 8021002:	687b      	ldr	r3, [r7, #4]
 8021004:	7f5b      	ldrb	r3, [r3, #29]
 8021006:	3b3a      	subs	r3, #58	@ 0x3a
 8021008:	4498      	add	r8, r3
			}
			*( --s ) = t + '0';
 802100a:	fa5f f388 	uxtb.w	r3, r8
 802100e:	3c01      	subs	r4, #1
 8021010:	3330      	adds	r3, #48	@ 0x30
 8021012:	b2db      	uxtb	r3, r3
 8021014:	7023      	strb	r3, [r4, #0]
			u >>= 4;
 8021016:	092d      	lsrs	r5, r5, #4
		while( u != 0 )
 8021018:	2d00      	cmp	r5, #0
 802101a:	d1ec      	bne.n	8020ff6 <printi+0x7e>
		}
		break;
 802101c:	e010      	b.n	8021040 <printi+0xc8>
	case 8:
	case 10:
		/* GCC compiles very efficient */
		while( u )
		{
			t = u % base;
 802101e:	fbb5 f3f6 	udiv	r3, r5, r6
 8021022:	fb06 f303 	mul.w	r3, r6, r3
 8021026:	1aeb      	subs	r3, r5, r3
 8021028:	4698      	mov	r8, r3
			*( --s ) = t + '0';
 802102a:	fa5f f388 	uxtb.w	r3, r8
 802102e:	3c01      	subs	r4, #1
 8021030:	3330      	adds	r3, #48	@ 0x30
 8021032:	b2db      	uxtb	r3, r3
 8021034:	7023      	strb	r3, [r4, #0]
			u /= base;
 8021036:	fbb5 f5f6 	udiv	r5, r5, r6
		while( u )
 802103a:	2d00      	cmp	r5, #0
 802103c:	d1ef      	bne.n	802101e <printi+0xa6>
		}
		break;
 802103e:	bf00      	nop
		}
		break;
*/
	}

	if( neg != 0 )
 8021040:	f1b9 0f00 	cmp.w	r9, #0
 8021044:	d01b      	beq.n	802107e <printi+0x106>
	{
		if( apBuf->flags.width && (apBuf->flags.pad & PAD_ZERO ) )
 8021046:	687b      	ldr	r3, [r7, #4]
 8021048:	695b      	ldr	r3, [r3, #20]
 802104a:	2b00      	cmp	r3, #0
 802104c:	d014      	beq.n	8021078 <printi+0x100>
 802104e:	687b      	ldr	r3, [r7, #4]
 8021050:	7f1b      	ldrb	r3, [r3, #28]
 8021052:	f003 0302 	and.w	r3, r3, #2
 8021056:	2b00      	cmp	r3, #0
 8021058:	d00e      	beq.n	8021078 <printi+0x100>
		{
			if( strbuf_printchar( apBuf, '-' ) == 0 )
 802105a:	212d      	movs	r1, #45	@ 0x2d
 802105c:	6878      	ldr	r0, [r7, #4]
 802105e:	f7ff fe5c 	bl	8020d1a <strbuf_printchar>
 8021062:	4603      	mov	r3, r0
 8021064:	2b00      	cmp	r3, #0
 8021066:	d101      	bne.n	802106c <printi+0xf4>
			{
				return pdFALSE;
 8021068:	2300      	movs	r3, #0
 802106a:	e00d      	b.n	8021088 <printi+0x110>
			}
			--apBuf->flags.width;
 802106c:	687b      	ldr	r3, [r7, #4]
 802106e:	695b      	ldr	r3, [r3, #20]
 8021070:	1e5a      	subs	r2, r3, #1
 8021072:	687b      	ldr	r3, [r7, #4]
 8021074:	615a      	str	r2, [r3, #20]
 8021076:	e002      	b.n	802107e <printi+0x106>
		}
		else
		{
			*( --s ) = '-';
 8021078:	3c01      	subs	r4, #1
 802107a:	232d      	movs	r3, #45	@ 0x2d
 802107c:	7023      	strb	r3, [r4, #0]
		}
	}

	return prints( apBuf, s );
 802107e:	4621      	mov	r1, r4
 8021080:	6878      	ldr	r0, [r7, #4]
 8021082:	f7ff fed1 	bl	8020e28 <prints>
 8021086:	4603      	mov	r3, r0
}
 8021088:	4618      	mov	r0, r3
 802108a:	371c      	adds	r7, #28
 802108c:	46bd      	mov	sp, r7
 802108e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08021094 <printIp>:
/*-----------------------------------------------------------*/

static BaseType_t printIp(struct SStringBuf *apBuf, unsigned i )
{
 8021094:	b590      	push	{r4, r7, lr}
 8021096:	b089      	sub	sp, #36	@ 0x24
 8021098:	af02      	add	r7, sp, #8
 802109a:	6078      	str	r0, [r7, #4]
 802109c:	6039      	str	r1, [r7, #0]
	char print_buf[16];

	sprintf( print_buf, "%u.%u.%u.%u",
 802109e:	683b      	ldr	r3, [r7, #0]
 80210a0:	0e19      	lsrs	r1, r3, #24
		i >> 24,
		( i >> 16 ) & 0xff,
 80210a2:	683b      	ldr	r3, [r7, #0]
 80210a4:	0c1b      	lsrs	r3, r3, #16
	sprintf( print_buf, "%u.%u.%u.%u",
 80210a6:	b2dc      	uxtb	r4, r3
		( i >> 8 ) & 0xff,
 80210a8:	683b      	ldr	r3, [r7, #0]
 80210aa:	0a1b      	lsrs	r3, r3, #8
	sprintf( print_buf, "%u.%u.%u.%u",
 80210ac:	b2db      	uxtb	r3, r3
 80210ae:	683a      	ldr	r2, [r7, #0]
 80210b0:	b2d2      	uxtb	r2, r2
 80210b2:	f107 0008 	add.w	r0, r7, #8
 80210b6:	9201      	str	r2, [sp, #4]
 80210b8:	9300      	str	r3, [sp, #0]
 80210ba:	4623      	mov	r3, r4
 80210bc:	460a      	mov	r2, r1
 80210be:	4909      	ldr	r1, [pc, #36]	@ (80210e4 <printIp+0x50>)
 80210c0:	f000 fa81 	bl	80215c6 <sprintf>
		i & 0xff );
	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 80210c4:	687a      	ldr	r2, [r7, #4]
 80210c6:	7f93      	ldrb	r3, [r2, #30]
 80210c8:	f043 0302 	orr.w	r3, r3, #2
 80210cc:	7793      	strb	r3, [r2, #30]
	prints( apBuf, print_buf );
 80210ce:	f107 0308 	add.w	r3, r7, #8
 80210d2:	4619      	mov	r1, r3
 80210d4:	6878      	ldr	r0, [r7, #4]
 80210d6:	f7ff fea7 	bl	8020e28 <prints>

	return pdTRUE;
 80210da:	2301      	movs	r3, #1
}
 80210dc:	4618      	mov	r0, r3
 80210de:	371c      	adds	r7, #28
 80210e0:	46bd      	mov	sp, r7
 80210e2:	bd90      	pop	{r4, r7, pc}
 80210e4:	08025b1c 	.word	0x08025b1c

080210e8 <usNetToHost>:
/*-----------------------------------------------------------*/

static uint16_t usNetToHost( uint16_t usValue )
{
 80210e8:	b480      	push	{r7}
 80210ea:	b083      	sub	sp, #12
 80210ec:	af00      	add	r7, sp, #0
 80210ee:	4603      	mov	r3, r0
 80210f0:	80fb      	strh	r3, [r7, #6]
	if( u32.ulWords[ 0 ] == 0x00010203 )
 80210f2:	4a0b      	ldr	r2, [pc, #44]	@ (8021120 <usNetToHost+0x38>)
 80210f4:	4b0b      	ldr	r3, [pc, #44]	@ (8021124 <usNetToHost+0x3c>)
 80210f6:	429a      	cmp	r2, r3
 80210f8:	d101      	bne.n	80210fe <usNetToHost+0x16>
	{
		return usValue;
 80210fa:	88fb      	ldrh	r3, [r7, #6]
 80210fc:	e009      	b.n	8021112 <usNetToHost+0x2a>
	}
	else
	{
		return ( usValue << 8 ) | ( usValue >> 8 );
 80210fe:	88fb      	ldrh	r3, [r7, #6]
 8021100:	021b      	lsls	r3, r3, #8
 8021102:	b21a      	sxth	r2, r3
 8021104:	88fb      	ldrh	r3, [r7, #6]
 8021106:	0a1b      	lsrs	r3, r3, #8
 8021108:	b29b      	uxth	r3, r3
 802110a:	b21b      	sxth	r3, r3
 802110c:	4313      	orrs	r3, r2
 802110e:	b21b      	sxth	r3, r3
 8021110:	b29b      	uxth	r3, r3
	}
}
 8021112:	4618      	mov	r0, r3
 8021114:	370c      	adds	r7, #12
 8021116:	46bd      	mov	sp, r7
 8021118:	f85d 7b04 	ldr.w	r7, [sp], #4
 802111c:	4770      	bx	lr
 802111e:	bf00      	nop
 8021120:	03020100 	.word	0x03020100
 8021124:	00010203 	.word	0x00010203

08021128 <printIPv6>:

static BaseType_t printIPv6( struct SStringBuf *apBuf, uint16_t *pusAddress )
{
 8021128:	b580      	push	{r7, lr}
 802112a:	b088      	sub	sp, #32
 802112c:	af00      	add	r7, sp, #0
 802112e:	6078      	str	r0, [r7, #4]
 8021130:	6039      	str	r1, [r7, #0]
	int iIndex;
	int iZeroStart = -1;
 8021132:	f04f 33ff 	mov.w	r3, #4294967295
 8021136:	61bb      	str	r3, [r7, #24]
	int iZeroLength = 0;
 8021138:	2300      	movs	r3, #0
 802113a:	617b      	str	r3, [r7, #20]
	int iCurStart = 0;
 802113c:	2300      	movs	r3, #0
 802113e:	613b      	str	r3, [r7, #16]
	int iCurLength = 0;
 8021140:	2300      	movs	r3, #0
 8021142:	60fb      	str	r3, [r7, #12]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 8021144:	2300      	movs	r3, #0
 8021146:	61fb      	str	r3, [r7, #28]
 8021148:	e026      	b.n	8021198 <printIPv6+0x70>
	{
	uint16_t usValue = pusAddress[ iIndex ];
 802114a:	69fb      	ldr	r3, [r7, #28]
 802114c:	005b      	lsls	r3, r3, #1
 802114e:	683a      	ldr	r2, [r7, #0]
 8021150:	4413      	add	r3, r2
 8021152:	881b      	ldrh	r3, [r3, #0]
 8021154:	817b      	strh	r3, [r7, #10]
		if( usValue == 0 )
 8021156:	897b      	ldrh	r3, [r7, #10]
 8021158:	2b00      	cmp	r3, #0
 802115a:	d107      	bne.n	802116c <printIPv6+0x44>
		{
			if( iCurLength == 0 )
 802115c:	68fb      	ldr	r3, [r7, #12]
 802115e:	2b00      	cmp	r3, #0
 8021160:	d101      	bne.n	8021166 <printIPv6+0x3e>
			{
				iCurStart = iIndex;
 8021162:	69fb      	ldr	r3, [r7, #28]
 8021164:	613b      	str	r3, [r7, #16]
			}
			iCurLength++;
 8021166:	68fb      	ldr	r3, [r7, #12]
 8021168:	3301      	adds	r3, #1
 802116a:	60fb      	str	r3, [r7, #12]
		}
		if( ( usValue != 0 ) || ( iIndex == 7 ) )
 802116c:	897b      	ldrh	r3, [r7, #10]
 802116e:	2b00      	cmp	r3, #0
 8021170:	d102      	bne.n	8021178 <printIPv6+0x50>
 8021172:	69fb      	ldr	r3, [r7, #28]
 8021174:	2b07      	cmp	r3, #7
 8021176:	d10c      	bne.n	8021192 <printIPv6+0x6a>
		{
			if( ( iCurLength > 1 ) && ( iZeroLength < iCurLength ) )
 8021178:	68fb      	ldr	r3, [r7, #12]
 802117a:	2b01      	cmp	r3, #1
 802117c:	dd07      	ble.n	802118e <printIPv6+0x66>
 802117e:	697a      	ldr	r2, [r7, #20]
 8021180:	68fb      	ldr	r3, [r7, #12]
 8021182:	429a      	cmp	r2, r3
 8021184:	da03      	bge.n	802118e <printIPv6+0x66>
			{
				iZeroLength = iCurLength;
 8021186:	68fb      	ldr	r3, [r7, #12]
 8021188:	617b      	str	r3, [r7, #20]
				iZeroStart = iCurStart;
 802118a:	693b      	ldr	r3, [r7, #16]
 802118c:	61bb      	str	r3, [r7, #24]
			}
			iCurLength = 0;
 802118e:	2300      	movs	r3, #0
 8021190:	60fb      	str	r3, [r7, #12]
	for( iIndex = 0; iIndex < 8; iIndex++ )
 8021192:	69fb      	ldr	r3, [r7, #28]
 8021194:	3301      	adds	r3, #1
 8021196:	61fb      	str	r3, [r7, #28]
 8021198:	69fb      	ldr	r3, [r7, #28]
 802119a:	2b07      	cmp	r3, #7
 802119c:	ddd5      	ble.n	802114a <printIPv6+0x22>
		}
	}

	apBuf->flags.base = 16;
 802119e:	687b      	ldr	r3, [r7, #4]
 80211a0:	2210      	movs	r2, #16
 80211a2:	611a      	str	r2, [r3, #16]
	apBuf->flags.letBase = 'a'; /* use lower-case letters 'a' to 'f' */
 80211a4:	687b      	ldr	r3, [r7, #4]
 80211a6:	2261      	movs	r2, #97	@ 0x61
 80211a8:	775a      	strb	r2, [r3, #29]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 80211aa:	2300      	movs	r3, #0
 80211ac:	61fb      	str	r3, [r7, #28]
 80211ae:	e02b      	b.n	8021208 <printIPv6+0xe0>
	{
		if( iIndex == iZeroStart )
 80211b0:	69fa      	ldr	r2, [r7, #28]
 80211b2:	69bb      	ldr	r3, [r7, #24]
 80211b4:	429a      	cmp	r2, r3
 80211b6:	d110      	bne.n	80211da <printIPv6+0xb2>
		{
			iIndex += iZeroLength - 1;
 80211b8:	697b      	ldr	r3, [r7, #20]
 80211ba:	3b01      	subs	r3, #1
 80211bc:	69fa      	ldr	r2, [r7, #28]
 80211be:	4413      	add	r3, r2
 80211c0:	61fb      	str	r3, [r7, #28]
			strbuf_printchar( apBuf, ':' );
 80211c2:	213a      	movs	r1, #58	@ 0x3a
 80211c4:	6878      	ldr	r0, [r7, #4]
 80211c6:	f7ff fda8 	bl	8020d1a <strbuf_printchar>
			if( iIndex == 7 )
 80211ca:	69fb      	ldr	r3, [r7, #28]
 80211cc:	2b07      	cmp	r3, #7
 80211ce:	d118      	bne.n	8021202 <printIPv6+0xda>
			{
				strbuf_printchar( apBuf, ':' );
 80211d0:	213a      	movs	r1, #58	@ 0x3a
 80211d2:	6878      	ldr	r0, [r7, #4]
 80211d4:	f7ff fda1 	bl	8020d1a <strbuf_printchar>
 80211d8:	e013      	b.n	8021202 <printIPv6+0xda>
			}
		}
		else
		{
			if( iIndex > 0 )
 80211da:	69fb      	ldr	r3, [r7, #28]
 80211dc:	2b00      	cmp	r3, #0
 80211de:	dd03      	ble.n	80211e8 <printIPv6+0xc0>
			{
				strbuf_printchar( apBuf, ':' );
 80211e0:	213a      	movs	r1, #58	@ 0x3a
 80211e2:	6878      	ldr	r0, [r7, #4]
 80211e4:	f7ff fd99 	bl	8020d1a <strbuf_printchar>
			}
			printi( apBuf, ( int ) ( ( uint32_t ) usNetToHost( pusAddress[ iIndex ] ) ) );
 80211e8:	69fb      	ldr	r3, [r7, #28]
 80211ea:	005b      	lsls	r3, r3, #1
 80211ec:	683a      	ldr	r2, [r7, #0]
 80211ee:	4413      	add	r3, r2
 80211f0:	881b      	ldrh	r3, [r3, #0]
 80211f2:	4618      	mov	r0, r3
 80211f4:	f7ff ff78 	bl	80210e8 <usNetToHost>
 80211f8:	4603      	mov	r3, r0
 80211fa:	4619      	mov	r1, r3
 80211fc:	6878      	ldr	r0, [r7, #4]
 80211fe:	f7ff febb 	bl	8020f78 <printi>
	for( iIndex = 0; iIndex < 8; iIndex++ )
 8021202:	69fb      	ldr	r3, [r7, #28]
 8021204:	3301      	adds	r3, #1
 8021206:	61fb      	str	r3, [r7, #28]
 8021208:	69fb      	ldr	r3, [r7, #28]
 802120a:	2b07      	cmp	r3, #7
 802120c:	ddd0      	ble.n	80211b0 <printIPv6+0x88>
		}
	}

	return pdTRUE;
 802120e:	2301      	movs	r3, #1
}
 8021210:	4618      	mov	r0, r3
 8021212:	3720      	adds	r7, #32
 8021214:	46bd      	mov	sp, r7
 8021216:	bd80      	pop	{r7, pc}

08021218 <tiny_print>:
/*-----------------------------------------------------------*/

static void tiny_print( struct SStringBuf *apBuf, const char *format, va_list args )
{
 8021218:	b590      	push	{r4, r7, lr}
 802121a:	b087      	sub	sp, #28
 802121c:	af00      	add	r7, sp, #0
 802121e:	60f8      	str	r0, [r7, #12]
 8021220:	60b9      	str	r1, [r7, #8]
 8021222:	607a      	str	r2, [r7, #4]
	char scr[2];

	for( ; ; )
	{
		int ch = *( format++ );
 8021224:	68bb      	ldr	r3, [r7, #8]
 8021226:	1c5a      	adds	r2, r3, #1
 8021228:	60ba      	str	r2, [r7, #8]
 802122a:	781b      	ldrb	r3, [r3, #0]
 802122c:	617b      	str	r3, [r7, #20]

		if( ch != '%' )
 802122e:	697b      	ldr	r3, [r7, #20]
 8021230:	2b25      	cmp	r3, #37	@ 0x25
 8021232:	d00f      	beq.n	8021254 <tiny_print+0x3c>
		{
			do
			{
				/* Put the most like flow in a small loop */
				if( strbuf_printchar_inline( apBuf, ch ) == 0 )
 8021234:	6979      	ldr	r1, [r7, #20]
 8021236:	68f8      	ldr	r0, [r7, #12]
 8021238:	f7ff fdad 	bl	8020d96 <strbuf_printchar_inline>
 802123c:	4603      	mov	r3, r0
 802123e:	2b00      	cmp	r3, #0
 8021240:	f000 817e 	beq.w	8021540 <tiny_print+0x328>
				{
					return;
				}
				ch = *( format++ );
 8021244:	68bb      	ldr	r3, [r7, #8]
 8021246:	1c5a      	adds	r2, r3, #1
 8021248:	60ba      	str	r2, [r7, #8]
 802124a:	781b      	ldrb	r3, [r3, #0]
 802124c:	617b      	str	r3, [r7, #20]
			} while( ch != '%' );
 802124e:	697b      	ldr	r3, [r7, #20]
 8021250:	2b25      	cmp	r3, #37	@ 0x25
 8021252:	d1ef      	bne.n	8021234 <tiny_print+0x1c>
		}
		ch = *( format++ );
 8021254:	68bb      	ldr	r3, [r7, #8]
 8021256:	1c5a      	adds	r2, r3, #1
 8021258:	60ba      	str	r2, [r7, #8]
 802125a:	781b      	ldrb	r3, [r3, #0]
 802125c:	617b      	str	r3, [r7, #20]
		/* Now ch has character after '%', format pointing to next */

		if( ch == '\0' )
 802125e:	697b      	ldr	r3, [r7, #20]
 8021260:	2b00      	cmp	r3, #0
 8021262:	f000 8165 	beq.w	8021530 <tiny_print+0x318>
		{
			break;
		}
		if( ch == '%' )
 8021266:	697b      	ldr	r3, [r7, #20]
 8021268:	2b25      	cmp	r3, #37	@ 0x25
 802126a:	d108      	bne.n	802127e <tiny_print+0x66>
		{
			if( strbuf_printchar( apBuf, ch ) == 0 )
 802126c:	6979      	ldr	r1, [r7, #20]
 802126e:	68f8      	ldr	r0, [r7, #12]
 8021270:	f7ff fd53 	bl	8020d1a <strbuf_printchar>
 8021274:	4603      	mov	r3, r0
 8021276:	2b00      	cmp	r3, #0
 8021278:	f040 814e 	bne.w	8021518 <tiny_print+0x300>
			{
				return;
 802127c:	e161      	b.n	8021542 <tiny_print+0x32a>
			}
			continue;
		}
		memset( &apBuf->flags, '\0', sizeof apBuf->flags );
 802127e:	68fb      	ldr	r3, [r7, #12]
 8021280:	3310      	adds	r3, #16
 8021282:	2210      	movs	r2, #16
 8021284:	2100      	movs	r1, #0
 8021286:	4618      	mov	r0, r3
 8021288:	f7ff fc79 	bl	8020b7e <memset>

		if( ch == '-' )
 802128c:	697b      	ldr	r3, [r7, #20]
 802128e:	2b2d      	cmp	r3, #45	@ 0x2d
 8021290:	d114      	bne.n	80212bc <tiny_print+0xa4>
		{
			ch = *( format++ );
 8021292:	68bb      	ldr	r3, [r7, #8]
 8021294:	1c5a      	adds	r2, r3, #1
 8021296:	60ba      	str	r2, [r7, #8]
 8021298:	781b      	ldrb	r3, [r3, #0]
 802129a:	617b      	str	r3, [r7, #20]
			apBuf->flags.pad = PAD_RIGHT;
 802129c:	68fb      	ldr	r3, [r7, #12]
 802129e:	2201      	movs	r2, #1
 80212a0:	771a      	strb	r2, [r3, #28]
		}
		while( ch == '0' )
 80212a2:	e00b      	b.n	80212bc <tiny_print+0xa4>
		{
			ch = *( format++ );
 80212a4:	68bb      	ldr	r3, [r7, #8]
 80212a6:	1c5a      	adds	r2, r3, #1
 80212a8:	60ba      	str	r2, [r7, #8]
 80212aa:	781b      	ldrb	r3, [r3, #0]
 80212ac:	617b      	str	r3, [r7, #20]
			apBuf->flags.pad |= PAD_ZERO;
 80212ae:	68fb      	ldr	r3, [r7, #12]
 80212b0:	7f1b      	ldrb	r3, [r3, #28]
 80212b2:	f043 0302 	orr.w	r3, r3, #2
 80212b6:	b2da      	uxtb	r2, r3
 80212b8:	68fb      	ldr	r3, [r7, #12]
 80212ba:	771a      	strb	r2, [r3, #28]
		while( ch == '0' )
 80212bc:	697b      	ldr	r3, [r7, #20]
 80212be:	2b30      	cmp	r3, #48	@ 0x30
 80212c0:	d0f0      	beq.n	80212a4 <tiny_print+0x8c>
		}
		if( ch == '*' )
 80212c2:	697b      	ldr	r3, [r7, #20]
 80212c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80212c6:	d120      	bne.n	802130a <tiny_print+0xf2>
		{
			ch = *( format++ );
 80212c8:	68bb      	ldr	r3, [r7, #8]
 80212ca:	1c5a      	adds	r2, r3, #1
 80212cc:	60ba      	str	r2, [r7, #8]
 80212ce:	781b      	ldrb	r3, [r3, #0]
 80212d0:	617b      	str	r3, [r7, #20]
			apBuf->flags.width = va_arg( args, int );
 80212d2:	687b      	ldr	r3, [r7, #4]
 80212d4:	1d1a      	adds	r2, r3, #4
 80212d6:	607a      	str	r2, [r7, #4]
 80212d8:	681a      	ldr	r2, [r3, #0]
 80212da:	68fb      	ldr	r3, [r7, #12]
 80212dc:	615a      	str	r2, [r3, #20]
 80212de:	e01a      	b.n	8021316 <tiny_print+0xfe>
		}
		else
		{
			while( ch >= '0' && ch <= '9' )
			{
				apBuf->flags.width *= 10;
 80212e0:	68fb      	ldr	r3, [r7, #12]
 80212e2:	695a      	ldr	r2, [r3, #20]
 80212e4:	4613      	mov	r3, r2
 80212e6:	009b      	lsls	r3, r3, #2
 80212e8:	4413      	add	r3, r2
 80212ea:	005b      	lsls	r3, r3, #1
 80212ec:	461a      	mov	r2, r3
 80212ee:	68fb      	ldr	r3, [r7, #12]
 80212f0:	615a      	str	r2, [r3, #20]
				apBuf->flags.width += ch - '0';
 80212f2:	68fb      	ldr	r3, [r7, #12]
 80212f4:	695a      	ldr	r2, [r3, #20]
 80212f6:	697b      	ldr	r3, [r7, #20]
 80212f8:	3b30      	subs	r3, #48	@ 0x30
 80212fa:	441a      	add	r2, r3
 80212fc:	68fb      	ldr	r3, [r7, #12]
 80212fe:	615a      	str	r2, [r3, #20]
				ch = *( format++ );
 8021300:	68bb      	ldr	r3, [r7, #8]
 8021302:	1c5a      	adds	r2, r3, #1
 8021304:	60ba      	str	r2, [r7, #8]
 8021306:	781b      	ldrb	r3, [r3, #0]
 8021308:	617b      	str	r3, [r7, #20]
			while( ch >= '0' && ch <= '9' )
 802130a:	697b      	ldr	r3, [r7, #20]
 802130c:	2b2f      	cmp	r3, #47	@ 0x2f
 802130e:	dd02      	ble.n	8021316 <tiny_print+0xfe>
 8021310:	697b      	ldr	r3, [r7, #20]
 8021312:	2b39      	cmp	r3, #57	@ 0x39
 8021314:	dde4      	ble.n	80212e0 <tiny_print+0xc8>
			}
		}
		if( ch == '.' )
 8021316:	697b      	ldr	r3, [r7, #20]
 8021318:	2b2e      	cmp	r3, #46	@ 0x2e
 802131a:	d12e      	bne.n	802137a <tiny_print+0x162>
		{
			ch = *( format++ );
 802131c:	68bb      	ldr	r3, [r7, #8]
 802131e:	1c5a      	adds	r2, r3, #1
 8021320:	60ba      	str	r2, [r7, #8]
 8021322:	781b      	ldrb	r3, [r3, #0]
 8021324:	617b      	str	r3, [r7, #20]
			if( ch == '*' )
 8021326:	697b      	ldr	r3, [r7, #20]
 8021328:	2b2a      	cmp	r3, #42	@ 0x2a
 802132a:	d120      	bne.n	802136e <tiny_print+0x156>
			{
				apBuf->flags.printLimit = va_arg( args, int );
 802132c:	687b      	ldr	r3, [r7, #4]
 802132e:	1d1a      	adds	r2, r3, #4
 8021330:	607a      	str	r2, [r7, #4]
 8021332:	681a      	ldr	r2, [r3, #0]
 8021334:	68fb      	ldr	r3, [r7, #12]
 8021336:	619a      	str	r2, [r3, #24]
				ch = *( format++ );
 8021338:	68bb      	ldr	r3, [r7, #8]
 802133a:	1c5a      	adds	r2, r3, #1
 802133c:	60ba      	str	r2, [r7, #8]
 802133e:	781b      	ldrb	r3, [r3, #0]
 8021340:	617b      	str	r3, [r7, #20]
 8021342:	e01a      	b.n	802137a <tiny_print+0x162>
			}
			else
			{
				while( ch >= '0' && ch <= '9' )
				{
					apBuf->flags.printLimit *= 10;
 8021344:	68fb      	ldr	r3, [r7, #12]
 8021346:	699a      	ldr	r2, [r3, #24]
 8021348:	4613      	mov	r3, r2
 802134a:	009b      	lsls	r3, r3, #2
 802134c:	4413      	add	r3, r2
 802134e:	005b      	lsls	r3, r3, #1
 8021350:	461a      	mov	r2, r3
 8021352:	68fb      	ldr	r3, [r7, #12]
 8021354:	619a      	str	r2, [r3, #24]
					apBuf->flags.printLimit += ch - '0';
 8021356:	68fb      	ldr	r3, [r7, #12]
 8021358:	699a      	ldr	r2, [r3, #24]
 802135a:	697b      	ldr	r3, [r7, #20]
 802135c:	3b30      	subs	r3, #48	@ 0x30
 802135e:	441a      	add	r2, r3
 8021360:	68fb      	ldr	r3, [r7, #12]
 8021362:	619a      	str	r2, [r3, #24]
					ch = *( format++ );
 8021364:	68bb      	ldr	r3, [r7, #8]
 8021366:	1c5a      	adds	r2, r3, #1
 8021368:	60ba      	str	r2, [r7, #8]
 802136a:	781b      	ldrb	r3, [r3, #0]
 802136c:	617b      	str	r3, [r7, #20]
				while( ch >= '0' && ch <= '9' )
 802136e:	697b      	ldr	r3, [r7, #20]
 8021370:	2b2f      	cmp	r3, #47	@ 0x2f
 8021372:	dd02      	ble.n	802137a <tiny_print+0x162>
 8021374:	697b      	ldr	r3, [r7, #20]
 8021376:	2b39      	cmp	r3, #57	@ 0x39
 8021378:	dde4      	ble.n	8021344 <tiny_print+0x12c>
				}
			}
		}
		if( apBuf->flags.printLimit == 0 )
 802137a:	68fb      	ldr	r3, [r7, #12]
 802137c:	699b      	ldr	r3, [r3, #24]
 802137e:	2b00      	cmp	r3, #0
 8021380:	d104      	bne.n	802138c <tiny_print+0x174>
		{
			apBuf->flags.printLimit--;  /* -1: make it unlimited */
 8021382:	68fb      	ldr	r3, [r7, #12]
 8021384:	699b      	ldr	r3, [r3, #24]
 8021386:	1e5a      	subs	r2, r3, #1
 8021388:	68fb      	ldr	r3, [r7, #12]
 802138a:	619a      	str	r2, [r3, #24]
		}
		if( ch == 'p' )
 802138c:	697b      	ldr	r3, [r7, #20]
 802138e:	2b70      	cmp	r3, #112	@ 0x70
 8021390:	d118      	bne.n	80213c4 <tiny_print+0x1ac>
		{
			if( format[0] == 'i' && format[1] == 'p' )
 8021392:	68bb      	ldr	r3, [r7, #8]
 8021394:	781b      	ldrb	r3, [r3, #0]
 8021396:	2b69      	cmp	r3, #105	@ 0x69
 8021398:	d114      	bne.n	80213c4 <tiny_print+0x1ac>
 802139a:	68bb      	ldr	r3, [r7, #8]
 802139c:	3301      	adds	r3, #1
 802139e:	781b      	ldrb	r3, [r3, #0]
 80213a0:	2b70      	cmp	r3, #112	@ 0x70
 80213a2:	d10f      	bne.n	80213c4 <tiny_print+0x1ac>
			{
				format += 2;	/* eat the "pi" of "pip" */
 80213a4:	68bb      	ldr	r3, [r7, #8]
 80213a6:	3302      	adds	r3, #2
 80213a8:	60bb      	str	r3, [r7, #8]
				/* Print a IPv6 address */
				if( printIPv6( apBuf, va_arg( args, uint16_t* ) ) == 0 )
 80213aa:	687b      	ldr	r3, [r7, #4]
 80213ac:	1d1a      	adds	r2, r3, #4
 80213ae:	607a      	str	r2, [r7, #4]
 80213b0:	681b      	ldr	r3, [r3, #0]
 80213b2:	4619      	mov	r1, r3
 80213b4:	68f8      	ldr	r0, [r7, #12]
 80213b6:	f7ff feb7 	bl	8021128 <printIPv6>
 80213ba:	4603      	mov	r3, r0
 80213bc:	2b00      	cmp	r3, #0
 80213be:	f040 80ad 	bne.w	802151c <tiny_print+0x304>
				{
					break;
 80213c2:	e0b8      	b.n	8021536 <tiny_print+0x31e>
				}
				continue;
			}
		}
		if( ch == 's' )
 80213c4:	697b      	ldr	r3, [r7, #20]
 80213c6:	2b73      	cmp	r3, #115	@ 0x73
 80213c8:	d112      	bne.n	80213f0 <tiny_print+0x1d8>
		{
			register char *s = ( char * )va_arg( args, int );
 80213ca:	687b      	ldr	r3, [r7, #4]
 80213cc:	1d1a      	adds	r2, r3, #4
 80213ce:	607a      	str	r2, [r7, #4]
 80213d0:	681b      	ldr	r3, [r3, #0]
 80213d2:	461c      	mov	r4, r3
			if( prints( apBuf, s ? s : "(null)" ) == 0 )
 80213d4:	2c00      	cmp	r4, #0
 80213d6:	d001      	beq.n	80213dc <tiny_print+0x1c4>
 80213d8:	4623      	mov	r3, r4
 80213da:	e000      	b.n	80213de <tiny_print+0x1c6>
 80213dc:	4b5a      	ldr	r3, [pc, #360]	@ (8021548 <tiny_print+0x330>)
 80213de:	4619      	mov	r1, r3
 80213e0:	68f8      	ldr	r0, [r7, #12]
 80213e2:	f7ff fd21 	bl	8020e28 <prints>
 80213e6:	4603      	mov	r3, r0
 80213e8:	2b00      	cmp	r3, #0
 80213ea:	f040 8099 	bne.w	8021520 <tiny_print+0x308>
			{
				break;
 80213ee:	e0a2      	b.n	8021536 <tiny_print+0x31e>
			}
			continue;
		}
		if( ch == 'c' )
 80213f0:	697b      	ldr	r3, [r7, #20]
 80213f2:	2b63      	cmp	r3, #99	@ 0x63
 80213f4:	d10f      	bne.n	8021416 <tiny_print+0x1fe>
		{
			/* char are converted to int then pushed on the stack */
			scr[0] = ( char ) va_arg( args, int );
 80213f6:	687b      	ldr	r3, [r7, #4]
 80213f8:	1d1a      	adds	r2, r3, #4
 80213fa:	607a      	str	r2, [r7, #4]
 80213fc:	681b      	ldr	r3, [r3, #0]
 80213fe:	b2db      	uxtb	r3, r3
 8021400:	743b      	strb	r3, [r7, #16]

			if( strbuf_printchar( apBuf, scr[0] )  == 0 )
 8021402:	7c3b      	ldrb	r3, [r7, #16]
 8021404:	4619      	mov	r1, r3
 8021406:	68f8      	ldr	r0, [r7, #12]
 8021408:	f7ff fc87 	bl	8020d1a <strbuf_printchar>
 802140c:	4603      	mov	r3, r0
 802140e:	2b00      	cmp	r3, #0
 8021410:	f040 8088 	bne.w	8021524 <tiny_print+0x30c>
			{
				return;
 8021414:	e095      	b.n	8021542 <tiny_print+0x32a>
			}

			continue;
		}
		if( ch == 'l' )
 8021416:	697b      	ldr	r3, [r7, #20]
 8021418:	2b6c      	cmp	r3, #108	@ 0x6c
 802141a:	d109      	bne.n	8021430 <tiny_print+0x218>
		{
			ch = *( format++ );
 802141c:	68bb      	ldr	r3, [r7, #8]
 802141e:	1c5a      	adds	r2, r3, #1
 8021420:	60ba      	str	r2, [r7, #8]
 8021422:	781b      	ldrb	r3, [r3, #0]
 8021424:	617b      	str	r3, [r7, #20]
			apBuf->flags.long32 = 1;
 8021426:	68fa      	ldr	r2, [r7, #12]
 8021428:	7f93      	ldrb	r3, [r2, #30]
 802142a:	f043 0304 	orr.w	r3, r3, #4
 802142e:	7793      	strb	r3, [r2, #30]
			/* Makes not difference as u32 == long */
		}
		if( ch == 'L' )
 8021430:	697b      	ldr	r3, [r7, #20]
 8021432:	2b4c      	cmp	r3, #76	@ 0x4c
 8021434:	d109      	bne.n	802144a <tiny_print+0x232>
		{
			ch = *( format++ );
 8021436:	68bb      	ldr	r3, [r7, #8]
 8021438:	1c5a      	adds	r2, r3, #1
 802143a:	60ba      	str	r2, [r7, #8]
 802143c:	781b      	ldrb	r3, [r3, #0]
 802143e:	617b      	str	r3, [r7, #20]
			apBuf->flags.long64 = 1;
 8021440:	68fa      	ldr	r2, [r7, #12]
 8021442:	7f93      	ldrb	r3, [r2, #30]
 8021444:	f043 0308 	orr.w	r3, r3, #8
 8021448:	7793      	strb	r3, [r2, #30]
			/* Does make a difference */
		}
		apBuf->flags.base = 10;
 802144a:	68fb      	ldr	r3, [r7, #12]
 802144c:	220a      	movs	r2, #10
 802144e:	611a      	str	r2, [r3, #16]
		apBuf->flags.letBase = 'a';
 8021450:	68fb      	ldr	r3, [r7, #12]
 8021452:	2261      	movs	r2, #97	@ 0x61
 8021454:	775a      	strb	r2, [r3, #29]

		if( ch == 'd' || ch == 'u' )
 8021456:	697b      	ldr	r3, [r7, #20]
 8021458:	2b64      	cmp	r3, #100	@ 0x64
 802145a:	d002      	beq.n	8021462 <tiny_print+0x24a>
 802145c:	697b      	ldr	r3, [r7, #20]
 802145e:	2b75      	cmp	r3, #117	@ 0x75
 8021460:	d116      	bne.n	8021490 <tiny_print+0x278>
		{
			apBuf->flags.isSigned = ( ch == 'd' );
 8021462:	697b      	ldr	r3, [r7, #20]
 8021464:	2b64      	cmp	r3, #100	@ 0x64
 8021466:	bf0c      	ite	eq
 8021468:	2301      	moveq	r3, #1
 802146a:	2300      	movne	r3, #0
 802146c:	b2d9      	uxtb	r1, r3
 802146e:	68fa      	ldr	r2, [r7, #12]
 8021470:	7f93      	ldrb	r3, [r2, #30]
 8021472:	f361 0300 	bfi	r3, r1, #0, #1
 8021476:	7793      	strb	r3, [r2, #30]
				{
					break;
				}
			} else
#endif	/* SPRINTF_LONG_LONG */
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 8021478:	687b      	ldr	r3, [r7, #4]
 802147a:	1d1a      	adds	r2, r3, #4
 802147c:	607a      	str	r2, [r7, #4]
 802147e:	681b      	ldr	r3, [r3, #0]
 8021480:	4619      	mov	r1, r3
 8021482:	68f8      	ldr	r0, [r7, #12]
 8021484:	f7ff fd78 	bl	8020f78 <printi>
 8021488:	4603      	mov	r3, r0
 802148a:	2b00      	cmp	r3, #0
 802148c:	d14c      	bne.n	8021528 <tiny_print+0x310>
			{
				break;
 802148e:	e052      	b.n	8021536 <tiny_print+0x31e>
			}
			continue;
		}

		apBuf->flags.base = 16;		/* From here all hexadecimal */
 8021490:	68fb      	ldr	r3, [r7, #12]
 8021492:	2210      	movs	r2, #16
 8021494:	611a      	str	r2, [r3, #16]

		if( ch == 'x' && format[0] == 'i' && format[1] == 'p' )
 8021496:	697b      	ldr	r3, [r7, #20]
 8021498:	2b78      	cmp	r3, #120	@ 0x78
 802149a:	d117      	bne.n	80214cc <tiny_print+0x2b4>
 802149c:	68bb      	ldr	r3, [r7, #8]
 802149e:	781b      	ldrb	r3, [r3, #0]
 80214a0:	2b69      	cmp	r3, #105	@ 0x69
 80214a2:	d113      	bne.n	80214cc <tiny_print+0x2b4>
 80214a4:	68bb      	ldr	r3, [r7, #8]
 80214a6:	3301      	adds	r3, #1
 80214a8:	781b      	ldrb	r3, [r3, #0]
 80214aa:	2b70      	cmp	r3, #112	@ 0x70
 80214ac:	d10e      	bne.n	80214cc <tiny_print+0x2b4>
		{
			format += 2;	/* eat the "xi" of "xip" */
 80214ae:	68bb      	ldr	r3, [r7, #8]
 80214b0:	3302      	adds	r3, #2
 80214b2:	60bb      	str	r3, [r7, #8]
			/* Will use base 10 again */
			if( printIp( apBuf, va_arg( args, int ) ) == 0 )
 80214b4:	687b      	ldr	r3, [r7, #4]
 80214b6:	1d1a      	adds	r2, r3, #4
 80214b8:	607a      	str	r2, [r7, #4]
 80214ba:	681b      	ldr	r3, [r3, #0]
 80214bc:	4619      	mov	r1, r3
 80214be:	68f8      	ldr	r0, [r7, #12]
 80214c0:	f7ff fde8 	bl	8021094 <printIp>
 80214c4:	4603      	mov	r3, r0
 80214c6:	2b00      	cmp	r3, #0
 80214c8:	d130      	bne.n	802152c <tiny_print+0x314>
			{
				break;
 80214ca:	e034      	b.n	8021536 <tiny_print+0x31e>
			}
			continue;
		}
		if( ch == 'x' || ch == 'X' || ch == 'p' || ch == 'o' )
 80214cc:	697b      	ldr	r3, [r7, #20]
 80214ce:	2b78      	cmp	r3, #120	@ 0x78
 80214d0:	d009      	beq.n	80214e6 <tiny_print+0x2ce>
 80214d2:	697b      	ldr	r3, [r7, #20]
 80214d4:	2b58      	cmp	r3, #88	@ 0x58
 80214d6:	d006      	beq.n	80214e6 <tiny_print+0x2ce>
 80214d8:	697b      	ldr	r3, [r7, #20]
 80214da:	2b70      	cmp	r3, #112	@ 0x70
 80214dc:	d003      	beq.n	80214e6 <tiny_print+0x2ce>
 80214de:	697b      	ldr	r3, [r7, #20]
 80214e0:	2b6f      	cmp	r3, #111	@ 0x6f
 80214e2:	f47f ae9f 	bne.w	8021224 <tiny_print+0xc>
		{
			if( ch == 'X' )
 80214e6:	697b      	ldr	r3, [r7, #20]
 80214e8:	2b58      	cmp	r3, #88	@ 0x58
 80214ea:	d103      	bne.n	80214f4 <tiny_print+0x2dc>
			{
				apBuf->flags.letBase = 'A';
 80214ec:	68fb      	ldr	r3, [r7, #12]
 80214ee:	2241      	movs	r2, #65	@ 0x41
 80214f0:	775a      	strb	r2, [r3, #29]
 80214f2:	e005      	b.n	8021500 <tiny_print+0x2e8>
			}
			else if( ch == 'o' )
 80214f4:	697b      	ldr	r3, [r7, #20]
 80214f6:	2b6f      	cmp	r3, #111	@ 0x6f
 80214f8:	d102      	bne.n	8021500 <tiny_print+0x2e8>
			{
				apBuf->flags.base = 8;
 80214fa:	68fb      	ldr	r3, [r7, #12]
 80214fc:	2208      	movs	r2, #8
 80214fe:	611a      	str	r2, [r3, #16]
				{
					break;
				}
			} else
#endif	/* SPRINTF_LONG_LONG */
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 8021500:	687b      	ldr	r3, [r7, #4]
 8021502:	1d1a      	adds	r2, r3, #4
 8021504:	607a      	str	r2, [r7, #4]
 8021506:	681b      	ldr	r3, [r3, #0]
 8021508:	4619      	mov	r1, r3
 802150a:	68f8      	ldr	r0, [r7, #12]
 802150c:	f7ff fd34 	bl	8020f78 <printi>
 8021510:	4603      	mov	r3, r0
 8021512:	2b00      	cmp	r3, #0
 8021514:	d00e      	beq.n	8021534 <tiny_print+0x31c>
			{
				break;
			}
			continue;
 8021516:	e00a      	b.n	802152e <tiny_print+0x316>
			continue;
 8021518:	bf00      	nop
 802151a:	e683      	b.n	8021224 <tiny_print+0xc>
				continue;
 802151c:	bf00      	nop
 802151e:	e681      	b.n	8021224 <tiny_print+0xc>
			continue;
 8021520:	bf00      	nop
 8021522:	e67f      	b.n	8021224 <tiny_print+0xc>
			continue;
 8021524:	bf00      	nop
 8021526:	e67d      	b.n	8021224 <tiny_print+0xc>
			continue;
 8021528:	bf00      	nop
 802152a:	e67b      	b.n	8021224 <tiny_print+0xc>
			continue;
 802152c:	bf00      	nop
	{
 802152e:	e679      	b.n	8021224 <tiny_print+0xc>
			break;
 8021530:	bf00      	nop
 8021532:	e000      	b.n	8021536 <tiny_print+0x31e>
				break;
 8021534:	bf00      	nop
		}
	}
	strbuf_printchar( apBuf, '\0' );
 8021536:	2100      	movs	r1, #0
 8021538:	68f8      	ldr	r0, [r7, #12]
 802153a:	f7ff fbee 	bl	8020d1a <strbuf_printchar>
 802153e:	e000      	b.n	8021542 <tiny_print+0x32a>
					return;
 8021540:	bf00      	nop
}
 8021542:	371c      	adds	r7, #28
 8021544:	46bd      	mov	sp, r7
 8021546:	bd90      	pop	{r4, r7, pc}
 8021548:	08025b28 	.word	0x08025b28

0802154c <vsnprintf>:
	return strBuf.curLen;
}
/*-----------------------------------------------------------*/

int vsnprintf( char *apBuf, size_t aMaxLen, const char *apFmt, va_list args )
{
 802154c:	b580      	push	{r7, lr}
 802154e:	b08c      	sub	sp, #48	@ 0x30
 8021550:	af00      	add	r7, sp, #0
 8021552:	60f8      	str	r0, [r7, #12]
 8021554:	60b9      	str	r1, [r7, #8]
 8021556:	607a      	str	r2, [r7, #4]
 8021558:	603b      	str	r3, [r7, #0]
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 802155a:	68fa      	ldr	r2, [r7, #12]
 802155c:	68bb      	ldr	r3, [r7, #8]
 802155e:	441a      	add	r2, r3
 8021560:	f107 0310 	add.w	r3, r7, #16
 8021564:	68f9      	ldr	r1, [r7, #12]
 8021566:	4618      	mov	r0, r3
 8021568:	f7ff fbb9 	bl	8020cde <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 802156c:	f107 0310 	add.w	r3, r7, #16
 8021570:	683a      	ldr	r2, [r7, #0]
 8021572:	6879      	ldr	r1, [r7, #4]
 8021574:	4618      	mov	r0, r3
 8021576:	f7ff fe4f 	bl	8021218 <tiny_print>

	return strBuf.curLen;
 802157a:	69fb      	ldr	r3, [r7, #28]
}
 802157c:	4618      	mov	r0, r3
 802157e:	3730      	adds	r7, #48	@ 0x30
 8021580:	46bd      	mov	sp, r7
 8021582:	bd80      	pop	{r7, pc}

08021584 <snprintf>:
/*-----------------------------------------------------------*/

int snprintf( char *apBuf, size_t aMaxLen, const char *apFmt, ... )
{
 8021584:	b40c      	push	{r2, r3}
 8021586:	b580      	push	{r7, lr}
 8021588:	b08c      	sub	sp, #48	@ 0x30
 802158a:	af00      	add	r7, sp, #0
 802158c:	6078      	str	r0, [r7, #4]
 802158e:	6039      	str	r1, [r7, #0]
	va_list args;

	va_start( args,  apFmt );
 8021590:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8021594:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 8021596:	687a      	ldr	r2, [r7, #4]
 8021598:	683b      	ldr	r3, [r7, #0]
 802159a:	441a      	add	r2, r3
 802159c:	f107 030c 	add.w	r3, r7, #12
 80215a0:	6879      	ldr	r1, [r7, #4]
 80215a2:	4618      	mov	r0, r3
 80215a4:	f7ff fb9b 	bl	8020cde <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 80215a8:	f107 030c 	add.w	r3, r7, #12
 80215ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80215ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80215b0:	4618      	mov	r0, r3
 80215b2:	f7ff fe31 	bl	8021218 <tiny_print>
	va_end( args );

	return strBuf.curLen;
 80215b6:	69bb      	ldr	r3, [r7, #24]
}
 80215b8:	4618      	mov	r0, r3
 80215ba:	3730      	adds	r7, #48	@ 0x30
 80215bc:	46bd      	mov	sp, r7
 80215be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80215c2:	b002      	add	sp, #8
 80215c4:	4770      	bx	lr

080215c6 <sprintf>:
/*-----------------------------------------------------------*/

int sprintf( char *apBuf, const char *apFmt, ... )
{
 80215c6:	b40e      	push	{r1, r2, r3}
 80215c8:	b580      	push	{r7, lr}
 80215ca:	b08d      	sub	sp, #52	@ 0x34
 80215cc:	af00      	add	r7, sp, #0
 80215ce:	6078      	str	r0, [r7, #4]
	va_list args;

	va_start( args,  apFmt );
 80215d0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80215d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char * )apBuf + 1024 );
 80215d6:	687b      	ldr	r3, [r7, #4]
 80215d8:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 80215dc:	f107 030c 	add.w	r3, r7, #12
 80215e0:	6879      	ldr	r1, [r7, #4]
 80215e2:	4618      	mov	r0, r3
 80215e4:	f7ff fb7b 	bl	8020cde <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 80215e8:	f107 030c 	add.w	r3, r7, #12
 80215ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80215ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80215f0:	4618      	mov	r0, r3
 80215f2:	f7ff fe11 	bl	8021218 <tiny_print>
	va_end( args );

	return strBuf.curLen;
 80215f6:	69bb      	ldr	r3, [r7, #24]
}
 80215f8:	4618      	mov	r0, r3
 80215fa:	3734      	adds	r7, #52	@ 0x34
 80215fc:	46bd      	mov	sp, r7
 80215fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8021602:	b003      	add	sp, #12
 8021604:	4770      	bx	lr
	...

08021608 <rand>:
 8021608:	4b16      	ldr	r3, [pc, #88]	@ (8021664 <rand+0x5c>)
 802160a:	b510      	push	{r4, lr}
 802160c:	681c      	ldr	r4, [r3, #0]
 802160e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8021610:	b9b3      	cbnz	r3, 8021640 <rand+0x38>
 8021612:	2018      	movs	r0, #24
 8021614:	f000 fa70 	bl	8021af8 <malloc>
 8021618:	4602      	mov	r2, r0
 802161a:	6320      	str	r0, [r4, #48]	@ 0x30
 802161c:	b920      	cbnz	r0, 8021628 <rand+0x20>
 802161e:	4b12      	ldr	r3, [pc, #72]	@ (8021668 <rand+0x60>)
 8021620:	4812      	ldr	r0, [pc, #72]	@ (802166c <rand+0x64>)
 8021622:	2152      	movs	r1, #82	@ 0x52
 8021624:	f000 fa00 	bl	8021a28 <__assert_func>
 8021628:	4911      	ldr	r1, [pc, #68]	@ (8021670 <rand+0x68>)
 802162a:	4b12      	ldr	r3, [pc, #72]	@ (8021674 <rand+0x6c>)
 802162c:	e9c0 1300 	strd	r1, r3, [r0]
 8021630:	4b11      	ldr	r3, [pc, #68]	@ (8021678 <rand+0x70>)
 8021632:	6083      	str	r3, [r0, #8]
 8021634:	230b      	movs	r3, #11
 8021636:	8183      	strh	r3, [r0, #12]
 8021638:	2100      	movs	r1, #0
 802163a:	2001      	movs	r0, #1
 802163c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8021640:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8021642:	480e      	ldr	r0, [pc, #56]	@ (802167c <rand+0x74>)
 8021644:	690b      	ldr	r3, [r1, #16]
 8021646:	694c      	ldr	r4, [r1, #20]
 8021648:	4a0d      	ldr	r2, [pc, #52]	@ (8021680 <rand+0x78>)
 802164a:	4358      	muls	r0, r3
 802164c:	fb02 0004 	mla	r0, r2, r4, r0
 8021650:	fba3 3202 	umull	r3, r2, r3, r2
 8021654:	3301      	adds	r3, #1
 8021656:	eb40 0002 	adc.w	r0, r0, r2
 802165a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 802165e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8021662:	bd10      	pop	{r4, pc}
 8021664:	20000038 	.word	0x20000038
 8021668:	08025ce8 	.word	0x08025ce8
 802166c:	08025cff 	.word	0x08025cff
 8021670:	abcd330e 	.word	0xabcd330e
 8021674:	e66d1234 	.word	0xe66d1234
 8021678:	0005deec 	.word	0x0005deec
 802167c:	5851f42d 	.word	0x5851f42d
 8021680:	4c957f2d 	.word	0x4c957f2d

08021684 <std>:
 8021684:	2300      	movs	r3, #0
 8021686:	b510      	push	{r4, lr}
 8021688:	4604      	mov	r4, r0
 802168a:	e9c0 3300 	strd	r3, r3, [r0]
 802168e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021692:	6083      	str	r3, [r0, #8]
 8021694:	8181      	strh	r1, [r0, #12]
 8021696:	6643      	str	r3, [r0, #100]	@ 0x64
 8021698:	81c2      	strh	r2, [r0, #14]
 802169a:	6183      	str	r3, [r0, #24]
 802169c:	4619      	mov	r1, r3
 802169e:	2208      	movs	r2, #8
 80216a0:	305c      	adds	r0, #92	@ 0x5c
 80216a2:	f7ff fa6c 	bl	8020b7e <memset>
 80216a6:	4b0d      	ldr	r3, [pc, #52]	@ (80216dc <std+0x58>)
 80216a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80216aa:	4b0d      	ldr	r3, [pc, #52]	@ (80216e0 <std+0x5c>)
 80216ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80216ae:	4b0d      	ldr	r3, [pc, #52]	@ (80216e4 <std+0x60>)
 80216b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80216b2:	4b0d      	ldr	r3, [pc, #52]	@ (80216e8 <std+0x64>)
 80216b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80216b6:	4b0d      	ldr	r3, [pc, #52]	@ (80216ec <std+0x68>)
 80216b8:	6224      	str	r4, [r4, #32]
 80216ba:	429c      	cmp	r4, r3
 80216bc:	d006      	beq.n	80216cc <std+0x48>
 80216be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80216c2:	4294      	cmp	r4, r2
 80216c4:	d002      	beq.n	80216cc <std+0x48>
 80216c6:	33d0      	adds	r3, #208	@ 0xd0
 80216c8:	429c      	cmp	r4, r3
 80216ca:	d105      	bne.n	80216d8 <std+0x54>
 80216cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80216d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80216d4:	f000 b9a4 	b.w	8021a20 <__retarget_lock_init_recursive>
 80216d8:	bd10      	pop	{r4, pc}
 80216da:	bf00      	nop
 80216dc:	08021809 	.word	0x08021809
 80216e0:	0802182b 	.word	0x0802182b
 80216e4:	08021863 	.word	0x08021863
 80216e8:	08021887 	.word	0x08021887
 80216ec:	200023e4 	.word	0x200023e4

080216f0 <stdio_exit_handler>:
 80216f0:	4a02      	ldr	r2, [pc, #8]	@ (80216fc <stdio_exit_handler+0xc>)
 80216f2:	4903      	ldr	r1, [pc, #12]	@ (8021700 <stdio_exit_handler+0x10>)
 80216f4:	4803      	ldr	r0, [pc, #12]	@ (8021704 <stdio_exit_handler+0x14>)
 80216f6:	f000 b869 	b.w	80217cc <_fwalk_sglue>
 80216fa:	bf00      	nop
 80216fc:	2000002c 	.word	0x2000002c
 8021700:	08021d6d 	.word	0x08021d6d
 8021704:	2000003c 	.word	0x2000003c

08021708 <cleanup_stdio>:
 8021708:	6841      	ldr	r1, [r0, #4]
 802170a:	4b0c      	ldr	r3, [pc, #48]	@ (802173c <cleanup_stdio+0x34>)
 802170c:	4299      	cmp	r1, r3
 802170e:	b510      	push	{r4, lr}
 8021710:	4604      	mov	r4, r0
 8021712:	d001      	beq.n	8021718 <cleanup_stdio+0x10>
 8021714:	f000 fb2a 	bl	8021d6c <_fflush_r>
 8021718:	68a1      	ldr	r1, [r4, #8]
 802171a:	4b09      	ldr	r3, [pc, #36]	@ (8021740 <cleanup_stdio+0x38>)
 802171c:	4299      	cmp	r1, r3
 802171e:	d002      	beq.n	8021726 <cleanup_stdio+0x1e>
 8021720:	4620      	mov	r0, r4
 8021722:	f000 fb23 	bl	8021d6c <_fflush_r>
 8021726:	68e1      	ldr	r1, [r4, #12]
 8021728:	4b06      	ldr	r3, [pc, #24]	@ (8021744 <cleanup_stdio+0x3c>)
 802172a:	4299      	cmp	r1, r3
 802172c:	d004      	beq.n	8021738 <cleanup_stdio+0x30>
 802172e:	4620      	mov	r0, r4
 8021730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021734:	f000 bb1a 	b.w	8021d6c <_fflush_r>
 8021738:	bd10      	pop	{r4, pc}
 802173a:	bf00      	nop
 802173c:	200023e4 	.word	0x200023e4
 8021740:	2000244c 	.word	0x2000244c
 8021744:	200024b4 	.word	0x200024b4

08021748 <global_stdio_init.part.0>:
 8021748:	b510      	push	{r4, lr}
 802174a:	4b0b      	ldr	r3, [pc, #44]	@ (8021778 <global_stdio_init.part.0+0x30>)
 802174c:	4c0b      	ldr	r4, [pc, #44]	@ (802177c <global_stdio_init.part.0+0x34>)
 802174e:	4a0c      	ldr	r2, [pc, #48]	@ (8021780 <global_stdio_init.part.0+0x38>)
 8021750:	601a      	str	r2, [r3, #0]
 8021752:	4620      	mov	r0, r4
 8021754:	2200      	movs	r2, #0
 8021756:	2104      	movs	r1, #4
 8021758:	f7ff ff94 	bl	8021684 <std>
 802175c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8021760:	2201      	movs	r2, #1
 8021762:	2109      	movs	r1, #9
 8021764:	f7ff ff8e 	bl	8021684 <std>
 8021768:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802176c:	2202      	movs	r2, #2
 802176e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021772:	2112      	movs	r1, #18
 8021774:	f7ff bf86 	b.w	8021684 <std>
 8021778:	2000251c 	.word	0x2000251c
 802177c:	200023e4 	.word	0x200023e4
 8021780:	080216f1 	.word	0x080216f1

08021784 <__sfp_lock_acquire>:
 8021784:	4801      	ldr	r0, [pc, #4]	@ (802178c <__sfp_lock_acquire+0x8>)
 8021786:	f000 b94c 	b.w	8021a22 <__retarget_lock_acquire_recursive>
 802178a:	bf00      	nop
 802178c:	20002525 	.word	0x20002525

08021790 <__sfp_lock_release>:
 8021790:	4801      	ldr	r0, [pc, #4]	@ (8021798 <__sfp_lock_release+0x8>)
 8021792:	f000 b947 	b.w	8021a24 <__retarget_lock_release_recursive>
 8021796:	bf00      	nop
 8021798:	20002525 	.word	0x20002525

0802179c <__sinit>:
 802179c:	b510      	push	{r4, lr}
 802179e:	4604      	mov	r4, r0
 80217a0:	f7ff fff0 	bl	8021784 <__sfp_lock_acquire>
 80217a4:	6a23      	ldr	r3, [r4, #32]
 80217a6:	b11b      	cbz	r3, 80217b0 <__sinit+0x14>
 80217a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80217ac:	f7ff bff0 	b.w	8021790 <__sfp_lock_release>
 80217b0:	4b04      	ldr	r3, [pc, #16]	@ (80217c4 <__sinit+0x28>)
 80217b2:	6223      	str	r3, [r4, #32]
 80217b4:	4b04      	ldr	r3, [pc, #16]	@ (80217c8 <__sinit+0x2c>)
 80217b6:	681b      	ldr	r3, [r3, #0]
 80217b8:	2b00      	cmp	r3, #0
 80217ba:	d1f5      	bne.n	80217a8 <__sinit+0xc>
 80217bc:	f7ff ffc4 	bl	8021748 <global_stdio_init.part.0>
 80217c0:	e7f2      	b.n	80217a8 <__sinit+0xc>
 80217c2:	bf00      	nop
 80217c4:	08021709 	.word	0x08021709
 80217c8:	2000251c 	.word	0x2000251c

080217cc <_fwalk_sglue>:
 80217cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80217d0:	4607      	mov	r7, r0
 80217d2:	4688      	mov	r8, r1
 80217d4:	4614      	mov	r4, r2
 80217d6:	2600      	movs	r6, #0
 80217d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80217dc:	f1b9 0901 	subs.w	r9, r9, #1
 80217e0:	d505      	bpl.n	80217ee <_fwalk_sglue+0x22>
 80217e2:	6824      	ldr	r4, [r4, #0]
 80217e4:	2c00      	cmp	r4, #0
 80217e6:	d1f7      	bne.n	80217d8 <_fwalk_sglue+0xc>
 80217e8:	4630      	mov	r0, r6
 80217ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80217ee:	89ab      	ldrh	r3, [r5, #12]
 80217f0:	2b01      	cmp	r3, #1
 80217f2:	d907      	bls.n	8021804 <_fwalk_sglue+0x38>
 80217f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80217f8:	3301      	adds	r3, #1
 80217fa:	d003      	beq.n	8021804 <_fwalk_sglue+0x38>
 80217fc:	4629      	mov	r1, r5
 80217fe:	4638      	mov	r0, r7
 8021800:	47c0      	blx	r8
 8021802:	4306      	orrs	r6, r0
 8021804:	3568      	adds	r5, #104	@ 0x68
 8021806:	e7e9      	b.n	80217dc <_fwalk_sglue+0x10>

08021808 <__sread>:
 8021808:	b510      	push	{r4, lr}
 802180a:	460c      	mov	r4, r1
 802180c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021810:	f000 f8b8 	bl	8021984 <_read_r>
 8021814:	2800      	cmp	r0, #0
 8021816:	bfab      	itete	ge
 8021818:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802181a:	89a3      	ldrhlt	r3, [r4, #12]
 802181c:	181b      	addge	r3, r3, r0
 802181e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8021822:	bfac      	ite	ge
 8021824:	6563      	strge	r3, [r4, #84]	@ 0x54
 8021826:	81a3      	strhlt	r3, [r4, #12]
 8021828:	bd10      	pop	{r4, pc}

0802182a <__swrite>:
 802182a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802182e:	461f      	mov	r7, r3
 8021830:	898b      	ldrh	r3, [r1, #12]
 8021832:	05db      	lsls	r3, r3, #23
 8021834:	4605      	mov	r5, r0
 8021836:	460c      	mov	r4, r1
 8021838:	4616      	mov	r6, r2
 802183a:	d505      	bpl.n	8021848 <__swrite+0x1e>
 802183c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021840:	2302      	movs	r3, #2
 8021842:	2200      	movs	r2, #0
 8021844:	f000 f88c 	bl	8021960 <_lseek_r>
 8021848:	89a3      	ldrh	r3, [r4, #12]
 802184a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802184e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8021852:	81a3      	strh	r3, [r4, #12]
 8021854:	4632      	mov	r2, r6
 8021856:	463b      	mov	r3, r7
 8021858:	4628      	mov	r0, r5
 802185a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802185e:	f000 b8a3 	b.w	80219a8 <_write_r>

08021862 <__sseek>:
 8021862:	b510      	push	{r4, lr}
 8021864:	460c      	mov	r4, r1
 8021866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802186a:	f000 f879 	bl	8021960 <_lseek_r>
 802186e:	1c43      	adds	r3, r0, #1
 8021870:	89a3      	ldrh	r3, [r4, #12]
 8021872:	bf15      	itete	ne
 8021874:	6560      	strne	r0, [r4, #84]	@ 0x54
 8021876:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802187a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802187e:	81a3      	strheq	r3, [r4, #12]
 8021880:	bf18      	it	ne
 8021882:	81a3      	strhne	r3, [r4, #12]
 8021884:	bd10      	pop	{r4, pc}

08021886 <__sclose>:
 8021886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802188a:	f000 b859 	b.w	8021940 <_close_r>

0802188e <memcmp>:
 802188e:	b510      	push	{r4, lr}
 8021890:	3901      	subs	r1, #1
 8021892:	4402      	add	r2, r0
 8021894:	4290      	cmp	r0, r2
 8021896:	d101      	bne.n	802189c <memcmp+0xe>
 8021898:	2000      	movs	r0, #0
 802189a:	e005      	b.n	80218a8 <memcmp+0x1a>
 802189c:	7803      	ldrb	r3, [r0, #0]
 802189e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80218a2:	42a3      	cmp	r3, r4
 80218a4:	d001      	beq.n	80218aa <memcmp+0x1c>
 80218a6:	1b18      	subs	r0, r3, r4
 80218a8:	bd10      	pop	{r4, pc}
 80218aa:	3001      	adds	r0, #1
 80218ac:	e7f2      	b.n	8021894 <memcmp+0x6>

080218ae <memmove>:
 80218ae:	4288      	cmp	r0, r1
 80218b0:	b510      	push	{r4, lr}
 80218b2:	eb01 0402 	add.w	r4, r1, r2
 80218b6:	d902      	bls.n	80218be <memmove+0x10>
 80218b8:	4284      	cmp	r4, r0
 80218ba:	4623      	mov	r3, r4
 80218bc:	d807      	bhi.n	80218ce <memmove+0x20>
 80218be:	1e43      	subs	r3, r0, #1
 80218c0:	42a1      	cmp	r1, r4
 80218c2:	d008      	beq.n	80218d6 <memmove+0x28>
 80218c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80218c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80218cc:	e7f8      	b.n	80218c0 <memmove+0x12>
 80218ce:	4402      	add	r2, r0
 80218d0:	4601      	mov	r1, r0
 80218d2:	428a      	cmp	r2, r1
 80218d4:	d100      	bne.n	80218d8 <memmove+0x2a>
 80218d6:	bd10      	pop	{r4, pc}
 80218d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80218dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80218e0:	e7f7      	b.n	80218d2 <memmove+0x24>
	...

080218e4 <strcasecmp>:
 80218e4:	b530      	push	{r4, r5, lr}
 80218e6:	4d0b      	ldr	r5, [pc, #44]	@ (8021914 <strcasecmp+0x30>)
 80218e8:	4604      	mov	r4, r0
 80218ea:	f814 3b01 	ldrb.w	r3, [r4], #1
 80218ee:	5cea      	ldrb	r2, [r5, r3]
 80218f0:	f002 0203 	and.w	r2, r2, #3
 80218f4:	2a01      	cmp	r2, #1
 80218f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80218fa:	5ca8      	ldrb	r0, [r5, r2]
 80218fc:	f000 0003 	and.w	r0, r0, #3
 8021900:	bf08      	it	eq
 8021902:	3320      	addeq	r3, #32
 8021904:	2801      	cmp	r0, #1
 8021906:	bf08      	it	eq
 8021908:	3220      	addeq	r2, #32
 802190a:	1a98      	subs	r0, r3, r2
 802190c:	d101      	bne.n	8021912 <strcasecmp+0x2e>
 802190e:	2a00      	cmp	r2, #0
 8021910:	d1eb      	bne.n	80218ea <strcasecmp+0x6>
 8021912:	bd30      	pop	{r4, r5, pc}
 8021914:	08025d94 	.word	0x08025d94

08021918 <strncpy>:
 8021918:	b510      	push	{r4, lr}
 802191a:	3901      	subs	r1, #1
 802191c:	4603      	mov	r3, r0
 802191e:	b132      	cbz	r2, 802192e <strncpy+0x16>
 8021920:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8021924:	f803 4b01 	strb.w	r4, [r3], #1
 8021928:	3a01      	subs	r2, #1
 802192a:	2c00      	cmp	r4, #0
 802192c:	d1f7      	bne.n	802191e <strncpy+0x6>
 802192e:	441a      	add	r2, r3
 8021930:	2100      	movs	r1, #0
 8021932:	4293      	cmp	r3, r2
 8021934:	d100      	bne.n	8021938 <strncpy+0x20>
 8021936:	bd10      	pop	{r4, pc}
 8021938:	f803 1b01 	strb.w	r1, [r3], #1
 802193c:	e7f9      	b.n	8021932 <strncpy+0x1a>
	...

08021940 <_close_r>:
 8021940:	b538      	push	{r3, r4, r5, lr}
 8021942:	4d06      	ldr	r5, [pc, #24]	@ (802195c <_close_r+0x1c>)
 8021944:	2300      	movs	r3, #0
 8021946:	4604      	mov	r4, r0
 8021948:	4608      	mov	r0, r1
 802194a:	602b      	str	r3, [r5, #0]
 802194c:	f7e0 fa78 	bl	8001e40 <_close>
 8021950:	1c43      	adds	r3, r0, #1
 8021952:	d102      	bne.n	802195a <_close_r+0x1a>
 8021954:	682b      	ldr	r3, [r5, #0]
 8021956:	b103      	cbz	r3, 802195a <_close_r+0x1a>
 8021958:	6023      	str	r3, [r4, #0]
 802195a:	bd38      	pop	{r3, r4, r5, pc}
 802195c:	20002520 	.word	0x20002520

08021960 <_lseek_r>:
 8021960:	b538      	push	{r3, r4, r5, lr}
 8021962:	4d07      	ldr	r5, [pc, #28]	@ (8021980 <_lseek_r+0x20>)
 8021964:	4604      	mov	r4, r0
 8021966:	4608      	mov	r0, r1
 8021968:	4611      	mov	r1, r2
 802196a:	2200      	movs	r2, #0
 802196c:	602a      	str	r2, [r5, #0]
 802196e:	461a      	mov	r2, r3
 8021970:	f7e0 fa8d 	bl	8001e8e <_lseek>
 8021974:	1c43      	adds	r3, r0, #1
 8021976:	d102      	bne.n	802197e <_lseek_r+0x1e>
 8021978:	682b      	ldr	r3, [r5, #0]
 802197a:	b103      	cbz	r3, 802197e <_lseek_r+0x1e>
 802197c:	6023      	str	r3, [r4, #0]
 802197e:	bd38      	pop	{r3, r4, r5, pc}
 8021980:	20002520 	.word	0x20002520

08021984 <_read_r>:
 8021984:	b538      	push	{r3, r4, r5, lr}
 8021986:	4d07      	ldr	r5, [pc, #28]	@ (80219a4 <_read_r+0x20>)
 8021988:	4604      	mov	r4, r0
 802198a:	4608      	mov	r0, r1
 802198c:	4611      	mov	r1, r2
 802198e:	2200      	movs	r2, #0
 8021990:	602a      	str	r2, [r5, #0]
 8021992:	461a      	mov	r2, r3
 8021994:	f7e0 fa1b 	bl	8001dce <_read>
 8021998:	1c43      	adds	r3, r0, #1
 802199a:	d102      	bne.n	80219a2 <_read_r+0x1e>
 802199c:	682b      	ldr	r3, [r5, #0]
 802199e:	b103      	cbz	r3, 80219a2 <_read_r+0x1e>
 80219a0:	6023      	str	r3, [r4, #0]
 80219a2:	bd38      	pop	{r3, r4, r5, pc}
 80219a4:	20002520 	.word	0x20002520

080219a8 <_write_r>:
 80219a8:	b538      	push	{r3, r4, r5, lr}
 80219aa:	4d07      	ldr	r5, [pc, #28]	@ (80219c8 <_write_r+0x20>)
 80219ac:	4604      	mov	r4, r0
 80219ae:	4608      	mov	r0, r1
 80219b0:	4611      	mov	r1, r2
 80219b2:	2200      	movs	r2, #0
 80219b4:	602a      	str	r2, [r5, #0]
 80219b6:	461a      	mov	r2, r3
 80219b8:	f7e0 fa26 	bl	8001e08 <_write>
 80219bc:	1c43      	adds	r3, r0, #1
 80219be:	d102      	bne.n	80219c6 <_write_r+0x1e>
 80219c0:	682b      	ldr	r3, [r5, #0]
 80219c2:	b103      	cbz	r3, 80219c6 <_write_r+0x1e>
 80219c4:	6023      	str	r3, [r4, #0]
 80219c6:	bd38      	pop	{r3, r4, r5, pc}
 80219c8:	20002520 	.word	0x20002520

080219cc <__errno>:
 80219cc:	4b01      	ldr	r3, [pc, #4]	@ (80219d4 <__errno+0x8>)
 80219ce:	6818      	ldr	r0, [r3, #0]
 80219d0:	4770      	bx	lr
 80219d2:	bf00      	nop
 80219d4:	20000038 	.word	0x20000038

080219d8 <__libc_init_array>:
 80219d8:	b570      	push	{r4, r5, r6, lr}
 80219da:	4d0d      	ldr	r5, [pc, #52]	@ (8021a10 <__libc_init_array+0x38>)
 80219dc:	4c0d      	ldr	r4, [pc, #52]	@ (8021a14 <__libc_init_array+0x3c>)
 80219de:	1b64      	subs	r4, r4, r5
 80219e0:	10a4      	asrs	r4, r4, #2
 80219e2:	2600      	movs	r6, #0
 80219e4:	42a6      	cmp	r6, r4
 80219e6:	d109      	bne.n	80219fc <__libc_init_array+0x24>
 80219e8:	4d0b      	ldr	r5, [pc, #44]	@ (8021a18 <__libc_init_array+0x40>)
 80219ea:	4c0c      	ldr	r4, [pc, #48]	@ (8021a1c <__libc_init_array+0x44>)
 80219ec:	f000 fe3a 	bl	8022664 <_init>
 80219f0:	1b64      	subs	r4, r4, r5
 80219f2:	10a4      	asrs	r4, r4, #2
 80219f4:	2600      	movs	r6, #0
 80219f6:	42a6      	cmp	r6, r4
 80219f8:	d105      	bne.n	8021a06 <__libc_init_array+0x2e>
 80219fa:	bd70      	pop	{r4, r5, r6, pc}
 80219fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8021a00:	4798      	blx	r3
 8021a02:	3601      	adds	r6, #1
 8021a04:	e7ee      	b.n	80219e4 <__libc_init_array+0xc>
 8021a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8021a0a:	4798      	blx	r3
 8021a0c:	3601      	adds	r6, #1
 8021a0e:	e7f2      	b.n	80219f6 <__libc_init_array+0x1e>
 8021a10:	08025ed0 	.word	0x08025ed0
 8021a14:	08025ed0 	.word	0x08025ed0
 8021a18:	08025ed0 	.word	0x08025ed0
 8021a1c:	08025ed4 	.word	0x08025ed4

08021a20 <__retarget_lock_init_recursive>:
 8021a20:	4770      	bx	lr

08021a22 <__retarget_lock_acquire_recursive>:
 8021a22:	4770      	bx	lr

08021a24 <__retarget_lock_release_recursive>:
 8021a24:	4770      	bx	lr
	...

08021a28 <__assert_func>:
 8021a28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021a2a:	4614      	mov	r4, r2
 8021a2c:	461a      	mov	r2, r3
 8021a2e:	4b09      	ldr	r3, [pc, #36]	@ (8021a54 <__assert_func+0x2c>)
 8021a30:	681b      	ldr	r3, [r3, #0]
 8021a32:	4605      	mov	r5, r0
 8021a34:	68d8      	ldr	r0, [r3, #12]
 8021a36:	b954      	cbnz	r4, 8021a4e <__assert_func+0x26>
 8021a38:	4b07      	ldr	r3, [pc, #28]	@ (8021a58 <__assert_func+0x30>)
 8021a3a:	461c      	mov	r4, r3
 8021a3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021a40:	9100      	str	r1, [sp, #0]
 8021a42:	462b      	mov	r3, r5
 8021a44:	4905      	ldr	r1, [pc, #20]	@ (8021a5c <__assert_func+0x34>)
 8021a46:	f000 f9b9 	bl	8021dbc <fiprintf>
 8021a4a:	f000 f9d9 	bl	8021e00 <abort>
 8021a4e:	4b04      	ldr	r3, [pc, #16]	@ (8021a60 <__assert_func+0x38>)
 8021a50:	e7f4      	b.n	8021a3c <__assert_func+0x14>
 8021a52:	bf00      	nop
 8021a54:	20000038 	.word	0x20000038
 8021a58:	08025d92 	.word	0x08025d92
 8021a5c:	08025d64 	.word	0x08025d64
 8021a60:	08025d57 	.word	0x08025d57

08021a64 <_free_r>:
 8021a64:	b538      	push	{r3, r4, r5, lr}
 8021a66:	4605      	mov	r5, r0
 8021a68:	2900      	cmp	r1, #0
 8021a6a:	d041      	beq.n	8021af0 <_free_r+0x8c>
 8021a6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021a70:	1f0c      	subs	r4, r1, #4
 8021a72:	2b00      	cmp	r3, #0
 8021a74:	bfb8      	it	lt
 8021a76:	18e4      	addlt	r4, r4, r3
 8021a78:	f000 f8e8 	bl	8021c4c <__malloc_lock>
 8021a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8021af4 <_free_r+0x90>)
 8021a7e:	6813      	ldr	r3, [r2, #0]
 8021a80:	b933      	cbnz	r3, 8021a90 <_free_r+0x2c>
 8021a82:	6063      	str	r3, [r4, #4]
 8021a84:	6014      	str	r4, [r2, #0]
 8021a86:	4628      	mov	r0, r5
 8021a88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021a8c:	f000 b8e4 	b.w	8021c58 <__malloc_unlock>
 8021a90:	42a3      	cmp	r3, r4
 8021a92:	d908      	bls.n	8021aa6 <_free_r+0x42>
 8021a94:	6820      	ldr	r0, [r4, #0]
 8021a96:	1821      	adds	r1, r4, r0
 8021a98:	428b      	cmp	r3, r1
 8021a9a:	bf01      	itttt	eq
 8021a9c:	6819      	ldreq	r1, [r3, #0]
 8021a9e:	685b      	ldreq	r3, [r3, #4]
 8021aa0:	1809      	addeq	r1, r1, r0
 8021aa2:	6021      	streq	r1, [r4, #0]
 8021aa4:	e7ed      	b.n	8021a82 <_free_r+0x1e>
 8021aa6:	461a      	mov	r2, r3
 8021aa8:	685b      	ldr	r3, [r3, #4]
 8021aaa:	b10b      	cbz	r3, 8021ab0 <_free_r+0x4c>
 8021aac:	42a3      	cmp	r3, r4
 8021aae:	d9fa      	bls.n	8021aa6 <_free_r+0x42>
 8021ab0:	6811      	ldr	r1, [r2, #0]
 8021ab2:	1850      	adds	r0, r2, r1
 8021ab4:	42a0      	cmp	r0, r4
 8021ab6:	d10b      	bne.n	8021ad0 <_free_r+0x6c>
 8021ab8:	6820      	ldr	r0, [r4, #0]
 8021aba:	4401      	add	r1, r0
 8021abc:	1850      	adds	r0, r2, r1
 8021abe:	4283      	cmp	r3, r0
 8021ac0:	6011      	str	r1, [r2, #0]
 8021ac2:	d1e0      	bne.n	8021a86 <_free_r+0x22>
 8021ac4:	6818      	ldr	r0, [r3, #0]
 8021ac6:	685b      	ldr	r3, [r3, #4]
 8021ac8:	6053      	str	r3, [r2, #4]
 8021aca:	4408      	add	r0, r1
 8021acc:	6010      	str	r0, [r2, #0]
 8021ace:	e7da      	b.n	8021a86 <_free_r+0x22>
 8021ad0:	d902      	bls.n	8021ad8 <_free_r+0x74>
 8021ad2:	230c      	movs	r3, #12
 8021ad4:	602b      	str	r3, [r5, #0]
 8021ad6:	e7d6      	b.n	8021a86 <_free_r+0x22>
 8021ad8:	6820      	ldr	r0, [r4, #0]
 8021ada:	1821      	adds	r1, r4, r0
 8021adc:	428b      	cmp	r3, r1
 8021ade:	bf04      	itt	eq
 8021ae0:	6819      	ldreq	r1, [r3, #0]
 8021ae2:	685b      	ldreq	r3, [r3, #4]
 8021ae4:	6063      	str	r3, [r4, #4]
 8021ae6:	bf04      	itt	eq
 8021ae8:	1809      	addeq	r1, r1, r0
 8021aea:	6021      	streq	r1, [r4, #0]
 8021aec:	6054      	str	r4, [r2, #4]
 8021aee:	e7ca      	b.n	8021a86 <_free_r+0x22>
 8021af0:	bd38      	pop	{r3, r4, r5, pc}
 8021af2:	bf00      	nop
 8021af4:	2000252c 	.word	0x2000252c

08021af8 <malloc>:
 8021af8:	4b02      	ldr	r3, [pc, #8]	@ (8021b04 <malloc+0xc>)
 8021afa:	4601      	mov	r1, r0
 8021afc:	6818      	ldr	r0, [r3, #0]
 8021afe:	f000 b825 	b.w	8021b4c <_malloc_r>
 8021b02:	bf00      	nop
 8021b04:	20000038 	.word	0x20000038

08021b08 <sbrk_aligned>:
 8021b08:	b570      	push	{r4, r5, r6, lr}
 8021b0a:	4e0f      	ldr	r6, [pc, #60]	@ (8021b48 <sbrk_aligned+0x40>)
 8021b0c:	460c      	mov	r4, r1
 8021b0e:	6831      	ldr	r1, [r6, #0]
 8021b10:	4605      	mov	r5, r0
 8021b12:	b911      	cbnz	r1, 8021b1a <sbrk_aligned+0x12>
 8021b14:	f000 f964 	bl	8021de0 <_sbrk_r>
 8021b18:	6030      	str	r0, [r6, #0]
 8021b1a:	4621      	mov	r1, r4
 8021b1c:	4628      	mov	r0, r5
 8021b1e:	f000 f95f 	bl	8021de0 <_sbrk_r>
 8021b22:	1c43      	adds	r3, r0, #1
 8021b24:	d103      	bne.n	8021b2e <sbrk_aligned+0x26>
 8021b26:	f04f 34ff 	mov.w	r4, #4294967295
 8021b2a:	4620      	mov	r0, r4
 8021b2c:	bd70      	pop	{r4, r5, r6, pc}
 8021b2e:	1cc4      	adds	r4, r0, #3
 8021b30:	f024 0403 	bic.w	r4, r4, #3
 8021b34:	42a0      	cmp	r0, r4
 8021b36:	d0f8      	beq.n	8021b2a <sbrk_aligned+0x22>
 8021b38:	1a21      	subs	r1, r4, r0
 8021b3a:	4628      	mov	r0, r5
 8021b3c:	f000 f950 	bl	8021de0 <_sbrk_r>
 8021b40:	3001      	adds	r0, #1
 8021b42:	d1f2      	bne.n	8021b2a <sbrk_aligned+0x22>
 8021b44:	e7ef      	b.n	8021b26 <sbrk_aligned+0x1e>
 8021b46:	bf00      	nop
 8021b48:	20002528 	.word	0x20002528

08021b4c <_malloc_r>:
 8021b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021b50:	1ccd      	adds	r5, r1, #3
 8021b52:	f025 0503 	bic.w	r5, r5, #3
 8021b56:	3508      	adds	r5, #8
 8021b58:	2d0c      	cmp	r5, #12
 8021b5a:	bf38      	it	cc
 8021b5c:	250c      	movcc	r5, #12
 8021b5e:	2d00      	cmp	r5, #0
 8021b60:	4606      	mov	r6, r0
 8021b62:	db01      	blt.n	8021b68 <_malloc_r+0x1c>
 8021b64:	42a9      	cmp	r1, r5
 8021b66:	d904      	bls.n	8021b72 <_malloc_r+0x26>
 8021b68:	230c      	movs	r3, #12
 8021b6a:	6033      	str	r3, [r6, #0]
 8021b6c:	2000      	movs	r0, #0
 8021b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021b72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8021c48 <_malloc_r+0xfc>
 8021b76:	f000 f869 	bl	8021c4c <__malloc_lock>
 8021b7a:	f8d8 3000 	ldr.w	r3, [r8]
 8021b7e:	461c      	mov	r4, r3
 8021b80:	bb44      	cbnz	r4, 8021bd4 <_malloc_r+0x88>
 8021b82:	4629      	mov	r1, r5
 8021b84:	4630      	mov	r0, r6
 8021b86:	f7ff ffbf 	bl	8021b08 <sbrk_aligned>
 8021b8a:	1c43      	adds	r3, r0, #1
 8021b8c:	4604      	mov	r4, r0
 8021b8e:	d158      	bne.n	8021c42 <_malloc_r+0xf6>
 8021b90:	f8d8 4000 	ldr.w	r4, [r8]
 8021b94:	4627      	mov	r7, r4
 8021b96:	2f00      	cmp	r7, #0
 8021b98:	d143      	bne.n	8021c22 <_malloc_r+0xd6>
 8021b9a:	2c00      	cmp	r4, #0
 8021b9c:	d04b      	beq.n	8021c36 <_malloc_r+0xea>
 8021b9e:	6823      	ldr	r3, [r4, #0]
 8021ba0:	4639      	mov	r1, r7
 8021ba2:	4630      	mov	r0, r6
 8021ba4:	eb04 0903 	add.w	r9, r4, r3
 8021ba8:	f000 f91a 	bl	8021de0 <_sbrk_r>
 8021bac:	4581      	cmp	r9, r0
 8021bae:	d142      	bne.n	8021c36 <_malloc_r+0xea>
 8021bb0:	6821      	ldr	r1, [r4, #0]
 8021bb2:	1a6d      	subs	r5, r5, r1
 8021bb4:	4629      	mov	r1, r5
 8021bb6:	4630      	mov	r0, r6
 8021bb8:	f7ff ffa6 	bl	8021b08 <sbrk_aligned>
 8021bbc:	3001      	adds	r0, #1
 8021bbe:	d03a      	beq.n	8021c36 <_malloc_r+0xea>
 8021bc0:	6823      	ldr	r3, [r4, #0]
 8021bc2:	442b      	add	r3, r5
 8021bc4:	6023      	str	r3, [r4, #0]
 8021bc6:	f8d8 3000 	ldr.w	r3, [r8]
 8021bca:	685a      	ldr	r2, [r3, #4]
 8021bcc:	bb62      	cbnz	r2, 8021c28 <_malloc_r+0xdc>
 8021bce:	f8c8 7000 	str.w	r7, [r8]
 8021bd2:	e00f      	b.n	8021bf4 <_malloc_r+0xa8>
 8021bd4:	6822      	ldr	r2, [r4, #0]
 8021bd6:	1b52      	subs	r2, r2, r5
 8021bd8:	d420      	bmi.n	8021c1c <_malloc_r+0xd0>
 8021bda:	2a0b      	cmp	r2, #11
 8021bdc:	d917      	bls.n	8021c0e <_malloc_r+0xc2>
 8021bde:	1961      	adds	r1, r4, r5
 8021be0:	42a3      	cmp	r3, r4
 8021be2:	6025      	str	r5, [r4, #0]
 8021be4:	bf18      	it	ne
 8021be6:	6059      	strne	r1, [r3, #4]
 8021be8:	6863      	ldr	r3, [r4, #4]
 8021bea:	bf08      	it	eq
 8021bec:	f8c8 1000 	streq.w	r1, [r8]
 8021bf0:	5162      	str	r2, [r4, r5]
 8021bf2:	604b      	str	r3, [r1, #4]
 8021bf4:	4630      	mov	r0, r6
 8021bf6:	f000 f82f 	bl	8021c58 <__malloc_unlock>
 8021bfa:	f104 000b 	add.w	r0, r4, #11
 8021bfe:	1d23      	adds	r3, r4, #4
 8021c00:	f020 0007 	bic.w	r0, r0, #7
 8021c04:	1ac2      	subs	r2, r0, r3
 8021c06:	bf1c      	itt	ne
 8021c08:	1a1b      	subne	r3, r3, r0
 8021c0a:	50a3      	strne	r3, [r4, r2]
 8021c0c:	e7af      	b.n	8021b6e <_malloc_r+0x22>
 8021c0e:	6862      	ldr	r2, [r4, #4]
 8021c10:	42a3      	cmp	r3, r4
 8021c12:	bf0c      	ite	eq
 8021c14:	f8c8 2000 	streq.w	r2, [r8]
 8021c18:	605a      	strne	r2, [r3, #4]
 8021c1a:	e7eb      	b.n	8021bf4 <_malloc_r+0xa8>
 8021c1c:	4623      	mov	r3, r4
 8021c1e:	6864      	ldr	r4, [r4, #4]
 8021c20:	e7ae      	b.n	8021b80 <_malloc_r+0x34>
 8021c22:	463c      	mov	r4, r7
 8021c24:	687f      	ldr	r7, [r7, #4]
 8021c26:	e7b6      	b.n	8021b96 <_malloc_r+0x4a>
 8021c28:	461a      	mov	r2, r3
 8021c2a:	685b      	ldr	r3, [r3, #4]
 8021c2c:	42a3      	cmp	r3, r4
 8021c2e:	d1fb      	bne.n	8021c28 <_malloc_r+0xdc>
 8021c30:	2300      	movs	r3, #0
 8021c32:	6053      	str	r3, [r2, #4]
 8021c34:	e7de      	b.n	8021bf4 <_malloc_r+0xa8>
 8021c36:	230c      	movs	r3, #12
 8021c38:	6033      	str	r3, [r6, #0]
 8021c3a:	4630      	mov	r0, r6
 8021c3c:	f000 f80c 	bl	8021c58 <__malloc_unlock>
 8021c40:	e794      	b.n	8021b6c <_malloc_r+0x20>
 8021c42:	6005      	str	r5, [r0, #0]
 8021c44:	e7d6      	b.n	8021bf4 <_malloc_r+0xa8>
 8021c46:	bf00      	nop
 8021c48:	2000252c 	.word	0x2000252c

08021c4c <__malloc_lock>:
 8021c4c:	4801      	ldr	r0, [pc, #4]	@ (8021c54 <__malloc_lock+0x8>)
 8021c4e:	f7ff bee8 	b.w	8021a22 <__retarget_lock_acquire_recursive>
 8021c52:	bf00      	nop
 8021c54:	20002524 	.word	0x20002524

08021c58 <__malloc_unlock>:
 8021c58:	4801      	ldr	r0, [pc, #4]	@ (8021c60 <__malloc_unlock+0x8>)
 8021c5a:	f7ff bee3 	b.w	8021a24 <__retarget_lock_release_recursive>
 8021c5e:	bf00      	nop
 8021c60:	20002524 	.word	0x20002524

08021c64 <__sflush_r>:
 8021c64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8021c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021c6c:	0716      	lsls	r6, r2, #28
 8021c6e:	4605      	mov	r5, r0
 8021c70:	460c      	mov	r4, r1
 8021c72:	d454      	bmi.n	8021d1e <__sflush_r+0xba>
 8021c74:	684b      	ldr	r3, [r1, #4]
 8021c76:	2b00      	cmp	r3, #0
 8021c78:	dc02      	bgt.n	8021c80 <__sflush_r+0x1c>
 8021c7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8021c7c:	2b00      	cmp	r3, #0
 8021c7e:	dd48      	ble.n	8021d12 <__sflush_r+0xae>
 8021c80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021c82:	2e00      	cmp	r6, #0
 8021c84:	d045      	beq.n	8021d12 <__sflush_r+0xae>
 8021c86:	2300      	movs	r3, #0
 8021c88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8021c8c:	682f      	ldr	r7, [r5, #0]
 8021c8e:	6a21      	ldr	r1, [r4, #32]
 8021c90:	602b      	str	r3, [r5, #0]
 8021c92:	d030      	beq.n	8021cf6 <__sflush_r+0x92>
 8021c94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8021c96:	89a3      	ldrh	r3, [r4, #12]
 8021c98:	0759      	lsls	r1, r3, #29
 8021c9a:	d505      	bpl.n	8021ca8 <__sflush_r+0x44>
 8021c9c:	6863      	ldr	r3, [r4, #4]
 8021c9e:	1ad2      	subs	r2, r2, r3
 8021ca0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8021ca2:	b10b      	cbz	r3, 8021ca8 <__sflush_r+0x44>
 8021ca4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8021ca6:	1ad2      	subs	r2, r2, r3
 8021ca8:	2300      	movs	r3, #0
 8021caa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021cac:	6a21      	ldr	r1, [r4, #32]
 8021cae:	4628      	mov	r0, r5
 8021cb0:	47b0      	blx	r6
 8021cb2:	1c43      	adds	r3, r0, #1
 8021cb4:	89a3      	ldrh	r3, [r4, #12]
 8021cb6:	d106      	bne.n	8021cc6 <__sflush_r+0x62>
 8021cb8:	6829      	ldr	r1, [r5, #0]
 8021cba:	291d      	cmp	r1, #29
 8021cbc:	d82b      	bhi.n	8021d16 <__sflush_r+0xb2>
 8021cbe:	4a2a      	ldr	r2, [pc, #168]	@ (8021d68 <__sflush_r+0x104>)
 8021cc0:	410a      	asrs	r2, r1
 8021cc2:	07d6      	lsls	r6, r2, #31
 8021cc4:	d427      	bmi.n	8021d16 <__sflush_r+0xb2>
 8021cc6:	2200      	movs	r2, #0
 8021cc8:	6062      	str	r2, [r4, #4]
 8021cca:	04d9      	lsls	r1, r3, #19
 8021ccc:	6922      	ldr	r2, [r4, #16]
 8021cce:	6022      	str	r2, [r4, #0]
 8021cd0:	d504      	bpl.n	8021cdc <__sflush_r+0x78>
 8021cd2:	1c42      	adds	r2, r0, #1
 8021cd4:	d101      	bne.n	8021cda <__sflush_r+0x76>
 8021cd6:	682b      	ldr	r3, [r5, #0]
 8021cd8:	b903      	cbnz	r3, 8021cdc <__sflush_r+0x78>
 8021cda:	6560      	str	r0, [r4, #84]	@ 0x54
 8021cdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021cde:	602f      	str	r7, [r5, #0]
 8021ce0:	b1b9      	cbz	r1, 8021d12 <__sflush_r+0xae>
 8021ce2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021ce6:	4299      	cmp	r1, r3
 8021ce8:	d002      	beq.n	8021cf0 <__sflush_r+0x8c>
 8021cea:	4628      	mov	r0, r5
 8021cec:	f7ff feba 	bl	8021a64 <_free_r>
 8021cf0:	2300      	movs	r3, #0
 8021cf2:	6363      	str	r3, [r4, #52]	@ 0x34
 8021cf4:	e00d      	b.n	8021d12 <__sflush_r+0xae>
 8021cf6:	2301      	movs	r3, #1
 8021cf8:	4628      	mov	r0, r5
 8021cfa:	47b0      	blx	r6
 8021cfc:	4602      	mov	r2, r0
 8021cfe:	1c50      	adds	r0, r2, #1
 8021d00:	d1c9      	bne.n	8021c96 <__sflush_r+0x32>
 8021d02:	682b      	ldr	r3, [r5, #0]
 8021d04:	2b00      	cmp	r3, #0
 8021d06:	d0c6      	beq.n	8021c96 <__sflush_r+0x32>
 8021d08:	2b1d      	cmp	r3, #29
 8021d0a:	d001      	beq.n	8021d10 <__sflush_r+0xac>
 8021d0c:	2b16      	cmp	r3, #22
 8021d0e:	d11e      	bne.n	8021d4e <__sflush_r+0xea>
 8021d10:	602f      	str	r7, [r5, #0]
 8021d12:	2000      	movs	r0, #0
 8021d14:	e022      	b.n	8021d5c <__sflush_r+0xf8>
 8021d16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021d1a:	b21b      	sxth	r3, r3
 8021d1c:	e01b      	b.n	8021d56 <__sflush_r+0xf2>
 8021d1e:	690f      	ldr	r7, [r1, #16]
 8021d20:	2f00      	cmp	r7, #0
 8021d22:	d0f6      	beq.n	8021d12 <__sflush_r+0xae>
 8021d24:	0793      	lsls	r3, r2, #30
 8021d26:	680e      	ldr	r6, [r1, #0]
 8021d28:	bf08      	it	eq
 8021d2a:	694b      	ldreq	r3, [r1, #20]
 8021d2c:	600f      	str	r7, [r1, #0]
 8021d2e:	bf18      	it	ne
 8021d30:	2300      	movne	r3, #0
 8021d32:	eba6 0807 	sub.w	r8, r6, r7
 8021d36:	608b      	str	r3, [r1, #8]
 8021d38:	f1b8 0f00 	cmp.w	r8, #0
 8021d3c:	dde9      	ble.n	8021d12 <__sflush_r+0xae>
 8021d3e:	6a21      	ldr	r1, [r4, #32]
 8021d40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8021d42:	4643      	mov	r3, r8
 8021d44:	463a      	mov	r2, r7
 8021d46:	4628      	mov	r0, r5
 8021d48:	47b0      	blx	r6
 8021d4a:	2800      	cmp	r0, #0
 8021d4c:	dc08      	bgt.n	8021d60 <__sflush_r+0xfc>
 8021d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021d52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021d56:	81a3      	strh	r3, [r4, #12]
 8021d58:	f04f 30ff 	mov.w	r0, #4294967295
 8021d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021d60:	4407      	add	r7, r0
 8021d62:	eba8 0800 	sub.w	r8, r8, r0
 8021d66:	e7e7      	b.n	8021d38 <__sflush_r+0xd4>
 8021d68:	dfbffffe 	.word	0xdfbffffe

08021d6c <_fflush_r>:
 8021d6c:	b538      	push	{r3, r4, r5, lr}
 8021d6e:	690b      	ldr	r3, [r1, #16]
 8021d70:	4605      	mov	r5, r0
 8021d72:	460c      	mov	r4, r1
 8021d74:	b913      	cbnz	r3, 8021d7c <_fflush_r+0x10>
 8021d76:	2500      	movs	r5, #0
 8021d78:	4628      	mov	r0, r5
 8021d7a:	bd38      	pop	{r3, r4, r5, pc}
 8021d7c:	b118      	cbz	r0, 8021d86 <_fflush_r+0x1a>
 8021d7e:	6a03      	ldr	r3, [r0, #32]
 8021d80:	b90b      	cbnz	r3, 8021d86 <_fflush_r+0x1a>
 8021d82:	f7ff fd0b 	bl	802179c <__sinit>
 8021d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021d8a:	2b00      	cmp	r3, #0
 8021d8c:	d0f3      	beq.n	8021d76 <_fflush_r+0xa>
 8021d8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8021d90:	07d0      	lsls	r0, r2, #31
 8021d92:	d404      	bmi.n	8021d9e <_fflush_r+0x32>
 8021d94:	0599      	lsls	r1, r3, #22
 8021d96:	d402      	bmi.n	8021d9e <_fflush_r+0x32>
 8021d98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021d9a:	f7ff fe42 	bl	8021a22 <__retarget_lock_acquire_recursive>
 8021d9e:	4628      	mov	r0, r5
 8021da0:	4621      	mov	r1, r4
 8021da2:	f7ff ff5f 	bl	8021c64 <__sflush_r>
 8021da6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021da8:	07da      	lsls	r2, r3, #31
 8021daa:	4605      	mov	r5, r0
 8021dac:	d4e4      	bmi.n	8021d78 <_fflush_r+0xc>
 8021dae:	89a3      	ldrh	r3, [r4, #12]
 8021db0:	059b      	lsls	r3, r3, #22
 8021db2:	d4e1      	bmi.n	8021d78 <_fflush_r+0xc>
 8021db4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021db6:	f7ff fe35 	bl	8021a24 <__retarget_lock_release_recursive>
 8021dba:	e7dd      	b.n	8021d78 <_fflush_r+0xc>

08021dbc <fiprintf>:
 8021dbc:	b40e      	push	{r1, r2, r3}
 8021dbe:	b503      	push	{r0, r1, lr}
 8021dc0:	4601      	mov	r1, r0
 8021dc2:	ab03      	add	r3, sp, #12
 8021dc4:	4805      	ldr	r0, [pc, #20]	@ (8021ddc <fiprintf+0x20>)
 8021dc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8021dca:	6800      	ldr	r0, [r0, #0]
 8021dcc:	9301      	str	r3, [sp, #4]
 8021dce:	f000 f847 	bl	8021e60 <_vfiprintf_r>
 8021dd2:	b002      	add	sp, #8
 8021dd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8021dd8:	b003      	add	sp, #12
 8021dda:	4770      	bx	lr
 8021ddc:	20000038 	.word	0x20000038

08021de0 <_sbrk_r>:
 8021de0:	b538      	push	{r3, r4, r5, lr}
 8021de2:	4d06      	ldr	r5, [pc, #24]	@ (8021dfc <_sbrk_r+0x1c>)
 8021de4:	2300      	movs	r3, #0
 8021de6:	4604      	mov	r4, r0
 8021de8:	4608      	mov	r0, r1
 8021dea:	602b      	str	r3, [r5, #0]
 8021dec:	f7e0 f85c 	bl	8001ea8 <_sbrk>
 8021df0:	1c43      	adds	r3, r0, #1
 8021df2:	d102      	bne.n	8021dfa <_sbrk_r+0x1a>
 8021df4:	682b      	ldr	r3, [r5, #0]
 8021df6:	b103      	cbz	r3, 8021dfa <_sbrk_r+0x1a>
 8021df8:	6023      	str	r3, [r4, #0]
 8021dfa:	bd38      	pop	{r3, r4, r5, pc}
 8021dfc:	20002520 	.word	0x20002520

08021e00 <abort>:
 8021e00:	b508      	push	{r3, lr}
 8021e02:	2006      	movs	r0, #6
 8021e04:	f000 fb8e 	bl	8022524 <raise>
 8021e08:	2001      	movs	r0, #1
 8021e0a:	f7df ffd5 	bl	8001db8 <_exit>

08021e0e <__sfputc_r>:
 8021e0e:	6893      	ldr	r3, [r2, #8]
 8021e10:	3b01      	subs	r3, #1
 8021e12:	2b00      	cmp	r3, #0
 8021e14:	b410      	push	{r4}
 8021e16:	6093      	str	r3, [r2, #8]
 8021e18:	da08      	bge.n	8021e2c <__sfputc_r+0x1e>
 8021e1a:	6994      	ldr	r4, [r2, #24]
 8021e1c:	42a3      	cmp	r3, r4
 8021e1e:	db01      	blt.n	8021e24 <__sfputc_r+0x16>
 8021e20:	290a      	cmp	r1, #10
 8021e22:	d103      	bne.n	8021e2c <__sfputc_r+0x1e>
 8021e24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021e28:	f000 bac0 	b.w	80223ac <__swbuf_r>
 8021e2c:	6813      	ldr	r3, [r2, #0]
 8021e2e:	1c58      	adds	r0, r3, #1
 8021e30:	6010      	str	r0, [r2, #0]
 8021e32:	7019      	strb	r1, [r3, #0]
 8021e34:	4608      	mov	r0, r1
 8021e36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021e3a:	4770      	bx	lr

08021e3c <__sfputs_r>:
 8021e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021e3e:	4606      	mov	r6, r0
 8021e40:	460f      	mov	r7, r1
 8021e42:	4614      	mov	r4, r2
 8021e44:	18d5      	adds	r5, r2, r3
 8021e46:	42ac      	cmp	r4, r5
 8021e48:	d101      	bne.n	8021e4e <__sfputs_r+0x12>
 8021e4a:	2000      	movs	r0, #0
 8021e4c:	e007      	b.n	8021e5e <__sfputs_r+0x22>
 8021e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021e52:	463a      	mov	r2, r7
 8021e54:	4630      	mov	r0, r6
 8021e56:	f7ff ffda 	bl	8021e0e <__sfputc_r>
 8021e5a:	1c43      	adds	r3, r0, #1
 8021e5c:	d1f3      	bne.n	8021e46 <__sfputs_r+0xa>
 8021e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08021e60 <_vfiprintf_r>:
 8021e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e64:	460d      	mov	r5, r1
 8021e66:	b09d      	sub	sp, #116	@ 0x74
 8021e68:	4614      	mov	r4, r2
 8021e6a:	4698      	mov	r8, r3
 8021e6c:	4606      	mov	r6, r0
 8021e6e:	b118      	cbz	r0, 8021e78 <_vfiprintf_r+0x18>
 8021e70:	6a03      	ldr	r3, [r0, #32]
 8021e72:	b90b      	cbnz	r3, 8021e78 <_vfiprintf_r+0x18>
 8021e74:	f7ff fc92 	bl	802179c <__sinit>
 8021e78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021e7a:	07d9      	lsls	r1, r3, #31
 8021e7c:	d405      	bmi.n	8021e8a <_vfiprintf_r+0x2a>
 8021e7e:	89ab      	ldrh	r3, [r5, #12]
 8021e80:	059a      	lsls	r2, r3, #22
 8021e82:	d402      	bmi.n	8021e8a <_vfiprintf_r+0x2a>
 8021e84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021e86:	f7ff fdcc 	bl	8021a22 <__retarget_lock_acquire_recursive>
 8021e8a:	89ab      	ldrh	r3, [r5, #12]
 8021e8c:	071b      	lsls	r3, r3, #28
 8021e8e:	d501      	bpl.n	8021e94 <_vfiprintf_r+0x34>
 8021e90:	692b      	ldr	r3, [r5, #16]
 8021e92:	b99b      	cbnz	r3, 8021ebc <_vfiprintf_r+0x5c>
 8021e94:	4629      	mov	r1, r5
 8021e96:	4630      	mov	r0, r6
 8021e98:	f000 fac6 	bl	8022428 <__swsetup_r>
 8021e9c:	b170      	cbz	r0, 8021ebc <_vfiprintf_r+0x5c>
 8021e9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021ea0:	07dc      	lsls	r4, r3, #31
 8021ea2:	d504      	bpl.n	8021eae <_vfiprintf_r+0x4e>
 8021ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8021ea8:	b01d      	add	sp, #116	@ 0x74
 8021eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021eae:	89ab      	ldrh	r3, [r5, #12]
 8021eb0:	0598      	lsls	r0, r3, #22
 8021eb2:	d4f7      	bmi.n	8021ea4 <_vfiprintf_r+0x44>
 8021eb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021eb6:	f7ff fdb5 	bl	8021a24 <__retarget_lock_release_recursive>
 8021eba:	e7f3      	b.n	8021ea4 <_vfiprintf_r+0x44>
 8021ebc:	2300      	movs	r3, #0
 8021ebe:	9309      	str	r3, [sp, #36]	@ 0x24
 8021ec0:	2320      	movs	r3, #32
 8021ec2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8021ec6:	f8cd 800c 	str.w	r8, [sp, #12]
 8021eca:	2330      	movs	r3, #48	@ 0x30
 8021ecc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802207c <_vfiprintf_r+0x21c>
 8021ed0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8021ed4:	f04f 0901 	mov.w	r9, #1
 8021ed8:	4623      	mov	r3, r4
 8021eda:	469a      	mov	sl, r3
 8021edc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021ee0:	b10a      	cbz	r2, 8021ee6 <_vfiprintf_r+0x86>
 8021ee2:	2a25      	cmp	r2, #37	@ 0x25
 8021ee4:	d1f9      	bne.n	8021eda <_vfiprintf_r+0x7a>
 8021ee6:	ebba 0b04 	subs.w	fp, sl, r4
 8021eea:	d00b      	beq.n	8021f04 <_vfiprintf_r+0xa4>
 8021eec:	465b      	mov	r3, fp
 8021eee:	4622      	mov	r2, r4
 8021ef0:	4629      	mov	r1, r5
 8021ef2:	4630      	mov	r0, r6
 8021ef4:	f7ff ffa2 	bl	8021e3c <__sfputs_r>
 8021ef8:	3001      	adds	r0, #1
 8021efa:	f000 80a7 	beq.w	802204c <_vfiprintf_r+0x1ec>
 8021efe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021f00:	445a      	add	r2, fp
 8021f02:	9209      	str	r2, [sp, #36]	@ 0x24
 8021f04:	f89a 3000 	ldrb.w	r3, [sl]
 8021f08:	2b00      	cmp	r3, #0
 8021f0a:	f000 809f 	beq.w	802204c <_vfiprintf_r+0x1ec>
 8021f0e:	2300      	movs	r3, #0
 8021f10:	f04f 32ff 	mov.w	r2, #4294967295
 8021f14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021f18:	f10a 0a01 	add.w	sl, sl, #1
 8021f1c:	9304      	str	r3, [sp, #16]
 8021f1e:	9307      	str	r3, [sp, #28]
 8021f20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021f24:	931a      	str	r3, [sp, #104]	@ 0x68
 8021f26:	4654      	mov	r4, sl
 8021f28:	2205      	movs	r2, #5
 8021f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021f2e:	4853      	ldr	r0, [pc, #332]	@ (802207c <_vfiprintf_r+0x21c>)
 8021f30:	f7de f9ee 	bl	8000310 <memchr>
 8021f34:	9a04      	ldr	r2, [sp, #16]
 8021f36:	b9d8      	cbnz	r0, 8021f70 <_vfiprintf_r+0x110>
 8021f38:	06d1      	lsls	r1, r2, #27
 8021f3a:	bf44      	itt	mi
 8021f3c:	2320      	movmi	r3, #32
 8021f3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021f42:	0713      	lsls	r3, r2, #28
 8021f44:	bf44      	itt	mi
 8021f46:	232b      	movmi	r3, #43	@ 0x2b
 8021f48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021f4c:	f89a 3000 	ldrb.w	r3, [sl]
 8021f50:	2b2a      	cmp	r3, #42	@ 0x2a
 8021f52:	d015      	beq.n	8021f80 <_vfiprintf_r+0x120>
 8021f54:	9a07      	ldr	r2, [sp, #28]
 8021f56:	4654      	mov	r4, sl
 8021f58:	2000      	movs	r0, #0
 8021f5a:	f04f 0c0a 	mov.w	ip, #10
 8021f5e:	4621      	mov	r1, r4
 8021f60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021f64:	3b30      	subs	r3, #48	@ 0x30
 8021f66:	2b09      	cmp	r3, #9
 8021f68:	d94b      	bls.n	8022002 <_vfiprintf_r+0x1a2>
 8021f6a:	b1b0      	cbz	r0, 8021f9a <_vfiprintf_r+0x13a>
 8021f6c:	9207      	str	r2, [sp, #28]
 8021f6e:	e014      	b.n	8021f9a <_vfiprintf_r+0x13a>
 8021f70:	eba0 0308 	sub.w	r3, r0, r8
 8021f74:	fa09 f303 	lsl.w	r3, r9, r3
 8021f78:	4313      	orrs	r3, r2
 8021f7a:	9304      	str	r3, [sp, #16]
 8021f7c:	46a2      	mov	sl, r4
 8021f7e:	e7d2      	b.n	8021f26 <_vfiprintf_r+0xc6>
 8021f80:	9b03      	ldr	r3, [sp, #12]
 8021f82:	1d19      	adds	r1, r3, #4
 8021f84:	681b      	ldr	r3, [r3, #0]
 8021f86:	9103      	str	r1, [sp, #12]
 8021f88:	2b00      	cmp	r3, #0
 8021f8a:	bfbb      	ittet	lt
 8021f8c:	425b      	neglt	r3, r3
 8021f8e:	f042 0202 	orrlt.w	r2, r2, #2
 8021f92:	9307      	strge	r3, [sp, #28]
 8021f94:	9307      	strlt	r3, [sp, #28]
 8021f96:	bfb8      	it	lt
 8021f98:	9204      	strlt	r2, [sp, #16]
 8021f9a:	7823      	ldrb	r3, [r4, #0]
 8021f9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8021f9e:	d10a      	bne.n	8021fb6 <_vfiprintf_r+0x156>
 8021fa0:	7863      	ldrb	r3, [r4, #1]
 8021fa2:	2b2a      	cmp	r3, #42	@ 0x2a
 8021fa4:	d132      	bne.n	802200c <_vfiprintf_r+0x1ac>
 8021fa6:	9b03      	ldr	r3, [sp, #12]
 8021fa8:	1d1a      	adds	r2, r3, #4
 8021faa:	681b      	ldr	r3, [r3, #0]
 8021fac:	9203      	str	r2, [sp, #12]
 8021fae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8021fb2:	3402      	adds	r4, #2
 8021fb4:	9305      	str	r3, [sp, #20]
 8021fb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802208c <_vfiprintf_r+0x22c>
 8021fba:	7821      	ldrb	r1, [r4, #0]
 8021fbc:	2203      	movs	r2, #3
 8021fbe:	4650      	mov	r0, sl
 8021fc0:	f7de f9a6 	bl	8000310 <memchr>
 8021fc4:	b138      	cbz	r0, 8021fd6 <_vfiprintf_r+0x176>
 8021fc6:	9b04      	ldr	r3, [sp, #16]
 8021fc8:	eba0 000a 	sub.w	r0, r0, sl
 8021fcc:	2240      	movs	r2, #64	@ 0x40
 8021fce:	4082      	lsls	r2, r0
 8021fd0:	4313      	orrs	r3, r2
 8021fd2:	3401      	adds	r4, #1
 8021fd4:	9304      	str	r3, [sp, #16]
 8021fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021fda:	4829      	ldr	r0, [pc, #164]	@ (8022080 <_vfiprintf_r+0x220>)
 8021fdc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8021fe0:	2206      	movs	r2, #6
 8021fe2:	f7de f995 	bl	8000310 <memchr>
 8021fe6:	2800      	cmp	r0, #0
 8021fe8:	d03f      	beq.n	802206a <_vfiprintf_r+0x20a>
 8021fea:	4b26      	ldr	r3, [pc, #152]	@ (8022084 <_vfiprintf_r+0x224>)
 8021fec:	bb1b      	cbnz	r3, 8022036 <_vfiprintf_r+0x1d6>
 8021fee:	9b03      	ldr	r3, [sp, #12]
 8021ff0:	3307      	adds	r3, #7
 8021ff2:	f023 0307 	bic.w	r3, r3, #7
 8021ff6:	3308      	adds	r3, #8
 8021ff8:	9303      	str	r3, [sp, #12]
 8021ffa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021ffc:	443b      	add	r3, r7
 8021ffe:	9309      	str	r3, [sp, #36]	@ 0x24
 8022000:	e76a      	b.n	8021ed8 <_vfiprintf_r+0x78>
 8022002:	fb0c 3202 	mla	r2, ip, r2, r3
 8022006:	460c      	mov	r4, r1
 8022008:	2001      	movs	r0, #1
 802200a:	e7a8      	b.n	8021f5e <_vfiprintf_r+0xfe>
 802200c:	2300      	movs	r3, #0
 802200e:	3401      	adds	r4, #1
 8022010:	9305      	str	r3, [sp, #20]
 8022012:	4619      	mov	r1, r3
 8022014:	f04f 0c0a 	mov.w	ip, #10
 8022018:	4620      	mov	r0, r4
 802201a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802201e:	3a30      	subs	r2, #48	@ 0x30
 8022020:	2a09      	cmp	r2, #9
 8022022:	d903      	bls.n	802202c <_vfiprintf_r+0x1cc>
 8022024:	2b00      	cmp	r3, #0
 8022026:	d0c6      	beq.n	8021fb6 <_vfiprintf_r+0x156>
 8022028:	9105      	str	r1, [sp, #20]
 802202a:	e7c4      	b.n	8021fb6 <_vfiprintf_r+0x156>
 802202c:	fb0c 2101 	mla	r1, ip, r1, r2
 8022030:	4604      	mov	r4, r0
 8022032:	2301      	movs	r3, #1
 8022034:	e7f0      	b.n	8022018 <_vfiprintf_r+0x1b8>
 8022036:	ab03      	add	r3, sp, #12
 8022038:	9300      	str	r3, [sp, #0]
 802203a:	462a      	mov	r2, r5
 802203c:	4b12      	ldr	r3, [pc, #72]	@ (8022088 <_vfiprintf_r+0x228>)
 802203e:	a904      	add	r1, sp, #16
 8022040:	4630      	mov	r0, r6
 8022042:	f3af 8000 	nop.w
 8022046:	4607      	mov	r7, r0
 8022048:	1c78      	adds	r0, r7, #1
 802204a:	d1d6      	bne.n	8021ffa <_vfiprintf_r+0x19a>
 802204c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802204e:	07d9      	lsls	r1, r3, #31
 8022050:	d405      	bmi.n	802205e <_vfiprintf_r+0x1fe>
 8022052:	89ab      	ldrh	r3, [r5, #12]
 8022054:	059a      	lsls	r2, r3, #22
 8022056:	d402      	bmi.n	802205e <_vfiprintf_r+0x1fe>
 8022058:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802205a:	f7ff fce3 	bl	8021a24 <__retarget_lock_release_recursive>
 802205e:	89ab      	ldrh	r3, [r5, #12]
 8022060:	065b      	lsls	r3, r3, #25
 8022062:	f53f af1f 	bmi.w	8021ea4 <_vfiprintf_r+0x44>
 8022066:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022068:	e71e      	b.n	8021ea8 <_vfiprintf_r+0x48>
 802206a:	ab03      	add	r3, sp, #12
 802206c:	9300      	str	r3, [sp, #0]
 802206e:	462a      	mov	r2, r5
 8022070:	4b05      	ldr	r3, [pc, #20]	@ (8022088 <_vfiprintf_r+0x228>)
 8022072:	a904      	add	r1, sp, #16
 8022074:	4630      	mov	r0, r6
 8022076:	f000 f879 	bl	802216c <_printf_i>
 802207a:	e7e4      	b.n	8022046 <_vfiprintf_r+0x1e6>
 802207c:	08025e94 	.word	0x08025e94
 8022080:	08025e9e 	.word	0x08025e9e
 8022084:	00000000 	.word	0x00000000
 8022088:	08021e3d 	.word	0x08021e3d
 802208c:	08025e9a 	.word	0x08025e9a

08022090 <_printf_common>:
 8022090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022094:	4616      	mov	r6, r2
 8022096:	4698      	mov	r8, r3
 8022098:	688a      	ldr	r2, [r1, #8]
 802209a:	690b      	ldr	r3, [r1, #16]
 802209c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80220a0:	4293      	cmp	r3, r2
 80220a2:	bfb8      	it	lt
 80220a4:	4613      	movlt	r3, r2
 80220a6:	6033      	str	r3, [r6, #0]
 80220a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80220ac:	4607      	mov	r7, r0
 80220ae:	460c      	mov	r4, r1
 80220b0:	b10a      	cbz	r2, 80220b6 <_printf_common+0x26>
 80220b2:	3301      	adds	r3, #1
 80220b4:	6033      	str	r3, [r6, #0]
 80220b6:	6823      	ldr	r3, [r4, #0]
 80220b8:	0699      	lsls	r1, r3, #26
 80220ba:	bf42      	ittt	mi
 80220bc:	6833      	ldrmi	r3, [r6, #0]
 80220be:	3302      	addmi	r3, #2
 80220c0:	6033      	strmi	r3, [r6, #0]
 80220c2:	6825      	ldr	r5, [r4, #0]
 80220c4:	f015 0506 	ands.w	r5, r5, #6
 80220c8:	d106      	bne.n	80220d8 <_printf_common+0x48>
 80220ca:	f104 0a19 	add.w	sl, r4, #25
 80220ce:	68e3      	ldr	r3, [r4, #12]
 80220d0:	6832      	ldr	r2, [r6, #0]
 80220d2:	1a9b      	subs	r3, r3, r2
 80220d4:	42ab      	cmp	r3, r5
 80220d6:	dc26      	bgt.n	8022126 <_printf_common+0x96>
 80220d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80220dc:	6822      	ldr	r2, [r4, #0]
 80220de:	3b00      	subs	r3, #0
 80220e0:	bf18      	it	ne
 80220e2:	2301      	movne	r3, #1
 80220e4:	0692      	lsls	r2, r2, #26
 80220e6:	d42b      	bmi.n	8022140 <_printf_common+0xb0>
 80220e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80220ec:	4641      	mov	r1, r8
 80220ee:	4638      	mov	r0, r7
 80220f0:	47c8      	blx	r9
 80220f2:	3001      	adds	r0, #1
 80220f4:	d01e      	beq.n	8022134 <_printf_common+0xa4>
 80220f6:	6823      	ldr	r3, [r4, #0]
 80220f8:	6922      	ldr	r2, [r4, #16]
 80220fa:	f003 0306 	and.w	r3, r3, #6
 80220fe:	2b04      	cmp	r3, #4
 8022100:	bf02      	ittt	eq
 8022102:	68e5      	ldreq	r5, [r4, #12]
 8022104:	6833      	ldreq	r3, [r6, #0]
 8022106:	1aed      	subeq	r5, r5, r3
 8022108:	68a3      	ldr	r3, [r4, #8]
 802210a:	bf0c      	ite	eq
 802210c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022110:	2500      	movne	r5, #0
 8022112:	4293      	cmp	r3, r2
 8022114:	bfc4      	itt	gt
 8022116:	1a9b      	subgt	r3, r3, r2
 8022118:	18ed      	addgt	r5, r5, r3
 802211a:	2600      	movs	r6, #0
 802211c:	341a      	adds	r4, #26
 802211e:	42b5      	cmp	r5, r6
 8022120:	d11a      	bne.n	8022158 <_printf_common+0xc8>
 8022122:	2000      	movs	r0, #0
 8022124:	e008      	b.n	8022138 <_printf_common+0xa8>
 8022126:	2301      	movs	r3, #1
 8022128:	4652      	mov	r2, sl
 802212a:	4641      	mov	r1, r8
 802212c:	4638      	mov	r0, r7
 802212e:	47c8      	blx	r9
 8022130:	3001      	adds	r0, #1
 8022132:	d103      	bne.n	802213c <_printf_common+0xac>
 8022134:	f04f 30ff 	mov.w	r0, #4294967295
 8022138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802213c:	3501      	adds	r5, #1
 802213e:	e7c6      	b.n	80220ce <_printf_common+0x3e>
 8022140:	18e1      	adds	r1, r4, r3
 8022142:	1c5a      	adds	r2, r3, #1
 8022144:	2030      	movs	r0, #48	@ 0x30
 8022146:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802214a:	4422      	add	r2, r4
 802214c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8022150:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8022154:	3302      	adds	r3, #2
 8022156:	e7c7      	b.n	80220e8 <_printf_common+0x58>
 8022158:	2301      	movs	r3, #1
 802215a:	4622      	mov	r2, r4
 802215c:	4641      	mov	r1, r8
 802215e:	4638      	mov	r0, r7
 8022160:	47c8      	blx	r9
 8022162:	3001      	adds	r0, #1
 8022164:	d0e6      	beq.n	8022134 <_printf_common+0xa4>
 8022166:	3601      	adds	r6, #1
 8022168:	e7d9      	b.n	802211e <_printf_common+0x8e>
	...

0802216c <_printf_i>:
 802216c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022170:	7e0f      	ldrb	r7, [r1, #24]
 8022172:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8022174:	2f78      	cmp	r7, #120	@ 0x78
 8022176:	4691      	mov	r9, r2
 8022178:	4680      	mov	r8, r0
 802217a:	460c      	mov	r4, r1
 802217c:	469a      	mov	sl, r3
 802217e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8022182:	d807      	bhi.n	8022194 <_printf_i+0x28>
 8022184:	2f62      	cmp	r7, #98	@ 0x62
 8022186:	d80a      	bhi.n	802219e <_printf_i+0x32>
 8022188:	2f00      	cmp	r7, #0
 802218a:	f000 80d2 	beq.w	8022332 <_printf_i+0x1c6>
 802218e:	2f58      	cmp	r7, #88	@ 0x58
 8022190:	f000 80b9 	beq.w	8022306 <_printf_i+0x19a>
 8022194:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022198:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802219c:	e03a      	b.n	8022214 <_printf_i+0xa8>
 802219e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80221a2:	2b15      	cmp	r3, #21
 80221a4:	d8f6      	bhi.n	8022194 <_printf_i+0x28>
 80221a6:	a101      	add	r1, pc, #4	@ (adr r1, 80221ac <_printf_i+0x40>)
 80221a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80221ac:	08022205 	.word	0x08022205
 80221b0:	08022219 	.word	0x08022219
 80221b4:	08022195 	.word	0x08022195
 80221b8:	08022195 	.word	0x08022195
 80221bc:	08022195 	.word	0x08022195
 80221c0:	08022195 	.word	0x08022195
 80221c4:	08022219 	.word	0x08022219
 80221c8:	08022195 	.word	0x08022195
 80221cc:	08022195 	.word	0x08022195
 80221d0:	08022195 	.word	0x08022195
 80221d4:	08022195 	.word	0x08022195
 80221d8:	08022319 	.word	0x08022319
 80221dc:	08022243 	.word	0x08022243
 80221e0:	080222d3 	.word	0x080222d3
 80221e4:	08022195 	.word	0x08022195
 80221e8:	08022195 	.word	0x08022195
 80221ec:	0802233b 	.word	0x0802233b
 80221f0:	08022195 	.word	0x08022195
 80221f4:	08022243 	.word	0x08022243
 80221f8:	08022195 	.word	0x08022195
 80221fc:	08022195 	.word	0x08022195
 8022200:	080222db 	.word	0x080222db
 8022204:	6833      	ldr	r3, [r6, #0]
 8022206:	1d1a      	adds	r2, r3, #4
 8022208:	681b      	ldr	r3, [r3, #0]
 802220a:	6032      	str	r2, [r6, #0]
 802220c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022210:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8022214:	2301      	movs	r3, #1
 8022216:	e09d      	b.n	8022354 <_printf_i+0x1e8>
 8022218:	6833      	ldr	r3, [r6, #0]
 802221a:	6820      	ldr	r0, [r4, #0]
 802221c:	1d19      	adds	r1, r3, #4
 802221e:	6031      	str	r1, [r6, #0]
 8022220:	0606      	lsls	r6, r0, #24
 8022222:	d501      	bpl.n	8022228 <_printf_i+0xbc>
 8022224:	681d      	ldr	r5, [r3, #0]
 8022226:	e003      	b.n	8022230 <_printf_i+0xc4>
 8022228:	0645      	lsls	r5, r0, #25
 802222a:	d5fb      	bpl.n	8022224 <_printf_i+0xb8>
 802222c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8022230:	2d00      	cmp	r5, #0
 8022232:	da03      	bge.n	802223c <_printf_i+0xd0>
 8022234:	232d      	movs	r3, #45	@ 0x2d
 8022236:	426d      	negs	r5, r5
 8022238:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802223c:	4859      	ldr	r0, [pc, #356]	@ (80223a4 <_printf_i+0x238>)
 802223e:	230a      	movs	r3, #10
 8022240:	e011      	b.n	8022266 <_printf_i+0xfa>
 8022242:	6821      	ldr	r1, [r4, #0]
 8022244:	6833      	ldr	r3, [r6, #0]
 8022246:	0608      	lsls	r0, r1, #24
 8022248:	f853 5b04 	ldr.w	r5, [r3], #4
 802224c:	d402      	bmi.n	8022254 <_printf_i+0xe8>
 802224e:	0649      	lsls	r1, r1, #25
 8022250:	bf48      	it	mi
 8022252:	b2ad      	uxthmi	r5, r5
 8022254:	2f6f      	cmp	r7, #111	@ 0x6f
 8022256:	4853      	ldr	r0, [pc, #332]	@ (80223a4 <_printf_i+0x238>)
 8022258:	6033      	str	r3, [r6, #0]
 802225a:	bf14      	ite	ne
 802225c:	230a      	movne	r3, #10
 802225e:	2308      	moveq	r3, #8
 8022260:	2100      	movs	r1, #0
 8022262:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8022266:	6866      	ldr	r6, [r4, #4]
 8022268:	60a6      	str	r6, [r4, #8]
 802226a:	2e00      	cmp	r6, #0
 802226c:	bfa2      	ittt	ge
 802226e:	6821      	ldrge	r1, [r4, #0]
 8022270:	f021 0104 	bicge.w	r1, r1, #4
 8022274:	6021      	strge	r1, [r4, #0]
 8022276:	b90d      	cbnz	r5, 802227c <_printf_i+0x110>
 8022278:	2e00      	cmp	r6, #0
 802227a:	d04b      	beq.n	8022314 <_printf_i+0x1a8>
 802227c:	4616      	mov	r6, r2
 802227e:	fbb5 f1f3 	udiv	r1, r5, r3
 8022282:	fb03 5711 	mls	r7, r3, r1, r5
 8022286:	5dc7      	ldrb	r7, [r0, r7]
 8022288:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802228c:	462f      	mov	r7, r5
 802228e:	42bb      	cmp	r3, r7
 8022290:	460d      	mov	r5, r1
 8022292:	d9f4      	bls.n	802227e <_printf_i+0x112>
 8022294:	2b08      	cmp	r3, #8
 8022296:	d10b      	bne.n	80222b0 <_printf_i+0x144>
 8022298:	6823      	ldr	r3, [r4, #0]
 802229a:	07df      	lsls	r7, r3, #31
 802229c:	d508      	bpl.n	80222b0 <_printf_i+0x144>
 802229e:	6923      	ldr	r3, [r4, #16]
 80222a0:	6861      	ldr	r1, [r4, #4]
 80222a2:	4299      	cmp	r1, r3
 80222a4:	bfde      	ittt	le
 80222a6:	2330      	movle	r3, #48	@ 0x30
 80222a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80222ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80222b0:	1b92      	subs	r2, r2, r6
 80222b2:	6122      	str	r2, [r4, #16]
 80222b4:	f8cd a000 	str.w	sl, [sp]
 80222b8:	464b      	mov	r3, r9
 80222ba:	aa03      	add	r2, sp, #12
 80222bc:	4621      	mov	r1, r4
 80222be:	4640      	mov	r0, r8
 80222c0:	f7ff fee6 	bl	8022090 <_printf_common>
 80222c4:	3001      	adds	r0, #1
 80222c6:	d14a      	bne.n	802235e <_printf_i+0x1f2>
 80222c8:	f04f 30ff 	mov.w	r0, #4294967295
 80222cc:	b004      	add	sp, #16
 80222ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80222d2:	6823      	ldr	r3, [r4, #0]
 80222d4:	f043 0320 	orr.w	r3, r3, #32
 80222d8:	6023      	str	r3, [r4, #0]
 80222da:	4833      	ldr	r0, [pc, #204]	@ (80223a8 <_printf_i+0x23c>)
 80222dc:	2778      	movs	r7, #120	@ 0x78
 80222de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80222e2:	6823      	ldr	r3, [r4, #0]
 80222e4:	6831      	ldr	r1, [r6, #0]
 80222e6:	061f      	lsls	r7, r3, #24
 80222e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80222ec:	d402      	bmi.n	80222f4 <_printf_i+0x188>
 80222ee:	065f      	lsls	r7, r3, #25
 80222f0:	bf48      	it	mi
 80222f2:	b2ad      	uxthmi	r5, r5
 80222f4:	6031      	str	r1, [r6, #0]
 80222f6:	07d9      	lsls	r1, r3, #31
 80222f8:	bf44      	itt	mi
 80222fa:	f043 0320 	orrmi.w	r3, r3, #32
 80222fe:	6023      	strmi	r3, [r4, #0]
 8022300:	b11d      	cbz	r5, 802230a <_printf_i+0x19e>
 8022302:	2310      	movs	r3, #16
 8022304:	e7ac      	b.n	8022260 <_printf_i+0xf4>
 8022306:	4827      	ldr	r0, [pc, #156]	@ (80223a4 <_printf_i+0x238>)
 8022308:	e7e9      	b.n	80222de <_printf_i+0x172>
 802230a:	6823      	ldr	r3, [r4, #0]
 802230c:	f023 0320 	bic.w	r3, r3, #32
 8022310:	6023      	str	r3, [r4, #0]
 8022312:	e7f6      	b.n	8022302 <_printf_i+0x196>
 8022314:	4616      	mov	r6, r2
 8022316:	e7bd      	b.n	8022294 <_printf_i+0x128>
 8022318:	6833      	ldr	r3, [r6, #0]
 802231a:	6825      	ldr	r5, [r4, #0]
 802231c:	6961      	ldr	r1, [r4, #20]
 802231e:	1d18      	adds	r0, r3, #4
 8022320:	6030      	str	r0, [r6, #0]
 8022322:	062e      	lsls	r6, r5, #24
 8022324:	681b      	ldr	r3, [r3, #0]
 8022326:	d501      	bpl.n	802232c <_printf_i+0x1c0>
 8022328:	6019      	str	r1, [r3, #0]
 802232a:	e002      	b.n	8022332 <_printf_i+0x1c6>
 802232c:	0668      	lsls	r0, r5, #25
 802232e:	d5fb      	bpl.n	8022328 <_printf_i+0x1bc>
 8022330:	8019      	strh	r1, [r3, #0]
 8022332:	2300      	movs	r3, #0
 8022334:	6123      	str	r3, [r4, #16]
 8022336:	4616      	mov	r6, r2
 8022338:	e7bc      	b.n	80222b4 <_printf_i+0x148>
 802233a:	6833      	ldr	r3, [r6, #0]
 802233c:	1d1a      	adds	r2, r3, #4
 802233e:	6032      	str	r2, [r6, #0]
 8022340:	681e      	ldr	r6, [r3, #0]
 8022342:	6862      	ldr	r2, [r4, #4]
 8022344:	2100      	movs	r1, #0
 8022346:	4630      	mov	r0, r6
 8022348:	f7dd ffe2 	bl	8000310 <memchr>
 802234c:	b108      	cbz	r0, 8022352 <_printf_i+0x1e6>
 802234e:	1b80      	subs	r0, r0, r6
 8022350:	6060      	str	r0, [r4, #4]
 8022352:	6863      	ldr	r3, [r4, #4]
 8022354:	6123      	str	r3, [r4, #16]
 8022356:	2300      	movs	r3, #0
 8022358:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802235c:	e7aa      	b.n	80222b4 <_printf_i+0x148>
 802235e:	6923      	ldr	r3, [r4, #16]
 8022360:	4632      	mov	r2, r6
 8022362:	4649      	mov	r1, r9
 8022364:	4640      	mov	r0, r8
 8022366:	47d0      	blx	sl
 8022368:	3001      	adds	r0, #1
 802236a:	d0ad      	beq.n	80222c8 <_printf_i+0x15c>
 802236c:	6823      	ldr	r3, [r4, #0]
 802236e:	079b      	lsls	r3, r3, #30
 8022370:	d413      	bmi.n	802239a <_printf_i+0x22e>
 8022372:	68e0      	ldr	r0, [r4, #12]
 8022374:	9b03      	ldr	r3, [sp, #12]
 8022376:	4298      	cmp	r0, r3
 8022378:	bfb8      	it	lt
 802237a:	4618      	movlt	r0, r3
 802237c:	e7a6      	b.n	80222cc <_printf_i+0x160>
 802237e:	2301      	movs	r3, #1
 8022380:	4632      	mov	r2, r6
 8022382:	4649      	mov	r1, r9
 8022384:	4640      	mov	r0, r8
 8022386:	47d0      	blx	sl
 8022388:	3001      	adds	r0, #1
 802238a:	d09d      	beq.n	80222c8 <_printf_i+0x15c>
 802238c:	3501      	adds	r5, #1
 802238e:	68e3      	ldr	r3, [r4, #12]
 8022390:	9903      	ldr	r1, [sp, #12]
 8022392:	1a5b      	subs	r3, r3, r1
 8022394:	42ab      	cmp	r3, r5
 8022396:	dcf2      	bgt.n	802237e <_printf_i+0x212>
 8022398:	e7eb      	b.n	8022372 <_printf_i+0x206>
 802239a:	2500      	movs	r5, #0
 802239c:	f104 0619 	add.w	r6, r4, #25
 80223a0:	e7f5      	b.n	802238e <_printf_i+0x222>
 80223a2:	bf00      	nop
 80223a4:	08025ea5 	.word	0x08025ea5
 80223a8:	08025eb6 	.word	0x08025eb6

080223ac <__swbuf_r>:
 80223ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80223ae:	460e      	mov	r6, r1
 80223b0:	4614      	mov	r4, r2
 80223b2:	4605      	mov	r5, r0
 80223b4:	b118      	cbz	r0, 80223be <__swbuf_r+0x12>
 80223b6:	6a03      	ldr	r3, [r0, #32]
 80223b8:	b90b      	cbnz	r3, 80223be <__swbuf_r+0x12>
 80223ba:	f7ff f9ef 	bl	802179c <__sinit>
 80223be:	69a3      	ldr	r3, [r4, #24]
 80223c0:	60a3      	str	r3, [r4, #8]
 80223c2:	89a3      	ldrh	r3, [r4, #12]
 80223c4:	071a      	lsls	r2, r3, #28
 80223c6:	d501      	bpl.n	80223cc <__swbuf_r+0x20>
 80223c8:	6923      	ldr	r3, [r4, #16]
 80223ca:	b943      	cbnz	r3, 80223de <__swbuf_r+0x32>
 80223cc:	4621      	mov	r1, r4
 80223ce:	4628      	mov	r0, r5
 80223d0:	f000 f82a 	bl	8022428 <__swsetup_r>
 80223d4:	b118      	cbz	r0, 80223de <__swbuf_r+0x32>
 80223d6:	f04f 37ff 	mov.w	r7, #4294967295
 80223da:	4638      	mov	r0, r7
 80223dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80223de:	6823      	ldr	r3, [r4, #0]
 80223e0:	6922      	ldr	r2, [r4, #16]
 80223e2:	1a98      	subs	r0, r3, r2
 80223e4:	6963      	ldr	r3, [r4, #20]
 80223e6:	b2f6      	uxtb	r6, r6
 80223e8:	4283      	cmp	r3, r0
 80223ea:	4637      	mov	r7, r6
 80223ec:	dc05      	bgt.n	80223fa <__swbuf_r+0x4e>
 80223ee:	4621      	mov	r1, r4
 80223f0:	4628      	mov	r0, r5
 80223f2:	f7ff fcbb 	bl	8021d6c <_fflush_r>
 80223f6:	2800      	cmp	r0, #0
 80223f8:	d1ed      	bne.n	80223d6 <__swbuf_r+0x2a>
 80223fa:	68a3      	ldr	r3, [r4, #8]
 80223fc:	3b01      	subs	r3, #1
 80223fe:	60a3      	str	r3, [r4, #8]
 8022400:	6823      	ldr	r3, [r4, #0]
 8022402:	1c5a      	adds	r2, r3, #1
 8022404:	6022      	str	r2, [r4, #0]
 8022406:	701e      	strb	r6, [r3, #0]
 8022408:	6962      	ldr	r2, [r4, #20]
 802240a:	1c43      	adds	r3, r0, #1
 802240c:	429a      	cmp	r2, r3
 802240e:	d004      	beq.n	802241a <__swbuf_r+0x6e>
 8022410:	89a3      	ldrh	r3, [r4, #12]
 8022412:	07db      	lsls	r3, r3, #31
 8022414:	d5e1      	bpl.n	80223da <__swbuf_r+0x2e>
 8022416:	2e0a      	cmp	r6, #10
 8022418:	d1df      	bne.n	80223da <__swbuf_r+0x2e>
 802241a:	4621      	mov	r1, r4
 802241c:	4628      	mov	r0, r5
 802241e:	f7ff fca5 	bl	8021d6c <_fflush_r>
 8022422:	2800      	cmp	r0, #0
 8022424:	d0d9      	beq.n	80223da <__swbuf_r+0x2e>
 8022426:	e7d6      	b.n	80223d6 <__swbuf_r+0x2a>

08022428 <__swsetup_r>:
 8022428:	b538      	push	{r3, r4, r5, lr}
 802242a:	4b29      	ldr	r3, [pc, #164]	@ (80224d0 <__swsetup_r+0xa8>)
 802242c:	4605      	mov	r5, r0
 802242e:	6818      	ldr	r0, [r3, #0]
 8022430:	460c      	mov	r4, r1
 8022432:	b118      	cbz	r0, 802243c <__swsetup_r+0x14>
 8022434:	6a03      	ldr	r3, [r0, #32]
 8022436:	b90b      	cbnz	r3, 802243c <__swsetup_r+0x14>
 8022438:	f7ff f9b0 	bl	802179c <__sinit>
 802243c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022440:	0719      	lsls	r1, r3, #28
 8022442:	d422      	bmi.n	802248a <__swsetup_r+0x62>
 8022444:	06da      	lsls	r2, r3, #27
 8022446:	d407      	bmi.n	8022458 <__swsetup_r+0x30>
 8022448:	2209      	movs	r2, #9
 802244a:	602a      	str	r2, [r5, #0]
 802244c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022450:	81a3      	strh	r3, [r4, #12]
 8022452:	f04f 30ff 	mov.w	r0, #4294967295
 8022456:	e033      	b.n	80224c0 <__swsetup_r+0x98>
 8022458:	0758      	lsls	r0, r3, #29
 802245a:	d512      	bpl.n	8022482 <__swsetup_r+0x5a>
 802245c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802245e:	b141      	cbz	r1, 8022472 <__swsetup_r+0x4a>
 8022460:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022464:	4299      	cmp	r1, r3
 8022466:	d002      	beq.n	802246e <__swsetup_r+0x46>
 8022468:	4628      	mov	r0, r5
 802246a:	f7ff fafb 	bl	8021a64 <_free_r>
 802246e:	2300      	movs	r3, #0
 8022470:	6363      	str	r3, [r4, #52]	@ 0x34
 8022472:	89a3      	ldrh	r3, [r4, #12]
 8022474:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8022478:	81a3      	strh	r3, [r4, #12]
 802247a:	2300      	movs	r3, #0
 802247c:	6063      	str	r3, [r4, #4]
 802247e:	6923      	ldr	r3, [r4, #16]
 8022480:	6023      	str	r3, [r4, #0]
 8022482:	89a3      	ldrh	r3, [r4, #12]
 8022484:	f043 0308 	orr.w	r3, r3, #8
 8022488:	81a3      	strh	r3, [r4, #12]
 802248a:	6923      	ldr	r3, [r4, #16]
 802248c:	b94b      	cbnz	r3, 80224a2 <__swsetup_r+0x7a>
 802248e:	89a3      	ldrh	r3, [r4, #12]
 8022490:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8022494:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8022498:	d003      	beq.n	80224a2 <__swsetup_r+0x7a>
 802249a:	4621      	mov	r1, r4
 802249c:	4628      	mov	r0, r5
 802249e:	f000 f883 	bl	80225a8 <__smakebuf_r>
 80224a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80224a6:	f013 0201 	ands.w	r2, r3, #1
 80224aa:	d00a      	beq.n	80224c2 <__swsetup_r+0x9a>
 80224ac:	2200      	movs	r2, #0
 80224ae:	60a2      	str	r2, [r4, #8]
 80224b0:	6962      	ldr	r2, [r4, #20]
 80224b2:	4252      	negs	r2, r2
 80224b4:	61a2      	str	r2, [r4, #24]
 80224b6:	6922      	ldr	r2, [r4, #16]
 80224b8:	b942      	cbnz	r2, 80224cc <__swsetup_r+0xa4>
 80224ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80224be:	d1c5      	bne.n	802244c <__swsetup_r+0x24>
 80224c0:	bd38      	pop	{r3, r4, r5, pc}
 80224c2:	0799      	lsls	r1, r3, #30
 80224c4:	bf58      	it	pl
 80224c6:	6962      	ldrpl	r2, [r4, #20]
 80224c8:	60a2      	str	r2, [r4, #8]
 80224ca:	e7f4      	b.n	80224b6 <__swsetup_r+0x8e>
 80224cc:	2000      	movs	r0, #0
 80224ce:	e7f7      	b.n	80224c0 <__swsetup_r+0x98>
 80224d0:	20000038 	.word	0x20000038

080224d4 <_raise_r>:
 80224d4:	291f      	cmp	r1, #31
 80224d6:	b538      	push	{r3, r4, r5, lr}
 80224d8:	4605      	mov	r5, r0
 80224da:	460c      	mov	r4, r1
 80224dc:	d904      	bls.n	80224e8 <_raise_r+0x14>
 80224de:	2316      	movs	r3, #22
 80224e0:	6003      	str	r3, [r0, #0]
 80224e2:	f04f 30ff 	mov.w	r0, #4294967295
 80224e6:	bd38      	pop	{r3, r4, r5, pc}
 80224e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80224ea:	b112      	cbz	r2, 80224f2 <_raise_r+0x1e>
 80224ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80224f0:	b94b      	cbnz	r3, 8022506 <_raise_r+0x32>
 80224f2:	4628      	mov	r0, r5
 80224f4:	f000 f830 	bl	8022558 <_getpid_r>
 80224f8:	4622      	mov	r2, r4
 80224fa:	4601      	mov	r1, r0
 80224fc:	4628      	mov	r0, r5
 80224fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022502:	f000 b817 	b.w	8022534 <_kill_r>
 8022506:	2b01      	cmp	r3, #1
 8022508:	d00a      	beq.n	8022520 <_raise_r+0x4c>
 802250a:	1c59      	adds	r1, r3, #1
 802250c:	d103      	bne.n	8022516 <_raise_r+0x42>
 802250e:	2316      	movs	r3, #22
 8022510:	6003      	str	r3, [r0, #0]
 8022512:	2001      	movs	r0, #1
 8022514:	e7e7      	b.n	80224e6 <_raise_r+0x12>
 8022516:	2100      	movs	r1, #0
 8022518:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802251c:	4620      	mov	r0, r4
 802251e:	4798      	blx	r3
 8022520:	2000      	movs	r0, #0
 8022522:	e7e0      	b.n	80224e6 <_raise_r+0x12>

08022524 <raise>:
 8022524:	4b02      	ldr	r3, [pc, #8]	@ (8022530 <raise+0xc>)
 8022526:	4601      	mov	r1, r0
 8022528:	6818      	ldr	r0, [r3, #0]
 802252a:	f7ff bfd3 	b.w	80224d4 <_raise_r>
 802252e:	bf00      	nop
 8022530:	20000038 	.word	0x20000038

08022534 <_kill_r>:
 8022534:	b538      	push	{r3, r4, r5, lr}
 8022536:	4d07      	ldr	r5, [pc, #28]	@ (8022554 <_kill_r+0x20>)
 8022538:	2300      	movs	r3, #0
 802253a:	4604      	mov	r4, r0
 802253c:	4608      	mov	r0, r1
 802253e:	4611      	mov	r1, r2
 8022540:	602b      	str	r3, [r5, #0]
 8022542:	f7df fc29 	bl	8001d98 <_kill>
 8022546:	1c43      	adds	r3, r0, #1
 8022548:	d102      	bne.n	8022550 <_kill_r+0x1c>
 802254a:	682b      	ldr	r3, [r5, #0]
 802254c:	b103      	cbz	r3, 8022550 <_kill_r+0x1c>
 802254e:	6023      	str	r3, [r4, #0]
 8022550:	bd38      	pop	{r3, r4, r5, pc}
 8022552:	bf00      	nop
 8022554:	20002520 	.word	0x20002520

08022558 <_getpid_r>:
 8022558:	f7df bc16 	b.w	8001d88 <_getpid>

0802255c <__swhatbuf_r>:
 802255c:	b570      	push	{r4, r5, r6, lr}
 802255e:	460c      	mov	r4, r1
 8022560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022564:	2900      	cmp	r1, #0
 8022566:	b096      	sub	sp, #88	@ 0x58
 8022568:	4615      	mov	r5, r2
 802256a:	461e      	mov	r6, r3
 802256c:	da0d      	bge.n	802258a <__swhatbuf_r+0x2e>
 802256e:	89a3      	ldrh	r3, [r4, #12]
 8022570:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8022574:	f04f 0100 	mov.w	r1, #0
 8022578:	bf14      	ite	ne
 802257a:	2340      	movne	r3, #64	@ 0x40
 802257c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8022580:	2000      	movs	r0, #0
 8022582:	6031      	str	r1, [r6, #0]
 8022584:	602b      	str	r3, [r5, #0]
 8022586:	b016      	add	sp, #88	@ 0x58
 8022588:	bd70      	pop	{r4, r5, r6, pc}
 802258a:	466a      	mov	r2, sp
 802258c:	f000 f848 	bl	8022620 <_fstat_r>
 8022590:	2800      	cmp	r0, #0
 8022592:	dbec      	blt.n	802256e <__swhatbuf_r+0x12>
 8022594:	9901      	ldr	r1, [sp, #4]
 8022596:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802259a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802259e:	4259      	negs	r1, r3
 80225a0:	4159      	adcs	r1, r3
 80225a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80225a6:	e7eb      	b.n	8022580 <__swhatbuf_r+0x24>

080225a8 <__smakebuf_r>:
 80225a8:	898b      	ldrh	r3, [r1, #12]
 80225aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80225ac:	079d      	lsls	r5, r3, #30
 80225ae:	4606      	mov	r6, r0
 80225b0:	460c      	mov	r4, r1
 80225b2:	d507      	bpl.n	80225c4 <__smakebuf_r+0x1c>
 80225b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80225b8:	6023      	str	r3, [r4, #0]
 80225ba:	6123      	str	r3, [r4, #16]
 80225bc:	2301      	movs	r3, #1
 80225be:	6163      	str	r3, [r4, #20]
 80225c0:	b003      	add	sp, #12
 80225c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80225c4:	ab01      	add	r3, sp, #4
 80225c6:	466a      	mov	r2, sp
 80225c8:	f7ff ffc8 	bl	802255c <__swhatbuf_r>
 80225cc:	9f00      	ldr	r7, [sp, #0]
 80225ce:	4605      	mov	r5, r0
 80225d0:	4639      	mov	r1, r7
 80225d2:	4630      	mov	r0, r6
 80225d4:	f7ff faba 	bl	8021b4c <_malloc_r>
 80225d8:	b948      	cbnz	r0, 80225ee <__smakebuf_r+0x46>
 80225da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80225de:	059a      	lsls	r2, r3, #22
 80225e0:	d4ee      	bmi.n	80225c0 <__smakebuf_r+0x18>
 80225e2:	f023 0303 	bic.w	r3, r3, #3
 80225e6:	f043 0302 	orr.w	r3, r3, #2
 80225ea:	81a3      	strh	r3, [r4, #12]
 80225ec:	e7e2      	b.n	80225b4 <__smakebuf_r+0xc>
 80225ee:	89a3      	ldrh	r3, [r4, #12]
 80225f0:	6020      	str	r0, [r4, #0]
 80225f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80225f6:	81a3      	strh	r3, [r4, #12]
 80225f8:	9b01      	ldr	r3, [sp, #4]
 80225fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80225fe:	b15b      	cbz	r3, 8022618 <__smakebuf_r+0x70>
 8022600:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022604:	4630      	mov	r0, r6
 8022606:	f000 f81d 	bl	8022644 <_isatty_r>
 802260a:	b128      	cbz	r0, 8022618 <__smakebuf_r+0x70>
 802260c:	89a3      	ldrh	r3, [r4, #12]
 802260e:	f023 0303 	bic.w	r3, r3, #3
 8022612:	f043 0301 	orr.w	r3, r3, #1
 8022616:	81a3      	strh	r3, [r4, #12]
 8022618:	89a3      	ldrh	r3, [r4, #12]
 802261a:	431d      	orrs	r5, r3
 802261c:	81a5      	strh	r5, [r4, #12]
 802261e:	e7cf      	b.n	80225c0 <__smakebuf_r+0x18>

08022620 <_fstat_r>:
 8022620:	b538      	push	{r3, r4, r5, lr}
 8022622:	4d07      	ldr	r5, [pc, #28]	@ (8022640 <_fstat_r+0x20>)
 8022624:	2300      	movs	r3, #0
 8022626:	4604      	mov	r4, r0
 8022628:	4608      	mov	r0, r1
 802262a:	4611      	mov	r1, r2
 802262c:	602b      	str	r3, [r5, #0]
 802262e:	f7df fc13 	bl	8001e58 <_fstat>
 8022632:	1c43      	adds	r3, r0, #1
 8022634:	d102      	bne.n	802263c <_fstat_r+0x1c>
 8022636:	682b      	ldr	r3, [r5, #0]
 8022638:	b103      	cbz	r3, 802263c <_fstat_r+0x1c>
 802263a:	6023      	str	r3, [r4, #0]
 802263c:	bd38      	pop	{r3, r4, r5, pc}
 802263e:	bf00      	nop
 8022640:	20002520 	.word	0x20002520

08022644 <_isatty_r>:
 8022644:	b538      	push	{r3, r4, r5, lr}
 8022646:	4d06      	ldr	r5, [pc, #24]	@ (8022660 <_isatty_r+0x1c>)
 8022648:	2300      	movs	r3, #0
 802264a:	4604      	mov	r4, r0
 802264c:	4608      	mov	r0, r1
 802264e:	602b      	str	r3, [r5, #0]
 8022650:	f7df fc12 	bl	8001e78 <_isatty>
 8022654:	1c43      	adds	r3, r0, #1
 8022656:	d102      	bne.n	802265e <_isatty_r+0x1a>
 8022658:	682b      	ldr	r3, [r5, #0]
 802265a:	b103      	cbz	r3, 802265e <_isatty_r+0x1a>
 802265c:	6023      	str	r3, [r4, #0]
 802265e:	bd38      	pop	{r3, r4, r5, pc}
 8022660:	20002520 	.word	0x20002520

08022664 <_init>:
 8022664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022666:	bf00      	nop
 8022668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802266a:	bc08      	pop	{r3}
 802266c:	469e      	mov	lr, r3
 802266e:	4770      	bx	lr

08022670 <_fini>:
 8022670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022672:	bf00      	nop
 8022674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022676:	bc08      	pop	{r3}
 8022678:	469e      	mov	lr, r3
 802267a:	4770      	bx	lr
